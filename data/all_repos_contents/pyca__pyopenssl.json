{"setup.py": "#!/usr/bin/env python\n#\n# Copyright (C) Jean-Paul Calderone 2008-2015, All rights reserved\n#\n\n\"\"\"\nInstallation script for the OpenSSL package.\n\"\"\"\n\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\nHERE = os.path.abspath(os.path.dirname(__file__))\nMETA_PATH = os.path.join(\"src\", \"OpenSSL\", \"version.py\")\n\n\ndef read_file(*parts):\n    \"\"\"\n    Build an absolute path from *parts* and return the contents of the\n    resulting file.  Assume UTF-8 encoding.\n    \"\"\"\n    with open(os.path.join(HERE, *parts), encoding=\"utf-8\", newline=None) as f:\n        return f.read()\n\n\nMETA_FILE = read_file(META_PATH)\n\n\ndef find_meta(meta):\n    \"\"\"\n    Extract __*meta*__ from META_FILE.\n    \"\"\"\n    meta_match = re.search(\n        rf\"^__{meta}__ = ['\\\"]([^'\\\"]*)['\\\"]\", META_FILE, re.M\n    )\n    if meta_match:\n        return meta_match.group(1)\n    raise RuntimeError(f\"Unable to find __{meta}__ string.\")\n\n\nURI = find_meta(\"uri\")\nLONG = (\n    read_file(\"README.rst\")\n    + \"\\n\\n\"\n    + \"Release Information\\n\"\n    + \"===================\\n\\n\"\n    + re.search(\n        r\"(\\d{2}.\\d.\\d \\(.*?\\)\\n.*?)\\n\\n\\n----\\n\",\n        read_file(\"CHANGELOG.rst\"),\n        re.S,\n    ).group(1)\n    + \"\\n\\n`Full changelog \"\n    + \"<{uri}en/stable/changelog.html>`_.\\n\\n\"\n).format(uri=URI)\n\n\nif __name__ == \"__main__\":\n    setup(\n        name=find_meta(\"title\"),\n        version=find_meta(\"version\"),\n        description=find_meta(\"summary\"),\n        long_description=LONG,\n        author=find_meta(\"author\"),\n        author_email=find_meta(\"email\"),\n        url=URI,\n        project_urls={\n            \"Source\": \"https://github.com/pyca/pyopenssl\",\n        },\n        license=find_meta(\"license\"),\n        classifiers=[\n            \"Development Status :: 6 - Mature\",\n            \"Intended Audience :: Developers\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: MacOS :: MacOS X\",\n            \"Operating System :: Microsoft :: Windows\",\n            \"Operating System :: POSIX\",\n            \"Programming Language :: Python :: 3\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"Programming Language :: Python :: 3.11\",\n            \"Programming Language :: Python :: 3.12\",\n            \"Programming Language :: Python :: Implementation :: CPython\",\n            \"Programming Language :: Python :: Implementation :: PyPy\",\n            \"Topic :: Security :: Cryptography\",\n            \"Topic :: Software Development :: Libraries :: Python Modules\",\n            \"Topic :: System :: Networking\",\n        ],\n        python_requires=\">=3.7\",\n        packages=find_packages(where=\"src\"),\n        package_dir={\"\": \"src\"},\n        install_requires=[\n            \"cryptography>=41.0.5,<43\",\n        ],\n        extras_require={\n            \"test\": [\"pytest-rerunfailures\", \"pretend\", \"pytest>=3.0.1\"],\n            \"docs\": [\n                \"sphinx!=5.2.0,!=5.2.0.post0,!=7.2.5\",\n                \"sphinx_rtd_theme\",\n            ],\n        },\n    )\n", "src/OpenSSL/debug.py": "import ssl\nimport sys\n\nimport cffi\nimport cryptography\n\nimport OpenSSL.SSL\n\nfrom . import version\n\n_env_info = \"\"\"\\\npyOpenSSL: {pyopenssl}\ncryptography: {cryptography}\ncffi: {cffi}\ncryptography's compiled against OpenSSL: {crypto_openssl_compile}\ncryptography's linked OpenSSL: {crypto_openssl_link}\nPython's OpenSSL: {python_openssl}\nPython executable: {python}\nPython version: {python_version}\nPlatform: {platform}\nsys.path: {sys_path}\"\"\".format(\n    pyopenssl=version.__version__,\n    crypto_openssl_compile=OpenSSL._util.ffi.string(\n        OpenSSL._util.lib.OPENSSL_VERSION_TEXT,\n    ).decode(\"ascii\"),\n    crypto_openssl_link=OpenSSL.SSL.SSLeay_version(\n        OpenSSL.SSL.SSLEAY_VERSION\n    ).decode(\"ascii\"),\n    python_openssl=getattr(ssl, \"OPENSSL_VERSION\", \"n/a\"),\n    cryptography=cryptography.__version__,\n    cffi=cffi.__version__,\n    python=sys.executable,\n    python_version=sys.version,\n    platform=sys.platform,\n    sys_path=sys.path,\n)\n\n\nif __name__ == \"__main__\":\n    print(_env_info)\n", "src/OpenSSL/version.py": "# Copyright (C) AB Strakt\n# Copyright (C) Jean-Paul Calderone\n# See LICENSE for details.\n\n\"\"\"\npyOpenSSL - A simple wrapper around the OpenSSL library\n\"\"\"\n\n__all__ = [\n    \"__author__\",\n    \"__copyright__\",\n    \"__email__\",\n    \"__license__\",\n    \"__summary__\",\n    \"__title__\",\n    \"__uri__\",\n    \"__version__\",\n]\n\n__version__ = \"24.1.0\"\n\n__title__ = \"pyOpenSSL\"\n__uri__ = \"https://pyopenssl.org/\"\n__summary__ = \"Python wrapper module around the OpenSSL library\"\n__author__ = \"The pyOpenSSL developers\"\n__email__ = \"cryptography-dev@python.org\"\n__license__ = \"Apache License, Version 2.0\"\n__copyright__ = f\"Copyright 2001-2024 {__author__}\"\n", "src/OpenSSL/rand.py": "\"\"\"\nPRNG management routines, thin wrappers.\n\"\"\"\n\nfrom OpenSSL._util import lib as _lib\n\n\ndef add(buffer: bytes, entropy: int) -> None:\n    \"\"\"\n    Mix bytes from *string* into the PRNG state.\n\n    The *entropy* argument is (the lower bound of) an estimate of how much\n    randomness is contained in *string*, measured in bytes.\n\n    For more information, see e.g. :rfc:`1750`.\n\n    This function is only relevant if you are forking Python processes and\n    need to reseed the CSPRNG after fork.\n\n    :param buffer: Buffer with random data.\n    :param entropy: The entropy (in bytes) measurement of the buffer.\n\n    :return: :obj:`None`\n    \"\"\"\n    if not isinstance(buffer, bytes):\n        raise TypeError(\"buffer must be a byte string\")\n\n    if not isinstance(entropy, int):\n        raise TypeError(\"entropy must be an integer\")\n\n    _lib.RAND_add(buffer, len(buffer), entropy)\n\n\ndef status() -> int:\n    \"\"\"\n    Check whether the PRNG has been seeded with enough data.\n\n    :return: 1 if the PRNG is seeded enough, 0 otherwise.\n    \"\"\"\n    return _lib.RAND_status()\n", "src/OpenSSL/crypto.py": "import calendar\nimport datetime\nimport functools\nimport typing\nfrom base64 import b16encode\nfrom functools import partial\nfrom os import PathLike\nfrom typing import (\n    Any,\n    Callable,\n    Iterable,\n    List,\n    NoReturn,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom cryptography import utils, x509\nfrom cryptography.hazmat.primitives.asymmetric import (\n    dsa,\n    ec,\n    ed448,\n    ed25519,\n    rsa,\n)\n\nfrom OpenSSL._util import (\n    UNSPECIFIED as _UNSPECIFIED,\n)\nfrom OpenSSL._util import (\n    byte_string as _byte_string,\n)\nfrom OpenSSL._util import (\n    exception_from_error_queue as _exception_from_error_queue,\n)\nfrom OpenSSL._util import (\n    ffi as _ffi,\n)\nfrom OpenSSL._util import (\n    lib as _lib,\n)\nfrom OpenSSL._util import (\n    make_assert as _make_assert,\n)\nfrom OpenSSL._util import (\n    path_bytes as _path_bytes,\n)\nfrom OpenSSL._util import (\n    text_to_bytes_and_warn as _text_to_bytes_and_warn,\n)\n\n__all__ = [\n    \"FILETYPE_PEM\",\n    \"FILETYPE_ASN1\",\n    \"FILETYPE_TEXT\",\n    \"TYPE_RSA\",\n    \"TYPE_DSA\",\n    \"Error\",\n    \"PKey\",\n    \"get_elliptic_curves\",\n    \"get_elliptic_curve\",\n    \"X509Name\",\n    \"X509Extension\",\n    \"X509Req\",\n    \"X509\",\n    \"X509StoreFlags\",\n    \"X509Store\",\n    \"X509StoreContextError\",\n    \"X509StoreContext\",\n    \"load_certificate\",\n    \"dump_certificate\",\n    \"dump_publickey\",\n    \"dump_privatekey\",\n    \"Revoked\",\n    \"CRL\",\n    \"load_publickey\",\n    \"load_privatekey\",\n    \"dump_certificate_request\",\n    \"load_certificate_request\",\n    \"sign\",\n    \"verify\",\n    \"dump_crl\",\n    \"load_crl\",\n]\n\n\n_Key = Union[\n    dsa.DSAPrivateKey,\n    dsa.DSAPublicKey,\n    ec.EllipticCurvePrivateKey,\n    ec.EllipticCurvePublicKey,\n    ed25519.Ed25519PrivateKey,\n    ed25519.Ed25519PublicKey,\n    ed448.Ed448PrivateKey,\n    ed448.Ed448PublicKey,\n    rsa.RSAPrivateKey,\n    rsa.RSAPublicKey,\n]\nStrOrBytesPath = Union[str, bytes, PathLike]\nPassphraseCallableT = Union[bytes, Callable[..., bytes]]\n\n\nFILETYPE_PEM: int = _lib.SSL_FILETYPE_PEM\nFILETYPE_ASN1: int = _lib.SSL_FILETYPE_ASN1\n\n# TODO This was an API mistake.  OpenSSL has no such constant.\nFILETYPE_TEXT = 2**16 - 1\n\nTYPE_RSA: int = _lib.EVP_PKEY_RSA\nTYPE_DSA: int = _lib.EVP_PKEY_DSA\nTYPE_DH: int = _lib.EVP_PKEY_DH\nTYPE_EC: int = _lib.EVP_PKEY_EC\n\n\nclass Error(Exception):\n    \"\"\"\n    An error occurred in an `OpenSSL.crypto` API.\n    \"\"\"\n\n\n_raise_current_error = partial(_exception_from_error_queue, Error)\n_openssl_assert = _make_assert(Error)\n\n\ndef _untested_error(where: str) -> NoReturn:\n    \"\"\"\n    An OpenSSL API failed somehow.  Additionally, the failure which was\n    encountered isn't one that's exercised by the test suite so future behavior\n    of pyOpenSSL is now somewhat less predictable.\n    \"\"\"\n    raise RuntimeError(f\"Unknown {where} failure\")\n\n\ndef _new_mem_buf(buffer: Optional[bytes] = None) -> Any:\n    \"\"\"\n    Allocate a new OpenSSL memory BIO.\n\n    Arrange for the garbage collector to clean it up automatically.\n\n    :param buffer: None or some bytes to use to put into the BIO so that they\n        can be read out.\n    \"\"\"\n    if buffer is None:\n        bio = _lib.BIO_new(_lib.BIO_s_mem())\n        free = _lib.BIO_free\n    else:\n        data = _ffi.new(\"char[]\", buffer)\n        bio = _lib.BIO_new_mem_buf(data, len(buffer))\n\n        # Keep the memory alive as long as the bio is alive!\n        def free(bio: Any, ref: Any = data) -> Any:\n            return _lib.BIO_free(bio)\n\n    _openssl_assert(bio != _ffi.NULL)\n\n    bio = _ffi.gc(bio, free)\n    return bio\n\n\ndef _bio_to_string(bio: Any) -> bytes:\n    \"\"\"\n    Copy the contents of an OpenSSL BIO object into a Python byte string.\n    \"\"\"\n    result_buffer = _ffi.new(\"char**\")\n    buffer_length = _lib.BIO_get_mem_data(bio, result_buffer)\n    return _ffi.buffer(result_buffer[0], buffer_length)[:]\n\n\ndef _set_asn1_time(boundary: Any, when: bytes) -> None:\n    \"\"\"\n    The the time value of an ASN1 time object.\n\n    @param boundary: An ASN1_TIME pointer (or an object safely\n        castable to that type) which will have its value set.\n    @param when: A string representation of the desired time value.\n\n    @raise TypeError: If C{when} is not a L{bytes} string.\n    @raise ValueError: If C{when} does not represent a time in the required\n        format.\n    @raise RuntimeError: If the time value cannot be set for some other\n        (unspecified) reason.\n    \"\"\"\n    if not isinstance(when, bytes):\n        raise TypeError(\"when must be a byte string\")\n    # ASN1_TIME_set_string validates the string without writing anything\n    # when the destination is NULL.\n    _openssl_assert(boundary != _ffi.NULL)\n\n    set_result = _lib.ASN1_TIME_set_string(boundary, when)\n    if set_result == 0:\n        raise ValueError(\"Invalid string\")\n\n\ndef _new_asn1_time(when: bytes) -> Any:\n    \"\"\"\n    Behaves like _set_asn1_time but returns a new ASN1_TIME object.\n\n    @param when: A string representation of the desired time value.\n\n    @raise TypeError: If C{when} is not a L{bytes} string.\n    @raise ValueError: If C{when} does not represent a time in the required\n        format.\n    @raise RuntimeError: If the time value cannot be set for some other\n        (unspecified) reason.\n    \"\"\"\n    ret = _lib.ASN1_TIME_new()\n    _openssl_assert(ret != _ffi.NULL)\n    ret = _ffi.gc(ret, _lib.ASN1_TIME_free)\n    _set_asn1_time(ret, when)\n    return ret\n\n\ndef _get_asn1_time(timestamp: Any) -> Optional[bytes]:\n    \"\"\"\n    Retrieve the time value of an ASN1 time object.\n\n    @param timestamp: An ASN1_GENERALIZEDTIME* (or an object safely castable to\n        that type) from which the time value will be retrieved.\n\n    @return: The time value from C{timestamp} as a L{bytes} string in a certain\n        format.  Or C{None} if the object contains no time value.\n    \"\"\"\n    string_timestamp = _ffi.cast(\"ASN1_STRING*\", timestamp)\n    if _lib.ASN1_STRING_length(string_timestamp) == 0:\n        return None\n    elif (\n        _lib.ASN1_STRING_type(string_timestamp) == _lib.V_ASN1_GENERALIZEDTIME\n    ):\n        return _ffi.string(_lib.ASN1_STRING_get0_data(string_timestamp))\n    else:\n        generalized_timestamp = _ffi.new(\"ASN1_GENERALIZEDTIME**\")\n        _lib.ASN1_TIME_to_generalizedtime(timestamp, generalized_timestamp)\n        if generalized_timestamp[0] == _ffi.NULL:\n            # This may happen:\n            #   - if timestamp was not an ASN1_TIME\n            #   - if allocating memory for the ASN1_GENERALIZEDTIME failed\n            #   - if a copy of the time data from timestamp cannot be made for\n            #     the newly allocated ASN1_GENERALIZEDTIME\n            #\n            # These are difficult to test.  cffi enforces the ASN1_TIME type.\n            # Memory allocation failures are a pain to trigger\n            # deterministically.\n            _untested_error(\"ASN1_TIME_to_generalizedtime\")\n        else:\n            string_timestamp = _ffi.cast(\n                \"ASN1_STRING*\", generalized_timestamp[0]\n            )\n            string_data = _lib.ASN1_STRING_get0_data(string_timestamp)\n            string_result = _ffi.string(string_data)\n            _lib.ASN1_GENERALIZEDTIME_free(generalized_timestamp[0])\n            return string_result\n\n\nclass _X509NameInvalidator:\n    def __init__(self) -> None:\n        self._names: List[X509Name] = []\n\n    def add(self, name: \"X509Name\") -> None:\n        self._names.append(name)\n\n    def clear(self) -> None:\n        for name in self._names:\n            # Breaks the object, but also prevents UAF!\n            del name._name\n\n\nclass PKey:\n    \"\"\"\n    A class representing an DSA or RSA public key or key pair.\n    \"\"\"\n\n    _only_public = False\n    _initialized = True\n\n    def __init__(self) -> None:\n        pkey = _lib.EVP_PKEY_new()\n        self._pkey = _ffi.gc(pkey, _lib.EVP_PKEY_free)\n        self._initialized = False\n\n    def to_cryptography_key(self) -> _Key:\n        \"\"\"\n        Export as a ``cryptography`` key.\n\n        :rtype: One of ``cryptography``'s `key interfaces`_.\n\n        .. _key interfaces: https://cryptography.io/en/latest/hazmat/\\\n            primitives/asymmetric/rsa/#key-interfaces\n\n        .. versionadded:: 16.1.0\n        \"\"\"\n        from cryptography.hazmat.primitives.serialization import (\n            load_der_private_key,\n            load_der_public_key,\n        )\n\n        if self._only_public:\n            der = dump_publickey(FILETYPE_ASN1, self)\n            return load_der_public_key(der)\n        else:\n            der = dump_privatekey(FILETYPE_ASN1, self)\n            return load_der_private_key(der, None)\n\n    @classmethod\n    def from_cryptography_key(cls, crypto_key: _Key) -> \"PKey\":\n        \"\"\"\n        Construct based on a ``cryptography`` *crypto_key*.\n\n        :param crypto_key: A ``cryptography`` key.\n        :type crypto_key: One of ``cryptography``'s `key interfaces`_.\n\n        :rtype: PKey\n\n        .. versionadded:: 16.1.0\n        \"\"\"\n        if not isinstance(\n            crypto_key,\n            (\n                dsa.DSAPrivateKey,\n                dsa.DSAPublicKey,\n                ec.EllipticCurvePrivateKey,\n                ec.EllipticCurvePublicKey,\n                ed25519.Ed25519PrivateKey,\n                ed25519.Ed25519PublicKey,\n                ed448.Ed448PrivateKey,\n                ed448.Ed448PublicKey,\n                rsa.RSAPrivateKey,\n                rsa.RSAPublicKey,\n            ),\n        ):\n            raise TypeError(\"Unsupported key type\")\n\n        from cryptography.hazmat.primitives.serialization import (\n            Encoding,\n            NoEncryption,\n            PrivateFormat,\n            PublicFormat,\n        )\n\n        if isinstance(\n            crypto_key,\n            (\n                dsa.DSAPublicKey,\n                ec.EllipticCurvePublicKey,\n                ed25519.Ed25519PublicKey,\n                ed448.Ed448PublicKey,\n                rsa.RSAPublicKey,\n            ),\n        ):\n            return load_publickey(\n                FILETYPE_ASN1,\n                crypto_key.public_bytes(\n                    Encoding.DER, PublicFormat.SubjectPublicKeyInfo\n                ),\n            )\n        else:\n            der = crypto_key.private_bytes(\n                Encoding.DER, PrivateFormat.PKCS8, NoEncryption()\n            )\n            return load_privatekey(FILETYPE_ASN1, der)\n\n    def generate_key(self, type: int, bits: int) -> None:\n        \"\"\"\n        Generate a key pair of the given type, with the given number of bits.\n\n        This generates a key \"into\" the this object.\n\n        :param type: The key type.\n        :type type: :py:data:`TYPE_RSA` or :py:data:`TYPE_DSA`\n        :param bits: The number of bits.\n        :type bits: :py:data:`int` ``>= 0``\n        :raises TypeError: If :py:data:`type` or :py:data:`bits` isn't\n            of the appropriate type.\n        :raises ValueError: If the number of bits isn't an integer of\n            the appropriate size.\n        :return: ``None``\n        \"\"\"\n        if not isinstance(type, int):\n            raise TypeError(\"type must be an integer\")\n\n        if not isinstance(bits, int):\n            raise TypeError(\"bits must be an integer\")\n\n        if type == TYPE_RSA:\n            if bits <= 0:\n                raise ValueError(\"Invalid number of bits\")\n\n            # TODO Check error return\n            exponent = _lib.BN_new()\n            exponent = _ffi.gc(exponent, _lib.BN_free)\n            _lib.BN_set_word(exponent, _lib.RSA_F4)\n\n            rsa = _lib.RSA_new()\n\n            result = _lib.RSA_generate_key_ex(rsa, bits, exponent, _ffi.NULL)\n            _openssl_assert(result == 1)\n\n            result = _lib.EVP_PKEY_assign_RSA(self._pkey, rsa)\n            _openssl_assert(result == 1)\n\n        elif type == TYPE_DSA:\n            dsa = _lib.DSA_new()\n            _openssl_assert(dsa != _ffi.NULL)\n\n            dsa = _ffi.gc(dsa, _lib.DSA_free)\n            res = _lib.DSA_generate_parameters_ex(\n                dsa, bits, _ffi.NULL, 0, _ffi.NULL, _ffi.NULL, _ffi.NULL\n            )\n            _openssl_assert(res == 1)\n\n            _openssl_assert(_lib.DSA_generate_key(dsa) == 1)\n            _openssl_assert(_lib.EVP_PKEY_set1_DSA(self._pkey, dsa) == 1)\n        else:\n            raise Error(\"No such key type\")\n\n        self._initialized = True\n\n    def check(self) -> bool:\n        \"\"\"\n        Check the consistency of an RSA private key.\n\n        This is the Python equivalent of OpenSSL's ``RSA_check_key``.\n\n        :return: ``True`` if key is consistent.\n\n        :raise OpenSSL.crypto.Error: if the key is inconsistent.\n\n        :raise TypeError: if the key is of a type which cannot be checked.\n            Only RSA keys can currently be checked.\n        \"\"\"\n        if self._only_public:\n            raise TypeError(\"public key only\")\n\n        if _lib.EVP_PKEY_type(self.type()) != _lib.EVP_PKEY_RSA:\n            raise TypeError(\"Only RSA keys can currently be checked.\")\n\n        rsa = _lib.EVP_PKEY_get1_RSA(self._pkey)\n        rsa = _ffi.gc(rsa, _lib.RSA_free)\n        result = _lib.RSA_check_key(rsa)\n        if result == 1:\n            return True\n        _raise_current_error()\n\n    def type(self) -> int:\n        \"\"\"\n        Returns the type of the key\n\n        :return: The type of the key.\n        \"\"\"\n        return _lib.EVP_PKEY_id(self._pkey)\n\n    def bits(self) -> int:\n        \"\"\"\n        Returns the number of bits of the key\n\n        :return: The number of bits of the key.\n        \"\"\"\n        return _lib.EVP_PKEY_bits(self._pkey)\n\n\nclass _EllipticCurve:\n    \"\"\"\n    A representation of a supported elliptic curve.\n\n    @cvar _curves: :py:obj:`None` until an attempt is made to load the curves.\n        Thereafter, a :py:type:`set` containing :py:type:`_EllipticCurve`\n        instances each of which represents one curve supported by the system.\n    @type _curves: :py:type:`NoneType` or :py:type:`set`\n    \"\"\"\n\n    _curves = None\n\n    def __ne__(self, other: Any) -> bool:\n        \"\"\"\n        Implement cooperation with the right-hand side argument of ``!=``.\n\n        Python 3 seems to have dropped this cooperation in this very narrow\n        circumstance.\n        \"\"\"\n        if isinstance(other, _EllipticCurve):\n            return super().__ne__(other)\n        return NotImplemented\n\n    @classmethod\n    def _load_elliptic_curves(cls, lib: Any) -> Set[\"_EllipticCurve\"]:\n        \"\"\"\n        Get the curves supported by OpenSSL.\n\n        :param lib: The OpenSSL library binding object.\n\n        :return: A :py:type:`set` of ``cls`` instances giving the names of the\n            elliptic curves the underlying library supports.\n        \"\"\"\n        num_curves = lib.EC_get_builtin_curves(_ffi.NULL, 0)\n        builtin_curves = _ffi.new(\"EC_builtin_curve[]\", num_curves)\n        # The return value on this call should be num_curves again.  We\n        # could check it to make sure but if it *isn't* then.. what could\n        # we do? Abort the whole process, I suppose...?  -exarkun\n        lib.EC_get_builtin_curves(builtin_curves, num_curves)\n        return set(cls.from_nid(lib, c.nid) for c in builtin_curves)\n\n    @classmethod\n    def _get_elliptic_curves(cls, lib: Any) -> Set[\"_EllipticCurve\"]:\n        \"\"\"\n        Get, cache, and return the curves supported by OpenSSL.\n\n        :param lib: The OpenSSL library binding object.\n\n        :return: A :py:type:`set` of ``cls`` instances giving the names of the\n            elliptic curves the underlying library supports.\n        \"\"\"\n        if cls._curves is None:\n            cls._curves = cls._load_elliptic_curves(lib)\n        return cls._curves\n\n    @classmethod\n    def from_nid(cls, lib: Any, nid: int) -> \"_EllipticCurve\":\n        \"\"\"\n        Instantiate a new :py:class:`_EllipticCurve` associated with the given\n        OpenSSL NID.\n\n        :param lib: The OpenSSL library binding object.\n\n        :param nid: The OpenSSL NID the resulting curve object will represent.\n            This must be a curve NID (and not, for example, a hash NID) or\n            subsequent operations will fail in unpredictable ways.\n        :type nid: :py:class:`int`\n\n        :return: The curve object.\n        \"\"\"\n        return cls(lib, nid, _ffi.string(lib.OBJ_nid2sn(nid)).decode(\"ascii\"))\n\n    def __init__(self, lib: Any, nid: int, name: str) -> None:\n        \"\"\"\n        :param _lib: The :py:mod:`cryptography` binding instance used to\n            interface with OpenSSL.\n\n        :param _nid: The OpenSSL NID identifying the curve this object\n            represents.\n        :type _nid: :py:class:`int`\n\n        :param name: The OpenSSL short name identifying the curve this object\n            represents.\n        :type name: :py:class:`unicode`\n        \"\"\"\n        self._lib = lib\n        self._nid = nid\n        self.name = name\n\n    def __repr__(self) -> str:\n        return f\"<Curve {self.name!r}>\"\n\n    def _to_EC_KEY(self) -> Any:\n        \"\"\"\n        Create a new OpenSSL EC_KEY structure initialized to use this curve.\n\n        The structure is automatically garbage collected when the Python object\n        is garbage collected.\n        \"\"\"\n        key = self._lib.EC_KEY_new_by_curve_name(self._nid)\n        return _ffi.gc(key, _lib.EC_KEY_free)\n\n\ndef get_elliptic_curves() -> Set[\"_EllipticCurve\"]:\n    \"\"\"\n    Return a set of objects representing the elliptic curves supported in the\n    OpenSSL build in use.\n\n    The curve objects have a :py:class:`unicode` ``name`` attribute by which\n    they identify themselves.\n\n    The curve objects are useful as values for the argument accepted by\n    :py:meth:`Context.set_tmp_ecdh` to specify which elliptical curve should be\n    used for ECDHE key exchange.\n    \"\"\"\n    return _EllipticCurve._get_elliptic_curves(_lib)\n\n\ndef get_elliptic_curve(name: str) -> _EllipticCurve:\n    \"\"\"\n    Return a single curve object selected by name.\n\n    See :py:func:`get_elliptic_curves` for information about curve objects.\n\n    :param name: The OpenSSL short name identifying the curve object to\n        retrieve.\n    :type name: :py:class:`unicode`\n\n    If the named curve is not supported then :py:class:`ValueError` is raised.\n    \"\"\"\n    for curve in get_elliptic_curves():\n        if curve.name == name:\n            return curve\n    raise ValueError(\"unknown curve name\", name)\n\n\n@functools.total_ordering\nclass X509Name:\n    \"\"\"\n    An X.509 Distinguished Name.\n\n    :ivar countryName: The country of the entity.\n    :ivar C: Alias for  :py:attr:`countryName`.\n\n    :ivar stateOrProvinceName: The state or province of the entity.\n    :ivar ST: Alias for :py:attr:`stateOrProvinceName`.\n\n    :ivar localityName: The locality of the entity.\n    :ivar L: Alias for :py:attr:`localityName`.\n\n    :ivar organizationName: The organization name of the entity.\n    :ivar O: Alias for :py:attr:`organizationName`.\n\n    :ivar organizationalUnitName: The organizational unit of the entity.\n    :ivar OU: Alias for :py:attr:`organizationalUnitName`\n\n    :ivar commonName: The common name of the entity.\n    :ivar CN: Alias for :py:attr:`commonName`.\n\n    :ivar emailAddress: The e-mail address of the entity.\n    \"\"\"\n\n    def __init__(self, name: \"X509Name\") -> None:\n        \"\"\"\n        Create a new X509Name, copying the given X509Name instance.\n\n        :param name: The name to copy.\n        :type name: :py:class:`X509Name`\n        \"\"\"\n        name = _lib.X509_NAME_dup(name._name)\n        self._name: Any = _ffi.gc(name, _lib.X509_NAME_free)\n\n    def __setattr__(self, name: str, value: Any) -> None:\n        if name.startswith(\"_\"):\n            return super().__setattr__(name, value)\n\n        # Note: we really do not want str subclasses here, so we do not use\n        # isinstance.\n        if type(name) is not str:  # noqa: E721\n            raise TypeError(\n                f\"attribute name must be string, not \"\n                f\"'{type(value).__name__:.200}'\"\n            )\n\n        nid = _lib.OBJ_txt2nid(_byte_string(name))\n        if nid == _lib.NID_undef:\n            try:\n                _raise_current_error()\n            except Error:\n                pass\n            raise AttributeError(\"No such attribute\")\n\n        # If there's an old entry for this NID, remove it\n        for i in range(_lib.X509_NAME_entry_count(self._name)):\n            ent = _lib.X509_NAME_get_entry(self._name, i)\n            ent_obj = _lib.X509_NAME_ENTRY_get_object(ent)\n            ent_nid = _lib.OBJ_obj2nid(ent_obj)\n            if nid == ent_nid:\n                ent = _lib.X509_NAME_delete_entry(self._name, i)\n                _lib.X509_NAME_ENTRY_free(ent)\n                break\n\n        if isinstance(value, str):\n            value = value.encode(\"utf-8\")\n\n        add_result = _lib.X509_NAME_add_entry_by_NID(\n            self._name, nid, _lib.MBSTRING_UTF8, value, -1, -1, 0\n        )\n        if not add_result:\n            _raise_current_error()\n\n    def __getattr__(self, name: str) -> Optional[str]:\n        \"\"\"\n        Find attribute. An X509Name object has the following attributes:\n        countryName (alias C), stateOrProvince (alias ST), locality (alias L),\n        organization (alias O), organizationalUnit (alias OU), commonName\n        (alias CN) and more...\n        \"\"\"\n        nid = _lib.OBJ_txt2nid(_byte_string(name))\n        if nid == _lib.NID_undef:\n            # This is a bit weird.  OBJ_txt2nid indicated failure, but it seems\n            # a lower level function, a2d_ASN1_OBJECT, also feels the need to\n            # push something onto the error queue.  If we don't clean that up\n            # now, someone else will bump into it later and be quite confused.\n            # See lp#314814.\n            try:\n                _raise_current_error()\n            except Error:\n                pass\n            raise AttributeError(\"No such attribute\")\n\n        entry_index = _lib.X509_NAME_get_index_by_NID(self._name, nid, -1)\n        if entry_index == -1:\n            return None\n\n        entry = _lib.X509_NAME_get_entry(self._name, entry_index)\n        data = _lib.X509_NAME_ENTRY_get_data(entry)\n\n        result_buffer = _ffi.new(\"unsigned char**\")\n        data_length = _lib.ASN1_STRING_to_UTF8(result_buffer, data)\n        _openssl_assert(data_length >= 0)\n\n        try:\n            result = _ffi.buffer(result_buffer[0], data_length)[:].decode(\n                \"utf-8\"\n            )\n        finally:\n            # XXX untested\n            _lib.OPENSSL_free(result_buffer[0])\n        return result\n\n    def __eq__(self, other: Any) -> bool:\n        if not isinstance(other, X509Name):\n            return NotImplemented\n\n        return _lib.X509_NAME_cmp(self._name, other._name) == 0\n\n    def __lt__(self, other: Any) -> bool:\n        if not isinstance(other, X509Name):\n            return NotImplemented\n\n        return _lib.X509_NAME_cmp(self._name, other._name) < 0\n\n    def __repr__(self) -> str:\n        \"\"\"\n        String representation of an X509Name\n        \"\"\"\n        result_buffer = _ffi.new(\"char[]\", 512)\n        format_result = _lib.X509_NAME_oneline(\n            self._name, result_buffer, len(result_buffer)\n        )\n        _openssl_assert(format_result != _ffi.NULL)\n\n        return \"<X509Name object '{}'>\".format(\n            _ffi.string(result_buffer).decode(\"utf-8\"),\n        )\n\n    def hash(self) -> int:\n        \"\"\"\n        Return an integer representation of the first four bytes of the\n        MD5 digest of the DER representation of the name.\n\n        This is the Python equivalent of OpenSSL's ``X509_NAME_hash``.\n\n        :return: The (integer) hash of this name.\n        :rtype: :py:class:`int`\n        \"\"\"\n        return _lib.X509_NAME_hash(self._name)\n\n    def der(self) -> bytes:\n        \"\"\"\n        Return the DER encoding of this name.\n\n        :return: The DER encoded form of this name.\n        :rtype: :py:class:`bytes`\n        \"\"\"\n        result_buffer = _ffi.new(\"unsigned char**\")\n        encode_result = _lib.i2d_X509_NAME(self._name, result_buffer)\n        _openssl_assert(encode_result >= 0)\n\n        string_result = _ffi.buffer(result_buffer[0], encode_result)[:]\n        _lib.OPENSSL_free(result_buffer[0])\n        return string_result\n\n    def get_components(self) -> List[Tuple[bytes, bytes]]:\n        \"\"\"\n        Returns the components of this name, as a sequence of 2-tuples.\n\n        :return: The components of this name.\n        :rtype: :py:class:`list` of ``name, value`` tuples.\n        \"\"\"\n        result = []\n        for i in range(_lib.X509_NAME_entry_count(self._name)):\n            ent = _lib.X509_NAME_get_entry(self._name, i)\n\n            fname = _lib.X509_NAME_ENTRY_get_object(ent)\n            fval = _lib.X509_NAME_ENTRY_get_data(ent)\n\n            nid = _lib.OBJ_obj2nid(fname)\n            name = _lib.OBJ_nid2sn(nid)\n\n            # ffi.string does not handle strings containing NULL bytes\n            # (which may have been generated by old, broken software)\n            value = _ffi.buffer(\n                _lib.ASN1_STRING_get0_data(fval), _lib.ASN1_STRING_length(fval)\n            )[:]\n            result.append((_ffi.string(name), value))\n\n        return result\n\n\nclass X509Extension:\n    \"\"\"\n    An X.509 v3 certificate extension.\n    \"\"\"\n\n    def __init__(\n        self,\n        type_name: bytes,\n        critical: bool,\n        value: bytes,\n        subject: Optional[\"X509\"] = None,\n        issuer: Optional[\"X509\"] = None,\n    ) -> None:\n        \"\"\"\n        Initializes an X509 extension.\n\n        :param type_name: The name of the type of extension_ to create.\n        :type type_name: :py:data:`bytes`\n\n        :param bool critical: A flag indicating whether this is a critical\n            extension.\n\n        :param value: The OpenSSL textual representation of the extension's\n            value.\n        :type value: :py:data:`bytes`\n\n        :param subject: Optional X509 certificate to use as subject.\n        :type subject: :py:class:`X509`\n\n        :param issuer: Optional X509 certificate to use as issuer.\n        :type issuer: :py:class:`X509`\n\n        .. _extension: https://www.openssl.org/docs/manmaster/man5/\n            x509v3_config.html#STANDARD-EXTENSIONS\n        \"\"\"\n        ctx = _ffi.new(\"X509V3_CTX*\")\n\n        # A context is necessary for any extension which uses the r2i\n        # conversion method.  That is, X509V3_EXT_nconf may segfault if passed\n        # a NULL ctx. Start off by initializing most of the fields to NULL.\n        _lib.X509V3_set_ctx(ctx, _ffi.NULL, _ffi.NULL, _ffi.NULL, _ffi.NULL, 0)\n\n        # We have no configuration database - but perhaps we should (some\n        # extensions may require it).\n        _lib.X509V3_set_ctx_nodb(ctx)\n\n        # Initialize the subject and issuer, if appropriate.  ctx is a local,\n        # and as far as I can tell none of the X509V3_* APIs invoked here steal\n        # any references, so no need to mess with reference counts or\n        # duplicates.\n        if issuer is not None:\n            if not isinstance(issuer, X509):\n                raise TypeError(\"issuer must be an X509 instance\")\n            ctx.issuer_cert = issuer._x509\n        if subject is not None:\n            if not isinstance(subject, X509):\n                raise TypeError(\"subject must be an X509 instance\")\n            ctx.subject_cert = subject._x509\n\n        if critical:\n            # There are other OpenSSL APIs which would let us pass in critical\n            # separately, but they're harder to use, and since value is already\n            # a pile of crappy junk smuggling a ton of utterly important\n            # structured data, what's the point of trying to avoid nasty stuff\n            # with strings? (However, X509V3_EXT_i2d in particular seems like\n            # it would be a better API to invoke.  I do not know where to get\n            # the ext_struc it desires for its last parameter, though.)\n            value = b\"critical,\" + value\n\n        extension = _lib.X509V3_EXT_nconf(_ffi.NULL, ctx, type_name, value)\n        if extension == _ffi.NULL:\n            _raise_current_error()\n        self._extension = _ffi.gc(extension, _lib.X509_EXTENSION_free)\n\n    @property\n    def _nid(self) -> Any:\n        return _lib.OBJ_obj2nid(\n            _lib.X509_EXTENSION_get_object(self._extension)\n        )\n\n    _prefixes: typing.ClassVar[typing.Dict[int, str]] = {\n        _lib.GEN_EMAIL: \"email\",\n        _lib.GEN_DNS: \"DNS\",\n        _lib.GEN_URI: \"URI\",\n    }\n\n    def _subjectAltNameString(self) -> str:\n        names = _ffi.cast(\n            \"GENERAL_NAMES*\", _lib.X509V3_EXT_d2i(self._extension)\n        )\n\n        names = _ffi.gc(names, _lib.GENERAL_NAMES_free)\n        parts = []\n        for i in range(_lib.sk_GENERAL_NAME_num(names)):\n            name = _lib.sk_GENERAL_NAME_value(names, i)\n            try:\n                label = self._prefixes[name.type]\n            except KeyError:\n                bio = _new_mem_buf()\n                _lib.GENERAL_NAME_print(bio, name)\n                parts.append(_bio_to_string(bio).decode(\"utf-8\"))\n            else:\n                value = _ffi.buffer(name.d.ia5.data, name.d.ia5.length)[\n                    :\n                ].decode(\"utf-8\")\n                parts.append(label + \":\" + value)\n        return \", \".join(parts)\n\n    def __str__(self) -> str:\n        \"\"\"\n        :return: a nice text representation of the extension\n        \"\"\"\n        if _lib.NID_subject_alt_name == self._nid:\n            return self._subjectAltNameString()\n\n        bio = _new_mem_buf()\n        print_result = _lib.X509V3_EXT_print(bio, self._extension, 0, 0)\n        _openssl_assert(print_result != 0)\n\n        return _bio_to_string(bio).decode(\"utf-8\")\n\n    def get_critical(self) -> bool:\n        \"\"\"\n        Returns the critical field of this X.509 extension.\n\n        :return: The critical field.\n        \"\"\"\n        return _lib.X509_EXTENSION_get_critical(self._extension)\n\n    def get_short_name(self) -> bytes:\n        \"\"\"\n        Returns the short type name of this X.509 extension.\n\n        The result is a byte string such as :py:const:`b\"basicConstraints\"`.\n\n        :return: The short type name.\n        :rtype: :py:data:`bytes`\n\n        .. versionadded:: 0.12\n        \"\"\"\n        obj = _lib.X509_EXTENSION_get_object(self._extension)\n        nid = _lib.OBJ_obj2nid(obj)\n        # OpenSSL 3.1.0 has a bug where nid2sn returns NULL for NIDs that\n        # previously returned UNDEF. This is a workaround for that issue.\n        # https://github.com/openssl/openssl/commit/908ba3ed9adbb3df90f76\n        buf = _lib.OBJ_nid2sn(nid)\n        if buf != _ffi.NULL:\n            return _ffi.string(buf)\n        else:\n            return b\"UNDEF\"\n\n    def get_data(self) -> bytes:\n        \"\"\"\n        Returns the data of the X509 extension, encoded as ASN.1.\n\n        :return: The ASN.1 encoded data of this X509 extension.\n        :rtype: :py:data:`bytes`\n\n        .. versionadded:: 0.12\n        \"\"\"\n        octet_result = _lib.X509_EXTENSION_get_data(self._extension)\n        string_result = _ffi.cast(\"ASN1_STRING*\", octet_result)\n        char_result = _lib.ASN1_STRING_get0_data(string_result)\n        result_length = _lib.ASN1_STRING_length(string_result)\n        return _ffi.buffer(char_result, result_length)[:]\n\n\n_X509ExtensionInternal = X509Extension\nutils.deprecated(\n    X509Extension,\n    __name__,\n    (\n        \"X509Extension support in pyOpenSSL is deprecated. You should use the \"\n        \"APIs in cryptography.\"\n    ),\n    DeprecationWarning,\n    name=\"X509Extension\",\n)\n\n\nclass X509Req:\n    \"\"\"\n    An X.509 certificate signing requests.\n    \"\"\"\n\n    def __init__(self) -> None:\n        req = _lib.X509_REQ_new()\n        self._req = _ffi.gc(req, _lib.X509_REQ_free)\n        # Default to version 0.\n        self.set_version(0)\n\n    def to_cryptography(self) -> x509.CertificateSigningRequest:\n        \"\"\"\n        Export as a ``cryptography`` certificate signing request.\n\n        :rtype: ``cryptography.x509.CertificateSigningRequest``\n\n        .. versionadded:: 17.1.0\n        \"\"\"\n        from cryptography.x509 import load_der_x509_csr\n\n        der = dump_certificate_request(FILETYPE_ASN1, self)\n\n        return load_der_x509_csr(der)\n\n    @classmethod\n    def from_cryptography(\n        cls, crypto_req: x509.CertificateSigningRequest\n    ) -> \"X509Req\":\n        \"\"\"\n        Construct based on a ``cryptography`` *crypto_req*.\n\n        :param crypto_req: A ``cryptography`` X.509 certificate signing request\n        :type crypto_req: ``cryptography.x509.CertificateSigningRequest``\n\n        :rtype: X509Req\n\n        .. versionadded:: 17.1.0\n        \"\"\"\n        if not isinstance(crypto_req, x509.CertificateSigningRequest):\n            raise TypeError(\"Must be a certificate signing request\")\n\n        from cryptography.hazmat.primitives.serialization import Encoding\n\n        der = crypto_req.public_bytes(Encoding.DER)\n        return load_certificate_request(FILETYPE_ASN1, der)\n\n    def set_pubkey(self, pkey: PKey) -> None:\n        \"\"\"\n        Set the public key of the certificate signing request.\n\n        :param pkey: The public key to use.\n        :type pkey: :py:class:`PKey`\n\n        :return: ``None``\n        \"\"\"\n        set_result = _lib.X509_REQ_set_pubkey(self._req, pkey._pkey)\n        _openssl_assert(set_result == 1)\n\n    def get_pubkey(self) -> PKey:\n        \"\"\"\n        Get the public key of the certificate signing request.\n\n        :return: The public key.\n        :rtype: :py:class:`PKey`\n        \"\"\"\n        pkey = PKey.__new__(PKey)\n        pkey._pkey = _lib.X509_REQ_get_pubkey(self._req)\n        _openssl_assert(pkey._pkey != _ffi.NULL)\n        pkey._pkey = _ffi.gc(pkey._pkey, _lib.EVP_PKEY_free)\n        pkey._only_public = True\n        return pkey\n\n    def set_version(self, version: int) -> None:\n        \"\"\"\n        Set the version subfield (RFC 2986, section 4.1) of the certificate\n        request.\n\n        :param int version: The version number.\n        :return: ``None``\n        \"\"\"\n        if not isinstance(version, int):\n            raise TypeError(\"version must be an int\")\n        if version != 0:\n            raise ValueError(\n                \"Invalid version. The only valid version for X509Req is 0.\"\n            )\n        set_result = _lib.X509_REQ_set_version(self._req, version)\n        _openssl_assert(set_result == 1)\n\n    def get_version(self) -> int:\n        \"\"\"\n        Get the version subfield (RFC 2459, section 4.1.2.1) of the certificate\n        request.\n\n        :return: The value of the version subfield.\n        :rtype: :py:class:`int`\n        \"\"\"\n        return _lib.X509_REQ_get_version(self._req)\n\n    def get_subject(self) -> X509Name:\n        \"\"\"\n        Return the subject of this certificate signing request.\n\n        This creates a new :class:`X509Name` that wraps the underlying subject\n        name field on the certificate signing request. Modifying it will modify\n        the underlying signing request, and will have the effect of modifying\n        any other :class:`X509Name` that refers to this subject.\n\n        :return: The subject of this certificate signing request.\n        :rtype: :class:`X509Name`\n        \"\"\"\n        name = X509Name.__new__(X509Name)\n        name._name = _lib.X509_REQ_get_subject_name(self._req)\n        _openssl_assert(name._name != _ffi.NULL)\n\n        # The name is owned by the X509Req structure.  As long as the X509Name\n        # Python object is alive, keep the X509Req Python object alive.\n        name._owner = self\n\n        return name\n\n    def add_extensions(\n        self, extensions: Iterable[_X509ExtensionInternal]\n    ) -> None:\n        \"\"\"\n        Add extensions to the certificate signing request.\n\n        :param extensions: The X.509 extensions to add.\n        :type extensions: iterable of :py:class:`X509Extension`\n        :return: ``None``\n        \"\"\"\n        stack = _lib.sk_X509_EXTENSION_new_null()\n        _openssl_assert(stack != _ffi.NULL)\n\n        stack = _ffi.gc(stack, _lib.sk_X509_EXTENSION_free)\n\n        for ext in extensions:\n            if not isinstance(ext, _X509ExtensionInternal):\n                raise ValueError(\"One of the elements is not an X509Extension\")\n\n            # TODO push can fail (here and elsewhere)\n            _lib.sk_X509_EXTENSION_push(stack, ext._extension)\n\n        add_result = _lib.X509_REQ_add_extensions(self._req, stack)\n        _openssl_assert(add_result == 1)\n\n    def get_extensions(self) -> List[_X509ExtensionInternal]:\n        \"\"\"\n        Get X.509 extensions in the certificate signing request.\n\n        :return: The X.509 extensions in this request.\n        :rtype: :py:class:`list` of :py:class:`X509Extension` objects.\n\n        .. versionadded:: 0.15\n        \"\"\"\n        exts = []\n        native_exts_obj = _lib.X509_REQ_get_extensions(self._req)\n        native_exts_obj = _ffi.gc(\n            native_exts_obj,\n            lambda x: _lib.sk_X509_EXTENSION_pop_free(\n                x,\n                _ffi.addressof(_lib._original_lib, \"X509_EXTENSION_free\"),\n            ),\n        )\n\n        for i in range(_lib.sk_X509_EXTENSION_num(native_exts_obj)):\n            ext = _X509ExtensionInternal.__new__(_X509ExtensionInternal)\n            extension = _lib.X509_EXTENSION_dup(\n                _lib.sk_X509_EXTENSION_value(native_exts_obj, i)\n            )\n            ext._extension = _ffi.gc(extension, _lib.X509_EXTENSION_free)\n            exts.append(ext)\n        return exts\n\n    def sign(self, pkey: PKey, digest: str) -> None:\n        \"\"\"\n        Sign the certificate signing request with this key and digest type.\n\n        :param pkey: The key pair to sign with.\n        :type pkey: :py:class:`PKey`\n        :param digest: The name of the message digest to use for the signature,\n            e.g. :py:data:`\"sha256\"`.\n        :type digest: :py:class:`str`\n        :return: ``None``\n        \"\"\"\n        if pkey._only_public:\n            raise ValueError(\"Key has only public part\")\n\n        if not pkey._initialized:\n            raise ValueError(\"Key is uninitialized\")\n\n        digest_obj = _lib.EVP_get_digestbyname(_byte_string(digest))\n        if digest_obj == _ffi.NULL:\n            raise ValueError(\"No such digest method\")\n\n        sign_result = _lib.X509_REQ_sign(self._req, pkey._pkey, digest_obj)\n        _openssl_assert(sign_result > 0)\n\n    def verify(self, pkey: PKey) -> bool:\n        \"\"\"\n        Verifies the signature on this certificate signing request.\n\n        :param PKey key: A public key.\n\n        :return: ``True`` if the signature is correct.\n        :rtype: bool\n\n        :raises OpenSSL.crypto.Error: If the signature is invalid or there is a\n            problem verifying the signature.\n        \"\"\"\n        if not isinstance(pkey, PKey):\n            raise TypeError(\"pkey must be a PKey instance\")\n\n        result = _lib.X509_REQ_verify(self._req, pkey._pkey)\n        if result <= 0:\n            _raise_current_error()\n\n        return result\n\n\nclass X509:\n    \"\"\"\n    An X.509 certificate.\n    \"\"\"\n\n    def __init__(self) -> None:\n        x509 = _lib.X509_new()\n        _openssl_assert(x509 != _ffi.NULL)\n        self._x509 = _ffi.gc(x509, _lib.X509_free)\n\n        self._issuer_invalidator = _X509NameInvalidator()\n        self._subject_invalidator = _X509NameInvalidator()\n\n    @classmethod\n    def _from_raw_x509_ptr(cls, x509: Any) -> \"X509\":\n        cert = cls.__new__(cls)\n        cert._x509 = _ffi.gc(x509, _lib.X509_free)\n        cert._issuer_invalidator = _X509NameInvalidator()\n        cert._subject_invalidator = _X509NameInvalidator()\n        return cert\n\n    def to_cryptography(self) -> x509.Certificate:\n        \"\"\"\n        Export as a ``cryptography`` certificate.\n\n        :rtype: ``cryptography.x509.Certificate``\n\n        .. versionadded:: 17.1.0\n        \"\"\"\n        from cryptography.x509 import load_der_x509_certificate\n\n        der = dump_certificate(FILETYPE_ASN1, self)\n        return load_der_x509_certificate(der)\n\n    @classmethod\n    def from_cryptography(cls, crypto_cert: x509.Certificate) -> \"X509\":\n        \"\"\"\n        Construct based on a ``cryptography`` *crypto_cert*.\n\n        :param crypto_key: A ``cryptography`` X.509 certificate.\n        :type crypto_key: ``cryptography.x509.Certificate``\n\n        :rtype: X509\n\n        .. versionadded:: 17.1.0\n        \"\"\"\n        if not isinstance(crypto_cert, x509.Certificate):\n            raise TypeError(\"Must be a certificate\")\n\n        from cryptography.hazmat.primitives.serialization import Encoding\n\n        der = crypto_cert.public_bytes(Encoding.DER)\n        return load_certificate(FILETYPE_ASN1, der)\n\n    def set_version(self, version: int) -> None:\n        \"\"\"\n        Set the version number of the certificate. Note that the\n        version value is zero-based, eg. a value of 0 is V1.\n\n        :param version: The version number of the certificate.\n        :type version: :py:class:`int`\n\n        :return: ``None``\n        \"\"\"\n        if not isinstance(version, int):\n            raise TypeError(\"version must be an integer\")\n\n        _openssl_assert(_lib.X509_set_version(self._x509, version) == 1)\n\n    def get_version(self) -> int:\n        \"\"\"\n        Return the version number of the certificate.\n\n        :return: The version number of the certificate.\n        :rtype: :py:class:`int`\n        \"\"\"\n        return _lib.X509_get_version(self._x509)\n\n    def get_pubkey(self) -> PKey:\n        \"\"\"\n        Get the public key of the certificate.\n\n        :return: The public key.\n        :rtype: :py:class:`PKey`\n        \"\"\"\n        pkey = PKey.__new__(PKey)\n        pkey._pkey = _lib.X509_get_pubkey(self._x509)\n        if pkey._pkey == _ffi.NULL:\n            _raise_current_error()\n        pkey._pkey = _ffi.gc(pkey._pkey, _lib.EVP_PKEY_free)\n        pkey._only_public = True\n        return pkey\n\n    def set_pubkey(self, pkey: PKey) -> None:\n        \"\"\"\n        Set the public key of the certificate.\n\n        :param pkey: The public key.\n        :type pkey: :py:class:`PKey`\n\n        :return: :py:data:`None`\n        \"\"\"\n        if not isinstance(pkey, PKey):\n            raise TypeError(\"pkey must be a PKey instance\")\n\n        set_result = _lib.X509_set_pubkey(self._x509, pkey._pkey)\n        _openssl_assert(set_result == 1)\n\n    def sign(self, pkey: PKey, digest: str) -> None:\n        \"\"\"\n        Sign the certificate with this key and digest type.\n\n        :param pkey: The key to sign with.\n        :type pkey: :py:class:`PKey`\n\n        :param digest: The name of the message digest to use.\n        :type digest: :py:class:`str`\n\n        :return: :py:data:`None`\n        \"\"\"\n        if not isinstance(pkey, PKey):\n            raise TypeError(\"pkey must be a PKey instance\")\n\n        if pkey._only_public:\n            raise ValueError(\"Key only has public part\")\n\n        if not pkey._initialized:\n            raise ValueError(\"Key is uninitialized\")\n\n        evp_md = _lib.EVP_get_digestbyname(_byte_string(digest))\n        if evp_md == _ffi.NULL:\n            raise ValueError(\"No such digest method\")\n\n        sign_result = _lib.X509_sign(self._x509, pkey._pkey, evp_md)\n        _openssl_assert(sign_result > 0)\n\n    def get_signature_algorithm(self) -> bytes:\n        \"\"\"\n        Return the signature algorithm used in the certificate.\n\n        :return: The name of the algorithm.\n        :rtype: :py:class:`bytes`\n\n        :raises ValueError: If the signature algorithm is undefined.\n\n        .. versionadded:: 0.13\n        \"\"\"\n        sig_alg = _lib.X509_get0_tbs_sigalg(self._x509)\n        alg = _ffi.new(\"ASN1_OBJECT **\")\n        _lib.X509_ALGOR_get0(alg, _ffi.NULL, _ffi.NULL, sig_alg)\n        nid = _lib.OBJ_obj2nid(alg[0])\n        if nid == _lib.NID_undef:\n            raise ValueError(\"Undefined signature algorithm\")\n        return _ffi.string(_lib.OBJ_nid2ln(nid))\n\n    def digest(self, digest_name: str) -> bytes:\n        \"\"\"\n        Return the digest of the X509 object.\n\n        :param digest_name: The name of the digest algorithm to use.\n        :type digest_name: :py:class:`str`\n\n        :return: The digest of the object, formatted as\n            :py:const:`b\":\"`-delimited hex pairs.\n        :rtype: :py:class:`bytes`\n        \"\"\"\n        digest = _lib.EVP_get_digestbyname(_byte_string(digest_name))\n        if digest == _ffi.NULL:\n            raise ValueError(\"No such digest method\")\n\n        result_buffer = _ffi.new(\"unsigned char[]\", _lib.EVP_MAX_MD_SIZE)\n        result_length = _ffi.new(\"unsigned int[]\", 1)\n        result_length[0] = len(result_buffer)\n\n        digest_result = _lib.X509_digest(\n            self._x509, digest, result_buffer, result_length\n        )\n        _openssl_assert(digest_result == 1)\n\n        return b\":\".join(\n            [\n                b16encode(ch).upper()\n                for ch in _ffi.buffer(result_buffer, result_length[0])\n            ]\n        )\n\n    def subject_name_hash(self) -> bytes:\n        \"\"\"\n        Return the hash of the X509 subject.\n\n        :return: The hash of the subject.\n        :rtype: :py:class:`bytes`\n        \"\"\"\n        return _lib.X509_subject_name_hash(self._x509)\n\n    def set_serial_number(self, serial: int) -> None:\n        \"\"\"\n        Set the serial number of the certificate.\n\n        :param serial: The new serial number.\n        :type serial: :py:class:`int`\n\n        :return: :py:data`None`\n        \"\"\"\n        if not isinstance(serial, int):\n            raise TypeError(\"serial must be an integer\")\n\n        hex_serial = hex(serial)[2:]\n        hex_serial_bytes = hex_serial.encode(\"ascii\")\n\n        bignum_serial = _ffi.new(\"BIGNUM**\")\n\n        # BN_hex2bn stores the result in &bignum.  Unless it doesn't feel like\n        # it.  If bignum is still NULL after this call, then the return value\n        # is actually the result.  I hope.  -exarkun\n        small_serial = _lib.BN_hex2bn(bignum_serial, hex_serial_bytes)\n\n        if bignum_serial[0] == _ffi.NULL:\n            set_result = _lib.ASN1_INTEGER_set(\n                _lib.X509_get_serialNumber(self._x509), small_serial\n            )\n            if set_result:\n                # TODO Not tested\n                _raise_current_error()\n        else:\n            asn1_serial = _lib.BN_to_ASN1_INTEGER(bignum_serial[0], _ffi.NULL)\n            _lib.BN_free(bignum_serial[0])\n            if asn1_serial == _ffi.NULL:\n                # TODO Not tested\n                _raise_current_error()\n            asn1_serial = _ffi.gc(asn1_serial, _lib.ASN1_INTEGER_free)\n            set_result = _lib.X509_set_serialNumber(self._x509, asn1_serial)\n            _openssl_assert(set_result == 1)\n\n    def get_serial_number(self) -> int:\n        \"\"\"\n        Return the serial number of this certificate.\n\n        :return: The serial number.\n        :rtype: int\n        \"\"\"\n        asn1_serial = _lib.X509_get_serialNumber(self._x509)\n        bignum_serial = _lib.ASN1_INTEGER_to_BN(asn1_serial, _ffi.NULL)\n        try:\n            hex_serial = _lib.BN_bn2hex(bignum_serial)\n            try:\n                hexstring_serial = _ffi.string(hex_serial)\n                serial = int(hexstring_serial, 16)\n                return serial\n            finally:\n                _lib.OPENSSL_free(hex_serial)\n        finally:\n            _lib.BN_free(bignum_serial)\n\n    def gmtime_adj_notAfter(self, amount: int) -> None:\n        \"\"\"\n        Adjust the time stamp on which the certificate stops being valid.\n\n        :param int amount: The number of seconds by which to adjust the\n            timestamp.\n        :return: ``None``\n        \"\"\"\n        if not isinstance(amount, int):\n            raise TypeError(\"amount must be an integer\")\n\n        notAfter = _lib.X509_getm_notAfter(self._x509)\n        _lib.X509_gmtime_adj(notAfter, amount)\n\n    def gmtime_adj_notBefore(self, amount: int) -> None:\n        \"\"\"\n        Adjust the timestamp on which the certificate starts being valid.\n\n        :param amount: The number of seconds by which to adjust the timestamp.\n        :return: ``None``\n        \"\"\"\n        if not isinstance(amount, int):\n            raise TypeError(\"amount must be an integer\")\n\n        notBefore = _lib.X509_getm_notBefore(self._x509)\n        _lib.X509_gmtime_adj(notBefore, amount)\n\n    def has_expired(self) -> bool:\n        \"\"\"\n        Check whether the certificate has expired.\n\n        :return: ``True`` if the certificate has expired, ``False`` otherwise.\n        :rtype: bool\n        \"\"\"\n        time_bytes = self.get_notAfter()\n        if time_bytes is None:\n            raise ValueError(\"Unable to determine notAfter\")\n        time_string = time_bytes.decode(\"utf-8\")\n        not_after = datetime.datetime.strptime(time_string, \"%Y%m%d%H%M%SZ\")\n\n        UTC = datetime.timezone.utc\n        utcnow = datetime.datetime.now(UTC).replace(tzinfo=None)\n        return not_after < utcnow\n\n    def _get_boundary_time(self, which: Any) -> Optional[bytes]:\n        return _get_asn1_time(which(self._x509))\n\n    def get_notBefore(self) -> Optional[bytes]:\n        \"\"\"\n        Get the timestamp at which the certificate starts being valid.\n\n        The timestamp is formatted as an ASN.1 TIME::\n\n            YYYYMMDDhhmmssZ\n\n        :return: A timestamp string, or ``None`` if there is none.\n        :rtype: bytes or NoneType\n        \"\"\"\n        return self._get_boundary_time(_lib.X509_getm_notBefore)\n\n    def _set_boundary_time(\n        self, which: Callable[..., Any], when: bytes\n    ) -> None:\n        return _set_asn1_time(which(self._x509), when)\n\n    def set_notBefore(self, when: bytes) -> None:\n        \"\"\"\n        Set the timestamp at which the certificate starts being valid.\n\n        The timestamp is formatted as an ASN.1 TIME::\n\n            YYYYMMDDhhmmssZ\n\n        :param bytes when: A timestamp string.\n        :return: ``None``\n        \"\"\"\n        return self._set_boundary_time(_lib.X509_getm_notBefore, when)\n\n    def get_notAfter(self) -> Optional[bytes]:\n        \"\"\"\n        Get the timestamp at which the certificate stops being valid.\n\n        The timestamp is formatted as an ASN.1 TIME::\n\n            YYYYMMDDhhmmssZ\n\n        :return: A timestamp string, or ``None`` if there is none.\n        :rtype: bytes or NoneType\n        \"\"\"\n        return self._get_boundary_time(_lib.X509_getm_notAfter)\n\n    def set_notAfter(self, when: bytes) -> None:\n        \"\"\"\n        Set the timestamp at which the certificate stops being valid.\n\n        The timestamp is formatted as an ASN.1 TIME::\n\n            YYYYMMDDhhmmssZ\n\n        :param bytes when: A timestamp string.\n        :return: ``None``\n        \"\"\"\n        return self._set_boundary_time(_lib.X509_getm_notAfter, when)\n\n    def _get_name(self, which: Any) -> X509Name:\n        name = X509Name.__new__(X509Name)\n        name._name = which(self._x509)\n        _openssl_assert(name._name != _ffi.NULL)\n\n        # The name is owned by the X509 structure.  As long as the X509Name\n        # Python object is alive, keep the X509 Python object alive.\n        name._owner = self\n\n        return name\n\n    def _set_name(self, which: Any, name: X509Name) -> None:\n        if not isinstance(name, X509Name):\n            raise TypeError(\"name must be an X509Name\")\n        set_result = which(self._x509, name._name)\n        _openssl_assert(set_result == 1)\n\n    def get_issuer(self) -> X509Name:\n        \"\"\"\n        Return the issuer of this certificate.\n\n        This creates a new :class:`X509Name` that wraps the underlying issuer\n        name field on the certificate. Modifying it will modify the underlying\n        certificate, and will have the effect of modifying any other\n        :class:`X509Name` that refers to this issuer.\n\n        :return: The issuer of this certificate.\n        :rtype: :class:`X509Name`\n        \"\"\"\n        name = self._get_name(_lib.X509_get_issuer_name)\n        self._issuer_invalidator.add(name)\n        return name\n\n    def set_issuer(self, issuer: X509Name) -> None:\n        \"\"\"\n        Set the issuer of this certificate.\n\n        :param issuer: The issuer.\n        :type issuer: :py:class:`X509Name`\n\n        :return: ``None``\n        \"\"\"\n        self._set_name(_lib.X509_set_issuer_name, issuer)\n        self._issuer_invalidator.clear()\n\n    def get_subject(self) -> X509Name:\n        \"\"\"\n        Return the subject of this certificate.\n\n        This creates a new :class:`X509Name` that wraps the underlying subject\n        name field on the certificate. Modifying it will modify the underlying\n        certificate, and will have the effect of modifying any other\n        :class:`X509Name` that refers to this subject.\n\n        :return: The subject of this certificate.\n        :rtype: :class:`X509Name`\n        \"\"\"\n        name = self._get_name(_lib.X509_get_subject_name)\n        self._subject_invalidator.add(name)\n        return name\n\n    def set_subject(self, subject: X509Name) -> None:\n        \"\"\"\n        Set the subject of this certificate.\n\n        :param subject: The subject.\n        :type subject: :py:class:`X509Name`\n\n        :return: ``None``\n        \"\"\"\n        self._set_name(_lib.X509_set_subject_name, subject)\n        self._subject_invalidator.clear()\n\n    def get_extension_count(self) -> int:\n        \"\"\"\n        Get the number of extensions on this certificate.\n\n        :return: The number of extensions.\n        :rtype: :py:class:`int`\n\n        .. versionadded:: 0.12\n        \"\"\"\n        return _lib.X509_get_ext_count(self._x509)\n\n    def add_extensions(\n        self, extensions: Iterable[_X509ExtensionInternal]\n    ) -> None:\n        \"\"\"\n        Add extensions to the certificate.\n\n        :param extensions: The extensions to add.\n        :type extensions: An iterable of :py:class:`X509Extension` objects.\n        :return: ``None``\n        \"\"\"\n        for ext in extensions:\n            if not isinstance(ext, _X509ExtensionInternal):\n                raise ValueError(\"One of the elements is not an X509Extension\")\n\n            add_result = _lib.X509_add_ext(self._x509, ext._extension, -1)\n            if not add_result:\n                _raise_current_error()\n\n    def get_extension(self, index: int) -> _X509ExtensionInternal:\n        \"\"\"\n        Get a specific extension of the certificate by index.\n\n        Extensions on a certificate are kept in order. The index\n        parameter selects which extension will be returned.\n\n        :param int index: The index of the extension to retrieve.\n        :return: The extension at the specified index.\n        :rtype: :py:class:`X509Extension`\n        :raises IndexError: If the extension index was out of bounds.\n\n        .. versionadded:: 0.12\n        \"\"\"\n        ext = _X509ExtensionInternal.__new__(_X509ExtensionInternal)\n        ext._extension = _lib.X509_get_ext(self._x509, index)\n        if ext._extension == _ffi.NULL:\n            raise IndexError(\"extension index out of bounds\")\n\n        extension = _lib.X509_EXTENSION_dup(ext._extension)\n        ext._extension = _ffi.gc(extension, _lib.X509_EXTENSION_free)\n        return ext\n\n\nclass X509StoreFlags:\n    \"\"\"\n    Flags for X509 verification, used to change the behavior of\n    :class:`X509Store`.\n\n    See `OpenSSL Verification Flags`_ for details.\n\n    .. _OpenSSL Verification Flags:\n        https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html\n    \"\"\"\n\n    CRL_CHECK: int = _lib.X509_V_FLAG_CRL_CHECK\n    CRL_CHECK_ALL: int = _lib.X509_V_FLAG_CRL_CHECK_ALL\n    IGNORE_CRITICAL: int = _lib.X509_V_FLAG_IGNORE_CRITICAL\n    X509_STRICT: int = _lib.X509_V_FLAG_X509_STRICT\n    ALLOW_PROXY_CERTS: int = _lib.X509_V_FLAG_ALLOW_PROXY_CERTS\n    POLICY_CHECK: int = _lib.X509_V_FLAG_POLICY_CHECK\n    EXPLICIT_POLICY: int = _lib.X509_V_FLAG_EXPLICIT_POLICY\n    INHIBIT_MAP: int = _lib.X509_V_FLAG_INHIBIT_MAP\n    CHECK_SS_SIGNATURE: int = _lib.X509_V_FLAG_CHECK_SS_SIGNATURE\n    PARTIAL_CHAIN: int = _lib.X509_V_FLAG_PARTIAL_CHAIN\n\n\nclass X509Store:\n    \"\"\"\n    An X.509 store.\n\n    An X.509 store is used to describe a context in which to verify a\n    certificate. A description of a context may include a set of certificates\n    to trust, a set of certificate revocation lists, verification flags and\n    more.\n\n    An X.509 store, being only a description, cannot be used by itself to\n    verify a certificate. To carry out the actual verification process, see\n    :class:`X509StoreContext`.\n    \"\"\"\n\n    def __init__(self) -> None:\n        store = _lib.X509_STORE_new()\n        self._store = _ffi.gc(store, _lib.X509_STORE_free)\n\n    def add_cert(self, cert: X509) -> None:\n        \"\"\"\n        Adds a trusted certificate to this store.\n\n        Adding a certificate with this method adds this certificate as a\n        *trusted* certificate.\n\n        :param X509 cert: The certificate to add to this store.\n\n        :raises TypeError: If the certificate is not an :class:`X509`.\n\n        :raises OpenSSL.crypto.Error: If OpenSSL was unhappy with your\n            certificate.\n\n        :return: ``None`` if the certificate was added successfully.\n        \"\"\"\n        if not isinstance(cert, X509):\n            raise TypeError()\n\n        res = _lib.X509_STORE_add_cert(self._store, cert._x509)\n        _openssl_assert(res == 1)\n\n    def add_crl(\n        self, crl: Union[\"_CRLInternal\", x509.CertificateRevocationList]\n    ) -> None:\n        \"\"\"\n        Add a certificate revocation list to this store.\n\n        The certificate revocation lists added to a store will only be used if\n        the associated flags are configured to check certificate revocation\n        lists.\n\n        .. versionadded:: 16.1.0\n\n        :param crl: The certificate revocation list to add to this store.\n        :type crl: ``Union[CRL, cryptography.x509.CertificateRevocationList]``\n        :return: ``None`` if the certificate revocation list was added\n            successfully.\n        \"\"\"\n        if isinstance(crl, x509.CertificateRevocationList):\n            from cryptography.hazmat.primitives.serialization import Encoding\n\n            bio = _new_mem_buf(crl.public_bytes(Encoding.DER))\n            openssl_crl = _lib.d2i_X509_CRL_bio(bio, _ffi.NULL)\n            if openssl_crl == _ffi.NULL:\n                _raise_current_error()\n\n            crl = _ffi.gc(openssl_crl, _lib.X509_CRL_free)\n        elif isinstance(crl, _CRLInternal):\n            crl = crl._crl\n        else:\n            raise TypeError(\n                \"CRL must be of type OpenSSL.crypto.CRL or \"\n                \"cryptography.x509.CertificateRevocationList\"\n            )\n\n        _openssl_assert(_lib.X509_STORE_add_crl(self._store, crl) != 0)\n\n    def set_flags(self, flags: int) -> None:\n        \"\"\"\n        Set verification flags to this store.\n\n        Verification flags can be combined by oring them together.\n\n        .. note::\n\n          Setting a verification flag sometimes requires clients to add\n          additional information to the store, otherwise a suitable error will\n          be raised.\n\n          For example, in setting flags to enable CRL checking a\n          suitable CRL must be added to the store otherwise an error will be\n          raised.\n\n        .. versionadded:: 16.1.0\n\n        :param int flags: The verification flags to set on this store.\n            See :class:`X509StoreFlags` for available constants.\n        :return: ``None`` if the verification flags were successfully set.\n        \"\"\"\n        _openssl_assert(_lib.X509_STORE_set_flags(self._store, flags) != 0)\n\n    def set_time(self, vfy_time: datetime.datetime) -> None:\n        \"\"\"\n        Set the time against which the certificates are verified.\n\n        Normally the current time is used.\n\n        .. note::\n\n          For example, you can determine if a certificate was valid at a given\n          time.\n\n        .. versionadded:: 17.0.0\n\n        :param datetime vfy_time: The verification time to set on this store.\n        :return: ``None`` if the verification time was successfully set.\n        \"\"\"\n        param = _lib.X509_VERIFY_PARAM_new()\n        param = _ffi.gc(param, _lib.X509_VERIFY_PARAM_free)\n\n        _lib.X509_VERIFY_PARAM_set_time(\n            param, calendar.timegm(vfy_time.timetuple())\n        )\n        _openssl_assert(_lib.X509_STORE_set1_param(self._store, param) != 0)\n\n    def load_locations(\n        self, cafile: StrOrBytesPath, capath: Optional[StrOrBytesPath] = None\n    ) -> None:\n        \"\"\"\n        Let X509Store know where we can find trusted certificates for the\n        certificate chain.  Note that the certificates have to be in PEM\n        format.\n\n        If *capath* is passed, it must be a directory prepared using the\n        ``c_rehash`` tool included with OpenSSL.  Either, but not both, of\n        *cafile* or *capath* may be ``None``.\n\n        .. note::\n\n          Both *cafile* and *capath* may be set simultaneously.\n\n          Call this method multiple times to add more than one location.\n          For example, CA certificates, and certificate revocation list bundles\n          may be passed in *cafile* in subsequent calls to this method.\n\n        .. versionadded:: 20.0\n\n        :param cafile: In which file we can find the certificates (``bytes`` or\n                       ``unicode``).\n        :param capath: In which directory we can find the certificates\n                       (``bytes`` or ``unicode``).\n\n        :return: ``None`` if the locations were set successfully.\n\n        :raises OpenSSL.crypto.Error: If both *cafile* and *capath* is ``None``\n            or the locations could not be set for any reason.\n\n        \"\"\"\n        if cafile is None:\n            cafile = _ffi.NULL\n        else:\n            cafile = _path_bytes(cafile)\n\n        if capath is None:\n            capath = _ffi.NULL\n        else:\n            capath = _path_bytes(capath)\n\n        load_result = _lib.X509_STORE_load_locations(\n            self._store, cafile, capath\n        )\n        if not load_result:\n            _raise_current_error()\n\n\nclass X509StoreContextError(Exception):\n    \"\"\"\n    An exception raised when an error occurred while verifying a certificate\n    using `OpenSSL.X509StoreContext.verify_certificate`.\n\n    :ivar certificate: The certificate which caused verificate failure.\n    :type certificate: :class:`X509`\n    \"\"\"\n\n    def __init__(\n        self, message: str, errors: List[Any], certificate: X509\n    ) -> None:\n        super().__init__(message)\n        self.errors = errors\n        self.certificate = certificate\n\n\nclass X509StoreContext:\n    \"\"\"\n    An X.509 store context.\n\n    An X.509 store context is used to carry out the actual verification process\n    of a certificate in a described context. For describing such a context, see\n    :class:`X509Store`.\n\n    :param X509Store store: The certificates which will be trusted for the\n        purposes of any verifications.\n    :param X509 certificate: The certificate to be verified.\n    :param chain: List of untrusted certificates that may be used for building\n        the certificate chain. May be ``None``.\n    :type chain: :class:`list` of :class:`X509`\n    \"\"\"\n\n    def __init__(\n        self,\n        store: X509Store,\n        certificate: X509,\n        chain: Optional[Sequence[X509]] = None,\n    ) -> None:\n        self._store = store\n        self._cert = certificate\n        self._chain = self._build_certificate_stack(chain)\n\n    @staticmethod\n    def _build_certificate_stack(\n        certificates: Optional[Sequence[X509]],\n    ) -> None:\n        def cleanup(s: Any) -> None:\n            # Equivalent to sk_X509_pop_free, but we don't\n            # currently have a CFFI binding for that available\n            for i in range(_lib.sk_X509_num(s)):\n                x = _lib.sk_X509_value(s, i)\n                _lib.X509_free(x)\n            _lib.sk_X509_free(s)\n\n        if certificates is None or len(certificates) == 0:\n            return _ffi.NULL\n\n        stack = _lib.sk_X509_new_null()\n        _openssl_assert(stack != _ffi.NULL)\n        stack = _ffi.gc(stack, cleanup)\n\n        for cert in certificates:\n            if not isinstance(cert, X509):\n                raise TypeError(\"One of the elements is not an X509 instance\")\n\n            _openssl_assert(_lib.X509_up_ref(cert._x509) > 0)\n            if _lib.sk_X509_push(stack, cert._x509) <= 0:\n                _lib.X509_free(cert._x509)\n                _raise_current_error()\n\n        return stack\n\n    @staticmethod\n    def _exception_from_context(store_ctx: Any) -> X509StoreContextError:\n        \"\"\"\n        Convert an OpenSSL native context error failure into a Python\n        exception.\n\n        When a call to native OpenSSL X509_verify_cert fails, additional\n        information about the failure can be obtained from the store context.\n        \"\"\"\n        message = _ffi.string(\n            _lib.X509_verify_cert_error_string(\n                _lib.X509_STORE_CTX_get_error(store_ctx)\n            )\n        ).decode(\"utf-8\")\n        errors = [\n            _lib.X509_STORE_CTX_get_error(store_ctx),\n            _lib.X509_STORE_CTX_get_error_depth(store_ctx),\n            message,\n        ]\n        # A context error should always be associated with a certificate, so we\n        # expect this call to never return :class:`None`.\n        _x509 = _lib.X509_STORE_CTX_get_current_cert(store_ctx)\n        _cert = _lib.X509_dup(_x509)\n        pycert = X509._from_raw_x509_ptr(_cert)\n        return X509StoreContextError(message, errors, pycert)\n\n    def _verify_certificate(self) -> Any:\n        \"\"\"\n        Verifies the certificate and runs an X509_STORE_CTX containing the\n        results.\n\n        :raises X509StoreContextError: If an error occurred when validating a\n          certificate in the context. Sets ``certificate`` attribute to\n          indicate which certificate caused the error.\n        \"\"\"\n        store_ctx = _lib.X509_STORE_CTX_new()\n        _openssl_assert(store_ctx != _ffi.NULL)\n        store_ctx = _ffi.gc(store_ctx, _lib.X509_STORE_CTX_free)\n\n        ret = _lib.X509_STORE_CTX_init(\n            store_ctx, self._store._store, self._cert._x509, self._chain\n        )\n        _openssl_assert(ret == 1)\n\n        ret = _lib.X509_verify_cert(store_ctx)\n        if ret <= 0:\n            raise self._exception_from_context(store_ctx)\n\n        return store_ctx\n\n    def set_store(self, store: X509Store) -> None:\n        \"\"\"\n        Set the context's X.509 store.\n\n        .. versionadded:: 0.15\n\n        :param X509Store store: The store description which will be used for\n            the purposes of any *future* verifications.\n        \"\"\"\n        self._store = store\n\n    def verify_certificate(self) -> None:\n        \"\"\"\n        Verify a certificate in a context.\n\n        .. versionadded:: 0.15\n\n        :raises X509StoreContextError: If an error occurred when validating a\n          certificate in the context. Sets ``certificate`` attribute to\n          indicate which certificate caused the error.\n        \"\"\"\n        self._verify_certificate()\n\n    def get_verified_chain(self) -> List[X509]:\n        \"\"\"\n        Verify a certificate in a context and return the complete validated\n        chain.\n\n        :raises X509StoreContextError: If an error occurred when validating a\n          certificate in the context. Sets ``certificate`` attribute to\n          indicate which certificate caused the error.\n\n        .. versionadded:: 20.0\n        \"\"\"\n        store_ctx = self._verify_certificate()\n\n        # Note: X509_STORE_CTX_get1_chain returns a deep copy of the chain.\n        cert_stack = _lib.X509_STORE_CTX_get1_chain(store_ctx)\n        _openssl_assert(cert_stack != _ffi.NULL)\n\n        result = []\n        for i in range(_lib.sk_X509_num(cert_stack)):\n            cert = _lib.sk_X509_value(cert_stack, i)\n            _openssl_assert(cert != _ffi.NULL)\n            pycert = X509._from_raw_x509_ptr(cert)\n            result.append(pycert)\n\n        # Free the stack but not the members which are freed by the X509 class.\n        _lib.sk_X509_free(cert_stack)\n        return result\n\n\ndef load_certificate(type: int, buffer: bytes) -> X509:\n    \"\"\"\n    Load a certificate (X509) from the string *buffer* encoded with the\n    type *type*.\n\n    :param type: The file type (one of FILETYPE_PEM, FILETYPE_ASN1)\n\n    :param bytes buffer: The buffer the certificate is stored in\n\n    :return: The X509 object\n    \"\"\"\n    if isinstance(buffer, str):\n        buffer = buffer.encode(\"ascii\")\n\n    bio = _new_mem_buf(buffer)\n\n    if type == FILETYPE_PEM:\n        x509 = _lib.PEM_read_bio_X509(bio, _ffi.NULL, _ffi.NULL, _ffi.NULL)\n    elif type == FILETYPE_ASN1:\n        x509 = _lib.d2i_X509_bio(bio, _ffi.NULL)\n    else:\n        raise ValueError(\"type argument must be FILETYPE_PEM or FILETYPE_ASN1\")\n\n    if x509 == _ffi.NULL:\n        _raise_current_error()\n\n    return X509._from_raw_x509_ptr(x509)\n\n\ndef dump_certificate(type: int, cert: X509) -> bytes:\n    \"\"\"\n    Dump the certificate *cert* into a buffer string encoded with the type\n    *type*.\n\n    :param type: The file type (one of FILETYPE_PEM, FILETYPE_ASN1, or\n        FILETYPE_TEXT)\n    :param cert: The certificate to dump\n    :return: The buffer with the dumped certificate in\n    \"\"\"\n    bio = _new_mem_buf()\n\n    if type == FILETYPE_PEM:\n        result_code = _lib.PEM_write_bio_X509(bio, cert._x509)\n    elif type == FILETYPE_ASN1:\n        result_code = _lib.i2d_X509_bio(bio, cert._x509)\n    elif type == FILETYPE_TEXT:\n        result_code = _lib.X509_print_ex(bio, cert._x509, 0, 0)\n    else:\n        raise ValueError(\n            \"type argument must be FILETYPE_PEM, FILETYPE_ASN1, or \"\n            \"FILETYPE_TEXT\"\n        )\n\n    _openssl_assert(result_code == 1)\n    return _bio_to_string(bio)\n\n\ndef dump_publickey(type: int, pkey: PKey) -> bytes:\n    \"\"\"\n    Dump a public key to a buffer.\n\n    :param type: The file type (one of :data:`FILETYPE_PEM` or\n        :data:`FILETYPE_ASN1`).\n    :param PKey pkey: The public key to dump\n    :return: The buffer with the dumped key in it.\n    :rtype: bytes\n    \"\"\"\n    bio = _new_mem_buf()\n    if type == FILETYPE_PEM:\n        write_bio = _lib.PEM_write_bio_PUBKEY\n    elif type == FILETYPE_ASN1:\n        write_bio = _lib.i2d_PUBKEY_bio\n    else:\n        raise ValueError(\"type argument must be FILETYPE_PEM or FILETYPE_ASN1\")\n\n    result_code = write_bio(bio, pkey._pkey)\n    if result_code != 1:  # pragma: no cover\n        _raise_current_error()\n\n    return _bio_to_string(bio)\n\n\ndef dump_privatekey(\n    type: int,\n    pkey: PKey,\n    cipher: Optional[str] = None,\n    passphrase: Optional[PassphraseCallableT] = None,\n) -> bytes:\n    \"\"\"\n    Dump the private key *pkey* into a buffer string encoded with the type\n    *type*.  Optionally (if *type* is :const:`FILETYPE_PEM`) encrypting it\n    using *cipher* and *passphrase*.\n\n    :param type: The file type (one of :const:`FILETYPE_PEM`,\n        :const:`FILETYPE_ASN1`, or :const:`FILETYPE_TEXT`)\n    :param PKey pkey: The PKey to dump\n    :param cipher: (optional) if encrypted PEM format, the cipher to use\n    :param passphrase: (optional) if encrypted PEM format, this can be either\n        the passphrase to use, or a callback for providing the passphrase.\n\n    :return: The buffer with the dumped key in\n    :rtype: bytes\n    \"\"\"\n    bio = _new_mem_buf()\n\n    if not isinstance(pkey, PKey):\n        raise TypeError(\"pkey must be a PKey\")\n\n    if cipher is not None:\n        if passphrase is None:\n            raise TypeError(\n                \"if a value is given for cipher \"\n                \"one must also be given for passphrase\"\n            )\n        cipher_obj = _lib.EVP_get_cipherbyname(_byte_string(cipher))\n        if cipher_obj == _ffi.NULL:\n            raise ValueError(\"Invalid cipher name\")\n    else:\n        cipher_obj = _ffi.NULL\n\n    helper = _PassphraseHelper(type, passphrase)\n    if type == FILETYPE_PEM:\n        result_code = _lib.PEM_write_bio_PrivateKey(\n            bio,\n            pkey._pkey,\n            cipher_obj,\n            _ffi.NULL,\n            0,\n            helper.callback,\n            helper.callback_args,\n        )\n        helper.raise_if_problem()\n    elif type == FILETYPE_ASN1:\n        result_code = _lib.i2d_PrivateKey_bio(bio, pkey._pkey)\n    elif type == FILETYPE_TEXT:\n        if _lib.EVP_PKEY_id(pkey._pkey) != _lib.EVP_PKEY_RSA:\n            raise TypeError(\"Only RSA keys are supported for FILETYPE_TEXT\")\n\n        rsa = _ffi.gc(_lib.EVP_PKEY_get1_RSA(pkey._pkey), _lib.RSA_free)\n        result_code = _lib.RSA_print(bio, rsa, 0)\n    else:\n        raise ValueError(\n            \"type argument must be FILETYPE_PEM, FILETYPE_ASN1, or \"\n            \"FILETYPE_TEXT\"\n        )\n\n    _openssl_assert(result_code != 0)\n\n    return _bio_to_string(bio)\n\n\nclass Revoked:\n    \"\"\"\n    A certificate revocation.\n    \"\"\"\n\n    # https://www.openssl.org/docs/manmaster/man5/x509v3_config.html#CRL-distribution-points\n    # which differs from crl_reasons of crypto/x509v3/v3_enum.c that matches\n    # OCSP_crl_reason_str.  We use the latter, just like the command line\n    # program.\n    _crl_reasons: typing.ClassVar[typing.List[bytes]] = [\n        b\"unspecified\",\n        b\"keyCompromise\",\n        b\"CACompromise\",\n        b\"affiliationChanged\",\n        b\"superseded\",\n        b\"cessationOfOperation\",\n        b\"certificateHold\",\n        # b\"removeFromCRL\",\n    ]\n\n    def __init__(self) -> None:\n        revoked = _lib.X509_REVOKED_new()\n        self._revoked = _ffi.gc(revoked, _lib.X509_REVOKED_free)\n\n    def set_serial(self, hex_str: bytes) -> None:\n        \"\"\"\n        Set the serial number.\n\n        The serial number is formatted as a hexadecimal number encoded in\n        ASCII.\n\n        :param bytes hex_str: The new serial number.\n\n        :return: ``None``\n        \"\"\"\n        bignum_serial = _ffi.gc(_lib.BN_new(), _lib.BN_free)\n        bignum_ptr = _ffi.new(\"BIGNUM**\")\n        bignum_ptr[0] = bignum_serial\n        bn_result = _lib.BN_hex2bn(bignum_ptr, hex_str)\n        if not bn_result:\n            raise ValueError(\"bad hex string\")\n\n        asn1_serial = _ffi.gc(\n            _lib.BN_to_ASN1_INTEGER(bignum_serial, _ffi.NULL),\n            _lib.ASN1_INTEGER_free,\n        )\n        _lib.X509_REVOKED_set_serialNumber(self._revoked, asn1_serial)\n\n    def get_serial(self) -> bytes:\n        \"\"\"\n        Get the serial number.\n\n        The serial number is formatted as a hexadecimal number encoded in\n        ASCII.\n\n        :return: The serial number.\n        :rtype: bytes\n        \"\"\"\n        bio = _new_mem_buf()\n\n        asn1_int = _lib.X509_REVOKED_get0_serialNumber(self._revoked)\n        _openssl_assert(asn1_int != _ffi.NULL)\n        result = _lib.i2a_ASN1_INTEGER(bio, asn1_int)\n        _openssl_assert(result >= 0)\n        return _bio_to_string(bio)\n\n    def _delete_reason(self) -> None:\n        for i in range(_lib.X509_REVOKED_get_ext_count(self._revoked)):\n            ext = _lib.X509_REVOKED_get_ext(self._revoked, i)\n            obj = _lib.X509_EXTENSION_get_object(ext)\n            if _lib.OBJ_obj2nid(obj) == _lib.NID_crl_reason:\n                _lib.X509_EXTENSION_free(ext)\n                _lib.X509_REVOKED_delete_ext(self._revoked, i)\n                break\n\n    def set_reason(self, reason: Optional[bytes]) -> None:\n        \"\"\"\n        Set the reason of this revocation.\n\n        If :data:`reason` is ``None``, delete the reason instead.\n\n        :param reason: The reason string.\n        :type reason: :class:`bytes` or :class:`NoneType`\n\n        :return: ``None``\n\n        .. seealso::\n\n            :meth:`all_reasons`, which gives you a list of all supported\n            reasons which you might pass to this method.\n        \"\"\"\n        if reason is None:\n            self._delete_reason()\n        elif not isinstance(reason, bytes):\n            raise TypeError(\"reason must be None or a byte string\")\n        else:\n            reason = reason.lower().replace(b\" \", b\"\")\n            reason_code = [r.lower() for r in self._crl_reasons].index(reason)\n\n            new_reason_ext = _lib.ASN1_ENUMERATED_new()\n            _openssl_assert(new_reason_ext != _ffi.NULL)\n            new_reason_ext = _ffi.gc(new_reason_ext, _lib.ASN1_ENUMERATED_free)\n\n            set_result = _lib.ASN1_ENUMERATED_set(new_reason_ext, reason_code)\n            _openssl_assert(set_result != _ffi.NULL)\n\n            self._delete_reason()\n            add_result = _lib.X509_REVOKED_add1_ext_i2d(\n                self._revoked, _lib.NID_crl_reason, new_reason_ext, 0, 0\n            )\n            _openssl_assert(add_result == 1)\n\n    def get_reason(self) -> Optional[bytes]:\n        \"\"\"\n        Get the reason of this revocation.\n\n        :return: The reason, or ``None`` if there is none.\n        :rtype: bytes or NoneType\n\n        .. seealso::\n\n            :meth:`all_reasons`, which gives you a list of all supported\n            reasons this method might return.\n        \"\"\"\n        for i in range(_lib.X509_REVOKED_get_ext_count(self._revoked)):\n            ext = _lib.X509_REVOKED_get_ext(self._revoked, i)\n            obj = _lib.X509_EXTENSION_get_object(ext)\n            if _lib.OBJ_obj2nid(obj) == _lib.NID_crl_reason:\n                bio = _new_mem_buf()\n\n                print_result = _lib.X509V3_EXT_print(bio, ext, 0, 0)\n                if not print_result:\n                    print_result = _lib.M_ASN1_OCTET_STRING_print(\n                        bio, _lib.X509_EXTENSION_get_data(ext)\n                    )\n                    _openssl_assert(print_result != 0)\n\n                return _bio_to_string(bio)\n        return None\n\n    def all_reasons(self) -> List[bytes]:\n        \"\"\"\n        Return a list of all the supported reason strings.\n\n        This list is a copy; modifying it does not change the supported reason\n        strings.\n\n        :return: A list of reason strings.\n        :rtype: :class:`list` of :class:`bytes`\n        \"\"\"\n        return self._crl_reasons[:]\n\n    def set_rev_date(self, when: bytes) -> None:\n        \"\"\"\n        Set the revocation timestamp.\n\n        :param bytes when: The timestamp of the revocation,\n            as ASN.1 TIME.\n        :return: ``None``\n        \"\"\"\n        revocationDate = _new_asn1_time(when)\n        ret = _lib.X509_REVOKED_set_revocationDate(\n            self._revoked, revocationDate\n        )\n        _openssl_assert(ret == 1)\n\n    def get_rev_date(self) -> Optional[bytes]:\n        \"\"\"\n        Get the revocation timestamp.\n\n        :return: The timestamp of the revocation, as ASN.1 TIME.\n        :rtype: bytes\n        \"\"\"\n        dt = _lib.X509_REVOKED_get0_revocationDate(self._revoked)\n        return _get_asn1_time(dt)\n\n\n_RevokedInternal = Revoked\nutils.deprecated(\n    Revoked,\n    __name__,\n    (\n        \"CRL support in pyOpenSSL is deprecated. You should use the APIs \"\n        \"in cryptography.\"\n    ),\n    DeprecationWarning,\n    name=\"Revoked\",\n)\n\n\nclass CRL:\n    \"\"\"\n    A certificate revocation list.\n    \"\"\"\n\n    def __init__(self) -> None:\n        crl = _lib.X509_CRL_new()\n        self._crl = _ffi.gc(crl, _lib.X509_CRL_free)\n\n    def to_cryptography(self) -> x509.CertificateRevocationList:\n        \"\"\"\n        Export as a ``cryptography`` CRL.\n\n        :rtype: ``cryptography.x509.CertificateRevocationList``\n\n        .. versionadded:: 17.1.0\n        \"\"\"\n        from cryptography.x509 import load_der_x509_crl\n\n        der = _dump_crl_internal(FILETYPE_ASN1, self)\n        return load_der_x509_crl(der)\n\n    @classmethod\n    def from_cryptography(\n        cls, crypto_crl: x509.CertificateRevocationList\n    ) -> \"_CRLInternal\":\n        \"\"\"\n        Construct based on a ``cryptography`` *crypto_crl*.\n\n        :param crypto_crl: A ``cryptography`` certificate revocation list\n        :type crypto_crl: ``cryptography.x509.CertificateRevocationList``\n\n        :rtype: CRL\n\n        .. versionadded:: 17.1.0\n        \"\"\"\n        if not isinstance(crypto_crl, x509.CertificateRevocationList):\n            raise TypeError(\"Must be a certificate revocation list\")\n\n        from cryptography.hazmat.primitives.serialization import Encoding\n\n        der = crypto_crl.public_bytes(Encoding.DER)\n        return _load_crl_internal(FILETYPE_ASN1, der)\n\n    def get_revoked(self) -> Optional[Tuple[_RevokedInternal, ...]]:\n        \"\"\"\n        Return the revocations in this certificate revocation list.\n\n        These revocations will be provided by value, not by reference.\n        That means it's okay to mutate them: it won't affect this CRL.\n\n        :return: The revocations in this CRL.\n        :rtype: :class:`tuple` of :class:`Revocation`\n        \"\"\"\n        results = []\n        revoked_stack = _lib.X509_CRL_get_REVOKED(self._crl)\n        for i in range(_lib.sk_X509_REVOKED_num(revoked_stack)):\n            revoked = _lib.sk_X509_REVOKED_value(revoked_stack, i)\n            revoked_copy = _lib.X509_REVOKED_dup(revoked)\n            pyrev = _RevokedInternal.__new__(_RevokedInternal)\n            pyrev._revoked = _ffi.gc(revoked_copy, _lib.X509_REVOKED_free)\n            results.append(pyrev)\n        if results:\n            return tuple(results)\n        return None\n\n    def add_revoked(self, revoked: _RevokedInternal) -> None:\n        \"\"\"\n        Add a revoked (by value not reference) to the CRL structure\n\n        This revocation will be added by value, not by reference. That\n        means it's okay to mutate it after adding: it won't affect\n        this CRL.\n\n        :param Revoked revoked: The new revocation.\n        :return: ``None``\n        \"\"\"\n        copy = _lib.X509_REVOKED_dup(revoked._revoked)\n        _openssl_assert(copy != _ffi.NULL)\n\n        add_result = _lib.X509_CRL_add0_revoked(self._crl, copy)\n        _openssl_assert(add_result != 0)\n\n    def get_issuer(self) -> X509Name:\n        \"\"\"\n        Get the CRL's issuer.\n\n        .. versionadded:: 16.1.0\n\n        :rtype: X509Name\n        \"\"\"\n        _issuer = _lib.X509_NAME_dup(_lib.X509_CRL_get_issuer(self._crl))\n        _openssl_assert(_issuer != _ffi.NULL)\n        _issuer = _ffi.gc(_issuer, _lib.X509_NAME_free)\n        issuer = X509Name.__new__(X509Name)\n        issuer._name = _issuer\n        return issuer\n\n    def set_version(self, version: int) -> None:\n        \"\"\"\n        Set the CRL version.\n\n        .. versionadded:: 16.1.0\n\n        :param int version: The version of the CRL.\n        :return: ``None``\n        \"\"\"\n        _openssl_assert(_lib.X509_CRL_set_version(self._crl, version) != 0)\n\n    def set_lastUpdate(self, when: bytes) -> None:\n        \"\"\"\n        Set when the CRL was last updated.\n\n        The timestamp is formatted as an ASN.1 TIME::\n\n            YYYYMMDDhhmmssZ\n\n        .. versionadded:: 16.1.0\n\n        :param bytes when: A timestamp string.\n        :return: ``None``\n        \"\"\"\n        lastUpdate = _new_asn1_time(when)\n        ret = _lib.X509_CRL_set1_lastUpdate(self._crl, lastUpdate)\n        _openssl_assert(ret == 1)\n\n    def set_nextUpdate(self, when: bytes) -> None:\n        \"\"\"\n        Set when the CRL will next be updated.\n\n        The timestamp is formatted as an ASN.1 TIME::\n\n            YYYYMMDDhhmmssZ\n\n        .. versionadded:: 16.1.0\n\n        :param bytes when: A timestamp string.\n        :return: ``None``\n        \"\"\"\n        nextUpdate = _new_asn1_time(when)\n        ret = _lib.X509_CRL_set1_nextUpdate(self._crl, nextUpdate)\n        _openssl_assert(ret == 1)\n\n    def sign(self, issuer_cert: X509, issuer_key: PKey, digest: bytes) -> None:\n        \"\"\"\n        Sign the CRL.\n\n        Signing a CRL enables clients to associate the CRL itself with an\n        issuer. Before a CRL is meaningful to other OpenSSL functions, it must\n        be signed by an issuer.\n\n        This method implicitly sets the issuer's name based on the issuer\n        certificate and private key used to sign the CRL.\n\n        .. versionadded:: 16.1.0\n\n        :param X509 issuer_cert: The issuer's certificate.\n        :param PKey issuer_key: The issuer's private key.\n        :param bytes digest: The digest method to sign the CRL with.\n        \"\"\"\n        digest_obj = _lib.EVP_get_digestbyname(digest)\n        _openssl_assert(digest_obj != _ffi.NULL)\n        _lib.X509_CRL_set_issuer_name(\n            self._crl, _lib.X509_get_subject_name(issuer_cert._x509)\n        )\n        _lib.X509_CRL_sort(self._crl)\n        result = _lib.X509_CRL_sign(self._crl, issuer_key._pkey, digest_obj)\n        _openssl_assert(result != 0)\n\n    def export(\n        self,\n        cert: X509,\n        key: PKey,\n        type: int = FILETYPE_PEM,\n        days: int = 100,\n        digest: bytes = _UNSPECIFIED,  # type: ignore\n    ) -> bytes:\n        \"\"\"\n        Export the CRL as a string.\n\n        :param X509 cert: The certificate used to sign the CRL.\n        :param PKey key: The key used to sign the CRL.\n        :param int type: The export format, either :data:`FILETYPE_PEM`,\n            :data:`FILETYPE_ASN1`, or :data:`FILETYPE_TEXT`.\n        :param int days: The number of days until the next update of this CRL.\n        :param bytes digest: The name of the message digest to use (eg\n            ``b\"sha256\"``).\n        :rtype: bytes\n        \"\"\"\n\n        if not isinstance(cert, X509):\n            raise TypeError(\"cert must be an X509 instance\")\n        if not isinstance(key, PKey):\n            raise TypeError(\"key must be a PKey instance\")\n        if not isinstance(type, int):\n            raise TypeError(\"type must be an integer\")\n\n        if digest is _UNSPECIFIED:\n            raise TypeError(\"digest must be provided\")\n\n        digest_obj = _lib.EVP_get_digestbyname(digest)\n        if digest_obj == _ffi.NULL:\n            raise ValueError(\"No such digest method\")\n\n        # A scratch time object to give different values to different CRL\n        # fields\n        sometime = _lib.ASN1_TIME_new()\n        _openssl_assert(sometime != _ffi.NULL)\n        sometime = _ffi.gc(sometime, _lib.ASN1_TIME_free)\n\n        ret = _lib.X509_gmtime_adj(sometime, 0)\n        _openssl_assert(ret != _ffi.NULL)\n        ret = _lib.X509_CRL_set1_lastUpdate(self._crl, sometime)\n        _openssl_assert(ret == 1)\n\n        ret = _lib.X509_gmtime_adj(sometime, days * 24 * 60 * 60)\n        _openssl_assert(ret != _ffi.NULL)\n        ret = _lib.X509_CRL_set1_nextUpdate(self._crl, sometime)\n        _openssl_assert(ret == 1)\n\n        ret = _lib.X509_CRL_set_issuer_name(\n            self._crl, _lib.X509_get_subject_name(cert._x509)\n        )\n        _openssl_assert(ret == 1)\n\n        sign_result = _lib.X509_CRL_sign(self._crl, key._pkey, digest_obj)\n        if not sign_result:\n            _raise_current_error()\n\n        return _dump_crl_internal(type, self)\n\n\n_CRLInternal = CRL\nutils.deprecated(\n    CRL,\n    __name__,\n    (\n        \"CRL support in pyOpenSSL is deprecated. You should use the APIs \"\n        \"in cryptography.\"\n    ),\n    DeprecationWarning,\n    name=\"CRL\",\n)\n\n\nclass _PassphraseHelper:\n    def __init__(\n        self,\n        type: int,\n        passphrase: Optional[PassphraseCallableT],\n        more_args: bool = False,\n        truncate: bool = False,\n    ) -> None:\n        if type != FILETYPE_PEM and passphrase is not None:\n            raise ValueError(\n                \"only FILETYPE_PEM key format supports encryption\"\n            )\n        self._passphrase = passphrase\n        self._more_args = more_args\n        self._truncate = truncate\n        self._problems: List[Exception] = []\n\n    @property\n    def callback(self) -> Any:\n        if self._passphrase is None:\n            return _ffi.NULL\n        elif isinstance(self._passphrase, bytes) or callable(self._passphrase):\n            return _ffi.callback(\"pem_password_cb\", self._read_passphrase)\n        else:\n            raise TypeError(\n                \"Last argument must be a byte string or a callable.\"\n            )\n\n    @property\n    def callback_args(self) -> Any:\n        if self._passphrase is None:\n            return _ffi.NULL\n        elif isinstance(self._passphrase, bytes) or callable(self._passphrase):\n            return _ffi.NULL\n        else:\n            raise TypeError(\n                \"Last argument must be a byte string or a callable.\"\n            )\n\n    def raise_if_problem(self, exceptionType: Type[Exception] = Error) -> None:\n        if self._problems:\n            # Flush the OpenSSL error queue\n            try:\n                _exception_from_error_queue(exceptionType)\n            except exceptionType:\n                pass\n\n            raise self._problems.pop(0)\n\n    def _read_passphrase(\n        self, buf: Any, size: int, rwflag: Any, userdata: Any\n    ) -> int:\n        try:\n            if callable(self._passphrase):\n                if self._more_args:\n                    result = self._passphrase(size, rwflag, userdata)\n                else:\n                    result = self._passphrase(rwflag)\n            else:\n                assert self._passphrase is not None\n                result = self._passphrase\n            if not isinstance(result, bytes):\n                raise ValueError(\"Bytes expected\")\n            if len(result) > size:\n                if self._truncate:\n                    result = result[:size]\n                else:\n                    raise ValueError(\n                        \"passphrase returned by callback is too long\"\n                    )\n            for i in range(len(result)):\n                buf[i] = result[i : i + 1]\n            return len(result)\n        except Exception as e:\n            self._problems.append(e)\n            return 0\n\n\ndef load_publickey(type: int, buffer: Union[str, bytes]) -> PKey:\n    \"\"\"\n    Load a public key from a buffer.\n\n    :param type: The file type (one of :data:`FILETYPE_PEM`,\n        :data:`FILETYPE_ASN1`).\n    :param buffer: The buffer the key is stored in.\n    :type buffer: A Python string object, either unicode or bytestring.\n    :return: The PKey object.\n    :rtype: :class:`PKey`\n    \"\"\"\n    if isinstance(buffer, str):\n        buffer = buffer.encode(\"ascii\")\n\n    bio = _new_mem_buf(buffer)\n\n    if type == FILETYPE_PEM:\n        evp_pkey = _lib.PEM_read_bio_PUBKEY(\n            bio, _ffi.NULL, _ffi.NULL, _ffi.NULL\n        )\n    elif type == FILETYPE_ASN1:\n        evp_pkey = _lib.d2i_PUBKEY_bio(bio, _ffi.NULL)\n    else:\n        raise ValueError(\"type argument must be FILETYPE_PEM or FILETYPE_ASN1\")\n\n    if evp_pkey == _ffi.NULL:\n        _raise_current_error()\n\n    pkey = PKey.__new__(PKey)\n    pkey._pkey = _ffi.gc(evp_pkey, _lib.EVP_PKEY_free)\n    pkey._only_public = True\n    return pkey\n\n\ndef load_privatekey(\n    type: int,\n    buffer: Union[str, bytes],\n    passphrase: Optional[PassphraseCallableT] = None,\n) -> PKey:\n    \"\"\"\n    Load a private key (PKey) from the string *buffer* encoded with the type\n    *type*.\n\n    :param type: The file type (one of FILETYPE_PEM, FILETYPE_ASN1)\n    :param buffer: The buffer the key is stored in\n    :param passphrase: (optional) if encrypted PEM format, this can be\n                       either the passphrase to use, or a callback for\n                       providing the passphrase.\n\n    :return: The PKey object\n    \"\"\"\n    if isinstance(buffer, str):\n        buffer = buffer.encode(\"ascii\")\n\n    bio = _new_mem_buf(buffer)\n\n    helper = _PassphraseHelper(type, passphrase)\n    if type == FILETYPE_PEM:\n        evp_pkey = _lib.PEM_read_bio_PrivateKey(\n            bio, _ffi.NULL, helper.callback, helper.callback_args\n        )\n        helper.raise_if_problem()\n    elif type == FILETYPE_ASN1:\n        evp_pkey = _lib.d2i_PrivateKey_bio(bio, _ffi.NULL)\n    else:\n        raise ValueError(\"type argument must be FILETYPE_PEM or FILETYPE_ASN1\")\n\n    if evp_pkey == _ffi.NULL:\n        _raise_current_error()\n\n    pkey = PKey.__new__(PKey)\n    pkey._pkey = _ffi.gc(evp_pkey, _lib.EVP_PKEY_free)\n    return pkey\n\n\ndef dump_certificate_request(type: int, req: X509Req) -> bytes:\n    \"\"\"\n    Dump the certificate request *req* into a buffer string encoded with the\n    type *type*.\n\n    :param type: The file type (one of FILETYPE_PEM, FILETYPE_ASN1)\n    :param req: The certificate request to dump\n    :return: The buffer with the dumped certificate request in\n    \"\"\"\n    bio = _new_mem_buf()\n\n    if type == FILETYPE_PEM:\n        result_code = _lib.PEM_write_bio_X509_REQ(bio, req._req)\n    elif type == FILETYPE_ASN1:\n        result_code = _lib.i2d_X509_REQ_bio(bio, req._req)\n    elif type == FILETYPE_TEXT:\n        result_code = _lib.X509_REQ_print_ex(bio, req._req, 0, 0)\n    else:\n        raise ValueError(\n            \"type argument must be FILETYPE_PEM, FILETYPE_ASN1, or \"\n            \"FILETYPE_TEXT\"\n        )\n\n    _openssl_assert(result_code != 0)\n\n    return _bio_to_string(bio)\n\n\ndef load_certificate_request(type: int, buffer: bytes) -> X509Req:\n    \"\"\"\n    Load a certificate request (X509Req) from the string *buffer* encoded with\n    the type *type*.\n\n    :param type: The file type (one of FILETYPE_PEM, FILETYPE_ASN1)\n    :param buffer: The buffer the certificate request is stored in\n    :return: The X509Req object\n    \"\"\"\n    if isinstance(buffer, str):\n        buffer = buffer.encode(\"ascii\")\n\n    bio = _new_mem_buf(buffer)\n\n    if type == FILETYPE_PEM:\n        req = _lib.PEM_read_bio_X509_REQ(bio, _ffi.NULL, _ffi.NULL, _ffi.NULL)\n    elif type == FILETYPE_ASN1:\n        req = _lib.d2i_X509_REQ_bio(bio, _ffi.NULL)\n    else:\n        raise ValueError(\"type argument must be FILETYPE_PEM or FILETYPE_ASN1\")\n\n    _openssl_assert(req != _ffi.NULL)\n\n    x509req = X509Req.__new__(X509Req)\n    x509req._req = _ffi.gc(req, _lib.X509_REQ_free)\n    return x509req\n\n\ndef sign(pkey: PKey, data: Union[str, bytes], digest: str) -> bytes:\n    \"\"\"\n    Sign a data string using the given key and message digest.\n\n    :param pkey: PKey to sign with\n    :param data: data to be signed\n    :param digest: message digest to use\n    :return: signature\n\n    .. versionadded:: 0.11\n    \"\"\"\n    data = _text_to_bytes_and_warn(\"data\", data)\n\n    digest_obj = _lib.EVP_get_digestbyname(_byte_string(digest))\n    if digest_obj == _ffi.NULL:\n        raise ValueError(\"No such digest method\")\n\n    md_ctx = _lib.EVP_MD_CTX_new()\n    md_ctx = _ffi.gc(md_ctx, _lib.EVP_MD_CTX_free)\n\n    _lib.EVP_SignInit(md_ctx, digest_obj)\n    _lib.EVP_SignUpdate(md_ctx, data, len(data))\n\n    length = _lib.EVP_PKEY_size(pkey._pkey)\n    _openssl_assert(length > 0)\n    signature_buffer = _ffi.new(\"unsigned char[]\", length)\n    signature_length = _ffi.new(\"unsigned int *\")\n    final_result = _lib.EVP_SignFinal(\n        md_ctx, signature_buffer, signature_length, pkey._pkey\n    )\n    _openssl_assert(final_result == 1)\n\n    return _ffi.buffer(signature_buffer, signature_length[0])[:]\n\n\nutils.deprecated(\n    sign,\n    __name__,\n    \"sign() is deprecated. Use the equivalent APIs in cryptography.\",\n    DeprecationWarning,\n    name=\"sign\",\n)\n\n\ndef verify(\n    cert: X509, signature: bytes, data: Union[str, bytes], digest: str\n) -> None:\n    \"\"\"\n    Verify the signature for a data string.\n\n    :param cert: signing certificate (X509 object) corresponding to the\n        private key which generated the signature.\n    :param signature: signature returned by sign function\n    :param data: data to be verified\n    :param digest: message digest to use\n    :return: ``None`` if the signature is correct, raise exception otherwise.\n\n    .. versionadded:: 0.11\n    \"\"\"\n    data = _text_to_bytes_and_warn(\"data\", data)\n\n    digest_obj = _lib.EVP_get_digestbyname(_byte_string(digest))\n    if digest_obj == _ffi.NULL:\n        raise ValueError(\"No such digest method\")\n\n    pkey = _lib.X509_get_pubkey(cert._x509)\n    _openssl_assert(pkey != _ffi.NULL)\n    pkey = _ffi.gc(pkey, _lib.EVP_PKEY_free)\n\n    md_ctx = _lib.EVP_MD_CTX_new()\n    md_ctx = _ffi.gc(md_ctx, _lib.EVP_MD_CTX_free)\n\n    _lib.EVP_VerifyInit(md_ctx, digest_obj)\n    _lib.EVP_VerifyUpdate(md_ctx, data, len(data))\n    verify_result = _lib.EVP_VerifyFinal(\n        md_ctx, signature, len(signature), pkey\n    )\n\n    if verify_result != 1:\n        _raise_current_error()\n\n\nutils.deprecated(\n    verify,\n    __name__,\n    \"verify() is deprecated. Use the equivalent APIs in cryptography.\",\n    DeprecationWarning,\n    name=\"verify\",\n)\n\n\ndef dump_crl(type: int, crl: _CRLInternal) -> bytes:\n    \"\"\"\n    Dump a certificate revocation list to a buffer.\n\n    :param type: The file type (one of ``FILETYPE_PEM``, ``FILETYPE_ASN1``, or\n        ``FILETYPE_TEXT``).\n    :param CRL crl: The CRL to dump.\n\n    :return: The buffer with the CRL.\n    :rtype: bytes\n    \"\"\"\n    bio = _new_mem_buf()\n\n    if type == FILETYPE_PEM:\n        ret = _lib.PEM_write_bio_X509_CRL(bio, crl._crl)\n    elif type == FILETYPE_ASN1:\n        ret = _lib.i2d_X509_CRL_bio(bio, crl._crl)\n    elif type == FILETYPE_TEXT:\n        ret = _lib.X509_CRL_print(bio, crl._crl)\n    else:\n        raise ValueError(\n            \"type argument must be FILETYPE_PEM, FILETYPE_ASN1, or \"\n            \"FILETYPE_TEXT\"\n        )\n\n    _openssl_assert(ret == 1)\n    return _bio_to_string(bio)\n\n\n_dump_crl_internal = dump_crl\nutils.deprecated(\n    dump_crl,\n    __name__,\n    (\n        \"CRL support in pyOpenSSL is deprecated. You should use the APIs \"\n        \"in cryptography.\"\n    ),\n    DeprecationWarning,\n    name=\"dump_crl\",\n)\n\n\ndef load_crl(type: int, buffer: Union[str, bytes]) -> _CRLInternal:\n    \"\"\"\n    Load Certificate Revocation List (CRL) data from a string *buffer*.\n    *buffer* encoded with the type *type*.\n\n    :param type: The file type (one of FILETYPE_PEM, FILETYPE_ASN1)\n    :param buffer: The buffer the CRL is stored in\n\n    :return: The CRL object\n    \"\"\"\n    if isinstance(buffer, str):\n        buffer = buffer.encode(\"ascii\")\n\n    bio = _new_mem_buf(buffer)\n\n    if type == FILETYPE_PEM:\n        crl = _lib.PEM_read_bio_X509_CRL(bio, _ffi.NULL, _ffi.NULL, _ffi.NULL)\n    elif type == FILETYPE_ASN1:\n        crl = _lib.d2i_X509_CRL_bio(bio, _ffi.NULL)\n    else:\n        raise ValueError(\"type argument must be FILETYPE_PEM or FILETYPE_ASN1\")\n\n    if crl == _ffi.NULL:\n        _raise_current_error()\n\n    result = _CRLInternal.__new__(_CRLInternal)\n    result._crl = _ffi.gc(crl, _lib.X509_CRL_free)\n    return result\n\n\n_load_crl_internal = load_crl\nutils.deprecated(\n    load_crl,\n    __name__,\n    (\n        \"CRL support in pyOpenSSL is deprecated. You should use the APIs \"\n        \"in cryptography.\"\n    ),\n    DeprecationWarning,\n    name=\"load_crl\",\n)\n", "src/OpenSSL/_util.py": "import os\nimport sys\nimport warnings\nfrom typing import Any, Callable, NoReturn, Type, Union\n\nfrom cryptography.hazmat.bindings.openssl.binding import Binding\n\nStrOrBytesPath = Union[str, bytes, os.PathLike]\n\nbinding = Binding()\nffi = binding.ffi\nlib = binding.lib\n\n\n# This is a special CFFI allocator that does not bother to zero its memory\n# after allocation. This has vastly better performance on large allocations and\n# so should be used whenever we don't need the memory zeroed out.\nno_zero_allocator = ffi.new_allocator(should_clear_after_alloc=False)\n\n\ndef text(charp: Any) -> str:\n    \"\"\"\n    Get a native string type representing of the given CFFI ``char*`` object.\n\n    :param charp: A C-style string represented using CFFI.\n\n    :return: :class:`str`\n    \"\"\"\n    if not charp:\n        return \"\"\n    return ffi.string(charp).decode(\"utf-8\")\n\n\ndef exception_from_error_queue(exception_type: Type[Exception]) -> NoReturn:\n    \"\"\"\n    Convert an OpenSSL library failure into a Python exception.\n\n    When a call to the native OpenSSL library fails, this is usually signalled\n    by the return value, and an error code is stored in an error queue\n    associated with the current thread. The err library provides functions to\n    obtain these error codes and textual error messages.\n    \"\"\"\n    errors = []\n\n    while True:\n        error = lib.ERR_get_error()\n        if error == 0:\n            break\n        errors.append(\n            (\n                text(lib.ERR_lib_error_string(error)),\n                text(lib.ERR_func_error_string(error)),\n                text(lib.ERR_reason_error_string(error)),\n            )\n        )\n\n    raise exception_type(errors)\n\n\ndef make_assert(error: Type[Exception]) -> Callable[[bool], Any]:\n    \"\"\"\n    Create an assert function that uses :func:`exception_from_error_queue` to\n    raise an exception wrapped by *error*.\n    \"\"\"\n\n    def openssl_assert(ok: bool) -> None:\n        \"\"\"\n        If *ok* is not True, retrieve the error from OpenSSL and raise it.\n        \"\"\"\n        if ok is not True:\n            exception_from_error_queue(error)\n\n    return openssl_assert\n\n\ndef path_bytes(s: StrOrBytesPath) -> bytes:\n    \"\"\"\n    Convert a Python path to a :py:class:`bytes` for the path which can be\n    passed into an OpenSSL API accepting a filename.\n\n    :param s: A path (valid for os.fspath).\n\n    :return: An instance of :py:class:`bytes`.\n    \"\"\"\n    b = os.fspath(s)\n\n    if isinstance(b, str):\n        return b.encode(sys.getfilesystemencoding())\n    else:\n        return b\n\n\ndef byte_string(s: str) -> bytes:\n    return s.encode(\"charmap\")\n\n\n# A marker object to observe whether some optional arguments are passed any\n# value or not.\nUNSPECIFIED = object()\n\n_TEXT_WARNING = \"str for {0} is no longer accepted, use bytes\"\n\n\ndef text_to_bytes_and_warn(label: str, obj: Any) -> Any:\n    \"\"\"\n    If ``obj`` is text, emit a warning that it should be bytes instead and try\n    to convert it to bytes automatically.\n\n    :param str label: The name of the parameter from which ``obj`` was taken\n        (so a developer can easily find the source of the problem and correct\n        it).\n\n    :return: If ``obj`` is the text string type, a ``bytes`` object giving the\n        UTF-8 encoding of that text is returned.  Otherwise, ``obj`` itself is\n        returned.\n    \"\"\"\n    if isinstance(obj, str):\n        warnings.warn(\n            _TEXT_WARNING.format(label),\n            category=DeprecationWarning,\n            stacklevel=3,\n        )\n        return obj.encode(\"utf-8\")\n    return obj\n", "src/OpenSSL/__init__.py": "# Copyright (C) AB Strakt\n# See LICENSE for details.\n\n\"\"\"\npyOpenSSL - A simple wrapper around the OpenSSL library\n\"\"\"\n\nfrom OpenSSL import SSL, crypto\nfrom OpenSSL.version import (\n    __author__,\n    __copyright__,\n    __email__,\n    __license__,\n    __summary__,\n    __title__,\n    __uri__,\n    __version__,\n)\n\n__all__ = [\n    \"SSL\",\n    \"crypto\",\n    \"__author__\",\n    \"__copyright__\",\n    \"__email__\",\n    \"__license__\",\n    \"__summary__\",\n    \"__title__\",\n    \"__uri__\",\n    \"__version__\",\n]\n", "src/OpenSSL/SSL.py": "import os\nimport socket\nimport typing\nfrom errno import errorcode\nfrom functools import partial, wraps\nfrom itertools import chain, count\nfrom sys import platform\nfrom typing import Any, Callable, List, Optional, Sequence, Tuple, TypeVar\nfrom weakref import WeakValueDictionary\n\nfrom OpenSSL._util import (\n    StrOrBytesPath as _StrOrBytesPath,\n)\nfrom OpenSSL._util import (\n    exception_from_error_queue as _exception_from_error_queue,\n)\nfrom OpenSSL._util import (\n    ffi as _ffi,\n)\nfrom OpenSSL._util import (\n    lib as _lib,\n)\nfrom OpenSSL._util import (\n    make_assert as _make_assert,\n)\nfrom OpenSSL._util import (\n    no_zero_allocator as _no_zero_allocator,\n)\nfrom OpenSSL._util import (\n    path_bytes as _path_bytes,\n)\nfrom OpenSSL._util import (\n    text_to_bytes_and_warn as _text_to_bytes_and_warn,\n)\nfrom OpenSSL.crypto import (\n    FILETYPE_PEM,\n    X509,\n    PKey,\n    X509Name,\n    X509Store,\n    _EllipticCurve,\n    _PassphraseHelper,\n)\n\n__all__ = [\n    \"OPENSSL_VERSION_NUMBER\",\n    \"SSLEAY_VERSION\",\n    \"SSLEAY_CFLAGS\",\n    \"SSLEAY_PLATFORM\",\n    \"SSLEAY_DIR\",\n    \"SSLEAY_BUILT_ON\",\n    \"OPENSSL_VERSION\",\n    \"OPENSSL_CFLAGS\",\n    \"OPENSSL_PLATFORM\",\n    \"OPENSSL_DIR\",\n    \"OPENSSL_BUILT_ON\",\n    \"SENT_SHUTDOWN\",\n    \"RECEIVED_SHUTDOWN\",\n    \"SSLv23_METHOD\",\n    \"TLSv1_METHOD\",\n    \"TLSv1_1_METHOD\",\n    \"TLSv1_2_METHOD\",\n    \"TLS_METHOD\",\n    \"TLS_SERVER_METHOD\",\n    \"TLS_CLIENT_METHOD\",\n    \"DTLS_METHOD\",\n    \"DTLS_SERVER_METHOD\",\n    \"DTLS_CLIENT_METHOD\",\n    \"SSL3_VERSION\",\n    \"TLS1_VERSION\",\n    \"TLS1_1_VERSION\",\n    \"TLS1_2_VERSION\",\n    \"TLS1_3_VERSION\",\n    \"OP_NO_SSLv2\",\n    \"OP_NO_SSLv3\",\n    \"OP_NO_TLSv1\",\n    \"OP_NO_TLSv1_1\",\n    \"OP_NO_TLSv1_2\",\n    \"MODE_RELEASE_BUFFERS\",\n    \"OP_SINGLE_DH_USE\",\n    \"OP_SINGLE_ECDH_USE\",\n    \"OP_EPHEMERAL_RSA\",\n    \"OP_MICROSOFT_SESS_ID_BUG\",\n    \"OP_NETSCAPE_CHALLENGE_BUG\",\n    \"OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG\",\n    \"OP_SSLREF2_REUSE_CERT_TYPE_BUG\",\n    \"OP_MICROSOFT_BIG_SSLV3_BUFFER\",\n    \"OP_MSIE_SSLV2_RSA_PADDING\",\n    \"OP_SSLEAY_080_CLIENT_DH_BUG\",\n    \"OP_TLS_D5_BUG\",\n    \"OP_TLS_BLOCK_PADDING_BUG\",\n    \"OP_DONT_INSERT_EMPTY_FRAGMENTS\",\n    \"OP_CIPHER_SERVER_PREFERENCE\",\n    \"OP_TLS_ROLLBACK_BUG\",\n    \"OP_PKCS1_CHECK_1\",\n    \"OP_PKCS1_CHECK_2\",\n    \"OP_NETSCAPE_CA_DN_BUG\",\n    \"OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG\",\n    \"OP_NO_COMPRESSION\",\n    \"OP_NO_QUERY_MTU\",\n    \"OP_COOKIE_EXCHANGE\",\n    \"OP_NO_TICKET\",\n    \"OP_ALL\",\n    \"VERIFY_PEER\",\n    \"VERIFY_FAIL_IF_NO_PEER_CERT\",\n    \"VERIFY_CLIENT_ONCE\",\n    \"VERIFY_NONE\",\n    \"SESS_CACHE_OFF\",\n    \"SESS_CACHE_CLIENT\",\n    \"SESS_CACHE_SERVER\",\n    \"SESS_CACHE_BOTH\",\n    \"SESS_CACHE_NO_AUTO_CLEAR\",\n    \"SESS_CACHE_NO_INTERNAL_LOOKUP\",\n    \"SESS_CACHE_NO_INTERNAL_STORE\",\n    \"SESS_CACHE_NO_INTERNAL\",\n    \"SSL_ST_CONNECT\",\n    \"SSL_ST_ACCEPT\",\n    \"SSL_ST_MASK\",\n    \"SSL_CB_LOOP\",\n    \"SSL_CB_EXIT\",\n    \"SSL_CB_READ\",\n    \"SSL_CB_WRITE\",\n    \"SSL_CB_ALERT\",\n    \"SSL_CB_READ_ALERT\",\n    \"SSL_CB_WRITE_ALERT\",\n    \"SSL_CB_ACCEPT_LOOP\",\n    \"SSL_CB_ACCEPT_EXIT\",\n    \"SSL_CB_CONNECT_LOOP\",\n    \"SSL_CB_CONNECT_EXIT\",\n    \"SSL_CB_HANDSHAKE_START\",\n    \"SSL_CB_HANDSHAKE_DONE\",\n    \"Error\",\n    \"WantReadError\",\n    \"WantWriteError\",\n    \"WantX509LookupError\",\n    \"ZeroReturnError\",\n    \"SysCallError\",\n    \"NO_OVERLAPPING_PROTOCOLS\",\n    \"SSLeay_version\",\n    \"Session\",\n    \"Context\",\n    \"Connection\",\n    \"X509VerificationCodes\",\n]\n\n\nOPENSSL_VERSION_NUMBER: int = _lib.OPENSSL_VERSION_NUMBER\nOPENSSL_VERSION: int = _lib.OPENSSL_VERSION\nOPENSSL_CFLAGS: int = _lib.OPENSSL_CFLAGS\nOPENSSL_PLATFORM: int = _lib.OPENSSL_PLATFORM\nOPENSSL_DIR: int = _lib.OPENSSL_DIR\nOPENSSL_BUILT_ON: int = _lib.OPENSSL_BUILT_ON\n\nSSLEAY_VERSION = OPENSSL_VERSION\nSSLEAY_CFLAGS = OPENSSL_CFLAGS\nSSLEAY_PLATFORM = OPENSSL_PLATFORM\nSSLEAY_DIR = OPENSSL_DIR\nSSLEAY_BUILT_ON = OPENSSL_BUILT_ON\n\nSENT_SHUTDOWN = _lib.SSL_SENT_SHUTDOWN\nRECEIVED_SHUTDOWN = _lib.SSL_RECEIVED_SHUTDOWN\n\nSSLv23_METHOD = 3\nTLSv1_METHOD = 4\nTLSv1_1_METHOD = 5\nTLSv1_2_METHOD = 6\nTLS_METHOD = 7\nTLS_SERVER_METHOD = 8\nTLS_CLIENT_METHOD = 9\nDTLS_METHOD = 10\nDTLS_SERVER_METHOD = 11\nDTLS_CLIENT_METHOD = 12\n\nSSL3_VERSION: int = _lib.SSL3_VERSION\nTLS1_VERSION: int = _lib.TLS1_VERSION\nTLS1_1_VERSION: int = _lib.TLS1_1_VERSION\nTLS1_2_VERSION: int = _lib.TLS1_2_VERSION\nTLS1_3_VERSION: int = _lib.TLS1_3_VERSION\n\nOP_NO_SSLv2: int = _lib.SSL_OP_NO_SSLv2\nOP_NO_SSLv3: int = _lib.SSL_OP_NO_SSLv3\nOP_NO_TLSv1: int = _lib.SSL_OP_NO_TLSv1\nOP_NO_TLSv1_1: int = _lib.SSL_OP_NO_TLSv1_1\nOP_NO_TLSv1_2: int = _lib.SSL_OP_NO_TLSv1_2\ntry:\n    OP_NO_TLSv1_3: int = _lib.SSL_OP_NO_TLSv1_3\n    __all__.append(\"OP_NO_TLSv1_3\")\nexcept AttributeError:\n    pass\n\nMODE_RELEASE_BUFFERS: int = _lib.SSL_MODE_RELEASE_BUFFERS\n\nOP_SINGLE_DH_USE: int = _lib.SSL_OP_SINGLE_DH_USE\nOP_SINGLE_ECDH_USE: int = _lib.SSL_OP_SINGLE_ECDH_USE\nOP_EPHEMERAL_RSA: int = _lib.SSL_OP_EPHEMERAL_RSA\nOP_MICROSOFT_SESS_ID_BUG: int = _lib.SSL_OP_MICROSOFT_SESS_ID_BUG\nOP_NETSCAPE_CHALLENGE_BUG: int = _lib.SSL_OP_NETSCAPE_CHALLENGE_BUG\nOP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: int = (\n    _lib.SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG\n)\nOP_SSLREF2_REUSE_CERT_TYPE_BUG: int = _lib.SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG\nOP_MICROSOFT_BIG_SSLV3_BUFFER: int = _lib.SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER\nOP_MSIE_SSLV2_RSA_PADDING: int = _lib.SSL_OP_MSIE_SSLV2_RSA_PADDING\nOP_SSLEAY_080_CLIENT_DH_BUG: int = _lib.SSL_OP_SSLEAY_080_CLIENT_DH_BUG\nOP_TLS_D5_BUG: int = _lib.SSL_OP_TLS_D5_BUG\nOP_TLS_BLOCK_PADDING_BUG: int = _lib.SSL_OP_TLS_BLOCK_PADDING_BUG\nOP_DONT_INSERT_EMPTY_FRAGMENTS: int = _lib.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\nOP_CIPHER_SERVER_PREFERENCE: int = _lib.SSL_OP_CIPHER_SERVER_PREFERENCE\nOP_TLS_ROLLBACK_BUG: int = _lib.SSL_OP_TLS_ROLLBACK_BUG\nOP_PKCS1_CHECK_1 = _lib.SSL_OP_PKCS1_CHECK_1\nOP_PKCS1_CHECK_2: int = _lib.SSL_OP_PKCS1_CHECK_2\nOP_NETSCAPE_CA_DN_BUG: int = _lib.SSL_OP_NETSCAPE_CA_DN_BUG\nOP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: int = (\n    _lib.SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG\n)\nOP_NO_COMPRESSION: int = _lib.SSL_OP_NO_COMPRESSION\n\nOP_NO_QUERY_MTU: int = _lib.SSL_OP_NO_QUERY_MTU\nOP_COOKIE_EXCHANGE: int = _lib.SSL_OP_COOKIE_EXCHANGE\nOP_NO_TICKET: int = _lib.SSL_OP_NO_TICKET\n\ntry:\n    OP_NO_RENEGOTIATION: int = _lib.SSL_OP_NO_RENEGOTIATION\n    __all__.append(\"OP_NO_RENEGOTIATION\")\nexcept AttributeError:\n    pass\n\ntry:\n    OP_IGNORE_UNEXPECTED_EOF: int = _lib.SSL_OP_IGNORE_UNEXPECTED_EOF\n    __all__.append(\"OP_IGNORE_UNEXPECTED_EOF\")\nexcept AttributeError:\n    pass\n\ntry:\n    OP_LEGACY_SERVER_CONNECT: int = _lib.SSL_OP_LEGACY_SERVER_CONNECT\n    __all__.append(\"OP_LEGACY_SERVER_CONNECT\")\nexcept AttributeError:\n    pass\n\nOP_ALL: int = _lib.SSL_OP_ALL\n\nVERIFY_PEER: int = _lib.SSL_VERIFY_PEER\nVERIFY_FAIL_IF_NO_PEER_CERT: int = _lib.SSL_VERIFY_FAIL_IF_NO_PEER_CERT\nVERIFY_CLIENT_ONCE: int = _lib.SSL_VERIFY_CLIENT_ONCE\nVERIFY_NONE: int = _lib.SSL_VERIFY_NONE\n\nSESS_CACHE_OFF: int = _lib.SSL_SESS_CACHE_OFF\nSESS_CACHE_CLIENT: int = _lib.SSL_SESS_CACHE_CLIENT\nSESS_CACHE_SERVER: int = _lib.SSL_SESS_CACHE_SERVER\nSESS_CACHE_BOTH: int = _lib.SSL_SESS_CACHE_BOTH\nSESS_CACHE_NO_AUTO_CLEAR: int = _lib.SSL_SESS_CACHE_NO_AUTO_CLEAR\nSESS_CACHE_NO_INTERNAL_LOOKUP: int = _lib.SSL_SESS_CACHE_NO_INTERNAL_LOOKUP\nSESS_CACHE_NO_INTERNAL_STORE: int = _lib.SSL_SESS_CACHE_NO_INTERNAL_STORE\nSESS_CACHE_NO_INTERNAL: int = _lib.SSL_SESS_CACHE_NO_INTERNAL\n\nSSL_ST_CONNECT: int = _lib.SSL_ST_CONNECT\nSSL_ST_ACCEPT: int = _lib.SSL_ST_ACCEPT\nSSL_ST_MASK: int = _lib.SSL_ST_MASK\n\nSSL_CB_LOOP: int = _lib.SSL_CB_LOOP\nSSL_CB_EXIT: int = _lib.SSL_CB_EXIT\nSSL_CB_READ: int = _lib.SSL_CB_READ\nSSL_CB_WRITE: int = _lib.SSL_CB_WRITE\nSSL_CB_ALERT: int = _lib.SSL_CB_ALERT\nSSL_CB_READ_ALERT: int = _lib.SSL_CB_READ_ALERT\nSSL_CB_WRITE_ALERT: int = _lib.SSL_CB_WRITE_ALERT\nSSL_CB_ACCEPT_LOOP: int = _lib.SSL_CB_ACCEPT_LOOP\nSSL_CB_ACCEPT_EXIT: int = _lib.SSL_CB_ACCEPT_EXIT\nSSL_CB_CONNECT_LOOP: int = _lib.SSL_CB_CONNECT_LOOP\nSSL_CB_CONNECT_EXIT: int = _lib.SSL_CB_CONNECT_EXIT\nSSL_CB_HANDSHAKE_START: int = _lib.SSL_CB_HANDSHAKE_START\nSSL_CB_HANDSHAKE_DONE: int = _lib.SSL_CB_HANDSHAKE_DONE\n\n_T = TypeVar(\"_T\")\n_SetVerifyCallback = Callable[[\"Connection\", X509, int, int, int], bool]\n\n\nclass X509VerificationCodes:\n    \"\"\"\n    Success and error codes for X509 verification, as returned by the\n    underlying ``X509_STORE_CTX_get_error()`` function and passed by pyOpenSSL\n    to verification callback functions.\n\n    See `OpenSSL Verification Errors\n    <https://www.openssl.org/docs/manmaster/man3/X509_verify_cert_error_string.html#ERROR-CODES>`_\n    for details.\n    \"\"\"\n\n    OK = _lib.X509_V_OK\n    ERR_UNABLE_TO_GET_ISSUER_CERT = _lib.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT\n    ERR_UNABLE_TO_GET_CRL = _lib.X509_V_ERR_UNABLE_TO_GET_CRL\n    ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = (\n        _lib.X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE\n    )\n    ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = (\n        _lib.X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE\n    )\n    ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = (\n        _lib.X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY\n    )\n    ERR_CERT_SIGNATURE_FAILURE = _lib.X509_V_ERR_CERT_SIGNATURE_FAILURE\n    ERR_CRL_SIGNATURE_FAILURE = _lib.X509_V_ERR_CRL_SIGNATURE_FAILURE\n    ERR_CERT_NOT_YET_VALID = _lib.X509_V_ERR_CERT_NOT_YET_VALID\n    ERR_CERT_HAS_EXPIRED = _lib.X509_V_ERR_CERT_HAS_EXPIRED\n    ERR_CRL_NOT_YET_VALID = _lib.X509_V_ERR_CRL_NOT_YET_VALID\n    ERR_CRL_HAS_EXPIRED = _lib.X509_V_ERR_CRL_HAS_EXPIRED\n    ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = (\n        _lib.X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD\n    )\n    ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = (\n        _lib.X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD\n    )\n    ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = (\n        _lib.X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD\n    )\n    ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = (\n        _lib.X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD\n    )\n    ERR_OUT_OF_MEM = _lib.X509_V_ERR_OUT_OF_MEM\n    ERR_DEPTH_ZERO_SELF_SIGNED_CERT = (\n        _lib.X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT\n    )\n    ERR_SELF_SIGNED_CERT_IN_CHAIN = _lib.X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN\n    ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = (\n        _lib.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY\n    )\n    ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = (\n        _lib.X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE\n    )\n    ERR_CERT_CHAIN_TOO_LONG = _lib.X509_V_ERR_CERT_CHAIN_TOO_LONG\n    ERR_CERT_REVOKED = _lib.X509_V_ERR_CERT_REVOKED\n    ERR_INVALID_CA = _lib.X509_V_ERR_INVALID_CA\n    ERR_PATH_LENGTH_EXCEEDED = _lib.X509_V_ERR_PATH_LENGTH_EXCEEDED\n    ERR_INVALID_PURPOSE = _lib.X509_V_ERR_INVALID_PURPOSE\n    ERR_CERT_UNTRUSTED = _lib.X509_V_ERR_CERT_UNTRUSTED\n    ERR_CERT_REJECTED = _lib.X509_V_ERR_CERT_REJECTED\n    ERR_SUBJECT_ISSUER_MISMATCH = _lib.X509_V_ERR_SUBJECT_ISSUER_MISMATCH\n    ERR_AKID_SKID_MISMATCH = _lib.X509_V_ERR_AKID_SKID_MISMATCH\n    ERR_AKID_ISSUER_SERIAL_MISMATCH = (\n        _lib.X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH\n    )\n    ERR_KEYUSAGE_NO_CERTSIGN = _lib.X509_V_ERR_KEYUSAGE_NO_CERTSIGN\n    ERR_UNABLE_TO_GET_CRL_ISSUER = _lib.X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER\n    ERR_UNHANDLED_CRITICAL_EXTENSION = (\n        _lib.X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION\n    )\n    ERR_KEYUSAGE_NO_CRL_SIGN = _lib.X509_V_ERR_KEYUSAGE_NO_CRL_SIGN\n    ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = (\n        _lib.X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION\n    )\n    ERR_INVALID_NON_CA = _lib.X509_V_ERR_INVALID_NON_CA\n    ERR_PROXY_PATH_LENGTH_EXCEEDED = _lib.X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED\n    ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = (\n        _lib.X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE\n    )\n    ERR_PROXY_CERTIFICATES_NOT_ALLOWED = (\n        _lib.X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED\n    )\n    ERR_INVALID_EXTENSION = _lib.X509_V_ERR_INVALID_EXTENSION\n    ERR_INVALID_POLICY_EXTENSION = _lib.X509_V_ERR_INVALID_POLICY_EXTENSION\n    ERR_NO_EXPLICIT_POLICY = _lib.X509_V_ERR_NO_EXPLICIT_POLICY\n    ERR_DIFFERENT_CRL_SCOPE = _lib.X509_V_ERR_DIFFERENT_CRL_SCOPE\n    ERR_UNSUPPORTED_EXTENSION_FEATURE = (\n        _lib.X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE\n    )\n    ERR_UNNESTED_RESOURCE = _lib.X509_V_ERR_UNNESTED_RESOURCE\n    ERR_PERMITTED_VIOLATION = _lib.X509_V_ERR_PERMITTED_VIOLATION\n    ERR_EXCLUDED_VIOLATION = _lib.X509_V_ERR_EXCLUDED_VIOLATION\n    ERR_SUBTREE_MINMAX = _lib.X509_V_ERR_SUBTREE_MINMAX\n    ERR_UNSUPPORTED_CONSTRAINT_TYPE = (\n        _lib.X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE\n    )\n    ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = (\n        _lib.X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX\n    )\n    ERR_UNSUPPORTED_NAME_SYNTAX = _lib.X509_V_ERR_UNSUPPORTED_NAME_SYNTAX\n    ERR_CRL_PATH_VALIDATION_ERROR = _lib.X509_V_ERR_CRL_PATH_VALIDATION_ERROR\n    ERR_HOSTNAME_MISMATCH = _lib.X509_V_ERR_HOSTNAME_MISMATCH\n    ERR_EMAIL_MISMATCH = _lib.X509_V_ERR_EMAIL_MISMATCH\n    ERR_IP_ADDRESS_MISMATCH = _lib.X509_V_ERR_IP_ADDRESS_MISMATCH\n    ERR_APPLICATION_VERIFICATION = _lib.X509_V_ERR_APPLICATION_VERIFICATION\n\n\n# Taken from https://golang.org/src/crypto/x509/root_linux.go\n_CERTIFICATE_FILE_LOCATIONS = [\n    \"/etc/ssl/certs/ca-certificates.crt\",  # Debian/Ubuntu/Gentoo etc.\n    \"/etc/pki/tls/certs/ca-bundle.crt\",  # Fedora/RHEL 6\n    \"/etc/ssl/ca-bundle.pem\",  # OpenSUSE\n    \"/etc/pki/tls/cacert.pem\",  # OpenELEC\n    \"/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem\",  # CentOS/RHEL 7\n]\n\n_CERTIFICATE_PATH_LOCATIONS = [\n    \"/etc/ssl/certs\",  # SLES10/SLES11\n]\n\n# These values are compared to output from cffi's ffi.string so they must be\n# byte strings.\n_CRYPTOGRAPHY_MANYLINUX_CA_DIR = b\"/opt/pyca/cryptography/openssl/certs\"\n_CRYPTOGRAPHY_MANYLINUX_CA_FILE = b\"/opt/pyca/cryptography/openssl/cert.pem\"\n\n\nclass Error(Exception):\n    \"\"\"\n    An error occurred in an `OpenSSL.SSL` API.\n    \"\"\"\n\n\n_raise_current_error = partial(_exception_from_error_queue, Error)\n_openssl_assert = _make_assert(Error)\n\n\nclass WantReadError(Error):\n    pass\n\n\nclass WantWriteError(Error):\n    pass\n\n\nclass WantX509LookupError(Error):\n    pass\n\n\nclass ZeroReturnError(Error):\n    pass\n\n\nclass SysCallError(Error):\n    pass\n\n\nclass _CallbackExceptionHelper:\n    \"\"\"\n    A base class for wrapper classes that allow for intelligent exception\n    handling in OpenSSL callbacks.\n\n    :ivar list _problems: Any exceptions that occurred while executing in a\n        context where they could not be raised in the normal way.  Typically\n        this is because OpenSSL has called into some Python code and requires a\n        return value.  The exceptions are saved to be raised later when it is\n        possible to do so.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self._problems: List[Exception] = []\n\n    def raise_if_problem(self) -> None:\n        \"\"\"\n        Raise an exception from the OpenSSL error queue or that was previously\n        captured whe running a callback.\n        \"\"\"\n        if self._problems:\n            try:\n                _raise_current_error()\n            except Error:\n                pass\n            raise self._problems.pop(0)\n\n\nclass _VerifyHelper(_CallbackExceptionHelper):\n    \"\"\"\n    Wrap a callback such that it can be used as a certificate verification\n    callback.\n    \"\"\"\n\n    def __init__(self, callback):\n        _CallbackExceptionHelper.__init__(self)\n\n        @wraps(callback)\n        def wrapper(ok, store_ctx):\n            x509 = _lib.X509_STORE_CTX_get_current_cert(store_ctx)\n            _lib.X509_up_ref(x509)\n            cert = X509._from_raw_x509_ptr(x509)\n            error_number = _lib.X509_STORE_CTX_get_error(store_ctx)\n            error_depth = _lib.X509_STORE_CTX_get_error_depth(store_ctx)\n\n            index = _lib.SSL_get_ex_data_X509_STORE_CTX_idx()\n            ssl = _lib.X509_STORE_CTX_get_ex_data(store_ctx, index)\n            connection = Connection._reverse_mapping[ssl]\n\n            try:\n                result = callback(\n                    connection, cert, error_number, error_depth, ok\n                )\n            except Exception as e:\n                self._problems.append(e)\n                return 0\n            else:\n                if result:\n                    _lib.X509_STORE_CTX_set_error(store_ctx, _lib.X509_V_OK)\n                    return 1\n                else:\n                    return 0\n\n        self.callback = _ffi.callback(\n            \"int (*)(int, X509_STORE_CTX *)\", wrapper\n        )\n\n\nNO_OVERLAPPING_PROTOCOLS = object()\n\n\nclass _ALPNSelectHelper(_CallbackExceptionHelper):\n    \"\"\"\n    Wrap a callback such that it can be used as an ALPN selection callback.\n    \"\"\"\n\n    def __init__(self, callback):\n        _CallbackExceptionHelper.__init__(self)\n\n        @wraps(callback)\n        def wrapper(ssl, out, outlen, in_, inlen, arg):\n            try:\n                conn = Connection._reverse_mapping[ssl]\n\n                # The string passed to us is made up of multiple\n                # length-prefixed bytestrings. We need to split that into a\n                # list.\n                instr = _ffi.buffer(in_, inlen)[:]\n                protolist = []\n                while instr:\n                    encoded_len = instr[0]\n                    proto = instr[1 : encoded_len + 1]\n                    protolist.append(proto)\n                    instr = instr[encoded_len + 1 :]\n\n                # Call the callback\n                outbytes = callback(conn, protolist)\n                any_accepted = True\n                if outbytes is NO_OVERLAPPING_PROTOCOLS:\n                    outbytes = b\"\"\n                    any_accepted = False\n                elif not isinstance(outbytes, bytes):\n                    raise TypeError(\n                        \"ALPN callback must return a bytestring or the \"\n                        \"special NO_OVERLAPPING_PROTOCOLS sentinel value.\"\n                    )\n\n                # Save our callback arguments on the connection object to make\n                # sure that they don't get freed before OpenSSL can use them.\n                # Then, return them in the appropriate output parameters.\n                conn._alpn_select_callback_args = [\n                    _ffi.new(\"unsigned char *\", len(outbytes)),\n                    _ffi.new(\"unsigned char[]\", outbytes),\n                ]\n                outlen[0] = conn._alpn_select_callback_args[0][0]\n                out[0] = conn._alpn_select_callback_args[1]\n                if not any_accepted:\n                    return _lib.SSL_TLSEXT_ERR_NOACK\n                return _lib.SSL_TLSEXT_ERR_OK\n            except Exception as e:\n                self._problems.append(e)\n                return _lib.SSL_TLSEXT_ERR_ALERT_FATAL\n\n        self.callback = _ffi.callback(\n            (\n                \"int (*)(SSL *, unsigned char **, unsigned char *, \"\n                \"const unsigned char *, unsigned int, void *)\"\n            ),\n            wrapper,\n        )\n\n\nclass _OCSPServerCallbackHelper(_CallbackExceptionHelper):\n    \"\"\"\n    Wrap a callback such that it can be used as an OCSP callback for the server\n    side.\n\n    Annoyingly, OpenSSL defines one OCSP callback but uses it in two different\n    ways. For servers, that callback is expected to retrieve some OCSP data and\n    hand it to OpenSSL, and may return only SSL_TLSEXT_ERR_OK,\n    SSL_TLSEXT_ERR_FATAL, and SSL_TLSEXT_ERR_NOACK. For clients, that callback\n    is expected to check the OCSP data, and returns a negative value on error,\n    0 if the response is not acceptable, or positive if it is. These are\n    mutually exclusive return code behaviours, and they mean that we need two\n    helpers so that we always return an appropriate error code if the user's\n    code throws an exception.\n\n    Given that we have to have two helpers anyway, these helpers are a bit more\n    helpery than most: specifically, they hide a few more of the OpenSSL\n    functions so that the user has an easier time writing these callbacks.\n\n    This helper implements the server side.\n    \"\"\"\n\n    def __init__(self, callback):\n        _CallbackExceptionHelper.__init__(self)\n\n        @wraps(callback)\n        def wrapper(ssl, cdata):\n            try:\n                conn = Connection._reverse_mapping[ssl]\n\n                # Extract the data if any was provided.\n                if cdata != _ffi.NULL:\n                    data = _ffi.from_handle(cdata)\n                else:\n                    data = None\n\n                # Call the callback.\n                ocsp_data = callback(conn, data)\n\n                if not isinstance(ocsp_data, bytes):\n                    raise TypeError(\"OCSP callback must return a bytestring.\")\n\n                # If the OCSP data was provided, we will pass it to OpenSSL.\n                # However, we have an early exit here: if no OCSP data was\n                # provided we will just exit out and tell OpenSSL that there\n                # is nothing to do.\n                if not ocsp_data:\n                    return 3  # SSL_TLSEXT_ERR_NOACK\n\n                # OpenSSL takes ownership of this data and expects it to have\n                # been allocated by OPENSSL_malloc.\n                ocsp_data_length = len(ocsp_data)\n                data_ptr = _lib.OPENSSL_malloc(ocsp_data_length)\n                _ffi.buffer(data_ptr, ocsp_data_length)[:] = ocsp_data\n\n                _lib.SSL_set_tlsext_status_ocsp_resp(\n                    ssl, data_ptr, ocsp_data_length\n                )\n\n                return 0\n            except Exception as e:\n                self._problems.append(e)\n                return 2  # SSL_TLSEXT_ERR_ALERT_FATAL\n\n        self.callback = _ffi.callback(\"int (*)(SSL *, void *)\", wrapper)\n\n\nclass _OCSPClientCallbackHelper(_CallbackExceptionHelper):\n    \"\"\"\n    Wrap a callback such that it can be used as an OCSP callback for the client\n    side.\n\n    Annoyingly, OpenSSL defines one OCSP callback but uses it in two different\n    ways. For servers, that callback is expected to retrieve some OCSP data and\n    hand it to OpenSSL, and may return only SSL_TLSEXT_ERR_OK,\n    SSL_TLSEXT_ERR_FATAL, and SSL_TLSEXT_ERR_NOACK. For clients, that callback\n    is expected to check the OCSP data, and returns a negative value on error,\n    0 if the response is not acceptable, or positive if it is. These are\n    mutually exclusive return code behaviours, and they mean that we need two\n    helpers so that we always return an appropriate error code if the user's\n    code throws an exception.\n\n    Given that we have to have two helpers anyway, these helpers are a bit more\n    helpery than most: specifically, they hide a few more of the OpenSSL\n    functions so that the user has an easier time writing these callbacks.\n\n    This helper implements the client side.\n    \"\"\"\n\n    def __init__(self, callback):\n        _CallbackExceptionHelper.__init__(self)\n\n        @wraps(callback)\n        def wrapper(ssl, cdata):\n            try:\n                conn = Connection._reverse_mapping[ssl]\n\n                # Extract the data if any was provided.\n                if cdata != _ffi.NULL:\n                    data = _ffi.from_handle(cdata)\n                else:\n                    data = None\n\n                # Get the OCSP data.\n                ocsp_ptr = _ffi.new(\"unsigned char **\")\n                ocsp_len = _lib.SSL_get_tlsext_status_ocsp_resp(ssl, ocsp_ptr)\n                if ocsp_len < 0:\n                    # No OCSP data.\n                    ocsp_data = b\"\"\n                else:\n                    # Copy the OCSP data, then pass it to the callback.\n                    ocsp_data = _ffi.buffer(ocsp_ptr[0], ocsp_len)[:]\n\n                valid = callback(conn, ocsp_data, data)\n\n                # Return 1 on success or 0 on error.\n                return int(bool(valid))\n\n            except Exception as e:\n                self._problems.append(e)\n                # Return negative value if an exception is hit.\n                return -1\n\n        self.callback = _ffi.callback(\"int (*)(SSL *, void *)\", wrapper)\n\n\nclass _CookieGenerateCallbackHelper(_CallbackExceptionHelper):\n    def __init__(self, callback):\n        _CallbackExceptionHelper.__init__(self)\n\n        @wraps(callback)\n        def wrapper(ssl, out, outlen):\n            try:\n                conn = Connection._reverse_mapping[ssl]\n                cookie = callback(conn)\n                out[0 : len(cookie)] = cookie\n                outlen[0] = len(cookie)\n                return 1\n            except Exception as e:\n                self._problems.append(e)\n                # \"a zero return value can be used to abort the handshake\"\n                return 0\n\n        self.callback = _ffi.callback(\n            \"int (*)(SSL *, unsigned char *, unsigned int *)\",\n            wrapper,\n        )\n\n\nclass _CookieVerifyCallbackHelper(_CallbackExceptionHelper):\n    def __init__(self, callback):\n        _CallbackExceptionHelper.__init__(self)\n\n        @wraps(callback)\n        def wrapper(ssl, c_cookie, cookie_len):\n            try:\n                conn = Connection._reverse_mapping[ssl]\n                return callback(conn, bytes(c_cookie[0:cookie_len]))\n            except Exception as e:\n                self._problems.append(e)\n                return 0\n\n        self.callback = _ffi.callback(\n            \"int (*)(SSL *, unsigned char *, unsigned int)\",\n            wrapper,\n        )\n\n\ndef _asFileDescriptor(obj):\n    fd = None\n    if not isinstance(obj, int):\n        meth = getattr(obj, \"fileno\", None)\n        if meth is not None:\n            obj = meth()\n\n    if isinstance(obj, int):\n        fd = obj\n\n    if not isinstance(fd, int):\n        raise TypeError(\"argument must be an int, or have a fileno() method.\")\n    elif fd < 0:\n        raise ValueError(\n            \"file descriptor cannot be a negative integer (%i)\" % (fd,)\n        )\n\n    return fd\n\n\ndef OpenSSL_version(type: int) -> bytes:\n    \"\"\"\n    Return a string describing the version of OpenSSL in use.\n\n    :param type: One of the :const:`OPENSSL_` constants defined in this module.\n    \"\"\"\n    return _ffi.string(_lib.OpenSSL_version(type))\n\n\nSSLeay_version = OpenSSL_version\n\n\ndef _make_requires(flag: int, error: str) -> Callable[[_T], _T]:\n    \"\"\"\n    Builds a decorator that ensures that functions that rely on OpenSSL\n    functions that are not present in this build raise NotImplementedError,\n    rather than AttributeError coming out of cryptography.\n\n    :param flag: A cryptography flag that guards the functions, e.g.\n        ``Cryptography_HAS_NEXTPROTONEG``.\n    :param error: The string to be used in the exception if the flag is false.\n    \"\"\"\n\n    def _requires_decorator(func):\n        if not flag:\n\n            @wraps(func)\n            def explode(*args, **kwargs):\n                raise NotImplementedError(error)\n\n            return explode\n        else:\n            return func\n\n    return _requires_decorator\n\n\n_requires_alpn = _make_requires(\n    _lib.Cryptography_HAS_ALPN, \"ALPN not available\"\n)\n\n\n_requires_keylog = _make_requires(\n    getattr(_lib, \"Cryptography_HAS_KEYLOG\", 0), \"Key logging not available\"\n)\n\n\nclass Session:\n    \"\"\"\n    A class representing an SSL session.  A session defines certain connection\n    parameters which may be re-used to speed up the setup of subsequent\n    connections.\n\n    .. versionadded:: 0.14\n    \"\"\"\n\n    pass\n\n\nclass Context:\n    \"\"\"\n    :class:`OpenSSL.SSL.Context` instances define the parameters for setting\n    up new SSL connections.\n\n    :param method: One of TLS_METHOD, TLS_CLIENT_METHOD, TLS_SERVER_METHOD,\n                   DTLS_METHOD, DTLS_CLIENT_METHOD, or DTLS_SERVER_METHOD.\n                   SSLv23_METHOD, TLSv1_METHOD, etc. are deprecated and should\n                   not be used.\n    \"\"\"\n\n    _methods: typing.ClassVar[typing.Dict] = {\n        SSLv23_METHOD: (_lib.TLS_method, None),\n        TLSv1_METHOD: (_lib.TLS_method, TLS1_VERSION),\n        TLSv1_1_METHOD: (_lib.TLS_method, TLS1_1_VERSION),\n        TLSv1_2_METHOD: (_lib.TLS_method, TLS1_2_VERSION),\n        TLS_METHOD: (_lib.TLS_method, None),\n        TLS_SERVER_METHOD: (_lib.TLS_server_method, None),\n        TLS_CLIENT_METHOD: (_lib.TLS_client_method, None),\n        DTLS_METHOD: (_lib.DTLS_method, None),\n        DTLS_SERVER_METHOD: (_lib.DTLS_server_method, None),\n        DTLS_CLIENT_METHOD: (_lib.DTLS_client_method, None),\n    }\n\n    def __init__(self, method: int) -> None:\n        if not isinstance(method, int):\n            raise TypeError(\"method must be an integer\")\n\n        try:\n            method_func, version = self._methods[method]\n        except KeyError:\n            raise ValueError(\"No such protocol\")\n\n        method_obj = method_func()\n        _openssl_assert(method_obj != _ffi.NULL)\n\n        context = _lib.SSL_CTX_new(method_obj)\n        _openssl_assert(context != _ffi.NULL)\n        context = _ffi.gc(context, _lib.SSL_CTX_free)\n\n        self._context = context\n        self._passphrase_helper = None\n        self._passphrase_callback = None\n        self._passphrase_userdata = None\n        self._verify_helper = None\n        self._verify_callback = None\n        self._info_callback = None\n        self._keylog_callback = None\n        self._tlsext_servername_callback = None\n        self._app_data = None\n        self._alpn_select_helper = None\n        self._alpn_select_callback = None\n        self._ocsp_helper = None\n        self._ocsp_callback = None\n        self._ocsp_data = None\n        self._cookie_generate_helper = None\n        self._cookie_verify_helper = None\n\n        self.set_mode(_lib.SSL_MODE_ENABLE_PARTIAL_WRITE)\n        if version is not None:\n            self.set_min_proto_version(version)\n            self.set_max_proto_version(version)\n\n    def set_min_proto_version(self, version: int) -> None:\n        \"\"\"\n        Set the minimum supported protocol version. Setting the minimum\n        version to 0 will enable protocol versions down to the lowest version\n        supported by the library.\n\n        If the underlying OpenSSL build is missing support for the selected\n        version, this method will raise an exception.\n        \"\"\"\n        _openssl_assert(\n            _lib.SSL_CTX_set_min_proto_version(self._context, version) == 1\n        )\n\n    def set_max_proto_version(self, version: int) -> None:\n        \"\"\"\n        Set the maximum supported protocol version. Setting the maximum\n        version to 0 will enable protocol versions up to the highest version\n        supported by the library.\n\n        If the underlying OpenSSL build is missing support for the selected\n        version, this method will raise an exception.\n        \"\"\"\n        _openssl_assert(\n            _lib.SSL_CTX_set_max_proto_version(self._context, version) == 1\n        )\n\n    def load_verify_locations(\n        self,\n        cafile: Optional[_StrOrBytesPath],\n        capath: Optional[_StrOrBytesPath] = None,\n    ) -> None:\n        \"\"\"\n        Let SSL know where we can find trusted certificates for the certificate\n        chain.  Note that the certificates have to be in PEM format.\n\n        If capath is passed, it must be a directory prepared using the\n        ``c_rehash`` tool included with OpenSSL.  Either, but not both, of\n        *pemfile* or *capath* may be :data:`None`.\n\n        :param cafile: In which file we can find the certificates (``bytes`` or\n            ``str``).\n        :param capath: In which directory we can find the certificates\n            (``bytes`` or ``str``).\n\n        :return: None\n        \"\"\"\n        if cafile is None:\n            cafile = _ffi.NULL\n        else:\n            cafile = _path_bytes(cafile)\n\n        if capath is None:\n            capath = _ffi.NULL\n        else:\n            capath = _path_bytes(capath)\n\n        load_result = _lib.SSL_CTX_load_verify_locations(\n            self._context, cafile, capath\n        )\n        if not load_result:\n            _raise_current_error()\n\n    def _wrap_callback(self, callback):\n        @wraps(callback)\n        def wrapper(size, verify, userdata):\n            return callback(size, verify, self._passphrase_userdata)\n\n        return _PassphraseHelper(\n            FILETYPE_PEM, wrapper, more_args=True, truncate=True\n        )\n\n    def set_passwd_cb(\n        self,\n        callback: Callable[[int, bool, Optional[_T]], bytes],\n        userdata: Optional[_T] = None,\n    ) -> None:\n        \"\"\"\n        Set the passphrase callback.  This function will be called\n        when a private key with a passphrase is loaded.\n\n        :param callback: The Python callback to use.  This must accept three\n            positional arguments.  First, an integer giving the maximum length\n            of the passphrase it may return.  If the returned passphrase is\n            longer than this, it will be truncated.  Second, a boolean value\n            which will be true if the user should be prompted for the\n            passphrase twice and the callback should verify that the two values\n            supplied are equal. Third, the value given as the *userdata*\n            parameter to :meth:`set_passwd_cb`.  The *callback* must return\n            a byte string. If an error occurs, *callback* should return a false\n            value (e.g. an empty string).\n        :param userdata: (optional) A Python object which will be given as\n                         argument to the callback\n        :return: None\n        \"\"\"\n        if not callable(callback):\n            raise TypeError(\"callback must be callable\")\n\n        self._passphrase_helper = self._wrap_callback(callback)\n        self._passphrase_callback = self._passphrase_helper.callback\n        _lib.SSL_CTX_set_default_passwd_cb(\n            self._context, self._passphrase_callback\n        )\n        self._passphrase_userdata = userdata\n\n    def set_default_verify_paths(self) -> None:\n        \"\"\"\n        Specify that the platform provided CA certificates are to be used for\n        verification purposes. This method has some caveats related to the\n        binary wheels that cryptography (pyOpenSSL's primary dependency) ships:\n\n        *   macOS will only load certificates using this method if the user has\n            the ``openssl@1.1`` `Homebrew <https://brew.sh>`_ formula installed\n            in the default location.\n        *   Windows will not work.\n        *   manylinux cryptography wheels will work on most common Linux\n            distributions in pyOpenSSL 17.1.0 and above.  pyOpenSSL detects the\n            manylinux wheel and attempts to load roots via a fallback path.\n\n        :return: None\n        \"\"\"\n        # SSL_CTX_set_default_verify_paths will attempt to load certs from\n        # both a cafile and capath that are set at compile time. However,\n        # it will first check environment variables and, if present, load\n        # those paths instead\n        set_result = _lib.SSL_CTX_set_default_verify_paths(self._context)\n        _openssl_assert(set_result == 1)\n        # After attempting to set default_verify_paths we need to know whether\n        # to go down the fallback path.\n        # First we'll check to see if any env vars have been set. If so,\n        # we won't try to do anything else because the user has set the path\n        # themselves.\n        dir_env_var = _ffi.string(_lib.X509_get_default_cert_dir_env()).decode(\n            \"ascii\"\n        )\n        file_env_var = _ffi.string(\n            _lib.X509_get_default_cert_file_env()\n        ).decode(\"ascii\")\n        if not self._check_env_vars_set(dir_env_var, file_env_var):\n            default_dir = _ffi.string(_lib.X509_get_default_cert_dir())\n            default_file = _ffi.string(_lib.X509_get_default_cert_file())\n            # Now we check to see if the default_dir and default_file are set\n            # to the exact values we use in our manylinux builds. If they are\n            # then we know to load the fallbacks\n            if (\n                default_dir == _CRYPTOGRAPHY_MANYLINUX_CA_DIR\n                and default_file == _CRYPTOGRAPHY_MANYLINUX_CA_FILE\n            ):\n                # This is manylinux, let's load our fallback paths\n                self._fallback_default_verify_paths(\n                    _CERTIFICATE_FILE_LOCATIONS, _CERTIFICATE_PATH_LOCATIONS\n                )\n\n    def _check_env_vars_set(self, dir_env_var, file_env_var):\n        \"\"\"\n        Check to see if the default cert dir/file environment vars are present.\n\n        :return: bool\n        \"\"\"\n        return (\n            os.environ.get(file_env_var) is not None\n            or os.environ.get(dir_env_var) is not None\n        )\n\n    def _fallback_default_verify_paths(self, file_path, dir_path):\n        \"\"\"\n        Default verify paths are based on the compiled version of OpenSSL.\n        However, when pyca/cryptography is compiled as a manylinux wheel\n        that compiled location can potentially be wrong. So, like Go, we\n        will try a predefined set of paths and attempt to load roots\n        from there.\n\n        :return: None\n        \"\"\"\n        for cafile in file_path:\n            if os.path.isfile(cafile):\n                self.load_verify_locations(cafile)\n                break\n\n        for capath in dir_path:\n            if os.path.isdir(capath):\n                self.load_verify_locations(None, capath)\n                break\n\n    def use_certificate_chain_file(self, certfile: _StrOrBytesPath) -> None:\n        \"\"\"\n        Load a certificate chain from a file.\n\n        :param certfile: The name of the certificate chain file (``bytes`` or\n            ``str``).  Must be PEM encoded.\n\n        :return: None\n        \"\"\"\n        certfile = _path_bytes(certfile)\n\n        result = _lib.SSL_CTX_use_certificate_chain_file(\n            self._context, certfile\n        )\n        if not result:\n            _raise_current_error()\n\n    def use_certificate_file(\n        self, certfile: _StrOrBytesPath, filetype: int = FILETYPE_PEM\n    ) -> None:\n        \"\"\"\n        Load a certificate from a file\n\n        :param certfile: The name of the certificate file (``bytes`` or\n            ``str``).\n        :param filetype: (optional) The encoding of the file, which is either\n            :const:`FILETYPE_PEM` or :const:`FILETYPE_ASN1`.  The default is\n            :const:`FILETYPE_PEM`.\n\n        :return: None\n        \"\"\"\n        certfile = _path_bytes(certfile)\n        if not isinstance(filetype, int):\n            raise TypeError(\"filetype must be an integer\")\n\n        use_result = _lib.SSL_CTX_use_certificate_file(\n            self._context, certfile, filetype\n        )\n        if not use_result:\n            _raise_current_error()\n\n    def use_certificate(self, cert: X509) -> None:\n        \"\"\"\n        Load a certificate from a X509 object\n\n        :param cert: The X509 object\n        :return: None\n        \"\"\"\n        # Mirrored at Connection.use_certificate\n        if not isinstance(cert, X509):\n            raise TypeError(\"cert must be an X509 instance\")\n\n        use_result = _lib.SSL_CTX_use_certificate(self._context, cert._x509)\n        if not use_result:\n            _raise_current_error()\n\n    def add_extra_chain_cert(self, certobj: X509) -> None:\n        \"\"\"\n        Add certificate to chain\n\n        :param certobj: The X509 certificate object to add to the chain\n        :return: None\n        \"\"\"\n        if not isinstance(certobj, X509):\n            raise TypeError(\"certobj must be an X509 instance\")\n\n        copy = _lib.X509_dup(certobj._x509)\n        add_result = _lib.SSL_CTX_add_extra_chain_cert(self._context, copy)\n        if not add_result:\n            # TODO: This is untested.\n            _lib.X509_free(copy)\n            _raise_current_error()\n\n    def _raise_passphrase_exception(self) -> None:\n        if self._passphrase_helper is not None:\n            self._passphrase_helper.raise_if_problem(Error)\n\n        _raise_current_error()\n\n    def use_privatekey_file(\n        self, keyfile: _StrOrBytesPath, filetype: int = FILETYPE_PEM\n    ) -> None:\n        \"\"\"\n        Load a private key from a file\n\n        :param keyfile: The name of the key file (``bytes`` or ``str``)\n        :param filetype: (optional) The encoding of the file, which is either\n            :const:`FILETYPE_PEM` or :const:`FILETYPE_ASN1`.  The default is\n            :const:`FILETYPE_PEM`.\n\n        :return: None\n        \"\"\"\n        keyfile = _path_bytes(keyfile)\n\n        if not isinstance(filetype, int):\n            raise TypeError(\"filetype must be an integer\")\n\n        use_result = _lib.SSL_CTX_use_PrivateKey_file(\n            self._context, keyfile, filetype\n        )\n        if not use_result:\n            self._raise_passphrase_exception()\n\n    def use_privatekey(self, pkey: PKey) -> None:\n        \"\"\"\n        Load a private key from a PKey object\n\n        :param pkey: The PKey object\n        :return: None\n        \"\"\"\n        # Mirrored at Connection.use_privatekey\n        if not isinstance(pkey, PKey):\n            raise TypeError(\"pkey must be a PKey instance\")\n\n        use_result = _lib.SSL_CTX_use_PrivateKey(self._context, pkey._pkey)\n        if not use_result:\n            self._raise_passphrase_exception()\n\n    def check_privatekey(self) -> None:\n        \"\"\"\n        Check if the private key (loaded with :meth:`use_privatekey`) matches\n        the certificate (loaded with :meth:`use_certificate`)\n\n        :return: :data:`None` (raises :exc:`Error` if something's wrong)\n        \"\"\"\n        if not _lib.SSL_CTX_check_private_key(self._context):\n            _raise_current_error()\n\n    def load_client_ca(self, cafile: bytes) -> None:\n        \"\"\"\n        Load the trusted certificates that will be sent to the client.  Does\n        not actually imply any of the certificates are trusted; that must be\n        configured separately.\n\n        :param bytes cafile: The path to a certificates file in PEM format.\n        :return: None\n        \"\"\"\n        ca_list = _lib.SSL_load_client_CA_file(\n            _text_to_bytes_and_warn(\"cafile\", cafile)\n        )\n        _openssl_assert(ca_list != _ffi.NULL)\n        _lib.SSL_CTX_set_client_CA_list(self._context, ca_list)\n\n    def set_session_id(self, buf: bytes) -> None:\n        \"\"\"\n        Set the session id to *buf* within which a session can be reused for\n        this Context object.  This is needed when doing session resumption,\n        because there is no way for a stored session to know which Context\n        object it is associated with.\n\n        :param bytes buf: The session id.\n\n        :returns: None\n        \"\"\"\n        buf = _text_to_bytes_and_warn(\"buf\", buf)\n        _openssl_assert(\n            _lib.SSL_CTX_set_session_id_context(self._context, buf, len(buf))\n            == 1\n        )\n\n    def set_session_cache_mode(self, mode: int) -> None:\n        \"\"\"\n        Set the behavior of the session cache used by all connections using\n        this Context.  The previously set mode is returned.  See\n        :const:`SESS_CACHE_*` for details about particular modes.\n\n        :param mode: One or more of the SESS_CACHE_* flags (combine using\n            bitwise or)\n        :returns: The previously set caching mode.\n\n        .. versionadded:: 0.14\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(\"mode must be an integer\")\n\n        return _lib.SSL_CTX_set_session_cache_mode(self._context, mode)\n\n    def get_session_cache_mode(self) -> int:\n        \"\"\"\n        Get the current session cache mode.\n\n        :returns: The currently used cache mode.\n\n        .. versionadded:: 0.14\n        \"\"\"\n        return _lib.SSL_CTX_get_session_cache_mode(self._context)\n\n    def set_verify(\n        self, mode: int, callback: Optional[_SetVerifyCallback] = None\n    ) -> None:\n        \"\"\"\n        Set the verification flags for this Context object to *mode* and\n        specify that *callback* should be used for verification callbacks.\n\n        :param mode: The verify mode, this should be one of\n            :const:`VERIFY_NONE` and :const:`VERIFY_PEER`. If\n            :const:`VERIFY_PEER` is used, *mode* can be OR:ed with\n            :const:`VERIFY_FAIL_IF_NO_PEER_CERT` and\n            :const:`VERIFY_CLIENT_ONCE` to further control the behaviour.\n        :param callback: The optional Python verification callback to use.\n            This should take five arguments: A Connection object, an X509\n            object, and three integer variables, which are in turn potential\n            error number, error depth and return code. *callback* should\n            return True if verification passes and False otherwise.\n            If omitted, OpenSSL's default verification is used.\n        :return: None\n\n        See SSL_CTX_set_verify(3SSL) for further details.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(\"mode must be an integer\")\n\n        if callback is None:\n            self._verify_helper = None\n            self._verify_callback = None\n            _lib.SSL_CTX_set_verify(self._context, mode, _ffi.NULL)\n        else:\n            if not callable(callback):\n                raise TypeError(\"callback must be callable\")\n\n            self._verify_helper = _VerifyHelper(callback)\n            self._verify_callback = self._verify_helper.callback\n            _lib.SSL_CTX_set_verify(self._context, mode, self._verify_callback)\n\n    def set_verify_depth(self, depth: int) -> None:\n        \"\"\"\n        Set the maximum depth for the certificate chain verification that shall\n        be allowed for this Context object.\n\n        :param depth: An integer specifying the verify depth\n        :return: None\n        \"\"\"\n        if not isinstance(depth, int):\n            raise TypeError(\"depth must be an integer\")\n\n        _lib.SSL_CTX_set_verify_depth(self._context, depth)\n\n    def get_verify_mode(self) -> int:\n        \"\"\"\n        Retrieve the Context object's verify mode, as set by\n        :meth:`set_verify`.\n\n        :return: The verify mode\n        \"\"\"\n        return _lib.SSL_CTX_get_verify_mode(self._context)\n\n    def get_verify_depth(self) -> int:\n        \"\"\"\n        Retrieve the Context object's verify depth, as set by\n        :meth:`set_verify_depth`.\n\n        :return: The verify depth\n        \"\"\"\n        return _lib.SSL_CTX_get_verify_depth(self._context)\n\n    def load_tmp_dh(self, dhfile: _StrOrBytesPath) -> None:\n        \"\"\"\n        Load parameters for Ephemeral Diffie-Hellman\n\n        :param dhfile: The file to load EDH parameters from (``bytes`` or\n            ``str``).\n\n        :return: None\n        \"\"\"\n        dhfile = _path_bytes(dhfile)\n\n        bio = _lib.BIO_new_file(dhfile, b\"r\")\n        if bio == _ffi.NULL:\n            _raise_current_error()\n        bio = _ffi.gc(bio, _lib.BIO_free)\n\n        dh = _lib.PEM_read_bio_DHparams(bio, _ffi.NULL, _ffi.NULL, _ffi.NULL)\n        dh = _ffi.gc(dh, _lib.DH_free)\n        res = _lib.SSL_CTX_set_tmp_dh(self._context, dh)\n        _openssl_assert(res == 1)\n\n    def set_tmp_ecdh(self, curve: _EllipticCurve) -> None:\n        \"\"\"\n        Select a curve to use for ECDHE key exchange.\n\n        :param curve: A curve object to use as returned by either\n            :meth:`OpenSSL.crypto.get_elliptic_curve` or\n            :meth:`OpenSSL.crypto.get_elliptic_curves`.\n\n        :return: None\n        \"\"\"\n        _lib.SSL_CTX_set_tmp_ecdh(self._context, curve._to_EC_KEY())\n\n    def set_cipher_list(self, cipher_list: bytes) -> None:\n        \"\"\"\n        Set the list of ciphers to be used in this context.\n\n        See the OpenSSL manual for more information (e.g.\n        :manpage:`ciphers(1)`).\n\n        :param bytes cipher_list: An OpenSSL cipher string.\n        :return: None\n        \"\"\"\n        cipher_list = _text_to_bytes_and_warn(\"cipher_list\", cipher_list)\n\n        if not isinstance(cipher_list, bytes):\n            raise TypeError(\"cipher_list must be a byte string.\")\n\n        _openssl_assert(\n            _lib.SSL_CTX_set_cipher_list(self._context, cipher_list) == 1\n        )\n        # In OpenSSL 1.1.1 setting the cipher list will always return TLS 1.3\n        # ciphers even if you pass an invalid cipher. Applications (like\n        # Twisted) have tests that depend on an error being raised if an\n        # invalid cipher string is passed, but without the following check\n        # for the TLS 1.3 specific cipher suites it would never error.\n        tmpconn = Connection(self, None)\n        if tmpconn.get_cipher_list() == [\n            \"TLS_AES_256_GCM_SHA384\",\n            \"TLS_CHACHA20_POLY1305_SHA256\",\n            \"TLS_AES_128_GCM_SHA256\",\n        ]:\n            raise Error(\n                [\n                    (\n                        \"SSL routines\",\n                        \"SSL_CTX_set_cipher_list\",\n                        \"no cipher match\",\n                    ),\n                ],\n            )\n\n    def set_client_ca_list(\n        self, certificate_authorities: Sequence[X509Name]\n    ) -> None:\n        \"\"\"\n        Set the list of preferred client certificate signers for this server\n        context.\n\n        This list of certificate authorities will be sent to the client when\n        the server requests a client certificate.\n\n        :param certificate_authorities: a sequence of X509Names.\n        :return: None\n\n        .. versionadded:: 0.10\n        \"\"\"\n        name_stack = _lib.sk_X509_NAME_new_null()\n        _openssl_assert(name_stack != _ffi.NULL)\n\n        try:\n            for ca_name in certificate_authorities:\n                if not isinstance(ca_name, X509Name):\n                    raise TypeError(\n                        f\"client CAs must be X509Name objects, not \"\n                        f\"{type(ca_name).__name__} objects\"\n                    )\n                copy = _lib.X509_NAME_dup(ca_name._name)\n                _openssl_assert(copy != _ffi.NULL)\n                push_result = _lib.sk_X509_NAME_push(name_stack, copy)\n                if not push_result:\n                    _lib.X509_NAME_free(copy)\n                    _raise_current_error()\n        except Exception:\n            _lib.sk_X509_NAME_free(name_stack)\n            raise\n\n        _lib.SSL_CTX_set_client_CA_list(self._context, name_stack)\n\n    def add_client_ca(self, certificate_authority: X509) -> None:\n        \"\"\"\n        Add the CA certificate to the list of preferred signers for this\n        context.\n\n        The list of certificate authorities will be sent to the client when the\n        server requests a client certificate.\n\n        :param certificate_authority: certificate authority's X509 certificate.\n        :return: None\n\n        .. versionadded:: 0.10\n        \"\"\"\n        if not isinstance(certificate_authority, X509):\n            raise TypeError(\"certificate_authority must be an X509 instance\")\n\n        add_result = _lib.SSL_CTX_add_client_CA(\n            self._context, certificate_authority._x509\n        )\n        _openssl_assert(add_result == 1)\n\n    def set_timeout(self, timeout: int) -> None:\n        \"\"\"\n        Set the timeout for newly created sessions for this Context object to\n        *timeout*.  The default value is 300 seconds. See the OpenSSL manual\n        for more information (e.g. :manpage:`SSL_CTX_set_timeout(3)`).\n\n        :param timeout: The timeout in (whole) seconds\n        :return: The previous session timeout\n        \"\"\"\n        if not isinstance(timeout, int):\n            raise TypeError(\"timeout must be an integer\")\n\n        return _lib.SSL_CTX_set_timeout(self._context, timeout)\n\n    def get_timeout(self) -> int:\n        \"\"\"\n        Retrieve session timeout, as set by :meth:`set_timeout`. The default\n        is 300 seconds.\n\n        :return: The session timeout\n        \"\"\"\n        return _lib.SSL_CTX_get_timeout(self._context)\n\n    def set_info_callback(\n        self, callback: Callable[[\"Connection\", int, int], None]\n    ) -> None:\n        \"\"\"\n        Set the information callback to *callback*. This function will be\n        called from time to time during SSL handshakes.\n\n        :param callback: The Python callback to use.  This should take three\n            arguments: a Connection object and two integers.  The first integer\n            specifies where in the SSL handshake the function was called, and\n            the other the return code from a (possibly failed) internal\n            function call.\n        :return: None\n        \"\"\"\n\n        @wraps(callback)\n        def wrapper(ssl, where, return_code):\n            callback(Connection._reverse_mapping[ssl], where, return_code)\n\n        self._info_callback = _ffi.callback(\n            \"void (*)(const SSL *, int, int)\", wrapper\n        )\n        _lib.SSL_CTX_set_info_callback(self._context, self._info_callback)\n\n    @_requires_keylog\n    def set_keylog_callback(\n        self, callback: Callable[[\"Connection\", bytes], None]\n    ) -> None:\n        \"\"\"\n        Set the TLS key logging callback to *callback*. This function will be\n        called whenever TLS key material is generated or received, in order\n        to allow applications to store this keying material for debugging\n        purposes.\n\n        :param callback: The Python callback to use.  This should take two\n            arguments: a Connection object and a bytestring that contains\n            the key material in the format used by NSS for its SSLKEYLOGFILE\n            debugging output.\n        :return: None\n        \"\"\"\n\n        @wraps(callback)\n        def wrapper(ssl, line):\n            line = _ffi.string(line)\n            callback(Connection._reverse_mapping[ssl], line)\n\n        self._keylog_callback = _ffi.callback(\n            \"void (*)(const SSL *, const char *)\", wrapper\n        )\n        _lib.SSL_CTX_set_keylog_callback(self._context, self._keylog_callback)\n\n    def get_app_data(self) -> Any:\n        \"\"\"\n        Get the application data (supplied via :meth:`set_app_data()`)\n\n        :return: The application data\n        \"\"\"\n        return self._app_data\n\n    def set_app_data(self, data: Any) -> None:\n        \"\"\"\n        Set the application data (will be returned from get_app_data())\n\n        :param data: Any Python object\n        :return: None\n        \"\"\"\n        self._app_data = data\n\n    def get_cert_store(self) -> X509Store:\n        \"\"\"\n        Get the certificate store for the context.  This can be used to add\n        \"trusted\" certificates without using the\n        :meth:`load_verify_locations` method.\n\n        :return: A X509Store object or None if it does not have one.\n        \"\"\"\n        store = _lib.SSL_CTX_get_cert_store(self._context)\n        if store == _ffi.NULL:\n            # TODO: This is untested.\n            return None\n\n        pystore = X509Store.__new__(X509Store)\n        pystore._store = store\n        return pystore\n\n    def set_options(self, options: int) -> None:\n        \"\"\"\n        Add options. Options set before are not cleared!\n        This method should be used with the :const:`OP_*` constants.\n\n        :param options: The options to add.\n        :return: The new option bitmask.\n        \"\"\"\n        if not isinstance(options, int):\n            raise TypeError(\"options must be an integer\")\n\n        return _lib.SSL_CTX_set_options(self._context, options)\n\n    def set_mode(self, mode: int) -> None:\n        \"\"\"\n        Add modes via bitmask. Modes set before are not cleared!  This method\n        should be used with the :const:`MODE_*` constants.\n\n        :param mode: The mode to add.\n        :return: The new mode bitmask.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(\"mode must be an integer\")\n\n        return _lib.SSL_CTX_set_mode(self._context, mode)\n\n    def set_tlsext_servername_callback(\n        self, callback: Callable[[\"Connection\"], None]\n    ) -> None:\n        \"\"\"\n        Specify a callback function to be called when clients specify a server\n        name.\n\n        :param callback: The callback function.  It will be invoked with one\n            argument, the Connection instance.\n\n        .. versionadded:: 0.13\n        \"\"\"\n\n        @wraps(callback)\n        def wrapper(ssl, alert, arg):\n            callback(Connection._reverse_mapping[ssl])\n            return 0\n\n        self._tlsext_servername_callback = _ffi.callback(\n            \"int (*)(SSL *, int *, void *)\", wrapper\n        )\n        _lib.SSL_CTX_set_tlsext_servername_callback(\n            self._context, self._tlsext_servername_callback\n        )\n\n    def set_tlsext_use_srtp(self, profiles: bytes) -> None:\n        \"\"\"\n        Enable support for negotiating SRTP keying material.\n\n        :param bytes profiles: A colon delimited list of protection profile\n            names, like ``b'SRTP_AES128_CM_SHA1_80:SRTP_AES128_CM_SHA1_32'``.\n        :return: None\n        \"\"\"\n        if not isinstance(profiles, bytes):\n            raise TypeError(\"profiles must be a byte string.\")\n\n        _openssl_assert(\n            _lib.SSL_CTX_set_tlsext_use_srtp(self._context, profiles) == 0\n        )\n\n    @_requires_alpn\n    def set_alpn_protos(self, protos: List[bytes]) -> None:\n        \"\"\"\n        Specify the protocols that the client is prepared to speak after the\n        TLS connection has been negotiated using Application Layer Protocol\n        Negotiation.\n\n        :param protos: A list of the protocols to be offered to the server.\n            This list should be a Python list of bytestrings representing the\n            protocols to offer, e.g. ``[b'http/1.1', b'spdy/2']``.\n        \"\"\"\n        # Different versions of OpenSSL are inconsistent about how they handle\n        # empty proto lists (see #1043), so we avoid the problem entirely by\n        # rejecting them ourselves.\n        if not protos:\n            raise ValueError(\"at least one protocol must be specified\")\n\n        # Take the list of protocols and join them together, prefixing them\n        # with their lengths.\n        protostr = b\"\".join(\n            chain.from_iterable((bytes((len(p),)), p) for p in protos)\n        )\n\n        # Build a C string from the list. We don't need to save this off\n        # because OpenSSL immediately copies the data out.\n        input_str = _ffi.new(\"unsigned char[]\", protostr)\n\n        # https://www.openssl.org/docs/man1.1.0/man3/SSL_CTX_set_alpn_protos.html:\n        # SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos()\n        # return 0 on success, and non-0 on failure.\n        # WARNING: these functions reverse the return value convention.\n        _openssl_assert(\n            _lib.SSL_CTX_set_alpn_protos(\n                self._context, input_str, len(protostr)\n            )\n            == 0\n        )\n\n    @_requires_alpn\n    def set_alpn_select_callback(\n        self, callback: Callable[[\"Connection\", List[bytes]], None]\n    ) -> None:\n        \"\"\"\n        Specify a callback function that will be called on the server when a\n        client offers protocols using ALPN.\n\n        :param callback: The callback function.  It will be invoked with two\n            arguments: the Connection, and a list of offered protocols as\n            bytestrings, e.g ``[b'http/1.1', b'spdy/2']``.  It can return\n            one of those bytestrings to indicate the chosen protocol, the\n            empty bytestring to terminate the TLS connection, or the\n            :py:obj:`NO_OVERLAPPING_PROTOCOLS` to indicate that no offered\n            protocol was selected, but that the connection should not be\n            aborted.\n        \"\"\"\n        self._alpn_select_helper = _ALPNSelectHelper(callback)\n        self._alpn_select_callback = self._alpn_select_helper.callback\n        _lib.SSL_CTX_set_alpn_select_cb(\n            self._context, self._alpn_select_callback, _ffi.NULL\n        )\n\n    def _set_ocsp_callback(self, helper, data):\n        \"\"\"\n        This internal helper does the common work for\n        ``set_ocsp_server_callback`` and ``set_ocsp_client_callback``, which is\n        almost all of it.\n        \"\"\"\n        self._ocsp_helper = helper\n        self._ocsp_callback = helper.callback\n        if data is None:\n            self._ocsp_data = _ffi.NULL\n        else:\n            self._ocsp_data = _ffi.new_handle(data)\n\n        rc = _lib.SSL_CTX_set_tlsext_status_cb(\n            self._context, self._ocsp_callback\n        )\n        _openssl_assert(rc == 1)\n        rc = _lib.SSL_CTX_set_tlsext_status_arg(self._context, self._ocsp_data)\n        _openssl_assert(rc == 1)\n\n    def set_ocsp_server_callback(\n        self,\n        callback: Callable[[\"Connection\", Optional[_T]], bytes],\n        data: Optional[_T] = None,\n    ) -> None:\n        \"\"\"\n        Set a callback to provide OCSP data to be stapled to the TLS handshake\n        on the server side.\n\n        :param callback: The callback function. It will be invoked with two\n            arguments: the Connection, and the optional arbitrary data you have\n            provided. The callback must return a bytestring that contains the\n            OCSP data to staple to the handshake. If no OCSP data is available\n            for this connection, return the empty bytestring.\n        :param data: Some opaque data that will be passed into the callback\n            function when called. This can be used to avoid needing to do\n            complex data lookups or to keep track of what context is being\n            used. This parameter is optional.\n        \"\"\"\n        helper = _OCSPServerCallbackHelper(callback)\n        self._set_ocsp_callback(helper, data)\n\n    def set_ocsp_client_callback(\n        self,\n        callback: Callable[[\"Connection\", bytes, Optional[_T]], bool],\n        data: Optional[_T] = None,\n    ) -> None:\n        \"\"\"\n        Set a callback to validate OCSP data stapled to the TLS handshake on\n        the client side.\n\n        :param callback: The callback function. It will be invoked with three\n            arguments: the Connection, a bytestring containing the stapled OCSP\n            assertion, and the optional arbitrary data you have provided. The\n            callback must return a boolean that indicates the result of\n            validating the OCSP data: ``True`` if the OCSP data is valid and\n            the certificate can be trusted, or ``False`` if either the OCSP\n            data is invalid or the certificate has been revoked.\n        :param data: Some opaque data that will be passed into the callback\n            function when called. This can be used to avoid needing to do\n            complex data lookups or to keep track of what context is being\n            used. This parameter is optional.\n        \"\"\"\n        helper = _OCSPClientCallbackHelper(callback)\n        self._set_ocsp_callback(helper, data)\n\n    def set_cookie_generate_callback(self, callback):\n        self._cookie_generate_helper = _CookieGenerateCallbackHelper(callback)\n        _lib.SSL_CTX_set_cookie_generate_cb(\n            self._context,\n            self._cookie_generate_helper.callback,\n        )\n\n    def set_cookie_verify_callback(self, callback):\n        self._cookie_verify_helper = _CookieVerifyCallbackHelper(callback)\n        _lib.SSL_CTX_set_cookie_verify_cb(\n            self._context,\n            self._cookie_verify_helper.callback,\n        )\n\n\nclass Connection:\n    _reverse_mapping = WeakValueDictionary()\n\n    def __init__(\n        self, context: Context, socket: Optional[socket.socket] = None\n    ) -> None:\n        \"\"\"\n        Create a new Connection object, using the given OpenSSL.SSL.Context\n        instance and socket.\n\n        :param context: An SSL Context to use for this connection\n        :param socket: The socket to use for transport layer\n        \"\"\"\n        if not isinstance(context, Context):\n            raise TypeError(\"context must be a Context instance\")\n\n        ssl = _lib.SSL_new(context._context)\n        self._ssl = _ffi.gc(ssl, _lib.SSL_free)\n        # We set SSL_MODE_AUTO_RETRY to handle situations where OpenSSL returns\n        # an SSL_ERROR_WANT_READ when processing a non-application data packet\n        # even though there is still data on the underlying transport.\n        # See https://github.com/openssl/openssl/issues/6234 for more details.\n        _lib.SSL_set_mode(self._ssl, _lib.SSL_MODE_AUTO_RETRY)\n        self._context = context\n        self._app_data = None\n\n        # References to strings used for Application Layer Protocol\n        # Negotiation. These strings get copied at some point but it's well\n        # after the callback returns, so we have to hang them somewhere to\n        # avoid them getting freed.\n        self._alpn_select_callback_args = None\n\n        # Reference the verify_callback of the Context. This ensures that if\n        # set_verify is called again after the SSL object has been created we\n        # do not point to a dangling reference\n        self._verify_helper = context._verify_helper\n        self._verify_callback = context._verify_callback\n\n        # And likewise for the cookie callbacks\n        self._cookie_generate_helper = context._cookie_generate_helper\n        self._cookie_verify_helper = context._cookie_verify_helper\n\n        self._reverse_mapping[self._ssl] = self\n\n        if socket is None:\n            self._socket = None\n            # Don't set up any gc for these, SSL_free will take care of them.\n            self._into_ssl = _lib.BIO_new(_lib.BIO_s_mem())\n            _openssl_assert(self._into_ssl != _ffi.NULL)\n\n            self._from_ssl = _lib.BIO_new(_lib.BIO_s_mem())\n            _openssl_assert(self._from_ssl != _ffi.NULL)\n\n            _lib.SSL_set_bio(self._ssl, self._into_ssl, self._from_ssl)\n        else:\n            self._into_ssl = None\n            self._from_ssl = None\n            self._socket = socket\n            set_result = _lib.SSL_set_fd(\n                self._ssl, _asFileDescriptor(self._socket)\n            )\n            _openssl_assert(set_result == 1)\n\n    def __getattr__(self, name):\n        \"\"\"\n        Look up attributes on the wrapped socket object if they are not found\n        on the Connection object.\n        \"\"\"\n        if self._socket is None:\n            raise AttributeError(\n                f\"'{self.__class__.__name__}' object has no attribute '{name}'\"\n            )\n        else:\n            return getattr(self._socket, name)\n\n    def _raise_ssl_error(self, ssl, result):\n        if self._context._verify_helper is not None:\n            self._context._verify_helper.raise_if_problem()\n        if self._context._alpn_select_helper is not None:\n            self._context._alpn_select_helper.raise_if_problem()\n        if self._context._ocsp_helper is not None:\n            self._context._ocsp_helper.raise_if_problem()\n\n        error = _lib.SSL_get_error(ssl, result)\n        if error == _lib.SSL_ERROR_WANT_READ:\n            raise WantReadError()\n        elif error == _lib.SSL_ERROR_WANT_WRITE:\n            raise WantWriteError()\n        elif error == _lib.SSL_ERROR_ZERO_RETURN:\n            raise ZeroReturnError()\n        elif error == _lib.SSL_ERROR_WANT_X509_LOOKUP:\n            # TODO: This is untested.\n            raise WantX509LookupError()\n        elif error == _lib.SSL_ERROR_SYSCALL:\n            if _lib.ERR_peek_error() == 0:\n                if result < 0:\n                    if platform == \"win32\":\n                        errno = _ffi.getwinerror()[0]\n                    else:\n                        errno = _ffi.errno\n\n                    if errno != 0:\n                        raise SysCallError(errno, errorcode.get(errno))\n                raise SysCallError(-1, \"Unexpected EOF\")\n            else:\n                # TODO: This is untested.\n                _raise_current_error()\n        elif error == _lib.SSL_ERROR_SSL and _lib.ERR_peek_error() != 0:\n            # In 3.0.x an unexpected EOF no longer triggers syscall error\n            # but we want to maintain compatibility so we check here and\n            # raise syscall if it is an EOF. Since we're not actually sure\n            # what else could raise SSL_ERROR_SSL we check for the presence\n            # of the OpenSSL 3 constant SSL_R_UNEXPECTED_EOF_WHILE_READING\n            # and if it's not present we just raise an error, which matches\n            # the behavior before we added this elif section\n            peeked_error = _lib.ERR_peek_error()\n            reason = _lib.ERR_GET_REASON(peeked_error)\n            if _lib.Cryptography_HAS_UNEXPECTED_EOF_WHILE_READING:\n                _openssl_assert(\n                    reason == _lib.SSL_R_UNEXPECTED_EOF_WHILE_READING\n                )\n                _lib.ERR_clear_error()\n                raise SysCallError(-1, \"Unexpected EOF\")\n            else:\n                _raise_current_error()\n        elif error == _lib.SSL_ERROR_NONE:\n            pass\n        else:\n            _raise_current_error()\n\n    def get_context(self) -> Context:\n        \"\"\"\n        Retrieve the :class:`Context` object associated with this\n        :class:`Connection`.\n        \"\"\"\n        return self._context\n\n    def set_context(self, context: Context) -> None:\n        \"\"\"\n        Switch this connection to a new session context.\n\n        :param context: A :class:`Context` instance giving the new session\n            context to use.\n        \"\"\"\n        if not isinstance(context, Context):\n            raise TypeError(\"context must be a Context instance\")\n\n        _lib.SSL_set_SSL_CTX(self._ssl, context._context)\n        self._context = context\n\n    def get_servername(self) -> Optional[bytes]:\n        \"\"\"\n        Retrieve the servername extension value if provided in the client hello\n        message, or None if there wasn't one.\n\n        :return: A byte string giving the server name or :data:`None`.\n\n        .. versionadded:: 0.13\n        \"\"\"\n        name = _lib.SSL_get_servername(\n            self._ssl, _lib.TLSEXT_NAMETYPE_host_name\n        )\n        if name == _ffi.NULL:\n            return None\n\n        return _ffi.string(name)\n\n    def set_verify(\n        self, mode: int, callback: Optional[_SetVerifyCallback] = None\n    ) -> None:\n        \"\"\"\n        Override the Context object's verification flags for this specific\n        connection. See :py:meth:`Context.set_verify` for details.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(\"mode must be an integer\")\n\n        if callback is None:\n            self._verify_helper = None\n            self._verify_callback = None\n            _lib.SSL_set_verify(self._ssl, mode, _ffi.NULL)\n        else:\n            if not callable(callback):\n                raise TypeError(\"callback must be callable\")\n\n            self._verify_helper = _VerifyHelper(callback)\n            self._verify_callback = self._verify_helper.callback\n            _lib.SSL_set_verify(self._ssl, mode, self._verify_callback)\n\n    def get_verify_mode(self) -> int:\n        \"\"\"\n        Retrieve the Connection object's verify mode, as set by\n        :meth:`set_verify`.\n\n        :return: The verify mode\n        \"\"\"\n        return _lib.SSL_get_verify_mode(self._ssl)\n\n    def use_certificate(self, cert: X509) -> None:\n        \"\"\"\n        Load a certificate from a X509 object\n\n        :param cert: The X509 object\n        :return: None\n        \"\"\"\n        # Mirrored from Context.use_certificate\n        if not isinstance(cert, X509):\n            raise TypeError(\"cert must be an X509 instance\")\n\n        use_result = _lib.SSL_use_certificate(self._ssl, cert._x509)\n        if not use_result:\n            _raise_current_error()\n\n    def use_privatekey(self, pkey: PKey) -> None:\n        \"\"\"\n        Load a private key from a PKey object\n\n        :param pkey: The PKey object\n        :return: None\n        \"\"\"\n        # Mirrored from Context.use_privatekey\n        if not isinstance(pkey, PKey):\n            raise TypeError(\"pkey must be a PKey instance\")\n\n        use_result = _lib.SSL_use_PrivateKey(self._ssl, pkey._pkey)\n        if not use_result:\n            self._context._raise_passphrase_exception()\n\n    def set_ciphertext_mtu(self, mtu: int) -> None:\n        \"\"\"\n        For DTLS, set the maximum UDP payload size (*not* including IP/UDP\n        overhead).\n\n        Note that you might have to set :data:`OP_NO_QUERY_MTU` to prevent\n        OpenSSL from spontaneously clearing this.\n\n        :param mtu: An integer giving the maximum transmission unit.\n\n        .. versionadded:: 21.1\n        \"\"\"\n        _lib.SSL_set_mtu(self._ssl, mtu)\n\n    def get_cleartext_mtu(self) -> int:\n        \"\"\"\n        For DTLS, get the maximum size of unencrypted data you can pass to\n        :meth:`write` without exceeding the MTU (as passed to\n        :meth:`set_ciphertext_mtu`).\n\n        :return: The effective MTU as an integer.\n\n        .. versionadded:: 21.1\n        \"\"\"\n\n        if not hasattr(_lib, \"DTLS_get_data_mtu\"):\n            raise NotImplementedError(\"requires OpenSSL 1.1.1 or better\")\n        return _lib.DTLS_get_data_mtu(self._ssl)\n\n    def set_tlsext_host_name(self, name: bytes) -> None:\n        \"\"\"\n        Set the value of the servername extension to send in the client hello.\n\n        :param name: A byte string giving the name.\n\n        .. versionadded:: 0.13\n        \"\"\"\n        if not isinstance(name, bytes):\n            raise TypeError(\"name must be a byte string\")\n        elif b\"\\0\" in name:\n            raise TypeError(\"name must not contain NUL byte\")\n\n        # XXX I guess this can fail sometimes?\n        _lib.SSL_set_tlsext_host_name(self._ssl, name)\n\n    def pending(self) -> int:\n        \"\"\"\n        Get the number of bytes that can be safely read from the SSL buffer\n        (**not** the underlying transport buffer).\n\n        :return: The number of bytes available in the receive buffer.\n        \"\"\"\n        return _lib.SSL_pending(self._ssl)\n\n    def send(self, buf: bytes, flags: int = 0) -> int:\n        \"\"\"\n        Send data on the connection. NOTE: If you get one of the WantRead,\n        WantWrite or WantX509Lookup exceptions on this, you have to call the\n        method again with the SAME buffer.\n\n        :param buf: The string, buffer or memoryview to send\n        :param flags: (optional) Included for compatibility with the socket\n                      API, the value is ignored\n        :return: The number of bytes written\n        \"\"\"\n        # Backward compatibility\n        buf = _text_to_bytes_and_warn(\"buf\", buf)\n\n        with _ffi.from_buffer(buf) as data:\n            # check len(buf) instead of len(data) for testability\n            if len(buf) > 2147483647:\n                raise ValueError(\n                    \"Cannot send more than 2**31-1 bytes at once.\"\n                )\n\n            result = _lib.SSL_write(self._ssl, data, len(data))\n            self._raise_ssl_error(self._ssl, result)\n\n            return result\n\n    write = send\n\n    def sendall(self, buf: bytes, flags: int = 0) -> int:\n        \"\"\"\n        Send \"all\" data on the connection. This calls send() repeatedly until\n        all data is sent. If an error occurs, it's impossible to tell how much\n        data has been sent.\n\n        :param buf: The string, buffer or memoryview to send\n        :param flags: (optional) Included for compatibility with the socket\n                      API, the value is ignored\n        :return: The number of bytes written\n        \"\"\"\n        buf = _text_to_bytes_and_warn(\"buf\", buf)\n\n        with _ffi.from_buffer(buf) as data:\n            left_to_send = len(buf)\n            total_sent = 0\n\n            while left_to_send:\n                # SSL_write's num arg is an int,\n                # so we cannot send more than 2**31-1 bytes at once.\n                result = _lib.SSL_write(\n                    self._ssl, data + total_sent, min(left_to_send, 2147483647)\n                )\n                self._raise_ssl_error(self._ssl, result)\n                total_sent += result\n                left_to_send -= result\n\n            return total_sent\n\n    def recv(self, bufsiz: int, flags: Optional[int] = None) -> bytes:\n        \"\"\"\n        Receive data on the connection.\n\n        :param bufsiz: The maximum number of bytes to read\n        :param flags: (optional) The only supported flag is ``MSG_PEEK``,\n            all other flags are ignored.\n        :return: The string read from the Connection\n        \"\"\"\n        buf = _no_zero_allocator(\"char[]\", bufsiz)\n        if flags is not None and flags & socket.MSG_PEEK:\n            result = _lib.SSL_peek(self._ssl, buf, bufsiz)\n        else:\n            result = _lib.SSL_read(self._ssl, buf, bufsiz)\n        self._raise_ssl_error(self._ssl, result)\n        return _ffi.buffer(buf, result)[:]\n\n    read = recv\n\n    def recv_into(\n        self, buffer, nbytes: Optional[int] = None, flags: Optional[int] = None\n    ) -> int:\n        \"\"\"\n        Receive data on the connection and copy it directly into the provided\n        buffer, rather than creating a new string.\n\n        :param buffer: The buffer to copy into.\n        :param nbytes: (optional) The maximum number of bytes to read into the\n            buffer. If not present, defaults to the size of the buffer. If\n            larger than the size of the buffer, is reduced to the size of the\n            buffer.\n        :param flags: (optional) The only supported flag is ``MSG_PEEK``,\n            all other flags are ignored.\n        :return: The number of bytes read into the buffer.\n        \"\"\"\n        if nbytes is None:\n            nbytes = len(buffer)\n        else:\n            nbytes = min(nbytes, len(buffer))\n\n        # We need to create a temporary buffer. This is annoying, it would be\n        # better if we could pass memoryviews straight into the SSL_read call,\n        # but right now we can't. Revisit this if CFFI gets that ability.\n        buf = _no_zero_allocator(\"char[]\", nbytes)\n        if flags is not None and flags & socket.MSG_PEEK:\n            result = _lib.SSL_peek(self._ssl, buf, nbytes)\n        else:\n            result = _lib.SSL_read(self._ssl, buf, nbytes)\n        self._raise_ssl_error(self._ssl, result)\n\n        # This strange line is all to avoid a memory copy. The buffer protocol\n        # should allow us to assign a CFFI buffer to the LHS of this line, but\n        # on CPython 3.3+ that segfaults. As a workaround, we can temporarily\n        # wrap it in a memoryview.\n        buffer[:result] = memoryview(_ffi.buffer(buf, result))\n\n        return result\n\n    def _handle_bio_errors(self, bio, result):\n        if _lib.BIO_should_retry(bio):\n            if _lib.BIO_should_read(bio):\n                raise WantReadError()\n            elif _lib.BIO_should_write(bio):\n                # TODO: This is untested.\n                raise WantWriteError()\n            elif _lib.BIO_should_io_special(bio):\n                # TODO: This is untested.  I think io_special means the socket\n                # BIO has a not-yet connected socket.\n                raise ValueError(\"BIO_should_io_special\")\n            else:\n                # TODO: This is untested.\n                raise ValueError(\"unknown bio failure\")\n        else:\n            # TODO: This is untested.\n            _raise_current_error()\n\n    def bio_read(self, bufsiz: int) -> bytes:\n        \"\"\"\n        If the Connection was created with a memory BIO, this method can be\n        used to read bytes from the write end of that memory BIO.  Many\n        Connection methods will add bytes which must be read in this manner or\n        the buffer will eventually fill up and the Connection will be able to\n        take no further actions.\n\n        :param bufsiz: The maximum number of bytes to read\n        :return: The string read.\n        \"\"\"\n        if self._from_ssl is None:\n            raise TypeError(\"Connection sock was not None\")\n\n        if not isinstance(bufsiz, int):\n            raise TypeError(\"bufsiz must be an integer\")\n\n        buf = _no_zero_allocator(\"char[]\", bufsiz)\n        result = _lib.BIO_read(self._from_ssl, buf, bufsiz)\n        if result <= 0:\n            self._handle_bio_errors(self._from_ssl, result)\n\n        return _ffi.buffer(buf, result)[:]\n\n    def bio_write(self, buf: bytes) -> int:\n        \"\"\"\n        If the Connection was created with a memory BIO, this method can be\n        used to add bytes to the read end of that memory BIO.  The Connection\n        can then read the bytes (for example, in response to a call to\n        :meth:`recv`).\n\n        :param buf: The string to put into the memory BIO.\n        :return: The number of bytes written\n        \"\"\"\n        buf = _text_to_bytes_and_warn(\"buf\", buf)\n\n        if self._into_ssl is None:\n            raise TypeError(\"Connection sock was not None\")\n\n        with _ffi.from_buffer(buf) as data:\n            result = _lib.BIO_write(self._into_ssl, data, len(data))\n            if result <= 0:\n                self._handle_bio_errors(self._into_ssl, result)\n            return result\n\n    def renegotiate(self) -> bool:\n        \"\"\"\n        Renegotiate the session.\n\n        :return: True if the renegotiation can be started, False otherwise\n        :rtype: bool\n        \"\"\"\n        if not self.renegotiate_pending():\n            _openssl_assert(_lib.SSL_renegotiate(self._ssl) == 1)\n            return True\n        return False\n\n    def do_handshake(self) -> None:\n        \"\"\"\n        Perform an SSL handshake (usually called after :meth:`renegotiate` or\n        one of :meth:`set_accept_state` or :meth:`set_connect_state`). This can\n        raise the same exceptions as :meth:`send` and :meth:`recv`.\n\n        :return: None.\n        \"\"\"\n        result = _lib.SSL_do_handshake(self._ssl)\n        self._raise_ssl_error(self._ssl, result)\n\n    def renegotiate_pending(self) -> bool:\n        \"\"\"\n        Check if there's a renegotiation in progress, it will return False once\n        a renegotiation is finished.\n\n        :return: Whether there's a renegotiation in progress\n        :rtype: bool\n        \"\"\"\n        return _lib.SSL_renegotiate_pending(self._ssl) == 1\n\n    def total_renegotiations(self) -> int:\n        \"\"\"\n        Find out the total number of renegotiations.\n\n        :return: The number of renegotiations.\n        :rtype: int\n        \"\"\"\n        return _lib.SSL_total_renegotiations(self._ssl)\n\n    def connect(self, addr):\n        \"\"\"\n        Call the :meth:`connect` method of the underlying socket and set up SSL\n        on the socket, using the :class:`Context` object supplied to this\n        :class:`Connection` object at creation.\n\n        :param addr: A remote address\n        :return: What the socket's connect method returns\n        \"\"\"\n        _lib.SSL_set_connect_state(self._ssl)\n        return self._socket.connect(addr)\n\n    def connect_ex(self, addr) -> int:\n        \"\"\"\n        Call the :meth:`connect_ex` method of the underlying socket and set up\n        SSL on the socket, using the Context object supplied to this Connection\n        object at creation. Note that if the :meth:`connect_ex` method of the\n        socket doesn't return 0, SSL won't be initialized.\n\n        :param addr: A remove address\n        :return: What the socket's connect_ex method returns\n        \"\"\"\n        connect_ex = self._socket.connect_ex\n        self.set_connect_state()\n        return connect_ex(addr)\n\n    def accept(self) -> Tuple[\"Connection\", Any]:\n        \"\"\"\n        Call the :meth:`accept` method of the underlying socket and set up SSL\n        on the returned socket, using the Context object supplied to this\n        :class:`Connection` object at creation.\n\n        :return: A *(conn, addr)* pair where *conn* is the new\n            :class:`Connection` object created, and *address* is as returned by\n            the socket's :meth:`accept`.\n        \"\"\"\n        client, addr = self._socket.accept()\n        conn = Connection(self._context, client)\n        conn.set_accept_state()\n        return (conn, addr)\n\n    def DTLSv1_listen(self) -> None:\n        \"\"\"\n        Call the OpenSSL function DTLSv1_listen on this connection. See the\n        OpenSSL manual for more details.\n\n        :return: None\n        \"\"\"\n        # Possible future extension: return the BIO_ADDR in some form.\n        bio_addr = _lib.BIO_ADDR_new()\n        try:\n            result = _lib.DTLSv1_listen(self._ssl, bio_addr)\n        finally:\n            _lib.BIO_ADDR_free(bio_addr)\n        # DTLSv1_listen is weird. A zero return value means 'didn't find a\n        # ClientHello with valid cookie, but keep trying'. So basically\n        # WantReadError. But it doesn't work correctly with _raise_ssl_error.\n        # So we raise it manually instead.\n        if self._cookie_generate_helper is not None:\n            self._cookie_generate_helper.raise_if_problem()\n        if self._cookie_verify_helper is not None:\n            self._cookie_verify_helper.raise_if_problem()\n        if result == 0:\n            raise WantReadError()\n        if result < 0:\n            self._raise_ssl_error(self._ssl, result)\n\n    def DTLSv1_get_timeout(self) -> Optional[int]:\n        \"\"\"\n        Determine when the DTLS SSL object next needs to perform internal\n        processing due to the passage of time.\n\n        When the returned number of seconds have passed, the\n        :meth:`DTLSv1_handle_timeout` method needs to be called.\n\n        :return: The time left in seconds before the next timeout or `None`\n            if no timeout is currently active.\n        \"\"\"\n        ptv_sec = _ffi.new(\"time_t *\")\n        ptv_usec = _ffi.new(\"long *\")\n        if _lib.Cryptography_DTLSv1_get_timeout(self._ssl, ptv_sec, ptv_usec):\n            return ptv_sec[0] + (ptv_usec[0] / 1000000)\n        else:\n            return None\n\n    def DTLSv1_handle_timeout(self) -> bool:\n        \"\"\"\n        Handles any timeout events which have become pending on a DTLS SSL\n        object.\n\n        :return: `True` if there was a pending timeout, `False` otherwise.\n        \"\"\"\n        result = _lib.DTLSv1_handle_timeout(self._ssl)\n        if result < 0:\n            self._raise_ssl_error(self._ssl, result)\n        else:\n            return bool(result)\n\n    def bio_shutdown(self) -> None:\n        \"\"\"\n        If the Connection was created with a memory BIO, this method can be\n        used to indicate that *end of file* has been reached on the read end of\n        that memory BIO.\n\n        :return: None\n        \"\"\"\n        if self._from_ssl is None:\n            raise TypeError(\"Connection sock was not None\")\n\n        _lib.BIO_set_mem_eof_return(self._into_ssl, 0)\n\n    def shutdown(self) -> bool:\n        \"\"\"\n        Send the shutdown message to the Connection.\n\n        :return: True if the shutdown completed successfully (i.e. both sides\n                 have sent closure alerts), False otherwise (in which case you\n                 call :meth:`recv` or :meth:`send` when the connection becomes\n                 readable/writeable).\n        \"\"\"\n        result = _lib.SSL_shutdown(self._ssl)\n        if result < 0:\n            self._raise_ssl_error(self._ssl, result)\n        elif result > 0:\n            return True\n        else:\n            return False\n\n    def get_cipher_list(self) -> List[str]:\n        \"\"\"\n        Retrieve the list of ciphers used by the Connection object.\n\n        :return: A list of native cipher strings.\n        \"\"\"\n        ciphers = []\n        for i in count():\n            result = _lib.SSL_get_cipher_list(self._ssl, i)\n            if result == _ffi.NULL:\n                break\n            ciphers.append(_ffi.string(result).decode(\"utf-8\"))\n        return ciphers\n\n    def get_client_ca_list(self) -> List[X509Name]:\n        \"\"\"\n        Get CAs whose certificates are suggested for client authentication.\n\n        :return: If this is a server connection, the list of certificate\n            authorities that will be sent or has been sent to the client, as\n            controlled by this :class:`Connection`'s :class:`Context`.\n\n            If this is a client connection, the list will be empty until the\n            connection with the server is established.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        ca_names = _lib.SSL_get_client_CA_list(self._ssl)\n        if ca_names == _ffi.NULL:\n            # TODO: This is untested.\n            return []\n\n        result = []\n        for i in range(_lib.sk_X509_NAME_num(ca_names)):\n            name = _lib.sk_X509_NAME_value(ca_names, i)\n            copy = _lib.X509_NAME_dup(name)\n            _openssl_assert(copy != _ffi.NULL)\n\n            pyname = X509Name.__new__(X509Name)\n            pyname._name = _ffi.gc(copy, _lib.X509_NAME_free)\n            result.append(pyname)\n        return result\n\n    def makefile(self, *args, **kwargs) -> None:\n        \"\"\"\n        The makefile() method is not implemented, since there is no dup\n        semantics for SSL connections\n\n        :raise: NotImplementedError\n        \"\"\"\n        raise NotImplementedError(\n            \"Cannot make file object of OpenSSL.SSL.Connection\"\n        )\n\n    def get_app_data(self) -> Any:\n        \"\"\"\n        Retrieve application data as set by :meth:`set_app_data`.\n\n        :return: The application data\n        \"\"\"\n        return self._app_data\n\n    def set_app_data(self, data: Any) -> None:\n        \"\"\"\n        Set application data\n\n        :param data: The application data\n        :return: None\n        \"\"\"\n        self._app_data = data\n\n    def get_shutdown(self) -> int:\n        \"\"\"\n        Get the shutdown state of the Connection.\n\n        :return: The shutdown state, a bitvector of SENT_SHUTDOWN,\n            RECEIVED_SHUTDOWN.\n        \"\"\"\n        return _lib.SSL_get_shutdown(self._ssl)\n\n    def set_shutdown(self, state: int) -> None:\n        \"\"\"\n        Set the shutdown state of the Connection.\n\n        :param state: bitvector of SENT_SHUTDOWN, RECEIVED_SHUTDOWN.\n        :return: None\n        \"\"\"\n        if not isinstance(state, int):\n            raise TypeError(\"state must be an integer\")\n\n        _lib.SSL_set_shutdown(self._ssl, state)\n\n    def get_state_string(self) -> bytes:\n        \"\"\"\n        Retrieve a verbose string detailing the state of the Connection.\n\n        :return: A string representing the state\n        :rtype: bytes\n        \"\"\"\n        return _ffi.string(_lib.SSL_state_string_long(self._ssl))\n\n    def server_random(self) -> Optional[bytes]:\n        \"\"\"\n        Retrieve the random value used with the server hello message.\n\n        :return: A string representing the state\n        \"\"\"\n        session = _lib.SSL_get_session(self._ssl)\n        if session == _ffi.NULL:\n            return None\n        length = _lib.SSL_get_server_random(self._ssl, _ffi.NULL, 0)\n        _openssl_assert(length > 0)\n        outp = _no_zero_allocator(\"unsigned char[]\", length)\n        _lib.SSL_get_server_random(self._ssl, outp, length)\n        return _ffi.buffer(outp, length)[:]\n\n    def client_random(self) -> Optional[bytes]:\n        \"\"\"\n        Retrieve the random value used with the client hello message.\n\n        :return: A string representing the state\n        \"\"\"\n        session = _lib.SSL_get_session(self._ssl)\n        if session == _ffi.NULL:\n            return None\n\n        length = _lib.SSL_get_client_random(self._ssl, _ffi.NULL, 0)\n        _openssl_assert(length > 0)\n        outp = _no_zero_allocator(\"unsigned char[]\", length)\n        _lib.SSL_get_client_random(self._ssl, outp, length)\n        return _ffi.buffer(outp, length)[:]\n\n    def master_key(self) -> Optional[bytes]:\n        \"\"\"\n        Retrieve the value of the master key for this session.\n\n        :return: A string representing the state\n        \"\"\"\n        session = _lib.SSL_get_session(self._ssl)\n        if session == _ffi.NULL:\n            return None\n\n        length = _lib.SSL_SESSION_get_master_key(session, _ffi.NULL, 0)\n        _openssl_assert(length > 0)\n        outp = _no_zero_allocator(\"unsigned char[]\", length)\n        _lib.SSL_SESSION_get_master_key(session, outp, length)\n        return _ffi.buffer(outp, length)[:]\n\n    def export_keying_material(\n        self, label: bytes, olen: int, context: Optional[bytes] = None\n    ) -> bytes:\n        \"\"\"\n        Obtain keying material for application use.\n\n        :param: label - a disambiguating label string as described in RFC 5705\n        :param: olen - the length of the exported key material in bytes\n        :param: context - a per-association context value\n        :return: the exported key material bytes or None\n        \"\"\"\n        outp = _no_zero_allocator(\"unsigned char[]\", olen)\n        context_buf = _ffi.NULL\n        context_len = 0\n        use_context = 0\n        if context is not None:\n            context_buf = context\n            context_len = len(context)\n            use_context = 1\n        success = _lib.SSL_export_keying_material(\n            self._ssl,\n            outp,\n            olen,\n            label,\n            len(label),\n            context_buf,\n            context_len,\n            use_context,\n        )\n        _openssl_assert(success == 1)\n        return _ffi.buffer(outp, olen)[:]\n\n    def sock_shutdown(self, *args, **kwargs):\n        \"\"\"\n        Call the :meth:`shutdown` method of the underlying socket.\n        See :manpage:`shutdown(2)`.\n\n        :return: What the socket's shutdown() method returns\n        \"\"\"\n        return self._socket.shutdown(*args, **kwargs)\n\n    def get_certificate(self) -> Optional[X509]:\n        \"\"\"\n        Retrieve the local certificate (if any)\n\n        :return: The local certificate\n        \"\"\"\n        cert = _lib.SSL_get_certificate(self._ssl)\n        if cert != _ffi.NULL:\n            _lib.X509_up_ref(cert)\n            return X509._from_raw_x509_ptr(cert)\n        return None\n\n    def get_peer_certificate(self) -> Optional[X509]:\n        \"\"\"\n        Retrieve the other side's certificate (if any)\n\n        :return: The peer's certificate\n        \"\"\"\n        cert = _lib.SSL_get_peer_certificate(self._ssl)\n        if cert != _ffi.NULL:\n            return X509._from_raw_x509_ptr(cert)\n        return None\n\n    @staticmethod\n    def _cert_stack_to_list(cert_stack) -> List[X509]:\n        \"\"\"\n        Internal helper to convert a STACK_OF(X509) to a list of X509\n        instances.\n        \"\"\"\n        result = []\n        for i in range(_lib.sk_X509_num(cert_stack)):\n            cert = _lib.sk_X509_value(cert_stack, i)\n            _openssl_assert(cert != _ffi.NULL)\n            res = _lib.X509_up_ref(cert)\n            _openssl_assert(res >= 1)\n            pycert = X509._from_raw_x509_ptr(cert)\n            result.append(pycert)\n        return result\n\n    def get_peer_cert_chain(self) -> Optional[List[X509]]:\n        \"\"\"\n        Retrieve the other side's certificate (if any)\n\n        :return: A list of X509 instances giving the peer's certificate chain,\n                 or None if it does not have one.\n        \"\"\"\n        cert_stack = _lib.SSL_get_peer_cert_chain(self._ssl)\n        if cert_stack == _ffi.NULL:\n            return None\n\n        return self._cert_stack_to_list(cert_stack)\n\n    def get_verified_chain(self) -> Optional[List[X509]]:\n        \"\"\"\n        Retrieve the verified certificate chain of the peer including the\n        peer's end entity certificate. It must be called after a session has\n        been successfully established. If peer verification was not successful\n        the chain may be incomplete, invalid, or None.\n\n        :return: A list of X509 instances giving the peer's verified\n                 certificate chain, or None if it does not have one.\n\n        .. versionadded:: 20.0\n        \"\"\"\n        # OpenSSL 1.1+\n        cert_stack = _lib.SSL_get0_verified_chain(self._ssl)\n        if cert_stack == _ffi.NULL:\n            return None\n\n        return self._cert_stack_to_list(cert_stack)\n\n    def want_read(self) -> bool:\n        \"\"\"\n        Checks if more data has to be read from the transport layer to complete\n        an operation.\n\n        :return: True iff more data has to be read\n        \"\"\"\n        return _lib.SSL_want_read(self._ssl)\n\n    def want_write(self) -> bool:\n        \"\"\"\n        Checks if there is data to write to the transport layer to complete an\n        operation.\n\n        :return: True iff there is data to write\n        \"\"\"\n        return _lib.SSL_want_write(self._ssl)\n\n    def set_accept_state(self) -> None:\n        \"\"\"\n        Set the connection to work in server mode. The handshake will be\n        handled automatically by read/write.\n\n        :return: None\n        \"\"\"\n        _lib.SSL_set_accept_state(self._ssl)\n\n    def set_connect_state(self) -> None:\n        \"\"\"\n        Set the connection to work in client mode. The handshake will be\n        handled automatically by read/write.\n\n        :return: None\n        \"\"\"\n        _lib.SSL_set_connect_state(self._ssl)\n\n    def get_session(self) -> Optional[Session]:\n        \"\"\"\n        Returns the Session currently used.\n\n        :return: An instance of :class:`OpenSSL.SSL.Session` or\n            :obj:`None` if no session exists.\n\n        .. versionadded:: 0.14\n        \"\"\"\n        session = _lib.SSL_get1_session(self._ssl)\n        if session == _ffi.NULL:\n            return None\n\n        pysession = Session.__new__(Session)\n        pysession._session = _ffi.gc(session, _lib.SSL_SESSION_free)\n        return pysession\n\n    def set_session(self, session: Session) -> None:\n        \"\"\"\n        Set the session to be used when the TLS/SSL connection is established.\n\n        :param session: A Session instance representing the session to use.\n        :returns: None\n\n        .. versionadded:: 0.14\n        \"\"\"\n        if not isinstance(session, Session):\n            raise TypeError(\"session must be a Session instance\")\n\n        result = _lib.SSL_set_session(self._ssl, session._session)\n        _openssl_assert(result == 1)\n\n    def _get_finished_message(self, function) -> Optional[bytes]:\n        \"\"\"\n        Helper to implement :meth:`get_finished` and\n        :meth:`get_peer_finished`.\n\n        :param function: Either :data:`SSL_get_finished`: or\n            :data:`SSL_get_peer_finished`.\n\n        :return: :data:`None` if the desired message has not yet been\n            received, otherwise the contents of the message.\n        :rtype: :class:`bytes` or :class:`NoneType`\n        \"\"\"\n        # The OpenSSL documentation says nothing about what might happen if the\n        # count argument given is zero.  Specifically, it doesn't say whether\n        # the output buffer may be NULL in that case or not.  Inspection of the\n        # implementation reveals that it calls memcpy() unconditionally.\n        # Section 7.1.4, paragraph 1 of the C standard suggests that\n        # memcpy(NULL, source, 0) is not guaranteed to produce defined (let\n        # alone desirable) behavior (though it probably does on just about\n        # every implementation...)\n        #\n        # Allocate a tiny buffer to pass in (instead of just passing NULL as\n        # one might expect) for the initial call so as to be safe against this\n        # potentially undefined behavior.\n        empty = _ffi.new(\"char[]\", 0)\n        size = function(self._ssl, empty, 0)\n        if size == 0:\n            # No Finished message so far.\n            return None\n\n        buf = _no_zero_allocator(\"char[]\", size)\n        function(self._ssl, buf, size)\n        return _ffi.buffer(buf, size)[:]\n\n    def get_finished(self) -> Optional[bytes]:\n        \"\"\"\n        Obtain the latest TLS Finished message that we sent.\n\n        :return: The contents of the message or :obj:`None` if the TLS\n            handshake has not yet completed.\n        :rtype: :class:`bytes` or :class:`NoneType`\n\n        .. versionadded:: 0.15\n        \"\"\"\n        return self._get_finished_message(_lib.SSL_get_finished)\n\n    def get_peer_finished(self) -> Optional[bytes]:\n        \"\"\"\n        Obtain the latest TLS Finished message that we received from the peer.\n\n        :return: The contents of the message or :obj:`None` if the TLS\n            handshake has not yet completed.\n        :rtype: :class:`bytes` or :class:`NoneType`\n\n        .. versionadded:: 0.15\n        \"\"\"\n        return self._get_finished_message(_lib.SSL_get_peer_finished)\n\n    def get_cipher_name(self) -> Optional[str]:\n        \"\"\"\n        Obtain the name of the currently used cipher.\n\n        :returns: The name of the currently used cipher or :obj:`None`\n            if no connection has been established.\n        :rtype: :class:`str` or :class:`NoneType`\n\n        .. versionadded:: 0.15\n        \"\"\"\n        cipher = _lib.SSL_get_current_cipher(self._ssl)\n        if cipher == _ffi.NULL:\n            return None\n        else:\n            name = _ffi.string(_lib.SSL_CIPHER_get_name(cipher))\n            return name.decode(\"utf-8\")\n\n    def get_cipher_bits(self) -> Optional[int]:\n        \"\"\"\n        Obtain the number of secret bits of the currently used cipher.\n\n        :returns: The number of secret bits of the currently used cipher\n            or :obj:`None` if no connection has been established.\n        :rtype: :class:`int` or :class:`NoneType`\n\n        .. versionadded:: 0.15\n        \"\"\"\n        cipher = _lib.SSL_get_current_cipher(self._ssl)\n        if cipher == _ffi.NULL:\n            return None\n        else:\n            return _lib.SSL_CIPHER_get_bits(cipher, _ffi.NULL)\n\n    def get_cipher_version(self) -> Optional[str]:\n        \"\"\"\n        Obtain the protocol version of the currently used cipher.\n\n        :returns: The protocol name of the currently used cipher\n            or :obj:`None` if no connection has been established.\n        :rtype: :class:`str` or :class:`NoneType`\n\n        .. versionadded:: 0.15\n        \"\"\"\n        cipher = _lib.SSL_get_current_cipher(self._ssl)\n        if cipher == _ffi.NULL:\n            return None\n        else:\n            version = _ffi.string(_lib.SSL_CIPHER_get_version(cipher))\n            return version.decode(\"utf-8\")\n\n    def get_protocol_version_name(self) -> str:\n        \"\"\"\n        Retrieve the protocol version of the current connection.\n\n        :returns: The TLS version of the current connection, for example\n            the value for TLS 1.2 would be ``TLSv1.2``or ``Unknown``\n            for connections that were not successfully established.\n        :rtype: :class:`str`\n        \"\"\"\n        version = _ffi.string(_lib.SSL_get_version(self._ssl))\n        return version.decode(\"utf-8\")\n\n    def get_protocol_version(self) -> int:\n        \"\"\"\n        Retrieve the SSL or TLS protocol version of the current connection.\n\n        :returns: The TLS version of the current connection.  For example,\n            it will return ``0x769`` for connections made over TLS version 1.\n        :rtype: :class:`int`\n        \"\"\"\n        version = _lib.SSL_version(self._ssl)\n        return version\n\n    @_requires_alpn\n    def set_alpn_protos(self, protos: List[bytes]) -> None:\n        \"\"\"\n        Specify the client's ALPN protocol list.\n\n        These protocols are offered to the server during protocol negotiation.\n\n        :param protos: A list of the protocols to be offered to the server.\n            This list should be a Python list of bytestrings representing the\n            protocols to offer, e.g. ``[b'http/1.1', b'spdy/2']``.\n        \"\"\"\n        # Different versions of OpenSSL are inconsistent about how they handle\n        # empty proto lists (see #1043), so we avoid the problem entirely by\n        # rejecting them ourselves.\n        if not protos:\n            raise ValueError(\"at least one protocol must be specified\")\n\n        # Take the list of protocols and join them together, prefixing them\n        # with their lengths.\n        protostr = b\"\".join(\n            chain.from_iterable((bytes((len(p),)), p) for p in protos)\n        )\n\n        # Build a C string from the list. We don't need to save this off\n        # because OpenSSL immediately copies the data out.\n        input_str = _ffi.new(\"unsigned char[]\", protostr)\n\n        # https://www.openssl.org/docs/man1.1.0/man3/SSL_CTX_set_alpn_protos.html:\n        # SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos()\n        # return 0 on success, and non-0 on failure.\n        # WARNING: these functions reverse the return value convention.\n        _openssl_assert(\n            _lib.SSL_set_alpn_protos(self._ssl, input_str, len(protostr)) == 0\n        )\n\n    @_requires_alpn\n    def get_alpn_proto_negotiated(self) -> bytes:\n        \"\"\"\n        Get the protocol that was negotiated by ALPN.\n\n        :returns: A bytestring of the protocol name.  If no protocol has been\n            negotiated yet, returns an empty bytestring.\n        \"\"\"\n        data = _ffi.new(\"unsigned char **\")\n        data_len = _ffi.new(\"unsigned int *\")\n\n        _lib.SSL_get0_alpn_selected(self._ssl, data, data_len)\n\n        if not data_len:\n            return b\"\"\n\n        return _ffi.buffer(data[0], data_len[0])[:]\n\n    def get_selected_srtp_profile(self) -> bytes:\n        \"\"\"\n        Get the SRTP protocol which was negotiated.\n\n        :returns: A bytestring of the SRTP profile name. If no profile has been\n            negotiated yet, returns an empty bytestring.\n        \"\"\"\n        profile = _lib.SSL_get_selected_srtp_profile(self._ssl)\n        if not profile:\n            return b\"\"\n\n        return _ffi.string(profile.name)\n\n    def request_ocsp(self) -> None:\n        \"\"\"\n        Called to request that the server sends stapled OCSP data, if\n        available. If this is not called on the client side then the server\n        will not send OCSP data. Should be used in conjunction with\n        :meth:`Context.set_ocsp_client_callback`.\n        \"\"\"\n        rc = _lib.SSL_set_tlsext_status_type(\n            self._ssl, _lib.TLSEXT_STATUSTYPE_ocsp\n        )\n        _openssl_assert(rc == 1)\n"}