{"noxfile.py": "from pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport os\n\nimport nox\n\nROOT = Path(__file__).parent\nTESTS = ROOT / \"tests\"\nPYPROJECT = ROOT / \"pyproject.toml\"\nDOCS = ROOT / \"docs\"\n\nREQUIREMENTS = dict(\n    docs=DOCS / \"requirements.txt\",\n    tests=TESTS / \"requirements.txt\",\n)\nREQUIREMENTS_IN = [  # this is actually ordered, as files depend on each other\n    path.parent / f\"{path.stem}.in\" for path in REQUIREMENTS.values()\n]\n\nSUPPORTED = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\", \"pypy3.10\"]\nLATEST = \"3.12\"\n\nnox.options.sessions = []\n\n\ndef session(default=True, python=LATEST, **kwargs):  # noqa: D103\n    def _session(fn):\n        if default:\n            nox.options.sessions.append(kwargs.get(\"name\", fn.__name__))\n        return nox.session(python=python, **kwargs)(fn)\n\n    return _session\n\n\n@session(python=SUPPORTED)\ndef tests(session):\n    \"\"\"\n    Run the test suite with a corresponding Python version.\n    \"\"\"\n    session.install(\"-r\", REQUIREMENTS[\"tests\"])\n\n    if session.posargs and session.posargs[0] == \"coverage\":\n        if len(session.posargs) > 1 and session.posargs[1] == \"github\":\n            github = Path(os.environ[\"GITHUB_STEP_SUMMARY\"])\n        else:\n            github = None\n\n        session.install(\"coverage[toml]\")\n        session.run(\"coverage\", \"run\", \"-m\", \"pytest\", TESTS)\n        if github is None:\n            session.run(\"coverage\", \"report\")\n        else:\n            with github.open(\"a\") as summary:\n                summary.write(\"### Coverage\\n\\n\")\n                summary.flush()  # without a flush, output seems out of order.\n                session.run(\n                    \"coverage\",\n                    \"report\",\n                    \"--format=markdown\",\n                    stdout=summary,\n                )\n    else:\n        session.run(\"pytest\", *session.posargs, TESTS)\n\n\n@session()\ndef audit(session):\n    \"\"\"\n    Audit dependencies for vulnerabilities.\n    \"\"\"\n    session.install(\"pip-audit\", ROOT)\n    session.run(\"python\", \"-m\", \"pip_audit\")\n\n\n@session(tags=[\"build\"])\ndef build(session):\n    \"\"\"\n    Build a distribution suitable for PyPI and check its validity.\n    \"\"\"\n    session.install(\"build\", \"twine\")\n    with TemporaryDirectory() as tmpdir:\n        session.run(\"python\", \"-m\", \"build\", ROOT, \"--outdir\", tmpdir)\n        session.run(\"twine\", \"check\", \"--strict\", tmpdir + \"/*\")\n\n\n@session(tags=[\"style\"])\ndef style(session):\n    \"\"\"\n    Check Python code style.\n    \"\"\"\n    session.install(\"ruff\")\n    session.run(\"ruff\", \"check\", ROOT)\n\n\n@session(tags=[\"docs\"])\n@nox.parametrize(\n    \"builder\",\n    [\n        nox.param(name, id=name)\n        for name in [\n            \"dirhtml\",\n            \"doctest\",\n            \"linkcheck\",\n            \"man\",\n            \"spelling\",\n        ]\n    ],\n)\ndef docs(session, builder):\n    \"\"\"\n    Build the documentation using a specific Sphinx builder.\n    \"\"\"\n    session.install(\"-r\", REQUIREMENTS[\"docs\"])\n    with TemporaryDirectory() as tmpdir_str:\n        tmpdir = Path(tmpdir_str)\n        argv = [\"-n\", \"-T\", \"-W\"]\n        if builder != \"spelling\":\n            argv += [\"-q\"]\n        posargs = session.posargs or [tmpdir / builder]\n        session.run(\n            \"python\",\n            \"-m\",\n            \"sphinx\",\n            \"-b\",\n            builder,\n            DOCS,\n            *argv,\n            *posargs,\n        )\n\n\n@session(tags=[\"docs\", \"style\"], name=\"docs(style)\")\ndef docs_style(session):\n    \"\"\"\n    Check the documentation style.\n    \"\"\"\n    session.install(\n        \"doc8\",\n        \"pygments\",\n        \"pygments-github-lexers\",\n    )\n    session.run(\"python\", \"-m\", \"doc8\", \"--config\", PYPROJECT, DOCS)\n\n\n@session(default=False)\ndef requirements(session):\n    \"\"\"\n    Update the project's pinned requirements. Commit the result.\n    \"\"\"\n    session.install(\"pip-tools\")\n    for each in REQUIREMENTS_IN:\n        session.run(\n            \"pip-compile\",\n            \"--resolver\",\n            \"backtracking\",\n            \"--strip-extras\",\n            \"-U\",\n            each.relative_to(ROOT),\n        )\n"}