{"setup.py": "#!/usr/bin/env python\nimport os\nimport sys\n\nfrom setuptools import Extension, setup\n\nPYPY = hasattr(sys, \"pypy_version_info\")\n\nlibraries = []\nmacros = []\next_modules = []\n\nif sys.platform == \"win32\":\n    libraries.append(\"ws2_32\")\n    macros = [(\"__LITTLE_ENDIAN__\", \"1\")]\n\nif not PYPY and not os.environ.get(\"MSGPACK_PUREPYTHON\"):\n    ext_modules.append(\n        Extension(\n            \"msgpack._cmsgpack\",\n            sources=[\"msgpack/_cmsgpack.c\"],\n            libraries=libraries,\n            include_dirs=[\".\"],\n            define_macros=macros,\n        )\n    )\ndel libraries, macros\n\nsetup(\n    ext_modules=ext_modules,\n    packages=[\"msgpack\"],\n)\n", "benchmark/benchmark.py": "from msgpack import fallback\n\ntry:\n    from msgpack import _cmsgpack\n\n    has_ext = True\nexcept ImportError:\n    has_ext = False\nimport timeit\n\n\ndef profile(name, func):\n    times = timeit.repeat(func, number=1000, repeat=4)\n    times = \", \".join([\"%8f\" % t for t in times])\n    print(\"%-30s %40s\" % (name, times))\n\n\ndef simple(name, data):\n    if has_ext:\n        packer = _cmsgpack.Packer()\n        profile(\"packing %s (ext)\" % name, lambda: packer.pack(data))\n    packer = fallback.Packer()\n    profile(\"packing %s (fallback)\" % name, lambda: packer.pack(data))\n\n    data = packer.pack(data)\n    if has_ext:\n        profile(\"unpacking %s (ext)\" % name, lambda: _cmsgpack.unpackb(data))\n    profile(\"unpacking %s (fallback)\" % name, lambda: fallback.unpackb(data))\n\n\ndef main():\n    simple(\"integers\", [7] * 10000)\n    simple(\"bytes\", [b\"x\" * n for n in range(100)] * 10)\n    simple(\"lists\", [[]] * 10000)\n    simple(\"dicts\", [{}] * 10000)\n\n\nmain()\n", "msgpack/exceptions.py": "class UnpackException(Exception):\n    \"\"\"Base class for some exceptions raised while unpacking.\n\n    NOTE: unpack may raise exception other than subclass of\n    UnpackException.  If you want to catch all error, catch\n    Exception instead.\n    \"\"\"\n\n\nclass BufferFull(UnpackException):\n    pass\n\n\nclass OutOfData(UnpackException):\n    pass\n\n\nclass FormatError(ValueError, UnpackException):\n    \"\"\"Invalid msgpack format\"\"\"\n\n\nclass StackError(ValueError, UnpackException):\n    \"\"\"Too nested\"\"\"\n\n\n# Deprecated.  Use ValueError instead\nUnpackValueError = ValueError\n\n\nclass ExtraData(UnpackValueError):\n    \"\"\"ExtraData is raised when there is trailing data.\n\n    This exception is raised while only one-shot (not streaming)\n    unpack.\n    \"\"\"\n\n    def __init__(self, unpacked, extra):\n        self.unpacked = unpacked\n        self.extra = extra\n\n    def __str__(self):\n        return \"unpack(b) received extra data.\"\n\n\n# Deprecated.  Use Exception instead to catch all exception during packing.\nPackException = Exception\nPackValueError = ValueError\nPackOverflowError = OverflowError\n", "msgpack/ext.py": "import datetime\nimport struct\nfrom collections import namedtuple\n\n\nclass ExtType(namedtuple(\"ExtType\", \"code data\")):\n    \"\"\"ExtType represents ext type in msgpack.\"\"\"\n\n    def __new__(cls, code, data):\n        if not isinstance(code, int):\n            raise TypeError(\"code must be int\")\n        if not isinstance(data, bytes):\n            raise TypeError(\"data must be bytes\")\n        if not 0 <= code <= 127:\n            raise ValueError(\"code must be 0~127\")\n        return super().__new__(cls, code, data)\n\n\nclass Timestamp:\n    \"\"\"Timestamp represents the Timestamp extension type in msgpack.\n\n    When built with Cython, msgpack uses C methods to pack and unpack `Timestamp`.\n    When using pure-Python msgpack, :func:`to_bytes` and :func:`from_bytes` are used to pack and\n    unpack `Timestamp`.\n\n    This class is immutable: Do not override seconds and nanoseconds.\n    \"\"\"\n\n    __slots__ = [\"seconds\", \"nanoseconds\"]\n\n    def __init__(self, seconds, nanoseconds=0):\n        \"\"\"Initialize a Timestamp object.\n\n        :param int seconds:\n            Number of seconds since the UNIX epoch (00:00:00 UTC Jan 1 1970, minus leap seconds).\n            May be negative.\n\n        :param int nanoseconds:\n            Number of nanoseconds to add to `seconds` to get fractional time.\n            Maximum is 999_999_999.  Default is 0.\n\n        Note: Negative times (before the UNIX epoch) are represented as neg. seconds + pos. ns.\n        \"\"\"\n        if not isinstance(seconds, int):\n            raise TypeError(\"seconds must be an integer\")\n        if not isinstance(nanoseconds, int):\n            raise TypeError(\"nanoseconds must be an integer\")\n        if not (0 <= nanoseconds < 10**9):\n            raise ValueError(\"nanoseconds must be a non-negative integer less than 999999999.\")\n        self.seconds = seconds\n        self.nanoseconds = nanoseconds\n\n    def __repr__(self):\n        \"\"\"String representation of Timestamp.\"\"\"\n        return f\"Timestamp(seconds={self.seconds}, nanoseconds={self.nanoseconds})\"\n\n    def __eq__(self, other):\n        \"\"\"Check for equality with another Timestamp object\"\"\"\n        if type(other) is self.__class__:\n            return self.seconds == other.seconds and self.nanoseconds == other.nanoseconds\n        return False\n\n    def __ne__(self, other):\n        \"\"\"not-equals method (see :func:`__eq__()`)\"\"\"\n        return not self.__eq__(other)\n\n    def __hash__(self):\n        return hash((self.seconds, self.nanoseconds))\n\n    @staticmethod\n    def from_bytes(b):\n        \"\"\"Unpack bytes into a `Timestamp` object.\n\n        Used for pure-Python msgpack unpacking.\n\n        :param b: Payload from msgpack ext message with code -1\n        :type b: bytes\n\n        :returns: Timestamp object unpacked from msgpack ext payload\n        :rtype: Timestamp\n        \"\"\"\n        if len(b) == 4:\n            seconds = struct.unpack(\"!L\", b)[0]\n            nanoseconds = 0\n        elif len(b) == 8:\n            data64 = struct.unpack(\"!Q\", b)[0]\n            seconds = data64 & 0x00000003FFFFFFFF\n            nanoseconds = data64 >> 34\n        elif len(b) == 12:\n            nanoseconds, seconds = struct.unpack(\"!Iq\", b)\n        else:\n            raise ValueError(\n                \"Timestamp type can only be created from 32, 64, or 96-bit byte objects\"\n            )\n        return Timestamp(seconds, nanoseconds)\n\n    def to_bytes(self):\n        \"\"\"Pack this Timestamp object into bytes.\n\n        Used for pure-Python msgpack packing.\n\n        :returns data: Payload for EXT message with code -1 (timestamp type)\n        :rtype: bytes\n        \"\"\"\n        if (self.seconds >> 34) == 0:  # seconds is non-negative and fits in 34 bits\n            data64 = self.nanoseconds << 34 | self.seconds\n            if data64 & 0xFFFFFFFF00000000 == 0:\n                # nanoseconds is zero and seconds < 2**32, so timestamp 32\n                data = struct.pack(\"!L\", data64)\n            else:\n                # timestamp 64\n                data = struct.pack(\"!Q\", data64)\n        else:\n            # timestamp 96\n            data = struct.pack(\"!Iq\", self.nanoseconds, self.seconds)\n        return data\n\n    @staticmethod\n    def from_unix(unix_sec):\n        \"\"\"Create a Timestamp from posix timestamp in seconds.\n\n        :param unix_float: Posix timestamp in seconds.\n        :type unix_float: int or float\n        \"\"\"\n        seconds = int(unix_sec // 1)\n        nanoseconds = int((unix_sec % 1) * 10**9)\n        return Timestamp(seconds, nanoseconds)\n\n    def to_unix(self):\n        \"\"\"Get the timestamp as a floating-point value.\n\n        :returns: posix timestamp\n        :rtype: float\n        \"\"\"\n        return self.seconds + self.nanoseconds / 1e9\n\n    @staticmethod\n    def from_unix_nano(unix_ns):\n        \"\"\"Create a Timestamp from posix timestamp in nanoseconds.\n\n        :param int unix_ns: Posix timestamp in nanoseconds.\n        :rtype: Timestamp\n        \"\"\"\n        return Timestamp(*divmod(unix_ns, 10**9))\n\n    def to_unix_nano(self):\n        \"\"\"Get the timestamp as a unixtime in nanoseconds.\n\n        :returns: posix timestamp in nanoseconds\n        :rtype: int\n        \"\"\"\n        return self.seconds * 10**9 + self.nanoseconds\n\n    def to_datetime(self):\n        \"\"\"Get the timestamp as a UTC datetime.\n\n        :rtype: `datetime.datetime`\n        \"\"\"\n        utc = datetime.timezone.utc\n        return datetime.datetime.fromtimestamp(0, utc) + datetime.timedelta(\n            seconds=self.seconds, microseconds=self.nanoseconds // 1000\n        )\n\n    @staticmethod\n    def from_datetime(dt):\n        \"\"\"Create a Timestamp from datetime with tzinfo.\n\n        :rtype: Timestamp\n        \"\"\"\n        return Timestamp(seconds=int(dt.timestamp()), nanoseconds=dt.microsecond * 1000)\n", "msgpack/fallback.py": "\"\"\"Fallback pure Python implementation of msgpack\"\"\"\n\nimport struct\nimport sys\nfrom datetime import datetime as _DateTime\n\nif hasattr(sys, \"pypy_version_info\"):\n    from __pypy__ import newlist_hint\n    from __pypy__.builders import BytesBuilder\n\n    _USING_STRINGBUILDER = True\n\n    class BytesIO:\n        def __init__(self, s=b\"\"):\n            if s:\n                self.builder = BytesBuilder(len(s))\n                self.builder.append(s)\n            else:\n                self.builder = BytesBuilder()\n\n        def write(self, s):\n            if isinstance(s, memoryview):\n                s = s.tobytes()\n            elif isinstance(s, bytearray):\n                s = bytes(s)\n            self.builder.append(s)\n\n        def getvalue(self):\n            return self.builder.build()\n\nelse:\n    from io import BytesIO\n\n    _USING_STRINGBUILDER = False\n\n    def newlist_hint(size):\n        return []\n\n\nfrom .exceptions import BufferFull, ExtraData, FormatError, OutOfData, StackError\nfrom .ext import ExtType, Timestamp\n\nEX_SKIP = 0\nEX_CONSTRUCT = 1\nEX_READ_ARRAY_HEADER = 2\nEX_READ_MAP_HEADER = 3\n\nTYPE_IMMEDIATE = 0\nTYPE_ARRAY = 1\nTYPE_MAP = 2\nTYPE_RAW = 3\nTYPE_BIN = 4\nTYPE_EXT = 5\n\nDEFAULT_RECURSE_LIMIT = 511\n\n\ndef _check_type_strict(obj, t, type=type, tuple=tuple):\n    if type(t) is tuple:\n        return type(obj) in t\n    else:\n        return type(obj) is t\n\n\ndef _get_data_from_buffer(obj):\n    view = memoryview(obj)\n    if view.itemsize != 1:\n        raise ValueError(\"cannot unpack from multi-byte object\")\n    return view\n\n\ndef unpackb(packed, **kwargs):\n    \"\"\"\n    Unpack an object from `packed`.\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``ValueError`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n\n    See :class:`Unpacker` for options.\n    \"\"\"\n    unpacker = Unpacker(None, max_buffer_size=len(packed), **kwargs)\n    unpacker.feed(packed)\n    try:\n        ret = unpacker._unpack()\n    except OutOfData:\n        raise ValueError(\"Unpack failed: incomplete input\")\n    except RecursionError:\n        raise StackError\n    if unpacker._got_extradata():\n        raise ExtraData(ret, unpacker._get_extradata())\n    return ret\n\n\n_NO_FORMAT_USED = \"\"\n_MSGPACK_HEADERS = {\n    0xC4: (1, _NO_FORMAT_USED, TYPE_BIN),\n    0xC5: (2, \">H\", TYPE_BIN),\n    0xC6: (4, \">I\", TYPE_BIN),\n    0xC7: (2, \"Bb\", TYPE_EXT),\n    0xC8: (3, \">Hb\", TYPE_EXT),\n    0xC9: (5, \">Ib\", TYPE_EXT),\n    0xCA: (4, \">f\"),\n    0xCB: (8, \">d\"),\n    0xCC: (1, _NO_FORMAT_USED),\n    0xCD: (2, \">H\"),\n    0xCE: (4, \">I\"),\n    0xCF: (8, \">Q\"),\n    0xD0: (1, \"b\"),\n    0xD1: (2, \">h\"),\n    0xD2: (4, \">i\"),\n    0xD3: (8, \">q\"),\n    0xD4: (1, \"b1s\", TYPE_EXT),\n    0xD5: (2, \"b2s\", TYPE_EXT),\n    0xD6: (4, \"b4s\", TYPE_EXT),\n    0xD7: (8, \"b8s\", TYPE_EXT),\n    0xD8: (16, \"b16s\", TYPE_EXT),\n    0xD9: (1, _NO_FORMAT_USED, TYPE_RAW),\n    0xDA: (2, \">H\", TYPE_RAW),\n    0xDB: (4, \">I\", TYPE_RAW),\n    0xDC: (2, \">H\", TYPE_ARRAY),\n    0xDD: (4, \">I\", TYPE_ARRAY),\n    0xDE: (2, \">H\", TYPE_MAP),\n    0xDF: (4, \">I\", TYPE_MAP),\n}\n\n\nclass Unpacker:\n    \"\"\"Streaming unpacker.\n\n    Arguments:\n\n    :param file_like:\n        File-like object having `.read(n)` method.\n        If specified, unpacker reads serialized data from it and `.feed()` is not usable.\n\n    :param int read_size:\n        Used as `file_like.read(read_size)`. (default: `min(16*1024, max_buffer_size)`)\n\n    :param bool use_list:\n        If true, unpack msgpack array to Python list.\n        Otherwise, unpack to Python tuple. (default: True)\n\n    :param bool raw:\n        If true, unpack msgpack raw to Python bytes.\n        Otherwise, unpack to Python str by decoding with UTF-8 encoding (default).\n\n    :param int timestamp:\n        Control how timestamp type is unpacked:\n\n            0 - Timestamp\n            1 - float  (Seconds from the EPOCH)\n            2 - int  (Nanoseconds from the EPOCH)\n            3 - datetime.datetime  (UTC).\n\n    :param bool strict_map_key:\n        If true (default), only str or bytes are accepted for map (dict) keys.\n\n    :param object_hook:\n        When specified, it should be callable.\n        Unpacker calls it with a dict argument after unpacking msgpack map.\n        (See also simplejson)\n\n    :param object_pairs_hook:\n        When specified, it should be callable.\n        Unpacker calls it with a list of key-value pairs after unpacking msgpack map.\n        (See also simplejson)\n\n    :param str unicode_errors:\n        The error handler for decoding unicode. (default: 'strict')\n        This option should be used only when you have msgpack data which\n        contains invalid UTF-8 string.\n\n    :param int max_buffer_size:\n        Limits size of data waiting unpacked.  0 means 2**32-1.\n        The default value is 100*1024*1024 (100MiB).\n        Raises `BufferFull` exception when it is insufficient.\n        You should set this parameter when unpacking data from untrusted source.\n\n    :param int max_str_len:\n        Deprecated, use *max_buffer_size* instead.\n        Limits max length of str. (default: max_buffer_size)\n\n    :param int max_bin_len:\n        Deprecated, use *max_buffer_size* instead.\n        Limits max length of bin. (default: max_buffer_size)\n\n    :param int max_array_len:\n        Limits max length of array.\n        (default: max_buffer_size)\n\n    :param int max_map_len:\n        Limits max length of map.\n        (default: max_buffer_size//2)\n\n    :param int max_ext_len:\n        Deprecated, use *max_buffer_size* instead.\n        Limits max size of ext type.  (default: max_buffer_size)\n\n    Example of streaming deserialize from file-like object::\n\n        unpacker = Unpacker(file_like)\n        for o in unpacker:\n            process(o)\n\n    Example of streaming deserialize from socket::\n\n        unpacker = Unpacker()\n        while True:\n            buf = sock.recv(1024**2)\n            if not buf:\n                break\n            unpacker.feed(buf)\n            for o in unpacker:\n                process(o)\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``OutOfData`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n    \"\"\"\n\n    def __init__(\n        self,\n        file_like=None,\n        *,\n        read_size=0,\n        use_list=True,\n        raw=False,\n        timestamp=0,\n        strict_map_key=True,\n        object_hook=None,\n        object_pairs_hook=None,\n        list_hook=None,\n        unicode_errors=None,\n        max_buffer_size=100 * 1024 * 1024,\n        ext_hook=ExtType,\n        max_str_len=-1,\n        max_bin_len=-1,\n        max_array_len=-1,\n        max_map_len=-1,\n        max_ext_len=-1,\n    ):\n        if unicode_errors is None:\n            unicode_errors = \"strict\"\n\n        if file_like is None:\n            self._feeding = True\n        else:\n            if not callable(file_like.read):\n                raise TypeError(\"`file_like.read` must be callable\")\n            self.file_like = file_like\n            self._feeding = False\n\n        #: array of bytes fed.\n        self._buffer = bytearray()\n        #: Which position we currently reads\n        self._buff_i = 0\n\n        # When Unpacker is used as an iterable, between the calls to next(),\n        # the buffer is not \"consumed\" completely, for efficiency sake.\n        # Instead, it is done sloppily.  To make sure we raise BufferFull at\n        # the correct moments, we have to keep track of how sloppy we were.\n        # Furthermore, when the buffer is incomplete (that is: in the case\n        # we raise an OutOfData) we need to rollback the buffer to the correct\n        # state, which _buf_checkpoint records.\n        self._buf_checkpoint = 0\n\n        if not max_buffer_size:\n            max_buffer_size = 2**31 - 1\n        if max_str_len == -1:\n            max_str_len = max_buffer_size\n        if max_bin_len == -1:\n            max_bin_len = max_buffer_size\n        if max_array_len == -1:\n            max_array_len = max_buffer_size\n        if max_map_len == -1:\n            max_map_len = max_buffer_size // 2\n        if max_ext_len == -1:\n            max_ext_len = max_buffer_size\n\n        self._max_buffer_size = max_buffer_size\n        if read_size > self._max_buffer_size:\n            raise ValueError(\"read_size must be smaller than max_buffer_size\")\n        self._read_size = read_size or min(self._max_buffer_size, 16 * 1024)\n        self._raw = bool(raw)\n        self._strict_map_key = bool(strict_map_key)\n        self._unicode_errors = unicode_errors\n        self._use_list = use_list\n        if not (0 <= timestamp <= 3):\n            raise ValueError(\"timestamp must be 0..3\")\n        self._timestamp = timestamp\n        self._list_hook = list_hook\n        self._object_hook = object_hook\n        self._object_pairs_hook = object_pairs_hook\n        self._ext_hook = ext_hook\n        self._max_str_len = max_str_len\n        self._max_bin_len = max_bin_len\n        self._max_array_len = max_array_len\n        self._max_map_len = max_map_len\n        self._max_ext_len = max_ext_len\n        self._stream_offset = 0\n\n        if list_hook is not None and not callable(list_hook):\n            raise TypeError(\"`list_hook` is not callable\")\n        if object_hook is not None and not callable(object_hook):\n            raise TypeError(\"`object_hook` is not callable\")\n        if object_pairs_hook is not None and not callable(object_pairs_hook):\n            raise TypeError(\"`object_pairs_hook` is not callable\")\n        if object_hook is not None and object_pairs_hook is not None:\n            raise TypeError(\"object_pairs_hook and object_hook are mutually exclusive\")\n        if not callable(ext_hook):\n            raise TypeError(\"`ext_hook` is not callable\")\n\n    def feed(self, next_bytes):\n        assert self._feeding\n        view = _get_data_from_buffer(next_bytes)\n        if len(self._buffer) - self._buff_i + len(view) > self._max_buffer_size:\n            raise BufferFull\n\n        # Strip buffer before checkpoint before reading file.\n        if self._buf_checkpoint > 0:\n            del self._buffer[: self._buf_checkpoint]\n            self._buff_i -= self._buf_checkpoint\n            self._buf_checkpoint = 0\n\n        # Use extend here: INPLACE_ADD += doesn't reliably typecast memoryview in jython\n        self._buffer.extend(view)\n        view.release()\n\n    def _consume(self):\n        \"\"\"Gets rid of the used parts of the buffer.\"\"\"\n        self._stream_offset += self._buff_i - self._buf_checkpoint\n        self._buf_checkpoint = self._buff_i\n\n    def _got_extradata(self):\n        return self._buff_i < len(self._buffer)\n\n    def _get_extradata(self):\n        return self._buffer[self._buff_i :]\n\n    def read_bytes(self, n):\n        ret = self._read(n, raise_outofdata=False)\n        self._consume()\n        return ret\n\n    def _read(self, n, raise_outofdata=True):\n        # (int) -> bytearray\n        self._reserve(n, raise_outofdata=raise_outofdata)\n        i = self._buff_i\n        ret = self._buffer[i : i + n]\n        self._buff_i = i + len(ret)\n        return ret\n\n    def _reserve(self, n, raise_outofdata=True):\n        remain_bytes = len(self._buffer) - self._buff_i - n\n\n        # Fast path: buffer has n bytes already\n        if remain_bytes >= 0:\n            return\n\n        if self._feeding:\n            self._buff_i = self._buf_checkpoint\n            raise OutOfData\n\n        # Strip buffer before checkpoint before reading file.\n        if self._buf_checkpoint > 0:\n            del self._buffer[: self._buf_checkpoint]\n            self._buff_i -= self._buf_checkpoint\n            self._buf_checkpoint = 0\n\n        # Read from file\n        remain_bytes = -remain_bytes\n        if remain_bytes + len(self._buffer) > self._max_buffer_size:\n            raise BufferFull\n        while remain_bytes > 0:\n            to_read_bytes = max(self._read_size, remain_bytes)\n            read_data = self.file_like.read(to_read_bytes)\n            if not read_data:\n                break\n            assert isinstance(read_data, bytes)\n            self._buffer += read_data\n            remain_bytes -= len(read_data)\n\n        if len(self._buffer) < n + self._buff_i and raise_outofdata:\n            self._buff_i = 0  # rollback\n            raise OutOfData\n\n    def _read_header(self):\n        typ = TYPE_IMMEDIATE\n        n = 0\n        obj = None\n        self._reserve(1)\n        b = self._buffer[self._buff_i]\n        self._buff_i += 1\n        if b & 0b10000000 == 0:\n            obj = b\n        elif b & 0b11100000 == 0b11100000:\n            obj = -1 - (b ^ 0xFF)\n        elif b & 0b11100000 == 0b10100000:\n            n = b & 0b00011111\n            typ = TYPE_RAW\n            if n > self._max_str_len:\n                raise ValueError(f\"{n} exceeds max_str_len({self._max_str_len})\")\n            obj = self._read(n)\n        elif b & 0b11110000 == 0b10010000:\n            n = b & 0b00001111\n            typ = TYPE_ARRAY\n            if n > self._max_array_len:\n                raise ValueError(f\"{n} exceeds max_array_len({self._max_array_len})\")\n        elif b & 0b11110000 == 0b10000000:\n            n = b & 0b00001111\n            typ = TYPE_MAP\n            if n > self._max_map_len:\n                raise ValueError(f\"{n} exceeds max_map_len({self._max_map_len})\")\n        elif b == 0xC0:\n            obj = None\n        elif b == 0xC2:\n            obj = False\n        elif b == 0xC3:\n            obj = True\n        elif 0xC4 <= b <= 0xC6:\n            size, fmt, typ = _MSGPACK_HEADERS[b]\n            self._reserve(size)\n            if len(fmt) > 0:\n                n = struct.unpack_from(fmt, self._buffer, self._buff_i)[0]\n            else:\n                n = self._buffer[self._buff_i]\n            self._buff_i += size\n            if n > self._max_bin_len:\n                raise ValueError(f\"{n} exceeds max_bin_len({self._max_bin_len})\")\n            obj = self._read(n)\n        elif 0xC7 <= b <= 0xC9:\n            size, fmt, typ = _MSGPACK_HEADERS[b]\n            self._reserve(size)\n            L, n = struct.unpack_from(fmt, self._buffer, self._buff_i)\n            self._buff_i += size\n            if L > self._max_ext_len:\n                raise ValueError(f\"{L} exceeds max_ext_len({self._max_ext_len})\")\n            obj = self._read(L)\n        elif 0xCA <= b <= 0xD3:\n            size, fmt = _MSGPACK_HEADERS[b]\n            self._reserve(size)\n            if len(fmt) > 0:\n                obj = struct.unpack_from(fmt, self._buffer, self._buff_i)[0]\n            else:\n                obj = self._buffer[self._buff_i]\n            self._buff_i += size\n        elif 0xD4 <= b <= 0xD8:\n            size, fmt, typ = _MSGPACK_HEADERS[b]\n            if self._max_ext_len < size:\n                raise ValueError(f\"{size} exceeds max_ext_len({self._max_ext_len})\")\n            self._reserve(size + 1)\n            n, obj = struct.unpack_from(fmt, self._buffer, self._buff_i)\n            self._buff_i += size + 1\n        elif 0xD9 <= b <= 0xDB:\n            size, fmt, typ = _MSGPACK_HEADERS[b]\n            self._reserve(size)\n            if len(fmt) > 0:\n                (n,) = struct.unpack_from(fmt, self._buffer, self._buff_i)\n            else:\n                n = self._buffer[self._buff_i]\n            self._buff_i += size\n            if n > self._max_str_len:\n                raise ValueError(f\"{n} exceeds max_str_len({self._max_str_len})\")\n            obj = self._read(n)\n        elif 0xDC <= b <= 0xDD:\n            size, fmt, typ = _MSGPACK_HEADERS[b]\n            self._reserve(size)\n            (n,) = struct.unpack_from(fmt, self._buffer, self._buff_i)\n            self._buff_i += size\n            if n > self._max_array_len:\n                raise ValueError(f\"{n} exceeds max_array_len({self._max_array_len})\")\n        elif 0xDE <= b <= 0xDF:\n            size, fmt, typ = _MSGPACK_HEADERS[b]\n            self._reserve(size)\n            (n,) = struct.unpack_from(fmt, self._buffer, self._buff_i)\n            self._buff_i += size\n            if n > self._max_map_len:\n                raise ValueError(f\"{n} exceeds max_map_len({self._max_map_len})\")\n        else:\n            raise FormatError(\"Unknown header: 0x%x\" % b)\n        return typ, n, obj\n\n    def _unpack(self, execute=EX_CONSTRUCT):\n        typ, n, obj = self._read_header()\n\n        if execute == EX_READ_ARRAY_HEADER:\n            if typ != TYPE_ARRAY:\n                raise ValueError(\"Expected array\")\n            return n\n        if execute == EX_READ_MAP_HEADER:\n            if typ != TYPE_MAP:\n                raise ValueError(\"Expected map\")\n            return n\n        # TODO should we eliminate the recursion?\n        if typ == TYPE_ARRAY:\n            if execute == EX_SKIP:\n                for i in range(n):\n                    # TODO check whether we need to call `list_hook`\n                    self._unpack(EX_SKIP)\n                return\n            ret = newlist_hint(n)\n            for i in range(n):\n                ret.append(self._unpack(EX_CONSTRUCT))\n            if self._list_hook is not None:\n                ret = self._list_hook(ret)\n            # TODO is the interaction between `list_hook` and `use_list` ok?\n            return ret if self._use_list else tuple(ret)\n        if typ == TYPE_MAP:\n            if execute == EX_SKIP:\n                for i in range(n):\n                    # TODO check whether we need to call hooks\n                    self._unpack(EX_SKIP)\n                    self._unpack(EX_SKIP)\n                return\n            if self._object_pairs_hook is not None:\n                ret = self._object_pairs_hook(\n                    (self._unpack(EX_CONSTRUCT), self._unpack(EX_CONSTRUCT)) for _ in range(n)\n                )\n            else:\n                ret = {}\n                for _ in range(n):\n                    key = self._unpack(EX_CONSTRUCT)\n                    if self._strict_map_key and type(key) not in (str, bytes):\n                        raise ValueError(\"%s is not allowed for map key\" % str(type(key)))\n                    if isinstance(key, str):\n                        key = sys.intern(key)\n                    ret[key] = self._unpack(EX_CONSTRUCT)\n                if self._object_hook is not None:\n                    ret = self._object_hook(ret)\n            return ret\n        if execute == EX_SKIP:\n            return\n        if typ == TYPE_RAW:\n            if self._raw:\n                obj = bytes(obj)\n            else:\n                obj = obj.decode(\"utf_8\", self._unicode_errors)\n            return obj\n        if typ == TYPE_BIN:\n            return bytes(obj)\n        if typ == TYPE_EXT:\n            if n == -1:  # timestamp\n                ts = Timestamp.from_bytes(bytes(obj))\n                if self._timestamp == 1:\n                    return ts.to_unix()\n                elif self._timestamp == 2:\n                    return ts.to_unix_nano()\n                elif self._timestamp == 3:\n                    return ts.to_datetime()\n                else:\n                    return ts\n            else:\n                return self._ext_hook(n, bytes(obj))\n        assert typ == TYPE_IMMEDIATE\n        return obj\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        try:\n            ret = self._unpack(EX_CONSTRUCT)\n            self._consume()\n            return ret\n        except OutOfData:\n            self._consume()\n            raise StopIteration\n        except RecursionError:\n            raise StackError\n\n    next = __next__\n\n    def skip(self):\n        self._unpack(EX_SKIP)\n        self._consume()\n\n    def unpack(self):\n        try:\n            ret = self._unpack(EX_CONSTRUCT)\n        except RecursionError:\n            raise StackError\n        self._consume()\n        return ret\n\n    def read_array_header(self):\n        ret = self._unpack(EX_READ_ARRAY_HEADER)\n        self._consume()\n        return ret\n\n    def read_map_header(self):\n        ret = self._unpack(EX_READ_MAP_HEADER)\n        self._consume()\n        return ret\n\n    def tell(self):\n        return self._stream_offset\n\n\nclass Packer:\n    \"\"\"\n    MessagePack Packer\n\n    Usage::\n\n        packer = Packer()\n        astream.write(packer.pack(a))\n        astream.write(packer.pack(b))\n\n    Packer's constructor has some keyword arguments:\n\n    :param default:\n        When specified, it should be callable.\n        Convert user type to builtin type that Packer supports.\n        See also simplejson's document.\n\n    :param bool use_single_float:\n        Use single precision float type for float. (default: False)\n\n    :param bool autoreset:\n        Reset buffer after each pack and return its content as `bytes`. (default: True).\n        If set this to false, use `bytes()` to get content and `.reset()` to clear buffer.\n\n    :param bool use_bin_type:\n        Use bin type introduced in msgpack spec 2.0 for bytes.\n        It also enables str8 type for unicode. (default: True)\n\n    :param bool strict_types:\n        If set to true, types will be checked to be exact. Derived classes\n        from serializable types will not be serialized and will be\n        treated as unsupported type and forwarded to default.\n        Additionally tuples will not be serialized as lists.\n        This is useful when trying to implement accurate serialization\n        for python types.\n\n    :param bool datetime:\n        If set to true, datetime with tzinfo is packed into Timestamp type.\n        Note that the tzinfo is stripped in the timestamp.\n        You can get UTC datetime with `timestamp=3` option of the Unpacker.\n\n    :param str unicode_errors:\n        The error handler for encoding unicode. (default: 'strict')\n        DO NOT USE THIS!!  This option is kept for very specific usage.\n\n    :param int buf_size:\n        Internal buffer size. This option is used only for C implementation.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        default=None,\n        use_single_float=False,\n        autoreset=True,\n        use_bin_type=True,\n        strict_types=False,\n        datetime=False,\n        unicode_errors=None,\n        buf_size=None,\n    ):\n        self._strict_types = strict_types\n        self._use_float = use_single_float\n        self._autoreset = autoreset\n        self._use_bin_type = use_bin_type\n        self._buffer = BytesIO()\n        self._datetime = bool(datetime)\n        self._unicode_errors = unicode_errors or \"strict\"\n        if default is not None and not callable(default):\n            raise TypeError(\"default must be callable\")\n        self._default = default\n\n    def _pack(\n        self,\n        obj,\n        nest_limit=DEFAULT_RECURSE_LIMIT,\n        check=isinstance,\n        check_type_strict=_check_type_strict,\n    ):\n        default_used = False\n        if self._strict_types:\n            check = check_type_strict\n            list_types = list\n        else:\n            list_types = (list, tuple)\n        while True:\n            if nest_limit < 0:\n                raise ValueError(\"recursion limit exceeded\")\n            if obj is None:\n                return self._buffer.write(b\"\\xc0\")\n            if check(obj, bool):\n                if obj:\n                    return self._buffer.write(b\"\\xc3\")\n                return self._buffer.write(b\"\\xc2\")\n            if check(obj, int):\n                if 0 <= obj < 0x80:\n                    return self._buffer.write(struct.pack(\"B\", obj))\n                if -0x20 <= obj < 0:\n                    return self._buffer.write(struct.pack(\"b\", obj))\n                if 0x80 <= obj <= 0xFF:\n                    return self._buffer.write(struct.pack(\"BB\", 0xCC, obj))\n                if -0x80 <= obj < 0:\n                    return self._buffer.write(struct.pack(\">Bb\", 0xD0, obj))\n                if 0xFF < obj <= 0xFFFF:\n                    return self._buffer.write(struct.pack(\">BH\", 0xCD, obj))\n                if -0x8000 <= obj < -0x80:\n                    return self._buffer.write(struct.pack(\">Bh\", 0xD1, obj))\n                if 0xFFFF < obj <= 0xFFFFFFFF:\n                    return self._buffer.write(struct.pack(\">BI\", 0xCE, obj))\n                if -0x80000000 <= obj < -0x8000:\n                    return self._buffer.write(struct.pack(\">Bi\", 0xD2, obj))\n                if 0xFFFFFFFF < obj <= 0xFFFFFFFFFFFFFFFF:\n                    return self._buffer.write(struct.pack(\">BQ\", 0xCF, obj))\n                if -0x8000000000000000 <= obj < -0x80000000:\n                    return self._buffer.write(struct.pack(\">Bq\", 0xD3, obj))\n                if not default_used and self._default is not None:\n                    obj = self._default(obj)\n                    default_used = True\n                    continue\n                raise OverflowError(\"Integer value out of range\")\n            if check(obj, (bytes, bytearray)):\n                n = len(obj)\n                if n >= 2**32:\n                    raise ValueError(\"%s is too large\" % type(obj).__name__)\n                self._pack_bin_header(n)\n                return self._buffer.write(obj)\n            if check(obj, str):\n                obj = obj.encode(\"utf-8\", self._unicode_errors)\n                n = len(obj)\n                if n >= 2**32:\n                    raise ValueError(\"String is too large\")\n                self._pack_raw_header(n)\n                return self._buffer.write(obj)\n            if check(obj, memoryview):\n                n = obj.nbytes\n                if n >= 2**32:\n                    raise ValueError(\"Memoryview is too large\")\n                self._pack_bin_header(n)\n                return self._buffer.write(obj)\n            if check(obj, float):\n                if self._use_float:\n                    return self._buffer.write(struct.pack(\">Bf\", 0xCA, obj))\n                return self._buffer.write(struct.pack(\">Bd\", 0xCB, obj))\n            if check(obj, (ExtType, Timestamp)):\n                if check(obj, Timestamp):\n                    code = -1\n                    data = obj.to_bytes()\n                else:\n                    code = obj.code\n                    data = obj.data\n                assert isinstance(code, int)\n                assert isinstance(data, bytes)\n                L = len(data)\n                if L == 1:\n                    self._buffer.write(b\"\\xd4\")\n                elif L == 2:\n                    self._buffer.write(b\"\\xd5\")\n                elif L == 4:\n                    self._buffer.write(b\"\\xd6\")\n                elif L == 8:\n                    self._buffer.write(b\"\\xd7\")\n                elif L == 16:\n                    self._buffer.write(b\"\\xd8\")\n                elif L <= 0xFF:\n                    self._buffer.write(struct.pack(\">BB\", 0xC7, L))\n                elif L <= 0xFFFF:\n                    self._buffer.write(struct.pack(\">BH\", 0xC8, L))\n                else:\n                    self._buffer.write(struct.pack(\">BI\", 0xC9, L))\n                self._buffer.write(struct.pack(\"b\", code))\n                self._buffer.write(data)\n                return\n            if check(obj, list_types):\n                n = len(obj)\n                self._pack_array_header(n)\n                for i in range(n):\n                    self._pack(obj[i], nest_limit - 1)\n                return\n            if check(obj, dict):\n                return self._pack_map_pairs(len(obj), obj.items(), nest_limit - 1)\n\n            if self._datetime and check(obj, _DateTime) and obj.tzinfo is not None:\n                obj = Timestamp.from_datetime(obj)\n                default_used = 1\n                continue\n\n            if not default_used and self._default is not None:\n                obj = self._default(obj)\n                default_used = 1\n                continue\n\n            if self._datetime and check(obj, _DateTime):\n                raise ValueError(f\"Cannot serialize {obj!r} where tzinfo=None\")\n\n            raise TypeError(f\"Cannot serialize {obj!r}\")\n\n    def pack(self, obj):\n        try:\n            self._pack(obj)\n        except:\n            self._buffer = BytesIO()  # force reset\n            raise\n        if self._autoreset:\n            ret = self._buffer.getvalue()\n            self._buffer = BytesIO()\n            return ret\n\n    def pack_map_pairs(self, pairs):\n        self._pack_map_pairs(len(pairs), pairs)\n        if self._autoreset:\n            ret = self._buffer.getvalue()\n            self._buffer = BytesIO()\n            return ret\n\n    def pack_array_header(self, n):\n        if n >= 2**32:\n            raise ValueError\n        self._pack_array_header(n)\n        if self._autoreset:\n            ret = self._buffer.getvalue()\n            self._buffer = BytesIO()\n            return ret\n\n    def pack_map_header(self, n):\n        if n >= 2**32:\n            raise ValueError\n        self._pack_map_header(n)\n        if self._autoreset:\n            ret = self._buffer.getvalue()\n            self._buffer = BytesIO()\n            return ret\n\n    def pack_ext_type(self, typecode, data):\n        if not isinstance(typecode, int):\n            raise TypeError(\"typecode must have int type.\")\n        if not 0 <= typecode <= 127:\n            raise ValueError(\"typecode should be 0-127\")\n        if not isinstance(data, bytes):\n            raise TypeError(\"data must have bytes type\")\n        L = len(data)\n        if L > 0xFFFFFFFF:\n            raise ValueError(\"Too large data\")\n        if L == 1:\n            self._buffer.write(b\"\\xd4\")\n        elif L == 2:\n            self._buffer.write(b\"\\xd5\")\n        elif L == 4:\n            self._buffer.write(b\"\\xd6\")\n        elif L == 8:\n            self._buffer.write(b\"\\xd7\")\n        elif L == 16:\n            self._buffer.write(b\"\\xd8\")\n        elif L <= 0xFF:\n            self._buffer.write(b\"\\xc7\" + struct.pack(\"B\", L))\n        elif L <= 0xFFFF:\n            self._buffer.write(b\"\\xc8\" + struct.pack(\">H\", L))\n        else:\n            self._buffer.write(b\"\\xc9\" + struct.pack(\">I\", L))\n        self._buffer.write(struct.pack(\"B\", typecode))\n        self._buffer.write(data)\n\n    def _pack_array_header(self, n):\n        if n <= 0x0F:\n            return self._buffer.write(struct.pack(\"B\", 0x90 + n))\n        if n <= 0xFFFF:\n            return self._buffer.write(struct.pack(\">BH\", 0xDC, n))\n        if n <= 0xFFFFFFFF:\n            return self._buffer.write(struct.pack(\">BI\", 0xDD, n))\n        raise ValueError(\"Array is too large\")\n\n    def _pack_map_header(self, n):\n        if n <= 0x0F:\n            return self._buffer.write(struct.pack(\"B\", 0x80 + n))\n        if n <= 0xFFFF:\n            return self._buffer.write(struct.pack(\">BH\", 0xDE, n))\n        if n <= 0xFFFFFFFF:\n            return self._buffer.write(struct.pack(\">BI\", 0xDF, n))\n        raise ValueError(\"Dict is too large\")\n\n    def _pack_map_pairs(self, n, pairs, nest_limit=DEFAULT_RECURSE_LIMIT):\n        self._pack_map_header(n)\n        for k, v in pairs:\n            self._pack(k, nest_limit - 1)\n            self._pack(v, nest_limit - 1)\n\n    def _pack_raw_header(self, n):\n        if n <= 0x1F:\n            self._buffer.write(struct.pack(\"B\", 0xA0 + n))\n        elif self._use_bin_type and n <= 0xFF:\n            self._buffer.write(struct.pack(\">BB\", 0xD9, n))\n        elif n <= 0xFFFF:\n            self._buffer.write(struct.pack(\">BH\", 0xDA, n))\n        elif n <= 0xFFFFFFFF:\n            self._buffer.write(struct.pack(\">BI\", 0xDB, n))\n        else:\n            raise ValueError(\"Raw is too large\")\n\n    def _pack_bin_header(self, n):\n        if not self._use_bin_type:\n            return self._pack_raw_header(n)\n        elif n <= 0xFF:\n            return self._buffer.write(struct.pack(\">BB\", 0xC4, n))\n        elif n <= 0xFFFF:\n            return self._buffer.write(struct.pack(\">BH\", 0xC5, n))\n        elif n <= 0xFFFFFFFF:\n            return self._buffer.write(struct.pack(\">BI\", 0xC6, n))\n        else:\n            raise ValueError(\"Bin is too large\")\n\n    def bytes(self):\n        \"\"\"Return internal buffer contents as bytes object\"\"\"\n        return self._buffer.getvalue()\n\n    def reset(self):\n        \"\"\"Reset internal buffer.\n\n        This method is useful only when autoreset=False.\n        \"\"\"\n        self._buffer = BytesIO()\n\n    def getbuffer(self):\n        \"\"\"Return view of internal buffer.\"\"\"\n        if _USING_STRINGBUILDER:\n            return memoryview(self.bytes())\n        else:\n            return self._buffer.getbuffer()\n", "msgpack/__init__.py": "# ruff: noqa: F401\nimport os\n\nfrom .exceptions import *  # noqa: F403\nfrom .ext import ExtType, Timestamp\n\nversion = (1, 1, 0, \"rc1\")\n__version__ = \"1.1.0rc1\"\n\n\nif os.environ.get(\"MSGPACK_PUREPYTHON\"):\n    from .fallback import Packer, Unpacker, unpackb\nelse:\n    try:\n        from ._cmsgpack import Packer, Unpacker, unpackb\n    except ImportError:\n        from .fallback import Packer, Unpacker, unpackb\n\n\ndef pack(o, stream, **kwargs):\n    \"\"\"\n    Pack object `o` and write it to `stream`\n\n    See :class:`Packer` for options.\n    \"\"\"\n    packer = Packer(**kwargs)\n    stream.write(packer.pack(o))\n\n\ndef packb(o, **kwargs):\n    \"\"\"\n    Pack object `o` and return packed bytes\n\n    See :class:`Packer` for options.\n    \"\"\"\n    return Packer(**kwargs).pack(o)\n\n\ndef unpack(stream, **kwargs):\n    \"\"\"\n    Unpack an object from `stream`.\n\n    Raises `ExtraData` when `stream` contains extra bytes.\n    See :class:`Unpacker` for options.\n    \"\"\"\n    data = stream.read()\n    return unpackb(data, **kwargs)\n\n\n# alias for compatibility to simplejson/marshal/pickle.\nload = unpack\nloads = unpackb\n\ndump = pack\ndumps = packb\n"}