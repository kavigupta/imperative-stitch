{"setup.py": "#!/usr/bin/env python\n\n# This is a shim to hopefully allow Github to detect the package, build is done with poetry\n\nimport setuptools\n\nif __name__ == \"__main__\":\n    setuptools.setup(name=\"rich\")\n", "tools/stress_test_pretty.py": "from rich.console import Console\nfrom rich.panel import Panel\nfrom rich.pretty import Pretty\nfrom rich._timer import timer\n\nDATA = {\n    \"foo\": [1, 2, 3, (), {}, (1, 2, 3), {4, 5, 6, (7, 8, 9)}, \"Hello, World\"],\n    \"bar\": [None, (False, True)] * 2,\n    \"Dune\": {\n        \"names\": {\n            \"Paul Atreides\",\n            \"Vladimir Harkonnen\",\n            \"Thufir Hawat\",\n            \"Duncan Idaho\",\n        }\n    },\n}\nconsole = Console()\nwith timer(\"Stress test\"):\n    for w in range(130):\n        console.print(Panel(Pretty(DATA, indent_guides=True), width=w))\n", "tools/profile_divide.py": "from rich.segment import Segment\n\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\"\"\n\n\nsegments = [Segment(text[n : n + 7]) for n in range(0, len(text), 7)]\n\n\nfrom time import perf_counter\n\nstart = perf_counter()\nfor _ in range(10000):\n    list(Segment.divide(segments, [0, 1, 20, 24, 65, len(text)]))\nprint(perf_counter() - start)\n", "tools/profile_pretty.py": "import json\nimport io\nfrom time import time\nfrom rich.console import Console\nfrom rich.pretty import Pretty\n\n\nconsole = Console(file=io.StringIO(), color_system=\"truecolor\", width=100)\n\nwith open(\"cats.json\") as fh:\n    cats = json.load(fh)\n\n\nconsole.begin_capture()\nstart = time()\npretty = Pretty(cats)\nconsole.print(pretty, overflow=\"ignore\", crop=False)\nresult = console.end_capture()\ntaken = (time() - start) * 1000\nprint(result)\n\nprint(console.file.getvalue())\nprint(f\"{taken:.1f}\")\n", "tools/make_emoji.py": "try:\n    import emoji\nexcept ImportError:\n    print(\"pip install emoji\")\n    raise\n\nfrom emoji.unicode_codes import EMOJI_ALIAS_UNICODE\n\nemoji = {k.lower().strip(\":\"): v for k, v in EMOJI_ALIAS_UNICODE.items()}\n\nwith open(\"_emoji_codes.py\", \"wt\") as f:\n    f.write(\"EMOJI=\" + str(emoji))\n", "tools/make_terminal_widths.py": "import subprocess\nfrom typing import List, Tuple\nimport sys\n\nfrom rich.progress import Progress\n\nfrom wcwidth import wcwidth\n\n\nprogress = Progress()\n\n\ndef make_widths_table() -> List[Tuple[int, int, int]]:\n    table: List[Tuple[int, int, int]] = []\n    append = table.append\n\n    make_table_task = progress.add_task(\"Calculating table...\")\n\n    widths = (\n        (codepoint, wcwidth(chr(codepoint)))\n        for codepoint in range(0, sys.maxunicode + 1)\n    )\n\n    _widths = [(codepoint, width) for codepoint, width in widths if width != 1]\n    iter_widths = iter(_widths)\n\n    endpoint, group_cell_size = next(iter_widths)\n    start_codepoint = end_codepoint = endpoint\n    for codepoint, cell_size in progress.track(\n        iter_widths, task_id=make_table_task, total=len(_widths) - 1\n    ):\n        if cell_size != group_cell_size or codepoint != end_codepoint + 1:\n            append((start_codepoint, end_codepoint, group_cell_size))\n            start_codepoint = end_codepoint = codepoint\n            group_cell_size = cell_size\n        else:\n            end_codepoint = codepoint\n    append((start_codepoint, end_codepoint, group_cell_size))\n    return table\n\n\ndef get_cell_size(table: List[Tuple[int, int, int]], character: str) -> int:\n    codepoint = ord(character)\n    lower_bound = 0\n    upper_bound = len(table) - 1\n    index = (lower_bound + upper_bound) // 2\n    while True:\n        start, end, width = table[index]\n        if codepoint < start:\n            upper_bound = index - 1\n        elif codepoint > end:\n            lower_bound = index + 1\n        else:\n            return width\n        if upper_bound < lower_bound:\n            break\n        index = (lower_bound + upper_bound) // 2\n    return 1\n\n\ndef test(widths_table):\n    for codepoint in progress.track(\n        range(0, sys.maxunicode + 1), description=\"Testing...\"\n    ):\n        character = chr(codepoint)\n        width1 = get_cell_size(widths_table, character)\n        width2 = wcwidth(character)\n        if width1 != width2:\n            print(f\"{width1} != {width2}\")\n            break\n\n\ndef run():\n    with progress:\n        widths_table = make_widths_table()\n        test(widths_table)\n    table_file = f\"\"\"# Auto generated by make_terminal_widths.py\n\nCELL_WIDTHS = {widths_table!r}\n\n\"\"\"\n    with open(\"../rich/_cell_widths.py\", \"wt\") as fh:\n        fh.write(table_file)\n\n    subprocess.run(\"black ../rich/_cell_widths.py\", shell=True)\n\n\nif __name__ == \"__main__\":\n    run()\n", "rich/_export_format.py": "CONSOLE_HTML_FORMAT = \"\"\"\\\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n{stylesheet}\nbody {{\n    color: {foreground};\n    background-color: {background};\n}}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\">{code}</code></pre>\n</body>\n</html>\n\"\"\"\n\nCONSOLE_SVG_FORMAT = \"\"\"\\\n<svg class=\"rich-terminal\" viewBox=\"0 0 {width} {height}\" xmlns=\"http://www.w3.org/2000/svg\">\n    <!-- Generated with Rich https://www.textualize.io -->\n    <style>\n\n    @font-face {{\n        font-family: \"Fira Code\";\n        src: local(\"FiraCode-Regular\"),\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");\n        font-style: normal;\n        font-weight: 400;\n    }}\n    @font-face {{\n        font-family: \"Fira Code\";\n        src: local(\"FiraCode-Bold\"),\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");\n        font-style: bold;\n        font-weight: 700;\n    }}\n\n    .{unique_id}-matrix {{\n        font-family: Fira Code, monospace;\n        font-size: {char_height}px;\n        line-height: {line_height}px;\n        font-variant-east-asian: full-width;\n    }}\n\n    .{unique_id}-title {{\n        font-size: 18px;\n        font-weight: bold;\n        font-family: arial;\n    }}\n\n    {styles}\n    </style>\n\n    <defs>\n    <clipPath id=\"{unique_id}-clip-terminal\">\n      <rect x=\"0\" y=\"0\" width=\"{terminal_width}\" height=\"{terminal_height}\" />\n    </clipPath>\n    {lines}\n    </defs>\n\n    {chrome}\n    <g transform=\"translate({terminal_x}, {terminal_y})\" clip-path=\"url(#{unique_id}-clip-terminal)\">\n    {backgrounds}\n    <g class=\"{unique_id}-matrix\">\n    {matrix}\n    </g>\n    </g>\n</svg>\n\"\"\"\n\n_SVG_FONT_FAMILY = \"Rich Fira Code\"\n_SVG_CLASSES_PREFIX = \"rich-svg\"\n", "rich/panel.py": "from typing import TYPE_CHECKING, Optional\n\nfrom .align import AlignMethod\nfrom .box import ROUNDED, Box\nfrom .cells import cell_len\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement, measure_renderables\nfrom .padding import Padding, PaddingDimensions\nfrom .segment import Segment\nfrom .style import Style, StyleType\nfrom .text import Text, TextType\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderableType, RenderResult\n\n\nclass Panel(JupyterMixin):\n    \"\"\"A console renderable that draws a border around its contents.\n\n    Example:\n        >>> console.print(Panel(\"Hello, World!\"))\n\n    Args:\n        renderable (RenderableType): A console renderable object.\n        box (Box, optional): A Box instance that defines the look of the border (see :ref:`appendix_box`.\n            Defaults to box.ROUNDED.\n        safe_box (bool, optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.\n        expand (bool, optional): If True the panel will stretch to fill the console\n            width, otherwise it will be sized to fit the contents. Defaults to True.\n        style (str, optional): The style of the panel (border and contents). Defaults to \"none\".\n        border_style (str, optional): The style of the border. Defaults to \"none\".\n        width (Optional[int], optional): Optional width of panel. Defaults to None to auto-detect.\n        height (Optional[int], optional): Optional height of panel. Defaults to None to auto-detect.\n        padding (Optional[PaddingDimensions]): Optional padding around renderable. Defaults to 0.\n        highlight (bool, optional): Enable automatic highlighting of panel title (if str). Defaults to False.\n    \"\"\"\n\n    def __init__(\n        self,\n        renderable: \"RenderableType\",\n        box: Box = ROUNDED,\n        *,\n        title: Optional[TextType] = None,\n        title_align: AlignMethod = \"center\",\n        subtitle: Optional[TextType] = None,\n        subtitle_align: AlignMethod = \"center\",\n        safe_box: Optional[bool] = None,\n        expand: bool = True,\n        style: StyleType = \"none\",\n        border_style: StyleType = \"none\",\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n        padding: PaddingDimensions = (0, 1),\n        highlight: bool = False,\n    ) -> None:\n        self.renderable = renderable\n        self.box = box\n        self.title = title\n        self.title_align: AlignMethod = title_align\n        self.subtitle = subtitle\n        self.subtitle_align = subtitle_align\n        self.safe_box = safe_box\n        self.expand = expand\n        self.style = style\n        self.border_style = border_style\n        self.width = width\n        self.height = height\n        self.padding = padding\n        self.highlight = highlight\n\n    @classmethod\n    def fit(\n        cls,\n        renderable: \"RenderableType\",\n        box: Box = ROUNDED,\n        *,\n        title: Optional[TextType] = None,\n        title_align: AlignMethod = \"center\",\n        subtitle: Optional[TextType] = None,\n        subtitle_align: AlignMethod = \"center\",\n        safe_box: Optional[bool] = None,\n        style: StyleType = \"none\",\n        border_style: StyleType = \"none\",\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n        padding: PaddingDimensions = (0, 1),\n        highlight: bool = False,\n    ) -> \"Panel\":\n        \"\"\"An alternative constructor that sets expand=False.\"\"\"\n        return cls(\n            renderable,\n            box,\n            title=title,\n            title_align=title_align,\n            subtitle=subtitle,\n            subtitle_align=subtitle_align,\n            safe_box=safe_box,\n            style=style,\n            border_style=border_style,\n            width=width,\n            height=height,\n            padding=padding,\n            highlight=highlight,\n            expand=False,\n        )\n\n    @property\n    def _title(self) -> Optional[Text]:\n        if self.title:\n            title_text = (\n                Text.from_markup(self.title)\n                if isinstance(self.title, str)\n                else self.title.copy()\n            )\n            title_text.end = \"\"\n            title_text.plain = title_text.plain.replace(\"\\n\", \" \")\n            title_text.no_wrap = True\n            title_text.expand_tabs()\n            title_text.pad(1)\n            return title_text\n        return None\n\n    @property\n    def _subtitle(self) -> Optional[Text]:\n        if self.subtitle:\n            subtitle_text = (\n                Text.from_markup(self.subtitle)\n                if isinstance(self.subtitle, str)\n                else self.subtitle.copy()\n            )\n            subtitle_text.end = \"\"\n            subtitle_text.plain = subtitle_text.plain.replace(\"\\n\", \" \")\n            subtitle_text.no_wrap = True\n            subtitle_text.expand_tabs()\n            subtitle_text.pad(1)\n            return subtitle_text\n        return None\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        _padding = Padding.unpack(self.padding)\n        renderable = (\n            Padding(self.renderable, _padding) if any(_padding) else self.renderable\n        )\n        style = console.get_style(self.style)\n        border_style = style + console.get_style(self.border_style)\n        width = (\n            options.max_width\n            if self.width is None\n            else min(options.max_width, self.width)\n        )\n\n        safe_box: bool = console.safe_box if self.safe_box is None else self.safe_box\n        box = self.box.substitute(options, safe=safe_box)\n\n        def align_text(\n            text: Text, width: int, align: str, character: str, style: Style\n        ) -> Text:\n            \"\"\"Gets new aligned text.\n\n            Args:\n                text (Text): Title or subtitle text.\n                width (int): Desired width.\n                align (str): Alignment.\n                character (str): Character for alignment.\n                style (Style): Border style\n\n            Returns:\n                Text: New text instance\n            \"\"\"\n            text = text.copy()\n            text.truncate(width)\n            excess_space = width - cell_len(text.plain)\n            if excess_space:\n                if align == \"left\":\n                    return Text.assemble(\n                        text,\n                        (character * excess_space, style),\n                        no_wrap=True,\n                        end=\"\",\n                    )\n                elif align == \"center\":\n                    left = excess_space // 2\n                    return Text.assemble(\n                        (character * left, style),\n                        text,\n                        (character * (excess_space - left), style),\n                        no_wrap=True,\n                        end=\"\",\n                    )\n                else:\n                    return Text.assemble(\n                        (character * excess_space, style),\n                        text,\n                        no_wrap=True,\n                        end=\"\",\n                    )\n            return text\n\n        title_text = self._title\n        if title_text is not None:\n            title_text.stylize_before(border_style)\n\n        child_width = (\n            width - 2\n            if self.expand\n            else console.measure(\n                renderable, options=options.update_width(width - 2)\n            ).maximum\n        )\n        child_height = self.height or options.height or None\n        if child_height:\n            child_height -= 2\n        if title_text is not None:\n            child_width = min(\n                options.max_width - 2, max(child_width, title_text.cell_len + 2)\n            )\n\n        width = child_width + 2\n        child_options = options.update(\n            width=child_width, height=child_height, highlight=self.highlight\n        )\n        lines = console.render_lines(renderable, child_options, style=style)\n\n        line_start = Segment(box.mid_left, border_style)\n        line_end = Segment(f\"{box.mid_right}\", border_style)\n        new_line = Segment.line()\n        if title_text is None or width <= 4:\n            yield Segment(box.get_top([width - 2]), border_style)\n        else:\n            title_text = align_text(\n                title_text,\n                width - 4,\n                self.title_align,\n                box.top,\n                border_style,\n            )\n            yield Segment(box.top_left + box.top, border_style)\n            yield from console.render(title_text, child_options.update_width(width - 4))\n            yield Segment(box.top + box.top_right, border_style)\n\n        yield new_line\n        for line in lines:\n            yield line_start\n            yield from line\n            yield line_end\n            yield new_line\n\n        subtitle_text = self._subtitle\n        if subtitle_text is not None:\n            subtitle_text.stylize_before(border_style)\n\n        if subtitle_text is None or width <= 4:\n            yield Segment(box.get_bottom([width - 2]), border_style)\n        else:\n            subtitle_text = align_text(\n                subtitle_text,\n                width - 4,\n                self.subtitle_align,\n                box.bottom,\n                border_style,\n            )\n            yield Segment(box.bottom_left + box.bottom, border_style)\n            yield from console.render(\n                subtitle_text, child_options.update_width(width - 4)\n            )\n            yield Segment(box.bottom + box.bottom_right, border_style)\n\n        yield new_line\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        _title = self._title\n        _, right, _, left = Padding.unpack(self.padding)\n        padding = left + right\n        renderables = [self.renderable, _title] if _title else [self.renderable]\n\n        if self.width is None:\n            width = (\n                measure_renderables(\n                    console,\n                    options.update_width(options.max_width - padding - 2),\n                    renderables,\n                ).maximum\n                + padding\n                + 2\n            )\n        else:\n            width = self.width\n        return Measurement(width, width)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from .console import Console\n\n    c = Console()\n\n    from .box import DOUBLE, ROUNDED\n    from .padding import Padding\n\n    p = Panel(\n        \"Hello, World!\",\n        title=\"rich.Panel\",\n        style=\"white on blue\",\n        box=DOUBLE,\n        padding=1,\n    )\n\n    c.print()\n    c.print(p)\n", "rich/columns.py": "from collections import defaultdict\nfrom itertools import chain\nfrom operator import itemgetter\nfrom typing import Dict, Iterable, List, Optional, Tuple\n\nfrom .align import Align, AlignMethod\nfrom .console import Console, ConsoleOptions, RenderableType, RenderResult\nfrom .constrain import Constrain\nfrom .measure import Measurement\nfrom .padding import Padding, PaddingDimensions\nfrom .table import Table\nfrom .text import TextType\nfrom .jupyter import JupyterMixin\n\n\nclass Columns(JupyterMixin):\n    \"\"\"Display renderables in neat columns.\n\n    Args:\n        renderables (Iterable[RenderableType]): Any number of Rich renderables (including str).\n        width (int, optional): The desired width of the columns, or None to auto detect. Defaults to None.\n        padding (PaddingDimensions, optional): Optional padding around cells. Defaults to (0, 1).\n        expand (bool, optional): Expand columns to full width. Defaults to False.\n        equal (bool, optional): Arrange in to equal sized columns. Defaults to False.\n        column_first (bool, optional): Align items from top to bottom (rather than left to right). Defaults to False.\n        right_to_left (bool, optional): Start column from right hand side. Defaults to False.\n        align (str, optional): Align value (\"left\", \"right\", or \"center\") or None for default. Defaults to None.\n        title (TextType, optional): Optional title for Columns.\n    \"\"\"\n\n    def __init__(\n        self,\n        renderables: Optional[Iterable[RenderableType]] = None,\n        padding: PaddingDimensions = (0, 1),\n        *,\n        width: Optional[int] = None,\n        expand: bool = False,\n        equal: bool = False,\n        column_first: bool = False,\n        right_to_left: bool = False,\n        align: Optional[AlignMethod] = None,\n        title: Optional[TextType] = None,\n    ) -> None:\n        self.renderables = list(renderables or [])\n        self.width = width\n        self.padding = padding\n        self.expand = expand\n        self.equal = equal\n        self.column_first = column_first\n        self.right_to_left = right_to_left\n        self.align: Optional[AlignMethod] = align\n        self.title = title\n\n    def add_renderable(self, renderable: RenderableType) -> None:\n        \"\"\"Add a renderable to the columns.\n\n        Args:\n            renderable (RenderableType): Any renderable object.\n        \"\"\"\n        self.renderables.append(renderable)\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        render_str = console.render_str\n        renderables = [\n            render_str(renderable) if isinstance(renderable, str) else renderable\n            for renderable in self.renderables\n        ]\n        if not renderables:\n            return\n        _top, right, _bottom, left = Padding.unpack(self.padding)\n        width_padding = max(left, right)\n        max_width = options.max_width\n        widths: Dict[int, int] = defaultdict(int)\n        column_count = len(renderables)\n\n        get_measurement = Measurement.get\n        renderable_widths = [\n            get_measurement(console, options, renderable).maximum\n            for renderable in renderables\n        ]\n        if self.equal:\n            renderable_widths = [max(renderable_widths)] * len(renderable_widths)\n\n        def iter_renderables(\n            column_count: int,\n        ) -> Iterable[Tuple[int, Optional[RenderableType]]]:\n            item_count = len(renderables)\n            if self.column_first:\n                width_renderables = list(zip(renderable_widths, renderables))\n\n                column_lengths: List[int] = [item_count // column_count] * column_count\n                for col_no in range(item_count % column_count):\n                    column_lengths[col_no] += 1\n\n                row_count = (item_count + column_count - 1) // column_count\n                cells = [[-1] * column_count for _ in range(row_count)]\n                row = col = 0\n                for index in range(item_count):\n                    cells[row][col] = index\n                    column_lengths[col] -= 1\n                    if column_lengths[col]:\n                        row += 1\n                    else:\n                        col += 1\n                        row = 0\n                for index in chain.from_iterable(cells):\n                    if index == -1:\n                        break\n                    yield width_renderables[index]\n            else:\n                yield from zip(renderable_widths, renderables)\n            # Pad odd elements with spaces\n            if item_count % column_count:\n                for _ in range(column_count - (item_count % column_count)):\n                    yield 0, None\n\n        table = Table.grid(padding=self.padding, collapse_padding=True, pad_edge=False)\n        table.expand = self.expand\n        table.title = self.title\n\n        if self.width is not None:\n            column_count = (max_width) // (self.width + width_padding)\n            for _ in range(column_count):\n                table.add_column(width=self.width)\n        else:\n            while column_count > 1:\n                widths.clear()\n                column_no = 0\n                for renderable_width, _ in iter_renderables(column_count):\n                    widths[column_no] = max(widths[column_no], renderable_width)\n                    total_width = sum(widths.values()) + width_padding * (\n                        len(widths) - 1\n                    )\n                    if total_width > max_width:\n                        column_count = len(widths) - 1\n                        break\n                    else:\n                        column_no = (column_no + 1) % column_count\n                else:\n                    break\n\n        get_renderable = itemgetter(1)\n        _renderables = [\n            get_renderable(_renderable)\n            for _renderable in iter_renderables(column_count)\n        ]\n        if self.equal:\n            _renderables = [\n                None\n                if renderable is None\n                else Constrain(renderable, renderable_widths[0])\n                for renderable in _renderables\n            ]\n        if self.align:\n            align = self.align\n            _Align = Align\n            _renderables = [\n                None if renderable is None else _Align(renderable, align)\n                for renderable in _renderables\n            ]\n\n        right_to_left = self.right_to_left\n        add_row = table.add_row\n        for start in range(0, len(_renderables), column_count):\n            row = _renderables[start : start + column_count]\n            if right_to_left:\n                row = row[::-1]\n            add_row(*row)\n        yield table\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import os\n\n    console = Console()\n\n    files = [f\"{i} {s}\" for i, s in enumerate(sorted(os.listdir()))]\n    columns = Columns(files, padding=(0, 1), expand=False, equal=False)\n    console.print(columns)\n    console.rule()\n    columns.column_first = True\n    console.print(columns)\n    columns.right_to_left = True\n    console.rule()\n    console.print(columns)\n", "rich/emoji.py": "import sys\nfrom typing import TYPE_CHECKING, Optional, Union\n\nfrom .jupyter import JupyterMixin\nfrom .segment import Segment\nfrom .style import Style\nfrom ._emoji_codes import EMOJI\nfrom ._emoji_replace import _emoji_replace\n\nif sys.version_info >= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal  # pragma: no cover\n\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderResult\n\n\nEmojiVariant = Literal[\"emoji\", \"text\"]\n\n\nclass NoEmoji(Exception):\n    \"\"\"No emoji by that name.\"\"\"\n\n\nclass Emoji(JupyterMixin):\n    __slots__ = [\"name\", \"style\", \"_char\", \"variant\"]\n\n    VARIANTS = {\"text\": \"\\uFE0E\", \"emoji\": \"\\uFE0F\"}\n\n    def __init__(\n        self,\n        name: str,\n        style: Union[str, Style] = \"none\",\n        variant: Optional[EmojiVariant] = None,\n    ) -> None:\n        \"\"\"A single emoji character.\n\n        Args:\n            name (str): Name of emoji.\n            style (Union[str, Style], optional): Optional style. Defaults to None.\n\n        Raises:\n            NoEmoji: If the emoji doesn't exist.\n        \"\"\"\n        self.name = name\n        self.style = style\n        self.variant = variant\n        try:\n            self._char = EMOJI[name]\n        except KeyError:\n            raise NoEmoji(f\"No emoji called {name!r}\")\n        if variant is not None:\n            self._char += self.VARIANTS.get(variant, \"\")\n\n    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n    def __repr__(self) -> str:\n        return f\"<emoji {self.name!r}>\"\n\n    def __str__(self) -> str:\n        return self._char\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        yield Segment(self._char, console.get_style(self.style))\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import sys\n\n    from rich.columns import Columns\n    from rich.console import Console\n\n    console = Console(record=True)\n\n    columns = Columns(\n        (f\":{name}: {name}\" for name in sorted(EMOJI.keys()) if \"\\u200D\" not in name),\n        column_first=True,\n    )\n\n    console.print(columns)\n    if len(sys.argv) > 1:\n        console.save_html(sys.argv[1])\n", "rich/markup.py": "import re\nfrom ast import literal_eval\nfrom operator import attrgetter\nfrom typing import Callable, Iterable, List, Match, NamedTuple, Optional, Tuple, Union\n\nfrom ._emoji_replace import _emoji_replace\nfrom .emoji import EmojiVariant\nfrom .errors import MarkupError\nfrom .style import Style\nfrom .text import Span, Text\n\nRE_TAGS = re.compile(\n    r\"\"\"((\\\\*)\\[([a-z#/@][^[]*?)])\"\"\",\n    re.VERBOSE,\n)\n\nRE_HANDLER = re.compile(r\"^([\\w.]*?)(\\(.*?\\))?$\")\n\n\nclass Tag(NamedTuple):\n    \"\"\"A tag in console markup.\"\"\"\n\n    name: str\n    \"\"\"The tag name. e.g. 'bold'.\"\"\"\n    parameters: Optional[str]\n    \"\"\"Any additional parameters after the name.\"\"\"\n\n    def __str__(self) -> str:\n        return (\n            self.name if self.parameters is None else f\"{self.name} {self.parameters}\"\n        )\n\n    @property\n    def markup(self) -> str:\n        \"\"\"Get the string representation of this tag.\"\"\"\n        return (\n            f\"[{self.name}]\"\n            if self.parameters is None\n            else f\"[{self.name}={self.parameters}]\"\n        )\n\n\n_ReStringMatch = Match[str]  # regex match object\n_ReSubCallable = Callable[[_ReStringMatch], str]  # Callable invoked by re.sub\n_EscapeSubMethod = Callable[[_ReSubCallable, str], str]  # Sub method of a compiled re\n\n\ndef escape(\n    markup: str,\n    _escape: _EscapeSubMethod = re.compile(r\"(\\\\*)(\\[[a-z#/@][^[]*?])\").sub,\n) -> str:\n    \"\"\"Escapes text so that it won't be interpreted as markup.\n\n    Args:\n        markup (str): Content to be inserted in to markup.\n\n    Returns:\n        str: Markup with square brackets escaped.\n    \"\"\"\n\n    def escape_backslashes(match: Match[str]) -> str:\n        \"\"\"Called by re.sub replace matches.\"\"\"\n        backslashes, text = match.groups()\n        return f\"{backslashes}{backslashes}\\\\{text}\"\n\n    markup = _escape(escape_backslashes, markup)\n    if markup.endswith(\"\\\\\") and not markup.endswith(\"\\\\\\\\\"):\n        return markup + \"\\\\\"\n\n    return markup\n\n\ndef _parse(markup: str) -> Iterable[Tuple[int, Optional[str], Optional[Tag]]]:\n    \"\"\"Parse markup in to an iterable of tuples of (position, text, tag).\n\n    Args:\n        markup (str): A string containing console markup\n\n    \"\"\"\n    position = 0\n    _divmod = divmod\n    _Tag = Tag\n    for match in RE_TAGS.finditer(markup):\n        full_text, escapes, tag_text = match.groups()\n        start, end = match.span()\n        if start > position:\n            yield start, markup[position:start], None\n        if escapes:\n            backslashes, escaped = _divmod(len(escapes), 2)\n            if backslashes:\n                # Literal backslashes\n                yield start, \"\\\\\" * backslashes, None\n                start += backslashes * 2\n            if escaped:\n                # Escape of tag\n                yield start, full_text[len(escapes) :], None\n                position = end\n                continue\n        text, equals, parameters = tag_text.partition(\"=\")\n        yield start, None, _Tag(text, parameters if equals else None)\n        position = end\n    if position < len(markup):\n        yield position, markup[position:], None\n\n\ndef render(\n    markup: str,\n    style: Union[str, Style] = \"\",\n    emoji: bool = True,\n    emoji_variant: Optional[EmojiVariant] = None,\n) -> Text:\n    \"\"\"Render console markup in to a Text instance.\n\n    Args:\n        markup (str): A string containing console markup.\n        style: (Union[str, Style]): The style to use.\n        emoji (bool, optional): Also render emoji code. Defaults to True.\n        emoji_variant (str, optional): Optional emoji variant, either \"text\" or \"emoji\". Defaults to None.\n\n\n    Raises:\n        MarkupError: If there is a syntax error in the markup.\n\n    Returns:\n        Text: A test instance.\n    \"\"\"\n    emoji_replace = _emoji_replace\n    if \"[\" not in markup:\n        return Text(\n            emoji_replace(markup, default_variant=emoji_variant) if emoji else markup,\n            style=style,\n        )\n    text = Text(style=style)\n    append = text.append\n    normalize = Style.normalize\n\n    style_stack: List[Tuple[int, Tag]] = []\n    pop = style_stack.pop\n\n    spans: List[Span] = []\n    append_span = spans.append\n\n    _Span = Span\n    _Tag = Tag\n\n    def pop_style(style_name: str) -> Tuple[int, Tag]:\n        \"\"\"Pop tag matching given style name.\"\"\"\n        for index, (_, tag) in enumerate(reversed(style_stack), 1):\n            if tag.name == style_name:\n                return pop(-index)\n        raise KeyError(style_name)\n\n    for position, plain_text, tag in _parse(markup):\n        if plain_text is not None:\n            # Handle open brace escapes, where the brace is not part of a tag.\n            plain_text = plain_text.replace(\"\\\\[\", \"[\")\n            append(emoji_replace(plain_text) if emoji else plain_text)\n        elif tag is not None:\n            if tag.name.startswith(\"/\"):  # Closing tag\n                style_name = tag.name[1:].strip()\n\n                if style_name:  # explicit close\n                    style_name = normalize(style_name)\n                    try:\n                        start, open_tag = pop_style(style_name)\n                    except KeyError:\n                        raise MarkupError(\n                            f\"closing tag '{tag.markup}' at position {position} doesn't match any open tag\"\n                        ) from None\n                else:  # implicit close\n                    try:\n                        start, open_tag = pop()\n                    except IndexError:\n                        raise MarkupError(\n                            f\"closing tag '[/]' at position {position} has nothing to close\"\n                        ) from None\n\n                if open_tag.name.startswith(\"@\"):\n                    if open_tag.parameters:\n                        handler_name = \"\"\n                        parameters = open_tag.parameters.strip()\n                        handler_match = RE_HANDLER.match(parameters)\n                        if handler_match is not None:\n                            handler_name, match_parameters = handler_match.groups()\n                            parameters = (\n                                \"()\" if match_parameters is None else match_parameters\n                            )\n\n                        try:\n                            meta_params = literal_eval(parameters)\n                        except SyntaxError as error:\n                            raise MarkupError(\n                                f\"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}\"\n                            )\n                        except Exception as error:\n                            raise MarkupError(\n                                f\"error parsing {open_tag.parameters!r}; {error}\"\n                            ) from None\n\n                        if handler_name:\n                            meta_params = (\n                                handler_name,\n                                meta_params\n                                if isinstance(meta_params, tuple)\n                                else (meta_params,),\n                            )\n\n                    else:\n                        meta_params = ()\n\n                    append_span(\n                        _Span(\n                            start, len(text), Style(meta={open_tag.name: meta_params})\n                        )\n                    )\n                else:\n                    append_span(_Span(start, len(text), str(open_tag)))\n\n            else:  # Opening tag\n                normalized_tag = _Tag(normalize(tag.name), tag.parameters)\n                style_stack.append((len(text), normalized_tag))\n\n    text_length = len(text)\n    while style_stack:\n        start, tag = style_stack.pop()\n        style = str(tag)\n        if style:\n            append_span(_Span(start, text_length, style))\n\n    text.spans = sorted(spans[::-1], key=attrgetter(\"start\"))\n    return text\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    MARKUP = [\n        \"[red]Hello World[/red]\",\n        \"[magenta]Hello [b]World[/b]\",\n        \"[bold]Bold[italic] bold and italic [/bold]italic[/italic]\",\n        \"Click [link=https://www.willmcgugan.com]here[/link] to visit my Blog\",\n        \":warning-emoji: [bold red blink] DANGER![/]\",\n    ]\n\n    from rich import print\n    from rich.table import Table\n\n    grid = Table(\"Markup\", \"Result\", padding=(0, 1))\n\n    for markup in MARKUP:\n        grid.add_row(Text(markup), markup)\n\n    print(grid)\n", "rich/protocol.py": "from typing import Any, cast, Set, TYPE_CHECKING\nfrom inspect import isclass\n\nif TYPE_CHECKING:\n    from rich.console import RenderableType\n\n_GIBBERISH = \"\"\"aihwerij235234ljsdnp34ksodfipwoe234234jlskjdf\"\"\"\n\n\ndef is_renderable(check_object: Any) -> bool:\n    \"\"\"Check if an object may be rendered by Rich.\"\"\"\n    return (\n        isinstance(check_object, str)\n        or hasattr(check_object, \"__rich__\")\n        or hasattr(check_object, \"__rich_console__\")\n    )\n\n\ndef rich_cast(renderable: object) -> \"RenderableType\":\n    \"\"\"Cast an object to a renderable by calling __rich__ if present.\n\n    Args:\n        renderable (object): A potentially renderable object\n\n    Returns:\n        object: The result of recursively calling __rich__.\n    \"\"\"\n    from rich.console import RenderableType\n\n    rich_visited_set: Set[type] = set()  # Prevent potential infinite loop\n    while hasattr(renderable, \"__rich__\") and not isclass(renderable):\n        # Detect object which claim to have all the attributes\n        if hasattr(renderable, _GIBBERISH):\n            return repr(renderable)\n        cast_method = getattr(renderable, \"__rich__\")\n        renderable = cast_method()\n        renderable_type = type(renderable)\n        if renderable_type in rich_visited_set:\n            break\n        rich_visited_set.add(renderable_type)\n\n    return cast(RenderableType, renderable)\n", "rich/diagnose.py": "import os\nimport platform\n\nfrom rich import inspect\nfrom rich.console import Console, get_windows_console_features\nfrom rich.panel import Panel\nfrom rich.pretty import Pretty\n\n\ndef report() -> None:  # pragma: no cover\n    \"\"\"Print a report to the terminal with debugging information\"\"\"\n    console = Console()\n    inspect(console)\n    features = get_windows_console_features()\n    inspect(features)\n\n    env_names = (\n        \"TERM\",\n        \"COLORTERM\",\n        \"CLICOLOR\",\n        \"NO_COLOR\",\n        \"TERM_PROGRAM\",\n        \"COLUMNS\",\n        \"LINES\",\n        \"JUPYTER_COLUMNS\",\n        \"JUPYTER_LINES\",\n        \"JPY_PARENT_PID\",\n        \"VSCODE_VERBOSE_LOGGING\",\n    )\n    env = {name: os.getenv(name) for name in env_names}\n    console.print(Panel.fit((Pretty(env)), title=\"[b]Environment Variables\"))\n\n    console.print(f'platform=\"{platform.system()}\"')\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    report()\n", "rich/logging.py": "import logging\nfrom datetime import datetime\nfrom logging import Handler, LogRecord\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import ClassVar, Iterable, List, Optional, Type, Union\n\nfrom rich._null_file import NullFile\n\nfrom . import get_console\nfrom ._log_render import FormatTimeCallable, LogRender\nfrom .console import Console, ConsoleRenderable\nfrom .highlighter import Highlighter, ReprHighlighter\nfrom .text import Text\nfrom .traceback import Traceback\n\n\nclass RichHandler(Handler):\n    \"\"\"A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.\n    The level is color coded, and the message is syntax highlighted.\n\n    Note:\n        Be careful when enabling console markup in log messages if you have configured logging for libraries not\n        under your control. If a dependency writes messages containing square brackets, it may not produce the intended output.\n\n    Args:\n        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.\n        console (:class:`~rich.console.Console`, optional): Optional console instance to write logs.\n            Default will use a global console instance writing to stdout.\n        show_time (bool, optional): Show a column for the time. Defaults to True.\n        omit_repeated_times (bool, optional): Omit repetition of the same time. Defaults to True.\n        show_level (bool, optional): Show a column for the level. Defaults to True.\n        show_path (bool, optional): Show the path to the original log call. Defaults to True.\n        enable_link_path (bool, optional): Enable terminal link of path column to file. Defaults to True.\n        highlighter (Highlighter, optional): Highlighter to style log messages, or None to use ReprHighlighter. Defaults to None.\n        markup (bool, optional): Enable console markup in log messages. Defaults to False.\n        rich_tracebacks (bool, optional): Enable rich tracebacks with syntax highlighting and formatting. Defaults to False.\n        tracebacks_width (Optional[int], optional): Number of characters used to render tracebacks, or None for full width. Defaults to None.\n        tracebacks_extra_lines (int, optional): Additional lines of code to render tracebacks, or None for full width. Defaults to None.\n        tracebacks_theme (str, optional): Override pygments theme used in traceback.\n        tracebacks_word_wrap (bool, optional): Enable word wrapping of long tracebacks lines. Defaults to True.\n        tracebacks_show_locals (bool, optional): Enable display of locals in tracebacks. Defaults to False.\n        tracebacks_suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n        locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to 10.\n        locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n        log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to \"[%x %X] \".\n        keywords (List[str], optional): List of words to highlight instead of ``RichHandler.KEYWORDS``.\n    \"\"\"\n\n    KEYWORDS: ClassVar[Optional[List[str]]] = [\n        \"GET\",\n        \"POST\",\n        \"HEAD\",\n        \"PUT\",\n        \"DELETE\",\n        \"OPTIONS\",\n        \"TRACE\",\n        \"PATCH\",\n    ]\n    HIGHLIGHTER_CLASS: ClassVar[Type[Highlighter]] = ReprHighlighter\n\n    def __init__(\n        self,\n        level: Union[int, str] = logging.NOTSET,\n        console: Optional[Console] = None,\n        *,\n        show_time: bool = True,\n        omit_repeated_times: bool = True,\n        show_level: bool = True,\n        show_path: bool = True,\n        enable_link_path: bool = True,\n        highlighter: Optional[Highlighter] = None,\n        markup: bool = False,\n        rich_tracebacks: bool = False,\n        tracebacks_width: Optional[int] = None,\n        tracebacks_extra_lines: int = 3,\n        tracebacks_theme: Optional[str] = None,\n        tracebacks_word_wrap: bool = True,\n        tracebacks_show_locals: bool = False,\n        tracebacks_suppress: Iterable[Union[str, ModuleType]] = (),\n        locals_max_length: int = 10,\n        locals_max_string: int = 80,\n        log_time_format: Union[str, FormatTimeCallable] = \"[%x %X]\",\n        keywords: Optional[List[str]] = None,\n    ) -> None:\n        super().__init__(level=level)\n        self.console = console or get_console()\n        self.highlighter = highlighter or self.HIGHLIGHTER_CLASS()\n        self._log_render = LogRender(\n            show_time=show_time,\n            show_level=show_level,\n            show_path=show_path,\n            time_format=log_time_format,\n            omit_repeated_times=omit_repeated_times,\n            level_width=None,\n        )\n        self.enable_link_path = enable_link_path\n        self.markup = markup\n        self.rich_tracebacks = rich_tracebacks\n        self.tracebacks_width = tracebacks_width\n        self.tracebacks_extra_lines = tracebacks_extra_lines\n        self.tracebacks_theme = tracebacks_theme\n        self.tracebacks_word_wrap = tracebacks_word_wrap\n        self.tracebacks_show_locals = tracebacks_show_locals\n        self.tracebacks_suppress = tracebacks_suppress\n        self.locals_max_length = locals_max_length\n        self.locals_max_string = locals_max_string\n        self.keywords = keywords\n\n    def get_level_text(self, record: LogRecord) -> Text:\n        \"\"\"Get the level name from the record.\n\n        Args:\n            record (LogRecord): LogRecord instance.\n\n        Returns:\n            Text: A tuple of the style and level name.\n        \"\"\"\n        level_name = record.levelname\n        level_text = Text.styled(\n            level_name.ljust(8), f\"logging.level.{level_name.lower()}\"\n        )\n        return level_text\n\n    def emit(self, record: LogRecord) -> None:\n        \"\"\"Invoked by logging.\"\"\"\n        message = self.format(record)\n        traceback = None\n        if (\n            self.rich_tracebacks\n            and record.exc_info\n            and record.exc_info != (None, None, None)\n        ):\n            exc_type, exc_value, exc_traceback = record.exc_info\n            assert exc_type is not None\n            assert exc_value is not None\n            traceback = Traceback.from_exception(\n                exc_type,\n                exc_value,\n                exc_traceback,\n                width=self.tracebacks_width,\n                extra_lines=self.tracebacks_extra_lines,\n                theme=self.tracebacks_theme,\n                word_wrap=self.tracebacks_word_wrap,\n                show_locals=self.tracebacks_show_locals,\n                locals_max_length=self.locals_max_length,\n                locals_max_string=self.locals_max_string,\n                suppress=self.tracebacks_suppress,\n            )\n            message = record.getMessage()\n            if self.formatter:\n                record.message = record.getMessage()\n                formatter = self.formatter\n                if hasattr(formatter, \"usesTime\") and formatter.usesTime():\n                    record.asctime = formatter.formatTime(record, formatter.datefmt)\n                message = formatter.formatMessage(record)\n\n        message_renderable = self.render_message(record, message)\n        log_renderable = self.render(\n            record=record, traceback=traceback, message_renderable=message_renderable\n        )\n        if isinstance(self.console.file, NullFile):\n            # Handles pythonw, where stdout/stderr are null, and we return NullFile\n            # instance from Console.file. In this case, we still want to make a log record\n            # even though we won't be writing anything to a file.\n            self.handleError(record)\n        else:\n            try:\n                self.console.print(log_renderable)\n            except Exception:\n                self.handleError(record)\n\n    def render_message(self, record: LogRecord, message: str) -> \"ConsoleRenderable\":\n        \"\"\"Render message text in to Text.\n\n        Args:\n            record (LogRecord): logging Record.\n            message (str): String containing log message.\n\n        Returns:\n            ConsoleRenderable: Renderable to display log message.\n        \"\"\"\n        use_markup = getattr(record, \"markup\", self.markup)\n        message_text = Text.from_markup(message) if use_markup else Text(message)\n\n        highlighter = getattr(record, \"highlighter\", self.highlighter)\n        if highlighter:\n            message_text = highlighter(message_text)\n\n        if self.keywords is None:\n            self.keywords = self.KEYWORDS\n\n        if self.keywords:\n            message_text.highlight_words(self.keywords, \"logging.keyword\")\n\n        return message_text\n\n    def render(\n        self,\n        *,\n        record: LogRecord,\n        traceback: Optional[Traceback],\n        message_renderable: \"ConsoleRenderable\",\n    ) -> \"ConsoleRenderable\":\n        \"\"\"Render log for display.\n\n        Args:\n            record (LogRecord): logging Record.\n            traceback (Optional[Traceback]): Traceback instance or None for no Traceback.\n            message_renderable (ConsoleRenderable): Renderable (typically Text) containing log message contents.\n\n        Returns:\n            ConsoleRenderable: Renderable to display log.\n        \"\"\"\n        path = Path(record.pathname).name\n        level = self.get_level_text(record)\n        time_format = None if self.formatter is None else self.formatter.datefmt\n        log_time = datetime.fromtimestamp(record.created)\n\n        log_renderable = self._log_render(\n            self.console,\n            [message_renderable] if not traceback else [message_renderable, traceback],\n            log_time=log_time,\n            time_format=time_format,\n            level=level,\n            path=path,\n            line_no=record.lineno,\n            link_path=record.pathname if self.enable_link_path else None,\n        )\n        return log_renderable\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from time import sleep\n\n    FORMAT = \"%(message)s\"\n    # FORMAT = \"%(asctime)-15s - %(levelname)s - %(message)s\"\n    logging.basicConfig(\n        level=\"NOTSET\",\n        format=FORMAT,\n        datefmt=\"[%X]\",\n        handlers=[RichHandler(rich_tracebacks=True, tracebacks_show_locals=True)],\n    )\n    log = logging.getLogger(\"rich\")\n\n    log.info(\"Server starting...\")\n    log.info(\"Listening on http://127.0.0.1:8080\")\n    sleep(1)\n\n    log.info(\"GET /index.html 200 1298\")\n    log.info(\"GET /imgs/backgrounds/back1.jpg 200 54386\")\n    log.info(\"GET /css/styles.css 200 54386\")\n    log.warning(\"GET /favicon.ico 404 242\")\n    sleep(1)\n\n    log.debug(\n        \"JSONRPC request\\n--> %r\\n<-- %r\",\n        {\n            \"version\": \"1.1\",\n            \"method\": \"confirmFruitPurchase\",\n            \"params\": [[\"apple\", \"orange\", \"mangoes\", \"pomelo\"], 1.123],\n            \"id\": \"194521489\",\n        },\n        {\"version\": \"1.1\", \"result\": True, \"error\": None, \"id\": \"194521489\"},\n    )\n    log.debug(\n        \"Loading configuration file /adasd/asdasd/qeqwe/qwrqwrqwr/sdgsdgsdg/werwerwer/dfgerert/ertertert/ertetert/werwerwer\"\n    )\n    log.error(\"Unable to find 'pomelo' in database!\")\n    log.info(\"POST /jsonrpc/ 200 65532\")\n    log.info(\"POST /admin/ 401 42234\")\n    log.warning(\"password was rejected for admin site.\")\n\n    def divide() -> None:\n        number = 1\n        divisor = 0\n        foos = [\"foo\"] * 100\n        log.debug(\"in divide\")\n        try:\n            number / divisor\n        except:\n            log.exception(\"An error of some kind occurred!\")\n\n    divide()\n    sleep(1)\n    log.critical(\"Out of memory!\")\n    log.info(\"Server exited with code=-1\")\n    log.info(\"[bold]EXITING...[/bold]\", extra=dict(markup=True))\n", "rich/_loop.py": "from typing import Iterable, Tuple, TypeVar\n\nT = TypeVar(\"T\")\n\n\ndef loop_first(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first value.\"\"\"\n    iter_values = iter(values)\n    try:\n        value = next(iter_values)\n    except StopIteration:\n        return\n    yield True, value\n    for value in iter_values:\n        yield False, value\n\n\ndef loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    for value in iter_values:\n        yield False, previous_value\n        previous_value = value\n    yield True, previous_value\n\n\ndef loop_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n", "rich/region.py": "from typing import NamedTuple\n\n\nclass Region(NamedTuple):\n    \"\"\"Defines a rectangular region of the screen.\"\"\"\n\n    x: int\n    y: int\n    width: int\n    height: int\n", "rich/color.py": "import platform\nimport re\nfrom colorsys import rgb_to_hls\nfrom enum import IntEnum\nfrom functools import lru_cache\nfrom typing import TYPE_CHECKING, NamedTuple, Optional, Tuple\n\nfrom ._palettes import EIGHT_BIT_PALETTE, STANDARD_PALETTE, WINDOWS_PALETTE\nfrom .color_triplet import ColorTriplet\nfrom .repr import Result, rich_repr\nfrom .terminal_theme import DEFAULT_TERMINAL_THEME\n\nif TYPE_CHECKING:  # pragma: no cover\n    from .terminal_theme import TerminalTheme\n    from .text import Text\n\n\nWINDOWS = platform.system() == \"Windows\"\n\n\nclass ColorSystem(IntEnum):\n    \"\"\"One of the 3 color system supported by terminals.\"\"\"\n\n    STANDARD = 1\n    EIGHT_BIT = 2\n    TRUECOLOR = 3\n    WINDOWS = 4\n\n    def __repr__(self) -> str:\n        return f\"ColorSystem.{self.name}\"\n\n    def __str__(self) -> str:\n        return repr(self)\n\n\nclass ColorType(IntEnum):\n    \"\"\"Type of color stored in Color class.\"\"\"\n\n    DEFAULT = 0\n    STANDARD = 1\n    EIGHT_BIT = 2\n    TRUECOLOR = 3\n    WINDOWS = 4\n\n    def __repr__(self) -> str:\n        return f\"ColorType.{self.name}\"\n\n\nANSI_COLOR_NAMES = {\n    \"black\": 0,\n    \"red\": 1,\n    \"green\": 2,\n    \"yellow\": 3,\n    \"blue\": 4,\n    \"magenta\": 5,\n    \"cyan\": 6,\n    \"white\": 7,\n    \"bright_black\": 8,\n    \"bright_red\": 9,\n    \"bright_green\": 10,\n    \"bright_yellow\": 11,\n    \"bright_blue\": 12,\n    \"bright_magenta\": 13,\n    \"bright_cyan\": 14,\n    \"bright_white\": 15,\n    \"grey0\": 16,\n    \"gray0\": 16,\n    \"navy_blue\": 17,\n    \"dark_blue\": 18,\n    \"blue3\": 20,\n    \"blue1\": 21,\n    \"dark_green\": 22,\n    \"deep_sky_blue4\": 25,\n    \"dodger_blue3\": 26,\n    \"dodger_blue2\": 27,\n    \"green4\": 28,\n    \"spring_green4\": 29,\n    \"turquoise4\": 30,\n    \"deep_sky_blue3\": 32,\n    \"dodger_blue1\": 33,\n    \"green3\": 40,\n    \"spring_green3\": 41,\n    \"dark_cyan\": 36,\n    \"light_sea_green\": 37,\n    \"deep_sky_blue2\": 38,\n    \"deep_sky_blue1\": 39,\n    \"spring_green2\": 47,\n    \"cyan3\": 43,\n    \"dark_turquoise\": 44,\n    \"turquoise2\": 45,\n    \"green1\": 46,\n    \"spring_green1\": 48,\n    \"medium_spring_green\": 49,\n    \"cyan2\": 50,\n    \"cyan1\": 51,\n    \"dark_red\": 88,\n    \"deep_pink4\": 125,\n    \"purple4\": 55,\n    \"purple3\": 56,\n    \"blue_violet\": 57,\n    \"orange4\": 94,\n    \"grey37\": 59,\n    \"gray37\": 59,\n    \"medium_purple4\": 60,\n    \"slate_blue3\": 62,\n    \"royal_blue1\": 63,\n    \"chartreuse4\": 64,\n    \"dark_sea_green4\": 71,\n    \"pale_turquoise4\": 66,\n    \"steel_blue\": 67,\n    \"steel_blue3\": 68,\n    \"cornflower_blue\": 69,\n    \"chartreuse3\": 76,\n    \"cadet_blue\": 73,\n    \"sky_blue3\": 74,\n    \"steel_blue1\": 81,\n    \"pale_green3\": 114,\n    \"sea_green3\": 78,\n    \"aquamarine3\": 79,\n    \"medium_turquoise\": 80,\n    \"chartreuse2\": 112,\n    \"sea_green2\": 83,\n    \"sea_green1\": 85,\n    \"aquamarine1\": 122,\n    \"dark_slate_gray2\": 87,\n    \"dark_magenta\": 91,\n    \"dark_violet\": 128,\n    \"purple\": 129,\n    \"light_pink4\": 95,\n    \"plum4\": 96,\n    \"medium_purple3\": 98,\n    \"slate_blue1\": 99,\n    \"yellow4\": 106,\n    \"wheat4\": 101,\n    \"grey53\": 102,\n    \"gray53\": 102,\n    \"light_slate_grey\": 103,\n    \"light_slate_gray\": 103,\n    \"medium_purple\": 104,\n    \"light_slate_blue\": 105,\n    \"dark_olive_green3\": 149,\n    \"dark_sea_green\": 108,\n    \"light_sky_blue3\": 110,\n    \"sky_blue2\": 111,\n    \"dark_sea_green3\": 150,\n    \"dark_slate_gray3\": 116,\n    \"sky_blue1\": 117,\n    \"chartreuse1\": 118,\n    \"light_green\": 120,\n    \"pale_green1\": 156,\n    \"dark_slate_gray1\": 123,\n    \"red3\": 160,\n    \"medium_violet_red\": 126,\n    \"magenta3\": 164,\n    \"dark_orange3\": 166,\n    \"indian_red\": 167,\n    \"hot_pink3\": 168,\n    \"medium_orchid3\": 133,\n    \"medium_orchid\": 134,\n    \"medium_purple2\": 140,\n    \"dark_goldenrod\": 136,\n    \"light_salmon3\": 173,\n    \"rosy_brown\": 138,\n    \"grey63\": 139,\n    \"gray63\": 139,\n    \"medium_purple1\": 141,\n    \"gold3\": 178,\n    \"dark_khaki\": 143,\n    \"navajo_white3\": 144,\n    \"grey69\": 145,\n    \"gray69\": 145,\n    \"light_steel_blue3\": 146,\n    \"light_steel_blue\": 147,\n    \"yellow3\": 184,\n    \"dark_sea_green2\": 157,\n    \"light_cyan3\": 152,\n    \"light_sky_blue1\": 153,\n    \"green_yellow\": 154,\n    \"dark_olive_green2\": 155,\n    \"dark_sea_green1\": 193,\n    \"pale_turquoise1\": 159,\n    \"deep_pink3\": 162,\n    \"magenta2\": 200,\n    \"hot_pink2\": 169,\n    \"orchid\": 170,\n    \"medium_orchid1\": 207,\n    \"orange3\": 172,\n    \"light_pink3\": 174,\n    \"pink3\": 175,\n    \"plum3\": 176,\n    \"violet\": 177,\n    \"light_goldenrod3\": 179,\n    \"tan\": 180,\n    \"misty_rose3\": 181,\n    \"thistle3\": 182,\n    \"plum2\": 183,\n    \"khaki3\": 185,\n    \"light_goldenrod2\": 222,\n    \"light_yellow3\": 187,\n    \"grey84\": 188,\n    \"gray84\": 188,\n    \"light_steel_blue1\": 189,\n    \"yellow2\": 190,\n    \"dark_olive_green1\": 192,\n    \"honeydew2\": 194,\n    \"light_cyan1\": 195,\n    \"red1\": 196,\n    \"deep_pink2\": 197,\n    \"deep_pink1\": 199,\n    \"magenta1\": 201,\n    \"orange_red1\": 202,\n    \"indian_red1\": 204,\n    \"hot_pink\": 206,\n    \"dark_orange\": 208,\n    \"salmon1\": 209,\n    \"light_coral\": 210,\n    \"pale_violet_red1\": 211,\n    \"orchid2\": 212,\n    \"orchid1\": 213,\n    \"orange1\": 214,\n    \"sandy_brown\": 215,\n    \"light_salmon1\": 216,\n    \"light_pink1\": 217,\n    \"pink1\": 218,\n    \"plum1\": 219,\n    \"gold1\": 220,\n    \"navajo_white1\": 223,\n    \"misty_rose1\": 224,\n    \"thistle1\": 225,\n    \"yellow1\": 226,\n    \"light_goldenrod1\": 227,\n    \"khaki1\": 228,\n    \"wheat1\": 229,\n    \"cornsilk1\": 230,\n    \"grey100\": 231,\n    \"gray100\": 231,\n    \"grey3\": 232,\n    \"gray3\": 232,\n    \"grey7\": 233,\n    \"gray7\": 233,\n    \"grey11\": 234,\n    \"gray11\": 234,\n    \"grey15\": 235,\n    \"gray15\": 235,\n    \"grey19\": 236,\n    \"gray19\": 236,\n    \"grey23\": 237,\n    \"gray23\": 237,\n    \"grey27\": 238,\n    \"gray27\": 238,\n    \"grey30\": 239,\n    \"gray30\": 239,\n    \"grey35\": 240,\n    \"gray35\": 240,\n    \"grey39\": 241,\n    \"gray39\": 241,\n    \"grey42\": 242,\n    \"gray42\": 242,\n    \"grey46\": 243,\n    \"gray46\": 243,\n    \"grey50\": 244,\n    \"gray50\": 244,\n    \"grey54\": 245,\n    \"gray54\": 245,\n    \"grey58\": 246,\n    \"gray58\": 246,\n    \"grey62\": 247,\n    \"gray62\": 247,\n    \"grey66\": 248,\n    \"gray66\": 248,\n    \"grey70\": 249,\n    \"gray70\": 249,\n    \"grey74\": 250,\n    \"gray74\": 250,\n    \"grey78\": 251,\n    \"gray78\": 251,\n    \"grey82\": 252,\n    \"gray82\": 252,\n    \"grey85\": 253,\n    \"gray85\": 253,\n    \"grey89\": 254,\n    \"gray89\": 254,\n    \"grey93\": 255,\n    \"gray93\": 255,\n}\n\n\nclass ColorParseError(Exception):\n    \"\"\"The color could not be parsed.\"\"\"\n\n\nRE_COLOR = re.compile(\n    r\"\"\"^\n\\#([0-9a-f]{6})$|\ncolor\\(([0-9]{1,3})\\)$|\nrgb\\(([\\d\\s,]+)\\)$\n\"\"\",\n    re.VERBOSE,\n)\n\n\n@rich_repr\nclass Color(NamedTuple):\n    \"\"\"Terminal color definition.\"\"\"\n\n    name: str\n    \"\"\"The name of the color (typically the input to Color.parse).\"\"\"\n    type: ColorType\n    \"\"\"The type of the color.\"\"\"\n    number: Optional[int] = None\n    \"\"\"The color number, if a standard color, or None.\"\"\"\n    triplet: Optional[ColorTriplet] = None\n    \"\"\"A triplet of color components, if an RGB color.\"\"\"\n\n    def __rich__(self) -> \"Text\":\n        \"\"\"Displays the actual color if Rich printed.\"\"\"\n        from .style import Style\n        from .text import Text\n\n        return Text.assemble(\n            f\"<color {self.name!r} ({self.type.name.lower()})\",\n            (\"\u2b24\", Style(color=self)),\n            \" >\",\n        )\n\n    def __rich_repr__(self) -> Result:\n        yield self.name\n        yield self.type\n        yield \"number\", self.number, None\n        yield \"triplet\", self.triplet, None\n\n    @property\n    def system(self) -> ColorSystem:\n        \"\"\"Get the native color system for this color.\"\"\"\n        if self.type == ColorType.DEFAULT:\n            return ColorSystem.STANDARD\n        return ColorSystem(int(self.type))\n\n    @property\n    def is_system_defined(self) -> bool:\n        \"\"\"Check if the color is ultimately defined by the system.\"\"\"\n        return self.system not in (ColorSystem.EIGHT_BIT, ColorSystem.TRUECOLOR)\n\n    @property\n    def is_default(self) -> bool:\n        \"\"\"Check if the color is a default color.\"\"\"\n        return self.type == ColorType.DEFAULT\n\n    def get_truecolor(\n        self, theme: Optional[\"TerminalTheme\"] = None, foreground: bool = True\n    ) -> ColorTriplet:\n        \"\"\"Get an equivalent color triplet for this color.\n\n        Args:\n            theme (TerminalTheme, optional): Optional terminal theme, or None to use default. Defaults to None.\n            foreground (bool, optional): True for a foreground color, or False for background. Defaults to True.\n\n        Returns:\n            ColorTriplet: A color triplet containing RGB components.\n        \"\"\"\n\n        if theme is None:\n            theme = DEFAULT_TERMINAL_THEME\n        if self.type == ColorType.TRUECOLOR:\n            assert self.triplet is not None\n            return self.triplet\n        elif self.type == ColorType.EIGHT_BIT:\n            assert self.number is not None\n            return EIGHT_BIT_PALETTE[self.number]\n        elif self.type == ColorType.STANDARD:\n            assert self.number is not None\n            return theme.ansi_colors[self.number]\n        elif self.type == ColorType.WINDOWS:\n            assert self.number is not None\n            return WINDOWS_PALETTE[self.number]\n        else:  # self.type == ColorType.DEFAULT:\n            assert self.number is None\n            return theme.foreground_color if foreground else theme.background_color\n\n    @classmethod\n    def from_ansi(cls, number: int) -> \"Color\":\n        \"\"\"Create a Color number from it's 8-bit ansi number.\n\n        Args:\n            number (int): A number between 0-255 inclusive.\n\n        Returns:\n            Color: A new Color instance.\n        \"\"\"\n        return cls(\n            name=f\"color({number})\",\n            type=(ColorType.STANDARD if number < 16 else ColorType.EIGHT_BIT),\n            number=number,\n        )\n\n    @classmethod\n    def from_triplet(cls, triplet: \"ColorTriplet\") -> \"Color\":\n        \"\"\"Create a truecolor RGB color from a triplet of values.\n\n        Args:\n            triplet (ColorTriplet): A color triplet containing red, green and blue components.\n\n        Returns:\n            Color: A new color object.\n        \"\"\"\n        return cls(name=triplet.hex, type=ColorType.TRUECOLOR, triplet=triplet)\n\n    @classmethod\n    def from_rgb(cls, red: float, green: float, blue: float) -> \"Color\":\n        \"\"\"Create a truecolor from three color components in the range(0->255).\n\n        Args:\n            red (float): Red component in range 0-255.\n            green (float): Green component in range 0-255.\n            blue (float): Blue component in range 0-255.\n\n        Returns:\n            Color: A new color object.\n        \"\"\"\n        return cls.from_triplet(ColorTriplet(int(red), int(green), int(blue)))\n\n    @classmethod\n    def default(cls) -> \"Color\":\n        \"\"\"Get a Color instance representing the default color.\n\n        Returns:\n            Color: Default color.\n        \"\"\"\n        return cls(name=\"default\", type=ColorType.DEFAULT)\n\n    @classmethod\n    @lru_cache(maxsize=1024)\n    def parse(cls, color: str) -> \"Color\":\n        \"\"\"Parse a color definition.\"\"\"\n        original_color = color\n        color = color.lower().strip()\n\n        if color == \"default\":\n            return cls(color, type=ColorType.DEFAULT)\n\n        color_number = ANSI_COLOR_NAMES.get(color)\n        if color_number is not None:\n            return cls(\n                color,\n                type=(ColorType.STANDARD if color_number < 16 else ColorType.EIGHT_BIT),\n                number=color_number,\n            )\n\n        color_match = RE_COLOR.match(color)\n        if color_match is None:\n            raise ColorParseError(f\"{original_color!r} is not a valid color\")\n\n        color_24, color_8, color_rgb = color_match.groups()\n        if color_24:\n            triplet = ColorTriplet(\n                int(color_24[0:2], 16), int(color_24[2:4], 16), int(color_24[4:6], 16)\n            )\n            return cls(color, ColorType.TRUECOLOR, triplet=triplet)\n\n        elif color_8:\n            number = int(color_8)\n            if number > 255:\n                raise ColorParseError(f\"color number must be <= 255 in {color!r}\")\n            return cls(\n                color,\n                type=(ColorType.STANDARD if number < 16 else ColorType.EIGHT_BIT),\n                number=number,\n            )\n\n        else:  #  color_rgb:\n            components = color_rgb.split(\",\")\n            if len(components) != 3:\n                raise ColorParseError(\n                    f\"expected three components in {original_color!r}\"\n                )\n            red, green, blue = components\n            triplet = ColorTriplet(int(red), int(green), int(blue))\n            if not all(component <= 255 for component in triplet):\n                raise ColorParseError(\n                    f\"color components must be <= 255 in {original_color!r}\"\n                )\n            return cls(color, ColorType.TRUECOLOR, triplet=triplet)\n\n    @lru_cache(maxsize=1024)\n    def get_ansi_codes(self, foreground: bool = True) -> Tuple[str, ...]:\n        \"\"\"Get the ANSI escape codes for this color.\"\"\"\n        _type = self.type\n        if _type == ColorType.DEFAULT:\n            return (\"39\" if foreground else \"49\",)\n\n        elif _type == ColorType.WINDOWS:\n            number = self.number\n            assert number is not None\n            fore, back = (30, 40) if number < 8 else (82, 92)\n            return (str(fore + number if foreground else back + number),)\n\n        elif _type == ColorType.STANDARD:\n            number = self.number\n            assert number is not None\n            fore, back = (30, 40) if number < 8 else (82, 92)\n            return (str(fore + number if foreground else back + number),)\n\n        elif _type == ColorType.EIGHT_BIT:\n            assert self.number is not None\n            return (\"38\" if foreground else \"48\", \"5\", str(self.number))\n\n        else:  # self.standard == ColorStandard.TRUECOLOR:\n            assert self.triplet is not None\n            red, green, blue = self.triplet\n            return (\"38\" if foreground else \"48\", \"2\", str(red), str(green), str(blue))\n\n    @lru_cache(maxsize=1024)\n    def downgrade(self, system: ColorSystem) -> \"Color\":\n        \"\"\"Downgrade a color system to a system with fewer colors.\"\"\"\n\n        if self.type in (ColorType.DEFAULT, system):\n            return self\n        # Convert to 8-bit color from truecolor color\n        if system == ColorSystem.EIGHT_BIT and self.system == ColorSystem.TRUECOLOR:\n            assert self.triplet is not None\n            _h, l, s = rgb_to_hls(*self.triplet.normalized)\n            # If saturation is under 15% assume it is grayscale\n            if s < 0.15:\n                gray = round(l * 25.0)\n                if gray == 0:\n                    color_number = 16\n                elif gray == 25:\n                    color_number = 231\n                else:\n                    color_number = 231 + gray\n                return Color(self.name, ColorType.EIGHT_BIT, number=color_number)\n\n            red, green, blue = self.triplet\n            six_red = red / 95 if red < 95 else 1 + (red - 95) / 40\n            six_green = green / 95 if green < 95 else 1 + (green - 95) / 40\n            six_blue = blue / 95 if blue < 95 else 1 + (blue - 95) / 40\n\n            color_number = (\n                16 + 36 * round(six_red) + 6 * round(six_green) + round(six_blue)\n            )\n            return Color(self.name, ColorType.EIGHT_BIT, number=color_number)\n\n        # Convert to standard from truecolor or 8-bit\n        elif system == ColorSystem.STANDARD:\n            if self.system == ColorSystem.TRUECOLOR:\n                assert self.triplet is not None\n                triplet = self.triplet\n            else:  # self.system == ColorSystem.EIGHT_BIT\n                assert self.number is not None\n                triplet = ColorTriplet(*EIGHT_BIT_PALETTE[self.number])\n\n            color_number = STANDARD_PALETTE.match(triplet)\n            return Color(self.name, ColorType.STANDARD, number=color_number)\n\n        elif system == ColorSystem.WINDOWS:\n            if self.system == ColorSystem.TRUECOLOR:\n                assert self.triplet is not None\n                triplet = self.triplet\n            else:  # self.system == ColorSystem.EIGHT_BIT\n                assert self.number is not None\n                if self.number < 16:\n                    return Color(self.name, ColorType.WINDOWS, number=self.number)\n                triplet = ColorTriplet(*EIGHT_BIT_PALETTE[self.number])\n\n            color_number = WINDOWS_PALETTE.match(triplet)\n            return Color(self.name, ColorType.WINDOWS, number=color_number)\n\n        return self\n\n\ndef parse_rgb_hex(hex_color: str) -> ColorTriplet:\n    \"\"\"Parse six hex characters in to RGB triplet.\"\"\"\n    assert len(hex_color) == 6, \"must be 6 characters\"\n    color = ColorTriplet(\n        int(hex_color[0:2], 16), int(hex_color[2:4], 16), int(hex_color[4:6], 16)\n    )\n    return color\n\n\ndef blend_rgb(\n    color1: ColorTriplet, color2: ColorTriplet, cross_fade: float = 0.5\n) -> ColorTriplet:\n    \"\"\"Blend one RGB color in to another.\"\"\"\n    r1, g1, b1 = color1\n    r2, g2, b2 = color2\n    new_color = ColorTriplet(\n        int(r1 + (r2 - r1) * cross_fade),\n        int(g1 + (g2 - g1) * cross_fade),\n        int(b1 + (b2 - b1) * cross_fade),\n    )\n    return new_color\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from .console import Console\n    from .table import Table\n    from .text import Text\n\n    console = Console()\n\n    table = Table(show_footer=False, show_edge=True)\n    table.add_column(\"Color\", width=10, overflow=\"ellipsis\")\n    table.add_column(\"Number\", justify=\"right\", style=\"yellow\")\n    table.add_column(\"Name\", style=\"green\")\n    table.add_column(\"Hex\", style=\"blue\")\n    table.add_column(\"RGB\", style=\"magenta\")\n\n    colors = sorted((v, k) for k, v in ANSI_COLOR_NAMES.items())\n    for color_number, name in colors:\n        if \"grey\" in name:\n            continue\n        color_cell = Text(\" \" * 10, style=f\"on {name}\")\n        if color_number < 16:\n            table.add_row(color_cell, f\"{color_number}\", Text(f'\"{name}\"'))\n        else:\n            color = EIGHT_BIT_PALETTE[color_number]  # type: ignore[has-type]\n            table.add_row(\n                color_cell, str(color_number), Text(f'\"{name}\"'), color.hex, color.rgb\n            )\n\n    console.print(table)\n", "rich/cells.py": "from __future__ import annotations\n\nimport re\nfrom functools import lru_cache\nfrom typing import Callable\n\nfrom ._cell_widths import CELL_WIDTHS\n\n# Regex to match sequence of the most common character ranges\n_is_single_cell_widths = re.compile(\"^[\\u0020-\\u006f\\u00a0\\u02ff\\u0370-\\u0482]*$\").match\n\n\n@lru_cache(4096)\ndef cached_cell_len(text: str) -> int:\n    \"\"\"Get the number of cells required to display text.\n\n    This method always caches, which may use up a lot of memory. It is recommended to use\n    `cell_len` over this method.\n\n    Args:\n        text (str): Text to display.\n\n    Returns:\n        int: Get the number of cells required to display text.\n    \"\"\"\n    _get_size = get_character_cell_size\n    total_size = sum(_get_size(character) for character in text)\n    return total_size\n\n\ndef cell_len(text: str, _cell_len: Callable[[str], int] = cached_cell_len) -> int:\n    \"\"\"Get the number of cells required to display text.\n\n    Args:\n        text (str): Text to display.\n\n    Returns:\n        int: Get the number of cells required to display text.\n    \"\"\"\n    if len(text) < 512:\n        return _cell_len(text)\n    _get_size = get_character_cell_size\n    total_size = sum(_get_size(character) for character in text)\n    return total_size\n\n\n@lru_cache(maxsize=4096)\ndef get_character_cell_size(character: str) -> int:\n    \"\"\"Get the cell size of a character.\n\n    Args:\n        character (str): A single character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2) occupied by that character.\n    \"\"\"\n    return _get_codepoint_cell_size(ord(character))\n\n\n@lru_cache(maxsize=4096)\ndef _get_codepoint_cell_size(codepoint: int) -> int:\n    \"\"\"Get the cell size of a character.\n\n    Args:\n        codepoint (int): Codepoint of a character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2) occupied by that character.\n    \"\"\"\n\n    _table = CELL_WIDTHS\n    lower_bound = 0\n    upper_bound = len(_table) - 1\n    index = (lower_bound + upper_bound) // 2\n    while True:\n        start, end, width = _table[index]\n        if codepoint < start:\n            upper_bound = index - 1\n        elif codepoint > end:\n            lower_bound = index + 1\n        else:\n            return 0 if width == -1 else width\n        if upper_bound < lower_bound:\n            break\n        index = (lower_bound + upper_bound) // 2\n    return 1\n\n\ndef set_cell_size(text: str, total: int) -> str:\n    \"\"\"Set the length of a string to fit within given number of cells.\"\"\"\n\n    if _is_single_cell_widths(text):\n        size = len(text)\n        if size < total:\n            return text + \" \" * (total - size)\n        return text[:total]\n\n    if total <= 0:\n        return \"\"\n    cell_size = cell_len(text)\n    if cell_size == total:\n        return text\n    if cell_size < total:\n        return text + \" \" * (total - cell_size)\n\n    start = 0\n    end = len(text)\n\n    # Binary search until we find the right size\n    while True:\n        pos = (start + end) // 2\n        before = text[: pos + 1]\n        before_len = cell_len(before)\n        if before_len == total + 1 and cell_len(before[-1]) == 2:\n            return before[:-1] + \" \"\n        if before_len == total:\n            return before\n        if before_len > total:\n            end = pos\n        else:\n            start = pos\n\n\ndef chop_cells(\n    text: str,\n    width: int,\n) -> list[str]:\n    \"\"\"Split text into lines such that each line fits within the available (cell) width.\n\n    Args:\n        text: The text to fold such that it fits in the given width.\n        width: The width available (number of cells).\n\n    Returns:\n        A list of strings such that each string in the list has cell width\n        less than or equal to the available width.\n    \"\"\"\n    _get_character_cell_size = get_character_cell_size\n    lines: list[list[str]] = [[]]\n\n    append_new_line = lines.append\n    append_to_last_line = lines[-1].append\n\n    total_width = 0\n\n    for character in text:\n        cell_width = _get_character_cell_size(character)\n        char_doesnt_fit = total_width + cell_width > width\n\n        if char_doesnt_fit:\n            append_new_line([character])\n            append_to_last_line = lines[-1].append\n            total_width = cell_width\n        else:\n            append_to_last_line(character)\n            total_width += cell_width\n\n    return [\"\".join(line) for line in lines]\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    print(get_character_cell_size(\"\ud83d\ude3d\"))\n    for line in chop_cells(\"\"\"\u8fd9\u662f\u5bf9\u4e9a\u6d32\u8bed\u8a00\u652f\u6301\u7684\u6d4b\u8bd5\u3002\u9762\u5bf9\u6a21\u68f1\u4e24\u53ef\u7684\u60f3\u6cd5\uff0c\u62d2\u7edd\u731c\u6d4b\u7684\u8bf1\u60d1\u3002\"\"\", 8):\n        print(line)\n    for n in range(80, 1, -1):\n        print(set_cell_size(\"\"\"\u8fd9\u662f\u5bf9\u4e9a\u6d32\u8bed\u8a00\u652f\u6301\u7684\u6d4b\u8bd5\u3002\u9762\u5bf9\u6a21\u68f1\u4e24\u53ef\u7684\u60f3\u6cd5\uff0c\u62d2\u7edd\u731c\u6d4b\u7684\u8bf1\u60d1\u3002\"\"\", n) + \"|\")\n        print(\"x\" * n)\n", "rich/pretty.py": "import builtins\nimport collections\nimport dataclasses\nimport inspect\nimport os\nimport sys\nfrom array import array\nfrom collections import Counter, UserDict, UserList, defaultdict, deque\nfrom dataclasses import dataclass, fields, is_dataclass\nfrom inspect import isclass\nfrom itertools import islice\nfrom types import MappingProxyType\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    DefaultDict,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Union,\n)\n\nfrom rich.repr import RichReprResult\n\ntry:\n    import attr as _attr_module\n\n    _has_attrs = hasattr(_attr_module, \"ib\")\nexcept ImportError:  # pragma: no cover\n    _has_attrs = False\n\nfrom . import get_console\nfrom ._loop import loop_last\nfrom ._pick import pick_bool\nfrom .abc import RichRenderable\nfrom .cells import cell_len\nfrom .highlighter import ReprHighlighter\nfrom .jupyter import JupyterMixin, JupyterRenderable\nfrom .measure import Measurement\nfrom .text import Text\n\nif TYPE_CHECKING:\n    from .console import (\n        Console,\n        ConsoleOptions,\n        HighlighterType,\n        JustifyMethod,\n        OverflowMethod,\n        RenderResult,\n    )\n\n\ndef _is_attr_object(obj: Any) -> bool:\n    \"\"\"Check if an object was created with attrs module.\"\"\"\n    return _has_attrs and _attr_module.has(type(obj))\n\n\ndef _get_attr_fields(obj: Any) -> Sequence[\"_attr_module.Attribute[Any]\"]:\n    \"\"\"Get fields for an attrs object.\"\"\"\n    return _attr_module.fields(type(obj)) if _has_attrs else []\n\n\ndef _is_dataclass_repr(obj: object) -> bool:\n    \"\"\"Check if an instance of a dataclass contains the default repr.\n\n    Args:\n        obj (object): A dataclass instance.\n\n    Returns:\n        bool: True if the default repr is used, False if there is a custom repr.\n    \"\"\"\n    # Digging in to a lot of internals here\n    # Catching all exceptions in case something is missing on a non CPython implementation\n    try:\n        return obj.__repr__.__code__.co_filename == dataclasses.__file__\n    except Exception:  # pragma: no coverage\n        return False\n\n\n_dummy_namedtuple = collections.namedtuple(\"_dummy_namedtuple\", [])\n\n\ndef _has_default_namedtuple_repr(obj: object) -> bool:\n    \"\"\"Check if an instance of namedtuple contains the default repr\n\n    Args:\n        obj (object): A namedtuple\n\n    Returns:\n        bool: True if the default repr is used, False if there's a custom repr.\n    \"\"\"\n    obj_file = None\n    try:\n        obj_file = inspect.getfile(obj.__repr__)\n    except (OSError, TypeError):\n        # OSError handles case where object is defined in __main__ scope, e.g. REPL - no filename available.\n        # TypeError trapped defensively, in case of object without filename slips through.\n        pass\n    default_repr_file = inspect.getfile(_dummy_namedtuple.__repr__)\n    return obj_file == default_repr_file\n\n\ndef _ipy_display_hook(\n    value: Any,\n    console: Optional[\"Console\"] = None,\n    overflow: \"OverflowMethod\" = \"ignore\",\n    crop: bool = False,\n    indent_guides: bool = False,\n    max_length: Optional[int] = None,\n    max_string: Optional[int] = None,\n    max_depth: Optional[int] = None,\n    expand_all: bool = False,\n) -> Union[str, None]:\n    # needed here to prevent circular import:\n    from .console import ConsoleRenderable\n\n    # always skip rich generated jupyter renderables or None values\n    if _safe_isinstance(value, JupyterRenderable) or value is None:\n        return None\n\n    console = console or get_console()\n\n    with console.capture() as capture:\n        # certain renderables should start on a new line\n        if _safe_isinstance(value, ConsoleRenderable):\n            console.line()\n        console.print(\n            (\n                value\n                if _safe_isinstance(value, RichRenderable)\n                else Pretty(\n                    value,\n                    overflow=overflow,\n                    indent_guides=indent_guides,\n                    max_length=max_length,\n                    max_string=max_string,\n                    max_depth=max_depth,\n                    expand_all=expand_all,\n                    margin=12,\n                )\n            ),\n            crop=crop,\n            new_line_start=True,\n            end=\"\",\n        )\n    # strip trailing newline, not usually part of a text repr\n    # I'm not sure if this should be prevented at a lower level\n    return capture.get().rstrip(\"\\n\")\n\n\ndef _safe_isinstance(\n    obj: object, class_or_tuple: Union[type, Tuple[type, ...]]\n) -> bool:\n    \"\"\"isinstance can fail in rare cases, for example types with no __class__\"\"\"\n    try:\n        return isinstance(obj, class_or_tuple)\n    except Exception:\n        return False\n\n\ndef install(\n    console: Optional[\"Console\"] = None,\n    overflow: \"OverflowMethod\" = \"ignore\",\n    crop: bool = False,\n    indent_guides: bool = False,\n    max_length: Optional[int] = None,\n    max_string: Optional[int] = None,\n    max_depth: Optional[int] = None,\n    expand_all: bool = False,\n) -> None:\n    \"\"\"Install automatic pretty printing in the Python REPL.\n\n    Args:\n        console (Console, optional): Console instance or ``None`` to use global console. Defaults to None.\n        overflow (Optional[OverflowMethod], optional): Overflow method. Defaults to \"ignore\".\n        crop (Optional[bool], optional): Enable cropping of long lines. Defaults to False.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to False.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.\n        max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.\n        expand_all (bool, optional): Expand all containers. Defaults to False.\n        max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n    \"\"\"\n    from rich import get_console\n\n    console = console or get_console()\n    assert console is not None\n\n    def display_hook(value: Any) -> None:\n        \"\"\"Replacement sys.displayhook which prettifies objects with Rich.\"\"\"\n        if value is not None:\n            assert console is not None\n            builtins._ = None  # type: ignore[attr-defined]\n            console.print(\n                (\n                    value\n                    if _safe_isinstance(value, RichRenderable)\n                    else Pretty(\n                        value,\n                        overflow=overflow,\n                        indent_guides=indent_guides,\n                        max_length=max_length,\n                        max_string=max_string,\n                        max_depth=max_depth,\n                        expand_all=expand_all,\n                    )\n                ),\n                crop=crop,\n            )\n            builtins._ = value  # type: ignore[attr-defined]\n\n    try:\n        ip = get_ipython()  # type: ignore[name-defined]\n    except NameError:\n        sys.displayhook = display_hook\n    else:\n        from IPython.core.formatters import BaseFormatter\n\n        class RichFormatter(BaseFormatter):  # type: ignore[misc]\n            pprint: bool = True\n\n            def __call__(self, value: Any) -> Any:\n                if self.pprint:\n                    return _ipy_display_hook(\n                        value,\n                        console=get_console(),\n                        overflow=overflow,\n                        indent_guides=indent_guides,\n                        max_length=max_length,\n                        max_string=max_string,\n                        max_depth=max_depth,\n                        expand_all=expand_all,\n                    )\n                else:\n                    return repr(value)\n\n        # replace plain text formatter with rich formatter\n        rich_formatter = RichFormatter()\n        ip.display_formatter.formatters[\"text/plain\"] = rich_formatter\n\n\nclass Pretty(JupyterMixin):\n    \"\"\"A rich renderable that pretty prints an object.\n\n    Args:\n        _object (Any): An object to pretty print.\n        highlighter (HighlighterType, optional): Highlighter object to apply to result, or None for ReprHighlighter. Defaults to None.\n        indent_size (int, optional): Number of spaces in indent. Defaults to 4.\n        justify (JustifyMethod, optional): Justify method, or None for default. Defaults to None.\n        overflow (OverflowMethod, optional): Overflow method, or None for default. Defaults to None.\n        no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to False.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to False.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.\n        max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.\n        expand_all (bool, optional): Expand all containers. Defaults to False.\n        margin (int, optional): Subtrace a margin from width to force containers to expand earlier. Defaults to 0.\n        insert_line (bool, optional): Insert a new line if the output has multiple new lines. Defaults to False.\n    \"\"\"\n\n    def __init__(\n        self,\n        _object: Any,\n        highlighter: Optional[\"HighlighterType\"] = None,\n        *,\n        indent_size: int = 4,\n        justify: Optional[\"JustifyMethod\"] = None,\n        overflow: Optional[\"OverflowMethod\"] = None,\n        no_wrap: Optional[bool] = False,\n        indent_guides: bool = False,\n        max_length: Optional[int] = None,\n        max_string: Optional[int] = None,\n        max_depth: Optional[int] = None,\n        expand_all: bool = False,\n        margin: int = 0,\n        insert_line: bool = False,\n    ) -> None:\n        self._object = _object\n        self.highlighter = highlighter or ReprHighlighter()\n        self.indent_size = indent_size\n        self.justify: Optional[\"JustifyMethod\"] = justify\n        self.overflow: Optional[\"OverflowMethod\"] = overflow\n        self.no_wrap = no_wrap\n        self.indent_guides = indent_guides\n        self.max_length = max_length\n        self.max_string = max_string\n        self.max_depth = max_depth\n        self.expand_all = expand_all\n        self.margin = margin\n        self.insert_line = insert_line\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        pretty_str = pretty_repr(\n            self._object,\n            max_width=options.max_width - self.margin,\n            indent_size=self.indent_size,\n            max_length=self.max_length,\n            max_string=self.max_string,\n            max_depth=self.max_depth,\n            expand_all=self.expand_all,\n        )\n        pretty_text = Text.from_ansi(\n            pretty_str,\n            justify=self.justify or options.justify,\n            overflow=self.overflow or options.overflow,\n            no_wrap=pick_bool(self.no_wrap, options.no_wrap),\n            style=\"pretty\",\n        )\n        pretty_text = (\n            self.highlighter(pretty_text)\n            if pretty_text\n            else Text(\n                f\"{type(self._object)}.__repr__ returned empty string\",\n                style=\"dim italic\",\n            )\n        )\n        if self.indent_guides and not options.ascii_only:\n            pretty_text = pretty_text.with_indent_guides(\n                self.indent_size, style=\"repr.indent\"\n            )\n        if self.insert_line and \"\\n\" in pretty_text:\n            yield \"\"\n        yield pretty_text\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        pretty_str = pretty_repr(\n            self._object,\n            max_width=options.max_width,\n            indent_size=self.indent_size,\n            max_length=self.max_length,\n            max_string=self.max_string,\n            max_depth=self.max_depth,\n            expand_all=self.expand_all,\n        )\n        text_width = (\n            max(cell_len(line) for line in pretty_str.splitlines()) if pretty_str else 0\n        )\n        return Measurement(text_width, text_width)\n\n\ndef _get_braces_for_defaultdict(_object: DefaultDict[Any, Any]) -> Tuple[str, str, str]:\n    return (\n        f\"defaultdict({_object.default_factory!r}, {{\",\n        \"})\",\n        f\"defaultdict({_object.default_factory!r}, {{}})\",\n    )\n\n\ndef _get_braces_for_array(_object: \"array[Any]\") -> Tuple[str, str, str]:\n    return (f\"array({_object.typecode!r}, [\", \"])\", f\"array({_object.typecode!r})\")\n\n\n_BRACES: Dict[type, Callable[[Any], Tuple[str, str, str]]] = {\n    os._Environ: lambda _object: (\"environ({\", \"})\", \"environ({})\"),\n    array: _get_braces_for_array,\n    defaultdict: _get_braces_for_defaultdict,\n    Counter: lambda _object: (\"Counter({\", \"})\", \"Counter()\"),\n    deque: lambda _object: (\"deque([\", \"])\", \"deque()\"),\n    dict: lambda _object: (\"{\", \"}\", \"{}\"),\n    UserDict: lambda _object: (\"{\", \"}\", \"{}\"),\n    frozenset: lambda _object: (\"frozenset({\", \"})\", \"frozenset()\"),\n    list: lambda _object: (\"[\", \"]\", \"[]\"),\n    UserList: lambda _object: (\"[\", \"]\", \"[]\"),\n    set: lambda _object: (\"{\", \"}\", \"set()\"),\n    tuple: lambda _object: (\"(\", \")\", \"()\"),\n    MappingProxyType: lambda _object: (\"mappingproxy({\", \"})\", \"mappingproxy({})\"),\n}\n_CONTAINERS = tuple(_BRACES.keys())\n_MAPPING_CONTAINERS = (dict, os._Environ, MappingProxyType, UserDict)\n\n\ndef is_expandable(obj: Any) -> bool:\n    \"\"\"Check if an object may be expanded by pretty print.\"\"\"\n    return (\n        _safe_isinstance(obj, _CONTAINERS)\n        or (is_dataclass(obj))\n        or (hasattr(obj, \"__rich_repr__\"))\n        or _is_attr_object(obj)\n    ) and not isclass(obj)\n\n\n@dataclass\nclass Node:\n    \"\"\"A node in a repr tree. May be atomic or a container.\"\"\"\n\n    key_repr: str = \"\"\n    value_repr: str = \"\"\n    open_brace: str = \"\"\n    close_brace: str = \"\"\n    empty: str = \"\"\n    last: bool = False\n    is_tuple: bool = False\n    is_namedtuple: bool = False\n    children: Optional[List[\"Node\"]] = None\n    key_separator: str = \": \"\n    separator: str = \", \"\n\n    def iter_tokens(self) -> Iterable[str]:\n        \"\"\"Generate tokens for this node.\"\"\"\n        if self.key_repr:\n            yield self.key_repr\n            yield self.key_separator\n        if self.value_repr:\n            yield self.value_repr\n        elif self.children is not None:\n            if self.children:\n                yield self.open_brace\n                if self.is_tuple and not self.is_namedtuple and len(self.children) == 1:\n                    yield from self.children[0].iter_tokens()\n                    yield \",\"\n                else:\n                    for child in self.children:\n                        yield from child.iter_tokens()\n                        if not child.last:\n                            yield self.separator\n                yield self.close_brace\n            else:\n                yield self.empty\n\n    def check_length(self, start_length: int, max_length: int) -> bool:\n        \"\"\"Check the length fits within a limit.\n\n        Args:\n            start_length (int): Starting length of the line (indent, prefix, suffix).\n            max_length (int): Maximum length.\n\n        Returns:\n            bool: True if the node can be rendered within max length, otherwise False.\n        \"\"\"\n        total_length = start_length\n        for token in self.iter_tokens():\n            total_length += cell_len(token)\n            if total_length > max_length:\n                return False\n        return True\n\n    def __str__(self) -> str:\n        repr_text = \"\".join(self.iter_tokens())\n        return repr_text\n\n    def render(\n        self, max_width: int = 80, indent_size: int = 4, expand_all: bool = False\n    ) -> str:\n        \"\"\"Render the node to a pretty repr.\n\n        Args:\n            max_width (int, optional): Maximum width of the repr. Defaults to 80.\n            indent_size (int, optional): Size of indents. Defaults to 4.\n            expand_all (bool, optional): Expand all levels. Defaults to False.\n\n        Returns:\n            str: A repr string of the original object.\n        \"\"\"\n        lines = [_Line(node=self, is_root=True)]\n        line_no = 0\n        while line_no < len(lines):\n            line = lines[line_no]\n            if line.expandable and not line.expanded:\n                if expand_all or not line.check_length(max_width):\n                    lines[line_no : line_no + 1] = line.expand(indent_size)\n            line_no += 1\n\n        repr_str = \"\\n\".join(str(line) for line in lines)\n        return repr_str\n\n\n@dataclass\nclass _Line:\n    \"\"\"A line in repr output.\"\"\"\n\n    parent: Optional[\"_Line\"] = None\n    is_root: bool = False\n    node: Optional[Node] = None\n    text: str = \"\"\n    suffix: str = \"\"\n    whitespace: str = \"\"\n    expanded: bool = False\n    last: bool = False\n\n    @property\n    def expandable(self) -> bool:\n        \"\"\"Check if the line may be expanded.\"\"\"\n        return bool(self.node is not None and self.node.children)\n\n    def check_length(self, max_length: int) -> bool:\n        \"\"\"Check this line fits within a given number of cells.\"\"\"\n        start_length = (\n            len(self.whitespace) + cell_len(self.text) + cell_len(self.suffix)\n        )\n        assert self.node is not None\n        return self.node.check_length(start_length, max_length)\n\n    def expand(self, indent_size: int) -> Iterable[\"_Line\"]:\n        \"\"\"Expand this line by adding children on their own line.\"\"\"\n        node = self.node\n        assert node is not None\n        whitespace = self.whitespace\n        assert node.children\n        if node.key_repr:\n            new_line = yield _Line(\n                text=f\"{node.key_repr}{node.key_separator}{node.open_brace}\",\n                whitespace=whitespace,\n            )\n        else:\n            new_line = yield _Line(text=node.open_brace, whitespace=whitespace)\n        child_whitespace = self.whitespace + \" \" * indent_size\n        tuple_of_one = node.is_tuple and len(node.children) == 1\n        for last, child in loop_last(node.children):\n            separator = \",\" if tuple_of_one else node.separator\n            line = _Line(\n                parent=new_line,\n                node=child,\n                whitespace=child_whitespace,\n                suffix=separator,\n                last=last and not tuple_of_one,\n            )\n            yield line\n\n        yield _Line(\n            text=node.close_brace,\n            whitespace=whitespace,\n            suffix=self.suffix,\n            last=self.last,\n        )\n\n    def __str__(self) -> str:\n        if self.last:\n            return f\"{self.whitespace}{self.text}{self.node or ''}\"\n        else:\n            return (\n                f\"{self.whitespace}{self.text}{self.node or ''}{self.suffix.rstrip()}\"\n            )\n\n\ndef _is_namedtuple(obj: Any) -> bool:\n    \"\"\"Checks if an object is most likely a namedtuple. It is possible\n    to craft an object that passes this check and isn't a namedtuple, but\n    there is only a minuscule chance of this happening unintentionally.\n\n    Args:\n        obj (Any): The object to test\n\n    Returns:\n        bool: True if the object is a namedtuple. False otherwise.\n    \"\"\"\n    try:\n        fields = getattr(obj, \"_fields\", None)\n    except Exception:\n        # Being very defensive - if we cannot get the attr then its not a namedtuple\n        return False\n    return isinstance(obj, tuple) and isinstance(fields, tuple)\n\n\ndef traverse(\n    _object: Any,\n    max_length: Optional[int] = None,\n    max_string: Optional[int] = None,\n    max_depth: Optional[int] = None,\n) -> Node:\n    \"\"\"Traverse object and generate a tree.\n\n    Args:\n        _object (Any): Object to be traversed.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.\n            Defaults to None.\n        max_depth (int, optional): Maximum depth of data structures, or None for no maximum.\n            Defaults to None.\n\n    Returns:\n        Node: The root of a tree structure which can be used to render a pretty repr.\n    \"\"\"\n\n    def to_repr(obj: Any) -> str:\n        \"\"\"Get repr string for an object, but catch errors.\"\"\"\n        if (\n            max_string is not None\n            and _safe_isinstance(obj, (bytes, str))\n            and len(obj) > max_string\n        ):\n            truncated = len(obj) - max_string\n            obj_repr = f\"{obj[:max_string]!r}+{truncated}\"\n        else:\n            try:\n                obj_repr = repr(obj)\n            except Exception as error:\n                obj_repr = f\"<repr-error {str(error)!r}>\"\n        return obj_repr\n\n    visited_ids: Set[int] = set()\n    push_visited = visited_ids.add\n    pop_visited = visited_ids.remove\n\n    def _traverse(obj: Any, root: bool = False, depth: int = 0) -> Node:\n        \"\"\"Walk the object depth first.\"\"\"\n\n        obj_id = id(obj)\n        if obj_id in visited_ids:\n            # Recursion detected\n            return Node(value_repr=\"...\")\n\n        obj_type = type(obj)\n        children: List[Node]\n        reached_max_depth = max_depth is not None and depth >= max_depth\n\n        def iter_rich_args(rich_args: Any) -> Iterable[Union[Any, Tuple[str, Any]]]:\n            for arg in rich_args:\n                if _safe_isinstance(arg, tuple):\n                    if len(arg) == 3:\n                        key, child, default = arg\n                        if default == child:\n                            continue\n                        yield key, child\n                    elif len(arg) == 2:\n                        key, child = arg\n                        yield key, child\n                    elif len(arg) == 1:\n                        yield arg[0]\n                else:\n                    yield arg\n\n        try:\n            fake_attributes = hasattr(\n                obj, \"awehoi234_wdfjwljet234_234wdfoijsdfmmnxpi492\"\n            )\n        except Exception:\n            fake_attributes = False\n\n        rich_repr_result: Optional[RichReprResult] = None\n        if not fake_attributes:\n            try:\n                if hasattr(obj, \"__rich_repr__\") and not isclass(obj):\n                    rich_repr_result = obj.__rich_repr__()\n            except Exception:\n                pass\n\n        if rich_repr_result is not None:\n            push_visited(obj_id)\n            angular = getattr(obj.__rich_repr__, \"angular\", False)\n            args = list(iter_rich_args(rich_repr_result))\n            class_name = obj.__class__.__name__\n\n            if args:\n                children = []\n                append = children.append\n\n                if reached_max_depth:\n                    if angular:\n                        node = Node(value_repr=f\"<{class_name}...>\")\n                    else:\n                        node = Node(value_repr=f\"{class_name}(...)\")\n                else:\n                    if angular:\n                        node = Node(\n                            open_brace=f\"<{class_name} \",\n                            close_brace=\">\",\n                            children=children,\n                            last=root,\n                            separator=\" \",\n                        )\n                    else:\n                        node = Node(\n                            open_brace=f\"{class_name}(\",\n                            close_brace=\")\",\n                            children=children,\n                            last=root,\n                        )\n                    for last, arg in loop_last(args):\n                        if _safe_isinstance(arg, tuple):\n                            key, child = arg\n                            child_node = _traverse(child, depth=depth + 1)\n                            child_node.last = last\n                            child_node.key_repr = key\n                            child_node.key_separator = \"=\"\n                            append(child_node)\n                        else:\n                            child_node = _traverse(arg, depth=depth + 1)\n                            child_node.last = last\n                            append(child_node)\n            else:\n                node = Node(\n                    value_repr=f\"<{class_name}>\" if angular else f\"{class_name}()\",\n                    children=[],\n                    last=root,\n                )\n            pop_visited(obj_id)\n        elif _is_attr_object(obj) and not fake_attributes:\n            push_visited(obj_id)\n            children = []\n            append = children.append\n\n            attr_fields = _get_attr_fields(obj)\n            if attr_fields:\n                if reached_max_depth:\n                    node = Node(value_repr=f\"{obj.__class__.__name__}(...)\")\n                else:\n                    node = Node(\n                        open_brace=f\"{obj.__class__.__name__}(\",\n                        close_brace=\")\",\n                        children=children,\n                        last=root,\n                    )\n\n                    def iter_attrs() -> (\n                        Iterable[Tuple[str, Any, Optional[Callable[[Any], str]]]]\n                    ):\n                        \"\"\"Iterate over attr fields and values.\"\"\"\n                        for attr in attr_fields:\n                            if attr.repr:\n                                try:\n                                    value = getattr(obj, attr.name)\n                                except Exception as error:\n                                    # Can happen, albeit rarely\n                                    yield (attr.name, error, None)\n                                else:\n                                    yield (\n                                        attr.name,\n                                        value,\n                                        attr.repr if callable(attr.repr) else None,\n                                    )\n\n                    for last, (name, value, repr_callable) in loop_last(iter_attrs()):\n                        if repr_callable:\n                            child_node = Node(value_repr=str(repr_callable(value)))\n                        else:\n                            child_node = _traverse(value, depth=depth + 1)\n                        child_node.last = last\n                        child_node.key_repr = name\n                        child_node.key_separator = \"=\"\n                        append(child_node)\n            else:\n                node = Node(\n                    value_repr=f\"{obj.__class__.__name__}()\", children=[], last=root\n                )\n            pop_visited(obj_id)\n        elif (\n            is_dataclass(obj)\n            and not _safe_isinstance(obj, type)\n            and not fake_attributes\n            and _is_dataclass_repr(obj)\n        ):\n            push_visited(obj_id)\n            children = []\n            append = children.append\n            if reached_max_depth:\n                node = Node(value_repr=f\"{obj.__class__.__name__}(...)\")\n            else:\n                node = Node(\n                    open_brace=f\"{obj.__class__.__name__}(\",\n                    close_brace=\")\",\n                    children=children,\n                    last=root,\n                    empty=f\"{obj.__class__.__name__}()\",\n                )\n\n                for last, field in loop_last(\n                    field for field in fields(obj) if field.repr\n                ):\n                    child_node = _traverse(getattr(obj, field.name), depth=depth + 1)\n                    child_node.key_repr = field.name\n                    child_node.last = last\n                    child_node.key_separator = \"=\"\n                    append(child_node)\n\n            pop_visited(obj_id)\n        elif _is_namedtuple(obj) and _has_default_namedtuple_repr(obj):\n            push_visited(obj_id)\n            class_name = obj.__class__.__name__\n            if reached_max_depth:\n                # If we've reached the max depth, we still show the class name, but not its contents\n                node = Node(\n                    value_repr=f\"{class_name}(...)\",\n                )\n            else:\n                children = []\n                append = children.append\n                node = Node(\n                    open_brace=f\"{class_name}(\",\n                    close_brace=\")\",\n                    children=children,\n                    empty=f\"{class_name}()\",\n                )\n                for last, (key, value) in loop_last(obj._asdict().items()):\n                    child_node = _traverse(value, depth=depth + 1)\n                    child_node.key_repr = key\n                    child_node.last = last\n                    child_node.key_separator = \"=\"\n                    append(child_node)\n            pop_visited(obj_id)\n        elif _safe_isinstance(obj, _CONTAINERS):\n            for container_type in _CONTAINERS:\n                if _safe_isinstance(obj, container_type):\n                    obj_type = container_type\n                    break\n\n            push_visited(obj_id)\n\n            open_brace, close_brace, empty = _BRACES[obj_type](obj)\n\n            if reached_max_depth:\n                node = Node(value_repr=f\"{open_brace}...{close_brace}\")\n            elif obj_type.__repr__ != type(obj).__repr__:\n                node = Node(value_repr=to_repr(obj), last=root)\n            elif obj:\n                children = []\n                node = Node(\n                    open_brace=open_brace,\n                    close_brace=close_brace,\n                    children=children,\n                    last=root,\n                )\n                append = children.append\n                num_items = len(obj)\n                last_item_index = num_items - 1\n\n                if _safe_isinstance(obj, _MAPPING_CONTAINERS):\n                    iter_items = iter(obj.items())\n                    if max_length is not None:\n                        iter_items = islice(iter_items, max_length)\n                    for index, (key, child) in enumerate(iter_items):\n                        child_node = _traverse(child, depth=depth + 1)\n                        child_node.key_repr = to_repr(key)\n                        child_node.last = index == last_item_index\n                        append(child_node)\n                else:\n                    iter_values = iter(obj)\n                    if max_length is not None:\n                        iter_values = islice(iter_values, max_length)\n                    for index, child in enumerate(iter_values):\n                        child_node = _traverse(child, depth=depth + 1)\n                        child_node.last = index == last_item_index\n                        append(child_node)\n                if max_length is not None and num_items > max_length:\n                    append(Node(value_repr=f\"... +{num_items - max_length}\", last=True))\n            else:\n                node = Node(empty=empty, children=[], last=root)\n\n            pop_visited(obj_id)\n        else:\n            node = Node(value_repr=to_repr(obj), last=root)\n        node.is_tuple = type(obj) == tuple\n        node.is_namedtuple = _is_namedtuple(obj)\n        return node\n\n    node = _traverse(_object, root=True)\n    return node\n\n\ndef pretty_repr(\n    _object: Any,\n    *,\n    max_width: int = 80,\n    indent_size: int = 4,\n    max_length: Optional[int] = None,\n    max_string: Optional[int] = None,\n    max_depth: Optional[int] = None,\n    expand_all: bool = False,\n) -> str:\n    \"\"\"Prettify repr string by expanding on to new lines to fit within a given width.\n\n    Args:\n        _object (Any): Object to repr.\n        max_width (int, optional): Desired maximum width of repr string. Defaults to 80.\n        indent_size (int, optional): Number of spaces to indent. Defaults to 4.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.\n            Defaults to None.\n        max_depth (int, optional): Maximum depth of nested data structure, or None for no depth.\n            Defaults to None.\n        expand_all (bool, optional): Expand all containers regardless of available width. Defaults to False.\n\n    Returns:\n        str: A possibly multi-line representation of the object.\n    \"\"\"\n\n    if _safe_isinstance(_object, Node):\n        node = _object\n    else:\n        node = traverse(\n            _object, max_length=max_length, max_string=max_string, max_depth=max_depth\n        )\n    repr_str: str = node.render(\n        max_width=max_width, indent_size=indent_size, expand_all=expand_all\n    )\n    return repr_str\n\n\ndef pprint(\n    _object: Any,\n    *,\n    console: Optional[\"Console\"] = None,\n    indent_guides: bool = True,\n    max_length: Optional[int] = None,\n    max_string: Optional[int] = None,\n    max_depth: Optional[int] = None,\n    expand_all: bool = False,\n) -> None:\n    \"\"\"A convenience function for pretty printing.\n\n    Args:\n        _object (Any): Object to pretty print.\n        console (Console, optional): Console instance, or None to use default. Defaults to None.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of strings before truncating, or None to disable. Defaults to None.\n        max_depth (int, optional): Maximum depth for nested data structures, or None for unlimited depth. Defaults to None.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to True.\n        expand_all (bool, optional): Expand all containers. Defaults to False.\n    \"\"\"\n    _console = get_console() if console is None else console\n    _console.print(\n        Pretty(\n            _object,\n            max_length=max_length,\n            max_string=max_string,\n            max_depth=max_depth,\n            indent_guides=indent_guides,\n            expand_all=expand_all,\n            overflow=\"ignore\",\n        ),\n        soft_wrap=True,\n    )\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n\n    class BrokenRepr:\n        def __repr__(self) -> str:\n            1 / 0\n            return \"this will fail\"\n\n    from typing import NamedTuple\n\n    class StockKeepingUnit(NamedTuple):\n        name: str\n        description: str\n        price: float\n        category: str\n        reviews: List[str]\n\n    d = defaultdict(int)\n    d[\"foo\"] = 5\n    data = {\n        \"foo\": [\n            1,\n            \"Hello World!\",\n            100.123,\n            323.232,\n            432324.0,\n            {5, 6, 7, (1, 2, 3, 4), 8},\n        ],\n        \"bar\": frozenset({1, 2, 3}),\n        \"defaultdict\": defaultdict(\n            list, {\"crumble\": [\"apple\", \"rhubarb\", \"butter\", \"sugar\", \"flour\"]}\n        ),\n        \"counter\": Counter(\n            [\n                \"apple\",\n                \"orange\",\n                \"pear\",\n                \"kumquat\",\n                \"kumquat\",\n                \"durian\" * 100,\n            ]\n        ),\n        \"atomic\": (False, True, None),\n        \"namedtuple\": StockKeepingUnit(\n            \"Sparkling British Spring Water\",\n            \"Carbonated spring water\",\n            0.9,\n            \"water\",\n            [\"its amazing!\", \"its terrible!\"],\n        ),\n        \"Broken\": BrokenRepr(),\n    }\n    data[\"foo\"].append(data)  # type: ignore[attr-defined]\n\n    from rich import print\n\n    print(Pretty(data, indent_guides=True, max_string=20))\n\n    class Thing:\n        def __repr__(self) -> str:\n            return \"Hello\\x1b[38;5;239m World!\"\n\n    print(Pretty(Thing()))\n", "rich/_fileno.py": "from __future__ import annotations\n\nfrom typing import IO, Callable\n\n\ndef get_fileno(file_like: IO[str]) -> int | None:\n    \"\"\"Get fileno() from a file, accounting for poorly implemented file-like objects.\n\n    Args:\n        file_like (IO): A file-like object.\n\n    Returns:\n        int | None: The result of fileno if available, or None if operation failed.\n    \"\"\"\n    fileno: Callable[[], int] | None = getattr(file_like, \"fileno\", None)\n    if fileno is not None:\n        try:\n            return fileno()\n        except Exception:\n            # `fileno` is documented as potentially raising a OSError\n            # Alas, from the issues, there are so many poorly implemented file-like objects,\n            # that `fileno()` can raise just about anything.\n            return None\n    return None\n", "rich/pager.py": "from abc import ABC, abstractmethod\nfrom typing import Any\n\n\nclass Pager(ABC):\n    \"\"\"Base class for a pager.\"\"\"\n\n    @abstractmethod\n    def show(self, content: str) -> None:\n        \"\"\"Show content in pager.\n\n        Args:\n            content (str): Content to be displayed.\n        \"\"\"\n\n\nclass SystemPager(Pager):\n    \"\"\"Uses the pager installed on the system.\"\"\"\n\n    def _pager(self, content: str) -> Any:  # \u00a0pragma: no cover\n        return __import__(\"pydoc\").pager(content)\n\n    def show(self, content: str) -> None:\n        \"\"\"Use the same pager used by pydoc.\"\"\"\n        self._pager(content)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from .__main__ import make_test_card\n    from .console import Console\n\n    console = Console()\n    with console.pager(styles=True):\n        console.print(make_test_card())\n", "rich/segment.py": "from enum import IntEnum\nfrom functools import lru_cache\nfrom itertools import filterfalse\nfrom logging import getLogger\nfrom operator import attrgetter\nfrom typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom .cells import (\n    _is_single_cell_widths,\n    cached_cell_len,\n    cell_len,\n    get_character_cell_size,\n    set_cell_size,\n)\nfrom .repr import Result, rich_repr\nfrom .style import Style\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderResult\n\nlog = getLogger(\"rich\")\n\n\nclass ControlType(IntEnum):\n    \"\"\"Non-printable control codes which typically translate to ANSI codes.\"\"\"\n\n    BELL = 1\n    CARRIAGE_RETURN = 2\n    HOME = 3\n    CLEAR = 4\n    SHOW_CURSOR = 5\n    HIDE_CURSOR = 6\n    ENABLE_ALT_SCREEN = 7\n    DISABLE_ALT_SCREEN = 8\n    CURSOR_UP = 9\n    CURSOR_DOWN = 10\n    CURSOR_FORWARD = 11\n    CURSOR_BACKWARD = 12\n    CURSOR_MOVE_TO_COLUMN = 13\n    CURSOR_MOVE_TO = 14\n    ERASE_IN_LINE = 15\n    SET_WINDOW_TITLE = 16\n\n\nControlCode = Union[\n    Tuple[ControlType],\n    Tuple[ControlType, Union[int, str]],\n    Tuple[ControlType, int, int],\n]\n\n\n@rich_repr()\nclass Segment(NamedTuple):\n    \"\"\"A piece of text with associated style. Segments are produced by the Console render process and\n    are ultimately converted in to strings to be written to the terminal.\n\n    Args:\n        text (str): A piece of text.\n        style (:class:`~rich.style.Style`, optional): An optional style to apply to the text.\n        control (Tuple[ControlCode], optional): Optional sequence of control codes.\n\n    Attributes:\n        cell_length (int): The cell length of this Segment.\n    \"\"\"\n\n    text: str\n    style: Optional[Style] = None\n    control: Optional[Sequence[ControlCode]] = None\n\n    @property\n    def cell_length(self) -> int:\n        \"\"\"The number of terminal cells required to display self.text.\n\n        Returns:\n            int: A number of cells.\n        \"\"\"\n        text, _style, control = self\n        return 0 if control else cell_len(text)\n\n    def __rich_repr__(self) -> Result:\n        yield self.text\n        if self.control is None:\n            if self.style is not None:\n                yield self.style\n        else:\n            yield self.style\n            yield self.control\n\n    def __bool__(self) -> bool:\n        \"\"\"Check if the segment contains text.\"\"\"\n        return bool(self.text)\n\n    @property\n    def is_control(self) -> bool:\n        \"\"\"Check if the segment contains control codes.\"\"\"\n        return self.control is not None\n\n    @classmethod\n    @lru_cache(1024 * 16)\n    def _split_cells(cls, segment: \"Segment\", cut: int) -> Tuple[\"Segment\", \"Segment\"]:\n        text, style, control = segment\n        _Segment = Segment\n\n        cell_length = segment.cell_length\n        if cut >= cell_length:\n            return segment, _Segment(\"\", style, control)\n\n        cell_size = get_character_cell_size\n\n        pos = int((cut / cell_length) * (len(text) - 1))\n\n        before = text[:pos]\n        cell_pos = cell_len(before)\n        if cell_pos == cut:\n            return (\n                _Segment(before, style, control),\n                _Segment(text[pos:], style, control),\n            )\n        while pos < len(text):\n            char = text[pos]\n            pos += 1\n            cell_pos += cell_size(char)\n            before = text[:pos]\n            if cell_pos == cut:\n                return (\n                    _Segment(before, style, control),\n                    _Segment(text[pos:], style, control),\n                )\n            if cell_pos > cut:\n                return (\n                    _Segment(before[: pos - 1] + \" \", style, control),\n                    _Segment(\" \" + text[pos:], style, control),\n                )\n\n        raise AssertionError(\"Will never reach here\")\n\n    def split_cells(self, cut: int) -> Tuple[\"Segment\", \"Segment\"]:\n        \"\"\"Split segment in to two segments at the specified column.\n\n        If the cut point falls in the middle of a 2-cell wide character then it is replaced\n        by two spaces, to preserve the display width of the parent segment.\n\n        Returns:\n            Tuple[Segment, Segment]: Two segments.\n        \"\"\"\n        text, style, control = self\n\n        if _is_single_cell_widths(text):\n            # Fast path with all 1 cell characters\n            if cut >= len(text):\n                return self, Segment(\"\", style, control)\n            return (\n                Segment(text[:cut], style, control),\n                Segment(text[cut:], style, control),\n            )\n\n        return self._split_cells(self, cut)\n\n    @classmethod\n    def line(cls) -> \"Segment\":\n        \"\"\"Make a new line segment.\"\"\"\n        return cls(\"\\n\")\n\n    @classmethod\n    def apply_style(\n        cls,\n        segments: Iterable[\"Segment\"],\n        style: Optional[Style] = None,\n        post_style: Optional[Style] = None,\n    ) -> Iterable[\"Segment\"]:\n        \"\"\"Apply style(s) to an iterable of segments.\n\n        Returns an iterable of segments where the style is replaced by ``style + segment.style + post_style``.\n\n        Args:\n            segments (Iterable[Segment]): Segments to process.\n            style (Style, optional): Base style. Defaults to None.\n            post_style (Style, optional): Style to apply on top of segment style. Defaults to None.\n\n        Returns:\n            Iterable[Segments]: A new iterable of segments (possibly the same iterable).\n        \"\"\"\n        result_segments = segments\n        if style:\n            apply = style.__add__\n            result_segments = (\n                cls(text, None if control else apply(_style), control)\n                for text, _style, control in result_segments\n            )\n        if post_style:\n            result_segments = (\n                cls(\n                    text,\n                    (\n                        None\n                        if control\n                        else (_style + post_style if _style else post_style)\n                    ),\n                    control,\n                )\n                for text, _style, control in result_segments\n            )\n        return result_segments\n\n    @classmethod\n    def filter_control(\n        cls, segments: Iterable[\"Segment\"], is_control: bool = False\n    ) -> Iterable[\"Segment\"]:\n        \"\"\"Filter segments by ``is_control`` attribute.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of Segment instances.\n            is_control (bool, optional): is_control flag to match in search.\n\n        Returns:\n            Iterable[Segment]: And iterable of Segment instances.\n\n        \"\"\"\n        if is_control:\n            return filter(attrgetter(\"control\"), segments)\n        else:\n            return filterfalse(attrgetter(\"control\"), segments)\n\n    @classmethod\n    def split_lines(cls, segments: Iterable[\"Segment\"]) -> Iterable[List[\"Segment\"]]:\n        \"\"\"Split a sequence of segments in to a list of lines.\n\n        Args:\n            segments (Iterable[Segment]): Segments potentially containing line feeds.\n\n        Yields:\n            Iterable[List[Segment]]: Iterable of segment lists, one per line.\n        \"\"\"\n        line: List[Segment] = []\n        append = line.append\n\n        for segment in segments:\n            if \"\\n\" in segment.text and not segment.control:\n                text, style, _ = segment\n                while text:\n                    _text, new_line, text = text.partition(\"\\n\")\n                    if _text:\n                        append(cls(_text, style))\n                    if new_line:\n                        yield line\n                        line = []\n                        append = line.append\n            else:\n                append(segment)\n        if line:\n            yield line\n\n    @classmethod\n    def split_and_crop_lines(\n        cls,\n        segments: Iterable[\"Segment\"],\n        length: int,\n        style: Optional[Style] = None,\n        pad: bool = True,\n        include_new_lines: bool = True,\n    ) -> Iterable[List[\"Segment\"]]:\n        \"\"\"Split segments in to lines, and crop lines greater than a given length.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of segments, probably\n                generated from console.render.\n            length (int): Desired line length.\n            style (Style, optional): Style to use for any padding.\n            pad (bool): Enable padding of lines that are less than `length`.\n\n        Returns:\n            Iterable[List[Segment]]: An iterable of lines of segments.\n        \"\"\"\n        line: List[Segment] = []\n        append = line.append\n\n        adjust_line_length = cls.adjust_line_length\n        new_line_segment = cls(\"\\n\")\n\n        for segment in segments:\n            if \"\\n\" in segment.text and not segment.control:\n                text, segment_style, _ = segment\n                while text:\n                    _text, new_line, text = text.partition(\"\\n\")\n                    if _text:\n                        append(cls(_text, segment_style))\n                    if new_line:\n                        cropped_line = adjust_line_length(\n                            line, length, style=style, pad=pad\n                        )\n                        if include_new_lines:\n                            cropped_line.append(new_line_segment)\n                        yield cropped_line\n                        line.clear()\n            else:\n                append(segment)\n        if line:\n            yield adjust_line_length(line, length, style=style, pad=pad)\n\n    @classmethod\n    def adjust_line_length(\n        cls,\n        line: List[\"Segment\"],\n        length: int,\n        style: Optional[Style] = None,\n        pad: bool = True,\n    ) -> List[\"Segment\"]:\n        \"\"\"Adjust a line to a given width (cropping or padding as required).\n\n        Args:\n            segments (Iterable[Segment]): A list of segments in a single line.\n            length (int): The desired width of the line.\n            style (Style, optional): The style of padding if used (space on the end). Defaults to None.\n            pad (bool, optional): Pad lines with spaces if they are shorter than `length`. Defaults to True.\n\n        Returns:\n            List[Segment]: A line of segments with the desired length.\n        \"\"\"\n        line_length = sum(segment.cell_length for segment in line)\n        new_line: List[Segment]\n\n        if line_length < length:\n            if pad:\n                new_line = line + [cls(\" \" * (length - line_length), style)]\n            else:\n                new_line = line[:]\n        elif line_length > length:\n            new_line = []\n            append = new_line.append\n            line_length = 0\n            for segment in line:\n                segment_length = segment.cell_length\n                if line_length + segment_length < length or segment.control:\n                    append(segment)\n                    line_length += segment_length\n                else:\n                    text, segment_style, _ = segment\n                    text = set_cell_size(text, length - line_length)\n                    append(cls(text, segment_style))\n                    break\n        else:\n            new_line = line[:]\n        return new_line\n\n    @classmethod\n    def get_line_length(cls, line: List[\"Segment\"]) -> int:\n        \"\"\"Get the length of list of segments.\n\n        Args:\n            line (List[Segment]): A line encoded as a list of Segments (assumes no '\\\\\\\\n' characters),\n\n        Returns:\n            int: The length of the line.\n        \"\"\"\n        _cell_len = cell_len\n        return sum(_cell_len(text) for text, style, control in line if not control)\n\n    @classmethod\n    def get_shape(cls, lines: List[List[\"Segment\"]]) -> Tuple[int, int]:\n        \"\"\"Get the shape (enclosing rectangle) of a list of lines.\n\n        Args:\n            lines (List[List[Segment]]): A list of lines (no '\\\\\\\\n' characters).\n\n        Returns:\n            Tuple[int, int]: Width and height in characters.\n        \"\"\"\n        get_line_length = cls.get_line_length\n        max_width = max(get_line_length(line) for line in lines) if lines else 0\n        return (max_width, len(lines))\n\n    @classmethod\n    def set_shape(\n        cls,\n        lines: List[List[\"Segment\"]],\n        width: int,\n        height: Optional[int] = None,\n        style: Optional[Style] = None,\n        new_lines: bool = False,\n    ) -> List[List[\"Segment\"]]:\n        \"\"\"Set the shape of a list of lines (enclosing rectangle).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style, optional): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        \"\"\"\n        _height = height or len(lines)\n\n        blank = (\n            [cls(\" \" * width + \"\\n\", style)] if new_lines else [cls(\" \" * width, style)]\n        )\n\n        adjust_line_length = cls.adjust_line_length\n        shaped_lines = lines[:_height]\n        shaped_lines[:] = [\n            adjust_line_length(line, width, style=style) for line in lines\n        ]\n        if len(shaped_lines) < _height:\n            shaped_lines.extend([blank] * (_height - len(shaped_lines)))\n        return shaped_lines\n\n    @classmethod\n    def align_top(\n        cls: Type[\"Segment\"],\n        lines: List[List[\"Segment\"]],\n        width: int,\n        height: int,\n        style: Style,\n        new_lines: bool = False,\n    ) -> List[List[\"Segment\"]]:\n        \"\"\"Aligns lines to top (adds extra lines to bottom as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        \"\"\"\n        extra_lines = height - len(lines)\n        if not extra_lines:\n            return lines[:]\n        lines = lines[:height]\n        blank = cls(\" \" * width + \"\\n\", style) if new_lines else cls(\" \" * width, style)\n        lines = lines + [[blank]] * extra_lines\n        return lines\n\n    @classmethod\n    def align_bottom(\n        cls: Type[\"Segment\"],\n        lines: List[List[\"Segment\"]],\n        width: int,\n        height: int,\n        style: Style,\n        new_lines: bool = False,\n    ) -> List[List[\"Segment\"]]:\n        \"\"\"Aligns render to bottom (adds extra lines above as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added. Defaults to None.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        \"\"\"\n        extra_lines = height - len(lines)\n        if not extra_lines:\n            return lines[:]\n        lines = lines[:height]\n        blank = cls(\" \" * width + \"\\n\", style) if new_lines else cls(\" \" * width, style)\n        lines = [[blank]] * extra_lines + lines\n        return lines\n\n    @classmethod\n    def align_middle(\n        cls: Type[\"Segment\"],\n        lines: List[List[\"Segment\"]],\n        width: int,\n        height: int,\n        style: Style,\n        new_lines: bool = False,\n    ) -> List[List[\"Segment\"]]:\n        \"\"\"Aligns lines to middle (adds extra lines to above and below as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        \"\"\"\n        extra_lines = height - len(lines)\n        if not extra_lines:\n            return lines[:]\n        lines = lines[:height]\n        blank = cls(\" \" * width + \"\\n\", style) if new_lines else cls(\" \" * width, style)\n        top_lines = extra_lines // 2\n        bottom_lines = extra_lines - top_lines\n        lines = [[blank]] * top_lines + lines + [[blank]] * bottom_lines\n        return lines\n\n    @classmethod\n    def simplify(cls, segments: Iterable[\"Segment\"]) -> Iterable[\"Segment\"]:\n        \"\"\"Simplify an iterable of segments by combining contiguous segments with the same style.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of segments.\n\n        Returns:\n            Iterable[Segment]: A possibly smaller iterable of segments that will render the same way.\n        \"\"\"\n        iter_segments = iter(segments)\n        try:\n            last_segment = next(iter_segments)\n        except StopIteration:\n            return\n\n        _Segment = Segment\n        for segment in iter_segments:\n            if last_segment.style == segment.style and not segment.control:\n                last_segment = _Segment(\n                    last_segment.text + segment.text, last_segment.style\n                )\n            else:\n                yield last_segment\n                last_segment = segment\n        yield last_segment\n\n    @classmethod\n    def strip_links(cls, segments: Iterable[\"Segment\"]) -> Iterable[\"Segment\"]:\n        \"\"\"Remove all links from an iterable of styles.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with link removed.\n        \"\"\"\n        for segment in segments:\n            if segment.control or segment.style is None:\n                yield segment\n            else:\n                text, style, _control = segment\n                yield cls(text, style.update_link(None) if style else None)\n\n    @classmethod\n    def strip_styles(cls, segments: Iterable[\"Segment\"]) -> Iterable[\"Segment\"]:\n        \"\"\"Remove all styles from an iterable of segments.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with styles replace with None\n        \"\"\"\n        for text, _style, control in segments:\n            yield cls(text, None, control)\n\n    @classmethod\n    def remove_color(cls, segments: Iterable[\"Segment\"]) -> Iterable[\"Segment\"]:\n        \"\"\"Remove all color from an iterable of segments.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with colorless style.\n        \"\"\"\n\n        cache: Dict[Style, Style] = {}\n        for text, style, control in segments:\n            if style:\n                colorless_style = cache.get(style)\n                if colorless_style is None:\n                    colorless_style = style.without_color\n                    cache[style] = colorless_style\n                yield cls(text, colorless_style, control)\n            else:\n                yield cls(text, None, control)\n\n    @classmethod\n    def divide(\n        cls, segments: Iterable[\"Segment\"], cuts: Iterable[int]\n    ) -> Iterable[List[\"Segment\"]]:\n        \"\"\"Divides an iterable of segments in to portions.\n\n        Args:\n            cuts (Iterable[int]): Cell positions where to divide.\n\n        Yields:\n            [Iterable[List[Segment]]]: An iterable of Segments in List.\n        \"\"\"\n        split_segments: List[\"Segment\"] = []\n        add_segment = split_segments.append\n\n        iter_cuts = iter(cuts)\n\n        while True:\n            cut = next(iter_cuts, -1)\n            if cut == -1:\n                return []\n            if cut != 0:\n                break\n            yield []\n        pos = 0\n\n        segments_clear = split_segments.clear\n        segments_copy = split_segments.copy\n\n        _cell_len = cached_cell_len\n        for segment in segments:\n            text, _style, control = segment\n            while text:\n                end_pos = pos if control else pos + _cell_len(text)\n                if end_pos < cut:\n                    add_segment(segment)\n                    pos = end_pos\n                    break\n\n                if end_pos == cut:\n                    add_segment(segment)\n                    yield segments_copy()\n                    segments_clear()\n                    pos = end_pos\n\n                    cut = next(iter_cuts, -1)\n                    if cut == -1:\n                        if split_segments:\n                            yield segments_copy()\n                        return\n\n                    break\n\n                else:\n                    before, segment = segment.split_cells(cut - pos)\n                    text, _style, control = segment\n                    add_segment(before)\n                    yield segments_copy()\n                    segments_clear()\n                    pos = cut\n\n                cut = next(iter_cuts, -1)\n                if cut == -1:\n                    if split_segments:\n                        yield segments_copy()\n                    return\n\n        yield segments_copy()\n\n\nclass Segments:\n    \"\"\"A simple renderable to render an iterable of segments. This class may be useful if\n    you want to print segments outside of a __rich_console__ method.\n\n    Args:\n        segments (Iterable[Segment]): An iterable of segments.\n        new_lines (bool, optional): Add new lines between segments. Defaults to False.\n    \"\"\"\n\n    def __init__(self, segments: Iterable[Segment], new_lines: bool = False) -> None:\n        self.segments = list(segments)\n        self.new_lines = new_lines\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        if self.new_lines:\n            line = Segment.line()\n            for segment in self.segments:\n                yield segment\n                yield line\n        else:\n            yield from self.segments\n\n\nclass SegmentLines:\n    def __init__(self, lines: Iterable[List[Segment]], new_lines: bool = False) -> None:\n        \"\"\"A simple renderable containing a number of lines of segments. May be used as an intermediate\n        in rendering process.\n\n        Args:\n            lines (Iterable[List[Segment]]): Lists of segments forming lines.\n            new_lines (bool, optional): Insert new lines after each line. Defaults to False.\n        \"\"\"\n        self.lines = list(lines)\n        self.new_lines = new_lines\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        if self.new_lines:\n            new_line = Segment.line()\n            for line in self.lines:\n                yield from line\n                yield new_line\n        else:\n            for line in self.lines:\n                yield from line\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.console import Console\n    from rich.syntax import Syntax\n    from rich.text import Text\n\n    code = \"\"\"from rich.console import Console\nconsole = Console()\ntext = Text.from_markup(\"Hello, [bold magenta]World[/]!\")\nconsole.print(text)\"\"\"\n\n    text = Text.from_markup(\"Hello, [bold magenta]World[/]!\")\n\n    console = Console()\n\n    console.rule(\"rich.Segment\")\n    console.print(\n        \"A Segment is the last step in the Rich render process before generating text with ANSI codes.\"\n    )\n    console.print(\"\\nConsider the following code:\\n\")\n    console.print(Syntax(code, \"python\", line_numbers=True))\n    console.print()\n    console.print(\n        \"When you call [b]print()[/b], Rich [i]renders[/i] the object in to the following:\\n\"\n    )\n    fragments = list(console.render(text))\n    console.print(fragments)\n    console.print()\n    console.print(\"The Segments are then processed to produce the following output:\\n\")\n    console.print(text)\n    console.print(\n        \"\\nYou will only need to know this if you are implementing your own Rich renderables.\"\n    )\n", "rich/_palettes.py": "from .palette import Palette\n\n\n# Taken from https://en.wikipedia.org/wiki/ANSI_escape_code (Windows 10 column)\nWINDOWS_PALETTE = Palette(\n    [\n        (12, 12, 12),\n        (197, 15, 31),\n        (19, 161, 14),\n        (193, 156, 0),\n        (0, 55, 218),\n        (136, 23, 152),\n        (58, 150, 221),\n        (204, 204, 204),\n        (118, 118, 118),\n        (231, 72, 86),\n        (22, 198, 12),\n        (249, 241, 165),\n        (59, 120, 255),\n        (180, 0, 158),\n        (97, 214, 214),\n        (242, 242, 242),\n    ]\n)\n\n# # The standard ansi colors (including bright variants)\nSTANDARD_PALETTE = Palette(\n    [\n        (0, 0, 0),\n        (170, 0, 0),\n        (0, 170, 0),\n        (170, 85, 0),\n        (0, 0, 170),\n        (170, 0, 170),\n        (0, 170, 170),\n        (170, 170, 170),\n        (85, 85, 85),\n        (255, 85, 85),\n        (85, 255, 85),\n        (255, 255, 85),\n        (85, 85, 255),\n        (255, 85, 255),\n        (85, 255, 255),\n        (255, 255, 255),\n    ]\n)\n\n\n# The 256 color palette\nEIGHT_BIT_PALETTE = Palette(\n    [\n        (0, 0, 0),\n        (128, 0, 0),\n        (0, 128, 0),\n        (128, 128, 0),\n        (0, 0, 128),\n        (128, 0, 128),\n        (0, 128, 128),\n        (192, 192, 192),\n        (128, 128, 128),\n        (255, 0, 0),\n        (0, 255, 0),\n        (255, 255, 0),\n        (0, 0, 255),\n        (255, 0, 255),\n        (0, 255, 255),\n        (255, 255, 255),\n        (0, 0, 0),\n        (0, 0, 95),\n        (0, 0, 135),\n        (0, 0, 175),\n        (0, 0, 215),\n        (0, 0, 255),\n        (0, 95, 0),\n        (0, 95, 95),\n        (0, 95, 135),\n        (0, 95, 175),\n        (0, 95, 215),\n        (0, 95, 255),\n        (0, 135, 0),\n        (0, 135, 95),\n        (0, 135, 135),\n        (0, 135, 175),\n        (0, 135, 215),\n        (0, 135, 255),\n        (0, 175, 0),\n        (0, 175, 95),\n        (0, 175, 135),\n        (0, 175, 175),\n        (0, 175, 215),\n        (0, 175, 255),\n        (0, 215, 0),\n        (0, 215, 95),\n        (0, 215, 135),\n        (0, 215, 175),\n        (0, 215, 215),\n        (0, 215, 255),\n        (0, 255, 0),\n        (0, 255, 95),\n        (0, 255, 135),\n        (0, 255, 175),\n        (0, 255, 215),\n        (0, 255, 255),\n        (95, 0, 0),\n        (95, 0, 95),\n        (95, 0, 135),\n        (95, 0, 175),\n        (95, 0, 215),\n        (95, 0, 255),\n        (95, 95, 0),\n        (95, 95, 95),\n        (95, 95, 135),\n        (95, 95, 175),\n        (95, 95, 215),\n        (95, 95, 255),\n        (95, 135, 0),\n        (95, 135, 95),\n        (95, 135, 135),\n        (95, 135, 175),\n        (95, 135, 215),\n        (95, 135, 255),\n        (95, 175, 0),\n        (95, 175, 95),\n        (95, 175, 135),\n        (95, 175, 175),\n        (95, 175, 215),\n        (95, 175, 255),\n        (95, 215, 0),\n        (95, 215, 95),\n        (95, 215, 135),\n        (95, 215, 175),\n        (95, 215, 215),\n        (95, 215, 255),\n        (95, 255, 0),\n        (95, 255, 95),\n        (95, 255, 135),\n        (95, 255, 175),\n        (95, 255, 215),\n        (95, 255, 255),\n        (135, 0, 0),\n        (135, 0, 95),\n        (135, 0, 135),\n        (135, 0, 175),\n        (135, 0, 215),\n        (135, 0, 255),\n        (135, 95, 0),\n        (135, 95, 95),\n        (135, 95, 135),\n        (135, 95, 175),\n        (135, 95, 215),\n        (135, 95, 255),\n        (135, 135, 0),\n        (135, 135, 95),\n        (135, 135, 135),\n        (135, 135, 175),\n        (135, 135, 215),\n        (135, 135, 255),\n        (135, 175, 0),\n        (135, 175, 95),\n        (135, 175, 135),\n        (135, 175, 175),\n        (135, 175, 215),\n        (135, 175, 255),\n        (135, 215, 0),\n        (135, 215, 95),\n        (135, 215, 135),\n        (135, 215, 175),\n        (135, 215, 215),\n        (135, 215, 255),\n        (135, 255, 0),\n        (135, 255, 95),\n        (135, 255, 135),\n        (135, 255, 175),\n        (135, 255, 215),\n        (135, 255, 255),\n        (175, 0, 0),\n        (175, 0, 95),\n        (175, 0, 135),\n        (175, 0, 175),\n        (175, 0, 215),\n        (175, 0, 255),\n        (175, 95, 0),\n        (175, 95, 95),\n        (175, 95, 135),\n        (175, 95, 175),\n        (175, 95, 215),\n        (175, 95, 255),\n        (175, 135, 0),\n        (175, 135, 95),\n        (175, 135, 135),\n        (175, 135, 175),\n        (175, 135, 215),\n        (175, 135, 255),\n        (175, 175, 0),\n        (175, 175, 95),\n        (175, 175, 135),\n        (175, 175, 175),\n        (175, 175, 215),\n        (175, 175, 255),\n        (175, 215, 0),\n        (175, 215, 95),\n        (175, 215, 135),\n        (175, 215, 175),\n        (175, 215, 215),\n        (175, 215, 255),\n        (175, 255, 0),\n        (175, 255, 95),\n        (175, 255, 135),\n        (175, 255, 175),\n        (175, 255, 215),\n        (175, 255, 255),\n        (215, 0, 0),\n        (215, 0, 95),\n        (215, 0, 135),\n        (215, 0, 175),\n        (215, 0, 215),\n        (215, 0, 255),\n        (215, 95, 0),\n        (215, 95, 95),\n        (215, 95, 135),\n        (215, 95, 175),\n        (215, 95, 215),\n        (215, 95, 255),\n        (215, 135, 0),\n        (215, 135, 95),\n        (215, 135, 135),\n        (215, 135, 175),\n        (215, 135, 215),\n        (215, 135, 255),\n        (215, 175, 0),\n        (215, 175, 95),\n        (215, 175, 135),\n        (215, 175, 175),\n        (215, 175, 215),\n        (215, 175, 255),\n        (215, 215, 0),\n        (215, 215, 95),\n        (215, 215, 135),\n        (215, 215, 175),\n        (215, 215, 215),\n        (215, 215, 255),\n        (215, 255, 0),\n        (215, 255, 95),\n        (215, 255, 135),\n        (215, 255, 175),\n        (215, 255, 215),\n        (215, 255, 255),\n        (255, 0, 0),\n        (255, 0, 95),\n        (255, 0, 135),\n        (255, 0, 175),\n        (255, 0, 215),\n        (255, 0, 255),\n        (255, 95, 0),\n        (255, 95, 95),\n        (255, 95, 135),\n        (255, 95, 175),\n        (255, 95, 215),\n        (255, 95, 255),\n        (255, 135, 0),\n        (255, 135, 95),\n        (255, 135, 135),\n        (255, 135, 175),\n        (255, 135, 215),\n        (255, 135, 255),\n        (255, 175, 0),\n        (255, 175, 95),\n        (255, 175, 135),\n        (255, 175, 175),\n        (255, 175, 215),\n        (255, 175, 255),\n        (255, 215, 0),\n        (255, 215, 95),\n        (255, 215, 135),\n        (255, 215, 175),\n        (255, 215, 215),\n        (255, 215, 255),\n        (255, 255, 0),\n        (255, 255, 95),\n        (255, 255, 135),\n        (255, 255, 175),\n        (255, 255, 215),\n        (255, 255, 255),\n        (8, 8, 8),\n        (18, 18, 18),\n        (28, 28, 28),\n        (38, 38, 38),\n        (48, 48, 48),\n        (58, 58, 58),\n        (68, 68, 68),\n        (78, 78, 78),\n        (88, 88, 88),\n        (98, 98, 98),\n        (108, 108, 108),\n        (118, 118, 118),\n        (128, 128, 128),\n        (138, 138, 138),\n        (148, 148, 148),\n        (158, 158, 158),\n        (168, 168, 168),\n        (178, 178, 178),\n        (188, 188, 188),\n        (198, 198, 198),\n        (208, 208, 208),\n        (218, 218, 218),\n        (228, 228, 228),\n        (238, 238, 238),\n    ]\n)\n", "rich/table.py": "from dataclasses import dataclass, field, replace\nfrom typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\nfrom . import box, errors\nfrom ._loop import loop_first_last, loop_last\nfrom ._pick import pick_bool\nfrom ._ratio import ratio_distribute, ratio_reduce\nfrom .align import VerticalAlignMethod\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .padding import Padding, PaddingDimensions\nfrom .protocol import is_renderable\nfrom .segment import Segment\nfrom .style import Style, StyleType\nfrom .text import Text, TextType\n\nif TYPE_CHECKING:\n    from .console import (\n        Console,\n        ConsoleOptions,\n        JustifyMethod,\n        OverflowMethod,\n        RenderableType,\n        RenderResult,\n    )\n\n\n@dataclass\nclass Column:\n    \"\"\"Defines a column within a ~Table.\n\n    Args:\n        title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.\n        caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.\n        width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.\n        min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.\n        box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.\n        safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.\n        padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).\n        collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.\n        pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.\n        expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n        show_header (bool, optional): Show a header row. Defaults to True.\n        show_footer (bool, optional): Show a footer row. Defaults to False.\n        show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.\n        show_lines (bool, optional): Draw lines between every row. Defaults to False.\n        leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.\n        style (Union[str, Style], optional): Default style for the table. Defaults to \"none\".\n        row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.\n        header_style (Union[str, Style], optional): Style of the header. Defaults to \"table.header\".\n        footer_style (Union[str, Style], optional): Style of the footer. Defaults to \"table.footer\".\n        border_style (Union[str, Style], optional): Style of the border. Defaults to None.\n        title_style (Union[str, Style], optional): Style of the title. Defaults to None.\n        caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.\n        title_justify (str, optional): Justify method for title. Defaults to \"center\".\n        caption_justify (str, optional): Justify method for caption. Defaults to \"center\".\n        highlight (bool, optional): Highlight cell contents (if str). Defaults to False.\n    \"\"\"\n\n    header: \"RenderableType\" = \"\"\n    \"\"\"RenderableType: Renderable for the header (typically a string)\"\"\"\n\n    footer: \"RenderableType\" = \"\"\n    \"\"\"RenderableType: Renderable for the footer (typically a string)\"\"\"\n\n    header_style: StyleType = \"\"\n    \"\"\"StyleType: The style of the header.\"\"\"\n\n    footer_style: StyleType = \"\"\n    \"\"\"StyleType: The style of the footer.\"\"\"\n\n    style: StyleType = \"\"\n    \"\"\"StyleType: The style of the column.\"\"\"\n\n    justify: \"JustifyMethod\" = \"left\"\n    \"\"\"str: How to justify text within the column (\"left\", \"center\", \"right\", or \"full\")\"\"\"\n\n    vertical: \"VerticalAlignMethod\" = \"top\"\n    \"\"\"str: How to vertically align content (\"top\", \"middle\", or \"bottom\")\"\"\"\n\n    overflow: \"OverflowMethod\" = \"ellipsis\"\n    \"\"\"str: Overflow method.\"\"\"\n\n    width: Optional[int] = None\n    \"\"\"Optional[int]: Width of the column, or ``None`` (default) to auto calculate width.\"\"\"\n\n    min_width: Optional[int] = None\n    \"\"\"Optional[int]: Minimum width of column, or ``None`` for no minimum. Defaults to None.\"\"\"\n\n    max_width: Optional[int] = None\n    \"\"\"Optional[int]: Maximum width of column, or ``None`` for no maximum. Defaults to None.\"\"\"\n\n    ratio: Optional[int] = None\n    \"\"\"Optional[int]: Ratio to use when calculating column width, or ``None`` (default) to adapt to column contents.\"\"\"\n\n    no_wrap: bool = False\n    \"\"\"bool: Prevent wrapping of text within the column. Defaults to ``False``.\"\"\"\n\n    _index: int = 0\n    \"\"\"Index of column.\"\"\"\n\n    _cells: List[\"RenderableType\"] = field(default_factory=list)\n\n    def copy(self) -> \"Column\":\n        \"\"\"Return a copy of this Column.\"\"\"\n        return replace(self, _cells=[])\n\n    @property\n    def cells(self) -> Iterable[\"RenderableType\"]:\n        \"\"\"Get all cells in the column, not including header.\"\"\"\n        yield from self._cells\n\n    @property\n    def flexible(self) -> bool:\n        \"\"\"Check if this column is flexible.\"\"\"\n        return self.ratio is not None\n\n\n@dataclass\nclass Row:\n    \"\"\"Information regarding a row.\"\"\"\n\n    style: Optional[StyleType] = None\n    \"\"\"Style to apply to row.\"\"\"\n\n    end_section: bool = False\n    \"\"\"Indicated end of section, which will force a line beneath the row.\"\"\"\n\n\nclass _Cell(NamedTuple):\n    \"\"\"A single cell in a table.\"\"\"\n\n    style: StyleType\n    \"\"\"Style to apply to cell.\"\"\"\n    renderable: \"RenderableType\"\n    \"\"\"Cell renderable.\"\"\"\n    vertical: VerticalAlignMethod\n    \"\"\"Cell vertical alignment.\"\"\"\n\n\nclass Table(JupyterMixin):\n    \"\"\"A console renderable to draw a table.\n\n    Args:\n        *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n        title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.\n        caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.\n        width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.\n        min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.\n        box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.\n        safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.\n        padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).\n        collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.\n        pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.\n        expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n        show_header (bool, optional): Show a header row. Defaults to True.\n        show_footer (bool, optional): Show a footer row. Defaults to False.\n        show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.\n        show_lines (bool, optional): Draw lines between every row. Defaults to False.\n        leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.\n        style (Union[str, Style], optional): Default style for the table. Defaults to \"none\".\n        row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.\n        header_style (Union[str, Style], optional): Style of the header. Defaults to \"table.header\".\n        footer_style (Union[str, Style], optional): Style of the footer. Defaults to \"table.footer\".\n        border_style (Union[str, Style], optional): Style of the border. Defaults to None.\n        title_style (Union[str, Style], optional): Style of the title. Defaults to None.\n        caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.\n        title_justify (str, optional): Justify method for title. Defaults to \"center\".\n        caption_justify (str, optional): Justify method for caption. Defaults to \"center\".\n        highlight (bool, optional): Highlight cell contents (if str). Defaults to False.\n    \"\"\"\n\n    columns: List[Column]\n    rows: List[Row]\n\n    def __init__(\n        self,\n        *headers: Union[Column, str],\n        title: Optional[TextType] = None,\n        caption: Optional[TextType] = None,\n        width: Optional[int] = None,\n        min_width: Optional[int] = None,\n        box: Optional[box.Box] = box.HEAVY_HEAD,\n        safe_box: Optional[bool] = None,\n        padding: PaddingDimensions = (0, 1),\n        collapse_padding: bool = False,\n        pad_edge: bool = True,\n        expand: bool = False,\n        show_header: bool = True,\n        show_footer: bool = False,\n        show_edge: bool = True,\n        show_lines: bool = False,\n        leading: int = 0,\n        style: StyleType = \"none\",\n        row_styles: Optional[Iterable[StyleType]] = None,\n        header_style: Optional[StyleType] = \"table.header\",\n        footer_style: Optional[StyleType] = \"table.footer\",\n        border_style: Optional[StyleType] = None,\n        title_style: Optional[StyleType] = None,\n        caption_style: Optional[StyleType] = None,\n        title_justify: \"JustifyMethod\" = \"center\",\n        caption_justify: \"JustifyMethod\" = \"center\",\n        highlight: bool = False,\n    ) -> None:\n        self.columns: List[Column] = []\n        self.rows: List[Row] = []\n        self.title = title\n        self.caption = caption\n        self.width = width\n        self.min_width = min_width\n        self.box = box\n        self.safe_box = safe_box\n        self._padding = Padding.unpack(padding)\n        self.pad_edge = pad_edge\n        self._expand = expand\n        self.show_header = show_header\n        self.show_footer = show_footer\n        self.show_edge = show_edge\n        self.show_lines = show_lines\n        self.leading = leading\n        self.collapse_padding = collapse_padding\n        self.style = style\n        self.header_style = header_style or \"\"\n        self.footer_style = footer_style or \"\"\n        self.border_style = border_style\n        self.title_style = title_style\n        self.caption_style = caption_style\n        self.title_justify: \"JustifyMethod\" = title_justify\n        self.caption_justify: \"JustifyMethod\" = caption_justify\n        self.highlight = highlight\n        self.row_styles: Sequence[StyleType] = list(row_styles or [])\n        append_column = self.columns.append\n        for header in headers:\n            if isinstance(header, str):\n                self.add_column(header=header)\n            else:\n                header._index = len(self.columns)\n                append_column(header)\n\n    @classmethod\n    def grid(\n        cls,\n        *headers: Union[Column, str],\n        padding: PaddingDimensions = 0,\n        collapse_padding: bool = True,\n        pad_edge: bool = False,\n        expand: bool = False,\n    ) -> \"Table\":\n        \"\"\"Get a table with no lines, headers, or footer.\n\n        Args:\n            *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n            padding (PaddingDimensions, optional): Get padding around cells. Defaults to 0.\n            collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to True.\n            pad_edge (bool, optional): Enable padding around edges of table. Defaults to False.\n            expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n\n        Returns:\n            Table: A table instance.\n        \"\"\"\n        return cls(\n            *headers,\n            box=None,\n            padding=padding,\n            collapse_padding=collapse_padding,\n            show_header=False,\n            show_footer=False,\n            show_edge=False,\n            pad_edge=pad_edge,\n            expand=expand,\n        )\n\n    @property\n    def expand(self) -> bool:\n        \"\"\"Setting a non-None self.width implies expand.\"\"\"\n        return self._expand or self.width is not None\n\n    @expand.setter\n    def expand(self, expand: bool) -> None:\n        \"\"\"Set expand.\"\"\"\n        self._expand = expand\n\n    @property\n    def _extra_width(self) -> int:\n        \"\"\"Get extra width to add to cell content.\"\"\"\n        width = 0\n        if self.box and self.show_edge:\n            width += 2\n        if self.box:\n            width += len(self.columns) - 1\n        return width\n\n    @property\n    def row_count(self) -> int:\n        \"\"\"Get the current number of rows.\"\"\"\n        return len(self.rows)\n\n    def get_row_style(self, console: \"Console\", index: int) -> StyleType:\n        \"\"\"Get the current row style.\"\"\"\n        style = Style.null()\n        if self.row_styles:\n            style += console.get_style(self.row_styles[index % len(self.row_styles)])\n        row_style = self.rows[index].style\n        if row_style is not None:\n            style += console.get_style(row_style)\n        return style\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Measurement:\n        max_width = options.max_width\n        if self.width is not None:\n            max_width = self.width\n        if max_width < 0:\n            return Measurement(0, 0)\n\n        extra_width = self._extra_width\n        max_width = sum(\n            self._calculate_column_widths(\n                console, options.update_width(max_width - extra_width)\n            )\n        )\n        _measure_column = self._measure_column\n\n        measurements = [\n            _measure_column(console, options.update_width(max_width), column)\n            for column in self.columns\n        ]\n        minimum_width = (\n            sum(measurement.minimum for measurement in measurements) + extra_width\n        )\n        maximum_width = (\n            sum(measurement.maximum for measurement in measurements) + extra_width\n            if (self.width is None)\n            else self.width\n        )\n        measurement = Measurement(minimum_width, maximum_width)\n        measurement = measurement.clamp(self.min_width)\n        return measurement\n\n    @property\n    def padding(self) -> Tuple[int, int, int, int]:\n        \"\"\"Get cell padding.\"\"\"\n        return self._padding\n\n    @padding.setter\n    def padding(self, padding: PaddingDimensions) -> \"Table\":\n        \"\"\"Set cell padding.\"\"\"\n        self._padding = Padding.unpack(padding)\n        return self\n\n    def add_column(\n        self,\n        header: \"RenderableType\" = \"\",\n        footer: \"RenderableType\" = \"\",\n        *,\n        header_style: Optional[StyleType] = None,\n        footer_style: Optional[StyleType] = None,\n        style: Optional[StyleType] = None,\n        justify: \"JustifyMethod\" = \"left\",\n        vertical: \"VerticalAlignMethod\" = \"top\",\n        overflow: \"OverflowMethod\" = \"ellipsis\",\n        width: Optional[int] = None,\n        min_width: Optional[int] = None,\n        max_width: Optional[int] = None,\n        ratio: Optional[int] = None,\n        no_wrap: bool = False,\n    ) -> None:\n        \"\"\"Add a column to the table.\n\n        Args:\n            header (RenderableType, optional): Text or renderable for the header.\n                Defaults to \"\".\n            footer (RenderableType, optional): Text or renderable for the footer.\n                Defaults to \"\".\n            header_style (Union[str, Style], optional): Style for the header, or None for default. Defaults to None.\n            footer_style (Union[str, Style], optional): Style for the footer, or None for default. Defaults to None.\n            style (Union[str, Style], optional): Style for the column cells, or None for default. Defaults to None.\n            justify (JustifyMethod, optional): Alignment for cells. Defaults to \"left\".\n            vertical (VerticalAlignMethod, optional): Vertical alignment, one of \"top\", \"middle\", or \"bottom\". Defaults to \"top\".\n            overflow (OverflowMethod): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to \"ellipsis\".\n            width (int, optional): Desired width of column in characters, or None to fit to contents. Defaults to None.\n            min_width (Optional[int], optional): Minimum width of column, or ``None`` for no minimum. Defaults to None.\n            max_width (Optional[int], optional): Maximum width of column, or ``None`` for no maximum. Defaults to None.\n            ratio (int, optional): Flexible ratio for the column (requires ``Table.expand`` or ``Table.width``). Defaults to None.\n            no_wrap (bool, optional): Set to ``True`` to disable wrapping of this column.\n        \"\"\"\n\n        column = Column(\n            _index=len(self.columns),\n            header=header,\n            footer=footer,\n            header_style=header_style or \"\",\n            footer_style=footer_style or \"\",\n            style=style or \"\",\n            justify=justify,\n            vertical=vertical,\n            overflow=overflow,\n            width=width,\n            min_width=min_width,\n            max_width=max_width,\n            ratio=ratio,\n            no_wrap=no_wrap,\n        )\n        self.columns.append(column)\n\n    def add_row(\n        self,\n        *renderables: Optional[\"RenderableType\"],\n        style: Optional[StyleType] = None,\n        end_section: bool = False,\n    ) -> None:\n        \"\"\"Add a row of renderables.\n\n        Args:\n            *renderables (None or renderable): Each cell in a row must be a renderable object (including str),\n                or ``None`` for a blank cell.\n            style (StyleType, optional): An optional style to apply to the entire row. Defaults to None.\n            end_section (bool, optional): End a section and draw a line. Defaults to False.\n\n        Raises:\n            errors.NotRenderableError: If you add something that can't be rendered.\n        \"\"\"\n\n        def add_cell(column: Column, renderable: \"RenderableType\") -> None:\n            column._cells.append(renderable)\n\n        cell_renderables: List[Optional[\"RenderableType\"]] = list(renderables)\n\n        columns = self.columns\n        if len(cell_renderables) < len(columns):\n            cell_renderables = [\n                *cell_renderables,\n                *[None] * (len(columns) - len(cell_renderables)),\n            ]\n        for index, renderable in enumerate(cell_renderables):\n            if index == len(columns):\n                column = Column(_index=index)\n                for _ in self.rows:\n                    add_cell(column, Text(\"\"))\n                self.columns.append(column)\n            else:\n                column = columns[index]\n            if renderable is None:\n                add_cell(column, \"\")\n            elif is_renderable(renderable):\n                add_cell(column, renderable)\n            else:\n                raise errors.NotRenderableError(\n                    f\"unable to render {type(renderable).__name__}; a string or other renderable object is required\"\n                )\n        self.rows.append(Row(style=style, end_section=end_section))\n\n    def add_section(self) -> None:\n        \"\"\"Add a new section (draw a line after current row).\"\"\"\n\n        if self.rows:\n            self.rows[-1].end_section = True\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        if not self.columns:\n            yield Segment(\"\\n\")\n            return\n\n        max_width = options.max_width\n        if self.width is not None:\n            max_width = self.width\n\n        extra_width = self._extra_width\n        widths = self._calculate_column_widths(\n            console, options.update_width(max_width - extra_width)\n        )\n        table_width = sum(widths) + extra_width\n\n        render_options = options.update(\n            width=table_width, highlight=self.highlight, height=None\n        )\n\n        def render_annotation(\n            text: TextType, style: StyleType, justify: \"JustifyMethod\" = \"center\"\n        ) -> \"RenderResult\":\n            render_text = (\n                console.render_str(text, style=style, highlight=False)\n                if isinstance(text, str)\n                else text\n            )\n            return console.render(\n                render_text, options=render_options.update(justify=justify)\n            )\n\n        if self.title:\n            yield from render_annotation(\n                self.title,\n                style=Style.pick_first(self.title_style, \"table.title\"),\n                justify=self.title_justify,\n            )\n        yield from self._render(console, render_options, widths)\n        if self.caption:\n            yield from render_annotation(\n                self.caption,\n                style=Style.pick_first(self.caption_style, \"table.caption\"),\n                justify=self.caption_justify,\n            )\n\n    def _calculate_column_widths(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> List[int]:\n        \"\"\"Calculate the widths of each column, including padding, not including borders.\"\"\"\n        max_width = options.max_width\n        columns = self.columns\n        width_ranges = [\n            self._measure_column(console, options, column) for column in columns\n        ]\n        widths = [_range.maximum or 1 for _range in width_ranges]\n        get_padding_width = self._get_padding_width\n        extra_width = self._extra_width\n        if self.expand:\n            ratios = [col.ratio or 0 for col in columns if col.flexible]\n            if any(ratios):\n                fixed_widths = [\n                    0 if column.flexible else _range.maximum\n                    for _range, column in zip(width_ranges, columns)\n                ]\n                flex_minimum = [\n                    (column.width or 1) + get_padding_width(column._index)\n                    for column in columns\n                    if column.flexible\n                ]\n                flexible_width = max_width - sum(fixed_widths)\n                flex_widths = ratio_distribute(flexible_width, ratios, flex_minimum)\n                iter_flex_widths = iter(flex_widths)\n                for index, column in enumerate(columns):\n                    if column.flexible:\n                        widths[index] = fixed_widths[index] + next(iter_flex_widths)\n        table_width = sum(widths)\n\n        if table_width > max_width:\n            widths = self._collapse_widths(\n                widths,\n                [(column.width is None and not column.no_wrap) for column in columns],\n                max_width,\n            )\n            table_width = sum(widths)\n            # last resort, reduce columns evenly\n            if table_width > max_width:\n                excess_width = table_width - max_width\n                widths = ratio_reduce(excess_width, [1] * len(widths), widths, widths)\n                table_width = sum(widths)\n\n            width_ranges = [\n                self._measure_column(console, options.update_width(width), column)\n                for width, column in zip(widths, columns)\n            ]\n            widths = [_range.maximum or 0 for _range in width_ranges]\n\n        if (table_width < max_width and self.expand) or (\n            self.min_width is not None and table_width < (self.min_width - extra_width)\n        ):\n            _max_width = (\n                max_width\n                if self.min_width is None\n                else min(self.min_width - extra_width, max_width)\n            )\n            pad_widths = ratio_distribute(_max_width - table_width, widths)\n            widths = [_width + pad for _width, pad in zip(widths, pad_widths)]\n\n        return widths\n\n    @classmethod\n    def _collapse_widths(\n        cls, widths: List[int], wrapable: List[bool], max_width: int\n    ) -> List[int]:\n        \"\"\"Reduce widths so that the total is under max_width.\n\n        Args:\n            widths (List[int]): List of widths.\n            wrapable (List[bool]): List of booleans that indicate if a column may shrink.\n            max_width (int): Maximum width to reduce to.\n\n        Returns:\n            List[int]: A new list of widths.\n        \"\"\"\n        total_width = sum(widths)\n        excess_width = total_width - max_width\n        if any(wrapable):\n            while total_width and excess_width > 0:\n                max_column = max(\n                    width for width, allow_wrap in zip(widths, wrapable) if allow_wrap\n                )\n                second_max_column = max(\n                    width if allow_wrap and width != max_column else 0\n                    for width, allow_wrap in zip(widths, wrapable)\n                )\n                column_difference = max_column - second_max_column\n                ratios = [\n                    (1 if (width == max_column and allow_wrap) else 0)\n                    for width, allow_wrap in zip(widths, wrapable)\n                ]\n                if not any(ratios) or not column_difference:\n                    break\n                max_reduce = [min(excess_width, column_difference)] * len(widths)\n                widths = ratio_reduce(excess_width, ratios, max_reduce, widths)\n\n                total_width = sum(widths)\n                excess_width = total_width - max_width\n        return widths\n\n    def _get_cells(\n        self, console: \"Console\", column_index: int, column: Column\n    ) -> Iterable[_Cell]:\n        \"\"\"Get all the cells with padding and optional header.\"\"\"\n\n        collapse_padding = self.collapse_padding\n        pad_edge = self.pad_edge\n        padding = self.padding\n        any_padding = any(padding)\n\n        first_column = column_index == 0\n        last_column = column_index == len(self.columns) - 1\n\n        _padding_cache: Dict[Tuple[bool, bool], Tuple[int, int, int, int]] = {}\n\n        def get_padding(first_row: bool, last_row: bool) -> Tuple[int, int, int, int]:\n            cached = _padding_cache.get((first_row, last_row))\n            if cached:\n                return cached\n            top, right, bottom, left = padding\n\n            if collapse_padding:\n                if not first_column:\n                    left = max(0, left - right)\n                if not last_row:\n                    bottom = max(0, top - bottom)\n\n            if not pad_edge:\n                if first_column:\n                    left = 0\n                if last_column:\n                    right = 0\n                if first_row:\n                    top = 0\n                if last_row:\n                    bottom = 0\n            _padding = (top, right, bottom, left)\n            _padding_cache[(first_row, last_row)] = _padding\n            return _padding\n\n        raw_cells: List[Tuple[StyleType, \"RenderableType\"]] = []\n        _append = raw_cells.append\n        get_style = console.get_style\n        if self.show_header:\n            header_style = get_style(self.header_style or \"\") + get_style(\n                column.header_style\n            )\n            _append((header_style, column.header))\n        cell_style = get_style(column.style or \"\")\n        for cell in column.cells:\n            _append((cell_style, cell))\n        if self.show_footer:\n            footer_style = get_style(self.footer_style or \"\") + get_style(\n                column.footer_style\n            )\n            _append((footer_style, column.footer))\n\n        if any_padding:\n            _Padding = Padding\n            for first, last, (style, renderable) in loop_first_last(raw_cells):\n                yield _Cell(\n                    style,\n                    _Padding(renderable, get_padding(first, last)),\n                    getattr(renderable, \"vertical\", None) or column.vertical,\n                )\n        else:\n            for style, renderable in raw_cells:\n                yield _Cell(\n                    style,\n                    renderable,\n                    getattr(renderable, \"vertical\", None) or column.vertical,\n                )\n\n    def _get_padding_width(self, column_index: int) -> int:\n        \"\"\"Get extra width from padding.\"\"\"\n        _, pad_right, _, pad_left = self.padding\n        if self.collapse_padding:\n            if column_index > 0:\n                pad_left = max(0, pad_left - pad_right)\n        return pad_left + pad_right\n\n    def _measure_column(\n        self,\n        console: \"Console\",\n        options: \"ConsoleOptions\",\n        column: Column,\n    ) -> Measurement:\n        \"\"\"Get the minimum and maximum width of the column.\"\"\"\n\n        max_width = options.max_width\n        if max_width < 1:\n            return Measurement(0, 0)\n\n        padding_width = self._get_padding_width(column._index)\n\n        if column.width is not None:\n            # Fixed width column\n            return Measurement(\n                column.width + padding_width, column.width + padding_width\n            ).with_maximum(max_width)\n        # Flexible column, we need to measure contents\n        min_widths: List[int] = []\n        max_widths: List[int] = []\n        append_min = min_widths.append\n        append_max = max_widths.append\n        get_render_width = Measurement.get\n        for cell in self._get_cells(console, column._index, column):\n            _min, _max = get_render_width(console, options, cell.renderable)\n            append_min(_min)\n            append_max(_max)\n\n        measurement = Measurement(\n            max(min_widths) if min_widths else 1,\n            max(max_widths) if max_widths else max_width,\n        ).with_maximum(max_width)\n        measurement = measurement.clamp(\n            None if column.min_width is None else column.min_width + padding_width,\n            None if column.max_width is None else column.max_width + padding_width,\n        )\n        return measurement\n\n    def _render(\n        self, console: \"Console\", options: \"ConsoleOptions\", widths: List[int]\n    ) -> \"RenderResult\":\n        table_style = console.get_style(self.style or \"\")\n\n        border_style = table_style + console.get_style(self.border_style or \"\")\n        _column_cells = (\n            self._get_cells(console, column_index, column)\n            for column_index, column in enumerate(self.columns)\n        )\n        row_cells: List[Tuple[_Cell, ...]] = list(zip(*_column_cells))\n        _box = (\n            self.box.substitute(\n                options, safe=pick_bool(self.safe_box, console.safe_box)\n            )\n            if self.box\n            else None\n        )\n        _box = _box.get_plain_headed_box() if _box and not self.show_header else _box\n\n        new_line = Segment.line()\n\n        columns = self.columns\n        show_header = self.show_header\n        show_footer = self.show_footer\n        show_edge = self.show_edge\n        show_lines = self.show_lines\n        leading = self.leading\n\n        _Segment = Segment\n        if _box:\n            box_segments = [\n                (\n                    _Segment(_box.head_left, border_style),\n                    _Segment(_box.head_right, border_style),\n                    _Segment(_box.head_vertical, border_style),\n                ),\n                (\n                    _Segment(_box.foot_left, border_style),\n                    _Segment(_box.foot_right, border_style),\n                    _Segment(_box.foot_vertical, border_style),\n                ),\n                (\n                    _Segment(_box.mid_left, border_style),\n                    _Segment(_box.mid_right, border_style),\n                    _Segment(_box.mid_vertical, border_style),\n                ),\n            ]\n            if show_edge:\n                yield _Segment(_box.get_top(widths), border_style)\n                yield new_line\n        else:\n            box_segments = []\n\n        get_row_style = self.get_row_style\n        get_style = console.get_style\n\n        for index, (first, last, row_cell) in enumerate(loop_first_last(row_cells)):\n            header_row = first and show_header\n            footer_row = last and show_footer\n            row = (\n                self.rows[index - show_header]\n                if (not header_row and not footer_row)\n                else None\n            )\n            max_height = 1\n            cells: List[List[List[Segment]]] = []\n            if header_row or footer_row:\n                row_style = Style.null()\n            else:\n                row_style = get_style(\n                    get_row_style(console, index - 1 if show_header else index)\n                )\n            for width, cell, column in zip(widths, row_cell, columns):\n                render_options = options.update(\n                    width=width,\n                    justify=column.justify,\n                    no_wrap=column.no_wrap,\n                    overflow=column.overflow,\n                    height=None,\n                )\n                lines = console.render_lines(\n                    cell.renderable,\n                    render_options,\n                    style=get_style(cell.style) + row_style,\n                )\n                max_height = max(max_height, len(lines))\n                cells.append(lines)\n\n            row_height = max(len(cell) for cell in cells)\n\n            def align_cell(\n                cell: List[List[Segment]],\n                vertical: \"VerticalAlignMethod\",\n                width: int,\n                style: Style,\n            ) -> List[List[Segment]]:\n                if header_row:\n                    vertical = \"bottom\"\n                elif footer_row:\n                    vertical = \"top\"\n\n                if vertical == \"top\":\n                    return _Segment.align_top(cell, width, row_height, style)\n                elif vertical == \"middle\":\n                    return _Segment.align_middle(cell, width, row_height, style)\n                return _Segment.align_bottom(cell, width, row_height, style)\n\n            cells[:] = [\n                _Segment.set_shape(\n                    align_cell(\n                        cell,\n                        _cell.vertical,\n                        width,\n                        get_style(_cell.style) + row_style,\n                    ),\n                    width,\n                    max_height,\n                )\n                for width, _cell, cell, column in zip(widths, row_cell, cells, columns)\n            ]\n\n            if _box:\n                if last and show_footer:\n                    yield _Segment(\n                        _box.get_row(widths, \"foot\", edge=show_edge), border_style\n                    )\n                    yield new_line\n                left, right, _divider = box_segments[0 if first else (2 if last else 1)]\n\n                # If the column divider is whitespace also style it with the row background\n                divider = (\n                    _divider\n                    if _divider.text.strip()\n                    else _Segment(\n                        _divider.text, row_style.background_style + _divider.style\n                    )\n                )\n                for line_no in range(max_height):\n                    if show_edge:\n                        yield left\n                    for last_cell, rendered_cell in loop_last(cells):\n                        yield from rendered_cell[line_no]\n                        if not last_cell:\n                            yield divider\n                    if show_edge:\n                        yield right\n                    yield new_line\n            else:\n                for line_no in range(max_height):\n                    for rendered_cell in cells:\n                        yield from rendered_cell[line_no]\n                    yield new_line\n            if _box and first and show_header:\n                yield _Segment(\n                    _box.get_row(widths, \"head\", edge=show_edge), border_style\n                )\n                yield new_line\n            end_section = row and row.end_section\n            if _box and (show_lines or leading or end_section):\n                if (\n                    not last\n                    and not (show_footer and index >= len(row_cells) - 2)\n                    and not (show_header and header_row)\n                ):\n                    if leading:\n                        yield _Segment(\n                            _box.get_row(widths, \"mid\", edge=show_edge) * leading,\n                            border_style,\n                        )\n                    else:\n                        yield _Segment(\n                            _box.get_row(widths, \"row\", edge=show_edge), border_style\n                        )\n                    yield new_line\n\n        if _box and show_edge:\n            yield _Segment(_box.get_bottom(widths), border_style)\n            yield new_line\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.console import Console\n    from rich.highlighter import ReprHighlighter\n    from rich.table import Table as Table\n\n    from ._timer import timer\n\n    with timer(\"Table render\"):\n        table = Table(\n            title=\"Star Wars Movies\",\n            caption=\"Rich example table\",\n            caption_justify=\"right\",\n        )\n\n        table.add_column(\n            \"Released\", header_style=\"bright_cyan\", style=\"cyan\", no_wrap=True\n        )\n        table.add_column(\"Title\", style=\"magenta\")\n        table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n        table.add_row(\n            \"Dec 20, 2019\",\n            \"Star Wars: The Rise of Skywalker\",\n            \"$952,110,690\",\n        )\n        table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n        table.add_row(\n            \"Dec 15, 2017\",\n            \"Star Wars Ep. V111: The Last Jedi\",\n            \"$1,332,539,889\",\n            style=\"on black\",\n            end_section=True,\n        )\n        table.add_row(\n            \"Dec 16, 2016\",\n            \"Rogue One: A Star Wars Story\",\n            \"$1,332,439,889\",\n        )\n\n        def header(text: str) -> None:\n            console.print()\n            console.rule(highlight(text))\n            console.print()\n\n        console = Console()\n        highlight = ReprHighlighter()\n        header(\"Example Table\")\n        console.print(table, justify=\"center\")\n\n        table.expand = True\n        header(\"expand=True\")\n        console.print(table)\n\n        table.width = 50\n        header(\"width=50\")\n\n        console.print(table, justify=\"center\")\n\n        table.width = None\n        table.expand = False\n        table.row_styles = [\"dim\", \"none\"]\n        header(\"row_styles=['dim', 'none']\")\n\n        console.print(table, justify=\"center\")\n\n        table.width = None\n        table.expand = False\n        table.row_styles = [\"dim\", \"none\"]\n        table.leading = 1\n        header(\"leading=1, row_styles=['dim', 'none']\")\n        console.print(table, justify=\"center\")\n\n        table.width = None\n        table.expand = False\n        table.row_styles = [\"dim\", \"none\"]\n        table.show_lines = True\n        table.leading = 0\n        header(\"show_lines=True, row_styles=['dim', 'none']\")\n        console.print(table, justify=\"center\")\n", "rich/highlighter.py": "import re\nfrom abc import ABC, abstractmethod\nfrom typing import List, Union\n\nfrom .text import Span, Text\n\n\ndef _combine_regex(*regexes: str) -> str:\n    \"\"\"Combine a number of regexes in to a single regex.\n\n    Returns:\n        str: New regex with all regexes ORed together.\n    \"\"\"\n    return \"|\".join(regexes)\n\n\nclass Highlighter(ABC):\n    \"\"\"Abstract base class for highlighters.\"\"\"\n\n    def __call__(self, text: Union[str, Text]) -> Text:\n        \"\"\"Highlight a str or Text instance.\n\n        Args:\n            text (Union[str, ~Text]): Text to highlight.\n\n        Raises:\n            TypeError: If not called with text or str.\n\n        Returns:\n            Text: A test instance with highlighting applied.\n        \"\"\"\n        if isinstance(text, str):\n            highlight_text = Text(text)\n        elif isinstance(text, Text):\n            highlight_text = text.copy()\n        else:\n            raise TypeError(f\"str or Text instance required, not {text!r}\")\n        self.highlight(highlight_text)\n        return highlight_text\n\n    @abstractmethod\n    def highlight(self, text: Text) -> None:\n        \"\"\"Apply highlighting in place to text.\n\n        Args:\n            text (~Text): A text object highlight.\n        \"\"\"\n\n\nclass NullHighlighter(Highlighter):\n    \"\"\"A highlighter object that doesn't highlight.\n\n    May be used to disable highlighting entirely.\n\n    \"\"\"\n\n    def highlight(self, text: Text) -> None:\n        \"\"\"Nothing to do\"\"\"\n\n\nclass RegexHighlighter(Highlighter):\n    \"\"\"Applies highlighting from a list of regular expressions.\"\"\"\n\n    highlights: List[str] = []\n    base_style: str = \"\"\n\n    def highlight(self, text: Text) -> None:\n        \"\"\"Highlight :class:`rich.text.Text` using regular expressions.\n\n        Args:\n            text (~Text): Text to highlighted.\n\n        \"\"\"\n\n        highlight_regex = text.highlight_regex\n        for re_highlight in self.highlights:\n            highlight_regex(re_highlight, style_prefix=self.base_style)\n\n\nclass ReprHighlighter(RegexHighlighter):\n    \"\"\"Highlights the text typically produced from ``__repr__`` methods.\"\"\"\n\n    base_style = \"repr.\"\n    highlights = [\n        r\"(?P<tag_start><)(?P<tag_name>[-\\w.:|]*)(?P<tag_contents>[\\w\\W]*)(?P<tag_end>>)\",\n        r'(?P<attrib_name>[\\w_]{1,50})=(?P<attrib_value>\"?[\\w_]+\"?)?',\n        r\"(?P<brace>[][{}()])\",\n        _combine_regex(\n            r\"(?P<ipv4>[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\",\n            r\"(?P<ipv6>([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})\",\n            r\"(?P<eui64>(?:[0-9A-Fa-f]{1,2}-){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){3}[0-9A-Fa-f]{4})\",\n            r\"(?P<eui48>(?:[0-9A-Fa-f]{1,2}-){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){2}[0-9A-Fa-f]{4})\",\n            r\"(?P<uuid>[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\",\n            r\"(?P<call>[\\w.]*?)\\(\",\n            r\"\\b(?P<bool_true>True)\\b|\\b(?P<bool_false>False)\\b|\\b(?P<none>None)\\b\",\n            r\"(?P<ellipsis>\\.\\.\\.)\",\n            r\"(?P<number_complex>(?<!\\w)(?:\\-?[0-9]+\\.?[0-9]*(?:e[-+]?\\d+?)?)(?:[-+](?:[0-9]+\\.?[0-9]*(?:e[-+]?\\d+)?))?j)\",\n            r\"(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[-+]?\\d+?)?\\b|0x[0-9a-fA-F]*)\",\n            r\"(?P<path>\\B(/[-\\w._+]+)*\\/)(?P<filename>[-\\w._+]*)?\",\n            r\"(?<![\\\\\\w])(?P<str>b?'''.*?(?<!\\\\)'''|b?'.*?(?<!\\\\)'|b?\\\"\\\"\\\".*?(?<!\\\\)\\\"\\\"\\\"|b?\\\".*?(?<!\\\\)\\\")\",\n            r\"(?P<url>(file|https|http|ws|wss)://[-0-9a-zA-Z$_+!`(),.?/;:&=%#~]*)\",\n        ),\n    ]\n\n\nclass JSONHighlighter(RegexHighlighter):\n    \"\"\"Highlights JSON\"\"\"\n\n    # Captures the start and end of JSON strings, handling escaped quotes\n    JSON_STR = r\"(?<![\\\\\\w])(?P<str>b?\\\".*?(?<!\\\\)\\\")\"\n    JSON_WHITESPACE = {\" \", \"\\n\", \"\\r\", \"\\t\"}\n\n    base_style = \"json.\"\n    highlights = [\n        _combine_regex(\n            r\"(?P<brace>[\\{\\[\\(\\)\\]\\}])\",\n            r\"\\b(?P<bool_true>true)\\b|\\b(?P<bool_false>false)\\b|\\b(?P<null>null)\\b\",\n            r\"(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[\\-\\+]?\\d+?)?\\b|0x[0-9a-fA-F]*)\",\n            JSON_STR,\n        ),\n    ]\n\n    def highlight(self, text: Text) -> None:\n        super().highlight(text)\n\n        # Additional work to handle highlighting JSON keys\n        plain = text.plain\n        append = text.spans.append\n        whitespace = self.JSON_WHITESPACE\n        for match in re.finditer(self.JSON_STR, plain):\n            start, end = match.span()\n            cursor = end\n            while cursor < len(plain):\n                char = plain[cursor]\n                cursor += 1\n                if char == \":\":\n                    append(Span(start, end, \"json.key\"))\n                elif char in whitespace:\n                    continue\n                break\n\n\nclass ISO8601Highlighter(RegexHighlighter):\n    \"\"\"Highlights the ISO8601 date time strings.\n    Regex reference: https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html\n    \"\"\"\n\n    base_style = \"iso8601.\"\n    highlights = [\n        #\n        # Dates\n        #\n        # Calendar month (e.g. 2008-08). The hyphen is required\n        r\"^(?P<year>[0-9]{4})-(?P<month>1[0-2]|0[1-9])$\",\n        # Calendar date w/o hyphens (e.g. 20080830)\n        r\"^(?P<date>(?P<year>[0-9]{4})(?P<month>1[0-2]|0[1-9])(?P<day>3[01]|0[1-9]|[12][0-9]))$\",\n        # Ordinal date (e.g. 2008-243). The hyphen is optional\n        r\"^(?P<date>(?P<year>[0-9]{4})-?(?P<day>36[0-6]|3[0-5][0-9]|[12][0-9]{2}|0[1-9][0-9]|00[1-9]))$\",\n        #\n        # Weeks\n        #\n        # Week of the year (e.g., 2008-W35). The hyphen is optional\n        r\"^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9]))$\",\n        # Week date (e.g., 2008-W35-6). The hyphens are optional\n        r\"^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9])-?(?P<day>[1-7]))$\",\n        #\n        # Times\n        #\n        # Hours and minutes (e.g., 17:21). The colon is optional\n        r\"^(?P<time>(?P<hour>2[0-3]|[01][0-9]):?(?P<minute>[0-5][0-9]))$\",\n        # Hours, minutes, and seconds w/o colons (e.g., 172159)\n        r\"^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))$\",\n        # Time zone designator (e.g., Z, +07 or +07:00). The colons and the minutes are optional\n        r\"^(?P<timezone>(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?))$\",\n        # Hours, minutes, and seconds with time zone designator (e.g., 17:21:59+07:00).\n        # All the colons are optional. The minutes in the time zone designator are also optional\n        r\"^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$\",\n        #\n        # Date and Time\n        #\n        # Calendar date with hours, minutes, and seconds (e.g., 2008-08-30 17:21:59 or 20080830 172159).\n        # A space is required between the date and the time. The hyphens and colons are optional.\n        # This regex matches dates and times that specify some hyphens or colons but omit others.\n        # This does not follow ISO 8601\n        r\"^(?P<date>(?P<year>[0-9]{4})(?P<hyphen>-)?(?P<month>1[0-2]|0[1-9])(?(hyphen)-)(?P<day>3[01]|0[1-9]|[12][0-9])) (?P<time>(?P<hour>2[0-3]|[01][0-9])(?(hyphen):)(?P<minute>[0-5][0-9])(?(hyphen):)(?P<second>[0-5][0-9]))$\",\n        #\n        # XML Schema dates and times\n        #\n        # Date, with optional time zone (e.g., 2008-08-30 or 2008-08-30+07:00).\n        # Hyphens are required. This is the XML Schema 'date' type\n        r\"^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$\",\n        # Time, with optional fractional seconds and time zone (e.g., 01:45:36 or 01:45:36.123+07:00).\n        # There is no limit on the number of digits for the fractional seconds. This is the XML Schema 'time' type\n        r\"^(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<frac>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$\",\n        # Date and time, with optional fractional seconds and time zone (e.g., 2008-08-30T01:45:36 or 2008-08-30T01:45:36.123Z).\n        # This is the XML Schema 'dateTime' type\n        r\"^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))T(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<ms>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$\",\n    ]\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from .console import Console\n\n    console = Console()\n    console.print(\"[bold green]hello world![/bold green]\")\n    console.print(\"'[bold green]hello world![/bold green]'\")\n\n    console.print(\" /foo\")\n    console.print(\"/foo/\")\n    console.print(\"/foo/bar\")\n    console.print(\"foo/bar/baz\")\n\n    console.print(\"/foo/bar/baz?foo=bar+egg&egg=baz\")\n    console.print(\"/foo/bar/baz/\")\n    console.print(\"/foo/bar/baz/egg\")\n    console.print(\"/foo/bar/baz/egg.py\")\n    console.print(\"/foo/bar/baz/egg.py word\")\n    console.print(\" /foo/bar/baz/egg.py word\")\n    console.print(\"foo /foo/bar/baz/egg.py word\")\n    console.print(\"foo /foo/bar/ba._++z/egg+.py word\")\n    console.print(\"https://example.org?foo=bar#header\")\n\n    console.print(1234567.34)\n    console.print(1 / 2)\n    console.print(-1 / 123123123123)\n\n    console.print(\n        \"127.0.1.1 bar 192.168.1.4 2001:0db8:85a3:0000:0000:8a2e:0370:7334 foo\"\n    )\n    import json\n\n    console.print_json(json.dumps(obj={\"name\": \"apple\", \"count\": 1}), indent=None)\n", "rich/_win32_console.py": "\"\"\"Light wrapper around the Win32 Console API - this module should only be imported on Windows\n\nThe API that this module wraps is documented at https://docs.microsoft.com/en-us/windows/console/console-functions\n\"\"\"\nimport ctypes\nimport sys\nfrom typing import Any\n\nwindll: Any = None\nif sys.platform == \"win32\":\n    windll = ctypes.LibraryLoader(ctypes.WinDLL)\nelse:\n    raise ImportError(f\"{__name__} can only be imported on Windows\")\n\nimport time\nfrom ctypes import Structure, byref, wintypes\nfrom typing import IO, NamedTuple, Type, cast\n\nfrom rich.color import ColorSystem\nfrom rich.style import Style\n\nSTDOUT = -11\nENABLE_VIRTUAL_TERMINAL_PROCESSING = 4\n\nCOORD = wintypes._COORD\n\n\nclass LegacyWindowsError(Exception):\n    pass\n\n\nclass WindowsCoordinates(NamedTuple):\n    \"\"\"Coordinates in the Windows Console API are (y, x), not (x, y).\n    This class is intended to prevent that confusion.\n    Rows and columns are indexed from 0.\n    This class can be used in place of wintypes._COORD in arguments and argtypes.\n    \"\"\"\n\n    row: int\n    col: int\n\n    @classmethod\n    def from_param(cls, value: \"WindowsCoordinates\") -> COORD:\n        \"\"\"Converts a WindowsCoordinates into a wintypes _COORD structure.\n        This classmethod is internally called by ctypes to perform the conversion.\n\n        Args:\n            value (WindowsCoordinates): The input coordinates to convert.\n\n        Returns:\n            wintypes._COORD: The converted coordinates struct.\n        \"\"\"\n        return COORD(value.col, value.row)\n\n\nclass CONSOLE_SCREEN_BUFFER_INFO(Structure):\n    _fields_ = [\n        (\"dwSize\", COORD),\n        (\"dwCursorPosition\", COORD),\n        (\"wAttributes\", wintypes.WORD),\n        (\"srWindow\", wintypes.SMALL_RECT),\n        (\"dwMaximumWindowSize\", COORD),\n    ]\n\n\nclass CONSOLE_CURSOR_INFO(ctypes.Structure):\n    _fields_ = [(\"dwSize\", wintypes.DWORD), (\"bVisible\", wintypes.BOOL)]\n\n\n_GetStdHandle = windll.kernel32.GetStdHandle\n_GetStdHandle.argtypes = [\n    wintypes.DWORD,\n]\n_GetStdHandle.restype = wintypes.HANDLE\n\n\ndef GetStdHandle(handle: int = STDOUT) -> wintypes.HANDLE:\n    \"\"\"Retrieves a handle to the specified standard device (standard input, standard output, or standard error).\n\n    Args:\n        handle (int): Integer identifier for the handle. Defaults to -11 (stdout).\n\n    Returns:\n        wintypes.HANDLE: The handle\n    \"\"\"\n    return cast(wintypes.HANDLE, _GetStdHandle(handle))\n\n\n_GetConsoleMode = windll.kernel32.GetConsoleMode\n_GetConsoleMode.argtypes = [wintypes.HANDLE, wintypes.LPDWORD]\n_GetConsoleMode.restype = wintypes.BOOL\n\n\ndef GetConsoleMode(std_handle: wintypes.HANDLE) -> int:\n    \"\"\"Retrieves the current input mode of a console's input buffer\n    or the current output mode of a console screen buffer.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n\n    Raises:\n        LegacyWindowsError: If any error occurs while calling the Windows console API.\n\n    Returns:\n        int: Value representing the current console mode as documented at\n            https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters\n    \"\"\"\n\n    console_mode = wintypes.DWORD()\n    success = bool(_GetConsoleMode(std_handle, console_mode))\n    if not success:\n        raise LegacyWindowsError(\"Unable to get legacy Windows Console Mode\")\n    return console_mode.value\n\n\n_FillConsoleOutputCharacterW = windll.kernel32.FillConsoleOutputCharacterW\n_FillConsoleOutputCharacterW.argtypes = [\n    wintypes.HANDLE,\n    ctypes.c_char,\n    wintypes.DWORD,\n    cast(Type[COORD], WindowsCoordinates),\n    ctypes.POINTER(wintypes.DWORD),\n]\n_FillConsoleOutputCharacterW.restype = wintypes.BOOL\n\n\ndef FillConsoleOutputCharacter(\n    std_handle: wintypes.HANDLE,\n    char: str,\n    length: int,\n    start: WindowsCoordinates,\n) -> int:\n    \"\"\"Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        char (str): The character to write. Must be a string of length 1.\n        length (int): The number of times to write the character.\n        start (WindowsCoordinates): The coordinates to start writing at.\n\n    Returns:\n        int: The number of characters written.\n    \"\"\"\n    character = ctypes.c_char(char.encode())\n    num_characters = wintypes.DWORD(length)\n    num_written = wintypes.DWORD(0)\n    _FillConsoleOutputCharacterW(\n        std_handle,\n        character,\n        num_characters,\n        start,\n        byref(num_written),\n    )\n    return num_written.value\n\n\n_FillConsoleOutputAttribute = windll.kernel32.FillConsoleOutputAttribute\n_FillConsoleOutputAttribute.argtypes = [\n    wintypes.HANDLE,\n    wintypes.WORD,\n    wintypes.DWORD,\n    cast(Type[COORD], WindowsCoordinates),\n    ctypes.POINTER(wintypes.DWORD),\n]\n_FillConsoleOutputAttribute.restype = wintypes.BOOL\n\n\ndef FillConsoleOutputAttribute(\n    std_handle: wintypes.HANDLE,\n    attributes: int,\n    length: int,\n    start: WindowsCoordinates,\n) -> int:\n    \"\"\"Sets the character attributes for a specified number of character cells,\n    beginning at the specified coordinates in a screen buffer.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        attributes (int): Integer value representing the foreground and background colours of the cells.\n        length (int): The number of cells to set the output attribute of.\n        start (WindowsCoordinates): The coordinates of the first cell whose attributes are to be set.\n\n    Returns:\n        int: The number of cells whose attributes were actually set.\n    \"\"\"\n    num_cells = wintypes.DWORD(length)\n    style_attrs = wintypes.WORD(attributes)\n    num_written = wintypes.DWORD(0)\n    _FillConsoleOutputAttribute(\n        std_handle, style_attrs, num_cells, start, byref(num_written)\n    )\n    return num_written.value\n\n\n_SetConsoleTextAttribute = windll.kernel32.SetConsoleTextAttribute\n_SetConsoleTextAttribute.argtypes = [\n    wintypes.HANDLE,\n    wintypes.WORD,\n]\n_SetConsoleTextAttribute.restype = wintypes.BOOL\n\n\ndef SetConsoleTextAttribute(\n    std_handle: wintypes.HANDLE, attributes: wintypes.WORD\n) -> bool:\n    \"\"\"Set the colour attributes for all text written after this function is called.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        attributes (int): Integer value representing the foreground and background colours.\n\n\n    Returns:\n        bool: True if the attribute was set successfully, otherwise False.\n    \"\"\"\n    return bool(_SetConsoleTextAttribute(std_handle, attributes))\n\n\n_GetConsoleScreenBufferInfo = windll.kernel32.GetConsoleScreenBufferInfo\n_GetConsoleScreenBufferInfo.argtypes = [\n    wintypes.HANDLE,\n    ctypes.POINTER(CONSOLE_SCREEN_BUFFER_INFO),\n]\n_GetConsoleScreenBufferInfo.restype = wintypes.BOOL\n\n\ndef GetConsoleScreenBufferInfo(\n    std_handle: wintypes.HANDLE,\n) -> CONSOLE_SCREEN_BUFFER_INFO:\n    \"\"\"Retrieves information about the specified console screen buffer.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n\n    Returns:\n        CONSOLE_SCREEN_BUFFER_INFO: A CONSOLE_SCREEN_BUFFER_INFO ctype struct contain information about\n            screen size, cursor position, colour attributes, and more.\"\"\"\n    console_screen_buffer_info = CONSOLE_SCREEN_BUFFER_INFO()\n    _GetConsoleScreenBufferInfo(std_handle, byref(console_screen_buffer_info))\n    return console_screen_buffer_info\n\n\n_SetConsoleCursorPosition = windll.kernel32.SetConsoleCursorPosition\n_SetConsoleCursorPosition.argtypes = [\n    wintypes.HANDLE,\n    cast(Type[COORD], WindowsCoordinates),\n]\n_SetConsoleCursorPosition.restype = wintypes.BOOL\n\n\ndef SetConsoleCursorPosition(\n    std_handle: wintypes.HANDLE, coords: WindowsCoordinates\n) -> bool:\n    \"\"\"Set the position of the cursor in the console screen\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        coords (WindowsCoordinates): The coordinates to move the cursor to.\n\n    Returns:\n        bool: True if the function succeeds, otherwise False.\n    \"\"\"\n    return bool(_SetConsoleCursorPosition(std_handle, coords))\n\n\n_GetConsoleCursorInfo = windll.kernel32.GetConsoleCursorInfo\n_GetConsoleCursorInfo.argtypes = [\n    wintypes.HANDLE,\n    ctypes.POINTER(CONSOLE_CURSOR_INFO),\n]\n_GetConsoleCursorInfo.restype = wintypes.BOOL\n\n\ndef GetConsoleCursorInfo(\n    std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO\n) -> bool:\n    \"\"\"Get the cursor info - used to get cursor visibility and width\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct that receives information\n            about the console's cursor.\n\n    Returns:\n          bool: True if the function succeeds, otherwise False.\n    \"\"\"\n    return bool(_GetConsoleCursorInfo(std_handle, byref(cursor_info)))\n\n\n_SetConsoleCursorInfo = windll.kernel32.SetConsoleCursorInfo\n_SetConsoleCursorInfo.argtypes = [\n    wintypes.HANDLE,\n    ctypes.POINTER(CONSOLE_CURSOR_INFO),\n]\n_SetConsoleCursorInfo.restype = wintypes.BOOL\n\n\ndef SetConsoleCursorInfo(\n    std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO\n) -> bool:\n    \"\"\"Set the cursor info - used for adjusting cursor visibility and width\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct containing the new cursor info.\n\n    Returns:\n          bool: True if the function succeeds, otherwise False.\n    \"\"\"\n    return bool(_SetConsoleCursorInfo(std_handle, byref(cursor_info)))\n\n\n_SetConsoleTitle = windll.kernel32.SetConsoleTitleW\n_SetConsoleTitle.argtypes = [wintypes.LPCWSTR]\n_SetConsoleTitle.restype = wintypes.BOOL\n\n\ndef SetConsoleTitle(title: str) -> bool:\n    \"\"\"Sets the title of the current console window\n\n    Args:\n        title (str): The new title of the console window.\n\n    Returns:\n        bool: True if the function succeeds, otherwise False.\n    \"\"\"\n    return bool(_SetConsoleTitle(title))\n\n\nclass LegacyWindowsTerm:\n    \"\"\"This class allows interaction with the legacy Windows Console API. It should only be used in the context\n    of environments where virtual terminal processing is not available. However, if it is used in a Windows environment,\n    the entire API should work.\n\n    Args:\n        file (IO[str]): The file which the Windows Console API HANDLE is retrieved from, defaults to sys.stdout.\n    \"\"\"\n\n    BRIGHT_BIT = 8\n\n    # Indices are ANSI color numbers, values are the corresponding Windows Console API color numbers\n    ANSI_TO_WINDOWS = [\n        0,  # black                      The Windows colours are defined in wincon.h as follows:\n        4,  # red                         define FOREGROUND_BLUE            0x0001 -- 0000 0001\n        2,  # green                       define FOREGROUND_GREEN           0x0002 -- 0000 0010\n        6,  # yellow                      define FOREGROUND_RED             0x0004 -- 0000 0100\n        1,  # blue                        define FOREGROUND_INTENSITY       0x0008 -- 0000 1000\n        5,  # magenta                     define BACKGROUND_BLUE            0x0010 -- 0001 0000\n        3,  # cyan                        define BACKGROUND_GREEN           0x0020 -- 0010 0000\n        7,  # white                       define BACKGROUND_RED             0x0040 -- 0100 0000\n        8,  # bright black (grey)         define BACKGROUND_INTENSITY       0x0080 -- 1000 0000\n        12,  # bright red\n        10,  # bright green\n        14,  # bright yellow\n        9,  # bright blue\n        13,  # bright magenta\n        11,  # bright cyan\n        15,  # bright white\n    ]\n\n    def __init__(self, file: \"IO[str]\") -> None:\n        handle = GetStdHandle(STDOUT)\n        self._handle = handle\n        default_text = GetConsoleScreenBufferInfo(handle).wAttributes\n        self._default_text = default_text\n\n        self._default_fore = default_text & 7\n        self._default_back = (default_text >> 4) & 7\n        self._default_attrs = self._default_fore | (self._default_back << 4)\n\n        self._file = file\n        self.write = file.write\n        self.flush = file.flush\n\n    @property\n    def cursor_position(self) -> WindowsCoordinates:\n        \"\"\"Returns the current position of the cursor (0-based)\n\n        Returns:\n            WindowsCoordinates: The current cursor position.\n        \"\"\"\n        coord: COORD = GetConsoleScreenBufferInfo(self._handle).dwCursorPosition\n        return WindowsCoordinates(row=cast(int, coord.Y), col=cast(int, coord.X))\n\n    @property\n    def screen_size(self) -> WindowsCoordinates:\n        \"\"\"Returns the current size of the console screen buffer, in character columns and rows\n\n        Returns:\n            WindowsCoordinates: The width and height of the screen as WindowsCoordinates.\n        \"\"\"\n        screen_size: COORD = GetConsoleScreenBufferInfo(self._handle).dwSize\n        return WindowsCoordinates(\n            row=cast(int, screen_size.Y), col=cast(int, screen_size.X)\n        )\n\n    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n    def write_styled(self, text: str, style: Style) -> None:\n        \"\"\"Write styled text to the terminal.\n\n        Args:\n            text (str): The text to write\n            style (Style): The style of the text\n        \"\"\"\n        color = style.color\n        bgcolor = style.bgcolor\n        if style.reverse:\n            color, bgcolor = bgcolor, color\n\n        if color:\n            fore = color.downgrade(ColorSystem.WINDOWS).number\n            fore = fore if fore is not None else 7  # Default to ANSI 7: White\n            if style.bold:\n                fore = fore | self.BRIGHT_BIT\n            if style.dim:\n                fore = fore & ~self.BRIGHT_BIT\n            fore = self.ANSI_TO_WINDOWS[fore]\n        else:\n            fore = self._default_fore\n\n        if bgcolor:\n            back = bgcolor.downgrade(ColorSystem.WINDOWS).number\n            back = back if back is not None else 0  # Default to ANSI 0: Black\n            back = self.ANSI_TO_WINDOWS[back]\n        else:\n            back = self._default_back\n\n        assert fore is not None\n        assert back is not None\n\n        SetConsoleTextAttribute(\n            self._handle, attributes=ctypes.c_ushort(fore | (back << 4))\n        )\n        self.write_text(text)\n        SetConsoleTextAttribute(self._handle, attributes=self._default_text)\n\n    def move_cursor_to(self, new_position: WindowsCoordinates) -> None:\n        \"\"\"Set the position of the cursor\n\n        Args:\n            new_position (WindowsCoordinates): The WindowsCoordinates representing the new position of the cursor.\n        \"\"\"\n        if new_position.col < 0 or new_position.row < 0:\n            return\n        SetConsoleCursorPosition(self._handle, coords=new_position)\n\n    def erase_line(self) -> None:\n        \"\"\"Erase all content on the line the cursor is currently located at\"\"\"\n        screen_size = self.screen_size\n        cursor_position = self.cursor_position\n        cells_to_erase = screen_size.col\n        start_coordinates = WindowsCoordinates(row=cursor_position.row, col=0)\n        FillConsoleOutputCharacter(\n            self._handle, \" \", length=cells_to_erase, start=start_coordinates\n        )\n        FillConsoleOutputAttribute(\n            self._handle,\n            self._default_attrs,\n            length=cells_to_erase,\n            start=start_coordinates,\n        )\n\n    def erase_end_of_line(self) -> None:\n        \"\"\"Erase all content from the cursor position to the end of that line\"\"\"\n        cursor_position = self.cursor_position\n        cells_to_erase = self.screen_size.col - cursor_position.col\n        FillConsoleOutputCharacter(\n            self._handle, \" \", length=cells_to_erase, start=cursor_position\n        )\n        FillConsoleOutputAttribute(\n            self._handle,\n            self._default_attrs,\n            length=cells_to_erase,\n            start=cursor_position,\n        )\n\n    def erase_start_of_line(self) -> None:\n        \"\"\"Erase all content from the cursor position to the start of that line\"\"\"\n        row, col = self.cursor_position\n        start = WindowsCoordinates(row, 0)\n        FillConsoleOutputCharacter(self._handle, \" \", length=col, start=start)\n        FillConsoleOutputAttribute(\n            self._handle, self._default_attrs, length=col, start=start\n        )\n\n    def move_cursor_up(self) -> None:\n        \"\"\"Move the cursor up a single cell\"\"\"\n        cursor_position = self.cursor_position\n        SetConsoleCursorPosition(\n            self._handle,\n            coords=WindowsCoordinates(\n                row=cursor_position.row - 1, col=cursor_position.col\n            ),\n        )\n\n    def move_cursor_down(self) -> None:\n        \"\"\"Move the cursor down a single cell\"\"\"\n        cursor_position = self.cursor_position\n        SetConsoleCursorPosition(\n            self._handle,\n            coords=WindowsCoordinates(\n                row=cursor_position.row + 1,\n                col=cursor_position.col,\n            ),\n        )\n\n    def move_cursor_forward(self) -> None:\n        \"\"\"Move the cursor forward a single cell. Wrap to the next line if required.\"\"\"\n        row, col = self.cursor_position\n        if col == self.screen_size.col - 1:\n            row += 1\n            col = 0\n        else:\n            col += 1\n        SetConsoleCursorPosition(\n            self._handle, coords=WindowsCoordinates(row=row, col=col)\n        )\n\n    def move_cursor_to_column(self, column: int) -> None:\n        \"\"\"Move cursor to the column specified by the zero-based column index, staying on the same row\n\n        Args:\n            column (int): The zero-based column index to move the cursor to.\n        \"\"\"\n        row, _ = self.cursor_position\n        SetConsoleCursorPosition(self._handle, coords=WindowsCoordinates(row, column))\n\n    def move_cursor_backward(self) -> None:\n        \"\"\"Move the cursor backward a single cell. Wrap to the previous line if required.\"\"\"\n        row, col = self.cursor_position\n        if col == 0:\n            row -= 1\n            col = self.screen_size.col - 1\n        else:\n            col -= 1\n        SetConsoleCursorPosition(\n            self._handle, coords=WindowsCoordinates(row=row, col=col)\n        )\n\n    def hide_cursor(self) -> None:\n        \"\"\"Hide the cursor\"\"\"\n        current_cursor_size = self._get_cursor_size()\n        invisible_cursor = CONSOLE_CURSOR_INFO(dwSize=current_cursor_size, bVisible=0)\n        SetConsoleCursorInfo(self._handle, cursor_info=invisible_cursor)\n\n    def show_cursor(self) -> None:\n        \"\"\"Show the cursor\"\"\"\n        current_cursor_size = self._get_cursor_size()\n        visible_cursor = CONSOLE_CURSOR_INFO(dwSize=current_cursor_size, bVisible=1)\n        SetConsoleCursorInfo(self._handle, cursor_info=visible_cursor)\n\n    def set_title(self, title: str) -> None:\n        \"\"\"Set the title of the terminal window\n\n        Args:\n            title (str): The new title of the console window\n        \"\"\"\n        assert len(title) < 255, \"Console title must be less than 255 characters\"\n        SetConsoleTitle(title)\n\n    def _get_cursor_size(self) -> int:\n        \"\"\"Get the percentage of the character cell that is filled by the cursor\"\"\"\n        cursor_info = CONSOLE_CURSOR_INFO()\n        GetConsoleCursorInfo(self._handle, cursor_info=cursor_info)\n        return int(cursor_info.dwSize)\n\n\nif __name__ == \"__main__\":\n    handle = GetStdHandle()\n\n    from rich.console import Console\n\n    console = Console()\n\n    term = LegacyWindowsTerm(sys.stdout)\n    term.set_title(\"Win32 Console Examples\")\n\n    style = Style(color=\"black\", bgcolor=\"red\")\n\n    heading = Style.parse(\"black on green\")\n\n    # Check colour output\n    console.rule(\"Checking colour output\")\n    console.print(\"[on red]on red!\")\n    console.print(\"[blue]blue!\")\n    console.print(\"[yellow]yellow!\")\n    console.print(\"[bold yellow]bold yellow!\")\n    console.print(\"[bright_yellow]bright_yellow!\")\n    console.print(\"[dim bright_yellow]dim bright_yellow!\")\n    console.print(\"[italic cyan]italic cyan!\")\n    console.print(\"[bold white on blue]bold white on blue!\")\n    console.print(\"[reverse bold white on blue]reverse bold white on blue!\")\n    console.print(\"[bold black on cyan]bold black on cyan!\")\n    console.print(\"[black on green]black on green!\")\n    console.print(\"[blue on green]blue on green!\")\n    console.print(\"[white on black]white on black!\")\n    console.print(\"[black on white]black on white!\")\n    console.print(\"[#1BB152 on #DA812D]#1BB152 on #DA812D!\")\n\n    # Check cursor movement\n    console.rule(\"Checking cursor movement\")\n    console.print()\n    term.move_cursor_backward()\n    term.move_cursor_backward()\n    term.write_text(\"went back and wrapped to prev line\")\n    time.sleep(1)\n    term.move_cursor_up()\n    term.write_text(\"we go up\")\n    time.sleep(1)\n    term.move_cursor_down()\n    term.write_text(\"and down\")\n    time.sleep(1)\n    term.move_cursor_up()\n    term.move_cursor_backward()\n    term.move_cursor_backward()\n    term.write_text(\"we went up and back 2\")\n    time.sleep(1)\n    term.move_cursor_down()\n    term.move_cursor_backward()\n    term.move_cursor_backward()\n    term.write_text(\"we went down and back 2\")\n    time.sleep(1)\n\n    # Check erasing of lines\n    term.hide_cursor()\n    console.print()\n    console.rule(\"Checking line erasing\")\n    console.print(\"\\n...Deleting to the start of the line...\")\n    term.write_text(\"The red arrow shows the cursor location, and direction of erase\")\n    time.sleep(1)\n    term.move_cursor_to_column(16)\n    term.write_styled(\"<\", Style.parse(\"black on red\"))\n    term.move_cursor_backward()\n    time.sleep(1)\n    term.erase_start_of_line()\n    time.sleep(1)\n\n    console.print(\"\\n\\n...And to the end of the line...\")\n    term.write_text(\"The red arrow shows the cursor location, and direction of erase\")\n    time.sleep(1)\n\n    term.move_cursor_to_column(16)\n    term.write_styled(\">\", Style.parse(\"black on red\"))\n    time.sleep(1)\n    term.erase_end_of_line()\n    time.sleep(1)\n\n    console.print(\"\\n\\n...Now the whole line will be erased...\")\n    term.write_styled(\"I'm going to disappear!\", style=Style.parse(\"black on cyan\"))\n    time.sleep(1)\n    term.erase_line()\n\n    term.show_cursor()\n    print(\"\\n\")\n", "rich/box.py": "import sys\nfrom typing import TYPE_CHECKING, Iterable, List\n\nif sys.version_info >= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal  # pragma: no cover\n\n\nfrom ._loop import loop_last\n\nif TYPE_CHECKING:\n    from rich.console import ConsoleOptions\n\n\nclass Box:\n    \"\"\"Defines characters to render boxes.\n\n    \u250c\u2500\u252c\u2510 top\n    \u2502 \u2502\u2502 head\n    \u251c\u2500\u253c\u2524 head_row\n    \u2502 \u2502\u2502 mid\n    \u251c\u2500\u253c\u2524 row\n    \u251c\u2500\u253c\u2524 foot_row\n    \u2502 \u2502\u2502 foot\n    \u2514\u2500\u2534\u2518 bottom\n\n    Args:\n        box (str): Characters making up box.\n        ascii (bool, optional): True if this box uses ascii characters only. Default is False.\n    \"\"\"\n\n    def __init__(self, box: str, *, ascii: bool = False) -> None:\n        self._box = box\n        self.ascii = ascii\n        line1, line2, line3, line4, line5, line6, line7, line8 = box.splitlines()\n        # top\n        self.top_left, self.top, self.top_divider, self.top_right = iter(line1)\n        # head\n        self.head_left, _, self.head_vertical, self.head_right = iter(line2)\n        # head_row\n        (\n            self.head_row_left,\n            self.head_row_horizontal,\n            self.head_row_cross,\n            self.head_row_right,\n        ) = iter(line3)\n\n        # mid\n        self.mid_left, _, self.mid_vertical, self.mid_right = iter(line4)\n        # row\n        self.row_left, self.row_horizontal, self.row_cross, self.row_right = iter(line5)\n        # foot_row\n        (\n            self.foot_row_left,\n            self.foot_row_horizontal,\n            self.foot_row_cross,\n            self.foot_row_right,\n        ) = iter(line6)\n        # foot\n        self.foot_left, _, self.foot_vertical, self.foot_right = iter(line7)\n        # bottom\n        self.bottom_left, self.bottom, self.bottom_divider, self.bottom_right = iter(\n            line8\n        )\n\n    def __repr__(self) -> str:\n        return \"Box(...)\"\n\n    def __str__(self) -> str:\n        return self._box\n\n    def substitute(self, options: \"ConsoleOptions\", safe: bool = True) -> \"Box\":\n        \"\"\"Substitute this box for another if it won't render due to platform issues.\n\n        Args:\n            options (ConsoleOptions): Console options used in rendering.\n            safe (bool, optional): Substitute this for another Box if there are known problems\n                displaying on the platform (currently only relevant on Windows). Default is True.\n\n        Returns:\n            Box: A different Box or the same Box.\n        \"\"\"\n        box = self\n        if options.legacy_windows and safe:\n            box = LEGACY_WINDOWS_SUBSTITUTIONS.get(box, box)\n        if options.ascii_only and not box.ascii:\n            box = ASCII\n        return box\n\n    def get_plain_headed_box(self) -> \"Box\":\n        \"\"\"If this box uses special characters for the borders of the header, then\n        return the equivalent box that does not.\n\n        Returns:\n            Box: The most similar Box that doesn't use header-specific box characters.\n                If the current Box already satisfies this criterion, then it's returned.\n        \"\"\"\n        return PLAIN_HEADED_SUBSTITUTIONS.get(self, self)\n\n    def get_top(self, widths: Iterable[int]) -> str:\n        \"\"\"Get the top of a simple box.\n\n        Args:\n            widths (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        \"\"\"\n\n        parts: List[str] = []\n        append = parts.append\n        append(self.top_left)\n        for last, width in loop_last(widths):\n            append(self.top * width)\n            if not last:\n                append(self.top_divider)\n        append(self.top_right)\n        return \"\".join(parts)\n\n    def get_row(\n        self,\n        widths: Iterable[int],\n        level: Literal[\"head\", \"row\", \"foot\", \"mid\"] = \"row\",\n        edge: bool = True,\n    ) -> str:\n        \"\"\"Get the top of a simple box.\n\n        Args:\n            width (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        \"\"\"\n        if level == \"head\":\n            left = self.head_row_left\n            horizontal = self.head_row_horizontal\n            cross = self.head_row_cross\n            right = self.head_row_right\n        elif level == \"row\":\n            left = self.row_left\n            horizontal = self.row_horizontal\n            cross = self.row_cross\n            right = self.row_right\n        elif level == \"mid\":\n            left = self.mid_left\n            horizontal = \" \"\n            cross = self.mid_vertical\n            right = self.mid_right\n        elif level == \"foot\":\n            left = self.foot_row_left\n            horizontal = self.foot_row_horizontal\n            cross = self.foot_row_cross\n            right = self.foot_row_right\n        else:\n            raise ValueError(\"level must be 'head', 'row' or 'foot'\")\n\n        parts: List[str] = []\n        append = parts.append\n        if edge:\n            append(left)\n        for last, width in loop_last(widths):\n            append(horizontal * width)\n            if not last:\n                append(cross)\n        if edge:\n            append(right)\n        return \"\".join(parts)\n\n    def get_bottom(self, widths: Iterable[int]) -> str:\n        \"\"\"Get the bottom of a simple box.\n\n        Args:\n            widths (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        \"\"\"\n\n        parts: List[str] = []\n        append = parts.append\n        append(self.bottom_left)\n        for last, width in loop_last(widths):\n            append(self.bottom * width)\n            if not last:\n                append(self.bottom_divider)\n        append(self.bottom_right)\n        return \"\".join(parts)\n\n\n# fmt: off\nASCII: Box = Box(\n    \"+--+\\n\"\n    \"| ||\\n\"\n    \"|-+|\\n\"\n    \"| ||\\n\"\n    \"|-+|\\n\"\n    \"|-+|\\n\"\n    \"| ||\\n\"\n    \"+--+\\n\",\n    ascii=True,\n)\n\nASCII2: Box = Box(\n    \"+-++\\n\"\n    \"| ||\\n\"\n    \"+-++\\n\"\n    \"| ||\\n\"\n    \"+-++\\n\"\n    \"+-++\\n\"\n    \"| ||\\n\"\n    \"+-++\\n\",\n    ascii=True,\n)\n\nASCII_DOUBLE_HEAD: Box = Box(\n    \"+-++\\n\"\n    \"| ||\\n\"\n    \"+=++\\n\"\n    \"| ||\\n\"\n    \"+-++\\n\"\n    \"+-++\\n\"\n    \"| ||\\n\"\n    \"+-++\\n\",\n    ascii=True,\n)\n\nSQUARE: Box = Box(\n    \"\u250c\u2500\u252c\u2510\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u2514\u2500\u2534\u2518\\n\"\n)\n\nSQUARE_DOUBLE_HEAD: Box = Box(\n    \"\u250c\u2500\u252c\u2510\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u255e\u2550\u256a\u2561\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u2514\u2500\u2534\u2518\\n\"\n)\n\nMINIMAL: Box = Box(\n    \"  \u2577 \\n\"\n    \"  \u2502 \\n\"\n    \"\u2576\u2500\u253c\u2574\\n\"\n    \"  \u2502 \\n\"\n    \"\u2576\u2500\u253c\u2574\\n\"\n    \"\u2576\u2500\u253c\u2574\\n\"\n    \"  \u2502 \\n\"\n    \"  \u2575 \\n\"\n)\n\n\nMINIMAL_HEAVY_HEAD: Box = Box(\n    \"  \u2577 \\n\"\n    \"  \u2502 \\n\"\n    \"\u257a\u2501\u253f\u2578\\n\"\n    \"  \u2502 \\n\"\n    \"\u2576\u2500\u253c\u2574\\n\"\n    \"\u2576\u2500\u253c\u2574\\n\"\n    \"  \u2502 \\n\"\n    \"  \u2575 \\n\"\n)\n\nMINIMAL_DOUBLE_HEAD: Box = Box(\n    \"  \u2577 \\n\"\n    \"  \u2502 \\n\"\n    \" \u2550\u256a \\n\"\n    \"  \u2502 \\n\"\n    \" \u2500\u253c \\n\"\n    \" \u2500\u253c \\n\"\n    \"  \u2502 \\n\"\n    \"  \u2575 \\n\"\n)\n\n\nSIMPLE: Box = Box(\n    \"    \\n\"\n    \"    \\n\"\n    \" \u2500\u2500 \\n\"\n    \"    \\n\"\n    \"    \\n\"\n    \" \u2500\u2500 \\n\"\n    \"    \\n\"\n    \"    \\n\"\n)\n\nSIMPLE_HEAD: Box = Box(\n    \"    \\n\"\n    \"    \\n\"\n    \" \u2500\u2500 \\n\"\n    \"    \\n\"\n    \"    \\n\"\n    \"    \\n\"\n    \"    \\n\"\n    \"    \\n\"\n)\n\n\nSIMPLE_HEAVY: Box = Box(\n    \"    \\n\"\n    \"    \\n\"\n    \" \u2501\u2501 \\n\"\n    \"    \\n\"\n    \"    \\n\"\n    \" \u2501\u2501 \\n\"\n    \"    \\n\"\n    \"    \\n\"\n)\n\n\nHORIZONTALS: Box = Box(\n    \" \u2500\u2500 \\n\"\n    \"    \\n\"\n    \" \u2500\u2500 \\n\"\n    \"    \\n\"\n    \" \u2500\u2500 \\n\"\n    \" \u2500\u2500 \\n\"\n    \"    \\n\"\n    \" \u2500\u2500 \\n\"\n)\n\nROUNDED: Box = Box(\n    \"\u256d\u2500\u252c\u256e\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u2570\u2500\u2534\u256f\\n\"\n)\n\nHEAVY: Box = Box(\n    \"\u250f\u2501\u2533\u2513\\n\"\n    \"\u2503 \u2503\u2503\\n\"\n    \"\u2523\u2501\u254b\u252b\\n\"\n    \"\u2503 \u2503\u2503\\n\"\n    \"\u2523\u2501\u254b\u252b\\n\"\n    \"\u2523\u2501\u254b\u252b\\n\"\n    \"\u2503 \u2503\u2503\\n\"\n    \"\u2517\u2501\u253b\u251b\\n\"\n)\n\nHEAVY_EDGE: Box = Box(\n    \"\u250f\u2501\u252f\u2513\\n\"\n    \"\u2503 \u2502\u2503\\n\"\n    \"\u2520\u2500\u253c\u2528\\n\"\n    \"\u2503 \u2502\u2503\\n\"\n    \"\u2520\u2500\u253c\u2528\\n\"\n    \"\u2520\u2500\u253c\u2528\\n\"\n    \"\u2503 \u2502\u2503\\n\"\n    \"\u2517\u2501\u2537\u251b\\n\"\n)\n\nHEAVY_HEAD: Box = Box(\n    \"\u250f\u2501\u2533\u2513\\n\"\n    \"\u2503 \u2503\u2503\\n\"\n    \"\u2521\u2501\u2547\u2529\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u251c\u2500\u253c\u2524\\n\"\n    \"\u2502 \u2502\u2502\\n\"\n    \"\u2514\u2500\u2534\u2518\\n\"\n)\n\nDOUBLE: Box = Box(\n    \"\u2554\u2550\u2566\u2557\\n\"\n    \"\u2551 \u2551\u2551\\n\"\n    \"\u2560\u2550\u256c\u2563\\n\"\n    \"\u2551 \u2551\u2551\\n\"\n    \"\u2560\u2550\u256c\u2563\\n\"\n    \"\u2560\u2550\u256c\u2563\\n\"\n    \"\u2551 \u2551\u2551\\n\"\n    \"\u255a\u2550\u2569\u255d\\n\"\n)\n\nDOUBLE_EDGE: Box = Box(\n    \"\u2554\u2550\u2564\u2557\\n\"\n    \"\u2551 \u2502\u2551\\n\"\n    \"\u255f\u2500\u253c\u2562\\n\"\n    \"\u2551 \u2502\u2551\\n\"\n    \"\u255f\u2500\u253c\u2562\\n\"\n    \"\u255f\u2500\u253c\u2562\\n\"\n    \"\u2551 \u2502\u2551\\n\"\n    \"\u255a\u2550\u2567\u255d\\n\"\n)\n\nMARKDOWN: Box = Box(\n    \"    \\n\"\n    \"| ||\\n\"\n    \"|-||\\n\"\n    \"| ||\\n\"\n    \"|-||\\n\"\n    \"|-||\\n\"\n    \"| ||\\n\"\n    \"    \\n\",\n    ascii=True,\n)\n# fmt: on\n\n# Map Boxes that don't render with raster fonts on to equivalent that do\nLEGACY_WINDOWS_SUBSTITUTIONS = {\n    ROUNDED: SQUARE,\n    MINIMAL_HEAVY_HEAD: MINIMAL,\n    SIMPLE_HEAVY: SIMPLE,\n    HEAVY: SQUARE,\n    HEAVY_EDGE: SQUARE,\n    HEAVY_HEAD: SQUARE,\n}\n\n# Map headed boxes to their headerless equivalents\nPLAIN_HEADED_SUBSTITUTIONS = {\n    HEAVY_HEAD: SQUARE,\n    SQUARE_DOUBLE_HEAD: SQUARE,\n    MINIMAL_DOUBLE_HEAD: MINIMAL,\n    MINIMAL_HEAVY_HEAD: MINIMAL,\n    ASCII_DOUBLE_HEAD: ASCII2,\n}\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.columns import Columns\n    from rich.panel import Panel\n\n    from . import box as box\n    from .console import Console\n    from .table import Table\n    from .text import Text\n\n    console = Console(record=True)\n\n    BOXES = [\n        \"ASCII\",\n        \"ASCII2\",\n        \"ASCII_DOUBLE_HEAD\",\n        \"SQUARE\",\n        \"SQUARE_DOUBLE_HEAD\",\n        \"MINIMAL\",\n        \"MINIMAL_HEAVY_HEAD\",\n        \"MINIMAL_DOUBLE_HEAD\",\n        \"SIMPLE\",\n        \"SIMPLE_HEAD\",\n        \"SIMPLE_HEAVY\",\n        \"HORIZONTALS\",\n        \"ROUNDED\",\n        \"HEAVY\",\n        \"HEAVY_EDGE\",\n        \"HEAVY_HEAD\",\n        \"DOUBLE\",\n        \"DOUBLE_EDGE\",\n        \"MARKDOWN\",\n    ]\n\n    console.print(Panel(\"[bold green]Box Constants\", style=\"green\"), justify=\"center\")\n    console.print()\n\n    columns = Columns(expand=True, padding=2)\n    for box_name in sorted(BOXES):\n        table = Table(\n            show_footer=True, style=\"dim\", border_style=\"not dim\", expand=True\n        )\n        table.add_column(\"Header 1\", \"Footer 1\")\n        table.add_column(\"Header 2\", \"Footer 2\")\n        table.add_row(\"Cell\", \"Cell\")\n        table.add_row(\"Cell\", \"Cell\")\n        table.box = getattr(box, box_name)\n        table.title = Text(f\"box.{box_name}\", style=\"magenta\")\n        columns.add_renderable(table)\n    console.print(columns)\n\n    # console.save_svg(\"box.svg\")\n", "rich/progress.py": "import io\nimport sys\nimport typing\nimport warnings\nfrom abc import ABC, abstractmethod\nfrom collections import deque\nfrom dataclasses import dataclass, field\nfrom datetime import timedelta\nfrom io import RawIOBase, UnsupportedOperation\nfrom math import ceil\nfrom mmap import mmap\nfrom operator import length_hint\nfrom os import PathLike, stat\nfrom threading import Event, RLock, Thread\nfrom types import TracebackType\nfrom typing import (\n    Any,\n    BinaryIO,\n    Callable,\n    ContextManager,\n    Deque,\n    Dict,\n    Generic,\n    Iterable,\n    List,\n    NamedTuple,\n    NewType,\n    Optional,\n    Sequence,\n    TextIO,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n)\n\nif sys.version_info >= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal  # pragma: no cover\n\nfrom . import filesize, get_console\nfrom .console import Console, Group, JustifyMethod, RenderableType\nfrom .highlighter import Highlighter\nfrom .jupyter import JupyterMixin\nfrom .live import Live\nfrom .progress_bar import ProgressBar\nfrom .spinner import Spinner\nfrom .style import StyleType\nfrom .table import Column, Table\nfrom .text import Text, TextType\n\nTaskID = NewType(\"TaskID\", int)\n\nProgressType = TypeVar(\"ProgressType\")\n\nGetTimeCallable = Callable[[], float]\n\n\n_I = typing.TypeVar(\"_I\", TextIO, BinaryIO)\n\n\nclass _TrackThread(Thread):\n    \"\"\"A thread to periodically update progress.\"\"\"\n\n    def __init__(self, progress: \"Progress\", task_id: \"TaskID\", update_period: float):\n        self.progress = progress\n        self.task_id = task_id\n        self.update_period = update_period\n        self.done = Event()\n\n        self.completed = 0\n        super().__init__()\n\n    def run(self) -> None:\n        task_id = self.task_id\n        advance = self.progress.advance\n        update_period = self.update_period\n        last_completed = 0\n        wait = self.done.wait\n        while not wait(update_period):\n            completed = self.completed\n            if last_completed != completed:\n                advance(task_id, completed - last_completed)\n                last_completed = completed\n\n        self.progress.update(self.task_id, completed=self.completed, refresh=True)\n\n    def __enter__(self) -> \"_TrackThread\":\n        self.start()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self.done.set()\n        self.join()\n\n\ndef track(\n    sequence: Union[Sequence[ProgressType], Iterable[ProgressType]],\n    description: str = \"Working...\",\n    total: Optional[float] = None,\n    auto_refresh: bool = True,\n    console: Optional[Console] = None,\n    transient: bool = False,\n    get_time: Optional[Callable[[], float]] = None,\n    refresh_per_second: float = 10,\n    style: StyleType = \"bar.back\",\n    complete_style: StyleType = \"bar.complete\",\n    finished_style: StyleType = \"bar.finished\",\n    pulse_style: StyleType = \"bar.pulse\",\n    update_period: float = 0.1,\n    disable: bool = False,\n    show_speed: bool = True,\n) -> Iterable[ProgressType]:\n    \"\"\"Track progress by iterating over a sequence.\n\n    Args:\n        sequence (Iterable[ProgressType]): A sequence (must support \"len\") you wish to iterate over.\n        description (str, optional): Description of task show next to progress bar. Defaults to \"Working\".\n        total: (float, optional): Total number of steps. Default is len(sequence).\n        auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        console (Console, optional): Console to write to. Default creates internal Console instance.\n        refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.\n        style (StyleType, optional): Style for the bar background. Defaults to \"bar.back\".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to \"bar.complete\".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to \"bar.finished\".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to \"bar.pulse\".\n        update_period (float, optional): Minimum time (in seconds) between calls to update(). Defaults to 0.1.\n        disable (bool, optional): Disable display of progress.\n        show_speed (bool, optional): Show speed if total isn't known. Defaults to True.\n    Returns:\n        Iterable[ProgressType]: An iterable of the values in the sequence.\n\n    \"\"\"\n\n    columns: List[\"ProgressColumn\"] = (\n        [TextColumn(\"[progress.description]{task.description}\")] if description else []\n    )\n    columns.extend(\n        (\n            BarColumn(\n                style=style,\n                complete_style=complete_style,\n                finished_style=finished_style,\n                pulse_style=pulse_style,\n            ),\n            TaskProgressColumn(show_speed=show_speed),\n            TimeRemainingColumn(elapsed_when_finished=True),\n        )\n    )\n    progress = Progress(\n        *columns,\n        auto_refresh=auto_refresh,\n        console=console,\n        transient=transient,\n        get_time=get_time,\n        refresh_per_second=refresh_per_second or 10,\n        disable=disable,\n    )\n\n    with progress:\n        yield from progress.track(\n            sequence, total=total, description=description, update_period=update_period\n        )\n\n\nclass _Reader(RawIOBase, BinaryIO):\n    \"\"\"A reader that tracks progress while it's being read from.\"\"\"\n\n    def __init__(\n        self,\n        handle: BinaryIO,\n        progress: \"Progress\",\n        task: TaskID,\n        close_handle: bool = True,\n    ) -> None:\n        self.handle = handle\n        self.progress = progress\n        self.task = task\n        self.close_handle = close_handle\n        self._closed = False\n\n    def __enter__(self) -> \"_Reader\":\n        self.handle.__enter__()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self.close()\n\n    def __iter__(self) -> BinaryIO:\n        return self\n\n    def __next__(self) -> bytes:\n        line = next(self.handle)\n        self.progress.advance(self.task, advance=len(line))\n        return line\n\n    @property\n    def closed(self) -> bool:\n        return self._closed\n\n    def fileno(self) -> int:\n        return self.handle.fileno()\n\n    def isatty(self) -> bool:\n        return self.handle.isatty()\n\n    @property\n    def mode(self) -> str:\n        return self.handle.mode\n\n    @property\n    def name(self) -> str:\n        return self.handle.name\n\n    def readable(self) -> bool:\n        return self.handle.readable()\n\n    def seekable(self) -> bool:\n        return self.handle.seekable()\n\n    def writable(self) -> bool:\n        return False\n\n    def read(self, size: int = -1) -> bytes:\n        block = self.handle.read(size)\n        self.progress.advance(self.task, advance=len(block))\n        return block\n\n    def readinto(self, b: Union[bytearray, memoryview, mmap]):  # type: ignore[no-untyped-def, override]\n        n = self.handle.readinto(b)  # type: ignore[attr-defined]\n        self.progress.advance(self.task, advance=n)\n        return n\n\n    def readline(self, size: int = -1) -> bytes:  # type: ignore[override]\n        line = self.handle.readline(size)\n        self.progress.advance(self.task, advance=len(line))\n        return line\n\n    def readlines(self, hint: int = -1) -> List[bytes]:\n        lines = self.handle.readlines(hint)\n        self.progress.advance(self.task, advance=sum(map(len, lines)))\n        return lines\n\n    def close(self) -> None:\n        if self.close_handle:\n            self.handle.close()\n        self._closed = True\n\n    def seek(self, offset: int, whence: int = 0) -> int:\n        pos = self.handle.seek(offset, whence)\n        self.progress.update(self.task, completed=pos)\n        return pos\n\n    def tell(self) -> int:\n        return self.handle.tell()\n\n    def write(self, s: Any) -> int:\n        raise UnsupportedOperation(\"write\")\n\n\nclass _ReadContext(ContextManager[_I], Generic[_I]):\n    \"\"\"A utility class to handle a context for both a reader and a progress.\"\"\"\n\n    def __init__(self, progress: \"Progress\", reader: _I) -> None:\n        self.progress = progress\n        self.reader: _I = reader\n\n    def __enter__(self) -> _I:\n        self.progress.start()\n        return self.reader.__enter__()\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self.progress.stop()\n        self.reader.__exit__(exc_type, exc_val, exc_tb)\n\n\ndef wrap_file(\n    file: BinaryIO,\n    total: int,\n    *,\n    description: str = \"Reading...\",\n    auto_refresh: bool = True,\n    console: Optional[Console] = None,\n    transient: bool = False,\n    get_time: Optional[Callable[[], float]] = None,\n    refresh_per_second: float = 10,\n    style: StyleType = \"bar.back\",\n    complete_style: StyleType = \"bar.complete\",\n    finished_style: StyleType = \"bar.finished\",\n    pulse_style: StyleType = \"bar.pulse\",\n    disable: bool = False,\n) -> ContextManager[BinaryIO]:\n    \"\"\"Read bytes from a file while tracking progress.\n\n    Args:\n        file (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.\n        total (int): Total number of bytes to read.\n        description (str, optional): Description of task show next to progress bar. Defaults to \"Reading\".\n        auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        console (Console, optional): Console to write to. Default creates internal Console instance.\n        refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.\n        style (StyleType, optional): Style for the bar background. Defaults to \"bar.back\".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to \"bar.complete\".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to \"bar.finished\".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to \"bar.pulse\".\n        disable (bool, optional): Disable display of progress.\n    Returns:\n        ContextManager[BinaryIO]: A context manager yielding a progress reader.\n\n    \"\"\"\n\n    columns: List[\"ProgressColumn\"] = (\n        [TextColumn(\"[progress.description]{task.description}\")] if description else []\n    )\n    columns.extend(\n        (\n            BarColumn(\n                style=style,\n                complete_style=complete_style,\n                finished_style=finished_style,\n                pulse_style=pulse_style,\n            ),\n            DownloadColumn(),\n            TimeRemainingColumn(),\n        )\n    )\n    progress = Progress(\n        *columns,\n        auto_refresh=auto_refresh,\n        console=console,\n        transient=transient,\n        get_time=get_time,\n        refresh_per_second=refresh_per_second or 10,\n        disable=disable,\n    )\n\n    reader = progress.wrap_file(file, total=total, description=description)\n    return _ReadContext(progress, reader)\n\n\n@typing.overload\ndef open(\n    file: Union[str, \"PathLike[str]\", bytes],\n    mode: Union[Literal[\"rt\"], Literal[\"r\"]],\n    buffering: int = -1,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = None,\n    newline: Optional[str] = None,\n    *,\n    total: Optional[int] = None,\n    description: str = \"Reading...\",\n    auto_refresh: bool = True,\n    console: Optional[Console] = None,\n    transient: bool = False,\n    get_time: Optional[Callable[[], float]] = None,\n    refresh_per_second: float = 10,\n    style: StyleType = \"bar.back\",\n    complete_style: StyleType = \"bar.complete\",\n    finished_style: StyleType = \"bar.finished\",\n    pulse_style: StyleType = \"bar.pulse\",\n    disable: bool = False,\n) -> ContextManager[TextIO]:\n    pass\n\n\n@typing.overload\ndef open(\n    file: Union[str, \"PathLike[str]\", bytes],\n    mode: Literal[\"rb\"],\n    buffering: int = -1,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = None,\n    newline: Optional[str] = None,\n    *,\n    total: Optional[int] = None,\n    description: str = \"Reading...\",\n    auto_refresh: bool = True,\n    console: Optional[Console] = None,\n    transient: bool = False,\n    get_time: Optional[Callable[[], float]] = None,\n    refresh_per_second: float = 10,\n    style: StyleType = \"bar.back\",\n    complete_style: StyleType = \"bar.complete\",\n    finished_style: StyleType = \"bar.finished\",\n    pulse_style: StyleType = \"bar.pulse\",\n    disable: bool = False,\n) -> ContextManager[BinaryIO]:\n    pass\n\n\ndef open(\n    file: Union[str, \"PathLike[str]\", bytes],\n    mode: Union[Literal[\"rb\"], Literal[\"rt\"], Literal[\"r\"]] = \"r\",\n    buffering: int = -1,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = None,\n    newline: Optional[str] = None,\n    *,\n    total: Optional[int] = None,\n    description: str = \"Reading...\",\n    auto_refresh: bool = True,\n    console: Optional[Console] = None,\n    transient: bool = False,\n    get_time: Optional[Callable[[], float]] = None,\n    refresh_per_second: float = 10,\n    style: StyleType = \"bar.back\",\n    complete_style: StyleType = \"bar.complete\",\n    finished_style: StyleType = \"bar.finished\",\n    pulse_style: StyleType = \"bar.pulse\",\n    disable: bool = False,\n) -> Union[ContextManager[BinaryIO], ContextManager[TextIO]]:\n    \"\"\"Read bytes from a file while tracking progress.\n\n    Args:\n        path (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.\n        mode (str): The mode to use to open the file. Only supports \"r\", \"rb\" or \"rt\".\n        buffering (int): The buffering strategy to use, see :func:`io.open`.\n        encoding (str, optional): The encoding to use when reading in text mode, see :func:`io.open`.\n        errors (str, optional): The error handling strategy for decoding errors, see :func:`io.open`.\n        newline (str, optional): The strategy for handling newlines in text mode, see :func:`io.open`\n        total: (int, optional): Total number of bytes to read. Must be provided if reading from a file handle. Default for a path is os.stat(file).st_size.\n        description (str, optional): Description of task show next to progress bar. Defaults to \"Reading\".\n        auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        console (Console, optional): Console to write to. Default creates internal Console instance.\n        refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.\n        style (StyleType, optional): Style for the bar background. Defaults to \"bar.back\".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to \"bar.complete\".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to \"bar.finished\".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to \"bar.pulse\".\n        disable (bool, optional): Disable display of progress.\n        encoding (str, optional): The encoding to use when reading in text mode.\n\n    Returns:\n        ContextManager[BinaryIO]: A context manager yielding a progress reader.\n\n    \"\"\"\n\n    columns: List[\"ProgressColumn\"] = (\n        [TextColumn(\"[progress.description]{task.description}\")] if description else []\n    )\n    columns.extend(\n        (\n            BarColumn(\n                style=style,\n                complete_style=complete_style,\n                finished_style=finished_style,\n                pulse_style=pulse_style,\n            ),\n            DownloadColumn(),\n            TimeRemainingColumn(),\n        )\n    )\n    progress = Progress(\n        *columns,\n        auto_refresh=auto_refresh,\n        console=console,\n        transient=transient,\n        get_time=get_time,\n        refresh_per_second=refresh_per_second or 10,\n        disable=disable,\n    )\n\n    reader = progress.open(\n        file,\n        mode=mode,\n        buffering=buffering,\n        encoding=encoding,\n        errors=errors,\n        newline=newline,\n        total=total,\n        description=description,\n    )\n    return _ReadContext(progress, reader)  # type: ignore[return-value, type-var]\n\n\nclass ProgressColumn(ABC):\n    \"\"\"Base class for a widget to use in progress display.\"\"\"\n\n    max_refresh: Optional[float] = None\n\n    def __init__(self, table_column: Optional[Column] = None) -> None:\n        self._table_column = table_column\n        self._renderable_cache: Dict[TaskID, Tuple[float, RenderableType]] = {}\n        self._update_time: Optional[float] = None\n\n    def get_table_column(self) -> Column:\n        \"\"\"Get a table column, used to build tasks table.\"\"\"\n        return self._table_column or Column()\n\n    def __call__(self, task: \"Task\") -> RenderableType:\n        \"\"\"Called by the Progress object to return a renderable for the given task.\n\n        Args:\n            task (Task): An object containing information regarding the task.\n\n        Returns:\n            RenderableType: Anything renderable (including str).\n        \"\"\"\n        current_time = task.get_time()\n        if self.max_refresh is not None and not task.completed:\n            try:\n                timestamp, renderable = self._renderable_cache[task.id]\n            except KeyError:\n                pass\n            else:\n                if timestamp + self.max_refresh > current_time:\n                    return renderable\n\n        renderable = self.render(task)\n        self._renderable_cache[task.id] = (current_time, renderable)\n        return renderable\n\n    @abstractmethod\n    def render(self, task: \"Task\") -> RenderableType:\n        \"\"\"Should return a renderable object.\"\"\"\n\n\nclass RenderableColumn(ProgressColumn):\n    \"\"\"A column to insert an arbitrary column.\n\n    Args:\n        renderable (RenderableType, optional): Any renderable. Defaults to empty string.\n    \"\"\"\n\n    def __init__(\n        self, renderable: RenderableType = \"\", *, table_column: Optional[Column] = None\n    ):\n        self.renderable = renderable\n        super().__init__(table_column=table_column)\n\n    def render(self, task: \"Task\") -> RenderableType:\n        return self.renderable\n\n\nclass SpinnerColumn(ProgressColumn):\n    \"\"\"A column with a 'spinner' animation.\n\n    Args:\n        spinner_name (str, optional): Name of spinner animation. Defaults to \"dots\".\n        style (StyleType, optional): Style of spinner. Defaults to \"progress.spinner\".\n        speed (float, optional): Speed factor of spinner. Defaults to 1.0.\n        finished_text (TextType, optional): Text used when task is finished. Defaults to \" \".\n    \"\"\"\n\n    def __init__(\n        self,\n        spinner_name: str = \"dots\",\n        style: Optional[StyleType] = \"progress.spinner\",\n        speed: float = 1.0,\n        finished_text: TextType = \" \",\n        table_column: Optional[Column] = None,\n    ):\n        self.spinner = Spinner(spinner_name, style=style, speed=speed)\n        self.finished_text = (\n            Text.from_markup(finished_text)\n            if isinstance(finished_text, str)\n            else finished_text\n        )\n        super().__init__(table_column=table_column)\n\n    def set_spinner(\n        self,\n        spinner_name: str,\n        spinner_style: Optional[StyleType] = \"progress.spinner\",\n        speed: float = 1.0,\n    ) -> None:\n        \"\"\"Set a new spinner.\n\n        Args:\n            spinner_name (str): Spinner name, see python -m rich.spinner.\n            spinner_style (Optional[StyleType], optional): Spinner style. Defaults to \"progress.spinner\".\n            speed (float, optional): Speed factor of spinner. Defaults to 1.0.\n        \"\"\"\n        self.spinner = Spinner(spinner_name, style=spinner_style, speed=speed)\n\n    def render(self, task: \"Task\") -> RenderableType:\n        text = (\n            self.finished_text\n            if task.finished\n            else self.spinner.render(task.get_time())\n        )\n        return text\n\n\nclass TextColumn(ProgressColumn):\n    \"\"\"A column containing text.\"\"\"\n\n    def __init__(\n        self,\n        text_format: str,\n        style: StyleType = \"none\",\n        justify: JustifyMethod = \"left\",\n        markup: bool = True,\n        highlighter: Optional[Highlighter] = None,\n        table_column: Optional[Column] = None,\n    ) -> None:\n        self.text_format = text_format\n        self.justify: JustifyMethod = justify\n        self.style = style\n        self.markup = markup\n        self.highlighter = highlighter\n        super().__init__(table_column=table_column or Column(no_wrap=True))\n\n    def render(self, task: \"Task\") -> Text:\n        _text = self.text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)\n        else:\n            text = Text(_text, style=self.style, justify=self.justify)\n        if self.highlighter:\n            self.highlighter.highlight(text)\n        return text\n\n\nclass BarColumn(ProgressColumn):\n    \"\"\"Renders a visual progress bar.\n\n    Args:\n        bar_width (Optional[int], optional): Width of bar or None for full width. Defaults to 40.\n        style (StyleType, optional): Style for the bar background. Defaults to \"bar.back\".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to \"bar.complete\".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to \"bar.finished\".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to \"bar.pulse\".\n    \"\"\"\n\n    def __init__(\n        self,\n        bar_width: Optional[int] = 40,\n        style: StyleType = \"bar.back\",\n        complete_style: StyleType = \"bar.complete\",\n        finished_style: StyleType = \"bar.finished\",\n        pulse_style: StyleType = \"bar.pulse\",\n        table_column: Optional[Column] = None,\n    ) -> None:\n        self.bar_width = bar_width\n        self.style = style\n        self.complete_style = complete_style\n        self.finished_style = finished_style\n        self.pulse_style = pulse_style\n        super().__init__(table_column=table_column)\n\n    def render(self, task: \"Task\") -> ProgressBar:\n        \"\"\"Gets a progress bar widget for a task.\"\"\"\n        return ProgressBar(\n            total=max(0, task.total) if task.total is not None else None,\n            completed=max(0, task.completed),\n            width=None if self.bar_width is None else max(1, self.bar_width),\n            pulse=not task.started,\n            animation_time=task.get_time(),\n            style=self.style,\n            complete_style=self.complete_style,\n            finished_style=self.finished_style,\n            pulse_style=self.pulse_style,\n        )\n\n\nclass TimeElapsedColumn(ProgressColumn):\n    \"\"\"Renders time elapsed.\"\"\"\n\n    def render(self, task: \"Task\") -> Text:\n        \"\"\"Show time elapsed.\"\"\"\n        elapsed = task.finished_time if task.finished else task.elapsed\n        if elapsed is None:\n            return Text(\"-:--:--\", style=\"progress.elapsed\")\n        delta = timedelta(seconds=max(0, int(elapsed)))\n        return Text(str(delta), style=\"progress.elapsed\")\n\n\nclass TaskProgressColumn(TextColumn):\n    \"\"\"Show task progress as a percentage.\n\n    Args:\n        text_format (str, optional): Format for percentage display. Defaults to \"[progress.percentage]{task.percentage:>3.0f}%\".\n        text_format_no_percentage (str, optional): Format if percentage is unknown. Defaults to \"\".\n        style (StyleType, optional): Style of output. Defaults to \"none\".\n        justify (JustifyMethod, optional): Text justification. Defaults to \"left\".\n        markup (bool, optional): Enable markup. Defaults to True.\n        highlighter (Optional[Highlighter], optional): Highlighter to apply to output. Defaults to None.\n        table_column (Optional[Column], optional): Table Column to use. Defaults to None.\n        show_speed (bool, optional): Show speed if total is unknown. Defaults to False.\n    \"\"\"\n\n    def __init__(\n        self,\n        text_format: str = \"[progress.percentage]{task.percentage:>3.0f}%\",\n        text_format_no_percentage: str = \"\",\n        style: StyleType = \"none\",\n        justify: JustifyMethod = \"left\",\n        markup: bool = True,\n        highlighter: Optional[Highlighter] = None,\n        table_column: Optional[Column] = None,\n        show_speed: bool = False,\n    ) -> None:\n        self.text_format_no_percentage = text_format_no_percentage\n        self.show_speed = show_speed\n        super().__init__(\n            text_format=text_format,\n            style=style,\n            justify=justify,\n            markup=markup,\n            highlighter=highlighter,\n            table_column=table_column,\n        )\n\n    @classmethod\n    def render_speed(cls, speed: Optional[float]) -> Text:\n        \"\"\"Render the speed in iterations per second.\n\n        Args:\n            task (Task): A Task object.\n\n        Returns:\n            Text: Text object containing the task speed.\n        \"\"\"\n        if speed is None:\n            return Text(\"\", style=\"progress.percentage\")\n        unit, suffix = filesize.pick_unit_and_suffix(\n            int(speed),\n            [\"\", \"\u00d710\u00b3\", \"\u00d710\u2076\", \"\u00d710\u2079\", \"\u00d710\u00b9\u00b2\"],\n            1000,\n        )\n        data_speed = speed / unit\n        return Text(f\"{data_speed:.1f}{suffix} it/s\", style=\"progress.percentage\")\n\n    def render(self, task: \"Task\") -> Text:\n        if task.total is None and self.show_speed:\n            return self.render_speed(task.finished_speed or task.speed)\n        text_format = (\n            self.text_format_no_percentage if task.total is None else self.text_format\n        )\n        _text = text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)\n        else:\n            text = Text(_text, style=self.style, justify=self.justify)\n        if self.highlighter:\n            self.highlighter.highlight(text)\n        return text\n\n\nclass TimeRemainingColumn(ProgressColumn):\n    \"\"\"Renders estimated time remaining.\n\n    Args:\n        compact (bool, optional): Render MM:SS when time remaining is less than an hour. Defaults to False.\n        elapsed_when_finished (bool, optional): Render time elapsed when the task is finished. Defaults to False.\n    \"\"\"\n\n    # Only refresh twice a second to prevent jitter\n    max_refresh = 0.5\n\n    def __init__(\n        self,\n        compact: bool = False,\n        elapsed_when_finished: bool = False,\n        table_column: Optional[Column] = None,\n    ):\n        self.compact = compact\n        self.elapsed_when_finished = elapsed_when_finished\n        super().__init__(table_column=table_column)\n\n    def render(self, task: \"Task\") -> Text:\n        \"\"\"Show time remaining.\"\"\"\n        if self.elapsed_when_finished and task.finished:\n            task_time = task.finished_time\n            style = \"progress.elapsed\"\n        else:\n            task_time = task.time_remaining\n            style = \"progress.remaining\"\n\n        if task.total is None:\n            return Text(\"\", style=style)\n\n        if task_time is None:\n            return Text(\"--:--\" if self.compact else \"-:--:--\", style=style)\n\n        # Based on https://github.com/tqdm/tqdm/blob/master/tqdm/std.py\n        minutes, seconds = divmod(int(task_time), 60)\n        hours, minutes = divmod(minutes, 60)\n\n        if self.compact and not hours:\n            formatted = f\"{minutes:02d}:{seconds:02d}\"\n        else:\n            formatted = f\"{hours:d}:{minutes:02d}:{seconds:02d}\"\n\n        return Text(formatted, style=style)\n\n\nclass FileSizeColumn(ProgressColumn):\n    \"\"\"Renders completed filesize.\"\"\"\n\n    def render(self, task: \"Task\") -> Text:\n        \"\"\"Show data completed.\"\"\"\n        data_size = filesize.decimal(int(task.completed))\n        return Text(data_size, style=\"progress.filesize\")\n\n\nclass TotalFileSizeColumn(ProgressColumn):\n    \"\"\"Renders total filesize.\"\"\"\n\n    def render(self, task: \"Task\") -> Text:\n        \"\"\"Show data completed.\"\"\"\n        data_size = filesize.decimal(int(task.total)) if task.total is not None else \"\"\n        return Text(data_size, style=\"progress.filesize.total\")\n\n\nclass MofNCompleteColumn(ProgressColumn):\n    \"\"\"Renders completed count/total, e.g. '  10/1000'.\n\n    Best for bounded tasks with int quantities.\n\n    Space pads the completed count so that progress length does not change as task progresses\n    past powers of 10.\n\n    Args:\n        separator (str, optional): Text to separate completed and total values. Defaults to \"/\".\n    \"\"\"\n\n    def __init__(self, separator: str = \"/\", table_column: Optional[Column] = None):\n        self.separator = separator\n        super().__init__(table_column=table_column)\n\n    def render(self, task: \"Task\") -> Text:\n        \"\"\"Show completed/total.\"\"\"\n        completed = int(task.completed)\n        total = int(task.total) if task.total is not None else \"?\"\n        total_width = len(str(total))\n        return Text(\n            f\"{completed:{total_width}d}{self.separator}{total}\",\n            style=\"progress.download\",\n        )\n\n\nclass DownloadColumn(ProgressColumn):\n    \"\"\"Renders file size downloaded and total, e.g. '0.5/2.3 GB'.\n\n    Args:\n        binary_units (bool, optional): Use binary units, KiB, MiB etc. Defaults to False.\n    \"\"\"\n\n    def __init__(\n        self, binary_units: bool = False, table_column: Optional[Column] = None\n    ) -> None:\n        self.binary_units = binary_units\n        super().__init__(table_column=table_column)\n\n    def render(self, task: \"Task\") -> Text:\n        \"\"\"Calculate common unit for completed and total.\"\"\"\n        completed = int(task.completed)\n\n        unit_and_suffix_calculation_base = (\n            int(task.total) if task.total is not None else completed\n        )\n        if self.binary_units:\n            unit, suffix = filesize.pick_unit_and_suffix(\n                unit_and_suffix_calculation_base,\n                [\"bytes\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n                1024,\n            )\n        else:\n            unit, suffix = filesize.pick_unit_and_suffix(\n                unit_and_suffix_calculation_base,\n                [\"bytes\", \"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"],\n                1000,\n            )\n        precision = 0 if unit == 1 else 1\n\n        completed_ratio = completed / unit\n        completed_str = f\"{completed_ratio:,.{precision}f}\"\n\n        if task.total is not None:\n            total = int(task.total)\n            total_ratio = total / unit\n            total_str = f\"{total_ratio:,.{precision}f}\"\n        else:\n            total_str = \"?\"\n\n        download_status = f\"{completed_str}/{total_str} {suffix}\"\n        download_text = Text(download_status, style=\"progress.download\")\n        return download_text\n\n\nclass TransferSpeedColumn(ProgressColumn):\n    \"\"\"Renders human readable transfer speed.\"\"\"\n\n    def render(self, task: \"Task\") -> Text:\n        \"\"\"Show data transfer speed.\"\"\"\n        speed = task.finished_speed or task.speed\n        if speed is None:\n            return Text(\"?\", style=\"progress.data.speed\")\n        data_speed = filesize.decimal(int(speed))\n        return Text(f\"{data_speed}/s\", style=\"progress.data.speed\")\n\n\nclass ProgressSample(NamedTuple):\n    \"\"\"Sample of progress for a given time.\"\"\"\n\n    timestamp: float\n    \"\"\"Timestamp of sample.\"\"\"\n    completed: float\n    \"\"\"Number of steps completed.\"\"\"\n\n\n@dataclass\nclass Task:\n    \"\"\"Information regarding a progress task.\n\n    This object should be considered read-only outside of the :class:`~Progress` class.\n\n    \"\"\"\n\n    id: TaskID\n    \"\"\"Task ID associated with this task (used in Progress methods).\"\"\"\n\n    description: str\n    \"\"\"str: Description of the task.\"\"\"\n\n    total: Optional[float]\n    \"\"\"Optional[float]: Total number of steps in this task.\"\"\"\n\n    completed: float\n    \"\"\"float: Number of steps completed\"\"\"\n\n    _get_time: GetTimeCallable\n    \"\"\"Callable to get the current time.\"\"\"\n\n    finished_time: Optional[float] = None\n    \"\"\"float: Time task was finished.\"\"\"\n\n    visible: bool = True\n    \"\"\"bool: Indicates if this task is visible in the progress display.\"\"\"\n\n    fields: Dict[str, Any] = field(default_factory=dict)\n    \"\"\"dict: Arbitrary fields passed in via Progress.update.\"\"\"\n\n    start_time: Optional[float] = field(default=None, init=False, repr=False)\n    \"\"\"Optional[float]: Time this task was started, or None if not started.\"\"\"\n\n    stop_time: Optional[float] = field(default=None, init=False, repr=False)\n    \"\"\"Optional[float]: Time this task was stopped, or None if not stopped.\"\"\"\n\n    finished_speed: Optional[float] = None\n    \"\"\"Optional[float]: The last speed for a finished task.\"\"\"\n\n    _progress: Deque[ProgressSample] = field(\n        default_factory=lambda: deque(maxlen=1000), init=False, repr=False\n    )\n\n    _lock: RLock = field(repr=False, default_factory=RLock)\n    \"\"\"Thread lock.\"\"\"\n\n    def get_time(self) -> float:\n        \"\"\"float: Get the current time, in seconds.\"\"\"\n        return self._get_time()\n\n    @property\n    def started(self) -> bool:\n        \"\"\"bool: Check if the task as started.\"\"\"\n        return self.start_time is not None\n\n    @property\n    def remaining(self) -> Optional[float]:\n        \"\"\"Optional[float]: Get the number of steps remaining, if a non-None total was set.\"\"\"\n        if self.total is None:\n            return None\n        return self.total - self.completed\n\n    @property\n    def elapsed(self) -> Optional[float]:\n        \"\"\"Optional[float]: Time elapsed since task was started, or ``None`` if the task hasn't started.\"\"\"\n        if self.start_time is None:\n            return None\n        if self.stop_time is not None:\n            return self.stop_time - self.start_time\n        return self.get_time() - self.start_time\n\n    @property\n    def finished(self) -> bool:\n        \"\"\"Check if the task has finished.\"\"\"\n        return self.finished_time is not None\n\n    @property\n    def percentage(self) -> float:\n        \"\"\"float: Get progress of task as a percentage. If a None total was set, returns 0\"\"\"\n        if not self.total:\n            return 0.0\n        completed = (self.completed / self.total) * 100.0\n        completed = min(100.0, max(0.0, completed))\n        return completed\n\n    @property\n    def speed(self) -> Optional[float]:\n        \"\"\"Optional[float]: Get the estimated speed in steps per second.\"\"\"\n        if self.start_time is None:\n            return None\n        with self._lock:\n            progress = self._progress\n            if not progress:\n                return None\n            total_time = progress[-1].timestamp - progress[0].timestamp\n            if total_time == 0:\n                return None\n            iter_progress = iter(progress)\n            next(iter_progress)\n            total_completed = sum(sample.completed for sample in iter_progress)\n            speed = total_completed / total_time\n            return speed\n\n    @property\n    def time_remaining(self) -> Optional[float]:\n        \"\"\"Optional[float]: Get estimated time to completion, or ``None`` if no data.\"\"\"\n        if self.finished:\n            return 0.0\n        speed = self.speed\n        if not speed:\n            return None\n        remaining = self.remaining\n        if remaining is None:\n            return None\n        estimate = ceil(remaining / speed)\n        return estimate\n\n    def _reset(self) -> None:\n        \"\"\"Reset progress.\"\"\"\n        self._progress.clear()\n        self.finished_time = None\n        self.finished_speed = None\n\n\nclass Progress(JupyterMixin):\n    \"\"\"Renders an auto-updating progress bar(s).\n\n    Args:\n        console (Console, optional): Optional Console instance. Default will an internal Console instance writing to stdout.\n        auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()`.\n        refresh_per_second (Optional[float], optional): Number of times per second to refresh the progress information or None to use default (10). Defaults to None.\n        speed_estimate_period: (float, optional): Period (in seconds) used to calculate the speed estimate. Defaults to 30.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        redirect_stdout: (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.\n        redirect_stderr: (bool, optional): Enable redirection of stderr. Defaults to True.\n        get_time: (Callable, optional): A callable that gets the current time, or None to use Console.get_time. Defaults to None.\n        disable (bool, optional): Disable progress display. Defaults to False\n        expand (bool, optional): Expand tasks table to fit width. Defaults to False.\n    \"\"\"\n\n    def __init__(\n        self,\n        *columns: Union[str, ProgressColumn],\n        console: Optional[Console] = None,\n        auto_refresh: bool = True,\n        refresh_per_second: float = 10,\n        speed_estimate_period: float = 30.0,\n        transient: bool = False,\n        redirect_stdout: bool = True,\n        redirect_stderr: bool = True,\n        get_time: Optional[GetTimeCallable] = None,\n        disable: bool = False,\n        expand: bool = False,\n    ) -> None:\n        assert refresh_per_second > 0, \"refresh_per_second must be > 0\"\n        self._lock = RLock()\n        self.columns = columns or self.get_default_columns()\n        self.speed_estimate_period = speed_estimate_period\n\n        self.disable = disable\n        self.expand = expand\n        self._tasks: Dict[TaskID, Task] = {}\n        self._task_index: TaskID = TaskID(0)\n        self.live = Live(\n            console=console or get_console(),\n            auto_refresh=auto_refresh,\n            refresh_per_second=refresh_per_second,\n            transient=transient,\n            redirect_stdout=redirect_stdout,\n            redirect_stderr=redirect_stderr,\n            get_renderable=self.get_renderable,\n        )\n        self.get_time = get_time or self.console.get_time\n        self.print = self.console.print\n        self.log = self.console.log\n\n    @classmethod\n    def get_default_columns(cls) -> Tuple[ProgressColumn, ...]:\n        \"\"\"Get the default columns used for a new Progress instance:\n           - a text column for the description (TextColumn)\n           - the bar itself (BarColumn)\n           - a text column showing completion percentage (TextColumn)\n           - an estimated-time-remaining column (TimeRemainingColumn)\n        If the Progress instance is created without passing a columns argument,\n        the default columns defined here will be used.\n\n        You can also create a Progress instance using custom columns before\n        and/or after the defaults, as in this example:\n\n            progress = Progress(\n                SpinnerColumn(),\n                *Progress.get_default_columns(),\n                \"Elapsed:\",\n                TimeElapsedColumn(),\n            )\n\n        This code shows the creation of a Progress display, containing\n        a spinner to the left, the default columns, and a labeled elapsed\n        time column.\n        \"\"\"\n        return (\n            TextColumn(\"[progress.description]{task.description}\"),\n            BarColumn(),\n            TaskProgressColumn(),\n            TimeRemainingColumn(),\n        )\n\n    @property\n    def console(self) -> Console:\n        return self.live.console\n\n    @property\n    def tasks(self) -> List[Task]:\n        \"\"\"Get a list of Task instances.\"\"\"\n        with self._lock:\n            return list(self._tasks.values())\n\n    @property\n    def task_ids(self) -> List[TaskID]:\n        \"\"\"A list of task IDs.\"\"\"\n        with self._lock:\n            return list(self._tasks.keys())\n\n    @property\n    def finished(self) -> bool:\n        \"\"\"Check if all tasks have been completed.\"\"\"\n        with self._lock:\n            if not self._tasks:\n                return True\n            return all(task.finished for task in self._tasks.values())\n\n    def start(self) -> None:\n        \"\"\"Start the progress display.\"\"\"\n        if not self.disable:\n            self.live.start(refresh=True)\n\n    def stop(self) -> None:\n        \"\"\"Stop the progress display.\"\"\"\n        self.live.stop()\n        if not self.console.is_interactive:\n            self.console.print()\n\n    def __enter__(self) -> \"Progress\":\n        self.start()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self.stop()\n\n    def track(\n        self,\n        sequence: Union[Iterable[ProgressType], Sequence[ProgressType]],\n        total: Optional[float] = None,\n        task_id: Optional[TaskID] = None,\n        description: str = \"Working...\",\n        update_period: float = 0.1,\n    ) -> Iterable[ProgressType]:\n        \"\"\"Track progress by iterating over a sequence.\n\n        Args:\n            sequence (Sequence[ProgressType]): A sequence of values you want to iterate over and track progress.\n            total: (float, optional): Total number of steps. Default is len(sequence).\n            task_id: (TaskID): Task to track. Default is new task.\n            description: (str, optional): Description of task, if new task is created.\n            update_period (float, optional): Minimum time (in seconds) between calls to update(). Defaults to 0.1.\n\n        Returns:\n            Iterable[ProgressType]: An iterable of values taken from the provided sequence.\n        \"\"\"\n        if total is None:\n            total = float(length_hint(sequence)) or None\n\n        if task_id is None:\n            task_id = self.add_task(description, total=total)\n        else:\n            self.update(task_id, total=total)\n\n        if self.live.auto_refresh:\n            with _TrackThread(self, task_id, update_period) as track_thread:\n                for value in sequence:\n                    yield value\n                    track_thread.completed += 1\n        else:\n            advance = self.advance\n            refresh = self.refresh\n            for value in sequence:\n                yield value\n                advance(task_id, 1)\n                refresh()\n\n    def wrap_file(\n        self,\n        file: BinaryIO,\n        total: Optional[int] = None,\n        *,\n        task_id: Optional[TaskID] = None,\n        description: str = \"Reading...\",\n    ) -> BinaryIO:\n        \"\"\"Track progress file reading from a binary file.\n\n        Args:\n            file (BinaryIO): A file-like object opened in binary mode.\n            total (int, optional): Total number of bytes to read. This must be provided unless a task with a total is also given.\n            task_id (TaskID): Task to track. Default is new task.\n            description (str, optional): Description of task, if new task is created.\n\n        Returns:\n            BinaryIO: A readable file-like object in binary mode.\n\n        Raises:\n            ValueError: When no total value can be extracted from the arguments or the task.\n        \"\"\"\n        # attempt to recover the total from the task\n        total_bytes: Optional[float] = None\n        if total is not None:\n            total_bytes = total\n        elif task_id is not None:\n            with self._lock:\n                total_bytes = self._tasks[task_id].total\n        if total_bytes is None:\n            raise ValueError(\n                f\"unable to get the total number of bytes, please specify 'total'\"\n            )\n\n        # update total of task or create new task\n        if task_id is None:\n            task_id = self.add_task(description, total=total_bytes)\n        else:\n            self.update(task_id, total=total_bytes)\n\n        return _Reader(file, self, task_id, close_handle=False)\n\n    @typing.overload\n    def open(\n        self,\n        file: Union[str, \"PathLike[str]\", bytes],\n        mode: Literal[\"rb\"],\n        buffering: int = -1,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n        newline: Optional[str] = None,\n        *,\n        total: Optional[int] = None,\n        task_id: Optional[TaskID] = None,\n        description: str = \"Reading...\",\n    ) -> BinaryIO:\n        pass\n\n    @typing.overload\n    def open(\n        self,\n        file: Union[str, \"PathLike[str]\", bytes],\n        mode: Union[Literal[\"r\"], Literal[\"rt\"]],\n        buffering: int = -1,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n        newline: Optional[str] = None,\n        *,\n        total: Optional[int] = None,\n        task_id: Optional[TaskID] = None,\n        description: str = \"Reading...\",\n    ) -> TextIO:\n        pass\n\n    def open(\n        self,\n        file: Union[str, \"PathLike[str]\", bytes],\n        mode: Union[Literal[\"rb\"], Literal[\"rt\"], Literal[\"r\"]] = \"r\",\n        buffering: int = -1,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n        newline: Optional[str] = None,\n        *,\n        total: Optional[int] = None,\n        task_id: Optional[TaskID] = None,\n        description: str = \"Reading...\",\n    ) -> Union[BinaryIO, TextIO]:\n        \"\"\"Track progress while reading from a binary file.\n\n        Args:\n            path (Union[str, PathLike[str]]): The path to the file to read.\n            mode (str): The mode to use to open the file. Only supports \"r\", \"rb\" or \"rt\".\n            buffering (int): The buffering strategy to use, see :func:`io.open`.\n            encoding (str, optional): The encoding to use when reading in text mode, see :func:`io.open`.\n            errors (str, optional): The error handling strategy for decoding errors, see :func:`io.open`.\n            newline (str, optional): The strategy for handling newlines in text mode, see :func:`io.open`.\n            total (int, optional): Total number of bytes to read. If none given, os.stat(path).st_size is used.\n            task_id (TaskID): Task to track. Default is new task.\n            description (str, optional): Description of task, if new task is created.\n\n        Returns:\n            BinaryIO: A readable file-like object in binary mode.\n\n        Raises:\n            ValueError: When an invalid mode is given.\n        \"\"\"\n        # normalize the mode (always rb, rt)\n        _mode = \"\".join(sorted(mode, reverse=False))\n        if _mode not in (\"br\", \"rt\", \"r\"):\n            raise ValueError(\"invalid mode {!r}\".format(mode))\n\n        # patch buffering to provide the same behaviour as the builtin `open`\n        line_buffering = buffering == 1\n        if _mode == \"br\" and buffering == 1:\n            warnings.warn(\n                \"line buffering (buffering=1) isn't supported in binary mode, the default buffer size will be used\",\n                RuntimeWarning,\n            )\n            buffering = -1\n        elif _mode in (\"rt\", \"r\"):\n            if buffering == 0:\n                raise ValueError(\"can't have unbuffered text I/O\")\n            elif buffering == 1:\n                buffering = -1\n\n        # attempt to get the total with `os.stat`\n        if total is None:\n            total = stat(file).st_size\n\n        # update total of task or create new task\n        if task_id is None:\n            task_id = self.add_task(description, total=total)\n        else:\n            self.update(task_id, total=total)\n\n        # open the file in binary mode,\n        handle = io.open(file, \"rb\", buffering=buffering)\n        reader = _Reader(handle, self, task_id, close_handle=True)\n\n        # wrap the reader in a `TextIOWrapper` if text mode\n        if mode in (\"r\", \"rt\"):\n            return io.TextIOWrapper(\n                reader,\n                encoding=encoding,\n                errors=errors,\n                newline=newline,\n                line_buffering=line_buffering,\n            )\n\n        return reader\n\n    def start_task(self, task_id: TaskID) -> None:\n        \"\"\"Start a task.\n\n        Starts a task (used when calculating elapsed time). You may need to call this manually,\n        if you called ``add_task`` with ``start=False``.\n\n        Args:\n            task_id (TaskID): ID of task.\n        \"\"\"\n        with self._lock:\n            task = self._tasks[task_id]\n            if task.start_time is None:\n                task.start_time = self.get_time()\n\n    def stop_task(self, task_id: TaskID) -> None:\n        \"\"\"Stop a task.\n\n        This will freeze the elapsed time on the task.\n\n        Args:\n            task_id (TaskID): ID of task.\n        \"\"\"\n        with self._lock:\n            task = self._tasks[task_id]\n            current_time = self.get_time()\n            if task.start_time is None:\n                task.start_time = current_time\n            task.stop_time = current_time\n\n    def update(\n        self,\n        task_id: TaskID,\n        *,\n        total: Optional[float] = None,\n        completed: Optional[float] = None,\n        advance: Optional[float] = None,\n        description: Optional[str] = None,\n        visible: Optional[bool] = None,\n        refresh: bool = False,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Update information associated with a task.\n\n        Args:\n            task_id (TaskID): Task id (returned by add_task).\n            total (float, optional): Updates task.total if not None.\n            completed (float, optional): Updates task.completed if not None.\n            advance (float, optional): Add a value to task.completed if not None.\n            description (str, optional): Change task description if not None.\n            visible (bool, optional): Set visible flag if not None.\n            refresh (bool): Force a refresh of progress information. Default is False.\n            **fields (Any): Additional data fields required for rendering.\n        \"\"\"\n        with self._lock:\n            task = self._tasks[task_id]\n            completed_start = task.completed\n\n            if total is not None and total != task.total:\n                task.total = total\n                task._reset()\n            if advance is not None:\n                task.completed += advance\n            if completed is not None:\n                task.completed = completed\n            if description is not None:\n                task.description = description\n            if visible is not None:\n                task.visible = visible\n            task.fields.update(fields)\n            update_completed = task.completed - completed_start\n\n            current_time = self.get_time()\n            old_sample_time = current_time - self.speed_estimate_period\n            _progress = task._progress\n\n            popleft = _progress.popleft\n            while _progress and _progress[0].timestamp < old_sample_time:\n                popleft()\n            if update_completed > 0:\n                _progress.append(ProgressSample(current_time, update_completed))\n            if (\n                task.total is not None\n                and task.completed >= task.total\n                and task.finished_time is None\n            ):\n                task.finished_time = task.elapsed\n\n        if refresh:\n            self.refresh()\n\n    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.\n\n        Args:\n            task_id (TaskID): ID of task.\n            start (bool, optional): Start the task after reset. Defaults to True.\n            total (float, optional): New total steps in task, or None to use current total. Defaults to None.\n            completed (int, optional): Number of steps completed. Defaults to 0.\n            visible (bool, optional): Enable display of the task. Defaults to True.\n            description (str, optional): Change task description if not None. Defaults to None.\n            **fields (str): Additional data fields required for rendering.\n        \"\"\"\n        current_time = self.get_time()\n        with self._lock:\n            task = self._tasks[task_id]\n            task._reset()\n            task.start_time = current_time if start else None\n            if total is not None:\n                task.total = total\n            task.completed = completed\n            if visible is not None:\n                task.visible = visible\n            if fields:\n                task.fields = fields\n            if description is not None:\n                task.description = description\n            task.finished_time = None\n        self.refresh()\n\n    def advance(self, task_id: TaskID, advance: float = 1) -> None:\n        \"\"\"Advance task by a number of steps.\n\n        Args:\n            task_id (TaskID): ID of task.\n            advance (float): Number of steps to advance. Default is 1.\n        \"\"\"\n        current_time = self.get_time()\n        with self._lock:\n            task = self._tasks[task_id]\n            completed_start = task.completed\n            task.completed += advance\n            update_completed = task.completed - completed_start\n            old_sample_time = current_time - self.speed_estimate_period\n            _progress = task._progress\n\n            popleft = _progress.popleft\n            while _progress and _progress[0].timestamp < old_sample_time:\n                popleft()\n            while len(_progress) > 1000:\n                popleft()\n            _progress.append(ProgressSample(current_time, update_completed))\n            if (\n                task.total is not None\n                and task.completed >= task.total\n                and task.finished_time is None\n            ):\n                task.finished_time = task.elapsed\n                task.finished_speed = task.speed\n\n    def refresh(self) -> None:\n        \"\"\"Refresh (render) the progress information.\"\"\"\n        if not self.disable and self.live.is_started:\n            self.live.refresh()\n\n    def get_renderable(self) -> RenderableType:\n        \"\"\"Get a renderable for the progress display.\"\"\"\n        renderable = Group(*self.get_renderables())\n        return renderable\n\n    def get_renderables(self) -> Iterable[RenderableType]:\n        \"\"\"Get a number of renderables for the progress display.\"\"\"\n        table = self.make_tasks_table(self.tasks)\n        yield table\n\n    def make_tasks_table(self, tasks: Iterable[Task]) -> Table:\n        \"\"\"Get a table to render the Progress display.\n\n        Args:\n            tasks (Iterable[Task]): An iterable of Task instances, one per row of the table.\n\n        Returns:\n            Table: A table instance.\n        \"\"\"\n        table_columns = (\n            (\n                Column(no_wrap=True)\n                if isinstance(_column, str)\n                else _column.get_table_column().copy()\n            )\n            for _column in self.columns\n        )\n        table = Table.grid(*table_columns, padding=(0, 1), expand=self.expand)\n\n        for task in tasks:\n            if task.visible:\n                table.add_row(\n                    *(\n                        (\n                            column.format(task=task)\n                            if isinstance(column, str)\n                            else column(task)\n                        )\n                        for column in self.columns\n                    )\n                )\n        return table\n\n    def __rich__(self) -> RenderableType:\n        \"\"\"Makes the Progress class itself renderable.\"\"\"\n        with self._lock:\n            return self.get_renderable()\n\n    def add_task(\n        self,\n        description: str,\n        start: bool = True,\n        total: Optional[float] = 100.0,\n        completed: int = 0,\n        visible: bool = True,\n        **fields: Any,\n    ) -> TaskID:\n        \"\"\"Add a new 'task' to the Progress display.\n\n        Args:\n            description (str): A description of the task.\n            start (bool, optional): Start the task immediately (to calculate elapsed time). If set to False,\n                you will need to call `start` manually. Defaults to True.\n            total (float, optional): Number of total steps in the progress if known.\n                Set to None to render a pulsing animation. Defaults to 100.\n            completed (int, optional): Number of steps completed so far. Defaults to 0.\n            visible (bool, optional): Enable display of the task. Defaults to True.\n            **fields (str): Additional data fields required for rendering.\n\n        Returns:\n            TaskID: An ID you can use when calling `update`.\n        \"\"\"\n        with self._lock:\n            task = Task(\n                self._task_index,\n                description,\n                total,\n                completed,\n                visible=visible,\n                fields=fields,\n                _get_time=self.get_time,\n                _lock=self._lock,\n            )\n            self._tasks[self._task_index] = task\n            if start:\n                self.start_task(self._task_index)\n            new_task_index = self._task_index\n            self._task_index = TaskID(int(self._task_index) + 1)\n        self.refresh()\n        return new_task_index\n\n    def remove_task(self, task_id: TaskID) -> None:\n        \"\"\"Delete a task if it exists.\n\n        Args:\n            task_id (TaskID): A task ID.\n\n        \"\"\"\n        with self._lock:\n            del self._tasks[task_id]\n\n\nif __name__ == \"__main__\":  # pragma: no coverage\n    import random\n    import time\n\n    from .panel import Panel\n    from .rule import Rule\n    from .syntax import Syntax\n    from .table import Table\n\n    syntax = Syntax(\n        '''def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    for value in iter_values:\n        yield False, previous_value\n        previous_value = value\n    yield True, previous_value''',\n        \"python\",\n        line_numbers=True,\n    )\n\n    table = Table(\"foo\", \"bar\", \"baz\")\n    table.add_row(\"1\", \"2\", \"3\")\n\n    progress_renderables = [\n        \"Text may be printed while the progress bars are rendering.\",\n        Panel(\"In fact, [i]any[/i] renderable will work\"),\n        \"Such as [magenta]tables[/]...\",\n        table,\n        \"Pretty printed structures...\",\n        {\"type\": \"example\", \"text\": \"Pretty printed\"},\n        \"Syntax...\",\n        syntax,\n        Rule(\"Give it a try!\"),\n    ]\n\n    from itertools import cycle\n\n    examples = cycle(progress_renderables)\n\n    console = Console(record=True)\n\n    with Progress(\n        SpinnerColumn(),\n        *Progress.get_default_columns(),\n        TimeElapsedColumn(),\n        console=console,\n        transient=False,\n    ) as progress:\n        task1 = progress.add_task(\"[red]Downloading\", total=1000)\n        task2 = progress.add_task(\"[green]Processing\", total=1000)\n        task3 = progress.add_task(\"[yellow]Thinking\", total=None)\n\n        while not progress.finished:\n            progress.update(task1, advance=0.5)\n            progress.update(task2, advance=0.3)\n            time.sleep(0.01)\n            if random.randint(0, 100) < 1:\n                progress.log(next(examples))\n", "rich/themes.py": "from .default_styles import DEFAULT_STYLES\nfrom .theme import Theme\n\n\nDEFAULT = Theme(DEFAULT_STYLES)\n", "rich/_stack.py": "from typing import List, TypeVar\n\nT = TypeVar(\"T\")\n\n\nclass Stack(List[T]):\n    \"\"\"A small shim over builtin list.\"\"\"\n\n    @property\n    def top(self) -> T:\n        \"\"\"Get top of stack.\"\"\"\n        return self[-1]\n\n    def push(self, item: T) -> None:\n        \"\"\"Push an item on to the stack (append in stack nomenclature).\"\"\"\n        self.append(item)\n", "rich/_inspect.py": "from __future__ import absolute_import\n\nimport inspect\nfrom inspect import cleandoc, getdoc, getfile, isclass, ismodule, signature\nfrom typing import Any, Collection, Iterable, Optional, Tuple, Type, Union\n\nfrom .console import Group, RenderableType\nfrom .control import escape_control_codes\nfrom .highlighter import ReprHighlighter\nfrom .jupyter import JupyterMixin\nfrom .panel import Panel\nfrom .pretty import Pretty\nfrom .table import Table\nfrom .text import Text, TextType\n\n\ndef _first_paragraph(doc: str) -> str:\n    \"\"\"Get the first paragraph from a docstring.\"\"\"\n    paragraph, _, _ = doc.partition(\"\\n\\n\")\n    return paragraph\n\n\nclass Inspect(JupyterMixin):\n    \"\"\"A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    \"\"\"\n\n    def __init__(\n        self,\n        obj: Any,\n        *,\n        title: Optional[TextType] = None,\n        help: bool = False,\n        methods: bool = False,\n        docs: bool = True,\n        private: bool = False,\n        dunder: bool = False,\n        sort: bool = True,\n        all: bool = True,\n        value: bool = True,\n    ) -> None:\n        self.highlighter = ReprHighlighter()\n        self.obj = obj\n        self.title = title or self._make_title(obj)\n        if all:\n            methods = private = dunder = True\n        self.help = help\n        self.methods = methods\n        self.docs = docs or help\n        self.private = private or dunder\n        self.dunder = dunder\n        self.sort = sort\n        self.value = value\n\n    def _make_title(self, obj: Any) -> Text:\n        \"\"\"Make a default title.\"\"\"\n        title_str = (\n            str(obj)\n            if (isclass(obj) or callable(obj) or ismodule(obj))\n            else str(type(obj))\n        )\n        title_text = self.highlighter(title_str)\n        return title_text\n\n    def __rich__(self) -> Panel:\n        return Panel.fit(\n            Group(*self._render()),\n            title=self.title,\n            border_style=\"scope.border\",\n            padding=(0, 1),\n        )\n\n    def _get_signature(self, name: str, obj: Any) -> Optional[Text]:\n        \"\"\"Get a signature for a callable.\"\"\"\n        try:\n            _signature = str(signature(obj)) + \":\"\n        except ValueError:\n            _signature = \"(...)\"\n        except TypeError:\n            return None\n\n        source_filename: Optional[str] = None\n        try:\n            source_filename = getfile(obj)\n        except (OSError, TypeError):\n            # OSError is raised if obj has no source file, e.g. when defined in REPL.\n            pass\n\n        callable_name = Text(name, style=\"inspect.callable\")\n        if source_filename:\n            callable_name.stylize(f\"link file://{source_filename}\")\n        signature_text = self.highlighter(_signature)\n\n        qualname = name or getattr(obj, \"__qualname__\", name)\n\n        # If obj is a module, there may be classes (which are callable) to display\n        if inspect.isclass(obj):\n            prefix = \"class\"\n        elif inspect.iscoroutinefunction(obj):\n            prefix = \"async def\"\n        else:\n            prefix = \"def\"\n\n        qual_signature = Text.assemble(\n            (f\"{prefix} \", f\"inspect.{prefix.replace(' ', '_')}\"),\n            (qualname, \"inspect.callable\"),\n            signature_text,\n        )\n\n        return qual_signature\n\n    def _render(self) -> Iterable[RenderableType]:\n        \"\"\"Render object.\"\"\"\n\n        def sort_items(item: Tuple[str, Any]) -> Tuple[bool, str]:\n            key, (_error, value) = item\n            return (callable(value), key.strip(\"_\").lower())\n\n        def safe_getattr(attr_name: str) -> Tuple[Any, Any]:\n            \"\"\"Get attribute or any exception.\"\"\"\n            try:\n                return (None, getattr(obj, attr_name))\n            except Exception as error:\n                return (error, None)\n\n        obj = self.obj\n        keys = dir(obj)\n        total_items = len(keys)\n        if not self.dunder:\n            keys = [key for key in keys if not key.startswith(\"__\")]\n        if not self.private:\n            keys = [key for key in keys if not key.startswith(\"_\")]\n        not_shown_count = total_items - len(keys)\n        items = [(key, safe_getattr(key)) for key in keys]\n        if self.sort:\n            items.sort(key=sort_items)\n\n        items_table = Table.grid(padding=(0, 1), expand=False)\n        items_table.add_column(justify=\"right\")\n        add_row = items_table.add_row\n        highlighter = self.highlighter\n\n        if callable(obj):\n            signature = self._get_signature(\"\", obj)\n            if signature is not None:\n                yield signature\n                yield \"\"\n\n        if self.docs:\n            _doc = self._get_formatted_doc(obj)\n            if _doc is not None:\n                doc_text = Text(_doc, style=\"inspect.help\")\n                doc_text = highlighter(doc_text)\n                yield doc_text\n                yield \"\"\n\n        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n            yield Panel(\n                Pretty(obj, indent_guides=True, max_length=10, max_string=60),\n                border_style=\"inspect.value.border\",\n            )\n            yield \"\"\n\n        for key, (error, value) in items:\n            key_text = Text.assemble(\n                (\n                    key,\n                    \"inspect.attr.dunder\" if key.startswith(\"__\") else \"inspect.attr\",\n                ),\n                (\" =\", \"inspect.equals\"),\n            )\n            if error is not None:\n                warning = key_text.copy()\n                warning.stylize(\"inspect.error\")\n                add_row(warning, highlighter(repr(error)))\n                continue\n\n            if callable(value):\n                if not self.methods:\n                    continue\n\n                _signature_text = self._get_signature(key, value)\n                if _signature_text is None:\n                    add_row(key_text, Pretty(value, highlighter=highlighter))\n                else:\n                    if self.docs:\n                        docs = self._get_formatted_doc(value)\n                        if docs is not None:\n                            _signature_text.append(\"\\n\" if \"\\n\" in docs else \" \")\n                            doc = highlighter(docs)\n                            doc.stylize(\"inspect.doc\")\n                            _signature_text.append(doc)\n\n                    add_row(key_text, _signature_text)\n            else:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n        if items_table.row_count:\n            yield items_table\n        elif not_shown_count:\n            yield Text.from_markup(\n                f\"[b cyan]{not_shown_count}[/][i] attribute(s) not shown.[/i] \"\n                f\"Run [b][magenta]inspect[/]([not b]inspect[/])[/b] for options.\"\n            )\n\n    def _get_formatted_doc(self, object_: Any) -> Optional[str]:\n        \"\"\"\n        Extract the docstring of an object, process it and returns it.\n        The processing consists in cleaning up the doctring's indentation,\n        taking only its 1st paragraph if `self.help` is not True,\n        and escape its control codes.\n\n        Args:\n            object_ (Any): the object to get the docstring from.\n\n        Returns:\n            Optional[str]: the processed docstring, or None if no docstring was found.\n        \"\"\"\n        docs = getdoc(object_)\n        if docs is None:\n            return None\n        docs = cleandoc(docs).strip()\n        if not self.help:\n            docs = _first_paragraph(docs)\n        return escape_control_codes(docs)\n\n\ndef get_object_types_mro(obj: Union[object, Type[Any]]) -> Tuple[type, ...]:\n    \"\"\"Returns the MRO of an object's class, or of the object itself if it's a class.\"\"\"\n    if not hasattr(obj, \"__mro__\"):\n        # N.B. we cannot use `if type(obj) is type` here because it doesn't work with\n        # some types of classes, such as the ones that use abc.ABCMeta.\n        obj = type(obj)\n    return getattr(obj, \"__mro__\", ())\n\n\ndef get_object_types_mro_as_strings(obj: object) -> Collection[str]:\n    \"\"\"\n    Returns the MRO of an object's class as full qualified names, or of the object itself if it's a class.\n\n    Examples:\n        `object_types_mro_as_strings(JSONDecoder)` will return `['json.decoder.JSONDecoder', 'builtins.object']`\n    \"\"\"\n    return [\n        f'{getattr(type_, \"__module__\", \"\")}.{getattr(type_, \"__qualname__\", \"\")}'\n        for type_ in get_object_types_mro(obj)\n    ]\n\n\ndef is_object_one_of_types(\n    obj: object, fully_qualified_types_names: Collection[str]\n) -> bool:\n    \"\"\"\n    Returns `True` if the given object's class (or the object itself, if it's a class) has one of the\n    fully qualified names in its MRO.\n    \"\"\"\n    for type_name in get_object_types_mro_as_strings(obj):\n        if type_name in fully_qualified_types_names:\n            return True\n    return False\n", "rich/screen.py": "from typing import Optional, TYPE_CHECKING\n\nfrom .segment import Segment\nfrom .style import StyleType\nfrom ._loop import loop_last\n\n\nif TYPE_CHECKING:\n    from .console import (\n        Console,\n        ConsoleOptions,\n        RenderResult,\n        RenderableType,\n        Group,\n    )\n\n\nclass Screen:\n    \"\"\"A renderable that fills the terminal screen and crops excess.\n\n    Args:\n        renderable (RenderableType): Child renderable.\n        style (StyleType, optional): Optional background style. Defaults to None.\n    \"\"\"\n\n    renderable: \"RenderableType\"\n\n    def __init__(\n        self,\n        *renderables: \"RenderableType\",\n        style: Optional[StyleType] = None,\n        application_mode: bool = False,\n    ) -> None:\n        from rich.console import Group\n\n        self.renderable = Group(*renderables)\n        self.style = style\n        self.application_mode = application_mode\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        width, height = options.size\n        style = console.get_style(self.style) if self.style else None\n        render_options = options.update(width=width, height=height)\n        lines = console.render_lines(\n            self.renderable or \"\", render_options, style=style, pad=True\n        )\n        lines = Segment.set_shape(lines, width, height, style=style)\n        new_line = Segment(\"\\n\\r\") if self.application_mode else Segment.line()\n        for last, line in loop_last(lines):\n            yield from line\n            if not last:\n                yield new_line\n", "rich/spinner.py": "from typing import cast, List, Optional, TYPE_CHECKING, Union\n\nfrom ._spinners import SPINNERS\nfrom .measure import Measurement\nfrom .table import Table\nfrom .text import Text\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderResult, RenderableType\n    from .style import StyleType\n\n\nclass Spinner:\n    \"\"\"A spinner animation.\n\n    Args:\n        name (str): Name of spinner (run python -m rich.spinner).\n        text (RenderableType, optional): A renderable to display at the right of the spinner (str or Text typically). Defaults to \"\".\n        style (StyleType, optional): Style for spinner animation. Defaults to None.\n        speed (float, optional): Speed factor for animation. Defaults to 1.0.\n\n    Raises:\n        KeyError: If name isn't one of the supported spinner animations.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        text: \"RenderableType\" = \"\",\n        *,\n        style: Optional[\"StyleType\"] = None,\n        speed: float = 1.0,\n    ) -> None:\n        try:\n            spinner = SPINNERS[name]\n        except KeyError:\n            raise KeyError(f\"no spinner called {name!r}\")\n        self.text: \"Union[RenderableType, Text]\" = (\n            Text.from_markup(text) if isinstance(text, str) else text\n        )\n        self.frames = cast(List[str], spinner[\"frames\"])[:]\n        self.interval = cast(float, spinner[\"interval\"])\n        self.start_time: Optional[float] = None\n        self.style = style\n        self.speed = speed\n        self.frame_no_offset: float = 0.0\n        self._update_speed = 0.0\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        yield self.render(console.get_time())\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Measurement:\n        text = self.render(0)\n        return Measurement.get(console, options, text)\n\n    def render(self, time: float) -> \"RenderableType\":\n        \"\"\"Render the spinner for a given time.\n\n        Args:\n            time (float): Time in seconds.\n\n        Returns:\n            RenderableType: A renderable containing animation frame.\n        \"\"\"\n        if self.start_time is None:\n            self.start_time = time\n\n        frame_no = ((time - self.start_time) * self.speed) / (\n            self.interval / 1000.0\n        ) + self.frame_no_offset\n        frame = Text(\n            self.frames[int(frame_no) % len(self.frames)], style=self.style or \"\"\n        )\n\n        if self._update_speed:\n            self.frame_no_offset = frame_no\n            self.start_time = time\n            self.speed = self._update_speed\n            self._update_speed = 0.0\n\n        if not self.text:\n            return frame\n        elif isinstance(self.text, (str, Text)):\n            return Text.assemble(frame, \" \", self.text)\n        else:\n            table = Table.grid(padding=1)\n            table.add_row(frame, self.text)\n            return table\n\n    def update(\n        self,\n        *,\n        text: \"RenderableType\" = \"\",\n        style: Optional[\"StyleType\"] = None,\n        speed: Optional[float] = None,\n    ) -> None:\n        \"\"\"Updates attributes of a spinner after it has been started.\n\n        Args:\n            text (RenderableType, optional): A renderable to display at the right of the spinner (str or Text typically). Defaults to \"\".\n            style (StyleType, optional): Style for spinner animation. Defaults to None.\n            speed (float, optional): Speed factor for animation. Defaults to None.\n        \"\"\"\n        if text:\n            self.text = Text.from_markup(text) if isinstance(text, str) else text\n        if style:\n            self.style = style\n        if speed:\n            self._update_speed = speed\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from time import sleep\n\n    from .columns import Columns\n    from .panel import Panel\n    from .live import Live\n\n    all_spinners = Columns(\n        [\n            Spinner(spinner_name, text=Text(repr(spinner_name), style=\"green\"))\n            for spinner_name in sorted(SPINNERS.keys())\n        ],\n        column_first=True,\n        expand=True,\n    )\n\n    with Live(\n        Panel(all_spinners, title=\"Spinners\", border_style=\"blue\"),\n        refresh_per_second=20,\n    ) as live:\n        while True:\n            sleep(0.1)\n", "rich/file_proxy.py": "import io\nfrom typing import IO, TYPE_CHECKING, Any, List\n\nfrom .ansi import AnsiDecoder\nfrom .text import Text\n\nif TYPE_CHECKING:\n    from .console import Console\n\n\nclass FileProxy(io.TextIOBase):\n    \"\"\"Wraps a file (e.g. sys.stdout) and redirects writes to a console.\"\"\"\n\n    def __init__(self, console: \"Console\", file: IO[str]) -> None:\n        self.__console = console\n        self.__file = file\n        self.__buffer: List[str] = []\n        self.__ansi_decoder = AnsiDecoder()\n\n    @property\n    def rich_proxied_file(self) -> IO[str]:\n        \"\"\"Get proxied file.\"\"\"\n        return self.__file\n\n    def __getattr__(self, name: str) -> Any:\n        return getattr(self.__file, name)\n\n    def write(self, text: str) -> int:\n        if not isinstance(text, str):\n            raise TypeError(f\"write() argument must be str, not {type(text).__name__}\")\n        buffer = self.__buffer\n        lines: List[str] = []\n        while text:\n            line, new_line, text = text.partition(\"\\n\")\n            if new_line:\n                lines.append(\"\".join(buffer) + line)\n                buffer.clear()\n            else:\n                buffer.append(line)\n                break\n        if lines:\n            console = self.__console\n            with console:\n                output = Text(\"\\n\").join(\n                    self.__ansi_decoder.decode_line(line) for line in lines\n                )\n                console.print(output)\n        return len(text)\n\n    def flush(self) -> None:\n        output = \"\".join(self.__buffer)\n        if output:\n            self.__console.print(output)\n        del self.__buffer[:]\n\n    def fileno(self) -> int:\n        return self.__file.fileno()\n", "rich/terminal_theme.py": "from typing import List, Optional, Tuple\n\nfrom .color_triplet import ColorTriplet\nfrom .palette import Palette\n\n_ColorTuple = Tuple[int, int, int]\n\n\nclass TerminalTheme:\n    \"\"\"A color theme used when exporting console content.\n\n    Args:\n        background (Tuple[int, int, int]): The background color.\n        foreground (Tuple[int, int, int]): The foreground (text) color.\n        normal (List[Tuple[int, int, int]]): A list of 8 normal intensity colors.\n        bright (List[Tuple[int, int, int]], optional): A list of 8 bright colors, or None\n            to repeat normal intensity. Defaults to None.\n    \"\"\"\n\n    def __init__(\n        self,\n        background: _ColorTuple,\n        foreground: _ColorTuple,\n        normal: List[_ColorTuple],\n        bright: Optional[List[_ColorTuple]] = None,\n    ) -> None:\n        self.background_color = ColorTriplet(*background)\n        self.foreground_color = ColorTriplet(*foreground)\n        self.ansi_colors = Palette(normal + (bright or normal))\n\n\nDEFAULT_TERMINAL_THEME = TerminalTheme(\n    (255, 255, 255),\n    (0, 0, 0),\n    [\n        (0, 0, 0),\n        (128, 0, 0),\n        (0, 128, 0),\n        (128, 128, 0),\n        (0, 0, 128),\n        (128, 0, 128),\n        (0, 128, 128),\n        (192, 192, 192),\n    ],\n    [\n        (128, 128, 128),\n        (255, 0, 0),\n        (0, 255, 0),\n        (255, 255, 0),\n        (0, 0, 255),\n        (255, 0, 255),\n        (0, 255, 255),\n        (255, 255, 255),\n    ],\n)\n\nMONOKAI = TerminalTheme(\n    (12, 12, 12),\n    (217, 217, 217),\n    [\n        (26, 26, 26),\n        (244, 0, 95),\n        (152, 224, 36),\n        (253, 151, 31),\n        (157, 101, 255),\n        (244, 0, 95),\n        (88, 209, 235),\n        (196, 197, 181),\n        (98, 94, 76),\n    ],\n    [\n        (244, 0, 95),\n        (152, 224, 36),\n        (224, 213, 97),\n        (157, 101, 255),\n        (244, 0, 95),\n        (88, 209, 235),\n        (246, 246, 239),\n    ],\n)\nDIMMED_MONOKAI = TerminalTheme(\n    (25, 25, 25),\n    (185, 188, 186),\n    [\n        (58, 61, 67),\n        (190, 63, 72),\n        (135, 154, 59),\n        (197, 166, 53),\n        (79, 118, 161),\n        (133, 92, 141),\n        (87, 143, 164),\n        (185, 188, 186),\n        (136, 137, 135),\n    ],\n    [\n        (251, 0, 31),\n        (15, 114, 47),\n        (196, 112, 51),\n        (24, 109, 227),\n        (251, 0, 103),\n        (46, 112, 109),\n        (253, 255, 185),\n    ],\n)\nNIGHT_OWLISH = TerminalTheme(\n    (255, 255, 255),\n    (64, 63, 83),\n    [\n        (1, 22, 39),\n        (211, 66, 62),\n        (42, 162, 152),\n        (218, 170, 1),\n        (72, 118, 214),\n        (64, 63, 83),\n        (8, 145, 106),\n        (122, 129, 129),\n        (122, 129, 129),\n    ],\n    [\n        (247, 110, 110),\n        (73, 208, 197),\n        (218, 194, 107),\n        (92, 167, 228),\n        (105, 112, 152),\n        (0, 201, 144),\n        (152, 159, 177),\n    ],\n)\n\nSVG_EXPORT_THEME = TerminalTheme(\n    (41, 41, 41),\n    (197, 200, 198),\n    [\n        (75, 78, 85),\n        (204, 85, 90),\n        (152, 168, 75),\n        (208, 179, 68),\n        (96, 138, 177),\n        (152, 114, 159),\n        (104, 160, 179),\n        (197, 200, 198),\n        (154, 155, 153),\n    ],\n    [\n        (255, 38, 39),\n        (0, 130, 61),\n        (208, 132, 66),\n        (25, 132, 233),\n        (255, 44, 122),\n        (57, 130, 128),\n        (253, 253, 197),\n    ],\n)\n", "rich/syntax.py": "import os.path\nimport platform\nimport re\nimport sys\nimport textwrap\nfrom abc import ABC, abstractmethod\nfrom pathlib import Path\nfrom typing import (\n    Any,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom pygments.lexer import Lexer\nfrom pygments.lexers import get_lexer_by_name, guess_lexer_for_filename\nfrom pygments.style import Style as PygmentsStyle\nfrom pygments.styles import get_style_by_name\nfrom pygments.token import (\n    Comment,\n    Error,\n    Generic,\n    Keyword,\n    Name,\n    Number,\n    Operator,\n    String,\n    Token,\n    Whitespace,\n)\nfrom pygments.util import ClassNotFound\n\nfrom rich.containers import Lines\nfrom rich.padding import Padding, PaddingDimensions\n\nfrom ._loop import loop_first\nfrom .cells import cell_len\nfrom .color import Color, blend_rgb\nfrom .console import Console, ConsoleOptions, JustifyMethod, RenderResult\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .segment import Segment, Segments\nfrom .style import Style, StyleType\nfrom .text import Text\n\nTokenType = Tuple[str, ...]\n\nWINDOWS = platform.system() == \"Windows\"\nDEFAULT_THEME = \"monokai\"\n\n# The following styles are based on https://github.com/pygments/pygments/blob/master/pygments/formatters/terminal.py\n# A few modifications were made\n\nANSI_LIGHT: Dict[TokenType, Style] = {\n    Token: Style(),\n    Whitespace: Style(color=\"white\"),\n    Comment: Style(dim=True),\n    Comment.Preproc: Style(color=\"cyan\"),\n    Keyword: Style(color=\"blue\"),\n    Keyword.Type: Style(color=\"cyan\"),\n    Operator.Word: Style(color=\"magenta\"),\n    Name.Builtin: Style(color=\"cyan\"),\n    Name.Function: Style(color=\"green\"),\n    Name.Namespace: Style(color=\"cyan\", underline=True),\n    Name.Class: Style(color=\"green\", underline=True),\n    Name.Exception: Style(color=\"cyan\"),\n    Name.Decorator: Style(color=\"magenta\", bold=True),\n    Name.Variable: Style(color=\"red\"),\n    Name.Constant: Style(color=\"red\"),\n    Name.Attribute: Style(color=\"cyan\"),\n    Name.Tag: Style(color=\"bright_blue\"),\n    String: Style(color=\"yellow\"),\n    Number: Style(color=\"blue\"),\n    Generic.Deleted: Style(color=\"bright_red\"),\n    Generic.Inserted: Style(color=\"green\"),\n    Generic.Heading: Style(bold=True),\n    Generic.Subheading: Style(color=\"magenta\", bold=True),\n    Generic.Prompt: Style(bold=True),\n    Generic.Error: Style(color=\"bright_red\"),\n    Error: Style(color=\"red\", underline=True),\n}\n\nANSI_DARK: Dict[TokenType, Style] = {\n    Token: Style(),\n    Whitespace: Style(color=\"bright_black\"),\n    Comment: Style(dim=True),\n    Comment.Preproc: Style(color=\"bright_cyan\"),\n    Keyword: Style(color=\"bright_blue\"),\n    Keyword.Type: Style(color=\"bright_cyan\"),\n    Operator.Word: Style(color=\"bright_magenta\"),\n    Name.Builtin: Style(color=\"bright_cyan\"),\n    Name.Function: Style(color=\"bright_green\"),\n    Name.Namespace: Style(color=\"bright_cyan\", underline=True),\n    Name.Class: Style(color=\"bright_green\", underline=True),\n    Name.Exception: Style(color=\"bright_cyan\"),\n    Name.Decorator: Style(color=\"bright_magenta\", bold=True),\n    Name.Variable: Style(color=\"bright_red\"),\n    Name.Constant: Style(color=\"bright_red\"),\n    Name.Attribute: Style(color=\"bright_cyan\"),\n    Name.Tag: Style(color=\"bright_blue\"),\n    String: Style(color=\"yellow\"),\n    Number: Style(color=\"bright_blue\"),\n    Generic.Deleted: Style(color=\"bright_red\"),\n    Generic.Inserted: Style(color=\"bright_green\"),\n    Generic.Heading: Style(bold=True),\n    Generic.Subheading: Style(color=\"bright_magenta\", bold=True),\n    Generic.Prompt: Style(bold=True),\n    Generic.Error: Style(color=\"bright_red\"),\n    Error: Style(color=\"red\", underline=True),\n}\n\nRICH_SYNTAX_THEMES = {\"ansi_light\": ANSI_LIGHT, \"ansi_dark\": ANSI_DARK}\nNUMBERS_COLUMN_DEFAULT_PADDING = 2\n\n\nclass SyntaxTheme(ABC):\n    \"\"\"Base class for a syntax theme.\"\"\"\n\n    @abstractmethod\n    def get_style_for_token(self, token_type: TokenType) -> Style:\n        \"\"\"Get a style for a given Pygments token.\"\"\"\n        raise NotImplementedError  # pragma: no cover\n\n    @abstractmethod\n    def get_background_style(self) -> Style:\n        \"\"\"Get the background color.\"\"\"\n        raise NotImplementedError  # pragma: no cover\n\n\nclass PygmentsSyntaxTheme(SyntaxTheme):\n    \"\"\"Syntax theme that delegates to Pygments theme.\"\"\"\n\n    def __init__(self, theme: Union[str, Type[PygmentsStyle]]) -> None:\n        self._style_cache: Dict[TokenType, Style] = {}\n        if isinstance(theme, str):\n            try:\n                self._pygments_style_class = get_style_by_name(theme)\n            except ClassNotFound:\n                self._pygments_style_class = get_style_by_name(\"default\")\n        else:\n            self._pygments_style_class = theme\n\n        self._background_color = self._pygments_style_class.background_color\n        self._background_style = Style(bgcolor=self._background_color)\n\n    def get_style_for_token(self, token_type: TokenType) -> Style:\n        \"\"\"Get a style from a Pygments class.\"\"\"\n        try:\n            return self._style_cache[token_type]\n        except KeyError:\n            try:\n                pygments_style = self._pygments_style_class.style_for_token(token_type)\n            except KeyError:\n                style = Style.null()\n            else:\n                color = pygments_style[\"color\"]\n                bgcolor = pygments_style[\"bgcolor\"]\n                style = Style(\n                    color=\"#\" + color if color else \"#000000\",\n                    bgcolor=\"#\" + bgcolor if bgcolor else self._background_color,\n                    bold=pygments_style[\"bold\"],\n                    italic=pygments_style[\"italic\"],\n                    underline=pygments_style[\"underline\"],\n                )\n            self._style_cache[token_type] = style\n        return style\n\n    def get_background_style(self) -> Style:\n        return self._background_style\n\n\nclass ANSISyntaxTheme(SyntaxTheme):\n    \"\"\"Syntax theme to use standard colors.\"\"\"\n\n    def __init__(self, style_map: Dict[TokenType, Style]) -> None:\n        self.style_map = style_map\n        self._missing_style = Style.null()\n        self._background_style = Style.null()\n        self._style_cache: Dict[TokenType, Style] = {}\n\n    def get_style_for_token(self, token_type: TokenType) -> Style:\n        \"\"\"Look up style in the style map.\"\"\"\n        try:\n            return self._style_cache[token_type]\n        except KeyError:\n            # Styles form a hierarchy\n            # We need to go from most to least specific\n            # e.g. (\"foo\", \"bar\", \"baz\") to (\"foo\", \"bar\")  to (\"foo\",)\n            get_style = self.style_map.get\n            token = tuple(token_type)\n            style = self._missing_style\n            while token:\n                _style = get_style(token)\n                if _style is not None:\n                    style = _style\n                    break\n                token = token[:-1]\n            self._style_cache[token_type] = style\n            return style\n\n    def get_background_style(self) -> Style:\n        return self._background_style\n\n\nSyntaxPosition = Tuple[int, int]\n\n\nclass _SyntaxHighlightRange(NamedTuple):\n    \"\"\"\n    A range to highlight in a Syntax object.\n    `start` and `end` are 2-integers tuples, where the first integer is the line number\n    (starting from 1) and the second integer is the column index (starting from 0).\n    \"\"\"\n\n    style: StyleType\n    start: SyntaxPosition\n    end: SyntaxPosition\n\n\nclass Syntax(JupyterMixin):\n    \"\"\"Construct a Syntax object to render syntax highlighted code.\n\n    Args:\n        code (str): Code to highlight.\n        lexer (Lexer | str): Lexer to use (see https://pygments.org/docs/lexers/)\n        theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to \"monokai\".\n        dedent (bool, optional): Enable stripping of initial whitespace. Defaults to False.\n        line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n        start_line (int, optional): Starting number for line numbers. Defaults to 1.\n        line_range (Tuple[int | None, int | None], optional): If given should be a tuple of the start and end line to render.\n            A value of None in the tuple indicates the range is open in that direction.\n        highlight_lines (Set[int]): A set of line numbers to highlight.\n        code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n        tab_size (int, optional): Size of tabs. Defaults to 4.\n        word_wrap (bool, optional): Enable word wrapping.\n        background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n        indent_guides (bool, optional): Show indent guides. Defaults to False.\n        padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n    \"\"\"\n\n    _pygments_style_class: Type[PygmentsStyle]\n    _theme: SyntaxTheme\n\n    @classmethod\n    def get_theme(cls, name: Union[str, SyntaxTheme]) -> SyntaxTheme:\n        \"\"\"Get a syntax theme instance.\"\"\"\n        if isinstance(name, SyntaxTheme):\n            return name\n        theme: SyntaxTheme\n        if name in RICH_SYNTAX_THEMES:\n            theme = ANSISyntaxTheme(RICH_SYNTAX_THEMES[name])\n        else:\n            theme = PygmentsSyntaxTheme(name)\n        return theme\n\n    def __init__(\n        self,\n        code: str,\n        lexer: Union[Lexer, str],\n        *,\n        theme: Union[str, SyntaxTheme] = DEFAULT_THEME,\n        dedent: bool = False,\n        line_numbers: bool = False,\n        start_line: int = 1,\n        line_range: Optional[Tuple[Optional[int], Optional[int]]] = None,\n        highlight_lines: Optional[Set[int]] = None,\n        code_width: Optional[int] = None,\n        tab_size: int = 4,\n        word_wrap: bool = False,\n        background_color: Optional[str] = None,\n        indent_guides: bool = False,\n        padding: PaddingDimensions = 0,\n    ) -> None:\n        self.code = code\n        self._lexer = lexer\n        self.dedent = dedent\n        self.line_numbers = line_numbers\n        self.start_line = start_line\n        self.line_range = line_range\n        self.highlight_lines = highlight_lines or set()\n        self.code_width = code_width\n        self.tab_size = tab_size\n        self.word_wrap = word_wrap\n        self.background_color = background_color\n        self.background_style = (\n            Style(bgcolor=background_color) if background_color else Style()\n        )\n        self.indent_guides = indent_guides\n        self.padding = padding\n\n        self._theme = self.get_theme(theme)\n        self._stylized_ranges: List[_SyntaxHighlightRange] = []\n\n    @classmethod\n    def from_path(\n        cls,\n        path: str,\n        encoding: str = \"utf-8\",\n        lexer: Optional[Union[Lexer, str]] = None,\n        theme: Union[str, SyntaxTheme] = DEFAULT_THEME,\n        dedent: bool = False,\n        line_numbers: bool = False,\n        line_range: Optional[Tuple[int, int]] = None,\n        start_line: int = 1,\n        highlight_lines: Optional[Set[int]] = None,\n        code_width: Optional[int] = None,\n        tab_size: int = 4,\n        word_wrap: bool = False,\n        background_color: Optional[str] = None,\n        indent_guides: bool = False,\n        padding: PaddingDimensions = 0,\n    ) -> \"Syntax\":\n        \"\"\"Construct a Syntax object from a file.\n\n        Args:\n            path (str): Path to file to highlight.\n            encoding (str): Encoding of file.\n            lexer (str | Lexer, optional): Lexer to use. If None, lexer will be auto-detected from path/file content.\n            theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to \"emacs\".\n            dedent (bool, optional): Enable stripping of initial whitespace. Defaults to True.\n            line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n            start_line (int, optional): Starting number for line numbers. Defaults to 1.\n            line_range (Tuple[int, int], optional): If given should be a tuple of the start and end line to render.\n            highlight_lines (Set[int]): A set of line numbers to highlight.\n            code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n            tab_size (int, optional): Size of tabs. Defaults to 4.\n            word_wrap (bool, optional): Enable word wrapping of code.\n            background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n            indent_guides (bool, optional): Show indent guides. Defaults to False.\n            padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n\n        Returns:\n            [Syntax]: A Syntax object that may be printed to the console\n        \"\"\"\n        code = Path(path).read_text(encoding=encoding)\n\n        if not lexer:\n            lexer = cls.guess_lexer(path, code=code)\n\n        return cls(\n            code,\n            lexer,\n            theme=theme,\n            dedent=dedent,\n            line_numbers=line_numbers,\n            line_range=line_range,\n            start_line=start_line,\n            highlight_lines=highlight_lines,\n            code_width=code_width,\n            tab_size=tab_size,\n            word_wrap=word_wrap,\n            background_color=background_color,\n            indent_guides=indent_guides,\n            padding=padding,\n        )\n\n    @classmethod\n    def guess_lexer(cls, path: str, code: Optional[str] = None) -> str:\n        \"\"\"Guess the alias of the Pygments lexer to use based on a path and an optional string of code.\n        If code is supplied, it will use a combination of the code and the filename to determine the\n        best lexer to use. For example, if the file is ``index.html`` and the file contains Django\n        templating syntax, then \"html+django\" will be returned. If the file is ``index.html``, and no\n        templating language is used, the \"html\" lexer will be used. If no string of code\n        is supplied, the lexer will be chosen based on the file extension..\n\n        Args:\n             path (AnyStr): The path to the file containing the code you wish to know the lexer for.\n             code (str, optional): Optional string of code that will be used as a fallback if no lexer\n                is found for the supplied path.\n\n        Returns:\n            str: The name of the Pygments lexer that best matches the supplied path/code.\n        \"\"\"\n        lexer: Optional[Lexer] = None\n        lexer_name = \"default\"\n        if code:\n            try:\n                lexer = guess_lexer_for_filename(path, code)\n            except ClassNotFound:\n                pass\n\n        if not lexer:\n            try:\n                _, ext = os.path.splitext(path)\n                if ext:\n                    extension = ext.lstrip(\".\").lower()\n                    lexer = get_lexer_by_name(extension)\n            except ClassNotFound:\n                pass\n\n        if lexer:\n            if lexer.aliases:\n                lexer_name = lexer.aliases[0]\n            else:\n                lexer_name = lexer.name\n\n        return lexer_name\n\n    def _get_base_style(self) -> Style:\n        \"\"\"Get the base style.\"\"\"\n        default_style = self._theme.get_background_style() + self.background_style\n        return default_style\n\n    def _get_token_color(self, token_type: TokenType) -> Optional[Color]:\n        \"\"\"Get a color (if any) for the given token.\n\n        Args:\n            token_type (TokenType): A token type tuple from Pygments.\n\n        Returns:\n            Optional[Color]: Color from theme, or None for no color.\n        \"\"\"\n        style = self._theme.get_style_for_token(token_type)\n        return style.color\n\n    @property\n    def lexer(self) -> Optional[Lexer]:\n        \"\"\"The lexer for this syntax, or None if no lexer was found.\n\n        Tries to find the lexer by name if a string was passed to the constructor.\n        \"\"\"\n\n        if isinstance(self._lexer, Lexer):\n            return self._lexer\n        try:\n            return get_lexer_by_name(\n                self._lexer,\n                stripnl=False,\n                ensurenl=True,\n                tabsize=self.tab_size,\n            )\n        except ClassNotFound:\n            return None\n\n    @property\n    def default_lexer(self) -> Lexer:\n        \"\"\"A Pygments Lexer to use if one is not specified or invalid.\"\"\"\n        return get_lexer_by_name(\n            \"text\",\n            stripnl=False,\n            ensurenl=True,\n            tabsize=self.tab_size,\n        )\n\n    def highlight(\n        self,\n        code: str,\n        line_range: Optional[Tuple[Optional[int], Optional[int]]] = None,\n    ) -> Text:\n        \"\"\"Highlight code and return a Text instance.\n\n        Args:\n            code (str): Code to highlight.\n            line_range(Tuple[int, int], optional): Optional line range to highlight.\n\n        Returns:\n            Text: A text instance containing highlighted syntax.\n        \"\"\"\n\n        base_style = self._get_base_style()\n        justify: JustifyMethod = (\n            \"default\" if base_style.transparent_background else \"left\"\n        )\n\n        text = Text(\n            justify=justify,\n            style=base_style,\n            tab_size=self.tab_size,\n            no_wrap=not self.word_wrap,\n        )\n        _get_theme_style = self._theme.get_style_for_token\n\n        lexer = self.lexer or self.default_lexer\n\n        if lexer is None:\n            text.append(code)\n        else:\n            if line_range:\n                # More complicated path to only stylize a portion of the code\n                # This speeds up further operations as there are less spans to process\n                line_start, line_end = line_range\n\n                def line_tokenize() -> Iterable[Tuple[Any, str]]:\n                    \"\"\"Split tokens to one per line.\"\"\"\n                    assert lexer  # required to make MyPy happy - we know lexer is not None at this point\n\n                    for token_type, token in lexer.get_tokens(code):\n                        while token:\n                            line_token, new_line, token = token.partition(\"\\n\")\n                            yield token_type, line_token + new_line\n\n                def tokens_to_spans() -> Iterable[Tuple[str, Optional[Style]]]:\n                    \"\"\"Convert tokens to spans.\"\"\"\n                    tokens = iter(line_tokenize())\n                    line_no = 0\n                    _line_start = line_start - 1 if line_start else 0\n\n                    # Skip over tokens until line start\n                    while line_no < _line_start:\n                        try:\n                            _token_type, token = next(tokens)\n                        except StopIteration:\n                            break\n                        yield (token, None)\n                        if token.endswith(\"\\n\"):\n                            line_no += 1\n                    # Generate spans until line end\n                    for token_type, token in tokens:\n                        yield (token, _get_theme_style(token_type))\n                        if token.endswith(\"\\n\"):\n                            line_no += 1\n                            if line_end and line_no >= line_end:\n                                break\n\n                text.append_tokens(tokens_to_spans())\n\n            else:\n                text.append_tokens(\n                    (token, _get_theme_style(token_type))\n                    for token_type, token in lexer.get_tokens(code)\n                )\n            if self.background_color is not None:\n                text.stylize(f\"on {self.background_color}\")\n\n        if self._stylized_ranges:\n            self._apply_stylized_ranges(text)\n\n        return text\n\n    def stylize_range(\n        self, style: StyleType, start: SyntaxPosition, end: SyntaxPosition\n    ) -> None:\n        \"\"\"\n        Adds a custom style on a part of the code, that will be applied to the syntax display when it's rendered.\n        Line numbers are 1-based, while column indexes are 0-based.\n\n        Args:\n            style (StyleType): The style to apply.\n            start (Tuple[int, int]): The start of the range, in the form `[line number, column index]`.\n            end (Tuple[int, int]): The end of the range, in the form `[line number, column index]`.\n        \"\"\"\n        self._stylized_ranges.append(_SyntaxHighlightRange(style, start, end))\n\n    def _get_line_numbers_color(self, blend: float = 0.3) -> Color:\n        background_style = self._theme.get_background_style() + self.background_style\n        background_color = background_style.bgcolor\n        if background_color is None or background_color.is_system_defined:\n            return Color.default()\n        foreground_color = self._get_token_color(Token.Text)\n        if foreground_color is None or foreground_color.is_system_defined:\n            return foreground_color or Color.default()\n        new_color = blend_rgb(\n            background_color.get_truecolor(),\n            foreground_color.get_truecolor(),\n            cross_fade=blend,\n        )\n        return Color.from_triplet(new_color)\n\n    @property\n    def _numbers_column_width(self) -> int:\n        \"\"\"Get the number of characters used to render the numbers column.\"\"\"\n        column_width = 0\n        if self.line_numbers:\n            column_width = (\n                len(str(self.start_line + self.code.count(\"\\n\")))\n                + NUMBERS_COLUMN_DEFAULT_PADDING\n            )\n        return column_width\n\n    def _get_number_styles(self, console: Console) -> Tuple[Style, Style, Style]:\n        \"\"\"Get background, number, and highlight styles for line numbers.\"\"\"\n        background_style = self._get_base_style()\n        if background_style.transparent_background:\n            return Style.null(), Style(dim=True), Style.null()\n        if console.color_system in (\"256\", \"truecolor\"):\n            number_style = Style.chain(\n                background_style,\n                self._theme.get_style_for_token(Token.Text),\n                Style(color=self._get_line_numbers_color()),\n                self.background_style,\n            )\n            highlight_number_style = Style.chain(\n                background_style,\n                self._theme.get_style_for_token(Token.Text),\n                Style(bold=True, color=self._get_line_numbers_color(0.9)),\n                self.background_style,\n            )\n        else:\n            number_style = background_style + Style(dim=True)\n            highlight_number_style = background_style + Style(dim=False)\n        return background_style, number_style, highlight_number_style\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        _, right, _, left = Padding.unpack(self.padding)\n        padding = left + right\n        if self.code_width is not None:\n            width = self.code_width + self._numbers_column_width + padding + 1\n            return Measurement(self._numbers_column_width, width)\n        lines = self.code.splitlines()\n        width = (\n            self._numbers_column_width\n            + padding\n            + (max(cell_len(line) for line in lines) if lines else 0)\n        )\n        if self.line_numbers:\n            width += 1\n        return Measurement(self._numbers_column_width, width)\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        segments = Segments(self._get_syntax(console, options))\n        if self.padding:\n            yield Padding(\n                segments, style=self._theme.get_background_style(), pad=self.padding\n            )\n        else:\n            yield segments\n\n    def _get_syntax(\n        self,\n        console: Console,\n        options: ConsoleOptions,\n    ) -> Iterable[Segment]:\n        \"\"\"\n        Get the Segments for the Syntax object, excluding any vertical/horizontal padding\n        \"\"\"\n        transparent_background = self._get_base_style().transparent_background\n        code_width = (\n            (\n                (options.max_width - self._numbers_column_width - 1)\n                if self.line_numbers\n                else options.max_width\n            )\n            if self.code_width is None\n            else self.code_width\n        )\n\n        ends_on_nl, processed_code = self._process_code(self.code)\n        text = self.highlight(processed_code, self.line_range)\n\n        if not self.line_numbers and not self.word_wrap and not self.line_range:\n            if not ends_on_nl:\n                text.remove_suffix(\"\\n\")\n            # Simple case of just rendering text\n            style = (\n                self._get_base_style()\n                + self._theme.get_style_for_token(Comment)\n                + Style(dim=True)\n                + self.background_style\n            )\n            if self.indent_guides and not options.ascii_only:\n                text = text.with_indent_guides(self.tab_size, style=style)\n                text.overflow = \"crop\"\n            if style.transparent_background:\n                yield from console.render(\n                    text, options=options.update(width=code_width)\n                )\n            else:\n                syntax_lines = console.render_lines(\n                    text,\n                    options.update(width=code_width, height=None, justify=\"left\"),\n                    style=self.background_style,\n                    pad=True,\n                    new_lines=True,\n                )\n                for syntax_line in syntax_lines:\n                    yield from syntax_line\n            return\n\n        start_line, end_line = self.line_range or (None, None)\n        line_offset = 0\n        if start_line:\n            line_offset = max(0, start_line - 1)\n        lines: Union[List[Text], Lines] = text.split(\"\\n\", allow_blank=ends_on_nl)\n        if self.line_range:\n            if line_offset > len(lines):\n                return\n            lines = lines[line_offset:end_line]\n\n        if self.indent_guides and not options.ascii_only:\n            style = (\n                self._get_base_style()\n                + self._theme.get_style_for_token(Comment)\n                + Style(dim=True)\n                + self.background_style\n            )\n            lines = (\n                Text(\"\\n\")\n                .join(lines)\n                .with_indent_guides(self.tab_size, style=style + Style(italic=False))\n                .split(\"\\n\", allow_blank=True)\n            )\n\n        numbers_column_width = self._numbers_column_width\n        render_options = options.update(width=code_width)\n\n        highlight_line = self.highlight_lines.__contains__\n        _Segment = Segment\n        new_line = _Segment(\"\\n\")\n\n        line_pointer = \"> \" if options.legacy_windows else \"\u2771 \"\n\n        (\n            background_style,\n            number_style,\n            highlight_number_style,\n        ) = self._get_number_styles(console)\n\n        for line_no, line in enumerate(lines, self.start_line + line_offset):\n            if self.word_wrap:\n                wrapped_lines = console.render_lines(\n                    line,\n                    render_options.update(height=None, justify=\"left\"),\n                    style=background_style,\n                    pad=not transparent_background,\n                )\n            else:\n                segments = list(line.render(console, end=\"\"))\n                if options.no_wrap:\n                    wrapped_lines = [segments]\n                else:\n                    wrapped_lines = [\n                        _Segment.adjust_line_length(\n                            segments,\n                            render_options.max_width,\n                            style=background_style,\n                            pad=not transparent_background,\n                        )\n                    ]\n\n            if self.line_numbers:\n                wrapped_line_left_pad = _Segment(\n                    \" \" * numbers_column_width + \" \", background_style\n                )\n                for first, wrapped_line in loop_first(wrapped_lines):\n                    if first:\n                        line_column = str(line_no).rjust(numbers_column_width - 2) + \" \"\n                        if highlight_line(line_no):\n                            yield _Segment(line_pointer, Style(color=\"red\"))\n                            yield _Segment(line_column, highlight_number_style)\n                        else:\n                            yield _Segment(\"  \", highlight_number_style)\n                            yield _Segment(line_column, number_style)\n                    else:\n                        yield wrapped_line_left_pad\n                    yield from wrapped_line\n                    yield new_line\n            else:\n                for wrapped_line in wrapped_lines:\n                    yield from wrapped_line\n                    yield new_line\n\n    def _apply_stylized_ranges(self, text: Text) -> None:\n        \"\"\"\n        Apply stylized ranges to a text instance,\n        using the given code to determine the right portion to apply the style to.\n\n        Args:\n            text (Text): Text instance to apply the style to.\n        \"\"\"\n        code = text.plain\n        newlines_offsets = [\n            # Let's add outer boundaries at each side of the list:\n            0,\n            # N.B. using \"\\n\" here is much faster than using metacharacters such as \"^\" or \"\\Z\":\n            *[\n                match.start() + 1\n                for match in re.finditer(\"\\n\", code, flags=re.MULTILINE)\n            ],\n            len(code) + 1,\n        ]\n\n        for stylized_range in self._stylized_ranges:\n            start = _get_code_index_for_syntax_position(\n                newlines_offsets, stylized_range.start\n            )\n            end = _get_code_index_for_syntax_position(\n                newlines_offsets, stylized_range.end\n            )\n            if start is not None and end is not None:\n                text.stylize(stylized_range.style, start, end)\n\n    def _process_code(self, code: str) -> Tuple[bool, str]:\n        \"\"\"\n        Applies various processing to a raw code string\n        (normalises it so it always ends with a line return, dedents it if necessary, etc.)\n\n        Args:\n            code (str): The raw code string to process\n\n        Returns:\n            Tuple[bool, str]: the boolean indicates whether the raw code ends with a line return,\n                while the string is the processed code.\n        \"\"\"\n        ends_on_nl = code.endswith(\"\\n\")\n        processed_code = code if ends_on_nl else code + \"\\n\"\n        processed_code = (\n            textwrap.dedent(processed_code) if self.dedent else processed_code\n        )\n        processed_code = processed_code.expandtabs(self.tab_size)\n        return ends_on_nl, processed_code\n\n\ndef _get_code_index_for_syntax_position(\n    newlines_offsets: Sequence[int], position: SyntaxPosition\n) -> Optional[int]:\n    \"\"\"\n    Returns the index of the code string for the given positions.\n\n    Args:\n        newlines_offsets (Sequence[int]): The offset of each newline character found in the code snippet.\n        position (SyntaxPosition): The position to search for.\n\n    Returns:\n        Optional[int]: The index of the code string for this position, or `None`\n            if the given position's line number is out of range (if it's the column that is out of range\n            we silently clamp its value so that it reaches the end of the line)\n    \"\"\"\n    lines_count = len(newlines_offsets)\n\n    line_number, column_index = position\n    if line_number > lines_count or len(newlines_offsets) < (line_number + 1):\n        return None  # `line_number` is out of range\n    line_index = line_number - 1\n    line_length = newlines_offsets[line_index + 1] - newlines_offsets[line_index] - 1\n    # If `column_index` is out of range: let's silently clamp it:\n    column_index = min(line_length, column_index)\n    return newlines_offsets[line_index] + column_index\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import argparse\n    import sys\n\n    parser = argparse.ArgumentParser(\n        description=\"Render syntax to the console with Rich\"\n    )\n    parser.add_argument(\n        \"path\",\n        metavar=\"PATH\",\n        help=\"path to file, or - for stdin\",\n    )\n    parser.add_argument(\n        \"-c\",\n        \"--force-color\",\n        dest=\"force_color\",\n        action=\"store_true\",\n        default=None,\n        help=\"force color for non-terminals\",\n    )\n    parser.add_argument(\n        \"-i\",\n        \"--indent-guides\",\n        dest=\"indent_guides\",\n        action=\"store_true\",\n        default=False,\n        help=\"display indent guides\",\n    )\n    parser.add_argument(\n        \"-l\",\n        \"--line-numbers\",\n        dest=\"line_numbers\",\n        action=\"store_true\",\n        help=\"render line numbers\",\n    )\n    parser.add_argument(\n        \"-w\",\n        \"--width\",\n        type=int,\n        dest=\"width\",\n        default=None,\n        help=\"width of output (default will auto-detect)\",\n    )\n    parser.add_argument(\n        \"-r\",\n        \"--wrap\",\n        dest=\"word_wrap\",\n        action=\"store_true\",\n        default=False,\n        help=\"word wrap long lines\",\n    )\n    parser.add_argument(\n        \"-s\",\n        \"--soft-wrap\",\n        action=\"store_true\",\n        dest=\"soft_wrap\",\n        default=False,\n        help=\"enable soft wrapping mode\",\n    )\n    parser.add_argument(\n        \"-t\", \"--theme\", dest=\"theme\", default=\"monokai\", help=\"pygments theme\"\n    )\n    parser.add_argument(\n        \"-b\",\n        \"--background-color\",\n        dest=\"background_color\",\n        default=None,\n        help=\"Override background color\",\n    )\n    parser.add_argument(\n        \"-x\",\n        \"--lexer\",\n        default=None,\n        dest=\"lexer_name\",\n        help=\"Lexer name\",\n    )\n    parser.add_argument(\n        \"-p\", \"--padding\", type=int, default=0, dest=\"padding\", help=\"Padding\"\n    )\n    parser.add_argument(\n        \"--highlight-line\",\n        type=int,\n        default=None,\n        dest=\"highlight_line\",\n        help=\"The line number (not index!) to highlight\",\n    )\n    args = parser.parse_args()\n\n    from rich.console import Console\n\n    console = Console(force_terminal=args.force_color, width=args.width)\n\n    if args.path == \"-\":\n        code = sys.stdin.read()\n        syntax = Syntax(\n            code=code,\n            lexer=args.lexer_name,\n            line_numbers=args.line_numbers,\n            word_wrap=args.word_wrap,\n            theme=args.theme,\n            background_color=args.background_color,\n            indent_guides=args.indent_guides,\n            padding=args.padding,\n            highlight_lines={args.highlight_line},\n        )\n    else:\n        syntax = Syntax.from_path(\n            args.path,\n            lexer=args.lexer_name,\n            line_numbers=args.line_numbers,\n            word_wrap=args.word_wrap,\n            theme=args.theme,\n            background_color=args.background_color,\n            indent_guides=args.indent_guides,\n            padding=args.padding,\n            highlight_lines={args.highlight_line},\n        )\n    console.print(syntax, soft_wrap=args.soft_wrap)\n", "rich/_wrap.py": "from __future__ import annotations\n\nimport re\nfrom typing import Iterable\n\nfrom ._loop import loop_last\nfrom .cells import cell_len, chop_cells\n\nre_word = re.compile(r\"\\s*\\S+\\s*\")\n\n\ndef words(text: str) -> Iterable[tuple[int, int, str]]:\n    \"\"\"Yields each word from the text as a tuple\n    containing (start_index, end_index, word). A \"word\" in this context may\n    include the actual word and any whitespace to the right.\n    \"\"\"\n    position = 0\n    word_match = re_word.match(text, position)\n    while word_match is not None:\n        start, end = word_match.span()\n        word = word_match.group(0)\n        yield start, end, word\n        word_match = re_word.match(text, end)\n\n\ndef divide_line(text: str, width: int, fold: bool = True) -> list[int]:\n    \"\"\"Given a string of text, and a width (measured in cells), return a list\n    of cell offsets which the string should be split at in order for it to fit\n    within the given width.\n\n    Args:\n        text: The text to examine.\n        width: The available cell width.\n        fold: If True, words longer than `width` will be folded onto a new line.\n\n    Returns:\n        A list of indices to break the line at.\n    \"\"\"\n    break_positions: list[int] = []  # offsets to insert the breaks at\n    append = break_positions.append\n    cell_offset = 0\n    _cell_len = cell_len\n\n    for start, _end, word in words(text):\n        word_length = _cell_len(word.rstrip())\n        remaining_space = width - cell_offset\n        word_fits_remaining_space = remaining_space >= word_length\n\n        if word_fits_remaining_space:\n            # Simplest case - the word fits within the remaining width for this line.\n            cell_offset += _cell_len(word)\n        else:\n            # Not enough space remaining for this word on the current line.\n            if word_length > width:\n                # The word doesn't fit on any line, so we can't simply\n                # place it on the next line...\n                if fold:\n                    # Fold the word across multiple lines.\n                    folded_word = chop_cells(word, width=width)\n                    for last, line in loop_last(folded_word):\n                        if start:\n                            append(start)\n                        if last:\n                            cell_offset = _cell_len(line)\n                        else:\n                            start += len(line)\n                else:\n                    # Folding isn't allowed, so crop the word.\n                    if start:\n                        append(start)\n                    cell_offset = _cell_len(word)\n            elif cell_offset and start:\n                # The word doesn't fit within the remaining space on the current\n                # line, but it *can* fit on to the next (empty) line.\n                append(start)\n                cell_offset = _cell_len(word)\n\n    return break_positions\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from .console import Console\n\n    console = Console(width=10)\n    console.print(\"12345 abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ 12345\")\n    print(chop_cells(\"abcdefghijklmnopqrstuvwxyz\", 10))\n\n    console = Console(width=20)\n    console.rule()\n    console.print(\"Textual\u306fPython\u306e\u9ad8\u901f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\")\n\n    console.rule()\n    console.print(\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f1670\u4e07\u8272\u3092\u4f7f\u7528\u3067\u304d\")\n", "rich/_null_file.py": "from types import TracebackType\nfrom typing import IO, Iterable, Iterator, List, Optional, Type\n\n\nclass NullFile(IO[str]):\n    def close(self) -> None:\n        pass\n\n    def isatty(self) -> bool:\n        return False\n\n    def read(self, __n: int = 1) -> str:\n        return \"\"\n\n    def readable(self) -> bool:\n        return False\n\n    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n    def readlines(self, __hint: int = 1) -> List[str]:\n        return []\n\n    def seek(self, __offset: int, __whence: int = 1) -> int:\n        return 0\n\n    def seekable(self) -> bool:\n        return False\n\n    def tell(self) -> int:\n        return 0\n\n    def truncate(self, __size: Optional[int] = 1) -> int:\n        return 0\n\n    def writable(self) -> bool:\n        return False\n\n    def writelines(self, __lines: Iterable[str]) -> None:\n        pass\n\n    def __next__(self) -> str:\n        return \"\"\n\n    def __iter__(self) -> Iterator[str]:\n        return iter([\"\"])\n\n    def __enter__(self) -> IO[str]:\n        pass\n\n    def __exit__(\n        self,\n        __t: Optional[Type[BaseException]],\n        __value: Optional[BaseException],\n        __traceback: Optional[TracebackType],\n    ) -> None:\n        pass\n\n    def write(self, text: str) -> int:\n        return 0\n\n    def flush(self) -> None:\n        pass\n\n    def fileno(self) -> int:\n        return -1\n\n\nNULL_FILE = NullFile()\n", "rich/live.py": "import sys\nfrom threading import Event, RLock, Thread\nfrom types import TracebackType\nfrom typing import IO, Any, Callable, List, Optional, TextIO, Type, cast\n\nfrom . import get_console\nfrom .console import Console, ConsoleRenderable, RenderableType, RenderHook\nfrom .control import Control\nfrom .file_proxy import FileProxy\nfrom .jupyter import JupyterMixin\nfrom .live_render import LiveRender, VerticalOverflowMethod\nfrom .screen import Screen\nfrom .text import Text\n\n\nclass _RefreshThread(Thread):\n    \"\"\"A thread that calls refresh() at regular intervals.\"\"\"\n\n    def __init__(self, live: \"Live\", refresh_per_second: float) -> None:\n        self.live = live\n        self.refresh_per_second = refresh_per_second\n        self.done = Event()\n        super().__init__(daemon=True)\n\n    def stop(self) -> None:\n        self.done.set()\n\n    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\nclass Live(JupyterMixin, RenderHook):\n    \"\"\"Renders an auto-updating live display of any given renderable.\n\n    Args:\n        renderable (RenderableType, optional): The renderable to live display. Defaults to displaying nothing.\n        console (Console, optional): Optional Console instance. Default will an internal Console instance writing to stdout.\n        screen (bool, optional): Enable alternate screen mode. Defaults to False.\n        auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()` or `update()` with refresh flag. Defaults to True\n        refresh_per_second (float, optional): Number of times per second to refresh the live display. Defaults to 4.\n        transient (bool, optional): Clear the renderable on exit (has no effect when screen=True). Defaults to False.\n        redirect_stdout (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.\n        redirect_stderr (bool, optional): Enable redirection of stderr. Defaults to True.\n        vertical_overflow (VerticalOverflowMethod, optional): How to handle renderable when it is too tall for the console. Defaults to \"ellipsis\".\n        get_renderable (Callable[[], RenderableType], optional): Optional callable to get renderable. Defaults to None.\n    \"\"\"\n\n    def __init__(\n        self,\n        renderable: Optional[RenderableType] = None,\n        *,\n        console: Optional[Console] = None,\n        screen: bool = False,\n        auto_refresh: bool = True,\n        refresh_per_second: float = 4,\n        transient: bool = False,\n        redirect_stdout: bool = True,\n        redirect_stderr: bool = True,\n        vertical_overflow: VerticalOverflowMethod = \"ellipsis\",\n        get_renderable: Optional[Callable[[], RenderableType]] = None,\n    ) -> None:\n        assert refresh_per_second > 0, \"refresh_per_second must be > 0\"\n        self._renderable = renderable\n        self.console = console if console is not None else get_console()\n        self._screen = screen\n        self._alt_screen = False\n\n        self._redirect_stdout = redirect_stdout\n        self._redirect_stderr = redirect_stderr\n        self._restore_stdout: Optional[IO[str]] = None\n        self._restore_stderr: Optional[IO[str]] = None\n\n        self._lock = RLock()\n        self.ipy_widget: Optional[Any] = None\n        self.auto_refresh = auto_refresh\n        self._started: bool = False\n        self.transient = True if screen else transient\n\n        self._refresh_thread: Optional[_RefreshThread] = None\n        self.refresh_per_second = refresh_per_second\n\n        self.vertical_overflow = vertical_overflow\n        self._get_renderable = get_renderable\n        self._live_render = LiveRender(\n            self.get_renderable(), vertical_overflow=vertical_overflow\n        )\n\n    @property\n    def is_started(self) -> bool:\n        \"\"\"Check if live display has been started.\"\"\"\n        return self._started\n\n    def get_renderable(self) -> RenderableType:\n        renderable = (\n            self._get_renderable()\n            if self._get_renderable is not None\n            else self._renderable\n        )\n        return renderable or \"\"\n\n    def start(self, refresh: bool = False) -> None:\n        \"\"\"Start live rendering display.\n\n        Args:\n            refresh (bool, optional): Also refresh. Defaults to False.\n        \"\"\"\n        with self._lock:\n            if self._started:\n                return\n            self.console.set_live(self)\n            self._started = True\n            if self._screen:\n                self._alt_screen = self.console.set_alt_screen(True)\n            self.console.show_cursor(False)\n            self._enable_redirect_io()\n            self.console.push_render_hook(self)\n            if refresh:\n                try:\n                    self.refresh()\n                except Exception:\n                    # If refresh fails, we want to stop the redirection of sys.stderr,\n                    # so the error stacktrace is properly displayed in the terminal.\n                    # (or, if the code that calls Rich captures the exception and wants to display something,\n                    # let this be displayed in the terminal).\n                    self.stop()\n                    raise\n            if self.auto_refresh:\n                self._refresh_thread = _RefreshThread(self, self.refresh_per_second)\n                self._refresh_thread.start()\n\n    def stop(self) -> None:\n        \"\"\"Stop live rendering display.\"\"\"\n        with self._lock:\n            if not self._started:\n                return\n            self.console.clear_live()\n            self._started = False\n\n            if self.auto_refresh and self._refresh_thread is not None:\n                self._refresh_thread.stop()\n                self._refresh_thread = None\n            # allow it to fully render on the last even if overflow\n            self.vertical_overflow = \"visible\"\n            with self.console:\n                try:\n                    if not self._alt_screen and not self.console.is_jupyter:\n                        self.refresh()\n                finally:\n                    self._disable_redirect_io()\n                    self.console.pop_render_hook()\n                    if not self._alt_screen and self.console.is_terminal:\n                        self.console.line()\n                    self.console.show_cursor(True)\n                    if self._alt_screen:\n                        self.console.set_alt_screen(False)\n\n                    if self.transient and not self._alt_screen:\n                        self.console.control(self._live_render.restore_cursor())\n                    if self.ipy_widget is not None and self.transient:\n                        self.ipy_widget.close()  # pragma: no cover\n\n    def __enter__(self) -> \"Live\":\n        self.start(refresh=self._renderable is not None)\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self.stop()\n\n    def _enable_redirect_io(self) -> None:\n        \"\"\"Enable redirecting of stdout / stderr.\"\"\"\n        if self.console.is_terminal or self.console.is_jupyter:\n            if self._redirect_stdout and not isinstance(sys.stdout, FileProxy):\n                self._restore_stdout = sys.stdout\n                sys.stdout = cast(\"TextIO\", FileProxy(self.console, sys.stdout))\n            if self._redirect_stderr and not isinstance(sys.stderr, FileProxy):\n                self._restore_stderr = sys.stderr\n                sys.stderr = cast(\"TextIO\", FileProxy(self.console, sys.stderr))\n\n    def _disable_redirect_io(self) -> None:\n        \"\"\"Disable redirecting of stdout / stderr.\"\"\"\n        if self._restore_stdout:\n            sys.stdout = cast(\"TextIO\", self._restore_stdout)\n            self._restore_stdout = None\n        if self._restore_stderr:\n            sys.stderr = cast(\"TextIO\", self._restore_stderr)\n            self._restore_stderr = None\n\n    @property\n    def renderable(self) -> RenderableType:\n        \"\"\"Get the renderable that is being displayed\n\n        Returns:\n            RenderableType: Displayed renderable.\n        \"\"\"\n        renderable = self.get_renderable()\n        return Screen(renderable) if self._alt_screen else renderable\n\n    def update(self, renderable: RenderableType, *, refresh: bool = False) -> None:\n        \"\"\"Update the renderable that is being displayed\n\n        Args:\n            renderable (RenderableType): New renderable to use.\n            refresh (bool, optional): Refresh the display. Defaults to False.\n        \"\"\"\n        if isinstance(renderable, str):\n            renderable = self.console.render_str(renderable)\n        with self._lock:\n            self._renderable = renderable\n            if refresh:\n                self.refresh()\n\n    def refresh(self) -> None:\n        \"\"\"Update the display of the Live Render.\"\"\"\n        with self._lock:\n            self._live_render.set_renderable(self.renderable)\n            if self.console.is_jupyter:  # pragma: no cover\n                try:\n                    from IPython.display import display\n                    from ipywidgets import Output\n                except ImportError:\n                    import warnings\n\n                    warnings.warn('install \"ipywidgets\" for Jupyter support')\n                else:\n                    if self.ipy_widget is None:\n                        self.ipy_widget = Output()\n                        display(self.ipy_widget)\n\n                    with self.ipy_widget:\n                        self.ipy_widget.clear_output(wait=True)\n                        self.console.print(self._live_render.renderable)\n            elif self.console.is_terminal and not self.console.is_dumb_terminal:\n                with self.console:\n                    self.console.print(Control())\n            elif (\n                not self._started and not self.transient\n            ):  # if it is finished allow files or dumb-terminals to see final result\n                with self.console:\n                    self.console.print(Control())\n\n    def process_renderables(\n        self, renderables: List[ConsoleRenderable]\n    ) -> List[ConsoleRenderable]:\n        \"\"\"Process renderables to restore cursor and display progress.\"\"\"\n        self._live_render.vertical_overflow = self.vertical_overflow\n        if self.console.is_interactive:\n            # lock needs acquiring as user can modify live_render renderable at any time unlike in Progress.\n            with self._lock:\n                reset = (\n                    Control.home()\n                    if self._alt_screen\n                    else self._live_render.position_cursor()\n                )\n                renderables = [reset, *renderables, self._live_render]\n        elif (\n            not self._started and not self.transient\n        ):  # if it is finished render the final output for files or dumb_terminals\n            renderables = [*renderables, self._live_render]\n\n        return renderables\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import random\n    import time\n    from itertools import cycle\n    from typing import Dict, List, Tuple\n\n    from .align import Align\n    from .console import Console\n    from .live import Live as Live\n    from .panel import Panel\n    from .rule import Rule\n    from .syntax import Syntax\n    from .table import Table\n\n    console = Console()\n\n    syntax = Syntax(\n        '''def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    for value in iter_values:\n        yield False, previous_value\n        previous_value = value\n    yield True, previous_value''',\n        \"python\",\n        line_numbers=True,\n    )\n\n    table = Table(\"foo\", \"bar\", \"baz\")\n    table.add_row(\"1\", \"2\", \"3\")\n\n    progress_renderables = [\n        \"You can make the terminal shorter and taller to see the live table hide\"\n        \"Text may be printed while the progress bars are rendering.\",\n        Panel(\"In fact, [i]any[/i] renderable will work\"),\n        \"Such as [magenta]tables[/]...\",\n        table,\n        \"Pretty printed structures...\",\n        {\"type\": \"example\", \"text\": \"Pretty printed\"},\n        \"Syntax...\",\n        syntax,\n        Rule(\"Give it a try!\"),\n    ]\n\n    examples = cycle(progress_renderables)\n\n    exchanges = [\n        \"SGD\",\n        \"MYR\",\n        \"EUR\",\n        \"USD\",\n        \"AUD\",\n        \"JPY\",\n        \"CNH\",\n        \"HKD\",\n        \"CAD\",\n        \"INR\",\n        \"DKK\",\n        \"GBP\",\n        \"RUB\",\n        \"NZD\",\n        \"MXN\",\n        \"IDR\",\n        \"TWD\",\n        \"THB\",\n        \"VND\",\n    ]\n    with Live(console=console) as live_table:\n        exchange_rate_dict: Dict[Tuple[str, str], float] = {}\n\n        for index in range(100):\n            select_exchange = exchanges[index % len(exchanges)]\n\n            for exchange in exchanges:\n                if exchange == select_exchange:\n                    continue\n                time.sleep(0.4)\n                if random.randint(0, 10) < 1:\n                    console.log(next(examples))\n                exchange_rate_dict[(select_exchange, exchange)] = 200 / (\n                    (random.random() * 320) + 1\n                )\n                if len(exchange_rate_dict) > len(exchanges) - 1:\n                    exchange_rate_dict.pop(list(exchange_rate_dict.keys())[0])\n                table = Table(title=\"Exchange Rates\")\n\n                table.add_column(\"Source Currency\")\n                table.add_column(\"Destination Currency\")\n                table.add_column(\"Exchange Rate\")\n\n                for (source, dest), exchange_rate in exchange_rate_dict.items():\n                    table.add_row(\n                        source,\n                        dest,\n                        Text(\n                            f\"{exchange_rate:.4f}\",\n                            style=\"red\" if exchange_rate < 1.0 else \"green\",\n                        ),\n                    )\n\n                live_table.update(Align.center(table))\n", "rich/padding.py": "from typing import cast, List, Optional, Tuple, TYPE_CHECKING, Union\n\nif TYPE_CHECKING:\n    from .console import (\n        Console,\n        ConsoleOptions,\n        RenderableType,\n        RenderResult,\n    )\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .style import Style\nfrom .segment import Segment\n\n\nPaddingDimensions = Union[int, Tuple[int], Tuple[int, int], Tuple[int, int, int, int]]\n\n\nclass Padding(JupyterMixin):\n    \"\"\"Draw space around content.\n\n    Example:\n        >>> print(Padding(\"Hello\", (2, 4), style=\"on blue\"))\n\n    Args:\n        renderable (RenderableType): String or other renderable.\n        pad (Union[int, Tuple[int]]): Padding for top, right, bottom, and left borders.\n            May be specified with 1, 2, or 4 integers (CSS style).\n        style (Union[str, Style], optional): Style for padding characters. Defaults to \"none\".\n        expand (bool, optional): Expand padding to fit available width. Defaults to True.\n    \"\"\"\n\n    def __init__(\n        self,\n        renderable: \"RenderableType\",\n        pad: \"PaddingDimensions\" = (0, 0, 0, 0),\n        *,\n        style: Union[str, Style] = \"none\",\n        expand: bool = True,\n    ):\n        self.renderable = renderable\n        self.top, self.right, self.bottom, self.left = self.unpack(pad)\n        self.style = style\n        self.expand = expand\n\n    @classmethod\n    def indent(cls, renderable: \"RenderableType\", level: int) -> \"Padding\":\n        \"\"\"Make padding instance to render an indent.\n\n        Args:\n            renderable (RenderableType): String or other renderable.\n            level (int): Number of characters to indent.\n\n        Returns:\n            Padding: A Padding instance.\n        \"\"\"\n\n        return Padding(renderable, pad=(0, 0, 0, level), expand=False)\n\n    @staticmethod\n    def unpack(pad: \"PaddingDimensions\") -> Tuple[int, int, int, int]:\n        \"\"\"Unpack padding specified in CSS style.\"\"\"\n        if isinstance(pad, int):\n            return (pad, pad, pad, pad)\n        if len(pad) == 1:\n            _pad = pad[0]\n            return (_pad, _pad, _pad, _pad)\n        if len(pad) == 2:\n            pad_top, pad_right = cast(Tuple[int, int], pad)\n            return (pad_top, pad_right, pad_top, pad_right)\n        if len(pad) == 4:\n            top, right, bottom, left = cast(Tuple[int, int, int, int], pad)\n            return (top, right, bottom, left)\n        raise ValueError(f\"1, 2 or 4 integers required for padding; {len(pad)} given\")\n\n    def __repr__(self) -> str:\n        return f\"Padding({self.renderable!r}, ({self.top},{self.right},{self.bottom},{self.left}))\"\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        style = console.get_style(self.style)\n        if self.expand:\n            width = options.max_width\n        else:\n            width = min(\n                Measurement.get(console, options, self.renderable).maximum\n                + self.left\n                + self.right,\n                options.max_width,\n            )\n        render_options = options.update_width(width - self.left - self.right)\n        if render_options.height is not None:\n            render_options = render_options.update_height(\n                height=render_options.height - self.top - self.bottom\n            )\n        lines = console.render_lines(\n            self.renderable, render_options, style=style, pad=True\n        )\n        _Segment = Segment\n\n        left = _Segment(\" \" * self.left, style) if self.left else None\n        right = (\n            [_Segment(f'{\" \" * self.right}', style), _Segment.line()]\n            if self.right\n            else [_Segment.line()]\n        )\n        blank_line: Optional[List[Segment]] = None\n        if self.top:\n            blank_line = [_Segment(f'{\" \" * width}\\n', style)]\n            yield from blank_line * self.top\n        if left:\n            for line in lines:\n                yield left\n                yield from line\n                yield from right\n        else:\n            for line in lines:\n                yield from line\n                yield from right\n        if self.bottom:\n            blank_line = blank_line or [_Segment(f'{\" \" * width}\\n', style)]\n            yield from blank_line * self.bottom\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        max_width = options.max_width\n        extra_width = self.left + self.right\n        if max_width - extra_width < 1:\n            return Measurement(max_width, max_width)\n        measure_min, measure_max = Measurement.get(console, options, self.renderable)\n        measurement = Measurement(measure_min + extra_width, measure_max + extra_width)\n        measurement = measurement.with_maximum(max_width)\n        return measurement\n\n\nif __name__ == \"__main__\":  #  pragma: no cover\n    from rich import print\n\n    print(Padding(\"Hello, World\", (2, 4), style=\"on blue\"))\n", "rich/theme.py": "import configparser\nfrom typing import Dict, List, IO, Mapping, Optional\n\nfrom .default_styles import DEFAULT_STYLES\nfrom .style import Style, StyleType\n\n\nclass Theme:\n    \"\"\"A container for style information, used by :class:`~rich.console.Console`.\n\n    Args:\n        styles (Dict[str, Style], optional): A mapping of style names on to styles. Defaults to None for a theme with no styles.\n        inherit (bool, optional): Inherit default styles. Defaults to True.\n    \"\"\"\n\n    styles: Dict[str, Style]\n\n    def __init__(\n        self, styles: Optional[Mapping[str, StyleType]] = None, inherit: bool = True\n    ):\n        self.styles = DEFAULT_STYLES.copy() if inherit else {}\n        if styles is not None:\n            self.styles.update(\n                {\n                    name: style if isinstance(style, Style) else Style.parse(style)\n                    for name, style in styles.items()\n                }\n            )\n\n    @property\n    def config(self) -> str:\n        \"\"\"Get contents of a config file for this theme.\"\"\"\n        config = \"[styles]\\n\" + \"\\n\".join(\n            f\"{name} = {style}\" for name, style in sorted(self.styles.items())\n        )\n        return config\n\n    @classmethod\n    def from_file(\n        cls, config_file: IO[str], source: Optional[str] = None, inherit: bool = True\n    ) -> \"Theme\":\n        \"\"\"Load a theme from a text mode file.\n\n        Args:\n            config_file (IO[str]): An open conf file.\n            source (str, optional): The filename of the open file. Defaults to None.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n\n        Returns:\n            Theme: A New theme instance.\n        \"\"\"\n        config = configparser.ConfigParser()\n        config.read_file(config_file, source=source)\n        styles = {name: Style.parse(value) for name, value in config.items(\"styles\")}\n        theme = Theme(styles, inherit=inherit)\n        return theme\n\n    @classmethod\n    def read(\n        cls, path: str, inherit: bool = True, encoding: Optional[str] = None\n    ) -> \"Theme\":\n        \"\"\"Read a theme from a path.\n\n        Args:\n            path (str): Path to a config file readable by Python configparser module.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n            encoding (str, optional): Encoding of the config file. Defaults to None.\n\n        Returns:\n            Theme: A new theme instance.\n        \"\"\"\n        with open(path, \"rt\", encoding=encoding) as config_file:\n            return cls.from_file(config_file, source=path, inherit=inherit)\n\n\nclass ThemeStackError(Exception):\n    \"\"\"Base exception for errors related to the theme stack.\"\"\"\n\n\nclass ThemeStack:\n    \"\"\"A stack of themes.\n\n    Args:\n        theme (Theme): A theme instance\n    \"\"\"\n\n    def __init__(self, theme: Theme) -> None:\n        self._entries: List[Dict[str, Style]] = [theme.styles]\n        self.get = self._entries[-1].get\n\n    def push_theme(self, theme: Theme, inherit: bool = True) -> None:\n        \"\"\"Push a theme on the top of the stack.\n\n        Args:\n            theme (Theme): A Theme instance.\n            inherit (boolean, optional): Inherit styles from current top of stack.\n        \"\"\"\n        styles: Dict[str, Style]\n        styles = (\n            {**self._entries[-1], **theme.styles} if inherit else theme.styles.copy()\n        )\n        self._entries.append(styles)\n        self.get = self._entries[-1].get\n\n    def pop_theme(self) -> None:\n        \"\"\"Pop (and discard) the top-most theme.\"\"\"\n        if len(self._entries) == 1:\n            raise ThemeStackError(\"Unable to pop base theme\")\n        self._entries.pop()\n        self.get = self._entries[-1].get\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    theme = Theme()\n    print(theme.config)\n", "rich/containers.py": "from itertools import zip_longest\nfrom typing import (\n    TYPE_CHECKING,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    TypeVar,\n    Union,\n    overload,\n)\n\nif TYPE_CHECKING:\n    from .console import (\n        Console,\n        ConsoleOptions,\n        JustifyMethod,\n        OverflowMethod,\n        RenderResult,\n        RenderableType,\n    )\n    from .text import Text\n\nfrom .cells import cell_len\nfrom .measure import Measurement\n\nT = TypeVar(\"T\")\n\n\nclass Renderables:\n    \"\"\"A list subclass which renders its contents to the console.\"\"\"\n\n    def __init__(\n        self, renderables: Optional[Iterable[\"RenderableType\"]] = None\n    ) -> None:\n        self._renderables: List[\"RenderableType\"] = (\n            list(renderables) if renderables is not None else []\n        )\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        \"\"\"Console render method to insert line-breaks.\"\"\"\n        yield from self._renderables\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        dimensions = [\n            Measurement.get(console, options, renderable)\n            for renderable in self._renderables\n        ]\n        if not dimensions:\n            return Measurement(1, 1)\n        _min = max(dimension.minimum for dimension in dimensions)\n        _max = max(dimension.maximum for dimension in dimensions)\n        return Measurement(_min, _max)\n\n    def append(self, renderable: \"RenderableType\") -> None:\n        self._renderables.append(renderable)\n\n    def __iter__(self) -> Iterable[\"RenderableType\"]:\n        return iter(self._renderables)\n\n\nclass Lines:\n    \"\"\"A list subclass which can render to the console.\"\"\"\n\n    def __init__(self, lines: Iterable[\"Text\"] = ()) -> None:\n        self._lines: List[\"Text\"] = list(lines)\n\n    def __repr__(self) -> str:\n        return f\"Lines({self._lines!r})\"\n\n    def __iter__(self) -> Iterator[\"Text\"]:\n        return iter(self._lines)\n\n    @overload\n    def __getitem__(self, index: int) -> \"Text\":\n        ...\n\n    @overload\n    def __getitem__(self, index: slice) -> List[\"Text\"]:\n        ...\n\n    def __getitem__(self, index: Union[slice, int]) -> Union[\"Text\", List[\"Text\"]]:\n        return self._lines[index]\n\n    def __setitem__(self, index: int, value: \"Text\") -> \"Lines\":\n        self._lines[index] = value\n        return self\n\n    def __len__(self) -> int:\n        return self._lines.__len__()\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        \"\"\"Console render method to insert line-breaks.\"\"\"\n        yield from self._lines\n\n    def append(self, line: \"Text\") -> None:\n        self._lines.append(line)\n\n    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)\n\n    def pop(self, index: int = -1) -> \"Text\":\n        return self._lines.pop(index)\n\n    def justify(\n        self,\n        console: \"Console\",\n        width: int,\n        justify: \"JustifyMethod\" = \"left\",\n        overflow: \"OverflowMethod\" = \"fold\",\n    ) -> None:\n        \"\"\"Justify and overflow text to a given width.\n\n        Args:\n            console (Console): Console instance.\n            width (int): Number of cells available per line.\n            justify (str, optional): Default justify method for text: \"left\", \"center\", \"full\" or \"right\". Defaults to \"left\".\n            overflow (str, optional): Default overflow for text: \"crop\", \"fold\", or \"ellipsis\". Defaults to \"fold\".\n\n        \"\"\"\n        from .text import Text\n\n        if justify == \"left\":\n            for line in self._lines:\n                line.truncate(width, overflow=overflow, pad=True)\n        elif justify == \"center\":\n            for line in self._lines:\n                line.rstrip()\n                line.truncate(width, overflow=overflow)\n                line.pad_left((width - cell_len(line.plain)) // 2)\n                line.pad_right(width - cell_len(line.plain))\n        elif justify == \"right\":\n            for line in self._lines:\n                line.rstrip()\n                line.truncate(width, overflow=overflow)\n                line.pad_left(width - cell_len(line.plain))\n        elif justify == \"full\":\n            for line_index, line in enumerate(self._lines):\n                if line_index == len(self._lines) - 1:\n                    break\n                words = line.split(\" \")\n                words_size = sum(cell_len(word.plain) for word in words)\n                num_spaces = len(words) - 1\n                spaces = [1 for _ in range(num_spaces)]\n                index = 0\n                if spaces:\n                    while words_size + num_spaces < width:\n                        spaces[len(spaces) - index - 1] += 1\n                        num_spaces += 1\n                        index = (index + 1) % len(spaces)\n                tokens: List[Text] = []\n                for index, (word, next_word) in enumerate(\n                    zip_longest(words, words[1:])\n                ):\n                    tokens.append(word)\n                    if index < len(spaces):\n                        style = word.get_style_at_offset(console, -1)\n                        next_style = next_word.get_style_at_offset(console, 0)\n                        space_style = style if style == next_style else line.style\n                        tokens.append(Text(\" \" * spaces[index], style=space_style))\n                self[line_index] = Text(\"\").join(tokens)\n", "rich/abc.py": "from abc import ABC\n\n\nclass RichRenderable(ABC):\n    \"\"\"An abstract base class for Rich renderables.\n\n    Note that there is no need to extend this class, the intended use is to check if an\n    object supports the Rich renderable protocol. For example::\n\n        if isinstance(my_object, RichRenderable):\n            console.print(my_object)\n\n    \"\"\"\n\n    @classmethod\n    def __subclasshook__(cls, other: type) -> bool:\n        \"\"\"Check if this class supports the rich render protocol.\"\"\"\n        return hasattr(other, \"__rich_console__\") or hasattr(other, \"__rich__\")\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.text import Text\n\n    t = Text()\n    print(isinstance(Text, RichRenderable))\n    print(isinstance(t, RichRenderable))\n\n    class Foo:\n        pass\n\n    f = Foo()\n    print(isinstance(f, RichRenderable))\n    print(isinstance(\"\", RichRenderable))\n", "rich/_spinners.py": "\"\"\"\nSpinners are from:\n* cli-spinners:\n    MIT License\n    Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n    the Software, and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n    The above copyright notice and this permission notice shall be included\n    in all copies or substantial portions of the Software.\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n    PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\n    FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n    IN THE SOFTWARE.\n\"\"\"\n\nSPINNERS = {\n    \"dots\": {\n        \"interval\": 80,\n        \"frames\": \"\u280b\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\",\n    },\n    \"dots2\": {\"interval\": 80, \"frames\": \"\u28fe\u28fd\u28fb\u28bf\u287f\u28df\u28ef\u28f7\"},\n    \"dots3\": {\n        \"interval\": 80,\n        \"frames\": \"\u280b\u2819\u281a\u281e\u2816\u2826\u2834\u2832\u2833\u2813\",\n    },\n    \"dots4\": {\n        \"interval\": 80,\n        \"frames\": \"\u2804\u2806\u2807\u280b\u2819\u2838\u2830\u2820\u2830\u2838\u2819\u280b\u2807\u2806\",\n    },\n    \"dots5\": {\n        \"interval\": 80,\n        \"frames\": \"\u280b\u2819\u281a\u2812\u2802\u2802\u2812\u2832\u2834\u2826\u2816\u2812\u2810\u2810\u2812\u2813\u280b\",\n    },\n    \"dots6\": {\n        \"interval\": 80,\n        \"frames\": \"\u2801\u2809\u2819\u281a\u2812\u2802\u2802\u2812\u2832\u2834\u2824\u2804\u2804\u2824\u2834\u2832\u2812\u2802\u2802\u2812\u281a\u2819\u2809\u2801\",\n    },\n    \"dots7\": {\n        \"interval\": 80,\n        \"frames\": \"\u2808\u2809\u280b\u2813\u2812\u2810\u2810\u2812\u2816\u2826\u2824\u2820\u2820\u2824\u2826\u2816\u2812\u2810\u2810\u2812\u2813\u280b\u2809\u2808\",\n    },\n    \"dots8\": {\n        \"interval\": 80,\n        \"frames\": \"\u2801\u2801\u2809\u2819\u281a\u2812\u2802\u2802\u2812\u2832\u2834\u2824\u2804\u2804\u2824\u2820\u2820\u2824\u2826\u2816\u2812\u2810\u2810\u2812\u2813\u280b\u2809\u2808\u2808\",\n    },\n    \"dots9\": {\"interval\": 80, \"frames\": \"\u28b9\u28ba\u28bc\u28f8\u28c7\u2867\u2857\u284f\"},\n    \"dots10\": {\"interval\": 80, \"frames\": \"\u2884\u2882\u2881\u2841\u2848\u2850\u2860\"},\n    \"dots11\": {\"interval\": 100, \"frames\": \"\u2801\u2802\u2804\u2840\u2880\u2820\u2810\u2808\"},\n    \"dots12\": {\n        \"interval\": 80,\n        \"frames\": [\n            \"\u2880\u2800\",\n            \"\u2840\u2800\",\n            \"\u2804\u2800\",\n            \"\u2882\u2800\",\n            \"\u2842\u2800\",\n            \"\u2805\u2800\",\n            \"\u2883\u2800\",\n            \"\u2843\u2800\",\n            \"\u280d\u2800\",\n            \"\u288b\u2800\",\n            \"\u284b\u2800\",\n            \"\u280d\u2801\",\n            \"\u288b\u2801\",\n            \"\u284b\u2801\",\n            \"\u280d\u2809\",\n            \"\u280b\u2809\",\n            \"\u280b\u2809\",\n            \"\u2809\u2819\",\n            \"\u2809\u2819\",\n            \"\u2809\u2829\",\n            \"\u2808\u2899\",\n            \"\u2808\u2859\",\n            \"\u2888\u2829\",\n            \"\u2840\u2899\",\n            \"\u2804\u2859\",\n            \"\u2882\u2829\",\n            \"\u2842\u2898\",\n            \"\u2805\u2858\",\n            \"\u2883\u2828\",\n            \"\u2843\u2890\",\n            \"\u280d\u2850\",\n            \"\u288b\u2820\",\n            \"\u284b\u2880\",\n            \"\u280d\u2841\",\n            \"\u288b\u2801\",\n            \"\u284b\u2801\",\n            \"\u280d\u2809\",\n            \"\u280b\u2809\",\n            \"\u280b\u2809\",\n            \"\u2809\u2819\",\n            \"\u2809\u2819\",\n            \"\u2809\u2829\",\n            \"\u2808\u2899\",\n            \"\u2808\u2859\",\n            \"\u2808\u2829\",\n            \"\u2800\u2899\",\n            \"\u2800\u2859\",\n            \"\u2800\u2829\",\n            \"\u2800\u2898\",\n            \"\u2800\u2858\",\n            \"\u2800\u2828\",\n            \"\u2800\u2890\",\n            \"\u2800\u2850\",\n            \"\u2800\u2820\",\n            \"\u2800\u2880\",\n            \"\u2800\u2840\",\n        ],\n    },\n    \"dots8Bit\": {\n        \"interval\": 80,\n        \"frames\": \"\u2800\u2801\u2802\u2803\u2804\u2805\u2806\u2807\u2840\u2841\u2842\u2843\u2844\u2845\u2846\u2847\u2808\u2809\u280a\u280b\u280c\u280d\u280e\u280f\u2848\u2849\u284a\u284b\u284c\u284d\u284e\u284f\u2810\u2811\u2812\u2813\u2814\u2815\u2816\u2817\u2850\u2851\u2852\u2853\u2854\u2855\u2856\u2857\u2818\u2819\u281a\u281b\u281c\u281d\u281e\u281f\u2858\u2859\"\n        \"\u285a\u285b\u285c\u285d\u285e\u285f\u2820\u2821\u2822\u2823\u2824\u2825\u2826\u2827\u2860\u2861\u2862\u2863\u2864\u2865\u2866\u2867\u2828\u2829\u282a\u282b\u282c\u282d\u282e\u282f\u2868\u2869\u286a\u286b\u286c\u286d\u286e\u286f\u2830\u2831\u2832\u2833\u2834\u2835\u2836\u2837\u2870\u2871\u2872\u2873\u2874\u2875\u2876\u2877\u2838\u2839\u283a\u283b\"\n        \"\u283c\u283d\u283e\u283f\u2878\u2879\u287a\u287b\u287c\u287d\u287e\u287f\u2880\u2881\u2882\u2883\u2884\u2885\u2886\u2887\u28c0\u28c1\u28c2\u28c3\u28c4\u28c5\u28c6\u28c7\u2888\u2889\u288a\u288b\u288c\u288d\u288e\u288f\u28c8\u28c9\u28ca\u28cb\u28cc\u28cd\u28ce\u28cf\u2890\u2891\u2892\u2893\u2894\u2895\u2896\u2897\u28d0\u28d1\u28d2\u28d3\u28d4\u28d5\"\n        \"\u28d6\u28d7\u2898\u2899\u289a\u289b\u289c\u289d\u289e\u289f\u28d8\u28d9\u28da\u28db\u28dc\u28dd\u28de\u28df\u28a0\u28a1\u28a2\u28a3\u28a4\u28a5\u28a6\u28a7\u28e0\u28e1\u28e2\u28e3\u28e4\u28e5\u28e6\u28e7\u28a8\u28a9\u28aa\u28ab\u28ac\u28ad\u28ae\u28af\u28e8\u28e9\u28ea\u28eb\u28ec\u28ed\u28ee\u28ef\u28b0\u28b1\u28b2\u28b3\u28b4\u28b5\u28b6\u28b7\"\n        \"\u28f0\u28f1\u28f2\u28f3\u28f4\u28f5\u28f6\u28f7\u28b8\u28b9\u28ba\u28bb\u28bc\u28bd\u28be\u28bf\u28f8\u28f9\u28fa\u28fb\u28fc\u28fd\u28fe\u28ff\",\n    },\n    \"line\": {\"interval\": 130, \"frames\": [\"-\", \"\\\\\", \"|\", \"/\"]},\n    \"line2\": {\"interval\": 100, \"frames\": \"\u2802-\u2013\u2014\u2013-\"},\n    \"pipe\": {\"interval\": 100, \"frames\": \"\u2524\u2518\u2534\u2514\u251c\u250c\u252c\u2510\"},\n    \"simpleDots\": {\"interval\": 400, \"frames\": [\".  \", \".. \", \"...\", \"   \"]},\n    \"simpleDotsScrolling\": {\n        \"interval\": 200,\n        \"frames\": [\".  \", \".. \", \"...\", \" ..\", \"  .\", \"   \"],\n    },\n    \"star\": {\"interval\": 70, \"frames\": \"\u2736\u2738\u2739\u273a\u2739\u2737\"},\n    \"star2\": {\"interval\": 80, \"frames\": \"+x*\"},\n    \"flip\": {\n        \"interval\": 70,\n        \"frames\": \"___-``'\u00b4-___\",\n    },\n    \"hamburger\": {\"interval\": 100, \"frames\": \"\u2631\u2632\u2634\"},\n    \"growVertical\": {\n        \"interval\": 120,\n        \"frames\": \"\u2581\u2583\u2584\u2585\u2586\u2587\u2586\u2585\u2584\u2583\",\n    },\n    \"growHorizontal\": {\n        \"interval\": 120,\n        \"frames\": \"\u258f\u258e\u258d\u258c\u258b\u258a\u2589\u258a\u258b\u258c\u258d\u258e\",\n    },\n    \"balloon\": {\"interval\": 140, \"frames\": \" .oO@* \"},\n    \"balloon2\": {\"interval\": 120, \"frames\": \".oO\u00b0Oo.\"},\n    \"noise\": {\"interval\": 100, \"frames\": \"\u2593\u2592\u2591\"},\n    \"bounce\": {\"interval\": 120, \"frames\": \"\u2801\u2802\u2804\u2802\"},\n    \"boxBounce\": {\"interval\": 120, \"frames\": \"\u2596\u2598\u259d\u2597\"},\n    \"boxBounce2\": {\"interval\": 100, \"frames\": \"\u258c\u2580\u2590\u2584\"},\n    \"triangle\": {\"interval\": 50, \"frames\": \"\u25e2\u25e3\u25e4\u25e5\"},\n    \"arc\": {\"interval\": 100, \"frames\": \"\u25dc\u25e0\u25dd\u25de\u25e1\u25df\"},\n    \"circle\": {\"interval\": 120, \"frames\": \"\u25e1\u2299\u25e0\"},\n    \"squareCorners\": {\"interval\": 180, \"frames\": \"\u25f0\u25f3\u25f2\u25f1\"},\n    \"circleQuarters\": {\"interval\": 120, \"frames\": \"\u25f4\u25f7\u25f6\u25f5\"},\n    \"circleHalves\": {\"interval\": 50, \"frames\": \"\u25d0\u25d3\u25d1\u25d2\"},\n    \"squish\": {\"interval\": 100, \"frames\": \"\u256b\u256a\"},\n    \"toggle\": {\"interval\": 250, \"frames\": \"\u22b6\u22b7\"},\n    \"toggle2\": {\"interval\": 80, \"frames\": \"\u25ab\u25aa\"},\n    \"toggle3\": {\"interval\": 120, \"frames\": \"\u25a1\u25a0\"},\n    \"toggle4\": {\"interval\": 100, \"frames\": \"\u25a0\u25a1\u25aa\u25ab\"},\n    \"toggle5\": {\"interval\": 100, \"frames\": \"\u25ae\u25af\"},\n    \"toggle6\": {\"interval\": 300, \"frames\": \"\u101d\u1040\"},\n    \"toggle7\": {\"interval\": 80, \"frames\": \"\u29be\u29bf\"},\n    \"toggle8\": {\"interval\": 100, \"frames\": \"\u25cd\u25cc\"},\n    \"toggle9\": {\"interval\": 100, \"frames\": \"\u25c9\u25ce\"},\n    \"toggle10\": {\"interval\": 100, \"frames\": \"\u3282\u3280\u3281\"},\n    \"toggle11\": {\"interval\": 50, \"frames\": \"\u29c7\u29c6\"},\n    \"toggle12\": {\"interval\": 120, \"frames\": \"\u2617\u2616\"},\n    \"toggle13\": {\"interval\": 80, \"frames\": \"=*-\"},\n    \"arrow\": {\"interval\": 100, \"frames\": \"\u2190\u2196\u2191\u2197\u2192\u2198\u2193\u2199\"},\n    \"arrow2\": {\n        \"interval\": 80,\n        \"frames\": [\"\u2b06\ufe0f \", \"\u2197\ufe0f \", \"\u27a1\ufe0f \", \"\u2198\ufe0f \", \"\u2b07\ufe0f \", \"\u2199\ufe0f \", \"\u2b05\ufe0f \", \"\u2196\ufe0f \"],\n    },\n    \"arrow3\": {\n        \"interval\": 120,\n        \"frames\": [\"\u25b9\u25b9\u25b9\u25b9\u25b9\", \"\u25b8\u25b9\u25b9\u25b9\u25b9\", \"\u25b9\u25b8\u25b9\u25b9\u25b9\", \"\u25b9\u25b9\u25b8\u25b9\u25b9\", \"\u25b9\u25b9\u25b9\u25b8\u25b9\", \"\u25b9\u25b9\u25b9\u25b9\u25b8\"],\n    },\n    \"bouncingBar\": {\n        \"interval\": 80,\n        \"frames\": [\n            \"[    ]\",\n            \"[=   ]\",\n            \"[==  ]\",\n            \"[=== ]\",\n            \"[ ===]\",\n            \"[  ==]\",\n            \"[   =]\",\n            \"[    ]\",\n            \"[   =]\",\n            \"[  ==]\",\n            \"[ ===]\",\n            \"[====]\",\n            \"[=== ]\",\n            \"[==  ]\",\n            \"[=   ]\",\n        ],\n    },\n    \"bouncingBall\": {\n        \"interval\": 80,\n        \"frames\": [\n            \"( \u25cf    )\",\n            \"(  \u25cf   )\",\n            \"(   \u25cf  )\",\n            \"(    \u25cf )\",\n            \"(     \u25cf)\",\n            \"(    \u25cf )\",\n            \"(   \u25cf  )\",\n            \"(  \u25cf   )\",\n            \"( \u25cf    )\",\n            \"(\u25cf     )\",\n        ],\n    },\n    \"smiley\": {\"interval\": 200, \"frames\": [\"\ud83d\ude04 \", \"\ud83d\ude1d \"]},\n    \"monkey\": {\"interval\": 300, \"frames\": [\"\ud83d\ude48 \", \"\ud83d\ude48 \", \"\ud83d\ude49 \", \"\ud83d\ude4a \"]},\n    \"hearts\": {\"interval\": 100, \"frames\": [\"\ud83d\udc9b \", \"\ud83d\udc99 \", \"\ud83d\udc9c \", \"\ud83d\udc9a \", \"\u2764\ufe0f \"]},\n    \"clock\": {\n        \"interval\": 100,\n        \"frames\": [\n            \"\ud83d\udd5b \",\n            \"\ud83d\udd50 \",\n            \"\ud83d\udd51 \",\n            \"\ud83d\udd52 \",\n            \"\ud83d\udd53 \",\n            \"\ud83d\udd54 \",\n            \"\ud83d\udd55 \",\n            \"\ud83d\udd56 \",\n            \"\ud83d\udd57 \",\n            \"\ud83d\udd58 \",\n            \"\ud83d\udd59 \",\n            \"\ud83d\udd5a \",\n        ],\n    },\n    \"earth\": {\"interval\": 180, \"frames\": [\"\ud83c\udf0d \", \"\ud83c\udf0e \", \"\ud83c\udf0f \"]},\n    \"material\": {\n        \"interval\": 17,\n        \"frames\": [\n            \"\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\",\n            \"\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\",\n            \"\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\",\n            \"\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\",\n            \"\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n            \"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\",\n        ],\n    },\n    \"moon\": {\n        \"interval\": 80,\n        \"frames\": [\"\ud83c\udf11 \", \"\ud83c\udf12 \", \"\ud83c\udf13 \", \"\ud83c\udf14 \", \"\ud83c\udf15 \", \"\ud83c\udf16 \", \"\ud83c\udf17 \", \"\ud83c\udf18 \"],\n    },\n    \"runner\": {\"interval\": 140, \"frames\": [\"\ud83d\udeb6 \", \"\ud83c\udfc3 \"]},\n    \"pong\": {\n        \"interval\": 80,\n        \"frames\": [\n            \"\u2590\u2802       \u258c\",\n            \"\u2590\u2808       \u258c\",\n            \"\u2590 \u2802      \u258c\",\n            \"\u2590 \u2820      \u258c\",\n            \"\u2590  \u2840     \u258c\",\n            \"\u2590  \u2820     \u258c\",\n            \"\u2590   \u2802    \u258c\",\n            \"\u2590   \u2808    \u258c\",\n            \"\u2590    \u2802   \u258c\",\n            \"\u2590    \u2820   \u258c\",\n            \"\u2590     \u2840  \u258c\",\n            \"\u2590     \u2820  \u258c\",\n            \"\u2590      \u2802 \u258c\",\n            \"\u2590      \u2808 \u258c\",\n            \"\u2590       \u2802\u258c\",\n            \"\u2590       \u2820\u258c\",\n            \"\u2590       \u2840\u258c\",\n            \"\u2590      \u2820 \u258c\",\n            \"\u2590      \u2802 \u258c\",\n            \"\u2590     \u2808  \u258c\",\n            \"\u2590     \u2802  \u258c\",\n            \"\u2590    \u2820   \u258c\",\n            \"\u2590    \u2840   \u258c\",\n            \"\u2590   \u2820    \u258c\",\n            \"\u2590   \u2802    \u258c\",\n            \"\u2590  \u2808     \u258c\",\n            \"\u2590  \u2802     \u258c\",\n            \"\u2590 \u2820      \u258c\",\n            \"\u2590 \u2840      \u258c\",\n            \"\u2590\u2820       \u258c\",\n        ],\n    },\n    \"shark\": {\n        \"interval\": 120,\n        \"frames\": [\n            \"\u2590|\\\\____________\u258c\",\n            \"\u2590_|\\\\___________\u258c\",\n            \"\u2590__|\\\\__________\u258c\",\n            \"\u2590___|\\\\_________\u258c\",\n            \"\u2590____|\\\\________\u258c\",\n            \"\u2590_____|\\\\_______\u258c\",\n            \"\u2590______|\\\\______\u258c\",\n            \"\u2590_______|\\\\_____\u258c\",\n            \"\u2590________|\\\\____\u258c\",\n            \"\u2590_________|\\\\___\u258c\",\n            \"\u2590__________|\\\\__\u258c\",\n            \"\u2590___________|\\\\_\u258c\",\n            \"\u2590____________|\\\\\u258c\",\n            \"\u2590____________/|\u258c\",\n            \"\u2590___________/|_\u258c\",\n            \"\u2590__________/|__\u258c\",\n            \"\u2590_________/|___\u258c\",\n            \"\u2590________/|____\u258c\",\n            \"\u2590_______/|_____\u258c\",\n            \"\u2590______/|______\u258c\",\n            \"\u2590_____/|_______\u258c\",\n            \"\u2590____/|________\u258c\",\n            \"\u2590___/|_________\u258c\",\n            \"\u2590__/|__________\u258c\",\n            \"\u2590_/|___________\u258c\",\n            \"\u2590/|____________\u258c\",\n        ],\n    },\n    \"dqpb\": {\"interval\": 100, \"frames\": \"dqpb\"},\n    \"weather\": {\n        \"interval\": 100,\n        \"frames\": [\n            \"\u2600\ufe0f \",\n            \"\u2600\ufe0f \",\n            \"\u2600\ufe0f \",\n            \"\ud83c\udf24 \",\n            \"\u26c5\ufe0f \",\n            \"\ud83c\udf25 \",\n            \"\u2601\ufe0f \",\n            \"\ud83c\udf27 \",\n            \"\ud83c\udf28 \",\n            \"\ud83c\udf27 \",\n            \"\ud83c\udf28 \",\n            \"\ud83c\udf27 \",\n            \"\ud83c\udf28 \",\n            \"\u26c8 \",\n            \"\ud83c\udf28 \",\n            \"\ud83c\udf27 \",\n            \"\ud83c\udf28 \",\n            \"\u2601\ufe0f \",\n            \"\ud83c\udf25 \",\n            \"\u26c5\ufe0f \",\n            \"\ud83c\udf24 \",\n            \"\u2600\ufe0f \",\n            \"\u2600\ufe0f \",\n        ],\n    },\n    \"christmas\": {\"interval\": 400, \"frames\": \"\ud83c\udf32\ud83c\udf84\"},\n    \"grenade\": {\n        \"interval\": 80,\n        \"frames\": [\n            \"\u060c   \",\n            \"\u2032   \",\n            \" \u00b4 \",\n            \" \u203e \",\n            \"  \u2e0c\",\n            \"  \u2e0a\",\n            \"  |\",\n            \"  \u204e\",\n            \"  \u2055\",\n            \" \u0df4 \",\n            \"  \u2053\",\n            \"   \",\n            \"   \",\n            \"   \",\n        ],\n    },\n    \"point\": {\"interval\": 125, \"frames\": [\"\u2219\u2219\u2219\", \"\u25cf\u2219\u2219\", \"\u2219\u25cf\u2219\", \"\u2219\u2219\u25cf\", \"\u2219\u2219\u2219\"]},\n    \"layer\": {\"interval\": 150, \"frames\": \"-=\u2261\"},\n    \"betaWave\": {\n        \"interval\": 80,\n        \"frames\": [\n            \"\u03c1\u03b2\u03b2\u03b2\u03b2\u03b2\u03b2\",\n            \"\u03b2\u03c1\u03b2\u03b2\u03b2\u03b2\u03b2\",\n            \"\u03b2\u03b2\u03c1\u03b2\u03b2\u03b2\u03b2\",\n            \"\u03b2\u03b2\u03b2\u03c1\u03b2\u03b2\u03b2\",\n            \"\u03b2\u03b2\u03b2\u03b2\u03c1\u03b2\u03b2\",\n            \"\u03b2\u03b2\u03b2\u03b2\u03b2\u03c1\u03b2\",\n            \"\u03b2\u03b2\u03b2\u03b2\u03b2\u03b2\u03c1\",\n        ],\n    },\n    \"aesthetic\": {\n        \"interval\": 80,\n        \"frames\": [\n            \"\u25b0\u25b1\u25b1\u25b1\u25b1\u25b1\u25b1\",\n            \"\u25b0\u25b0\u25b1\u25b1\u25b1\u25b1\u25b1\",\n            \"\u25b0\u25b0\u25b0\u25b1\u25b1\u25b1\u25b1\",\n            \"\u25b0\u25b0\u25b0\u25b0\u25b1\u25b1\u25b1\",\n            \"\u25b0\u25b0\u25b0\u25b0\u25b0\u25b1\u25b1\",\n            \"\u25b0\u25b0\u25b0\u25b0\u25b0\u25b0\u25b1\",\n            \"\u25b0\u25b0\u25b0\u25b0\u25b0\u25b0\u25b0\",\n            \"\u25b0\u25b1\u25b1\u25b1\u25b1\u25b1\u25b1\",\n        ],\n    },\n}\n", "rich/repr.py": "import inspect\nfrom functools import partial\nfrom typing import (\n    Any,\n    Callable,\n    Iterable,\n    List,\n    Optional,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    overload,\n)\n\nT = TypeVar(\"T\")\n\n\nResult = Iterable[Union[Any, Tuple[Any], Tuple[str, Any], Tuple[str, Any, Any]]]\nRichReprResult = Result\n\n\nclass ReprError(Exception):\n    \"\"\"An error occurred when attempting to build a repr.\"\"\"\n\n\n@overload\ndef auto(cls: Optional[Type[T]]) -> Type[T]:\n    ...\n\n\n@overload\ndef auto(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:\n    ...\n\n\ndef auto(\n    cls: Optional[Type[T]] = None, *, angular: Optional[bool] = None\n) -> Union[Type[T], Callable[[Type[T]], Type[T]]]:\n    \"\"\"Class decorator to create __repr__ from __rich_repr__\"\"\"\n\n    def do_replace(cls: Type[T], angular: Optional[bool] = None) -> Type[T]:\n        def auto_repr(self: T) -> str:\n            \"\"\"Create repr string from __rich_repr__\"\"\"\n            repr_str: List[str] = []\n            append = repr_str.append\n\n            angular: bool = getattr(self.__rich_repr__, \"angular\", False)  # type: ignore[attr-defined]\n            for arg in self.__rich_repr__():  # type: ignore[attr-defined]\n                if isinstance(arg, tuple):\n                    if len(arg) == 1:\n                        append(repr(arg[0]))\n                    else:\n                        key, value, *default = arg\n                        if key is None:\n                            append(repr(value))\n                        else:\n                            if default and default[0] == value:\n                                continue\n                            append(f\"{key}={value!r}\")\n                else:\n                    append(repr(arg))\n            if angular:\n                return f\"<{self.__class__.__name__} {' '.join(repr_str)}>\"\n            else:\n                return f\"{self.__class__.__name__}({', '.join(repr_str)})\"\n\n        def auto_rich_repr(self: Type[T]) -> Result:\n            \"\"\"Auto generate __rich_rep__ from signature of __init__\"\"\"\n            try:\n                signature = inspect.signature(self.__init__)\n                for name, param in signature.parameters.items():\n                    if param.kind == param.POSITIONAL_ONLY:\n                        yield getattr(self, name)\n                    elif param.kind in (\n                        param.POSITIONAL_OR_KEYWORD,\n                        param.KEYWORD_ONLY,\n                    ):\n                        if param.default is param.empty:\n                            yield getattr(self, param.name)\n                        else:\n                            yield param.name, getattr(self, param.name), param.default\n            except Exception as error:\n                raise ReprError(\n                    f\"Failed to auto generate __rich_repr__; {error}\"\n                ) from None\n\n        if not hasattr(cls, \"__rich_repr__\"):\n            auto_rich_repr.__doc__ = \"Build a rich repr\"\n            cls.__rich_repr__ = auto_rich_repr  # type: ignore[attr-defined]\n\n        auto_repr.__doc__ = \"Return repr(self)\"\n        cls.__repr__ = auto_repr  # type: ignore[assignment]\n        if angular is not None:\n            cls.__rich_repr__.angular = angular  # type: ignore[attr-defined]\n        return cls\n\n    if cls is None:\n        return partial(do_replace, angular=angular)\n    else:\n        return do_replace(cls, angular=angular)\n\n\n@overload\ndef rich_repr(cls: Optional[Type[T]]) -> Type[T]:\n    ...\n\n\n@overload\ndef rich_repr(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:\n    ...\n\n\ndef rich_repr(\n    cls: Optional[Type[T]] = None, *, angular: bool = False\n) -> Union[Type[T], Callable[[Type[T]], Type[T]]]:\n    if cls is None:\n        return auto(angular=angular)\n    else:\n        return auto(cls)\n\n\nif __name__ == \"__main__\":\n\n    @auto\n    class Foo:\n        def __rich_repr__(self) -> Result:\n            yield \"foo\"\n            yield \"bar\", {\"shopping\": [\"eggs\", \"ham\", \"pineapple\"]}\n            yield \"buy\", \"hand sanitizer\"\n\n    foo = Foo()\n    from rich.console import Console\n\n    console = Console()\n\n    console.rule(\"Standard repr\")\n    console.print(foo)\n\n    console.print(foo, width=60)\n    console.print(foo, width=30)\n\n    console.rule(\"Angular repr\")\n    Foo.__rich_repr__.angular = True  # type: ignore[attr-defined]\n\n    console.print(foo)\n\n    console.print(foo, width=60)\n    console.print(foo, width=30)\n", "rich/scope.py": "from collections.abc import Mapping\nfrom typing import TYPE_CHECKING, Any, Optional, Tuple\n\nfrom .highlighter import ReprHighlighter\nfrom .panel import Panel\nfrom .pretty import Pretty\nfrom .table import Table\nfrom .text import Text, TextType\n\nif TYPE_CHECKING:\n    from .console import ConsoleRenderable\n\n\ndef render_scope(\n    scope: \"Mapping[str, Any]\",\n    *,\n    title: Optional[TextType] = None,\n    sort_keys: bool = True,\n    indent_guides: bool = False,\n    max_length: Optional[int] = None,\n    max_string: Optional[int] = None,\n) -> \"ConsoleRenderable\":\n    \"\"\"Render python variables in a given scope.\n\n    Args:\n        scope (Mapping): A mapping containing variable names and values.\n        title (str, optional): Optional title. Defaults to None.\n        sort_keys (bool, optional): Enable sorting of items. Defaults to True.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to False.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.\n\n    Returns:\n        ConsoleRenderable: A renderable object.\n    \"\"\"\n    highlighter = ReprHighlighter()\n    items_table = Table.grid(padding=(0, 1), expand=False)\n    items_table.add_column(justify=\"right\")\n\n    def sort_items(item: Tuple[str, Any]) -> Tuple[bool, str]:\n        \"\"\"Sort special variables first, then alphabetically.\"\"\"\n        key, _ = item\n        return (not key.startswith(\"__\"), key.lower())\n\n    items = sorted(scope.items(), key=sort_items) if sort_keys else scope.items()\n    for key, value in items:\n        key_text = Text.assemble(\n            (key, \"scope.key.special\" if key.startswith(\"__\") else \"scope.key\"),\n            (\" =\", \"scope.equals\"),\n        )\n        items_table.add_row(\n            key_text,\n            Pretty(\n                value,\n                highlighter=highlighter,\n                indent_guides=indent_guides,\n                max_length=max_length,\n                max_string=max_string,\n            ),\n        )\n    return Panel.fit(\n        items_table,\n        title=title,\n        border_style=\"scope.border\",\n        padding=(0, 1),\n    )\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich import print\n\n    print()\n\n    def test(foo: float, bar: float) -> None:\n        list_of_things = [1, 2, 3, None, 4, True, False, \"Hello World\"]\n        dict_of_things = {\n            \"version\": \"1.1\",\n            \"method\": \"confirmFruitPurchase\",\n            \"params\": [[\"apple\", \"orange\", \"mangoes\", \"pomelo\"], 1.123],\n            \"id\": \"194521489\",\n        }\n        print(render_scope(locals(), title=\"[i]locals\", sort_keys=False))\n\n    test(20.3423, 3.1427)\n    print()\n", "rich/ansi.py": "import re\nimport sys\nfrom contextlib import suppress\nfrom typing import Iterable, NamedTuple, Optional\n\nfrom .color import Color\nfrom .style import Style\nfrom .text import Text\n\nre_ansi = re.compile(\n    r\"\"\"\n(?:\\x1b\\](.*?)\\x1b\\\\)|\n(?:\\x1b([(@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~]))\n\"\"\",\n    re.VERBOSE,\n)\n\n\nclass _AnsiToken(NamedTuple):\n    \"\"\"Result of ansi tokenized string.\"\"\"\n\n    plain: str = \"\"\n    sgr: Optional[str] = \"\"\n    osc: Optional[str] = \"\"\n\n\ndef _ansi_tokenize(ansi_text: str) -> Iterable[_AnsiToken]:\n    \"\"\"Tokenize a string in to plain text and ANSI codes.\n\n    Args:\n        ansi_text (str): A String containing ANSI codes.\n\n    Yields:\n        AnsiToken: A named tuple of (plain, sgr, osc)\n    \"\"\"\n\n    position = 0\n    sgr: Optional[str]\n    osc: Optional[str]\n    for match in re_ansi.finditer(ansi_text):\n        start, end = match.span(0)\n        osc, sgr = match.groups()\n        if start > position:\n            yield _AnsiToken(ansi_text[position:start])\n        if sgr:\n            if sgr == \"(\":\n                position = end + 1\n                continue\n            if sgr.endswith(\"m\"):\n                yield _AnsiToken(\"\", sgr[1:-1], osc)\n        else:\n            yield _AnsiToken(\"\", sgr, osc)\n        position = end\n    if position < len(ansi_text):\n        yield _AnsiToken(ansi_text[position:])\n\n\nSGR_STYLE_MAP = {\n    1: \"bold\",\n    2: \"dim\",\n    3: \"italic\",\n    4: \"underline\",\n    5: \"blink\",\n    6: \"blink2\",\n    7: \"reverse\",\n    8: \"conceal\",\n    9: \"strike\",\n    21: \"underline2\",\n    22: \"not dim not bold\",\n    23: \"not italic\",\n    24: \"not underline\",\n    25: \"not blink\",\n    26: \"not blink2\",\n    27: \"not reverse\",\n    28: \"not conceal\",\n    29: \"not strike\",\n    30: \"color(0)\",\n    31: \"color(1)\",\n    32: \"color(2)\",\n    33: \"color(3)\",\n    34: \"color(4)\",\n    35: \"color(5)\",\n    36: \"color(6)\",\n    37: \"color(7)\",\n    39: \"default\",\n    40: \"on color(0)\",\n    41: \"on color(1)\",\n    42: \"on color(2)\",\n    43: \"on color(3)\",\n    44: \"on color(4)\",\n    45: \"on color(5)\",\n    46: \"on color(6)\",\n    47: \"on color(7)\",\n    49: \"on default\",\n    51: \"frame\",\n    52: \"encircle\",\n    53: \"overline\",\n    54: \"not frame not encircle\",\n    55: \"not overline\",\n    90: \"color(8)\",\n    91: \"color(9)\",\n    92: \"color(10)\",\n    93: \"color(11)\",\n    94: \"color(12)\",\n    95: \"color(13)\",\n    96: \"color(14)\",\n    97: \"color(15)\",\n    100: \"on color(8)\",\n    101: \"on color(9)\",\n    102: \"on color(10)\",\n    103: \"on color(11)\",\n    104: \"on color(12)\",\n    105: \"on color(13)\",\n    106: \"on color(14)\",\n    107: \"on color(15)\",\n}\n\n\nclass AnsiDecoder:\n    \"\"\"Translate ANSI code in to styled Text.\"\"\"\n\n    def __init__(self) -> None:\n        self.style = Style.null()\n\n    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n    def decode_line(self, line: str) -> Text:\n        \"\"\"Decode a line containing ansi codes.\n\n        Args:\n            line (str): A line of terminal output.\n\n        Returns:\n            Text: A Text instance marked up according to ansi codes.\n        \"\"\"\n        from_ansi = Color.from_ansi\n        from_rgb = Color.from_rgb\n        _Style = Style\n        text = Text()\n        append = text.append\n        line = line.rsplit(\"\\r\", 1)[-1]\n        for plain_text, sgr, osc in _ansi_tokenize(line):\n            if plain_text:\n                append(plain_text, self.style or None)\n            elif osc is not None:\n                if osc.startswith(\"8;\"):\n                    _params, semicolon, link = osc[2:].partition(\";\")\n                    if semicolon:\n                        self.style = self.style.update_link(link or None)\n            elif sgr is not None:\n                # Translate in to semi-colon separated codes\n                # Ignore invalid codes, because we want to be lenient\n                codes = [\n                    min(255, int(_code) if _code else 0)\n                    for _code in sgr.split(\";\")\n                    if _code.isdigit() or _code == \"\"\n                ]\n                iter_codes = iter(codes)\n                for code in iter_codes:\n                    if code == 0:\n                        # reset\n                        self.style = _Style.null()\n                    elif code in SGR_STYLE_MAP:\n                        # styles\n                        self.style += _Style.parse(SGR_STYLE_MAP[code])\n                    elif code == 38:\n                        # \u00a0Foreground\n                        with suppress(StopIteration):\n                            color_type = next(iter_codes)\n                            if color_type == 5:\n                                self.style += _Style.from_color(\n                                    from_ansi(next(iter_codes))\n                                )\n                            elif color_type == 2:\n                                self.style += _Style.from_color(\n                                    from_rgb(\n                                        next(iter_codes),\n                                        next(iter_codes),\n                                        next(iter_codes),\n                                    )\n                                )\n                    elif code == 48:\n                        # Background\n                        with suppress(StopIteration):\n                            color_type = next(iter_codes)\n                            if color_type == 5:\n                                self.style += _Style.from_color(\n                                    None, from_ansi(next(iter_codes))\n                                )\n                            elif color_type == 2:\n                                self.style += _Style.from_color(\n                                    None,\n                                    from_rgb(\n                                        next(iter_codes),\n                                        next(iter_codes),\n                                        next(iter_codes),\n                                    ),\n                                )\n\n        return text\n\n\nif sys.platform != \"win32\" and __name__ == \"__main__\":  # pragma: no cover\n    import io\n    import os\n    import pty\n    import sys\n\n    decoder = AnsiDecoder()\n\n    stdout = io.BytesIO()\n\n    def read(fd: int) -> bytes:\n        data = os.read(fd, 1024)\n        stdout.write(data)\n        return data\n\n    pty.spawn(sys.argv[1:], read)\n\n    from .console import Console\n\n    console = Console(record=True)\n\n    stdout_result = stdout.getvalue().decode(\"utf-8\")\n    print(stdout_result)\n\n    for line in decoder.decode(stdout_result):\n        console.print(line)\n\n    console.save_html(\"stdout.html\")\n", "rich/errors.py": "class ConsoleError(Exception):\n    \"\"\"An error in console operation.\"\"\"\n\n\nclass StyleError(Exception):\n    \"\"\"An error in styles.\"\"\"\n\n\nclass StyleSyntaxError(ConsoleError):\n    \"\"\"Style was badly formatted.\"\"\"\n\n\nclass MissingStyle(StyleError):\n    \"\"\"No such style.\"\"\"\n\n\nclass StyleStackError(ConsoleError):\n    \"\"\"Style stack is invalid.\"\"\"\n\n\nclass NotRenderableError(ConsoleError):\n    \"\"\"Object is not renderable.\"\"\"\n\n\nclass MarkupError(ConsoleError):\n    \"\"\"Markup was badly formatted.\"\"\"\n\n\nclass LiveError(ConsoleError):\n    \"\"\"Error related to Live display.\"\"\"\n\n\nclass NoAltScreen(ConsoleError):\n    \"\"\"Alt screen mode was required.\"\"\"\n", "rich/json.py": "from pathlib import Path\nfrom json import loads, dumps\nfrom typing import Any, Callable, Optional, Union\n\nfrom .text import Text\nfrom .highlighter import JSONHighlighter, NullHighlighter\n\n\nclass JSON:\n    \"\"\"A renderable which pretty prints JSON.\n\n    Args:\n        json (str): JSON encoded data.\n        indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.\n        highlight (bool, optional): Enable highlighting. Defaults to True.\n        skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n        ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n        check_circular (bool, optional): Check for circular references. Defaults to True.\n        allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n        default (Callable, optional): A callable that converts values that can not be encoded\n            in to something that can be JSON encoded. Defaults to None.\n        sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n    \"\"\"\n\n    def __init__(\n        self,\n        json: str,\n        indent: Union[None, int, str] = 2,\n        highlight: bool = True,\n        skip_keys: bool = False,\n        ensure_ascii: bool = False,\n        check_circular: bool = True,\n        allow_nan: bool = True,\n        default: Optional[Callable[[Any], Any]] = None,\n        sort_keys: bool = False,\n    ) -> None:\n        data = loads(json)\n        json = dumps(\n            data,\n            indent=indent,\n            skipkeys=skip_keys,\n            ensure_ascii=ensure_ascii,\n            check_circular=check_circular,\n            allow_nan=allow_nan,\n            default=default,\n            sort_keys=sort_keys,\n        )\n        highlighter = JSONHighlighter() if highlight else NullHighlighter()\n        self.text = highlighter(json)\n        self.text.no_wrap = True\n        self.text.overflow = None\n\n    @classmethod\n    def from_data(\n        cls,\n        data: Any,\n        indent: Union[None, int, str] = 2,\n        highlight: bool = True,\n        skip_keys: bool = False,\n        ensure_ascii: bool = False,\n        check_circular: bool = True,\n        allow_nan: bool = True,\n        default: Optional[Callable[[Any], Any]] = None,\n        sort_keys: bool = False,\n    ) -> \"JSON\":\n        \"\"\"Encodes a JSON object from arbitrary data.\n\n        Args:\n            data (Any): An object that may be encoded in to JSON\n            indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.\n            highlight (bool, optional): Enable highlighting. Defaults to True.\n            default (Callable, optional): Optional callable which will be called for objects that cannot be serialized. Defaults to None.\n            skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n            ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n            check_circular (bool, optional): Check for circular references. Defaults to True.\n            allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n            default (Callable, optional): A callable that converts values that can not be encoded\n                in to something that can be JSON encoded. Defaults to None.\n            sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n\n        Returns:\n            JSON: New JSON object from the given data.\n        \"\"\"\n        json_instance: \"JSON\" = cls.__new__(cls)\n        json = dumps(\n            data,\n            indent=indent,\n            skipkeys=skip_keys,\n            ensure_ascii=ensure_ascii,\n            check_circular=check_circular,\n            allow_nan=allow_nan,\n            default=default,\n            sort_keys=sort_keys,\n        )\n        highlighter = JSONHighlighter() if highlight else NullHighlighter()\n        json_instance.text = highlighter(json)\n        json_instance.text.no_wrap = True\n        json_instance.text.overflow = None\n        return json_instance\n\n    def __rich__(self) -> Text:\n        return self.text\n\n\nif __name__ == \"__main__\":\n    import argparse\n    import sys\n\n    parser = argparse.ArgumentParser(description=\"Pretty print json\")\n    parser.add_argument(\n        \"path\",\n        metavar=\"PATH\",\n        help=\"path to file, or - for stdin\",\n    )\n    parser.add_argument(\n        \"-i\",\n        \"--indent\",\n        metavar=\"SPACES\",\n        type=int,\n        help=\"Number of spaces in an indent\",\n        default=2,\n    )\n    args = parser.parse_args()\n\n    from rich.console import Console\n\n    console = Console()\n    error_console = Console(stderr=True)\n\n    try:\n        if args.path == \"-\":\n            json_data = sys.stdin.read()\n        else:\n            json_data = Path(args.path).read_text()\n    except Exception as error:\n        error_console.print(f\"Unable to read {args.path!r}; {error}\")\n        sys.exit(-1)\n\n    console.print(JSON(json_data, indent=args.indent), soft_wrap=True)\n", "rich/live_render.py": "import sys\nfrom typing import Optional, Tuple\n\nif sys.version_info >= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal  # pragma: no cover\n\n\nfrom ._loop import loop_last\nfrom .console import Console, ConsoleOptions, RenderableType, RenderResult\nfrom .control import Control\nfrom .segment import ControlType, Segment\nfrom .style import StyleType\nfrom .text import Text\n\nVerticalOverflowMethod = Literal[\"crop\", \"ellipsis\", \"visible\"]\n\n\nclass LiveRender:\n    \"\"\"Creates a renderable that may be updated.\n\n    Args:\n        renderable (RenderableType): Any renderable object.\n        style (StyleType, optional): An optional style to apply to the renderable. Defaults to \"\".\n    \"\"\"\n\n    def __init__(\n        self,\n        renderable: RenderableType,\n        style: StyleType = \"\",\n        vertical_overflow: VerticalOverflowMethod = \"ellipsis\",\n    ) -> None:\n        self.renderable = renderable\n        self.style = style\n        self.vertical_overflow = vertical_overflow\n        self._shape: Optional[Tuple[int, int]] = None\n\n    def set_renderable(self, renderable: RenderableType) -> None:\n        \"\"\"Set a new renderable.\n\n        Args:\n            renderable (RenderableType): Any renderable object, including str.\n        \"\"\"\n        self.renderable = renderable\n\n    def position_cursor(self) -> Control:\n        \"\"\"Get control codes to move cursor to beginning of live render.\n\n        Returns:\n            Control: A control instance that may be printed.\n        \"\"\"\n        if self._shape is not None:\n            _, height = self._shape\n            return Control(\n                ControlType.CARRIAGE_RETURN,\n                (ControlType.ERASE_IN_LINE, 2),\n                *(\n                    (\n                        (ControlType.CURSOR_UP, 1),\n                        (ControlType.ERASE_IN_LINE, 2),\n                    )\n                    * (height - 1)\n                )\n            )\n        return Control()\n\n    def restore_cursor(self) -> Control:\n        \"\"\"Get control codes to clear the render and restore the cursor to its previous position.\n\n        Returns:\n            Control: A Control instance that may be printed.\n        \"\"\"\n        if self._shape is not None:\n            _, height = self._shape\n            return Control(\n                ControlType.CARRIAGE_RETURN,\n                *((ControlType.CURSOR_UP, 1), (ControlType.ERASE_IN_LINE, 2)) * height\n            )\n        return Control()\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        renderable = self.renderable\n        style = console.get_style(self.style)\n        lines = console.render_lines(renderable, options, style=style, pad=False)\n        shape = Segment.get_shape(lines)\n\n        _, height = shape\n        if height > options.size.height:\n            if self.vertical_overflow == \"crop\":\n                lines = lines[: options.size.height]\n                shape = Segment.get_shape(lines)\n            elif self.vertical_overflow == \"ellipsis\":\n                lines = lines[: (options.size.height - 1)]\n                overflow_text = Text(\n                    \"...\",\n                    overflow=\"crop\",\n                    justify=\"center\",\n                    end=\"\",\n                    style=\"live.ellipsis\",\n                )\n                lines.append(list(console.render(overflow_text)))\n                shape = Segment.get_shape(lines)\n        self._shape = shape\n\n        new_line = Segment.line()\n        for last, line in loop_last(lines):\n            yield from line\n            if not last:\n                yield new_line\n", "rich/progress_bar.py": "import math\nfrom functools import lru_cache\nfrom time import monotonic\nfrom typing import Iterable, List, Optional\n\nfrom .color import Color, blend_rgb\nfrom .color_triplet import ColorTriplet\nfrom .console import Console, ConsoleOptions, RenderResult\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .segment import Segment\nfrom .style import Style, StyleType\n\n# Number of characters before 'pulse' animation repeats\nPULSE_SIZE = 20\n\n\nclass ProgressBar(JupyterMixin):\n    \"\"\"Renders a (progress) bar. Used by rich.progress.\n\n    Args:\n        total (float, optional): Number of steps in the bar. Defaults to 100. Set to None to render a pulsing animation.\n        completed (float, optional): Number of steps completed. Defaults to 0.\n        width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.\n        pulse (bool, optional): Enable pulse effect. Defaults to False. Will pulse if a None total was passed.\n        style (StyleType, optional): Style for the bar background. Defaults to \"bar.back\".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to \"bar.complete\".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to \"bar.finished\".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to \"bar.pulse\".\n        animation_time (Optional[float], optional): Time in seconds to use for animation, or None to use system time.\n    \"\"\"\n\n    def __init__(\n        self,\n        total: Optional[float] = 100.0,\n        completed: float = 0,\n        width: Optional[int] = None,\n        pulse: bool = False,\n        style: StyleType = \"bar.back\",\n        complete_style: StyleType = \"bar.complete\",\n        finished_style: StyleType = \"bar.finished\",\n        pulse_style: StyleType = \"bar.pulse\",\n        animation_time: Optional[float] = None,\n    ):\n        self.total = total\n        self.completed = completed\n        self.width = width\n        self.pulse = pulse\n        self.style = style\n        self.complete_style = complete_style\n        self.finished_style = finished_style\n        self.pulse_style = pulse_style\n        self.animation_time = animation_time\n\n        self._pulse_segments: Optional[List[Segment]] = None\n\n    def __repr__(self) -> str:\n        return f\"<Bar {self.completed!r} of {self.total!r}>\"\n\n    @property\n    def percentage_completed(self) -> Optional[float]:\n        \"\"\"Calculate percentage complete.\"\"\"\n        if self.total is None:\n            return None\n        completed = (self.completed / self.total) * 100.0\n        completed = min(100, max(0.0, completed))\n        return completed\n\n    @lru_cache(maxsize=16)\n    def _get_pulse_segments(\n        self,\n        fore_style: Style,\n        back_style: Style,\n        color_system: str,\n        no_color: bool,\n        ascii: bool = False,\n    ) -> List[Segment]:\n        \"\"\"Get a list of segments to render a pulse animation.\n\n        Returns:\n            List[Segment]: A list of segments, one segment per character.\n        \"\"\"\n        bar = \"-\" if ascii else \"\u2501\"\n        segments: List[Segment] = []\n        if color_system not in (\"standard\", \"eight_bit\", \"truecolor\") or no_color:\n            segments += [Segment(bar, fore_style)] * (PULSE_SIZE // 2)\n            segments += [Segment(\" \" if no_color else bar, back_style)] * (\n                PULSE_SIZE - (PULSE_SIZE // 2)\n            )\n            return segments\n\n        append = segments.append\n        fore_color = (\n            fore_style.color.get_truecolor()\n            if fore_style.color\n            else ColorTriplet(255, 0, 255)\n        )\n        back_color = (\n            back_style.color.get_truecolor()\n            if back_style.color\n            else ColorTriplet(0, 0, 0)\n        )\n        cos = math.cos\n        pi = math.pi\n        _Segment = Segment\n        _Style = Style\n        from_triplet = Color.from_triplet\n\n        for index in range(PULSE_SIZE):\n            position = index / PULSE_SIZE\n            fade = 0.5 + cos((position * pi * 2)) / 2.0\n            color = blend_rgb(fore_color, back_color, cross_fade=fade)\n            append(_Segment(bar, _Style(color=from_triplet(color))))\n        return segments\n\n    def update(self, completed: float, total: Optional[float] = None) -> None:\n        \"\"\"Update progress with new values.\n\n        Args:\n            completed (float): Number of steps completed.\n            total (float, optional): Total number of steps, or ``None`` to not change. Defaults to None.\n        \"\"\"\n        self.completed = completed\n        self.total = total if total is not None else self.total\n\n    def _render_pulse(\n        self, console: Console, width: int, ascii: bool = False\n    ) -> Iterable[Segment]:\n        \"\"\"Renders the pulse animation.\n\n        Args:\n            console (Console): Console instance.\n            width (int): Width in characters of pulse animation.\n\n        Returns:\n            RenderResult: [description]\n\n        Yields:\n            Iterator[Segment]: Segments to render pulse\n        \"\"\"\n        fore_style = console.get_style(self.pulse_style, default=\"white\")\n        back_style = console.get_style(self.style, default=\"black\")\n\n        pulse_segments = self._get_pulse_segments(\n            fore_style, back_style, console.color_system, console.no_color, ascii=ascii\n        )\n        segment_count = len(pulse_segments)\n        current_time = (\n            monotonic() if self.animation_time is None else self.animation_time\n        )\n        segments = pulse_segments * (int(width / segment_count) + 2)\n        offset = int(-current_time * 15) % segment_count\n        segments = segments[offset : offset + width]\n        yield from segments\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        width = min(self.width or options.max_width, options.max_width)\n        ascii = options.legacy_windows or options.ascii_only\n        should_pulse = self.pulse or self.total is None\n        if should_pulse:\n            yield from self._render_pulse(console, width, ascii=ascii)\n            return\n\n        completed: Optional[float] = (\n            min(self.total, max(0, self.completed)) if self.total is not None else None\n        )\n\n        bar = \"-\" if ascii else \"\u2501\"\n        half_bar_right = \" \" if ascii else \"\u2578\"\n        half_bar_left = \" \" if ascii else \"\u257a\"\n        complete_halves = (\n            int(width * 2 * completed / self.total)\n            if self.total and completed is not None\n            else width * 2\n        )\n        bar_count = complete_halves // 2\n        half_bar_count = complete_halves % 2\n        style = console.get_style(self.style)\n        is_finished = self.total is None or self.completed >= self.total\n        complete_style = console.get_style(\n            self.finished_style if is_finished else self.complete_style\n        )\n        _Segment = Segment\n        if bar_count:\n            yield _Segment(bar * bar_count, complete_style)\n        if half_bar_count:\n            yield _Segment(half_bar_right * half_bar_count, complete_style)\n\n        if not console.no_color:\n            remaining_bars = width - bar_count - half_bar_count\n            if remaining_bars and console.color_system is not None:\n                if not half_bar_count and bar_count:\n                    yield _Segment(half_bar_left, style)\n                    remaining_bars -= 1\n                if remaining_bars:\n                    yield _Segment(bar * remaining_bars, style)\n\n    def __rich_measure__(\n        self, console: Console, options: ConsoleOptions\n    ) -> Measurement:\n        return (\n            Measurement(self.width, self.width)\n            if self.width is not None\n            else Measurement(4, options.max_width)\n        )\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    console = Console()\n    bar = ProgressBar(width=50, total=100)\n\n    import time\n\n    console.show_cursor(False)\n    for n in range(0, 101, 1):\n        bar.update(n)\n        console.print(bar)\n        console.file.write(\"\\r\")\n        time.sleep(0.05)\n    console.show_cursor(True)\n    console.print()\n", "rich/color_triplet.py": "from typing import NamedTuple, Tuple\n\n\nclass ColorTriplet(NamedTuple):\n    \"\"\"The red, green, and blue components of a color.\"\"\"\n\n    red: int\n    \"\"\"Red component in 0 to 255 range.\"\"\"\n    green: int\n    \"\"\"Green component in 0 to 255 range.\"\"\"\n    blue: int\n    \"\"\"Blue component in 0 to 255 range.\"\"\"\n\n    @property\n    def hex(self) -> str:\n        \"\"\"get the color triplet in CSS style.\"\"\"\n        red, green, blue = self\n        return f\"#{red:02x}{green:02x}{blue:02x}\"\n\n    @property\n    def rgb(self) -> str:\n        \"\"\"The color in RGB format.\n\n        Returns:\n            str: An rgb color, e.g. ``\"rgb(100,23,255)\"``.\n        \"\"\"\n        red, green, blue = self\n        return f\"rgb({red},{green},{blue})\"\n\n    @property\n    def normalized(self) -> Tuple[float, float, float]:\n        \"\"\"Convert components into floats between 0 and 1.\n\n        Returns:\n            Tuple[float, float, float]: A tuple of three normalized colour components.\n        \"\"\"\n        red, green, blue = self\n        return red / 255.0, green / 255.0, blue / 255.0\n", "rich/_emoji_replace.py": "from typing import Callable, Match, Optional\nimport re\n\nfrom ._emoji_codes import EMOJI\n\n\n_ReStringMatch = Match[str]  # regex match object\n_ReSubCallable = Callable[[_ReStringMatch], str]  # Callable invoked by re.sub\n_EmojiSubMethod = Callable[[_ReSubCallable, str], str]  # Sub method of a compiled re\n\n\ndef _emoji_replace(\n    text: str,\n    default_variant: Optional[str] = None,\n    _emoji_sub: _EmojiSubMethod = re.compile(r\"(:(\\S*?)(?:(?:\\-)(emoji|text))?:)\").sub,\n) -> str:\n    \"\"\"Replace emoji code in text.\"\"\"\n    get_emoji = EMOJI.__getitem__\n    variants = {\"text\": \"\\uFE0E\", \"emoji\": \"\\uFE0F\"}\n    get_variant = variants.get\n    default_variant_code = variants.get(default_variant, \"\") if default_variant else \"\"\n\n    def do_replace(match: Match[str]) -> str:\n        emoji_code, emoji_name, variant = match.groups()\n        try:\n            return get_emoji(emoji_name.lower()) + get_variant(\n                variant, default_variant_code\n            )\n        except KeyError:\n            return emoji_code\n\n    return _emoji_sub(do_replace, text)\n", "rich/styled.py": "from typing import TYPE_CHECKING\n\nfrom .measure import Measurement\nfrom .segment import Segment\nfrom .style import StyleType\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderResult, RenderableType\n\n\nclass Styled:\n    \"\"\"Apply a style to a renderable.\n\n    Args:\n        renderable (RenderableType): Any renderable.\n        style (StyleType): A style to apply across the entire renderable.\n    \"\"\"\n\n    def __init__(self, renderable: \"RenderableType\", style: \"StyleType\") -> None:\n        self.renderable = renderable\n        self.style = style\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        style = console.get_style(self.style)\n        rendered_segments = console.render(self.renderable, options)\n        segments = Segment.apply_style(rendered_segments, style)\n        return segments\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Measurement:\n        return Measurement.get(console, options, self.renderable)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich import print\n    from rich.panel import Panel\n\n    panel = Styled(Panel(\"hello\"), \"on blue\")\n    print(panel)\n", "rich/align.py": "import sys\nfrom itertools import chain\nfrom typing import TYPE_CHECKING, Iterable, Optional\n\nif sys.version_info >= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal  # pragma: no cover\n\nfrom .constrain import Constrain\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .segment import Segment\nfrom .style import StyleType\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderableType, RenderResult\n\nAlignMethod = Literal[\"left\", \"center\", \"right\"]\nVerticalAlignMethod = Literal[\"top\", \"middle\", \"bottom\"]\n\n\nclass Align(JupyterMixin):\n    \"\"\"Align a renderable by adding spaces if necessary.\n\n    Args:\n        renderable (RenderableType): A console renderable.\n        align (AlignMethod): One of \"left\", \"center\", or \"right\"\"\n        style (StyleType, optional): An optional style to apply to the background.\n        vertical (Optional[VerticalAlignMethod], optional): Optional vertical align, one of \"top\", \"middle\", or \"bottom\". Defaults to None.\n        pad (bool, optional): Pad the right with spaces. Defaults to True.\n        width (int, optional): Restrict contents to given width, or None to use default width. Defaults to None.\n        height (int, optional): Set height of align renderable, or None to fit to contents. Defaults to None.\n\n    Raises:\n        ValueError: if ``align`` is not one of the expected values.\n    \"\"\"\n\n    def __init__(\n        self,\n        renderable: \"RenderableType\",\n        align: AlignMethod = \"left\",\n        style: Optional[StyleType] = None,\n        *,\n        vertical: Optional[VerticalAlignMethod] = None,\n        pad: bool = True,\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n    ) -> None:\n        if align not in (\"left\", \"center\", \"right\"):\n            raise ValueError(\n                f'invalid value for align, expected \"left\", \"center\", or \"right\" (not {align!r})'\n            )\n        if vertical is not None and vertical not in (\"top\", \"middle\", \"bottom\"):\n            raise ValueError(\n                f'invalid value for vertical, expected \"top\", \"middle\", or \"bottom\" (not {vertical!r})'\n            )\n        self.renderable = renderable\n        self.align = align\n        self.style = style\n        self.vertical = vertical\n        self.pad = pad\n        self.width = width\n        self.height = height\n\n    def __repr__(self) -> str:\n        return f\"Align({self.renderable!r}, {self.align!r})\"\n\n    @classmethod\n    def left(\n        cls,\n        renderable: \"RenderableType\",\n        style: Optional[StyleType] = None,\n        *,\n        vertical: Optional[VerticalAlignMethod] = None,\n        pad: bool = True,\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n    ) -> \"Align\":\n        \"\"\"Align a renderable to the left.\"\"\"\n        return cls(\n            renderable,\n            \"left\",\n            style=style,\n            vertical=vertical,\n            pad=pad,\n            width=width,\n            height=height,\n        )\n\n    @classmethod\n    def center(\n        cls,\n        renderable: \"RenderableType\",\n        style: Optional[StyleType] = None,\n        *,\n        vertical: Optional[VerticalAlignMethod] = None,\n        pad: bool = True,\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n    ) -> \"Align\":\n        \"\"\"Align a renderable to the center.\"\"\"\n        return cls(\n            renderable,\n            \"center\",\n            style=style,\n            vertical=vertical,\n            pad=pad,\n            width=width,\n            height=height,\n        )\n\n    @classmethod\n    def right(\n        cls,\n        renderable: \"RenderableType\",\n        style: Optional[StyleType] = None,\n        *,\n        vertical: Optional[VerticalAlignMethod] = None,\n        pad: bool = True,\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n    ) -> \"Align\":\n        \"\"\"Align a renderable to the right.\"\"\"\n        return cls(\n            renderable,\n            \"right\",\n            style=style,\n            vertical=vertical,\n            pad=pad,\n            width=width,\n            height=height,\n        )\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        align = self.align\n        width = console.measure(self.renderable, options=options).maximum\n        rendered = console.render(\n            Constrain(\n                self.renderable, width if self.width is None else min(width, self.width)\n            ),\n            options.update(height=None),\n        )\n        lines = list(Segment.split_lines(rendered))\n        width, height = Segment.get_shape(lines)\n        lines = Segment.set_shape(lines, width, height)\n        new_line = Segment.line()\n        excess_space = options.max_width - width\n        style = console.get_style(self.style) if self.style is not None else None\n\n        def generate_segments() -> Iterable[Segment]:\n            if excess_space <= 0:\n                # Exact fit\n                for line in lines:\n                    yield from line\n                    yield new_line\n\n            elif align == \"left\":\n                # Pad on the right\n                pad = Segment(\" \" * excess_space, style) if self.pad else None\n                for line in lines:\n                    yield from line\n                    if pad:\n                        yield pad\n                    yield new_line\n\n            elif align == \"center\":\n                # Pad left and right\n                left = excess_space // 2\n                pad = Segment(\" \" * left, style)\n                pad_right = (\n                    Segment(\" \" * (excess_space - left), style) if self.pad else None\n                )\n                for line in lines:\n                    if left:\n                        yield pad\n                    yield from line\n                    if pad_right:\n                        yield pad_right\n                    yield new_line\n\n            elif align == \"right\":\n                # Padding on left\n                pad = Segment(\" \" * excess_space, style)\n                for line in lines:\n                    yield pad\n                    yield from line\n                    yield new_line\n\n        blank_line = (\n            Segment(f\"{' ' * (self.width or options.max_width)}\\n\", style)\n            if self.pad\n            else Segment(\"\\n\")\n        )\n\n        def blank_lines(count: int) -> Iterable[Segment]:\n            if count > 0:\n                for _ in range(count):\n                    yield blank_line\n\n        vertical_height = self.height or options.height\n        iter_segments: Iterable[Segment]\n        if self.vertical and vertical_height is not None:\n            if self.vertical == \"top\":\n                bottom_space = vertical_height - height\n                iter_segments = chain(generate_segments(), blank_lines(bottom_space))\n            elif self.vertical == \"middle\":\n                top_space = (vertical_height - height) // 2\n                bottom_space = vertical_height - top_space - height\n                iter_segments = chain(\n                    blank_lines(top_space),\n                    generate_segments(),\n                    blank_lines(bottom_space),\n                )\n            else:  #  self.vertical == \"bottom\":\n                top_space = vertical_height - height\n                iter_segments = chain(blank_lines(top_space), generate_segments())\n        else:\n            iter_segments = generate_segments()\n        if self.style:\n            style = console.get_style(self.style)\n            iter_segments = Segment.apply_style(iter_segments, style)\n        yield from iter_segments\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Measurement:\n        measurement = Measurement.get(console, options, self.renderable)\n        return measurement\n\n\nclass VerticalCenter(JupyterMixin):\n    \"\"\"Vertically aligns a renderable.\n\n    Warn:\n        This class is deprecated and may be removed in a future version. Use Align class with\n        `vertical=\"middle\"`.\n\n    Args:\n        renderable (RenderableType): A renderable object.\n    \"\"\"\n\n    def __init__(\n        self,\n        renderable: \"RenderableType\",\n        style: Optional[StyleType] = None,\n    ) -> None:\n        self.renderable = renderable\n        self.style = style\n\n    def __repr__(self) -> str:\n        return f\"VerticalCenter({self.renderable!r})\"\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        style = console.get_style(self.style) if self.style is not None else None\n        lines = console.render_lines(\n            self.renderable, options.update(height=None), pad=False\n        )\n        width, _height = Segment.get_shape(lines)\n        new_line = Segment.line()\n        height = options.height or options.size.height\n        top_space = (height - len(lines)) // 2\n        bottom_space = height - top_space - len(lines)\n        blank_line = Segment(f\"{' ' * width}\", style)\n\n        def blank_lines(count: int) -> Iterable[Segment]:\n            for _ in range(count):\n                yield blank_line\n                yield new_line\n\n        if top_space > 0:\n            yield from blank_lines(top_space)\n        for line in lines:\n            yield from line\n            yield new_line\n        if bottom_space > 0:\n            yield from blank_lines(bottom_space)\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Measurement:\n        measurement = Measurement.get(console, options, self.renderable)\n        return measurement\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.console import Console, Group\n    from rich.highlighter import ReprHighlighter\n    from rich.panel import Panel\n\n    highlighter = ReprHighlighter()\n    console = Console()\n\n    panel = Panel(\n        Group(\n            Align.left(highlighter(\"align='left'\")),\n            Align.center(highlighter(\"align='center'\")),\n            Align.right(highlighter(\"align='right'\")),\n        ),\n        width=60,\n        style=\"on dark_blue\",\n        title=\"Align\",\n    )\n\n    console.print(\n        Align.center(panel, vertical=\"middle\", style=\"on red\", height=console.height)\n    )\n", "rich/control.py": "import sys\nimport time\nfrom typing import TYPE_CHECKING, Callable, Dict, Iterable, List, Union\n\nif sys.version_info >= (3, 8):\n    from typing import Final\nelse:\n    from typing_extensions import Final  # pragma: no cover\n\nfrom .segment import ControlCode, ControlType, Segment\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderResult\n\nSTRIP_CONTROL_CODES: Final = [\n    7,  # Bell\n    8,  # Backspace\n    11,  # Vertical tab\n    12,  # Form feed\n    13,  # Carriage return\n]\n_CONTROL_STRIP_TRANSLATE: Final = {\n    _codepoint: None for _codepoint in STRIP_CONTROL_CODES\n}\n\nCONTROL_ESCAPE: Final = {\n    7: \"\\\\a\",\n    8: \"\\\\b\",\n    11: \"\\\\v\",\n    12: \"\\\\f\",\n    13: \"\\\\r\",\n}\n\nCONTROL_CODES_FORMAT: Dict[int, Callable[..., str]] = {\n    ControlType.BELL: lambda: \"\\x07\",\n    ControlType.CARRIAGE_RETURN: lambda: \"\\r\",\n    ControlType.HOME: lambda: \"\\x1b[H\",\n    ControlType.CLEAR: lambda: \"\\x1b[2J\",\n    ControlType.ENABLE_ALT_SCREEN: lambda: \"\\x1b[?1049h\",\n    ControlType.DISABLE_ALT_SCREEN: lambda: \"\\x1b[?1049l\",\n    ControlType.SHOW_CURSOR: lambda: \"\\x1b[?25h\",\n    ControlType.HIDE_CURSOR: lambda: \"\\x1b[?25l\",\n    ControlType.CURSOR_UP: lambda param: f\"\\x1b[{param}A\",\n    ControlType.CURSOR_DOWN: lambda param: f\"\\x1b[{param}B\",\n    ControlType.CURSOR_FORWARD: lambda param: f\"\\x1b[{param}C\",\n    ControlType.CURSOR_BACKWARD: lambda param: f\"\\x1b[{param}D\",\n    ControlType.CURSOR_MOVE_TO_COLUMN: lambda param: f\"\\x1b[{param+1}G\",\n    ControlType.ERASE_IN_LINE: lambda param: f\"\\x1b[{param}K\",\n    ControlType.CURSOR_MOVE_TO: lambda x, y: f\"\\x1b[{y+1};{x+1}H\",\n    ControlType.SET_WINDOW_TITLE: lambda title: f\"\\x1b]0;{title}\\x07\",\n}\n\n\nclass Control:\n    \"\"\"A renderable that inserts a control code (non printable but may move cursor).\n\n    Args:\n        *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` enum or a\n            tuple of ControlType and an integer parameter\n    \"\"\"\n\n    __slots__ = [\"segment\"]\n\n    def __init__(self, *codes: Union[ControlType, ControlCode]) -> None:\n        control_codes: List[ControlCode] = [\n            (code,) if isinstance(code, ControlType) else code for code in codes\n        ]\n        _format_map = CONTROL_CODES_FORMAT\n        rendered_codes = \"\".join(\n            _format_map[code](*parameters) for code, *parameters in control_codes\n        )\n        self.segment = Segment(rendered_codes, None, control_codes)\n\n    @classmethod\n    def bell(cls) -> \"Control\":\n        \"\"\"Ring the 'bell'.\"\"\"\n        return cls(ControlType.BELL)\n\n    @classmethod\n    def home(cls) -> \"Control\":\n        \"\"\"Move cursor to 'home' position.\"\"\"\n        return cls(ControlType.HOME)\n\n    @classmethod\n    def move(cls, x: int = 0, y: int = 0) -> \"Control\":\n        \"\"\"Move cursor relative to current position.\n\n        Args:\n            x (int): X offset.\n            y (int): Y offset.\n\n        Returns:\n            ~Control: Control object.\n\n        \"\"\"\n\n        def get_codes() -> Iterable[ControlCode]:\n            control = ControlType\n            if x:\n                yield (\n                    control.CURSOR_FORWARD if x > 0 else control.CURSOR_BACKWARD,\n                    abs(x),\n                )\n            if y:\n                yield (\n                    control.CURSOR_DOWN if y > 0 else control.CURSOR_UP,\n                    abs(y),\n                )\n\n        control = cls(*get_codes())\n        return control\n\n    @classmethod\n    def move_to_column(cls, x: int, y: int = 0) -> \"Control\":\n        \"\"\"Move to the given column, optionally add offset to row.\n\n        Returns:\n            x (int): absolute x (column)\n            y (int): optional y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        \"\"\"\n\n        return (\n            cls(\n                (ControlType.CURSOR_MOVE_TO_COLUMN, x),\n                (\n                    ControlType.CURSOR_DOWN if y > 0 else ControlType.CURSOR_UP,\n                    abs(y),\n                ),\n            )\n            if y\n            else cls((ControlType.CURSOR_MOVE_TO_COLUMN, x))\n        )\n\n    @classmethod\n    def move_to(cls, x: int, y: int) -> \"Control\":\n        \"\"\"Move cursor to absolute position.\n\n        Args:\n            x (int): x offset (column)\n            y (int): y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        \"\"\"\n        return cls((ControlType.CURSOR_MOVE_TO, x, y))\n\n    @classmethod\n    def clear(cls) -> \"Control\":\n        \"\"\"Clear the screen.\"\"\"\n        return cls(ControlType.CLEAR)\n\n    @classmethod\n    def show_cursor(cls, show: bool) -> \"Control\":\n        \"\"\"Show or hide the cursor.\"\"\"\n        return cls(ControlType.SHOW_CURSOR if show else ControlType.HIDE_CURSOR)\n\n    @classmethod\n    def alt_screen(cls, enable: bool) -> \"Control\":\n        \"\"\"Enable or disable alt screen.\"\"\"\n        if enable:\n            return cls(ControlType.ENABLE_ALT_SCREEN, ControlType.HOME)\n        else:\n            return cls(ControlType.DISABLE_ALT_SCREEN)\n\n    @classmethod\n    def title(cls, title: str) -> \"Control\":\n        \"\"\"Set the terminal window title\n\n        Args:\n            title (str): The new terminal window title\n        \"\"\"\n        return cls((ControlType.SET_WINDOW_TITLE, title))\n\n    def __str__(self) -> str:\n        return self.segment.text\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        if self.segment.text:\n            yield self.segment\n\n\ndef strip_control_codes(\n    text: str, _translate_table: Dict[int, None] = _CONTROL_STRIP_TRANSLATE\n) -> str:\n    \"\"\"Remove control codes from text.\n\n    Args:\n        text (str): A string possibly contain control codes.\n\n    Returns:\n        str: String with control codes removed.\n    \"\"\"\n    return text.translate(_translate_table)\n\n\ndef escape_control_codes(\n    text: str,\n    _translate_table: Dict[int, str] = CONTROL_ESCAPE,\n) -> str:\n    \"\"\"Replace control codes with their \"escaped\" equivalent in the given text.\n    (e.g. \"\\b\" becomes \"\\\\b\")\n\n    Args:\n        text (str): A string possibly containing control codes.\n\n    Returns:\n        str: String with control codes replaced with their escaped version.\n    \"\"\"\n    return text.translate(_translate_table)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.console import Console\n\n    console = Console()\n    console.print(\"Look at the title of your terminal window ^\")\n    # console.print(Control((ControlType.SET_WINDOW_TITLE, \"Hello, world!\")))\n    for i in range(10):\n        console.set_window_title(\"\ud83d\ude80 Loading\" + \".\" * i)\n        time.sleep(0.5)\n", "rich/measure.py": "from operator import itemgetter\nfrom typing import TYPE_CHECKING, Callable, NamedTuple, Optional, Sequence\n\nfrom . import errors\nfrom .protocol import is_renderable, rich_cast\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderableType\n\n\nclass Measurement(NamedTuple):\n    \"\"\"Stores the minimum and maximum widths (in characters) required to render an object.\"\"\"\n\n    minimum: int\n    \"\"\"Minimum number of cells required to render.\"\"\"\n    maximum: int\n    \"\"\"Maximum number of cells required to render.\"\"\"\n\n    @property\n    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum\n\n    def normalize(self) -> \"Measurement\":\n        \"\"\"Get measurement that ensures that minimum <= maximum and minimum >= 0\n\n        Returns:\n            Measurement: A normalized measurement.\n        \"\"\"\n        minimum, maximum = self\n        minimum = min(max(0, minimum), maximum)\n        return Measurement(max(0, minimum), max(0, max(minimum, maximum)))\n\n    def with_maximum(self, width: int) -> \"Measurement\":\n        \"\"\"Get a RenderableWith where the widths are <= width.\n\n        Args:\n            width (int): Maximum desired width.\n\n        Returns:\n            Measurement: New Measurement object.\n        \"\"\"\n        minimum, maximum = self\n        return Measurement(min(minimum, width), min(maximum, width))\n\n    def with_minimum(self, width: int) -> \"Measurement\":\n        \"\"\"Get a RenderableWith where the widths are >= width.\n\n        Args:\n            width (int): Minimum desired width.\n\n        Returns:\n            Measurement: New Measurement object.\n        \"\"\"\n        minimum, maximum = self\n        width = max(0, width)\n        return Measurement(max(minimum, width), max(maximum, width))\n\n    def clamp(\n        self, min_width: Optional[int] = None, max_width: Optional[int] = None\n    ) -> \"Measurement\":\n        \"\"\"Clamp a measurement within the specified range.\n\n        Args:\n            min_width (int): Minimum desired width, or ``None`` for no minimum. Defaults to None.\n            max_width (int): Maximum desired width, or ``None`` for no maximum. Defaults to None.\n\n        Returns:\n            Measurement: New Measurement object.\n        \"\"\"\n        measurement = self\n        if min_width is not None:\n            measurement = measurement.with_minimum(min_width)\n        if max_width is not None:\n            measurement = measurement.with_maximum(max_width)\n        return measurement\n\n    @classmethod\n    def get(\n        cls, console: \"Console\", options: \"ConsoleOptions\", renderable: \"RenderableType\"\n    ) -> \"Measurement\":\n        \"\"\"Get a measurement for a renderable.\n\n        Args:\n            console (~rich.console.Console): Console instance.\n            options (~rich.console.ConsoleOptions): Console options.\n            renderable (RenderableType): An object that may be rendered with Rich.\n\n        Raises:\n            errors.NotRenderableError: If the object is not renderable.\n\n        Returns:\n            Measurement: Measurement object containing range of character widths required to render the object.\n        \"\"\"\n        _max_width = options.max_width\n        if _max_width < 1:\n            return Measurement(0, 0)\n        if isinstance(renderable, str):\n            renderable = console.render_str(\n                renderable, markup=options.markup, highlight=False\n            )\n        renderable = rich_cast(renderable)\n        if is_renderable(renderable):\n            get_console_width: Optional[\n                Callable[[\"Console\", \"ConsoleOptions\"], \"Measurement\"]\n            ] = getattr(renderable, \"__rich_measure__\", None)\n            if get_console_width is not None:\n                render_width = (\n                    get_console_width(console, options)\n                    .normalize()\n                    .with_maximum(_max_width)\n                )\n                if render_width.maximum < 1:\n                    return Measurement(0, 0)\n                return render_width.normalize()\n            else:\n                return Measurement(0, _max_width)\n        else:\n            raise errors.NotRenderableError(\n                f\"Unable to get render width for {renderable!r}; \"\n                \"a str, Segment, or object with __rich_console__ method is required\"\n            )\n\n\ndef measure_renderables(\n    console: \"Console\",\n    options: \"ConsoleOptions\",\n    renderables: Sequence[\"RenderableType\"],\n) -> \"Measurement\":\n    \"\"\"Get a measurement that would fit a number of renderables.\n\n    Args:\n        console (~rich.console.Console): Console instance.\n        options (~rich.console.ConsoleOptions): Console options.\n        renderables (Iterable[RenderableType]): One or more renderable objects.\n\n    Returns:\n        Measurement: Measurement object containing range of character widths required to\n            contain all given renderables.\n    \"\"\"\n    if not renderables:\n        return Measurement(0, 0)\n    get_measurement = Measurement.get\n    measurements = [\n        get_measurement(console, options, renderable) for renderable in renderables\n    ]\n    measured_width = Measurement(\n        max(measurements, key=itemgetter(0)).minimum,\n        max(measurements, key=itemgetter(1)).maximum,\n    )\n    return measured_width\n", "rich/style.py": "import sys\nfrom functools import lru_cache\nfrom marshal import dumps, loads\nfrom random import randint\nfrom typing import Any, Dict, Iterable, List, Optional, Type, Union, cast\n\nfrom . import errors\nfrom .color import Color, ColorParseError, ColorSystem, blend_rgb\nfrom .repr import Result, rich_repr\nfrom .terminal_theme import DEFAULT_TERMINAL_THEME, TerminalTheme\n\n# Style instances and style definitions are often interchangeable\nStyleType = Union[str, \"Style\"]\n\n\nclass _Bit:\n    \"\"\"A descriptor to get/set a style attribute bit.\"\"\"\n\n    __slots__ = [\"bit\"]\n\n    def __init__(self, bit_no: int) -> None:\n        self.bit = 1 << bit_no\n\n    def __get__(self, obj: \"Style\", objtype: Type[\"Style\"]) -> Optional[bool]:\n        if obj._set_attributes & self.bit:\n            return obj._attributes & self.bit != 0\n        return None\n\n\n@rich_repr\nclass Style:\n    \"\"\"A terminal style.\n\n    A terminal style consists of a color (`color`), a background color (`bgcolor`), and a number of attributes, such\n    as bold, italic etc. The attributes have 3 states: they can either be on\n    (``True``), off (``False``), or not set (``None``).\n\n    Args:\n        color (Union[Color, str], optional): Color of terminal text. Defaults to None.\n        bgcolor (Union[Color, str], optional): Color of terminal background. Defaults to None.\n        bold (bool, optional): Enable bold text. Defaults to None.\n        dim (bool, optional): Enable dim text. Defaults to None.\n        italic (bool, optional): Enable italic text. Defaults to None.\n        underline (bool, optional): Enable underlined text. Defaults to None.\n        blink (bool, optional): Enabled blinking text. Defaults to None.\n        blink2 (bool, optional): Enable fast blinking text. Defaults to None.\n        reverse (bool, optional): Enabled reverse text. Defaults to None.\n        conceal (bool, optional): Enable concealed text. Defaults to None.\n        strike (bool, optional): Enable strikethrough text. Defaults to None.\n        underline2 (bool, optional): Enable doubly underlined text. Defaults to None.\n        frame (bool, optional): Enable framed text. Defaults to None.\n        encircle (bool, optional): Enable encircled text. Defaults to None.\n        overline (bool, optional): Enable overlined text. Defaults to None.\n        link (str, link): Link URL. Defaults to None.\n\n    \"\"\"\n\n    _color: Optional[Color]\n    _bgcolor: Optional[Color]\n    _attributes: int\n    _set_attributes: int\n    _hash: Optional[int]\n    _null: bool\n    _meta: Optional[bytes]\n\n    __slots__ = [\n        \"_color\",\n        \"_bgcolor\",\n        \"_attributes\",\n        \"_set_attributes\",\n        \"_link\",\n        \"_link_id\",\n        \"_ansi\",\n        \"_style_definition\",\n        \"_hash\",\n        \"_null\",\n        \"_meta\",\n    ]\n\n    # maps bits on to SGR parameter\n    _style_map = {\n        0: \"1\",\n        1: \"2\",\n        2: \"3\",\n        3: \"4\",\n        4: \"5\",\n        5: \"6\",\n        6: \"7\",\n        7: \"8\",\n        8: \"9\",\n        9: \"21\",\n        10: \"51\",\n        11: \"52\",\n        12: \"53\",\n    }\n\n    STYLE_ATTRIBUTES = {\n        \"dim\": \"dim\",\n        \"d\": \"dim\",\n        \"bold\": \"bold\",\n        \"b\": \"bold\",\n        \"italic\": \"italic\",\n        \"i\": \"italic\",\n        \"underline\": \"underline\",\n        \"u\": \"underline\",\n        \"blink\": \"blink\",\n        \"blink2\": \"blink2\",\n        \"reverse\": \"reverse\",\n        \"r\": \"reverse\",\n        \"conceal\": \"conceal\",\n        \"c\": \"conceal\",\n        \"strike\": \"strike\",\n        \"s\": \"strike\",\n        \"underline2\": \"underline2\",\n        \"uu\": \"underline2\",\n        \"frame\": \"frame\",\n        \"encircle\": \"encircle\",\n        \"overline\": \"overline\",\n        \"o\": \"overline\",\n    }\n\n    def __init__(\n        self,\n        *,\n        color: Optional[Union[Color, str]] = None,\n        bgcolor: Optional[Union[Color, str]] = None,\n        bold: Optional[bool] = None,\n        dim: Optional[bool] = None,\n        italic: Optional[bool] = None,\n        underline: Optional[bool] = None,\n        blink: Optional[bool] = None,\n        blink2: Optional[bool] = None,\n        reverse: Optional[bool] = None,\n        conceal: Optional[bool] = None,\n        strike: Optional[bool] = None,\n        underline2: Optional[bool] = None,\n        frame: Optional[bool] = None,\n        encircle: Optional[bool] = None,\n        overline: Optional[bool] = None,\n        link: Optional[str] = None,\n        meta: Optional[Dict[str, Any]] = None,\n    ):\n        self._ansi: Optional[str] = None\n        self._style_definition: Optional[str] = None\n\n        def _make_color(color: Union[Color, str]) -> Color:\n            return color if isinstance(color, Color) else Color.parse(color)\n\n        self._color = None if color is None else _make_color(color)\n        self._bgcolor = None if bgcolor is None else _make_color(bgcolor)\n        self._set_attributes = sum(\n            (\n                bold is not None,\n                dim is not None and 2,\n                italic is not None and 4,\n                underline is not None and 8,\n                blink is not None and 16,\n                blink2 is not None and 32,\n                reverse is not None and 64,\n                conceal is not None and 128,\n                strike is not None and 256,\n                underline2 is not None and 512,\n                frame is not None and 1024,\n                encircle is not None and 2048,\n                overline is not None and 4096,\n            )\n        )\n        self._attributes = (\n            sum(\n                (\n                    bold and 1 or 0,\n                    dim and 2 or 0,\n                    italic and 4 or 0,\n                    underline and 8 or 0,\n                    blink and 16 or 0,\n                    blink2 and 32 or 0,\n                    reverse and 64 or 0,\n                    conceal and 128 or 0,\n                    strike and 256 or 0,\n                    underline2 and 512 or 0,\n                    frame and 1024 or 0,\n                    encircle and 2048 or 0,\n                    overline and 4096 or 0,\n                )\n            )\n            if self._set_attributes\n            else 0\n        )\n\n        self._link = link\n        self._meta = None if meta is None else dumps(meta)\n        self._link_id = (\n            f\"{randint(0, 999999)}{hash(self._meta)}\" if (link or meta) else \"\"\n        )\n        self._hash: Optional[int] = None\n        self._null = not (self._set_attributes or color or bgcolor or link or meta)\n\n    @classmethod\n    def null(cls) -> \"Style\":\n        \"\"\"Create an 'null' style, equivalent to Style(), but more performant.\"\"\"\n        return NULL_STYLE\n\n    @classmethod\n    def from_color(\n        cls, color: Optional[Color] = None, bgcolor: Optional[Color] = None\n    ) -> \"Style\":\n        \"\"\"Create a new style with colors and no attributes.\n\n        Returns:\n            color (Optional[Color]): A (foreground) color, or None for no color. Defaults to None.\n            bgcolor (Optional[Color]): A (background) color, or None for no color. Defaults to None.\n        \"\"\"\n        style: Style = cls.__new__(Style)\n        style._ansi = None\n        style._style_definition = None\n        style._color = color\n        style._bgcolor = bgcolor\n        style._set_attributes = 0\n        style._attributes = 0\n        style._link = None\n        style._link_id = \"\"\n        style._meta = None\n        style._null = not (color or bgcolor)\n        style._hash = None\n        return style\n\n    @classmethod\n    def from_meta(cls, meta: Optional[Dict[str, Any]]) -> \"Style\":\n        \"\"\"Create a new style with meta data.\n\n        Returns:\n            meta (Optional[Dict[str, Any]]): A dictionary of meta data. Defaults to None.\n        \"\"\"\n        style: Style = cls.__new__(Style)\n        style._ansi = None\n        style._style_definition = None\n        style._color = None\n        style._bgcolor = None\n        style._set_attributes = 0\n        style._attributes = 0\n        style._link = None\n        style._meta = dumps(meta)\n        style._link_id = f\"{randint(0, 999999)}{hash(style._meta)}\"\n        style._hash = None\n        style._null = not (meta)\n        return style\n\n    @classmethod\n    def on(cls, meta: Optional[Dict[str, Any]] = None, **handlers: Any) -> \"Style\":\n        \"\"\"Create a blank style with meta information.\n\n        Example:\n            style = Style.on(click=self.on_click)\n\n        Args:\n            meta (Optional[Dict[str, Any]], optional): An optional dict of meta information.\n            **handlers (Any): Keyword arguments are translated in to handlers.\n\n        Returns:\n            Style: A Style with meta information attached.\n        \"\"\"\n        meta = {} if meta is None else meta\n        meta.update({f\"@{key}\": value for key, value in handlers.items()})\n        return cls.from_meta(meta)\n\n    bold = _Bit(0)\n    dim = _Bit(1)\n    italic = _Bit(2)\n    underline = _Bit(3)\n    blink = _Bit(4)\n    blink2 = _Bit(5)\n    reverse = _Bit(6)\n    conceal = _Bit(7)\n    strike = _Bit(8)\n    underline2 = _Bit(9)\n    frame = _Bit(10)\n    encircle = _Bit(11)\n    overline = _Bit(12)\n\n    @property\n    def link_id(self) -> str:\n        \"\"\"Get a link id, used in ansi code for links.\"\"\"\n        return self._link_id\n\n    def __str__(self) -> str:\n        \"\"\"Re-generate style definition from attributes.\"\"\"\n        if self._style_definition is None:\n            attributes: List[str] = []\n            append = attributes.append\n            bits = self._set_attributes\n            if bits & 0b0000000001111:\n                if bits & 1:\n                    append(\"bold\" if self.bold else \"not bold\")\n                if bits & (1 << 1):\n                    append(\"dim\" if self.dim else \"not dim\")\n                if bits & (1 << 2):\n                    append(\"italic\" if self.italic else \"not italic\")\n                if bits & (1 << 3):\n                    append(\"underline\" if self.underline else \"not underline\")\n            if bits & 0b0000111110000:\n                if bits & (1 << 4):\n                    append(\"blink\" if self.blink else \"not blink\")\n                if bits & (1 << 5):\n                    append(\"blink2\" if self.blink2 else \"not blink2\")\n                if bits & (1 << 6):\n                    append(\"reverse\" if self.reverse else \"not reverse\")\n                if bits & (1 << 7):\n                    append(\"conceal\" if self.conceal else \"not conceal\")\n                if bits & (1 << 8):\n                    append(\"strike\" if self.strike else \"not strike\")\n            if bits & 0b1111000000000:\n                if bits & (1 << 9):\n                    append(\"underline2\" if self.underline2 else \"not underline2\")\n                if bits & (1 << 10):\n                    append(\"frame\" if self.frame else \"not frame\")\n                if bits & (1 << 11):\n                    append(\"encircle\" if self.encircle else \"not encircle\")\n                if bits & (1 << 12):\n                    append(\"overline\" if self.overline else \"not overline\")\n            if self._color is not None:\n                append(self._color.name)\n            if self._bgcolor is not None:\n                append(\"on\")\n                append(self._bgcolor.name)\n            if self._link:\n                append(\"link\")\n                append(self._link)\n            self._style_definition = \" \".join(attributes) or \"none\"\n        return self._style_definition\n\n    def __bool__(self) -> bool:\n        \"\"\"A Style is false if it has no attributes, colors, or links.\"\"\"\n        return not self._null\n\n    def _make_ansi_codes(self, color_system: ColorSystem) -> str:\n        \"\"\"Generate ANSI codes for this style.\n\n        Args:\n            color_system (ColorSystem): Color system.\n\n        Returns:\n            str: String containing codes.\n        \"\"\"\n\n        if self._ansi is None:\n            sgr: List[str] = []\n            append = sgr.append\n            _style_map = self._style_map\n            attributes = self._attributes & self._set_attributes\n            if attributes:\n                if attributes & 1:\n                    append(_style_map[0])\n                if attributes & 2:\n                    append(_style_map[1])\n                if attributes & 4:\n                    append(_style_map[2])\n                if attributes & 8:\n                    append(_style_map[3])\n                if attributes & 0b0000111110000:\n                    for bit in range(4, 9):\n                        if attributes & (1 << bit):\n                            append(_style_map[bit])\n                if attributes & 0b1111000000000:\n                    for bit in range(9, 13):\n                        if attributes & (1 << bit):\n                            append(_style_map[bit])\n            if self._color is not None:\n                sgr.extend(self._color.downgrade(color_system).get_ansi_codes())\n            if self._bgcolor is not None:\n                sgr.extend(\n                    self._bgcolor.downgrade(color_system).get_ansi_codes(\n                        foreground=False\n                    )\n                )\n            self._ansi = \";\".join(sgr)\n        return self._ansi\n\n    @classmethod\n    @lru_cache(maxsize=1024)\n    def normalize(cls, style: str) -> str:\n        \"\"\"Normalize a style definition so that styles with the same effect have the same string\n        representation.\n\n        Args:\n            style (str): A style definition.\n\n        Returns:\n            str: Normal form of style definition.\n        \"\"\"\n        try:\n            return str(cls.parse(style))\n        except errors.StyleSyntaxError:\n            return style.strip().lower()\n\n    @classmethod\n    def pick_first(cls, *values: Optional[StyleType]) -> StyleType:\n        \"\"\"Pick first non-None style.\"\"\"\n        for value in values:\n            if value is not None:\n                return value\n        raise ValueError(\"expected at least one non-None style\")\n\n    def __rich_repr__(self) -> Result:\n        yield \"color\", self.color, None\n        yield \"bgcolor\", self.bgcolor, None\n        yield \"bold\", self.bold, None,\n        yield \"dim\", self.dim, None,\n        yield \"italic\", self.italic, None\n        yield \"underline\", self.underline, None,\n        yield \"blink\", self.blink, None\n        yield \"blink2\", self.blink2, None\n        yield \"reverse\", self.reverse, None\n        yield \"conceal\", self.conceal, None\n        yield \"strike\", self.strike, None\n        yield \"underline2\", self.underline2, None\n        yield \"frame\", self.frame, None\n        yield \"encircle\", self.encircle, None\n        yield \"link\", self.link, None\n        if self._meta:\n            yield \"meta\", self.meta\n\n    def __eq__(self, other: Any) -> bool:\n        if not isinstance(other, Style):\n            return NotImplemented\n        return self.__hash__() == other.__hash__()\n\n    def __ne__(self, other: Any) -> bool:\n        if not isinstance(other, Style):\n            return NotImplemented\n        return self.__hash__() != other.__hash__()\n\n    def __hash__(self) -> int:\n        if self._hash is not None:\n            return self._hash\n        self._hash = hash(\n            (\n                self._color,\n                self._bgcolor,\n                self._attributes,\n                self._set_attributes,\n                self._link,\n                self._meta,\n            )\n        )\n        return self._hash\n\n    @property\n    def color(self) -> Optional[Color]:\n        \"\"\"The foreground color or None if it is not set.\"\"\"\n        return self._color\n\n    @property\n    def bgcolor(self) -> Optional[Color]:\n        \"\"\"The background color or None if it is not set.\"\"\"\n        return self._bgcolor\n\n    @property\n    def link(self) -> Optional[str]:\n        \"\"\"Link text, if set.\"\"\"\n        return self._link\n\n    @property\n    def transparent_background(self) -> bool:\n        \"\"\"Check if the style specified a transparent background.\"\"\"\n        return self.bgcolor is None or self.bgcolor.is_default\n\n    @property\n    def background_style(self) -> \"Style\":\n        \"\"\"A Style with background only.\"\"\"\n        return Style(bgcolor=self.bgcolor)\n\n    @property\n    def meta(self) -> Dict[str, Any]:\n        \"\"\"Get meta information (can not be changed after construction).\"\"\"\n        return {} if self._meta is None else cast(Dict[str, Any], loads(self._meta))\n\n    @property\n    def without_color(self) -> \"Style\":\n        \"\"\"Get a copy of the style with color removed.\"\"\"\n        if self._null:\n            return NULL_STYLE\n        style: Style = self.__new__(Style)\n        style._ansi = None\n        style._style_definition = None\n        style._color = None\n        style._bgcolor = None\n        style._attributes = self._attributes\n        style._set_attributes = self._set_attributes\n        style._link = self._link\n        style._link_id = f\"{randint(0, 999999)}\" if self._link else \"\"\n        style._null = False\n        style._meta = None\n        style._hash = None\n        return style\n\n    @classmethod\n    @lru_cache(maxsize=4096)\n    def parse(cls, style_definition: str) -> \"Style\":\n        \"\"\"Parse a style definition.\n\n        Args:\n            style_definition (str): A string containing a style.\n\n        Raises:\n            errors.StyleSyntaxError: If the style definition syntax is invalid.\n\n        Returns:\n            `Style`: A Style instance.\n        \"\"\"\n        if style_definition.strip() == \"none\" or not style_definition:\n            return cls.null()\n\n        STYLE_ATTRIBUTES = cls.STYLE_ATTRIBUTES\n        color: Optional[str] = None\n        bgcolor: Optional[str] = None\n        attributes: Dict[str, Optional[Any]] = {}\n        link: Optional[str] = None\n\n        words = iter(style_definition.split())\n        for original_word in words:\n            word = original_word.lower()\n            if word == \"on\":\n                word = next(words, \"\")\n                if not word:\n                    raise errors.StyleSyntaxError(\"color expected after 'on'\")\n                try:\n                    Color.parse(word) is None\n                except ColorParseError as error:\n                    raise errors.StyleSyntaxError(\n                        f\"unable to parse {word!r} as background color; {error}\"\n                    ) from None\n                bgcolor = word\n\n            elif word == \"not\":\n                word = next(words, \"\")\n                attribute = STYLE_ATTRIBUTES.get(word)\n                if attribute is None:\n                    raise errors.StyleSyntaxError(\n                        f\"expected style attribute after 'not', found {word!r}\"\n                    )\n                attributes[attribute] = False\n\n            elif word == \"link\":\n                word = next(words, \"\")\n                if not word:\n                    raise errors.StyleSyntaxError(\"URL expected after 'link'\")\n                link = word\n\n            elif word in STYLE_ATTRIBUTES:\n                attributes[STYLE_ATTRIBUTES[word]] = True\n\n            else:\n                try:\n                    Color.parse(word)\n                except ColorParseError as error:\n                    raise errors.StyleSyntaxError(\n                        f\"unable to parse {word!r} as color; {error}\"\n                    ) from None\n                color = word\n        style = Style(color=color, bgcolor=bgcolor, link=link, **attributes)\n        return style\n\n    @lru_cache(maxsize=1024)\n    def get_html_style(self, theme: Optional[TerminalTheme] = None) -> str:\n        \"\"\"Get a CSS style rule.\"\"\"\n        theme = theme or DEFAULT_TERMINAL_THEME\n        css: List[str] = []\n        append = css.append\n\n        color = self.color\n        bgcolor = self.bgcolor\n        if self.reverse:\n            color, bgcolor = bgcolor, color\n        if self.dim:\n            foreground_color = (\n                theme.foreground_color if color is None else color.get_truecolor(theme)\n            )\n            color = Color.from_triplet(\n                blend_rgb(foreground_color, theme.background_color, 0.5)\n            )\n        if color is not None:\n            theme_color = color.get_truecolor(theme)\n            append(f\"color: {theme_color.hex}\")\n            append(f\"text-decoration-color: {theme_color.hex}\")\n        if bgcolor is not None:\n            theme_color = bgcolor.get_truecolor(theme, foreground=False)\n            append(f\"background-color: {theme_color.hex}\")\n        if self.bold:\n            append(\"font-weight: bold\")\n        if self.italic:\n            append(\"font-style: italic\")\n        if self.underline:\n            append(\"text-decoration: underline\")\n        if self.strike:\n            append(\"text-decoration: line-through\")\n        if self.overline:\n            append(\"text-decoration: overline\")\n        return \"; \".join(css)\n\n    @classmethod\n    def combine(cls, styles: Iterable[\"Style\"]) -> \"Style\":\n        \"\"\"Combine styles and get result.\n\n        Args:\n            styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        \"\"\"\n        iter_styles = iter(styles)\n        return sum(iter_styles, next(iter_styles))\n\n    @classmethod\n    def chain(cls, *styles: \"Style\") -> \"Style\":\n        \"\"\"Combine styles from positional argument in to a single style.\n\n        Args:\n            *styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        \"\"\"\n        iter_styles = iter(styles)\n        return sum(iter_styles, next(iter_styles))\n\n    def copy(self) -> \"Style\":\n        \"\"\"Get a copy of this style.\n\n        Returns:\n            Style: A new Style instance with identical attributes.\n        \"\"\"\n        if self._null:\n            return NULL_STYLE\n        style: Style = self.__new__(Style)\n        style._ansi = self._ansi\n        style._style_definition = self._style_definition\n        style._color = self._color\n        style._bgcolor = self._bgcolor\n        style._attributes = self._attributes\n        style._set_attributes = self._set_attributes\n        style._link = self._link\n        style._link_id = f\"{randint(0, 999999)}\" if self._link else \"\"\n        style._hash = self._hash\n        style._null = False\n        style._meta = self._meta\n        return style\n\n    @lru_cache(maxsize=128)\n    def clear_meta_and_links(self) -> \"Style\":\n        \"\"\"Get a copy of this style with link and meta information removed.\n\n        Returns:\n            Style: New style object.\n        \"\"\"\n        if self._null:\n            return NULL_STYLE\n        style: Style = self.__new__(Style)\n        style._ansi = self._ansi\n        style._style_definition = self._style_definition\n        style._color = self._color\n        style._bgcolor = self._bgcolor\n        style._attributes = self._attributes\n        style._set_attributes = self._set_attributes\n        style._link = None\n        style._link_id = \"\"\n        style._hash = self._hash\n        style._null = False\n        style._meta = None\n        return style\n\n    def update_link(self, link: Optional[str] = None) -> \"Style\":\n        \"\"\"Get a copy with a different value for link.\n\n        Args:\n            link (str, optional): New value for link. Defaults to None.\n\n        Returns:\n            Style: A new Style instance.\n        \"\"\"\n        style: Style = self.__new__(Style)\n        style._ansi = self._ansi\n        style._style_definition = self._style_definition\n        style._color = self._color\n        style._bgcolor = self._bgcolor\n        style._attributes = self._attributes\n        style._set_attributes = self._set_attributes\n        style._link = link\n        style._link_id = f\"{randint(0, 999999)}\" if link else \"\"\n        style._hash = None\n        style._null = False\n        style._meta = self._meta\n        return style\n\n    def render(\n        self,\n        text: str = \"\",\n        *,\n        color_system: Optional[ColorSystem] = ColorSystem.TRUECOLOR,\n        legacy_windows: bool = False,\n    ) -> str:\n        \"\"\"Render the ANSI codes for the style.\n\n        Args:\n            text (str, optional): A string to style. Defaults to \"\".\n            color_system (Optional[ColorSystem], optional): Color system to render to. Defaults to ColorSystem.TRUECOLOR.\n\n        Returns:\n            str: A string containing ANSI style codes.\n        \"\"\"\n        if not text or color_system is None:\n            return text\n        attrs = self._ansi or self._make_ansi_codes(color_system)\n        rendered = f\"\\x1b[{attrs}m{text}\\x1b[0m\" if attrs else text\n        if self._link and not legacy_windows:\n            rendered = (\n                f\"\\x1b]8;id={self._link_id};{self._link}\\x1b\\\\{rendered}\\x1b]8;;\\x1b\\\\\"\n            )\n        return rendered\n\n    def test(self, text: Optional[str] = None) -> None:\n        \"\"\"Write text with style directly to terminal.\n\n        This method is for testing purposes only.\n\n        Args:\n            text (Optional[str], optional): Text to style or None for style name.\n\n        \"\"\"\n        text = text or str(self)\n        sys.stdout.write(f\"{self.render(text)}\\n\")\n\n    @lru_cache(maxsize=1024)\n    def _add(self, style: Optional[\"Style\"]) -> \"Style\":\n        if style is None or style._null:\n            return self\n        if self._null:\n            return style\n        new_style: Style = self.__new__(Style)\n        new_style._ansi = None\n        new_style._style_definition = None\n        new_style._color = style._color or self._color\n        new_style._bgcolor = style._bgcolor or self._bgcolor\n        new_style._attributes = (self._attributes & ~style._set_attributes) | (\n            style._attributes & style._set_attributes\n        )\n        new_style._set_attributes = self._set_attributes | style._set_attributes\n        new_style._link = style._link or self._link\n        new_style._link_id = style._link_id or self._link_id\n        new_style._null = style._null\n        if self._meta and style._meta:\n            new_style._meta = dumps({**self.meta, **style.meta})\n        else:\n            new_style._meta = self._meta or style._meta\n        new_style._hash = None\n        return new_style\n\n    def __add__(self, style: Optional[\"Style\"]) -> \"Style\":\n        combined_style = self._add(style)\n        return combined_style.copy() if combined_style.link else combined_style\n\n\nNULL_STYLE = Style()\n\n\nclass StyleStack:\n    \"\"\"A stack of styles.\"\"\"\n\n    __slots__ = [\"_stack\"]\n\n    def __init__(self, default_style: \"Style\") -> None:\n        self._stack: List[Style] = [default_style]\n\n    def __repr__(self) -> str:\n        return f\"<stylestack {self._stack!r}>\"\n\n    @property\n    def current(self) -> Style:\n        \"\"\"Get the Style at the top of the stack.\"\"\"\n        return self._stack[-1]\n\n    def push(self, style: Style) -> None:\n        \"\"\"Push a new style on to the stack.\n\n        Args:\n            style (Style): New style to combine with current style.\n        \"\"\"\n        self._stack.append(self._stack[-1] + style)\n\n    def pop(self) -> Style:\n        \"\"\"Pop last style and discard.\n\n        Returns:\n            Style: New current style (also available as stack.current)\n        \"\"\"\n        self._stack.pop()\n        return self._stack[-1]\n", "rich/__main__.py": "import colorsys\nimport io\nfrom time import process_time\n\nfrom rich import box\nfrom rich.color import Color\nfrom rich.console import Console, ConsoleOptions, Group, RenderableType, RenderResult\nfrom rich.markdown import Markdown\nfrom rich.measure import Measurement\nfrom rich.pretty import Pretty\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom rich.syntax import Syntax\nfrom rich.table import Table\nfrom rich.text import Text\n\n\nclass ColorBox:\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        for y in range(0, 5):\n            for x in range(options.max_width):\n                h = x / options.max_width\n                l = 0.1 + ((y / 5) * 0.7)\n                r1, g1, b1 = colorsys.hls_to_rgb(h, l, 1.0)\n                r2, g2, b2 = colorsys.hls_to_rgb(h, l + 0.7 / 10, 1.0)\n                bgcolor = Color.from_rgb(r1 * 255, g1 * 255, b1 * 255)\n                color = Color.from_rgb(r2 * 255, g2 * 255, b2 * 255)\n                yield Segment(\"\u2584\", Style(color=color, bgcolor=bgcolor))\n            yield Segment.line()\n\n    def __rich_measure__(\n        self, console: \"Console\", options: ConsoleOptions\n    ) -> Measurement:\n        return Measurement(1, options.max_width)\n\n\ndef make_test_card() -> Table:\n    \"\"\"Get a renderable that demonstrates a number of features.\"\"\"\n    table = Table.grid(padding=1, pad_edge=True)\n    table.title = \"Rich features\"\n    table.add_column(\"Feature\", no_wrap=True, justify=\"center\", style=\"bold red\")\n    table.add_column(\"Demonstration\")\n\n    color_table = Table(\n        box=None,\n        expand=False,\n        show_header=False,\n        show_edge=False,\n        pad_edge=False,\n    )\n    color_table.add_row(\n        (\n            \"\u2713 [bold green]4-bit color[/]\\n\"\n            \"\u2713 [bold blue]8-bit color[/]\\n\"\n            \"\u2713 [bold magenta]Truecolor (16.7 million)[/]\\n\"\n            \"\u2713 [bold yellow]Dumb terminals[/]\\n\"\n            \"\u2713 [bold cyan]Automatic color conversion\"\n        ),\n        ColorBox(),\n    )\n\n    table.add_row(\"Colors\", color_table)\n\n    table.add_row(\n        \"Styles\",\n        \"All ansi styles: [bold]bold[/], [dim]dim[/], [italic]italic[/italic], [underline]underline[/], [strike]strikethrough[/], [reverse]reverse[/], and even [blink]blink[/].\",\n    )\n\n    lorem = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque in metus sed sapien ultricies pretium a at justo. Maecenas luctus velit et auctor maximus.\"\n    lorem_table = Table.grid(padding=1, collapse_padding=True)\n    lorem_table.pad_edge = False\n    lorem_table.add_row(\n        Text(lorem, justify=\"left\", style=\"green\"),\n        Text(lorem, justify=\"center\", style=\"yellow\"),\n        Text(lorem, justify=\"right\", style=\"blue\"),\n        Text(lorem, justify=\"full\", style=\"red\"),\n    )\n    table.add_row(\n        \"Text\",\n        Group(\n            Text.from_markup(\n                \"\"\"Word wrap text. Justify [green]left[/], [yellow]center[/], [blue]right[/] or [red]full[/].\\n\"\"\"\n            ),\n            lorem_table,\n        ),\n    )\n\n    def comparison(renderable1: RenderableType, renderable2: RenderableType) -> Table:\n        table = Table(show_header=False, pad_edge=False, box=None, expand=True)\n        table.add_column(\"1\", ratio=1)\n        table.add_column(\"2\", ratio=1)\n        table.add_row(renderable1, renderable2)\n        return table\n\n    table.add_row(\n        \"Asian\\nlanguage\\nsupport\",\n        \":flag_for_china:  \u8be5\u5e93\u652f\u6301\u4e2d\u6587\uff0c\u65e5\u6587\u548c\u97e9\u6587\u6587\u672c\uff01\\n:flag_for_japan:  \u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4e2d\u56fd\u8a9e\u3001\u65e5\u672c\u8a9e\u3001\u97d3\u56fd\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\\n:flag_for_south_korea:  \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc911\uad6d\uc5b4, \uc77c\ubcf8\uc5b4 \ubc0f \ud55c\uad6d\uc5b4 \ud14d\uc2a4\ud2b8\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4\",\n    )\n\n    markup_example = (\n        \"[bold magenta]Rich[/] supports a simple [i]bbcode[/i]-like [b]markup[/b] for [yellow]color[/], [underline]style[/], and emoji! \"\n        \":+1: :apple: :ant: :bear: :baguette_bread: :bus: \"\n    )\n    table.add_row(\"Markup\", markup_example)\n\n    example_table = Table(\n        show_edge=False,\n        show_header=True,\n        expand=False,\n        row_styles=[\"none\", \"dim\"],\n        box=box.SIMPLE,\n    )\n    example_table.add_column(\"[green]Date\", style=\"green\", no_wrap=True)\n    example_table.add_column(\"[blue]Title\", style=\"blue\")\n    example_table.add_column(\n        \"[cyan]Production Budget\",\n        style=\"cyan\",\n        justify=\"right\",\n        no_wrap=True,\n    )\n    example_table.add_column(\n        \"[magenta]Box Office\",\n        style=\"magenta\",\n        justify=\"right\",\n        no_wrap=True,\n    )\n    example_table.add_row(\n        \"Dec 20, 2019\",\n        \"Star Wars: The Rise of Skywalker\",\n        \"$275,000,000\",\n        \"$375,126,118\",\n    )\n    example_table.add_row(\n        \"May 25, 2018\",\n        \"[b]Solo[/]: A Star Wars Story\",\n        \"$275,000,000\",\n        \"$393,151,347\",\n    )\n    example_table.add_row(\n        \"Dec 15, 2017\",\n        \"Star Wars Ep. VIII: The Last Jedi\",\n        \"$262,000,000\",\n        \"[bold]$1,332,539,889[/bold]\",\n    )\n    example_table.add_row(\n        \"May 19, 1999\",\n        \"Star Wars Ep. [b]I[/b]: [i]The phantom Menace\",\n        \"$115,000,000\",\n        \"$1,027,044,677\",\n    )\n\n    table.add_row(\"Tables\", example_table)\n\n    code = '''\\\ndef iter_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    for value in iter_values:\n        yield False, previous_value\n        previous_value = value\n    yield True, previous_value'''\n\n    pretty_data = {\n        \"foo\": [\n            3.1427,\n            (\n                \"Paul Atreides\",\n                \"Vladimir Harkonnen\",\n                \"Thufir Hawat\",\n            ),\n        ],\n        \"atomic\": (False, True, None),\n    }\n    table.add_row(\n        \"Syntax\\nhighlighting\\n&\\npretty\\nprinting\",\n        comparison(\n            Syntax(code, \"python3\", line_numbers=True, indent_guides=True),\n            Pretty(pretty_data, indent_guides=True),\n        ),\n    )\n\n    markdown_example = \"\"\"\\\n# Markdown\n\nSupports much of the *markdown* __syntax__!\n\n- Headers\n- Basic formatting: **bold**, *italic*, `code`\n- Block quotes\n- Lists, and more...\n    \"\"\"\n    table.add_row(\n        \"Markdown\", comparison(\"[cyan]\" + markdown_example, Markdown(markdown_example))\n    )\n\n    table.add_row(\n        \"+more!\",\n        \"\"\"Progress bars, columns, styled logging handler, tracebacks, etc...\"\"\",\n    )\n    return table\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n    )\n    test_card = make_test_card()\n\n    # Print once to warm cache\n    start = process_time()\n    console.print(test_card)\n    pre_cache_taken = round((process_time() - start) * 1000.0, 1)\n\n    console.file = io.StringIO()\n\n    start = process_time()\n    console.print(test_card)\n    taken = round((process_time() - start) * 1000.0, 1)\n\n    c = Console(record=True)\n    c.print(test_card)\n\n    print(f\"rendered in {pre_cache_taken}ms (cold cache)\")\n    print(f\"rendered in {taken}ms (warm cache)\")\n\n    from rich.panel import Panel\n\n    console = Console()\n\n    sponsor_message = Table.grid(padding=1)\n    sponsor_message.add_column(style=\"green\", justify=\"right\")\n    sponsor_message.add_column(no_wrap=True)\n\n    sponsor_message.add_row(\n        \"Textualize\",\n        \"[u blue link=https://github.com/textualize]https://github.com/textualize\",\n    )\n    sponsor_message.add_row(\n        \"Twitter\",\n        \"[u blue link=https://twitter.com/willmcgugan]https://twitter.com/willmcgugan\",\n    )\n\n    intro_message = Text.from_markup(\n        \"\"\"\\\nWe hope you enjoy using Rich!\n\nRich is maintained with [red]:heart:[/] by [link=https://www.textualize.io]Textualize.io[/]\n\n- Will McGugan\"\"\"\n    )\n\n    message = Table.grid(padding=2)\n    message.add_column()\n    message.add_column(no_wrap=True)\n    message.add_row(intro_message, sponsor_message)\n\n    console.print(\n        Panel.fit(\n            message,\n            box=box.ROUNDED,\n            padding=(1, 2),\n            title=\"[b red]Thanks for trying out Rich!\",\n            border_style=\"bright_blue\",\n        ),\n        justify=\"center\",\n    )\n", "rich/prompt.py": "from typing import Any, Generic, List, Optional, TextIO, TypeVar, Union, overload\n\nfrom . import get_console\nfrom .console import Console\nfrom .text import Text, TextType\n\nPromptType = TypeVar(\"PromptType\")\nDefaultType = TypeVar(\"DefaultType\")\n\n\nclass PromptError(Exception):\n    \"\"\"Exception base class for prompt related errors.\"\"\"\n\n\nclass InvalidResponse(PromptError):\n    \"\"\"Exception to indicate a response was invalid. Raise this within process_response() to indicate an error\n    and provide an error message.\n\n    Args:\n        message (Union[str, Text]): Error message.\n    \"\"\"\n\n    def __init__(self, message: TextType) -> None:\n        self.message = message\n\n    def __rich__(self) -> TextType:\n        return self.message\n\n\nclass PromptBase(Generic[PromptType]):\n    \"\"\"Ask the user for input until a valid response is received. This is the base class, see one of\n    the concrete classes for examples.\n\n    Args:\n        prompt (TextType, optional): Prompt text. Defaults to \"\".\n        console (Console, optional): A Console instance or None to use global console. Defaults to None.\n        password (bool, optional): Enable password input. Defaults to False.\n        choices (List[str], optional): A list of valid choices. Defaults to None.\n        show_default (bool, optional): Show default in prompt. Defaults to True.\n        show_choices (bool, optional): Show choices in prompt. Defaults to True.\n    \"\"\"\n\n    response_type: type = str\n\n    validate_error_message = \"[prompt.invalid]Please enter a valid value\"\n    illegal_choice_message = (\n        \"[prompt.invalid.choice]Please select one of the available options\"\n    )\n    prompt_suffix = \": \"\n\n    choices: Optional[List[str]] = None\n\n    def __init__(\n        self,\n        prompt: TextType = \"\",\n        *,\n        console: Optional[Console] = None,\n        password: bool = False,\n        choices: Optional[List[str]] = None,\n        show_default: bool = True,\n        show_choices: bool = True,\n    ) -> None:\n        self.console = console or get_console()\n        self.prompt = (\n            Text.from_markup(prompt, style=\"prompt\")\n            if isinstance(prompt, str)\n            else prompt\n        )\n        self.password = password\n        if choices is not None:\n            self.choices = choices\n        self.show_default = show_default\n        self.show_choices = show_choices\n\n    @classmethod\n    @overload\n    def ask(\n        cls,\n        prompt: TextType = \"\",\n        *,\n        console: Optional[Console] = None,\n        password: bool = False,\n        choices: Optional[List[str]] = None,\n        show_default: bool = True,\n        show_choices: bool = True,\n        default: DefaultType,\n        stream: Optional[TextIO] = None,\n    ) -> Union[DefaultType, PromptType]:\n        ...\n\n    @classmethod\n    @overload\n    def ask(\n        cls,\n        prompt: TextType = \"\",\n        *,\n        console: Optional[Console] = None,\n        password: bool = False,\n        choices: Optional[List[str]] = None,\n        show_default: bool = True,\n        show_choices: bool = True,\n        stream: Optional[TextIO] = None,\n    ) -> PromptType:\n        ...\n\n    @classmethod\n    def ask(\n        cls,\n        prompt: TextType = \"\",\n        *,\n        console: Optional[Console] = None,\n        password: bool = False,\n        choices: Optional[List[str]] = None,\n        show_default: bool = True,\n        show_choices: bool = True,\n        default: Any = ...,\n        stream: Optional[TextIO] = None,\n    ) -> Any:\n        \"\"\"Shortcut to construct and run a prompt loop and return the result.\n\n        Example:\n            >>> filename = Prompt.ask(\"Enter a filename\")\n\n        Args:\n            prompt (TextType, optional): Prompt text. Defaults to \"\".\n            console (Console, optional): A Console instance or None to use global console. Defaults to None.\n            password (bool, optional): Enable password input. Defaults to False.\n            choices (List[str], optional): A list of valid choices. Defaults to None.\n            show_default (bool, optional): Show default in prompt. Defaults to True.\n            show_choices (bool, optional): Show choices in prompt. Defaults to True.\n            stream (TextIO, optional): Optional text file open for reading to get input. Defaults to None.\n        \"\"\"\n        _prompt = cls(\n            prompt,\n            console=console,\n            password=password,\n            choices=choices,\n            show_default=show_default,\n            show_choices=show_choices,\n        )\n        return _prompt(default=default, stream=stream)\n\n    def render_default(self, default: DefaultType) -> Text:\n        \"\"\"Turn the supplied default in to a Text instance.\n\n        Args:\n            default (DefaultType): Default value.\n\n        Returns:\n            Text: Text containing rendering of default value.\n        \"\"\"\n        return Text(f\"({default})\", \"prompt.default\")\n\n    def make_prompt(self, default: DefaultType) -> Text:\n        \"\"\"Make prompt text.\n\n        Args:\n            default (DefaultType): Default value.\n\n        Returns:\n            Text: Text to display in prompt.\n        \"\"\"\n        prompt = self.prompt.copy()\n        prompt.end = \"\"\n\n        if self.show_choices and self.choices:\n            _choices = \"/\".join(self.choices)\n            choices = f\"[{_choices}]\"\n            prompt.append(\" \")\n            prompt.append(choices, \"prompt.choices\")\n\n        if (\n            default != ...\n            and self.show_default\n            and isinstance(default, (str, self.response_type))\n        ):\n            prompt.append(\" \")\n            _default = self.render_default(default)\n            prompt.append(_default)\n\n        prompt.append(self.prompt_suffix)\n\n        return prompt\n\n    @classmethod\n    def get_input(\n        cls,\n        console: Console,\n        prompt: TextType,\n        password: bool,\n        stream: Optional[TextIO] = None,\n    ) -> str:\n        \"\"\"Get input from user.\n\n        Args:\n            console (Console): Console instance.\n            prompt (TextType): Prompt text.\n            password (bool): Enable password entry.\n\n        Returns:\n            str: String from user.\n        \"\"\"\n        return console.input(prompt, password=password, stream=stream)\n\n    def check_choice(self, value: str) -> bool:\n        \"\"\"Check value is in the list of valid choices.\n\n        Args:\n            value (str): Value entered by user.\n\n        Returns:\n            bool: True if choice was valid, otherwise False.\n        \"\"\"\n        assert self.choices is not None\n        return value.strip() in self.choices\n\n    def process_response(self, value: str) -> PromptType:\n        \"\"\"Process response from user, convert to prompt type.\n\n        Args:\n            value (str): String typed by user.\n\n        Raises:\n            InvalidResponse: If ``value`` is invalid.\n\n        Returns:\n            PromptType: The value to be returned from ask method.\n        \"\"\"\n        value = value.strip()\n        try:\n            return_value: PromptType = self.response_type(value)\n        except ValueError:\n            raise InvalidResponse(self.validate_error_message)\n\n        if self.choices is not None and not self.check_choice(value):\n            raise InvalidResponse(self.illegal_choice_message)\n\n        return return_value\n\n    def on_validate_error(self, value: str, error: InvalidResponse) -> None:\n        \"\"\"Called to handle validation error.\n\n        Args:\n            value (str): String entered by user.\n            error (InvalidResponse): Exception instance the initiated the error.\n        \"\"\"\n        self.console.print(error)\n\n    def pre_prompt(self) -> None:\n        \"\"\"Hook to display something before the prompt.\"\"\"\n\n    @overload\n    def __call__(self, *, stream: Optional[TextIO] = None) -> PromptType:\n        ...\n\n    @overload\n    def __call__(\n        self, *, default: DefaultType, stream: Optional[TextIO] = None\n    ) -> Union[PromptType, DefaultType]:\n        ...\n\n    def __call__(self, *, default: Any = ..., stream: Optional[TextIO] = None) -> Any:\n        \"\"\"Run the prompt loop.\n\n        Args:\n            default (Any, optional): Optional default value.\n\n        Returns:\n            PromptType: Processed value.\n        \"\"\"\n        while True:\n            self.pre_prompt()\n            prompt = self.make_prompt(default)\n            value = self.get_input(self.console, prompt, self.password, stream=stream)\n            if value == \"\" and default != ...:\n                return default\n            try:\n                return_value = self.process_response(value)\n            except InvalidResponse as error:\n                self.on_validate_error(value, error)\n                continue\n            else:\n                return return_value\n\n\nclass Prompt(PromptBase[str]):\n    \"\"\"A prompt that returns a str.\n\n    Example:\n        >>> name = Prompt.ask(\"Enter your name\")\n\n\n    \"\"\"\n\n    response_type = str\n\n\nclass IntPrompt(PromptBase[int]):\n    \"\"\"A prompt that returns an integer.\n\n    Example:\n        >>> burrito_count = IntPrompt.ask(\"How many burritos do you want to order\")\n\n    \"\"\"\n\n    response_type = int\n    validate_error_message = \"[prompt.invalid]Please enter a valid integer number\"\n\n\nclass FloatPrompt(PromptBase[float]):\n    \"\"\"A prompt that returns a float.\n\n    Example:\n        >>> temperature = FloatPrompt.ask(\"Enter desired temperature\")\n\n    \"\"\"\n\n    response_type = float\n    validate_error_message = \"[prompt.invalid]Please enter a number\"\n\n\nclass Confirm(PromptBase[bool]):\n    \"\"\"A yes / no confirmation prompt.\n\n    Example:\n        >>> if Confirm.ask(\"Continue\"):\n                run_job()\n\n    \"\"\"\n\n    response_type = bool\n    validate_error_message = \"[prompt.invalid]Please enter Y or N\"\n    choices: List[str] = [\"y\", \"n\"]\n\n    def render_default(self, default: DefaultType) -> Text:\n        \"\"\"Render the default as (y) or (n) rather than True/False.\"\"\"\n        yes, no = self.choices\n        return Text(f\"({yes})\" if default else f\"({no})\", style=\"prompt.default\")\n\n    def process_response(self, value: str) -> bool:\n        \"\"\"Convert choices to a bool.\"\"\"\n        value = value.strip().lower()\n        if value not in self.choices:\n            raise InvalidResponse(self.validate_error_message)\n        return value == self.choices[0]\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich import print\n\n    if Confirm.ask(\"Run [i]prompt[/i] tests?\", default=True):\n        while True:\n            result = IntPrompt.ask(\n                \":rocket: Enter a number between [b]1[/b] and [b]10[/b]\", default=5\n            )\n            if result >= 1 and result <= 10:\n                break\n            print(\":pile_of_poo: [prompt.invalid]Number must be between 1 and 10\")\n        print(f\"number={result}\")\n\n        while True:\n            password = Prompt.ask(\n                \"Please enter a password [cyan](must be at least 5 characters)\",\n                password=True,\n            )\n            if len(password) >= 5:\n                break\n            print(\"[prompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", choices=[\"apple\", \"orange\", \"pear\"])\n        print(f\"fruit={fruit!r}\")\n\n    else:\n        print(\"[b]OK :loudly_crying_face:\")\n", "rich/layout.py": "from abc import ABC, abstractmethod\nfrom itertools import islice\nfrom operator import itemgetter\nfrom threading import RLock\nfrom typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\nfrom ._ratio import ratio_resolve\nfrom .align import Align\nfrom .console import Console, ConsoleOptions, RenderableType, RenderResult\nfrom .highlighter import ReprHighlighter\nfrom .panel import Panel\nfrom .pretty import Pretty\nfrom .region import Region\nfrom .repr import Result, rich_repr\nfrom .segment import Segment\nfrom .style import StyleType\n\nif TYPE_CHECKING:\n    from rich.tree import Tree\n\n\nclass LayoutRender(NamedTuple):\n    \"\"\"An individual layout render.\"\"\"\n\n    region: Region\n    render: List[List[Segment]]\n\n\nRegionMap = Dict[\"Layout\", Region]\nRenderMap = Dict[\"Layout\", LayoutRender]\n\n\nclass LayoutError(Exception):\n    \"\"\"Layout related error.\"\"\"\n\n\nclass NoSplitter(LayoutError):\n    \"\"\"Requested splitter does not exist.\"\"\"\n\n\nclass _Placeholder:\n    \"\"\"An internal renderable used as a Layout placeholder.\"\"\"\n\n    highlighter = ReprHighlighter()\n\n    def __init__(self, layout: \"Layout\", style: StyleType = \"\") -> None:\n        self.layout = layout\n        self.style = style\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        width = options.max_width\n        height = options.height or options.size.height\n        layout = self.layout\n        title = (\n            f\"{layout.name!r} ({width} x {height})\"\n            if layout.name\n            else f\"({width} x {height})\"\n        )\n        yield Panel(\n            Align.center(Pretty(layout), vertical=\"middle\"),\n            style=self.style,\n            title=self.highlighter(title),\n            border_style=\"blue\",\n            height=height,\n        )\n\n\nclass Splitter(ABC):\n    \"\"\"Base class for a splitter.\"\"\"\n\n    name: str = \"\"\n\n    @abstractmethod\n    def get_tree_icon(self) -> str:\n        \"\"\"Get the icon (emoji) used in layout.tree\"\"\"\n\n    @abstractmethod\n    def divide(\n        self, children: Sequence[\"Layout\"], region: Region\n    ) -> Iterable[Tuple[\"Layout\", Region]]:\n        \"\"\"Divide a region amongst several child layouts.\n\n        Args:\n            children (Sequence(Layout)): A number of child layouts.\n            region (Region): A rectangular region to divide.\n        \"\"\"\n\n\nclass RowSplitter(Splitter):\n    \"\"\"Split a layout region in to rows.\"\"\"\n\n    name = \"row\"\n\n    def get_tree_icon(self) -> str:\n        return \"[layout.tree.row]\u2b0c\"\n\n    def divide(\n        self, children: Sequence[\"Layout\"], region: Region\n    ) -> Iterable[Tuple[\"Layout\", Region]]:\n        x, y, width, height = region\n        render_widths = ratio_resolve(width, children)\n        offset = 0\n        _Region = Region\n        for child, child_width in zip(children, render_widths):\n            yield child, _Region(x + offset, y, child_width, height)\n            offset += child_width\n\n\nclass ColumnSplitter(Splitter):\n    \"\"\"Split a layout region in to columns.\"\"\"\n\n    name = \"column\"\n\n    def get_tree_icon(self) -> str:\n        return \"[layout.tree.column]\u2b0d\"\n\n    def divide(\n        self, children: Sequence[\"Layout\"], region: Region\n    ) -> Iterable[Tuple[\"Layout\", Region]]:\n        x, y, width, height = region\n        render_heights = ratio_resolve(height, children)\n        offset = 0\n        _Region = Region\n        for child, child_height in zip(children, render_heights):\n            yield child, _Region(x, y + offset, width, child_height)\n            offset += child_height\n\n\n@rich_repr\nclass Layout:\n    \"\"\"A renderable to divide a fixed height in to rows or columns.\n\n    Args:\n        renderable (RenderableType, optional): Renderable content, or None for placeholder. Defaults to None.\n        name (str, optional): Optional identifier for Layout. Defaults to None.\n        size (int, optional): Optional fixed size of layout. Defaults to None.\n        minimum_size (int, optional): Minimum size of layout. Defaults to 1.\n        ratio (int, optional): Optional ratio for flexible layout. Defaults to 1.\n        visible (bool, optional): Visibility of layout. Defaults to True.\n    \"\"\"\n\n    splitters = {\"row\": RowSplitter, \"column\": ColumnSplitter}\n\n    def __init__(\n        self,\n        renderable: Optional[RenderableType] = None,\n        *,\n        name: Optional[str] = None,\n        size: Optional[int] = None,\n        minimum_size: int = 1,\n        ratio: int = 1,\n        visible: bool = True,\n    ) -> None:\n        self._renderable = renderable or _Placeholder(self)\n        self.size = size\n        self.minimum_size = minimum_size\n        self.ratio = ratio\n        self.name = name\n        self.visible = visible\n        self.splitter: Splitter = self.splitters[\"column\"]()\n        self._children: List[Layout] = []\n        self._render_map: RenderMap = {}\n        self._lock = RLock()\n\n    def __rich_repr__(self) -> Result:\n        yield \"name\", self.name, None\n        yield \"size\", self.size, None\n        yield \"minimum_size\", self.minimum_size, 1\n        yield \"ratio\", self.ratio, 1\n\n    @property\n    def renderable(self) -> RenderableType:\n        \"\"\"Layout renderable.\"\"\"\n        return self if self._children else self._renderable\n\n    @property\n    def children(self) -> List[\"Layout\"]:\n        \"\"\"Gets (visible) layout children.\"\"\"\n        return [child for child in self._children if child.visible]\n\n    @property\n    def map(self) -> RenderMap:\n        \"\"\"Get a map of the last render.\"\"\"\n        return self._render_map\n\n    def get(self, name: str) -> Optional[\"Layout\"]:\n        \"\"\"Get a named layout, or None if it doesn't exist.\n\n        Args:\n            name (str): Name of layout.\n\n        Returns:\n            Optional[Layout]: Layout instance or None if no layout was found.\n        \"\"\"\n        if self.name == name:\n            return self\n        else:\n            for child in self._children:\n                named_layout = child.get(name)\n                if named_layout is not None:\n                    return named_layout\n        return None\n\n    def __getitem__(self, name: str) -> \"Layout\":\n        layout = self.get(name)\n        if layout is None:\n            raise KeyError(f\"No layout with name {name!r}\")\n        return layout\n\n    @property\n    def tree(self) -> \"Tree\":\n        \"\"\"Get a tree renderable to show layout structure.\"\"\"\n        from rich.styled import Styled\n        from rich.table import Table\n        from rich.tree import Tree\n\n        def summary(layout: \"Layout\") -> Table:\n            icon = layout.splitter.get_tree_icon()\n\n            table = Table.grid(padding=(0, 1, 0, 0))\n\n            text: RenderableType = (\n                Pretty(layout) if layout.visible else Styled(Pretty(layout), \"dim\")\n            )\n            table.add_row(icon, text)\n            _summary = table\n            return _summary\n\n        layout = self\n        tree = Tree(\n            summary(layout),\n            guide_style=f\"layout.tree.{layout.splitter.name}\",\n            highlight=True,\n        )\n\n        def recurse(tree: \"Tree\", layout: \"Layout\") -> None:\n            for child in layout._children:\n                recurse(\n                    tree.add(\n                        summary(child),\n                        guide_style=f\"layout.tree.{child.splitter.name}\",\n                    ),\n                    child,\n                )\n\n        recurse(tree, self)\n        return tree\n\n    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.\n\n        Args:\n            *layouts (Layout): Positional arguments should be (sub) Layout instances.\n            splitter (Union[Splitter, str]): Splitter instance or name of splitter.\n        \"\"\"\n        _layouts = [\n            layout if isinstance(layout, Layout) else Layout(layout)\n            for layout in layouts\n        ]\n        try:\n            self.splitter = (\n                splitter\n                if isinstance(splitter, Splitter)\n                else self.splitters[splitter]()\n            )\n        except KeyError:\n            raise NoSplitter(f\"No splitter called {splitter!r}\")\n        self._children[:] = _layouts\n\n    def add_split(self, *layouts: Union[\"Layout\", RenderableType]) -> None:\n        \"\"\"Add a new layout(s) to existing split.\n\n        Args:\n            *layouts (Union[Layout, RenderableType]): Positional arguments should be renderables or (sub) Layout instances.\n\n        \"\"\"\n        _layouts = (\n            layout if isinstance(layout, Layout) else Layout(layout)\n            for layout in layouts\n        )\n        self._children.extend(_layouts)\n\n    def split_row(self, *layouts: Union[\"Layout\", RenderableType]) -> None:\n        \"\"\"Split the layout in to a row (layouts side by side).\n\n        Args:\n            *layouts (Layout): Positional arguments should be (sub) Layout instances.\n        \"\"\"\n        self.split(*layouts, splitter=\"row\")\n\n    def split_column(self, *layouts: Union[\"Layout\", RenderableType]) -> None:\n        \"\"\"Split the layout in to a column (layouts stacked on top of each other).\n\n        Args:\n            *layouts (Layout): Positional arguments should be (sub) Layout instances.\n        \"\"\"\n        self.split(*layouts, splitter=\"column\")\n\n    def unsplit(self) -> None:\n        \"\"\"Reset splits to initial state.\"\"\"\n        del self._children[:]\n\n    def update(self, renderable: RenderableType) -> None:\n        \"\"\"Update renderable.\n\n        Args:\n            renderable (RenderableType): New renderable object.\n        \"\"\"\n        with self._lock:\n            self._renderable = renderable\n\n    def refresh_screen(self, console: \"Console\", layout_name: str) -> None:\n        \"\"\"Refresh a sub-layout.\n\n        Args:\n            console (Console): Console instance where Layout is to be rendered.\n            layout_name (str): Name of layout.\n        \"\"\"\n        with self._lock:\n            layout = self[layout_name]\n            region, _lines = self._render_map[layout]\n            (x, y, width, height) = region\n            lines = console.render_lines(\n                layout, console.options.update_dimensions(width, height)\n            )\n            self._render_map[layout] = LayoutRender(region, lines)\n            console.update_screen_lines(lines, x, y)\n\n    def _make_region_map(self, width: int, height: int) -> RegionMap:\n        \"\"\"Create a dict that maps layout on to Region.\"\"\"\n        stack: List[Tuple[Layout, Region]] = [(self, Region(0, 0, width, height))]\n        push = stack.append\n        pop = stack.pop\n        layout_regions: List[Tuple[Layout, Region]] = []\n        append_layout_region = layout_regions.append\n        while stack:\n            append_layout_region(pop())\n            layout, region = layout_regions[-1]\n            children = layout.children\n            if children:\n                for child_and_region in layout.splitter.divide(children, region):\n                    push(child_and_region)\n\n        region_map = {\n            layout: region\n            for layout, region in sorted(layout_regions, key=itemgetter(1))\n        }\n        return region_map\n\n    def render(self, console: Console, options: ConsoleOptions) -> RenderMap:\n        \"\"\"Render the sub_layouts.\n\n        Args:\n            console (Console): Console instance.\n            options (ConsoleOptions): Console options.\n\n        Returns:\n            RenderMap: A dict that maps Layout on to a tuple of Region, lines\n        \"\"\"\n        render_width = options.max_width\n        render_height = options.height or console.height\n        region_map = self._make_region_map(render_width, render_height)\n        layout_regions = [\n            (layout, region)\n            for layout, region in region_map.items()\n            if not layout.children\n        ]\n        render_map: Dict[\"Layout\", \"LayoutRender\"] = {}\n        render_lines = console.render_lines\n        update_dimensions = options.update_dimensions\n\n        for layout, region in layout_regions:\n            lines = render_lines(\n                layout.renderable, update_dimensions(region.width, region.height)\n            )\n            render_map[layout] = LayoutRender(region, lines)\n        return render_map\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        with self._lock:\n            width = options.max_width or console.width\n            height = options.height or console.height\n            render_map = self.render(console, options.update_dimensions(width, height))\n            self._render_map = render_map\n            layout_lines: List[List[Segment]] = [[] for _ in range(height)]\n            _islice = islice\n            for region, lines in render_map.values():\n                _x, y, _layout_width, layout_height = region\n                for row, line in zip(\n                    _islice(layout_lines, y, y + layout_height), lines\n                ):\n                    row.extend(line)\n\n            new_line = Segment.line()\n            for layout_row in layout_lines:\n                yield from layout_row\n                yield new_line\n\n\nif __name__ == \"__main__\":\n    from rich.console import Console\n\n    console = Console()\n    layout = Layout()\n\n    layout.split_column(\n        Layout(name=\"header\", size=3),\n        Layout(ratio=1, name=\"main\"),\n        Layout(size=10, name=\"footer\"),\n    )\n\n    layout[\"main\"].split_row(Layout(name=\"side\"), Layout(name=\"body\", ratio=2))\n\n    layout[\"body\"].split_row(Layout(name=\"content\", ratio=2), Layout(name=\"s2\"))\n\n    layout[\"s2\"].split_column(\n        Layout(name=\"top\"), Layout(name=\"middle\"), Layout(name=\"bottom\")\n    )\n\n    layout[\"side\"].split_column(Layout(layout.tree, name=\"left1\"), Layout(name=\"left2\"))\n\n    layout[\"content\"].update(\"foo\")\n\n    console.print(layout)\n", "rich/filesize.py": "# coding: utf-8\n\"\"\"Functions for reporting filesizes. Borrowed from https://github.com/PyFilesystem/pyfilesystem2\n\nThe functions declared in this module should cover the different\nuse cases needed to generate a string representation of a file size\nusing several different units. Since there are many standards regarding\nfile size units, three different functions have been implemented.\n\nSee Also:\n    * `Wikipedia: Binary prefix <https://en.wikipedia.org/wiki/Binary_prefix>`_\n\n\"\"\"\n\n__all__ = [\"decimal\"]\n\nfrom typing import Iterable, List, Optional, Tuple\n\n\ndef _to_str(\n    size: int,\n    suffixes: Iterable[str],\n    base: int,\n    *,\n    precision: Optional[int] = 1,\n    separator: Optional[str] = \" \",\n) -> str:\n    if size == 1:\n        return \"1 byte\"\n    elif size < base:\n        return \"{:,} bytes\".format(size)\n\n    for i, suffix in enumerate(suffixes, 2):  # noqa: B007\n        unit = base**i\n        if size < unit:\n            break\n    return \"{:,.{precision}f}{separator}{}\".format(\n        (base * size / unit),\n        suffix,\n        precision=precision,\n        separator=separator,\n    )\n\n\ndef pick_unit_and_suffix(size: int, suffixes: List[str], base: int) -> Tuple[int, str]:\n    \"\"\"Pick a suffix and base for the given size.\"\"\"\n    for i, suffix in enumerate(suffixes):\n        unit = base**i\n        if size < unit * base:\n            break\n    return unit, suffix\n\n\ndef decimal(\n    size: int,\n    *,\n    precision: Optional[int] = 1,\n    separator: Optional[str] = \" \",\n) -> str:\n    \"\"\"Convert a filesize in to a string (powers of 1000, SI prefixes).\n\n    In this convention, ``1000 B = 1 kB``.\n\n    This is typically the format used to advertise the storage\n    capacity of USB flash drives and the like (*256 MB* meaning\n    actually a storage capacity of more than *256 000 000 B*),\n    or used by **Mac OS X** since v10.6 to report file sizes.\n\n    Arguments:\n        int (size): A file size.\n        int (precision): The number of decimal places to include (default = 1).\n        str (separator): The string to separate the value from the units (default = \" \").\n\n    Returns:\n        `str`: A string containing a abbreviated file size and units.\n\n    Example:\n        >>> filesize.decimal(30000)\n        '30.0 kB'\n        >>> filesize.decimal(30000, precision=2, separator=\"\")\n        '30.00kB'\n\n    \"\"\"\n    return _to_str(\n        size,\n        (\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"),\n        1000,\n        precision=precision,\n        separator=separator,\n    )\n", "rich/default_styles.py": "from typing import Dict\n\nfrom .style import Style\n\nDEFAULT_STYLES: Dict[str, Style] = {\n    \"none\": Style.null(),\n    \"reset\": Style(\n        color=\"default\",\n        bgcolor=\"default\",\n        dim=False,\n        bold=False,\n        italic=False,\n        underline=False,\n        blink=False,\n        blink2=False,\n        reverse=False,\n        conceal=False,\n        strike=False,\n    ),\n    \"dim\": Style(dim=True),\n    \"bright\": Style(dim=False),\n    \"bold\": Style(bold=True),\n    \"strong\": Style(bold=True),\n    \"code\": Style(reverse=True, bold=True),\n    \"italic\": Style(italic=True),\n    \"emphasize\": Style(italic=True),\n    \"underline\": Style(underline=True),\n    \"blink\": Style(blink=True),\n    \"blink2\": Style(blink2=True),\n    \"reverse\": Style(reverse=True),\n    \"strike\": Style(strike=True),\n    \"black\": Style(color=\"black\"),\n    \"red\": Style(color=\"red\"),\n    \"green\": Style(color=\"green\"),\n    \"yellow\": Style(color=\"yellow\"),\n    \"magenta\": Style(color=\"magenta\"),\n    \"cyan\": Style(color=\"cyan\"),\n    \"white\": Style(color=\"white\"),\n    \"inspect.attr\": Style(color=\"yellow\", italic=True),\n    \"inspect.attr.dunder\": Style(color=\"yellow\", italic=True, dim=True),\n    \"inspect.callable\": Style(bold=True, color=\"red\"),\n    \"inspect.async_def\": Style(italic=True, color=\"bright_cyan\"),\n    \"inspect.def\": Style(italic=True, color=\"bright_cyan\"),\n    \"inspect.class\": Style(italic=True, color=\"bright_cyan\"),\n    \"inspect.error\": Style(bold=True, color=\"red\"),\n    \"inspect.equals\": Style(),\n    \"inspect.help\": Style(color=\"cyan\"),\n    \"inspect.doc\": Style(dim=True),\n    \"inspect.value.border\": Style(color=\"green\"),\n    \"live.ellipsis\": Style(bold=True, color=\"red\"),\n    \"layout.tree.row\": Style(dim=False, color=\"red\"),\n    \"layout.tree.column\": Style(dim=False, color=\"blue\"),\n    \"logging.keyword\": Style(bold=True, color=\"yellow\"),\n    \"logging.level.notset\": Style(dim=True),\n    \"logging.level.debug\": Style(color=\"green\"),\n    \"logging.level.info\": Style(color=\"blue\"),\n    \"logging.level.warning\": Style(color=\"red\"),\n    \"logging.level.error\": Style(color=\"red\", bold=True),\n    \"logging.level.critical\": Style(color=\"red\", bold=True, reverse=True),\n    \"log.level\": Style.null(),\n    \"log.time\": Style(color=\"cyan\", dim=True),\n    \"log.message\": Style.null(),\n    \"log.path\": Style(dim=True),\n    \"repr.ellipsis\": Style(color=\"yellow\"),\n    \"repr.indent\": Style(color=\"green\", dim=True),\n    \"repr.error\": Style(color=\"red\", bold=True),\n    \"repr.str\": Style(color=\"green\", italic=False, bold=False),\n    \"repr.brace\": Style(bold=True),\n    \"repr.comma\": Style(bold=True),\n    \"repr.ipv4\": Style(bold=True, color=\"bright_green\"),\n    \"repr.ipv6\": Style(bold=True, color=\"bright_green\"),\n    \"repr.eui48\": Style(bold=True, color=\"bright_green\"),\n    \"repr.eui64\": Style(bold=True, color=\"bright_green\"),\n    \"repr.tag_start\": Style(bold=True),\n    \"repr.tag_name\": Style(color=\"bright_magenta\", bold=True),\n    \"repr.tag_contents\": Style(color=\"default\"),\n    \"repr.tag_end\": Style(bold=True),\n    \"repr.attrib_name\": Style(color=\"yellow\", italic=False),\n    \"repr.attrib_equal\": Style(bold=True),\n    \"repr.attrib_value\": Style(color=\"magenta\", italic=False),\n    \"repr.number\": Style(color=\"cyan\", bold=True, italic=False),\n    \"repr.number_complex\": Style(color=\"cyan\", bold=True, italic=False),  # same\n    \"repr.bool_true\": Style(color=\"bright_green\", italic=True),\n    \"repr.bool_false\": Style(color=\"bright_red\", italic=True),\n    \"repr.none\": Style(color=\"magenta\", italic=True),\n    \"repr.url\": Style(underline=True, color=\"bright_blue\", italic=False, bold=False),\n    \"repr.uuid\": Style(color=\"bright_yellow\", bold=False),\n    \"repr.call\": Style(color=\"magenta\", bold=True),\n    \"repr.path\": Style(color=\"magenta\"),\n    \"repr.filename\": Style(color=\"bright_magenta\"),\n    \"rule.line\": Style(color=\"bright_green\"),\n    \"rule.text\": Style.null(),\n    \"json.brace\": Style(bold=True),\n    \"json.bool_true\": Style(color=\"bright_green\", italic=True),\n    \"json.bool_false\": Style(color=\"bright_red\", italic=True),\n    \"json.null\": Style(color=\"magenta\", italic=True),\n    \"json.number\": Style(color=\"cyan\", bold=True, italic=False),\n    \"json.str\": Style(color=\"green\", italic=False, bold=False),\n    \"json.key\": Style(color=\"blue\", bold=True),\n    \"prompt\": Style.null(),\n    \"prompt.choices\": Style(color=\"magenta\", bold=True),\n    \"prompt.default\": Style(color=\"cyan\", bold=True),\n    \"prompt.invalid\": Style(color=\"red\"),\n    \"prompt.invalid.choice\": Style(color=\"red\"),\n    \"pretty\": Style.null(),\n    \"scope.border\": Style(color=\"blue\"),\n    \"scope.key\": Style(color=\"yellow\", italic=True),\n    \"scope.key.special\": Style(color=\"yellow\", italic=True, dim=True),\n    \"scope.equals\": Style(color=\"red\"),\n    \"table.header\": Style(bold=True),\n    \"table.footer\": Style(bold=True),\n    \"table.cell\": Style.null(),\n    \"table.title\": Style(italic=True),\n    \"table.caption\": Style(italic=True, dim=True),\n    \"traceback.error\": Style(color=\"red\", italic=True),\n    \"traceback.border.syntax_error\": Style(color=\"bright_red\"),\n    \"traceback.border\": Style(color=\"red\"),\n    \"traceback.text\": Style.null(),\n    \"traceback.title\": Style(color=\"red\", bold=True),\n    \"traceback.exc_type\": Style(color=\"bright_red\", bold=True),\n    \"traceback.exc_value\": Style.null(),\n    \"traceback.offset\": Style(color=\"bright_red\", bold=True),\n    \"bar.back\": Style(color=\"grey23\"),\n    \"bar.complete\": Style(color=\"rgb(249,38,114)\"),\n    \"bar.finished\": Style(color=\"rgb(114,156,31)\"),\n    \"bar.pulse\": Style(color=\"rgb(249,38,114)\"),\n    \"progress.description\": Style.null(),\n    \"progress.filesize\": Style(color=\"green\"),\n    \"progress.filesize.total\": Style(color=\"green\"),\n    \"progress.download\": Style(color=\"green\"),\n    \"progress.elapsed\": Style(color=\"yellow\"),\n    \"progress.percentage\": Style(color=\"magenta\"),\n    \"progress.remaining\": Style(color=\"cyan\"),\n    \"progress.data.speed\": Style(color=\"red\"),\n    \"progress.spinner\": Style(color=\"green\"),\n    \"status.spinner\": Style(color=\"green\"),\n    \"tree\": Style(),\n    \"tree.line\": Style(),\n    \"markdown.paragraph\": Style(),\n    \"markdown.text\": Style(),\n    \"markdown.em\": Style(italic=True),\n    \"markdown.emph\": Style(italic=True),  # For commonmark backwards compatibility\n    \"markdown.strong\": Style(bold=True),\n    \"markdown.code\": Style(bold=True, color=\"cyan\", bgcolor=\"black\"),\n    \"markdown.code_block\": Style(color=\"cyan\", bgcolor=\"black\"),\n    \"markdown.block_quote\": Style(color=\"magenta\"),\n    \"markdown.list\": Style(color=\"cyan\"),\n    \"markdown.item\": Style(),\n    \"markdown.item.bullet\": Style(color=\"yellow\", bold=True),\n    \"markdown.item.number\": Style(color=\"yellow\", bold=True),\n    \"markdown.hr\": Style(color=\"yellow\"),\n    \"markdown.h1.border\": Style(),\n    \"markdown.h1\": Style(bold=True),\n    \"markdown.h2\": Style(bold=True, underline=True),\n    \"markdown.h3\": Style(bold=True),\n    \"markdown.h4\": Style(bold=True, dim=True),\n    \"markdown.h5\": Style(underline=True),\n    \"markdown.h6\": Style(italic=True),\n    \"markdown.h7\": Style(italic=True, dim=True),\n    \"markdown.link\": Style(color=\"bright_blue\"),\n    \"markdown.link_url\": Style(color=\"blue\", underline=True),\n    \"markdown.s\": Style(strike=True),\n    \"iso8601.date\": Style(color=\"blue\"),\n    \"iso8601.time\": Style(color=\"magenta\"),\n    \"iso8601.timezone\": Style(color=\"yellow\"),\n}\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import argparse\n    import io\n\n    from rich.console import Console\n    from rich.table import Table\n    from rich.text import Text\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--html\", action=\"store_true\", help=\"Export as HTML table\")\n    args = parser.parse_args()\n    html: bool = args.html\n    console = Console(record=True, width=70, file=io.StringIO()) if html else Console()\n\n    table = Table(\"Name\", \"Styling\")\n\n    for style_name, style in DEFAULT_STYLES.items():\n        table.add_row(Text(style_name, style=style), str(style))\n\n    console.print(table)\n    if html:\n        print(console.export_html(inline_styles=True))\n", "rich/_emoji_codes.py": "EMOJI = {\n    \"1st_place_medal\": \"\ud83e\udd47\",\n    \"2nd_place_medal\": \"\ud83e\udd48\",\n    \"3rd_place_medal\": \"\ud83e\udd49\",\n    \"ab_button_(blood_type)\": \"\ud83c\udd8e\",\n    \"atm_sign\": \"\ud83c\udfe7\",\n    \"a_button_(blood_type)\": \"\ud83c\udd70\",\n    \"afghanistan\": \"\ud83c\udde6\ud83c\uddeb\",\n    \"albania\": \"\ud83c\udde6\ud83c\uddf1\",\n    \"algeria\": \"\ud83c\udde9\ud83c\uddff\",\n    \"american_samoa\": \"\ud83c\udde6\ud83c\uddf8\",\n    \"andorra\": \"\ud83c\udde6\ud83c\udde9\",\n    \"angola\": \"\ud83c\udde6\ud83c\uddf4\",\n    \"anguilla\": \"\ud83c\udde6\ud83c\uddee\",\n    \"antarctica\": \"\ud83c\udde6\ud83c\uddf6\",\n    \"antigua_&_barbuda\": \"\ud83c\udde6\ud83c\uddec\",\n    \"aquarius\": \"\u2652\",\n    \"argentina\": \"\ud83c\udde6\ud83c\uddf7\",\n    \"aries\": \"\u2648\",\n    \"armenia\": \"\ud83c\udde6\ud83c\uddf2\",\n    \"aruba\": \"\ud83c\udde6\ud83c\uddfc\",\n    \"ascension_island\": \"\ud83c\udde6\ud83c\udde8\",\n    \"australia\": \"\ud83c\udde6\ud83c\uddfa\",\n    \"austria\": \"\ud83c\udde6\ud83c\uddf9\",\n    \"azerbaijan\": \"\ud83c\udde6\ud83c\uddff\",\n    \"back_arrow\": \"\ud83d\udd19\",\n    \"b_button_(blood_type)\": \"\ud83c\udd71\",\n    \"bahamas\": \"\ud83c\udde7\ud83c\uddf8\",\n    \"bahrain\": \"\ud83c\udde7\ud83c\udded\",\n    \"bangladesh\": \"\ud83c\udde7\ud83c\udde9\",\n    \"barbados\": \"\ud83c\udde7\ud83c\udde7\",\n    \"belarus\": \"\ud83c\udde7\ud83c\uddfe\",\n    \"belgium\": \"\ud83c\udde7\ud83c\uddea\",\n    \"belize\": \"\ud83c\udde7\ud83c\uddff\",\n    \"benin\": \"\ud83c\udde7\ud83c\uddef\",\n    \"bermuda\": \"\ud83c\udde7\ud83c\uddf2\",\n    \"bhutan\": \"\ud83c\udde7\ud83c\uddf9\",\n    \"bolivia\": \"\ud83c\udde7\ud83c\uddf4\",\n    \"bosnia_&_herzegovina\": \"\ud83c\udde7\ud83c\udde6\",\n    \"botswana\": \"\ud83c\udde7\ud83c\uddfc\",\n    \"bouvet_island\": \"\ud83c\udde7\ud83c\uddfb\",\n    \"brazil\": \"\ud83c\udde7\ud83c\uddf7\",\n    \"british_indian_ocean_territory\": \"\ud83c\uddee\ud83c\uddf4\",\n    \"british_virgin_islands\": \"\ud83c\uddfb\ud83c\uddec\",\n    \"brunei\": \"\ud83c\udde7\ud83c\uddf3\",\n    \"bulgaria\": \"\ud83c\udde7\ud83c\uddec\",\n    \"burkina_faso\": \"\ud83c\udde7\ud83c\uddeb\",\n    \"burundi\": \"\ud83c\udde7\ud83c\uddee\",\n    \"cl_button\": \"\ud83c\udd91\",\n    \"cool_button\": \"\ud83c\udd92\",\n    \"cambodia\": \"\ud83c\uddf0\ud83c\udded\",\n    \"cameroon\": \"\ud83c\udde8\ud83c\uddf2\",\n    \"canada\": \"\ud83c\udde8\ud83c\udde6\",\n    \"canary_islands\": \"\ud83c\uddee\ud83c\udde8\",\n    \"cancer\": \"\u264b\",\n    \"cape_verde\": \"\ud83c\udde8\ud83c\uddfb\",\n    \"capricorn\": \"\u2651\",\n    \"caribbean_netherlands\": \"\ud83c\udde7\ud83c\uddf6\",\n    \"cayman_islands\": \"\ud83c\uddf0\ud83c\uddfe\",\n    \"central_african_republic\": \"\ud83c\udde8\ud83c\uddeb\",\n    \"ceuta_&_melilla\": \"\ud83c\uddea\ud83c\udde6\",\n    \"chad\": \"\ud83c\uddf9\ud83c\udde9\",\n    \"chile\": \"\ud83c\udde8\ud83c\uddf1\",\n    \"china\": \"\ud83c\udde8\ud83c\uddf3\",\n    \"christmas_island\": \"\ud83c\udde8\ud83c\uddfd\",\n    \"christmas_tree\": \"\ud83c\udf84\",\n    \"clipperton_island\": \"\ud83c\udde8\ud83c\uddf5\",\n    \"cocos_(keeling)_islands\": \"\ud83c\udde8\ud83c\udde8\",\n    \"colombia\": \"\ud83c\udde8\ud83c\uddf4\",\n    \"comoros\": \"\ud83c\uddf0\ud83c\uddf2\",\n    \"congo_-_brazzaville\": \"\ud83c\udde8\ud83c\uddec\",\n    \"congo_-_kinshasa\": \"\ud83c\udde8\ud83c\udde9\",\n    \"cook_islands\": \"\ud83c\udde8\ud83c\uddf0\",\n    \"costa_rica\": \"\ud83c\udde8\ud83c\uddf7\",\n    \"croatia\": \"\ud83c\udded\ud83c\uddf7\",\n    \"cuba\": \"\ud83c\udde8\ud83c\uddfa\",\n    \"cura\u00e7ao\": \"\ud83c\udde8\ud83c\uddfc\",\n    \"cyprus\": \"\ud83c\udde8\ud83c\uddfe\",\n    \"czechia\": \"\ud83c\udde8\ud83c\uddff\",\n    \"c\u00f4te_d\u2019ivoire\": \"\ud83c\udde8\ud83c\uddee\",\n    \"denmark\": \"\ud83c\udde9\ud83c\uddf0\",\n    \"diego_garcia\": \"\ud83c\udde9\ud83c\uddec\",\n    \"djibouti\": \"\ud83c\udde9\ud83c\uddef\",\n    \"dominica\": \"\ud83c\udde9\ud83c\uddf2\",\n    \"dominican_republic\": \"\ud83c\udde9\ud83c\uddf4\",\n    \"end_arrow\": \"\ud83d\udd1a\",\n    \"ecuador\": \"\ud83c\uddea\ud83c\udde8\",\n    \"egypt\": \"\ud83c\uddea\ud83c\uddec\",\n    \"el_salvador\": \"\ud83c\uddf8\ud83c\uddfb\",\n    \"england\": \"\ud83c\udff4\\U000e0067\\U000e0062\\U000e0065\\U000e006e\\U000e0067\\U000e007f\",\n    \"equatorial_guinea\": \"\ud83c\uddec\ud83c\uddf6\",\n    \"eritrea\": \"\ud83c\uddea\ud83c\uddf7\",\n    \"estonia\": \"\ud83c\uddea\ud83c\uddea\",\n    \"ethiopia\": \"\ud83c\uddea\ud83c\uddf9\",\n    \"european_union\": \"\ud83c\uddea\ud83c\uddfa\",\n    \"free_button\": \"\ud83c\udd93\",\n    \"falkland_islands\": \"\ud83c\uddeb\ud83c\uddf0\",\n    \"faroe_islands\": \"\ud83c\uddeb\ud83c\uddf4\",\n    \"fiji\": \"\ud83c\uddeb\ud83c\uddef\",\n    \"finland\": \"\ud83c\uddeb\ud83c\uddee\",\n    \"france\": \"\ud83c\uddeb\ud83c\uddf7\",\n    \"french_guiana\": \"\ud83c\uddec\ud83c\uddeb\",\n    \"french_polynesia\": \"\ud83c\uddf5\ud83c\uddeb\",\n    \"french_southern_territories\": \"\ud83c\uddf9\ud83c\uddeb\",\n    \"gabon\": \"\ud83c\uddec\ud83c\udde6\",\n    \"gambia\": \"\ud83c\uddec\ud83c\uddf2\",\n    \"gemini\": \"\u264a\",\n    \"georgia\": \"\ud83c\uddec\ud83c\uddea\",\n    \"germany\": \"\ud83c\udde9\ud83c\uddea\",\n    \"ghana\": \"\ud83c\uddec\ud83c\udded\",\n    \"gibraltar\": \"\ud83c\uddec\ud83c\uddee\",\n    \"greece\": \"\ud83c\uddec\ud83c\uddf7\",\n    \"greenland\": \"\ud83c\uddec\ud83c\uddf1\",\n    \"grenada\": \"\ud83c\uddec\ud83c\udde9\",\n    \"guadeloupe\": \"\ud83c\uddec\ud83c\uddf5\",\n    \"guam\": \"\ud83c\uddec\ud83c\uddfa\",\n    \"guatemala\": \"\ud83c\uddec\ud83c\uddf9\",\n    \"guernsey\": \"\ud83c\uddec\ud83c\uddec\",\n    \"guinea\": \"\ud83c\uddec\ud83c\uddf3\",\n    \"guinea-bissau\": \"\ud83c\uddec\ud83c\uddfc\",\n    \"guyana\": \"\ud83c\uddec\ud83c\uddfe\",\n    \"haiti\": \"\ud83c\udded\ud83c\uddf9\",\n    \"heard_&_mcdonald_islands\": \"\ud83c\udded\ud83c\uddf2\",\n    \"honduras\": \"\ud83c\udded\ud83c\uddf3\",\n    \"hong_kong_sar_china\": \"\ud83c\udded\ud83c\uddf0\",\n    \"hungary\": \"\ud83c\udded\ud83c\uddfa\",\n    \"id_button\": \"\ud83c\udd94\",\n    \"iceland\": \"\ud83c\uddee\ud83c\uddf8\",\n    \"india\": \"\ud83c\uddee\ud83c\uddf3\",\n    \"indonesia\": \"\ud83c\uddee\ud83c\udde9\",\n    \"iran\": \"\ud83c\uddee\ud83c\uddf7\",\n    \"iraq\": \"\ud83c\uddee\ud83c\uddf6\",\n    \"ireland\": \"\ud83c\uddee\ud83c\uddea\",\n    \"isle_of_man\": \"\ud83c\uddee\ud83c\uddf2\",\n    \"israel\": \"\ud83c\uddee\ud83c\uddf1\",\n    \"italy\": \"\ud83c\uddee\ud83c\uddf9\",\n    \"jamaica\": \"\ud83c\uddef\ud83c\uddf2\",\n    \"japan\": \"\ud83d\uddfe\",\n    \"japanese_acceptable_button\": \"\ud83c\ude51\",\n    \"japanese_application_button\": \"\ud83c\ude38\",\n    \"japanese_bargain_button\": \"\ud83c\ude50\",\n    \"japanese_castle\": \"\ud83c\udfef\",\n    \"japanese_congratulations_button\": \"\u3297\",\n    \"japanese_discount_button\": \"\ud83c\ude39\",\n    \"japanese_dolls\": \"\ud83c\udf8e\",\n    \"japanese_free_of_charge_button\": \"\ud83c\ude1a\",\n    \"japanese_here_button\": \"\ud83c\ude01\",\n    \"japanese_monthly_amount_button\": \"\ud83c\ude37\",\n    \"japanese_no_vacancy_button\": \"\ud83c\ude35\",\n    \"japanese_not_free_of_charge_button\": \"\ud83c\ude36\",\n    \"japanese_open_for_business_button\": \"\ud83c\ude3a\",\n    \"japanese_passing_grade_button\": \"\ud83c\ude34\",\n    \"japanese_post_office\": \"\ud83c\udfe3\",\n    \"japanese_prohibited_button\": \"\ud83c\ude32\",\n    \"japanese_reserved_button\": \"\ud83c\ude2f\",\n    \"japanese_secret_button\": \"\u3299\",\n    \"japanese_service_charge_button\": \"\ud83c\ude02\",\n    \"japanese_symbol_for_beginner\": \"\ud83d\udd30\",\n    \"japanese_vacancy_button\": \"\ud83c\ude33\",\n    \"jersey\": \"\ud83c\uddef\ud83c\uddea\",\n    \"jordan\": \"\ud83c\uddef\ud83c\uddf4\",\n    \"kazakhstan\": \"\ud83c\uddf0\ud83c\uddff\",\n    \"kenya\": \"\ud83c\uddf0\ud83c\uddea\",\n    \"kiribati\": \"\ud83c\uddf0\ud83c\uddee\",\n    \"kosovo\": \"\ud83c\uddfd\ud83c\uddf0\",\n    \"kuwait\": \"\ud83c\uddf0\ud83c\uddfc\",\n    \"kyrgyzstan\": \"\ud83c\uddf0\ud83c\uddec\",\n    \"laos\": \"\ud83c\uddf1\ud83c\udde6\",\n    \"latvia\": \"\ud83c\uddf1\ud83c\uddfb\",\n    \"lebanon\": \"\ud83c\uddf1\ud83c\udde7\",\n    \"leo\": \"\u264c\",\n    \"lesotho\": \"\ud83c\uddf1\ud83c\uddf8\",\n    \"liberia\": \"\ud83c\uddf1\ud83c\uddf7\",\n    \"libra\": \"\u264e\",\n    \"libya\": \"\ud83c\uddf1\ud83c\uddfe\",\n    \"liechtenstein\": \"\ud83c\uddf1\ud83c\uddee\",\n    \"lithuania\": \"\ud83c\uddf1\ud83c\uddf9\",\n    \"luxembourg\": \"\ud83c\uddf1\ud83c\uddfa\",\n    \"macau_sar_china\": \"\ud83c\uddf2\ud83c\uddf4\",\n    \"macedonia\": \"\ud83c\uddf2\ud83c\uddf0\",\n    \"madagascar\": \"\ud83c\uddf2\ud83c\uddec\",\n    \"malawi\": \"\ud83c\uddf2\ud83c\uddfc\",\n    \"malaysia\": \"\ud83c\uddf2\ud83c\uddfe\",\n    \"maldives\": \"\ud83c\uddf2\ud83c\uddfb\",\n    \"mali\": \"\ud83c\uddf2\ud83c\uddf1\",\n    \"malta\": \"\ud83c\uddf2\ud83c\uddf9\",\n    \"marshall_islands\": \"\ud83c\uddf2\ud83c\udded\",\n    \"martinique\": \"\ud83c\uddf2\ud83c\uddf6\",\n    \"mauritania\": \"\ud83c\uddf2\ud83c\uddf7\",\n    \"mauritius\": \"\ud83c\uddf2\ud83c\uddfa\",\n    \"mayotte\": \"\ud83c\uddfe\ud83c\uddf9\",\n    \"mexico\": \"\ud83c\uddf2\ud83c\uddfd\",\n    \"micronesia\": \"\ud83c\uddeb\ud83c\uddf2\",\n    \"moldova\": \"\ud83c\uddf2\ud83c\udde9\",\n    \"monaco\": \"\ud83c\uddf2\ud83c\udde8\",\n    \"mongolia\": \"\ud83c\uddf2\ud83c\uddf3\",\n    \"montenegro\": \"\ud83c\uddf2\ud83c\uddea\",\n    \"montserrat\": \"\ud83c\uddf2\ud83c\uddf8\",\n    \"morocco\": \"\ud83c\uddf2\ud83c\udde6\",\n    \"mozambique\": \"\ud83c\uddf2\ud83c\uddff\",\n    \"mrs._claus\": \"\ud83e\udd36\",\n    \"mrs._claus_dark_skin_tone\": \"\ud83e\udd36\ud83c\udfff\",\n    \"mrs._claus_light_skin_tone\": \"\ud83e\udd36\ud83c\udffb\",\n    \"mrs._claus_medium-dark_skin_tone\": \"\ud83e\udd36\ud83c\udffe\",\n    \"mrs._claus_medium-light_skin_tone\": \"\ud83e\udd36\ud83c\udffc\",\n    \"mrs._claus_medium_skin_tone\": \"\ud83e\udd36\ud83c\udffd\",\n    \"myanmar_(burma)\": \"\ud83c\uddf2\ud83c\uddf2\",\n    \"new_button\": \"\ud83c\udd95\",\n    \"ng_button\": \"\ud83c\udd96\",\n    \"namibia\": \"\ud83c\uddf3\ud83c\udde6\",\n    \"nauru\": \"\ud83c\uddf3\ud83c\uddf7\",\n    \"nepal\": \"\ud83c\uddf3\ud83c\uddf5\",\n    \"netherlands\": \"\ud83c\uddf3\ud83c\uddf1\",\n    \"new_caledonia\": \"\ud83c\uddf3\ud83c\udde8\",\n    \"new_zealand\": \"\ud83c\uddf3\ud83c\uddff\",\n    \"nicaragua\": \"\ud83c\uddf3\ud83c\uddee\",\n    \"niger\": \"\ud83c\uddf3\ud83c\uddea\",\n    \"nigeria\": \"\ud83c\uddf3\ud83c\uddec\",\n    \"niue\": \"\ud83c\uddf3\ud83c\uddfa\",\n    \"norfolk_island\": \"\ud83c\uddf3\ud83c\uddeb\",\n    \"north_korea\": \"\ud83c\uddf0\ud83c\uddf5\",\n    \"northern_mariana_islands\": \"\ud83c\uddf2\ud83c\uddf5\",\n    \"norway\": \"\ud83c\uddf3\ud83c\uddf4\",\n    \"ok_button\": \"\ud83c\udd97\",\n    \"ok_hand\": \"\ud83d\udc4c\",\n    \"ok_hand_dark_skin_tone\": \"\ud83d\udc4c\ud83c\udfff\",\n    \"ok_hand_light_skin_tone\": \"\ud83d\udc4c\ud83c\udffb\",\n    \"ok_hand_medium-dark_skin_tone\": \"\ud83d\udc4c\ud83c\udffe\",\n    \"ok_hand_medium-light_skin_tone\": \"\ud83d\udc4c\ud83c\udffc\",\n    \"ok_hand_medium_skin_tone\": \"\ud83d\udc4c\ud83c\udffd\",\n    \"on!_arrow\": \"\ud83d\udd1b\",\n    \"o_button_(blood_type)\": \"\ud83c\udd7e\",\n    \"oman\": \"\ud83c\uddf4\ud83c\uddf2\",\n    \"ophiuchus\": \"\u26ce\",\n    \"p_button\": \"\ud83c\udd7f\",\n    \"pakistan\": \"\ud83c\uddf5\ud83c\uddf0\",\n    \"palau\": \"\ud83c\uddf5\ud83c\uddfc\",\n    \"palestinian_territories\": \"\ud83c\uddf5\ud83c\uddf8\",\n    \"panama\": \"\ud83c\uddf5\ud83c\udde6\",\n    \"papua_new_guinea\": \"\ud83c\uddf5\ud83c\uddec\",\n    \"paraguay\": \"\ud83c\uddf5\ud83c\uddfe\",\n    \"peru\": \"\ud83c\uddf5\ud83c\uddea\",\n    \"philippines\": \"\ud83c\uddf5\ud83c\udded\",\n    \"pisces\": \"\u2653\",\n    \"pitcairn_islands\": \"\ud83c\uddf5\ud83c\uddf3\",\n    \"poland\": \"\ud83c\uddf5\ud83c\uddf1\",\n    \"portugal\": \"\ud83c\uddf5\ud83c\uddf9\",\n    \"puerto_rico\": \"\ud83c\uddf5\ud83c\uddf7\",\n    \"qatar\": \"\ud83c\uddf6\ud83c\udde6\",\n    \"romania\": \"\ud83c\uddf7\ud83c\uddf4\",\n    \"russia\": \"\ud83c\uddf7\ud83c\uddfa\",\n    \"rwanda\": \"\ud83c\uddf7\ud83c\uddfc\",\n    \"r\u00e9union\": \"\ud83c\uddf7\ud83c\uddea\",\n    \"soon_arrow\": \"\ud83d\udd1c\",\n    \"sos_button\": \"\ud83c\udd98\",\n    \"sagittarius\": \"\u2650\",\n    \"samoa\": \"\ud83c\uddfc\ud83c\uddf8\",\n    \"san_marino\": \"\ud83c\uddf8\ud83c\uddf2\",\n    \"santa_claus\": \"\ud83c\udf85\",\n    \"santa_claus_dark_skin_tone\": \"\ud83c\udf85\ud83c\udfff\",\n    \"santa_claus_light_skin_tone\": \"\ud83c\udf85\ud83c\udffb\",\n    \"santa_claus_medium-dark_skin_tone\": \"\ud83c\udf85\ud83c\udffe\",\n    \"santa_claus_medium-light_skin_tone\": \"\ud83c\udf85\ud83c\udffc\",\n    \"santa_claus_medium_skin_tone\": \"\ud83c\udf85\ud83c\udffd\",\n    \"saudi_arabia\": \"\ud83c\uddf8\ud83c\udde6\",\n    \"scorpio\": \"\u264f\",\n    \"scotland\": \"\ud83c\udff4\\U000e0067\\U000e0062\\U000e0073\\U000e0063\\U000e0074\\U000e007f\",\n    \"senegal\": \"\ud83c\uddf8\ud83c\uddf3\",\n    \"serbia\": \"\ud83c\uddf7\ud83c\uddf8\",\n    \"seychelles\": \"\ud83c\uddf8\ud83c\udde8\",\n    \"sierra_leone\": \"\ud83c\uddf8\ud83c\uddf1\",\n    \"singapore\": \"\ud83c\uddf8\ud83c\uddec\",\n    \"sint_maarten\": \"\ud83c\uddf8\ud83c\uddfd\",\n    \"slovakia\": \"\ud83c\uddf8\ud83c\uddf0\",\n    \"slovenia\": \"\ud83c\uddf8\ud83c\uddee\",\n    \"solomon_islands\": \"\ud83c\uddf8\ud83c\udde7\",\n    \"somalia\": \"\ud83c\uddf8\ud83c\uddf4\",\n    \"south_africa\": \"\ud83c\uddff\ud83c\udde6\",\n    \"south_georgia_&_south_sandwich_islands\": \"\ud83c\uddec\ud83c\uddf8\",\n    \"south_korea\": \"\ud83c\uddf0\ud83c\uddf7\",\n    \"south_sudan\": \"\ud83c\uddf8\ud83c\uddf8\",\n    \"spain\": \"\ud83c\uddea\ud83c\uddf8\",\n    \"sri_lanka\": \"\ud83c\uddf1\ud83c\uddf0\",\n    \"st._barth\u00e9lemy\": \"\ud83c\udde7\ud83c\uddf1\",\n    \"st._helena\": \"\ud83c\uddf8\ud83c\udded\",\n    \"st._kitts_&_nevis\": \"\ud83c\uddf0\ud83c\uddf3\",\n    \"st._lucia\": \"\ud83c\uddf1\ud83c\udde8\",\n    \"st._martin\": \"\ud83c\uddf2\ud83c\uddeb\",\n    \"st._pierre_&_miquelon\": \"\ud83c\uddf5\ud83c\uddf2\",\n    \"st._vincent_&_grenadines\": \"\ud83c\uddfb\ud83c\udde8\",\n    \"statue_of_liberty\": \"\ud83d\uddfd\",\n    \"sudan\": \"\ud83c\uddf8\ud83c\udde9\",\n    \"suriname\": \"\ud83c\uddf8\ud83c\uddf7\",\n    \"svalbard_&_jan_mayen\": \"\ud83c\uddf8\ud83c\uddef\",\n    \"swaziland\": \"\ud83c\uddf8\ud83c\uddff\",\n    \"sweden\": \"\ud83c\uddf8\ud83c\uddea\",\n    \"switzerland\": \"\ud83c\udde8\ud83c\udded\",\n    \"syria\": \"\ud83c\uddf8\ud83c\uddfe\",\n    \"s\u00e3o_tom\u00e9_&_pr\u00edncipe\": \"\ud83c\uddf8\ud83c\uddf9\",\n    \"t-rex\": \"\ud83e\udd96\",\n    \"top_arrow\": \"\ud83d\udd1d\",\n    \"taiwan\": \"\ud83c\uddf9\ud83c\uddfc\",\n    \"tajikistan\": \"\ud83c\uddf9\ud83c\uddef\",\n    \"tanzania\": \"\ud83c\uddf9\ud83c\uddff\",\n    \"taurus\": \"\u2649\",\n    \"thailand\": \"\ud83c\uddf9\ud83c\udded\",\n    \"timor-leste\": \"\ud83c\uddf9\ud83c\uddf1\",\n    \"togo\": \"\ud83c\uddf9\ud83c\uddec\",\n    \"tokelau\": \"\ud83c\uddf9\ud83c\uddf0\",\n    \"tokyo_tower\": \"\ud83d\uddfc\",\n    \"tonga\": \"\ud83c\uddf9\ud83c\uddf4\",\n    \"trinidad_&_tobago\": \"\ud83c\uddf9\ud83c\uddf9\",\n    \"tristan_da_cunha\": \"\ud83c\uddf9\ud83c\udde6\",\n    \"tunisia\": \"\ud83c\uddf9\ud83c\uddf3\",\n    \"turkey\": \"\ud83e\udd83\",\n    \"turkmenistan\": \"\ud83c\uddf9\ud83c\uddf2\",\n    \"turks_&_caicos_islands\": \"\ud83c\uddf9\ud83c\udde8\",\n    \"tuvalu\": \"\ud83c\uddf9\ud83c\uddfb\",\n    \"u.s._outlying_islands\": \"\ud83c\uddfa\ud83c\uddf2\",\n    \"u.s._virgin_islands\": \"\ud83c\uddfb\ud83c\uddee\",\n    \"up!_button\": \"\ud83c\udd99\",\n    \"uganda\": \"\ud83c\uddfa\ud83c\uddec\",\n    \"ukraine\": \"\ud83c\uddfa\ud83c\udde6\",\n    \"united_arab_emirates\": \"\ud83c\udde6\ud83c\uddea\",\n    \"united_kingdom\": \"\ud83c\uddec\ud83c\udde7\",\n    \"united_nations\": \"\ud83c\uddfa\ud83c\uddf3\",\n    \"united_states\": \"\ud83c\uddfa\ud83c\uddf8\",\n    \"uruguay\": \"\ud83c\uddfa\ud83c\uddfe\",\n    \"uzbekistan\": \"\ud83c\uddfa\ud83c\uddff\",\n    \"vs_button\": \"\ud83c\udd9a\",\n    \"vanuatu\": \"\ud83c\uddfb\ud83c\uddfa\",\n    \"vatican_city\": \"\ud83c\uddfb\ud83c\udde6\",\n    \"venezuela\": \"\ud83c\uddfb\ud83c\uddea\",\n    \"vietnam\": \"\ud83c\uddfb\ud83c\uddf3\",\n    \"virgo\": \"\u264d\",\n    \"wales\": \"\ud83c\udff4\\U000e0067\\U000e0062\\U000e0077\\U000e006c\\U000e0073\\U000e007f\",\n    \"wallis_&_futuna\": \"\ud83c\uddfc\ud83c\uddeb\",\n    \"western_sahara\": \"\ud83c\uddea\ud83c\udded\",\n    \"yemen\": \"\ud83c\uddfe\ud83c\uddea\",\n    \"zambia\": \"\ud83c\uddff\ud83c\uddf2\",\n    \"zimbabwe\": \"\ud83c\uddff\ud83c\uddfc\",\n    \"abacus\": \"\ud83e\uddee\",\n    \"adhesive_bandage\": \"\ud83e\ude79\",\n    \"admission_tickets\": \"\ud83c\udf9f\",\n    \"adult\": \"\ud83e\uddd1\",\n    \"adult_dark_skin_tone\": \"\ud83e\uddd1\ud83c\udfff\",\n    \"adult_light_skin_tone\": \"\ud83e\uddd1\ud83c\udffb\",\n    \"adult_medium-dark_skin_tone\": \"\ud83e\uddd1\ud83c\udffe\",\n    \"adult_medium-light_skin_tone\": \"\ud83e\uddd1\ud83c\udffc\",\n    \"adult_medium_skin_tone\": \"\ud83e\uddd1\ud83c\udffd\",\n    \"aerial_tramway\": \"\ud83d\udea1\",\n    \"airplane\": \"\u2708\",\n    \"airplane_arrival\": \"\ud83d\udeec\",\n    \"airplane_departure\": \"\ud83d\udeeb\",\n    \"alarm_clock\": \"\u23f0\",\n    \"alembic\": \"\u2697\",\n    \"alien\": \"\ud83d\udc7d\",\n    \"alien_monster\": \"\ud83d\udc7e\",\n    \"ambulance\": \"\ud83d\ude91\",\n    \"american_football\": \"\ud83c\udfc8\",\n    \"amphora\": \"\ud83c\udffa\",\n    \"anchor\": \"\u2693\",\n    \"anger_symbol\": \"\ud83d\udca2\",\n    \"angry_face\": \"\ud83d\ude20\",\n    \"angry_face_with_horns\": \"\ud83d\udc7f\",\n    \"anguished_face\": \"\ud83d\ude27\",\n    \"ant\": \"\ud83d\udc1c\",\n    \"antenna_bars\": \"\ud83d\udcf6\",\n    \"anxious_face_with_sweat\": \"\ud83d\ude30\",\n    \"articulated_lorry\": \"\ud83d\ude9b\",\n    \"artist_palette\": \"\ud83c\udfa8\",\n    \"astonished_face\": \"\ud83d\ude32\",\n    \"atom_symbol\": \"\u269b\",\n    \"auto_rickshaw\": \"\ud83d\udefa\",\n    \"automobile\": \"\ud83d\ude97\",\n    \"avocado\": \"\ud83e\udd51\",\n    \"axe\": \"\ud83e\ude93\",\n    \"baby\": \"\ud83d\udc76\",\n    \"baby_angel\": \"\ud83d\udc7c\",\n    \"baby_angel_dark_skin_tone\": \"\ud83d\udc7c\ud83c\udfff\",\n    \"baby_angel_light_skin_tone\": \"\ud83d\udc7c\ud83c\udffb\",\n    \"baby_angel_medium-dark_skin_tone\": \"\ud83d\udc7c\ud83c\udffe\",\n    \"baby_angel_medium-light_skin_tone\": \"\ud83d\udc7c\ud83c\udffc\",\n    \"baby_angel_medium_skin_tone\": \"\ud83d\udc7c\ud83c\udffd\",\n    \"baby_bottle\": \"\ud83c\udf7c\",\n    \"baby_chick\": \"\ud83d\udc24\",\n    \"baby_dark_skin_tone\": \"\ud83d\udc76\ud83c\udfff\",\n    \"baby_light_skin_tone\": \"\ud83d\udc76\ud83c\udffb\",\n    \"baby_medium-dark_skin_tone\": \"\ud83d\udc76\ud83c\udffe\",\n    \"baby_medium-light_skin_tone\": \"\ud83d\udc76\ud83c\udffc\",\n    \"baby_medium_skin_tone\": \"\ud83d\udc76\ud83c\udffd\",\n    \"baby_symbol\": \"\ud83d\udebc\",\n    \"backhand_index_pointing_down\": \"\ud83d\udc47\",\n    \"backhand_index_pointing_down_dark_skin_tone\": \"\ud83d\udc47\ud83c\udfff\",\n    \"backhand_index_pointing_down_light_skin_tone\": \"\ud83d\udc47\ud83c\udffb\",\n    \"backhand_index_pointing_down_medium-dark_skin_tone\": \"\ud83d\udc47\ud83c\udffe\",\n    \"backhand_index_pointing_down_medium-light_skin_tone\": \"\ud83d\udc47\ud83c\udffc\",\n    \"backhand_index_pointing_down_medium_skin_tone\": \"\ud83d\udc47\ud83c\udffd\",\n    \"backhand_index_pointing_left\": \"\ud83d\udc48\",\n    \"backhand_index_pointing_left_dark_skin_tone\": \"\ud83d\udc48\ud83c\udfff\",\n    \"backhand_index_pointing_left_light_skin_tone\": \"\ud83d\udc48\ud83c\udffb\",\n    \"backhand_index_pointing_left_medium-dark_skin_tone\": \"\ud83d\udc48\ud83c\udffe\",\n    \"backhand_index_pointing_left_medium-light_skin_tone\": \"\ud83d\udc48\ud83c\udffc\",\n    \"backhand_index_pointing_left_medium_skin_tone\": \"\ud83d\udc48\ud83c\udffd\",\n    \"backhand_index_pointing_right\": \"\ud83d\udc49\",\n    \"backhand_index_pointing_right_dark_skin_tone\": \"\ud83d\udc49\ud83c\udfff\",\n    \"backhand_index_pointing_right_light_skin_tone\": \"\ud83d\udc49\ud83c\udffb\",\n    \"backhand_index_pointing_right_medium-dark_skin_tone\": \"\ud83d\udc49\ud83c\udffe\",\n    \"backhand_index_pointing_right_medium-light_skin_tone\": \"\ud83d\udc49\ud83c\udffc\",\n    \"backhand_index_pointing_right_medium_skin_tone\": \"\ud83d\udc49\ud83c\udffd\",\n    \"backhand_index_pointing_up\": \"\ud83d\udc46\",\n    \"backhand_index_pointing_up_dark_skin_tone\": \"\ud83d\udc46\ud83c\udfff\",\n    \"backhand_index_pointing_up_light_skin_tone\": \"\ud83d\udc46\ud83c\udffb\",\n    \"backhand_index_pointing_up_medium-dark_skin_tone\": \"\ud83d\udc46\ud83c\udffe\",\n    \"backhand_index_pointing_up_medium-light_skin_tone\": \"\ud83d\udc46\ud83c\udffc\",\n    \"backhand_index_pointing_up_medium_skin_tone\": \"\ud83d\udc46\ud83c\udffd\",\n    \"bacon\": \"\ud83e\udd53\",\n    \"badger\": \"\ud83e\udda1\",\n    \"badminton\": \"\ud83c\udff8\",\n    \"bagel\": \"\ud83e\udd6f\",\n    \"baggage_claim\": \"\ud83d\udec4\",\n    \"baguette_bread\": \"\ud83e\udd56\",\n    \"balance_scale\": \"\u2696\",\n    \"bald\": \"\ud83e\uddb2\",\n    \"bald_man\": \"\ud83d\udc68\\u200d\ud83e\uddb2\",\n    \"bald_woman\": \"\ud83d\udc69\\u200d\ud83e\uddb2\",\n    \"ballet_shoes\": \"\ud83e\ude70\",\n    \"balloon\": \"\ud83c\udf88\",\n    \"ballot_box_with_ballot\": \"\ud83d\uddf3\",\n    \"ballot_box_with_check\": \"\u2611\",\n    \"banana\": \"\ud83c\udf4c\",\n    \"banjo\": \"\ud83e\ude95\",\n    \"bank\": \"\ud83c\udfe6\",\n    \"bar_chart\": \"\ud83d\udcca\",\n    \"barber_pole\": \"\ud83d\udc88\",\n    \"baseball\": \"\u26be\",\n    \"basket\": \"\ud83e\uddfa\",\n    \"basketball\": \"\ud83c\udfc0\",\n    \"bat\": \"\ud83e\udd87\",\n    \"bathtub\": \"\ud83d\udec1\",\n    \"battery\": \"\ud83d\udd0b\",\n    \"beach_with_umbrella\": \"\ud83c\udfd6\",\n    \"beaming_face_with_smiling_eyes\": \"\ud83d\ude01\",\n    \"bear_face\": \"\ud83d\udc3b\",\n    \"bearded_person\": \"\ud83e\uddd4\",\n    \"bearded_person_dark_skin_tone\": \"\ud83e\uddd4\ud83c\udfff\",\n    \"bearded_person_light_skin_tone\": \"\ud83e\uddd4\ud83c\udffb\",\n    \"bearded_person_medium-dark_skin_tone\": \"\ud83e\uddd4\ud83c\udffe\",\n    \"bearded_person_medium-light_skin_tone\": \"\ud83e\uddd4\ud83c\udffc\",\n    \"bearded_person_medium_skin_tone\": \"\ud83e\uddd4\ud83c\udffd\",\n    \"beating_heart\": \"\ud83d\udc93\",\n    \"bed\": \"\ud83d\udecf\",\n    \"beer_mug\": \"\ud83c\udf7a\",\n    \"bell\": \"\ud83d\udd14\",\n    \"bell_with_slash\": \"\ud83d\udd15\",\n    \"bellhop_bell\": \"\ud83d\udece\",\n    \"bento_box\": \"\ud83c\udf71\",\n    \"beverage_box\": \"\ud83e\uddc3\",\n    \"bicycle\": \"\ud83d\udeb2\",\n    \"bikini\": \"\ud83d\udc59\",\n    \"billed_cap\": \"\ud83e\udde2\",\n    \"biohazard\": \"\u2623\",\n    \"bird\": \"\ud83d\udc26\",\n    \"birthday_cake\": \"\ud83c\udf82\",\n    \"black_circle\": \"\u26ab\",\n    \"black_flag\": \"\ud83c\udff4\",\n    \"black_heart\": \"\ud83d\udda4\",\n    \"black_large_square\": \"\u2b1b\",\n    \"black_medium-small_square\": \"\u25fe\",\n    \"black_medium_square\": \"\u25fc\",\n    \"black_nib\": \"\u2712\",\n    \"black_small_square\": \"\u25aa\",\n    \"black_square_button\": \"\ud83d\udd32\",\n    \"blond-haired_man\": \"\ud83d\udc71\\u200d\u2642\ufe0f\",\n    \"blond-haired_man_dark_skin_tone\": \"\ud83d\udc71\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"blond-haired_man_light_skin_tone\": \"\ud83d\udc71\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"blond-haired_man_medium-dark_skin_tone\": \"\ud83d\udc71\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"blond-haired_man_medium-light_skin_tone\": \"\ud83d\udc71\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"blond-haired_man_medium_skin_tone\": \"\ud83d\udc71\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"blond-haired_person\": \"\ud83d\udc71\",\n    \"blond-haired_person_dark_skin_tone\": \"\ud83d\udc71\ud83c\udfff\",\n    \"blond-haired_person_light_skin_tone\": \"\ud83d\udc71\ud83c\udffb\",\n    \"blond-haired_person_medium-dark_skin_tone\": \"\ud83d\udc71\ud83c\udffe\",\n    \"blond-haired_person_medium-light_skin_tone\": \"\ud83d\udc71\ud83c\udffc\",\n    \"blond-haired_person_medium_skin_tone\": \"\ud83d\udc71\ud83c\udffd\",\n    \"blond-haired_woman\": \"\ud83d\udc71\\u200d\u2640\ufe0f\",\n    \"blond-haired_woman_dark_skin_tone\": \"\ud83d\udc71\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"blond-haired_woman_light_skin_tone\": \"\ud83d\udc71\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"blond-haired_woman_medium-dark_skin_tone\": \"\ud83d\udc71\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"blond-haired_woman_medium-light_skin_tone\": \"\ud83d\udc71\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"blond-haired_woman_medium_skin_tone\": \"\ud83d\udc71\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"blossom\": \"\ud83c\udf3c\",\n    \"blowfish\": \"\ud83d\udc21\",\n    \"blue_book\": \"\ud83d\udcd8\",\n    \"blue_circle\": \"\ud83d\udd35\",\n    \"blue_heart\": \"\ud83d\udc99\",\n    \"blue_square\": \"\ud83d\udfe6\",\n    \"boar\": \"\ud83d\udc17\",\n    \"bomb\": \"\ud83d\udca3\",\n    \"bone\": \"\ud83e\uddb4\",\n    \"bookmark\": \"\ud83d\udd16\",\n    \"bookmark_tabs\": \"\ud83d\udcd1\",\n    \"books\": \"\ud83d\udcda\",\n    \"bottle_with_popping_cork\": \"\ud83c\udf7e\",\n    \"bouquet\": \"\ud83d\udc90\",\n    \"bow_and_arrow\": \"\ud83c\udff9\",\n    \"bowl_with_spoon\": \"\ud83e\udd63\",\n    \"bowling\": \"\ud83c\udfb3\",\n    \"boxing_glove\": \"\ud83e\udd4a\",\n    \"boy\": \"\ud83d\udc66\",\n    \"boy_dark_skin_tone\": \"\ud83d\udc66\ud83c\udfff\",\n    \"boy_light_skin_tone\": \"\ud83d\udc66\ud83c\udffb\",\n    \"boy_medium-dark_skin_tone\": \"\ud83d\udc66\ud83c\udffe\",\n    \"boy_medium-light_skin_tone\": \"\ud83d\udc66\ud83c\udffc\",\n    \"boy_medium_skin_tone\": \"\ud83d\udc66\ud83c\udffd\",\n    \"brain\": \"\ud83e\udde0\",\n    \"bread\": \"\ud83c\udf5e\",\n    \"breast-feeding\": \"\ud83e\udd31\",\n    \"breast-feeding_dark_skin_tone\": \"\ud83e\udd31\ud83c\udfff\",\n    \"breast-feeding_light_skin_tone\": \"\ud83e\udd31\ud83c\udffb\",\n    \"breast-feeding_medium-dark_skin_tone\": \"\ud83e\udd31\ud83c\udffe\",\n    \"breast-feeding_medium-light_skin_tone\": \"\ud83e\udd31\ud83c\udffc\",\n    \"breast-feeding_medium_skin_tone\": \"\ud83e\udd31\ud83c\udffd\",\n    \"brick\": \"\ud83e\uddf1\",\n    \"bride_with_veil\": \"\ud83d\udc70\",\n    \"bride_with_veil_dark_skin_tone\": \"\ud83d\udc70\ud83c\udfff\",\n    \"bride_with_veil_light_skin_tone\": \"\ud83d\udc70\ud83c\udffb\",\n    \"bride_with_veil_medium-dark_skin_tone\": \"\ud83d\udc70\ud83c\udffe\",\n    \"bride_with_veil_medium-light_skin_tone\": \"\ud83d\udc70\ud83c\udffc\",\n    \"bride_with_veil_medium_skin_tone\": \"\ud83d\udc70\ud83c\udffd\",\n    \"bridge_at_night\": \"\ud83c\udf09\",\n    \"briefcase\": \"\ud83d\udcbc\",\n    \"briefs\": \"\ud83e\ude72\",\n    \"bright_button\": \"\ud83d\udd06\",\n    \"broccoli\": \"\ud83e\udd66\",\n    \"broken_heart\": \"\ud83d\udc94\",\n    \"broom\": \"\ud83e\uddf9\",\n    \"brown_circle\": \"\ud83d\udfe4\",\n    \"brown_heart\": \"\ud83e\udd0e\",\n    \"brown_square\": \"\ud83d\udfeb\",\n    \"bug\": \"\ud83d\udc1b\",\n    \"building_construction\": \"\ud83c\udfd7\",\n    \"bullet_train\": \"\ud83d\ude85\",\n    \"burrito\": \"\ud83c\udf2f\",\n    \"bus\": \"\ud83d\ude8c\",\n    \"bus_stop\": \"\ud83d\ude8f\",\n    \"bust_in_silhouette\": \"\ud83d\udc64\",\n    \"busts_in_silhouette\": \"\ud83d\udc65\",\n    \"butter\": \"\ud83e\uddc8\",\n    \"butterfly\": \"\ud83e\udd8b\",\n    \"cactus\": \"\ud83c\udf35\",\n    \"calendar\": \"\ud83d\udcc6\",\n    \"call_me_hand\": \"\ud83e\udd19\",\n    \"call_me_hand_dark_skin_tone\": \"\ud83e\udd19\ud83c\udfff\",\n    \"call_me_hand_light_skin_tone\": \"\ud83e\udd19\ud83c\udffb\",\n    \"call_me_hand_medium-dark_skin_tone\": \"\ud83e\udd19\ud83c\udffe\",\n    \"call_me_hand_medium-light_skin_tone\": \"\ud83e\udd19\ud83c\udffc\",\n    \"call_me_hand_medium_skin_tone\": \"\ud83e\udd19\ud83c\udffd\",\n    \"camel\": \"\ud83d\udc2b\",\n    \"camera\": \"\ud83d\udcf7\",\n    \"camera_with_flash\": \"\ud83d\udcf8\",\n    \"camping\": \"\ud83c\udfd5\",\n    \"candle\": \"\ud83d\udd6f\",\n    \"candy\": \"\ud83c\udf6c\",\n    \"canned_food\": \"\ud83e\udd6b\",\n    \"canoe\": \"\ud83d\udef6\",\n    \"card_file_box\": \"\ud83d\uddc3\",\n    \"card_index\": \"\ud83d\udcc7\",\n    \"card_index_dividers\": \"\ud83d\uddc2\",\n    \"carousel_horse\": \"\ud83c\udfa0\",\n    \"carp_streamer\": \"\ud83c\udf8f\",\n    \"carrot\": \"\ud83e\udd55\",\n    \"castle\": \"\ud83c\udff0\",\n    \"cat\": \"\ud83d\udc31\",\n    \"cat_face\": \"\ud83d\udc31\",\n    \"cat_face_with_tears_of_joy\": \"\ud83d\ude39\",\n    \"cat_face_with_wry_smile\": \"\ud83d\ude3c\",\n    \"chains\": \"\u26d3\",\n    \"chair\": \"\ud83e\ude91\",\n    \"chart_decreasing\": \"\ud83d\udcc9\",\n    \"chart_increasing\": \"\ud83d\udcc8\",\n    \"chart_increasing_with_yen\": \"\ud83d\udcb9\",\n    \"cheese_wedge\": \"\ud83e\uddc0\",\n    \"chequered_flag\": \"\ud83c\udfc1\",\n    \"cherries\": \"\ud83c\udf52\",\n    \"cherry_blossom\": \"\ud83c\udf38\",\n    \"chess_pawn\": \"\u265f\",\n    \"chestnut\": \"\ud83c\udf30\",\n    \"chicken\": \"\ud83d\udc14\",\n    \"child\": \"\ud83e\uddd2\",\n    \"child_dark_skin_tone\": \"\ud83e\uddd2\ud83c\udfff\",\n    \"child_light_skin_tone\": \"\ud83e\uddd2\ud83c\udffb\",\n    \"child_medium-dark_skin_tone\": \"\ud83e\uddd2\ud83c\udffe\",\n    \"child_medium-light_skin_tone\": \"\ud83e\uddd2\ud83c\udffc\",\n    \"child_medium_skin_tone\": \"\ud83e\uddd2\ud83c\udffd\",\n    \"children_crossing\": \"\ud83d\udeb8\",\n    \"chipmunk\": \"\ud83d\udc3f\",\n    \"chocolate_bar\": \"\ud83c\udf6b\",\n    \"chopsticks\": \"\ud83e\udd62\",\n    \"church\": \"\u26ea\",\n    \"cigarette\": \"\ud83d\udeac\",\n    \"cinema\": \"\ud83c\udfa6\",\n    \"circled_m\": \"\u24c2\",\n    \"circus_tent\": \"\ud83c\udfaa\",\n    \"cityscape\": \"\ud83c\udfd9\",\n    \"cityscape_at_dusk\": \"\ud83c\udf06\",\n    \"clamp\": \"\ud83d\udddc\",\n    \"clapper_board\": \"\ud83c\udfac\",\n    \"clapping_hands\": \"\ud83d\udc4f\",\n    \"clapping_hands_dark_skin_tone\": \"\ud83d\udc4f\ud83c\udfff\",\n    \"clapping_hands_light_skin_tone\": \"\ud83d\udc4f\ud83c\udffb\",\n    \"clapping_hands_medium-dark_skin_tone\": \"\ud83d\udc4f\ud83c\udffe\",\n    \"clapping_hands_medium-light_skin_tone\": \"\ud83d\udc4f\ud83c\udffc\",\n    \"clapping_hands_medium_skin_tone\": \"\ud83d\udc4f\ud83c\udffd\",\n    \"classical_building\": \"\ud83c\udfdb\",\n    \"clinking_beer_mugs\": \"\ud83c\udf7b\",\n    \"clinking_glasses\": \"\ud83e\udd42\",\n    \"clipboard\": \"\ud83d\udccb\",\n    \"clockwise_vertical_arrows\": \"\ud83d\udd03\",\n    \"closed_book\": \"\ud83d\udcd5\",\n    \"closed_mailbox_with_lowered_flag\": \"\ud83d\udcea\",\n    \"closed_mailbox_with_raised_flag\": \"\ud83d\udceb\",\n    \"closed_umbrella\": \"\ud83c\udf02\",\n    \"cloud\": \"\u2601\",\n    \"cloud_with_lightning\": \"\ud83c\udf29\",\n    \"cloud_with_lightning_and_rain\": \"\u26c8\",\n    \"cloud_with_rain\": \"\ud83c\udf27\",\n    \"cloud_with_snow\": \"\ud83c\udf28\",\n    \"clown_face\": \"\ud83e\udd21\",\n    \"club_suit\": \"\u2663\",\n    \"clutch_bag\": \"\ud83d\udc5d\",\n    \"coat\": \"\ud83e\udde5\",\n    \"cocktail_glass\": \"\ud83c\udf78\",\n    \"coconut\": \"\ud83e\udd65\",\n    \"coffin\": \"\u26b0\",\n    \"cold_face\": \"\ud83e\udd76\",\n    \"collision\": \"\ud83d\udca5\",\n    \"comet\": \"\u2604\",\n    \"compass\": \"\ud83e\udded\",\n    \"computer_disk\": \"\ud83d\udcbd\",\n    \"computer_mouse\": \"\ud83d\uddb1\",\n    \"confetti_ball\": \"\ud83c\udf8a\",\n    \"confounded_face\": \"\ud83d\ude16\",\n    \"confused_face\": \"\ud83d\ude15\",\n    \"construction\": \"\ud83d\udea7\",\n    \"construction_worker\": \"\ud83d\udc77\",\n    \"construction_worker_dark_skin_tone\": \"\ud83d\udc77\ud83c\udfff\",\n    \"construction_worker_light_skin_tone\": \"\ud83d\udc77\ud83c\udffb\",\n    \"construction_worker_medium-dark_skin_tone\": \"\ud83d\udc77\ud83c\udffe\",\n    \"construction_worker_medium-light_skin_tone\": \"\ud83d\udc77\ud83c\udffc\",\n    \"construction_worker_medium_skin_tone\": \"\ud83d\udc77\ud83c\udffd\",\n    \"control_knobs\": \"\ud83c\udf9b\",\n    \"convenience_store\": \"\ud83c\udfea\",\n    \"cooked_rice\": \"\ud83c\udf5a\",\n    \"cookie\": \"\ud83c\udf6a\",\n    \"cooking\": \"\ud83c\udf73\",\n    \"copyright\": \"\u00a9\",\n    \"couch_and_lamp\": \"\ud83d\udecb\",\n    \"counterclockwise_arrows_button\": \"\ud83d\udd04\",\n    \"couple_with_heart\": \"\ud83d\udc91\",\n    \"couple_with_heart_man_man\": \"\ud83d\udc68\\u200d\u2764\ufe0f\\u200d\ud83d\udc68\",\n    \"couple_with_heart_woman_man\": \"\ud83d\udc69\\u200d\u2764\ufe0f\\u200d\ud83d\udc68\",\n    \"couple_with_heart_woman_woman\": \"\ud83d\udc69\\u200d\u2764\ufe0f\\u200d\ud83d\udc69\",\n    \"cow\": \"\ud83d\udc2e\",\n    \"cow_face\": \"\ud83d\udc2e\",\n    \"cowboy_hat_face\": \"\ud83e\udd20\",\n    \"crab\": \"\ud83e\udd80\",\n    \"crayon\": \"\ud83d\udd8d\",\n    \"credit_card\": \"\ud83d\udcb3\",\n    \"crescent_moon\": \"\ud83c\udf19\",\n    \"cricket\": \"\ud83e\udd97\",\n    \"cricket_game\": \"\ud83c\udfcf\",\n    \"crocodile\": \"\ud83d\udc0a\",\n    \"croissant\": \"\ud83e\udd50\",\n    \"cross_mark\": \"\u274c\",\n    \"cross_mark_button\": \"\u274e\",\n    \"crossed_fingers\": \"\ud83e\udd1e\",\n    \"crossed_fingers_dark_skin_tone\": \"\ud83e\udd1e\ud83c\udfff\",\n    \"crossed_fingers_light_skin_tone\": \"\ud83e\udd1e\ud83c\udffb\",\n    \"crossed_fingers_medium-dark_skin_tone\": \"\ud83e\udd1e\ud83c\udffe\",\n    \"crossed_fingers_medium-light_skin_tone\": \"\ud83e\udd1e\ud83c\udffc\",\n    \"crossed_fingers_medium_skin_tone\": \"\ud83e\udd1e\ud83c\udffd\",\n    \"crossed_flags\": \"\ud83c\udf8c\",\n    \"crossed_swords\": \"\u2694\",\n    \"crown\": \"\ud83d\udc51\",\n    \"crying_cat_face\": \"\ud83d\ude3f\",\n    \"crying_face\": \"\ud83d\ude22\",\n    \"crystal_ball\": \"\ud83d\udd2e\",\n    \"cucumber\": \"\ud83e\udd52\",\n    \"cupcake\": \"\ud83e\uddc1\",\n    \"cup_with_straw\": \"\ud83e\udd64\",\n    \"curling_stone\": \"\ud83e\udd4c\",\n    \"curly_hair\": \"\ud83e\uddb1\",\n    \"curly-haired_man\": \"\ud83d\udc68\\u200d\ud83e\uddb1\",\n    \"curly-haired_woman\": \"\ud83d\udc69\\u200d\ud83e\uddb1\",\n    \"curly_loop\": \"\u27b0\",\n    \"currency_exchange\": \"\ud83d\udcb1\",\n    \"curry_rice\": \"\ud83c\udf5b\",\n    \"custard\": \"\ud83c\udf6e\",\n    \"customs\": \"\ud83d\udec3\",\n    \"cut_of_meat\": \"\ud83e\udd69\",\n    \"cyclone\": \"\ud83c\udf00\",\n    \"dagger\": \"\ud83d\udde1\",\n    \"dango\": \"\ud83c\udf61\",\n    \"dashing_away\": \"\ud83d\udca8\",\n    \"deaf_person\": \"\ud83e\uddcf\",\n    \"deciduous_tree\": \"\ud83c\udf33\",\n    \"deer\": \"\ud83e\udd8c\",\n    \"delivery_truck\": \"\ud83d\ude9a\",\n    \"department_store\": \"\ud83c\udfec\",\n    \"derelict_house\": \"\ud83c\udfda\",\n    \"desert\": \"\ud83c\udfdc\",\n    \"desert_island\": \"\ud83c\udfdd\",\n    \"desktop_computer\": \"\ud83d\udda5\",\n    \"detective\": \"\ud83d\udd75\",\n    \"detective_dark_skin_tone\": \"\ud83d\udd75\ud83c\udfff\",\n    \"detective_light_skin_tone\": \"\ud83d\udd75\ud83c\udffb\",\n    \"detective_medium-dark_skin_tone\": \"\ud83d\udd75\ud83c\udffe\",\n    \"detective_medium-light_skin_tone\": \"\ud83d\udd75\ud83c\udffc\",\n    \"detective_medium_skin_tone\": \"\ud83d\udd75\ud83c\udffd\",\n    \"diamond_suit\": \"\u2666\",\n    \"diamond_with_a_dot\": \"\ud83d\udca0\",\n    \"dim_button\": \"\ud83d\udd05\",\n    \"direct_hit\": \"\ud83c\udfaf\",\n    \"disappointed_face\": \"\ud83d\ude1e\",\n    \"diving_mask\": \"\ud83e\udd3f\",\n    \"diya_lamp\": \"\ud83e\ude94\",\n    \"dizzy\": \"\ud83d\udcab\",\n    \"dizzy_face\": \"\ud83d\ude35\",\n    \"dna\": \"\ud83e\uddec\",\n    \"dog\": \"\ud83d\udc36\",\n    \"dog_face\": \"\ud83d\udc36\",\n    \"dollar_banknote\": \"\ud83d\udcb5\",\n    \"dolphin\": \"\ud83d\udc2c\",\n    \"door\": \"\ud83d\udeaa\",\n    \"dotted_six-pointed_star\": \"\ud83d\udd2f\",\n    \"double_curly_loop\": \"\u27bf\",\n    \"double_exclamation_mark\": \"\u203c\",\n    \"doughnut\": \"\ud83c\udf69\",\n    \"dove\": \"\ud83d\udd4a\",\n    \"down-left_arrow\": \"\u2199\",\n    \"down-right_arrow\": \"\u2198\",\n    \"down_arrow\": \"\u2b07\",\n    \"downcast_face_with_sweat\": \"\ud83d\ude13\",\n    \"downwards_button\": \"\ud83d\udd3d\",\n    \"dragon\": \"\ud83d\udc09\",\n    \"dragon_face\": \"\ud83d\udc32\",\n    \"dress\": \"\ud83d\udc57\",\n    \"drooling_face\": \"\ud83e\udd24\",\n    \"drop_of_blood\": \"\ud83e\ude78\",\n    \"droplet\": \"\ud83d\udca7\",\n    \"drum\": \"\ud83e\udd41\",\n    \"duck\": \"\ud83e\udd86\",\n    \"dumpling\": \"\ud83e\udd5f\",\n    \"dvd\": \"\ud83d\udcc0\",\n    \"e-mail\": \"\ud83d\udce7\",\n    \"eagle\": \"\ud83e\udd85\",\n    \"ear\": \"\ud83d\udc42\",\n    \"ear_dark_skin_tone\": \"\ud83d\udc42\ud83c\udfff\",\n    \"ear_light_skin_tone\": \"\ud83d\udc42\ud83c\udffb\",\n    \"ear_medium-dark_skin_tone\": \"\ud83d\udc42\ud83c\udffe\",\n    \"ear_medium-light_skin_tone\": \"\ud83d\udc42\ud83c\udffc\",\n    \"ear_medium_skin_tone\": \"\ud83d\udc42\ud83c\udffd\",\n    \"ear_of_corn\": \"\ud83c\udf3d\",\n    \"ear_with_hearing_aid\": \"\ud83e\uddbb\",\n    \"egg\": \"\ud83c\udf73\",\n    \"eggplant\": \"\ud83c\udf46\",\n    \"eight-pointed_star\": \"\u2734\",\n    \"eight-spoked_asterisk\": \"\u2733\",\n    \"eight-thirty\": \"\ud83d\udd63\",\n    \"eight_o\u2019clock\": \"\ud83d\udd57\",\n    \"eject_button\": \"\u23cf\",\n    \"electric_plug\": \"\ud83d\udd0c\",\n    \"elephant\": \"\ud83d\udc18\",\n    \"eleven-thirty\": \"\ud83d\udd66\",\n    \"eleven_o\u2019clock\": \"\ud83d\udd5a\",\n    \"elf\": \"\ud83e\udddd\",\n    \"elf_dark_skin_tone\": \"\ud83e\udddd\ud83c\udfff\",\n    \"elf_light_skin_tone\": \"\ud83e\udddd\ud83c\udffb\",\n    \"elf_medium-dark_skin_tone\": \"\ud83e\udddd\ud83c\udffe\",\n    \"elf_medium-light_skin_tone\": \"\ud83e\udddd\ud83c\udffc\",\n    \"elf_medium_skin_tone\": \"\ud83e\udddd\ud83c\udffd\",\n    \"envelope\": \"\u2709\",\n    \"envelope_with_arrow\": \"\ud83d\udce9\",\n    \"euro_banknote\": \"\ud83d\udcb6\",\n    \"evergreen_tree\": \"\ud83c\udf32\",\n    \"ewe\": \"\ud83d\udc11\",\n    \"exclamation_mark\": \"\u2757\",\n    \"exclamation_question_mark\": \"\u2049\",\n    \"exploding_head\": \"\ud83e\udd2f\",\n    \"expressionless_face\": \"\ud83d\ude11\",\n    \"eye\": \"\ud83d\udc41\",\n    \"eye_in_speech_bubble\": \"\ud83d\udc41\ufe0f\\u200d\ud83d\udde8\ufe0f\",\n    \"eyes\": \"\ud83d\udc40\",\n    \"face_blowing_a_kiss\": \"\ud83d\ude18\",\n    \"face_savoring_food\": \"\ud83d\ude0b\",\n    \"face_screaming_in_fear\": \"\ud83d\ude31\",\n    \"face_vomiting\": \"\ud83e\udd2e\",\n    \"face_with_hand_over_mouth\": \"\ud83e\udd2d\",\n    \"face_with_head-bandage\": \"\ud83e\udd15\",\n    \"face_with_medical_mask\": \"\ud83d\ude37\",\n    \"face_with_monocle\": \"\ud83e\uddd0\",\n    \"face_with_open_mouth\": \"\ud83d\ude2e\",\n    \"face_with_raised_eyebrow\": \"\ud83e\udd28\",\n    \"face_with_rolling_eyes\": \"\ud83d\ude44\",\n    \"face_with_steam_from_nose\": \"\ud83d\ude24\",\n    \"face_with_symbols_on_mouth\": \"\ud83e\udd2c\",\n    \"face_with_tears_of_joy\": \"\ud83d\ude02\",\n    \"face_with_thermometer\": \"\ud83e\udd12\",\n    \"face_with_tongue\": \"\ud83d\ude1b\",\n    \"face_without_mouth\": \"\ud83d\ude36\",\n    \"factory\": \"\ud83c\udfed\",\n    \"fairy\": \"\ud83e\uddda\",\n    \"fairy_dark_skin_tone\": \"\ud83e\uddda\ud83c\udfff\",\n    \"fairy_light_skin_tone\": \"\ud83e\uddda\ud83c\udffb\",\n    \"fairy_medium-dark_skin_tone\": \"\ud83e\uddda\ud83c\udffe\",\n    \"fairy_medium-light_skin_tone\": \"\ud83e\uddda\ud83c\udffc\",\n    \"fairy_medium_skin_tone\": \"\ud83e\uddda\ud83c\udffd\",\n    \"falafel\": \"\ud83e\uddc6\",\n    \"fallen_leaf\": \"\ud83c\udf42\",\n    \"family\": \"\ud83d\udc6a\",\n    \"family_man_boy\": \"\ud83d\udc68\\u200d\ud83d\udc66\",\n    \"family_man_boy_boy\": \"\ud83d\udc68\\u200d\ud83d\udc66\\u200d\ud83d\udc66\",\n    \"family_man_girl\": \"\ud83d\udc68\\u200d\ud83d\udc67\",\n    \"family_man_girl_boy\": \"\ud83d\udc68\\u200d\ud83d\udc67\\u200d\ud83d\udc66\",\n    \"family_man_girl_girl\": \"\ud83d\udc68\\u200d\ud83d\udc67\\u200d\ud83d\udc67\",\n    \"family_man_man_boy\": \"\ud83d\udc68\\u200d\ud83d\udc68\\u200d\ud83d\udc66\",\n    \"family_man_man_boy_boy\": \"\ud83d\udc68\\u200d\ud83d\udc68\\u200d\ud83d\udc66\\u200d\ud83d\udc66\",\n    \"family_man_man_girl\": \"\ud83d\udc68\\u200d\ud83d\udc68\\u200d\ud83d\udc67\",\n    \"family_man_man_girl_boy\": \"\ud83d\udc68\\u200d\ud83d\udc68\\u200d\ud83d\udc67\\u200d\ud83d\udc66\",\n    \"family_man_man_girl_girl\": \"\ud83d\udc68\\u200d\ud83d\udc68\\u200d\ud83d\udc67\\u200d\ud83d\udc67\",\n    \"family_man_woman_boy\": \"\ud83d\udc68\\u200d\ud83d\udc69\\u200d\ud83d\udc66\",\n    \"family_man_woman_boy_boy\": \"\ud83d\udc68\\u200d\ud83d\udc69\\u200d\ud83d\udc66\\u200d\ud83d\udc66\",\n    \"family_man_woman_girl\": \"\ud83d\udc68\\u200d\ud83d\udc69\\u200d\ud83d\udc67\",\n    \"family_man_woman_girl_boy\": \"\ud83d\udc68\\u200d\ud83d\udc69\\u200d\ud83d\udc67\\u200d\ud83d\udc66\",\n    \"family_man_woman_girl_girl\": \"\ud83d\udc68\\u200d\ud83d\udc69\\u200d\ud83d\udc67\\u200d\ud83d\udc67\",\n    \"family_woman_boy\": \"\ud83d\udc69\\u200d\ud83d\udc66\",\n    \"family_woman_boy_boy\": \"\ud83d\udc69\\u200d\ud83d\udc66\\u200d\ud83d\udc66\",\n    \"family_woman_girl\": \"\ud83d\udc69\\u200d\ud83d\udc67\",\n    \"family_woman_girl_boy\": \"\ud83d\udc69\\u200d\ud83d\udc67\\u200d\ud83d\udc66\",\n    \"family_woman_girl_girl\": \"\ud83d\udc69\\u200d\ud83d\udc67\\u200d\ud83d\udc67\",\n    \"family_woman_woman_boy\": \"\ud83d\udc69\\u200d\ud83d\udc69\\u200d\ud83d\udc66\",\n    \"family_woman_woman_boy_boy\": \"\ud83d\udc69\\u200d\ud83d\udc69\\u200d\ud83d\udc66\\u200d\ud83d\udc66\",\n    \"family_woman_woman_girl\": \"\ud83d\udc69\\u200d\ud83d\udc69\\u200d\ud83d\udc67\",\n    \"family_woman_woman_girl_boy\": \"\ud83d\udc69\\u200d\ud83d\udc69\\u200d\ud83d\udc67\\u200d\ud83d\udc66\",\n    \"family_woman_woman_girl_girl\": \"\ud83d\udc69\\u200d\ud83d\udc69\\u200d\ud83d\udc67\\u200d\ud83d\udc67\",\n    \"fast-forward_button\": \"\u23e9\",\n    \"fast_down_button\": \"\u23ec\",\n    \"fast_reverse_button\": \"\u23ea\",\n    \"fast_up_button\": \"\u23eb\",\n    \"fax_machine\": \"\ud83d\udce0\",\n    \"fearful_face\": \"\ud83d\ude28\",\n    \"female_sign\": \"\u2640\",\n    \"ferris_wheel\": \"\ud83c\udfa1\",\n    \"ferry\": \"\u26f4\",\n    \"field_hockey\": \"\ud83c\udfd1\",\n    \"file_cabinet\": \"\ud83d\uddc4\",\n    \"file_folder\": \"\ud83d\udcc1\",\n    \"film_frames\": \"\ud83c\udf9e\",\n    \"film_projector\": \"\ud83d\udcfd\",\n    \"fire\": \"\ud83d\udd25\",\n    \"fire_extinguisher\": \"\ud83e\uddef\",\n    \"firecracker\": \"\ud83e\udde8\",\n    \"fire_engine\": \"\ud83d\ude92\",\n    \"fireworks\": \"\ud83c\udf86\",\n    \"first_quarter_moon\": \"\ud83c\udf13\",\n    \"first_quarter_moon_face\": \"\ud83c\udf1b\",\n    \"fish\": \"\ud83d\udc1f\",\n    \"fish_cake_with_swirl\": \"\ud83c\udf65\",\n    \"fishing_pole\": \"\ud83c\udfa3\",\n    \"five-thirty\": \"\ud83d\udd60\",\n    \"five_o\u2019clock\": \"\ud83d\udd54\",\n    \"flag_in_hole\": \"\u26f3\",\n    \"flamingo\": \"\ud83e\udda9\",\n    \"flashlight\": \"\ud83d\udd26\",\n    \"flat_shoe\": \"\ud83e\udd7f\",\n    \"fleur-de-lis\": \"\u269c\",\n    \"flexed_biceps\": \"\ud83d\udcaa\",\n    \"flexed_biceps_dark_skin_tone\": \"\ud83d\udcaa\ud83c\udfff\",\n    \"flexed_biceps_light_skin_tone\": \"\ud83d\udcaa\ud83c\udffb\",\n    \"flexed_biceps_medium-dark_skin_tone\": \"\ud83d\udcaa\ud83c\udffe\",\n    \"flexed_biceps_medium-light_skin_tone\": \"\ud83d\udcaa\ud83c\udffc\",\n    \"flexed_biceps_medium_skin_tone\": \"\ud83d\udcaa\ud83c\udffd\",\n    \"floppy_disk\": \"\ud83d\udcbe\",\n    \"flower_playing_cards\": \"\ud83c\udfb4\",\n    \"flushed_face\": \"\ud83d\ude33\",\n    \"flying_disc\": \"\ud83e\udd4f\",\n    \"flying_saucer\": \"\ud83d\udef8\",\n    \"fog\": \"\ud83c\udf2b\",\n    \"foggy\": \"\ud83c\udf01\",\n    \"folded_hands\": \"\ud83d\ude4f\",\n    \"folded_hands_dark_skin_tone\": \"\ud83d\ude4f\ud83c\udfff\",\n    \"folded_hands_light_skin_tone\": \"\ud83d\ude4f\ud83c\udffb\",\n    \"folded_hands_medium-dark_skin_tone\": \"\ud83d\ude4f\ud83c\udffe\",\n    \"folded_hands_medium-light_skin_tone\": \"\ud83d\ude4f\ud83c\udffc\",\n    \"folded_hands_medium_skin_tone\": \"\ud83d\ude4f\ud83c\udffd\",\n    \"foot\": \"\ud83e\uddb6\",\n    \"footprints\": \"\ud83d\udc63\",\n    \"fork_and_knife\": \"\ud83c\udf74\",\n    \"fork_and_knife_with_plate\": \"\ud83c\udf7d\",\n    \"fortune_cookie\": \"\ud83e\udd60\",\n    \"fountain\": \"\u26f2\",\n    \"fountain_pen\": \"\ud83d\udd8b\",\n    \"four-thirty\": \"\ud83d\udd5f\",\n    \"four_leaf_clover\": \"\ud83c\udf40\",\n    \"four_o\u2019clock\": \"\ud83d\udd53\",\n    \"fox_face\": \"\ud83e\udd8a\",\n    \"framed_picture\": \"\ud83d\uddbc\",\n    \"french_fries\": \"\ud83c\udf5f\",\n    \"fried_shrimp\": \"\ud83c\udf64\",\n    \"frog_face\": \"\ud83d\udc38\",\n    \"front-facing_baby_chick\": \"\ud83d\udc25\",\n    \"frowning_face\": \"\u2639\",\n    \"frowning_face_with_open_mouth\": \"\ud83d\ude26\",\n    \"fuel_pump\": \"\u26fd\",\n    \"full_moon\": \"\ud83c\udf15\",\n    \"full_moon_face\": \"\ud83c\udf1d\",\n    \"funeral_urn\": \"\u26b1\",\n    \"game_die\": \"\ud83c\udfb2\",\n    \"garlic\": \"\ud83e\uddc4\",\n    \"gear\": \"\u2699\",\n    \"gem_stone\": \"\ud83d\udc8e\",\n    \"genie\": \"\ud83e\uddde\",\n    \"ghost\": \"\ud83d\udc7b\",\n    \"giraffe\": \"\ud83e\udd92\",\n    \"girl\": \"\ud83d\udc67\",\n    \"girl_dark_skin_tone\": \"\ud83d\udc67\ud83c\udfff\",\n    \"girl_light_skin_tone\": \"\ud83d\udc67\ud83c\udffb\",\n    \"girl_medium-dark_skin_tone\": \"\ud83d\udc67\ud83c\udffe\",\n    \"girl_medium-light_skin_tone\": \"\ud83d\udc67\ud83c\udffc\",\n    \"girl_medium_skin_tone\": \"\ud83d\udc67\ud83c\udffd\",\n    \"glass_of_milk\": \"\ud83e\udd5b\",\n    \"glasses\": \"\ud83d\udc53\",\n    \"globe_showing_americas\": \"\ud83c\udf0e\",\n    \"globe_showing_asia-australia\": \"\ud83c\udf0f\",\n    \"globe_showing_europe-africa\": \"\ud83c\udf0d\",\n    \"globe_with_meridians\": \"\ud83c\udf10\",\n    \"gloves\": \"\ud83e\udde4\",\n    \"glowing_star\": \"\ud83c\udf1f\",\n    \"goal_net\": \"\ud83e\udd45\",\n    \"goat\": \"\ud83d\udc10\",\n    \"goblin\": \"\ud83d\udc7a\",\n    \"goggles\": \"\ud83e\udd7d\",\n    \"gorilla\": \"\ud83e\udd8d\",\n    \"graduation_cap\": \"\ud83c\udf93\",\n    \"grapes\": \"\ud83c\udf47\",\n    \"green_apple\": \"\ud83c\udf4f\",\n    \"green_book\": \"\ud83d\udcd7\",\n    \"green_circle\": \"\ud83d\udfe2\",\n    \"green_heart\": \"\ud83d\udc9a\",\n    \"green_salad\": \"\ud83e\udd57\",\n    \"green_square\": \"\ud83d\udfe9\",\n    \"grimacing_face\": \"\ud83d\ude2c\",\n    \"grinning_cat_face\": \"\ud83d\ude3a\",\n    \"grinning_cat_face_with_smiling_eyes\": \"\ud83d\ude38\",\n    \"grinning_face\": \"\ud83d\ude00\",\n    \"grinning_face_with_big_eyes\": \"\ud83d\ude03\",\n    \"grinning_face_with_smiling_eyes\": \"\ud83d\ude04\",\n    \"grinning_face_with_sweat\": \"\ud83d\ude05\",\n    \"grinning_squinting_face\": \"\ud83d\ude06\",\n    \"growing_heart\": \"\ud83d\udc97\",\n    \"guard\": \"\ud83d\udc82\",\n    \"guard_dark_skin_tone\": \"\ud83d\udc82\ud83c\udfff\",\n    \"guard_light_skin_tone\": \"\ud83d\udc82\ud83c\udffb\",\n    \"guard_medium-dark_skin_tone\": \"\ud83d\udc82\ud83c\udffe\",\n    \"guard_medium-light_skin_tone\": \"\ud83d\udc82\ud83c\udffc\",\n    \"guard_medium_skin_tone\": \"\ud83d\udc82\ud83c\udffd\",\n    \"guide_dog\": \"\ud83e\uddae\",\n    \"guitar\": \"\ud83c\udfb8\",\n    \"hamburger\": \"\ud83c\udf54\",\n    \"hammer\": \"\ud83d\udd28\",\n    \"hammer_and_pick\": \"\u2692\",\n    \"hammer_and_wrench\": \"\ud83d\udee0\",\n    \"hamster_face\": \"\ud83d\udc39\",\n    \"hand_with_fingers_splayed\": \"\ud83d\udd90\",\n    \"hand_with_fingers_splayed_dark_skin_tone\": \"\ud83d\udd90\ud83c\udfff\",\n    \"hand_with_fingers_splayed_light_skin_tone\": \"\ud83d\udd90\ud83c\udffb\",\n    \"hand_with_fingers_splayed_medium-dark_skin_tone\": \"\ud83d\udd90\ud83c\udffe\",\n    \"hand_with_fingers_splayed_medium-light_skin_tone\": \"\ud83d\udd90\ud83c\udffc\",\n    \"hand_with_fingers_splayed_medium_skin_tone\": \"\ud83d\udd90\ud83c\udffd\",\n    \"handbag\": \"\ud83d\udc5c\",\n    \"handshake\": \"\ud83e\udd1d\",\n    \"hatching_chick\": \"\ud83d\udc23\",\n    \"headphone\": \"\ud83c\udfa7\",\n    \"hear-no-evil_monkey\": \"\ud83d\ude49\",\n    \"heart_decoration\": \"\ud83d\udc9f\",\n    \"heart_suit\": \"\u2665\",\n    \"heart_with_arrow\": \"\ud83d\udc98\",\n    \"heart_with_ribbon\": \"\ud83d\udc9d\",\n    \"heavy_check_mark\": \"\u2714\",\n    \"heavy_division_sign\": \"\u2797\",\n    \"heavy_dollar_sign\": \"\ud83d\udcb2\",\n    \"heavy_heart_exclamation\": \"\u2763\",\n    \"heavy_large_circle\": \"\u2b55\",\n    \"heavy_minus_sign\": \"\u2796\",\n    \"heavy_multiplication_x\": \"\u2716\",\n    \"heavy_plus_sign\": \"\u2795\",\n    \"hedgehog\": \"\ud83e\udd94\",\n    \"helicopter\": \"\ud83d\ude81\",\n    \"herb\": \"\ud83c\udf3f\",\n    \"hibiscus\": \"\ud83c\udf3a\",\n    \"high-heeled_shoe\": \"\ud83d\udc60\",\n    \"high-speed_train\": \"\ud83d\ude84\",\n    \"high_voltage\": \"\u26a1\",\n    \"hiking_boot\": \"\ud83e\udd7e\",\n    \"hindu_temple\": \"\ud83d\uded5\",\n    \"hippopotamus\": \"\ud83e\udd9b\",\n    \"hole\": \"\ud83d\udd73\",\n    \"honey_pot\": \"\ud83c\udf6f\",\n    \"honeybee\": \"\ud83d\udc1d\",\n    \"horizontal_traffic_light\": \"\ud83d\udea5\",\n    \"horse\": \"\ud83d\udc34\",\n    \"horse_face\": \"\ud83d\udc34\",\n    \"horse_racing\": \"\ud83c\udfc7\",\n    \"horse_racing_dark_skin_tone\": \"\ud83c\udfc7\ud83c\udfff\",\n    \"horse_racing_light_skin_tone\": \"\ud83c\udfc7\ud83c\udffb\",\n    \"horse_racing_medium-dark_skin_tone\": \"\ud83c\udfc7\ud83c\udffe\",\n    \"horse_racing_medium-light_skin_tone\": \"\ud83c\udfc7\ud83c\udffc\",\n    \"horse_racing_medium_skin_tone\": \"\ud83c\udfc7\ud83c\udffd\",\n    \"hospital\": \"\ud83c\udfe5\",\n    \"hot_beverage\": \"\u2615\",\n    \"hot_dog\": \"\ud83c\udf2d\",\n    \"hot_face\": \"\ud83e\udd75\",\n    \"hot_pepper\": \"\ud83c\udf36\",\n    \"hot_springs\": \"\u2668\",\n    \"hotel\": \"\ud83c\udfe8\",\n    \"hourglass_done\": \"\u231b\",\n    \"hourglass_not_done\": \"\u23f3\",\n    \"house\": \"\ud83c\udfe0\",\n    \"house_with_garden\": \"\ud83c\udfe1\",\n    \"houses\": \"\ud83c\udfd8\",\n    \"hugging_face\": \"\ud83e\udd17\",\n    \"hundred_points\": \"\ud83d\udcaf\",\n    \"hushed_face\": \"\ud83d\ude2f\",\n    \"ice\": \"\ud83e\uddca\",\n    \"ice_cream\": \"\ud83c\udf68\",\n    \"ice_hockey\": \"\ud83c\udfd2\",\n    \"ice_skate\": \"\u26f8\",\n    \"inbox_tray\": \"\ud83d\udce5\",\n    \"incoming_envelope\": \"\ud83d\udce8\",\n    \"index_pointing_up\": \"\u261d\",\n    \"index_pointing_up_dark_skin_tone\": \"\u261d\ud83c\udfff\",\n    \"index_pointing_up_light_skin_tone\": \"\u261d\ud83c\udffb\",\n    \"index_pointing_up_medium-dark_skin_tone\": \"\u261d\ud83c\udffe\",\n    \"index_pointing_up_medium-light_skin_tone\": \"\u261d\ud83c\udffc\",\n    \"index_pointing_up_medium_skin_tone\": \"\u261d\ud83c\udffd\",\n    \"infinity\": \"\u267e\",\n    \"information\": \"\u2139\",\n    \"input_latin_letters\": \"\ud83d\udd24\",\n    \"input_latin_lowercase\": \"\ud83d\udd21\",\n    \"input_latin_uppercase\": \"\ud83d\udd20\",\n    \"input_numbers\": \"\ud83d\udd22\",\n    \"input_symbols\": \"\ud83d\udd23\",\n    \"jack-o-lantern\": \"\ud83c\udf83\",\n    \"jeans\": \"\ud83d\udc56\",\n    \"jigsaw\": \"\ud83e\udde9\",\n    \"joker\": \"\ud83c\udccf\",\n    \"joystick\": \"\ud83d\udd79\",\n    \"kaaba\": \"\ud83d\udd4b\",\n    \"kangaroo\": \"\ud83e\udd98\",\n    \"key\": \"\ud83d\udd11\",\n    \"keyboard\": \"\u2328\",\n    \"keycap_#\": \"#\ufe0f\u20e3\",\n    \"keycap_*\": \"*\ufe0f\u20e3\",\n    \"keycap_0\": \"0\ufe0f\u20e3\",\n    \"keycap_1\": \"1\ufe0f\u20e3\",\n    \"keycap_10\": \"\ud83d\udd1f\",\n    \"keycap_2\": \"2\ufe0f\u20e3\",\n    \"keycap_3\": \"3\ufe0f\u20e3\",\n    \"keycap_4\": \"4\ufe0f\u20e3\",\n    \"keycap_5\": \"5\ufe0f\u20e3\",\n    \"keycap_6\": \"6\ufe0f\u20e3\",\n    \"keycap_7\": \"7\ufe0f\u20e3\",\n    \"keycap_8\": \"8\ufe0f\u20e3\",\n    \"keycap_9\": \"9\ufe0f\u20e3\",\n    \"kick_scooter\": \"\ud83d\udef4\",\n    \"kimono\": \"\ud83d\udc58\",\n    \"kiss\": \"\ud83d\udc8b\",\n    \"kiss_man_man\": \"\ud83d\udc68\\u200d\u2764\ufe0f\\u200d\ud83d\udc8b\\u200d\ud83d\udc68\",\n    \"kiss_mark\": \"\ud83d\udc8b\",\n    \"kiss_woman_man\": \"\ud83d\udc69\\u200d\u2764\ufe0f\\u200d\ud83d\udc8b\\u200d\ud83d\udc68\",\n    \"kiss_woman_woman\": \"\ud83d\udc69\\u200d\u2764\ufe0f\\u200d\ud83d\udc8b\\u200d\ud83d\udc69\",\n    \"kissing_cat_face\": \"\ud83d\ude3d\",\n    \"kissing_face\": \"\ud83d\ude17\",\n    \"kissing_face_with_closed_eyes\": \"\ud83d\ude1a\",\n    \"kissing_face_with_smiling_eyes\": \"\ud83d\ude19\",\n    \"kitchen_knife\": \"\ud83d\udd2a\",\n    \"kite\": \"\ud83e\ude81\",\n    \"kiwi_fruit\": \"\ud83e\udd5d\",\n    \"koala\": \"\ud83d\udc28\",\n    \"lab_coat\": \"\ud83e\udd7c\",\n    \"label\": \"\ud83c\udff7\",\n    \"lacrosse\": \"\ud83e\udd4d\",\n    \"lady_beetle\": \"\ud83d\udc1e\",\n    \"laptop_computer\": \"\ud83d\udcbb\",\n    \"large_blue_diamond\": \"\ud83d\udd37\",\n    \"large_orange_diamond\": \"\ud83d\udd36\",\n    \"last_quarter_moon\": \"\ud83c\udf17\",\n    \"last_quarter_moon_face\": \"\ud83c\udf1c\",\n    \"last_track_button\": \"\u23ee\",\n    \"latin_cross\": \"\u271d\",\n    \"leaf_fluttering_in_wind\": \"\ud83c\udf43\",\n    \"leafy_green\": \"\ud83e\udd6c\",\n    \"ledger\": \"\ud83d\udcd2\",\n    \"left-facing_fist\": \"\ud83e\udd1b\",\n    \"left-facing_fist_dark_skin_tone\": \"\ud83e\udd1b\ud83c\udfff\",\n    \"left-facing_fist_light_skin_tone\": \"\ud83e\udd1b\ud83c\udffb\",\n    \"left-facing_fist_medium-dark_skin_tone\": \"\ud83e\udd1b\ud83c\udffe\",\n    \"left-facing_fist_medium-light_skin_tone\": \"\ud83e\udd1b\ud83c\udffc\",\n    \"left-facing_fist_medium_skin_tone\": \"\ud83e\udd1b\ud83c\udffd\",\n    \"left-right_arrow\": \"\u2194\",\n    \"left_arrow\": \"\u2b05\",\n    \"left_arrow_curving_right\": \"\u21aa\",\n    \"left_luggage\": \"\ud83d\udec5\",\n    \"left_speech_bubble\": \"\ud83d\udde8\",\n    \"leg\": \"\ud83e\uddb5\",\n    \"lemon\": \"\ud83c\udf4b\",\n    \"leopard\": \"\ud83d\udc06\",\n    \"level_slider\": \"\ud83c\udf9a\",\n    \"light_bulb\": \"\ud83d\udca1\",\n    \"light_rail\": \"\ud83d\ude88\",\n    \"link\": \"\ud83d\udd17\",\n    \"linked_paperclips\": \"\ud83d\udd87\",\n    \"lion_face\": \"\ud83e\udd81\",\n    \"lipstick\": \"\ud83d\udc84\",\n    \"litter_in_bin_sign\": \"\ud83d\udeae\",\n    \"lizard\": \"\ud83e\udd8e\",\n    \"llama\": \"\ud83e\udd99\",\n    \"lobster\": \"\ud83e\udd9e\",\n    \"locked\": \"\ud83d\udd12\",\n    \"locked_with_key\": \"\ud83d\udd10\",\n    \"locked_with_pen\": \"\ud83d\udd0f\",\n    \"locomotive\": \"\ud83d\ude82\",\n    \"lollipop\": \"\ud83c\udf6d\",\n    \"lotion_bottle\": \"\ud83e\uddf4\",\n    \"loudly_crying_face\": \"\ud83d\ude2d\",\n    \"loudspeaker\": \"\ud83d\udce2\",\n    \"love-you_gesture\": \"\ud83e\udd1f\",\n    \"love-you_gesture_dark_skin_tone\": \"\ud83e\udd1f\ud83c\udfff\",\n    \"love-you_gesture_light_skin_tone\": \"\ud83e\udd1f\ud83c\udffb\",\n    \"love-you_gesture_medium-dark_skin_tone\": \"\ud83e\udd1f\ud83c\udffe\",\n    \"love-you_gesture_medium-light_skin_tone\": \"\ud83e\udd1f\ud83c\udffc\",\n    \"love-you_gesture_medium_skin_tone\": \"\ud83e\udd1f\ud83c\udffd\",\n    \"love_hotel\": \"\ud83c\udfe9\",\n    \"love_letter\": \"\ud83d\udc8c\",\n    \"luggage\": \"\ud83e\uddf3\",\n    \"lying_face\": \"\ud83e\udd25\",\n    \"mage\": \"\ud83e\uddd9\",\n    \"mage_dark_skin_tone\": \"\ud83e\uddd9\ud83c\udfff\",\n    \"mage_light_skin_tone\": \"\ud83e\uddd9\ud83c\udffb\",\n    \"mage_medium-dark_skin_tone\": \"\ud83e\uddd9\ud83c\udffe\",\n    \"mage_medium-light_skin_tone\": \"\ud83e\uddd9\ud83c\udffc\",\n    \"mage_medium_skin_tone\": \"\ud83e\uddd9\ud83c\udffd\",\n    \"magnet\": \"\ud83e\uddf2\",\n    \"magnifying_glass_tilted_left\": \"\ud83d\udd0d\",\n    \"magnifying_glass_tilted_right\": \"\ud83d\udd0e\",\n    \"mahjong_red_dragon\": \"\ud83c\udc04\",\n    \"male_sign\": \"\u2642\",\n    \"man\": \"\ud83d\udc68\",\n    \"man_and_woman_holding_hands\": \"\ud83d\udc6b\",\n    \"man_artist\": \"\ud83d\udc68\\u200d\ud83c\udfa8\",\n    \"man_artist_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83c\udfa8\",\n    \"man_artist_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83c\udfa8\",\n    \"man_artist_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83c\udfa8\",\n    \"man_artist_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83c\udfa8\",\n    \"man_artist_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83c\udfa8\",\n    \"man_astronaut\": \"\ud83d\udc68\\u200d\ud83d\ude80\",\n    \"man_astronaut_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83d\ude80\",\n    \"man_astronaut_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83d\ude80\",\n    \"man_astronaut_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83d\ude80\",\n    \"man_astronaut_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83d\ude80\",\n    \"man_astronaut_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83d\ude80\",\n    \"man_biking\": \"\ud83d\udeb4\\u200d\u2642\ufe0f\",\n    \"man_biking_dark_skin_tone\": \"\ud83d\udeb4\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_biking_light_skin_tone\": \"\ud83d\udeb4\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_biking_medium-dark_skin_tone\": \"\ud83d\udeb4\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_biking_medium-light_skin_tone\": \"\ud83d\udeb4\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_biking_medium_skin_tone\": \"\ud83d\udeb4\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_bouncing_ball\": \"\u26f9\ufe0f\\u200d\u2642\ufe0f\",\n    \"man_bouncing_ball_dark_skin_tone\": \"\u26f9\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_bouncing_ball_light_skin_tone\": \"\u26f9\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_bouncing_ball_medium-dark_skin_tone\": \"\u26f9\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_bouncing_ball_medium-light_skin_tone\": \"\u26f9\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_bouncing_ball_medium_skin_tone\": \"\u26f9\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_bowing\": \"\ud83d\ude47\\u200d\u2642\ufe0f\",\n    \"man_bowing_dark_skin_tone\": \"\ud83d\ude47\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_bowing_light_skin_tone\": \"\ud83d\ude47\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_bowing_medium-dark_skin_tone\": \"\ud83d\ude47\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_bowing_medium-light_skin_tone\": \"\ud83d\ude47\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_bowing_medium_skin_tone\": \"\ud83d\ude47\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_cartwheeling\": \"\ud83e\udd38\\u200d\u2642\ufe0f\",\n    \"man_cartwheeling_dark_skin_tone\": \"\ud83e\udd38\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_cartwheeling_light_skin_tone\": \"\ud83e\udd38\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_cartwheeling_medium-dark_skin_tone\": \"\ud83e\udd38\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_cartwheeling_medium-light_skin_tone\": \"\ud83e\udd38\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_cartwheeling_medium_skin_tone\": \"\ud83e\udd38\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_climbing\": \"\ud83e\uddd7\\u200d\u2642\ufe0f\",\n    \"man_climbing_dark_skin_tone\": \"\ud83e\uddd7\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_climbing_light_skin_tone\": \"\ud83e\uddd7\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_climbing_medium-dark_skin_tone\": \"\ud83e\uddd7\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_climbing_medium-light_skin_tone\": \"\ud83e\uddd7\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_climbing_medium_skin_tone\": \"\ud83e\uddd7\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_construction_worker\": \"\ud83d\udc77\\u200d\u2642\ufe0f\",\n    \"man_construction_worker_dark_skin_tone\": \"\ud83d\udc77\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_construction_worker_light_skin_tone\": \"\ud83d\udc77\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_construction_worker_medium-dark_skin_tone\": \"\ud83d\udc77\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_construction_worker_medium-light_skin_tone\": \"\ud83d\udc77\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_construction_worker_medium_skin_tone\": \"\ud83d\udc77\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_cook\": \"\ud83d\udc68\\u200d\ud83c\udf73\",\n    \"man_cook_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83c\udf73\",\n    \"man_cook_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83c\udf73\",\n    \"man_cook_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83c\udf73\",\n    \"man_cook_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83c\udf73\",\n    \"man_cook_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83c\udf73\",\n    \"man_dancing\": \"\ud83d\udd7a\",\n    \"man_dancing_dark_skin_tone\": \"\ud83d\udd7a\ud83c\udfff\",\n    \"man_dancing_light_skin_tone\": \"\ud83d\udd7a\ud83c\udffb\",\n    \"man_dancing_medium-dark_skin_tone\": \"\ud83d\udd7a\ud83c\udffe\",\n    \"man_dancing_medium-light_skin_tone\": \"\ud83d\udd7a\ud83c\udffc\",\n    \"man_dancing_medium_skin_tone\": \"\ud83d\udd7a\ud83c\udffd\",\n    \"man_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\",\n    \"man_detective\": \"\ud83d\udd75\ufe0f\\u200d\u2642\ufe0f\",\n    \"man_detective_dark_skin_tone\": \"\ud83d\udd75\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_detective_light_skin_tone\": \"\ud83d\udd75\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_detective_medium-dark_skin_tone\": \"\ud83d\udd75\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_detective_medium-light_skin_tone\": \"\ud83d\udd75\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_detective_medium_skin_tone\": \"\ud83d\udd75\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_elf\": \"\ud83e\udddd\\u200d\u2642\ufe0f\",\n    \"man_elf_dark_skin_tone\": \"\ud83e\udddd\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_elf_light_skin_tone\": \"\ud83e\udddd\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_elf_medium-dark_skin_tone\": \"\ud83e\udddd\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_elf_medium-light_skin_tone\": \"\ud83e\udddd\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_elf_medium_skin_tone\": \"\ud83e\udddd\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_facepalming\": \"\ud83e\udd26\\u200d\u2642\ufe0f\",\n    \"man_facepalming_dark_skin_tone\": \"\ud83e\udd26\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_facepalming_light_skin_tone\": \"\ud83e\udd26\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_facepalming_medium-dark_skin_tone\": \"\ud83e\udd26\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_facepalming_medium-light_skin_tone\": \"\ud83e\udd26\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_facepalming_medium_skin_tone\": \"\ud83e\udd26\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_factory_worker\": \"\ud83d\udc68\\u200d\ud83c\udfed\",\n    \"man_factory_worker_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83c\udfed\",\n    \"man_factory_worker_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83c\udfed\",\n    \"man_factory_worker_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83c\udfed\",\n    \"man_factory_worker_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83c\udfed\",\n    \"man_factory_worker_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83c\udfed\",\n    \"man_fairy\": \"\ud83e\uddda\\u200d\u2642\ufe0f\",\n    \"man_fairy_dark_skin_tone\": \"\ud83e\uddda\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_fairy_light_skin_tone\": \"\ud83e\uddda\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_fairy_medium-dark_skin_tone\": \"\ud83e\uddda\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_fairy_medium-light_skin_tone\": \"\ud83e\uddda\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_fairy_medium_skin_tone\": \"\ud83e\uddda\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_farmer\": \"\ud83d\udc68\\u200d\ud83c\udf3e\",\n    \"man_farmer_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83c\udf3e\",\n    \"man_farmer_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83c\udf3e\",\n    \"man_farmer_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83c\udf3e\",\n    \"man_farmer_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83c\udf3e\",\n    \"man_farmer_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83c\udf3e\",\n    \"man_firefighter\": \"\ud83d\udc68\\u200d\ud83d\ude92\",\n    \"man_firefighter_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83d\ude92\",\n    \"man_firefighter_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83d\ude92\",\n    \"man_firefighter_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83d\ude92\",\n    \"man_firefighter_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83d\ude92\",\n    \"man_firefighter_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83d\ude92\",\n    \"man_frowning\": \"\ud83d\ude4d\\u200d\u2642\ufe0f\",\n    \"man_frowning_dark_skin_tone\": \"\ud83d\ude4d\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_frowning_light_skin_tone\": \"\ud83d\ude4d\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_frowning_medium-dark_skin_tone\": \"\ud83d\ude4d\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_frowning_medium-light_skin_tone\": \"\ud83d\ude4d\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_frowning_medium_skin_tone\": \"\ud83d\ude4d\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_genie\": \"\ud83e\uddde\\u200d\u2642\ufe0f\",\n    \"man_gesturing_no\": \"\ud83d\ude45\\u200d\u2642\ufe0f\",\n    \"man_gesturing_no_dark_skin_tone\": \"\ud83d\ude45\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_gesturing_no_light_skin_tone\": \"\ud83d\ude45\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_gesturing_no_medium-dark_skin_tone\": \"\ud83d\ude45\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_gesturing_no_medium-light_skin_tone\": \"\ud83d\ude45\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_gesturing_no_medium_skin_tone\": \"\ud83d\ude45\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_gesturing_ok\": \"\ud83d\ude46\\u200d\u2642\ufe0f\",\n    \"man_gesturing_ok_dark_skin_tone\": \"\ud83d\ude46\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_gesturing_ok_light_skin_tone\": \"\ud83d\ude46\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_gesturing_ok_medium-dark_skin_tone\": \"\ud83d\ude46\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_gesturing_ok_medium-light_skin_tone\": \"\ud83d\ude46\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_gesturing_ok_medium_skin_tone\": \"\ud83d\ude46\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_getting_haircut\": \"\ud83d\udc87\\u200d\u2642\ufe0f\",\n    \"man_getting_haircut_dark_skin_tone\": \"\ud83d\udc87\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_getting_haircut_light_skin_tone\": \"\ud83d\udc87\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_getting_haircut_medium-dark_skin_tone\": \"\ud83d\udc87\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_getting_haircut_medium-light_skin_tone\": \"\ud83d\udc87\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_getting_haircut_medium_skin_tone\": \"\ud83d\udc87\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_getting_massage\": \"\ud83d\udc86\\u200d\u2642\ufe0f\",\n    \"man_getting_massage_dark_skin_tone\": \"\ud83d\udc86\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_getting_massage_light_skin_tone\": \"\ud83d\udc86\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_getting_massage_medium-dark_skin_tone\": \"\ud83d\udc86\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_getting_massage_medium-light_skin_tone\": \"\ud83d\udc86\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_getting_massage_medium_skin_tone\": \"\ud83d\udc86\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_golfing\": \"\ud83c\udfcc\ufe0f\\u200d\u2642\ufe0f\",\n    \"man_golfing_dark_skin_tone\": \"\ud83c\udfcc\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_golfing_light_skin_tone\": \"\ud83c\udfcc\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_golfing_medium-dark_skin_tone\": \"\ud83c\udfcc\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_golfing_medium-light_skin_tone\": \"\ud83c\udfcc\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_golfing_medium_skin_tone\": \"\ud83c\udfcc\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_guard\": \"\ud83d\udc82\\u200d\u2642\ufe0f\",\n    \"man_guard_dark_skin_tone\": \"\ud83d\udc82\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_guard_light_skin_tone\": \"\ud83d\udc82\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_guard_medium-dark_skin_tone\": \"\ud83d\udc82\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_guard_medium-light_skin_tone\": \"\ud83d\udc82\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_guard_medium_skin_tone\": \"\ud83d\udc82\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_health_worker\": \"\ud83d\udc68\\u200d\u2695\ufe0f\",\n    \"man_health_worker_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\u2695\ufe0f\",\n    \"man_health_worker_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\u2695\ufe0f\",\n    \"man_health_worker_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\u2695\ufe0f\",\n    \"man_health_worker_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\u2695\ufe0f\",\n    \"man_health_worker_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\u2695\ufe0f\",\n    \"man_in_lotus_position\": \"\ud83e\uddd8\\u200d\u2642\ufe0f\",\n    \"man_in_lotus_position_dark_skin_tone\": \"\ud83e\uddd8\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_in_lotus_position_light_skin_tone\": \"\ud83e\uddd8\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_in_lotus_position_medium-dark_skin_tone\": \"\ud83e\uddd8\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_in_lotus_position_medium-light_skin_tone\": \"\ud83e\uddd8\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_in_lotus_position_medium_skin_tone\": \"\ud83e\uddd8\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_in_manual_wheelchair\": \"\ud83d\udc68\\u200d\ud83e\uddbd\",\n    \"man_in_motorized_wheelchair\": \"\ud83d\udc68\\u200d\ud83e\uddbc\",\n    \"man_in_steamy_room\": \"\ud83e\uddd6\\u200d\u2642\ufe0f\",\n    \"man_in_steamy_room_dark_skin_tone\": \"\ud83e\uddd6\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_in_steamy_room_light_skin_tone\": \"\ud83e\uddd6\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_in_steamy_room_medium-dark_skin_tone\": \"\ud83e\uddd6\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_in_steamy_room_medium-light_skin_tone\": \"\ud83e\uddd6\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_in_steamy_room_medium_skin_tone\": \"\ud83e\uddd6\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_in_suit_levitating\": \"\ud83d\udd74\",\n    \"man_in_suit_levitating_dark_skin_tone\": \"\ud83d\udd74\ud83c\udfff\",\n    \"man_in_suit_levitating_light_skin_tone\": \"\ud83d\udd74\ud83c\udffb\",\n    \"man_in_suit_levitating_medium-dark_skin_tone\": \"\ud83d\udd74\ud83c\udffe\",\n    \"man_in_suit_levitating_medium-light_skin_tone\": \"\ud83d\udd74\ud83c\udffc\",\n    \"man_in_suit_levitating_medium_skin_tone\": \"\ud83d\udd74\ud83c\udffd\",\n    \"man_in_tuxedo\": \"\ud83e\udd35\",\n    \"man_in_tuxedo_dark_skin_tone\": \"\ud83e\udd35\ud83c\udfff\",\n    \"man_in_tuxedo_light_skin_tone\": \"\ud83e\udd35\ud83c\udffb\",\n    \"man_in_tuxedo_medium-dark_skin_tone\": \"\ud83e\udd35\ud83c\udffe\",\n    \"man_in_tuxedo_medium-light_skin_tone\": \"\ud83e\udd35\ud83c\udffc\",\n    \"man_in_tuxedo_medium_skin_tone\": \"\ud83e\udd35\ud83c\udffd\",\n    \"man_judge\": \"\ud83d\udc68\\u200d\u2696\ufe0f\",\n    \"man_judge_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\u2696\ufe0f\",\n    \"man_judge_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\u2696\ufe0f\",\n    \"man_judge_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\u2696\ufe0f\",\n    \"man_judge_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\u2696\ufe0f\",\n    \"man_judge_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\u2696\ufe0f\",\n    \"man_juggling\": \"\ud83e\udd39\\u200d\u2642\ufe0f\",\n    \"man_juggling_dark_skin_tone\": \"\ud83e\udd39\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_juggling_light_skin_tone\": \"\ud83e\udd39\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_juggling_medium-dark_skin_tone\": \"\ud83e\udd39\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_juggling_medium-light_skin_tone\": \"\ud83e\udd39\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_juggling_medium_skin_tone\": \"\ud83e\udd39\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_lifting_weights\": \"\ud83c\udfcb\ufe0f\\u200d\u2642\ufe0f\",\n    \"man_lifting_weights_dark_skin_tone\": \"\ud83c\udfcb\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_lifting_weights_light_skin_tone\": \"\ud83c\udfcb\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_lifting_weights_medium-dark_skin_tone\": \"\ud83c\udfcb\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_lifting_weights_medium-light_skin_tone\": \"\ud83c\udfcb\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_lifting_weights_medium_skin_tone\": \"\ud83c\udfcb\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\",\n    \"man_mage\": \"\ud83e\uddd9\\u200d\u2642\ufe0f\",\n    \"man_mage_dark_skin_tone\": \"\ud83e\uddd9\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_mage_light_skin_tone\": \"\ud83e\uddd9\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_mage_medium-dark_skin_tone\": \"\ud83e\uddd9\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_mage_medium-light_skin_tone\": \"\ud83e\uddd9\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_mage_medium_skin_tone\": \"\ud83e\uddd9\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_mechanic\": \"\ud83d\udc68\\u200d\ud83d\udd27\",\n    \"man_mechanic_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83d\udd27\",\n    \"man_mechanic_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83d\udd27\",\n    \"man_mechanic_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83d\udd27\",\n    \"man_mechanic_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83d\udd27\",\n    \"man_mechanic_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83d\udd27\",\n    \"man_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\",\n    \"man_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\",\n    \"man_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\",\n    \"man_mountain_biking\": \"\ud83d\udeb5\\u200d\u2642\ufe0f\",\n    \"man_mountain_biking_dark_skin_tone\": \"\ud83d\udeb5\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_mountain_biking_light_skin_tone\": \"\ud83d\udeb5\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_mountain_biking_medium-dark_skin_tone\": \"\ud83d\udeb5\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_mountain_biking_medium-light_skin_tone\": \"\ud83d\udeb5\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_mountain_biking_medium_skin_tone\": \"\ud83d\udeb5\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_office_worker\": \"\ud83d\udc68\\u200d\ud83d\udcbc\",\n    \"man_office_worker_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83d\udcbc\",\n    \"man_office_worker_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83d\udcbc\",\n    \"man_office_worker_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83d\udcbc\",\n    \"man_office_worker_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83d\udcbc\",\n    \"man_office_worker_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83d\udcbc\",\n    \"man_pilot\": \"\ud83d\udc68\\u200d\u2708\ufe0f\",\n    \"man_pilot_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\u2708\ufe0f\",\n    \"man_pilot_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\u2708\ufe0f\",\n    \"man_pilot_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\u2708\ufe0f\",\n    \"man_pilot_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\u2708\ufe0f\",\n    \"man_pilot_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\u2708\ufe0f\",\n    \"man_playing_handball\": \"\ud83e\udd3e\\u200d\u2642\ufe0f\",\n    \"man_playing_handball_dark_skin_tone\": \"\ud83e\udd3e\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_playing_handball_light_skin_tone\": \"\ud83e\udd3e\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_playing_handball_medium-dark_skin_tone\": \"\ud83e\udd3e\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_playing_handball_medium-light_skin_tone\": \"\ud83e\udd3e\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_playing_handball_medium_skin_tone\": \"\ud83e\udd3e\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_playing_water_polo\": \"\ud83e\udd3d\\u200d\u2642\ufe0f\",\n    \"man_playing_water_polo_dark_skin_tone\": \"\ud83e\udd3d\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_playing_water_polo_light_skin_tone\": \"\ud83e\udd3d\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_playing_water_polo_medium-dark_skin_tone\": \"\ud83e\udd3d\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_playing_water_polo_medium-light_skin_tone\": \"\ud83e\udd3d\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_playing_water_polo_medium_skin_tone\": \"\ud83e\udd3d\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_police_officer\": \"\ud83d\udc6e\\u200d\u2642\ufe0f\",\n    \"man_police_officer_dark_skin_tone\": \"\ud83d\udc6e\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_police_officer_light_skin_tone\": \"\ud83d\udc6e\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_police_officer_medium-dark_skin_tone\": \"\ud83d\udc6e\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_police_officer_medium-light_skin_tone\": \"\ud83d\udc6e\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_police_officer_medium_skin_tone\": \"\ud83d\udc6e\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_pouting\": \"\ud83d\ude4e\\u200d\u2642\ufe0f\",\n    \"man_pouting_dark_skin_tone\": \"\ud83d\ude4e\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_pouting_light_skin_tone\": \"\ud83d\ude4e\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_pouting_medium-dark_skin_tone\": \"\ud83d\ude4e\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_pouting_medium-light_skin_tone\": \"\ud83d\ude4e\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_pouting_medium_skin_tone\": \"\ud83d\ude4e\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_raising_hand\": \"\ud83d\ude4b\\u200d\u2642\ufe0f\",\n    \"man_raising_hand_dark_skin_tone\": \"\ud83d\ude4b\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_raising_hand_light_skin_tone\": \"\ud83d\ude4b\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_raising_hand_medium-dark_skin_tone\": \"\ud83d\ude4b\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_raising_hand_medium-light_skin_tone\": \"\ud83d\ude4b\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_raising_hand_medium_skin_tone\": \"\ud83d\ude4b\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_rowing_boat\": \"\ud83d\udea3\\u200d\u2642\ufe0f\",\n    \"man_rowing_boat_dark_skin_tone\": \"\ud83d\udea3\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_rowing_boat_light_skin_tone\": \"\ud83d\udea3\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_rowing_boat_medium-dark_skin_tone\": \"\ud83d\udea3\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_rowing_boat_medium-light_skin_tone\": \"\ud83d\udea3\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_rowing_boat_medium_skin_tone\": \"\ud83d\udea3\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_running\": \"\ud83c\udfc3\\u200d\u2642\ufe0f\",\n    \"man_running_dark_skin_tone\": \"\ud83c\udfc3\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_running_light_skin_tone\": \"\ud83c\udfc3\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_running_medium-dark_skin_tone\": \"\ud83c\udfc3\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_running_medium-light_skin_tone\": \"\ud83c\udfc3\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_running_medium_skin_tone\": \"\ud83c\udfc3\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_scientist\": \"\ud83d\udc68\\u200d\ud83d\udd2c\",\n    \"man_scientist_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83d\udd2c\",\n    \"man_scientist_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83d\udd2c\",\n    \"man_scientist_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83d\udd2c\",\n    \"man_scientist_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83d\udd2c\",\n    \"man_scientist_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83d\udd2c\",\n    \"man_shrugging\": \"\ud83e\udd37\\u200d\u2642\ufe0f\",\n    \"man_shrugging_dark_skin_tone\": \"\ud83e\udd37\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_shrugging_light_skin_tone\": \"\ud83e\udd37\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_shrugging_medium-dark_skin_tone\": \"\ud83e\udd37\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_shrugging_medium-light_skin_tone\": \"\ud83e\udd37\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_shrugging_medium_skin_tone\": \"\ud83e\udd37\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_singer\": \"\ud83d\udc68\\u200d\ud83c\udfa4\",\n    \"man_singer_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83c\udfa4\",\n    \"man_singer_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83c\udfa4\",\n    \"man_singer_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83c\udfa4\",\n    \"man_singer_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83c\udfa4\",\n    \"man_singer_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83c\udfa4\",\n    \"man_student\": \"\ud83d\udc68\\u200d\ud83c\udf93\",\n    \"man_student_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83c\udf93\",\n    \"man_student_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83c\udf93\",\n    \"man_student_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83c\udf93\",\n    \"man_student_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83c\udf93\",\n    \"man_student_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83c\udf93\",\n    \"man_surfing\": \"\ud83c\udfc4\\u200d\u2642\ufe0f\",\n    \"man_surfing_dark_skin_tone\": \"\ud83c\udfc4\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_surfing_light_skin_tone\": \"\ud83c\udfc4\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_surfing_medium-dark_skin_tone\": \"\ud83c\udfc4\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_surfing_medium-light_skin_tone\": \"\ud83c\udfc4\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_surfing_medium_skin_tone\": \"\ud83c\udfc4\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_swimming\": \"\ud83c\udfca\\u200d\u2642\ufe0f\",\n    \"man_swimming_dark_skin_tone\": \"\ud83c\udfca\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_swimming_light_skin_tone\": \"\ud83c\udfca\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_swimming_medium-dark_skin_tone\": \"\ud83c\udfca\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_swimming_medium-light_skin_tone\": \"\ud83c\udfca\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_swimming_medium_skin_tone\": \"\ud83c\udfca\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_teacher\": \"\ud83d\udc68\\u200d\ud83c\udfeb\",\n    \"man_teacher_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83c\udfeb\",\n    \"man_teacher_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83c\udfeb\",\n    \"man_teacher_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83c\udfeb\",\n    \"man_teacher_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83c\udfeb\",\n    \"man_teacher_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83c\udfeb\",\n    \"man_technologist\": \"\ud83d\udc68\\u200d\ud83d\udcbb\",\n    \"man_technologist_dark_skin_tone\": \"\ud83d\udc68\ud83c\udfff\\u200d\ud83d\udcbb\",\n    \"man_technologist_light_skin_tone\": \"\ud83d\udc68\ud83c\udffb\\u200d\ud83d\udcbb\",\n    \"man_technologist_medium-dark_skin_tone\": \"\ud83d\udc68\ud83c\udffe\\u200d\ud83d\udcbb\",\n    \"man_technologist_medium-light_skin_tone\": \"\ud83d\udc68\ud83c\udffc\\u200d\ud83d\udcbb\",\n    \"man_technologist_medium_skin_tone\": \"\ud83d\udc68\ud83c\udffd\\u200d\ud83d\udcbb\",\n    \"man_tipping_hand\": \"\ud83d\udc81\\u200d\u2642\ufe0f\",\n    \"man_tipping_hand_dark_skin_tone\": \"\ud83d\udc81\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_tipping_hand_light_skin_tone\": \"\ud83d\udc81\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_tipping_hand_medium-dark_skin_tone\": \"\ud83d\udc81\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_tipping_hand_medium-light_skin_tone\": \"\ud83d\udc81\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_tipping_hand_medium_skin_tone\": \"\ud83d\udc81\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_vampire\": \"\ud83e\udddb\\u200d\u2642\ufe0f\",\n    \"man_vampire_dark_skin_tone\": \"\ud83e\udddb\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_vampire_light_skin_tone\": \"\ud83e\udddb\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_vampire_medium-dark_skin_tone\": \"\ud83e\udddb\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_vampire_medium-light_skin_tone\": \"\ud83e\udddb\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_vampire_medium_skin_tone\": \"\ud83e\udddb\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_walking\": \"\ud83d\udeb6\\u200d\u2642\ufe0f\",\n    \"man_walking_dark_skin_tone\": \"\ud83d\udeb6\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_walking_light_skin_tone\": \"\ud83d\udeb6\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_walking_medium-dark_skin_tone\": \"\ud83d\udeb6\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_walking_medium-light_skin_tone\": \"\ud83d\udeb6\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_walking_medium_skin_tone\": \"\ud83d\udeb6\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_wearing_turban\": \"\ud83d\udc73\\u200d\u2642\ufe0f\",\n    \"man_wearing_turban_dark_skin_tone\": \"\ud83d\udc73\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"man_wearing_turban_light_skin_tone\": \"\ud83d\udc73\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"man_wearing_turban_medium-dark_skin_tone\": \"\ud83d\udc73\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"man_wearing_turban_medium-light_skin_tone\": \"\ud83d\udc73\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"man_wearing_turban_medium_skin_tone\": \"\ud83d\udc73\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"man_with_probing_cane\": \"\ud83d\udc68\\u200d\ud83e\uddaf\",\n    \"man_with_chinese_cap\": \"\ud83d\udc72\",\n    \"man_with_chinese_cap_dark_skin_tone\": \"\ud83d\udc72\ud83c\udfff\",\n    \"man_with_chinese_cap_light_skin_tone\": \"\ud83d\udc72\ud83c\udffb\",\n    \"man_with_chinese_cap_medium-dark_skin_tone\": \"\ud83d\udc72\ud83c\udffe\",\n    \"man_with_chinese_cap_medium-light_skin_tone\": \"\ud83d\udc72\ud83c\udffc\",\n    \"man_with_chinese_cap_medium_skin_tone\": \"\ud83d\udc72\ud83c\udffd\",\n    \"man_zombie\": \"\ud83e\udddf\\u200d\u2642\ufe0f\",\n    \"mango\": \"\ud83e\udd6d\",\n    \"mantelpiece_clock\": \"\ud83d\udd70\",\n    \"manual_wheelchair\": \"\ud83e\uddbd\",\n    \"man\u2019s_shoe\": \"\ud83d\udc5e\",\n    \"map_of_japan\": \"\ud83d\uddfe\",\n    \"maple_leaf\": \"\ud83c\udf41\",\n    \"martial_arts_uniform\": \"\ud83e\udd4b\",\n    \"mate\": \"\ud83e\uddc9\",\n    \"meat_on_bone\": \"\ud83c\udf56\",\n    \"mechanical_arm\": \"\ud83e\uddbe\",\n    \"mechanical_leg\": \"\ud83e\uddbf\",\n    \"medical_symbol\": \"\u2695\",\n    \"megaphone\": \"\ud83d\udce3\",\n    \"melon\": \"\ud83c\udf48\",\n    \"memo\": \"\ud83d\udcdd\",\n    \"men_with_bunny_ears\": \"\ud83d\udc6f\\u200d\u2642\ufe0f\",\n    \"men_wrestling\": \"\ud83e\udd3c\\u200d\u2642\ufe0f\",\n    \"menorah\": \"\ud83d\udd4e\",\n    \"men\u2019s_room\": \"\ud83d\udeb9\",\n    \"mermaid\": \"\ud83e\udddc\\u200d\u2640\ufe0f\",\n    \"mermaid_dark_skin_tone\": \"\ud83e\udddc\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"mermaid_light_skin_tone\": \"\ud83e\udddc\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"mermaid_medium-dark_skin_tone\": \"\ud83e\udddc\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"mermaid_medium-light_skin_tone\": \"\ud83e\udddc\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"mermaid_medium_skin_tone\": \"\ud83e\udddc\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"merman\": \"\ud83e\udddc\\u200d\u2642\ufe0f\",\n    \"merman_dark_skin_tone\": \"\ud83e\udddc\ud83c\udfff\\u200d\u2642\ufe0f\",\n    \"merman_light_skin_tone\": \"\ud83e\udddc\ud83c\udffb\\u200d\u2642\ufe0f\",\n    \"merman_medium-dark_skin_tone\": \"\ud83e\udddc\ud83c\udffe\\u200d\u2642\ufe0f\",\n    \"merman_medium-light_skin_tone\": \"\ud83e\udddc\ud83c\udffc\\u200d\u2642\ufe0f\",\n    \"merman_medium_skin_tone\": \"\ud83e\udddc\ud83c\udffd\\u200d\u2642\ufe0f\",\n    \"merperson\": \"\ud83e\udddc\",\n    \"merperson_dark_skin_tone\": \"\ud83e\udddc\ud83c\udfff\",\n    \"merperson_light_skin_tone\": \"\ud83e\udddc\ud83c\udffb\",\n    \"merperson_medium-dark_skin_tone\": \"\ud83e\udddc\ud83c\udffe\",\n    \"merperson_medium-light_skin_tone\": \"\ud83e\udddc\ud83c\udffc\",\n    \"merperson_medium_skin_tone\": \"\ud83e\udddc\ud83c\udffd\",\n    \"metro\": \"\ud83d\ude87\",\n    \"microbe\": \"\ud83e\udda0\",\n    \"microphone\": \"\ud83c\udfa4\",\n    \"microscope\": \"\ud83d\udd2c\",\n    \"middle_finger\": \"\ud83d\udd95\",\n    \"middle_finger_dark_skin_tone\": \"\ud83d\udd95\ud83c\udfff\",\n    \"middle_finger_light_skin_tone\": \"\ud83d\udd95\ud83c\udffb\",\n    \"middle_finger_medium-dark_skin_tone\": \"\ud83d\udd95\ud83c\udffe\",\n    \"middle_finger_medium-light_skin_tone\": \"\ud83d\udd95\ud83c\udffc\",\n    \"middle_finger_medium_skin_tone\": \"\ud83d\udd95\ud83c\udffd\",\n    \"military_medal\": \"\ud83c\udf96\",\n    \"milky_way\": \"\ud83c\udf0c\",\n    \"minibus\": \"\ud83d\ude90\",\n    \"moai\": \"\ud83d\uddff\",\n    \"mobile_phone\": \"\ud83d\udcf1\",\n    \"mobile_phone_off\": \"\ud83d\udcf4\",\n    \"mobile_phone_with_arrow\": \"\ud83d\udcf2\",\n    \"money-mouth_face\": \"\ud83e\udd11\",\n    \"money_bag\": \"\ud83d\udcb0\",\n    \"money_with_wings\": \"\ud83d\udcb8\",\n    \"monkey\": \"\ud83d\udc12\",\n    \"monkey_face\": \"\ud83d\udc35\",\n    \"monorail\": \"\ud83d\ude9d\",\n    \"moon_cake\": \"\ud83e\udd6e\",\n    \"moon_viewing_ceremony\": \"\ud83c\udf91\",\n    \"mosque\": \"\ud83d\udd4c\",\n    \"mosquito\": \"\ud83e\udd9f\",\n    \"motor_boat\": \"\ud83d\udee5\",\n    \"motor_scooter\": \"\ud83d\udef5\",\n    \"motorcycle\": \"\ud83c\udfcd\",\n    \"motorized_wheelchair\": \"\ud83e\uddbc\",\n    \"motorway\": \"\ud83d\udee3\",\n    \"mount_fuji\": \"\ud83d\uddfb\",\n    \"mountain\": \"\u26f0\",\n    \"mountain_cableway\": \"\ud83d\udea0\",\n    \"mountain_railway\": \"\ud83d\ude9e\",\n    \"mouse\": \"\ud83d\udc2d\",\n    \"mouse_face\": \"\ud83d\udc2d\",\n    \"mouth\": \"\ud83d\udc44\",\n    \"movie_camera\": \"\ud83c\udfa5\",\n    \"mushroom\": \"\ud83c\udf44\",\n    \"musical_keyboard\": \"\ud83c\udfb9\",\n    \"musical_note\": \"\ud83c\udfb5\",\n    \"musical_notes\": \"\ud83c\udfb6\",\n    \"musical_score\": \"\ud83c\udfbc\",\n    \"muted_speaker\": \"\ud83d\udd07\",\n    \"nail_polish\": \"\ud83d\udc85\",\n    \"nail_polish_dark_skin_tone\": \"\ud83d\udc85\ud83c\udfff\",\n    \"nail_polish_light_skin_tone\": \"\ud83d\udc85\ud83c\udffb\",\n    \"nail_polish_medium-dark_skin_tone\": \"\ud83d\udc85\ud83c\udffe\",\n    \"nail_polish_medium-light_skin_tone\": \"\ud83d\udc85\ud83c\udffc\",\n    \"nail_polish_medium_skin_tone\": \"\ud83d\udc85\ud83c\udffd\",\n    \"name_badge\": \"\ud83d\udcdb\",\n    \"national_park\": \"\ud83c\udfde\",\n    \"nauseated_face\": \"\ud83e\udd22\",\n    \"nazar_amulet\": \"\ud83e\uddff\",\n    \"necktie\": \"\ud83d\udc54\",\n    \"nerd_face\": \"\ud83e\udd13\",\n    \"neutral_face\": \"\ud83d\ude10\",\n    \"new_moon\": \"\ud83c\udf11\",\n    \"new_moon_face\": \"\ud83c\udf1a\",\n    \"newspaper\": \"\ud83d\udcf0\",\n    \"next_track_button\": \"\u23ed\",\n    \"night_with_stars\": \"\ud83c\udf03\",\n    \"nine-thirty\": \"\ud83d\udd64\",\n    \"nine_o\u2019clock\": \"\ud83d\udd58\",\n    \"no_bicycles\": \"\ud83d\udeb3\",\n    \"no_entry\": \"\u26d4\",\n    \"no_littering\": \"\ud83d\udeaf\",\n    \"no_mobile_phones\": \"\ud83d\udcf5\",\n    \"no_one_under_eighteen\": \"\ud83d\udd1e\",\n    \"no_pedestrians\": \"\ud83d\udeb7\",\n    \"no_smoking\": \"\ud83d\udead\",\n    \"non-potable_water\": \"\ud83d\udeb1\",\n    \"nose\": \"\ud83d\udc43\",\n    \"nose_dark_skin_tone\": \"\ud83d\udc43\ud83c\udfff\",\n    \"nose_light_skin_tone\": \"\ud83d\udc43\ud83c\udffb\",\n    \"nose_medium-dark_skin_tone\": \"\ud83d\udc43\ud83c\udffe\",\n    \"nose_medium-light_skin_tone\": \"\ud83d\udc43\ud83c\udffc\",\n    \"nose_medium_skin_tone\": \"\ud83d\udc43\ud83c\udffd\",\n    \"notebook\": \"\ud83d\udcd3\",\n    \"notebook_with_decorative_cover\": \"\ud83d\udcd4\",\n    \"nut_and_bolt\": \"\ud83d\udd29\",\n    \"octopus\": \"\ud83d\udc19\",\n    \"oden\": \"\ud83c\udf62\",\n    \"office_building\": \"\ud83c\udfe2\",\n    \"ogre\": \"\ud83d\udc79\",\n    \"oil_drum\": \"\ud83d\udee2\",\n    \"old_key\": \"\ud83d\udddd\",\n    \"old_man\": \"\ud83d\udc74\",\n    \"old_man_dark_skin_tone\": \"\ud83d\udc74\ud83c\udfff\",\n    \"old_man_light_skin_tone\": \"\ud83d\udc74\ud83c\udffb\",\n    \"old_man_medium-dark_skin_tone\": \"\ud83d\udc74\ud83c\udffe\",\n    \"old_man_medium-light_skin_tone\": \"\ud83d\udc74\ud83c\udffc\",\n    \"old_man_medium_skin_tone\": \"\ud83d\udc74\ud83c\udffd\",\n    \"old_woman\": \"\ud83d\udc75\",\n    \"old_woman_dark_skin_tone\": \"\ud83d\udc75\ud83c\udfff\",\n    \"old_woman_light_skin_tone\": \"\ud83d\udc75\ud83c\udffb\",\n    \"old_woman_medium-dark_skin_tone\": \"\ud83d\udc75\ud83c\udffe\",\n    \"old_woman_medium-light_skin_tone\": \"\ud83d\udc75\ud83c\udffc\",\n    \"old_woman_medium_skin_tone\": \"\ud83d\udc75\ud83c\udffd\",\n    \"older_adult\": \"\ud83e\uddd3\",\n    \"older_adult_dark_skin_tone\": \"\ud83e\uddd3\ud83c\udfff\",\n    \"older_adult_light_skin_tone\": \"\ud83e\uddd3\ud83c\udffb\",\n    \"older_adult_medium-dark_skin_tone\": \"\ud83e\uddd3\ud83c\udffe\",\n    \"older_adult_medium-light_skin_tone\": \"\ud83e\uddd3\ud83c\udffc\",\n    \"older_adult_medium_skin_tone\": \"\ud83e\uddd3\ud83c\udffd\",\n    \"om\": \"\ud83d\udd49\",\n    \"oncoming_automobile\": \"\ud83d\ude98\",\n    \"oncoming_bus\": \"\ud83d\ude8d\",\n    \"oncoming_fist\": \"\ud83d\udc4a\",\n    \"oncoming_fist_dark_skin_tone\": \"\ud83d\udc4a\ud83c\udfff\",\n    \"oncoming_fist_light_skin_tone\": \"\ud83d\udc4a\ud83c\udffb\",\n    \"oncoming_fist_medium-dark_skin_tone\": \"\ud83d\udc4a\ud83c\udffe\",\n    \"oncoming_fist_medium-light_skin_tone\": \"\ud83d\udc4a\ud83c\udffc\",\n    \"oncoming_fist_medium_skin_tone\": \"\ud83d\udc4a\ud83c\udffd\",\n    \"oncoming_police_car\": \"\ud83d\ude94\",\n    \"oncoming_taxi\": \"\ud83d\ude96\",\n    \"one-piece_swimsuit\": \"\ud83e\ude71\",\n    \"one-thirty\": \"\ud83d\udd5c\",\n    \"one_o\u2019clock\": \"\ud83d\udd50\",\n    \"onion\": \"\ud83e\uddc5\",\n    \"open_book\": \"\ud83d\udcd6\",\n    \"open_file_folder\": \"\ud83d\udcc2\",\n    \"open_hands\": \"\ud83d\udc50\",\n    \"open_hands_dark_skin_tone\": \"\ud83d\udc50\ud83c\udfff\",\n    \"open_hands_light_skin_tone\": \"\ud83d\udc50\ud83c\udffb\",\n    \"open_hands_medium-dark_skin_tone\": \"\ud83d\udc50\ud83c\udffe\",\n    \"open_hands_medium-light_skin_tone\": \"\ud83d\udc50\ud83c\udffc\",\n    \"open_hands_medium_skin_tone\": \"\ud83d\udc50\ud83c\udffd\",\n    \"open_mailbox_with_lowered_flag\": \"\ud83d\udced\",\n    \"open_mailbox_with_raised_flag\": \"\ud83d\udcec\",\n    \"optical_disk\": \"\ud83d\udcbf\",\n    \"orange_book\": \"\ud83d\udcd9\",\n    \"orange_circle\": \"\ud83d\udfe0\",\n    \"orange_heart\": \"\ud83e\udde1\",\n    \"orange_square\": \"\ud83d\udfe7\",\n    \"orangutan\": \"\ud83e\udda7\",\n    \"orthodox_cross\": \"\u2626\",\n    \"otter\": \"\ud83e\udda6\",\n    \"outbox_tray\": \"\ud83d\udce4\",\n    \"owl\": \"\ud83e\udd89\",\n    \"ox\": \"\ud83d\udc02\",\n    \"oyster\": \"\ud83e\uddaa\",\n    \"package\": \"\ud83d\udce6\",\n    \"page_facing_up\": \"\ud83d\udcc4\",\n    \"page_with_curl\": \"\ud83d\udcc3\",\n    \"pager\": \"\ud83d\udcdf\",\n    \"paintbrush\": \"\ud83d\udd8c\",\n    \"palm_tree\": \"\ud83c\udf34\",\n    \"palms_up_together\": \"\ud83e\udd32\",\n    \"palms_up_together_dark_skin_tone\": \"\ud83e\udd32\ud83c\udfff\",\n    \"palms_up_together_light_skin_tone\": \"\ud83e\udd32\ud83c\udffb\",\n    \"palms_up_together_medium-dark_skin_tone\": \"\ud83e\udd32\ud83c\udffe\",\n    \"palms_up_together_medium-light_skin_tone\": \"\ud83e\udd32\ud83c\udffc\",\n    \"palms_up_together_medium_skin_tone\": \"\ud83e\udd32\ud83c\udffd\",\n    \"pancakes\": \"\ud83e\udd5e\",\n    \"panda_face\": \"\ud83d\udc3c\",\n    \"paperclip\": \"\ud83d\udcce\",\n    \"parrot\": \"\ud83e\udd9c\",\n    \"part_alternation_mark\": \"\u303d\",\n    \"party_popper\": \"\ud83c\udf89\",\n    \"partying_face\": \"\ud83e\udd73\",\n    \"passenger_ship\": \"\ud83d\udef3\",\n    \"passport_control\": \"\ud83d\udec2\",\n    \"pause_button\": \"\u23f8\",\n    \"paw_prints\": \"\ud83d\udc3e\",\n    \"peace_symbol\": \"\u262e\",\n    \"peach\": \"\ud83c\udf51\",\n    \"peacock\": \"\ud83e\udd9a\",\n    \"peanuts\": \"\ud83e\udd5c\",\n    \"pear\": \"\ud83c\udf50\",\n    \"pen\": \"\ud83d\udd8a\",\n    \"pencil\": \"\ud83d\udcdd\",\n    \"penguin\": \"\ud83d\udc27\",\n    \"pensive_face\": \"\ud83d\ude14\",\n    \"people_holding_hands\": \"\ud83e\uddd1\\u200d\ud83e\udd1d\\u200d\ud83e\uddd1\",\n    \"people_with_bunny_ears\": \"\ud83d\udc6f\",\n    \"people_wrestling\": \"\ud83e\udd3c\",\n    \"performing_arts\": \"\ud83c\udfad\",\n    \"persevering_face\": \"\ud83d\ude23\",\n    \"person_biking\": \"\ud83d\udeb4\",\n    \"person_biking_dark_skin_tone\": \"\ud83d\udeb4\ud83c\udfff\",\n    \"person_biking_light_skin_tone\": \"\ud83d\udeb4\ud83c\udffb\",\n    \"person_biking_medium-dark_skin_tone\": \"\ud83d\udeb4\ud83c\udffe\",\n    \"person_biking_medium-light_skin_tone\": \"\ud83d\udeb4\ud83c\udffc\",\n    \"person_biking_medium_skin_tone\": \"\ud83d\udeb4\ud83c\udffd\",\n    \"person_bouncing_ball\": \"\u26f9\",\n    \"person_bouncing_ball_dark_skin_tone\": \"\u26f9\ud83c\udfff\",\n    \"person_bouncing_ball_light_skin_tone\": \"\u26f9\ud83c\udffb\",\n    \"person_bouncing_ball_medium-dark_skin_tone\": \"\u26f9\ud83c\udffe\",\n    \"person_bouncing_ball_medium-light_skin_tone\": \"\u26f9\ud83c\udffc\",\n    \"person_bouncing_ball_medium_skin_tone\": \"\u26f9\ud83c\udffd\",\n    \"person_bowing\": \"\ud83d\ude47\",\n    \"person_bowing_dark_skin_tone\": \"\ud83d\ude47\ud83c\udfff\",\n    \"person_bowing_light_skin_tone\": \"\ud83d\ude47\ud83c\udffb\",\n    \"person_bowing_medium-dark_skin_tone\": \"\ud83d\ude47\ud83c\udffe\",\n    \"person_bowing_medium-light_skin_tone\": \"\ud83d\ude47\ud83c\udffc\",\n    \"person_bowing_medium_skin_tone\": \"\ud83d\ude47\ud83c\udffd\",\n    \"person_cartwheeling\": \"\ud83e\udd38\",\n    \"person_cartwheeling_dark_skin_tone\": \"\ud83e\udd38\ud83c\udfff\",\n    \"person_cartwheeling_light_skin_tone\": \"\ud83e\udd38\ud83c\udffb\",\n    \"person_cartwheeling_medium-dark_skin_tone\": \"\ud83e\udd38\ud83c\udffe\",\n    \"person_cartwheeling_medium-light_skin_tone\": \"\ud83e\udd38\ud83c\udffc\",\n    \"person_cartwheeling_medium_skin_tone\": \"\ud83e\udd38\ud83c\udffd\",\n    \"person_climbing\": \"\ud83e\uddd7\",\n    \"person_climbing_dark_skin_tone\": \"\ud83e\uddd7\ud83c\udfff\",\n    \"person_climbing_light_skin_tone\": \"\ud83e\uddd7\ud83c\udffb\",\n    \"person_climbing_medium-dark_skin_tone\": \"\ud83e\uddd7\ud83c\udffe\",\n    \"person_climbing_medium-light_skin_tone\": \"\ud83e\uddd7\ud83c\udffc\",\n    \"person_climbing_medium_skin_tone\": \"\ud83e\uddd7\ud83c\udffd\",\n    \"person_facepalming\": \"\ud83e\udd26\",\n    \"person_facepalming_dark_skin_tone\": \"\ud83e\udd26\ud83c\udfff\",\n    \"person_facepalming_light_skin_tone\": \"\ud83e\udd26\ud83c\udffb\",\n    \"person_facepalming_medium-dark_skin_tone\": \"\ud83e\udd26\ud83c\udffe\",\n    \"person_facepalming_medium-light_skin_tone\": \"\ud83e\udd26\ud83c\udffc\",\n    \"person_facepalming_medium_skin_tone\": \"\ud83e\udd26\ud83c\udffd\",\n    \"person_fencing\": \"\ud83e\udd3a\",\n    \"person_frowning\": \"\ud83d\ude4d\",\n    \"person_frowning_dark_skin_tone\": \"\ud83d\ude4d\ud83c\udfff\",\n    \"person_frowning_light_skin_tone\": \"\ud83d\ude4d\ud83c\udffb\",\n    \"person_frowning_medium-dark_skin_tone\": \"\ud83d\ude4d\ud83c\udffe\",\n    \"person_frowning_medium-light_skin_tone\": \"\ud83d\ude4d\ud83c\udffc\",\n    \"person_frowning_medium_skin_tone\": \"\ud83d\ude4d\ud83c\udffd\",\n    \"person_gesturing_no\": \"\ud83d\ude45\",\n    \"person_gesturing_no_dark_skin_tone\": \"\ud83d\ude45\ud83c\udfff\",\n    \"person_gesturing_no_light_skin_tone\": \"\ud83d\ude45\ud83c\udffb\",\n    \"person_gesturing_no_medium-dark_skin_tone\": \"\ud83d\ude45\ud83c\udffe\",\n    \"person_gesturing_no_medium-light_skin_tone\": \"\ud83d\ude45\ud83c\udffc\",\n    \"person_gesturing_no_medium_skin_tone\": \"\ud83d\ude45\ud83c\udffd\",\n    \"person_gesturing_ok\": \"\ud83d\ude46\",\n    \"person_gesturing_ok_dark_skin_tone\": \"\ud83d\ude46\ud83c\udfff\",\n    \"person_gesturing_ok_light_skin_tone\": \"\ud83d\ude46\ud83c\udffb\",\n    \"person_gesturing_ok_medium-dark_skin_tone\": \"\ud83d\ude46\ud83c\udffe\",\n    \"person_gesturing_ok_medium-light_skin_tone\": \"\ud83d\ude46\ud83c\udffc\",\n    \"person_gesturing_ok_medium_skin_tone\": \"\ud83d\ude46\ud83c\udffd\",\n    \"person_getting_haircut\": \"\ud83d\udc87\",\n    \"person_getting_haircut_dark_skin_tone\": \"\ud83d\udc87\ud83c\udfff\",\n    \"person_getting_haircut_light_skin_tone\": \"\ud83d\udc87\ud83c\udffb\",\n    \"person_getting_haircut_medium-dark_skin_tone\": \"\ud83d\udc87\ud83c\udffe\",\n    \"person_getting_haircut_medium-light_skin_tone\": \"\ud83d\udc87\ud83c\udffc\",\n    \"person_getting_haircut_medium_skin_tone\": \"\ud83d\udc87\ud83c\udffd\",\n    \"person_getting_massage\": \"\ud83d\udc86\",\n    \"person_getting_massage_dark_skin_tone\": \"\ud83d\udc86\ud83c\udfff\",\n    \"person_getting_massage_light_skin_tone\": \"\ud83d\udc86\ud83c\udffb\",\n    \"person_getting_massage_medium-dark_skin_tone\": \"\ud83d\udc86\ud83c\udffe\",\n    \"person_getting_massage_medium-light_skin_tone\": \"\ud83d\udc86\ud83c\udffc\",\n    \"person_getting_massage_medium_skin_tone\": \"\ud83d\udc86\ud83c\udffd\",\n    \"person_golfing\": \"\ud83c\udfcc\",\n    \"person_golfing_dark_skin_tone\": \"\ud83c\udfcc\ud83c\udfff\",\n    \"person_golfing_light_skin_tone\": \"\ud83c\udfcc\ud83c\udffb\",\n    \"person_golfing_medium-dark_skin_tone\": \"\ud83c\udfcc\ud83c\udffe\",\n    \"person_golfing_medium-light_skin_tone\": \"\ud83c\udfcc\ud83c\udffc\",\n    \"person_golfing_medium_skin_tone\": \"\ud83c\udfcc\ud83c\udffd\",\n    \"person_in_bed\": \"\ud83d\udecc\",\n    \"person_in_bed_dark_skin_tone\": \"\ud83d\udecc\ud83c\udfff\",\n    \"person_in_bed_light_skin_tone\": \"\ud83d\udecc\ud83c\udffb\",\n    \"person_in_bed_medium-dark_skin_tone\": \"\ud83d\udecc\ud83c\udffe\",\n    \"person_in_bed_medium-light_skin_tone\": \"\ud83d\udecc\ud83c\udffc\",\n    \"person_in_bed_medium_skin_tone\": \"\ud83d\udecc\ud83c\udffd\",\n    \"person_in_lotus_position\": \"\ud83e\uddd8\",\n    \"person_in_lotus_position_dark_skin_tone\": \"\ud83e\uddd8\ud83c\udfff\",\n    \"person_in_lotus_position_light_skin_tone\": \"\ud83e\uddd8\ud83c\udffb\",\n    \"person_in_lotus_position_medium-dark_skin_tone\": \"\ud83e\uddd8\ud83c\udffe\",\n    \"person_in_lotus_position_medium-light_skin_tone\": \"\ud83e\uddd8\ud83c\udffc\",\n    \"person_in_lotus_position_medium_skin_tone\": \"\ud83e\uddd8\ud83c\udffd\",\n    \"person_in_steamy_room\": \"\ud83e\uddd6\",\n    \"person_in_steamy_room_dark_skin_tone\": \"\ud83e\uddd6\ud83c\udfff\",\n    \"person_in_steamy_room_light_skin_tone\": \"\ud83e\uddd6\ud83c\udffb\",\n    \"person_in_steamy_room_medium-dark_skin_tone\": \"\ud83e\uddd6\ud83c\udffe\",\n    \"person_in_steamy_room_medium-light_skin_tone\": \"\ud83e\uddd6\ud83c\udffc\",\n    \"person_in_steamy_room_medium_skin_tone\": \"\ud83e\uddd6\ud83c\udffd\",\n    \"person_juggling\": \"\ud83e\udd39\",\n    \"person_juggling_dark_skin_tone\": \"\ud83e\udd39\ud83c\udfff\",\n    \"person_juggling_light_skin_tone\": \"\ud83e\udd39\ud83c\udffb\",\n    \"person_juggling_medium-dark_skin_tone\": \"\ud83e\udd39\ud83c\udffe\",\n    \"person_juggling_medium-light_skin_tone\": \"\ud83e\udd39\ud83c\udffc\",\n    \"person_juggling_medium_skin_tone\": \"\ud83e\udd39\ud83c\udffd\",\n    \"person_kneeling\": \"\ud83e\uddce\",\n    \"person_lifting_weights\": \"\ud83c\udfcb\",\n    \"person_lifting_weights_dark_skin_tone\": \"\ud83c\udfcb\ud83c\udfff\",\n    \"person_lifting_weights_light_skin_tone\": \"\ud83c\udfcb\ud83c\udffb\",\n    \"person_lifting_weights_medium-dark_skin_tone\": \"\ud83c\udfcb\ud83c\udffe\",\n    \"person_lifting_weights_medium-light_skin_tone\": \"\ud83c\udfcb\ud83c\udffc\",\n    \"person_lifting_weights_medium_skin_tone\": \"\ud83c\udfcb\ud83c\udffd\",\n    \"person_mountain_biking\": \"\ud83d\udeb5\",\n    \"person_mountain_biking_dark_skin_tone\": \"\ud83d\udeb5\ud83c\udfff\",\n    \"person_mountain_biking_light_skin_tone\": \"\ud83d\udeb5\ud83c\udffb\",\n    \"person_mountain_biking_medium-dark_skin_tone\": \"\ud83d\udeb5\ud83c\udffe\",\n    \"person_mountain_biking_medium-light_skin_tone\": \"\ud83d\udeb5\ud83c\udffc\",\n    \"person_mountain_biking_medium_skin_tone\": \"\ud83d\udeb5\ud83c\udffd\",\n    \"person_playing_handball\": \"\ud83e\udd3e\",\n    \"person_playing_handball_dark_skin_tone\": \"\ud83e\udd3e\ud83c\udfff\",\n    \"person_playing_handball_light_skin_tone\": \"\ud83e\udd3e\ud83c\udffb\",\n    \"person_playing_handball_medium-dark_skin_tone\": \"\ud83e\udd3e\ud83c\udffe\",\n    \"person_playing_handball_medium-light_skin_tone\": \"\ud83e\udd3e\ud83c\udffc\",\n    \"person_playing_handball_medium_skin_tone\": \"\ud83e\udd3e\ud83c\udffd\",\n    \"person_playing_water_polo\": \"\ud83e\udd3d\",\n    \"person_playing_water_polo_dark_skin_tone\": \"\ud83e\udd3d\ud83c\udfff\",\n    \"person_playing_water_polo_light_skin_tone\": \"\ud83e\udd3d\ud83c\udffb\",\n    \"person_playing_water_polo_medium-dark_skin_tone\": \"\ud83e\udd3d\ud83c\udffe\",\n    \"person_playing_water_polo_medium-light_skin_tone\": \"\ud83e\udd3d\ud83c\udffc\",\n    \"person_playing_water_polo_medium_skin_tone\": \"\ud83e\udd3d\ud83c\udffd\",\n    \"person_pouting\": \"\ud83d\ude4e\",\n    \"person_pouting_dark_skin_tone\": \"\ud83d\ude4e\ud83c\udfff\",\n    \"person_pouting_light_skin_tone\": \"\ud83d\ude4e\ud83c\udffb\",\n    \"person_pouting_medium-dark_skin_tone\": \"\ud83d\ude4e\ud83c\udffe\",\n    \"person_pouting_medium-light_skin_tone\": \"\ud83d\ude4e\ud83c\udffc\",\n    \"person_pouting_medium_skin_tone\": \"\ud83d\ude4e\ud83c\udffd\",\n    \"person_raising_hand\": \"\ud83d\ude4b\",\n    \"person_raising_hand_dark_skin_tone\": \"\ud83d\ude4b\ud83c\udfff\",\n    \"person_raising_hand_light_skin_tone\": \"\ud83d\ude4b\ud83c\udffb\",\n    \"person_raising_hand_medium-dark_skin_tone\": \"\ud83d\ude4b\ud83c\udffe\",\n    \"person_raising_hand_medium-light_skin_tone\": \"\ud83d\ude4b\ud83c\udffc\",\n    \"person_raising_hand_medium_skin_tone\": \"\ud83d\ude4b\ud83c\udffd\",\n    \"person_rowing_boat\": \"\ud83d\udea3\",\n    \"person_rowing_boat_dark_skin_tone\": \"\ud83d\udea3\ud83c\udfff\",\n    \"person_rowing_boat_light_skin_tone\": \"\ud83d\udea3\ud83c\udffb\",\n    \"person_rowing_boat_medium-dark_skin_tone\": \"\ud83d\udea3\ud83c\udffe\",\n    \"person_rowing_boat_medium-light_skin_tone\": \"\ud83d\udea3\ud83c\udffc\",\n    \"person_rowing_boat_medium_skin_tone\": \"\ud83d\udea3\ud83c\udffd\",\n    \"person_running\": \"\ud83c\udfc3\",\n    \"person_running_dark_skin_tone\": \"\ud83c\udfc3\ud83c\udfff\",\n    \"person_running_light_skin_tone\": \"\ud83c\udfc3\ud83c\udffb\",\n    \"person_running_medium-dark_skin_tone\": \"\ud83c\udfc3\ud83c\udffe\",\n    \"person_running_medium-light_skin_tone\": \"\ud83c\udfc3\ud83c\udffc\",\n    \"person_running_medium_skin_tone\": \"\ud83c\udfc3\ud83c\udffd\",\n    \"person_shrugging\": \"\ud83e\udd37\",\n    \"person_shrugging_dark_skin_tone\": \"\ud83e\udd37\ud83c\udfff\",\n    \"person_shrugging_light_skin_tone\": \"\ud83e\udd37\ud83c\udffb\",\n    \"person_shrugging_medium-dark_skin_tone\": \"\ud83e\udd37\ud83c\udffe\",\n    \"person_shrugging_medium-light_skin_tone\": \"\ud83e\udd37\ud83c\udffc\",\n    \"person_shrugging_medium_skin_tone\": \"\ud83e\udd37\ud83c\udffd\",\n    \"person_standing\": \"\ud83e\uddcd\",\n    \"person_surfing\": \"\ud83c\udfc4\",\n    \"person_surfing_dark_skin_tone\": \"\ud83c\udfc4\ud83c\udfff\",\n    \"person_surfing_light_skin_tone\": \"\ud83c\udfc4\ud83c\udffb\",\n    \"person_surfing_medium-dark_skin_tone\": \"\ud83c\udfc4\ud83c\udffe\",\n    \"person_surfing_medium-light_skin_tone\": \"\ud83c\udfc4\ud83c\udffc\",\n    \"person_surfing_medium_skin_tone\": \"\ud83c\udfc4\ud83c\udffd\",\n    \"person_swimming\": \"\ud83c\udfca\",\n    \"person_swimming_dark_skin_tone\": \"\ud83c\udfca\ud83c\udfff\",\n    \"person_swimming_light_skin_tone\": \"\ud83c\udfca\ud83c\udffb\",\n    \"person_swimming_medium-dark_skin_tone\": \"\ud83c\udfca\ud83c\udffe\",\n    \"person_swimming_medium-light_skin_tone\": \"\ud83c\udfca\ud83c\udffc\",\n    \"person_swimming_medium_skin_tone\": \"\ud83c\udfca\ud83c\udffd\",\n    \"person_taking_bath\": \"\ud83d\udec0\",\n    \"person_taking_bath_dark_skin_tone\": \"\ud83d\udec0\ud83c\udfff\",\n    \"person_taking_bath_light_skin_tone\": \"\ud83d\udec0\ud83c\udffb\",\n    \"person_taking_bath_medium-dark_skin_tone\": \"\ud83d\udec0\ud83c\udffe\",\n    \"person_taking_bath_medium-light_skin_tone\": \"\ud83d\udec0\ud83c\udffc\",\n    \"person_taking_bath_medium_skin_tone\": \"\ud83d\udec0\ud83c\udffd\",\n    \"person_tipping_hand\": \"\ud83d\udc81\",\n    \"person_tipping_hand_dark_skin_tone\": \"\ud83d\udc81\ud83c\udfff\",\n    \"person_tipping_hand_light_skin_tone\": \"\ud83d\udc81\ud83c\udffb\",\n    \"person_tipping_hand_medium-dark_skin_tone\": \"\ud83d\udc81\ud83c\udffe\",\n    \"person_tipping_hand_medium-light_skin_tone\": \"\ud83d\udc81\ud83c\udffc\",\n    \"person_tipping_hand_medium_skin_tone\": \"\ud83d\udc81\ud83c\udffd\",\n    \"person_walking\": \"\ud83d\udeb6\",\n    \"person_walking_dark_skin_tone\": \"\ud83d\udeb6\ud83c\udfff\",\n    \"person_walking_light_skin_tone\": \"\ud83d\udeb6\ud83c\udffb\",\n    \"person_walking_medium-dark_skin_tone\": \"\ud83d\udeb6\ud83c\udffe\",\n    \"person_walking_medium-light_skin_tone\": \"\ud83d\udeb6\ud83c\udffc\",\n    \"person_walking_medium_skin_tone\": \"\ud83d\udeb6\ud83c\udffd\",\n    \"person_wearing_turban\": \"\ud83d\udc73\",\n    \"person_wearing_turban_dark_skin_tone\": \"\ud83d\udc73\ud83c\udfff\",\n    \"person_wearing_turban_light_skin_tone\": \"\ud83d\udc73\ud83c\udffb\",\n    \"person_wearing_turban_medium-dark_skin_tone\": \"\ud83d\udc73\ud83c\udffe\",\n    \"person_wearing_turban_medium-light_skin_tone\": \"\ud83d\udc73\ud83c\udffc\",\n    \"person_wearing_turban_medium_skin_tone\": \"\ud83d\udc73\ud83c\udffd\",\n    \"petri_dish\": \"\ud83e\uddeb\",\n    \"pick\": \"\u26cf\",\n    \"pie\": \"\ud83e\udd67\",\n    \"pig\": \"\ud83d\udc37\",\n    \"pig_face\": \"\ud83d\udc37\",\n    \"pig_nose\": \"\ud83d\udc3d\",\n    \"pile_of_poo\": \"\ud83d\udca9\",\n    \"pill\": \"\ud83d\udc8a\",\n    \"pinching_hand\": \"\ud83e\udd0f\",\n    \"pine_decoration\": \"\ud83c\udf8d\",\n    \"pineapple\": \"\ud83c\udf4d\",\n    \"ping_pong\": \"\ud83c\udfd3\",\n    \"pirate_flag\": \"\ud83c\udff4\\u200d\u2620\ufe0f\",\n    \"pistol\": \"\ud83d\udd2b\",\n    \"pizza\": \"\ud83c\udf55\",\n    \"place_of_worship\": \"\ud83d\uded0\",\n    \"play_button\": \"\u25b6\",\n    \"play_or_pause_button\": \"\u23ef\",\n    \"pleading_face\": \"\ud83e\udd7a\",\n    \"police_car\": \"\ud83d\ude93\",\n    \"police_car_light\": \"\ud83d\udea8\",\n    \"police_officer\": \"\ud83d\udc6e\",\n    \"police_officer_dark_skin_tone\": \"\ud83d\udc6e\ud83c\udfff\",\n    \"police_officer_light_skin_tone\": \"\ud83d\udc6e\ud83c\udffb\",\n    \"police_officer_medium-dark_skin_tone\": \"\ud83d\udc6e\ud83c\udffe\",\n    \"police_officer_medium-light_skin_tone\": \"\ud83d\udc6e\ud83c\udffc\",\n    \"police_officer_medium_skin_tone\": \"\ud83d\udc6e\ud83c\udffd\",\n    \"poodle\": \"\ud83d\udc29\",\n    \"pool_8_ball\": \"\ud83c\udfb1\",\n    \"popcorn\": \"\ud83c\udf7f\",\n    \"post_office\": \"\ud83c\udfe3\",\n    \"postal_horn\": \"\ud83d\udcef\",\n    \"postbox\": \"\ud83d\udcee\",\n    \"pot_of_food\": \"\ud83c\udf72\",\n    \"potable_water\": \"\ud83d\udeb0\",\n    \"potato\": \"\ud83e\udd54\",\n    \"poultry_leg\": \"\ud83c\udf57\",\n    \"pound_banknote\": \"\ud83d\udcb7\",\n    \"pouting_cat_face\": \"\ud83d\ude3e\",\n    \"pouting_face\": \"\ud83d\ude21\",\n    \"prayer_beads\": \"\ud83d\udcff\",\n    \"pregnant_woman\": \"\ud83e\udd30\",\n    \"pregnant_woman_dark_skin_tone\": \"\ud83e\udd30\ud83c\udfff\",\n    \"pregnant_woman_light_skin_tone\": \"\ud83e\udd30\ud83c\udffb\",\n    \"pregnant_woman_medium-dark_skin_tone\": \"\ud83e\udd30\ud83c\udffe\",\n    \"pregnant_woman_medium-light_skin_tone\": \"\ud83e\udd30\ud83c\udffc\",\n    \"pregnant_woman_medium_skin_tone\": \"\ud83e\udd30\ud83c\udffd\",\n    \"pretzel\": \"\ud83e\udd68\",\n    \"probing_cane\": \"\ud83e\uddaf\",\n    \"prince\": \"\ud83e\udd34\",\n    \"prince_dark_skin_tone\": \"\ud83e\udd34\ud83c\udfff\",\n    \"prince_light_skin_tone\": \"\ud83e\udd34\ud83c\udffb\",\n    \"prince_medium-dark_skin_tone\": \"\ud83e\udd34\ud83c\udffe\",\n    \"prince_medium-light_skin_tone\": \"\ud83e\udd34\ud83c\udffc\",\n    \"prince_medium_skin_tone\": \"\ud83e\udd34\ud83c\udffd\",\n    \"princess\": \"\ud83d\udc78\",\n    \"princess_dark_skin_tone\": \"\ud83d\udc78\ud83c\udfff\",\n    \"princess_light_skin_tone\": \"\ud83d\udc78\ud83c\udffb\",\n    \"princess_medium-dark_skin_tone\": \"\ud83d\udc78\ud83c\udffe\",\n    \"princess_medium-light_skin_tone\": \"\ud83d\udc78\ud83c\udffc\",\n    \"princess_medium_skin_tone\": \"\ud83d\udc78\ud83c\udffd\",\n    \"printer\": \"\ud83d\udda8\",\n    \"prohibited\": \"\ud83d\udeab\",\n    \"purple_circle\": \"\ud83d\udfe3\",\n    \"purple_heart\": \"\ud83d\udc9c\",\n    \"purple_square\": \"\ud83d\udfea\",\n    \"purse\": \"\ud83d\udc5b\",\n    \"pushpin\": \"\ud83d\udccc\",\n    \"question_mark\": \"\u2753\",\n    \"rabbit\": \"\ud83d\udc30\",\n    \"rabbit_face\": \"\ud83d\udc30\",\n    \"raccoon\": \"\ud83e\udd9d\",\n    \"racing_car\": \"\ud83c\udfce\",\n    \"radio\": \"\ud83d\udcfb\",\n    \"radio_button\": \"\ud83d\udd18\",\n    \"radioactive\": \"\u2622\",\n    \"railway_car\": \"\ud83d\ude83\",\n    \"railway_track\": \"\ud83d\udee4\",\n    \"rainbow\": \"\ud83c\udf08\",\n    \"rainbow_flag\": \"\ud83c\udff3\ufe0f\\u200d\ud83c\udf08\",\n    \"raised_back_of_hand\": \"\ud83e\udd1a\",\n    \"raised_back_of_hand_dark_skin_tone\": \"\ud83e\udd1a\ud83c\udfff\",\n    \"raised_back_of_hand_light_skin_tone\": \"\ud83e\udd1a\ud83c\udffb\",\n    \"raised_back_of_hand_medium-dark_skin_tone\": \"\ud83e\udd1a\ud83c\udffe\",\n    \"raised_back_of_hand_medium-light_skin_tone\": \"\ud83e\udd1a\ud83c\udffc\",\n    \"raised_back_of_hand_medium_skin_tone\": \"\ud83e\udd1a\ud83c\udffd\",\n    \"raised_fist\": \"\u270a\",\n    \"raised_fist_dark_skin_tone\": \"\u270a\ud83c\udfff\",\n    \"raised_fist_light_skin_tone\": \"\u270a\ud83c\udffb\",\n    \"raised_fist_medium-dark_skin_tone\": \"\u270a\ud83c\udffe\",\n    \"raised_fist_medium-light_skin_tone\": \"\u270a\ud83c\udffc\",\n    \"raised_fist_medium_skin_tone\": \"\u270a\ud83c\udffd\",\n    \"raised_hand\": \"\u270b\",\n    \"raised_hand_dark_skin_tone\": \"\u270b\ud83c\udfff\",\n    \"raised_hand_light_skin_tone\": \"\u270b\ud83c\udffb\",\n    \"raised_hand_medium-dark_skin_tone\": \"\u270b\ud83c\udffe\",\n    \"raised_hand_medium-light_skin_tone\": \"\u270b\ud83c\udffc\",\n    \"raised_hand_medium_skin_tone\": \"\u270b\ud83c\udffd\",\n    \"raising_hands\": \"\ud83d\ude4c\",\n    \"raising_hands_dark_skin_tone\": \"\ud83d\ude4c\ud83c\udfff\",\n    \"raising_hands_light_skin_tone\": \"\ud83d\ude4c\ud83c\udffb\",\n    \"raising_hands_medium-dark_skin_tone\": \"\ud83d\ude4c\ud83c\udffe\",\n    \"raising_hands_medium-light_skin_tone\": \"\ud83d\ude4c\ud83c\udffc\",\n    \"raising_hands_medium_skin_tone\": \"\ud83d\ude4c\ud83c\udffd\",\n    \"ram\": \"\ud83d\udc0f\",\n    \"rat\": \"\ud83d\udc00\",\n    \"razor\": \"\ud83e\ude92\",\n    \"ringed_planet\": \"\ud83e\ude90\",\n    \"receipt\": \"\ud83e\uddfe\",\n    \"record_button\": \"\u23fa\",\n    \"recycling_symbol\": \"\u267b\",\n    \"red_apple\": \"\ud83c\udf4e\",\n    \"red_circle\": \"\ud83d\udd34\",\n    \"red_envelope\": \"\ud83e\udde7\",\n    \"red_hair\": \"\ud83e\uddb0\",\n    \"red-haired_man\": \"\ud83d\udc68\\u200d\ud83e\uddb0\",\n    \"red-haired_woman\": \"\ud83d\udc69\\u200d\ud83e\uddb0\",\n    \"red_heart\": \"\u2764\",\n    \"red_paper_lantern\": \"\ud83c\udfee\",\n    \"red_square\": \"\ud83d\udfe5\",\n    \"red_triangle_pointed_down\": \"\ud83d\udd3b\",\n    \"red_triangle_pointed_up\": \"\ud83d\udd3a\",\n    \"registered\": \"\u00ae\",\n    \"relieved_face\": \"\ud83d\ude0c\",\n    \"reminder_ribbon\": \"\ud83c\udf97\",\n    \"repeat_button\": \"\ud83d\udd01\",\n    \"repeat_single_button\": \"\ud83d\udd02\",\n    \"rescue_worker\u2019s_helmet\": \"\u26d1\",\n    \"restroom\": \"\ud83d\udebb\",\n    \"reverse_button\": \"\u25c0\",\n    \"revolving_hearts\": \"\ud83d\udc9e\",\n    \"rhinoceros\": \"\ud83e\udd8f\",\n    \"ribbon\": \"\ud83c\udf80\",\n    \"rice_ball\": \"\ud83c\udf59\",\n    \"rice_cracker\": \"\ud83c\udf58\",\n    \"right-facing_fist\": \"\ud83e\udd1c\",\n    \"right-facing_fist_dark_skin_tone\": \"\ud83e\udd1c\ud83c\udfff\",\n    \"right-facing_fist_light_skin_tone\": \"\ud83e\udd1c\ud83c\udffb\",\n    \"right-facing_fist_medium-dark_skin_tone\": \"\ud83e\udd1c\ud83c\udffe\",\n    \"right-facing_fist_medium-light_skin_tone\": \"\ud83e\udd1c\ud83c\udffc\",\n    \"right-facing_fist_medium_skin_tone\": \"\ud83e\udd1c\ud83c\udffd\",\n    \"right_anger_bubble\": \"\ud83d\uddef\",\n    \"right_arrow\": \"\u27a1\",\n    \"right_arrow_curving_down\": \"\u2935\",\n    \"right_arrow_curving_left\": \"\u21a9\",\n    \"right_arrow_curving_up\": \"\u2934\",\n    \"ring\": \"\ud83d\udc8d\",\n    \"roasted_sweet_potato\": \"\ud83c\udf60\",\n    \"robot_face\": \"\ud83e\udd16\",\n    \"rocket\": \"\ud83d\ude80\",\n    \"roll_of_paper\": \"\ud83e\uddfb\",\n    \"rolled-up_newspaper\": \"\ud83d\uddde\",\n    \"roller_coaster\": \"\ud83c\udfa2\",\n    \"rolling_on_the_floor_laughing\": \"\ud83e\udd23\",\n    \"rooster\": \"\ud83d\udc13\",\n    \"rose\": \"\ud83c\udf39\",\n    \"rosette\": \"\ud83c\udff5\",\n    \"round_pushpin\": \"\ud83d\udccd\",\n    \"rugby_football\": \"\ud83c\udfc9\",\n    \"running_shirt\": \"\ud83c\udfbd\",\n    \"running_shoe\": \"\ud83d\udc5f\",\n    \"sad_but_relieved_face\": \"\ud83d\ude25\",\n    \"safety_pin\": \"\ud83e\uddf7\",\n    \"safety_vest\": \"\ud83e\uddba\",\n    \"salt\": \"\ud83e\uddc2\",\n    \"sailboat\": \"\u26f5\",\n    \"sake\": \"\ud83c\udf76\",\n    \"sandwich\": \"\ud83e\udd6a\",\n    \"sari\": \"\ud83e\udd7b\",\n    \"satellite\": \"\ud83d\udce1\",\n    \"satellite_antenna\": \"\ud83d\udce1\",\n    \"sauropod\": \"\ud83e\udd95\",\n    \"saxophone\": \"\ud83c\udfb7\",\n    \"scarf\": \"\ud83e\udde3\",\n    \"school\": \"\ud83c\udfeb\",\n    \"school_backpack\": \"\ud83c\udf92\",\n    \"scissors\": \"\u2702\",\n    \"scorpion\": \"\ud83e\udd82\",\n    \"scroll\": \"\ud83d\udcdc\",\n    \"seat\": \"\ud83d\udcba\",\n    \"see-no-evil_monkey\": \"\ud83d\ude48\",\n    \"seedling\": \"\ud83c\udf31\",\n    \"selfie\": \"\ud83e\udd33\",\n    \"selfie_dark_skin_tone\": \"\ud83e\udd33\ud83c\udfff\",\n    \"selfie_light_skin_tone\": \"\ud83e\udd33\ud83c\udffb\",\n    \"selfie_medium-dark_skin_tone\": \"\ud83e\udd33\ud83c\udffe\",\n    \"selfie_medium-light_skin_tone\": \"\ud83e\udd33\ud83c\udffc\",\n    \"selfie_medium_skin_tone\": \"\ud83e\udd33\ud83c\udffd\",\n    \"service_dog\": \"\ud83d\udc15\\u200d\ud83e\uddba\",\n    \"seven-thirty\": \"\ud83d\udd62\",\n    \"seven_o\u2019clock\": \"\ud83d\udd56\",\n    \"shallow_pan_of_food\": \"\ud83e\udd58\",\n    \"shamrock\": \"\u2618\",\n    \"shark\": \"\ud83e\udd88\",\n    \"shaved_ice\": \"\ud83c\udf67\",\n    \"sheaf_of_rice\": \"\ud83c\udf3e\",\n    \"shield\": \"\ud83d\udee1\",\n    \"shinto_shrine\": \"\u26e9\",\n    \"ship\": \"\ud83d\udea2\",\n    \"shooting_star\": \"\ud83c\udf20\",\n    \"shopping_bags\": \"\ud83d\udecd\",\n    \"shopping_cart\": \"\ud83d\uded2\",\n    \"shortcake\": \"\ud83c\udf70\",\n    \"shorts\": \"\ud83e\ude73\",\n    \"shower\": \"\ud83d\udebf\",\n    \"shrimp\": \"\ud83e\udd90\",\n    \"shuffle_tracks_button\": \"\ud83d\udd00\",\n    \"shushing_face\": \"\ud83e\udd2b\",\n    \"sign_of_the_horns\": \"\ud83e\udd18\",\n    \"sign_of_the_horns_dark_skin_tone\": \"\ud83e\udd18\ud83c\udfff\",\n    \"sign_of_the_horns_light_skin_tone\": \"\ud83e\udd18\ud83c\udffb\",\n    \"sign_of_the_horns_medium-dark_skin_tone\": \"\ud83e\udd18\ud83c\udffe\",\n    \"sign_of_the_horns_medium-light_skin_tone\": \"\ud83e\udd18\ud83c\udffc\",\n    \"sign_of_the_horns_medium_skin_tone\": \"\ud83e\udd18\ud83c\udffd\",\n    \"six-thirty\": \"\ud83d\udd61\",\n    \"six_o\u2019clock\": \"\ud83d\udd55\",\n    \"skateboard\": \"\ud83d\udef9\",\n    \"skier\": \"\u26f7\",\n    \"skis\": \"\ud83c\udfbf\",\n    \"skull\": \"\ud83d\udc80\",\n    \"skull_and_crossbones\": \"\u2620\",\n    \"skunk\": \"\ud83e\udda8\",\n    \"sled\": \"\ud83d\udef7\",\n    \"sleeping_face\": \"\ud83d\ude34\",\n    \"sleepy_face\": \"\ud83d\ude2a\",\n    \"slightly_frowning_face\": \"\ud83d\ude41\",\n    \"slightly_smiling_face\": \"\ud83d\ude42\",\n    \"slot_machine\": \"\ud83c\udfb0\",\n    \"sloth\": \"\ud83e\udda5\",\n    \"small_airplane\": \"\ud83d\udee9\",\n    \"small_blue_diamond\": \"\ud83d\udd39\",\n    \"small_orange_diamond\": \"\ud83d\udd38\",\n    \"smiling_cat_face_with_heart-eyes\": \"\ud83d\ude3b\",\n    \"smiling_face\": \"\u263a\",\n    \"smiling_face_with_halo\": \"\ud83d\ude07\",\n    \"smiling_face_with_3_hearts\": \"\ud83e\udd70\",\n    \"smiling_face_with_heart-eyes\": \"\ud83d\ude0d\",\n    \"smiling_face_with_horns\": \"\ud83d\ude08\",\n    \"smiling_face_with_smiling_eyes\": \"\ud83d\ude0a\",\n    \"smiling_face_with_sunglasses\": \"\ud83d\ude0e\",\n    \"smirking_face\": \"\ud83d\ude0f\",\n    \"snail\": \"\ud83d\udc0c\",\n    \"snake\": \"\ud83d\udc0d\",\n    \"sneezing_face\": \"\ud83e\udd27\",\n    \"snow-capped_mountain\": \"\ud83c\udfd4\",\n    \"snowboarder\": \"\ud83c\udfc2\",\n    \"snowboarder_dark_skin_tone\": \"\ud83c\udfc2\ud83c\udfff\",\n    \"snowboarder_light_skin_tone\": \"\ud83c\udfc2\ud83c\udffb\",\n    \"snowboarder_medium-dark_skin_tone\": \"\ud83c\udfc2\ud83c\udffe\",\n    \"snowboarder_medium-light_skin_tone\": \"\ud83c\udfc2\ud83c\udffc\",\n    \"snowboarder_medium_skin_tone\": \"\ud83c\udfc2\ud83c\udffd\",\n    \"snowflake\": \"\u2744\",\n    \"snowman\": \"\u2603\",\n    \"snowman_without_snow\": \"\u26c4\",\n    \"soap\": \"\ud83e\uddfc\",\n    \"soccer_ball\": \"\u26bd\",\n    \"socks\": \"\ud83e\udde6\",\n    \"softball\": \"\ud83e\udd4e\",\n    \"soft_ice_cream\": \"\ud83c\udf66\",\n    \"spade_suit\": \"\u2660\",\n    \"spaghetti\": \"\ud83c\udf5d\",\n    \"sparkle\": \"\u2747\",\n    \"sparkler\": \"\ud83c\udf87\",\n    \"sparkles\": \"\u2728\",\n    \"sparkling_heart\": \"\ud83d\udc96\",\n    \"speak-no-evil_monkey\": \"\ud83d\ude4a\",\n    \"speaker_high_volume\": \"\ud83d\udd0a\",\n    \"speaker_low_volume\": \"\ud83d\udd08\",\n    \"speaker_medium_volume\": \"\ud83d\udd09\",\n    \"speaking_head\": \"\ud83d\udde3\",\n    \"speech_balloon\": \"\ud83d\udcac\",\n    \"speedboat\": \"\ud83d\udea4\",\n    \"spider\": \"\ud83d\udd77\",\n    \"spider_web\": \"\ud83d\udd78\",\n    \"spiral_calendar\": \"\ud83d\uddd3\",\n    \"spiral_notepad\": \"\ud83d\uddd2\",\n    \"spiral_shell\": \"\ud83d\udc1a\",\n    \"spoon\": \"\ud83e\udd44\",\n    \"sponge\": \"\ud83e\uddfd\",\n    \"sport_utility_vehicle\": \"\ud83d\ude99\",\n    \"sports_medal\": \"\ud83c\udfc5\",\n    \"spouting_whale\": \"\ud83d\udc33\",\n    \"squid\": \"\ud83e\udd91\",\n    \"squinting_face_with_tongue\": \"\ud83d\ude1d\",\n    \"stadium\": \"\ud83c\udfdf\",\n    \"star-struck\": \"\ud83e\udd29\",\n    \"star_and_crescent\": \"\u262a\",\n    \"star_of_david\": \"\u2721\",\n    \"station\": \"\ud83d\ude89\",\n    \"steaming_bowl\": \"\ud83c\udf5c\",\n    \"stethoscope\": \"\ud83e\ude7a\",\n    \"stop_button\": \"\u23f9\",\n    \"stop_sign\": \"\ud83d\uded1\",\n    \"stopwatch\": \"\u23f1\",\n    \"straight_ruler\": \"\ud83d\udccf\",\n    \"strawberry\": \"\ud83c\udf53\",\n    \"studio_microphone\": \"\ud83c\udf99\",\n    \"stuffed_flatbread\": \"\ud83e\udd59\",\n    \"sun\": \"\u2600\",\n    \"sun_behind_cloud\": \"\u26c5\",\n    \"sun_behind_large_cloud\": \"\ud83c\udf25\",\n    \"sun_behind_rain_cloud\": \"\ud83c\udf26\",\n    \"sun_behind_small_cloud\": \"\ud83c\udf24\",\n    \"sun_with_face\": \"\ud83c\udf1e\",\n    \"sunflower\": \"\ud83c\udf3b\",\n    \"sunglasses\": \"\ud83d\ude0e\",\n    \"sunrise\": \"\ud83c\udf05\",\n    \"sunrise_over_mountains\": \"\ud83c\udf04\",\n    \"sunset\": \"\ud83c\udf07\",\n    \"superhero\": \"\ud83e\uddb8\",\n    \"supervillain\": \"\ud83e\uddb9\",\n    \"sushi\": \"\ud83c\udf63\",\n    \"suspension_railway\": \"\ud83d\ude9f\",\n    \"swan\": \"\ud83e\udda2\",\n    \"sweat_droplets\": \"\ud83d\udca6\",\n    \"synagogue\": \"\ud83d\udd4d\",\n    \"syringe\": \"\ud83d\udc89\",\n    \"t-shirt\": \"\ud83d\udc55\",\n    \"taco\": \"\ud83c\udf2e\",\n    \"takeout_box\": \"\ud83e\udd61\",\n    \"tanabata_tree\": \"\ud83c\udf8b\",\n    \"tangerine\": \"\ud83c\udf4a\",\n    \"taxi\": \"\ud83d\ude95\",\n    \"teacup_without_handle\": \"\ud83c\udf75\",\n    \"tear-off_calendar\": \"\ud83d\udcc6\",\n    \"teddy_bear\": \"\ud83e\uddf8\",\n    \"telephone\": \"\u260e\",\n    \"telephone_receiver\": \"\ud83d\udcde\",\n    \"telescope\": \"\ud83d\udd2d\",\n    \"television\": \"\ud83d\udcfa\",\n    \"ten-thirty\": \"\ud83d\udd65\",\n    \"ten_o\u2019clock\": \"\ud83d\udd59\",\n    \"tennis\": \"\ud83c\udfbe\",\n    \"tent\": \"\u26fa\",\n    \"test_tube\": \"\ud83e\uddea\",\n    \"thermometer\": \"\ud83c\udf21\",\n    \"thinking_face\": \"\ud83e\udd14\",\n    \"thought_balloon\": \"\ud83d\udcad\",\n    \"thread\": \"\ud83e\uddf5\",\n    \"three-thirty\": \"\ud83d\udd5e\",\n    \"three_o\u2019clock\": \"\ud83d\udd52\",\n    \"thumbs_down\": \"\ud83d\udc4e\",\n    \"thumbs_down_dark_skin_tone\": \"\ud83d\udc4e\ud83c\udfff\",\n    \"thumbs_down_light_skin_tone\": \"\ud83d\udc4e\ud83c\udffb\",\n    \"thumbs_down_medium-dark_skin_tone\": \"\ud83d\udc4e\ud83c\udffe\",\n    \"thumbs_down_medium-light_skin_tone\": \"\ud83d\udc4e\ud83c\udffc\",\n    \"thumbs_down_medium_skin_tone\": \"\ud83d\udc4e\ud83c\udffd\",\n    \"thumbs_up\": \"\ud83d\udc4d\",\n    \"thumbs_up_dark_skin_tone\": \"\ud83d\udc4d\ud83c\udfff\",\n    \"thumbs_up_light_skin_tone\": \"\ud83d\udc4d\ud83c\udffb\",\n    \"thumbs_up_medium-dark_skin_tone\": \"\ud83d\udc4d\ud83c\udffe\",\n    \"thumbs_up_medium-light_skin_tone\": \"\ud83d\udc4d\ud83c\udffc\",\n    \"thumbs_up_medium_skin_tone\": \"\ud83d\udc4d\ud83c\udffd\",\n    \"ticket\": \"\ud83c\udfab\",\n    \"tiger\": \"\ud83d\udc2f\",\n    \"tiger_face\": \"\ud83d\udc2f\",\n    \"timer_clock\": \"\u23f2\",\n    \"tired_face\": \"\ud83d\ude2b\",\n    \"toolbox\": \"\ud83e\uddf0\",\n    \"toilet\": \"\ud83d\udebd\",\n    \"tomato\": \"\ud83c\udf45\",\n    \"tongue\": \"\ud83d\udc45\",\n    \"tooth\": \"\ud83e\uddb7\",\n    \"top_hat\": \"\ud83c\udfa9\",\n    \"tornado\": \"\ud83c\udf2a\",\n    \"trackball\": \"\ud83d\uddb2\",\n    \"tractor\": \"\ud83d\ude9c\",\n    \"trade_mark\": \"\u2122\",\n    \"train\": \"\ud83d\ude8b\",\n    \"tram\": \"\ud83d\ude8a\",\n    \"tram_car\": \"\ud83d\ude8b\",\n    \"triangular_flag\": \"\ud83d\udea9\",\n    \"triangular_ruler\": \"\ud83d\udcd0\",\n    \"trident_emblem\": \"\ud83d\udd31\",\n    \"trolleybus\": \"\ud83d\ude8e\",\n    \"trophy\": \"\ud83c\udfc6\",\n    \"tropical_drink\": \"\ud83c\udf79\",\n    \"tropical_fish\": \"\ud83d\udc20\",\n    \"trumpet\": \"\ud83c\udfba\",\n    \"tulip\": \"\ud83c\udf37\",\n    \"tumbler_glass\": \"\ud83e\udd43\",\n    \"turtle\": \"\ud83d\udc22\",\n    \"twelve-thirty\": \"\ud83d\udd67\",\n    \"twelve_o\u2019clock\": \"\ud83d\udd5b\",\n    \"two-hump_camel\": \"\ud83d\udc2b\",\n    \"two-thirty\": \"\ud83d\udd5d\",\n    \"two_hearts\": \"\ud83d\udc95\",\n    \"two_men_holding_hands\": \"\ud83d\udc6c\",\n    \"two_o\u2019clock\": \"\ud83d\udd51\",\n    \"two_women_holding_hands\": \"\ud83d\udc6d\",\n    \"umbrella\": \"\u2602\",\n    \"umbrella_on_ground\": \"\u26f1\",\n    \"umbrella_with_rain_drops\": \"\u2614\",\n    \"unamused_face\": \"\ud83d\ude12\",\n    \"unicorn_face\": \"\ud83e\udd84\",\n    \"unlocked\": \"\ud83d\udd13\",\n    \"up-down_arrow\": \"\u2195\",\n    \"up-left_arrow\": \"\u2196\",\n    \"up-right_arrow\": \"\u2197\",\n    \"up_arrow\": \"\u2b06\",\n    \"upside-down_face\": \"\ud83d\ude43\",\n    \"upwards_button\": \"\ud83d\udd3c\",\n    \"vampire\": \"\ud83e\udddb\",\n    \"vampire_dark_skin_tone\": \"\ud83e\udddb\ud83c\udfff\",\n    \"vampire_light_skin_tone\": \"\ud83e\udddb\ud83c\udffb\",\n    \"vampire_medium-dark_skin_tone\": \"\ud83e\udddb\ud83c\udffe\",\n    \"vampire_medium-light_skin_tone\": \"\ud83e\udddb\ud83c\udffc\",\n    \"vampire_medium_skin_tone\": \"\ud83e\udddb\ud83c\udffd\",\n    \"vertical_traffic_light\": \"\ud83d\udea6\",\n    \"vibration_mode\": \"\ud83d\udcf3\",\n    \"victory_hand\": \"\u270c\",\n    \"victory_hand_dark_skin_tone\": \"\u270c\ud83c\udfff\",\n    \"victory_hand_light_skin_tone\": \"\u270c\ud83c\udffb\",\n    \"victory_hand_medium-dark_skin_tone\": \"\u270c\ud83c\udffe\",\n    \"victory_hand_medium-light_skin_tone\": \"\u270c\ud83c\udffc\",\n    \"victory_hand_medium_skin_tone\": \"\u270c\ud83c\udffd\",\n    \"video_camera\": \"\ud83d\udcf9\",\n    \"video_game\": \"\ud83c\udfae\",\n    \"videocassette\": \"\ud83d\udcfc\",\n    \"violin\": \"\ud83c\udfbb\",\n    \"volcano\": \"\ud83c\udf0b\",\n    \"volleyball\": \"\ud83c\udfd0\",\n    \"vulcan_salute\": \"\ud83d\udd96\",\n    \"vulcan_salute_dark_skin_tone\": \"\ud83d\udd96\ud83c\udfff\",\n    \"vulcan_salute_light_skin_tone\": \"\ud83d\udd96\ud83c\udffb\",\n    \"vulcan_salute_medium-dark_skin_tone\": \"\ud83d\udd96\ud83c\udffe\",\n    \"vulcan_salute_medium-light_skin_tone\": \"\ud83d\udd96\ud83c\udffc\",\n    \"vulcan_salute_medium_skin_tone\": \"\ud83d\udd96\ud83c\udffd\",\n    \"waffle\": \"\ud83e\uddc7\",\n    \"waning_crescent_moon\": \"\ud83c\udf18\",\n    \"waning_gibbous_moon\": \"\ud83c\udf16\",\n    \"warning\": \"\u26a0\",\n    \"wastebasket\": \"\ud83d\uddd1\",\n    \"watch\": \"\u231a\",\n    \"water_buffalo\": \"\ud83d\udc03\",\n    \"water_closet\": \"\ud83d\udebe\",\n    \"water_wave\": \"\ud83c\udf0a\",\n    \"watermelon\": \"\ud83c\udf49\",\n    \"waving_hand\": \"\ud83d\udc4b\",\n    \"waving_hand_dark_skin_tone\": \"\ud83d\udc4b\ud83c\udfff\",\n    \"waving_hand_light_skin_tone\": \"\ud83d\udc4b\ud83c\udffb\",\n    \"waving_hand_medium-dark_skin_tone\": \"\ud83d\udc4b\ud83c\udffe\",\n    \"waving_hand_medium-light_skin_tone\": \"\ud83d\udc4b\ud83c\udffc\",\n    \"waving_hand_medium_skin_tone\": \"\ud83d\udc4b\ud83c\udffd\",\n    \"wavy_dash\": \"\u3030\",\n    \"waxing_crescent_moon\": \"\ud83c\udf12\",\n    \"waxing_gibbous_moon\": \"\ud83c\udf14\",\n    \"weary_cat_face\": \"\ud83d\ude40\",\n    \"weary_face\": \"\ud83d\ude29\",\n    \"wedding\": \"\ud83d\udc92\",\n    \"whale\": \"\ud83d\udc33\",\n    \"wheel_of_dharma\": \"\u2638\",\n    \"wheelchair_symbol\": \"\u267f\",\n    \"white_circle\": \"\u26aa\",\n    \"white_exclamation_mark\": \"\u2755\",\n    \"white_flag\": \"\ud83c\udff3\",\n    \"white_flower\": \"\ud83d\udcae\",\n    \"white_hair\": \"\ud83e\uddb3\",\n    \"white-haired_man\": \"\ud83d\udc68\\u200d\ud83e\uddb3\",\n    \"white-haired_woman\": \"\ud83d\udc69\\u200d\ud83e\uddb3\",\n    \"white_heart\": \"\ud83e\udd0d\",\n    \"white_heavy_check_mark\": \"\u2705\",\n    \"white_large_square\": \"\u2b1c\",\n    \"white_medium-small_square\": \"\u25fd\",\n    \"white_medium_square\": \"\u25fb\",\n    \"white_medium_star\": \"\u2b50\",\n    \"white_question_mark\": \"\u2754\",\n    \"white_small_square\": \"\u25ab\",\n    \"white_square_button\": \"\ud83d\udd33\",\n    \"wilted_flower\": \"\ud83e\udd40\",\n    \"wind_chime\": \"\ud83c\udf90\",\n    \"wind_face\": \"\ud83c\udf2c\",\n    \"wine_glass\": \"\ud83c\udf77\",\n    \"winking_face\": \"\ud83d\ude09\",\n    \"winking_face_with_tongue\": \"\ud83d\ude1c\",\n    \"wolf_face\": \"\ud83d\udc3a\",\n    \"woman\": \"\ud83d\udc69\",\n    \"woman_artist\": \"\ud83d\udc69\\u200d\ud83c\udfa8\",\n    \"woman_artist_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83c\udfa8\",\n    \"woman_artist_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83c\udfa8\",\n    \"woman_artist_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83c\udfa8\",\n    \"woman_artist_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83c\udfa8\",\n    \"woman_artist_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83c\udfa8\",\n    \"woman_astronaut\": \"\ud83d\udc69\\u200d\ud83d\ude80\",\n    \"woman_astronaut_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83d\ude80\",\n    \"woman_astronaut_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83d\ude80\",\n    \"woman_astronaut_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83d\ude80\",\n    \"woman_astronaut_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83d\ude80\",\n    \"woman_astronaut_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83d\ude80\",\n    \"woman_biking\": \"\ud83d\udeb4\\u200d\u2640\ufe0f\",\n    \"woman_biking_dark_skin_tone\": \"\ud83d\udeb4\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_biking_light_skin_tone\": \"\ud83d\udeb4\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_biking_medium-dark_skin_tone\": \"\ud83d\udeb4\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_biking_medium-light_skin_tone\": \"\ud83d\udeb4\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_biking_medium_skin_tone\": \"\ud83d\udeb4\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_bouncing_ball\": \"\u26f9\ufe0f\\u200d\u2640\ufe0f\",\n    \"woman_bouncing_ball_dark_skin_tone\": \"\u26f9\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_bouncing_ball_light_skin_tone\": \"\u26f9\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_bouncing_ball_medium-dark_skin_tone\": \"\u26f9\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_bouncing_ball_medium-light_skin_tone\": \"\u26f9\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_bouncing_ball_medium_skin_tone\": \"\u26f9\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_bowing\": \"\ud83d\ude47\\u200d\u2640\ufe0f\",\n    \"woman_bowing_dark_skin_tone\": \"\ud83d\ude47\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_bowing_light_skin_tone\": \"\ud83d\ude47\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_bowing_medium-dark_skin_tone\": \"\ud83d\ude47\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_bowing_medium-light_skin_tone\": \"\ud83d\ude47\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_bowing_medium_skin_tone\": \"\ud83d\ude47\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_cartwheeling\": \"\ud83e\udd38\\u200d\u2640\ufe0f\",\n    \"woman_cartwheeling_dark_skin_tone\": \"\ud83e\udd38\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_cartwheeling_light_skin_tone\": \"\ud83e\udd38\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_cartwheeling_medium-dark_skin_tone\": \"\ud83e\udd38\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_cartwheeling_medium-light_skin_tone\": \"\ud83e\udd38\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_cartwheeling_medium_skin_tone\": \"\ud83e\udd38\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_climbing\": \"\ud83e\uddd7\\u200d\u2640\ufe0f\",\n    \"woman_climbing_dark_skin_tone\": \"\ud83e\uddd7\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_climbing_light_skin_tone\": \"\ud83e\uddd7\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_climbing_medium-dark_skin_tone\": \"\ud83e\uddd7\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_climbing_medium-light_skin_tone\": \"\ud83e\uddd7\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_climbing_medium_skin_tone\": \"\ud83e\uddd7\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_construction_worker\": \"\ud83d\udc77\\u200d\u2640\ufe0f\",\n    \"woman_construction_worker_dark_skin_tone\": \"\ud83d\udc77\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_construction_worker_light_skin_tone\": \"\ud83d\udc77\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_construction_worker_medium-dark_skin_tone\": \"\ud83d\udc77\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_construction_worker_medium-light_skin_tone\": \"\ud83d\udc77\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_construction_worker_medium_skin_tone\": \"\ud83d\udc77\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_cook\": \"\ud83d\udc69\\u200d\ud83c\udf73\",\n    \"woman_cook_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83c\udf73\",\n    \"woman_cook_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83c\udf73\",\n    \"woman_cook_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83c\udf73\",\n    \"woman_cook_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83c\udf73\",\n    \"woman_cook_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83c\udf73\",\n    \"woman_dancing\": \"\ud83d\udc83\",\n    \"woman_dancing_dark_skin_tone\": \"\ud83d\udc83\ud83c\udfff\",\n    \"woman_dancing_light_skin_tone\": \"\ud83d\udc83\ud83c\udffb\",\n    \"woman_dancing_medium-dark_skin_tone\": \"\ud83d\udc83\ud83c\udffe\",\n    \"woman_dancing_medium-light_skin_tone\": \"\ud83d\udc83\ud83c\udffc\",\n    \"woman_dancing_medium_skin_tone\": \"\ud83d\udc83\ud83c\udffd\",\n    \"woman_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\",\n    \"woman_detective\": \"\ud83d\udd75\ufe0f\\u200d\u2640\ufe0f\",\n    \"woman_detective_dark_skin_tone\": \"\ud83d\udd75\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_detective_light_skin_tone\": \"\ud83d\udd75\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_detective_medium-dark_skin_tone\": \"\ud83d\udd75\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_detective_medium-light_skin_tone\": \"\ud83d\udd75\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_detective_medium_skin_tone\": \"\ud83d\udd75\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_elf\": \"\ud83e\udddd\\u200d\u2640\ufe0f\",\n    \"woman_elf_dark_skin_tone\": \"\ud83e\udddd\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_elf_light_skin_tone\": \"\ud83e\udddd\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_elf_medium-dark_skin_tone\": \"\ud83e\udddd\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_elf_medium-light_skin_tone\": \"\ud83e\udddd\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_elf_medium_skin_tone\": \"\ud83e\udddd\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_facepalming\": \"\ud83e\udd26\\u200d\u2640\ufe0f\",\n    \"woman_facepalming_dark_skin_tone\": \"\ud83e\udd26\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_facepalming_light_skin_tone\": \"\ud83e\udd26\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_facepalming_medium-dark_skin_tone\": \"\ud83e\udd26\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_facepalming_medium-light_skin_tone\": \"\ud83e\udd26\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_facepalming_medium_skin_tone\": \"\ud83e\udd26\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_factory_worker\": \"\ud83d\udc69\\u200d\ud83c\udfed\",\n    \"woman_factory_worker_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83c\udfed\",\n    \"woman_factory_worker_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83c\udfed\",\n    \"woman_factory_worker_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83c\udfed\",\n    \"woman_factory_worker_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83c\udfed\",\n    \"woman_factory_worker_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83c\udfed\",\n    \"woman_fairy\": \"\ud83e\uddda\\u200d\u2640\ufe0f\",\n    \"woman_fairy_dark_skin_tone\": \"\ud83e\uddda\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_fairy_light_skin_tone\": \"\ud83e\uddda\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_fairy_medium-dark_skin_tone\": \"\ud83e\uddda\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_fairy_medium-light_skin_tone\": \"\ud83e\uddda\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_fairy_medium_skin_tone\": \"\ud83e\uddda\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_farmer\": \"\ud83d\udc69\\u200d\ud83c\udf3e\",\n    \"woman_farmer_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83c\udf3e\",\n    \"woman_farmer_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83c\udf3e\",\n    \"woman_farmer_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83c\udf3e\",\n    \"woman_farmer_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83c\udf3e\",\n    \"woman_farmer_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83c\udf3e\",\n    \"woman_firefighter\": \"\ud83d\udc69\\u200d\ud83d\ude92\",\n    \"woman_firefighter_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83d\ude92\",\n    \"woman_firefighter_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83d\ude92\",\n    \"woman_firefighter_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83d\ude92\",\n    \"woman_firefighter_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83d\ude92\",\n    \"woman_firefighter_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83d\ude92\",\n    \"woman_frowning\": \"\ud83d\ude4d\\u200d\u2640\ufe0f\",\n    \"woman_frowning_dark_skin_tone\": \"\ud83d\ude4d\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_frowning_light_skin_tone\": \"\ud83d\ude4d\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_frowning_medium-dark_skin_tone\": \"\ud83d\ude4d\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_frowning_medium-light_skin_tone\": \"\ud83d\ude4d\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_frowning_medium_skin_tone\": \"\ud83d\ude4d\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_genie\": \"\ud83e\uddde\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_no\": \"\ud83d\ude45\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_no_dark_skin_tone\": \"\ud83d\ude45\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_no_light_skin_tone\": \"\ud83d\ude45\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_no_medium-dark_skin_tone\": \"\ud83d\ude45\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_no_medium-light_skin_tone\": \"\ud83d\ude45\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_no_medium_skin_tone\": \"\ud83d\ude45\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_ok\": \"\ud83d\ude46\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_ok_dark_skin_tone\": \"\ud83d\ude46\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_ok_light_skin_tone\": \"\ud83d\ude46\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_ok_medium-dark_skin_tone\": \"\ud83d\ude46\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_ok_medium-light_skin_tone\": \"\ud83d\ude46\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_gesturing_ok_medium_skin_tone\": \"\ud83d\ude46\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_getting_haircut\": \"\ud83d\udc87\\u200d\u2640\ufe0f\",\n    \"woman_getting_haircut_dark_skin_tone\": \"\ud83d\udc87\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_getting_haircut_light_skin_tone\": \"\ud83d\udc87\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_getting_haircut_medium-dark_skin_tone\": \"\ud83d\udc87\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_getting_haircut_medium-light_skin_tone\": \"\ud83d\udc87\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_getting_haircut_medium_skin_tone\": \"\ud83d\udc87\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_getting_massage\": \"\ud83d\udc86\\u200d\u2640\ufe0f\",\n    \"woman_getting_massage_dark_skin_tone\": \"\ud83d\udc86\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_getting_massage_light_skin_tone\": \"\ud83d\udc86\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_getting_massage_medium-dark_skin_tone\": \"\ud83d\udc86\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_getting_massage_medium-light_skin_tone\": \"\ud83d\udc86\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_getting_massage_medium_skin_tone\": \"\ud83d\udc86\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_golfing\": \"\ud83c\udfcc\ufe0f\\u200d\u2640\ufe0f\",\n    \"woman_golfing_dark_skin_tone\": \"\ud83c\udfcc\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_golfing_light_skin_tone\": \"\ud83c\udfcc\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_golfing_medium-dark_skin_tone\": \"\ud83c\udfcc\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_golfing_medium-light_skin_tone\": \"\ud83c\udfcc\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_golfing_medium_skin_tone\": \"\ud83c\udfcc\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_guard\": \"\ud83d\udc82\\u200d\u2640\ufe0f\",\n    \"woman_guard_dark_skin_tone\": \"\ud83d\udc82\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_guard_light_skin_tone\": \"\ud83d\udc82\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_guard_medium-dark_skin_tone\": \"\ud83d\udc82\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_guard_medium-light_skin_tone\": \"\ud83d\udc82\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_guard_medium_skin_tone\": \"\ud83d\udc82\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_health_worker\": \"\ud83d\udc69\\u200d\u2695\ufe0f\",\n    \"woman_health_worker_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\u2695\ufe0f\",\n    \"woman_health_worker_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\u2695\ufe0f\",\n    \"woman_health_worker_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\u2695\ufe0f\",\n    \"woman_health_worker_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\u2695\ufe0f\",\n    \"woman_health_worker_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\u2695\ufe0f\",\n    \"woman_in_lotus_position\": \"\ud83e\uddd8\\u200d\u2640\ufe0f\",\n    \"woman_in_lotus_position_dark_skin_tone\": \"\ud83e\uddd8\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_in_lotus_position_light_skin_tone\": \"\ud83e\uddd8\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_in_lotus_position_medium-dark_skin_tone\": \"\ud83e\uddd8\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_in_lotus_position_medium-light_skin_tone\": \"\ud83e\uddd8\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_in_lotus_position_medium_skin_tone\": \"\ud83e\uddd8\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_in_manual_wheelchair\": \"\ud83d\udc69\\u200d\ud83e\uddbd\",\n    \"woman_in_motorized_wheelchair\": \"\ud83d\udc69\\u200d\ud83e\uddbc\",\n    \"woman_in_steamy_room\": \"\ud83e\uddd6\\u200d\u2640\ufe0f\",\n    \"woman_in_steamy_room_dark_skin_tone\": \"\ud83e\uddd6\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_in_steamy_room_light_skin_tone\": \"\ud83e\uddd6\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_in_steamy_room_medium-dark_skin_tone\": \"\ud83e\uddd6\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_in_steamy_room_medium-light_skin_tone\": \"\ud83e\uddd6\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_in_steamy_room_medium_skin_tone\": \"\ud83e\uddd6\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_judge\": \"\ud83d\udc69\\u200d\u2696\ufe0f\",\n    \"woman_judge_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\u2696\ufe0f\",\n    \"woman_judge_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\u2696\ufe0f\",\n    \"woman_judge_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\u2696\ufe0f\",\n    \"woman_judge_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\u2696\ufe0f\",\n    \"woman_judge_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\u2696\ufe0f\",\n    \"woman_juggling\": \"\ud83e\udd39\\u200d\u2640\ufe0f\",\n    \"woman_juggling_dark_skin_tone\": \"\ud83e\udd39\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_juggling_light_skin_tone\": \"\ud83e\udd39\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_juggling_medium-dark_skin_tone\": \"\ud83e\udd39\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_juggling_medium-light_skin_tone\": \"\ud83e\udd39\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_juggling_medium_skin_tone\": \"\ud83e\udd39\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_lifting_weights\": \"\ud83c\udfcb\ufe0f\\u200d\u2640\ufe0f\",\n    \"woman_lifting_weights_dark_skin_tone\": \"\ud83c\udfcb\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_lifting_weights_light_skin_tone\": \"\ud83c\udfcb\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_lifting_weights_medium-dark_skin_tone\": \"\ud83c\udfcb\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_lifting_weights_medium-light_skin_tone\": \"\ud83c\udfcb\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_lifting_weights_medium_skin_tone\": \"\ud83c\udfcb\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\",\n    \"woman_mage\": \"\ud83e\uddd9\\u200d\u2640\ufe0f\",\n    \"woman_mage_dark_skin_tone\": \"\ud83e\uddd9\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_mage_light_skin_tone\": \"\ud83e\uddd9\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_mage_medium-dark_skin_tone\": \"\ud83e\uddd9\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_mage_medium-light_skin_tone\": \"\ud83e\uddd9\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_mage_medium_skin_tone\": \"\ud83e\uddd9\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_mechanic\": \"\ud83d\udc69\\u200d\ud83d\udd27\",\n    \"woman_mechanic_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83d\udd27\",\n    \"woman_mechanic_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83d\udd27\",\n    \"woman_mechanic_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83d\udd27\",\n    \"woman_mechanic_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83d\udd27\",\n    \"woman_mechanic_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83d\udd27\",\n    \"woman_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\",\n    \"woman_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\",\n    \"woman_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\",\n    \"woman_mountain_biking\": \"\ud83d\udeb5\\u200d\u2640\ufe0f\",\n    \"woman_mountain_biking_dark_skin_tone\": \"\ud83d\udeb5\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_mountain_biking_light_skin_tone\": \"\ud83d\udeb5\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_mountain_biking_medium-dark_skin_tone\": \"\ud83d\udeb5\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_mountain_biking_medium-light_skin_tone\": \"\ud83d\udeb5\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_mountain_biking_medium_skin_tone\": \"\ud83d\udeb5\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_office_worker\": \"\ud83d\udc69\\u200d\ud83d\udcbc\",\n    \"woman_office_worker_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83d\udcbc\",\n    \"woman_office_worker_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83d\udcbc\",\n    \"woman_office_worker_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83d\udcbc\",\n    \"woman_office_worker_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83d\udcbc\",\n    \"woman_office_worker_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83d\udcbc\",\n    \"woman_pilot\": \"\ud83d\udc69\\u200d\u2708\ufe0f\",\n    \"woman_pilot_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\u2708\ufe0f\",\n    \"woman_pilot_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\u2708\ufe0f\",\n    \"woman_pilot_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\u2708\ufe0f\",\n    \"woman_pilot_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\u2708\ufe0f\",\n    \"woman_pilot_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\u2708\ufe0f\",\n    \"woman_playing_handball\": \"\ud83e\udd3e\\u200d\u2640\ufe0f\",\n    \"woman_playing_handball_dark_skin_tone\": \"\ud83e\udd3e\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_playing_handball_light_skin_tone\": \"\ud83e\udd3e\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_playing_handball_medium-dark_skin_tone\": \"\ud83e\udd3e\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_playing_handball_medium-light_skin_tone\": \"\ud83e\udd3e\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_playing_handball_medium_skin_tone\": \"\ud83e\udd3e\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_playing_water_polo\": \"\ud83e\udd3d\\u200d\u2640\ufe0f\",\n    \"woman_playing_water_polo_dark_skin_tone\": \"\ud83e\udd3d\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_playing_water_polo_light_skin_tone\": \"\ud83e\udd3d\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_playing_water_polo_medium-dark_skin_tone\": \"\ud83e\udd3d\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_playing_water_polo_medium-light_skin_tone\": \"\ud83e\udd3d\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_playing_water_polo_medium_skin_tone\": \"\ud83e\udd3d\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_police_officer\": \"\ud83d\udc6e\\u200d\u2640\ufe0f\",\n    \"woman_police_officer_dark_skin_tone\": \"\ud83d\udc6e\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_police_officer_light_skin_tone\": \"\ud83d\udc6e\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_police_officer_medium-dark_skin_tone\": \"\ud83d\udc6e\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_police_officer_medium-light_skin_tone\": \"\ud83d\udc6e\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_police_officer_medium_skin_tone\": \"\ud83d\udc6e\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_pouting\": \"\ud83d\ude4e\\u200d\u2640\ufe0f\",\n    \"woman_pouting_dark_skin_tone\": \"\ud83d\ude4e\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_pouting_light_skin_tone\": \"\ud83d\ude4e\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_pouting_medium-dark_skin_tone\": \"\ud83d\ude4e\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_pouting_medium-light_skin_tone\": \"\ud83d\ude4e\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_pouting_medium_skin_tone\": \"\ud83d\ude4e\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_raising_hand\": \"\ud83d\ude4b\\u200d\u2640\ufe0f\",\n    \"woman_raising_hand_dark_skin_tone\": \"\ud83d\ude4b\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_raising_hand_light_skin_tone\": \"\ud83d\ude4b\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_raising_hand_medium-dark_skin_tone\": \"\ud83d\ude4b\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_raising_hand_medium-light_skin_tone\": \"\ud83d\ude4b\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_raising_hand_medium_skin_tone\": \"\ud83d\ude4b\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_rowing_boat\": \"\ud83d\udea3\\u200d\u2640\ufe0f\",\n    \"woman_rowing_boat_dark_skin_tone\": \"\ud83d\udea3\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_rowing_boat_light_skin_tone\": \"\ud83d\udea3\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_rowing_boat_medium-dark_skin_tone\": \"\ud83d\udea3\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_rowing_boat_medium-light_skin_tone\": \"\ud83d\udea3\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_rowing_boat_medium_skin_tone\": \"\ud83d\udea3\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_running\": \"\ud83c\udfc3\\u200d\u2640\ufe0f\",\n    \"woman_running_dark_skin_tone\": \"\ud83c\udfc3\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_running_light_skin_tone\": \"\ud83c\udfc3\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_running_medium-dark_skin_tone\": \"\ud83c\udfc3\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_running_medium-light_skin_tone\": \"\ud83c\udfc3\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_running_medium_skin_tone\": \"\ud83c\udfc3\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_scientist\": \"\ud83d\udc69\\u200d\ud83d\udd2c\",\n    \"woman_scientist_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83d\udd2c\",\n    \"woman_scientist_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83d\udd2c\",\n    \"woman_scientist_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83d\udd2c\",\n    \"woman_scientist_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83d\udd2c\",\n    \"woman_scientist_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83d\udd2c\",\n    \"woman_shrugging\": \"\ud83e\udd37\\u200d\u2640\ufe0f\",\n    \"woman_shrugging_dark_skin_tone\": \"\ud83e\udd37\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_shrugging_light_skin_tone\": \"\ud83e\udd37\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_shrugging_medium-dark_skin_tone\": \"\ud83e\udd37\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_shrugging_medium-light_skin_tone\": \"\ud83e\udd37\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_shrugging_medium_skin_tone\": \"\ud83e\udd37\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_singer\": \"\ud83d\udc69\\u200d\ud83c\udfa4\",\n    \"woman_singer_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83c\udfa4\",\n    \"woman_singer_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83c\udfa4\",\n    \"woman_singer_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83c\udfa4\",\n    \"woman_singer_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83c\udfa4\",\n    \"woman_singer_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83c\udfa4\",\n    \"woman_student\": \"\ud83d\udc69\\u200d\ud83c\udf93\",\n    \"woman_student_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83c\udf93\",\n    \"woman_student_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83c\udf93\",\n    \"woman_student_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83c\udf93\",\n    \"woman_student_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83c\udf93\",\n    \"woman_student_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83c\udf93\",\n    \"woman_surfing\": \"\ud83c\udfc4\\u200d\u2640\ufe0f\",\n    \"woman_surfing_dark_skin_tone\": \"\ud83c\udfc4\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_surfing_light_skin_tone\": \"\ud83c\udfc4\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_surfing_medium-dark_skin_tone\": \"\ud83c\udfc4\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_surfing_medium-light_skin_tone\": \"\ud83c\udfc4\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_surfing_medium_skin_tone\": \"\ud83c\udfc4\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_swimming\": \"\ud83c\udfca\\u200d\u2640\ufe0f\",\n    \"woman_swimming_dark_skin_tone\": \"\ud83c\udfca\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_swimming_light_skin_tone\": \"\ud83c\udfca\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_swimming_medium-dark_skin_tone\": \"\ud83c\udfca\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_swimming_medium-light_skin_tone\": \"\ud83c\udfca\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_swimming_medium_skin_tone\": \"\ud83c\udfca\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_teacher\": \"\ud83d\udc69\\u200d\ud83c\udfeb\",\n    \"woman_teacher_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83c\udfeb\",\n    \"woman_teacher_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83c\udfeb\",\n    \"woman_teacher_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83c\udfeb\",\n    \"woman_teacher_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83c\udfeb\",\n    \"woman_teacher_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83c\udfeb\",\n    \"woman_technologist\": \"\ud83d\udc69\\u200d\ud83d\udcbb\",\n    \"woman_technologist_dark_skin_tone\": \"\ud83d\udc69\ud83c\udfff\\u200d\ud83d\udcbb\",\n    \"woman_technologist_light_skin_tone\": \"\ud83d\udc69\ud83c\udffb\\u200d\ud83d\udcbb\",\n    \"woman_technologist_medium-dark_skin_tone\": \"\ud83d\udc69\ud83c\udffe\\u200d\ud83d\udcbb\",\n    \"woman_technologist_medium-light_skin_tone\": \"\ud83d\udc69\ud83c\udffc\\u200d\ud83d\udcbb\",\n    \"woman_technologist_medium_skin_tone\": \"\ud83d\udc69\ud83c\udffd\\u200d\ud83d\udcbb\",\n    \"woman_tipping_hand\": \"\ud83d\udc81\\u200d\u2640\ufe0f\",\n    \"woman_tipping_hand_dark_skin_tone\": \"\ud83d\udc81\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_tipping_hand_light_skin_tone\": \"\ud83d\udc81\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_tipping_hand_medium-dark_skin_tone\": \"\ud83d\udc81\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_tipping_hand_medium-light_skin_tone\": \"\ud83d\udc81\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_tipping_hand_medium_skin_tone\": \"\ud83d\udc81\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_vampire\": \"\ud83e\udddb\\u200d\u2640\ufe0f\",\n    \"woman_vampire_dark_skin_tone\": \"\ud83e\udddb\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_vampire_light_skin_tone\": \"\ud83e\udddb\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_vampire_medium-dark_skin_tone\": \"\ud83e\udddb\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_vampire_medium-light_skin_tone\": \"\ud83e\udddb\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_vampire_medium_skin_tone\": \"\ud83e\udddb\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_walking\": \"\ud83d\udeb6\\u200d\u2640\ufe0f\",\n    \"woman_walking_dark_skin_tone\": \"\ud83d\udeb6\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_walking_light_skin_tone\": \"\ud83d\udeb6\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_walking_medium-dark_skin_tone\": \"\ud83d\udeb6\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_walking_medium-light_skin_tone\": \"\ud83d\udeb6\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_walking_medium_skin_tone\": \"\ud83d\udeb6\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_wearing_turban\": \"\ud83d\udc73\\u200d\u2640\ufe0f\",\n    \"woman_wearing_turban_dark_skin_tone\": \"\ud83d\udc73\ud83c\udfff\\u200d\u2640\ufe0f\",\n    \"woman_wearing_turban_light_skin_tone\": \"\ud83d\udc73\ud83c\udffb\\u200d\u2640\ufe0f\",\n    \"woman_wearing_turban_medium-dark_skin_tone\": \"\ud83d\udc73\ud83c\udffe\\u200d\u2640\ufe0f\",\n    \"woman_wearing_turban_medium-light_skin_tone\": \"\ud83d\udc73\ud83c\udffc\\u200d\u2640\ufe0f\",\n    \"woman_wearing_turban_medium_skin_tone\": \"\ud83d\udc73\ud83c\udffd\\u200d\u2640\ufe0f\",\n    \"woman_with_headscarf\": \"\ud83e\uddd5\",\n    \"woman_with_headscarf_dark_skin_tone\": \"\ud83e\uddd5\ud83c\udfff\",\n    \"woman_with_headscarf_light_skin_tone\": \"\ud83e\uddd5\ud83c\udffb\",\n    \"woman_with_headscarf_medium-dark_skin_tone\": \"\ud83e\uddd5\ud83c\udffe\",\n    \"woman_with_headscarf_medium-light_skin_tone\": \"\ud83e\uddd5\ud83c\udffc\",\n    \"woman_with_headscarf_medium_skin_tone\": \"\ud83e\uddd5\ud83c\udffd\",\n    \"woman_with_probing_cane\": \"\ud83d\udc69\\u200d\ud83e\uddaf\",\n    \"woman_zombie\": \"\ud83e\udddf\\u200d\u2640\ufe0f\",\n    \"woman\u2019s_boot\": \"\ud83d\udc62\",\n    \"woman\u2019s_clothes\": \"\ud83d\udc5a\",\n    \"woman\u2019s_hat\": \"\ud83d\udc52\",\n    \"woman\u2019s_sandal\": \"\ud83d\udc61\",\n    \"women_with_bunny_ears\": \"\ud83d\udc6f\\u200d\u2640\ufe0f\",\n    \"women_wrestling\": \"\ud83e\udd3c\\u200d\u2640\ufe0f\",\n    \"women\u2019s_room\": \"\ud83d\udeba\",\n    \"woozy_face\": \"\ud83e\udd74\",\n    \"world_map\": \"\ud83d\uddfa\",\n    \"worried_face\": \"\ud83d\ude1f\",\n    \"wrapped_gift\": \"\ud83c\udf81\",\n    \"wrench\": \"\ud83d\udd27\",\n    \"writing_hand\": \"\u270d\",\n    \"writing_hand_dark_skin_tone\": \"\u270d\ud83c\udfff\",\n    \"writing_hand_light_skin_tone\": \"\u270d\ud83c\udffb\",\n    \"writing_hand_medium-dark_skin_tone\": \"\u270d\ud83c\udffe\",\n    \"writing_hand_medium-light_skin_tone\": \"\u270d\ud83c\udffc\",\n    \"writing_hand_medium_skin_tone\": \"\u270d\ud83c\udffd\",\n    \"yarn\": \"\ud83e\uddf6\",\n    \"yawning_face\": \"\ud83e\udd71\",\n    \"yellow_circle\": \"\ud83d\udfe1\",\n    \"yellow_heart\": \"\ud83d\udc9b\",\n    \"yellow_square\": \"\ud83d\udfe8\",\n    \"yen_banknote\": \"\ud83d\udcb4\",\n    \"yo-yo\": \"\ud83e\ude80\",\n    \"yin_yang\": \"\u262f\",\n    \"zany_face\": \"\ud83e\udd2a\",\n    \"zebra\": \"\ud83e\udd93\",\n    \"zipper-mouth_face\": \"\ud83e\udd10\",\n    \"zombie\": \"\ud83e\udddf\",\n    \"zzz\": \"\ud83d\udca4\",\n    \"\u00e5land_islands\": \"\ud83c\udde6\ud83c\uddfd\",\n    \"keycap_asterisk\": \"*\u20e3\",\n    \"keycap_digit_eight\": \"8\u20e3\",\n    \"keycap_digit_five\": \"5\u20e3\",\n    \"keycap_digit_four\": \"4\u20e3\",\n    \"keycap_digit_nine\": \"9\u20e3\",\n    \"keycap_digit_one\": \"1\u20e3\",\n    \"keycap_digit_seven\": \"7\u20e3\",\n    \"keycap_digit_six\": \"6\u20e3\",\n    \"keycap_digit_three\": \"3\u20e3\",\n    \"keycap_digit_two\": \"2\u20e3\",\n    \"keycap_digit_zero\": \"0\u20e3\",\n    \"keycap_number_sign\": \"#\u20e3\",\n    \"light_skin_tone\": \"\ud83c\udffb\",\n    \"medium_light_skin_tone\": \"\ud83c\udffc\",\n    \"medium_skin_tone\": \"\ud83c\udffd\",\n    \"medium_dark_skin_tone\": \"\ud83c\udffe\",\n    \"dark_skin_tone\": \"\ud83c\udfff\",\n    \"regional_indicator_symbol_letter_a\": \"\ud83c\udde6\",\n    \"regional_indicator_symbol_letter_b\": \"\ud83c\udde7\",\n    \"regional_indicator_symbol_letter_c\": \"\ud83c\udde8\",\n    \"regional_indicator_symbol_letter_d\": \"\ud83c\udde9\",\n    \"regional_indicator_symbol_letter_e\": \"\ud83c\uddea\",\n    \"regional_indicator_symbol_letter_f\": \"\ud83c\uddeb\",\n    \"regional_indicator_symbol_letter_g\": \"\ud83c\uddec\",\n    \"regional_indicator_symbol_letter_h\": \"\ud83c\udded\",\n    \"regional_indicator_symbol_letter_i\": \"\ud83c\uddee\",\n    \"regional_indicator_symbol_letter_j\": \"\ud83c\uddef\",\n    \"regional_indicator_symbol_letter_k\": \"\ud83c\uddf0\",\n    \"regional_indicator_symbol_letter_l\": \"\ud83c\uddf1\",\n    \"regional_indicator_symbol_letter_m\": \"\ud83c\uddf2\",\n    \"regional_indicator_symbol_letter_n\": \"\ud83c\uddf3\",\n    \"regional_indicator_symbol_letter_o\": \"\ud83c\uddf4\",\n    \"regional_indicator_symbol_letter_p\": \"\ud83c\uddf5\",\n    \"regional_indicator_symbol_letter_q\": \"\ud83c\uddf6\",\n    \"regional_indicator_symbol_letter_r\": \"\ud83c\uddf7\",\n    \"regional_indicator_symbol_letter_s\": \"\ud83c\uddf8\",\n    \"regional_indicator_symbol_letter_t\": \"\ud83c\uddf9\",\n    \"regional_indicator_symbol_letter_u\": \"\ud83c\uddfa\",\n    \"regional_indicator_symbol_letter_v\": \"\ud83c\uddfb\",\n    \"regional_indicator_symbol_letter_w\": \"\ud83c\uddfc\",\n    \"regional_indicator_symbol_letter_x\": \"\ud83c\uddfd\",\n    \"regional_indicator_symbol_letter_y\": \"\ud83c\uddfe\",\n    \"regional_indicator_symbol_letter_z\": \"\ud83c\uddff\",\n    \"airplane_arriving\": \"\ud83d\udeec\",\n    \"space_invader\": \"\ud83d\udc7e\",\n    \"football\": \"\ud83c\udfc8\",\n    \"anger\": \"\ud83d\udca2\",\n    \"angry\": \"\ud83d\ude20\",\n    \"anguished\": \"\ud83d\ude27\",\n    \"signal_strength\": \"\ud83d\udcf6\",\n    \"arrows_counterclockwise\": \"\ud83d\udd04\",\n    \"arrow_heading_down\": \"\u2935\",\n    \"arrow_heading_up\": \"\u2934\",\n    \"art\": \"\ud83c\udfa8\",\n    \"astonished\": \"\ud83d\ude32\",\n    \"athletic_shoe\": \"\ud83d\udc5f\",\n    \"atm\": \"\ud83c\udfe7\",\n    \"car\": \"\ud83d\ude97\",\n    \"red_car\": \"\ud83d\ude97\",\n    \"angel\": \"\ud83d\udc7c\",\n    \"back\": \"\ud83d\udd19\",\n    \"badminton_racquet_and_shuttlecock\": \"\ud83c\udff8\",\n    \"dollar\": \"\ud83d\udcb5\",\n    \"euro\": \"\ud83d\udcb6\",\n    \"pound\": \"\ud83d\udcb7\",\n    \"yen\": \"\ud83d\udcb4\",\n    \"barber\": \"\ud83d\udc88\",\n    \"bath\": \"\ud83d\udec0\",\n    \"bear\": \"\ud83d\udc3b\",\n    \"heartbeat\": \"\ud83d\udc93\",\n    \"beer\": \"\ud83c\udf7a\",\n    \"no_bell\": \"\ud83d\udd15\",\n    \"bento\": \"\ud83c\udf71\",\n    \"bike\": \"\ud83d\udeb2\",\n    \"bicyclist\": \"\ud83d\udeb4\",\n    \"8ball\": \"\ud83c\udfb1\",\n    \"biohazard_sign\": \"\u2623\",\n    \"birthday\": \"\ud83c\udf82\",\n    \"black_circle_for_record\": \"\u23fa\",\n    \"clubs\": \"\u2663\",\n    \"diamonds\": \"\u2666\",\n    \"arrow_double_down\": \"\u23ec\",\n    \"hearts\": \"\u2665\",\n    \"rewind\": \"\u23ea\",\n    \"black_left__pointing_double_triangle_with_vertical_bar\": \"\u23ee\",\n    \"arrow_backward\": \"\u25c0\",\n    \"black_medium_small_square\": \"\u25fe\",\n    \"question\": \"\u2753\",\n    \"fast_forward\": \"\u23e9\",\n    \"black_right__pointing_double_triangle_with_vertical_bar\": \"\u23ed\",\n    \"arrow_forward\": \"\u25b6\",\n    \"black_right__pointing_triangle_with_double_vertical_bar\": \"\u23ef\",\n    \"arrow_right\": \"\u27a1\",\n    \"spades\": \"\u2660\",\n    \"black_square_for_stop\": \"\u23f9\",\n    \"sunny\": \"\u2600\",\n    \"phone\": \"\u260e\",\n    \"recycle\": \"\u267b\",\n    \"arrow_double_up\": \"\u23eb\",\n    \"busstop\": \"\ud83d\ude8f\",\n    \"date\": \"\ud83d\udcc5\",\n    \"flags\": \"\ud83c\udf8f\",\n    \"cat2\": \"\ud83d\udc08\",\n    \"joy_cat\": \"\ud83d\ude39\",\n    \"smirk_cat\": \"\ud83d\ude3c\",\n    \"chart_with_downwards_trend\": \"\ud83d\udcc9\",\n    \"chart_with_upwards_trend\": \"\ud83d\udcc8\",\n    \"chart\": \"\ud83d\udcb9\",\n    \"mega\": \"\ud83d\udce3\",\n    \"checkered_flag\": \"\ud83c\udfc1\",\n    \"accept\": \"\ud83c\ude51\",\n    \"ideograph_advantage\": \"\ud83c\ude50\",\n    \"congratulations\": \"\u3297\",\n    \"secret\": \"\u3299\",\n    \"m\": \"\u24c2\",\n    \"city_sunset\": \"\ud83c\udf06\",\n    \"clapper\": \"\ud83c\udfac\",\n    \"clap\": \"\ud83d\udc4f\",\n    \"beers\": \"\ud83c\udf7b\",\n    \"clock830\": \"\ud83d\udd63\",\n    \"clock8\": \"\ud83d\udd57\",\n    \"clock1130\": \"\ud83d\udd66\",\n    \"clock11\": \"\ud83d\udd5a\",\n    \"clock530\": \"\ud83d\udd60\",\n    \"clock5\": \"\ud83d\udd54\",\n    \"clock430\": \"\ud83d\udd5f\",\n    \"clock4\": \"\ud83d\udd53\",\n    \"clock930\": \"\ud83d\udd64\",\n    \"clock9\": \"\ud83d\udd58\",\n    \"clock130\": \"\ud83d\udd5c\",\n    \"clock1\": \"\ud83d\udd50\",\n    \"clock730\": \"\ud83d\udd62\",\n    \"clock7\": \"\ud83d\udd56\",\n    \"clock630\": \"\ud83d\udd61\",\n    \"clock6\": \"\ud83d\udd55\",\n    \"clock1030\": \"\ud83d\udd65\",\n    \"clock10\": \"\ud83d\udd59\",\n    \"clock330\": \"\ud83d\udd5e\",\n    \"clock3\": \"\ud83d\udd52\",\n    \"clock1230\": \"\ud83d\udd67\",\n    \"clock12\": \"\ud83d\udd5b\",\n    \"clock230\": \"\ud83d\udd5d\",\n    \"clock2\": \"\ud83d\udd51\",\n    \"arrows_clockwise\": \"\ud83d\udd03\",\n    \"repeat\": \"\ud83d\udd01\",\n    \"repeat_one\": \"\ud83d\udd02\",\n    \"closed_lock_with_key\": \"\ud83d\udd10\",\n    \"mailbox_closed\": \"\ud83d\udcea\",\n    \"mailbox\": \"\ud83d\udceb\",\n    \"cloud_with_tornado\": \"\ud83c\udf2a\",\n    \"cocktail\": \"\ud83c\udf78\",\n    \"boom\": \"\ud83d\udca5\",\n    \"compression\": \"\ud83d\udddc\",\n    \"confounded\": \"\ud83d\ude16\",\n    \"confused\": \"\ud83d\ude15\",\n    \"rice\": \"\ud83c\udf5a\",\n    \"cow2\": \"\ud83d\udc04\",\n    \"cricket_bat_and_ball\": \"\ud83c\udfcf\",\n    \"x\": \"\u274c\",\n    \"cry\": \"\ud83d\ude22\",\n    \"curry\": \"\ud83c\udf5b\",\n    \"dagger_knife\": \"\ud83d\udde1\",\n    \"dancer\": \"\ud83d\udc83\",\n    \"dark_sunglasses\": \"\ud83d\udd76\",\n    \"dash\": \"\ud83d\udca8\",\n    \"truck\": \"\ud83d\ude9a\",\n    \"derelict_house_building\": \"\ud83c\udfda\",\n    \"diamond_shape_with_a_dot_inside\": \"\ud83d\udca0\",\n    \"dart\": \"\ud83c\udfaf\",\n    \"disappointed_relieved\": \"\ud83d\ude25\",\n    \"disappointed\": \"\ud83d\ude1e\",\n    \"do_not_litter\": \"\ud83d\udeaf\",\n    \"dog2\": \"\ud83d\udc15\",\n    \"flipper\": \"\ud83d\udc2c\",\n    \"loop\": \"\u27bf\",\n    \"bangbang\": \"\u203c\",\n    \"double_vertical_bar\": \"\u23f8\",\n    \"dove_of_peace\": \"\ud83d\udd4a\",\n    \"small_red_triangle_down\": \"\ud83d\udd3b\",\n    \"arrow_down_small\": \"\ud83d\udd3d\",\n    \"arrow_down\": \"\u2b07\",\n    \"dromedary_camel\": \"\ud83d\udc2a\",\n    \"e__mail\": \"\ud83d\udce7\",\n    \"corn\": \"\ud83c\udf3d\",\n    \"ear_of_rice\": \"\ud83c\udf3e\",\n    \"earth_americas\": \"\ud83c\udf0e\",\n    \"earth_asia\": \"\ud83c\udf0f\",\n    \"earth_africa\": \"\ud83c\udf0d\",\n    \"eight_pointed_black_star\": \"\u2734\",\n    \"eight_spoked_asterisk\": \"\u2733\",\n    \"eject_symbol\": \"\u23cf\",\n    \"bulb\": \"\ud83d\udca1\",\n    \"emoji_modifier_fitzpatrick_type__1__2\": \"\ud83c\udffb\",\n    \"emoji_modifier_fitzpatrick_type__3\": \"\ud83c\udffc\",\n    \"emoji_modifier_fitzpatrick_type__4\": \"\ud83c\udffd\",\n    \"emoji_modifier_fitzpatrick_type__5\": \"\ud83c\udffe\",\n    \"emoji_modifier_fitzpatrick_type__6\": \"\ud83c\udfff\",\n    \"end\": \"\ud83d\udd1a\",\n    \"email\": \"\u2709\",\n    \"european_castle\": \"\ud83c\udff0\",\n    \"european_post_office\": \"\ud83c\udfe4\",\n    \"interrobang\": \"\u2049\",\n    \"expressionless\": \"\ud83d\ude11\",\n    \"eyeglasses\": \"\ud83d\udc53\",\n    \"massage\": \"\ud83d\udc86\",\n    \"yum\": \"\ud83d\ude0b\",\n    \"scream\": \"\ud83d\ude31\",\n    \"kissing_heart\": \"\ud83d\ude18\",\n    \"sweat\": \"\ud83d\ude13\",\n    \"face_with_head__bandage\": \"\ud83e\udd15\",\n    \"triumph\": \"\ud83d\ude24\",\n    \"mask\": \"\ud83d\ude37\",\n    \"no_good\": \"\ud83d\ude45\",\n    \"ok_woman\": \"\ud83d\ude46\",\n    \"open_mouth\": \"\ud83d\ude2e\",\n    \"cold_sweat\": \"\ud83d\ude30\",\n    \"stuck_out_tongue\": \"\ud83d\ude1b\",\n    \"stuck_out_tongue_closed_eyes\": \"\ud83d\ude1d\",\n    \"stuck_out_tongue_winking_eye\": \"\ud83d\ude1c\",\n    \"joy\": \"\ud83d\ude02\",\n    \"no_mouth\": \"\ud83d\ude36\",\n    \"santa\": \"\ud83c\udf85\",\n    \"fax\": \"\ud83d\udce0\",\n    \"fearful\": \"\ud83d\ude28\",\n    \"field_hockey_stick_and_ball\": \"\ud83c\udfd1\",\n    \"first_quarter_moon_with_face\": \"\ud83c\udf1b\",\n    \"fish_cake\": \"\ud83c\udf65\",\n    \"fishing_pole_and_fish\": \"\ud83c\udfa3\",\n    \"facepunch\": \"\ud83d\udc4a\",\n    \"punch\": \"\ud83d\udc4a\",\n    \"flag_for_afghanistan\": \"\ud83c\udde6\ud83c\uddeb\",\n    \"flag_for_albania\": \"\ud83c\udde6\ud83c\uddf1\",\n    \"flag_for_algeria\": \"\ud83c\udde9\ud83c\uddff\",\n    \"flag_for_american_samoa\": \"\ud83c\udde6\ud83c\uddf8\",\n    \"flag_for_andorra\": \"\ud83c\udde6\ud83c\udde9\",\n    \"flag_for_angola\": \"\ud83c\udde6\ud83c\uddf4\",\n    \"flag_for_anguilla\": \"\ud83c\udde6\ud83c\uddee\",\n    \"flag_for_antarctica\": \"\ud83c\udde6\ud83c\uddf6\",\n    \"flag_for_antigua_&_barbuda\": \"\ud83c\udde6\ud83c\uddec\",\n    \"flag_for_argentina\": \"\ud83c\udde6\ud83c\uddf7\",\n    \"flag_for_armenia\": \"\ud83c\udde6\ud83c\uddf2\",\n    \"flag_for_aruba\": \"\ud83c\udde6\ud83c\uddfc\",\n    \"flag_for_ascension_island\": \"\ud83c\udde6\ud83c\udde8\",\n    \"flag_for_australia\": \"\ud83c\udde6\ud83c\uddfa\",\n    \"flag_for_austria\": \"\ud83c\udde6\ud83c\uddf9\",\n    \"flag_for_azerbaijan\": \"\ud83c\udde6\ud83c\uddff\",\n    \"flag_for_bahamas\": \"\ud83c\udde7\ud83c\uddf8\",\n    \"flag_for_bahrain\": \"\ud83c\udde7\ud83c\udded\",\n    \"flag_for_bangladesh\": \"\ud83c\udde7\ud83c\udde9\",\n    \"flag_for_barbados\": \"\ud83c\udde7\ud83c\udde7\",\n    \"flag_for_belarus\": \"\ud83c\udde7\ud83c\uddfe\",\n    \"flag_for_belgium\": \"\ud83c\udde7\ud83c\uddea\",\n    \"flag_for_belize\": \"\ud83c\udde7\ud83c\uddff\",\n    \"flag_for_benin\": \"\ud83c\udde7\ud83c\uddef\",\n    \"flag_for_bermuda\": \"\ud83c\udde7\ud83c\uddf2\",\n    \"flag_for_bhutan\": \"\ud83c\udde7\ud83c\uddf9\",\n    \"flag_for_bolivia\": \"\ud83c\udde7\ud83c\uddf4\",\n    \"flag_for_bosnia_&_herzegovina\": \"\ud83c\udde7\ud83c\udde6\",\n    \"flag_for_botswana\": \"\ud83c\udde7\ud83c\uddfc\",\n    \"flag_for_bouvet_island\": \"\ud83c\udde7\ud83c\uddfb\",\n    \"flag_for_brazil\": \"\ud83c\udde7\ud83c\uddf7\",\n    \"flag_for_british_indian_ocean_territory\": \"\ud83c\uddee\ud83c\uddf4\",\n    \"flag_for_british_virgin_islands\": \"\ud83c\uddfb\ud83c\uddec\",\n    \"flag_for_brunei\": \"\ud83c\udde7\ud83c\uddf3\",\n    \"flag_for_bulgaria\": \"\ud83c\udde7\ud83c\uddec\",\n    \"flag_for_burkina_faso\": \"\ud83c\udde7\ud83c\uddeb\",\n    \"flag_for_burundi\": \"\ud83c\udde7\ud83c\uddee\",\n    \"flag_for_cambodia\": \"\ud83c\uddf0\ud83c\udded\",\n    \"flag_for_cameroon\": \"\ud83c\udde8\ud83c\uddf2\",\n    \"flag_for_canada\": \"\ud83c\udde8\ud83c\udde6\",\n    \"flag_for_canary_islands\": \"\ud83c\uddee\ud83c\udde8\",\n    \"flag_for_cape_verde\": \"\ud83c\udde8\ud83c\uddfb\",\n    \"flag_for_caribbean_netherlands\": \"\ud83c\udde7\ud83c\uddf6\",\n    \"flag_for_cayman_islands\": \"\ud83c\uddf0\ud83c\uddfe\",\n    \"flag_for_central_african_republic\": \"\ud83c\udde8\ud83c\uddeb\",\n    \"flag_for_ceuta_&_melilla\": \"\ud83c\uddea\ud83c\udde6\",\n    \"flag_for_chad\": \"\ud83c\uddf9\ud83c\udde9\",\n    \"flag_for_chile\": \"\ud83c\udde8\ud83c\uddf1\",\n    \"flag_for_china\": \"\ud83c\udde8\ud83c\uddf3\",\n    \"flag_for_christmas_island\": \"\ud83c\udde8\ud83c\uddfd\",\n    \"flag_for_clipperton_island\": \"\ud83c\udde8\ud83c\uddf5\",\n    \"flag_for_cocos__islands\": \"\ud83c\udde8\ud83c\udde8\",\n    \"flag_for_colombia\": \"\ud83c\udde8\ud83c\uddf4\",\n    \"flag_for_comoros\": \"\ud83c\uddf0\ud83c\uddf2\",\n    \"flag_for_congo____brazzaville\": \"\ud83c\udde8\ud83c\uddec\",\n    \"flag_for_congo____kinshasa\": \"\ud83c\udde8\ud83c\udde9\",\n    \"flag_for_cook_islands\": \"\ud83c\udde8\ud83c\uddf0\",\n    \"flag_for_costa_rica\": \"\ud83c\udde8\ud83c\uddf7\",\n    \"flag_for_croatia\": \"\ud83c\udded\ud83c\uddf7\",\n    \"flag_for_cuba\": \"\ud83c\udde8\ud83c\uddfa\",\n    \"flag_for_cura\u00e7ao\": \"\ud83c\udde8\ud83c\uddfc\",\n    \"flag_for_cyprus\": \"\ud83c\udde8\ud83c\uddfe\",\n    \"flag_for_czech_republic\": \"\ud83c\udde8\ud83c\uddff\",\n    \"flag_for_c\u00f4te_d\u2019ivoire\": \"\ud83c\udde8\ud83c\uddee\",\n    \"flag_for_denmark\": \"\ud83c\udde9\ud83c\uddf0\",\n    \"flag_for_diego_garcia\": \"\ud83c\udde9\ud83c\uddec\",\n    \"flag_for_djibouti\": \"\ud83c\udde9\ud83c\uddef\",\n    \"flag_for_dominica\": \"\ud83c\udde9\ud83c\uddf2\",\n    \"flag_for_dominican_republic\": \"\ud83c\udde9\ud83c\uddf4\",\n    \"flag_for_ecuador\": \"\ud83c\uddea\ud83c\udde8\",\n    \"flag_for_egypt\": \"\ud83c\uddea\ud83c\uddec\",\n    \"flag_for_el_salvador\": \"\ud83c\uddf8\ud83c\uddfb\",\n    \"flag_for_equatorial_guinea\": \"\ud83c\uddec\ud83c\uddf6\",\n    \"flag_for_eritrea\": \"\ud83c\uddea\ud83c\uddf7\",\n    \"flag_for_estonia\": \"\ud83c\uddea\ud83c\uddea\",\n    \"flag_for_ethiopia\": \"\ud83c\uddea\ud83c\uddf9\",\n    \"flag_for_european_union\": \"\ud83c\uddea\ud83c\uddfa\",\n    \"flag_for_falkland_islands\": \"\ud83c\uddeb\ud83c\uddf0\",\n    \"flag_for_faroe_islands\": \"\ud83c\uddeb\ud83c\uddf4\",\n    \"flag_for_fiji\": \"\ud83c\uddeb\ud83c\uddef\",\n    \"flag_for_finland\": \"\ud83c\uddeb\ud83c\uddee\",\n    \"flag_for_france\": \"\ud83c\uddeb\ud83c\uddf7\",\n    \"flag_for_french_guiana\": \"\ud83c\uddec\ud83c\uddeb\",\n    \"flag_for_french_polynesia\": \"\ud83c\uddf5\ud83c\uddeb\",\n    \"flag_for_french_southern_territories\": \"\ud83c\uddf9\ud83c\uddeb\",\n    \"flag_for_gabon\": \"\ud83c\uddec\ud83c\udde6\",\n    \"flag_for_gambia\": \"\ud83c\uddec\ud83c\uddf2\",\n    \"flag_for_georgia\": \"\ud83c\uddec\ud83c\uddea\",\n    \"flag_for_germany\": \"\ud83c\udde9\ud83c\uddea\",\n    \"flag_for_ghana\": \"\ud83c\uddec\ud83c\udded\",\n    \"flag_for_gibraltar\": \"\ud83c\uddec\ud83c\uddee\",\n    \"flag_for_greece\": \"\ud83c\uddec\ud83c\uddf7\",\n    \"flag_for_greenland\": \"\ud83c\uddec\ud83c\uddf1\",\n    \"flag_for_grenada\": \"\ud83c\uddec\ud83c\udde9\",\n    \"flag_for_guadeloupe\": \"\ud83c\uddec\ud83c\uddf5\",\n    \"flag_for_guam\": \"\ud83c\uddec\ud83c\uddfa\",\n    \"flag_for_guatemala\": \"\ud83c\uddec\ud83c\uddf9\",\n    \"flag_for_guernsey\": \"\ud83c\uddec\ud83c\uddec\",\n    \"flag_for_guinea\": \"\ud83c\uddec\ud83c\uddf3\",\n    \"flag_for_guinea__bissau\": \"\ud83c\uddec\ud83c\uddfc\",\n    \"flag_for_guyana\": \"\ud83c\uddec\ud83c\uddfe\",\n    \"flag_for_haiti\": \"\ud83c\udded\ud83c\uddf9\",\n    \"flag_for_heard_&_mcdonald_islands\": \"\ud83c\udded\ud83c\uddf2\",\n    \"flag_for_honduras\": \"\ud83c\udded\ud83c\uddf3\",\n    \"flag_for_hong_kong\": \"\ud83c\udded\ud83c\uddf0\",\n    \"flag_for_hungary\": \"\ud83c\udded\ud83c\uddfa\",\n    \"flag_for_iceland\": \"\ud83c\uddee\ud83c\uddf8\",\n    \"flag_for_india\": \"\ud83c\uddee\ud83c\uddf3\",\n    \"flag_for_indonesia\": \"\ud83c\uddee\ud83c\udde9\",\n    \"flag_for_iran\": \"\ud83c\uddee\ud83c\uddf7\",\n    \"flag_for_iraq\": \"\ud83c\uddee\ud83c\uddf6\",\n    \"flag_for_ireland\": \"\ud83c\uddee\ud83c\uddea\",\n    \"flag_for_isle_of_man\": \"\ud83c\uddee\ud83c\uddf2\",\n    \"flag_for_israel\": \"\ud83c\uddee\ud83c\uddf1\",\n    \"flag_for_italy\": \"\ud83c\uddee\ud83c\uddf9\",\n    \"flag_for_jamaica\": \"\ud83c\uddef\ud83c\uddf2\",\n    \"flag_for_japan\": \"\ud83c\uddef\ud83c\uddf5\",\n    \"flag_for_jersey\": \"\ud83c\uddef\ud83c\uddea\",\n    \"flag_for_jordan\": \"\ud83c\uddef\ud83c\uddf4\",\n    \"flag_for_kazakhstan\": \"\ud83c\uddf0\ud83c\uddff\",\n    \"flag_for_kenya\": \"\ud83c\uddf0\ud83c\uddea\",\n    \"flag_for_kiribati\": \"\ud83c\uddf0\ud83c\uddee\",\n    \"flag_for_kosovo\": \"\ud83c\uddfd\ud83c\uddf0\",\n    \"flag_for_kuwait\": \"\ud83c\uddf0\ud83c\uddfc\",\n    \"flag_for_kyrgyzstan\": \"\ud83c\uddf0\ud83c\uddec\",\n    \"flag_for_laos\": \"\ud83c\uddf1\ud83c\udde6\",\n    \"flag_for_latvia\": \"\ud83c\uddf1\ud83c\uddfb\",\n    \"flag_for_lebanon\": \"\ud83c\uddf1\ud83c\udde7\",\n    \"flag_for_lesotho\": \"\ud83c\uddf1\ud83c\uddf8\",\n    \"flag_for_liberia\": \"\ud83c\uddf1\ud83c\uddf7\",\n    \"flag_for_libya\": \"\ud83c\uddf1\ud83c\uddfe\",\n    \"flag_for_liechtenstein\": \"\ud83c\uddf1\ud83c\uddee\",\n    \"flag_for_lithuania\": \"\ud83c\uddf1\ud83c\uddf9\",\n    \"flag_for_luxembourg\": \"\ud83c\uddf1\ud83c\uddfa\",\n    \"flag_for_macau\": \"\ud83c\uddf2\ud83c\uddf4\",\n    \"flag_for_macedonia\": \"\ud83c\uddf2\ud83c\uddf0\",\n    \"flag_for_madagascar\": \"\ud83c\uddf2\ud83c\uddec\",\n    \"flag_for_malawi\": \"\ud83c\uddf2\ud83c\uddfc\",\n    \"flag_for_malaysia\": \"\ud83c\uddf2\ud83c\uddfe\",\n    \"flag_for_maldives\": \"\ud83c\uddf2\ud83c\uddfb\",\n    \"flag_for_mali\": \"\ud83c\uddf2\ud83c\uddf1\",\n    \"flag_for_malta\": \"\ud83c\uddf2\ud83c\uddf9\",\n    \"flag_for_marshall_islands\": \"\ud83c\uddf2\ud83c\udded\",\n    \"flag_for_martinique\": \"\ud83c\uddf2\ud83c\uddf6\",\n    \"flag_for_mauritania\": \"\ud83c\uddf2\ud83c\uddf7\",\n    \"flag_for_mauritius\": \"\ud83c\uddf2\ud83c\uddfa\",\n    \"flag_for_mayotte\": \"\ud83c\uddfe\ud83c\uddf9\",\n    \"flag_for_mexico\": \"\ud83c\uddf2\ud83c\uddfd\",\n    \"flag_for_micronesia\": \"\ud83c\uddeb\ud83c\uddf2\",\n    \"flag_for_moldova\": \"\ud83c\uddf2\ud83c\udde9\",\n    \"flag_for_monaco\": \"\ud83c\uddf2\ud83c\udde8\",\n    \"flag_for_mongolia\": \"\ud83c\uddf2\ud83c\uddf3\",\n    \"flag_for_montenegro\": \"\ud83c\uddf2\ud83c\uddea\",\n    \"flag_for_montserrat\": \"\ud83c\uddf2\ud83c\uddf8\",\n    \"flag_for_morocco\": \"\ud83c\uddf2\ud83c\udde6\",\n    \"flag_for_mozambique\": \"\ud83c\uddf2\ud83c\uddff\",\n    \"flag_for_myanmar\": \"\ud83c\uddf2\ud83c\uddf2\",\n    \"flag_for_namibia\": \"\ud83c\uddf3\ud83c\udde6\",\n    \"flag_for_nauru\": \"\ud83c\uddf3\ud83c\uddf7\",\n    \"flag_for_nepal\": \"\ud83c\uddf3\ud83c\uddf5\",\n    \"flag_for_netherlands\": \"\ud83c\uddf3\ud83c\uddf1\",\n    \"flag_for_new_caledonia\": \"\ud83c\uddf3\ud83c\udde8\",\n    \"flag_for_new_zealand\": \"\ud83c\uddf3\ud83c\uddff\",\n    \"flag_for_nicaragua\": \"\ud83c\uddf3\ud83c\uddee\",\n    \"flag_for_niger\": \"\ud83c\uddf3\ud83c\uddea\",\n    \"flag_for_nigeria\": \"\ud83c\uddf3\ud83c\uddec\",\n    \"flag_for_niue\": \"\ud83c\uddf3\ud83c\uddfa\",\n    \"flag_for_norfolk_island\": \"\ud83c\uddf3\ud83c\uddeb\",\n    \"flag_for_north_korea\": \"\ud83c\uddf0\ud83c\uddf5\",\n    \"flag_for_northern_mariana_islands\": \"\ud83c\uddf2\ud83c\uddf5\",\n    \"flag_for_norway\": \"\ud83c\uddf3\ud83c\uddf4\",\n    \"flag_for_oman\": \"\ud83c\uddf4\ud83c\uddf2\",\n    \"flag_for_pakistan\": \"\ud83c\uddf5\ud83c\uddf0\",\n    \"flag_for_palau\": \"\ud83c\uddf5\ud83c\uddfc\",\n    \"flag_for_palestinian_territories\": \"\ud83c\uddf5\ud83c\uddf8\",\n    \"flag_for_panama\": \"\ud83c\uddf5\ud83c\udde6\",\n    \"flag_for_papua_new_guinea\": \"\ud83c\uddf5\ud83c\uddec\",\n    \"flag_for_paraguay\": \"\ud83c\uddf5\ud83c\uddfe\",\n    \"flag_for_peru\": \"\ud83c\uddf5\ud83c\uddea\",\n    \"flag_for_philippines\": \"\ud83c\uddf5\ud83c\udded\",\n    \"flag_for_pitcairn_islands\": \"\ud83c\uddf5\ud83c\uddf3\",\n    \"flag_for_poland\": \"\ud83c\uddf5\ud83c\uddf1\",\n    \"flag_for_portugal\": \"\ud83c\uddf5\ud83c\uddf9\",\n    \"flag_for_puerto_rico\": \"\ud83c\uddf5\ud83c\uddf7\",\n    \"flag_for_qatar\": \"\ud83c\uddf6\ud83c\udde6\",\n    \"flag_for_romania\": \"\ud83c\uddf7\ud83c\uddf4\",\n    \"flag_for_russia\": \"\ud83c\uddf7\ud83c\uddfa\",\n    \"flag_for_rwanda\": \"\ud83c\uddf7\ud83c\uddfc\",\n    \"flag_for_r\u00e9union\": \"\ud83c\uddf7\ud83c\uddea\",\n    \"flag_for_samoa\": \"\ud83c\uddfc\ud83c\uddf8\",\n    \"flag_for_san_marino\": \"\ud83c\uddf8\ud83c\uddf2\",\n    \"flag_for_saudi_arabia\": \"\ud83c\uddf8\ud83c\udde6\",\n    \"flag_for_senegal\": \"\ud83c\uddf8\ud83c\uddf3\",\n    \"flag_for_serbia\": \"\ud83c\uddf7\ud83c\uddf8\",\n    \"flag_for_seychelles\": \"\ud83c\uddf8\ud83c\udde8\",\n    \"flag_for_sierra_leone\": \"\ud83c\uddf8\ud83c\uddf1\",\n    \"flag_for_singapore\": \"\ud83c\uddf8\ud83c\uddec\",\n    \"flag_for_sint_maarten\": \"\ud83c\uddf8\ud83c\uddfd\",\n    \"flag_for_slovakia\": \"\ud83c\uddf8\ud83c\uddf0\",\n    \"flag_for_slovenia\": \"\ud83c\uddf8\ud83c\uddee\",\n    \"flag_for_solomon_islands\": \"\ud83c\uddf8\ud83c\udde7\",\n    \"flag_for_somalia\": \"\ud83c\uddf8\ud83c\uddf4\",\n    \"flag_for_south_africa\": \"\ud83c\uddff\ud83c\udde6\",\n    \"flag_for_south_georgia_&_south_sandwich_islands\": \"\ud83c\uddec\ud83c\uddf8\",\n    \"flag_for_south_korea\": \"\ud83c\uddf0\ud83c\uddf7\",\n    \"flag_for_south_sudan\": \"\ud83c\uddf8\ud83c\uddf8\",\n    \"flag_for_spain\": \"\ud83c\uddea\ud83c\uddf8\",\n    \"flag_for_sri_lanka\": \"\ud83c\uddf1\ud83c\uddf0\",\n    \"flag_for_st._barth\u00e9lemy\": \"\ud83c\udde7\ud83c\uddf1\",\n    \"flag_for_st._helena\": \"\ud83c\uddf8\ud83c\udded\",\n    \"flag_for_st._kitts_&_nevis\": \"\ud83c\uddf0\ud83c\uddf3\",\n    \"flag_for_st._lucia\": \"\ud83c\uddf1\ud83c\udde8\",\n    \"flag_for_st._martin\": \"\ud83c\uddf2\ud83c\uddeb\",\n    \"flag_for_st._pierre_&_miquelon\": \"\ud83c\uddf5\ud83c\uddf2\",\n    \"flag_for_st._vincent_&_grenadines\": \"\ud83c\uddfb\ud83c\udde8\",\n    \"flag_for_sudan\": \"\ud83c\uddf8\ud83c\udde9\",\n    \"flag_for_suriname\": \"\ud83c\uddf8\ud83c\uddf7\",\n    \"flag_for_svalbard_&_jan_mayen\": \"\ud83c\uddf8\ud83c\uddef\",\n    \"flag_for_swaziland\": \"\ud83c\uddf8\ud83c\uddff\",\n    \"flag_for_sweden\": \"\ud83c\uddf8\ud83c\uddea\",\n    \"flag_for_switzerland\": \"\ud83c\udde8\ud83c\udded\",\n    \"flag_for_syria\": \"\ud83c\uddf8\ud83c\uddfe\",\n    \"flag_for_s\u00e3o_tom\u00e9_&_pr\u00edncipe\": \"\ud83c\uddf8\ud83c\uddf9\",\n    \"flag_for_taiwan\": \"\ud83c\uddf9\ud83c\uddfc\",\n    \"flag_for_tajikistan\": \"\ud83c\uddf9\ud83c\uddef\",\n    \"flag_for_tanzania\": \"\ud83c\uddf9\ud83c\uddff\",\n    \"flag_for_thailand\": \"\ud83c\uddf9\ud83c\udded\",\n    \"flag_for_timor__leste\": \"\ud83c\uddf9\ud83c\uddf1\",\n    \"flag_for_togo\": \"\ud83c\uddf9\ud83c\uddec\",\n    \"flag_for_tokelau\": \"\ud83c\uddf9\ud83c\uddf0\",\n    \"flag_for_tonga\": \"\ud83c\uddf9\ud83c\uddf4\",\n    \"flag_for_trinidad_&_tobago\": \"\ud83c\uddf9\ud83c\uddf9\",\n    \"flag_for_tristan_da_cunha\": \"\ud83c\uddf9\ud83c\udde6\",\n    \"flag_for_tunisia\": \"\ud83c\uddf9\ud83c\uddf3\",\n    \"flag_for_turkey\": \"\ud83c\uddf9\ud83c\uddf7\",\n    \"flag_for_turkmenistan\": \"\ud83c\uddf9\ud83c\uddf2\",\n    \"flag_for_turks_&_caicos_islands\": \"\ud83c\uddf9\ud83c\udde8\",\n    \"flag_for_tuvalu\": \"\ud83c\uddf9\ud83c\uddfb\",\n    \"flag_for_u.s._outlying_islands\": \"\ud83c\uddfa\ud83c\uddf2\",\n    \"flag_for_u.s._virgin_islands\": \"\ud83c\uddfb\ud83c\uddee\",\n    \"flag_for_uganda\": \"\ud83c\uddfa\ud83c\uddec\",\n    \"flag_for_ukraine\": \"\ud83c\uddfa\ud83c\udde6\",\n    \"flag_for_united_arab_emirates\": \"\ud83c\udde6\ud83c\uddea\",\n    \"flag_for_united_kingdom\": \"\ud83c\uddec\ud83c\udde7\",\n    \"flag_for_united_states\": \"\ud83c\uddfa\ud83c\uddf8\",\n    \"flag_for_uruguay\": \"\ud83c\uddfa\ud83c\uddfe\",\n    \"flag_for_uzbekistan\": \"\ud83c\uddfa\ud83c\uddff\",\n    \"flag_for_vanuatu\": \"\ud83c\uddfb\ud83c\uddfa\",\n    \"flag_for_vatican_city\": \"\ud83c\uddfb\ud83c\udde6\",\n    \"flag_for_venezuela\": \"\ud83c\uddfb\ud83c\uddea\",\n    \"flag_for_vietnam\": \"\ud83c\uddfb\ud83c\uddf3\",\n    \"flag_for_wallis_&_futuna\": \"\ud83c\uddfc\ud83c\uddeb\",\n    \"flag_for_western_sahara\": \"\ud83c\uddea\ud83c\udded\",\n    \"flag_for_yemen\": \"\ud83c\uddfe\ud83c\uddea\",\n    \"flag_for_zambia\": \"\ud83c\uddff\ud83c\uddf2\",\n    \"flag_for_zimbabwe\": \"\ud83c\uddff\ud83c\uddfc\",\n    \"flag_for_\u00e5land_islands\": \"\ud83c\udde6\ud83c\uddfd\",\n    \"golf\": \"\u26f3\",\n    \"fleur__de__lis\": \"\u269c\",\n    \"muscle\": \"\ud83d\udcaa\",\n    \"flushed\": \"\ud83d\ude33\",\n    \"frame_with_picture\": \"\ud83d\uddbc\",\n    \"fries\": \"\ud83c\udf5f\",\n    \"frog\": \"\ud83d\udc38\",\n    \"hatched_chick\": \"\ud83d\udc25\",\n    \"frowning\": \"\ud83d\ude26\",\n    \"fuelpump\": \"\u26fd\",\n    \"full_moon_with_face\": \"\ud83c\udf1d\",\n    \"gem\": \"\ud83d\udc8e\",\n    \"star2\": \"\ud83c\udf1f\",\n    \"golfer\": \"\ud83c\udfcc\",\n    \"mortar_board\": \"\ud83c\udf93\",\n    \"grimacing\": \"\ud83d\ude2c\",\n    \"smile_cat\": \"\ud83d\ude38\",\n    \"grinning\": \"\ud83d\ude00\",\n    \"grin\": \"\ud83d\ude01\",\n    \"heartpulse\": \"\ud83d\udc97\",\n    \"guardsman\": \"\ud83d\udc82\",\n    \"haircut\": \"\ud83d\udc87\",\n    \"hamster\": \"\ud83d\udc39\",\n    \"raising_hand\": \"\ud83d\ude4b\",\n    \"headphones\": \"\ud83c\udfa7\",\n    \"hear_no_evil\": \"\ud83d\ude49\",\n    \"cupid\": \"\ud83d\udc98\",\n    \"gift_heart\": \"\ud83d\udc9d\",\n    \"heart\": \"\u2764\",\n    \"exclamation\": \"\u2757\",\n    \"heavy_exclamation_mark\": \"\u2757\",\n    \"heavy_heart_exclamation_mark_ornament\": \"\u2763\",\n    \"o\": \"\u2b55\",\n    \"helm_symbol\": \"\u2388\",\n    \"helmet_with_white_cross\": \"\u26d1\",\n    \"high_heel\": \"\ud83d\udc60\",\n    \"bullettrain_side\": \"\ud83d\ude84\",\n    \"bullettrain_front\": \"\ud83d\ude85\",\n    \"high_brightness\": \"\ud83d\udd06\",\n    \"zap\": \"\u26a1\",\n    \"hocho\": \"\ud83d\udd2a\",\n    \"knife\": \"\ud83d\udd2a\",\n    \"bee\": \"\ud83d\udc1d\",\n    \"traffic_light\": \"\ud83d\udea5\",\n    \"racehorse\": \"\ud83d\udc0e\",\n    \"coffee\": \"\u2615\",\n    \"hotsprings\": \"\u2668\",\n    \"hourglass\": \"\u231b\",\n    \"hourglass_flowing_sand\": \"\u23f3\",\n    \"house_buildings\": \"\ud83c\udfd8\",\n    \"100\": \"\ud83d\udcaf\",\n    \"hushed\": \"\ud83d\ude2f\",\n    \"ice_hockey_stick_and_puck\": \"\ud83c\udfd2\",\n    \"imp\": \"\ud83d\udc7f\",\n    \"information_desk_person\": \"\ud83d\udc81\",\n    \"information_source\": \"\u2139\",\n    \"capital_abcd\": \"\ud83d\udd20\",\n    \"abc\": \"\ud83d\udd24\",\n    \"abcd\": \"\ud83d\udd21\",\n    \"1234\": \"\ud83d\udd22\",\n    \"symbols\": \"\ud83d\udd23\",\n    \"izakaya_lantern\": \"\ud83c\udfee\",\n    \"lantern\": \"\ud83c\udfee\",\n    \"jack_o_lantern\": \"\ud83c\udf83\",\n    \"dolls\": \"\ud83c\udf8e\",\n    \"japanese_goblin\": \"\ud83d\udc7a\",\n    \"japanese_ogre\": \"\ud83d\udc79\",\n    \"beginner\": \"\ud83d\udd30\",\n    \"zero\": \"0\ufe0f\u20e3\",\n    \"one\": \"1\ufe0f\u20e3\",\n    \"ten\": \"\ud83d\udd1f\",\n    \"two\": \"2\ufe0f\u20e3\",\n    \"three\": \"3\ufe0f\u20e3\",\n    \"four\": \"4\ufe0f\u20e3\",\n    \"five\": \"5\ufe0f\u20e3\",\n    \"six\": \"6\ufe0f\u20e3\",\n    \"seven\": \"7\ufe0f\u20e3\",\n    \"eight\": \"8\ufe0f\u20e3\",\n    \"nine\": \"9\ufe0f\u20e3\",\n    \"couplekiss\": \"\ud83d\udc8f\",\n    \"kissing_cat\": \"\ud83d\ude3d\",\n    \"kissing\": \"\ud83d\ude17\",\n    \"kissing_closed_eyes\": \"\ud83d\ude1a\",\n    \"kissing_smiling_eyes\": \"\ud83d\ude19\",\n    \"beetle\": \"\ud83d\udc1e\",\n    \"large_blue_circle\": \"\ud83d\udd35\",\n    \"last_quarter_moon_with_face\": \"\ud83c\udf1c\",\n    \"leaves\": \"\ud83c\udf43\",\n    \"mag\": \"\ud83d\udd0d\",\n    \"left_right_arrow\": \"\u2194\",\n    \"leftwards_arrow_with_hook\": \"\u21a9\",\n    \"arrow_left\": \"\u2b05\",\n    \"lock\": \"\ud83d\udd12\",\n    \"lock_with_ink_pen\": \"\ud83d\udd0f\",\n    \"sob\": \"\ud83d\ude2d\",\n    \"low_brightness\": \"\ud83d\udd05\",\n    \"lower_left_ballpoint_pen\": \"\ud83d\udd8a\",\n    \"lower_left_crayon\": \"\ud83d\udd8d\",\n    \"lower_left_fountain_pen\": \"\ud83d\udd8b\",\n    \"lower_left_paintbrush\": \"\ud83d\udd8c\",\n    \"mahjong\": \"\ud83c\udc04\",\n    \"couple\": \"\ud83d\udc6b\",\n    \"man_in_business_suit_levitating\": \"\ud83d\udd74\",\n    \"man_with_gua_pi_mao\": \"\ud83d\udc72\",\n    \"man_with_turban\": \"\ud83d\udc73\",\n    \"mans_shoe\": \"\ud83d\udc5e\",\n    \"shoe\": \"\ud83d\udc5e\",\n    \"menorah_with_nine_branches\": \"\ud83d\udd4e\",\n    \"mens\": \"\ud83d\udeb9\",\n    \"minidisc\": \"\ud83d\udcbd\",\n    \"iphone\": \"\ud83d\udcf1\",\n    \"calling\": \"\ud83d\udcf2\",\n    \"money__mouth_face\": \"\ud83e\udd11\",\n    \"moneybag\": \"\ud83d\udcb0\",\n    \"rice_scene\": \"\ud83c\udf91\",\n    \"mountain_bicyclist\": \"\ud83d\udeb5\",\n    \"mouse2\": \"\ud83d\udc01\",\n    \"lips\": \"\ud83d\udc44\",\n    \"moyai\": \"\ud83d\uddff\",\n    \"notes\": \"\ud83c\udfb6\",\n    \"nail_care\": \"\ud83d\udc85\",\n    \"ab\": \"\ud83c\udd8e\",\n    \"negative_squared_cross_mark\": \"\u274e\",\n    \"a\": \"\ud83c\udd70\",\n    \"b\": \"\ud83c\udd71\",\n    \"o2\": \"\ud83c\udd7e\",\n    \"parking\": \"\ud83c\udd7f\",\n    \"new_moon_with_face\": \"\ud83c\udf1a\",\n    \"no_entry_sign\": \"\ud83d\udeab\",\n    \"underage\": \"\ud83d\udd1e\",\n    \"non__potable_water\": \"\ud83d\udeb1\",\n    \"arrow_upper_right\": \"\u2197\",\n    \"arrow_upper_left\": \"\u2196\",\n    \"office\": \"\ud83c\udfe2\",\n    \"older_man\": \"\ud83d\udc74\",\n    \"older_woman\": \"\ud83d\udc75\",\n    \"om_symbol\": \"\ud83d\udd49\",\n    \"on\": \"\ud83d\udd1b\",\n    \"book\": \"\ud83d\udcd6\",\n    \"unlock\": \"\ud83d\udd13\",\n    \"mailbox_with_no_mail\": \"\ud83d\udced\",\n    \"mailbox_with_mail\": \"\ud83d\udcec\",\n    \"cd\": \"\ud83d\udcbf\",\n    \"tada\": \"\ud83c\udf89\",\n    \"feet\": \"\ud83d\udc3e\",\n    \"walking\": \"\ud83d\udeb6\",\n    \"pencil2\": \"\u270f\",\n    \"pensive\": \"\ud83d\ude14\",\n    \"persevere\": \"\ud83d\ude23\",\n    \"bow\": \"\ud83d\ude47\",\n    \"raised_hands\": \"\ud83d\ude4c\",\n    \"person_with_ball\": \"\u26f9\",\n    \"person_with_blond_hair\": \"\ud83d\udc71\",\n    \"pray\": \"\ud83d\ude4f\",\n    \"person_with_pouting_face\": \"\ud83d\ude4e\",\n    \"computer\": \"\ud83d\udcbb\",\n    \"pig2\": \"\ud83d\udc16\",\n    \"hankey\": \"\ud83d\udca9\",\n    \"poop\": \"\ud83d\udca9\",\n    \"shit\": \"\ud83d\udca9\",\n    \"bamboo\": \"\ud83c\udf8d\",\n    \"gun\": \"\ud83d\udd2b\",\n    \"black_joker\": \"\ud83c\udccf\",\n    \"rotating_light\": \"\ud83d\udea8\",\n    \"cop\": \"\ud83d\udc6e\",\n    \"stew\": \"\ud83c\udf72\",\n    \"pouch\": \"\ud83d\udc5d\",\n    \"pouting_cat\": \"\ud83d\ude3e\",\n    \"rage\": \"\ud83d\ude21\",\n    \"put_litter_in_its_place\": \"\ud83d\udeae\",\n    \"rabbit2\": \"\ud83d\udc07\",\n    \"racing_motorcycle\": \"\ud83c\udfcd\",\n    \"radioactive_sign\": \"\u2622\",\n    \"fist\": \"\u270a\",\n    \"hand\": \"\u270b\",\n    \"raised_hand_with_fingers_splayed\": \"\ud83d\udd90\",\n    \"raised_hand_with_part_between_middle_and_ring_fingers\": \"\ud83d\udd96\",\n    \"blue_car\": \"\ud83d\ude99\",\n    \"apple\": \"\ud83c\udf4e\",\n    \"relieved\": \"\ud83d\ude0c\",\n    \"reversed_hand_with_middle_finger_extended\": \"\ud83d\udd95\",\n    \"mag_right\": \"\ud83d\udd0e\",\n    \"arrow_right_hook\": \"\u21aa\",\n    \"sweet_potato\": \"\ud83c\udf60\",\n    \"robot\": \"\ud83e\udd16\",\n    \"rolled__up_newspaper\": \"\ud83d\uddde\",\n    \"rowboat\": \"\ud83d\udea3\",\n    \"runner\": \"\ud83c\udfc3\",\n    \"running\": \"\ud83c\udfc3\",\n    \"running_shirt_with_sash\": \"\ud83c\udfbd\",\n    \"boat\": \"\u26f5\",\n    \"scales\": \"\u2696\",\n    \"school_satchel\": \"\ud83c\udf92\",\n    \"scorpius\": \"\u264f\",\n    \"see_no_evil\": \"\ud83d\ude48\",\n    \"sheep\": \"\ud83d\udc11\",\n    \"stars\": \"\ud83c\udf20\",\n    \"cake\": \"\ud83c\udf70\",\n    \"six_pointed_star\": \"\ud83d\udd2f\",\n    \"ski\": \"\ud83c\udfbf\",\n    \"sleeping_accommodation\": \"\ud83d\udecc\",\n    \"sleeping\": \"\ud83d\ude34\",\n    \"sleepy\": \"\ud83d\ude2a\",\n    \"sleuth_or_spy\": \"\ud83d\udd75\",\n    \"heart_eyes_cat\": \"\ud83d\ude3b\",\n    \"smiley_cat\": \"\ud83d\ude3a\",\n    \"innocent\": \"\ud83d\ude07\",\n    \"heart_eyes\": \"\ud83d\ude0d\",\n    \"smiling_imp\": \"\ud83d\ude08\",\n    \"smiley\": \"\ud83d\ude03\",\n    \"sweat_smile\": \"\ud83d\ude05\",\n    \"smile\": \"\ud83d\ude04\",\n    \"laughing\": \"\ud83d\ude06\",\n    \"satisfied\": \"\ud83d\ude06\",\n    \"blush\": \"\ud83d\ude0a\",\n    \"smirk\": \"\ud83d\ude0f\",\n    \"smoking\": \"\ud83d\udeac\",\n    \"snow_capped_mountain\": \"\ud83c\udfd4\",\n    \"soccer\": \"\u26bd\",\n    \"icecream\": \"\ud83c\udf66\",\n    \"soon\": \"\ud83d\udd1c\",\n    \"arrow_lower_right\": \"\u2198\",\n    \"arrow_lower_left\": \"\u2199\",\n    \"speak_no_evil\": \"\ud83d\ude4a\",\n    \"speaker\": \"\ud83d\udd08\",\n    \"mute\": \"\ud83d\udd07\",\n    \"sound\": \"\ud83d\udd09\",\n    \"loud_sound\": \"\ud83d\udd0a\",\n    \"speaking_head_in_silhouette\": \"\ud83d\udde3\",\n    \"spiral_calendar_pad\": \"\ud83d\uddd3\",\n    \"spiral_note_pad\": \"\ud83d\uddd2\",\n    \"shell\": \"\ud83d\udc1a\",\n    \"sweat_drops\": \"\ud83d\udca6\",\n    \"u5272\": \"\ud83c\ude39\",\n    \"u5408\": \"\ud83c\ude34\",\n    \"u55b6\": \"\ud83c\ude3a\",\n    \"u6307\": \"\ud83c\ude2f\",\n    \"u6708\": \"\ud83c\ude37\",\n    \"u6709\": \"\ud83c\ude36\",\n    \"u6e80\": \"\ud83c\ude35\",\n    \"u7121\": \"\ud83c\ude1a\",\n    \"u7533\": \"\ud83c\ude38\",\n    \"u7981\": \"\ud83c\ude32\",\n    \"u7a7a\": \"\ud83c\ude33\",\n    \"cl\": \"\ud83c\udd91\",\n    \"cool\": \"\ud83c\udd92\",\n    \"free\": \"\ud83c\udd93\",\n    \"id\": \"\ud83c\udd94\",\n    \"koko\": \"\ud83c\ude01\",\n    \"sa\": \"\ud83c\ude02\",\n    \"new\": \"\ud83c\udd95\",\n    \"ng\": \"\ud83c\udd96\",\n    \"ok\": \"\ud83c\udd97\",\n    \"sos\": \"\ud83c\udd98\",\n    \"up\": \"\ud83c\udd99\",\n    \"vs\": \"\ud83c\udd9a\",\n    \"steam_locomotive\": \"\ud83d\ude82\",\n    \"ramen\": \"\ud83c\udf5c\",\n    \"partly_sunny\": \"\u26c5\",\n    \"city_sunrise\": \"\ud83c\udf07\",\n    \"surfer\": \"\ud83c\udfc4\",\n    \"swimmer\": \"\ud83c\udfca\",\n    \"shirt\": \"\ud83d\udc55\",\n    \"tshirt\": \"\ud83d\udc55\",\n    \"table_tennis_paddle_and_ball\": \"\ud83c\udfd3\",\n    \"tea\": \"\ud83c\udf75\",\n    \"tv\": \"\ud83d\udcfa\",\n    \"three_button_mouse\": \"\ud83d\uddb1\",\n    \"+1\": \"\ud83d\udc4d\",\n    \"thumbsup\": \"\ud83d\udc4d\",\n    \"__1\": \"\ud83d\udc4e\",\n    \"-1\": \"\ud83d\udc4e\",\n    \"thumbsdown\": \"\ud83d\udc4e\",\n    \"thunder_cloud_and_rain\": \"\u26c8\",\n    \"tiger2\": \"\ud83d\udc05\",\n    \"tophat\": \"\ud83c\udfa9\",\n    \"top\": \"\ud83d\udd1d\",\n    \"tm\": \"\u2122\",\n    \"train2\": \"\ud83d\ude86\",\n    \"triangular_flag_on_post\": \"\ud83d\udea9\",\n    \"trident\": \"\ud83d\udd31\",\n    \"twisted_rightwards_arrows\": \"\ud83d\udd00\",\n    \"unamused\": \"\ud83d\ude12\",\n    \"small_red_triangle\": \"\ud83d\udd3a\",\n    \"arrow_up_small\": \"\ud83d\udd3c\",\n    \"arrow_up_down\": \"\u2195\",\n    \"upside__down_face\": \"\ud83d\ude43\",\n    \"arrow_up\": \"\u2b06\",\n    \"v\": \"\u270c\",\n    \"vhs\": \"\ud83d\udcfc\",\n    \"wc\": \"\ud83d\udebe\",\n    \"ocean\": \"\ud83c\udf0a\",\n    \"waving_black_flag\": \"\ud83c\udff4\",\n    \"wave\": \"\ud83d\udc4b\",\n    \"waving_white_flag\": \"\ud83c\udff3\",\n    \"moon\": \"\ud83c\udf14\",\n    \"scream_cat\": \"\ud83d\ude40\",\n    \"weary\": \"\ud83d\ude29\",\n    \"weight_lifter\": \"\ud83c\udfcb\",\n    \"whale2\": \"\ud83d\udc0b\",\n    \"wheelchair\": \"\u267f\",\n    \"point_down\": \"\ud83d\udc47\",\n    \"grey_exclamation\": \"\u2755\",\n    \"white_frowning_face\": \"\u2639\",\n    \"white_check_mark\": \"\u2705\",\n    \"point_left\": \"\ud83d\udc48\",\n    \"white_medium_small_square\": \"\u25fd\",\n    \"star\": \"\u2b50\",\n    \"grey_question\": \"\u2754\",\n    \"point_right\": \"\ud83d\udc49\",\n    \"relaxed\": \"\u263a\",\n    \"white_sun_behind_cloud\": \"\ud83c\udf25\",\n    \"white_sun_behind_cloud_with_rain\": \"\ud83c\udf26\",\n    \"white_sun_with_small_cloud\": \"\ud83c\udf24\",\n    \"point_up_2\": \"\ud83d\udc46\",\n    \"point_up\": \"\u261d\",\n    \"wind_blowing_face\": \"\ud83c\udf2c\",\n    \"wink\": \"\ud83d\ude09\",\n    \"wolf\": \"\ud83d\udc3a\",\n    \"dancers\": \"\ud83d\udc6f\",\n    \"boot\": \"\ud83d\udc62\",\n    \"womans_clothes\": \"\ud83d\udc5a\",\n    \"womans_hat\": \"\ud83d\udc52\",\n    \"sandal\": \"\ud83d\udc61\",\n    \"womens\": \"\ud83d\udeba\",\n    \"worried\": \"\ud83d\ude1f\",\n    \"gift\": \"\ud83c\udf81\",\n    \"zipper__mouth_face\": \"\ud83e\udd10\",\n    \"regional_indicator_a\": \"\ud83c\udde6\",\n    \"regional_indicator_b\": \"\ud83c\udde7\",\n    \"regional_indicator_c\": \"\ud83c\udde8\",\n    \"regional_indicator_d\": \"\ud83c\udde9\",\n    \"regional_indicator_e\": \"\ud83c\uddea\",\n    \"regional_indicator_f\": \"\ud83c\uddeb\",\n    \"regional_indicator_g\": \"\ud83c\uddec\",\n    \"regional_indicator_h\": \"\ud83c\udded\",\n    \"regional_indicator_i\": \"\ud83c\uddee\",\n    \"regional_indicator_j\": \"\ud83c\uddef\",\n    \"regional_indicator_k\": \"\ud83c\uddf0\",\n    \"regional_indicator_l\": \"\ud83c\uddf1\",\n    \"regional_indicator_m\": \"\ud83c\uddf2\",\n    \"regional_indicator_n\": \"\ud83c\uddf3\",\n    \"regional_indicator_o\": \"\ud83c\uddf4\",\n    \"regional_indicator_p\": \"\ud83c\uddf5\",\n    \"regional_indicator_q\": \"\ud83c\uddf6\",\n    \"regional_indicator_r\": \"\ud83c\uddf7\",\n    \"regional_indicator_s\": \"\ud83c\uddf8\",\n    \"regional_indicator_t\": \"\ud83c\uddf9\",\n    \"regional_indicator_u\": \"\ud83c\uddfa\",\n    \"regional_indicator_v\": \"\ud83c\uddfb\",\n    \"regional_indicator_w\": \"\ud83c\uddfc\",\n    \"regional_indicator_x\": \"\ud83c\uddfd\",\n    \"regional_indicator_y\": \"\ud83c\uddfe\",\n    \"regional_indicator_z\": \"\ud83c\uddff\",\n}\n", "rich/_extension.py": "from typing import Any\n\n\ndef load_ipython_extension(ip: Any) -> None:  # pragma: no cover\n    # prevent circular import\n    from rich.pretty import install\n    from rich.traceback import install as tr_install\n\n    install()\n    tr_install()\n", "rich/console.py": "import inspect\nimport os\nimport platform\nimport sys\nimport threading\nimport zlib\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom functools import wraps\nfrom getpass import getpass\nfrom html import escape\nfrom inspect import isclass\nfrom itertools import islice\nfrom math import ceil\nfrom time import monotonic\nfrom types import FrameType, ModuleType, TracebackType\nfrom typing import (\n    IO,\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    NamedTuple,\n    Optional,\n    TextIO,\n    Tuple,\n    Type,\n    Union,\n    cast,\n)\n\nfrom rich._null_file import NULL_FILE\n\nif sys.version_info >= (3, 8):\n    from typing import Literal, Protocol, runtime_checkable\nelse:\n    from typing_extensions import (\n        Literal,\n        Protocol,\n        runtime_checkable,\n    )  # pragma: no cover\n\nfrom . import errors, themes\nfrom ._emoji_replace import _emoji_replace\nfrom ._export_format import CONSOLE_HTML_FORMAT, CONSOLE_SVG_FORMAT\nfrom ._fileno import get_fileno\nfrom ._log_render import FormatTimeCallable, LogRender\nfrom .align import Align, AlignMethod\nfrom .color import ColorSystem, blend_rgb\nfrom .control import Control\nfrom .emoji import EmojiVariant\nfrom .highlighter import NullHighlighter, ReprHighlighter\nfrom .markup import render as render_markup\nfrom .measure import Measurement, measure_renderables\nfrom .pager import Pager, SystemPager\nfrom .pretty import Pretty, is_expandable\nfrom .protocol import rich_cast\nfrom .region import Region\nfrom .scope import render_scope\nfrom .screen import Screen\nfrom .segment import Segment\nfrom .style import Style, StyleType\nfrom .styled import Styled\nfrom .terminal_theme import DEFAULT_TERMINAL_THEME, SVG_EXPORT_THEME, TerminalTheme\nfrom .text import Text, TextType\nfrom .theme import Theme, ThemeStack\n\nif TYPE_CHECKING:\n    from ._windows import WindowsConsoleFeatures\n    from .live import Live\n    from .status import Status\n\nJUPYTER_DEFAULT_COLUMNS = 115\nJUPYTER_DEFAULT_LINES = 100\nWINDOWS = platform.system() == \"Windows\"\n\nHighlighterType = Callable[[Union[str, \"Text\"]], \"Text\"]\nJustifyMethod = Literal[\"default\", \"left\", \"center\", \"right\", \"full\"]\nOverflowMethod = Literal[\"fold\", \"crop\", \"ellipsis\", \"ignore\"]\n\n\nclass NoChange:\n    pass\n\n\nNO_CHANGE = NoChange()\n\ntry:\n    _STDIN_FILENO = sys.__stdin__.fileno()\nexcept Exception:\n    _STDIN_FILENO = 0\ntry:\n    _STDOUT_FILENO = sys.__stdout__.fileno()\nexcept Exception:\n    _STDOUT_FILENO = 1\ntry:\n    _STDERR_FILENO = sys.__stderr__.fileno()\nexcept Exception:\n    _STDERR_FILENO = 2\n\n_STD_STREAMS = (_STDIN_FILENO, _STDOUT_FILENO, _STDERR_FILENO)\n_STD_STREAMS_OUTPUT = (_STDOUT_FILENO, _STDERR_FILENO)\n\n\n_TERM_COLORS = {\n    \"kitty\": ColorSystem.EIGHT_BIT,\n    \"256color\": ColorSystem.EIGHT_BIT,\n    \"16color\": ColorSystem.STANDARD,\n}\n\n\nclass ConsoleDimensions(NamedTuple):\n    \"\"\"Size of the terminal.\"\"\"\n\n    width: int\n    \"\"\"The width of the console in 'cells'.\"\"\"\n    height: int\n    \"\"\"The height of the console in lines.\"\"\"\n\n\n@dataclass\nclass ConsoleOptions:\n    \"\"\"Options for __rich_console__ method.\"\"\"\n\n    size: ConsoleDimensions\n    \"\"\"Size of console.\"\"\"\n    legacy_windows: bool\n    \"\"\"legacy_windows: flag for legacy windows.\"\"\"\n    min_width: int\n    \"\"\"Minimum width of renderable.\"\"\"\n    max_width: int\n    \"\"\"Maximum width of renderable.\"\"\"\n    is_terminal: bool\n    \"\"\"True if the target is a terminal, otherwise False.\"\"\"\n    encoding: str\n    \"\"\"Encoding of terminal.\"\"\"\n    max_height: int\n    \"\"\"Height of container (starts as terminal)\"\"\"\n    justify: Optional[JustifyMethod] = None\n    \"\"\"Justify value override for renderable.\"\"\"\n    overflow: Optional[OverflowMethod] = None\n    \"\"\"Overflow value override for renderable.\"\"\"\n    no_wrap: Optional[bool] = False\n    \"\"\"Disable wrapping for text.\"\"\"\n    highlight: Optional[bool] = None\n    \"\"\"Highlight override for render_str.\"\"\"\n    markup: Optional[bool] = None\n    \"\"\"Enable markup when rendering strings.\"\"\"\n    height: Optional[int] = None\n\n    @property\n    def ascii_only(self) -> bool:\n        \"\"\"Check if renderables should use ascii only.\"\"\"\n        return not self.encoding.startswith(\"utf\")\n\n    def copy(self) -> \"ConsoleOptions\":\n        \"\"\"Return a copy of the options.\n\n        Returns:\n            ConsoleOptions: a copy of self.\n        \"\"\"\n        options: ConsoleOptions = ConsoleOptions.__new__(ConsoleOptions)\n        options.__dict__ = self.__dict__.copy()\n        return options\n\n    def update(\n        self,\n        *,\n        width: Union[int, NoChange] = NO_CHANGE,\n        min_width: Union[int, NoChange] = NO_CHANGE,\n        max_width: Union[int, NoChange] = NO_CHANGE,\n        justify: Union[Optional[JustifyMethod], NoChange] = NO_CHANGE,\n        overflow: Union[Optional[OverflowMethod], NoChange] = NO_CHANGE,\n        no_wrap: Union[Optional[bool], NoChange] = NO_CHANGE,\n        highlight: Union[Optional[bool], NoChange] = NO_CHANGE,\n        markup: Union[Optional[bool], NoChange] = NO_CHANGE,\n        height: Union[Optional[int], NoChange] = NO_CHANGE,\n    ) -> \"ConsoleOptions\":\n        \"\"\"Update values, return a copy.\"\"\"\n        options = self.copy()\n        if not isinstance(width, NoChange):\n            options.min_width = options.max_width = max(0, width)\n        if not isinstance(min_width, NoChange):\n            options.min_width = min_width\n        if not isinstance(max_width, NoChange):\n            options.max_width = max_width\n        if not isinstance(justify, NoChange):\n            options.justify = justify\n        if not isinstance(overflow, NoChange):\n            options.overflow = overflow\n        if not isinstance(no_wrap, NoChange):\n            options.no_wrap = no_wrap\n        if not isinstance(highlight, NoChange):\n            options.highlight = highlight\n        if not isinstance(markup, NoChange):\n            options.markup = markup\n        if not isinstance(height, NoChange):\n            if height is not None:\n                options.max_height = height\n            options.height = None if height is None else max(0, height)\n        return options\n\n    def update_width(self, width: int) -> \"ConsoleOptions\":\n        \"\"\"Update just the width, return a copy.\n\n        Args:\n            width (int): New width (sets both min_width and max_width)\n\n        Returns:\n            ~ConsoleOptions: New console options instance.\n        \"\"\"\n        options = self.copy()\n        options.min_width = options.max_width = max(0, width)\n        return options\n\n    def update_height(self, height: int) -> \"ConsoleOptions\":\n        \"\"\"Update the height, and return a copy.\n\n        Args:\n            height (int): New height\n\n        Returns:\n            ~ConsoleOptions: New Console options instance.\n        \"\"\"\n        options = self.copy()\n        options.max_height = options.height = height\n        return options\n\n    def reset_height(self) -> \"ConsoleOptions\":\n        \"\"\"Return a copy of the options with height set to ``None``.\n\n        Returns:\n            ~ConsoleOptions: New console options instance.\n        \"\"\"\n        options = self.copy()\n        options.height = None\n        return options\n\n    def update_dimensions(self, width: int, height: int) -> \"ConsoleOptions\":\n        \"\"\"Update the width and height, and return a copy.\n\n        Args:\n            width (int): New width (sets both min_width and max_width).\n            height (int): New height.\n\n        Returns:\n            ~ConsoleOptions: New console options instance.\n        \"\"\"\n        options = self.copy()\n        options.min_width = options.max_width = max(0, width)\n        options.height = options.max_height = height\n        return options\n\n\n@runtime_checkable\nclass RichCast(Protocol):\n    \"\"\"An object that may be 'cast' to a console renderable.\"\"\"\n\n    def __rich__(\n        self,\n    ) -> Union[\"ConsoleRenderable\", \"RichCast\", str]:  # pragma: no cover\n        ...\n\n\n@runtime_checkable\nclass ConsoleRenderable(Protocol):\n    \"\"\"An object that supports the console protocol.\"\"\"\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":  # pragma: no cover\n        ...\n\n\n# A type that may be rendered by Console.\nRenderableType = Union[ConsoleRenderable, RichCast, str]\n\"\"\"A string or any object that may be rendered by Rich.\"\"\"\n\n# The result of calling a __rich_console__ method.\nRenderResult = Iterable[Union[RenderableType, Segment]]\n\n_null_highlighter = NullHighlighter()\n\n\nclass CaptureError(Exception):\n    \"\"\"An error in the Capture context manager.\"\"\"\n\n\nclass NewLine:\n    \"\"\"A renderable to generate new line(s)\"\"\"\n\n    def __init__(self, count: int = 1) -> None:\n        self.count = count\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Iterable[Segment]:\n        yield Segment(\"\\n\" * self.count)\n\n\nclass ScreenUpdate:\n    \"\"\"Render a list of lines at a given offset.\"\"\"\n\n    def __init__(self, lines: List[List[Segment]], x: int, y: int) -> None:\n        self._lines = lines\n        self.x = x\n        self.y = y\n\n    def __rich_console__(\n        self, console: \"Console\", options: ConsoleOptions\n    ) -> RenderResult:\n        x = self.x\n        move_to = Control.move_to\n        for offset, line in enumerate(self._lines, self.y):\n            yield move_to(x, offset)\n            yield from line\n\n\nclass Capture:\n    \"\"\"Context manager to capture the result of printing to the console.\n    See :meth:`~rich.console.Console.capture` for how to use.\n\n    Args:\n        console (Console): A console instance to capture output.\n    \"\"\"\n\n    def __init__(self, console: \"Console\") -> None:\n        self._console = console\n        self._result: Optional[str] = None\n\n    def __enter__(self) -> \"Capture\":\n        self._console.begin_capture()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self._result = self._console.end_capture()\n\n    def get(self) -> str:\n        \"\"\"Get the result of the capture.\"\"\"\n        if self._result is None:\n            raise CaptureError(\n                \"Capture result is not available until context manager exits.\"\n            )\n        return self._result\n\n\nclass ThemeContext:\n    \"\"\"A context manager to use a temporary theme. See :meth:`~rich.console.Console.use_theme` for usage.\"\"\"\n\n    def __init__(self, console: \"Console\", theme: Theme, inherit: bool = True) -> None:\n        self.console = console\n        self.theme = theme\n        self.inherit = inherit\n\n    def __enter__(self) -> \"ThemeContext\":\n        self.console.push_theme(self.theme)\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self.console.pop_theme()\n\n\nclass PagerContext:\n    \"\"\"A context manager that 'pages' content. See :meth:`~rich.console.Console.pager` for usage.\"\"\"\n\n    def __init__(\n        self,\n        console: \"Console\",\n        pager: Optional[Pager] = None,\n        styles: bool = False,\n        links: bool = False,\n    ) -> None:\n        self._console = console\n        self.pager = SystemPager() if pager is None else pager\n        self.styles = styles\n        self.links = links\n\n    def __enter__(self) -> \"PagerContext\":\n        self._console._enter_buffer()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        if exc_type is None:\n            with self._console._lock:\n                buffer: List[Segment] = self._console._buffer[:]\n                del self._console._buffer[:]\n                segments: Iterable[Segment] = buffer\n                if not self.styles:\n                    segments = Segment.strip_styles(segments)\n                elif not self.links:\n                    segments = Segment.strip_links(segments)\n                content = self._console._render_buffer(segments)\n            self.pager.show(content)\n        self._console._exit_buffer()\n\n\nclass ScreenContext:\n    \"\"\"A context manager that enables an alternative screen. See :meth:`~rich.console.Console.screen` for usage.\"\"\"\n\n    def __init__(\n        self, console: \"Console\", hide_cursor: bool, style: StyleType = \"\"\n    ) -> None:\n        self.console = console\n        self.hide_cursor = hide_cursor\n        self.screen = Screen(style=style)\n        self._changed = False\n\n    def update(\n        self, *renderables: RenderableType, style: Optional[StyleType] = None\n    ) -> None:\n        \"\"\"Update the screen.\n\n        Args:\n            renderable (RenderableType, optional): Optional renderable to replace current renderable,\n                or None for no change. Defaults to None.\n            style: (Style, optional): Replacement style, or None for no change. Defaults to None.\n        \"\"\"\n        if renderables:\n            self.screen.renderable = (\n                Group(*renderables) if len(renderables) > 1 else renderables[0]\n            )\n        if style is not None:\n            self.screen.style = style\n        self.console.print(self.screen, end=\"\")\n\n    def __enter__(self) -> \"ScreenContext\":\n        self._changed = self.console.set_alt_screen(True)\n        if self._changed and self.hide_cursor:\n            self.console.show_cursor(False)\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        if self._changed:\n            self.console.set_alt_screen(False)\n            if self.hide_cursor:\n                self.console.show_cursor(True)\n\n\nclass Group:\n    \"\"\"Takes a group of renderables and returns a renderable object that renders the group.\n\n    Args:\n        renderables (Iterable[RenderableType]): An iterable of renderable objects.\n        fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.\n    \"\"\"\n\n    def __init__(self, *renderables: \"RenderableType\", fit: bool = True) -> None:\n        self._renderables = renderables\n        self.fit = fit\n        self._render: Optional[List[RenderableType]] = None\n\n    @property\n    def renderables(self) -> List[\"RenderableType\"]:\n        if self._render is None:\n            self._render = list(self._renderables)\n        return self._render\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        if self.fit:\n            return measure_renderables(console, options, self.renderables)\n        else:\n            return Measurement(options.max_width, options.max_width)\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> RenderResult:\n        yield from self.renderables\n\n\ndef group(fit: bool = True) -> Callable[..., Callable[..., Group]]:\n    \"\"\"A decorator that turns an iterable of renderables in to a group.\n\n    Args:\n        fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.\n    \"\"\"\n\n    def decorator(\n        method: Callable[..., Iterable[RenderableType]]\n    ) -> Callable[..., Group]:\n        \"\"\"Convert a method that returns an iterable of renderables in to a Group.\"\"\"\n\n        @wraps(method)\n        def _replace(*args: Any, **kwargs: Any) -> Group:\n            renderables = method(*args, **kwargs)\n            return Group(*renderables, fit=fit)\n\n        return _replace\n\n    return decorator\n\n\ndef _is_jupyter() -> bool:  # pragma: no cover\n    \"\"\"Check if we're running in a Jupyter notebook.\"\"\"\n    try:\n        get_ipython  # type: ignore[name-defined]\n    except NameError:\n        return False\n    ipython = get_ipython()  # type: ignore[name-defined]\n    shell = ipython.__class__.__name__\n    if (\n        \"google.colab\" in str(ipython.__class__)\n        or os.getenv(\"DATABRICKS_RUNTIME_VERSION\")\n        or shell == \"ZMQInteractiveShell\"\n    ):\n        return True  # Jupyter notebook or qtconsole\n    elif shell == \"TerminalInteractiveShell\":\n        return False  # Terminal running IPython\n    else:\n        return False  # Other type (?)\n\n\nCOLOR_SYSTEMS = {\n    \"standard\": ColorSystem.STANDARD,\n    \"256\": ColorSystem.EIGHT_BIT,\n    \"truecolor\": ColorSystem.TRUECOLOR,\n    \"windows\": ColorSystem.WINDOWS,\n}\n\n_COLOR_SYSTEMS_NAMES = {system: name for name, system in COLOR_SYSTEMS.items()}\n\n\n@dataclass\nclass ConsoleThreadLocals(threading.local):\n    \"\"\"Thread local values for Console context.\"\"\"\n\n    theme_stack: ThemeStack\n    buffer: List[Segment] = field(default_factory=list)\n    buffer_index: int = 0\n\n\nclass RenderHook(ABC):\n    \"\"\"Provides hooks in to the render process.\"\"\"\n\n    @abstractmethod\n    def process_renderables(\n        self, renderables: List[ConsoleRenderable]\n    ) -> List[ConsoleRenderable]:\n        \"\"\"Called with a list of objects to render.\n\n        This method can return a new list of renderables, or modify and return the same list.\n\n        Args:\n            renderables (List[ConsoleRenderable]): A number of renderable objects.\n\n        Returns:\n            List[ConsoleRenderable]: A replacement list of renderables.\n        \"\"\"\n\n\n_windows_console_features: Optional[\"WindowsConsoleFeatures\"] = None\n\n\ndef get_windows_console_features() -> \"WindowsConsoleFeatures\":  # pragma: no cover\n    global _windows_console_features\n    if _windows_console_features is not None:\n        return _windows_console_features\n    from ._windows import get_windows_console_features\n\n    _windows_console_features = get_windows_console_features()\n    return _windows_console_features\n\n\ndef detect_legacy_windows() -> bool:\n    \"\"\"Detect legacy Windows.\"\"\"\n    return WINDOWS and not get_windows_console_features().vt\n\n\nclass Console:\n    \"\"\"A high level console interface.\n\n    Args:\n        color_system (str, optional): The color system supported by your terminal,\n            either ``\"standard\"``, ``\"256\"`` or ``\"truecolor\"``. Leave as ``\"auto\"`` to autodetect.\n        force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.\n        force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.\n        force_interactive (Optional[bool], optional): Enable/disable interactive mode, or None to auto detect. Defaults to None.\n        soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.\n        theme (Theme, optional): An optional style theme object, or ``None`` for default theme.\n        stderr (bool, optional): Use stderr rather than stdout if ``file`` is not specified. Defaults to False.\n        file (IO, optional): A file object where the console should write to. Defaults to stdout.\n        quiet (bool, Optional): Boolean to suppress all output. Defaults to False.\n        width (int, optional): The width of the terminal. Leave as default to auto-detect width.\n        height (int, optional): The height of the terminal. Leave as default to auto-detect height.\n        style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.\n        no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.\n        tab_size (int, optional): Number of spaces used to replace a tab character. Defaults to 8.\n        record (bool, optional): Boolean to enable recording of terminal output,\n            required to call :meth:`export_html`, :meth:`export_svg`, and :meth:`export_text`. Defaults to False.\n        markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.\n        emoji (bool, optional): Enable emoji code. Defaults to True.\n        emoji_variant (str, optional): Optional emoji variant, either \"text\" or \"emoji\". Defaults to None.\n        highlight (bool, optional): Enable automatic highlighting. Defaults to True.\n        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.\n        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.\n        log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to \"[%X] \".\n        highlighter (HighlighterType, optional): Default highlighter.\n        legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.\n        safe_box (bool, optional): Restrict box options that don't render on legacy Windows.\n        get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),\n            or None for datetime.now.\n        get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.\n    \"\"\"\n\n    _environ: Mapping[str, str] = os.environ\n\n    def __init__(\n        self,\n        *,\n        color_system: Optional[\n            Literal[\"auto\", \"standard\", \"256\", \"truecolor\", \"windows\"]\n        ] = \"auto\",\n        force_terminal: Optional[bool] = None,\n        force_jupyter: Optional[bool] = None,\n        force_interactive: Optional[bool] = None,\n        soft_wrap: bool = False,\n        theme: Optional[Theme] = None,\n        stderr: bool = False,\n        file: Optional[IO[str]] = None,\n        quiet: bool = False,\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n        style: Optional[StyleType] = None,\n        no_color: Optional[bool] = None,\n        tab_size: int = 8,\n        record: bool = False,\n        markup: bool = True,\n        emoji: bool = True,\n        emoji_variant: Optional[EmojiVariant] = None,\n        highlight: bool = True,\n        log_time: bool = True,\n        log_path: bool = True,\n        log_time_format: Union[str, FormatTimeCallable] = \"[%X]\",\n        highlighter: Optional[\"HighlighterType\"] = ReprHighlighter(),\n        legacy_windows: Optional[bool] = None,\n        safe_box: bool = True,\n        get_datetime: Optional[Callable[[], datetime]] = None,\n        get_time: Optional[Callable[[], float]] = None,\n        _environ: Optional[Mapping[str, str]] = None,\n    ):\n        # Copy of os.environ allows us to replace it for testing\n        if _environ is not None:\n            self._environ = _environ\n\n        self.is_jupyter = _is_jupyter() if force_jupyter is None else force_jupyter\n        if self.is_jupyter:\n            if width is None:\n                jupyter_columns = self._environ.get(\"JUPYTER_COLUMNS\")\n                if jupyter_columns is not None and jupyter_columns.isdigit():\n                    width = int(jupyter_columns)\n                else:\n                    width = JUPYTER_DEFAULT_COLUMNS\n            if height is None:\n                jupyter_lines = self._environ.get(\"JUPYTER_LINES\")\n                if jupyter_lines is not None and jupyter_lines.isdigit():\n                    height = int(jupyter_lines)\n                else:\n                    height = JUPYTER_DEFAULT_LINES\n\n        self.tab_size = tab_size\n        self.record = record\n        self._markup = markup\n        self._emoji = emoji\n        self._emoji_variant: Optional[EmojiVariant] = emoji_variant\n        self._highlight = highlight\n        self.legacy_windows: bool = (\n            (detect_legacy_windows() and not self.is_jupyter)\n            if legacy_windows is None\n            else legacy_windows\n        )\n\n        if width is None:\n            columns = self._environ.get(\"COLUMNS\")\n            if columns is not None and columns.isdigit():\n                width = int(columns) - self.legacy_windows\n        if height is None:\n            lines = self._environ.get(\"LINES\")\n            if lines is not None and lines.isdigit():\n                height = int(lines)\n\n        self.soft_wrap = soft_wrap\n        self._width = width\n        self._height = height\n\n        self._color_system: Optional[ColorSystem]\n\n        self._force_terminal = None\n        if force_terminal is not None:\n            self._force_terminal = force_terminal\n\n        self._file = file\n        self.quiet = quiet\n        self.stderr = stderr\n\n        if color_system is None:\n            self._color_system = None\n        elif color_system == \"auto\":\n            self._color_system = self._detect_color_system()\n        else:\n            self._color_system = COLOR_SYSTEMS[color_system]\n\n        self._lock = threading.RLock()\n        self._log_render = LogRender(\n            show_time=log_time,\n            show_path=log_path,\n            time_format=log_time_format,\n        )\n        self.highlighter: HighlighterType = highlighter or _null_highlighter\n        self.safe_box = safe_box\n        self.get_datetime = get_datetime or datetime.now\n        self.get_time = get_time or monotonic\n        self.style = style\n        self.no_color = (\n            no_color if no_color is not None else \"NO_COLOR\" in self._environ\n        )\n        self.is_interactive = (\n            (self.is_terminal and not self.is_dumb_terminal)\n            if force_interactive is None\n            else force_interactive\n        )\n\n        self._record_buffer_lock = threading.RLock()\n        self._thread_locals = ConsoleThreadLocals(\n            theme_stack=ThemeStack(themes.DEFAULT if theme is None else theme)\n        )\n        self._record_buffer: List[Segment] = []\n        self._render_hooks: List[RenderHook] = []\n        self._live: Optional[\"Live\"] = None\n        self._is_alt_screen = False\n\n    def __repr__(self) -> str:\n        return f\"<console width={self.width} {self._color_system!s}>\"\n\n    @property\n    def file(self) -> IO[str]:\n        \"\"\"Get the file object to write to.\"\"\"\n        file = self._file or (sys.stderr if self.stderr else sys.stdout)\n        file = getattr(file, \"rich_proxied_file\", file)\n        if file is None:\n            file = NULL_FILE\n        return file\n\n    @file.setter\n    def file(self, new_file: IO[str]) -> None:\n        \"\"\"Set a new file object.\"\"\"\n        self._file = new_file\n\n    @property\n    def _buffer(self) -> List[Segment]:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer\n\n    @property\n    def _buffer_index(self) -> int:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer_index\n\n    @_buffer_index.setter\n    def _buffer_index(self, value: int) -> None:\n        self._thread_locals.buffer_index = value\n\n    @property\n    def _theme_stack(self) -> ThemeStack:\n        \"\"\"Get the thread local theme stack.\"\"\"\n        return self._thread_locals.theme_stack\n\n    def _detect_color_system(self) -> Optional[ColorSystem]:\n        \"\"\"Detect color system from env vars.\"\"\"\n        if self.is_jupyter:\n            return ColorSystem.TRUECOLOR\n        if not self.is_terminal or self.is_dumb_terminal:\n            return None\n        if WINDOWS:  # pragma: no cover\n            if self.legacy_windows:  # pragma: no cover\n                return ColorSystem.WINDOWS\n            windows_console_features = get_windows_console_features()\n            return (\n                ColorSystem.TRUECOLOR\n                if windows_console_features.truecolor\n                else ColorSystem.EIGHT_BIT\n            )\n        else:\n            color_term = self._environ.get(\"COLORTERM\", \"\").strip().lower()\n            if color_term in (\"truecolor\", \"24bit\"):\n                return ColorSystem.TRUECOLOR\n            term = self._environ.get(\"TERM\", \"\").strip().lower()\n            _term_name, _hyphen, colors = term.rpartition(\"-\")\n            color_system = _TERM_COLORS.get(colors, ColorSystem.STANDARD)\n            return color_system\n\n    def _enter_buffer(self) -> None:\n        \"\"\"Enter in to a buffer context, and buffer all output.\"\"\"\n        self._buffer_index += 1\n\n    def _exit_buffer(self) -> None:\n        \"\"\"Leave buffer context, and render content if required.\"\"\"\n        self._buffer_index -= 1\n        self._check_buffer()\n\n    def set_live(self, live: \"Live\") -> None:\n        \"\"\"Set Live instance. Used by Live context manager.\n\n        Args:\n            live (Live): Live instance using this Console.\n\n        Raises:\n            errors.LiveError: If this Console has a Live context currently active.\n        \"\"\"\n        with self._lock:\n            if self._live is not None:\n                raise errors.LiveError(\"Only one live display may be active at once\")\n            self._live = live\n\n    def clear_live(self) -> None:\n        \"\"\"Clear the Live instance.\"\"\"\n        with self._lock:\n            self._live = None\n\n    def push_render_hook(self, hook: RenderHook) -> None:\n        \"\"\"Add a new render hook to the stack.\n\n        Args:\n            hook (RenderHook): Render hook instance.\n        \"\"\"\n        with self._lock:\n            self._render_hooks.append(hook)\n\n    def pop_render_hook(self) -> None:\n        \"\"\"Pop the last renderhook from the stack.\"\"\"\n        with self._lock:\n            self._render_hooks.pop()\n\n    def __enter__(self) -> \"Console\":\n        \"\"\"Own context manager to enter buffer context.\"\"\"\n        self._enter_buffer()\n        return self\n\n    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None:\n        \"\"\"Exit buffer context.\"\"\"\n        self._exit_buffer()\n\n    def begin_capture(self) -> None:\n        \"\"\"Begin capturing console output. Call :meth:`end_capture` to exit capture mode and return output.\"\"\"\n        self._enter_buffer()\n\n    def end_capture(self) -> str:\n        \"\"\"End capture mode and return captured string.\n\n        Returns:\n            str: Console output.\n        \"\"\"\n        render_result = self._render_buffer(self._buffer)\n        del self._buffer[:]\n        self._exit_buffer()\n        return render_result\n\n    def push_theme(self, theme: Theme, *, inherit: bool = True) -> None:\n        \"\"\"Push a new theme on to the top of the stack, replacing the styles from the previous theme.\n        Generally speaking, you should call :meth:`~rich.console.Console.use_theme` to get a context manager, rather\n        than calling this method directly.\n\n        Args:\n            theme (Theme): A theme instance.\n            inherit (bool, optional): Inherit existing styles. Defaults to True.\n        \"\"\"\n        self._theme_stack.push_theme(theme, inherit=inherit)\n\n    def pop_theme(self) -> None:\n        \"\"\"Remove theme from top of stack, restoring previous theme.\"\"\"\n        self._theme_stack.pop_theme()\n\n    def use_theme(self, theme: Theme, *, inherit: bool = True) -> ThemeContext:\n        \"\"\"Use a different theme for the duration of the context manager.\n\n        Args:\n            theme (Theme): Theme instance to user.\n            inherit (bool, optional): Inherit existing console styles. Defaults to True.\n\n        Returns:\n            ThemeContext: [description]\n        \"\"\"\n        return ThemeContext(self, theme, inherit)\n\n    @property\n    def color_system(self) -> Optional[str]:\n        \"\"\"Get color system string.\n\n        Returns:\n            Optional[str]: \"standard\", \"256\" or \"truecolor\".\n        \"\"\"\n\n        if self._color_system is not None:\n            return _COLOR_SYSTEMS_NAMES[self._color_system]\n        else:\n            return None\n\n    @property\n    def encoding(self) -> str:\n        \"\"\"Get the encoding of the console file, e.g. ``\"utf-8\"``.\n\n        Returns:\n            str: A standard encoding string.\n        \"\"\"\n        return (getattr(self.file, \"encoding\", \"utf-8\") or \"utf-8\").lower()\n\n    @property\n    def is_terminal(self) -> bool:\n        \"\"\"Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        \"\"\"\n        if self._force_terminal is not None:\n            return self._force_terminal\n\n        if hasattr(sys.stdin, \"__module__\") and sys.stdin.__module__.startswith(\n            \"idlelib\"\n        ):\n            # Return False for Idle which claims to be a tty but can't handle ansi codes\n            return False\n\n        if self.is_jupyter:\n            # return False for Jupyter, which may have FORCE_COLOR set\n            return False\n\n        # If FORCE_COLOR env var has any value at all, we assume a terminal.\n        force_color = self._environ.get(\"FORCE_COLOR\")\n        if force_color is not None:\n            self._force_terminal = True\n            return True\n\n        isatty: Optional[Callable[[], bool]] = getattr(self.file, \"isatty\", None)\n        try:\n            return False if isatty is None else isatty()\n        except ValueError:\n            # in some situation (at the end of a pytest run for example) isatty() can raise\n            # ValueError: I/O operation on closed file\n            # return False because we aren't in a terminal anymore\n            return False\n\n    @property\n    def is_dumb_terminal(self) -> bool:\n        \"\"\"Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        \"\"\"\n        _term = self._environ.get(\"TERM\", \"\")\n        is_dumb = _term.lower() in (\"dumb\", \"unknown\")\n        return self.is_terminal and is_dumb\n\n    @property\n    def options(self) -> ConsoleOptions:\n        \"\"\"Get default console options.\"\"\"\n        return ConsoleOptions(\n            max_height=self.size.height,\n            size=self.size,\n            legacy_windows=self.legacy_windows,\n            min_width=1,\n            max_width=self.width,\n            encoding=self.encoding,\n            is_terminal=self.is_terminal,\n        )\n\n    @property\n    def size(self) -> ConsoleDimensions:\n        \"\"\"Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        \"\"\"\n\n        if self._width is not None and self._height is not None:\n            return ConsoleDimensions(self._width - self.legacy_windows, self._height)\n\n        if self.is_dumb_terminal:\n            return ConsoleDimensions(80, 25)\n\n        width: Optional[int] = None\n        height: Optional[int] = None\n\n        if WINDOWS:  # pragma: no cover\n            try:\n                width, height = os.get_terminal_size()\n            except (AttributeError, ValueError, OSError):  # Probably not a terminal\n                pass\n        else:\n            for file_descriptor in _STD_STREAMS:\n                try:\n                    width, height = os.get_terminal_size(file_descriptor)\n                except (AttributeError, ValueError, OSError):\n                    pass\n                else:\n                    break\n\n        columns = self._environ.get(\"COLUMNS\")\n        if columns is not None and columns.isdigit():\n            width = int(columns)\n        lines = self._environ.get(\"LINES\")\n        if lines is not None and lines.isdigit():\n            height = int(lines)\n\n        # get_terminal_size can report 0, 0 if run from pseudo-terminal\n        width = width or 80\n        height = height or 25\n        return ConsoleDimensions(\n            width - self.legacy_windows if self._width is None else self._width,\n            height if self._height is None else self._height,\n        )\n\n    @size.setter\n    def size(self, new_size: Tuple[int, int]) -> None:\n        \"\"\"Set a new size for the terminal.\n\n        Args:\n            new_size (Tuple[int, int]): New width and height.\n        \"\"\"\n        width, height = new_size\n        self._width = width\n        self._height = height\n\n    @property\n    def width(self) -> int:\n        \"\"\"Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        \"\"\"\n        return self.size.width\n\n    @width.setter\n    def width(self, width: int) -> None:\n        \"\"\"Set width.\n\n        Args:\n            width (int): New width.\n        \"\"\"\n        self._width = width\n\n    @property\n    def height(self) -> int:\n        \"\"\"Get the height of the console.\n\n        Returns:\n            int: The height (in lines) of the console.\n        \"\"\"\n        return self.size.height\n\n    @height.setter\n    def height(self, height: int) -> None:\n        \"\"\"Set height.\n\n        Args:\n            height (int): new height.\n        \"\"\"\n        self._height = height\n\n    def bell(self) -> None:\n        \"\"\"Play a 'bell' sound (if supported by the terminal).\"\"\"\n        self.control(Control.bell())\n\n    def capture(self) -> Capture:\n        \"\"\"A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.\n\n        Example:\n            >>> from rich.console import Console\n            >>> console = Console()\n            >>> with console.capture() as capture:\n            ...     console.print(\"[bold magenta]Hello World[/]\")\n            >>> print(capture.get())\n\n        Returns:\n            Capture: Context manager with disables writing to the terminal.\n        \"\"\"\n        capture = Capture(self)\n        return capture\n\n    def pager(\n        self, pager: Optional[Pager] = None, styles: bool = False, links: bool = False\n    ) -> PagerContext:\n        \"\"\"A context manager to display anything printed within a \"pager\". The pager application\n        is defined by the system and will typically support at least pressing a key to scroll.\n\n        Args:\n            pager (Pager, optional): A pager object, or None to use :class:`~rich.pager.SystemPager`. Defaults to None.\n            styles (bool, optional): Show styles in pager. Defaults to False.\n            links (bool, optional): Show links in pager. Defaults to False.\n\n        Example:\n            >>> from rich.console import Console\n            >>> from rich.__main__ import make_test_card\n            >>> console = Console()\n            >>> with console.pager():\n                    console.print(make_test_card())\n\n        Returns:\n            PagerContext: A context manager.\n        \"\"\"\n        return PagerContext(self, pager=pager, styles=styles, links=links)\n\n    def line(self, count: int = 1) -> None:\n        \"\"\"Write new line(s).\n\n        Args:\n            count (int, optional): Number of new lines. Defaults to 1.\n        \"\"\"\n\n        assert count >= 0, \"count must be >= 0\"\n        self.print(NewLine(count))\n\n    def clear(self, home: bool = True) -> None:\n        \"\"\"Clear the screen.\n\n        Args:\n            home (bool, optional): Also move the cursor to 'home' position. Defaults to True.\n        \"\"\"\n        if home:\n            self.control(Control.clear(), Control.home())\n        else:\n            self.control(Control.clear())\n\n    def status(\n        self,\n        status: RenderableType,\n        *,\n        spinner: str = \"dots\",\n        spinner_style: StyleType = \"status.spinner\",\n        speed: float = 1.0,\n        refresh_per_second: float = 12.5,\n    ) -> \"Status\":\n        \"\"\"Display a status and spinner.\n\n        Args:\n            status (RenderableType): A status renderable (str or Text typically).\n            spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to \"dots\".\n            spinner_style (StyleType, optional): Style of spinner. Defaults to \"status.spinner\".\n            speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\n            refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\n\n        Returns:\n            Status: A Status object that may be used as a context manager.\n        \"\"\"\n        from .status import Status\n\n        status_renderable = Status(\n            status,\n            console=self,\n            spinner=spinner,\n            spinner_style=spinner_style,\n            speed=speed,\n            refresh_per_second=refresh_per_second,\n        )\n        return status_renderable\n\n    def show_cursor(self, show: bool = True) -> bool:\n        \"\"\"Show or hide the cursor.\n\n        Args:\n            show (bool, optional): Set visibility of the cursor.\n        \"\"\"\n        if self.is_terminal:\n            self.control(Control.show_cursor(show))\n            return True\n        return False\n\n    def set_alt_screen(self, enable: bool = True) -> bool:\n        \"\"\"Enables alternative screen mode.\n\n        Note, if you enable this mode, you should ensure that is disabled before\n        the application exits. See :meth:`~rich.Console.screen` for a context manager\n        that handles this for you.\n\n        Args:\n            enable (bool, optional): Enable (True) or disable (False) alternate screen. Defaults to True.\n\n        Returns:\n            bool: True if the control codes were written.\n\n        \"\"\"\n        changed = False\n        if self.is_terminal and not self.legacy_windows:\n            self.control(Control.alt_screen(enable))\n            changed = True\n            self._is_alt_screen = enable\n        return changed\n\n    @property\n    def is_alt_screen(self) -> bool:\n        \"\"\"Check if the alt screen was enabled.\n\n        Returns:\n            bool: True if the alt screen was enabled, otherwise False.\n        \"\"\"\n        return self._is_alt_screen\n\n    def set_window_title(self, title: str) -> bool:\n        \"\"\"Set the title of the console terminal window.\n\n        Warning: There is no means within Rich of \"resetting\" the window title to its\n        previous value, meaning the title you set will persist even after your application\n        exits.\n\n        ``fish`` shell resets the window title before and after each command by default,\n        negating this issue. Windows Terminal and command prompt will also reset the title for you.\n        Most other shells and terminals, however, do not do this.\n\n        Some terminals may require configuration changes before you can set the title.\n        Some terminals may not support setting the title at all.\n\n        Other software (including the terminal itself, the shell, custom prompts, plugins, etc.)\n        may also set the terminal window title. This could result in whatever value you write\n        using this method being overwritten.\n\n        Args:\n            title (str): The new title of the terminal window.\n\n        Returns:\n            bool: True if the control code to change the terminal title was\n                written, otherwise False. Note that a return value of True\n                does not guarantee that the window title has actually changed,\n                since the feature may be unsupported/disabled in some terminals.\n        \"\"\"\n        if self.is_terminal:\n            self.control(Control.title(title))\n            return True\n        return False\n\n    def screen(\n        self, hide_cursor: bool = True, style: Optional[StyleType] = None\n    ) -> \"ScreenContext\":\n        \"\"\"Context manager to enable and disable 'alternative screen' mode.\n\n        Args:\n            hide_cursor (bool, optional): Also hide the cursor. Defaults to False.\n            style (Style, optional): Optional style for screen. Defaults to None.\n\n        Returns:\n            ~ScreenContext: Context which enables alternate screen on enter, and disables it on exit.\n        \"\"\"\n        return ScreenContext(self, hide_cursor=hide_cursor, style=style or \"\")\n\n    def measure(\n        self, renderable: RenderableType, *, options: Optional[ConsoleOptions] = None\n    ) -> Measurement:\n        \"\"\"Measure a renderable. Returns a :class:`~rich.measure.Measurement` object which contains\n        information regarding the number of characters required to print the renderable.\n\n        Args:\n            renderable (RenderableType): Any renderable or string.\n            options (Optional[ConsoleOptions], optional): Options to use when measuring, or None\n                to use default options. Defaults to None.\n\n        Returns:\n            Measurement: A measurement of the renderable.\n        \"\"\"\n        measurement = Measurement.get(self, options or self.options, renderable)\n        return measurement\n\n    def render(\n        self, renderable: RenderableType, options: Optional[ConsoleOptions] = None\n    ) -> Iterable[Segment]:\n        \"\"\"Render an object in to an iterable of `Segment` instances.\n\n        This method contains the logic for rendering objects with the console protocol.\n        You are unlikely to need to use it directly, unless you are extending the library.\n\n        Args:\n            renderable (RenderableType): An object supporting the console protocol, or\n                an object that may be converted to a string.\n            options (ConsoleOptions, optional): An options object, or None to use self.options. Defaults to None.\n\n        Returns:\n            Iterable[Segment]: An iterable of segments that may be rendered.\n        \"\"\"\n\n        _options = options or self.options\n        if _options.max_width < 1:\n            # No space to render anything. This prevents potential recursion errors.\n            return\n        render_iterable: RenderResult\n\n        renderable = rich_cast(renderable)\n        if hasattr(renderable, \"__rich_console__\") and not isclass(renderable):\n            render_iterable = renderable.__rich_console__(self, _options)  # type: ignore[union-attr]\n        elif isinstance(renderable, str):\n            text_renderable = self.render_str(\n                renderable, highlight=_options.highlight, markup=_options.markup\n            )\n            render_iterable = text_renderable.__rich_console__(self, _options)\n        else:\n            raise errors.NotRenderableError(\n                f\"Unable to render {renderable!r}; \"\n                \"A str, Segment or object with __rich_console__ method is required\"\n            )\n\n        try:\n            iter_render = iter(render_iterable)\n        except TypeError:\n            raise errors.NotRenderableError(\n                f\"object {render_iterable!r} is not renderable\"\n            )\n        _Segment = Segment\n        _options = _options.reset_height()\n        for render_output in iter_render:\n            if isinstance(render_output, _Segment):\n                yield render_output\n            else:\n                yield from self.render(render_output, _options)\n\n    def render_lines(\n        self,\n        renderable: RenderableType,\n        options: Optional[ConsoleOptions] = None,\n        *,\n        style: Optional[Style] = None,\n        pad: bool = True,\n        new_lines: bool = False,\n    ) -> List[List[Segment]]:\n        \"\"\"Render objects in to a list of lines.\n\n        The output of render_lines is useful when further formatting of rendered console text\n        is required, such as the Panel class which draws a border around any renderable object.\n\n        Args:\n            renderable (RenderableType): Any object renderable in the console.\n            options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to ``None``.\n            style (Style, optional): Optional style to apply to renderables. Defaults to ``None``.\n            pad (bool, optional): Pad lines shorter than render width. Defaults to ``True``.\n            new_lines (bool, optional): Include \"\\n\" characters at end of lines.\n\n        Returns:\n            List[List[Segment]]: A list of lines, where a line is a list of Segment objects.\n        \"\"\"\n        with self._lock:\n            render_options = options or self.options\n            _rendered = self.render(renderable, render_options)\n            if style:\n                _rendered = Segment.apply_style(_rendered, style)\n\n            render_height = render_options.height\n            if render_height is not None:\n                render_height = max(0, render_height)\n\n            lines = list(\n                islice(\n                    Segment.split_and_crop_lines(\n                        _rendered,\n                        render_options.max_width,\n                        include_new_lines=new_lines,\n                        pad=pad,\n                        style=style,\n                    ),\n                    None,\n                    render_height,\n                )\n            )\n            if render_options.height is not None:\n                extra_lines = render_options.height - len(lines)\n                if extra_lines > 0:\n                    pad_line = [\n                        [Segment(\" \" * render_options.max_width, style), Segment(\"\\n\")]\n                        if new_lines\n                        else [Segment(\" \" * render_options.max_width, style)]\n                    ]\n                    lines.extend(pad_line * extra_lines)\n\n            return lines\n\n    def render_str(\n        self,\n        text: str,\n        *,\n        style: Union[str, Style] = \"\",\n        justify: Optional[JustifyMethod] = None,\n        overflow: Optional[OverflowMethod] = None,\n        emoji: Optional[bool] = None,\n        markup: Optional[bool] = None,\n        highlight: Optional[bool] = None,\n        highlighter: Optional[HighlighterType] = None,\n    ) -> \"Text\":\n        \"\"\"Convert a string to a Text instance. This is called automatically if\n        you print or log a string.\n\n        Args:\n            text (str): Text to render.\n            style (Union[str, Style], optional): Style to apply to rendered text.\n            justify (str, optional): Justify method: \"default\", \"left\", \"center\", \"full\", or \"right\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji, or ``None`` to use Console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use Console default.\n            highlight (Optional[bool], optional): Enable highlighting, or ``None`` to use Console default.\n            highlighter (HighlighterType, optional): Optional highlighter to apply.\n        Returns:\n            ConsoleRenderable: Renderable object.\n\n        \"\"\"\n        emoji_enabled = emoji or (emoji is None and self._emoji)\n        markup_enabled = markup or (markup is None and self._markup)\n        highlight_enabled = highlight or (highlight is None and self._highlight)\n\n        if markup_enabled:\n            rich_text = render_markup(\n                text,\n                style=style,\n                emoji=emoji_enabled,\n                emoji_variant=self._emoji_variant,\n            )\n            rich_text.justify = justify\n            rich_text.overflow = overflow\n        else:\n            rich_text = Text(\n                _emoji_replace(text, default_variant=self._emoji_variant)\n                if emoji_enabled\n                else text,\n                justify=justify,\n                overflow=overflow,\n                style=style,\n            )\n\n        _highlighter = (highlighter or self.highlighter) if highlight_enabled else None\n        if _highlighter is not None:\n            highlight_text = _highlighter(str(rich_text))\n            highlight_text.copy_styles(rich_text)\n            return highlight_text\n\n        return rich_text\n\n    def get_style(\n        self, name: Union[str, Style], *, default: Optional[Union[Style, str]] = None\n    ) -> Style:\n        \"\"\"Get a Style instance by its theme name or parse a definition.\n\n        Args:\n            name (str): The name of a style or a style definition.\n\n        Returns:\n            Style: A Style object.\n\n        Raises:\n            MissingStyle: If no style could be parsed from name.\n\n        \"\"\"\n        if isinstance(name, Style):\n            return name\n\n        try:\n            style = self._theme_stack.get(name)\n            if style is None:\n                style = Style.parse(name)\n            return style.copy() if style.link else style\n        except errors.StyleSyntaxError as error:\n            if default is not None:\n                return self.get_style(default)\n            raise errors.MissingStyle(\n                f\"Failed to get style {name!r}; {error}\"\n            ) from None\n\n    def _collect_renderables(\n        self,\n        objects: Iterable[Any],\n        sep: str,\n        end: str,\n        *,\n        justify: Optional[JustifyMethod] = None,\n        emoji: Optional[bool] = None,\n        markup: Optional[bool] = None,\n        highlight: Optional[bool] = None,\n    ) -> List[ConsoleRenderable]:\n        \"\"\"Combine a number of renderables and text into one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str): String to write between print data.\n            end (str): String to write at end of print data.\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list of things to render.\n        \"\"\"\n        renderables: List[ConsoleRenderable] = []\n        _append = renderables.append\n        text: List[Text] = []\n        append_text = text.append\n\n        append = _append\n        if justify in (\"left\", \"center\", \"right\"):\n\n            def align_append(renderable: RenderableType) -> None:\n                _append(Align(renderable, cast(AlignMethod, justify)))\n\n            append = align_append\n\n        _highlighter: HighlighterType = _null_highlighter\n        if highlight or (highlight is None and self._highlight):\n            _highlighter = self.highlighter\n\n        def check_text() -> None:\n            if text:\n                sep_text = Text(sep, justify=justify, end=end)\n                append(sep_text.join(text))\n                text.clear()\n\n        for renderable in objects:\n            renderable = rich_cast(renderable)\n            if isinstance(renderable, str):\n                append_text(\n                    self.render_str(\n                        renderable, emoji=emoji, markup=markup, highlighter=_highlighter\n                    )\n                )\n            elif isinstance(renderable, Text):\n                append_text(renderable)\n            elif isinstance(renderable, ConsoleRenderable):\n                check_text()\n                append(renderable)\n            elif is_expandable(renderable):\n                check_text()\n                append(Pretty(renderable, highlighter=_highlighter))\n            else:\n                append_text(_highlighter(str(renderable)))\n\n        check_text()\n\n        if self.style is not None:\n            style = self.get_style(self.style)\n            renderables = [Styled(renderable, style) for renderable in renderables]\n\n        return renderables\n\n    def rule(\n        self,\n        title: TextType = \"\",\n        *,\n        characters: str = \"\u2500\",\n        style: Union[str, Style] = \"rule.line\",\n        align: AlignMethod = \"center\",\n    ) -> None:\n        \"\"\"Draw a line with optional centered title.\n\n        Args:\n            title (str, optional): Text to render over the rule. Defaults to \"\".\n            characters (str, optional): Character(s) to form the line. Defaults to \"\u2500\".\n            style (str, optional): Style of line. Defaults to \"rule.line\".\n            align (str, optional): How to align the title, one of \"left\", \"center\", or \"right\". Defaults to \"center\".\n        \"\"\"\n        from .rule import Rule\n\n        rule = Rule(title=title, characters=characters, style=style, align=align)\n        self.print(rule)\n\n    def control(self, *control: Control) -> None:\n        \"\"\"Insert non-printing control codes.\n\n        Args:\n            control_codes (str): Control codes, such as those that may move the cursor.\n        \"\"\"\n        if not self.is_dumb_terminal:\n            with self:\n                self._buffer.extend(_control.segment for _control in control)\n\n    def out(\n        self,\n        *objects: Any,\n        sep: str = \" \",\n        end: str = \"\\n\",\n        style: Optional[Union[str, Style]] = None,\n        highlight: Optional[bool] = None,\n    ) -> None:\n        \"\"\"Output to the terminal. This is a low-level way of writing to the terminal which unlike\n        :meth:`~rich.console.Console.print` won't pretty print, wrap text, or apply markup, but will\n        optionally apply highlighting and a basic style.\n\n        Args:\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use\n                console default. Defaults to ``None``.\n        \"\"\"\n        raw_output: str = sep.join(str(_object) for _object in objects)\n        self.print(\n            raw_output,\n            style=style,\n            highlight=highlight,\n            emoji=False,\n            markup=False,\n            no_wrap=True,\n            overflow=\"ignore\",\n            crop=False,\n            end=end,\n        )\n\n    def print(\n        self,\n        *objects: Any,\n        sep: str = \" \",\n        end: str = \"\\n\",\n        style: Optional[Union[str, Style]] = None,\n        justify: Optional[JustifyMethod] = None,\n        overflow: Optional[OverflowMethod] = None,\n        no_wrap: Optional[bool] = None,\n        emoji: Optional[bool] = None,\n        markup: Optional[bool] = None,\n        highlight: Optional[bool] = None,\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n        crop: bool = True,\n        soft_wrap: Optional[bool] = None,\n        new_line_start: bool = False,\n    ) -> None:\n        \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or ``None`` for\n                Console default. Defaults to ``None``.\n            new_line_start (bool, False): Insert a new line at the start if the output contains more than one line. Defaults to ``False``.\n        \"\"\"\n        if not objects:\n            objects = (NewLine(),)\n\n        if soft_wrap is None:\n            soft_wrap = self.soft_wrap\n        if soft_wrap:\n            if no_wrap is None:\n                no_wrap = True\n            if overflow is None:\n                overflow = \"ignore\"\n            crop = False\n        render_hooks = self._render_hooks[:]\n        with self:\n            renderables = self._collect_renderables(\n                objects,\n                sep,\n                end,\n                justify=justify,\n                emoji=emoji,\n                markup=markup,\n                highlight=highlight,\n            )\n            for hook in render_hooks:\n                renderables = hook.process_renderables(renderables)\n            render_options = self.options.update(\n                justify=justify,\n                overflow=overflow,\n                width=min(width, self.width) if width is not None else NO_CHANGE,\n                height=height,\n                no_wrap=no_wrap,\n                markup=markup,\n                highlight=highlight,\n            )\n\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            if style is None:\n                for renderable in renderables:\n                    extend(render(renderable, render_options))\n            else:\n                for renderable in renderables:\n                    extend(\n                        Segment.apply_style(\n                            render(renderable, render_options), self.get_style(style)\n                        )\n                    )\n            if new_line_start:\n                if (\n                    len(\"\".join(segment.text for segment in new_segments).splitlines())\n                    > 1\n                ):\n                    new_segments.insert(0, Segment.line())\n            if crop:\n                buffer_extend = self._buffer.extend\n                for line in Segment.split_and_crop_lines(\n                    new_segments, self.width, pad=False\n                ):\n                    buffer_extend(line)\n            else:\n                self._buffer.extend(new_segments)\n\n    def print_json(\n        self,\n        json: Optional[str] = None,\n        *,\n        data: Any = None,\n        indent: Union[None, int, str] = 2,\n        highlight: bool = True,\n        skip_keys: bool = False,\n        ensure_ascii: bool = False,\n        check_circular: bool = True,\n        allow_nan: bool = True,\n        default: Optional[Callable[[Any], Any]] = None,\n        sort_keys: bool = False,\n    ) -> None:\n        \"\"\"Pretty prints JSON. Output will be valid JSON.\n\n        Args:\n            json (Optional[str]): A string containing JSON.\n            data (Any): If json is not supplied, then encode this data.\n            indent (Union[None, int, str], optional): Number of spaces to indent. Defaults to 2.\n            highlight (bool, optional): Enable highlighting of output: Defaults to True.\n            skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n            ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n            check_circular (bool, optional): Check for circular references. Defaults to True.\n            allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n            default (Callable, optional): A callable that converts values that can not be encoded\n                in to something that can be JSON encoded. Defaults to None.\n            sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n        \"\"\"\n        from rich.json import JSON\n\n        if json is None:\n            json_renderable = JSON.from_data(\n                data,\n                indent=indent,\n                highlight=highlight,\n                skip_keys=skip_keys,\n                ensure_ascii=ensure_ascii,\n                check_circular=check_circular,\n                allow_nan=allow_nan,\n                default=default,\n                sort_keys=sort_keys,\n            )\n        else:\n            if not isinstance(json, str):\n                raise TypeError(\n                    f\"json must be str. Did you mean print_json(data={json!r}) ?\"\n                )\n            json_renderable = JSON(\n                json,\n                indent=indent,\n                highlight=highlight,\n                skip_keys=skip_keys,\n                ensure_ascii=ensure_ascii,\n                check_circular=check_circular,\n                allow_nan=allow_nan,\n                default=default,\n                sort_keys=sort_keys,\n            )\n        self.print(json_renderable, soft_wrap=True)\n\n    def update_screen(\n        self,\n        renderable: RenderableType,\n        *,\n        region: Optional[Region] = None,\n        options: Optional[ConsoleOptions] = None,\n    ) -> None:\n        \"\"\"Update the screen at a given offset.\n\n        Args:\n            renderable (RenderableType): A Rich renderable.\n            region (Region, optional): Region of screen to update, or None for entire screen. Defaults to None.\n            x (int, optional): x offset. Defaults to 0.\n            y (int, optional): y offset. Defaults to 0.\n\n        Raises:\n            errors.NoAltScreen: If the Console isn't in alt screen mode.\n\n        \"\"\"\n        if not self.is_alt_screen:\n            raise errors.NoAltScreen(\"Alt screen must be enabled to call update_screen\")\n        render_options = options or self.options\n        if region is None:\n            x = y = 0\n            render_options = render_options.update_dimensions(\n                render_options.max_width, render_options.height or self.height\n            )\n        else:\n            x, y, width, height = region\n            render_options = render_options.update_dimensions(width, height)\n\n        lines = self.render_lines(renderable, options=render_options)\n        self.update_screen_lines(lines, x, y)\n\n    def update_screen_lines(\n        self, lines: List[List[Segment]], x: int = 0, y: int = 0\n    ) -> None:\n        \"\"\"Update lines of the screen at a given offset.\n\n        Args:\n            lines (List[List[Segment]]): Rendered lines (as produced by :meth:`~rich.Console.render_lines`).\n            x (int, optional): x offset (column no). Defaults to 0.\n            y (int, optional): y offset (column no). Defaults to 0.\n\n        Raises:\n            errors.NoAltScreen: If the Console isn't in alt screen mode.\n        \"\"\"\n        if not self.is_alt_screen:\n            raise errors.NoAltScreen(\"Alt screen must be enabled to call update_screen\")\n        screen_update = ScreenUpdate(lines, x, y)\n        segments = self.render(screen_update)\n        self._buffer.extend(segments)\n        self._check_buffer()\n\n    def print_exception(\n        self,\n        *,\n        width: Optional[int] = 100,\n        extra_lines: int = 3,\n        theme: Optional[str] = None,\n        word_wrap: bool = False,\n        show_locals: bool = False,\n        suppress: Iterable[Union[str, ModuleType]] = (),\n        max_frames: int = 100,\n    ) -> None:\n        \"\"\"Prints a rich render of the last exception and traceback.\n\n        Args:\n            width (Optional[int], optional): Number of characters used to render code. Defaults to 100.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            suppress (Iterable[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n            max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n        \"\"\"\n        from .traceback import Traceback\n\n        traceback = Traceback(\n            width=width,\n            extra_lines=extra_lines,\n            theme=theme,\n            word_wrap=word_wrap,\n            show_locals=show_locals,\n            suppress=suppress,\n            max_frames=max_frames,\n        )\n        self.print(traceback)\n\n    @staticmethod\n    def _caller_frame_info(\n        offset: int,\n        currentframe: Callable[[], Optional[FrameType]] = inspect.currentframe,\n    ) -> Tuple[str, int, Dict[str, Any]]:\n        \"\"\"Get caller frame information.\n\n        Args:\n            offset (int): the caller offset within the current frame stack.\n            currentframe (Callable[[], Optional[FrameType]], optional): the callable to use to\n                retrieve the current frame. Defaults to ``inspect.currentframe``.\n\n        Returns:\n            Tuple[str, int, Dict[str, Any]]: A tuple containing the filename, the line number and\n                the dictionary of local variables associated with the caller frame.\n\n        Raises:\n            RuntimeError: If the stack offset is invalid.\n        \"\"\"\n        # Ignore the frame of this local helper\n        offset += 1\n\n        frame = currentframe()\n        if frame is not None:\n            # Use the faster currentframe where implemented\n            while offset and frame is not None:\n                frame = frame.f_back\n                offset -= 1\n            assert frame is not None\n            return frame.f_code.co_filename, frame.f_lineno, frame.f_locals\n        else:\n            # Fallback to the slower stack\n            frame_info = inspect.stack()[offset]\n            return frame_info.filename, frame_info.lineno, frame_info.frame.f_locals\n\n    def log(\n        self,\n        *objects: Any,\n        sep: str = \" \",\n        end: str = \"\\n\",\n        style: Optional[Union[str, Style]] = None,\n        justify: Optional[JustifyMethod] = None,\n        emoji: Optional[bool] = None,\n        markup: Optional[bool] = None,\n        highlight: Optional[bool] = None,\n        log_locals: bool = False,\n        _stack_offset: int = 1,\n    ) -> None:\n        \"\"\"Log rich content to the terminal.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to None.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to None.\n            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``\n                was called. Defaults to False.\n            _stack_offset (int, optional): Offset of caller from end of call stack. Defaults to 1.\n        \"\"\"\n        if not objects:\n            objects = (NewLine(),)\n\n        render_hooks = self._render_hooks[:]\n\n        with self:\n            renderables = self._collect_renderables(\n                objects,\n                sep,\n                end,\n                justify=justify,\n                emoji=emoji,\n                markup=markup,\n                highlight=highlight,\n            )\n            if style is not None:\n                renderables = [Styled(renderable, style) for renderable in renderables]\n\n            filename, line_no, locals = self._caller_frame_info(_stack_offset)\n            link_path = None if filename.startswith(\"<\") else os.path.abspath(filename)\n            path = filename.rpartition(os.sep)[-1]\n            if log_locals:\n                locals_map = {\n                    key: value\n                    for key, value in locals.items()\n                    if not key.startswith(\"__\")\n                }\n                renderables.append(render_scope(locals_map, title=\"[i]locals\"))\n\n            renderables = [\n                self._log_render(\n                    self,\n                    renderables,\n                    log_time=self.get_datetime(),\n                    path=path,\n                    line_no=line_no,\n                    link_path=link_path,\n                )\n            ]\n            for hook in render_hooks:\n                renderables = hook.process_renderables(renderables)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            render_options = self.options\n            for renderable in renderables:\n                extend(render(renderable, render_options))\n            buffer_extend = self._buffer.extend\n            for line in Segment.split_and_crop_lines(\n                new_segments, self.width, pad=False\n            ):\n                buffer_extend(line)\n\n    def _check_buffer(self) -> None:\n        \"\"\"Check if the buffer may be rendered. Render it if it can (e.g. Console.quiet is False)\n        Rendering is supported on Windows, Unix and Jupyter environments. For\n        legacy Windows consoles, the win32 API is called directly.\n        This method will also record what it renders if recording is enabled via Console.record.\n        \"\"\"\n        if self.quiet:\n            del self._buffer[:]\n            return\n        with self._lock:\n            if self.record:\n                with self._record_buffer_lock:\n                    self._record_buffer.extend(self._buffer[:])\n\n            if self._buffer_index == 0:\n                if self.is_jupyter:  # pragma: no cover\n                    from .jupyter import display\n\n                    display(self._buffer, self._render_buffer(self._buffer[:]))\n                    del self._buffer[:]\n                else:\n                    if WINDOWS:\n                        use_legacy_windows_render = False\n                        if self.legacy_windows:\n                            fileno = get_fileno(self.file)\n                            if fileno is not None:\n                                use_legacy_windows_render = (\n                                    fileno in _STD_STREAMS_OUTPUT\n                                )\n\n                        if use_legacy_windows_render:\n                            from rich._win32_console import LegacyWindowsTerm\n                            from rich._windows_renderer import legacy_windows_render\n\n                            buffer = self._buffer[:]\n                            if self.no_color and self._color_system:\n                                buffer = list(Segment.remove_color(buffer))\n\n                            legacy_windows_render(buffer, LegacyWindowsTerm(self.file))\n                        else:\n                            # Either a non-std stream on legacy Windows, or modern Windows.\n                            text = self._render_buffer(self._buffer[:])\n                            # https://bugs.python.org/issue37871\n                            # https://github.com/python/cpython/issues/82052\n                            # We need to avoid writing more than 32Kb in a single write, due to the above bug\n                            write = self.file.write\n                            # Worse case scenario, every character is 4 bytes of utf-8\n                            MAX_WRITE = 32 * 1024 // 4\n                            try:\n                                if len(text) <= MAX_WRITE:\n                                    write(text)\n                                else:\n                                    batch: List[str] = []\n                                    batch_append = batch.append\n                                    size = 0\n                                    for line in text.splitlines(True):\n                                        if size + len(line) > MAX_WRITE and batch:\n                                            write(\"\".join(batch))\n                                            batch.clear()\n                                            size = 0\n                                        batch_append(line)\n                                        size += len(line)\n                                    if batch:\n                                        write(\"\".join(batch))\n                                        batch.clear()\n                            except UnicodeEncodeError as error:\n                                error.reason = f\"{error.reason}\\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***\"\n                                raise\n                    else:\n                        text = self._render_buffer(self._buffer[:])\n                        try:\n                            self.file.write(text)\n                        except UnicodeEncodeError as error:\n                            error.reason = f\"{error.reason}\\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***\"\n                            raise\n\n                    self.file.flush()\n                    del self._buffer[:]\n\n    def _render_buffer(self, buffer: Iterable[Segment]) -> str:\n        \"\"\"Render buffered output, and clear buffer.\"\"\"\n        output: List[str] = []\n        append = output.append\n        color_system = self._color_system\n        legacy_windows = self.legacy_windows\n        not_terminal = not self.is_terminal\n        if self.no_color and color_system:\n            buffer = Segment.remove_color(buffer)\n        for text, style, control in buffer:\n            if style:\n                append(\n                    style.render(\n                        text,\n                        color_system=color_system,\n                        legacy_windows=legacy_windows,\n                    )\n                )\n            elif not (not_terminal and control):\n                append(text)\n\n        rendered = \"\".join(output)\n        return rendered\n\n    def input(\n        self,\n        prompt: TextType = \"\",\n        *,\n        markup: bool = True,\n        emoji: bool = True,\n        password: bool = False,\n        stream: Optional[TextIO] = None,\n    ) -> str:\n        \"\"\"Displays a prompt and waits for input from the user. The prompt may contain color / style.\n\n        It works in the same way as Python's builtin :func:`input` function and provides elaborate line editing and history features if Python's builtin :mod:`readline` module is previously loaded.\n\n        Args:\n            prompt (Union[str, Text]): Text to render in the prompt.\n            markup (bool, optional): Enable console markup (requires a str prompt). Defaults to True.\n            emoji (bool, optional): Enable emoji (requires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n            stream: (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None.\n\n        Returns:\n            str: Text read from stdin.\n        \"\"\"\n        if prompt:\n            self.print(prompt, markup=markup, emoji=emoji, end=\"\")\n        if password:\n            result = getpass(\"\", stream=stream)\n        else:\n            if stream:\n                result = stream.readline()\n            else:\n                result = input()\n        return result\n\n    def export_text(self, *, clear: bool = True, styles: bool = False) -> str:\n        \"\"\"Generate text from console contents (requires record=True argument in constructor).\n\n        Args:\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi escape codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        Returns:\n            str: String containing console contents.\n\n        \"\"\"\n        assert (\n            self.record\n        ), \"To export console contents set record=True in the constructor or instance\"\n\n        with self._record_buffer_lock:\n            if styles:\n                text = \"\".join(\n                    (style.render(text) if style else text)\n                    for text, style, _ in self._record_buffer\n                )\n            else:\n                text = \"\".join(\n                    segment.text\n                    for segment in self._record_buffer\n                    if not segment.control\n                )\n            if clear:\n                del self._record_buffer[:]\n        return text\n\n    def save_text(self, path: str, *, clear: bool = True, styles: bool = False) -> None:\n        \"\"\"Generate text from console and save to a given location (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write text files.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi style codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        \"\"\"\n        text = self.export_text(clear=clear, styles=styles)\n        with open(path, \"wt\", encoding=\"utf-8\") as write_file:\n            write_file.write(text)\n\n    def export_html(\n        self,\n        *,\n        theme: Optional[TerminalTheme] = None,\n        clear: bool = True,\n        code_format: Optional[str] = None,\n        inline_styles: bool = False,\n    ) -> str:\n        \"\"\"Generate HTML from console contents (requires record=True argument in constructor).\n\n        Args:\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML. In addition to '{foreground}',\n                '{background}', and '{code}', should contain '{stylesheet}' if inline_styles is ``False``.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        Returns:\n            str: String containing console contents as HTML.\n        \"\"\"\n        assert (\n            self.record\n        ), \"To export console contents set record=True in the constructor or instance\"\n        fragments: List[str] = []\n        append = fragments.append\n        _theme = theme or DEFAULT_TERMINAL_THEME\n        stylesheet = \"\"\n\n        render_code_format = CONSOLE_HTML_FORMAT if code_format is None else code_format\n\n        with self._record_buffer_lock:\n            if inline_styles:\n                for text, style, _ in Segment.filter_control(\n                    Segment.simplify(self._record_buffer)\n                ):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                        text = f'<span style=\"{rule}\">{text}</span>' if rule else text\n                    append(text)\n            else:\n                styles: Dict[str, int] = {}\n                for text, style, _ in Segment.filter_control(\n                    Segment.simplify(self._record_buffer)\n                ):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        style_number = styles.setdefault(rule, len(styles) + 1)\n                        if style.link:\n                            text = f'<a class=\"r{style_number}\" href=\"{style.link}\">{text}</a>'\n                        else:\n                            text = f'<span class=\"r{style_number}\">{text}</span>'\n                    append(text)\n                stylesheet_rules: List[str] = []\n                stylesheet_append = stylesheet_rules.append\n                for style_rule, style_number in styles.items():\n                    if style_rule:\n                        stylesheet_append(f\".r{style_number} {{{style_rule}}}\")\n                stylesheet = \"\\n\".join(stylesheet_rules)\n\n            rendered_code = render_code_format.format(\n                code=\"\".join(fragments),\n                stylesheet=stylesheet,\n                foreground=_theme.foreground_color.hex,\n                background=_theme.background_color.hex,\n            )\n            if clear:\n                del self._record_buffer[:]\n        return rendered_code\n\n    def save_html(\n        self,\n        path: str,\n        *,\n        theme: Optional[TerminalTheme] = None,\n        clear: bool = True,\n        code_format: str = CONSOLE_HTML_FORMAT,\n        inline_styles: bool = False,\n    ) -> None:\n        \"\"\"Generate HTML from console contents and write to a file (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write html file.\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML. In addition to '{foreground}',\n                '{background}', and '{code}', should contain '{stylesheet}' if inline_styles is ``False``.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        \"\"\"\n        html = self.export_html(\n            theme=theme,\n            clear=clear,\n            code_format=code_format,\n            inline_styles=inline_styles,\n        )\n        with open(path, \"wt\", encoding=\"utf-8\") as write_file:\n            write_file.write(html)\n\n    def export_svg(\n        self,\n        *,\n        title: str = \"Rich\",\n        theme: Optional[TerminalTheme] = None,\n        clear: bool = True,\n        code_format: str = CONSOLE_SVG_FORMAT,\n        font_aspect_ratio: float = 0.61,\n        unique_id: Optional[str] = None,\n    ) -> str:\n        \"\"\"\n        Generate an SVG from the console contents (requires record=True in Console constructor).\n\n        Args:\n            title (str, optional): The title of the tab in the output image\n            theme (TerminalTheme, optional): The ``TerminalTheme`` object to use to style the terminal\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``\n            code_format (str, optional): Format string used to generate the SVG. Rich will inject a number of variables\n                into the string in order to form the final SVG output. The default template used and the variables\n                injected by Rich can be found by inspecting the ``console.CONSOLE_SVG_FORMAT`` variable.\n            font_aspect_ratio (float, optional): The width to height ratio of the font used in the ``code_format``\n                string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font).\n                If you aren't specifying a different font inside ``code_format``, you probably don't need this.\n            unique_id (str, optional): unique id that is used as the prefix for various elements (CSS styles, node\n                ids). If not set, this defaults to a computed value based on the recorded content.\n        \"\"\"\n\n        from rich.cells import cell_len\n\n        style_cache: Dict[Style, str] = {}\n\n        def get_svg_style(style: Style) -> str:\n            \"\"\"Convert a Style to CSS rules for SVG.\"\"\"\n            if style in style_cache:\n                return style_cache[style]\n            css_rules = []\n            color = (\n                _theme.foreground_color\n                if (style.color is None or style.color.is_default)\n                else style.color.get_truecolor(_theme)\n            )\n            bgcolor = (\n                _theme.background_color\n                if (style.bgcolor is None or style.bgcolor.is_default)\n                else style.bgcolor.get_truecolor(_theme)\n            )\n            if style.reverse:\n                color, bgcolor = bgcolor, color\n            if style.dim:\n                color = blend_rgb(color, bgcolor, 0.4)\n            css_rules.append(f\"fill: {color.hex}\")\n            if style.bold:\n                css_rules.append(\"font-weight: bold\")\n            if style.italic:\n                css_rules.append(\"font-style: italic;\")\n            if style.underline:\n                css_rules.append(\"text-decoration: underline;\")\n            if style.strike:\n                css_rules.append(\"text-decoration: line-through;\")\n\n            css = \";\".join(css_rules)\n            style_cache[style] = css\n            return css\n\n        _theme = theme or SVG_EXPORT_THEME\n\n        width = self.width\n        char_height = 20\n        char_width = char_height * font_aspect_ratio\n        line_height = char_height * 1.22\n\n        margin_top = 1\n        margin_right = 1\n        margin_bottom = 1\n        margin_left = 1\n\n        padding_top = 40\n        padding_right = 8\n        padding_bottom = 8\n        padding_left = 8\n\n        padding_width = padding_left + padding_right\n        padding_height = padding_top + padding_bottom\n        margin_width = margin_left + margin_right\n        margin_height = margin_top + margin_bottom\n\n        text_backgrounds: List[str] = []\n        text_group: List[str] = []\n        classes: Dict[str, int] = {}\n        style_no = 1\n\n        def escape_text(text: str) -> str:\n            \"\"\"HTML escape text and replace spaces with nbsp.\"\"\"\n            return escape(text).replace(\" \", \"&#160;\")\n\n        def make_tag(\n            name: str, content: Optional[str] = None, **attribs: object\n        ) -> str:\n            \"\"\"Make a tag from name, content, and attributes.\"\"\"\n\n            def stringify(value: object) -> str:\n                if isinstance(value, (float)):\n                    return format(value, \"g\")\n                return str(value)\n\n            tag_attribs = \" \".join(\n                f'{k.lstrip(\"_\").replace(\"_\", \"-\")}=\"{stringify(v)}\"'\n                for k, v in attribs.items()\n            )\n            return (\n                f\"<{name} {tag_attribs}>{content}</{name}>\"\n                if content\n                else f\"<{name} {tag_attribs}/>\"\n            )\n\n        with self._record_buffer_lock:\n            segments = list(Segment.filter_control(self._record_buffer))\n            if clear:\n                self._record_buffer.clear()\n\n        if unique_id is None:\n            unique_id = \"terminal-\" + str(\n                zlib.adler32(\n                    (\"\".join(repr(segment) for segment in segments)).encode(\n                        \"utf-8\",\n                        \"ignore\",\n                    )\n                    + title.encode(\"utf-8\", \"ignore\")\n                )\n            )\n        y = 0\n        for y, line in enumerate(Segment.split_and_crop_lines(segments, length=width)):\n            x = 0\n            for text, style, _control in line:\n                style = style or Style()\n                rules = get_svg_style(style)\n                if rules not in classes:\n                    classes[rules] = style_no\n                    style_no += 1\n                class_name = f\"r{classes[rules]}\"\n\n                if style.reverse:\n                    has_background = True\n                    background = (\n                        _theme.foreground_color.hex\n                        if style.color is None\n                        else style.color.get_truecolor(_theme).hex\n                    )\n                else:\n                    bgcolor = style.bgcolor\n                    has_background = bgcolor is not None and not bgcolor.is_default\n                    background = (\n                        _theme.background_color.hex\n                        if style.bgcolor is None\n                        else style.bgcolor.get_truecolor(_theme).hex\n                    )\n\n                text_length = cell_len(text)\n                if has_background:\n                    text_backgrounds.append(\n                        make_tag(\n                            \"rect\",\n                            fill=background,\n                            x=x * char_width,\n                            y=y * line_height + 1.5,\n                            width=char_width * text_length,\n                            height=line_height + 0.25,\n                            shape_rendering=\"crispEdges\",\n                        )\n                    )\n\n                if text != \" \" * len(text):\n                    text_group.append(\n                        make_tag(\n                            \"text\",\n                            escape_text(text),\n                            _class=f\"{unique_id}-{class_name}\",\n                            x=x * char_width,\n                            y=y * line_height + char_height,\n                            textLength=char_width * len(text),\n                            clip_path=f\"url(#{unique_id}-line-{y})\",\n                        )\n                    )\n                x += cell_len(text)\n\n        line_offsets = [line_no * line_height + 1.5 for line_no in range(y)]\n        lines = \"\\n\".join(\n            f\"\"\"<clipPath id=\"{unique_id}-line-{line_no}\">\n    {make_tag(\"rect\", x=0, y=offset, width=char_width * width, height=line_height + 0.25)}\n            </clipPath>\"\"\"\n            for line_no, offset in enumerate(line_offsets)\n        )\n\n        styles = \"\\n\".join(\n            f\".{unique_id}-r{rule_no} {{ {css} }}\" for css, rule_no in classes.items()\n        )\n        backgrounds = \"\".join(text_backgrounds)\n        matrix = \"\".join(text_group)\n\n        terminal_width = ceil(width * char_width + padding_width)\n        terminal_height = (y + 1) * line_height + padding_height\n        chrome = make_tag(\n            \"rect\",\n            fill=_theme.background_color.hex,\n            stroke=\"rgba(255,255,255,0.35)\",\n            stroke_width=\"1\",\n            x=margin_left,\n            y=margin_top,\n            width=terminal_width,\n            height=terminal_height,\n            rx=8,\n        )\n\n        title_color = _theme.foreground_color.hex\n        if title:\n            chrome += make_tag(\n                \"text\",\n                escape_text(title),\n                _class=f\"{unique_id}-title\",\n                fill=title_color,\n                text_anchor=\"middle\",\n                x=terminal_width // 2,\n                y=margin_top + char_height + 6,\n            )\n        chrome += f\"\"\"\n            <g transform=\"translate(26,22)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff5f57\"/>\n            <circle cx=\"22\" cy=\"0\" r=\"7\" fill=\"#febc2e\"/>\n            <circle cx=\"44\" cy=\"0\" r=\"7\" fill=\"#28c840\"/>\n            </g>\n        \"\"\"\n\n        svg = code_format.format(\n            unique_id=unique_id,\n            char_width=char_width,\n            char_height=char_height,\n            line_height=line_height,\n            terminal_width=char_width * width - 1,\n            terminal_height=(y + 1) * line_height - 1,\n            width=terminal_width + margin_width,\n            height=terminal_height + margin_height,\n            terminal_x=margin_left + padding_left,\n            terminal_y=margin_top + padding_top,\n            styles=styles,\n            chrome=chrome,\n            backgrounds=backgrounds,\n            matrix=matrix,\n            lines=lines,\n        )\n        return svg\n\n    def save_svg(\n        self,\n        path: str,\n        *,\n        title: str = \"Rich\",\n        theme: Optional[TerminalTheme] = None,\n        clear: bool = True,\n        code_format: str = CONSOLE_SVG_FORMAT,\n        font_aspect_ratio: float = 0.61,\n        unique_id: Optional[str] = None,\n    ) -> None:\n        \"\"\"Generate an SVG file from the console contents (requires record=True in Console constructor).\n\n        Args:\n            path (str): The path to write the SVG to.\n            title (str, optional): The title of the tab in the output image\n            theme (TerminalTheme, optional): The ``TerminalTheme`` object to use to style the terminal\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``\n            code_format (str, optional): Format string used to generate the SVG. Rich will inject a number of variables\n                into the string in order to form the final SVG output. The default template used and the variables\n                injected by Rich can be found by inspecting the ``console.CONSOLE_SVG_FORMAT`` variable.\n            font_aspect_ratio (float, optional): The width to height ratio of the font used in the ``code_format``\n                string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font).\n                If you aren't specifying a different font inside ``code_format``, you probably don't need this.\n            unique_id (str, optional): unique id that is used as the prefix for various elements (CSS styles, node\n                ids). If not set, this defaults to a computed value based on the recorded content.\n        \"\"\"\n        svg = self.export_svg(\n            title=title,\n            theme=theme,\n            clear=clear,\n            code_format=code_format,\n            font_aspect_ratio=font_aspect_ratio,\n            unique_id=unique_id,\n        )\n        with open(path, \"wt\", encoding=\"utf-8\") as write_file:\n            write_file.write(svg)\n\n\ndef _svg_hash(svg_main_code: str) -> str:\n    \"\"\"Returns a unique hash for the given SVG main code.\n\n    Args:\n        svg_main_code (str): The content we're going to inject in the SVG envelope.\n\n    Returns:\n        str: a hash of the given content\n    \"\"\"\n    return str(zlib.adler32(svg_main_code.encode()))\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    console = Console(record=True)\n\n    console.log(\n        \"JSONRPC [i]request[/i]\",\n        5,\n        1.3,\n        True,\n        False,\n        None,\n        {\n            \"jsonrpc\": \"2.0\",\n            \"method\": \"subtract\",\n            \"params\": {\"minuend\": 42, \"subtrahend\": 23},\n            \"id\": 3,\n        },\n    )\n\n    console.log(\"Hello, World!\", \"{'a': 1}\", repr(console))\n\n    console.print(\n        {\n            \"name\": None,\n            \"empty\": [],\n            \"quiz\": {\n                \"sport\": {\n                    \"answered\": True,\n                    \"q1\": {\n                        \"question\": \"Which one is correct team name in NBA?\",\n                        \"options\": [\n                            \"New York Bulls\",\n                            \"Los Angeles Kings\",\n                            \"Golden State Warriors\",\n                            \"Huston Rocket\",\n                        ],\n                        \"answer\": \"Huston Rocket\",\n                    },\n                },\n                \"maths\": {\n                    \"answered\": False,\n                    \"q1\": {\n                        \"question\": \"5 + 7 = ?\",\n                        \"options\": [10, 11, 12, 13],\n                        \"answer\": 12,\n                    },\n                    \"q2\": {\n                        \"question\": \"12 - 8 = ?\",\n                        \"options\": [1, 2, 3, 4],\n                        \"answer\": 4,\n                    },\n                },\n            },\n        }\n    )\n", "rich/__init__.py": "\"\"\"Rich text and beautiful formatting in the terminal.\"\"\"\n\nimport os\nfrom typing import IO, TYPE_CHECKING, Any, Callable, Optional, Union\n\nfrom ._extension import load_ipython_extension  # noqa: F401\n\n__all__ = [\"get_console\", \"reconfigure\", \"print\", \"inspect\", \"print_json\"]\n\nif TYPE_CHECKING:\n    from .console import Console\n\n# Global console used by alternative print\n_console: Optional[\"Console\"] = None\n\ntry:\n    _IMPORT_CWD = os.path.abspath(os.getcwd())\nexcept FileNotFoundError:\n    # Can happen if the cwd has been deleted\n    _IMPORT_CWD = \"\"\n\n\ndef get_console() -> \"Console\":\n    \"\"\"Get a global :class:`~rich.console.Console` instance. This function is used when Rich requires a Console,\n    and hasn't been explicitly given one.\n\n    Returns:\n        Console: A console instance.\n    \"\"\"\n    global _console\n    if _console is None:\n        from .console import Console\n\n        _console = Console()\n\n    return _console\n\n\ndef reconfigure(*args: Any, **kwargs: Any) -> None:\n    \"\"\"Reconfigures the global console by replacing it with another.\n\n    Args:\n        *args (Any): Positional arguments for the replacement :class:`~rich.console.Console`.\n        **kwargs (Any): Keyword arguments for the replacement :class:`~rich.console.Console`.\n    \"\"\"\n    from rich.console import Console\n\n    new_console = Console(*args, **kwargs)\n    _console = get_console()\n    _console.__dict__ = new_console.__dict__\n\n\ndef print(\n    *objects: Any,\n    sep: str = \" \",\n    end: str = \"\\n\",\n    file: Optional[IO[str]] = None,\n    flush: bool = False,\n) -> None:\n    r\"\"\"Print object(s) supplied via positional arguments.\n    This function has an identical signature to the built-in print.\n    For more advanced features, see the :class:`~rich.console.Console` class.\n\n    Args:\n        sep (str, optional): Separator between printed objects. Defaults to \" \".\n        end (str, optional): Character to write at end of output. Defaults to \"\\\\n\".\n        file (IO[str], optional): File to write to, or None for stdout. Defaults to None.\n        flush (bool, optional): Has no effect as Rich always flushes output. Defaults to False.\n\n    \"\"\"\n    from .console import Console\n\n    write_console = get_console() if file is None else Console(file=file)\n    return write_console.print(*objects, sep=sep, end=end)\n\n\ndef print_json(\n    json: Optional[str] = None,\n    *,\n    data: Any = None,\n    indent: Union[None, int, str] = 2,\n    highlight: bool = True,\n    skip_keys: bool = False,\n    ensure_ascii: bool = False,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    default: Optional[Callable[[Any], Any]] = None,\n    sort_keys: bool = False,\n) -> None:\n    \"\"\"Pretty prints JSON. Output will be valid JSON.\n\n    Args:\n        json (str): A string containing JSON.\n        data (Any): If json is not supplied, then encode this data.\n        indent (int, optional): Number of spaces to indent. Defaults to 2.\n        highlight (bool, optional): Enable highlighting of output: Defaults to True.\n        skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n        ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n        check_circular (bool, optional): Check for circular references. Defaults to True.\n        allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n        default (Callable, optional): A callable that converts values that can not be encoded\n            in to something that can be JSON encoded. Defaults to None.\n        sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n    \"\"\"\n\n    get_console().print_json(\n        json,\n        data=data,\n        indent=indent,\n        highlight=highlight,\n        skip_keys=skip_keys,\n        ensure_ascii=ensure_ascii,\n        check_circular=check_circular,\n        allow_nan=allow_nan,\n        default=default,\n        sort_keys=sort_keys,\n    )\n\n\ndef inspect(\n    obj: Any,\n    *,\n    console: Optional[\"Console\"] = None,\n    title: Optional[str] = None,\n    help: bool = False,\n    methods: bool = False,\n    docs: bool = True,\n    private: bool = False,\n    dunder: bool = False,\n    sort: bool = True,\n    all: bool = False,\n    value: bool = True,\n) -> None:\n    \"\"\"Inspect any Python object.\n\n    * inspect(<OBJECT>) to see summarized info.\n    * inspect(<OBJECT>, methods=True) to see methods.\n    * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.\n    * inspect(<OBJECT>, private=True) to see private attributes (single underscore).\n    * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.\n    * inspect(<OBJECT>, all=True) to see all attributes.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value. Defaults to True.\n    \"\"\"\n    _console = console or get_console()\n    from rich._inspect import Inspect\n\n    # Special case for inspect(inspect)\n    is_inspect = obj is inspect\n\n    _inspect = Inspect(\n        obj,\n        title=title,\n        help=is_inspect or help,\n        methods=is_inspect or methods,\n        docs=is_inspect or docs,\n        private=private,\n        dunder=dunder,\n        sort=sort,\n        all=all,\n        value=value,\n    )\n    _console.print(_inspect)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    print(\"Hello, **World**\")\n", "rich/_ratio.py": "import sys\nfrom fractions import Fraction\nfrom math import ceil\nfrom typing import cast, List, Optional, Sequence\n\nif sys.version_info >= (3, 8):\n    from typing import Protocol\nelse:\n    from typing_extensions import Protocol  # pragma: no cover\n\n\nclass Edge(Protocol):\n    \"\"\"Any object that defines an edge (such as Layout).\"\"\"\n\n    size: Optional[int] = None\n    ratio: int = 1\n    minimum_size: int = 1\n\n\ndef ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:\n    \"\"\"Divide total space to satisfy size, ratio, and minimum_size, constraints.\n\n    The returned list of integers should add up to total in most cases, unless it is\n    impossible to satisfy all the constraints. For instance, if there are two edges\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\n    greater than total. In practice, this would mean that a Layout object would\n    clip the rows that would overflow the screen height.\n\n    Args:\n        total (int): Total number of characters.\n        edges (List[Edge]): Edges within total space.\n\n    Returns:\n        List[int]: Number of characters for each edge.\n    \"\"\"\n    # Size of edge or None for yet to be determined\n    sizes = [(edge.size or None) for edge in edges]\n\n    _Fraction = Fraction\n\n    # While any edges haven't been calculated\n    while None in sizes:\n        # Get flexible edges and index to map these back on to sizes list\n        flexible_edges = [\n            (index, edge)\n            for index, (size, edge) in enumerate(zip(sizes, edges))\n            if size is None\n        ]\n        # Remaining space in total\n        remaining = total - sum(size or 0 for size in sizes)\n        if remaining <= 0:\n            # No room for flexible edges\n            return [\n                ((edge.minimum_size or 1) if size is None else size)\n                for size, edge in zip(sizes, edges)\n            ]\n        # Calculate number of characters in a ratio portion\n        portion = _Fraction(\n            remaining, sum((edge.ratio or 1) for _, edge in flexible_edges)\n        )\n\n        # If any edges will be less than their minimum, replace size with the minimum\n        for index, edge in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                # New fixed size will invalidate calculations, so we need to repeat the process\n                break\n        else:\n            # Distribute flexible space and compensate for rounding error\n            # Since edge sizes can only be integers we need to add the remainder\n            # to the following line\n            remainder = _Fraction(0)\n            for index, edge in flexible_edges:\n                size, remainder = divmod(portion * edge.ratio + remainder, 1)\n                sizes[index] = size\n            break\n    # Sizes now contains integers only\n    return cast(List[int], sizes)\n\n\ndef ratio_reduce(\n    total: int, ratios: List[int], maximums: List[int], values: List[int]\n) -> List[int]:\n    \"\"\"Divide an integer total in to parts based on ratios.\n\n    Args:\n        total (int): The total to divide.\n        ratios (List[int]): A list of integer ratios.\n        maximums (List[int]): List of maximums values for each slot.\n        values (List[int]): List of values\n\n    Returns:\n        List[int]: A list of integers guaranteed to sum to total.\n    \"\"\"\n    ratios = [ratio if _max else 0 for ratio, _max in zip(ratios, maximums)]\n    total_ratio = sum(ratios)\n    if not total_ratio:\n        return values[:]\n    total_remaining = total\n    result: List[int] = []\n    append = result.append\n    for ratio, maximum, value in zip(ratios, maximums, values):\n        if ratio and total_ratio > 0:\n            distributed = min(maximum, round(ratio * total_remaining / total_ratio))\n            append(value - distributed)\n            total_remaining -= distributed\n            total_ratio -= ratio\n        else:\n            append(value)\n    return result\n\n\ndef ratio_distribute(\n    total: int, ratios: List[int], minimums: Optional[List[int]] = None\n) -> List[int]:\n    \"\"\"Distribute an integer total in to parts based on ratios.\n\n    Args:\n        total (int): The total to divide.\n        ratios (List[int]): A list of integer ratios.\n        minimums (List[int]): List of minimum values for each slot.\n\n    Returns:\n        List[int]: A list of integers guaranteed to sum to total.\n    \"\"\"\n    if minimums:\n        ratios = [ratio if _min else 0 for ratio, _min in zip(ratios, minimums)]\n    total_ratio = sum(ratios)\n    assert total_ratio > 0, \"Sum of ratios must be > 0\"\n\n    total_remaining = total\n    distributed_total: List[int] = []\n    append = distributed_total.append\n    if minimums is None:\n        _minimums = [0] * len(ratios)\n    else:\n        _minimums = minimums\n    for ratio, minimum in zip(ratios, _minimums):\n        if total_ratio > 0:\n            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))\n        else:\n            distributed = total_remaining\n        append(distributed)\n        total_ratio -= ratio\n        total_remaining -= distributed\n    return distributed_total\n\n\nif __name__ == \"__main__\":\n    from dataclasses import dataclass\n\n    @dataclass\n    class E:\n        size: Optional[int] = None\n        ratio: int = 1\n        minimum_size: int = 1\n\n    resolved = ratio_resolve(110, [E(None, 1, 1), E(None, 1, 1), E(None, 1, 1)])\n    print(sum(resolved))\n", "rich/jupyter.py": "from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Sequence\n\nif TYPE_CHECKING:\n    from rich.console import ConsoleRenderable\n\nfrom . import get_console\nfrom .segment import Segment\nfrom .terminal_theme import DEFAULT_TERMINAL_THEME\n\nif TYPE_CHECKING:\n    from rich.console import ConsoleRenderable\n\nJUPYTER_HTML_FORMAT = \"\"\"\\\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">{code}</pre>\n\"\"\"\n\n\nclass JupyterRenderable:\n    \"\"\"A shim to write html to Jupyter notebook.\"\"\"\n\n    def __init__(self, html: str, text: str) -> None:\n        self.html = html\n        self.text = text\n\n    def _repr_mimebundle_(\n        self, include: Sequence[str], exclude: Sequence[str], **kwargs: Any\n    ) -> Dict[str, str]:\n        data = {\"text/plain\": self.text, \"text/html\": self.html}\n        if include:\n            data = {k: v for (k, v) in data.items() if k in include}\n        if exclude:\n            data = {k: v for (k, v) in data.items() if k not in exclude}\n        return data\n\n\nclass JupyterMixin:\n    \"\"\"Add to an Rich renderable to make it render in Jupyter notebook.\"\"\"\n\n    __slots__ = ()\n\n    def _repr_mimebundle_(\n        self: \"ConsoleRenderable\",\n        include: Sequence[str],\n        exclude: Sequence[str],\n        **kwargs: Any,\n    ) -> Dict[str, str]:\n        console = get_console()\n        segments = list(console.render(self, console.options))\n        html = _render_segments(segments)\n        text = console._render_buffer(segments)\n        data = {\"text/plain\": text, \"text/html\": html}\n        if include:\n            data = {k: v for (k, v) in data.items() if k in include}\n        if exclude:\n            data = {k: v for (k, v) in data.items() if k not in exclude}\n        return data\n\n\ndef _render_segments(segments: Iterable[Segment]) -> str:\n    def escape(text: str) -> str:\n        \"\"\"Escape html.\"\"\"\n        return text.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n\n    fragments: List[str] = []\n    append_fragment = fragments.append\n    theme = DEFAULT_TERMINAL_THEME\n    for text, style, control in Segment.simplify(segments):\n        if control:\n            continue\n        text = escape(text)\n        if style:\n            rule = style.get_html_style(theme)\n            text = f'<span style=\"{rule}\">{text}</span>' if rule else text\n            if style.link:\n                text = f'<a href=\"{style.link}\" target=\"_blank\">{text}</a>'\n        append_fragment(text)\n\n    code = \"\".join(fragments)\n    html = JUPYTER_HTML_FORMAT.format(code=code)\n\n    return html\n\n\ndef display(segments: Iterable[Segment], text: str) -> None:\n    \"\"\"Render segments to Jupyter.\"\"\"\n    html = _render_segments(segments)\n    jupyter_renderable = JupyterRenderable(html, text)\n    try:\n        from IPython.display import display as ipython_display\n\n        ipython_display(jupyter_renderable)\n    except ModuleNotFoundError:\n        # Handle the case where the Console has force_jupyter=True,\n        # but IPython is not installed.\n        pass\n\n\ndef print(*args: Any, **kwargs: Any) -> None:\n    \"\"\"Proxy for Console print.\"\"\"\n    console = get_console()\n    return console.print(*args, **kwargs)\n", "rich/text.py": "import re\nfrom functools import partial, reduce\nfrom math import gcd\nfrom operator import itemgetter\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Tuple,\n    Union,\n)\n\nfrom ._loop import loop_last\nfrom ._pick import pick_bool\nfrom ._wrap import divide_line\nfrom .align import AlignMethod\nfrom .cells import cell_len, set_cell_size\nfrom .containers import Lines\nfrom .control import strip_control_codes\nfrom .emoji import EmojiVariant\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .segment import Segment\nfrom .style import Style, StyleType\n\nif TYPE_CHECKING:  # pragma: no cover\n    from .console import Console, ConsoleOptions, JustifyMethod, OverflowMethod\n\nDEFAULT_JUSTIFY: \"JustifyMethod\" = \"default\"\nDEFAULT_OVERFLOW: \"OverflowMethod\" = \"fold\"\n\n\n_re_whitespace = re.compile(r\"\\s+$\")\n\nTextType = Union[str, \"Text\"]\n\"\"\"A plain string or a :class:`Text` instance.\"\"\"\n\nGetStyleCallable = Callable[[str], Optional[StyleType]]\n\n\nclass Span(NamedTuple):\n    \"\"\"A marked up region in some text.\"\"\"\n\n    start: int\n    \"\"\"Span start index.\"\"\"\n    end: int\n    \"\"\"Span end index.\"\"\"\n    style: Union[str, Style]\n    \"\"\"Style associated with the span.\"\"\"\n\n    def __repr__(self) -> str:\n        return f\"Span({self.start}, {self.end}, {self.style!r})\"\n\n    def __bool__(self) -> bool:\n        return self.end > self.start\n\n    def split(self, offset: int) -> Tuple[\"Span\", Optional[\"Span\"]]:\n        \"\"\"Split a span in to 2 from a given offset.\"\"\"\n\n        if offset < self.start:\n            return self, None\n        if offset >= self.end:\n            return self, None\n\n        start, end, style = self\n        span1 = Span(start, min(end, offset), style)\n        span2 = Span(span1.end, end, style)\n        return span1, span2\n\n    def move(self, offset: int) -> \"Span\":\n        \"\"\"Move start and end by a given offset.\n\n        Args:\n            offset (int): Number of characters to add to start and end.\n\n        Returns:\n            TextSpan: A new TextSpan with adjusted position.\n        \"\"\"\n        start, end, style = self\n        return Span(start + offset, end + offset, style)\n\n    def right_crop(self, offset: int) -> \"Span\":\n        \"\"\"Crop the span at the given offset.\n\n        Args:\n            offset (int): A value between start and end.\n\n        Returns:\n            Span: A new (possibly smaller) span.\n        \"\"\"\n        start, end, style = self\n        if offset >= end:\n            return self\n        return Span(start, min(offset, end), style)\n\n    def extend(self, cells: int) -> \"Span\":\n        \"\"\"Extend the span by the given number of cells.\n\n        Args:\n            cells (int): Additional space to add to end of span.\n\n        Returns:\n            Span: A span.\n        \"\"\"\n        if cells:\n            start, end, style = self\n            return Span(start, end + cells, style)\n        else:\n            return self\n\n\nclass Text(JupyterMixin):\n    \"\"\"Text with color / style.\n\n    Args:\n        text (str, optional): Default unstyled text. Defaults to \"\".\n        style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n        justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n        overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n        no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.\n        end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n        tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to None.\n        spans (List[Span], optional). A list of predefined style spans. Defaults to None.\n    \"\"\"\n\n    __slots__ = [\n        \"_text\",\n        \"style\",\n        \"justify\",\n        \"overflow\",\n        \"no_wrap\",\n        \"end\",\n        \"tab_size\",\n        \"_spans\",\n        \"_length\",\n    ]\n\n    def __init__(\n        self,\n        text: str = \"\",\n        style: Union[str, Style] = \"\",\n        *,\n        justify: Optional[\"JustifyMethod\"] = None,\n        overflow: Optional[\"OverflowMethod\"] = None,\n        no_wrap: Optional[bool] = None,\n        end: str = \"\\n\",\n        tab_size: Optional[int] = None,\n        spans: Optional[List[Span]] = None,\n    ) -> None:\n        sanitized_text = strip_control_codes(text)\n        self._text = [sanitized_text]\n        self.style = style\n        self.justify: Optional[\"JustifyMethod\"] = justify\n        self.overflow: Optional[\"OverflowMethod\"] = overflow\n        self.no_wrap = no_wrap\n        self.end = end\n        self.tab_size = tab_size\n        self._spans: List[Span] = spans or []\n        self._length: int = len(sanitized_text)\n\n    def __len__(self) -> int:\n        return self._length\n\n    def __bool__(self) -> bool:\n        return bool(self._length)\n\n    def __str__(self) -> str:\n        return self.plain\n\n    def __repr__(self) -> str:\n        return f\"<text {self.plain!r} {self._spans!r}>\"\n\n    def __add__(self, other: Any) -> \"Text\":\n        if isinstance(other, (str, Text)):\n            result = self.copy()\n            result.append(other)\n            return result\n        return NotImplemented\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Text):\n            return NotImplemented\n        return self.plain == other.plain and self._spans == other._spans\n\n    def __contains__(self, other: object) -> bool:\n        if isinstance(other, str):\n            return other in self.plain\n        elif isinstance(other, Text):\n            return other.plain in self.plain\n        return False\n\n    def __getitem__(self, slice: Union[int, slice]) -> \"Text\":\n        def get_text_at(offset: int) -> \"Text\":\n            _Span = Span\n            text = Text(\n                self.plain[offset],\n                spans=[\n                    _Span(0, 1, style)\n                    for start, end, style in self._spans\n                    if end > offset >= start\n                ],\n                end=\"\",\n            )\n            return text\n\n        if isinstance(slice, int):\n            return get_text_at(slice)\n        else:\n            start, stop, step = slice.indices(len(self.plain))\n            if step == 1:\n                lines = self.divide([start, stop])\n                return lines[1]\n            else:\n                # This would be a bit of work to implement efficiently\n                # For now, its not required\n                raise TypeError(\"slices with step!=1 are not supported\")\n\n    @property\n    def cell_len(self) -> int:\n        \"\"\"Get the number of cells required to render this text.\"\"\"\n        return cell_len(self.plain)\n\n    @property\n    def markup(self) -> str:\n        \"\"\"Get console markup to render this Text.\n\n        Returns:\n            str: A string potentially creating markup tags.\n        \"\"\"\n        from .markup import escape\n\n        output: List[str] = []\n\n        plain = self.plain\n        markup_spans = [\n            (0, False, self.style),\n            *((span.start, False, span.style) for span in self._spans),\n            *((span.end, True, span.style) for span in self._spans),\n            (len(plain), True, self.style),\n        ]\n        markup_spans.sort(key=itemgetter(0, 1))\n        position = 0\n        append = output.append\n        for offset, closing, style in markup_spans:\n            if offset > position:\n                append(escape(plain[position:offset]))\n                position = offset\n            if style:\n                append(f\"[/{style}]\" if closing else f\"[{style}]\")\n        markup = \"\".join(output)\n        return markup\n\n    @classmethod\n    def from_markup(\n        cls,\n        text: str,\n        *,\n        style: Union[str, Style] = \"\",\n        emoji: bool = True,\n        emoji_variant: Optional[EmojiVariant] = None,\n        justify: Optional[\"JustifyMethod\"] = None,\n        overflow: Optional[\"OverflowMethod\"] = None,\n        end: str = \"\\n\",\n    ) -> \"Text\":\n        \"\"\"Create Text instance from markup.\n\n        Args:\n            text (str): A string containing console markup.\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            emoji (bool, optional): Also render emoji code. Defaults to True.\n            emoji_variant (str, optional): Optional emoji variant, either \"text\" or \"emoji\". Defaults to None.\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n\n        Returns:\n            Text: A Text instance with markup rendered.\n        \"\"\"\n        from .markup import render\n\n        rendered_text = render(text, style, emoji=emoji, emoji_variant=emoji_variant)\n        rendered_text.justify = justify\n        rendered_text.overflow = overflow\n        rendered_text.end = end\n        return rendered_text\n\n    @classmethod\n    def from_ansi(\n        cls,\n        text: str,\n        *,\n        style: Union[str, Style] = \"\",\n        justify: Optional[\"JustifyMethod\"] = None,\n        overflow: Optional[\"OverflowMethod\"] = None,\n        no_wrap: Optional[bool] = None,\n        end: str = \"\\n\",\n        tab_size: Optional[int] = 8,\n    ) -> \"Text\":\n        \"\"\"Create a Text object from a string containing ANSI escape codes.\n\n        Args:\n            text (str): A string containing escape codes.\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n            tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to None.\n        \"\"\"\n        from .ansi import AnsiDecoder\n\n        joiner = Text(\n            \"\\n\",\n            justify=justify,\n            overflow=overflow,\n            no_wrap=no_wrap,\n            end=end,\n            tab_size=tab_size,\n            style=style,\n        )\n        decoder = AnsiDecoder()\n        result = joiner.join(line for line in decoder.decode(text))\n        return result\n\n    @classmethod\n    def styled(\n        cls,\n        text: str,\n        style: StyleType = \"\",\n        *,\n        justify: Optional[\"JustifyMethod\"] = None,\n        overflow: Optional[\"OverflowMethod\"] = None,\n    ) -> \"Text\":\n        \"\"\"Construct a Text instance with a pre-applied styled. A style applied in this way won't be used\n        to pad the text when it is justified.\n\n        Args:\n            text (str): A string containing console markup.\n            style (Union[str, Style]): Style to apply to the text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n\n        Returns:\n            Text: A text instance with a style applied to the entire string.\n        \"\"\"\n        styled_text = cls(text, justify=justify, overflow=overflow)\n        styled_text.stylize(style)\n        return styled_text\n\n    @classmethod\n    def assemble(\n        cls,\n        *parts: Union[str, \"Text\", Tuple[str, StyleType]],\n        style: Union[str, Style] = \"\",\n        justify: Optional[\"JustifyMethod\"] = None,\n        overflow: Optional[\"OverflowMethod\"] = None,\n        no_wrap: Optional[bool] = None,\n        end: str = \"\\n\",\n        tab_size: int = 8,\n        meta: Optional[Dict[str, Any]] = None,\n    ) -> \"Text\":\n        \"\"\"Construct a text instance by combining a sequence of strings with optional styles.\n        The positional arguments should be either strings, or a tuple of string + style.\n\n        Args:\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n            tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to None.\n            meta (Dict[str, Any], optional). Meta data to apply to text, or None for no meta data. Default to None\n\n        Returns:\n            Text: A new text instance.\n        \"\"\"\n        text = cls(\n            style=style,\n            justify=justify,\n            overflow=overflow,\n            no_wrap=no_wrap,\n            end=end,\n            tab_size=tab_size,\n        )\n        append = text.append\n        _Text = Text\n        for part in parts:\n            if isinstance(part, (_Text, str)):\n                append(part)\n            else:\n                append(*part)\n        if meta:\n            text.apply_meta(meta)\n        return text\n\n    @property\n    def plain(self) -> str:\n        \"\"\"Get the text as a single string.\"\"\"\n        if len(self._text) != 1:\n            self._text[:] = [\"\".join(self._text)]\n        return self._text[0]\n\n    @plain.setter\n    def plain(self, new_text: str) -> None:\n        \"\"\"Set the text to a new value.\"\"\"\n        if new_text != self.plain:\n            sanitized_text = strip_control_codes(new_text)\n            self._text[:] = [sanitized_text]\n            old_length = self._length\n            self._length = len(sanitized_text)\n            if old_length > self._length:\n                self._trim_spans()\n\n    @property\n    def spans(self) -> List[Span]:\n        \"\"\"Get a reference to the internal list of spans.\"\"\"\n        return self._spans\n\n    @spans.setter\n    def spans(self, spans: List[Span]) -> None:\n        \"\"\"Set spans.\"\"\"\n        self._spans = spans[:]\n\n    def blank_copy(self, plain: str = \"\") -> \"Text\":\n        \"\"\"Return a new Text instance with copied metadata (but not the string or spans).\"\"\"\n        copy_self = Text(\n            plain,\n            style=self.style,\n            justify=self.justify,\n            overflow=self.overflow,\n            no_wrap=self.no_wrap,\n            end=self.end,\n            tab_size=self.tab_size,\n        )\n        return copy_self\n\n    def copy(self) -> \"Text\":\n        \"\"\"Return a copy of this instance.\"\"\"\n        copy_self = Text(\n            self.plain,\n            style=self.style,\n            justify=self.justify,\n            overflow=self.overflow,\n            no_wrap=self.no_wrap,\n            end=self.end,\n            tab_size=self.tab_size,\n        )\n        copy_self._spans[:] = self._spans\n        return copy_self\n\n    def stylize(\n        self,\n        style: Union[str, Style],\n        start: int = 0,\n        end: Optional[int] = None,\n    ) -> None:\n        \"\"\"Apply a style to the text, or a portion of the text.\n\n        Args:\n            style (Union[str, Style]): Style instance or style definition to apply.\n            start (int): Start offset (negative indexing is supported). Defaults to 0.\n            end (Optional[int], optional): End offset (negative indexing is supported), or None for end of text. Defaults to None.\n        \"\"\"\n        if style:\n            length = len(self)\n            if start < 0:\n                start = length + start\n            if end is None:\n                end = length\n            if end < 0:\n                end = length + end\n            if start >= length or end <= start:\n                # Span not in text or not valid\n                return\n            self._spans.append(Span(start, min(length, end), style))\n\n    def stylize_before(\n        self,\n        style: Union[str, Style],\n        start: int = 0,\n        end: Optional[int] = None,\n    ) -> None:\n        \"\"\"Apply a style to the text, or a portion of the text. Styles will be applied before other styles already present.\n\n        Args:\n            style (Union[str, Style]): Style instance or style definition to apply.\n            start (int): Start offset (negative indexing is supported). Defaults to 0.\n            end (Optional[int], optional): End offset (negative indexing is supported), or None for end of text. Defaults to None.\n        \"\"\"\n        if style:\n            length = len(self)\n            if start < 0:\n                start = length + start\n            if end is None:\n                end = length\n            if end < 0:\n                end = length + end\n            if start >= length or end <= start:\n                # Span not in text or not valid\n                return\n            self._spans.insert(0, Span(start, min(length, end), style))\n\n    def apply_meta(\n        self, meta: Dict[str, Any], start: int = 0, end: Optional[int] = None\n    ) -> None:\n        \"\"\"Apply metadata to the text, or a portion of the text.\n\n        Args:\n            meta (Dict[str, Any]): A dict of meta information.\n            start (int): Start offset (negative indexing is supported). Defaults to 0.\n            end (Optional[int], optional): End offset (negative indexing is supported), or None for end of text. Defaults to None.\n\n        \"\"\"\n        style = Style.from_meta(meta)\n        self.stylize(style, start=start, end=end)\n\n    def on(self, meta: Optional[Dict[str, Any]] = None, **handlers: Any) -> \"Text\":\n        \"\"\"Apply event handlers (used by Textual project).\n\n        Example:\n            >>> from rich.text import Text\n            >>> text = Text(\"hello world\")\n            >>> text.on(click=\"view.toggle('world')\")\n\n        Args:\n            meta (Dict[str, Any]): Mapping of meta information.\n            **handlers: Keyword args are prefixed with \"@\" to defined handlers.\n\n        Returns:\n            Text: Self is returned to method may be chained.\n        \"\"\"\n        meta = {} if meta is None else meta\n        meta.update({f\"@{key}\": value for key, value in handlers.items()})\n        self.stylize(Style.from_meta(meta))\n        return self\n\n    def remove_suffix(self, suffix: str) -> None:\n        \"\"\"Remove a suffix if it exists.\n\n        Args:\n            suffix (str): Suffix to remove.\n        \"\"\"\n        if self.plain.endswith(suffix):\n            self.right_crop(len(suffix))\n\n    def get_style_at_offset(self, console: \"Console\", offset: int) -> Style:\n        \"\"\"Get the style of a character at give offset.\n\n        Args:\n            console (~Console): Console where text will be rendered.\n            offset (int): Offset in to text (negative indexing supported)\n\n        Returns:\n            Style: A Style instance.\n        \"\"\"\n        # TODO: This is a little inefficient, it is only used by full justify\n        if offset < 0:\n            offset = len(self) + offset\n        get_style = console.get_style\n        style = get_style(self.style).copy()\n        for start, end, span_style in self._spans:\n            if end > offset >= start:\n                style += get_style(span_style, default=\"\")\n        return style\n\n    def extend_style(self, spaces: int) -> None:\n        \"\"\"Extend the Text given number of spaces where the spaces have the same style as the last character.\n\n        Args:\n            spaces (int): Number of spaces to add to the Text.\n        \"\"\"\n        if spaces <= 0:\n            return\n        spans = self.spans\n        new_spaces = \" \" * spaces\n        if spans:\n            end_offset = len(self)\n            self._spans[:] = [\n                span.extend(spaces) if span.end >= end_offset else span\n                for span in spans\n            ]\n            self._text.append(new_spaces)\n            self._length += spaces\n        else:\n            self.plain += new_spaces\n\n    def highlight_regex(\n        self,\n        re_highlight: str,\n        style: Optional[Union[GetStyleCallable, StyleType]] = None,\n        *,\n        style_prefix: str = \"\",\n    ) -> int:\n        \"\"\"Highlight text with a regular expression, where group names are\n        translated to styles.\n\n        Args:\n            re_highlight (str): A regular expression.\n            style (Union[GetStyleCallable, StyleType]): Optional style to apply to whole match, or a callable\n                which accepts the matched text and returns a style. Defaults to None.\n            style_prefix (str, optional): Optional prefix to add to style group names.\n\n        Returns:\n            int: Number of regex matches\n        \"\"\"\n        count = 0\n        append_span = self._spans.append\n        _Span = Span\n        plain = self.plain\n        for match in re.finditer(re_highlight, plain):\n            get_span = match.span\n            if style:\n                start, end = get_span()\n                match_style = style(plain[start:end]) if callable(style) else style\n                if match_style is not None and end > start:\n                    append_span(_Span(start, end, match_style))\n\n            count += 1\n            for name in match.groupdict().keys():\n                start, end = get_span(name)\n                if start != -1 and end > start:\n                    append_span(_Span(start, end, f\"{style_prefix}{name}\"))\n        return count\n\n    def highlight_words(\n        self,\n        words: Iterable[str],\n        style: Union[str, Style],\n        *,\n        case_sensitive: bool = True,\n    ) -> int:\n        \"\"\"Highlight words with a style.\n\n        Args:\n            words (Iterable[str]): Words to highlight.\n            style (Union[str, Style]): Style to apply.\n            case_sensitive (bool, optional): Enable case sensitive matching. Defaults to True.\n\n        Returns:\n            int: Number of words highlighted.\n        \"\"\"\n        re_words = \"|\".join(re.escape(word) for word in words)\n        add_span = self._spans.append\n        count = 0\n        _Span = Span\n        for match in re.finditer(\n            re_words, self.plain, flags=0 if case_sensitive else re.IGNORECASE\n        ):\n            start, end = match.span(0)\n            add_span(_Span(start, end, style))\n            count += 1\n        return count\n\n    def rstrip(self) -> None:\n        \"\"\"Strip whitespace from end of text.\"\"\"\n        self.plain = self.plain.rstrip()\n\n    def rstrip_end(self, size: int) -> None:\n        \"\"\"Remove whitespace beyond a certain width at the end of the text.\n\n        Args:\n            size (int): The desired size of the text.\n        \"\"\"\n        text_length = len(self)\n        if text_length > size:\n            excess = text_length - size\n            whitespace_match = _re_whitespace.search(self.plain)\n            if whitespace_match is not None:\n                whitespace_count = len(whitespace_match.group(0))\n                self.right_crop(min(whitespace_count, excess))\n\n    def set_length(self, new_length: int) -> None:\n        \"\"\"Set new length of the text, clipping or padding is required.\"\"\"\n        length = len(self)\n        if length != new_length:\n            if length < new_length:\n                self.pad_right(new_length - length)\n            else:\n                self.right_crop(length - new_length)\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Iterable[Segment]:\n        tab_size: int = console.tab_size if self.tab_size is None else self.tab_size\n        justify = self.justify or options.justify or DEFAULT_JUSTIFY\n\n        overflow = self.overflow or options.overflow or DEFAULT_OVERFLOW\n\n        lines = self.wrap(\n            console,\n            options.max_width,\n            justify=justify,\n            overflow=overflow,\n            tab_size=tab_size or 8,\n            no_wrap=pick_bool(self.no_wrap, options.no_wrap, False),\n        )\n        all_lines = Text(\"\\n\").join(lines)\n        yield from all_lines.render(console, end=self.end)\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> Measurement:\n        text = self.plain\n        lines = text.splitlines()\n        max_text_width = max(cell_len(line) for line in lines) if lines else 0\n        words = text.split()\n        min_text_width = (\n            max(cell_len(word) for word in words) if words else max_text_width\n        )\n        return Measurement(min_text_width, max_text_width)\n\n    def render(self, console: \"Console\", end: str = \"\") -> Iterable[\"Segment\"]:\n        \"\"\"Render the text as Segments.\n\n        Args:\n            console (Console): Console instance.\n            end (Optional[str], optional): Optional end character.\n\n        Returns:\n            Iterable[Segment]: Result of render that may be written to the console.\n        \"\"\"\n        _Segment = Segment\n        text = self.plain\n        if not self._spans:\n            yield Segment(text)\n            if end:\n                yield _Segment(end)\n            return\n        get_style = partial(console.get_style, default=Style.null())\n\n        enumerated_spans = list(enumerate(self._spans, 1))\n        style_map = {index: get_style(span.style) for index, span in enumerated_spans}\n        style_map[0] = get_style(self.style)\n\n        spans = [\n            (0, False, 0),\n            *((span.start, False, index) for index, span in enumerated_spans),\n            *((span.end, True, index) for index, span in enumerated_spans),\n            (len(text), True, 0),\n        ]\n        spans.sort(key=itemgetter(0, 1))\n\n        stack: List[int] = []\n        stack_append = stack.append\n        stack_pop = stack.remove\n\n        style_cache: Dict[Tuple[Style, ...], Style] = {}\n        style_cache_get = style_cache.get\n        combine = Style.combine\n\n        def get_current_style() -> Style:\n            \"\"\"Construct current style from stack.\"\"\"\n            styles = tuple(style_map[_style_id] for _style_id in sorted(stack))\n            cached_style = style_cache_get(styles)\n            if cached_style is not None:\n                return cached_style\n            current_style = combine(styles)\n            style_cache[styles] = current_style\n            return current_style\n\n        for (offset, leaving, style_id), (next_offset, _, _) in zip(spans, spans[1:]):\n            if leaving:\n                stack_pop(style_id)\n            else:\n                stack_append(style_id)\n            if next_offset > offset:\n                yield _Segment(text[offset:next_offset], get_current_style())\n        if end:\n            yield _Segment(end)\n\n    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n    def expand_tabs(self, tab_size: Optional[int] = None) -> None:\n        \"\"\"Converts tabs to spaces.\n\n        Args:\n            tab_size (int, optional): Size of tabs. Defaults to 8.\n\n        \"\"\"\n        if \"\\t\" not in self.plain:\n            return\n        if tab_size is None:\n            tab_size = self.tab_size\n        if tab_size is None:\n            tab_size = 8\n\n        new_text: List[Text] = []\n        append = new_text.append\n\n        for line in self.split(\"\\n\", include_separator=True):\n            if \"\\t\" not in line.plain:\n                append(line)\n            else:\n                cell_position = 0\n                parts = line.split(\"\\t\", include_separator=True)\n                for part in parts:\n                    if part.plain.endswith(\"\\t\"):\n                        part._text[-1] = part._text[-1][:-1] + \" \"\n                        cell_position += part.cell_len\n                        tab_remainder = cell_position % tab_size\n                        if tab_remainder:\n                            spaces = tab_size - tab_remainder\n                            part.extend_style(spaces)\n                            cell_position += spaces\n                    else:\n                        cell_position += part.cell_len\n                    append(part)\n\n        result = Text(\"\").join(new_text)\n\n        self._text = [result.plain]\n        self._length = len(self.plain)\n        self._spans[:] = result._spans\n\n    def truncate(\n        self,\n        max_width: int,\n        *,\n        overflow: Optional[\"OverflowMethod\"] = None,\n        pad: bool = False,\n    ) -> None:\n        \"\"\"Truncate text if it is longer that a given width.\n\n        Args:\n            max_width (int): Maximum number of characters in text.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to None, to use self.overflow.\n            pad (bool, optional): Pad with spaces if the length is less than max_width. Defaults to False.\n        \"\"\"\n        _overflow = overflow or self.overflow or DEFAULT_OVERFLOW\n        if _overflow != \"ignore\":\n            length = cell_len(self.plain)\n            if length > max_width:\n                if _overflow == \"ellipsis\":\n                    self.plain = set_cell_size(self.plain, max_width - 1) + \"\u2026\"\n                else:\n                    self.plain = set_cell_size(self.plain, max_width)\n            if pad and length < max_width:\n                spaces = max_width - length\n                self._text = [f\"{self.plain}{' ' * spaces}\"]\n                self._length = len(self.plain)\n\n    def _trim_spans(self) -> None:\n        \"\"\"Remove or modify any spans that are over the end of the text.\"\"\"\n        max_offset = len(self.plain)\n        _Span = Span\n        self._spans[:] = [\n            (\n                span\n                if span.end < max_offset\n                else _Span(span.start, min(max_offset, span.end), span.style)\n            )\n            for span in self._spans\n            if span.start < max_offset\n        ]\n\n    def pad(self, count: int, character: str = \" \") -> None:\n        \"\"\"Pad left and right with a given number of characters.\n\n        Args:\n            count (int): Width of padding.\n            character (str): The character to pad with. Must be a string of length 1.\n        \"\"\"\n        assert len(character) == 1, \"Character must be a string of length 1\"\n        if count:\n            pad_characters = character * count\n            self.plain = f\"{pad_characters}{self.plain}{pad_characters}\"\n            _Span = Span\n            self._spans[:] = [\n                _Span(start + count, end + count, style)\n                for start, end, style in self._spans\n            ]\n\n    def pad_left(self, count: int, character: str = \" \") -> None:\n        \"\"\"Pad the left with a given character.\n\n        Args:\n            count (int): Number of characters to pad.\n            character (str, optional): Character to pad with. Defaults to \" \".\n        \"\"\"\n        assert len(character) == 1, \"Character must be a string of length 1\"\n        if count:\n            self.plain = f\"{character * count}{self.plain}\"\n            _Span = Span\n            self._spans[:] = [\n                _Span(start + count, end + count, style)\n                for start, end, style in self._spans\n            ]\n\n    def pad_right(self, count: int, character: str = \" \") -> None:\n        \"\"\"Pad the right with a given character.\n\n        Args:\n            count (int): Number of characters to pad.\n            character (str, optional): Character to pad with. Defaults to \" \".\n        \"\"\"\n        assert len(character) == 1, \"Character must be a string of length 1\"\n        if count:\n            self.plain = f\"{self.plain}{character * count}\"\n\n    def align(self, align: AlignMethod, width: int, character: str = \" \") -> None:\n        \"\"\"Align text to a given width.\n\n        Args:\n            align (AlignMethod): One of \"left\", \"center\", or \"right\".\n            width (int): Desired width.\n            character (str, optional): Character to pad with. Defaults to \" \".\n        \"\"\"\n        self.truncate(width)\n        excess_space = width - cell_len(self.plain)\n        if excess_space:\n            if align == \"left\":\n                self.pad_right(excess_space, character)\n            elif align == \"center\":\n                left = excess_space // 2\n                self.pad_left(left, character)\n                self.pad_right(excess_space - left, character)\n            else:\n                self.pad_left(excess_space, character)\n\n    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.\n\n        Args:\n            text (Union[Text, str]): A str or Text to append.\n            style (str, optional): A style name. Defaults to None.\n\n        Returns:\n            Text: Returns self for chaining.\n        \"\"\"\n\n        if not isinstance(text, (str, Text)):\n            raise TypeError(\"Only str or Text can be appended to Text\")\n\n        if len(text):\n            if isinstance(text, str):\n                sanitized_text = strip_control_codes(text)\n                self._text.append(sanitized_text)\n                offset = len(self)\n                text_length = len(sanitized_text)\n                if style:\n                    self._spans.append(Span(offset, offset + text_length, style))\n                self._length += text_length\n            elif isinstance(text, Text):\n                _Span = Span\n                if style is not None:\n                    raise ValueError(\n                        \"style must not be set when appending Text instance\"\n                    )\n                text_length = self._length\n                if text.style:\n                    self._spans.append(\n                        _Span(text_length, text_length + len(text), text.style)\n                    )\n                self._text.append(text.plain)\n                self._spans.extend(\n                    _Span(start + text_length, end + text_length, style)\n                    for start, end, style in text._spans\n                )\n                self._length += len(text)\n        return self\n\n    def append_text(self, text: \"Text\") -> \"Text\":\n        \"\"\"Append another Text instance. This method is more performant that Text.append, but\n        only works for Text.\n\n        Args:\n            text (Text): The Text instance to append to this instance.\n\n        Returns:\n            Text: Returns self for chaining.\n        \"\"\"\n        _Span = Span\n        text_length = self._length\n        if text.style:\n            self._spans.append(_Span(text_length, text_length + len(text), text.style))\n        self._text.append(text.plain)\n        self._spans.extend(\n            _Span(start + text_length, end + text_length, style)\n            for start, end, style in text._spans\n        )\n        self._length += len(text)\n        return self\n\n    def append_tokens(\n        self, tokens: Iterable[Tuple[str, Optional[StyleType]]]\n    ) -> \"Text\":\n        \"\"\"Append iterable of str and style. Style may be a Style instance or a str style definition.\n\n        Args:\n            tokens (Iterable[Tuple[str, Optional[StyleType]]]): An iterable of tuples containing str content and style.\n\n        Returns:\n            Text: Returns self for chaining.\n        \"\"\"\n        append_text = self._text.append\n        append_span = self._spans.append\n        _Span = Span\n        offset = len(self)\n        for content, style in tokens:\n            append_text(content)\n            if style:\n                append_span(_Span(offset, offset + len(content), style))\n            offset += len(content)\n        self._length = offset\n        return self\n\n    def copy_styles(self, text: \"Text\") -> None:\n        \"\"\"Copy styles from another Text instance.\n\n        Args:\n            text (Text): A Text instance to copy styles from, must be the same length.\n        \"\"\"\n        self._spans.extend(text._spans)\n\n    def split(\n        self,\n        separator: str = \"\\n\",\n        *,\n        include_separator: bool = False,\n        allow_blank: bool = False,\n    ) -> Lines:\n        \"\"\"Split rich text in to lines, preserving styles.\n\n        Args:\n            separator (str, optional): String to split on. Defaults to \"\\\\\\\\n\".\n            include_separator (bool, optional): Include the separator in the lines. Defaults to False.\n            allow_blank (bool, optional): Return a blank line if the text ends with a separator. Defaults to False.\n\n        Returns:\n            List[RichText]: A list of rich text, one per line of the original.\n        \"\"\"\n        assert separator, \"separator must not be empty\"\n\n        text = self.plain\n        if separator not in text:\n            return Lines([self.copy()])\n\n        if include_separator:\n            lines = self.divide(\n                match.end() for match in re.finditer(re.escape(separator), text)\n            )\n        else:\n\n            def flatten_spans() -> Iterable[int]:\n                for match in re.finditer(re.escape(separator), text):\n                    start, end = match.span()\n                    yield start\n                    yield end\n\n            lines = Lines(\n                line for line in self.divide(flatten_spans()) if line.plain != separator\n            )\n\n        if not allow_blank and text.endswith(separator):\n            lines.pop()\n\n        return lines\n\n    def divide(self, offsets: Iterable[int]) -> Lines:\n        \"\"\"Divide text in to a number of lines at given offsets.\n\n        Args:\n            offsets (Iterable[int]): Offsets used to divide text.\n\n        Returns:\n            Lines: New RichText instances between offsets.\n        \"\"\"\n        _offsets = list(offsets)\n\n        if not _offsets:\n            return Lines([self.copy()])\n\n        text = self.plain\n        text_length = len(text)\n        divide_offsets = [0, *_offsets, text_length]\n        line_ranges = list(zip(divide_offsets, divide_offsets[1:]))\n\n        style = self.style\n        justify = self.justify\n        overflow = self.overflow\n        _Text = Text\n        new_lines = Lines(\n            _Text(\n                text[start:end],\n                style=style,\n                justify=justify,\n                overflow=overflow,\n            )\n            for start, end in line_ranges\n        )\n        if not self._spans:\n            return new_lines\n\n        _line_appends = [line._spans.append for line in new_lines._lines]\n        line_count = len(line_ranges)\n        _Span = Span\n\n        for span_start, span_end, style in self._spans:\n            lower_bound = 0\n            upper_bound = line_count\n            start_line_no = (lower_bound + upper_bound) // 2\n\n            while True:\n                line_start, line_end = line_ranges[start_line_no]\n                if span_start < line_start:\n                    upper_bound = start_line_no - 1\n                elif span_start > line_end:\n                    lower_bound = start_line_no + 1\n                else:\n                    break\n                start_line_no = (lower_bound + upper_bound) // 2\n\n            if span_end < line_end:\n                end_line_no = start_line_no\n            else:\n                end_line_no = lower_bound = start_line_no\n                upper_bound = line_count\n\n                while True:\n                    line_start, line_end = line_ranges[end_line_no]\n                    if span_end < line_start:\n                        upper_bound = end_line_no - 1\n                    elif span_end > line_end:\n                        lower_bound = end_line_no + 1\n                    else:\n                        break\n                    end_line_no = (lower_bound + upper_bound) // 2\n\n            for line_no in range(start_line_no, end_line_no + 1):\n                line_start, line_end = line_ranges[line_no]\n                new_start = max(0, span_start - line_start)\n                new_end = min(span_end - line_start, line_end - line_start)\n                if new_end > new_start:\n                    _line_appends[line_no](_Span(new_start, new_end, style))\n\n        return new_lines\n\n    def right_crop(self, amount: int = 1) -> None:\n        \"\"\"Remove a number of characters from the end of the text.\"\"\"\n        max_offset = len(self.plain) - amount\n        _Span = Span\n        self._spans[:] = [\n            (\n                span\n                if span.end < max_offset\n                else _Span(span.start, min(max_offset, span.end), span.style)\n            )\n            for span in self._spans\n            if span.start < max_offset\n        ]\n        self._text = [self.plain[:-amount]]\n        self._length -= amount\n\n    def wrap(\n        self,\n        console: \"Console\",\n        width: int,\n        *,\n        justify: Optional[\"JustifyMethod\"] = None,\n        overflow: Optional[\"OverflowMethod\"] = None,\n        tab_size: int = 8,\n        no_wrap: Optional[bool] = None,\n    ) -> Lines:\n        \"\"\"Word wrap the text.\n\n        Args:\n            console (Console): Console instance.\n            width (int): Number of cells available per line.\n            justify (str, optional): Justify method: \"default\", \"left\", \"center\", \"full\", \"right\". Defaults to \"default\".\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            tab_size (int, optional): Default tab size. Defaults to 8.\n            no_wrap (bool, optional): Disable wrapping, Defaults to False.\n\n        Returns:\n            Lines: Number of lines.\n        \"\"\"\n        wrap_justify = justify or self.justify or DEFAULT_JUSTIFY\n        wrap_overflow = overflow or self.overflow or DEFAULT_OVERFLOW\n\n        no_wrap = pick_bool(no_wrap, self.no_wrap, False) or overflow == \"ignore\"\n\n        lines = Lines()\n        for line in self.split(allow_blank=True):\n            if \"\\t\" in line:\n                line.expand_tabs(tab_size)\n            if no_wrap:\n                new_lines = Lines([line])\n            else:\n                offsets = divide_line(str(line), width, fold=wrap_overflow == \"fold\")\n                new_lines = line.divide(offsets)\n            for line in new_lines:\n                line.rstrip_end(width)\n            if wrap_justify:\n                new_lines.justify(\n                    console, width, justify=wrap_justify, overflow=wrap_overflow\n                )\n            for line in new_lines:\n                line.truncate(width, overflow=wrap_overflow)\n            lines.extend(new_lines)\n        return lines\n\n    def fit(self, width: int) -> Lines:\n        \"\"\"Fit the text in to given width by chopping in to lines.\n\n        Args:\n            width (int): Maximum characters in a line.\n\n        Returns:\n            Lines: Lines container.\n        \"\"\"\n        lines: Lines = Lines()\n        append = lines.append\n        for line in self.split():\n            line.set_length(width)\n            append(line)\n        return lines\n\n    def detect_indentation(self) -> int:\n        \"\"\"Auto-detect indentation of code.\n\n        Returns:\n            int: Number of spaces used to indent code.\n        \"\"\"\n\n        _indentations = {\n            len(match.group(1))\n            for match in re.finditer(r\"^( *)(.*)$\", self.plain, flags=re.MULTILINE)\n        }\n\n        try:\n            indentation = (\n                reduce(gcd, [indent for indent in _indentations if not indent % 2]) or 1\n            )\n        except TypeError:\n            indentation = 1\n\n        return indentation\n\n    def with_indent_guides(\n        self,\n        indent_size: Optional[int] = None,\n        *,\n        character: str = \"\u2502\",\n        style: StyleType = \"dim green\",\n    ) -> \"Text\":\n        \"\"\"Adds indent guide lines to text.\n\n        Args:\n            indent_size (Optional[int]): Size of indentation, or None to auto detect. Defaults to None.\n            character (str, optional): Character to use for indentation. Defaults to \"\u2502\".\n            style (Union[Style, str], optional): Style of indent guides.\n\n        Returns:\n            Text: New text with indentation guides.\n        \"\"\"\n\n        _indent_size = self.detect_indentation() if indent_size is None else indent_size\n\n        text = self.copy()\n        text.expand_tabs()\n        indent_line = f\"{character}{' ' * (_indent_size - 1)}\"\n\n        re_indent = re.compile(r\"^( *)(.*)$\")\n        new_lines: List[Text] = []\n        add_line = new_lines.append\n        blank_lines = 0\n        for line in text.split(allow_blank=True):\n            match = re_indent.match(line.plain)\n            if not match or not match.group(2):\n                blank_lines += 1\n                continue\n            indent = match.group(1)\n            full_indents, remaining_space = divmod(len(indent), _indent_size)\n            new_indent = f\"{indent_line * full_indents}{' ' * remaining_space}\"\n            line.plain = new_indent + line.plain[len(new_indent) :]\n            line.stylize(style, 0, len(new_indent))\n            if blank_lines:\n                new_lines.extend([Text(new_indent, style=style)] * blank_lines)\n                blank_lines = 0\n            add_line(line)\n        if blank_lines:\n            new_lines.extend([Text(\"\", style=style)] * blank_lines)\n\n        new_text = text.blank_copy(\"\\n\").join(new_lines)\n        return new_text\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.console import Console\n\n    text = Text(\n        \"\"\"\\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n\"\"\"\n    )\n    text.highlight_words([\"Lorem\"], \"bold\")\n    text.highlight_words([\"ipsum\"], \"italic\")\n\n    console = Console()\n\n    console.rule(\"justify='left'\")\n    console.print(text, style=\"red\")\n    console.print()\n\n    console.rule(\"justify='center'\")\n    console.print(text, style=\"green\", justify=\"center\")\n    console.print()\n\n    console.rule(\"justify='right'\")\n    console.print(text, style=\"blue\", justify=\"right\")\n    console.print()\n\n    console.rule(\"justify='full'\")\n    console.print(text, style=\"magenta\", justify=\"full\")\n    console.print()\n", "rich/_pick.py": "from typing import Optional\n\n\ndef pick_bool(*values: Optional[bool]) -> bool:\n    \"\"\"Pick the first non-none bool or return the last value.\n\n    Args:\n        *values (bool): Any number of boolean or None values.\n\n    Returns:\n        bool: First non-none boolean.\n    \"\"\"\n    assert values, \"1 or more values required\"\n    for value in values:\n        if value is not None:\n            return value\n    return bool(value)\n", "rich/rule.py": "from typing import Union\n\nfrom .align import AlignMethod\nfrom .cells import cell_len, set_cell_size\nfrom .console import Console, ConsoleOptions, RenderResult\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .style import Style\nfrom .text import Text\n\n\nclass Rule(JupyterMixin):\n    \"\"\"A console renderable to draw a horizontal rule (line).\n\n    Args:\n        title (Union[str, Text], optional): Text to render in the rule. Defaults to \"\".\n        characters (str, optional): Character(s) used to draw the line. Defaults to \"\u2500\".\n        style (StyleType, optional): Style of Rule. Defaults to \"rule.line\".\n        end (str, optional): Character at end of Rule. defaults to \"\\\\\\\\n\"\n        align (str, optional): How to align the title, one of \"left\", \"center\", or \"right\". Defaults to \"center\".\n    \"\"\"\n\n    def __init__(\n        self,\n        title: Union[str, Text] = \"\",\n        *,\n        characters: str = \"\u2500\",\n        style: Union[str, Style] = \"rule.line\",\n        end: str = \"\\n\",\n        align: AlignMethod = \"center\",\n    ) -> None:\n        if cell_len(characters) < 1:\n            raise ValueError(\n                \"'characters' argument must have a cell width of at least 1\"\n            )\n        if align not in (\"left\", \"center\", \"right\"):\n            raise ValueError(\n                f'invalid value for align, expected \"left\", \"center\", \"right\" (not {align!r})'\n            )\n        self.title = title\n        self.characters = characters\n        self.style = style\n        self.end = end\n        self.align = align\n\n    def __repr__(self) -> str:\n        return f\"Rule({self.title!r}, {self.characters!r})\"\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        width = options.max_width\n\n        characters = (\n            \"-\"\n            if (options.ascii_only and not self.characters.isascii())\n            else self.characters\n        )\n\n        chars_len = cell_len(characters)\n        if not self.title:\n            yield self._rule_line(chars_len, width)\n            return\n\n        if isinstance(self.title, Text):\n            title_text = self.title\n        else:\n            title_text = console.render_str(self.title, style=\"rule.text\")\n\n        title_text.plain = title_text.plain.replace(\"\\n\", \" \")\n        title_text.expand_tabs()\n\n        required_space = 4 if self.align == \"center\" else 2\n        truncate_width = max(0, width - required_space)\n        if not truncate_width:\n            yield self._rule_line(chars_len, width)\n            return\n\n        rule_text = Text(end=self.end)\n        if self.align == \"center\":\n            title_text.truncate(truncate_width, overflow=\"ellipsis\")\n            side_width = (width - cell_len(title_text.plain)) // 2\n            left = Text(characters * (side_width // chars_len + 1))\n            left.truncate(side_width - 1)\n            right_length = width - cell_len(left.plain) - cell_len(title_text.plain)\n            right = Text(characters * (side_width // chars_len + 1))\n            right.truncate(right_length)\n            rule_text.append(left.plain + \" \", self.style)\n            rule_text.append(title_text)\n            rule_text.append(\" \" + right.plain, self.style)\n        elif self.align == \"left\":\n            title_text.truncate(truncate_width, overflow=\"ellipsis\")\n            rule_text.append(title_text)\n            rule_text.append(\" \")\n            rule_text.append(characters * (width - rule_text.cell_len), self.style)\n        elif self.align == \"right\":\n            title_text.truncate(truncate_width, overflow=\"ellipsis\")\n            rule_text.append(characters * (width - title_text.cell_len - 1), self.style)\n            rule_text.append(\" \")\n            rule_text.append(title_text)\n\n        rule_text.plain = set_cell_size(rule_text.plain, width)\n        yield rule_text\n\n    def _rule_line(self, chars_len: int, width: int) -> Text:\n        rule_text = Text(self.characters * ((width // chars_len) + 1), self.style)\n        rule_text.truncate(width)\n        rule_text.plain = set_cell_size(rule_text.plain, width)\n        return rule_text\n\n    def __rich_measure__(\n        self, console: Console, options: ConsoleOptions\n    ) -> Measurement:\n        return Measurement(1, 1)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import sys\n\n    from rich.console import Console\n\n    try:\n        text = sys.argv[1]\n    except IndexError:\n        text = \"Hello, World\"\n    console = Console()\n    console.print(Rule(title=text))\n\n    console = Console()\n    console.print(Rule(\"foo\"), width=4)\n", "rich/_timer.py": "\"\"\"\nTimer context manager, only used in debug.\n\n\"\"\"\n\nfrom time import time\n\nimport contextlib\nfrom typing import Generator\n\n\n@contextlib.contextmanager\ndef timer(subject: str = \"time\") -> Generator[None, None, None]:\n    \"\"\"print the elapsed time. (only used in debugging)\"\"\"\n    start = time()\n    yield\n    elapsed = time() - start\n    elapsed_ms = elapsed * 1000\n    print(f\"{subject} elapsed {elapsed_ms:.1f}ms\")\n", "rich/_windows.py": "import sys\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass WindowsConsoleFeatures:\n    \"\"\"Windows features available.\"\"\"\n\n    vt: bool = False\n    \"\"\"The console supports VT codes.\"\"\"\n    truecolor: bool = False\n    \"\"\"The console supports truecolor.\"\"\"\n\n\ntry:\n    import ctypes\n    from ctypes import LibraryLoader\n\n    if sys.platform == \"win32\":\n        windll = LibraryLoader(ctypes.WinDLL)\n    else:\n        windll = None\n        raise ImportError(\"Not windows\")\n\n    from rich._win32_console import (\n        ENABLE_VIRTUAL_TERMINAL_PROCESSING,\n        GetConsoleMode,\n        GetStdHandle,\n        LegacyWindowsError,\n    )\n\nexcept (AttributeError, ImportError, ValueError):\n    # Fallback if we can't load the Windows DLL\n    def get_windows_console_features() -> WindowsConsoleFeatures:\n        features = WindowsConsoleFeatures()\n        return features\n\nelse:\n\n    def get_windows_console_features() -> WindowsConsoleFeatures:\n        \"\"\"Get windows console features.\n\n        Returns:\n            WindowsConsoleFeatures: An instance of WindowsConsoleFeatures.\n        \"\"\"\n        handle = GetStdHandle()\n        try:\n            console_mode = GetConsoleMode(handle)\n            success = True\n        except LegacyWindowsError:\n            console_mode = 0\n            success = False\n        vt = bool(success and console_mode & ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n        truecolor = False\n        if vt:\n            win_version = sys.getwindowsversion()\n            truecolor = win_version.major > 10 or (\n                win_version.major == 10 and win_version.build >= 15063\n            )\n        features = WindowsConsoleFeatures(vt=vt, truecolor=truecolor)\n        return features\n\n\nif __name__ == \"__main__\":\n    import platform\n\n    features = get_windows_console_features()\n    from rich import print\n\n    print(f'platform=\"{platform.system()}\"')\n    print(repr(features))\n", "rich/status.py": "from types import TracebackType\nfrom typing import Optional, Type\n\nfrom .console import Console, RenderableType\nfrom .jupyter import JupyterMixin\nfrom .live import Live\nfrom .spinner import Spinner\nfrom .style import StyleType\n\n\nclass Status(JupyterMixin):\n    \"\"\"Displays a status indicator with a 'spinner' animation.\n\n    Args:\n        status (RenderableType): A status renderable (str or Text typically).\n        console (Console, optional): Console instance to use, or None for global console. Defaults to None.\n        spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to \"dots\".\n        spinner_style (StyleType, optional): Style of spinner. Defaults to \"status.spinner\".\n        speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\n        refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\n    \"\"\"\n\n    def __init__(\n        self,\n        status: RenderableType,\n        *,\n        console: Optional[Console] = None,\n        spinner: str = \"dots\",\n        spinner_style: StyleType = \"status.spinner\",\n        speed: float = 1.0,\n        refresh_per_second: float = 12.5,\n    ):\n        self.status = status\n        self.spinner_style = spinner_style\n        self.speed = speed\n        self._spinner = Spinner(spinner, text=status, style=spinner_style, speed=speed)\n        self._live = Live(\n            self.renderable,\n            console=console,\n            refresh_per_second=refresh_per_second,\n            transient=True,\n        )\n\n    @property\n    def renderable(self) -> Spinner:\n        return self._spinner\n\n    @property\n    def console(self) -> \"Console\":\n        \"\"\"Get the Console used by the Status objects.\"\"\"\n        return self._live.console\n\n    def update(\n        self,\n        status: Optional[RenderableType] = None,\n        *,\n        spinner: Optional[str] = None,\n        spinner_style: Optional[StyleType] = None,\n        speed: Optional[float] = None,\n    ) -> None:\n        \"\"\"Update status.\n\n        Args:\n            status (Optional[RenderableType], optional): New status renderable or None for no change. Defaults to None.\n            spinner (Optional[str], optional): New spinner or None for no change. Defaults to None.\n            spinner_style (Optional[StyleType], optional): New spinner style or None for no change. Defaults to None.\n            speed (Optional[float], optional): Speed factor for spinner animation or None for no change. Defaults to None.\n        \"\"\"\n        if status is not None:\n            self.status = status\n        if spinner_style is not None:\n            self.spinner_style = spinner_style\n        if speed is not None:\n            self.speed = speed\n        if spinner is not None:\n            self._spinner = Spinner(\n                spinner, text=self.status, style=self.spinner_style, speed=self.speed\n            )\n            self._live.update(self.renderable, refresh=True)\n        else:\n            self._spinner.update(\n                text=self.status, style=self.spinner_style, speed=self.speed\n            )\n\n    def start(self) -> None:\n        \"\"\"Start the status animation.\"\"\"\n        self._live.start()\n\n    def stop(self) -> None:\n        \"\"\"Stop the spinner animation.\"\"\"\n        self._live.stop()\n\n    def __rich__(self) -> RenderableType:\n        return self.renderable\n\n    def __enter__(self) -> \"Status\":\n        self.start()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> None:\n        self.stop()\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from time import sleep\n\n    from .console import Console\n\n    console = Console()\n    with console.status(\"[magenta]Covid detector booting up\") as status:\n        sleep(3)\n        console.log(\"Importing advanced AI\")\n        sleep(3)\n        console.log(\"Advanced Covid AI Ready\")\n        sleep(3)\n        status.update(status=\"[bold blue] Scanning for Covid\", spinner=\"earth\")\n        sleep(3)\n        console.log(\"Found 10,000,000,000 copies of Covid32.exe\")\n        sleep(3)\n        status.update(\n            status=\"[bold red]Moving Covid32.exe to Trash\",\n            spinner=\"bouncingBall\",\n            spinner_style=\"yellow\",\n        )\n        sleep(5)\n    console.print(\"[bold green]Covid deleted successfully\")\n", "rich/markdown.py": "from __future__ import annotations\n\nimport sys\nfrom typing import ClassVar, Dict, Iterable, List, Optional, Type, Union\n\nfrom markdown_it import MarkdownIt\nfrom markdown_it.token import Token\n\nif sys.version_info >= (3, 8):\n    from typing import get_args\nelse:\n    from typing_extensions import get_args  # pragma: no cover\n\nfrom rich.table import Table\n\nfrom . import box\nfrom ._loop import loop_first\nfrom ._stack import Stack\nfrom .console import Console, ConsoleOptions, JustifyMethod, RenderResult\nfrom .containers import Renderables\nfrom .jupyter import JupyterMixin\nfrom .panel import Panel\nfrom .rule import Rule\nfrom .segment import Segment\nfrom .style import Style, StyleStack\nfrom .syntax import Syntax\nfrom .text import Text, TextType\n\n\nclass MarkdownElement:\n    new_line: ClassVar[bool] = True\n\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"MarkdownElement\":\n        \"\"\"Factory to create markdown element,\n\n        Args:\n            markdown (Markdown): The parent Markdown object.\n            token (Token): A node from markdown-it.\n\n        Returns:\n            MarkdownElement: A new markdown element\n        \"\"\"\n        return cls()\n\n    def on_enter(self, context: \"MarkdownContext\") -> None:\n        \"\"\"Called when the node is entered.\n\n        Args:\n            context (MarkdownContext): The markdown context.\n        \"\"\"\n\n    def on_text(self, context: \"MarkdownContext\", text: TextType) -> None:\n        \"\"\"Called when text is parsed.\n\n        Args:\n            context (MarkdownContext): The markdown context.\n        \"\"\"\n\n    def on_leave(self, context: \"MarkdownContext\") -> None:\n        \"\"\"Called when the parser leaves the element.\n\n        Args:\n            context (MarkdownContext): [description]\n        \"\"\"\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        \"\"\"Called when a child element is closed.\n\n        This method allows a parent element to take over rendering of its children.\n\n        Args:\n            context (MarkdownContext): The markdown context.\n            child (MarkdownElement): The child markdown element.\n\n        Returns:\n            bool: Return True to render the element, or False to not render the element.\n        \"\"\"\n        return True\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        return ()\n\n\nclass UnknownElement(MarkdownElement):\n    \"\"\"An unknown element.\n\n    Hopefully there will be no unknown elements, and we will have a MarkdownElement for\n    everything in the document.\n\n    \"\"\"\n\n\nclass TextElement(MarkdownElement):\n    \"\"\"Base class for elements that render text.\"\"\"\n\n    style_name = \"none\"\n\n    def on_enter(self, context: \"MarkdownContext\") -> None:\n        self.style = context.enter_style(self.style_name)\n        self.text = Text(justify=\"left\")\n\n    def on_text(self, context: \"MarkdownContext\", text: TextType) -> None:\n        self.text.append(text, context.current_style if isinstance(text, str) else None)\n\n    def on_leave(self, context: \"MarkdownContext\") -> None:\n        context.leave_style()\n\n\nclass Paragraph(TextElement):\n    \"\"\"A Paragraph.\"\"\"\n\n    style_name = \"markdown.paragraph\"\n    justify: JustifyMethod\n\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"Paragraph\":\n        return cls(justify=markdown.justify or \"left\")\n\n    def __init__(self, justify: JustifyMethod) -> None:\n        self.justify = justify\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        self.text.justify = self.justify\n        yield self.text\n\n\nclass Heading(TextElement):\n    \"\"\"A heading.\"\"\"\n\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"Heading\":\n        return cls(token.tag)\n\n    def on_enter(self, context: \"MarkdownContext\") -> None:\n        self.text = Text()\n        context.enter_style(self.style_name)\n\n    def __init__(self, tag: str) -> None:\n        self.tag = tag\n        self.style_name = f\"markdown.{tag}\"\n        super().__init__()\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        text = self.text\n        text.justify = \"center\"\n        if self.tag == \"h1\":\n            # Draw a border around h1s\n            yield Panel(\n                text,\n                box=box.HEAVY,\n                style=\"markdown.h1.border\",\n            )\n        else:\n            # Styled text for h2 and beyond\n            if self.tag == \"h2\":\n                yield Text(\"\")\n            yield text\n\n\nclass CodeBlock(TextElement):\n    \"\"\"A code block with syntax highlighting.\"\"\"\n\n    style_name = \"markdown.code_block\"\n\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"CodeBlock\":\n        node_info = token.info or \"\"\n        lexer_name = node_info.partition(\" \")[0]\n        return cls(lexer_name or \"text\", markdown.code_theme)\n\n    def __init__(self, lexer_name: str, theme: str) -> None:\n        self.lexer_name = lexer_name\n        self.theme = theme\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        code = str(self.text).rstrip()\n        syntax = Syntax(\n            code, self.lexer_name, theme=self.theme, word_wrap=True, padding=1\n        )\n        yield syntax\n\n\nclass BlockQuote(TextElement):\n    \"\"\"A block quote.\"\"\"\n\n    style_name = \"markdown.block_quote\"\n\n    def __init__(self) -> None:\n        self.elements: Renderables = Renderables()\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        self.elements.append(child)\n        return False\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        render_options = options.update(width=options.max_width - 4)\n        lines = console.render_lines(self.elements, render_options, style=self.style)\n        style = self.style\n        new_line = Segment(\"\\n\")\n        padding = Segment(\"\u258c \", style)\n        for line in lines:\n            yield padding\n            yield from line\n            yield new_line\n\n\nclass HorizontalRule(MarkdownElement):\n    \"\"\"A horizontal rule to divide sections.\"\"\"\n\n    new_line = False\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        style = console.get_style(\"markdown.hr\", default=\"none\")\n        yield Rule(style=style)\n\n\nclass TableElement(MarkdownElement):\n    \"\"\"MarkdownElement corresponding to `table_open`.\"\"\"\n\n    def __init__(self) -> None:\n        self.header: TableHeaderElement | None = None\n        self.body: TableBodyElement | None = None\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        if isinstance(child, TableHeaderElement):\n            self.header = child\n        elif isinstance(child, TableBodyElement):\n            self.body = child\n        else:\n            raise RuntimeError(\"Couldn't process markdown table.\")\n        return False\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        table = Table(box=box.SIMPLE_HEAVY)\n\n        if self.header is not None and self.header.row is not None:\n            for column in self.header.row.cells:\n                table.add_column(column.content)\n\n        if self.body is not None:\n            for row in self.body.rows:\n                row_content = [element.content for element in row.cells]\n                table.add_row(*row_content)\n\n        yield table\n\n\nclass TableHeaderElement(MarkdownElement):\n    \"\"\"MarkdownElement corresponding to `thead_open` and `thead_close`.\"\"\"\n\n    def __init__(self) -> None:\n        self.row: TableRowElement | None = None\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        assert isinstance(child, TableRowElement)\n        self.row = child\n        return False\n\n\nclass TableBodyElement(MarkdownElement):\n    \"\"\"MarkdownElement corresponding to `tbody_open` and `tbody_close`.\"\"\"\n\n    def __init__(self) -> None:\n        self.rows: list[TableRowElement] = []\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        assert isinstance(child, TableRowElement)\n        self.rows.append(child)\n        return False\n\n\nclass TableRowElement(MarkdownElement):\n    \"\"\"MarkdownElement corresponding to `tr_open` and `tr_close`.\"\"\"\n\n    def __init__(self) -> None:\n        self.cells: List[TableDataElement] = []\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        assert isinstance(child, TableDataElement)\n        self.cells.append(child)\n        return False\n\n\nclass TableDataElement(MarkdownElement):\n    \"\"\"MarkdownElement corresponding to `td_open` and `td_close`\n    and `th_open` and `th_close`.\"\"\"\n\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"MarkdownElement\":\n        style = str(token.attrs.get(\"style\")) or \"\"\n\n        justify: JustifyMethod\n        if \"text-align:right\" in style:\n            justify = \"right\"\n        elif \"text-align:center\" in style:\n            justify = \"center\"\n        elif \"text-align:left\" in style:\n            justify = \"left\"\n        else:\n            justify = \"default\"\n\n        assert justify in get_args(JustifyMethod)\n        return cls(justify=justify)\n\n    def __init__(self, justify: JustifyMethod) -> None:\n        self.content: Text = Text(\"\", justify=justify)\n        self.justify = justify\n\n    def on_text(self, context: \"MarkdownContext\", text: TextType) -> None:\n        text = Text(text) if isinstance(text, str) else text\n        text.stylize(context.current_style)\n        self.content.append_text(text)\n\n\nclass ListElement(MarkdownElement):\n    \"\"\"A list element.\"\"\"\n\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"ListElement\":\n        return cls(token.type, int(token.attrs.get(\"start\", 1)))\n\n    def __init__(self, list_type: str, list_start: int | None) -> None:\n        self.items: List[ListItem] = []\n        self.list_type = list_type\n        self.list_start = list_start\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        assert isinstance(child, ListItem)\n        self.items.append(child)\n        return False\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        if self.list_type == \"bullet_list_open\":\n            for item in self.items:\n                yield from item.render_bullet(console, options)\n        else:\n            number = 1 if self.list_start is None else self.list_start\n            last_number = number + len(self.items)\n            for index, item in enumerate(self.items):\n                yield from item.render_number(\n                    console, options, number + index, last_number\n                )\n\n\nclass ListItem(TextElement):\n    \"\"\"An item in a list.\"\"\"\n\n    style_name = \"markdown.item\"\n\n    def __init__(self) -> None:\n        self.elements: Renderables = Renderables()\n\n    def on_child_close(\n        self, context: \"MarkdownContext\", child: \"MarkdownElement\"\n    ) -> bool:\n        self.elements.append(child)\n        return False\n\n    def render_bullet(self, console: Console, options: ConsoleOptions) -> RenderResult:\n        render_options = options.update(width=options.max_width - 3)\n        lines = console.render_lines(self.elements, render_options, style=self.style)\n        bullet_style = console.get_style(\"markdown.item.bullet\", default=\"none\")\n\n        bullet = Segment(\" \u2022 \", bullet_style)\n        padding = Segment(\" \" * 3, bullet_style)\n        new_line = Segment(\"\\n\")\n        for first, line in loop_first(lines):\n            yield bullet if first else padding\n            yield from line\n            yield new_line\n\n    def render_number(\n        self, console: Console, options: ConsoleOptions, number: int, last_number: int\n    ) -> RenderResult:\n        number_width = len(str(last_number)) + 2\n        render_options = options.update(width=options.max_width - number_width)\n        lines = console.render_lines(self.elements, render_options, style=self.style)\n        number_style = console.get_style(\"markdown.item.number\", default=\"none\")\n\n        new_line = Segment(\"\\n\")\n        padding = Segment(\" \" * number_width, number_style)\n        numeral = Segment(f\"{number}\".rjust(number_width - 1) + \" \", number_style)\n        for first, line in loop_first(lines):\n            yield numeral if first else padding\n            yield from line\n            yield new_line\n\n\nclass Link(TextElement):\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"MarkdownElement\":\n        url = token.attrs.get(\"href\", \"#\")\n        return cls(token.content, str(url))\n\n    def __init__(self, text: str, href: str):\n        self.text = Text(text)\n        self.href = href\n\n\nclass ImageItem(TextElement):\n    \"\"\"Renders a placeholder for an image.\"\"\"\n\n    new_line = False\n\n    @classmethod\n    def create(cls, markdown: \"Markdown\", token: Token) -> \"MarkdownElement\":\n        \"\"\"Factory to create markdown element,\n\n        Args:\n            markdown (Markdown): The parent Markdown object.\n            token (Any): A token from markdown-it.\n\n        Returns:\n            MarkdownElement: A new markdown element\n        \"\"\"\n        return cls(str(token.attrs.get(\"src\", \"\")), markdown.hyperlinks)\n\n    def __init__(self, destination: str, hyperlinks: bool) -> None:\n        self.destination = destination\n        self.hyperlinks = hyperlinks\n        self.link: Optional[str] = None\n        super().__init__()\n\n    def on_enter(self, context: \"MarkdownContext\") -> None:\n        self.link = context.current_style.link\n        self.text = Text(justify=\"left\")\n        super().on_enter(context)\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        link_style = Style(link=self.link or self.destination or None)\n        title = self.text or Text(self.destination.strip(\"/\").rsplit(\"/\", 1)[-1])\n        if self.hyperlinks:\n            title.stylize(link_style)\n        text = Text.assemble(\"\ud83c\udf06 \", title, \" \", end=\"\")\n        yield text\n\n\nclass MarkdownContext:\n    \"\"\"Manages the console render state.\"\"\"\n\n    def __init__(\n        self,\n        console: Console,\n        options: ConsoleOptions,\n        style: Style,\n        inline_code_lexer: Optional[str] = None,\n        inline_code_theme: str = \"monokai\",\n    ) -> None:\n        self.console = console\n        self.options = options\n        self.style_stack: StyleStack = StyleStack(style)\n        self.stack: Stack[MarkdownElement] = Stack()\n\n        self._syntax: Optional[Syntax] = None\n        if inline_code_lexer is not None:\n            self._syntax = Syntax(\"\", inline_code_lexer, theme=inline_code_theme)\n\n    @property\n    def current_style(self) -> Style:\n        \"\"\"Current style which is the product of all styles on the stack.\"\"\"\n        return self.style_stack.current\n\n    def on_text(self, text: str, node_type: str) -> None:\n        \"\"\"Called when the parser visits text.\"\"\"\n        if node_type in {\"fence\", \"code_inline\"} and self._syntax is not None:\n            highlight_text = self._syntax.highlight(text)\n            highlight_text.rstrip()\n            self.stack.top.on_text(\n                self, Text.assemble(highlight_text, style=self.style_stack.current)\n            )\n        else:\n            self.stack.top.on_text(self, text)\n\n    def enter_style(self, style_name: Union[str, Style]) -> Style:\n        \"\"\"Enter a style context.\"\"\"\n        style = self.console.get_style(style_name, default=\"none\")\n        self.style_stack.push(style)\n        return self.current_style\n\n    def leave_style(self) -> Style:\n        \"\"\"Leave a style context.\"\"\"\n        style = self.style_stack.pop()\n        return style\n\n\nclass Markdown(JupyterMixin):\n    \"\"\"A Markdown renderable.\n\n    Args:\n        markup (str): A string containing markdown.\n        code_theme (str, optional): Pygments theme for code blocks. Defaults to \"monokai\".\n        justify (JustifyMethod, optional): Justify value for paragraphs. Defaults to None.\n        style (Union[str, Style], optional): Optional style to apply to markdown.\n        hyperlinks (bool, optional): Enable hyperlinks. Defaults to ``True``.\n        inline_code_lexer: (str, optional): Lexer to use if inline code highlighting is\n            enabled. Defaults to None.\n        inline_code_theme: (Optional[str], optional): Pygments theme for inline code\n            highlighting, or None for no highlighting. Defaults to None.\n    \"\"\"\n\n    elements: ClassVar[Dict[str, Type[MarkdownElement]]] = {\n        \"paragraph_open\": Paragraph,\n        \"heading_open\": Heading,\n        \"fence\": CodeBlock,\n        \"code_block\": CodeBlock,\n        \"blockquote_open\": BlockQuote,\n        \"hr\": HorizontalRule,\n        \"bullet_list_open\": ListElement,\n        \"ordered_list_open\": ListElement,\n        \"list_item_open\": ListItem,\n        \"image\": ImageItem,\n        \"table_open\": TableElement,\n        \"tbody_open\": TableBodyElement,\n        \"thead_open\": TableHeaderElement,\n        \"tr_open\": TableRowElement,\n        \"td_open\": TableDataElement,\n        \"th_open\": TableDataElement,\n    }\n\n    inlines = {\"em\", \"strong\", \"code\", \"s\"}\n\n    def __init__(\n        self,\n        markup: str,\n        code_theme: str = \"monokai\",\n        justify: Optional[JustifyMethod] = None,\n        style: Union[str, Style] = \"none\",\n        hyperlinks: bool = True,\n        inline_code_lexer: Optional[str] = None,\n        inline_code_theme: Optional[str] = None,\n    ) -> None:\n        parser = MarkdownIt().enable(\"strikethrough\").enable(\"table\")\n        self.markup = markup\n        self.parsed = parser.parse(markup)\n        self.code_theme = code_theme\n        self.justify: Optional[JustifyMethod] = justify\n        self.style = style\n        self.hyperlinks = hyperlinks\n        self.inline_code_lexer = inline_code_lexer\n        self.inline_code_theme = inline_code_theme or code_theme\n\n    def _flatten_tokens(self, tokens: Iterable[Token]) -> Iterable[Token]:\n        \"\"\"Flattens the token stream.\"\"\"\n        for token in tokens:\n            is_fence = token.type == \"fence\"\n            is_image = token.tag == \"img\"\n            if token.children and not (is_image or is_fence):\n                yield from self._flatten_tokens(token.children)\n            else:\n                yield token\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        \"\"\"Render markdown to the console.\"\"\"\n        style = console.get_style(self.style, default=\"none\")\n        options = options.update(height=None)\n        context = MarkdownContext(\n            console,\n            options,\n            style,\n            inline_code_lexer=self.inline_code_lexer,\n            inline_code_theme=self.inline_code_theme,\n        )\n        tokens = self.parsed\n        inline_style_tags = self.inlines\n        new_line = False\n        _new_line_segment = Segment.line()\n\n        for token in self._flatten_tokens(tokens):\n            node_type = token.type\n            tag = token.tag\n\n            entering = token.nesting == 1\n            exiting = token.nesting == -1\n            self_closing = token.nesting == 0\n\n            if node_type == \"text\":\n                context.on_text(token.content, node_type)\n            elif node_type == \"hardbreak\":\n                context.on_text(\"\\n\", node_type)\n            elif node_type == \"softbreak\":\n                context.on_text(\" \", node_type)\n            elif node_type == \"link_open\":\n                href = str(token.attrs.get(\"href\", \"\"))\n                if self.hyperlinks:\n                    link_style = console.get_style(\"markdown.link_url\", default=\"none\")\n                    link_style += Style(link=href)\n                    context.enter_style(link_style)\n                else:\n                    context.stack.push(Link.create(self, token))\n            elif node_type == \"link_close\":\n                if self.hyperlinks:\n                    context.leave_style()\n                else:\n                    element = context.stack.pop()\n                    assert isinstance(element, Link)\n                    link_style = console.get_style(\"markdown.link\", default=\"none\")\n                    context.enter_style(link_style)\n                    context.on_text(element.text.plain, node_type)\n                    context.leave_style()\n                    context.on_text(\" (\", node_type)\n                    link_url_style = console.get_style(\n                        \"markdown.link_url\", default=\"none\"\n                    )\n                    context.enter_style(link_url_style)\n                    context.on_text(element.href, node_type)\n                    context.leave_style()\n                    context.on_text(\")\", node_type)\n            elif (\n                tag in inline_style_tags\n                and node_type != \"fence\"\n                and node_type != \"code_block\"\n            ):\n                if entering:\n                    # If it's an opening inline token e.g. strong, em, etc.\n                    # Then we move into a style context i.e. push to stack.\n                    context.enter_style(f\"markdown.{tag}\")\n                elif exiting:\n                    # If it's a closing inline style, then we pop the style\n                    # off of the stack, to move out of the context of it...\n                    context.leave_style()\n                else:\n                    # If it's a self-closing inline style e.g. `code_inline`\n                    context.enter_style(f\"markdown.{tag}\")\n                    if token.content:\n                        context.on_text(token.content, node_type)\n                    context.leave_style()\n            else:\n                # Map the markdown tag -> MarkdownElement renderable\n                element_class = self.elements.get(token.type) or UnknownElement\n                element = element_class.create(self, token)\n\n                if entering or self_closing:\n                    context.stack.push(element)\n                    element.on_enter(context)\n\n                if exiting:  # CLOSING tag\n                    element = context.stack.pop()\n\n                    should_render = not context.stack or (\n                        context.stack\n                        and context.stack.top.on_child_close(context, element)\n                    )\n\n                    if should_render:\n                        if new_line:\n                            yield _new_line_segment\n\n                        yield from console.render(element, context.options)\n                elif self_closing:  # SELF-CLOSING tags (e.g. text, code, image)\n                    context.stack.pop()\n                    text = token.content\n                    if text is not None:\n                        element.on_text(context, text)\n\n                    should_render = (\n                        not context.stack\n                        or context.stack\n                        and context.stack.top.on_child_close(context, element)\n                    )\n                    if should_render:\n                        if new_line:\n                            yield _new_line_segment\n                        yield from console.render(element, context.options)\n\n                if exiting or self_closing:\n                    element.on_leave(context)\n                    new_line = element.new_line\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import argparse\n    import sys\n\n    parser = argparse.ArgumentParser(\n        description=\"Render Markdown to the console with Rich\"\n    )\n    parser.add_argument(\n        \"path\",\n        metavar=\"PATH\",\n        help=\"path to markdown file, or - for stdin\",\n    )\n    parser.add_argument(\n        \"-c\",\n        \"--force-color\",\n        dest=\"force_color\",\n        action=\"store_true\",\n        default=None,\n        help=\"force color for non-terminals\",\n    )\n    parser.add_argument(\n        \"-t\",\n        \"--code-theme\",\n        dest=\"code_theme\",\n        default=\"monokai\",\n        help=\"pygments code theme\",\n    )\n    parser.add_argument(\n        \"-i\",\n        \"--inline-code-lexer\",\n        dest=\"inline_code_lexer\",\n        default=None,\n        help=\"inline_code_lexer\",\n    )\n    parser.add_argument(\n        \"-y\",\n        \"--hyperlinks\",\n        dest=\"hyperlinks\",\n        action=\"store_true\",\n        help=\"enable hyperlinks\",\n    )\n    parser.add_argument(\n        \"-w\",\n        \"--width\",\n        type=int,\n        dest=\"width\",\n        default=None,\n        help=\"width of output (default will auto-detect)\",\n    )\n    parser.add_argument(\n        \"-j\",\n        \"--justify\",\n        dest=\"justify\",\n        action=\"store_true\",\n        help=\"enable full text justify\",\n    )\n    parser.add_argument(\n        \"-p\",\n        \"--page\",\n        dest=\"page\",\n        action=\"store_true\",\n        help=\"use pager to scroll output\",\n    )\n    args = parser.parse_args()\n\n    from rich.console import Console\n\n    if args.path == \"-\":\n        markdown_body = sys.stdin.read()\n    else:\n        with open(args.path, \"rt\", encoding=\"utf-8\") as markdown_file:\n            markdown_body = markdown_file.read()\n\n    markdown = Markdown(\n        markdown_body,\n        justify=\"full\" if args.justify else \"left\",\n        code_theme=args.code_theme,\n        hyperlinks=args.hyperlinks,\n        inline_code_lexer=args.inline_code_lexer,\n    )\n    if args.page:\n        import io\n        import pydoc\n\n        fileio = io.StringIO()\n        console = Console(\n            file=fileio, force_terminal=args.force_color, width=args.width\n        )\n        console.print(markdown)\n        pydoc.pager(fileio.getvalue())\n\n    else:\n        console = Console(\n            force_terminal=args.force_color, width=args.width, record=True\n        )\n        console.print(markdown)\n", "rich/_log_render.py": "from datetime import datetime\nfrom typing import Iterable, List, Optional, TYPE_CHECKING, Union, Callable\n\n\nfrom .text import Text, TextType\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleRenderable, RenderableType\n    from .table import Table\n\nFormatTimeCallable = Callable[[datetime], Text]\n\n\nclass LogRender:\n    def __init__(\n        self,\n        show_time: bool = True,\n        show_level: bool = False,\n        show_path: bool = True,\n        time_format: Union[str, FormatTimeCallable] = \"[%x %X]\",\n        omit_repeated_times: bool = True,\n        level_width: Optional[int] = 8,\n    ) -> None:\n        self.show_time = show_time\n        self.show_level = show_level\n        self.show_path = show_path\n        self.time_format = time_format\n        self.omit_repeated_times = omit_repeated_times\n        self.level_width = level_width\n        self._last_time: Optional[Text] = None\n\n    def __call__(\n        self,\n        console: \"Console\",\n        renderables: Iterable[\"ConsoleRenderable\"],\n        log_time: Optional[datetime] = None,\n        time_format: Optional[Union[str, FormatTimeCallable]] = None,\n        level: TextType = \"\",\n        path: Optional[str] = None,\n        line_no: Optional[int] = None,\n        link_path: Optional[str] = None,\n    ) -> \"Table\":\n        from .containers import Renderables\n        from .table import Table\n\n        output = Table.grid(padding=(0, 1))\n        output.expand = True\n        if self.show_time:\n            output.add_column(style=\"log.time\")\n        if self.show_level:\n            output.add_column(style=\"log.level\", width=self.level_width)\n        output.add_column(ratio=1, style=\"log.message\", overflow=\"fold\")\n        if self.show_path and path:\n            output.add_column(style=\"log.path\")\n        row: List[\"RenderableType\"] = []\n        if self.show_time:\n            log_time = log_time or console.get_datetime()\n            time_format = time_format or self.time_format\n            if callable(time_format):\n                log_time_display = time_format(log_time)\n            else:\n                log_time_display = Text(log_time.strftime(time_format))\n            if log_time_display == self._last_time and self.omit_repeated_times:\n                row.append(Text(\" \" * len(log_time_display)))\n            else:\n                row.append(log_time_display)\n                self._last_time = log_time_display\n        if self.show_level:\n            row.append(level)\n\n        row.append(Renderables(renderables))\n        if self.show_path and path:\n            path_text = Text()\n            path_text.append(\n                path, style=f\"link file://{link_path}\" if link_path else \"\"\n            )\n            if line_no:\n                path_text.append(\":\")\n                path_text.append(\n                    f\"{line_no}\",\n                    style=f\"link file://{link_path}#{line_no}\" if link_path else \"\",\n                )\n            row.append(path_text)\n\n        output.add_row(*row)\n        return output\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.console import Console\n\n    c = Console()\n    c.print(\"[on blue]Hello\", justify=\"right\")\n    c.log(\"[on blue]hello\", justify=\"right\")\n", "rich/palette.py": "from math import sqrt\nfrom functools import lru_cache\nfrom typing import Sequence, Tuple, TYPE_CHECKING\n\nfrom .color_triplet import ColorTriplet\n\nif TYPE_CHECKING:\n    from rich.table import Table\n\n\nclass Palette:\n    \"\"\"A palette of available colors.\"\"\"\n\n    def __init__(self, colors: Sequence[Tuple[int, int, int]]):\n        self._colors = colors\n\n    def __getitem__(self, number: int) -> ColorTriplet:\n        return ColorTriplet(*self._colors[number])\n\n    def __rich__(self) -> \"Table\":\n        from rich.color import Color\n        from rich.style import Style\n        from rich.text import Text\n        from rich.table import Table\n\n        table = Table(\n            \"index\",\n            \"RGB\",\n            \"Color\",\n            title=\"Palette\",\n            caption=f\"{len(self._colors)} colors\",\n            highlight=True,\n            caption_justify=\"right\",\n        )\n        for index, color in enumerate(self._colors):\n            table.add_row(\n                str(index),\n                repr(color),\n                Text(\" \" * 16, style=Style(bgcolor=Color.from_rgb(*color))),\n            )\n        return table\n\n    # This is somewhat inefficient and needs caching\n    @lru_cache(maxsize=1024)\n    def match(self, color: Tuple[int, int, int]) -> int:\n        \"\"\"Find a color from a palette that most closely matches a given color.\n\n        Args:\n            color (Tuple[int, int, int]): RGB components in range 0 > 255.\n\n        Returns:\n            int: Index of closes matching color.\n        \"\"\"\n        red1, green1, blue1 = color\n        _sqrt = sqrt\n        get_color = self._colors.__getitem__\n\n        def get_color_distance(index: int) -> float:\n            \"\"\"Get the distance to a color.\"\"\"\n            red2, green2, blue2 = get_color(index)\n            red_mean = (red1 + red2) // 2\n            red = red1 - red2\n            green = green1 - green2\n            blue = blue1 - blue2\n            return _sqrt(\n                (((512 + red_mean) * red * red) >> 8)\n                + 4 * green * green\n                + (((767 - red_mean) * blue * blue) >> 8)\n            )\n\n        min_index = min(range(len(self._colors)), key=get_color_distance)\n        return min_index\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import colorsys\n    from typing import Iterable\n    from rich.color import Color\n    from rich.console import Console, ConsoleOptions\n    from rich.segment import Segment\n    from rich.style import Style\n\n    class ColorBox:\n        def __rich_console__(\n            self, console: Console, options: ConsoleOptions\n        ) -> Iterable[Segment]:\n            height = console.size.height - 3\n            for y in range(0, height):\n                for x in range(options.max_width):\n                    h = x / options.max_width\n                    l = y / (height + 1)\n                    r1, g1, b1 = colorsys.hls_to_rgb(h, l, 1.0)\n                    r2, g2, b2 = colorsys.hls_to_rgb(h, l + (1 / height / 2), 1.0)\n                    bgcolor = Color.from_rgb(r1 * 255, g1 * 255, b1 * 255)\n                    color = Color.from_rgb(r2 * 255, g2 * 255, b2 * 255)\n                    yield Segment(\"\u2584\", Style(color=color, bgcolor=bgcolor))\n                yield Segment.line()\n\n    console = Console()\n    console.print(ColorBox())\n", "rich/_windows_renderer.py": "from typing import Iterable, Sequence, Tuple, cast\n\nfrom rich._win32_console import LegacyWindowsTerm, WindowsCoordinates\nfrom rich.segment import ControlCode, ControlType, Segment\n\n\ndef legacy_windows_render(buffer: Iterable[Segment], term: LegacyWindowsTerm) -> None:\n    \"\"\"Makes appropriate Windows Console API calls based on the segments in the buffer.\n\n    Args:\n        buffer (Iterable[Segment]): Iterable of Segments to convert to Win32 API calls.\n        term (LegacyWindowsTerm): Used to call the Windows Console API.\n    \"\"\"\n    for text, style, control in buffer:\n        if not control:\n            if style:\n                term.write_styled(text, style)\n            else:\n                term.write_text(text)\n        else:\n            control_codes: Sequence[ControlCode] = control\n            for control_code in control_codes:\n                control_type = control_code[0]\n                if control_type == ControlType.CURSOR_MOVE_TO:\n                    _, x, y = cast(Tuple[ControlType, int, int], control_code)\n                    term.move_cursor_to(WindowsCoordinates(row=y - 1, col=x - 1))\n                elif control_type == ControlType.CARRIAGE_RETURN:\n                    term.write_text(\"\\r\")\n                elif control_type == ControlType.HOME:\n                    term.move_cursor_to(WindowsCoordinates(0, 0))\n                elif control_type == ControlType.CURSOR_UP:\n                    term.move_cursor_up()\n                elif control_type == ControlType.CURSOR_DOWN:\n                    term.move_cursor_down()\n                elif control_type == ControlType.CURSOR_FORWARD:\n                    term.move_cursor_forward()\n                elif control_type == ControlType.CURSOR_BACKWARD:\n                    term.move_cursor_backward()\n                elif control_type == ControlType.CURSOR_MOVE_TO_COLUMN:\n                    _, column = cast(Tuple[ControlType, int], control_code)\n                    term.move_cursor_to_column(column - 1)\n                elif control_type == ControlType.HIDE_CURSOR:\n                    term.hide_cursor()\n                elif control_type == ControlType.SHOW_CURSOR:\n                    term.show_cursor()\n                elif control_type == ControlType.ERASE_IN_LINE:\n                    _, mode = cast(Tuple[ControlType, int], control_code)\n                    if mode == 0:\n                        term.erase_end_of_line()\n                    elif mode == 1:\n                        term.erase_start_of_line()\n                    elif mode == 2:\n                        term.erase_line()\n                elif control_type == ControlType.SET_WINDOW_TITLE:\n                    _, title = cast(Tuple[ControlType, str], control_code)\n                    term.set_title(title)\n", "rich/bar.py": "from typing import Optional, Union\n\nfrom .color import Color\nfrom .console import Console, ConsoleOptions, RenderResult\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .segment import Segment\nfrom .style import Style\n\n# There are left-aligned characters for 1/8 to 7/8, but\n# the right-aligned characters exist only for 1/8 and 4/8.\nBEGIN_BLOCK_ELEMENTS = [\"\u2588\", \"\u2588\", \"\u2588\", \"\u2590\", \"\u2590\", \"\u2590\", \"\u2595\", \"\u2595\"]\nEND_BLOCK_ELEMENTS = [\" \", \"\u258f\", \"\u258e\", \"\u258d\", \"\u258c\", \"\u258b\", \"\u258a\", \"\u2589\"]\nFULL_BLOCK = \"\u2588\"\n\n\nclass Bar(JupyterMixin):\n    \"\"\"Renders a solid block bar.\n\n    Args:\n        size (float): Value for the end of the bar.\n        begin (float): Begin point (between 0 and size, inclusive).\n        end (float): End point (between 0 and size, inclusive).\n        width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.\n        color (Union[Color, str], optional): Color of the bar. Defaults to \"default\".\n        bgcolor (Union[Color, str], optional): Color of bar background. Defaults to \"default\".\n    \"\"\"\n\n    def __init__(\n        self,\n        size: float,\n        begin: float,\n        end: float,\n        *,\n        width: Optional[int] = None,\n        color: Union[Color, str] = \"default\",\n        bgcolor: Union[Color, str] = \"default\",\n    ):\n        self.size = size\n        self.begin = max(begin, 0)\n        self.end = min(end, size)\n        self.width = width\n        self.style = Style(color=color, bgcolor=bgcolor)\n\n    def __repr__(self) -> str:\n        return f\"Bar({self.size}, {self.begin}, {self.end})\"\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        width = min(\n            self.width if self.width is not None else options.max_width,\n            options.max_width,\n        )\n\n        if self.begin >= self.end:\n            yield Segment(\" \" * width, self.style)\n            yield Segment.line()\n            return\n\n        prefix_complete_eights = int(width * 8 * self.begin / self.size)\n        prefix_bar_count = prefix_complete_eights // 8\n        prefix_eights_count = prefix_complete_eights % 8\n\n        body_complete_eights = int(width * 8 * self.end / self.size)\n        body_bar_count = body_complete_eights // 8\n        body_eights_count = body_complete_eights % 8\n\n        # When start and end fall into the same cell, we ideally should render\n        # a symbol that's \"center-aligned\", but there is no good symbol in Unicode.\n        # In this case, we fall back to right-aligned block symbol for simplicity.\n\n        prefix = \" \" * prefix_bar_count\n        if prefix_eights_count:\n            prefix += BEGIN_BLOCK_ELEMENTS[prefix_eights_count]\n\n        body = FULL_BLOCK * body_bar_count\n        if body_eights_count:\n            body += END_BLOCK_ELEMENTS[body_eights_count]\n\n        suffix = \" \" * (width - len(body))\n\n        yield Segment(prefix + body[len(prefix) :] + suffix, self.style)\n        yield Segment.line()\n\n    def __rich_measure__(\n        self, console: Console, options: ConsoleOptions\n    ) -> Measurement:\n        return (\n            Measurement(self.width, self.width)\n            if self.width is not None\n            else Measurement(4, options.max_width)\n        )\n", "rich/traceback.py": "from __future__ import absolute_import\n\nimport linecache\nimport os\nimport platform\nimport sys\nfrom dataclasses import dataclass, field\nfrom traceback import walk_tb\nfrom types import ModuleType, TracebackType\nfrom typing import (\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom pygments.lexers import guess_lexer_for_filename\nfrom pygments.token import Comment, Keyword, Name, Number, Operator, String\nfrom pygments.token import Text as TextToken\nfrom pygments.token import Token\nfrom pygments.util import ClassNotFound\n\nfrom . import pretty\nfrom ._loop import loop_last\nfrom .columns import Columns\nfrom .console import Console, ConsoleOptions, ConsoleRenderable, RenderResult, group\nfrom .constrain import Constrain\nfrom .highlighter import RegexHighlighter, ReprHighlighter\nfrom .panel import Panel\nfrom .scope import render_scope\nfrom .style import Style\nfrom .syntax import Syntax\nfrom .text import Text\nfrom .theme import Theme\n\nWINDOWS = platform.system() == \"Windows\"\n\nLOCALS_MAX_LENGTH = 10\nLOCALS_MAX_STRING = 80\n\n\ndef install(\n    *,\n    console: Optional[Console] = None,\n    width: Optional[int] = 100,\n    extra_lines: int = 3,\n    theme: Optional[str] = None,\n    word_wrap: bool = False,\n    show_locals: bool = False,\n    locals_max_length: int = LOCALS_MAX_LENGTH,\n    locals_max_string: int = LOCALS_MAX_STRING,\n    locals_hide_dunder: bool = True,\n    locals_hide_sunder: Optional[bool] = None,\n    indent_guides: bool = True,\n    suppress: Iterable[Union[str, ModuleType]] = (),\n    max_frames: int = 100,\n) -> Callable[[Type[BaseException], BaseException, Optional[TracebackType]], Any]:\n    \"\"\"Install a rich traceback handler.\n\n    Once installed, any tracebacks will be printed with syntax highlighting and rich formatting.\n\n\n    Args:\n        console (Optional[Console], optional): Console to write exception to. Default uses internal Console instance.\n        width (Optional[int], optional): Width (in characters) of traceback. Defaults to 100.\n        extra_lines (int, optional): Extra lines of code. Defaults to 3.\n        theme (Optional[str], optional): Pygments theme to use in traceback. Defaults to ``None`` which will pick\n            a theme appropriate for the platform.\n        word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n        show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to 10.\n        locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n        locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n        locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n        indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n        suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n\n    Returns:\n        Callable: The previous exception handler that was replaced.\n\n    \"\"\"\n    traceback_console = Console(stderr=True) if console is None else console\n\n    locals_hide_sunder = (\n        True\n        if (traceback_console.is_jupyter and locals_hide_sunder is None)\n        else locals_hide_sunder\n    )\n\n    def excepthook(\n        type_: Type[BaseException],\n        value: BaseException,\n        traceback: Optional[TracebackType],\n    ) -> None:\n        traceback_console.print(\n            Traceback.from_exception(\n                type_,\n                value,\n                traceback,\n                width=width,\n                extra_lines=extra_lines,\n                theme=theme,\n                word_wrap=word_wrap,\n                show_locals=show_locals,\n                locals_max_length=locals_max_length,\n                locals_max_string=locals_max_string,\n                locals_hide_dunder=locals_hide_dunder,\n                locals_hide_sunder=bool(locals_hide_sunder),\n                indent_guides=indent_guides,\n                suppress=suppress,\n                max_frames=max_frames,\n            )\n        )\n\n    def ipy_excepthook_closure(ip: Any) -> None:  # pragma: no cover\n        tb_data = {}  # store information about showtraceback call\n        default_showtraceback = ip.showtraceback  # keep reference of default traceback\n\n        def ipy_show_traceback(*args: Any, **kwargs: Any) -> None:\n            \"\"\"wrap the default ip.showtraceback to store info for ip._showtraceback\"\"\"\n            nonlocal tb_data\n            tb_data = kwargs\n            default_showtraceback(*args, **kwargs)\n\n        def ipy_display_traceback(\n            *args: Any, is_syntax: bool = False, **kwargs: Any\n        ) -> None:\n            \"\"\"Internally called traceback from ip._showtraceback\"\"\"\n            nonlocal tb_data\n            exc_tuple = ip._get_exc_info()\n\n            # do not display trace on syntax error\n            tb: Optional[TracebackType] = None if is_syntax else exc_tuple[2]\n\n            # determine correct tb_offset\n            compiled = tb_data.get(\"running_compiled_code\", False)\n            tb_offset = tb_data.get(\"tb_offset\", 1 if compiled else 0)\n            # remove ipython internal frames from trace with tb_offset\n            for _ in range(tb_offset):\n                if tb is None:\n                    break\n                tb = tb.tb_next\n\n            excepthook(exc_tuple[0], exc_tuple[1], tb)\n            tb_data = {}  # clear data upon usage\n\n        # replace _showtraceback instead of showtraceback to allow ipython features such as debugging to work\n        # this is also what the ipython docs recommends to modify when subclassing InteractiveShell\n        ip._showtraceback = ipy_display_traceback\n        # add wrapper to capture tb_data\n        ip.showtraceback = ipy_show_traceback\n        ip.showsyntaxerror = lambda *args, **kwargs: ipy_display_traceback(\n            *args, is_syntax=True, **kwargs\n        )\n\n    try:  # pragma: no cover\n        # if within ipython, use customized traceback\n        ip = get_ipython()  # type: ignore[name-defined]\n        ipy_excepthook_closure(ip)\n        return sys.excepthook\n    except Exception:\n        # otherwise use default system hook\n        old_excepthook = sys.excepthook\n        sys.excepthook = excepthook\n        return old_excepthook\n\n\n@dataclass\nclass Frame:\n    filename: str\n    lineno: int\n    name: str\n    line: str = \"\"\n    locals: Optional[Dict[str, pretty.Node]] = None\n\n\n@dataclass\nclass _SyntaxError:\n    offset: int\n    filename: str\n    line: str\n    lineno: int\n    msg: str\n\n\n@dataclass\nclass Stack:\n    exc_type: str\n    exc_value: str\n    syntax_error: Optional[_SyntaxError] = None\n    is_cause: bool = False\n    frames: List[Frame] = field(default_factory=list)\n\n\n@dataclass\nclass Trace:\n    stacks: List[Stack]\n\n\nclass PathHighlighter(RegexHighlighter):\n    highlights = [r\"(?P<dim>.*/)(?P<bold>.+)\"]\n\n\nclass Traceback:\n    \"\"\"A Console renderable that renders a traceback.\n\n    Args:\n        trace (Trace, optional): A `Trace` object produced from `extract`. Defaults to None, which uses\n            the last exception.\n        width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.\n        extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n        theme (str, optional): Override pygments theme used in traceback.\n        word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n        show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n        locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to 10.\n        locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n        locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n        locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n        suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n        max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n\n    \"\"\"\n\n    LEXERS = {\n        \"\": \"text\",\n        \".py\": \"python\",\n        \".pxd\": \"cython\",\n        \".pyx\": \"cython\",\n        \".pxi\": \"pyrex\",\n    }\n\n    def __init__(\n        self,\n        trace: Optional[Trace] = None,\n        *,\n        width: Optional[int] = 100,\n        extra_lines: int = 3,\n        theme: Optional[str] = None,\n        word_wrap: bool = False,\n        show_locals: bool = False,\n        locals_max_length: int = LOCALS_MAX_LENGTH,\n        locals_max_string: int = LOCALS_MAX_STRING,\n        locals_hide_dunder: bool = True,\n        locals_hide_sunder: bool = False,\n        indent_guides: bool = True,\n        suppress: Iterable[Union[str, ModuleType]] = (),\n        max_frames: int = 100,\n    ):\n        if trace is None:\n            exc_type, exc_value, traceback = sys.exc_info()\n            if exc_type is None or exc_value is None or traceback is None:\n                raise ValueError(\n                    \"Value for 'trace' required if not called in except: block\"\n                )\n            trace = self.extract(\n                exc_type, exc_value, traceback, show_locals=show_locals\n            )\n        self.trace = trace\n        self.width = width\n        self.extra_lines = extra_lines\n        self.theme = Syntax.get_theme(theme or \"ansi_dark\")\n        self.word_wrap = word_wrap\n        self.show_locals = show_locals\n        self.indent_guides = indent_guides\n        self.locals_max_length = locals_max_length\n        self.locals_max_string = locals_max_string\n        self.locals_hide_dunder = locals_hide_dunder\n        self.locals_hide_sunder = locals_hide_sunder\n\n        self.suppress: Sequence[str] = []\n        for suppress_entity in suppress:\n            if not isinstance(suppress_entity, str):\n                assert (\n                    suppress_entity.__file__ is not None\n                ), f\"{suppress_entity!r} must be a module with '__file__' attribute\"\n                path = os.path.dirname(suppress_entity.__file__)\n            else:\n                path = suppress_entity\n            path = os.path.normpath(os.path.abspath(path))\n            self.suppress.append(path)\n        self.max_frames = max(4, max_frames) if max_frames > 0 else 0\n\n    @classmethod\n    def from_exception(\n        cls,\n        exc_type: Type[Any],\n        exc_value: BaseException,\n        traceback: Optional[TracebackType],\n        *,\n        width: Optional[int] = 100,\n        extra_lines: int = 3,\n        theme: Optional[str] = None,\n        word_wrap: bool = False,\n        show_locals: bool = False,\n        locals_max_length: int = LOCALS_MAX_LENGTH,\n        locals_max_string: int = LOCALS_MAX_STRING,\n        locals_hide_dunder: bool = True,\n        locals_hide_sunder: bool = False,\n        indent_guides: bool = True,\n        suppress: Iterable[Union[str, ModuleType]] = (),\n        max_frames: int = 100,\n    ) -> \"Traceback\":\n        \"\"\"Create a traceback from exception info\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback.\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n            suppress (Iterable[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n            max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n\n        Returns:\n            Traceback: A Traceback instance that may be printed.\n        \"\"\"\n        rich_traceback = cls.extract(\n            exc_type,\n            exc_value,\n            traceback,\n            show_locals=show_locals,\n            locals_max_length=locals_max_length,\n            locals_max_string=locals_max_string,\n            locals_hide_dunder=locals_hide_dunder,\n            locals_hide_sunder=locals_hide_sunder,\n        )\n\n        return cls(\n            rich_traceback,\n            width=width,\n            extra_lines=extra_lines,\n            theme=theme,\n            word_wrap=word_wrap,\n            show_locals=show_locals,\n            indent_guides=indent_guides,\n            locals_max_length=locals_max_length,\n            locals_max_string=locals_max_string,\n            locals_hide_dunder=locals_hide_dunder,\n            locals_hide_sunder=locals_hide_sunder,\n            suppress=suppress,\n            max_frames=max_frames,\n        )\n\n    @classmethod\n    def extract(\n        cls,\n        exc_type: Type[BaseException],\n        exc_value: BaseException,\n        traceback: Optional[TracebackType],\n        *,\n        show_locals: bool = False,\n        locals_max_length: int = LOCALS_MAX_LENGTH,\n        locals_max_string: int = LOCALS_MAX_STRING,\n        locals_hide_dunder: bool = True,\n        locals_hide_sunder: bool = False,\n    ) -> Trace:\n        \"\"\"Extract traceback information.\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n\n        Returns:\n            Trace: A Trace instance which you can use to construct a `Traceback`.\n        \"\"\"\n\n        stacks: List[Stack] = []\n        is_cause = False\n\n        from rich import _IMPORT_CWD\n\n        def safe_str(_object: Any) -> str:\n            \"\"\"Don't allow exceptions from __str__ to propagate.\"\"\"\n            try:\n                return str(_object)\n            except Exception:\n                return \"<exception str() failed>\"\n\n        while True:\n            stack = Stack(\n                exc_type=safe_str(exc_type.__name__),\n                exc_value=safe_str(exc_value),\n                is_cause=is_cause,\n            )\n\n            if isinstance(exc_value, SyntaxError):\n                stack.syntax_error = _SyntaxError(\n                    offset=exc_value.offset or 0,\n                    filename=exc_value.filename or \"?\",\n                    lineno=exc_value.lineno or 0,\n                    line=exc_value.text or \"\",\n                    msg=exc_value.msg,\n                )\n\n            stacks.append(stack)\n            append = stack.frames.append\n\n            def get_locals(\n                iter_locals: Iterable[Tuple[str, object]]\n            ) -> Iterable[Tuple[str, object]]:\n                \"\"\"Extract locals from an iterator of key pairs.\"\"\"\n                if not (locals_hide_dunder or locals_hide_sunder):\n                    yield from iter_locals\n                    return\n                for key, value in iter_locals:\n                    if locals_hide_dunder and key.startswith(\"__\"):\n                        continue\n                    if locals_hide_sunder and key.startswith(\"_\"):\n                        continue\n                    yield key, value\n\n            for frame_summary, line_no in walk_tb(traceback):\n                filename = frame_summary.f_code.co_filename\n                if filename and not filename.startswith(\"<\"):\n                    if not os.path.isabs(filename):\n                        filename = os.path.join(_IMPORT_CWD, filename)\n                if frame_summary.f_locals.get(\"_rich_traceback_omit\", False):\n                    continue\n\n                frame = Frame(\n                    filename=filename or \"?\",\n                    lineno=line_no,\n                    name=frame_summary.f_code.co_name,\n                    locals={\n                        key: pretty.traverse(\n                            value,\n                            max_length=locals_max_length,\n                            max_string=locals_max_string,\n                        )\n                        for key, value in get_locals(frame_summary.f_locals.items())\n                    }\n                    if show_locals\n                    else None,\n                )\n                append(frame)\n                if frame_summary.f_locals.get(\"_rich_traceback_guard\", False):\n                    del stack.frames[:]\n\n            cause = getattr(exc_value, \"__cause__\", None)\n            if cause:\n                exc_type = cause.__class__\n                exc_value = cause\n                # __traceback__ can be None, e.g. for exceptions raised by the\n                # 'multiprocessing' module\n                traceback = cause.__traceback__\n                is_cause = True\n                continue\n\n            cause = exc_value.__context__\n            if cause and not getattr(exc_value, \"__suppress_context__\", False):\n                exc_type = cause.__class__\n                exc_value = cause\n                traceback = cause.__traceback__\n                is_cause = False\n                continue\n            # No cover, code is reached but coverage doesn't recognize it.\n            break  # pragma: no cover\n\n        trace = Trace(stacks=stacks)\n        return trace\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        theme = self.theme\n        background_style = theme.get_background_style()\n        token_style = theme.get_style_for_token\n\n        traceback_theme = Theme(\n            {\n                \"pretty\": token_style(TextToken),\n                \"pygments.text\": token_style(Token),\n                \"pygments.string\": token_style(String),\n                \"pygments.function\": token_style(Name.Function),\n                \"pygments.number\": token_style(Number),\n                \"repr.indent\": token_style(Comment) + Style(dim=True),\n                \"repr.str\": token_style(String),\n                \"repr.brace\": token_style(TextToken) + Style(bold=True),\n                \"repr.number\": token_style(Number),\n                \"repr.bool_true\": token_style(Keyword.Constant),\n                \"repr.bool_false\": token_style(Keyword.Constant),\n                \"repr.none\": token_style(Keyword.Constant),\n                \"scope.border\": token_style(String.Delimiter),\n                \"scope.equals\": token_style(Operator),\n                \"scope.key\": token_style(Name),\n                \"scope.key.special\": token_style(Name.Constant) + Style(dim=True),\n            },\n            inherit=False,\n        )\n\n        highlighter = ReprHighlighter()\n        for last, stack in loop_last(reversed(self.trace.stacks)):\n            if stack.frames:\n                stack_renderable: ConsoleRenderable = Panel(\n                    self._render_stack(stack),\n                    title=\"[traceback.title]Traceback [dim](most recent call last)\",\n                    style=background_style,\n                    border_style=\"traceback.border\",\n                    expand=True,\n                    padding=(0, 1),\n                )\n                stack_renderable = Constrain(stack_renderable, self.width)\n                with console.use_theme(traceback_theme):\n                    yield stack_renderable\n            if stack.syntax_error is not None:\n                with console.use_theme(traceback_theme):\n                    yield Constrain(\n                        Panel(\n                            self._render_syntax_error(stack.syntax_error),\n                            style=background_style,\n                            border_style=\"traceback.border.syntax_error\",\n                            expand=True,\n                            padding=(0, 1),\n                            width=self.width,\n                        ),\n                        self.width,\n                    )\n                yield Text.assemble(\n                    (f\"{stack.exc_type}: \", \"traceback.exc_type\"),\n                    highlighter(stack.syntax_error.msg),\n                )\n            elif stack.exc_value:\n                yield Text.assemble(\n                    (f\"{stack.exc_type}: \", \"traceback.exc_type\"),\n                    highlighter(stack.exc_value),\n                )\n            else:\n                yield Text.assemble((f\"{stack.exc_type}\", \"traceback.exc_type\"))\n\n            if not last:\n                if stack.is_cause:\n                    yield Text.from_markup(\n                        \"\\n[i]The above exception was the direct cause of the following exception:\\n\",\n                    )\n                else:\n                    yield Text.from_markup(\n                        \"\\n[i]During handling of the above exception, another exception occurred:\\n\",\n                    )\n\n    @group()\n    def _render_syntax_error(self, syntax_error: _SyntaxError) -> RenderResult:\n        highlighter = ReprHighlighter()\n        path_highlighter = PathHighlighter()\n        if syntax_error.filename != \"<stdin>\":\n            if os.path.exists(syntax_error.filename):\n                text = Text.assemble(\n                    (f\" {syntax_error.filename}\", \"pygments.string\"),\n                    (\":\", \"pygments.text\"),\n                    (str(syntax_error.lineno), \"pygments.number\"),\n                    style=\"pygments.text\",\n                )\n                yield path_highlighter(text)\n        syntax_error_text = highlighter(syntax_error.line.rstrip())\n        syntax_error_text.no_wrap = True\n        offset = min(syntax_error.offset - 1, len(syntax_error_text))\n        syntax_error_text.stylize(\"bold underline\", offset, offset)\n        syntax_error_text += Text.from_markup(\n            \"\\n\" + \" \" * offset + \"[traceback.offset]\u25b2[/]\",\n            style=\"pygments.text\",\n        )\n        yield syntax_error_text\n\n    @classmethod\n    def _guess_lexer(cls, filename: str, code: str) -> str:\n        ext = os.path.splitext(filename)[-1]\n        if not ext:\n            # No extension, look at first line to see if it is a hashbang\n            # Note, this is an educated guess and not a guarantee\n            # If it fails, the only downside is that the code is highlighted strangely\n            new_line_index = code.index(\"\\n\")\n            first_line = code[:new_line_index] if new_line_index != -1 else code\n            if first_line.startswith(\"#!\") and \"python\" in first_line.lower():\n                return \"python\"\n        try:\n            return cls.LEXERS.get(ext) or guess_lexer_for_filename(filename, code).name\n        except ClassNotFound:\n            return \"text\"\n\n    @group()\n    def _render_stack(self, stack: Stack) -> RenderResult:\n        path_highlighter = PathHighlighter()\n        theme = self.theme\n\n        def read_code(filename: str) -> str:\n            \"\"\"Read files, and cache results on filename.\n\n            Args:\n                filename (str): Filename to read\n\n            Returns:\n                str: Contents of file\n            \"\"\"\n            return \"\".join(linecache.getlines(filename))\n\n        def render_locals(frame: Frame) -> Iterable[ConsoleRenderable]:\n            if frame.locals:\n                yield render_scope(\n                    frame.locals,\n                    title=\"locals\",\n                    indent_guides=self.indent_guides,\n                    max_length=self.locals_max_length,\n                    max_string=self.locals_max_string,\n                )\n\n        exclude_frames: Optional[range] = None\n        if self.max_frames != 0:\n            exclude_frames = range(\n                self.max_frames // 2,\n                len(stack.frames) - self.max_frames // 2,\n            )\n\n        excluded = False\n        for frame_index, frame in enumerate(stack.frames):\n            if exclude_frames and frame_index in exclude_frames:\n                excluded = True\n                continue\n\n            if excluded:\n                assert exclude_frames is not None\n                yield Text(\n                    f\"\\n... {len(exclude_frames)} frames hidden ...\",\n                    justify=\"center\",\n                    style=\"traceback.error\",\n                )\n                excluded = False\n\n            first = frame_index == 0\n            frame_filename = frame.filename\n            suppressed = any(frame_filename.startswith(path) for path in self.suppress)\n\n            if os.path.exists(frame.filename):\n                text = Text.assemble(\n                    path_highlighter(Text(frame.filename, style=\"pygments.string\")),\n                    (\":\", \"pygments.text\"),\n                    (str(frame.lineno), \"pygments.number\"),\n                    \" in \",\n                    (frame.name, \"pygments.function\"),\n                    style=\"pygments.text\",\n                )\n            else:\n                text = Text.assemble(\n                    \"in \",\n                    (frame.name, \"pygments.function\"),\n                    (\":\", \"pygments.text\"),\n                    (str(frame.lineno), \"pygments.number\"),\n                    style=\"pygments.text\",\n                )\n            if not frame.filename.startswith(\"<\") and not first:\n                yield \"\"\n            yield text\n            if frame.filename.startswith(\"<\"):\n                yield from render_locals(frame)\n                continue\n            if not suppressed:\n                try:\n                    code = read_code(frame.filename)\n                    if not code:\n                        # code may be an empty string if the file doesn't exist, OR\n                        # if the traceback filename is generated dynamically\n                        continue\n                    lexer_name = self._guess_lexer(frame.filename, code)\n                    syntax = Syntax(\n                        code,\n                        lexer_name,\n                        theme=theme,\n                        line_numbers=True,\n                        line_range=(\n                            frame.lineno - self.extra_lines,\n                            frame.lineno + self.extra_lines,\n                        ),\n                        highlight_lines={frame.lineno},\n                        word_wrap=self.word_wrap,\n                        code_width=88,\n                        indent_guides=self.indent_guides,\n                        dedent=False,\n                    )\n                    yield \"\"\n                except Exception as error:\n                    yield Text.assemble(\n                        (f\"\\n{error}\", \"traceback.error\"),\n                    )\n                else:\n                    yield (\n                        Columns(\n                            [\n                                syntax,\n                                *render_locals(frame),\n                            ],\n                            padding=1,\n                        )\n                        if frame.locals\n                        else syntax\n                    )\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from .console import Console\n\n    console = Console()\n    import sys\n\n    def bar(a: Any) -> None:  # \u8fd9\u662f\u5bf9\u4e9a\u6d32\u8bed\u8a00\u652f\u6301\u7684\u6d4b\u8bd5\u3002\u9762\u5bf9\u6a21\u68f1\u4e24\u53ef\u7684\u60f3\u6cd5\uff0c\u62d2\u7edd\u731c\u6d4b\u7684\u8bf1\u60d1\n        one = 1\n        print(one / a)\n\n    def foo(a: Any) -> None:\n        _rich_traceback_guard = True\n        zed = {\n            \"characters\": {\n                \"Paul Atreides\",\n                \"Vladimir Harkonnen\",\n                \"Thufir Hawat\",\n                \"Duncan Idaho\",\n            },\n            \"atomic_types\": (None, False, True),\n        }\n        bar(a)\n\n    def error() -> None:\n        try:\n            try:\n                foo(0)\n            except:\n                slfkjsldkfj  # type: ignore[name-defined]\n        except:\n            console.print_exception(show_locals=True)\n\n    error()\n", "rich/_cell_widths.py": "# Auto generated by make_terminal_widths.py\n\nCELL_WIDTHS = [\n    (0, 0, 0),\n    (1, 31, -1),\n    (127, 159, -1),\n    (173, 173, 0),\n    (768, 879, 0),\n    (1155, 1161, 0),\n    (1425, 1469, 0),\n    (1471, 1471, 0),\n    (1473, 1474, 0),\n    (1476, 1477, 0),\n    (1479, 1479, 0),\n    (1536, 1541, 0),\n    (1552, 1562, 0),\n    (1564, 1564, 0),\n    (1611, 1631, 0),\n    (1648, 1648, 0),\n    (1750, 1757, 0),\n    (1759, 1764, 0),\n    (1767, 1768, 0),\n    (1770, 1773, 0),\n    (1807, 1807, 0),\n    (1809, 1809, 0),\n    (1840, 1866, 0),\n    (1958, 1968, 0),\n    (2027, 2035, 0),\n    (2045, 2045, 0),\n    (2070, 2073, 0),\n    (2075, 2083, 0),\n    (2085, 2087, 0),\n    (2089, 2093, 0),\n    (2137, 2139, 0),\n    (2192, 2193, 0),\n    (2200, 2207, 0),\n    (2250, 2307, 0),\n    (2362, 2364, 0),\n    (2366, 2383, 0),\n    (2385, 2391, 0),\n    (2402, 2403, 0),\n    (2433, 2435, 0),\n    (2492, 2492, 0),\n    (2494, 2500, 0),\n    (2503, 2504, 0),\n    (2507, 2509, 0),\n    (2519, 2519, 0),\n    (2530, 2531, 0),\n    (2558, 2558, 0),\n    (2561, 2563, 0),\n    (2620, 2620, 0),\n    (2622, 2626, 0),\n    (2631, 2632, 0),\n    (2635, 2637, 0),\n    (2641, 2641, 0),\n    (2672, 2673, 0),\n    (2677, 2677, 0),\n    (2689, 2691, 0),\n    (2748, 2748, 0),\n    (2750, 2757, 0),\n    (2759, 2761, 0),\n    (2763, 2765, 0),\n    (2786, 2787, 0),\n    (2810, 2815, 0),\n    (2817, 2819, 0),\n    (2876, 2876, 0),\n    (2878, 2884, 0),\n    (2887, 2888, 0),\n    (2891, 2893, 0),\n    (2901, 2903, 0),\n    (2914, 2915, 0),\n    (2946, 2946, 0),\n    (3006, 3010, 0),\n    (3014, 3016, 0),\n    (3018, 3021, 0),\n    (3031, 3031, 0),\n    (3072, 3076, 0),\n    (3132, 3132, 0),\n    (3134, 3140, 0),\n    (3142, 3144, 0),\n    (3146, 3149, 0),\n    (3157, 3158, 0),\n    (3170, 3171, 0),\n    (3201, 3203, 0),\n    (3260, 3260, 0),\n    (3262, 3268, 0),\n    (3270, 3272, 0),\n    (3274, 3277, 0),\n    (3285, 3286, 0),\n    (3298, 3299, 0),\n    (3315, 3315, 0),\n    (3328, 3331, 0),\n    (3387, 3388, 0),\n    (3390, 3396, 0),\n    (3398, 3400, 0),\n    (3402, 3405, 0),\n    (3415, 3415, 0),\n    (3426, 3427, 0),\n    (3457, 3459, 0),\n    (3530, 3530, 0),\n    (3535, 3540, 0),\n    (3542, 3542, 0),\n    (3544, 3551, 0),\n    (3570, 3571, 0),\n    (3633, 3633, 0),\n    (3636, 3642, 0),\n    (3655, 3662, 0),\n    (3761, 3761, 0),\n    (3764, 3772, 0),\n    (3784, 3790, 0),\n    (3864, 3865, 0),\n    (3893, 3893, 0),\n    (3895, 3895, 0),\n    (3897, 3897, 0),\n    (3902, 3903, 0),\n    (3953, 3972, 0),\n    (3974, 3975, 0),\n    (3981, 3991, 0),\n    (3993, 4028, 0),\n    (4038, 4038, 0),\n    (4139, 4158, 0),\n    (4182, 4185, 0),\n    (4190, 4192, 0),\n    (4194, 4196, 0),\n    (4199, 4205, 0),\n    (4209, 4212, 0),\n    (4226, 4237, 0),\n    (4239, 4239, 0),\n    (4250, 4253, 0),\n    (4352, 4447, 2),\n    (4448, 4607, 0),\n    (4957, 4959, 0),\n    (5906, 5909, 0),\n    (5938, 5940, 0),\n    (5970, 5971, 0),\n    (6002, 6003, 0),\n    (6068, 6099, 0),\n    (6109, 6109, 0),\n    (6155, 6159, 0),\n    (6277, 6278, 0),\n    (6313, 6313, 0),\n    (6432, 6443, 0),\n    (6448, 6459, 0),\n    (6679, 6683, 0),\n    (6741, 6750, 0),\n    (6752, 6780, 0),\n    (6783, 6783, 0),\n    (6832, 6862, 0),\n    (6912, 6916, 0),\n    (6964, 6980, 0),\n    (7019, 7027, 0),\n    (7040, 7042, 0),\n    (7073, 7085, 0),\n    (7142, 7155, 0),\n    (7204, 7223, 0),\n    (7376, 7378, 0),\n    (7380, 7400, 0),\n    (7405, 7405, 0),\n    (7412, 7412, 0),\n    (7415, 7417, 0),\n    (7616, 7679, 0),\n    (8203, 8207, 0),\n    (8232, 8238, 0),\n    (8288, 8292, 0),\n    (8294, 8303, 0),\n    (8400, 8432, 0),\n    (8986, 8987, 2),\n    (9001, 9002, 2),\n    (9193, 9196, 2),\n    (9200, 9200, 2),\n    (9203, 9203, 2),\n    (9725, 9726, 2),\n    (9748, 9749, 2),\n    (9800, 9811, 2),\n    (9855, 9855, 2),\n    (9875, 9875, 2),\n    (9889, 9889, 2),\n    (9898, 9899, 2),\n    (9917, 9918, 2),\n    (9924, 9925, 2),\n    (9934, 9934, 2),\n    (9940, 9940, 2),\n    (9962, 9962, 2),\n    (9970, 9971, 2),\n    (9973, 9973, 2),\n    (9978, 9978, 2),\n    (9981, 9981, 2),\n    (9989, 9989, 2),\n    (9994, 9995, 2),\n    (10024, 10024, 2),\n    (10060, 10060, 2),\n    (10062, 10062, 2),\n    (10067, 10069, 2),\n    (10071, 10071, 2),\n    (10133, 10135, 2),\n    (10160, 10160, 2),\n    (10175, 10175, 2),\n    (11035, 11036, 2),\n    (11088, 11088, 2),\n    (11093, 11093, 2),\n    (11503, 11505, 0),\n    (11647, 11647, 0),\n    (11744, 11775, 0),\n    (11904, 11929, 2),\n    (11931, 12019, 2),\n    (12032, 12245, 2),\n    (12272, 12329, 2),\n    (12330, 12335, 0),\n    (12336, 12350, 2),\n    (12353, 12438, 2),\n    (12441, 12442, 0),\n    (12443, 12543, 2),\n    (12549, 12591, 2),\n    (12593, 12686, 2),\n    (12688, 12771, 2),\n    (12783, 12830, 2),\n    (12832, 12871, 2),\n    (12880, 19903, 2),\n    (19968, 42124, 2),\n    (42128, 42182, 2),\n    (42607, 42610, 0),\n    (42612, 42621, 0),\n    (42654, 42655, 0),\n    (42736, 42737, 0),\n    (43010, 43010, 0),\n    (43014, 43014, 0),\n    (43019, 43019, 0),\n    (43043, 43047, 0),\n    (43052, 43052, 0),\n    (43136, 43137, 0),\n    (43188, 43205, 0),\n    (43232, 43249, 0),\n    (43263, 43263, 0),\n    (43302, 43309, 0),\n    (43335, 43347, 0),\n    (43360, 43388, 2),\n    (43392, 43395, 0),\n    (43443, 43456, 0),\n    (43493, 43493, 0),\n    (43561, 43574, 0),\n    (43587, 43587, 0),\n    (43596, 43597, 0),\n    (43643, 43645, 0),\n    (43696, 43696, 0),\n    (43698, 43700, 0),\n    (43703, 43704, 0),\n    (43710, 43711, 0),\n    (43713, 43713, 0),\n    (43755, 43759, 0),\n    (43765, 43766, 0),\n    (44003, 44010, 0),\n    (44012, 44013, 0),\n    (44032, 55203, 2),\n    (55216, 55295, 0),\n    (63744, 64255, 2),\n    (64286, 64286, 0),\n    (65024, 65039, 0),\n    (65040, 65049, 2),\n    (65056, 65071, 0),\n    (65072, 65106, 2),\n    (65108, 65126, 2),\n    (65128, 65131, 2),\n    (65279, 65279, 0),\n    (65281, 65376, 2),\n    (65504, 65510, 2),\n    (65529, 65531, 0),\n    (66045, 66045, 0),\n    (66272, 66272, 0),\n    (66422, 66426, 0),\n    (68097, 68099, 0),\n    (68101, 68102, 0),\n    (68108, 68111, 0),\n    (68152, 68154, 0),\n    (68159, 68159, 0),\n    (68325, 68326, 0),\n    (68900, 68903, 0),\n    (69291, 69292, 0),\n    (69373, 69375, 0),\n    (69446, 69456, 0),\n    (69506, 69509, 0),\n    (69632, 69634, 0),\n    (69688, 69702, 0),\n    (69744, 69744, 0),\n    (69747, 69748, 0),\n    (69759, 69762, 0),\n    (69808, 69818, 0),\n    (69821, 69821, 0),\n    (69826, 69826, 0),\n    (69837, 69837, 0),\n    (69888, 69890, 0),\n    (69927, 69940, 0),\n    (69957, 69958, 0),\n    (70003, 70003, 0),\n    (70016, 70018, 0),\n    (70067, 70080, 0),\n    (70089, 70092, 0),\n    (70094, 70095, 0),\n    (70188, 70199, 0),\n    (70206, 70206, 0),\n    (70209, 70209, 0),\n    (70367, 70378, 0),\n    (70400, 70403, 0),\n    (70459, 70460, 0),\n    (70462, 70468, 0),\n    (70471, 70472, 0),\n    (70475, 70477, 0),\n    (70487, 70487, 0),\n    (70498, 70499, 0),\n    (70502, 70508, 0),\n    (70512, 70516, 0),\n    (70709, 70726, 0),\n    (70750, 70750, 0),\n    (70832, 70851, 0),\n    (71087, 71093, 0),\n    (71096, 71104, 0),\n    (71132, 71133, 0),\n    (71216, 71232, 0),\n    (71339, 71351, 0),\n    (71453, 71467, 0),\n    (71724, 71738, 0),\n    (71984, 71989, 0),\n    (71991, 71992, 0),\n    (71995, 71998, 0),\n    (72000, 72000, 0),\n    (72002, 72003, 0),\n    (72145, 72151, 0),\n    (72154, 72160, 0),\n    (72164, 72164, 0),\n    (72193, 72202, 0),\n    (72243, 72249, 0),\n    (72251, 72254, 0),\n    (72263, 72263, 0),\n    (72273, 72283, 0),\n    (72330, 72345, 0),\n    (72751, 72758, 0),\n    (72760, 72767, 0),\n    (72850, 72871, 0),\n    (72873, 72886, 0),\n    (73009, 73014, 0),\n    (73018, 73018, 0),\n    (73020, 73021, 0),\n    (73023, 73029, 0),\n    (73031, 73031, 0),\n    (73098, 73102, 0),\n    (73104, 73105, 0),\n    (73107, 73111, 0),\n    (73459, 73462, 0),\n    (73472, 73473, 0),\n    (73475, 73475, 0),\n    (73524, 73530, 0),\n    (73534, 73538, 0),\n    (78896, 78912, 0),\n    (78919, 78933, 0),\n    (92912, 92916, 0),\n    (92976, 92982, 0),\n    (94031, 94031, 0),\n    (94033, 94087, 0),\n    (94095, 94098, 0),\n    (94176, 94179, 2),\n    (94180, 94180, 0),\n    (94192, 94193, 0),\n    (94208, 100343, 2),\n    (100352, 101589, 2),\n    (101632, 101640, 2),\n    (110576, 110579, 2),\n    (110581, 110587, 2),\n    (110589, 110590, 2),\n    (110592, 110882, 2),\n    (110898, 110898, 2),\n    (110928, 110930, 2),\n    (110933, 110933, 2),\n    (110948, 110951, 2),\n    (110960, 111355, 2),\n    (113821, 113822, 0),\n    (113824, 113827, 0),\n    (118528, 118573, 0),\n    (118576, 118598, 0),\n    (119141, 119145, 0),\n    (119149, 119170, 0),\n    (119173, 119179, 0),\n    (119210, 119213, 0),\n    (119362, 119364, 0),\n    (121344, 121398, 0),\n    (121403, 121452, 0),\n    (121461, 121461, 0),\n    (121476, 121476, 0),\n    (121499, 121503, 0),\n    (121505, 121519, 0),\n    (122880, 122886, 0),\n    (122888, 122904, 0),\n    (122907, 122913, 0),\n    (122915, 122916, 0),\n    (122918, 122922, 0),\n    (123023, 123023, 0),\n    (123184, 123190, 0),\n    (123566, 123566, 0),\n    (123628, 123631, 0),\n    (124140, 124143, 0),\n    (125136, 125142, 0),\n    (125252, 125258, 0),\n    (126980, 126980, 2),\n    (127183, 127183, 2),\n    (127374, 127374, 2),\n    (127377, 127386, 2),\n    (127488, 127490, 2),\n    (127504, 127547, 2),\n    (127552, 127560, 2),\n    (127568, 127569, 2),\n    (127584, 127589, 2),\n    (127744, 127776, 2),\n    (127789, 127797, 2),\n    (127799, 127868, 2),\n    (127870, 127891, 2),\n    (127904, 127946, 2),\n    (127951, 127955, 2),\n    (127968, 127984, 2),\n    (127988, 127988, 2),\n    (127992, 127994, 2),\n    (127995, 127999, 0),\n    (128000, 128062, 2),\n    (128064, 128064, 2),\n    (128066, 128252, 2),\n    (128255, 128317, 2),\n    (128331, 128334, 2),\n    (128336, 128359, 2),\n    (128378, 128378, 2),\n    (128405, 128406, 2),\n    (128420, 128420, 2),\n    (128507, 128591, 2),\n    (128640, 128709, 2),\n    (128716, 128716, 2),\n    (128720, 128722, 2),\n    (128725, 128727, 2),\n    (128732, 128735, 2),\n    (128747, 128748, 2),\n    (128756, 128764, 2),\n    (128992, 129003, 2),\n    (129008, 129008, 2),\n    (129292, 129338, 2),\n    (129340, 129349, 2),\n    (129351, 129535, 2),\n    (129648, 129660, 2),\n    (129664, 129672, 2),\n    (129680, 129725, 2),\n    (129727, 129733, 2),\n    (129742, 129755, 2),\n    (129760, 129768, 2),\n    (129776, 129784, 2),\n    (131072, 196605, 2),\n    (196608, 262141, 2),\n    (917505, 917505, 0),\n    (917536, 917631, 0),\n    (917760, 917999, 0),\n]\n", "rich/tree.py": "from typing import Iterator, List, Optional, Tuple\n\nfrom ._loop import loop_first, loop_last\nfrom .console import Console, ConsoleOptions, RenderableType, RenderResult\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\nfrom .segment import Segment\nfrom .style import Style, StyleStack, StyleType\nfrom .styled import Styled\n\n\nclass Tree(JupyterMixin):\n    \"\"\"A renderable for a tree structure.\n\n    Args:\n        label (RenderableType): The renderable or str for the tree label.\n        style (StyleType, optional): Style of this tree. Defaults to \"tree\".\n        guide_style (StyleType, optional): Style of the guide lines. Defaults to \"tree.line\".\n        expanded (bool, optional): Also display children. Defaults to True.\n        highlight (bool, optional): Highlight renderable (if str). Defaults to False.\n    \"\"\"\n\n    def __init__(\n        self,\n        label: RenderableType,\n        *,\n        style: StyleType = \"tree\",\n        guide_style: StyleType = \"tree.line\",\n        expanded: bool = True,\n        highlight: bool = False,\n        hide_root: bool = False,\n    ) -> None:\n        self.label = label\n        self.style = style\n        self.guide_style = guide_style\n        self.children: List[Tree] = []\n        self.expanded = expanded\n        self.highlight = highlight\n        self.hide_root = hide_root\n\n    def add(\n        self,\n        label: RenderableType,\n        *,\n        style: Optional[StyleType] = None,\n        guide_style: Optional[StyleType] = None,\n        expanded: bool = True,\n        highlight: Optional[bool] = False,\n    ) -> \"Tree\":\n        \"\"\"Add a child tree.\n\n        Args:\n            label (RenderableType): The renderable or str for the tree label.\n            style (StyleType, optional): Style of this tree. Defaults to \"tree\".\n            guide_style (StyleType, optional): Style of the guide lines. Defaults to \"tree.line\".\n            expanded (bool, optional): Also display children. Defaults to True.\n            highlight (Optional[bool], optional): Highlight renderable (if str). Defaults to False.\n\n        Returns:\n            Tree: A new child Tree, which may be further modified.\n        \"\"\"\n        node = Tree(\n            label,\n            style=self.style if style is None else style,\n            guide_style=self.guide_style if guide_style is None else guide_style,\n            expanded=expanded,\n            highlight=self.highlight if highlight is None else highlight,\n        )\n        self.children.append(node)\n        return node\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        stack: List[Iterator[Tuple[bool, Tree]]] = []\n        pop = stack.pop\n        push = stack.append\n        new_line = Segment.line()\n\n        get_style = console.get_style\n        null_style = Style.null()\n        guide_style = get_style(self.guide_style, default=\"\") or null_style\n        SPACE, CONTINUE, FORK, END = range(4)\n\n        ASCII_GUIDES = (\"    \", \"|   \", \"+-- \", \"`-- \")\n        TREE_GUIDES = [\n            (\"    \", \"\u2502   \", \"\u251c\u2500\u2500 \", \"\u2514\u2500\u2500 \"),\n            (\"    \", \"\u2503   \", \"\u2523\u2501\u2501 \", \"\u2517\u2501\u2501 \"),\n            (\"    \", \"\u2551   \", \"\u2560\u2550\u2550 \", \"\u255a\u2550\u2550 \"),\n        ]\n        _Segment = Segment\n\n        def make_guide(index: int, style: Style) -> Segment:\n            \"\"\"Make a Segment for a level of the guide lines.\"\"\"\n            if options.ascii_only:\n                line = ASCII_GUIDES[index]\n            else:\n                guide = 1 if style.bold else (2 if style.underline2 else 0)\n                line = TREE_GUIDES[0 if options.legacy_windows else guide][index]\n            return _Segment(line, style)\n\n        levels: List[Segment] = [make_guide(CONTINUE, guide_style)]\n        push(iter(loop_last([self])))\n\n        guide_style_stack = StyleStack(get_style(self.guide_style))\n        style_stack = StyleStack(get_style(self.style))\n        remove_guide_styles = Style(bold=False, underline2=False)\n\n        depth = 0\n\n        while stack:\n            stack_node = pop()\n            try:\n                last, node = next(stack_node)\n            except StopIteration:\n                levels.pop()\n                if levels:\n                    guide_style = levels[-1].style or null_style\n                    levels[-1] = make_guide(FORK, guide_style)\n                    guide_style_stack.pop()\n                    style_stack.pop()\n                continue\n            push(stack_node)\n            if last:\n                levels[-1] = make_guide(END, levels[-1].style or null_style)\n\n            guide_style = guide_style_stack.current + get_style(node.guide_style)\n            style = style_stack.current + get_style(node.style)\n            prefix = levels[(2 if self.hide_root else 1) :]\n            renderable_lines = console.render_lines(\n                Styled(node.label, style),\n                options.update(\n                    width=options.max_width\n                    - sum(level.cell_length for level in prefix),\n                    highlight=self.highlight,\n                    height=None,\n                ),\n                pad=options.justify is not None,\n            )\n\n            if not (depth == 0 and self.hide_root):\n                for first, line in loop_first(renderable_lines):\n                    if prefix:\n                        yield from _Segment.apply_style(\n                            prefix,\n                            style.background_style,\n                            post_style=remove_guide_styles,\n                        )\n                    yield from line\n                    yield new_line\n                    if first and prefix:\n                        prefix[-1] = make_guide(\n                            SPACE if last else CONTINUE, prefix[-1].style or null_style\n                        )\n\n            if node.expanded and node.children:\n                levels[-1] = make_guide(\n                    SPACE if last else CONTINUE, levels[-1].style or null_style\n                )\n                levels.append(\n                    make_guide(END if len(node.children) == 1 else FORK, guide_style)\n                )\n                style_stack.push(get_style(node.style))\n                guide_style_stack.push(get_style(node.guide_style))\n                push(iter(loop_last(node.children)))\n                depth += 1\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        stack: List[Iterator[Tree]] = [iter([self])]\n        pop = stack.pop\n        push = stack.append\n        minimum = 0\n        maximum = 0\n        measure = Measurement.get\n        level = 0\n        while stack:\n            iter_tree = pop()\n            try:\n                tree = next(iter_tree)\n            except StopIteration:\n                level -= 1\n                continue\n            push(iter_tree)\n            min_measure, max_measure = measure(console, options, tree.label)\n            indent = level * 4\n            minimum = max(min_measure + indent, minimum)\n            maximum = max(max_measure + indent, maximum)\n            if tree.expanded and tree.children:\n                push(iter(tree.children))\n                level += 1\n        return Measurement(minimum, maximum)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from rich.console import Group\n    from rich.markdown import Markdown\n    from rich.panel import Panel\n    from rich.syntax import Syntax\n    from rich.table import Table\n\n    table = Table(row_styles=[\"\", \"dim\"])\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    code = \"\"\"\\\nclass Segment(NamedTuple):\n    text: str = \"\"\n    style: Optional[Style] = None\n    is_control: bool = False\n\"\"\"\n    syntax = Syntax(code, \"python\", theme=\"monokai\", line_numbers=True)\n\n    markdown = Markdown(\n        \"\"\"\\\n### example.md\n> Hello, World!\n>\n> Markdown _all_ the things\n\"\"\"\n    )\n\n    root = Tree(\"\ud83c\udf32 [b green]Rich Tree\", highlight=True, hide_root=True)\n\n    node = root.add(\":file_folder: Renderables\", guide_style=\"red\")\n    simple_node = node.add(\":file_folder: [bold yellow]Atomic\", guide_style=\"uu green\")\n    simple_node.add(Group(\"\ud83d\udcc4 Syntax\", syntax))\n    simple_node.add(Group(\"\ud83d\udcc4 Markdown\", Panel(markdown, border_style=\"green\")))\n\n    containers_node = node.add(\n        \":file_folder: [bold magenta]Containers\", guide_style=\"bold magenta\"\n    )\n    containers_node.expanded = True\n    panel = Panel.fit(\"Just a panel\", border_style=\"red\")\n    containers_node.add(Group(\"\ud83d\udcc4 Panels\", panel))\n\n    containers_node.add(Group(\"\ud83d\udcc4 [b magenta]Table\", table))\n\n    console = Console()\n\n    console.print(root)\n", "rich/constrain.py": "from typing import Optional, TYPE_CHECKING\n\nfrom .jupyter import JupyterMixin\nfrom .measure import Measurement\n\nif TYPE_CHECKING:\n    from .console import Console, ConsoleOptions, RenderableType, RenderResult\n\n\nclass Constrain(JupyterMixin):\n    \"\"\"Constrain the width of a renderable to a given number of characters.\n\n    Args:\n        renderable (RenderableType): A renderable object.\n        width (int, optional): The maximum width (in characters) to render. Defaults to 80.\n    \"\"\"\n\n    def __init__(self, renderable: \"RenderableType\", width: Optional[int] = 80) -> None:\n        self.renderable = renderable\n        self.width = width\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        if self.width is None:\n            yield self.renderable\n        else:\n            child_options = options.update_width(min(self.width, options.max_width))\n            yield from console.render(self.renderable, child_options)\n\n    def __rich_measure__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"Measurement\":\n        if self.width is not None:\n            options = options.update_width(self.width)\n        measurement = Measurement.get(console, options, self.renderable)\n        return measurement\n", "docs/source/conf.py": "# Configuration file for the Sphinx documentation builder.\n#\n# This file only contains a selection of the most common options. For a full\n# list see the documentation:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\n# import os\n# import sys\n# sys.path.insert(0, os.path.abspath('.'))\n\n\n# -- Project information -----------------------------------------------------\n\nimport sys\n\nimport sphinx_rtd_theme\n\nif sys.version_info >= (3, 8):\n    from importlib.metadata import Distribution\nelse:\n    from importlib_metadata import Distribution\n\nhtml_theme = \"sphinx_rtd_theme\"\n\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\nproject = \"Rich\"\ncopyright = \"Will McGugan\"\nauthor = \"Will McGugan\"\n\n# The full version, including alpha/beta/rc tags\nrelease = Distribution.from_name(\"rich\").version\n\n\n# -- General configuration ---------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinx.ext.autosectionlabel\",\n    \"sphinx_copybutton\",\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"_templates\"]\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\n# html_theme = \"alabaster\"\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = [\"_static\"]\n\nintersphinx_mapping = {\"python\": (\"http://docs.python.org/3\", None)}\n\nautodoc_typehints = \"description\"\n\nhtml_css_files = [\n    \"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/fira_code.min.css\"\n]\n", "tests/test_syntax.py": "import io\nimport os\nimport sys\nimport tempfile\n\nimport pytest\nfrom pygments.lexers import PythonLexer\n\nfrom rich.measure import Measurement\nfrom rich.panel import Panel\nfrom rich.style import Style\nfrom rich.syntax import (\n    ANSISyntaxTheme,\n    Color,\n    Console,\n    PygmentsSyntaxTheme,\n    Syntax,\n    _SyntaxHighlightRange,\n)\n\nfrom .render import render\n\nif sys.version_info >= (3, 8):\n    from importlib.metadata import Distribution\nelse:\n    from importlib_metadata import Distribution\n\nPYGMENTS_VERSION = Distribution.from_name(\"pygments\").version\nOLD_PYGMENTS = PYGMENTS_VERSION == \"2.13.0\"\n\nCODE = '''\\\ndef loop_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value'''\n\n\ndef test_blank_lines():\n    code = \"\\n\\nimport this\\n\\n\"\n    syntax = Syntax(\n        code, lexer=\"python\", theme=\"ascii_light\", code_width=30, line_numbers=True\n    )\n    result = render(syntax)\n    print(repr(result))\n    assert (\n        result\n        == \"\\x1b[1;38;2;24;24;24;48;2;248;248;248m  \\x1b[0m\\x1b[38;2;173;173;173;48;2;248;248;248m1 \\x1b[0m\\x1b[48;2;248;248;248m                              \\x1b[0m\\n\\x1b[1;38;2;24;24;24;48;2;248;248;248m  \\x1b[0m\\x1b[38;2;173;173;173;48;2;248;248;248m2 \\x1b[0m\\x1b[48;2;248;248;248m                              \\x1b[0m\\n\\x1b[1;38;2;24;24;24;48;2;248;248;248m  \\x1b[0m\\x1b[38;2;173;173;173;48;2;248;248;248m3 \\x1b[0m\\x1b[1;38;2;0;128;0;48;2;248;248;248mimport\\x1b[0m\\x1b[38;2;0;0;0;48;2;248;248;248m \\x1b[0m\\x1b[1;38;2;0;0;255;48;2;248;248;248mthis\\x1b[0m\\x1b[48;2;248;248;248m                   \\x1b[0m\\n\\x1b[1;38;2;24;24;24;48;2;248;248;248m  \\x1b[0m\\x1b[38;2;173;173;173;48;2;248;248;248m4 \\x1b[0m\\x1b[48;2;248;248;248m                              \\x1b[0m\\n\\x1b[1;38;2;24;24;24;48;2;248;248;248m  \\x1b[0m\\x1b[38;2;173;173;173;48;2;248;248;248m5 \\x1b[0m\\x1b[48;2;248;248;248m                              \\x1b[0m\\n\"\n    )\n\n\ndef test_python_render():\n    syntax = Panel.fit(\n        Syntax(\n            CODE,\n            lexer=\"python\",\n            line_numbers=True,\n            line_range=(2, 10),\n            theme=\"monokai\",\n            code_width=60,\n            word_wrap=True,\n        ),\n        padding=0,\n    )\n    rendered_syntax = render(syntax)\n    print(repr(rendered_syntax))\n    expected = '\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 2 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;230;219;116;48;2;39;40;34m\"\"\"Iterate and generate a tuple with a flag for first \\x1b[0m\\x1b[48;2;39;40;34m  \\x1b[0m\u2502\\n\u2502\\x1b[48;2;39;40;34m     \\x1b[0m\\x1b[38;2;230;219;116;48;2;39;40;34mand last value.\"\"\"\\x1b[0m\\x1b[48;2;39;40;34m                                          \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 3 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                              \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 4 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                    \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 5 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mnext\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 6 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mStopIteration\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                   \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 7 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mreturn\\x1b[0m\\x1b[48;2;39;40;34m                                              \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 8 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[48;2;39;40;34m                                            \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 9 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mfor\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34min\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                               \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m10 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n'\n    assert rendered_syntax == expected\n\n\ndef test_python_render_simple():\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=False,\n        theme=\"monokai\",\n        code_width=60,\n        word_wrap=False,\n    )\n    rendered_syntax = render(syntax)\n    print(repr(rendered_syntax))\n    expected = '\\x1b[38;2;102;217;239;48;2;39;40;34mdef\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mloop_first_last\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mIterable\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mT\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m]\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m-\\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m>\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mIterable\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mTuple\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mb\\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;230;219;116;48;2;39;40;34m\"\"\"Iterate and generate a tuple with a flag for first an\\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                              \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                    \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mnext\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mStopIteration\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                   \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mreturn\\x1b[0m\\x1b[48;2;39;40;34m                                              \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[48;2;39;40;34m                                            \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mfor\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34min\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                               \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[48;2;39;40;34m                                       \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[48;2;39;40;34m                              \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m                       \\x1b[0m\\n'\n    assert rendered_syntax == expected\n\n\ndef test_python_render_simple_passing_lexer_instance():\n    syntax = Syntax(\n        CODE,\n        lexer=PythonLexer(),\n        line_numbers=False,\n        theme=\"monokai\",\n        code_width=60,\n        word_wrap=False,\n    )\n    rendered_syntax = render(syntax)\n    print(repr(rendered_syntax))\n    expected = '\\x1b[38;2;102;217;239;48;2;39;40;34mdef\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mloop_first_last\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mIterable\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mT\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m]\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m-\\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m>\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mIterable\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mTuple\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mb\\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;230;219;116;48;2;39;40;34m\"\"\"Iterate and generate a tuple with a flag for first an\\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                              \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                    \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mnext\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mStopIteration\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                   \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mreturn\\x1b[0m\\x1b[48;2;39;40;34m                                              \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[48;2;39;40;34m                                            \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mfor\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34min\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                               \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[48;2;39;40;34m                                       \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[48;2;39;40;34m                              \\x1b[0m\\n\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m                       \\x1b[0m\\n'\n    assert rendered_syntax == expected\n\n\n@pytest.mark.skipif(OLD_PYGMENTS, reason=\"Pygments changed their tokenizer\")\ndef test_python_render_simple_indent_guides():\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=False,\n        theme=\"ansi_light\",\n        code_width=60,\n        word_wrap=False,\n        indent_guides=True,\n    )\n    rendered_syntax = render(syntax)\n    print(repr(rendered_syntax))\n    expected = '\\x1b[34mdef\\x1b[0m \\x1b[32mloop_first_last\\x1b[0m(values: Iterable[T]) -> Iterable[Tuple[\\x1b[36mb\\x1b[0m\\n\\x1b[2;37m\u2502   \\x1b[0m\\x1b[33m\"\"\"Iterate and generate a tuple with a flag for first an\\x1b[0m\\n\\x1b[2m\u2502   \\x1b[0miter_values = \\x1b[36miter\\x1b[0m(values)\\n\\x1b[2m\u2502   \\x1b[0m\\x1b[34mtry\\x1b[0m:\\n\\x1b[2m\u2502   \u2502   \\x1b[0mprevious_value = \\x1b[36mnext\\x1b[0m(iter_values)\\n\\x1b[2m\u2502   \\x1b[0m\\x1b[34mexcept\\x1b[0m \\x1b[36mStopIteration\\x1b[0m:\\n\\x1b[2m\u2502   \u2502   \\x1b[0m\\x1b[34mreturn\\x1b[0m\\n\\x1b[2m\u2502   \\x1b[0mfirst = \\x1b[34mTrue\\x1b[0m\\n\\x1b[2m\u2502   \\x1b[0m\\x1b[34mfor\\x1b[0m value \\x1b[35min\\x1b[0m iter_values:\\n\\x1b[2m\u2502   \u2502   \\x1b[0m\\x1b[34myield\\x1b[0m first, \\x1b[34mFalse\\x1b[0m, previous_value\\n\\x1b[2m\u2502   \u2502   \\x1b[0mfirst = \\x1b[34mFalse\\x1b[0m\\n\\x1b[2m\u2502   \u2502   \\x1b[0mprevious_value = value\\n\\x1b[2m\u2502   \\x1b[0m\\x1b[34myield\\x1b[0m first, \\x1b[34mTrue\\x1b[0m, previous_value\\n'\n    assert rendered_syntax == expected\n\n\n@pytest.mark.skipif(OLD_PYGMENTS, reason=\"Pygments changed their tokenizer\")\ndef test_python_render_line_range_indent_guides():\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=False,\n        theme=\"ansi_light\",\n        code_width=60,\n        word_wrap=False,\n        line_range=(2, 3),\n        indent_guides=True,\n    )\n    rendered_syntax = render(syntax)\n    print(repr(rendered_syntax))\n    expected = '\\x1b[2;37m\u2502   \\x1b[0m\\x1b[33m\"\"\"Iterate and generate a tuple with a flag for first an\\x1b[0m\\n\\x1b[2m\u2502   \\x1b[0miter_values = \\x1b[36miter\\x1b[0m(values)\\n'\n    assert rendered_syntax == expected\n\n\ndef test_python_render_indent_guides():\n    syntax = Panel.fit(\n        Syntax(\n            CODE,\n            lexer=\"python\",\n            line_numbers=True,\n            line_range=(2, 10),\n            theme=\"monokai\",\n            code_width=60,\n            word_wrap=True,\n            indent_guides=True,\n        ),\n        padding=0,\n    )\n    rendered_syntax = render(syntax)\n    print(repr(rendered_syntax))\n    expected = '\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 2 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;230;219;116;48;2;39;40;34m\"\"\"Iterate and generate a tuple with a flag for first \\x1b[0m\\x1b[48;2;39;40;34m  \\x1b[0m\u2502\\n\u2502\\x1b[48;2;39;40;34m     \\x1b[0m\\x1b[38;2;230;219;116;48;2;39;40;34mand last value.\"\"\"\\x1b[0m\\x1b[48;2;39;40;34m                                          \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 3 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                              \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 4 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                    \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 5 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \u2502   \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mnext\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 6 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mStopIteration\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                   \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 7 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mreturn\\x1b[0m\\x1b[48;2;39;40;34m                                              \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 8 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[48;2;39;40;34m                                            \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 9 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mfor\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34min\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                               \\x1b[0m\u2502\\n\u2502\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m10 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m                  \\x1b[0m\u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n'\n    assert rendered_syntax == expected\n\n\ndef test_pygments_syntax_theme_non_str():\n    from pygments.style import Style as PygmentsStyle\n\n    style = PygmentsSyntaxTheme(PygmentsStyle())\n    assert style.get_background_style().bgcolor == Color.parse(\"#ffffff\")\n\n\ndef test_pygments_syntax_theme():\n    style = PygmentsSyntaxTheme(\"default\")\n    assert style.get_style_for_token(\"abc\") == Style.parse(\"none\")\n\n\ndef test_get_line_color_none():\n    style = PygmentsSyntaxTheme(\"default\")\n    style._background_style = Style(bgcolor=None)\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=True,\n        line_range=(2, 10),\n        theme=style,\n        code_width=60,\n        word_wrap=True,\n        background_color=\"red\",\n    )\n    assert syntax._get_line_numbers_color() == Color.default()\n\n\ndef test_highlight_background_color():\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=True,\n        line_range=(2, 10),\n        theme=\"foo\",\n        code_width=60,\n        word_wrap=True,\n        background_color=\"red\",\n    )\n    assert syntax.highlight(CODE).style == Style.parse(\"on red\")\n\n\ndef test_get_number_styles():\n    syntax = Syntax(CODE, \"python\", theme=\"monokai\", line_numbers=True)\n    console = Console(color_system=\"windows\")\n    assert syntax._get_number_styles(console=console) == (\n        Style.parse(\"on #272822\"),\n        Style.parse(\"dim on #272822\"),\n        Style.parse(\"not dim on #272822\"),\n    )\n\n\ndef test_get_style_for_token():\n    # from pygments.style import Style as PygmentsStyle\n    # pygments_style = PygmentsStyle()\n    from pygments.style import Token\n\n    style = PygmentsSyntaxTheme(\"default\")\n    style_dict = {Token.Text: Style(color=None)}\n    style._style_cache = style_dict\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=True,\n        line_range=(2, 10),\n        theme=style,\n        code_width=60,\n        word_wrap=True,\n        background_color=\"red\",\n    )\n    assert syntax._get_line_numbers_color() == Color.default()\n\n\ndef test_option_no_wrap():\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=True,\n        line_range=(2, 10),\n        code_width=60,\n        word_wrap=False,\n        background_color=\"red\",\n    )\n\n    rendered_syntax = render(syntax, True)\n    print(repr(rendered_syntax))\n    expected = '\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 2 \\x1b[0m\\x1b[38;2;248;248;242;41m    \\x1b[0m\\x1b[38;2;230;219;116;41m\"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 3 \\x1b[0m\\x1b[38;2;248;248;242;41m    \\x1b[0m\\x1b[38;2;248;248;242;41miter_values\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;255;70;137;41m=\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;248;248;242;41miter\\x1b[0m\\x1b[38;2;248;248;242;41m(\\x1b[0m\\x1b[38;2;248;248;242;41mvalues\\x1b[0m\\x1b[38;2;248;248;242;41m)\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 4 \\x1b[0m\\x1b[38;2;248;248;242;41m    \\x1b[0m\\x1b[38;2;102;217;239;41mtry\\x1b[0m\\x1b[38;2;248;248;242;41m:\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 5 \\x1b[0m\\x1b[38;2;248;248;242;41m        \\x1b[0m\\x1b[38;2;248;248;242;41mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;255;70;137;41m=\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;248;248;242;41mnext\\x1b[0m\\x1b[38;2;248;248;242;41m(\\x1b[0m\\x1b[38;2;248;248;242;41miter_values\\x1b[0m\\x1b[38;2;248;248;242;41m)\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 6 \\x1b[0m\\x1b[38;2;248;248;242;41m    \\x1b[0m\\x1b[38;2;102;217;239;41mexcept\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;166;226;46;41mStopIteration\\x1b[0m\\x1b[38;2;248;248;242;41m:\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 7 \\x1b[0m\\x1b[38;2;248;248;242;41m        \\x1b[0m\\x1b[38;2;102;217;239;41mreturn\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 8 \\x1b[0m\\x1b[38;2;248;248;242;41m    \\x1b[0m\\x1b[38;2;248;248;242;41mfirst\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;255;70;137;41m=\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;102;217;239;41mTrue\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m 9 \\x1b[0m\\x1b[38;2;248;248;242;41m    \\x1b[0m\\x1b[38;2;102;217;239;41mfor\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;248;248;242;41mvalue\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;255;70;137;41min\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;248;248;242;41miter_values\\x1b[0m\\x1b[38;2;248;248;242;41m:\\x1b[0m\\n\\x1b[1;39;41m  \\x1b[0m\\x1b[39;41m10 \\x1b[0m\\x1b[38;2;248;248;242;41m        \\x1b[0m\\x1b[38;2;102;217;239;41myield\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;248;248;242;41mfirst\\x1b[0m\\x1b[38;2;248;248;242;41m,\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;102;217;239;41mFalse\\x1b[0m\\x1b[38;2;248;248;242;41m,\\x1b[0m\\x1b[38;2;248;248;242;41m \\x1b[0m\\x1b[38;2;248;248;242;41mprevious_value\\x1b[0m\\n'\n    assert rendered_syntax == expected\n\n\ndef test_syntax_highlight_ranges():\n    syntax = Syntax(\n        CODE,\n        lexer=\"python\",\n        line_numbers=True,\n        word_wrap=False,\n    )\n    stylized_ranges = [\n        _SyntaxHighlightRange(\n            # overline the 2nd char of the 1st line:\n            start=(1, 1),\n            end=(1, 2),\n            style=Style(overline=True),\n        ),\n        _SyntaxHighlightRange(\n            start=(1, len(\"def loop_\")),\n            end=(1, len(\"def loop_first_last\")),\n            style=Style(underline=True),\n        ),\n        _SyntaxHighlightRange(\n            start=(1, len(\"def loop_first\")),\n            end=(3, len(\"    iter_values = iter\")),\n            style=Style(bold=True),\n        ),\n        _SyntaxHighlightRange(\n            start=(9, len(\"    for \")),\n            end=(9, len(\"    for value in\")),\n            style=Style(strike=True),\n        ),\n        _SyntaxHighlightRange(\n            start=(6, len(\"    except \")),\n            end=(6, len(\"    except StopIteration\")),\n            style=Style(reverse=True),\n        ),\n        _SyntaxHighlightRange(\n            start=(10, len(\"       yield first,\")),\n            # `column_index` is out of range: should be clamped to the line length:\n            end=(10, 300),\n            style=Style(bold=True),\n        ),\n        # For this one the end `line_number` is out of range, so it should have no impact:\n        _SyntaxHighlightRange(\n            start=(1, 1),\n            end=(30, 2),\n            style=Style(bold=True),\n        ),\n    ]\n    for range_ in stylized_ranges:\n        syntax.stylize_range(range_.style, range_.start, range_.end)\n    rendered_syntax = render(syntax, True)\n    print(repr(rendered_syntax))\n    expected = '\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 1 \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34md\\x1b[0m\\x1b[53;38;2;102;217;239;48;2;39;40;34me\\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mf\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mloop_\\x1b[0m\\x1b[4;38;2;166;226;46;48;2;39;40;34mfirst\\x1b[0m\\x1b[1;4;38;2;166;226;46;48;2;39;40;34m_last\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mIterable\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mT\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m]\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;255;70;137;48;2;39;40;34m-\\x1b[0m\\x1b[1;38;2;255;70;137;48;2;39;40;34m>\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mIterable\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mTuple\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mbool\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mbool\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mT\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m]\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m]\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 2 \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[1;38;2;230;219;116;48;2;39;40;34m\"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 3 \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34miter\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 4 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 5 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mnext\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 6 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[7;38;2;166;226;46;48;2;39;40;34mStopIteration\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 7 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mreturn\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 8 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 9 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mfor\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[9;38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[9;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[9;38;2;255;70;137;48;2;39;40;34min\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m10 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[1;38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m11 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m12 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\n\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m13 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfirst\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\n'\n    assert rendered_syntax == expected\n\n\ndef test_ansi_theme():\n    style = Style(color=\"red\")\n    theme = ANSISyntaxTheme({(\"foo\", \"bar\"): style})\n    assert theme.get_style_for_token((\"foo\", \"bar\", \"baz\")) == style\n    assert theme.get_background_style() == Style()\n\n\nskip_windows_permission_error = pytest.mark.skipif(\n    sys.platform == \"win32\", reason=\"permissions error on Windows\"\n)\n\n\n@skip_windows_permission_error\ndef test_from_path():\n    fh, path = tempfile.mkstemp(\"example.py\")\n    try:\n        os.write(fh, b\"import this\\n\")\n        syntax = Syntax.from_path(path)\n        assert syntax.lexer\n        assert syntax.lexer.name == \"Python\"\n        assert syntax.code == \"import this\\n\"\n    finally:\n        os.remove(path)\n\n\n@skip_windows_permission_error\ndef test_from_path_unknown_lexer():\n    fh, path = tempfile.mkstemp(\"example.nosuchtype\")\n    try:\n        os.write(fh, b\"import this\\n\")\n        syntax = Syntax.from_path(path)\n        assert syntax.lexer is None\n        assert syntax.code == \"import this\\n\"\n    finally:\n        os.remove(path)\n\n\n@skip_windows_permission_error\ndef test_from_path_lexer_override():\n    fh, path = tempfile.mkstemp(\"example.nosuchtype\")\n    try:\n        os.write(fh, b\"import this\\n\")\n        syntax = Syntax.from_path(path, lexer=\"rust\")\n        assert syntax.lexer.name == \"Rust\"\n        assert syntax.code == \"import this\\n\"\n    finally:\n        os.remove(path)\n\n\n@skip_windows_permission_error\ndef test_from_path_lexer_override_invalid_lexer():\n    fh, path = tempfile.mkstemp(\"example.nosuchtype\")\n    try:\n        os.write(fh, b\"import this\\n\")\n        syntax = Syntax.from_path(path, lexer=\"blah\")\n        assert syntax.lexer is None\n        assert syntax.code == \"import this\\n\"\n    finally:\n        os.remove(path)\n\n\ndef test_syntax_guess_lexer():\n    assert Syntax.guess_lexer(\"banana.py\") == \"python\"\n    assert Syntax.guess_lexer(\"banana.py\", \"import this\") == \"python\"\n    assert Syntax.guess_lexer(\"banana.html\", \"<a href='#'>hello</a>\") == \"html\"\n    assert Syntax.guess_lexer(\"banana.html\", \"<%= @foo %>\") == \"rhtml\"\n    assert Syntax.guess_lexer(\"banana.html\", \"{{something|filter:3}}\") == \"html+django\"\n\n\ndef test_syntax_padding():\n    syntax = Syntax(\"x = 1\", lexer=\"python\", padding=(1, 3))\n    console = Console(\n        width=20,\n        file=io.StringIO(),\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        record=True,\n    )\n    console.print(syntax)\n    output = console.export_text()\n    assert (\n        output == \"                    \\n   x = 1            \\n                    \\n\"\n    )\n\n\ndef test_syntax_measure():\n    console = Console()\n    code = Syntax(\"Hello, World\", \"python\")\n    assert code.__rich_measure__(console, console.options) == Measurement(0, 12)\n\n    code = Syntax(\"Hello, World\", \"python\", line_numbers=True)\n    assert code.__rich_measure__(console, console.options) == Measurement(3, 16)\n\n    code = Syntax(\"Hello, World\", \"python\", code_width=20, line_numbers=True)\n    assert code.__rich_measure__(console, console.options) == Measurement(3, 24)\n\n    code = Syntax(\"\", \"python\", code_width=20, line_numbers=True)\n    assert code.__rich_measure__(console, console.options) == Measurement(3, 24)\n\n\nif __name__ == \"__main__\":\n    syntax = Panel.fit(\n        Syntax(\n            CODE,\n            lexer=\"python\",\n            line_numbers=True,\n            line_range=(2, 10),\n            theme=\"foo\",\n            code_width=60,\n            word_wrap=True,\n        ),\n        padding=0,\n    )\n    rendered = render(markdown)\n    print(rendered)\n    print(repr(rendered))\n", "tests/test_win32_console.py": "import dataclasses\nimport sys\nfrom unittest import mock\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom rich.style import Style\n\nif sys.platform == \"win32\":\n    from rich import _win32_console\n    from rich._win32_console import COORD, LegacyWindowsTerm, WindowsCoordinates\n\n    CURSOR_X = 1\n    CURSOR_Y = 2\n    CURSOR_POSITION = WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X)\n    SCREEN_WIDTH = 20\n    SCREEN_HEIGHT = 30\n    DEFAULT_STYLE_ATTRIBUTE = 16\n    CURSOR_SIZE = 25\n\n    @dataclasses.dataclass\n    class StubScreenBufferInfo:\n        dwCursorPosition: COORD = COORD(CURSOR_X, CURSOR_Y)\n        dwSize: COORD = COORD(SCREEN_WIDTH, SCREEN_HEIGHT)\n        wAttributes: int = DEFAULT_STYLE_ATTRIBUTE\n\n    pytestmark = pytest.mark.skipif(sys.platform != \"win32\", reason=\"windows only\")\n\n    def test_windows_coordinates_to_ctype():\n        coord = WindowsCoordinates.from_param(WindowsCoordinates(row=1, col=2))\n        assert coord.X == 2\n        assert coord.Y == 1\n\n    @pytest.fixture\n    def win32_handle():\n        handle = mock.sentinel\n        with mock.patch.object(_win32_console, \"GetStdHandle\", return_value=handle):\n            yield handle\n\n    @pytest.fixture\n    def win32_console_getters():\n        def stub_console_cursor_info(std_handle, cursor_info):\n            cursor_info.dwSize = CURSOR_SIZE\n            cursor_info.bVisible = True\n\n        with mock.patch.object(\n            _win32_console,\n            \"GetConsoleScreenBufferInfo\",\n            return_value=StubScreenBufferInfo,\n        ) as GetConsoleScreenBufferInfo, mock.patch.object(\n            _win32_console, \"GetConsoleCursorInfo\", side_effect=stub_console_cursor_info\n        ) as GetConsoleCursorInfo:\n            yield {\n                \"GetConsoleScreenBufferInfo\": GetConsoleScreenBufferInfo,\n                \"GetConsoleCursorInfo\": GetConsoleCursorInfo,\n            }\n\n    def test_cursor_position(win32_console_getters):\n        term = LegacyWindowsTerm(sys.stdout)\n        assert term.cursor_position == WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X)\n\n    def test_screen_size(win32_console_getters):\n        term = LegacyWindowsTerm(sys.stdout)\n        assert term.screen_size == WindowsCoordinates(\n            row=SCREEN_HEIGHT, col=SCREEN_WIDTH\n        )\n\n    def test_write_text(win32_console_getters, win32_handle, capsys):\n        text = \"Hello, world!\"\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.write_text(text)\n\n        captured = capsys.readouterr()\n        assert captured.out == text\n\n    @patch.object(_win32_console, \"SetConsoleTextAttribute\")\n    def test_write_styled(\n        SetConsoleTextAttribute,\n        win32_console_getters,\n        win32_handle,\n        capsys,\n    ):\n        style = Style.parse(\"black on red\")\n        text = \"Hello, world!\"\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.write_styled(text, style)\n\n        captured = capsys.readouterr()\n        assert captured.out == text\n\n        # Ensure we set the text attributes and then reset them after writing styled text\n        call_args = SetConsoleTextAttribute.call_args_list\n        assert len(call_args) == 2\n        first_args, first_kwargs = call_args[0]\n        second_args, second_kwargs = call_args[1]\n\n        assert first_args == (win32_handle,)\n        assert first_kwargs[\"attributes\"].value == 64\n        assert second_args == (win32_handle,)\n        assert second_kwargs[\"attributes\"] == DEFAULT_STYLE_ATTRIBUTE\n\n    @patch.object(_win32_console, \"SetConsoleTextAttribute\")\n    def test_write_styled_bold(\n        SetConsoleTextAttribute, win32_console_getters, win32_handle\n    ):\n        style = Style.parse(\"bold black on red\")\n        text = \"Hello, world!\"\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.write_styled(text, style)\n\n        call_args = SetConsoleTextAttribute.call_args_list\n        first_args, first_kwargs = call_args[0]\n\n        expected_attr = 64 + 8  # 64 for red bg, +8 for bright black\n        assert first_args == (win32_handle,)\n        assert first_kwargs[\"attributes\"].value == expected_attr\n\n    @patch.object(_win32_console, \"SetConsoleTextAttribute\")\n    def test_write_styled_reverse(\n        SetConsoleTextAttribute, win32_console_getters, win32_handle\n    ):\n        style = Style.parse(\"reverse red on blue\")\n        text = \"Hello, world!\"\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.write_styled(text, style)\n\n        call_args = SetConsoleTextAttribute.call_args_list\n        first_args, first_kwargs = call_args[0]\n\n        expected_attr = 64 + 1  # 64 for red bg (after reverse), +1 for blue fg\n        assert first_args == (win32_handle,)\n        assert first_kwargs[\"attributes\"].value == expected_attr\n\n    @patch.object(_win32_console, \"SetConsoleTextAttribute\")\n    def test_write_styled_reverse(\n        SetConsoleTextAttribute, win32_console_getters, win32_handle\n    ):\n        style = Style.parse(\"dim bright_red on blue\")\n        text = \"Hello, world!\"\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.write_styled(text, style)\n\n        call_args = SetConsoleTextAttribute.call_args_list\n        first_args, first_kwargs = call_args[0]\n\n        expected_attr = 4 + 16  # 4 for red text (after dim), +16 for blue bg\n        assert first_args == (win32_handle,)\n        assert first_kwargs[\"attributes\"].value == expected_attr\n\n    @patch.object(_win32_console, \"SetConsoleTextAttribute\")\n    def test_write_styled_no_foreground_color(\n        SetConsoleTextAttribute, win32_console_getters, win32_handle\n    ):\n        style = Style.parse(\"on blue\")\n        text = \"Hello, world!\"\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.write_styled(text, style)\n\n        call_args = SetConsoleTextAttribute.call_args_list\n        first_args, first_kwargs = call_args[0]\n\n        expected_attr = 16 | term._default_fore  # 16 for blue bg, plus default fg color\n        assert first_args == (win32_handle,)\n        assert first_kwargs[\"attributes\"].value == expected_attr\n\n    @patch.object(_win32_console, \"SetConsoleTextAttribute\")\n    def test_write_styled_no_background_color(\n        SetConsoleTextAttribute, win32_console_getters, win32_handle\n    ):\n        style = Style.parse(\"blue\")\n        text = \"Hello, world!\"\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.write_styled(text, style)\n\n        call_args = SetConsoleTextAttribute.call_args_list\n        first_args, first_kwargs = call_args[0]\n\n        expected_attr = (\n            16 | term._default_back\n        )  # 16 for blue foreground, plus default bg color\n        assert first_args == (win32_handle,)\n        assert first_kwargs[\"attributes\"].value == expected_attr\n\n    @patch.object(_win32_console, \"FillConsoleOutputCharacter\", return_value=None)\n    @patch.object(_win32_console, \"FillConsoleOutputAttribute\", return_value=None)\n    def test_erase_line(\n        FillConsoleOutputAttribute,\n        FillConsoleOutputCharacter,\n        win32_console_getters,\n        win32_handle,\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.erase_line()\n        start = WindowsCoordinates(row=CURSOR_Y, col=0)\n        FillConsoleOutputCharacter.assert_called_once_with(\n            win32_handle, \" \", length=SCREEN_WIDTH, start=start\n        )\n        FillConsoleOutputAttribute.assert_called_once_with(\n            win32_handle, DEFAULT_STYLE_ATTRIBUTE, length=SCREEN_WIDTH, start=start\n        )\n\n    @patch.object(_win32_console, \"FillConsoleOutputCharacter\", return_value=None)\n    @patch.object(_win32_console, \"FillConsoleOutputAttribute\", return_value=None)\n    def test_erase_end_of_line(\n        FillConsoleOutputAttribute,\n        FillConsoleOutputCharacter,\n        win32_console_getters,\n        win32_handle,\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.erase_end_of_line()\n\n        FillConsoleOutputCharacter.assert_called_once_with(\n            win32_handle, \" \", length=SCREEN_WIDTH - CURSOR_X, start=CURSOR_POSITION\n        )\n        FillConsoleOutputAttribute.assert_called_once_with(\n            win32_handle,\n            DEFAULT_STYLE_ATTRIBUTE,\n            length=SCREEN_WIDTH - CURSOR_X,\n            start=CURSOR_POSITION,\n        )\n\n    @patch.object(_win32_console, \"FillConsoleOutputCharacter\", return_value=None)\n    @patch.object(_win32_console, \"FillConsoleOutputAttribute\", return_value=None)\n    def test_erase_start_of_line(\n        FillConsoleOutputAttribute,\n        FillConsoleOutputCharacter,\n        win32_console_getters,\n        win32_handle,\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.erase_start_of_line()\n\n        start = WindowsCoordinates(CURSOR_Y, 0)\n\n        FillConsoleOutputCharacter.assert_called_once_with(\n            win32_handle, \" \", length=CURSOR_X, start=start\n        )\n        FillConsoleOutputAttribute.assert_called_once_with(\n            win32_handle, DEFAULT_STYLE_ATTRIBUTE, length=CURSOR_X, start=start\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_to(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        coords = WindowsCoordinates(row=4, col=5)\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.move_cursor_to(coords)\n\n        SetConsoleCursorPosition.assert_called_once_with(win32_handle, coords=coords)\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_to_out_of_bounds_row(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        coords = WindowsCoordinates(row=-1, col=4)\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.move_cursor_to(coords)\n\n        assert not SetConsoleCursorPosition.called\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_to_out_of_bounds_col(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        coords = WindowsCoordinates(row=10, col=-4)\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.move_cursor_to(coords)\n\n        assert not SetConsoleCursorPosition.called\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_up(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.move_cursor_up()\n\n        SetConsoleCursorPosition.assert_called_once_with(\n            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y - 1, col=CURSOR_X)\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_down(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.move_cursor_down()\n\n        SetConsoleCursorPosition.assert_called_once_with(\n            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y + 1, col=CURSOR_X)\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_forward(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n\n        term.move_cursor_forward()\n\n        SetConsoleCursorPosition.assert_called_once_with(\n            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X + 1)\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_forward_newline_wrap(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        cursor_at_end_of_line = StubScreenBufferInfo(\n            dwCursorPosition=COORD(SCREEN_WIDTH - 1, CURSOR_Y)\n        )\n        win32_console_getters[\n            \"GetConsoleScreenBufferInfo\"\n        ].return_value = cursor_at_end_of_line\n        term = LegacyWindowsTerm(sys.stdout)\n        term.move_cursor_forward()\n\n        SetConsoleCursorPosition.assert_called_once_with(\n            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y + 1, col=0)\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_to_column(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.move_cursor_to_column(5)\n        SetConsoleCursorPosition.assert_called_once_with(\n            win32_handle, coords=WindowsCoordinates(CURSOR_Y, 5)\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_backward(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.move_cursor_backward()\n        SetConsoleCursorPosition.assert_called_once_with(\n            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X - 1)\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorPosition\", return_value=None)\n    def test_move_cursor_backward_prev_line_wrap(\n        SetConsoleCursorPosition, win32_console_getters, win32_handle\n    ):\n        cursor_at_start_of_line = StubScreenBufferInfo(\n            dwCursorPosition=COORD(0, CURSOR_Y)\n        )\n        win32_console_getters[\n            \"GetConsoleScreenBufferInfo\"\n        ].return_value = cursor_at_start_of_line\n        term = LegacyWindowsTerm(sys.stdout)\n        term.move_cursor_backward()\n        SetConsoleCursorPosition.assert_called_once_with(\n            win32_handle,\n            coords=WindowsCoordinates(row=CURSOR_Y - 1, col=SCREEN_WIDTH - 1),\n        )\n\n    @patch.object(_win32_console, \"SetConsoleCursorInfo\", return_value=None)\n    def test_hide_cursor(SetConsoleCursorInfo, win32_console_getters, win32_handle):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.hide_cursor()\n\n        call_args = SetConsoleCursorInfo.call_args_list\n\n        assert len(call_args) == 1\n\n        args, kwargs = call_args[0]\n        assert kwargs[\"cursor_info\"].bVisible == 0\n        assert kwargs[\"cursor_info\"].dwSize == CURSOR_SIZE\n\n    @patch.object(_win32_console, \"SetConsoleCursorInfo\", return_value=None)\n    def test_show_cursor(SetConsoleCursorInfo, win32_console_getters, win32_handle):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.show_cursor()\n\n        call_args = SetConsoleCursorInfo.call_args_list\n\n        assert len(call_args) == 1\n\n        args, kwargs = call_args[0]\n        assert kwargs[\"cursor_info\"].bVisible == 1\n        assert kwargs[\"cursor_info\"].dwSize == CURSOR_SIZE\n\n    @patch.object(_win32_console, \"SetConsoleTitle\", return_value=None)\n    def test_set_title(SetConsoleTitle, win32_console_getters):\n        term = LegacyWindowsTerm(sys.stdout)\n        term.set_title(\"title\")\n\n        SetConsoleTitle.assert_called_once_with(\"title\")\n\n    @patch.object(_win32_console, \"SetConsoleTitle\", return_value=None)\n    def test_set_title_too_long(_, win32_console_getters):\n        term = LegacyWindowsTerm(sys.stdout)\n\n        with pytest.raises(AssertionError):\n            term.set_title(\"a\" * 255)\n", "tests/test_rule.py": "import io\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.rule import Rule\nfrom rich.text import Text\n\n\ndef test_rule():\n    console = Console(\n        width=16,\n        file=io.StringIO(),\n        force_terminal=True,\n        legacy_windows=False,\n        _environ={},\n    )\n    console.print(Rule())\n    console.print(Rule(\"foo\"))\n    console.rule(Text(\"foo\", style=\"bold\"))\n    console.rule(\"foobarbazeggfoobarbazegg\")\n    expected = \"\\x1b[92m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\n\"\n    expected += \"\\x1b[92m\u2500\u2500\u2500\u2500\u2500 \\x1b[0mfoo\\x1b[92m \u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\n\"\n    expected += \"\\x1b[92m\u2500\u2500\u2500\u2500\u2500 \\x1b[0m\\x1b[1mfoo\\x1b[0m\\x1b[92m \u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\n\"\n    expected += \"\\x1b[92m\u2500 \\x1b[0mfoobarbazeg\u2026\\x1b[92m \u2500\\x1b[0m\\n\"\n\n    result = console.file.getvalue()\n    assert result == expected\n\n\ndef test_rule_error():\n    console = Console(width=16, file=io.StringIO(), legacy_windows=False, _environ={})\n    with pytest.raises(ValueError):\n        console.rule(\"foo\", align=\"foo\")\n\n\ndef test_rule_align():\n    console = Console(width=16, file=io.StringIO(), legacy_windows=False, _environ={})\n    console.rule(\"foo\")\n    console.rule(\"foo\", align=\"left\")\n    console.rule(\"foo\", align=\"center\")\n    console.rule(\"foo\", align=\"right\")\n    console.rule()\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = \"\u2500\u2500\u2500\u2500\u2500 foo \u2500\u2500\u2500\u2500\u2500\u2500\\nfoo \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\u2500\u2500\u2500\u2500\u2500 foo \u2500\u2500\u2500\u2500\u2500\u2500\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 foo\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\"\n    assert result == expected\n\n\ndef test_rule_cjk():\n    console = Console(\n        width=16,\n        file=io.StringIO(),\n        force_terminal=True,\n        color_system=None,\n        legacy_windows=False,\n        _environ={},\n    )\n    console.rule(\"\u6b22\u8fce\uff01\")\n    expected = \"\u2500\u2500\u2500\u2500 \u6b22\u8fce\uff01 \u2500\u2500\u2500\u2500\\n\"\n    assert console.file.getvalue() == expected\n\n\n@pytest.mark.parametrize(\n    \"align,outcome\",\n    [\n        (\"center\", \"\u2500\u2500\u2500\\n\"),\n        (\"left\", \"\u2026 \u2500\\n\"),\n        (\"right\", \"\u2500 \u2026\\n\"),\n    ],\n)\ndef test_rule_not_enough_space_for_title_text(align, outcome):\n    console = Console(width=3, file=io.StringIO(), record=True)\n    console.rule(\"Hello!\", align=align)\n    assert console.file.getvalue() == outcome\n\n\ndef test_rule_center_aligned_title_not_enough_space_for_rule():\n    console = Console(width=4, file=io.StringIO(), record=True)\n    console.rule(\"ABCD\")\n    assert console.file.getvalue() == \"\u2500\u2500\u2500\u2500\\n\"\n\n\n@pytest.mark.parametrize(\"align\", [\"left\", \"right\"])\ndef test_rule_side_aligned_not_enough_space_for_rule(align):\n    console = Console(width=2, file=io.StringIO(), record=True)\n    console.rule(\"ABCD\", align=align)\n    assert console.file.getvalue() == \"\u2500\u2500\\n\"\n\n\n@pytest.mark.parametrize(\n    \"align,outcome\",\n    [\n        (\"center\", \"\u2500 \u2026 \u2500\\n\"),\n        (\"left\", \"AB\u2026 \u2500\\n\"),\n        (\"right\", \"\u2500 AB\u2026\\n\"),\n    ],\n)\ndef test_rule_just_enough_width_available_for_title(align, outcome):\n    console = Console(width=5, file=io.StringIO(), record=True)\n    console.rule(\"ABCD\", align=align)\n    assert console.file.getvalue() == outcome\n\n\ndef test_characters():\n    console = Console(\n        width=16,\n        file=io.StringIO(),\n        force_terminal=True,\n        color_system=None,\n        legacy_windows=False,\n        _environ={},\n    )\n    console.rule(characters=\"+*\")\n    console.rule(\"foo\", characters=\"+*\")\n    console.print(Rule(characters=\".,\"))\n    expected = \"+*+*+*+*+*+*+*+*\\n\"\n    expected += \"+*+*+ foo +*+*+*\\n\"\n    expected += \".,.,.,.,.,.,.,.,\\n\"\n    assert console.file.getvalue() == expected\n\n\ndef test_repr():\n    rule = Rule(\"foo\")\n    assert isinstance(repr(rule), str)\n\n\ndef test_error():\n    with pytest.raises(ValueError):\n        Rule(characters=\"\")\n", "tests/test_pick.py": "from rich._pick import pick_bool\n\n\ndef test_pick_bool():\n    assert pick_bool(False) == False\n    assert pick_bool(True) == True\n    assert pick_bool(None) == False\n    assert pick_bool(False, True) == False\n    assert pick_bool(None, True) == True\n    assert pick_bool(True, None) == True\n    assert pick_bool(False, None) == False\n    assert pick_bool(None, None) == False\n    assert pick_bool(None, None, False, True) == False\n    assert pick_bool(None, None, True, False) == True\n", "tests/test_rich_print.py": "import io\nimport json\n\nimport rich\nfrom rich.console import Console\n\n\ndef test_get_console():\n    console = rich.get_console()\n    assert isinstance(console, Console)\n\n\ndef test_reconfigure_console():\n    rich.reconfigure(width=100)\n    assert rich.get_console().width == 100\n\n\ndef test_rich_print():\n    console = rich.get_console()\n    output = io.StringIO()\n    backup_file = console.file\n    try:\n        console.file = output\n        rich.print(\"foo\", \"bar\")\n        rich.print(\"foo\\n\")\n        rich.print(\"foo\\n\\n\")\n        assert output.getvalue() == \"foo bar\\nfoo\\n\\nfoo\\n\\n\\n\"\n    finally:\n        console.file = backup_file\n\n\ndef test_rich_print_json():\n    console = rich.get_console()\n    with console.capture() as capture:\n        rich.print_json('[false, true, null, \"foo\"]', indent=4)\n    result = capture.get()\n    print(repr(result))\n    expected = '[\\n    false,\\n    true,\\n    null,\\n    \"foo\"\\n]\\n'\n    assert result == expected\n\n\ndef test_rich_print_json_round_trip():\n    data = [\"x\" * 100, 2e128]\n    console = rich.get_console()\n    with console.capture() as capture:\n        rich.print_json(data=data, indent=4)\n    result = capture.get()\n    print(repr(result))\n    result_data = json.loads(result)\n    assert result_data == data\n\n\ndef test_rich_print_json_no_truncation():\n    console = rich.get_console()\n    with console.capture() as capture:\n        rich.print_json(f'[\"{\"x\" * 100}\", {int(2e128)}]', indent=4)\n    result = capture.get()\n    print(repr(result))\n    assert (\"x\" * 100) in result\n    assert str(int(2e128)) in result\n\n\ndef test_rich_print_X():\n    console = rich.get_console()\n    output = io.StringIO()\n    backup_file = console.file\n    try:\n        console.file = output\n        rich.print(\"foo\")\n        rich.print(\"fooX\")\n        rich.print(\"fooXX\")\n        assert output.getvalue() == \"foo\\nfooX\\nfooXX\\n\"\n    finally:\n        console.file = backup_file\n", "tests/test_filesize.py": "from rich import filesize\n\n\ndef test_traditional():\n    assert filesize.decimal(0) == \"0 bytes\"\n    assert filesize.decimal(1) == \"1 byte\"\n    assert filesize.decimal(2) == \"2 bytes\"\n    assert filesize.decimal(1000) == \"1.0 kB\"\n    assert filesize.decimal(1.5 * 1000 * 1000) == \"1.5 MB\"\n    assert filesize.decimal(0, precision=2) == \"0 bytes\"\n    assert filesize.decimal(1111, precision=0) == \"1 kB\"\n    assert filesize.decimal(1111, precision=1) == \"1.1 kB\"\n    assert filesize.decimal(1111, precision=2) == \"1.11 kB\"\n    assert filesize.decimal(1111, separator=\"\") == \"1.1kB\"\n\n\ndef test_pick_unit_and_suffix():\n    units = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    assert filesize.pick_unit_and_suffix(50, units, 1024) == (1, \"bytes\")\n    assert filesize.pick_unit_and_suffix(2048, units, 1024) == (1024, \"KB\")\n", "tests/test_live.py": "# encoding=utf-8\nimport time\nfrom typing import Optional\n\n# import pytest\nfrom rich.console import Console\nfrom rich.live import Live\nfrom rich.text import Text\n\n\ndef create_capture_console(\n    *, width: int = 60, height: int = 80, force_terminal: Optional[bool] = True\n) -> Console:\n    return Console(\n        width=width,\n        height=height,\n        force_terminal=force_terminal,\n        legacy_windows=False,\n        color_system=None,  # use no color system to reduce complexity of output,\n        _environ={},\n    )\n\n\ndef test_live_state() -> None:\n    with Live(\"\") as live:\n        assert live._started\n        live.start()\n\n        assert live.renderable == \"\"\n\n        assert live._started\n        live.stop()\n        assert not live._started\n\n    assert not live._started\n\n\ndef test_growing_display() -> None:\n    console = create_capture_console()\n    console.begin_capture()\n    with Live(console=console, auto_refresh=False) as live:\n        display = \"\"\n        for step in range(10):\n            display += f\"Step {step}\\n\"\n            live.update(display, refresh=True)\n    output = console.end_capture()\n    print(repr(output))\n    assert (\n        output\n        == \"\\x1b[?25lStep 0\\n\\r\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\n\\x1b[?25h\"\n    )\n\n\ndef test_growing_display_transient() -> None:\n    console = create_capture_console()\n    console.begin_capture()\n    with Live(console=console, auto_refresh=False, transient=True) as live:\n        display = \"\"\n        for step in range(10):\n            display += f\"Step {step}\\n\"\n            live.update(display, refresh=True)\n    output = console.end_capture()\n    assert (\n        output\n        == \"\\x1b[?25lStep 0\\n\\r\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\n\\x1b[?25h\\r\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\"\n    )\n\n\ndef test_growing_display_overflow_ellipsis() -> None:\n    console = create_capture_console(height=5)\n    console.begin_capture()\n    with Live(\n        console=console, auto_refresh=False, vertical_overflow=\"ellipsis\"\n    ) as live:\n        display = \"\"\n        for step in range(10):\n            display += f\"Step {step}\\n\"\n            live.update(display, refresh=True)\n    output = console.end_capture()\n    assert (\n        output\n        == \"\\x1b[?25lStep 0\\n\\r\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n                            ...                             \\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n                            ...                             \\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n                            ...                             \\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n                            ...                             \\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n                            ...                             \\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n                            ...                             \\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\n\\x1b[?25h\"\n    )\n\n\ndef test_growing_display_overflow_crop() -> None:\n    console = create_capture_console(height=5)\n    console.begin_capture()\n    with Live(console=console, auto_refresh=False, vertical_overflow=\"crop\") as live:\n        display = \"\"\n        for step in range(10):\n            display += f\"Step {step}\\n\"\n            live.update(display, refresh=True)\n    output = console.end_capture()\n    assert (\n        output\n        == \"\\x1b[?25lStep 0\\n\\r\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\n\\x1b[?25h\"\n    )\n\n\ndef test_growing_display_overflow_visible() -> None:\n    console = create_capture_console(height=5)\n    console.begin_capture()\n    with Live(console=console, auto_refresh=False, vertical_overflow=\"visible\") as live:\n        display = \"\"\n        for step in range(10):\n            display += f\"Step {step}\\n\"\n            live.update(display, refresh=True)\n    output = console.end_capture()\n    assert (\n        output\n        == \"\\x1b[?25lStep 0\\n\\r\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\n\\x1b[?25h\"\n    )\n\n\ndef test_growing_display_autorefresh() -> None:\n    \"\"\"Test generating a table but using auto-refresh from threading\"\"\"\n    console = create_capture_console(height=5)\n    console.begin_capture()\n    with Live(console=console, auto_refresh=True, vertical_overflow=\"visible\") as live:\n        display = \"\"\n        for step in range(10):\n            display += f\"Step {step}\\n\"\n            live.update(display)\n            time.sleep(0.2)\n\n    # no way to truly test w/ multithreading, just make sure it doesn't crash\n\n\ndef test_growing_display_console_redirect() -> None:\n    console = create_capture_console()\n    console.begin_capture()\n    with Live(console=console, auto_refresh=False) as live:\n        display = \"\"\n        for step in range(10):\n            console.print(f\"Running step {step}\")\n            display += f\"Step {step}\\n\"\n            live.update(display, refresh=True)\n    output = console.end_capture()\n    assert (\n        output\n        == \"\\x1b[?25lRunning step 0\\n\\r\\x1b[2KStep 0\\n\\r\\x1b[2K\\x1b[1A\\x1b[2KRunning step 1\\nStep 0\\n\\r\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 2\\nStep 0\\nStep 1\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 3\\nStep 0\\nStep 1\\nStep 2\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 4\\nStep 0\\nStep 1\\nStep 2\\nStep 3\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 5\\nStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 6\\nStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 7\\nStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 8\\nStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KRunning step 9\\nStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2KStep 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\\n\\x1b[?25h\"\n    )\n\n\ndef test_growing_display_file_console() -> None:\n    console = create_capture_console(force_terminal=False)\n    console.begin_capture()\n    with Live(console=console, auto_refresh=False) as live:\n        display = \"\"\n        for step in range(10):\n            display += f\"Step {step}\\n\"\n            live.update(display, refresh=True)\n    output = console.end_capture()\n    assert (\n        output\n        == \"Step 0\\nStep 1\\nStep 2\\nStep 3\\nStep 4\\nStep 5\\nStep 6\\nStep 7\\nStep 8\\nStep 9\\n\"\n    )\n\n\ndef test_live_screen() -> None:\n    console = create_capture_console(width=20, height=5)\n    console.begin_capture()\n    with Live(Text(\"foo\"), screen=True, console=console, auto_refresh=False) as live:\n        live.refresh()\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"\\x1b[?1049h\\x1b[H\\x1b[?25l\\x1b[Hfoo                 \\n                    \\n                    \\n                    \\n                    \\x1b[Hfoo                 \\n                    \\n                    \\n                    \\n                    \\x1b[?25h\\x1b[?1049l\"\n    assert result == expected\n", "tests/test_markup.py": "import pytest\n\nfrom rich.console import Console\nfrom rich.errors import MarkupError\nfrom rich.markup import RE_TAGS, Tag, _parse, escape, render\nfrom rich.text import Span, Text\n\n\ndef test_re_no_match():\n    assert RE_TAGS.match(\"[True]\") == None\n    assert RE_TAGS.match(\"[False]\") == None\n    assert RE_TAGS.match(\"[None]\") == None\n    assert RE_TAGS.match(\"[1]\") == None\n    assert RE_TAGS.match(\"[2]\") == None\n    assert RE_TAGS.match(\"[]\") == None\n\n\ndef test_re_match():\n    assert RE_TAGS.match(\"[true]\")\n    assert RE_TAGS.match(\"[false]\")\n    assert RE_TAGS.match(\"[none]\")\n    assert RE_TAGS.match(\"[color(1)]\")\n    assert RE_TAGS.match(\"[#ff00ff]\")\n    assert RE_TAGS.match(\"[/]\")\n    assert RE_TAGS.match(\"[@]\")\n    assert RE_TAGS.match(\"[@foo]\")\n    assert RE_TAGS.match(\"[@foo=bar]\")\n\n\ndef test_escape():\n    # Potential tags\n    assert escape(\"foo[bar]\") == r\"foo\\[bar]\"\n    assert escape(r\"foo\\[bar]\") == r\"foo\\\\\\[bar]\"\n\n    # Not tags (escape not required)\n    assert escape(\"[5]\") == \"[5]\"\n    assert escape(\"\\\\[5]\") == \"\\\\[5]\"\n\n    # Test @ escape\n    assert escape(\"[@foo]\") == \"\\\\[@foo]\"\n    assert escape(\"[@]\") == \"\\\\[@]\"\n\n    # https://github.com/Textualize/rich/issues/2187\n    assert escape(\"[nil, [nil]]\") == r\"[nil, \\[nil]]\"\n\n\ndef test_escape_backslash_end():\n    # https://github.com/Textualize/rich/issues/2987\n    value = \"C:\\\\\"\n    assert escape(value) == \"C:\\\\\\\\\"\n\n    escaped_tags = f\"[red]{escape(value)}[/red]\"\n    assert escaped_tags == \"[red]C:\\\\\\\\[/red]\"\n    escaped_text = Text.from_markup(escaped_tags)\n    assert escaped_text.plain == \"C:\\\\\"\n    assert escaped_text.spans == [Span(0, 3, \"red\")]\n\n\ndef test_render_escape():\n    console = Console(width=80, color_system=None)\n    console.begin_capture()\n    console.print(\n        escape(r\"[red]\"), escape(r\"\\[red]\"), escape(r\"\\\\[red]\"), escape(r\"\\\\\\[red]\")\n    )\n    result = console.end_capture()\n    expected = r\"[red] \\[red] \\\\[red] \\\\\\[red]\" + \"\\n\"\n    assert result == expected\n\n\ndef test_parse():\n    result = list(_parse(r\"[foo]hello[/foo][bar]world[/]\\[escaped]\"))\n    expected = [\n        (0, None, Tag(name=\"foo\", parameters=None)),\n        (10, \"hello\", None),\n        (10, None, Tag(name=\"/foo\", parameters=None)),\n        (16, None, Tag(name=\"bar\", parameters=None)),\n        (26, \"world\", None),\n        (26, None, Tag(name=\"/\", parameters=None)),\n        (29, \"[escaped]\", None),\n    ]\n    print(repr(result))\n    assert result == expected\n\n\ndef test_parse_link():\n    result = list(_parse(\"[link=foo]bar[/link]\"))\n    expected = [\n        (0, None, Tag(name=\"link\", parameters=\"foo\")),\n        (13, \"bar\", None),\n        (13, None, Tag(name=\"/link\", parameters=None)),\n    ]\n    assert result == expected\n\n\ndef test_render():\n    result = render(\"[bold]FOO[/bold]\")\n    assert str(result) == \"FOO\"\n    assert result.spans == [Span(0, 3, \"bold\")]\n\n\ndef test_render_not_tags():\n    result = render('[[1], [1,2,3,4], [\"hello\"], [None], [False], [True]] []')\n    assert str(result) == '[[1], [1,2,3,4], [\"hello\"], [None], [False], [True]] []'\n    assert result.spans == []\n\n\ndef test_render_link():\n    result = render(\"[link=foo]FOO[/link]\")\n    assert str(result) == \"FOO\"\n    assert result.spans == [Span(0, 3, \"link foo\")]\n\n\ndef test_render_combine():\n    result = render(\"[green]X[blue]Y[/blue]Z[/green]\")\n    assert str(result) == \"XYZ\"\n    assert result.spans == [\n        Span(0, 3, \"green\"),\n        Span(1, 2, \"blue\"),\n    ]\n\n\ndef test_render_overlap():\n    result = render(\"[green]X[bold]Y[/green]Z[/bold]\")\n    assert str(result) == \"XYZ\"\n    assert result.spans == [\n        Span(0, 2, \"green\"),\n        Span(1, 3, \"bold\"),\n    ]\n\n\ndef test_adjoint():\n    result = render(\"[red][blue]B[/blue]R[/red]\")\n    print(repr(result))\n    assert result.spans == [Span(0, 2, \"red\"), Span(0, 1, \"blue\")]\n\n\ndef test_render_close():\n    result = render(\"[bold]X[/]Y\")\n    assert str(result) == \"XY\"\n    assert result.spans == [Span(0, 1, \"bold\")]\n\n\ndef test_render_close_ambiguous():\n    result = render(\"[green]X[bold]Y[/]Z[/]\")\n    assert str(result) == \"XYZ\"\n    assert result.spans == [Span(0, 3, \"green\"), Span(1, 2, \"bold\")]\n\n\ndef test_markup_error():\n    with pytest.raises(MarkupError):\n        assert render(\"foo[/]\")\n    with pytest.raises(MarkupError):\n        assert render(\"foo[/bar]\")\n    with pytest.raises(MarkupError):\n        assert render(\"[foo]hello[/bar]\")\n\n\ndef test_markup_escape():\n    result = str(render(\"[dim white][url=[/]\"))\n    assert result == \"[url=\"\n\n\ndef test_escape_escape():\n    # Escaped escapes (i.e. double backslash)should be treated as literal\n    result = render(r\"\\\\[bold]FOO\")\n    assert str(result) == r\"\\FOO\"\n\n    # Single backslash makes the tag literal\n    result = render(r\"\\[bold]FOO\")\n    assert str(result) == \"[bold]FOO\"\n\n    # Double backslash produces a backslash\n    result = render(r\"\\\\[bold]some text[/]\")\n    assert str(result) == r\"\\some text\"\n\n    # Triple backslash parsed as literal backslash plus escaped tag\n    result = render(r\"\\\\\\[bold]some text\\[/]\")\n    assert str(result) == r\"\\[bold]some text[/]\"\n\n    # Backslash escaping only happens when preceding a tag\n    result = render(r\"\\\\\")\n    assert str(result) == r\"\\\\\"\n\n    result = render(r\"\\\\\\\\\")\n    assert str(result) == r\"\\\\\\\\\"\n\n\ndef test_events():\n    result = render(\"[@click]Hello[/@click] [@click='view.toggle', 'left']World[/]\")\n    assert str(result) == \"Hello World\"\n\n\ndef test_events_broken():\n    with pytest.raises(MarkupError):\n        render(\"[@click=sdfwer(sfs)]foo[/]\")\n\n    with pytest.raises(MarkupError):\n        render(\"[@click='view.toggle]foo[/]\")\n\n\ndef test_render_meta():\n    console = Console()\n    text = render(\"foo[@click=close]bar[/]baz\")\n    assert text.get_style_at_offset(console, 3).meta == {\"@click\": (\"close\", ())}\n\n    text = render(\"foo[@click=close()]bar[/]baz\")\n    assert text.get_style_at_offset(console, 3).meta == {\"@click\": (\"close\", ())}\n\n    text = render(\"foo[@click=close('dialog')]bar[/]baz\")\n    assert text.get_style_at_offset(console, 3).meta == {\n        \"@click\": (\"close\", (\"dialog\",))\n    }\n    text = render(\"foo[@click=close('dialog', 3)]bar[/]baz\")\n    assert text.get_style_at_offset(console, 3).meta == {\n        \"@click\": (\"close\", (\"dialog\", 3))\n    }\n\n    text = render(\"foo[@click=(1, 2, 3)]bar[/]baz\")\n    assert text.get_style_at_offset(console, 3).meta == {\"@click\": (1, 2, 3)}\n", "tests/test_tools.py": "from rich._loop import loop_first, loop_last, loop_first_last\nfrom rich._ratio import ratio_distribute\n\n\ndef test_loop_first():\n    assert list(loop_first([])) == []\n    iterable = loop_first([\"apples\", \"oranges\", \"pears\", \"lemons\"])\n    assert next(iterable) == (True, \"apples\")\n    assert next(iterable) == (False, \"oranges\")\n    assert next(iterable) == (False, \"pears\")\n    assert next(iterable) == (False, \"lemons\")\n\n\ndef test_loop_last():\n    assert list(loop_last([])) == []\n    iterable = loop_last([\"apples\", \"oranges\", \"pears\", \"lemons\"])\n    assert next(iterable) == (False, \"apples\")\n    assert next(iterable) == (False, \"oranges\")\n    assert next(iterable) == (False, \"pears\")\n    assert next(iterable) == (True, \"lemons\")\n\n\ndef test_loop_first_last():\n    assert list(loop_first_last([])) == []\n    iterable = loop_first_last([\"apples\", \"oranges\", \"pears\", \"lemons\"])\n    assert next(iterable) == (True, False, \"apples\")\n    assert next(iterable) == (False, False, \"oranges\")\n    assert next(iterable) == (False, False, \"pears\")\n    assert next(iterable) == (False, True, \"lemons\")\n\n\ndef test_ratio_distribute():\n    assert ratio_distribute(10, [1]) == [10]\n    assert ratio_distribute(10, [1, 1]) == [5, 5]\n    assert ratio_distribute(12, [1, 3]) == [3, 9]\n    assert ratio_distribute(0, [1, 3]) == [0, 0]\n    assert ratio_distribute(0, [1, 3], [1, 1]) == [1, 1]\n    assert ratio_distribute(10, [1, 0]) == [10, 0]\n", "tests/test_segment.py": "from io import StringIO\n\nimport pytest\n\nfrom rich.segment import ControlType, Segment, SegmentLines, Segments\nfrom rich.style import Style\n\n\ndef test_repr():\n    assert repr(Segment(\"foo\")) == \"Segment('foo')\"\n    home = (ControlType.HOME, 0)\n    assert (\n        repr(Segment(\"foo\", None, [home]))\n        == \"Segment('foo', None, [(<ControlType.HOME: 3>, 0)])\"\n    )\n\n\ndef test_line():\n    assert Segment.line() == Segment(\"\\n\")\n\n\ndef test_apply_style():\n    segments = [Segment(\"foo\"), Segment(\"bar\", Style(bold=True))]\n    assert Segment.apply_style(segments, None) is segments\n    assert list(Segment.apply_style(segments, Style(italic=True))) == [\n        Segment(\"foo\", Style(italic=True)),\n        Segment(\"bar\", Style(italic=True, bold=True)),\n    ]\n\n\ndef test_split_lines():\n    lines = [Segment(\"Hello\\nWorld\")]\n    assert list(Segment.split_lines(lines)) == [[Segment(\"Hello\")], [Segment(\"World\")]]\n\n\ndef test_split_and_crop_lines():\n    assert list(\n        Segment.split_and_crop_lines([Segment(\"Hello\\nWorld!\\n\"), Segment(\"foo\")], 4)\n    ) == [\n        [Segment(\"Hell\"), Segment(\"\\n\", None)],\n        [Segment(\"Worl\"), Segment(\"\\n\", None)],\n        [Segment(\"foo\"), Segment(\" \")],\n    ]\n\n\ndef test_adjust_line_length():\n    line = [Segment(\"Hello\", \"foo\")]\n    assert Segment.adjust_line_length(line, 10, style=\"bar\") == [\n        Segment(\"Hello\", \"foo\"),\n        Segment(\"     \", \"bar\"),\n    ]\n\n    line = [Segment(\"H\"), Segment(\"ello, World!\")]\n    assert Segment.adjust_line_length(line, 5) == [Segment(\"H\"), Segment(\"ello\")]\n\n    line = [Segment(\"Hello\")]\n    assert Segment.adjust_line_length(line, 5) == line\n\n\ndef test_get_line_length():\n    assert Segment.get_line_length([Segment(\"foo\"), Segment(\"bar\")]) == 6\n\n\ndef test_get_shape():\n    assert Segment.get_shape([[Segment(\"Hello\")]]) == (5, 1)\n    assert Segment.get_shape([[Segment(\"Hello\")], [Segment(\"World!\")]]) == (6, 2)\n\n\ndef test_set_shape():\n    assert Segment.set_shape([[Segment(\"Hello\")]], 10) == [\n        [Segment(\"Hello\"), Segment(\"     \")]\n    ]\n    assert Segment.set_shape([[Segment(\"Hello\")]], 10, 2) == [\n        [Segment(\"Hello\"), Segment(\"     \")],\n        [Segment(\" \" * 10)],\n    ]\n\n\ndef test_simplify():\n    assert list(\n        Segment.simplify([Segment(\"Hello\"), Segment(\" \"), Segment(\"World!\")])\n    ) == [Segment(\"Hello World!\")]\n    assert list(\n        Segment.simplify(\n            [Segment(\"Hello\", \"red\"), Segment(\" \", \"red\"), Segment(\"World!\", \"blue\")]\n        )\n    ) == [Segment(\"Hello \", \"red\"), Segment(\"World!\", \"blue\")]\n    assert list(Segment.simplify([])) == []\n\n\ndef test_filter_control():\n    control_code = (ControlType.HOME, 0)\n    segments = [Segment(\"foo\"), Segment(\"bar\", None, (control_code,))]\n    assert list(Segment.filter_control(segments)) == [Segment(\"foo\")]\n    assert list(Segment.filter_control(segments, is_control=True)) == [\n        Segment(\"bar\", None, (control_code,))\n    ]\n\n\ndef test_strip_styles():\n    segments = [Segment(\"foo\", Style(bold=True))]\n    assert list(Segment.strip_styles(segments)) == [Segment(\"foo\", None)]\n\n\ndef test_strip_links():\n    segments = [Segment(\"foo\", Style(bold=True, link=\"https://www.example.org\"))]\n    assert list(Segment.strip_links(segments)) == [Segment(\"foo\", Style(bold=True))]\n\n\ndef test_remove_color():\n    segments = [\n        Segment(\"foo\", Style(bold=True, color=\"red\")),\n        Segment(\"bar\", None),\n    ]\n    assert list(Segment.remove_color(segments)) == [\n        Segment(\"foo\", Style(bold=True)),\n        Segment(\"bar\", None),\n    ]\n\n\ndef test_is_control():\n    assert Segment(\"foo\", Style(bold=True)).is_control == False\n    assert Segment(\"foo\", Style(bold=True), []).is_control == True\n    assert Segment(\"foo\", Style(bold=True), [(ControlType.HOME, 0)]).is_control == True\n\n\ndef test_segments_renderable():\n    segments = Segments([Segment(\"foo\")])\n    assert list(segments.__rich_console__(None, None)) == [Segment(\"foo\")]\n\n    segments = Segments([Segment(\"foo\")], new_lines=True)\n    assert list(segments.__rich_console__(None, None)) == [\n        Segment(\"foo\"),\n        Segment.line(),\n    ]\n\n\ndef test_divide():\n    bold = Style(bold=True)\n    italic = Style(italic=True)\n    segments = [\n        Segment(\"Hello\", bold),\n        Segment(\" World!\", italic),\n    ]\n\n    assert list(Segment.divide(segments, [])) == []\n    assert list(Segment.divide([], [1])) == [[]]\n\n    assert list(Segment.divide(segments, [1])) == [[Segment(\"H\", bold)]]\n\n    assert list(Segment.divide(segments, [1, 2])) == [\n        [Segment(\"H\", bold)],\n        [Segment(\"e\", bold)],\n    ]\n\n    assert list(Segment.divide(segments, [1, 2, 12])) == [\n        [Segment(\"H\", bold)],\n        [Segment(\"e\", bold)],\n        [Segment(\"llo\", bold), Segment(\" World!\", italic)],\n    ]\n\n    assert list(Segment.divide(segments, [4, 20])) == [\n        [Segment(\"Hell\", bold)],\n        [Segment(\"o\", bold), Segment(\" World!\", italic)],\n    ]\n\n\n# https://github.com/textualize/rich/issues/1755\ndef test_divide_complex():\n    MAP = (\n        \"[on orange4]          [on green]XX[on orange4]          \\n\"\n        \"                        \\n\"\n        \"                        \\n\"\n        \"                        \\n\"\n        \"              [bright_red on black]Y[on orange4]        \\n\"\n        \"[on green]X[on orange4]                  [on green]X[on orange4]  \\n\"\n        \" [on green]X[on orange4]                   [on green]X\\n\"\n        \"[on orange4]                        \\n\"\n        \"          [on green]XX[on orange4]          \\n\"\n    )\n    from rich.console import Console\n    from rich.text import Text\n\n    text = Text.from_markup(MAP)\n    console = Console(\n        color_system=\"truecolor\", width=30, force_terminal=True, file=StringIO()\n    )\n    console.print(text)\n    result = console.file.getvalue()\n\n    print(repr(result))\n    expected = \"\\x1b[48;5;94m          \\x1b[0m\\x1b[42mXX\\x1b[0m\\x1b[48;5;94m          \\x1b[0m\\n\\x1b[48;5;94m                        \\x1b[0m\\n\\x1b[48;5;94m                        \\x1b[0m\\n\\x1b[48;5;94m                        \\x1b[0m\\n\\x1b[48;5;94m              \\x1b[0m\\x1b[91;40mY\\x1b[0m\\x1b[91;48;5;94m        \\x1b[0m\\n\\x1b[91;42mX\\x1b[0m\\x1b[91;48;5;94m                  \\x1b[0m\\x1b[91;42mX\\x1b[0m\\x1b[91;48;5;94m  \\x1b[0m\\n\\x1b[91;48;5;94m \\x1b[0m\\x1b[91;42mX\\x1b[0m\\x1b[91;48;5;94m                   \\x1b[0m\\x1b[91;42mX\\x1b[0m\\n\\x1b[91;48;5;94m                        \\x1b[0m\\n\\x1b[91;48;5;94m          \\x1b[0m\\x1b[91;42mXX\\x1b[0m\\x1b[91;48;5;94m          \\x1b[0m\\n\\n\"\n    assert result == expected\n\n\ndef test_divide_emoji():\n    bold = Style(bold=True)\n    italic = Style(italic=True)\n    segments = [\n        Segment(\"Hello\", bold),\n        Segment(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\", italic),\n    ]\n\n    assert list(Segment.divide(segments, [7])) == [\n        [Segment(\"Hello\", bold), Segment(\"\ud83d\udca9\", italic)],\n    ]\n    assert list(Segment.divide(segments, [8])) == [\n        [Segment(\"Hello\", bold), Segment(\"\ud83d\udca9 \", italic)],\n    ]\n    assert list(Segment.divide(segments, [9])) == [\n        [Segment(\"Hello\", bold), Segment(\"\ud83d\udca9\ud83d\udca9\", italic)],\n    ]\n    assert list(Segment.divide(segments, [8, 11])) == [\n        [Segment(\"Hello\", bold), Segment(\"\ud83d\udca9 \", italic)],\n        [Segment(\" \ud83d\udca9\", italic)],\n    ]\n    assert list(Segment.divide(segments, [9, 11])) == [\n        [Segment(\"Hello\", bold), Segment(\"\ud83d\udca9\ud83d\udca9\", italic)],\n        [Segment(\"\ud83d\udca9\", italic)],\n    ]\n\n\ndef test_divide_edge():\n    segments = [Segment(\"foo\"), Segment(\"bar\"), Segment(\"baz\")]\n    result = list(Segment.divide(segments, [1, 3, 9]))\n    print(result)\n    assert result == [\n        [Segment(\"f\")],\n        [Segment(\"oo\")],\n        [Segment(\"bar\"), Segment(\"baz\")],\n    ]\n\n\ndef test_divide_edge_2():\n    segments = [\n        Segment(\"\u256d\u2500\"),\n        Segment(\n            \"\u2500\u2500\u2500\u2500\u2500\u2500 Placeholder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n        ),\n        Segment(\n            \"\u2500\u256e\",\n        ),\n    ]\n    result = list(Segment.divide(segments, [30, 60]))\n    expected = [segments, []]\n    print(repr(result))\n    assert result == expected\n\n\n@pytest.mark.parametrize(\n    \"text,split,result\",\n    [\n        (\"XX\", 4, (Segment(\"XX\"), Segment(\"\"))),\n        (\"X\", 1, (Segment(\"X\"), Segment(\"\"))),\n        (\"\ud83d\udca9\", 1, (Segment(\" \"), Segment(\" \"))),\n        (\"XY\", 1, (Segment(\"X\"), Segment(\"Y\"))),\n        (\"\ud83d\udca9X\", 1, (Segment(\" \"), Segment(\" X\"))),\n        (\"\ud83d\udca9\ud83d\udca9\", 1, (Segment(\" \"), Segment(\" \ud83d\udca9\"))),\n        (\"X\ud83d\udca9Y\", 2, (Segment(\"X \"), Segment(\" Y\"))),\n        (\"X\ud83d\udca9YZ\", 2, (Segment(\"X \"), Segment(\" YZ\"))),\n        (\"X\ud83d\udca9\ud83d\udca9Z\", 2, (Segment(\"X \"), Segment(\" \ud83d\udca9Z\"))),\n        (\"X\ud83d\udca9\ud83d\udca9Z\", 3, (Segment(\"X\ud83d\udca9\"), Segment(\"\ud83d\udca9Z\"))),\n        (\"X\ud83d\udca9\ud83d\udca9Z\", 4, (Segment(\"X\ud83d\udca9 \"), Segment(\" Z\"))),\n        (\"X\ud83d\udca9\ud83d\udca9Z\", 5, (Segment(\"X\ud83d\udca9\ud83d\udca9\"), Segment(\"Z\"))),\n        (\"X\ud83d\udca9\ud83d\udca9Z\", 6, (Segment(\"X\ud83d\udca9\ud83d\udca9Z\"), Segment(\"\"))),\n        (\"XYZABC\ud83d\udca9\ud83d\udca9\", 6, (Segment(\"XYZABC\"), Segment(\"\ud83d\udca9\ud83d\udca9\"))),\n        (\"XYZABC\ud83d\udca9\ud83d\udca9\", 7, (Segment(\"XYZABC \"), Segment(\" \ud83d\udca9\"))),\n        (\"XYZABC\ud83d\udca9\ud83d\udca9\", 8, (Segment(\"XYZABC\ud83d\udca9\"), Segment(\"\ud83d\udca9\"))),\n        (\"XYZABC\ud83d\udca9\ud83d\udca9\", 9, (Segment(\"XYZABC\ud83d\udca9 \"), Segment(\" \"))),\n        (\"XYZABC\ud83d\udca9\ud83d\udca9\", 10, (Segment(\"XYZABC\ud83d\udca9\ud83d\udca9\"), Segment(\"\"))),\n        (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\", 3, (Segment(\"\ud83d\udca9 \"), Segment(\" \ud83d\udca9\ud83d\udca9\ud83d\udca9\"))),\n        (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\", 4, (Segment(\"\ud83d\udca9\ud83d\udca9\"), Segment(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\"))),\n        (\"\ud83d\udca9X\ud83d\udca9Y\ud83d\udca9Z\ud83d\udca9A\ud83d\udca9\", 4, (Segment(\"\ud83d\udca9X \"), Segment(\" Y\ud83d\udca9Z\ud83d\udca9A\ud83d\udca9\"))),\n        (\"XYZABC\", 4, (Segment(\"XYZA\"), Segment(\"BC\"))),\n        (\"XYZABC\", 5, (Segment(\"XYZAB\"), Segment(\"C\"))),\n        (\n            \"a1\u3042\uff11\uff11bcdaef\",\n            9,\n            (Segment(\"a1\u3042\uff11\uff11b\"), Segment(\"cdaef\")),\n        ),\n    ],\n)\ndef test_split_cells_emoji(text, split, result):\n    assert Segment(text).split_cells(split) == result\n\n\ndef test_segment_lines_renderable():\n    lines = [[Segment(\"hello\"), Segment(\" \"), Segment(\"world\")], [Segment(\"foo\")]]\n    segment_lines = SegmentLines(lines)\n    assert list(segment_lines.__rich_console__(None, None)) == [\n        Segment(\"hello\"),\n        Segment(\" \"),\n        Segment(\"world\"),\n        Segment(\"foo\"),\n    ]\n\n    segment_lines = SegmentLines(lines, new_lines=True)\n    assert list(segment_lines.__rich_console__(None, None)) == [\n        Segment(\"hello\"),\n        Segment(\" \"),\n        Segment(\"world\"),\n        Segment(\"\\n\"),\n        Segment(\"foo\"),\n        Segment(\"\\n\"),\n    ]\n\n\ndef test_align_top():\n    lines = [[Segment(\"X\")]]\n    assert Segment.align_top(lines, 3, 1, Style()) == lines\n    assert Segment.align_top(lines, 3, 3, Style()) == [\n        [Segment(\"X\")],\n        [Segment(\"   \", Style())],\n        [Segment(\"   \", Style())],\n    ]\n\n\ndef test_align_middle():\n    lines = [[Segment(\"X\")]]\n    assert Segment.align_middle(lines, 3, 1, Style()) == lines\n    assert Segment.align_middle(lines, 3, 3, Style()) == [\n        [Segment(\"   \", Style())],\n        [Segment(\"X\")],\n        [Segment(\"   \", Style())],\n    ]\n\n\ndef test_align_bottom():\n    lines = [[Segment(\"X\")]]\n    assert Segment.align_bottom(lines, 3, 1, Style()) == lines\n    assert Segment.align_bottom(lines, 3, 3, Style()) == [\n        [Segment(\"   \", Style())],\n        [Segment(\"   \", Style())],\n        [Segment(\"X\")],\n    ]\n", "tests/test_null_file.py": "from rich._null_file import NullFile\n\n\ndef test_null_file():\n    file = NullFile()\n    with file:\n        assert file.write(\"abc\") == 0\n        assert file.close() is None\n        assert not file.isatty()\n        assert file.read() == \"\"\n        assert not file.readable()\n        assert file.readline() == \"\"\n        assert file.readlines() == []\n        assert file.seek(0, 0) == 0\n        assert not file.seekable()\n        assert file.tell() == 0\n        assert file.truncate() == 0\n        assert file.writable() == False\n        assert file.writelines([\"\"]) is None\n        assert next(file) == \"\"\n        assert next(iter(file)) == \"\"\n        assert file.fileno() == -1\n        assert file.flush() is None\n", "tests/test_progress.py": "# encoding=utf-8\n\nimport io\nimport os\nimport tempfile\nfrom types import SimpleNamespace\n\nimport pytest\n\nimport rich.progress\nfrom rich.console import Console\nfrom rich.highlighter import NullHighlighter\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    FileSizeColumn,\n    MofNCompleteColumn,\n    Progress,\n    RenderableColumn,\n    SpinnerColumn,\n    Task,\n    TaskID,\n    TaskProgressColumn,\n    TextColumn,\n    TimeElapsedColumn,\n    TimeRemainingColumn,\n    TotalFileSizeColumn,\n    TransferSpeedColumn,\n    _TrackThread,\n    track,\n)\nfrom rich.progress_bar import ProgressBar\nfrom rich.text import Text\n\n\nclass MockClock:\n    \"\"\"A clock that is manually advanced.\"\"\"\n\n    def __init__(self, time=0.0, auto=True) -> None:\n        self.time = time\n        self.auto = auto\n\n    def __call__(self) -> float:\n        try:\n            return self.time\n        finally:\n            if self.auto:\n                self.time += 1\n\n    def tick(self, advance: float = 1) -> None:\n        self.time += advance\n\n\ndef test_bar_columns():\n    bar_column = BarColumn(100)\n    assert bar_column.bar_width == 100\n    task = Task(1, \"test\", 100, 20, _get_time=lambda: 1.0)\n    bar = bar_column(task)\n    assert isinstance(bar, ProgressBar)\n    assert bar.completed == 20\n    assert bar.total == 100\n\n\ndef test_text_column():\n    text_column = TextColumn(\"[b]foo\", highlighter=NullHighlighter())\n    task = Task(1, \"test\", 100, 20, _get_time=lambda: 1.0)\n    text = text_column.render(task)\n    assert str(text) == \"foo\"\n\n    text_column = TextColumn(\"[b]bar\", markup=False)\n    task = Task(1, \"test\", 100, 20, _get_time=lambda: 1.0)\n    text = text_column.render(task)\n    assert text == Text(\"[b]bar\")\n\n\ndef test_time_elapsed_column():\n    column = TimeElapsedColumn()\n    task = Task(1, \"test\", 100, 20, _get_time=lambda: 1.0)\n    text = column.render(task)\n    assert str(text) == \"-:--:--\"\n\n\ndef test_time_remaining_column():\n    class FakeTask(Task):\n        time_remaining = 60\n\n    column = TimeRemainingColumn()\n    task = Task(1, \"test\", 100, 20, _get_time=lambda: 1.0)\n    text = column(task)\n    assert str(text) == \"-:--:--\"\n\n    text = column(FakeTask(1, \"test\", 100, 20, _get_time=lambda: 1.0))\n    assert str(text) == \"0:01:00\"\n\n\n@pytest.mark.parametrize(\n    \"task_time, formatted\",\n    [\n        (None, \"--:--\"),\n        (0, \"00:00\"),\n        (59, \"00:59\"),\n        (71, \"01:11\"),\n        (4210, \"1:10:10\"),\n    ],\n)\ndef test_compact_time_remaining_column(task_time, formatted):\n    task = SimpleNamespace(finished=False, time_remaining=task_time, total=100)\n    column = TimeRemainingColumn(compact=True)\n\n    assert str(column.render(task)) == formatted\n\n\ndef test_time_remaining_column_elapsed_when_finished():\n    task_time = 71\n    formatted = \"0:01:11\"\n\n    task = SimpleNamespace(finished=True, finished_time=task_time, total=100)\n    column = TimeRemainingColumn(elapsed_when_finished=True)\n\n    assert str(column.render(task)) == formatted\n\n\ndef test_renderable_column():\n    column = RenderableColumn(\"foo\")\n    task = Task(1, \"test\", 100, 20, _get_time=lambda: 1.0)\n    assert column.render(task) == \"foo\"\n\n\ndef test_spinner_column():\n    time = 1.0\n\n    def get_time():\n        nonlocal time\n        return time\n\n    column = SpinnerColumn()\n    column.set_spinner(\"dots2\")\n    task = Task(1, \"test\", 100, 20, _get_time=get_time)\n    result = column.render(task)\n    print(repr(result))\n    expected = \"\u28fe\"\n    assert str(result) == expected\n\n    time += 1.0\n    column.spinner.update(speed=0.5)\n    result = column.render(task)\n    print(repr(result))\n    expected = \"\u287f\"\n    assert str(result) == expected\n\n\ndef test_download_progress_uses_decimal_units() -> None:\n    column = DownloadColumn()\n    test_task = Task(1, \"test\", 1000, 500, _get_time=lambda: 1.0)\n    rendered_progress = str(column.render(test_task))\n    expected = \"0.5/1.0 kB\"\n    assert rendered_progress == expected\n\n\ndef test_download_progress_uses_binary_units() -> None:\n    column = DownloadColumn(binary_units=True)\n    test_task = Task(1, \"test\", 1024, 512, _get_time=lambda: 1.0)\n    rendered_progress = str(column.render(test_task))\n    expected = \"0.5/1.0 KiB\"\n    assert rendered_progress == expected\n\n\ndef test_task_ids():\n    progress = make_progress()\n    assert progress.task_ids == [0, 1, 2, 4]\n\n\ndef test_finished():\n    progress = make_progress()\n    assert not progress.finished\n\n\ndef make_progress() -> Progress:\n    _time = 0.0\n\n    def fake_time():\n        nonlocal _time\n        try:\n            return _time\n        finally:\n            _time += 1\n\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        color_system=\"truecolor\",\n        width=80,\n        legacy_windows=False,\n        _environ={},\n    )\n    progress = Progress(console=console, get_time=fake_time, auto_refresh=False)\n    task1 = progress.add_task(\"foo\")\n    task2 = progress.add_task(\"bar\", total=30)\n    progress.advance(task2, 16)\n    task3 = progress.add_task(\"baz\", visible=False)\n    task4 = progress.add_task(\"egg\")\n    progress.remove_task(task4)\n    task4 = progress.add_task(\"foo2\", completed=50, start=False)\n    progress.stop_task(task4)\n    progress.start_task(task4)\n    progress.update(\n        task4, total=200, advance=50, completed=200, visible=True, refresh=True\n    )\n    progress.stop_task(task4)\n    return progress\n\n\ndef render_progress() -> str:\n    progress = make_progress()\n    progress.start()  # superfluous noop\n    with progress:\n        pass\n    progress.stop()  # superfluous noop\n    progress_render = progress.console.file.getvalue()\n    return progress_render\n\n\ndef test_expand_bar() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=10,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        _environ={},\n    )\n    progress = Progress(\n        BarColumn(bar_width=None),\n        console=console,\n        get_time=lambda: 1.0,\n        auto_refresh=False,\n    )\n    progress.add_task(\"foo\")\n    with progress:\n        pass\n    expected = \"\\x1b[?25l\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\r\\x1b[2K\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\n\\x1b[?25h\"\n    render_result = console.file.getvalue()\n    print(\"RESULT\\n\", repr(render_result))\n    print(\"EXPECTED\\n\", repr(expected))\n    assert render_result == expected\n\n\ndef test_progress_with_none_total_renders_a_pulsing_bar() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=10,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        _environ={},\n    )\n    progress = Progress(\n        BarColumn(bar_width=None),\n        console=console,\n        get_time=lambda: 1.0,\n        auto_refresh=False,\n    )\n    progress.add_task(\"foo\", total=None)\n    with progress:\n        pass\n    expected = \"\\x1b[?25l\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\r\\x1b[2K\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\n\\x1b[?25h\"\n    render_result = console.file.getvalue()\n    print(\"RESULT\\n\", repr(render_result))\n    print(\"EXPECTED\\n\", repr(expected))\n    assert render_result == expected\n\n\ndef test_render() -> None:\n    expected = \"\\x1b[?25lfoo  \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m  0%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\nbar  \\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;5;237m\u257a\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m 53%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\nfoo2 \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m100%\\x1b[0m \\x1b[36m0:00:00\\x1b[0m\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2Kfoo  \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m  0%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\nbar  \\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;5;237m\u257a\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m 53%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\nfoo2 \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m100%\\x1b[0m \\x1b[36m0:00:00\\x1b[0m\\n\\x1b[?25h\"\n    render_result = render_progress()\n    print(repr(render_result))\n    assert render_result == expected\n\n\ndef test_track() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=60,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        _environ={},\n    )\n    test = [\"foo\", \"bar\", \"baz\"]\n    expected_values = iter(test)\n    for value in track(\n        test, \"test\", console=console, auto_refresh=False, get_time=MockClock(auto=True)\n    ):\n        assert value == next(expected_values)\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = \"\\x1b[?25l\\r\\x1b[2Ktest \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m  0%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;5;237m\u257a\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m 33%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2578\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m 67%\\x1b[0m \\x1b[36m0:00:06\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m100%\\x1b[0m \\x1b[33m0:00:19\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m100%\\x1b[0m \\x1b[33m0:00:19\\x1b[0m\\n\\x1b[?25h\"\n    print(\"--\")\n    print(\"RESULT:\")\n    print(result)\n    print(repr(result))\n    print(\"EXPECTED:\")\n    print(expected)\n    print(repr(expected))\n\n    assert result == expected\n\n\ndef test_progress_track() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=60,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        _environ={},\n    )\n    progress = Progress(\n        console=console, auto_refresh=False, get_time=MockClock(auto=True)\n    )\n    test = [\"foo\", \"bar\", \"baz\"]\n    expected_values = iter(test)\n    with progress:\n        for value in progress.track(test, description=\"test\"):\n            assert value == next(expected_values)\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = \"\\x1b[?25l\\r\\x1b[2Ktest \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m  0%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;5;237m\u257a\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m 33%\\x1b[0m \\x1b[36m-:--:--\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2578\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m 67%\\x1b[0m \\x1b[36m0:00:06\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m100%\\x1b[0m \\x1b[36m0:00:00\\x1b[0m\\r\\x1b[2Ktest \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[35m100%\\x1b[0m \\x1b[36m0:00:00\\x1b[0m\\n\\x1b[?25h\"\n\n    print(expected)\n    print(repr(expected))\n    print(result)\n    print(repr(result))\n\n    assert result == expected\n\n\ndef test_columns() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=80,\n        log_time_format=\"[TIME]\",\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        log_path=False,\n        _environ={},\n    )\n    progress = Progress(\n        \"test\",\n        TextColumn(\"{task.description}\"),\n        BarColumn(bar_width=None),\n        TimeRemainingColumn(),\n        TimeElapsedColumn(),\n        FileSizeColumn(),\n        TotalFileSizeColumn(),\n        DownloadColumn(),\n        TransferSpeedColumn(),\n        MofNCompleteColumn(),\n        MofNCompleteColumn(separator=\" of \"),\n        transient=True,\n        console=console,\n        auto_refresh=False,\n        get_time=MockClock(),\n    )\n    task1 = progress.add_task(\"foo\", total=10)\n    task2 = progress.add_task(\"bar\", total=7)\n    with progress:\n        for n in range(4):\n            progress.advance(task1, 3)\n            progress.advance(task2, 4)\n        print(\"foo\")\n        console.log(\"hello\")\n        console.print(\"world\")\n        progress.refresh()\n    from .render import replace_link_ids\n\n    result = replace_link_ids(console.file.getvalue())\n    print(repr(result))\n    expected = \"\\x1b[?25ltest foo \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:07\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m10 bytes\\x1b[0m \\x1b[32m0/10 bytes\\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m 0/10\\x1b[0m \\x1b[32m 0 of 10\\x1b[0m\\ntest bar \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:18\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m7 bytes \\x1b[0m \\x1b[32m0/7 bytes \\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m0/7  \\x1b[0m \\x1b[32m0 of 7  \\x1b[0m\\r\\x1b[2K\\x1b[1A\\x1b[2Kfoo\\ntest foo \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:07\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m10 bytes\\x1b[0m \\x1b[32m0/10 bytes\\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m 0/10\\x1b[0m \\x1b[32m 0 of 10\\x1b[0m\\ntest bar \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:18\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m7 bytes \\x1b[0m \\x1b[32m0/7 bytes \\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m0/7  \\x1b[0m \\x1b[32m0 of 7  \\x1b[0m\\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[2;36m[TIME]\\x1b[0m\\x1b[2;36m \\x1b[0mhello                                                                    \\ntest foo \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:07\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m10 bytes\\x1b[0m \\x1b[32m0/10 bytes\\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m 0/10\\x1b[0m \\x1b[32m 0 of 10\\x1b[0m\\ntest bar \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:18\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m7 bytes \\x1b[0m \\x1b[32m0/7 bytes \\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m0/7  \\x1b[0m \\x1b[32m0 of 7  \\x1b[0m\\r\\x1b[2K\\x1b[1A\\x1b[2Kworld\\ntest foo \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:07\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m10 bytes\\x1b[0m \\x1b[32m0/10 bytes\\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m 0/10\\x1b[0m \\x1b[32m 0 of 10\\x1b[0m\\ntest bar \\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m-:--:--\\x1b[0m \\x1b[33m0:00:18\\x1b[0m \\x1b[32m0 bytes\\x1b[0m \\x1b[32m7 bytes \\x1b[0m \\x1b[32m0/7 bytes \\x1b[0m \\x1b[31m?\\x1b[0m \\x1b[32m0/7  \\x1b[0m \\x1b[32m0 of 7  \\x1b[0m\\r\\x1b[2K\\x1b[1A\\x1b[2Ktest foo \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m0:00:00\\x1b[0m \\x1b[33m0:00:34\\x1b[0m \\x1b[32m12     \\x1b[0m \\x1b[32m10     \\x1b[0m \\x1b[32m12/10   \\x1b[0m \\x1b[31m1      \\x1b[0m \\x1b[32m12/10\\x1b[0m \\x1b[32m12 of 10\\x1b[0m\\n                                 \\x1b[32mbytes  \\x1b[0m \\x1b[32mbytes  \\x1b[0m \\x1b[32mbytes   \\x1b[0m \\x1b[31mbyte/s \\x1b[0m               \\ntest bar \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m0:00:00\\x1b[0m \\x1b[33m0:00:29\\x1b[0m \\x1b[32m16     \\x1b[0m \\x1b[32m7 bytes\\x1b[0m \\x1b[32m16/7    \\x1b[0m \\x1b[31m2      \\x1b[0m \\x1b[32m16/7 \\x1b[0m \\x1b[32m16 of 7 \\x1b[0m\\n                                 \\x1b[32mbytes  \\x1b[0m         \\x1b[32mbytes   \\x1b[0m \\x1b[31mbytes/s\\x1b[0m               \\r\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2Ktest foo \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m0:00:00\\x1b[0m \\x1b[33m0:00:34\\x1b[0m \\x1b[32m12     \\x1b[0m \\x1b[32m10     \\x1b[0m \\x1b[32m12/10   \\x1b[0m \\x1b[31m1      \\x1b[0m \\x1b[32m12/10\\x1b[0m \\x1b[32m12 of 10\\x1b[0m\\n                                 \\x1b[32mbytes  \\x1b[0m \\x1b[32mbytes  \\x1b[0m \\x1b[32mbytes   \\x1b[0m \\x1b[31mbyte/s \\x1b[0m               \\ntest bar \\x1b[38;2;114;156;31m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m \\x1b[36m0:00:00\\x1b[0m \\x1b[33m0:00:29\\x1b[0m \\x1b[32m16     \\x1b[0m \\x1b[32m7 bytes\\x1b[0m \\x1b[32m16/7    \\x1b[0m \\x1b[31m2      \\x1b[0m \\x1b[32m16/7 \\x1b[0m \\x1b[32m16 of 7 \\x1b[0m\\n                                 \\x1b[32mbytes  \\x1b[0m         \\x1b[32mbytes   \\x1b[0m \\x1b[31mbytes/s\\x1b[0m               \\n\\x1b[?25h\\r\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\"\n\n    assert result == expected\n\n\ndef test_using_default_columns() -> None:\n    # can only check types, as the instances do not '==' each other\n    expected_default_types = [\n        TextColumn,\n        BarColumn,\n        TaskProgressColumn,\n        TimeRemainingColumn,\n    ]\n\n    progress = Progress()\n    assert [type(c) for c in progress.columns] == expected_default_types\n\n    progress = Progress(\n        SpinnerColumn(),\n        *Progress.get_default_columns(),\n        \"Elapsed:\",\n        TimeElapsedColumn(),\n    )\n    assert [type(c) for c in progress.columns] == [\n        SpinnerColumn,\n        *expected_default_types,\n        str,\n        TimeElapsedColumn,\n    ]\n\n\ndef test_task_create() -> None:\n    task = Task(TaskID(1), \"foo\", 100, 0, _get_time=lambda: 1)\n    assert task.elapsed is None\n    assert not task.finished\n    assert task.percentage == 0.0\n    assert task.speed is None\n    assert task.time_remaining is None\n\n\ndef test_task_start() -> None:\n    current_time = 1\n\n    def get_time():\n        nonlocal current_time\n        return current_time\n\n    task = Task(TaskID(1), \"foo\", 100, 0, _get_time=get_time)\n    task.start_time = get_time()\n    assert task.started == True\n    assert task.elapsed == 0\n    current_time += 1\n    assert task.elapsed == 1\n    current_time += 1\n    task.stop_time = get_time()\n    current_time += 1\n    assert task.elapsed == 2\n\n\ndef test_task_zero_total() -> None:\n    task = Task(TaskID(1), \"foo\", 0, 0, _get_time=lambda: 1)\n    assert task.percentage == 0\n\n\ndef test_progress_create() -> None:\n    progress = Progress()\n    assert progress.finished\n    assert progress.tasks == []\n    assert progress.task_ids == []\n\n\ndef test_track_thread() -> None:\n    progress = Progress()\n    task_id = progress.add_task(\"foo\")\n    track_thread = _TrackThread(progress, task_id, 0.1)\n    assert track_thread.completed == 0\n    from time import sleep\n\n    with track_thread:\n        track_thread.completed = 1\n        sleep(0.3)\n        assert progress.tasks[task_id].completed >= 1\n        track_thread.completed += 1\n\n\ndef test_reset() -> None:\n    progress = Progress()\n    task_id = progress.add_task(\"foo\")\n    progress.advance(task_id, 1)\n    progress.advance(task_id, 1)\n    progress.advance(task_id, 1)\n    progress.advance(task_id, 7)\n    task = progress.tasks[task_id]\n    assert task.completed == 10\n    progress.reset(\n        task_id,\n        total=200,\n        completed=20,\n        visible=False,\n        description=\"bar\",\n        example=\"egg\",\n    )\n    assert task.total == 200\n    assert task.completed == 20\n    assert task.visible == False\n    assert task.description == \"bar\"\n    assert task.fields == {\"example\": \"egg\"}\n    assert not task._progress\n\n\ndef test_progress_max_refresh() -> None:\n    \"\"\"Test max_refresh argument.\"\"\"\n    time = 0.0\n\n    def get_time() -> float:\n        nonlocal time\n        try:\n            return time\n        finally:\n            time = time + 1.0\n\n    console = Console(\n        color_system=None,\n        width=80,\n        legacy_windows=False,\n        force_terminal=True,\n        _environ={},\n    )\n    column = TextColumn(\"{task.description}\")\n    column.max_refresh = 3\n    progress = Progress(\n        column,\n        get_time=get_time,\n        auto_refresh=False,\n        console=console,\n    )\n    console.begin_capture()\n    with progress:\n        task_id = progress.add_task(\"start\")\n        for tick in range(6):\n            progress.update(task_id, description=f\"tick {tick}\")\n            progress.refresh()\n    result = console.end_capture()\n    print(repr(result))\n    assert (\n        result\n        == \"\\x1b[?25l\\r\\x1b[2Kstart\\r\\x1b[2Kstart\\r\\x1b[2Ktick 1\\r\\x1b[2Ktick 1\\r\\x1b[2Ktick 3\\r\\x1b[2Ktick 3\\r\\x1b[2Ktick 5\\r\\x1b[2Ktick 5\\n\\x1b[?25h\"\n    )\n\n\ndef test_live_is_started_if_progress_is_enabled() -> None:\n    progress = Progress(auto_refresh=False, disable=False)\n\n    with progress:\n        assert progress.live._started\n\n\ndef test_live_is_not_started_if_progress_is_disabled() -> None:\n    progress = Progress(auto_refresh=False, disable=True)\n\n    with progress:\n        assert not progress.live._started\n\n\ndef test_no_output_if_progress_is_disabled() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=60,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        _environ={},\n    )\n    progress = Progress(\n        console=console,\n        disable=True,\n    )\n    test = [\"foo\", \"bar\", \"baz\"]\n    expected_values = iter(test)\n    with progress:\n        for value in progress.track(test, description=\"test\"):\n            assert value == next(expected_values)\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = \"\"\n    assert result == expected\n\n\ndef test_open() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=60,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        _environ={},\n    )\n    progress = Progress(\n        console=console,\n    )\n\n    fd, filename = tempfile.mkstemp()\n    with os.fdopen(fd, \"wb\") as f:\n        f.write(b\"Hello, World!\")\n    try:\n        with rich.progress.open(filename) as f:\n            assert f.read() == \"Hello, World!\"\n        assert f.closed\n    finally:\n        os.remove(filename)\n\n\ndef test_open_text_mode() -> None:\n    fd, filename = tempfile.mkstemp()\n    with os.fdopen(fd, \"wb\") as f:\n        f.write(b\"Hello, World!\")\n    try:\n        with rich.progress.open(filename, \"r\") as f:\n            assert f.read() == \"Hello, World!\"\n            assert f.name == filename\n        assert f.closed\n    finally:\n        os.remove(filename)\n\n\ndef test_wrap_file() -> None:\n    fd, filename = tempfile.mkstemp()\n    with os.fdopen(fd, \"wb\") as f:\n        total = f.write(b\"Hello, World!\")\n    try:\n        with open(filename, \"rb\") as file:\n            with rich.progress.wrap_file(file, total=total) as f:\n                assert f.read() == b\"Hello, World!\"\n                assert f.mode == \"rb\"\n                assert f.name == filename\n            assert f.closed\n            assert not f.handle.closed\n            assert not file.closed\n        assert file.closed\n    finally:\n        os.remove(filename)\n\n\ndef test_wrap_file_task_total() -> None:\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=60,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        _environ={},\n    )\n    progress = Progress(\n        console=console,\n    )\n\n    fd, filename = tempfile.mkstemp()\n    with os.fdopen(fd, \"wb\") as f:\n        total = f.write(b\"Hello, World!\")\n    try:\n        with progress:\n            with open(filename, \"rb\") as file:\n                task_id = progress.add_task(\"Reading\", total=total)\n                with progress.wrap_file(file, task_id=task_id) as f:\n                    assert f.read() == b\"Hello, World!\"\n    finally:\n        os.remove(filename)\n\n\ndef test_task_progress_column_speed():\n    speed_text = TaskProgressColumn.render_speed(None)\n    assert speed_text.plain == \"\"\n\n    speed_text = TaskProgressColumn.render_speed(5)\n    assert speed_text.plain == \"5.0 it/s\"\n\n    speed_text = TaskProgressColumn.render_speed(5000)\n    assert speed_text.plain == \"5.0\u00d710\u00b3 it/s\"\n\n    speed_text = TaskProgressColumn.render_speed(8888888)\n    assert speed_text.plain == \"8.9\u00d710\u2076 it/s\"\n\n\nif __name__ == \"__main__\":\n    _render = render_progress()\n    print(_render)\n    print(repr(_render))\n", "tests/_card_render.py": "expected = \"\\x1b[3m                                           Rich features                                            \\x1b[0m\\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   Colors   \\x1b[0m\\x1b[1;31m \\x1b[0m\u2713 \\x1b[1;32m4-bit color\\x1b[0m                 \\x1b[38;2;86;0;0;48;2;51;0;0m\u2584\\x1b[0m\\x1b[38;2;86;9;0;48;2;51;5;0m\u2584\\x1b[0m\\x1b[38;2;86;18;0;48;2;51;11;0m\u2584\\x1b[0m\\x1b[38;2;86;28;0;48;2;51;16;0m\u2584\\x1b[0m\\x1b[38;2;86;37;0;48;2;51;22;0m\u2584\\x1b[0m\\x1b[38;2;86;47;0;48;2;51;27;0m\u2584\\x1b[0m\\x1b[38;2;86;56;0;48;2;51;33;0m\u2584\\x1b[0m\\x1b[38;2;86;66;0;48;2;51;38;0m\u2584\\x1b[0m\\x1b[38;2;86;75;0;48;2;51;44;0m\u2584\\x1b[0m\\x1b[38;2;86;85;0;48;2;51;50;0m\u2584\\x1b[0m\\x1b[38;2;78;86;0;48;2;46;51;0m\u2584\\x1b[0m\\x1b[38;2;69;86;0;48;2;40;51;0m\u2584\\x1b[0m\\x1b[38;2;59;86;0;48;2;35;51;0m\u2584\\x1b[0m\\x1b[38;2;50;86;0;48;2;29;51;0m\u2584\\x1b[0m\\x1b[38;2;40;86;0;48;2;24;51;0m\u2584\\x1b[0m\\x1b[38;2;31;86;0;48;2;18;51;0m\u2584\\x1b[0m\\x1b[38;2;22;86;0;48;2;12;51;0m\u2584\\x1b[0m\\x1b[38;2;12;86;0;48;2;7;51;0m\u2584\\x1b[0m\\x1b[38;2;3;86;0;48;2;1;51;0m\u2584\\x1b[0m\\x1b[38;2;0;86;6;48;2;0;51;3m\u2584\\x1b[0m\\x1b[38;2;0;86;15;48;2;0;51;9m\u2584\\x1b[0m\\x1b[38;2;0;86;25;48;2;0;51;14m\u2584\\x1b[0m\\x1b[38;2;0;86;34;48;2;0;51;20m\u2584\\x1b[0m\\x1b[38;2;0;86;44;48;2;0;51;25m\u2584\\x1b[0m\\x1b[38;2;0;86;53;48;2;0;51;31m\u2584\\x1b[0m\\x1b[38;2;0;86;63;48;2;0;51;37m\u2584\\x1b[0m\\x1b[38;2;0;86;72;48;2;0;51;42m\u2584\\x1b[0m\\x1b[38;2;0;86;81;48;2;0;51;48m\u2584\\x1b[0m\\x1b[38;2;0;81;86;48;2;0;48;51m\u2584\\x1b[0m\\x1b[38;2;0;72;86;48;2;0;42;51m\u2584\\x1b[0m\\x1b[38;2;0;63;86;48;2;0;37;51m\u2584\\x1b[0m\\x1b[38;2;0;53;86;48;2;0;31;51m\u2584\\x1b[0m\\x1b[38;2;0;44;86;48;2;0;25;51m\u2584\\x1b[0m\\x1b[38;2;0;34;86;48;2;0;20;51m\u2584\\x1b[0m\\x1b[38;2;0;25;86;48;2;0;14;51m\u2584\\x1b[0m\\x1b[38;2;0;15;86;48;2;0;9;51m\u2584\\x1b[0m\\x1b[38;2;0;6;86;48;2;0;3;51m\u2584\\x1b[0m\\x1b[38;2;3;0;86;48;2;1;0;51m\u2584\\x1b[0m\\x1b[38;2;12;0;86;48;2;7;0;51m\u2584\\x1b[0m\\x1b[38;2;22;0;86;48;2;12;0;51m\u2584\\x1b[0m\\x1b[38;2;31;0;86;48;2;18;0;51m\u2584\\x1b[0m\\x1b[38;2;40;0;86;48;2;24;0;51m\u2584\\x1b[0m\\x1b[38;2;50;0;86;48;2;29;0;51m\u2584\\x1b[0m\\x1b[38;2;59;0;86;48;2;35;0;51m\u2584\\x1b[0m\\x1b[38;2;69;0;86;48;2;40;0;51m\u2584\\x1b[0m\\x1b[38;2;78;0;86;48;2;46;0;51m\u2584\\x1b[0m\\x1b[38;2;86;0;85;48;2;51;0;50m\u2584\\x1b[0m\\x1b[38;2;86;0;75;48;2;51;0;44m\u2584\\x1b[0m\\x1b[38;2;86;0;66;48;2;51;0;38m\u2584\\x1b[0m\\x1b[38;2;86;0;56;48;2;51;0;33m\u2584\\x1b[0m\\x1b[38;2;86;0;47;48;2;51;0;27m\u2584\\x1b[0m\\x1b[38;2;86;0;37;48;2;51;0;22m\u2584\\x1b[0m\\x1b[38;2;86;0;28;48;2;51;0;16m\u2584\\x1b[0m\\x1b[38;2;86;0;18;48;2;51;0;11m\u2584\\x1b[0m\\x1b[38;2;86;0;9;48;2;51;0;5m\u2584\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\u2713 \\x1b[1;34m8-bit color\\x1b[0m                 \\x1b[38;2;158;0;0;48;2;122;0;0m\u2584\\x1b[0m\\x1b[38;2;158;17;0;48;2;122;13;0m\u2584\\x1b[0m\\x1b[38;2;158;34;0;48;2;122;26;0m\u2584\\x1b[0m\\x1b[38;2;158;51;0;48;2;122;40;0m\u2584\\x1b[0m\\x1b[38;2;158;68;0;48;2;122;53;0m\u2584\\x1b[0m\\x1b[38;2;158;86;0;48;2;122;66;0m\u2584\\x1b[0m\\x1b[38;2;158;103;0;48;2;122;80;0m\u2584\\x1b[0m\\x1b[38;2;158;120;0;48;2;122;93;0m\u2584\\x1b[0m\\x1b[38;2;158;137;0;48;2;122;106;0m\u2584\\x1b[0m\\x1b[38;2;158;155;0;48;2;122;120;0m\u2584\\x1b[0m\\x1b[38;2;143;158;0;48;2;111;122;0m\u2584\\x1b[0m\\x1b[38;2;126;158;0;48;2;97;122;0m\u2584\\x1b[0m\\x1b[38;2;109;158;0;48;2;84;122;0m\u2584\\x1b[0m\\x1b[38;2;91;158;0;48;2;71;122;0m\u2584\\x1b[0m\\x1b[38;2;74;158;0;48;2;57;122;0m\u2584\\x1b[0m\\x1b[38;2;57;158;0;48;2;44;122;0m\u2584\\x1b[0m\\x1b[38;2;40;158;0;48;2;31;122;0m\u2584\\x1b[0m\\x1b[38;2;22;158;0;48;2;17;122;0m\u2584\\x1b[0m\\x1b[38;2;5;158;0;48;2;4;122;0m\u2584\\x1b[0m\\x1b[38;2;0;158;11;48;2;0;122;8m\u2584\\x1b[0m\\x1b[38;2;0;158;28;48;2;0;122;22m\u2584\\x1b[0m\\x1b[38;2;0;158;45;48;2;0;122;35m\u2584\\x1b[0m\\x1b[38;2;0;158;63;48;2;0;122;48m\u2584\\x1b[0m\\x1b[38;2;0;158;80;48;2;0;122;62m\u2584\\x1b[0m\\x1b[38;2;0;158;97;48;2;0;122;75m\u2584\\x1b[0m\\x1b[38;2;0;158;114;48;2;0;122;89m\u2584\\x1b[0m\\x1b[38;2;0;158;132;48;2;0;122;102m\u2584\\x1b[0m\\x1b[38;2;0;158;149;48;2;0;122;115m\u2584\\x1b[0m\\x1b[38;2;0;149;158;48;2;0;115;122m\u2584\\x1b[0m\\x1b[38;2;0;132;158;48;2;0;102;122m\u2584\\x1b[0m\\x1b[38;2;0;114;158;48;2;0;89;122m\u2584\\x1b[0m\\x1b[38;2;0;97;158;48;2;0;75;122m\u2584\\x1b[0m\\x1b[38;2;0;80;158;48;2;0;62;122m\u2584\\x1b[0m\\x1b[38;2;0;63;158;48;2;0;48;122m\u2584\\x1b[0m\\x1b[38;2;0;45;158;48;2;0;35;122m\u2584\\x1b[0m\\x1b[38;2;0;28;158;48;2;0;22;122m\u2584\\x1b[0m\\x1b[38;2;0;11;158;48;2;0;8;122m\u2584\\x1b[0m\\x1b[38;2;5;0;158;48;2;4;0;122m\u2584\\x1b[0m\\x1b[38;2;22;0;158;48;2;17;0;122m\u2584\\x1b[0m\\x1b[38;2;40;0;158;48;2;31;0;122m\u2584\\x1b[0m\\x1b[38;2;57;0;158;48;2;44;0;122m\u2584\\x1b[0m\\x1b[38;2;74;0;158;48;2;57;0;122m\u2584\\x1b[0m\\x1b[38;2;91;0;158;48;2;71;0;122m\u2584\\x1b[0m\\x1b[38;2;109;0;158;48;2;84;0;122m\u2584\\x1b[0m\\x1b[38;2;126;0;158;48;2;97;0;122m\u2584\\x1b[0m\\x1b[38;2;143;0;158;48;2;111;0;122m\u2584\\x1b[0m\\x1b[38;2;158;0;155;48;2;122;0;120m\u2584\\x1b[0m\\x1b[38;2;158;0;137;48;2;122;0;106m\u2584\\x1b[0m\\x1b[38;2;158;0;120;48;2;122;0;93m\u2584\\x1b[0m\\x1b[38;2;158;0;103;48;2;122;0;80m\u2584\\x1b[0m\\x1b[38;2;158;0;86;48;2;122;0;66m\u2584\\x1b[0m\\x1b[38;2;158;0;68;48;2;122;0;53m\u2584\\x1b[0m\\x1b[38;2;158;0;51;48;2;122;0;40m\u2584\\x1b[0m\\x1b[38;2;158;0;34;48;2;122;0;26m\u2584\\x1b[0m\\x1b[38;2;158;0;17;48;2;122;0;13m\u2584\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\u2713 \\x1b[1;35mTruecolor (16.7 million)\\x1b[0m    \\x1b[38;2;229;0;0;48;2;193;0;0m\u2584\\x1b[0m\\x1b[38;2;229;25;0;48;2;193;21;0m\u2584\\x1b[0m\\x1b[38;2;229;50;0;48;2;193;42;0m\u2584\\x1b[0m\\x1b[38;2;229;75;0;48;2;193;63;0m\u2584\\x1b[0m\\x1b[38;2;229;100;0;48;2;193;84;0m\u2584\\x1b[0m\\x1b[38;2;229;125;0;48;2;193;105;0m\u2584\\x1b[0m\\x1b[38;2;229;150;0;48;2;193;126;0m\u2584\\x1b[0m\\x1b[38;2;229;175;0;48;2;193;147;0m\u2584\\x1b[0m\\x1b[38;2;229;200;0;48;2;193;169;0m\u2584\\x1b[0m\\x1b[38;2;229;225;0;48;2;193;190;0m\u2584\\x1b[0m\\x1b[38;2;208;229;0;48;2;176;193;0m\u2584\\x1b[0m\\x1b[38;2;183;229;0;48;2;155;193;0m\u2584\\x1b[0m\\x1b[38;2;158;229;0;48;2;133;193;0m\u2584\\x1b[0m\\x1b[38;2;133;229;0;48;2;112;193;0m\u2584\\x1b[0m\\x1b[38;2;108;229;0;48;2;91;193;0m\u2584\\x1b[0m\\x1b[38;2;83;229;0;48;2;70;193;0m\u2584\\x1b[0m\\x1b[38;2;58;229;0;48;2;49;193;0m\u2584\\x1b[0m\\x1b[38;2;33;229;0;48;2;28;193;0m\u2584\\x1b[0m\\x1b[38;2;8;229;0;48;2;7;193;0m\u2584\\x1b[0m\\x1b[38;2;0;229;16;48;2;0;193;14m\u2584\\x1b[0m\\x1b[38;2;0;229;41;48;2;0;193;35m\u2584\\x1b[0m\\x1b[38;2;0;229;66;48;2;0;193;56m\u2584\\x1b[0m\\x1b[38;2;0;229;91;48;2;0;193;77m\u2584\\x1b[0m\\x1b[38;2;0;229;116;48;2;0;193;98m\u2584\\x1b[0m\\x1b[38;2;0;229;141;48;2;0;193;119m\u2584\\x1b[0m\\x1b[38;2;0;229;166;48;2;0;193;140m\u2584\\x1b[0m\\x1b[38;2;0;229;191;48;2;0;193;162m\u2584\\x1b[0m\\x1b[38;2;0;229;216;48;2;0;193;183m\u2584\\x1b[0m\\x1b[38;2;0;216;229;48;2;0;183;193m\u2584\\x1b[0m\\x1b[38;2;0;191;229;48;2;0;162;193m\u2584\\x1b[0m\\x1b[38;2;0;166;229;48;2;0;140;193m\u2584\\x1b[0m\\x1b[38;2;0;141;229;48;2;0;119;193m\u2584\\x1b[0m\\x1b[38;2;0;116;229;48;2;0;98;193m\u2584\\x1b[0m\\x1b[38;2;0;91;229;48;2;0;77;193m\u2584\\x1b[0m\\x1b[38;2;0;66;229;48;2;0;56;193m\u2584\\x1b[0m\\x1b[38;2;0;41;229;48;2;0;35;193m\u2584\\x1b[0m\\x1b[38;2;0;16;229;48;2;0;14;193m\u2584\\x1b[0m\\x1b[38;2;8;0;229;48;2;7;0;193m\u2584\\x1b[0m\\x1b[38;2;33;0;229;48;2;28;0;193m\u2584\\x1b[0m\\x1b[38;2;58;0;229;48;2;49;0;193m\u2584\\x1b[0m\\x1b[38;2;83;0;229;48;2;70;0;193m\u2584\\x1b[0m\\x1b[38;2;108;0;229;48;2;91;0;193m\u2584\\x1b[0m\\x1b[38;2;133;0;229;48;2;112;0;193m\u2584\\x1b[0m\\x1b[38;2;158;0;229;48;2;133;0;193m\u2584\\x1b[0m\\x1b[38;2;183;0;229;48;2;155;0;193m\u2584\\x1b[0m\\x1b[38;2;208;0;229;48;2;176;0;193m\u2584\\x1b[0m\\x1b[38;2;229;0;225;48;2;193;0;190m\u2584\\x1b[0m\\x1b[38;2;229;0;200;48;2;193;0;169m\u2584\\x1b[0m\\x1b[38;2;229;0;175;48;2;193;0;147m\u2584\\x1b[0m\\x1b[38;2;229;0;150;48;2;193;0;126m\u2584\\x1b[0m\\x1b[38;2;229;0;125;48;2;193;0;105m\u2584\\x1b[0m\\x1b[38;2;229;0;100;48;2;193;0;84m\u2584\\x1b[0m\\x1b[38;2;229;0;75;48;2;193;0;63m\u2584\\x1b[0m\\x1b[38;2;229;0;50;48;2;193;0;42m\u2584\\x1b[0m\\x1b[38;2;229;0;25;48;2;193;0;21m\u2584\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\u2713 \\x1b[1;33mDumb terminals\\x1b[0m              \\x1b[38;2;254;45;45;48;2;255;10;10m\u2584\\x1b[0m\\x1b[38;2;254;68;45;48;2;255;36;10m\u2584\\x1b[0m\\x1b[38;2;254;91;45;48;2;255;63;10m\u2584\\x1b[0m\\x1b[38;2;254;114;45;48;2;255;90;10m\u2584\\x1b[0m\\x1b[38;2;254;137;45;48;2;255;117;10m\u2584\\x1b[0m\\x1b[38;2;254;159;45;48;2;255;143;10m\u2584\\x1b[0m\\x1b[38;2;254;182;45;48;2;255;170;10m\u2584\\x1b[0m\\x1b[38;2;254;205;45;48;2;255;197;10m\u2584\\x1b[0m\\x1b[38;2;254;228;45;48;2;255;223;10m\u2584\\x1b[0m\\x1b[38;2;254;251;45;48;2;255;250;10m\u2584\\x1b[0m\\x1b[38;2;235;254;45;48;2;232;255;10m\u2584\\x1b[0m\\x1b[38;2;213;254;45;48;2;206;255;10m\u2584\\x1b[0m\\x1b[38;2;190;254;45;48;2;179;255;10m\u2584\\x1b[0m\\x1b[38;2;167;254;45;48;2;152;255;10m\u2584\\x1b[0m\\x1b[38;2;144;254;45;48;2;125;255;10m\u2584\\x1b[0m\\x1b[38;2;121;254;45;48;2;99;255;10m\u2584\\x1b[0m\\x1b[38;2;99;254;45;48;2;72;255;10m\u2584\\x1b[0m\\x1b[38;2;76;254;45;48;2;45;255;10m\u2584\\x1b[0m\\x1b[38;2;53;254;45;48;2;19;255;10m\u2584\\x1b[0m\\x1b[38;2;45;254;61;48;2;10;255;28m\u2584\\x1b[0m\\x1b[38;2;45;254;83;48;2;10;255;54m\u2584\\x1b[0m\\x1b[38;2;45;254;106;48;2;10;255;81m\u2584\\x1b[0m\\x1b[38;2;45;254;129;48;2;10;255;108m\u2584\\x1b[0m\\x1b[38;2;45;254;152;48;2;10;255;134m\u2584\\x1b[0m\\x1b[38;2;45;254;175;48;2;10;255;161m\u2584\\x1b[0m\\x1b[38;2;45;254;197;48;2;10;255;188m\u2584\\x1b[0m\\x1b[38;2;45;254;220;48;2;10;255;214m\u2584\\x1b[0m\\x1b[38;2;45;254;243;48;2;10;255;241m\u2584\\x1b[0m\\x1b[38;2;45;243;254;48;2;10;241;255m\u2584\\x1b[0m\\x1b[38;2;45;220;254;48;2;10;214;255m\u2584\\x1b[0m\\x1b[38;2;45;197;254;48;2;10;188;255m\u2584\\x1b[0m\\x1b[38;2;45;175;254;48;2;10;161;255m\u2584\\x1b[0m\\x1b[38;2;45;152;254;48;2;10;134;255m\u2584\\x1b[0m\\x1b[38;2;45;129;254;48;2;10;108;255m\u2584\\x1b[0m\\x1b[38;2;45;106;254;48;2;10;81;255m\u2584\\x1b[0m\\x1b[38;2;45;83;254;48;2;10;54;255m\u2584\\x1b[0m\\x1b[38;2;45;61;254;48;2;10;28;255m\u2584\\x1b[0m\\x1b[38;2;53;45;254;48;2;19;10;255m\u2584\\x1b[0m\\x1b[38;2;76;45;254;48;2;45;10;255m\u2584\\x1b[0m\\x1b[38;2;99;45;254;48;2;72;10;255m\u2584\\x1b[0m\\x1b[38;2;121;45;254;48;2;99;10;255m\u2584\\x1b[0m\\x1b[38;2;144;45;254;48;2;125;10;255m\u2584\\x1b[0m\\x1b[38;2;167;45;254;48;2;152;10;255m\u2584\\x1b[0m\\x1b[38;2;190;45;254;48;2;179;10;255m\u2584\\x1b[0m\\x1b[38;2;213;45;254;48;2;206;10;255m\u2584\\x1b[0m\\x1b[38;2;235;45;254;48;2;232;10;255m\u2584\\x1b[0m\\x1b[38;2;254;45;251;48;2;255;10;250m\u2584\\x1b[0m\\x1b[38;2;254;45;228;48;2;255;10;223m\u2584\\x1b[0m\\x1b[38;2;254;45;205;48;2;255;10;197m\u2584\\x1b[0m\\x1b[38;2;254;45;182;48;2;255;10;170m\u2584\\x1b[0m\\x1b[38;2;254;45;159;48;2;255;10;143m\u2584\\x1b[0m\\x1b[38;2;254;45;137;48;2;255;10;117m\u2584\\x1b[0m\\x1b[38;2;254;45;114;48;2;255;10;90m\u2584\\x1b[0m\\x1b[38;2;254;45;91;48;2;255;10;63m\u2584\\x1b[0m\\x1b[38;2;254;45;68;48;2;255;10;36m\u2584\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\u2713 \\x1b[1;36mAutomatic color conversion\\x1b[0m  \\x1b[38;2;255;117;117;48;2;255;81;81m\u2584\\x1b[0m\\x1b[38;2;255;132;117;48;2;255;100;81m\u2584\\x1b[0m\\x1b[38;2;255;147;117;48;2;255;119;81m\u2584\\x1b[0m\\x1b[38;2;255;162;117;48;2;255;138;81m\u2584\\x1b[0m\\x1b[38;2;255;177;117;48;2;255;157;81m\u2584\\x1b[0m\\x1b[38;2;255;192;117;48;2;255;176;81m\u2584\\x1b[0m\\x1b[38;2;255;207;117;48;2;255;195;81m\u2584\\x1b[0m\\x1b[38;2;255;222;117;48;2;255;214;81m\u2584\\x1b[0m\\x1b[38;2;255;237;117;48;2;255;232;81m\u2584\\x1b[0m\\x1b[38;2;255;252;117;48;2;255;251;81m\u2584\\x1b[0m\\x1b[38;2;242;255;117;48;2;239;255;81m\u2584\\x1b[0m\\x1b[38;2;227;255;117;48;2;220;255;81m\u2584\\x1b[0m\\x1b[38;2;212;255;117;48;2;201;255;81m\u2584\\x1b[0m\\x1b[38;2;197;255;117;48;2;182;255;81m\u2584\\x1b[0m\\x1b[38;2;182;255;117;48;2;163;255;81m\u2584\\x1b[0m\\x1b[38;2;167;255;117;48;2;144;255;81m\u2584\\x1b[0m\\x1b[38;2;152;255;117;48;2;125;255;81m\u2584\\x1b[0m\\x1b[38;2;137;255;117;48;2;106;255;81m\u2584\\x1b[0m\\x1b[38;2;122;255;117;48;2;87;255;81m\u2584\\x1b[0m\\x1b[38;2;117;255;127;48;2;81;255;94m\u2584\\x1b[0m\\x1b[38;2;117;255;142;48;2;81;255;113m\u2584\\x1b[0m\\x1b[38;2;117;255;157;48;2;81;255;132m\u2584\\x1b[0m\\x1b[38;2;117;255;172;48;2;81;255;150m\u2584\\x1b[0m\\x1b[38;2;117;255;187;48;2;81;255;169m\u2584\\x1b[0m\\x1b[38;2;117;255;202;48;2;81;255;188m\u2584\\x1b[0m\\x1b[38;2;117;255;217;48;2;81;255;207m\u2584\\x1b[0m\\x1b[38;2;117;255;232;48;2;81;255;226m\u2584\\x1b[0m\\x1b[38;2;117;255;247;48;2;81;255;245m\u2584\\x1b[0m\\x1b[38;2;117;247;255;48;2;81;245;255m\u2584\\x1b[0m\\x1b[38;2;117;232;255;48;2;81;226;255m\u2584\\x1b[0m\\x1b[38;2;117;217;255;48;2;81;207;255m\u2584\\x1b[0m\\x1b[38;2;117;202;255;48;2;81;188;255m\u2584\\x1b[0m\\x1b[38;2;117;187;255;48;2;81;169;255m\u2584\\x1b[0m\\x1b[38;2;117;172;255;48;2;81;150;255m\u2584\\x1b[0m\\x1b[38;2;117;157;255;48;2;81;132;255m\u2584\\x1b[0m\\x1b[38;2;117;142;255;48;2;81;113;255m\u2584\\x1b[0m\\x1b[38;2;117;127;255;48;2;81;94;255m\u2584\\x1b[0m\\x1b[38;2;122;117;255;48;2;87;81;255m\u2584\\x1b[0m\\x1b[38;2;137;117;255;48;2;106;81;255m\u2584\\x1b[0m\\x1b[38;2;152;117;255;48;2;125;81;255m\u2584\\x1b[0m\\x1b[38;2;167;117;255;48;2;144;81;255m\u2584\\x1b[0m\\x1b[38;2;182;117;255;48;2;163;81;255m\u2584\\x1b[0m\\x1b[38;2;197;117;255;48;2;182;81;255m\u2584\\x1b[0m\\x1b[38;2;212;117;255;48;2;201;81;255m\u2584\\x1b[0m\\x1b[38;2;227;117;255;48;2;220;81;255m\u2584\\x1b[0m\\x1b[38;2;242;117;255;48;2;239;81;255m\u2584\\x1b[0m\\x1b[38;2;255;117;252;48;2;255;81;251m\u2584\\x1b[0m\\x1b[38;2;255;117;237;48;2;255;81;232m\u2584\\x1b[0m\\x1b[38;2;255;117;222;48;2;255;81;214m\u2584\\x1b[0m\\x1b[38;2;255;117;207;48;2;255;81;195m\u2584\\x1b[0m\\x1b[38;2;255;117;192;48;2;255;81;176m\u2584\\x1b[0m\\x1b[38;2;255;117;177;48;2;255;81;157m\u2584\\x1b[0m\\x1b[38;2;255;117;162;48;2;255;81;138m\u2584\\x1b[0m\\x1b[38;2;255;117;147;48;2;255;81;119m\u2584\\x1b[0m\\x1b[38;2;255;117;132;48;2;255;81;100m\u2584\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   Styles   \\x1b[0m\\x1b[1;31m \\x1b[0mAll ansi styles: \\x1b[1mbold\\x1b[0m, \\x1b[2mdim\\x1b[0m, \\x1b[3mitalic\\x1b[0m, \\x1b[4munderline\\x1b[0m, \\x1b[9mstrikethrough\\x1b[0m, \\x1b[7mreverse\\x1b[0m, and even       \\n\\x1b[1;31m              \\x1b[0m\\x1b[5mblink\\x1b[0m.                                                                                \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m    Text    \\x1b[0m\\x1b[1;31m \\x1b[0mWord wrap text. Justify \\x1b[32mleft\\x1b[0m, \\x1b[33mcenter\\x1b[0m, \\x1b[34mright\\x1b[0m or \\x1b[31mfull\\x1b[0m.                                  \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m              \\x1b[0m\\x1b[32mLorem ipsum dolor   \\x1b[0m \\x1b[33m Lorem ipsum dolor  \\x1b[0m \\x1b[34m   Lorem ipsum dolor\\x1b[0m \\x1b[31mLorem\\x1b[0m\\x1b[31m \\x1b[0m\\x1b[31mipsum\\x1b[0m\\x1b[31m \\x1b[0m\\x1b[31mdolor\\x1b[0m\\x1b[31m  \\x1b[0m\\x1b[31msit\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32msit amet,           \\x1b[0m \\x1b[33m     sit amet,      \\x1b[0m \\x1b[34m           sit amet,\\x1b[0m \\x1b[31mamet,\\x1b[0m\\x1b[31m      \\x1b[0m\\x1b[31mconsectetur\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32mconsectetur         \\x1b[0m \\x1b[33m    consectetur     \\x1b[0m \\x1b[34m         consectetur\\x1b[0m \\x1b[31madipiscing\\x1b[0m\\x1b[31m       \\x1b[0m\\x1b[31melit.\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32madipiscing elit.    \\x1b[0m \\x1b[33m  adipiscing elit.  \\x1b[0m \\x1b[34m    adipiscing elit.\\x1b[0m \\x1b[31mQuisque\\x1b[0m\\x1b[31m \\x1b[0m\\x1b[31min\\x1b[0m\\x1b[31m  \\x1b[0m\\x1b[31mmetus\\x1b[0m\\x1b[31m  \\x1b[0m\\x1b[31msed\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32mQuisque in metus sed\\x1b[0m \\x1b[33mQuisque in metus sed\\x1b[0m \\x1b[34mQuisque in metus sed\\x1b[0m \\x1b[31msapien\\x1b[0m\\x1b[31m       \\x1b[0m\\x1b[31multricies\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32msapien ultricies    \\x1b[0m \\x1b[33m  sapien ultricies  \\x1b[0m \\x1b[34m    sapien ultricies\\x1b[0m \\x1b[31mpretium\\x1b[0m\\x1b[31m  \\x1b[0m\\x1b[31ma\\x1b[0m\\x1b[31m  \\x1b[0m\\x1b[31mat\\x1b[0m\\x1b[31m  \\x1b[0m\\x1b[31mjusto.\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32mpretium a at justo. \\x1b[0m \\x1b[33mpretium a at justo. \\x1b[0m \\x1b[34m pretium a at justo.\\x1b[0m \\x1b[31mMaecenas\\x1b[0m\\x1b[31m \\x1b[0m\\x1b[31mluctus\\x1b[0m\\x1b[31m  \\x1b[0m\\x1b[31mvelit\\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32mMaecenas luctus     \\x1b[0m \\x1b[33m  Maecenas luctus   \\x1b[0m \\x1b[34m     Maecenas luctus\\x1b[0m \\x1b[31met auctor maximus.\\x1b[0m     \\n\\x1b[1;31m              \\x1b[0m\\x1b[32mvelit et auctor     \\x1b[0m \\x1b[33m  velit et auctor   \\x1b[0m \\x1b[34m     velit et auctor\\x1b[0m                        \\n\\x1b[1;31m              \\x1b[0m\\x1b[32mmaximus.            \\x1b[0m \\x1b[33m      maximus.      \\x1b[0m \\x1b[34m            maximus.\\x1b[0m                        \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   Asian    \\x1b[0m\\x1b[1;31m \\x1b[0m\ud83c\udde8\ud83c\uddf3  \u8be5\u5e93\u652f\u6301\u4e2d\u6587\uff0c\u65e5\u6587\u548c\u97e9\u6587\u6587\u672c\uff01                                                    \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m  language  \\x1b[0m\\x1b[1;31m \\x1b[0m\ud83c\uddef\ud83c\uddf5  \u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4e2d\u56fd\u8a9e\u3001\u65e5\u672c\u8a9e\u3001\u97d3\u56fd\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059                  \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m  support   \\x1b[0m\\x1b[1;31m \\x1b[0m\ud83c\uddf0\ud83c\uddf7  \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc911\uad6d\uc5b4, \uc77c\ubcf8\uc5b4 \ubc0f \ud55c\uad6d\uc5b4 \ud14d\uc2a4\ud2b8\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4                      \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   Markup   \\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[1;35mRich\\x1b[0m supports a simple \\x1b[3mbbcode\\x1b[0m-like \\x1b[1mmarkup\\x1b[0m for \\x1b[33mcolor\\x1b[0m, \\x1b[4mstyle\\x1b[0m, and emoji! \ud83d\udc4d \ud83c\udf4e \ud83d\udc1c \ud83d\udc3b  \u2026 \\n\\x1b[1;31m              \\x1b[0m\ud83d\ude8c                                                                                    \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   Tables   \\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[1m \\x1b[0m\\x1b[1;32mDate\\x1b[0m\\x1b[1m        \\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1;34mTitle\\x1b[0m\\x1b[1m                          \\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1;36mProduction Budget\\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1m    \\x1b[0m\\x1b[1;35mBox Office\\x1b[0m\\x1b[1m \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \\n\\x1b[1;31m              \\x1b[0m\\x1b[32m \\x1b[0m\\x1b[32mDec 20, 2019\\x1b[0m\\x1b[32m \\x1b[0m \\x1b[34m \\x1b[0m\\x1b[34mStar Wars: The Rise of         \\x1b[0m\\x1b[34m \\x1b[0m \\x1b[36m \\x1b[0m\\x1b[36m     $275,000,000\\x1b[0m\\x1b[36m \\x1b[0m \\x1b[35m \\x1b[0m\\x1b[35m  $375,126,118\\x1b[0m\\x1b[35m \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32m              \\x1b[0m \\x1b[34m \\x1b[0m\\x1b[34mSkywalker                      \\x1b[0m\\x1b[34m \\x1b[0m \\x1b[36m                   \\x1b[0m \\x1b[35m                \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[2;32m \\x1b[0m\\x1b[2;32mMay 25, 2018\\x1b[0m\\x1b[2;32m \\x1b[0m \\x1b[2;34m \\x1b[0m\\x1b[1;2;34mSolo\\x1b[0m\\x1b[2;34m: A Star Wars Story        \\x1b[0m\\x1b[2;34m \\x1b[0m \\x1b[2;36m \\x1b[0m\\x1b[2;36m     $275,000,000\\x1b[0m\\x1b[2;36m \\x1b[0m \\x1b[2;35m \\x1b[0m\\x1b[2;35m  $393,151,347\\x1b[0m\\x1b[2;35m \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32m \\x1b[0m\\x1b[32mDec 15, 2017\\x1b[0m\\x1b[32m \\x1b[0m \\x1b[34m \\x1b[0m\\x1b[34mStar Wars Ep. VIII: The Last   \\x1b[0m\\x1b[34m \\x1b[0m \\x1b[36m \\x1b[0m\\x1b[36m     $262,000,000\\x1b[0m\\x1b[36m \\x1b[0m \\x1b[35m \\x1b[0m\\x1b[1;35m$1,332,539,889\\x1b[0m\\x1b[35m \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[32m              \\x1b[0m \\x1b[34m \\x1b[0m\\x1b[34mJedi                           \\x1b[0m\\x1b[34m \\x1b[0m \\x1b[36m                   \\x1b[0m \\x1b[35m                \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[2;32m \\x1b[0m\\x1b[2;32mMay 19, 1999\\x1b[0m\\x1b[2;32m \\x1b[0m \\x1b[2;34m \\x1b[0m\\x1b[2;34mStar Wars Ep. \\x1b[0m\\x1b[1;2;34mI\\x1b[0m\\x1b[2;34m: \\x1b[0m\\x1b[2;3;34mThe phantom \\x1b[0m\\x1b[2;34m  \\x1b[0m\\x1b[2;34m \\x1b[0m \\x1b[2;36m \\x1b[0m\\x1b[2;36m     $115,000,000\\x1b[0m\\x1b[2;36m \\x1b[0m \\x1b[2;35m \\x1b[0m\\x1b[2;35m$1,027,044,677\\x1b[0m\\x1b[2;35m \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m\\x1b[2;32m              \\x1b[0m \\x1b[2;34m \\x1b[0m\\x1b[2;3;34mMenace\\x1b[0m\\x1b[2;34m                         \\x1b[0m\\x1b[2;34m \\x1b[0m \\x1b[2;36m                   \\x1b[0m \\x1b[2;35m                \\x1b[0m \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   Syntax   \\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 1 \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mdef\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34miter_last\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mIterable\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m[\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mT\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m]\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m-\\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m>\\x1b[0m  \\x1b[1m{\\x1b[0m                                         \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31mhighlighting\\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 2 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;230;219;116;48;2;39;40;34m\\\"\\\"\\\"Iterate and generate a tuple w\\x1b[0m  \\x1b[2;32m\u2502   \\x1b[0m\\x1b[32m'foo'\\x1b[0m: \\x1b[1m[\\x1b[0m                              \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m     &      \\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 3 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalues\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m       \\x1b[0m  \\x1b[2;32m\u2502   \u2502   \\x1b[0m\\x1b[1;36m3.1427\\x1b[0m,                           \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   pretty   \\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 4 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                             \\x1b[0m  \\x1b[2;32m\u2502   \u2502   \\x1b[0m\\x1b[1m(\\x1b[0m                                 \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m  printing  \\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 5 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \u2502   \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mnext\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_va\\x1b[0m  \\x1b[2;32m\u2502   \u2502   \u2502   \\x1b[0m\\x1b[32m'Paul Atreides'\\x1b[0m,              \\n\\x1b[1;31m              \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 6 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mStopIteration\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m            \\x1b[0m  \\x1b[2;32m\u2502   \u2502   \u2502   \\x1b[0m\\x1b[32m'Vladimir Harkonnen'\\x1b[0m,         \\n\\x1b[1;31m              \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 7 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mreturn\\x1b[0m\\x1b[48;2;39;40;34m                       \\x1b[0m  \\x1b[2;32m\u2502   \u2502   \u2502   \\x1b[0m\\x1b[32m'Thufir Hawat'\\x1b[0m                \\n\\x1b[1;31m              \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 8 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mfor\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34min\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34miter_values\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m        \\x1b[0m  \\x1b[2;32m\u2502   \u2502   \\x1b[0m\\x1b[1m)\\x1b[0m                                 \\n\\x1b[1;31m              \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m 9 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mFalse\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m  \\x1b[0m  \\x1b[2;32m\u2502   \\x1b[0m\\x1b[1m]\\x1b[0m,                                    \\n\\x1b[1;31m              \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m10 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \u2502   \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mvalue\\x1b[0m\\x1b[48;2;39;40;34m       \\x1b[0m  \\x1b[2;32m\u2502   \\x1b[0m\\x1b[32m'atomic'\\x1b[0m: \\x1b[1m(\\x1b[0m\\x1b[3;91mFalse\\x1b[0m, \\x1b[3;92mTrue\\x1b[0m, \\x1b[3;35mNone\\x1b[0m\\x1b[1m)\\x1b[0m         \\n\\x1b[1;31m              \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m11 \\x1b[0m\\x1b[2;38;2;149;144;119;48;2;39;40;34m\u2502   \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34myield\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mTrue\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m,\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\\x1b[0m\\x1b[48;2;39;40;34m       \\x1b[0m  \\x1b[1m}\\x1b[0m                                         \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m  Markdown  \\x1b[0m\\x1b[1;31m \\x1b[0m\\x1b[36m# Markdown\\x1b[0m                                  \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \\n\\x1b[1;31m              \\x1b[0m                                            \u2503               \\x1b[1mMarkdown\\x1b[0m                \u2503 \\n\\x1b[1;31m              \\x1b[0m\\x1b[36mSupports much of the *markdown* \\x1b[0m            \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \\n\\x1b[1;31m              \\x1b[0m\\x1b[36m__syntax__!\\x1b[0m                                                                           \\n\\x1b[1;31m              \\x1b[0m                                            Supports much of the \\x1b[3mmarkdown\\x1b[0m \\x1b[1msyntax\\x1b[0m!     \\n\\x1b[1;31m              \\x1b[0m\\x1b[36m- Headers\\x1b[0m                                                                             \\n\\x1b[1;31m              \\x1b[0m\\x1b[36m- Basic formatting: **bold**, *italic*, \\x1b[0m    \\x1b[1;33m \u2022 \\x1b[0mHeaders                                \\n\\x1b[1;31m              \\x1b[0m\\x1b[36m`code`\\x1b[0m                                      \\x1b[1;33m \u2022 \\x1b[0mBasic formatting: \\x1b[1mbold\\x1b[0m, \\x1b[3mitalic\\x1b[0m, \\x1b[1;36;40mcode\\x1b[0m   \\n\\x1b[1;31m              \\x1b[0m\\x1b[36m- Block quotes\\x1b[0m                              \\x1b[1;33m \u2022 \\x1b[0mBlock quotes                           \\n\\x1b[1;31m              \\x1b[0m\\x1b[36m- Lists, and more...\\x1b[0m                        \\x1b[1;33m \u2022 \\x1b[0mLists, and more...                     \\n\\x1b[1;31m              \\x1b[0m\\x1b[36m    \\x1b[0m                                                                                  \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\\x1b[1;31m \\x1b[0m\\x1b[1;31m   +more!   \\x1b[0m\\x1b[1;31m \\x1b[0mProgress bars, columns, styled logging handler, tracebacks, etc...                    \\n\\x1b[1;31m              \\x1b[0m                                                                                      \\n\"\n", "tests/test_getfileno.py": "from rich._fileno import get_fileno\n\n\ndef test_get_fileno():\n    class FileLike:\n        def fileno(self) -> int:\n            return 123\n\n    assert get_fileno(FileLike()) == 123\n\n\ndef test_get_fileno_missing():\n    class FileLike:\n        pass\n\n    assert get_fileno(FileLike()) is None\n\n\ndef test_get_fileno_broken():\n    class FileLike:\n        def fileno(self) -> int:\n            1 / 0\n            return 123\n\n    assert get_fileno(FileLike()) is None\n", "tests/_exception_render.py": "expected = '\\x1b[1mTraceback\\x1b[0m \\x1b[2m(most recent call last):\\x1b[0m\\n\\x1b[34m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m File \\x1b[32m\"test_traceback.py\"\\x1b[0m, line \\x1b[1;36m24\\x1b[0m, in \\x1b[33mget_exception\\x1b[0m                                  \\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m21 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                       \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m22 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                   \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m23 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m            \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfoo\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;174;129;255;48;2;39;40;34m0\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                             \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[38;2;101;102;96;48;2;39;40;34m\u2771 \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m24 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m25 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m            \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfoobarbaz\\x1b[0m\\x1b[48;2;39;40;34m                                                          \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m26 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                    \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m27 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mtb\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;249;38;114;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mTraceback\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                       \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m File \\x1b[32m\"test_traceback.py\"\\x1b[0m, line \\x1b[1;36m20\\x1b[0m, in \\x1b[33mfoo\\x1b[0m                                            \\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m17 \\x1b[0m\\x1b[48;2;39;40;34m                                                                               \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m18 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mdef\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mfoo\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m19 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mbar\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                                 \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[38;2;101;102;96;48;2;39;40;34m\u2771 \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m20 \\x1b[0m\\x1b[48;2;39;40;34m                                                                               \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m21 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                       \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m22 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mtry\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                   \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m23 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m            \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfoo\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;174;129;255;48;2;39;40;34m0\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                             \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m File \\x1b[32m\"test_traceback.py\"\\x1b[0m, line \\x1b[1;36m17\\x1b[0m, in \\x1b[33mbar\\x1b[0m                                            \\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m14 \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mdef\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mget_exception\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;249;38;114;48;2;39;40;34m-\\x1b[0m\\x1b[38;2;249;38;114;48;2;39;40;34m>\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mTraceback\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                              \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m15 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mdef\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mbar\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m16 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mprint\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;174;129;255;48;2;39;40;34m1\\x1b[0m\\x1b[38;2;249;38;114;48;2;39;40;34m/\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                             \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[38;2;101;102;96;48;2;39;40;34m\u2771 \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m17 \\x1b[0m\\x1b[48;2;39;40;34m                                                                               \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m18 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mdef\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;166;226;46;48;2;39;40;34mfoo\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m19 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mbar\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                                 \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m20 \\x1b[0m\\x1b[48;2;39;40;34m                                                                               \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\x1b[0m\\n\\x1b[1;38;5;9mZeroDivisionError: \\x1b[0mdivision by zero\\n\\n\\x1b[3mDuring handling of the above exception, another exception occurred:\\x1b[0m\\n\\n\\x1b[1mTraceback\\x1b[0m \\x1b[2m(most recent call last):\\x1b[0m\\n\\x1b[34m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m File \\x1b[32m\"test_traceback.py\"\\x1b[0m, line \\x1b[1;36m26\\x1b[0m, in \\x1b[33mget_exception\\x1b[0m                                  \\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m23 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m            \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfoo\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;174;129;255;48;2;39;40;34m0\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                             \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m24 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m25 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m            \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfoobarbaz\\x1b[0m\\x1b[48;2;39;40;34m                                                          \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[38;2;101;102;96;48;2;39;40;34m\u2771 \\x1b[0m\\x1b[1;38;2;227;227;221;48;2;39;40;34m26 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m    \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mexcept\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m:\\x1b[0m\\x1b[48;2;39;40;34m                                                                    \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m27 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mtb\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;249;38;114;48;2;39;40;34m=\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mTraceback\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m(\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m)\\x1b[0m\\x1b[48;2;39;40;34m                                                       \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m28 \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m        \\x1b[0m\\x1b[38;2;102;217;239;48;2;39;40;34mreturn\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mtb\\x1b[0m\\x1b[48;2;39;40;34m                                                              \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2502\\x1b[0m  \\x1b[1;38;2;227;227;221;48;2;39;40;34m  \\x1b[0m\\x1b[38;2;101;102;96;48;2;39;40;34m29 \\x1b[0m\\x1b[48;2;39;40;34m                                                                               \\x1b[0m\\x1b[34m\u2502\\x1b[0m\\n\\x1b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\x1b[0m\\n\\x1b[1;38;5;9mNameError: \\x1b[0mname \\x1b[32m\\'foobarbaz\\'\\x1b[0m is not defined\\n'\n", "tests/test_containers.py": "from rich.console import Console\nfrom rich.containers import Lines, Renderables\nfrom rich.text import Span, Text\nfrom rich.style import Style\n\n\ndef test_renderables_measure():\n    console = Console()\n    text = Text(\"foo\")\n    renderables = Renderables([text])\n\n    result = renderables.__rich_measure__(console, console.options)\n    _min, _max = result\n    assert _min == 3\n    assert _max == 3\n\n    assert list(renderables) == [text]\n\n\ndef test_renderables_empty():\n    console = Console()\n    renderables = Renderables()\n\n    result = renderables.__rich_measure__(console, console.options)\n    _min, _max = result\n    assert _min == 1\n    assert _max == 1\n\n\ndef test_lines_rich_console():\n    console = Console()\n    lines = Lines([Text(\"foo\")])\n\n    result = list(lines.__rich_console__(console, console.options))\n    assert result == [Text(\"foo\")]\n\n\ndef test_lines_justify():\n    console = Console()\n    lines1 = Lines([Text(\"foo\", style=\"b\"), Text(\"test\", style=\"b\")])\n    lines1.justify(console, 10, justify=\"left\")\n    assert lines1._lines == [Text(\"foo       \"), Text(\"test      \")]\n    lines1.justify(console, 10, justify=\"center\")\n    assert lines1._lines == [Text(\"   foo    \"), Text(\"   test   \")]\n    lines1.justify(console, 10, justify=\"right\")\n    assert lines1._lines == [Text(\"       foo\"), Text(\"      test\")]\n\n    lines2 = Lines([Text(\"foo bar\", style=\"b\"), Text(\"test\", style=\"b\")])\n    lines2.justify(console, 7, justify=\"full\")\n    print(repr(lines2._lines[0].spans))\n    assert lines2._lines == [\n        Text(\n            \"foo bar\",\n            spans=[Span(0, 3, \"b\"), Span(3, 4, Style.parse(\"bold\")), Span(4, 7, \"b\")],\n        ),\n        Text(\"test\"),\n    ]\n", "tests/test_color.py": "from rich.color import (\n    blend_rgb,\n    parse_rgb_hex,\n    Color,\n    ColorParseError,\n    ColorSystem,\n    ColorType,\n    ColorTriplet,\n)\nfrom rich.style import Style\nfrom rich.text import Text, Span\n\nimport pytest\n\n\ndef test_str() -> None:\n    assert str(Color.parse(\"red\")) == \"Color('red', ColorType.STANDARD, number=1)\"\n\n\ndef test_repr() -> None:\n    assert repr(Color.parse(\"red\")) == \"Color('red', ColorType.STANDARD, number=1)\"\n\n\ndef test_color_system_repr() -> None:\n    assert repr(ColorSystem.EIGHT_BIT) == \"ColorSystem.EIGHT_BIT\"\n\n\ndef test_rich() -> None:\n    color = Color.parse(\"red\")\n    as_text = color.__rich__()\n    print(repr(as_text))\n    print(repr(as_text.spans))\n    assert as_text == Text(\n        \"<color 'red' (standard)\u2b24 >\", spans=[Span(23, 24, Style(color=color))]\n    )\n\n\ndef test_system() -> None:\n    assert Color.parse(\"default\").system == ColorSystem.STANDARD\n    assert Color.parse(\"red\").system == ColorSystem.STANDARD\n    assert Color.parse(\"#ff0000\").system == ColorSystem.TRUECOLOR\n\n\ndef test_windows() -> None:\n    assert Color(\"red\", ColorType.WINDOWS, number=1).get_ansi_codes() == (\"31\",)\n\n\ndef test_truecolor() -> None:\n    assert Color.parse(\"#ff0000\").get_truecolor() == ColorTriplet(255, 0, 0)\n    assert Color.parse(\"red\").get_truecolor() == ColorTriplet(128, 0, 0)\n    assert Color.parse(\"color(1)\").get_truecolor() == ColorTriplet(128, 0, 0)\n    assert Color.parse(\"color(17)\").get_truecolor() == ColorTriplet(0, 0, 95)\n    assert Color.parse(\"default\").get_truecolor() == ColorTriplet(0, 0, 0)\n    assert Color.parse(\"default\").get_truecolor(foreground=False) == ColorTriplet(\n        255, 255, 255\n    )\n    assert Color(\"red\", ColorType.WINDOWS, number=1).get_truecolor() == ColorTriplet(\n        197, 15, 31\n    )\n\n\ndef test_parse_success() -> None:\n    assert Color.parse(\"default\") == Color(\"default\", ColorType.DEFAULT, None, None)\n    assert Color.parse(\"red\") == Color(\"red\", ColorType.STANDARD, 1, None)\n    assert Color.parse(\"bright_red\") == Color(\"bright_red\", ColorType.STANDARD, 9, None)\n    assert Color.parse(\"yellow4\") == Color(\"yellow4\", ColorType.EIGHT_BIT, 106, None)\n    assert Color.parse(\"color(100)\") == Color(\n        \"color(100)\", ColorType.EIGHT_BIT, 100, None\n    )\n    assert Color.parse(\"#112233\") == Color(\n        \"#112233\", ColorType.TRUECOLOR, None, ColorTriplet(0x11, 0x22, 0x33)\n    )\n    assert Color.parse(\"rgb(90,100,110)\") == Color(\n        \"rgb(90,100,110)\", ColorType.TRUECOLOR, None, ColorTriplet(90, 100, 110)\n    )\n\n\ndef test_from_triplet() -> None:\n    assert Color.from_triplet(ColorTriplet(0x10, 0x20, 0x30)) == Color(\n        \"#102030\", ColorType.TRUECOLOR, None, ColorTriplet(0x10, 0x20, 0x30)\n    )\n\n\ndef test_from_rgb() -> None:\n    assert Color.from_rgb(0x10, 0x20, 0x30) == Color(\n        \"#102030\", ColorType.TRUECOLOR, None, ColorTriplet(0x10, 0x20, 0x30)\n    )\n\n\ndef test_from_ansi() -> None:\n    assert Color.from_ansi(1) == Color(\"color(1)\", ColorType.STANDARD, 1)\n\n\ndef test_default() -> None:\n    assert Color.default() == Color(\"default\", ColorType.DEFAULT, None, None)\n\n\ndef test_parse_error() -> None:\n    with pytest.raises(ColorParseError):\n        Color.parse(\"256\")\n    with pytest.raises(ColorParseError):\n        Color.parse(\"color(256)\")\n    with pytest.raises(ColorParseError):\n        Color.parse(\"rgb(999,0,0)\")\n    with pytest.raises(ColorParseError):\n        Color.parse(\"rgb(0,0)\")\n    with pytest.raises(ColorParseError):\n        Color.parse(\"rgb(0,0,0,0)\")\n    with pytest.raises(ColorParseError):\n        Color.parse(\"nosuchcolor\")\n    with pytest.raises(ColorParseError):\n        Color.parse(\"#xxyyzz\")\n\n\ndef test_get_ansi_codes() -> None:\n    assert Color.parse(\"default\").get_ansi_codes() == (\"39\",)\n    assert Color.parse(\"default\").get_ansi_codes(False) == (\"49\",)\n    assert Color.parse(\"red\").get_ansi_codes() == (\"31\",)\n    assert Color.parse(\"red\").get_ansi_codes(False) == (\"41\",)\n    assert Color.parse(\"color(1)\").get_ansi_codes() == (\"31\",)\n    assert Color.parse(\"color(1)\").get_ansi_codes(False) == (\"41\",)\n    assert Color.parse(\"#ff0000\").get_ansi_codes() == (\"38\", \"2\", \"255\", \"0\", \"0\")\n    assert Color.parse(\"#ff0000\").get_ansi_codes(False) == (\"48\", \"2\", \"255\", \"0\", \"0\")\n\n\ndef test_downgrade() -> None:\n    assert Color.parse(\"color(9)\").downgrade(0) == Color(\n        \"color(9)\", ColorType.STANDARD, 9, None\n    )\n\n    assert Color.parse(\"#000000\").downgrade(ColorSystem.EIGHT_BIT) == Color(\n        \"#000000\", ColorType.EIGHT_BIT, 16, None\n    )\n\n    assert Color.parse(\"#ffffff\").downgrade(ColorSystem.EIGHT_BIT) == Color(\n        \"#ffffff\", ColorType.EIGHT_BIT, 231, None\n    )\n\n    assert Color.parse(\"#404142\").downgrade(ColorSystem.EIGHT_BIT) == Color(\n        \"#404142\", ColorType.EIGHT_BIT, 237, None\n    )\n\n    assert Color.parse(\"#ff0000\").downgrade(ColorSystem.EIGHT_BIT) == Color(\n        \"#ff0000\", ColorType.EIGHT_BIT, 196, None\n    )\n\n    assert Color.parse(\"#ff0000\").downgrade(ColorSystem.STANDARD) == Color(\n        \"#ff0000\", ColorType.STANDARD, 1, None\n    )\n\n    assert Color.parse(\"color(9)\").downgrade(ColorSystem.STANDARD) == Color(\n        \"color(9)\", ColorType.STANDARD, 9, None\n    )\n\n    assert Color.parse(\"color(20)\").downgrade(ColorSystem.STANDARD) == Color(\n        \"color(20)\", ColorType.STANDARD, 4, None\n    )\n\n    assert Color.parse(\"red\").downgrade(ColorSystem.WINDOWS) == Color(\n        \"red\", ColorType.WINDOWS, 1, None\n    )\n\n    assert Color.parse(\"bright_red\").downgrade(ColorSystem.WINDOWS) == Color(\n        \"bright_red\", ColorType.WINDOWS, 9, None\n    )\n\n    assert Color.parse(\"#ff0000\").downgrade(ColorSystem.WINDOWS) == Color(\n        \"#ff0000\", ColorType.WINDOWS, 1, None\n    )\n\n    assert Color.parse(\"color(255)\").downgrade(ColorSystem.WINDOWS) == Color(\n        \"color(255)\", ColorType.WINDOWS, 15, None\n    )\n\n    assert Color.parse(\"#00ff00\").downgrade(ColorSystem.STANDARD) == Color(\n        \"#00ff00\", ColorType.STANDARD, 2, None\n    )\n\n\ndef test_parse_rgb_hex() -> None:\n    assert parse_rgb_hex(\"aabbcc\") == ColorTriplet(0xAA, 0xBB, 0xCC)\n\n\ndef test_blend_rgb() -> None:\n    assert blend_rgb(\n        ColorTriplet(10, 20, 30), ColorTriplet(30, 40, 50)\n    ) == ColorTriplet(20, 30, 40)\n", "tests/test_repr.py": "import sys\nfrom typing import Optional\n\nimport pytest\n\nimport rich.repr\nfrom rich.console import Console\n\nfrom inspect import Parameter\n\nskip_py37 = pytest.mark.skipif(\n    sys.version_info.minor == 7 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.7\",\n)\n\n\n@rich.repr.auto\nclass Foo:\n    def __init__(self, foo: str, bar: Optional[int] = None, egg: int = 1):\n        self.foo = foo\n        self.bar = bar\n        self.egg = egg\n\n    def __rich_repr__(self):\n        yield self.foo\n        yield None, self.foo,\n        yield \"bar\", self.bar, None\n        yield \"egg\", self.egg\n\n\n@rich.repr.auto\nclass Egg:\n    def __init__(self, foo: str, bar: Optional[int] = None, egg: int = 1):\n        self.foo = foo\n        self.bar = bar\n        self.egg = egg\n\n\n@rich.repr.auto\nclass BrokenEgg:\n    def __init__(self, foo: str, *, bar: Optional[int] = None, egg: int = 1):\n        self.foo = foo\n        self.fubar = bar\n        self.egg = egg\n\n\n@rich.repr.auto(angular=True)\nclass AngularEgg:\n    def __init__(self, foo: str, *, bar: Optional[int] = None, egg: int = 1):\n        self.foo = foo\n        self.bar = bar\n        self.egg = egg\n\n\n@rich.repr.auto\nclass Bar(Foo):\n    def __rich_repr__(self):\n        yield (self.foo,)\n        yield None, self.foo,\n        yield \"bar\", self.bar, None\n        yield \"egg\", self.egg\n\n    __rich_repr__.angular = True\n\n\nclass StupidClass:\n    def __init__(self, a):\n        self.a = a\n\n    def __eq__(self, other) -> bool:\n        if other is Parameter.empty:\n            return True\n        try:\n            return self.a == other.a\n        except Exception:\n            return False\n\n    def __ne__(self, other: object) -> bool:\n        return not self.__eq__(other)\n\n\nclass NotStupid:\n    pass\n\n\n@rich.repr.auto\nclass Bird:\n    def __init__(\n        self, name, eats, fly=True, another=StupidClass(2), extinct=NotStupid()\n    ):\n        self.name = name\n        self.eats = eats\n        self.fly = fly\n        self.another = another\n        self.extinct = extinct\n\n\ndef test_rich_repr() -> None:\n    assert (repr(Foo(\"hello\"))) == \"Foo('hello', 'hello', egg=1)\"\n    assert (repr(Foo(\"hello\", bar=3))) == \"Foo('hello', 'hello', bar=3, egg=1)\"\n\n\n@skip_py37\ndef test_rich_repr_positional_only() -> None:\n    _locals = locals().copy()\n    exec(\n        \"\"\"\\\n@rich.repr.auto\nclass PosOnly:\n    def __init__(self, foo, /):\n        self.foo = 1\n    \"\"\",\n        globals(),\n        _locals,\n    )\n    p = _locals[\"PosOnly\"](1)\n    assert repr(p) == \"PosOnly(1)\"\n\n\ndef test_rich_angular() -> None:\n    assert (repr(Bar(\"hello\"))) == \"<Bar 'hello' 'hello' egg=1>\"\n    assert (repr(Bar(\"hello\", bar=3))) == \"<Bar 'hello' 'hello' bar=3 egg=1>\"\n\n\ndef test_rich_repr_auto() -> None:\n    assert repr(Egg(\"hello\", egg=2)) == \"Egg('hello', egg=2)\"\n    stupid_class = StupidClass(9)\n    not_stupid = NotStupid()\n    assert (\n        repr(Bird(\"penguin\", [\"fish\"], another=stupid_class, extinct=not_stupid))\n        == f\"Bird('penguin', ['fish'], another={repr(stupid_class)}, extinct={repr(not_stupid)})\"\n    )\n\n\ndef test_rich_repr_auto_angular() -> None:\n    assert repr(AngularEgg(\"hello\", egg=2)) == \"<AngularEgg 'hello' egg=2>\"\n\n\ndef test_broken_egg() -> None:\n    with pytest.raises(rich.repr.ReprError):\n        repr(BrokenEgg(\"foo\"))\n\n\ndef test_rich_pretty() -> None:\n    console = Console()\n    with console.capture() as capture:\n        console.print(Foo(\"hello\", bar=3))\n    result = capture.get()\n    expected = \"Foo('hello', 'hello', bar=3, egg=1)\\n\"\n    assert result == expected\n\n\ndef test_rich_pretty_angular() -> None:\n    console = Console()\n    with console.capture() as capture:\n        console.print(Bar(\"hello\", bar=3))\n    result = capture.get()\n    expected = \"<Bar 'hello' 'hello' bar=3 egg=1>\\n\"\n    assert result == expected\n", "tests/test_control.py": "from rich.control import Control, escape_control_codes, strip_control_codes\nfrom rich.segment import ControlType, Segment\n\n\ndef test_control():\n    control = Control(ControlType.BELL)\n    assert str(control) == \"\\x07\"\n\n\ndef test_strip_control_codes():\n    assert strip_control_codes(\"\") == \"\"\n    assert strip_control_codes(\"foo\\rbar\") == \"foobar\"\n    assert strip_control_codes(\"Fear is the mind killer\") == \"Fear is the mind killer\"\n\n\ndef test_escape_control_codes():\n    assert escape_control_codes(\"\") == \"\"\n    assert escape_control_codes(\"foo\\rbar\") == \"foo\\\\rbar\"\n    assert escape_control_codes(\"Fear is the mind killer\") == \"Fear is the mind killer\"\n\n\ndef test_control_move_to():\n    control = Control.move_to(5, 10)\n    print(control.segment)\n    assert control.segment == Segment(\n        \"\\x1b[11;6H\", None, [(ControlType.CURSOR_MOVE_TO, 5, 10)]\n    )\n\n\ndef test_control_move():\n    assert Control.move(0, 0).segment == Segment(\"\", None, [])\n    control = Control.move(3, 4)\n    print(repr(control.segment))\n    assert control.segment == Segment(\n        \"\\x1b[3C\\x1b[4B\",\n        None,\n        [(ControlType.CURSOR_FORWARD, 3), (ControlType.CURSOR_DOWN, 4)],\n    )\n\n\ndef test_move_to_column():\n    print(repr(Control.move_to_column(10, 20).segment))\n    assert Control.move_to_column(10, 20).segment == Segment(\n        \"\\x1b[11G\\x1b[20B\",\n        None,\n        [(ControlType.CURSOR_MOVE_TO_COLUMN, 10), (ControlType.CURSOR_DOWN, 20)],\n    )\n\n    assert Control.move_to_column(10, -20).segment == Segment(\n        \"\\x1b[11G\\x1b[20A\",\n        None,\n        [(ControlType.CURSOR_MOVE_TO_COLUMN, 10), (ControlType.CURSOR_UP, 20)],\n    )\n\n\ndef test_title():\n    control_segment = Control.title(\"hello\").segment\n    assert control_segment == Segment(\n        \"\\x1b]0;hello\\x07\",\n        None,\n        [(ControlType.SET_WINDOW_TITLE, \"hello\")],\n    )\n", "tests/test_rule_in_table.py": "import io\nfrom textwrap import dedent\n\nimport pytest\n\nfrom rich import box\nfrom rich.console import Console\nfrom rich.rule import Rule\nfrom rich.table import Table\n\n\n@pytest.mark.parametrize(\"expand_kwarg\", ({}, {\"expand\": False}))\ndef test_rule_in_unexpanded_table(expand_kwarg):\n    console = Console(width=32, file=io.StringIO(), legacy_windows=False, _environ={})\n    table = Table(box=box.ASCII, show_header=False, **expand_kwarg)\n    table.add_column()\n    table.add_column()\n    table.add_row(\"COL1\", \"COL2\")\n    table.add_row(\"COL1\", Rule())\n    table.add_row(\"COL1\", \"COL2\")\n    console.print(table)\n    expected = dedent(\n        \"\"\"\\\n        +-------------+\n        | COL1 | COL2 |\n        | COL1 | \u2500\u2500\u2500\u2500 |\n        | COL1 | COL2 |\n        +-------------+\n        \"\"\"\n    )\n    result = console.file.getvalue()\n    assert result == expected\n\n\ndef test_rule_in_expanded_table():\n    console = Console(width=32, file=io.StringIO(), legacy_windows=False, _environ={})\n    table = Table(box=box.ASCII, expand=True, show_header=False)\n    table.add_column()\n    table.add_column()\n    table.add_row(\"COL1\", \"COL2\")\n    table.add_row(\"COL1\", Rule(style=None))\n    table.add_row(\"COL1\", \"COL2\")\n    console.print(table)\n    expected = dedent(\n        \"\"\"\\\n        +------------------------------+\n        | COL1          | COL2         |\n        | COL1          | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 |\n        | COL1          | COL2         |\n        +------------------------------+\n        \"\"\"\n    )\n    result = console.file.getvalue()\n    assert result == expected\n\n\ndef test_rule_in_ratio_table():\n    console = Console(width=32, file=io.StringIO(), legacy_windows=False, _environ={})\n    table = Table(box=box.ASCII, expand=True, show_header=False)\n    table.add_column(ratio=1)\n    table.add_column()\n    table.add_row(\"COL1\", \"COL2\")\n    table.add_row(\"COL1\", Rule(style=None))\n    table.add_row(\"COL1\", \"COL2\")\n    console.print(table)\n    expected = dedent(\n        \"\"\"\\\n        +------------------------------+\n        | COL1                  | COL2 |\n        | COL1                  | \u2500\u2500\u2500\u2500 |\n        | COL1                  | COL2 |\n        +------------------------------+\n        \"\"\"\n    )\n    result = console.file.getvalue()\n    assert result == expected\n", "tests/test_log.py": "# encoding=utf-8\n\n\nimport io\nimport re\n\nfrom rich.console import Console\n\nre_link_ids = re.compile(r\"id=[\\d\\.\\-]*?;.*?\\x1b\")\n\n\ndef replace_link_ids(render: str) -> str:\n    \"\"\"Link IDs have a random ID and system path which is a problem for\n    reproducible tests.\n\n    \"\"\"\n    return re_link_ids.sub(\"id=0;foo\\x1b\", render)\n\n\ntest_data = [1, 2, 3]\n\n\ndef render_log():\n    console = Console(\n        file=io.StringIO(),\n        width=80,\n        force_terminal=True,\n        log_time_format=\"[TIME]\",\n        color_system=\"truecolor\",\n        legacy_windows=False,\n    )\n    console.log()\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n    return replace_link_ids(console.file.getvalue()).replace(\"test_log.py\", \"source.py\")\n\n\ndef test_log():\n    expected = replace_link_ids(\n        \"\\x1b[2;36m[TIME]\\x1b[0m\\x1b[2;36m \\x1b[0m                                                           \\x1b]8;id=0;foo\\x1b\\\\\\x1b[2msource.py\\x1b[0m\\x1b]8;;\\x1b\\\\\\x1b[2m:\\x1b[0m\\x1b]8;id=0;foo\\x1b\\\\\\x1b[2m32\\x1b[0m\\x1b]8;;\\x1b\\\\\\n\\x1b[2;36m      \\x1b[0m\\x1b[2;36m \\x1b[0mHello from \\x1b[1m<\\x1b[0m\\x1b[1;95mconsole\\x1b[0m\\x1b[39m \\x1b[0m\\x1b[33mwidth\\x1b[0m\\x1b[39m=\\x1b[0m\\x1b[1;36m80\\x1b[0m\\x1b[39m ColorSystem.TRUECOLOR\\x1b[0m\\x1b[1m>\\x1b[0m !      \\x1b]8;id=0;foo\\x1b\\\\\\x1b[2msource.py\\x1b[0m\\x1b]8;;\\x1b\\\\\\x1b[2m:\\x1b[0m\\x1b]8;id=0;foo\\x1b\\\\\\x1b[2m33\\x1b[0m\\x1b]8;;\\x1b\\\\\\n\\x1b[2;36m      \\x1b[0m\\x1b[2;36m \\x1b[0m\\x1b[1m[\\x1b[0m\\x1b[1;36m1\\x1b[0m, \\x1b[1;36m2\\x1b[0m, \\x1b[1;36m3\\x1b[0m\\x1b[1m]\\x1b[0m                                                  \\x1b]8;id=0;foo\\x1b\\\\\\x1b[2msource.py\\x1b[0m\\x1b]8;;\\x1b\\\\\\x1b[2m:\\x1b[0m\\x1b]8;id=0;foo\\x1b\\\\\\x1b[2m34\\x1b[0m\\x1b]8;;\\x1b\\\\\\n\\x1b[2;36m       \\x1b[0m\\x1b[34m\u256d\u2500\\x1b[0m\\x1b[34m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\x1b[34m \\x1b[0m\\x1b[3;34mlocals\\x1b[0m\\x1b[34m \\x1b[0m\\x1b[34m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\x1b[34m\u2500\u256e\\x1b[0m     \\x1b[2m              \\x1b[0m\\n\\x1b[2;36m       \\x1b[0m\\x1b[34m\u2502\\x1b[0m \\x1b[3;33mconsole\\x1b[0m\\x1b[31m =\\x1b[0m \\x1b[1m<\\x1b[0m\\x1b[1;95mconsole\\x1b[0m\\x1b[39m \\x1b[0m\\x1b[33mwidth\\x1b[0m\\x1b[39m=\\x1b[0m\\x1b[1;36m80\\x1b[0m\\x1b[39m ColorSystem.TRUECOLOR\\x1b[0m\\x1b[1m>\\x1b[0m \\x1b[34m\u2502\\x1b[0m     \\x1b[2m              \\x1b[0m\\n\\x1b[2;36m       \\x1b[0m\\x1b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\x1b[0m     \\x1b[2m              \\x1b[0m\\n\"\n    )\n    rendered = render_log()\n    print(repr(rendered))\n    assert rendered == expected\n\n\ndef test_log_caller_frame_info():\n    for i in range(2):\n        assert Console._caller_frame_info(i) == Console._caller_frame_info(\n            i, lambda: None\n        )\n\n\ndef test_justify():\n    console = Console(width=20, log_path=False, log_time=False, color_system=None)\n    console.begin_capture()\n    console.log(\"foo\", justify=\"right\")\n    result = console.end_capture()\n    assert result == \"                 foo\\n\"\n\n\nif __name__ == \"__main__\":\n    render = render_log()\n    print(render)\n    print(repr(render))\n", "tests/test_emoji.py": "import pytest\n\nfrom rich.emoji import Emoji, NoEmoji\n\nfrom .render import render\n\n\ndef test_no_emoji():\n    with pytest.raises(NoEmoji):\n        Emoji(\"ambivalent_bunny\")\n\n\ndef test_str_repr():\n    assert str(Emoji(\"pile_of_poo\")) == \"\ud83d\udca9\"\n    assert repr(Emoji(\"pile_of_poo\")) == \"<emoji 'pile_of_poo'>\"\n\n\ndef test_replace():\n    assert Emoji.replace(\"my code is :pile_of_poo:\") == \"my code is \ud83d\udca9\"\n\n\ndef test_render():\n    render_result = render(Emoji(\"pile_of_poo\"))\n    assert render_result == \"\ud83d\udca9\"\n\n\ndef test_variant():\n    print(repr(Emoji.replace(\":warning:\")))\n    assert Emoji.replace(\":warning:\") == \"\u26a0\"\n    assert Emoji.replace(\":warning-text:\") == \"\u26a0\" + \"\\uFE0E\"\n    assert Emoji.replace(\":warning-emoji:\") == \"\u26a0\" + \"\\uFE0F\"\n    assert Emoji.replace(\":warning-foo:\") == \":warning-foo:\"\n\n\ndef test_variant_non_default():\n    render_result = render(Emoji(\"warning\", variant=\"emoji\"))\n    assert render_result == \"\u26a0\" + \"\\uFE0F\"\n", "tests/test_styled.py": "import io\n\nfrom rich.console import Console\nfrom rich.measure import Measurement\nfrom rich.styled import Styled\n\n\ndef test_styled():\n    styled_foo = Styled(\"foo\", \"on red\")\n    console = Console(file=io.StringIO(), force_terminal=True, _environ={})\n    assert Measurement.get(console, console.options, styled_foo) == Measurement(3, 3)\n    console.print(styled_foo)\n    result = console.file.getvalue()\n    expected = \"\\x1b[41mfoo\\x1b[0m\\n\"\n    assert result == expected\n", "tests/test_columns.py": "# encoding=utf-8\n\nimport io\n\nfrom rich.columns import Columns\nfrom rich.console import Console\n\nCOLUMN_DATA = [\n    \"Ursus americanus\",\n    \"American buffalo\",\n    \"Bison bison\",\n    \"American crow\",\n    \"Corvus brachyrhynchos\",\n    \"American marten\",\n    \"Martes americana\",\n    \"American racer\",\n    \"Coluber constrictor\",\n    \"American woodcock\",\n    \"Scolopax minor\",\n    \"Anaconda (unidentified)\",\n    \"Eunectes sp.\",\n    \"Andean goose\",\n    \"Chloephaga melanoptera\",\n    \"Ant\",\n    \"Anteater, australian spiny\",\n    \"Tachyglossus aculeatus\",\n    \"Anteater, giant\",\n]\n\n\ndef render():\n    console = Console(file=io.StringIO(), width=100, legacy_windows=False)\n\n    console.rule(\"empty\")\n    empty_columns = Columns([])\n    console.print(empty_columns)\n    columns = Columns(COLUMN_DATA)\n    columns.add_renderable(\"Myrmecophaga tridactyla\")\n    console.rule(\"optimal\")\n    console.print(columns)\n    console.rule(\"optimal, expand\")\n    columns.expand = True\n    console.print(columns)\n    console.rule(\"column first, optimal\")\n    columns.column_first = True\n    columns.expand = False\n    console.print(columns)\n    console.rule(\"column first, right to left\")\n    columns.right_to_left = True\n    console.print(columns)\n    console.rule(\"equal columns, expand\")\n    columns.equal = True\n    columns.expand = True\n    console.print(columns)\n    console.rule(\"fixed width\")\n    columns.width = 16\n    columns.expand = False\n    console.print(columns)\n    console.print()\n    render_result = console.file.getvalue()\n    return render_result\n\n\ndef test_render():\n    expected = \"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 empty \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 optimal \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\nUrsus americanus           American buffalo       Bison bison            American crow          \\nCorvus brachyrhynchos      American marten        Martes americana       American racer         \\nColuber constrictor        American woodcock      Scolopax minor         Anaconda (unidentified)\\nEunectes sp.               Andean goose           Chloephaga melanoptera Ant                    \\nAnteater, australian spiny Tachyglossus aculeatus Anteater, giant        Myrmecophaga tridactyla\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 optimal, expand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\nUrsus americanus             American buffalo        Bison bison             American crow          \\nCorvus brachyrhynchos        American marten         Martes americana        American racer         \\nColuber constrictor          American woodcock       Scolopax minor          Anaconda (unidentified)\\nEunectes sp.                 Andean goose            Chloephaga melanoptera  Ant                    \\nAnteater, australian spiny   Tachyglossus aculeatus  Anteater, giant         Myrmecophaga tridactyla\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column first, optimal \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\nUrsus americanus      American marten     Scolopax minor          Ant                       \\nAmerican buffalo      Martes americana    Anaconda (unidentified) Anteater, australian spiny\\nBison bison           American racer      Eunectes sp.            Tachyglossus aculeatus    \\nAmerican crow         Coluber constrictor Andean goose            Anteater, giant           \\nCorvus brachyrhynchos American woodcock   Chloephaga melanoptera  Myrmecophaga tridactyla   \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column first, right to left \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\nAnt                        Scolopax minor          American marten     Ursus americanus     \\nAnteater, australian spiny Anaconda (unidentified) Martes americana    American buffalo     \\nTachyglossus aculeatus     Eunectes sp.            American racer      Bison bison          \\nAnteater, giant            Andean goose            Coluber constrictor American crow        \\nMyrmecophaga tridactyla    Chloephaga melanoptera  American woodcock   Corvus brachyrhynchos\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 equal columns, expand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\nChloephaga melanoptera                American racer                    Ursus americanus            \\nAnt                                   Coluber constrictor               American buffalo            \\nAnteater, australian spiny            American woodcock                 Bison bison                 \\nTachyglossus aculeatus                Scolopax minor                    American crow               \\nAnteater, giant                       Anaconda (unidentified)           Corvus brachyrhynchos       \\nMyrmecophaga tridactyla               Eunectes sp.                      American marten             \\n                                      Andean goose                      Martes americana            \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 fixed width \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\nAnteater,         Eunectes sp.     Coluber          Corvus           Ursus americanus \\naustralian spiny                   constrictor      brachyrhynchos                    \\nTachyglossus      Andean goose     American         American marten  American buffalo \\naculeatus                          woodcock                                           \\nAnteater, giant   Chloephaga       Scolopax minor   Martes americana Bison bison      \\n                  melanoptera                                                         \\nMyrmecophaga      Ant              Anaconda         American racer   American crow    \\ntridactyla                         (unidentified)                                     \\n\\n\"\n    assert render() == expected\n\n\nif __name__ == \"__main__\":\n    result = render()\n    print(result)\n    print(repr(result))\n", "tests/test_console.py": "import datetime\nimport io\nimport os\nimport sys\nimport tempfile\nfrom typing import Optional, Tuple, Type, Union\nfrom unittest import mock\n\nimport pytest\n\nfrom rich import errors\nfrom rich._null_file import NullFile\nfrom rich.color import ColorSystem\nfrom rich.console import (\n    CaptureError,\n    Console,\n    ConsoleDimensions,\n    ConsoleOptions,\n    ScreenUpdate,\n    group,\n)\nfrom rich.control import Control\nfrom rich.measure import measure_renderables\nfrom rich.padding import Padding\nfrom rich.pager import SystemPager\nfrom rich.panel import Panel\nfrom rich.region import Region\nfrom rich.segment import Segment\nfrom rich.status import Status\nfrom rich.style import Style\nfrom rich.text import Text\n\n\ndef test_dumb_terminal():\n    console = Console(force_terminal=True, _environ={})\n    assert console.color_system is not None\n\n    console = Console(force_terminal=True, _environ={\"TERM\": \"dumb\"})\n    assert console.color_system is None\n    width, height = console.size\n    assert width == 80\n    assert height == 25\n\n\ndef test_soft_wrap():\n    console = Console(file=io.StringIO(), width=20, soft_wrap=True)\n    console.print(\"foo \" * 10)\n    assert console.file.getvalue() == \"foo \" * 20\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\ndef test_16color_terminal():\n    console = Console(\n        force_terminal=True, _environ={\"TERM\": \"xterm-16color\"}, legacy_windows=False\n    )\n    assert console.color_system == \"standard\"\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\ndef test_truecolor_terminal():\n    console = Console(\n        force_terminal=True,\n        legacy_windows=False,\n        _environ={\"COLORTERM\": \"truecolor\", \"TERM\": \"xterm-16color\"},\n    )\n    assert console.color_system == \"truecolor\"\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\ndef test_kitty_terminal():\n    console = Console(\n        force_terminal=True,\n        legacy_windows=False,\n        _environ={\"TERM\": \"xterm-kitty\"},\n    )\n    assert console.color_system == \"256\"\n\n\ndef test_console_options_update():\n    options = ConsoleOptions(\n        ConsoleDimensions(80, 25),\n        max_height=25,\n        legacy_windows=False,\n        min_width=10,\n        max_width=20,\n        is_terminal=False,\n        encoding=\"utf-8\",\n    )\n    options1 = options.update(width=15)\n    assert options1.min_width == 15 and options1.max_width == 15\n\n    options2 = options.update(min_width=5, max_width=15, justify=\"right\")\n    assert (\n        options2.min_width == 5\n        and options2.max_width == 15\n        and options2.justify == \"right\"\n    )\n\n    options_copy = options.update()\n    assert options_copy == options and options_copy is not options\n\n\ndef test_console_options_update_height():\n    options = ConsoleOptions(\n        ConsoleDimensions(80, 25),\n        max_height=25,\n        legacy_windows=False,\n        min_width=10,\n        max_width=20,\n        is_terminal=False,\n        encoding=\"utf-8\",\n    )\n    assert options.height is None\n    render_options = options.update_height(12)\n    assert options.height is None\n    assert render_options.height == 12\n    assert render_options.max_height == 12\n\n\ndef test_init():\n    console = Console(color_system=None)\n    assert console._color_system == None\n    console = Console(color_system=\"standard\")\n    assert console._color_system == ColorSystem.STANDARD\n    console = Console(color_system=\"auto\")\n\n\ndef test_size():\n    console = Console()\n    w, h = console.size\n    assert console.width == w\n\n    console = Console(width=99, height=101, legacy_windows=False)\n    w, h = console.size\n    assert w == 99 and h == 101\n\n\n@pytest.mark.parametrize(\n    \"is_windows,no_descriptor_size,stdin_size,stdout_size,stderr_size,expected_size\",\n    [\n        # on Windows we'll use `os.get_terminal_size()` without arguments...\n        (True, (133, 24), ValueError, ValueError, ValueError, (133, 24)),\n        (False, (133, 24), ValueError, ValueError, ValueError, (80, 25)),\n        # ...while on other OS we'll try to pass stdin, then stdout, then stderr to it:\n        (False, ValueError, (133, 24), ValueError, ValueError, (133, 24)),\n        (False, ValueError, ValueError, (133, 24), ValueError, (133, 24)),\n        (False, ValueError, ValueError, ValueError, (133, 24), (133, 24)),\n        (False, ValueError, ValueError, ValueError, ValueError, (80, 25)),\n    ],\n)\n@mock.patch(\"rich.console.os.get_terminal_size\")\ndef test_size_can_fall_back_to_std_descriptors(\n    get_terminal_size_mock: mock.MagicMock,\n    is_windows: bool,\n    no_descriptor_size: Union[Tuple[int, int], Type[ValueError]],\n    stdin_size: Union[Tuple[int, int], Type[ValueError]],\n    stdout_size: Union[Tuple[int, int], Type[ValueError]],\n    stderr_size: Union[Tuple[int, int], Type[ValueError]],\n    expected_size,\n):\n    def get_terminal_size_mock_impl(fileno: int = None) -> Tuple[int, int]:\n        value = {\n            None: no_descriptor_size,\n            sys.__stdin__.fileno(): stdin_size,\n            sys.__stdout__.fileno(): stdout_size,\n            sys.__stderr__.fileno(): stderr_size,\n        }[fileno]\n        if value is ValueError:\n            raise value\n        return value\n\n    get_terminal_size_mock.side_effect = get_terminal_size_mock_impl\n\n    console = Console(legacy_windows=False)\n    with mock.patch(\"rich.console.WINDOWS\", new=is_windows):\n        w, h = console.size\n    assert (w, h) == expected_size\n\n\ndef test_repr():\n    console = Console()\n    assert isinstance(repr(console), str)\n    assert isinstance(str(console), str)\n\n\ndef test_print():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print(\"foo\")\n    assert console.file.getvalue() == \"foo\\n\"\n\n\ndef test_print_multiple():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print(\"foo\", \"bar\")\n    assert console.file.getvalue() == \"foo bar\\n\"\n\n\ndef test_print_text():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print(Text(\"foo\", style=\"bold\"))\n    assert console.file.getvalue() == \"\\x1B[1mfoo\\x1B[0m\\n\"\n\n\ndef test_print_text_multiple():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print(Text(\"foo\", style=\"bold\"), Text(\"bar\"), \"baz\")\n    assert console.file.getvalue() == \"\\x1B[1mfoo\\x1B[0m bar baz\\n\"\n\n\ndef test_print_json():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print_json('[false, true, null, \"foo\"]', indent=4)\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = '\\x1b[1m[\\x1b[0m\\n    \\x1b[3;91mfalse\\x1b[0m,\\n    \\x1b[3;92mtrue\\x1b[0m,\\n    \\x1b[3;35mnull\\x1b[0m,\\n    \\x1b[32m\"foo\"\\x1b[0m\\n\\x1b[1m]\\x1b[0m\\n'\n    assert result == expected\n\n\ndef test_print_json_error():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    with pytest.raises(TypeError):\n        console.print_json([\"foo\"], indent=4)\n\n\ndef test_print_json_data():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print_json(data=[False, True, None, \"foo\"], indent=4)\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = '\\x1b[1m[\\x1b[0m\\n    \\x1b[3;91mfalse\\x1b[0m,\\n    \\x1b[3;92mtrue\\x1b[0m,\\n    \\x1b[3;35mnull\\x1b[0m,\\n    \\x1b[32m\"foo\"\\x1b[0m\\n\\x1b[1m]\\x1b[0m\\n'\n    assert result == expected\n\n\ndef test_print_json_ensure_ascii():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print_json(data={\"foo\": \"\ud83d\udca9\"}, ensure_ascii=False)\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = '\\x1b[1m{\\x1b[0m\\n  \\x1b[1;34m\"foo\"\\x1b[0m: \\x1b[32m\"\ud83d\udca9\"\\x1b[0m\\n\\x1b[1m}\\x1b[0m\\n'\n    assert result == expected\n\n\ndef test_print_json_with_default_ensure_ascii():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print_json(data={\"foo\": \"\ud83d\udca9\"})\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = '\\x1b[1m{\\x1b[0m\\n  \\x1b[1;34m\"foo\"\\x1b[0m: \\x1b[32m\"\ud83d\udca9\"\\x1b[0m\\n\\x1b[1m}\\x1b[0m\\n'\n    assert result == expected\n\n\ndef test_print_json_indent_none():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    data = {\"name\": \"apple\", \"count\": 1}\n    console.print_json(data=data, indent=None)\n    result = console.file.getvalue()\n    expected = '\\x1b[1m{\\x1b[0m\\x1b[1;34m\"name\"\\x1b[0m: \\x1b[32m\"apple\"\\x1b[0m, \\x1b[1;34m\"count\"\\x1b[0m: \\x1b[1;36m1\\x1b[0m\\x1b[1m}\\x1b[0m\\n'\n    assert result == expected\n\n\ndef test_console_null_file(monkeypatch):\n    # When stdout and stderr are null, Console.file should be replaced with NullFile\n    monkeypatch.setattr(\"sys.stdout\", None)\n    monkeypatch.setattr(\"sys.stderr\", None)\n\n    console = Console()\n    assert isinstance(console.file, NullFile)\n\n\ndef test_log():\n    console = Console(\n        file=io.StringIO(),\n        width=80,\n        color_system=\"truecolor\",\n        log_time_format=\"TIME\",\n        log_path=False,\n        _environ={},\n    )\n    console.log(\"foo\", style=\"red\")\n    expected = \"\\x1b[2;36mTIME\\x1b[0m\\x1b[2;36m \\x1b[0m\\x1b[31mfoo                                                                        \\x1b[0m\\n\"\n    result = console.file.getvalue()\n    print(repr(result))\n    assert result == expected\n\n\ndef test_log_milliseconds():\n    def time_formatter(timestamp: datetime) -> Text:\n        return Text(\"TIME\")\n\n    console = Console(\n        file=io.StringIO(), width=40, log_time_format=time_formatter, log_path=False\n    )\n    console.log(\"foo\")\n    result = console.file.getvalue()\n    assert result == \"TIME foo                                \\n\"\n\n\ndef test_print_empty():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print()\n    assert console.file.getvalue() == \"\\n\"\n\n\ndef test_markup_highlight():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print(\"'[bold]foo[/bold]'\")\n    assert (\n        console.file.getvalue()\n        == \"\\x1b[32m'\\x1b[0m\\x1b[1;32mfoo\\x1b[0m\\x1b[32m'\\x1b[0m\\n\"\n    )\n\n\ndef test_print_style():\n    console = Console(file=io.StringIO(), color_system=\"truecolor\")\n    console.print(\"foo\", style=\"bold\")\n    assert console.file.getvalue() == \"\\x1b[1mfoo\\x1b[0m\\n\"\n\n\ndef test_show_cursor():\n    console = Console(\n        file=io.StringIO(), force_terminal=True, legacy_windows=False, _environ={}\n    )\n    console.show_cursor(False)\n    console.print(\"foo\")\n    console.show_cursor(True)\n    assert console.file.getvalue() == \"\\x1b[?25lfoo\\n\\x1b[?25h\"\n\n\ndef test_clear():\n    console = Console(file=io.StringIO(), force_terminal=True, _environ={})\n    console.clear()\n    console.clear(home=False)\n    assert console.file.getvalue() == \"\\033[2J\\033[H\" + \"\\033[2J\"\n\n\ndef test_clear_no_terminal():\n    console = Console(file=io.StringIO())\n    console.clear()\n    console.clear(home=False)\n    assert console.file.getvalue() == \"\"\n\n\ndef test_get_style():\n    console = Console()\n    console.get_style(\"repr.brace\") == Style(bold=True)\n\n\ndef test_get_style_default():\n    console = Console()\n    console.get_style(\"foobar\", default=\"red\") == Style(color=\"red\")\n\n\ndef test_get_style_error():\n    console = Console()\n    with pytest.raises(errors.MissingStyle):\n        console.get_style(\"nosuchstyle\")\n    with pytest.raises(errors.MissingStyle):\n        console.get_style(\"foo bar\")\n\n\ndef test_render_error():\n    console = Console()\n    with pytest.raises(errors.NotRenderableError):\n        list(console.render([], console.options))\n\n\ndef test_control():\n    console = Console(file=io.StringIO(), force_terminal=True, _environ={})\n    console.control(Control.clear())\n    console.print(\"BAR\")\n    assert console.file.getvalue() == \"\\x1b[2JBAR\\n\"\n\n\ndef test_capture():\n    console = Console()\n    with console.capture() as capture:\n        with pytest.raises(CaptureError):\n            capture.get()\n        console.print(\"Hello\")\n    assert capture.get() == \"Hello\\n\"\n\n\ndef test_capture_and_record(capsys):\n    recorder = Console(record=True)\n    recorder.print(\"ABC\")\n\n    with recorder.capture() as capture:\n        recorder.print(\"Hello\")\n\n    assert capture.get() == \"Hello\\n\"\n\n    recorded_text = recorder.export_text()\n    out, err = capsys.readouterr()\n\n    assert recorded_text == \"ABC\\nHello\\n\"\n    assert capture.get() == \"Hello\\n\"\n    assert out == \"ABC\\n\"\n\n\ndef test_input(monkeypatch, capsys):\n    def fake_input(prompt=\"\"):\n        console.file.write(prompt)\n        return \"bar\"\n\n    monkeypatch.setattr(\"builtins.input\", fake_input)\n    console = Console()\n    user_input = console.input(prompt=\"foo:\")\n    assert capsys.readouterr().out == \"foo:\"\n    assert user_input == \"bar\"\n\n\ndef test_input_password(monkeypatch, capsys):\n    def fake_input(prompt, stream=None):\n        console.file.write(prompt)\n        return \"bar\"\n\n    import rich.console\n\n    monkeypatch.setattr(rich.console, \"getpass\", fake_input)\n    console = Console()\n    user_input = console.input(prompt=\"foo:\", password=True)\n    assert capsys.readouterr().out == \"foo:\"\n    assert user_input == \"bar\"\n\n\ndef test_status():\n    console = Console(file=io.StringIO(), force_terminal=True, width=20)\n    status = console.status(\"foo\")\n    assert isinstance(status, Status)\n\n\ndef test_justify_none():\n    console = Console(file=io.StringIO(), force_terminal=True, width=20)\n    console.print(\"FOO\", justify=None)\n    assert console.file.getvalue() == \"FOO\\n\"\n\n\ndef test_justify_left():\n    console = Console(file=io.StringIO(), force_terminal=True, width=20, _environ={})\n    console.print(\"FOO\", justify=\"left\")\n    assert console.file.getvalue() == \"FOO                 \\n\"\n\n\ndef test_justify_center():\n    console = Console(file=io.StringIO(), force_terminal=True, width=20, _environ={})\n    console.print(\"FOO\", justify=\"center\")\n    assert console.file.getvalue() == \"        FOO         \\n\"\n\n\ndef test_justify_right():\n    console = Console(file=io.StringIO(), force_terminal=True, width=20, _environ={})\n    console.print(\"FOO\", justify=\"right\")\n    assert console.file.getvalue() == \"                 FOO\\n\"\n\n\ndef test_justify_renderable_none():\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=20,\n        legacy_windows=False,\n        _environ={},\n    )\n    console.print(Panel(\"FOO\", expand=False, padding=0), justify=None)\n    assert console.file.getvalue() == \"\u256d\u2500\u2500\u2500\u256e\\n\u2502FOO\u2502\\n\u2570\u2500\u2500\u2500\u256f\\n\"\n\n\ndef test_justify_renderable_left():\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=10,\n        legacy_windows=False,\n        _environ={},\n    )\n    console.print(Panel(\"FOO\", expand=False, padding=0), justify=\"left\")\n    assert console.file.getvalue() == \"\u256d\u2500\u2500\u2500\u256e     \\n\u2502FOO\u2502     \\n\u2570\u2500\u2500\u2500\u256f     \\n\"\n\n\ndef test_justify_renderable_center():\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=10,\n        legacy_windows=False,\n        _environ={},\n    )\n    console.print(Panel(\"FOO\", expand=False, padding=0), justify=\"center\")\n    assert console.file.getvalue() == \"  \u256d\u2500\u2500\u2500\u256e   \\n  \u2502FOO\u2502   \\n  \u2570\u2500\u2500\u2500\u256f   \\n\"\n\n\ndef test_justify_renderable_right():\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=20,\n        legacy_windows=False,\n        _environ={},\n    )\n    console.print(Panel(\"FOO\", expand=False, padding=0), justify=\"right\")\n    assert (\n        console.file.getvalue()\n        == \"               \u256d\u2500\u2500\u2500\u256e\\n               \u2502FOO\u2502\\n               \u2570\u2500\u2500\u2500\u256f\\n\"\n    )\n\n\nclass BrokenRenderable:\n    def __rich_console__(self, console, options):\n        pass\n\n\ndef test_render_broken_renderable():\n    console = Console()\n    broken = BrokenRenderable()\n    with pytest.raises(errors.NotRenderableError):\n        list(console.render(broken, console.options))\n\n\ndef test_export_text():\n    console = Console(record=True, width=100)\n    console.print(\"[b]foo\")\n    text = console.export_text()\n    expected = \"foo\\n\"\n    assert text == expected\n\n\ndef test_export_html():\n    console = Console(record=True, width=100)\n    console.print(\"[b]foo <script> 'test' [link=https://example.org]Click[/link]\")\n    html = console.export_html()\n    print(repr(html))\n    expected = '<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\"UTF-8\">\\n<style>\\n.r1 {font-weight: bold}\\n.r2 {color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold}\\n.r3 {color: #008000; text-decoration-color: #008000; font-weight: bold}\\nbody {\\n    color: #000000;\\n    background-color: #ffffff;\\n}\\n</style>\\n</head>\\n<body>\\n    <pre style=\"font-family:Menlo,\\'DejaVu Sans Mono\\',consolas,\\'Courier New\\',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">foo &lt;</span><span class=\"r2\">script</span><span class=\"r1\">&gt; </span><span class=\"r3\">&#x27;test&#x27;</span><span class=\"r1\"> </span><a class=\"r1\" href=\"https://example.org\">Click</a>\\n</code></pre>\\n</body>\\n</html>\\n'\n    assert html == expected\n\n\ndef test_export_html_inline():\n    console = Console(record=True, width=100)\n    console.print(\"[b]foo [link=https://example.org]Click[/link]\")\n    html = console.export_html(inline_styles=True)\n    print(repr(html))\n    expected = '<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\"UTF-8\">\\n<style>\\n\\nbody {\\n    color: #000000;\\n    background-color: #ffffff;\\n}\\n</style>\\n</head>\\n<body>\\n    <pre style=\"font-family:Menlo,\\'DejaVu Sans Mono\\',consolas,\\'Courier New\\',monospace\"><code style=\"font-family:inherit\"><span style=\"font-weight: bold\">foo </span><span style=\"font-weight: bold\"><a href=\"https://example.org\">Click</a></span>\\n</code></pre>\\n</body>\\n</html>\\n'\n    assert html == expected\n\n\nEXPECTED_SVG = '<svg class=\"rich-terminal\" viewBox=\"0 0 1238 74.4\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <!-- Generated with Rich https://www.textualize.io -->\\n    <style>\\n\\n    @font-face {\\n        font-family: \"Fira Code\";\\n        src: local(\"FiraCode-Regular\"),\\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),\\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");\\n        font-style: normal;\\n        font-weight: 400;\\n    }\\n    @font-face {\\n        font-family: \"Fira Code\";\\n        src: local(\"FiraCode-Bold\"),\\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),\\n                url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");\\n        font-style: bold;\\n        font-weight: 700;\\n    }\\n\\n    .terminal-3526644552-matrix {\\n        font-family: Fira Code, monospace;\\n        font-size: 20px;\\n        line-height: 24.4px;\\n        font-variant-east-asian: full-width;\\n    }\\n\\n    .terminal-3526644552-title {\\n        font-size: 18px;\\n        font-weight: bold;\\n        font-family: arial;\\n    }\\n\\n    .terminal-3526644552-r1 { fill: #608ab1;font-weight: bold }\\n.terminal-3526644552-r2 { fill: #c5c8c6 }\\n    </style>\\n\\n    <defs>\\n    <clipPath id=\"terminal-3526644552-clip-terminal\">\\n      <rect x=\"0\" y=\"0\" width=\"1219.0\" height=\"23.4\" />\\n    </clipPath>\\n    \\n    </defs>\\n\\n    <rect fill=\"#292929\" stroke=\"rgba(255,255,255,0.35)\" stroke-width=\"1\" x=\"1\" y=\"1\" width=\"1236\" height=\"72.4\" rx=\"8\"/><text class=\"terminal-3526644552-title\" fill=\"#c5c8c6\" text-anchor=\"middle\" x=\"618\" y=\"27\">Rich</text>\\n            <g transform=\"translate(26,22)\">\\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff5f57\"/>\\n            <circle cx=\"22\" cy=\"0\" r=\"7\" fill=\"#febc2e\"/>\\n            <circle cx=\"44\" cy=\"0\" r=\"7\" fill=\"#28c840\"/>\\n            </g>\\n        \\n    <g transform=\"translate(9, 41)\" clip-path=\"url(#terminal-3526644552-clip-terminal)\">\\n    <rect fill=\"#cc555a\" x=\"0\" y=\"1.5\" width=\"36.6\" height=\"24.65\" shape-rendering=\"crispEdges\"/>\\n    <g class=\"terminal-3526644552-matrix\">\\n    <text class=\"terminal-3526644552-r1\" x=\"0\" y=\"20\" textLength=\"36.6\" clip-path=\"url(#terminal-3526644552-line-0)\">foo</text><text class=\"terminal-3526644552-r2\" x=\"48.8\" y=\"20\" textLength=\"61\" clip-path=\"url(#terminal-3526644552-line-0)\">Click</text><text class=\"terminal-3526644552-r2\" x=\"1220\" y=\"20\" textLength=\"12.2\" clip-path=\"url(#terminal-3526644552-line-0)\">\\n</text>\\n    </g>\\n    </g>\\n</svg>\\n'\n\n\ndef test_export_svg():\n    console = Console(record=True, width=100)\n    console.print(\n        \"[b red on blue reverse]foo[/] [blink][link=https://example.org]Click[/link]\"\n    )\n    svg = console.export_svg()\n    print(repr(svg))\n\n    assert svg == EXPECTED_SVG\n\n\ndef test_export_svg_specified_unique_id():\n    expected_svg = EXPECTED_SVG.replace(\"terminal-3526644552\", \"given-id\")\n    console = Console(record=True, width=100)\n    console.print(\n        \"[b red on blue reverse]foo[/] [blink][link=https://example.org]Click[/link]\"\n    )\n    svg = console.export_svg(unique_id=\"given-id\")\n    print(repr(svg))\n\n    assert svg == expected_svg\n\n\ndef test_save_svg():\n    console = Console(record=True, width=100)\n    console.print(\n        \"[b red on blue reverse]foo[/] [blink][link=https://example.org]Click[/link]\"\n    )\n    with tempfile.TemporaryDirectory() as path:\n        export_path = os.path.join(path, \"example.svg\")\n        console.save_svg(export_path)\n        with open(export_path, \"rt\", encoding=\"utf-8\") as svg_file:\n            assert svg_file.read() == EXPECTED_SVG\n\n\ndef test_save_text():\n    console = Console(record=True, width=100)\n    console.print(\"foo\")\n    with tempfile.TemporaryDirectory() as path:\n        export_path = os.path.join(path, \"rich.txt\")\n        console.save_text(export_path)\n        with open(export_path, \"rt\") as text_file:\n            assert text_file.read() == \"foo\\n\"\n\n\ndef test_save_html():\n    expected = '<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\"UTF-8\">\\n<style>\\n\\nbody {\\n    color: #000000;\\n    background-color: #ffffff;\\n}\\n</style>\\n</head>\\n<body>\\n    <pre style=\"font-family:Menlo,\\'DejaVu Sans Mono\\',consolas,\\'Courier New\\',monospace\"><code style=\"font-family:inherit\">foo\\n</code></pre>\\n</body>\\n</html>\\n'\n    console = Console(record=True, width=100)\n    console.print(\"foo\")\n    with tempfile.TemporaryDirectory() as path:\n        export_path = os.path.join(path, \"example.html\")\n        console.save_html(export_path)\n        with open(export_path, \"rt\") as html_file:\n            html = html_file.read()\n            print(repr(html))\n            assert html == expected\n\n\ndef test_no_wrap():\n    console = Console(width=10, file=io.StringIO())\n    console.print(\"foo bar baz egg\", no_wrap=True)\n    assert console.file.getvalue() == \"foo bar ba\\n\"\n\n\ndef test_soft_wrap():\n    console = Console(width=10, file=io.StringIO())\n    console.print(\"foo bar baz egg\", soft_wrap=True)\n    assert console.file.getvalue() == \"foo bar baz egg\\n\"\n\n\ndef test_unicode_error() -> None:\n    try:\n        with tempfile.TemporaryFile(\"wt\", encoding=\"ascii\") as tmpfile:\n            console = Console(file=tmpfile)\n            console.print(\":vampire:\")\n    except UnicodeEncodeError as error:\n        assert \"PYTHONIOENCODING\" in str(error)\n    else:\n        assert False, \"didn't raise UnicodeEncodeError\"\n\n\ndef test_bell() -> None:\n    console = Console(force_terminal=True, _environ={})\n    console.begin_capture()\n    console.bell()\n    assert console.end_capture() == \"\\x07\"\n\n\ndef test_pager() -> None:\n    console = Console(_environ={})\n\n    pager_content: Optional[str] = None\n\n    def mock_pager(content: str) -> None:\n        nonlocal pager_content\n        pager_content = content\n\n    pager = SystemPager()\n    pager._pager = mock_pager\n\n    with console.pager(pager):\n        console.print(\"[bold]Hello World\")\n    assert pager_content == \"Hello World\\n\"\n\n    with console.pager(pager, styles=True, links=False):\n        console.print(\"[bold link https:/example.org]Hello World\")\n\n    assert pager_content == \"Hello World\\n\"\n\n\ndef test_out() -> None:\n    console = Console(width=10)\n    console.begin_capture()\n    console.out(*([\"foo bar\"] * 5), sep=\".\", end=\"X\")\n    assert console.end_capture() == \"foo bar.foo bar.foo bar.foo bar.foo barX\"\n\n\ndef test_render_group() -> None:\n    @group(fit=False)\n    def renderable():\n        yield \"one\"\n        yield \"two\"\n        yield \"three\"  # <- largest width of 5\n        yield \"four\"\n\n    renderables = [renderable() for _ in range(4)]\n    console = Console(width=42)\n    min_width, _ = measure_renderables(console, console.options, renderables)\n    assert min_width == 42\n\n\ndef test_render_group_fit() -> None:\n    @group()\n    def renderable():\n        yield \"one\"\n        yield \"two\"\n        yield \"three\"  # <- largest width of 5\n        yield \"four\"\n\n    renderables = [renderable() for _ in range(4)]\n\n    console = Console(width=42)\n\n    min_width, _ = measure_renderables(console, console.options, renderables)\n    assert min_width == 5\n\n\ndef test_get_time() -> None:\n    console = Console(\n        get_time=lambda: 99, get_datetime=lambda: datetime.datetime(1974, 7, 5)\n    )\n    assert console.get_time() == 99\n    assert console.get_datetime() == datetime.datetime(1974, 7, 5)\n\n\ndef test_console_style() -> None:\n    console = Console(\n        file=io.StringIO(), color_system=\"truecolor\", force_terminal=True, style=\"red\"\n    )\n    console.print(\"foo\")\n    expected = \"\\x1b[31mfoo\\x1b[0m\\n\"\n    result = console.file.getvalue()\n    assert result == expected\n\n\ndef test_no_color():\n    console = Console(\n        file=io.StringIO(), color_system=\"truecolor\", force_terminal=True, no_color=True\n    )\n    console.print(\"[bold magenta on red]FOO\")\n    expected = \"\\x1b[1mFOO\\x1b[0m\\n\"\n    result = console.file.getvalue()\n    print(repr(result))\n    assert result == expected\n\n\ndef test_quiet():\n    console = Console(file=io.StringIO(), quiet=True)\n    console.print(\"Hello, World!\")\n    assert console.file.getvalue() == \"\"\n\n\ndef test_no_nested_live():\n    console = Console()\n    with pytest.raises(errors.LiveError):\n        with console.status(\"foo\"):\n            with console.status(\"bar\"):\n                pass\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\ndef test_screen():\n    console = Console(\n        color_system=None, force_terminal=True, force_interactive=True, _environ={}\n    )\n    with console.capture() as capture:\n        with console.screen():\n            console.print(\"Don't panic\")\n    expected = \"\\x1b[?1049h\\x1b[H\\x1b[?25lDon't panic\\n\\x1b[?1049l\\x1b[?25h\"\n    result = capture.get()\n    print(repr(result))\n    assert result == expected\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\ndef test_screen_update():\n    console = Console(\n        width=20, height=4, color_system=\"truecolor\", force_terminal=True, _environ={}\n    )\n    with console.capture() as capture:\n        with console.screen() as screen:\n            screen.update(\"foo\", style=\"blue\")\n            screen.update(\"bar\")\n            screen.update()\n    result = capture.get()\n    print(repr(result))\n    expected = \"\\x1b[?1049h\\x1b[H\\x1b[?25l\\x1b[34mfoo\\x1b[0m\\x1b[34m                 \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\x1b[34mbar\\x1b[0m\\x1b[34m                 \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\x1b[34mbar\\x1b[0m\\x1b[34m                 \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\n\\x1b[34m                    \\x1b[0m\\x1b[?1049l\\x1b[?25h\"\n    assert result == expected\n\n\ndef test_height():\n    console = Console(width=80, height=46)\n    assert console.height == 46\n\n\ndef test_columns_env():\n    console = Console(_environ={\"COLUMNS\": \"314\"}, legacy_windows=False)\n    assert console.width == 314\n    # width take precedence\n    console = Console(width=40, _environ={\"COLUMNS\": \"314\"}, legacy_windows=False)\n    assert console.width == 40\n    # Should not fail\n    console = Console(width=40, _environ={\"COLUMNS\": \"broken\"}, legacy_windows=False)\n\n\ndef test_lines_env():\n    console = Console(_environ={\"LINES\": \"220\"})\n    assert console.height == 220\n    # height take precedence\n    console = Console(height=40, _environ={\"LINES\": \"220\"})\n    assert console.height == 40\n    # Should not fail\n    console = Console(width=40, _environ={\"LINES\": \"broken\"})\n\n\ndef test_screen_update_class():\n    screen_update = ScreenUpdate([[Segment(\"foo\")], [Segment(\"bar\")]], 5, 10)\n    assert screen_update.x == 5\n    assert screen_update.y == 10\n\n    console = Console(force_terminal=True)\n    console.begin_capture()\n    console.print(screen_update)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"\\x1b[11;6Hfoo\\x1b[12;6Hbar\"\n    assert result == expected\n\n\ndef test_is_alt_screen():\n    console = Console(force_terminal=True)\n    if console.legacy_windows:\n        return\n    assert not console.is_alt_screen\n    with console.screen():\n        assert console.is_alt_screen\n    assert not console.is_alt_screen\n\n\ndef test_set_console_title():\n    console = Console(force_terminal=True, _environ={})\n    if console.legacy_windows:\n        return\n\n    with console.capture() as captured:\n        console.set_window_title(\"hello\")\n\n    result = captured.get()\n    assert result == \"\\x1b]0;hello\\x07\"\n\n\ndef test_update_screen():\n    console = Console(force_terminal=True, width=20, height=5, _environ={})\n    if console.legacy_windows:\n        return\n    with pytest.raises(errors.NoAltScreen):\n        console.update_screen(\"foo\")\n    console.begin_capture()\n    with console.screen():\n        console.update_screen(\"foo\")\n        console.update_screen(\"bar\", region=Region(2, 3, 8, 4))\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"\\x1b[?1049h\\x1b[H\\x1b[?25l\\x1b[1;1Hfoo                 \\x1b[2;1H                    \\x1b[3;1H                    \\x1b[4;1H                    \\x1b[5;1H                    \\x1b[4;3Hbar     \\x1b[5;3H        \\x1b[6;3H        \\x1b[7;3H        \\x1b[?1049l\\x1b[?25h\"\n    assert result == expected\n\n\ndef test_update_screen_lines():\n    console = Console(force_terminal=True, width=20, height=5)\n    if console.legacy_windows:\n        return\n    with pytest.raises(errors.NoAltScreen):\n        console.update_screen_lines([])\n\n\ndef test_update_options_markup():\n    console = Console()\n    options = console.options\n    assert options.update(markup=False).markup == False\n    assert options.update(markup=True).markup == True\n\n\ndef test_print_width_zero():\n    console = Console()\n    with console.capture() as capture:\n        console.print(\"Hello\", width=0)\n    assert capture.get() == \"\"\n\n\ndef test_size_properties():\n    console = Console(width=80, height=25, legacy_windows=False)\n    assert console.size == ConsoleDimensions(80, 25)\n    console.size = (10, 20)\n    assert console.size == ConsoleDimensions(10, 20)\n    console.width = 5\n    assert console.size == ConsoleDimensions(5, 20)\n    console.height = 10\n    assert console.size == ConsoleDimensions(5, 10)\n\n\ndef test_print_newline_start():\n    console = Console(width=80, height=25)\n    console.begin_capture()\n    console.print(\"Foo\", new_line_start=True)\n    console.print(\"Foo\\nbar\\n\", new_line_start=True)\n    result = console.end_capture()\n\n    assert result == \"Foo\\n\\nFoo\\nbar\\n\\n\"\n\n\ndef test_is_terminal_broken_file():\n    console = Console()\n\n    def _mock_isatty():\n        raise ValueError()\n\n    console.file.isatty = _mock_isatty\n\n    assert console.is_terminal == False\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"not relevant on Windows\")\ndef test_detect_color_system():\n    console = Console(_environ={\"TERM\": \"rxvt-unicode-256color\"}, force_terminal=True)\n    assert console._detect_color_system() == ColorSystem.EIGHT_BIT\n\n\ndef test_reset_height():\n    \"\"\"Test height is reset when rendering complex renderables.\"\"\"\n\n    # https://github.com/Textualize/rich/issues/2042\n    class Panels:\n        def __rich_console__(self, console, options):\n            yield Panel(\"foo\")\n            yield Panel(\"bar\")\n\n    console = Console(\n        force_terminal=True,\n        color_system=\"truecolor\",\n        width=20,\n        height=40,\n        legacy_windows=False,\n    )\n\n    with console.capture() as capture:\n        console.print(Panel(Panels()), height=12)\n    result = capture.get()\n    print(repr(result))\n    expected = \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\\n\u2502 \u2502 foo          \u2502 \u2502\\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\\n\u2502 \u2502 bar          \u2502 \u2502\\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\\n\u2502                  \u2502\\n\u2502                  \u2502\\n\u2502                  \u2502\\n\u2502                  \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n\n    assert result == expected\n\n\ndef test_render_lines_height_minus_vertical_pad_is_negative():\n    # https://github.com/Textualize/textual/issues/389\n    console = Console(\n        force_terminal=True,\n        color_system=\"truecolor\",\n        width=20,\n        height=40,\n        legacy_windows=False,\n    )\n    options = console.options.update_height(1)\n\n    # Ensuring that no exception is raised...\n    console.render_lines(Padding(\"hello\", pad=(1, 0)), options=options)\n\n\ndef test_recording_no_stdout_and_no_stderr_files(monkeypatch):\n    # Rich should work even if there's no file available to write to.\n    # For example, pythonw nullifies output streams.\n    # Built-in print silently no-ops in pythonw.\n    # Related: https://github.com/Textualize/rich/issues/2400\n    monkeypatch.setattr(\"sys.stdout\", None)\n    monkeypatch.setattr(\"sys.stderr\", None)\n    console = Console(record=True)\n    console.print(\"hello world\")\n    text = console.export_text()\n    assert text == \"hello world\\n\"\n\n\ndef test_capturing_no_stdout_and_no_stderr_files(monkeypatch):\n    monkeypatch.setattr(\"sys.stdout\", None)\n    monkeypatch.setattr(\"sys.stderr\", None)\n    console = Console()\n    with console.capture() as capture:\n        console.print(\"hello world\")\n    assert capture.get() == \"hello world\\n\"\n\n\n@pytest.mark.parametrize(\"env_value\", [\"\", \"something\", \"0\"])\ndef test_force_color(env_value):\n    # Even though we use a non-tty file, the presence of FORCE_COLOR env var\n    # means is_terminal returns True.\n    console = Console(file=io.StringIO(), _environ={\"FORCE_COLOR\": env_value})\n    assert console.is_terminal\n\n\ndef test_force_color_jupyter():\n    # FORCE_COLOR above doesn't happen in a Jupyter kernel\n    console = Console(\n        file=io.StringIO(), _environ={\"FORCE_COLOR\": \"1\"}, force_jupyter=True\n    )\n    assert not console.is_terminal\n\n\ndef test_force_color():\n    console = Console(\n        file=io.StringIO(),\n        _environ={\n            \"FORCE_COLOR\": \"1\",\n            \"TERM\": \"xterm-256color\",\n            \"COLORTERM\": \"truecolor\",\n        },\n    )\n    assert console.color_system in (\"truecolor\", \"windows\")\n", "tests/test_screen.py": "from rich.console import Console\nfrom rich.screen import Screen\n\n\ndef test_screen():\n    console = Console(color_system=None, width=20, height=5, legacy_windows=False)\n    with console.capture() as capture:\n        console.print(Screen(\"foo\\nbar\\nbaz\\nfoo\\nbar\\nbaz\\foo\"))\n    result = capture.get()\n    print(repr(result))\n    expected = \"foo                 \\nbar                 \\nbaz                 \\nfoo                 \\nbar                 \"\n    assert result == expected\n", "tests/test_status.py": "from time import sleep\n\nfrom rich.console import Console\nfrom rich.spinner import Spinner\nfrom rich.status import Status\n\n\ndef test_status():\n    console = Console(\n        color_system=None, width=80, legacy_windows=False, get_time=lambda: 0.0\n    )\n    status = Status(\"foo\", console=console)\n    assert status.console == console\n    previous_status_renderable = status.renderable\n    status.update(status=\"bar\", spinner_style=\"red\", speed=2.0)\n\n    assert previous_status_renderable == status.renderable\n    assert isinstance(status.renderable, Spinner)\n    status.update(spinner=\"dots2\")\n    assert previous_status_renderable != status.renderable\n\n    # TODO: Testing output is tricky with threads\n    with status:\n        sleep(0.2)\n\n\ndef test_renderable():\n    console = Console(\n        color_system=None, width=80, legacy_windows=False, get_time=lambda: 0.0\n    )\n    status = Status(\"foo\", console=console)\n    console.begin_capture()\n    console.print(status)\n    assert console.end_capture() == \"\u280b foo\\n\"\n", "tests/test_theme.py": "import io\nimport os\nimport tempfile\n\nimport pytest\n\nfrom rich.style import Style\nfrom rich.theme import Theme, ThemeStack, ThemeStackError\n\n\ndef test_inherit():\n    theme = Theme({\"warning\": \"red\"})\n    assert theme.styles[\"warning\"] == Style(color=\"red\")\n    assert theme.styles[\"dim\"] == Style(dim=True)\n\n\ndef test_config():\n    theme = Theme({\"warning\": \"red\"})\n    config = theme.config\n    assert \"warning = red\\n\" in config\n\n\ndef test_from_file():\n    theme = Theme({\"warning\": \"red\"})\n    text_file = io.StringIO()\n    text_file.write(theme.config)\n    text_file.seek(0)\n\n    load_theme = Theme.from_file(text_file)\n    assert theme.styles == load_theme.styles\n\n\ndef test_read():\n    theme = Theme({\"warning\": \"red\"})\n    with tempfile.TemporaryDirectory(\"richtheme\") as name:\n        filename = os.path.join(name, \"theme.cfg\")\n        with open(filename, \"wt\") as write_theme:\n            write_theme.write(theme.config)\n        load_theme = Theme.read(filename)\n        assert theme.styles == load_theme.styles\n\n\ndef test_theme_stack():\n    theme = Theme({\"warning\": \"red\"})\n    stack = ThemeStack(theme)\n    assert stack.get(\"warning\") == Style.parse(\"red\")\n    new_theme = Theme({\"warning\": \"bold yellow\"})\n    stack.push_theme(new_theme)\n    assert stack.get(\"warning\") == Style.parse(\"bold yellow\")\n    stack.pop_theme()\n    assert stack.get(\"warning\") == Style.parse(\"red\")\n    with pytest.raises(ThemeStackError):\n        stack.pop_theme()\n", "tests/test_file_proxy.py": "import io\nimport sys\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.file_proxy import FileProxy\n\n\ndef test_empty_bytes():\n    console = Console()\n    file_proxy = FileProxy(console, sys.stdout)\n    # File should raise TypeError when writing bytes\n    with pytest.raises(TypeError):\n        file_proxy.write(b\"\")  # type: ignore\n    with pytest.raises(TypeError):\n        file_proxy.write(b\"foo\")  # type: ignore\n\n\ndef test_flush():\n    file = io.StringIO()\n    console = Console(file=file)\n    file_proxy = FileProxy(console, file)\n    file_proxy.write(\"foo\")\n    assert file.getvalue() == \"\"\n    file_proxy.flush()\n    assert file.getvalue() == \"foo\\n\"\n\n\ndef test_new_lines():\n    file = io.StringIO()\n    console = Console(file=file)\n    file_proxy = FileProxy(console, file)\n    file_proxy.write(\"-\\n-\")\n    assert file.getvalue() == \"-\\n\"\n    file_proxy.flush()\n    assert file.getvalue() == \"-\\n-\\n\"\n", "tests/test_inspect.py": "import io\nimport sys\nfrom types import ModuleType\nfrom typing import Sequence, Type\n\nimport pytest\n\nfrom rich import inspect\nfrom rich._inspect import (\n    get_object_types_mro,\n    get_object_types_mro_as_strings,\n    is_object_one_of_types,\n)\nfrom rich.console import Console\n\nskip_py37 = pytest.mark.skipif(\n    sys.version_info.minor == 7 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.7\",\n)\n\nskip_py38 = pytest.mark.skipif(\n    sys.version_info.minor == 8 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.8\",\n)\n\nskip_py39 = pytest.mark.skipif(\n    sys.version_info.minor == 9 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.9\",\n)\n\nskip_py310 = pytest.mark.skipif(\n    sys.version_info.minor == 10 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.10\",\n)\n\nskip_py311 = pytest.mark.skipif(\n    sys.version_info.minor == 11 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.11\",\n)\n\nskip_py312 = pytest.mark.skipif(\n    sys.version_info.minor == 12 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.12\",\n)\n\nskip_pypy3 = pytest.mark.skipif(\n    hasattr(sys, \"pypy_version_info\"),\n    reason=\"rendered differently on pypy3\",\n)\n\n\ndef render(obj, methods=False, value=False, width=50) -> str:\n    console = Console(file=io.StringIO(), width=width, legacy_windows=False)\n    inspect(obj, console=console, methods=methods, value=value)\n    return console.file.getvalue()\n\n\nclass InspectError(Exception):\n    def __str__(self) -> str:\n        return \"INSPECT ERROR\"\n\n\nclass Foo:\n    \"\"\"Foo test\n\n    Second line\n    \"\"\"\n\n    def __init__(self, foo: int) -> None:\n        \"\"\"constructor docs.\"\"\"\n        self.foo = foo\n\n    @property\n    def broken(self):\n        raise InspectError()\n\n    def method(self, a, b) -> str:\n        \"\"\"Multi line\n\n        docs.\n        \"\"\"\n        return \"test\"\n\n    def __dir__(self):\n        return [\"__init__\", \"broken\", \"method\"]\n\n\nclass FooSubclass(Foo):\n    pass\n\n\ndef test_render():\n    console = Console(width=100, file=io.StringIO(), legacy_windows=False)\n\n    foo = Foo(\"hello\")\n    inspect(foo, console=console, all=True, value=False)\n    result = console.file.getvalue()\n    print(repr(result))\n    expected = \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <class 'tests.test_inspect.Foo'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Foo test                                                     \u2502\\n\u2502                                                              \u2502\\n\u2502   broken = InspectError()                                    \u2502\\n\u2502 __init__ = def __init__(foo: int) -> None: constructor docs. \u2502\\n\u2502   method = def method(a, b) -> str: Multi line               \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    assert result == expected\n\n\n@skip_pypy3\ndef test_inspect_text():\n    num_attributes = 34 if sys.version_info >= (3, 11) else 33\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <class 'str'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 str(object='') -> str                          \u2502\\n\"\n        \"\u2502 str(bytes_or_buffer[, encoding[, errors]]) ->  \u2502\\n\"\n        \"\u2502 str                                            \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        f\"\u2502 {num_attributes} attribute(s) not shown. Run                 \u2502\\n\"\n        \"\u2502 inspect(inspect) for options.                  \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    print(repr(expected))\n    assert render(\"Hello\") == expected\n\n\n@skip_py37\n@skip_pypy3\ndef test_inspect_empty_dict():\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <class 'dict'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 dict() -> new empty dictionary                 \u2502\\n\"\n        \"\u2502 dict(mapping) -> new dictionary initialized    \u2502\\n\"\n        \"\u2502 from a mapping object's                        \u2502\\n\"\n        \"\u2502     (key, value) pairs                         \u2502\\n\"\n        \"\u2502 dict(iterable) -> new dictionary initialized   \u2502\\n\"\n        \"\u2502 as if via:                                     \u2502\\n\"\n        \"\u2502     d = {}                                     \u2502\\n\"\n        \"\u2502     for k, v in iterable:                      \u2502\\n\"\n        \"\u2502         d[k] = v                               \u2502\\n\"\n        \"\u2502 dict(**kwargs) -> new dictionary initialized   \u2502\\n\"\n        \"\u2502 with the name=value pairs                      \u2502\\n\"\n        \"\u2502     in the keyword argument list.  For         \u2502\\n\"\n        \"\u2502 example:  dict(one=1, two=2)                   \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n    )\n    assert render({}).startswith(expected)\n\n\n@skip_py312\n@skip_py311\n@skip_pypy3\ndef test_inspect_builtin_function_except_python311():\n    # Pre-3.11 Python versions - print builtin has no signature available\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <built-in function print> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 def print(...)                                 \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        \"\u2502 print(value, ..., sep=' ', end='\\\\n',           \u2502\\n\"\n        \"\u2502 file=sys.stdout, flush=False)                  \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        \"\u2502 29 attribute(s) not shown. Run                 \u2502\\n\"\n        \"\u2502 inspect(inspect) for options.                  \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    assert render(print) == expected\n\n\n@pytest.mark.skipif(\n    sys.version_info < (3, 11), reason=\"print builtin signature only available on 3.11+\"\n)\n@skip_pypy3\ndef test_inspect_builtin_function_only_python311():\n    # On 3.11, the print builtin *does* have a signature, unlike in prior versions\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <built-in function print> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 def print(*args, sep=' ', end='\\\\n', file=None, \u2502\\n\"\n        \"\u2502 flush=False):                                  \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        \"\u2502 Prints the values to a stream, or to           \u2502\\n\"\n        \"\u2502 sys.stdout by default.                         \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        \"\u2502 30 attribute(s) not shown. Run                 \u2502\\n\"\n        \"\u2502 inspect(inspect) for options.                  \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    assert render(print) == expected\n\n\n@skip_pypy3\ndef test_inspect_coroutine():\n    async def coroutine():\n        pass\n\n    expected = (\n        \"\u256d\u2500 <function test_inspect_coroutine.<locals>.cor\u2500\u256e\\n\"\n        \"\u2502 async def                                      \u2502\\n\"\n        \"\u2502 test_inspect_coroutine.<locals>.coroutine():   \u2502\\n\"\n    )\n    assert render(coroutine).startswith(expected)\n\n\ndef test_inspect_integer():\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500 <class 'int'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 int([x]) -> integer        \u2502\\n\"\n        \"\u2502 int(x, base=10) -> integer \u2502\\n\"\n        \"\u2502                            \u2502\\n\"\n        \"\u2502 denominator = 1            \u2502\\n\"\n        \"\u2502        imag = 0            \u2502\\n\"\n        \"\u2502   numerator = 1            \u2502\\n\"\n        \"\u2502        real = 1            \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    assert expected == render(1)\n\n\ndef test_inspect_integer_with_value():\n    expected = \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500 <class 'int'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 int([x]) -> integer        \u2502\\n\u2502 int(x, base=10) -> integer \u2502\\n\u2502                            \u2502\\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\\n\u2502 \u2502 1                      \u2502 \u2502\\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\\n\u2502                            \u2502\\n\u2502 denominator = 1            \u2502\\n\u2502        imag = 0            \u2502\\n\u2502   numerator = 1            \u2502\\n\u2502        real = 1            \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    value = render(1, value=True)\n    print(repr(value))\n    assert value == expected\n\n\n@skip_py37\n@skip_py310\n@skip_py311\n@skip_py312\ndef test_inspect_integer_with_methods_python38_and_python39():\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <class 'int'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 int([x]) -> integer                            \u2502\\n\"\n        \"\u2502 int(x, base=10) -> integer                     \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        \"\u2502      denominator = 1                           \u2502\\n\"\n        \"\u2502             imag = 0                           \u2502\\n\"\n        \"\u2502        numerator = 1                           \u2502\\n\"\n        \"\u2502             real = 1                           \u2502\\n\"\n        \"\u2502 as_integer_ratio = def as_integer_ratio():     \u2502\\n\"\n        \"\u2502                    Return integer ratio.       \u2502\\n\"\n        \"\u2502       bit_length = def bit_length(): Number of \u2502\\n\"\n        \"\u2502                    bits necessary to represent \u2502\\n\"\n        \"\u2502                    self in binary.             \u2502\\n\"\n        \"\u2502        conjugate = def conjugate(...) Returns  \u2502\\n\"\n        \"\u2502                    self, the complex conjugate \u2502\\n\"\n        \"\u2502                    of any int.                 \u2502\\n\"\n        \"\u2502       from_bytes = def from_bytes(bytes,       \u2502\\n\"\n        \"\u2502                    byteorder, *,               \u2502\\n\"\n        \"\u2502                    signed=False): Return the   \u2502\\n\"\n        \"\u2502                    integer represented by the  \u2502\\n\"\n        \"\u2502                    given array of bytes.       \u2502\\n\"\n        \"\u2502         to_bytes = def to_bytes(length,        \u2502\\n\"\n        \"\u2502                    byteorder, *,               \u2502\\n\"\n        \"\u2502                    signed=False): Return an    \u2502\\n\"\n        \"\u2502                    array of bytes representing \u2502\\n\"\n        \"\u2502                    an integer.                 \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    assert render(1, methods=True) == expected\n\n\n@skip_py37\n@skip_py38\n@skip_py39\n@skip_py311\n@skip_py312\ndef test_inspect_integer_with_methods_python310only():\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <class 'int'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 int([x]) -> integer                            \u2502\\n\"\n        \"\u2502 int(x, base=10) -> integer                     \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        \"\u2502      denominator = 1                           \u2502\\n\"\n        \"\u2502             imag = 0                           \u2502\\n\"\n        \"\u2502        numerator = 1                           \u2502\\n\"\n        \"\u2502             real = 1                           \u2502\\n\"\n        \"\u2502 as_integer_ratio = def as_integer_ratio():     \u2502\\n\"\n        \"\u2502                    Return integer ratio.       \u2502\\n\"\n        \"\u2502        bit_count = def bit_count(): Number of  \u2502\\n\"\n        \"\u2502                    ones in the binary          \u2502\\n\"\n        \"\u2502                    representation of the       \u2502\\n\"\n        \"\u2502                    absolute value of self.     \u2502\\n\"\n        \"\u2502       bit_length = def bit_length(): Number of \u2502\\n\"\n        \"\u2502                    bits necessary to represent \u2502\\n\"\n        \"\u2502                    self in binary.             \u2502\\n\"\n        \"\u2502        conjugate = def conjugate(...) Returns  \u2502\\n\"\n        \"\u2502                    self, the complex conjugate \u2502\\n\"\n        \"\u2502                    of any int.                 \u2502\\n\"\n        \"\u2502       from_bytes = def from_bytes(bytes,       \u2502\\n\"\n        \"\u2502                    byteorder, *,               \u2502\\n\"\n        \"\u2502                    signed=False): Return the   \u2502\\n\"\n        \"\u2502                    integer represented by the  \u2502\\n\"\n        \"\u2502                    given array of bytes.       \u2502\\n\"\n        \"\u2502         to_bytes = def to_bytes(length,        \u2502\\n\"\n        \"\u2502                    byteorder, *,               \u2502\\n\"\n        \"\u2502                    signed=False): Return an    \u2502\\n\"\n        \"\u2502                    array of bytes representing \u2502\\n\"\n        \"\u2502                    an integer.                 \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    assert render(1, methods=True) == expected\n\n\n@skip_py37\n@skip_py38\n@skip_py39\n@skip_py310\n@skip_py312\ndef test_inspect_integer_with_methods_python311():\n    # to_bytes and from_bytes methods on int had minor signature change -\n    # they now, as of 3.11, have default values for all of their parameters\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <class 'int'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502 int([x]) -> integer                            \u2502\\n\"\n        \"\u2502 int(x, base=10) -> integer                     \u2502\\n\"\n        \"\u2502                                                \u2502\\n\"\n        \"\u2502      denominator = 1                           \u2502\\n\"\n        \"\u2502             imag = 0                           \u2502\\n\"\n        \"\u2502        numerator = 1                           \u2502\\n\"\n        \"\u2502             real = 1                           \u2502\\n\"\n        \"\u2502 as_integer_ratio = def as_integer_ratio():     \u2502\\n\"\n        \"\u2502                    Return integer ratio.       \u2502\\n\"\n        \"\u2502        bit_count = def bit_count(): Number of  \u2502\\n\"\n        \"\u2502                    ones in the binary          \u2502\\n\"\n        \"\u2502                    representation of the       \u2502\\n\"\n        \"\u2502                    absolute value of self.     \u2502\\n\"\n        \"\u2502       bit_length = def bit_length(): Number of \u2502\\n\"\n        \"\u2502                    bits necessary to represent \u2502\\n\"\n        \"\u2502                    self in binary.             \u2502\\n\"\n        \"\u2502        conjugate = def conjugate(...) Returns  \u2502\\n\"\n        \"\u2502                    self, the complex conjugate \u2502\\n\"\n        \"\u2502                    of any int.                 \u2502\\n\"\n        \"\u2502       from_bytes = def from_bytes(bytes,       \u2502\\n\"\n        \"\u2502                    byteorder='big', *,         \u2502\\n\"\n        \"\u2502                    signed=False): Return the   \u2502\\n\"\n        \"\u2502                    integer represented by the  \u2502\\n\"\n        \"\u2502                    given array of bytes.       \u2502\\n\"\n        \"\u2502         to_bytes = def to_bytes(length=1,      \u2502\\n\"\n        \"\u2502                    byteorder='big', *,         \u2502\\n\"\n        \"\u2502                    signed=False): Return an    \u2502\\n\"\n        \"\u2502                    array of bytes representing \u2502\\n\"\n        \"\u2502                    an integer.                 \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    assert render(1, methods=True) == expected\n\n\n@skip_py37\n@skip_pypy3\ndef test_broken_call_attr():\n    class NotCallable:\n        __call__ = 5  # Passes callable() but isn't really callable\n\n        def __repr__(self):\n            return \"NotCallable()\"\n\n    class Foo:\n        foo = NotCallable()\n\n    foo = Foo()\n    assert callable(foo.foo)\n    expected = \"\u256d\u2500 <class 'tests.test_inspect.test_broken_call_attr.<locals>.Foo'> \u2500\u256e\\n\u2502 foo = NotCallable()                                               \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    result = render(foo, methods=True, width=100)\n    print(repr(result))\n    assert expected == result\n\n\ndef test_inspect_swig_edge_case():\n    \"\"\"Issue #1838 - Edge case with Faiss library - object with empty dir()\"\"\"\n\n    class Thing:\n        @property\n        def __class__(self):\n            raise AttributeError\n\n    thing = Thing()\n    try:\n        inspect(thing)\n    except Exception as e:\n        assert False, f\"Object with no __class__ shouldn't raise {e}\"\n\n\ndef test_inspect_module_with_class():\n    def function():\n        pass\n\n    class Thing:\n        \"\"\"Docstring\"\"\"\n\n        pass\n\n    module = ModuleType(\"my_module\")\n    module.SomeClass = Thing\n    module.function = function\n\n    expected = (\n        \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <module 'my_module'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\"\n        \"\u2502  function = def function():              \u2502\\n\"\n        \"\u2502 SomeClass = class SomeClass(): Docstring \u2502\\n\"\n        \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n    )\n    assert render(module, methods=True) == expected\n\n\n@pytest.mark.parametrize(\n    \"special_character,expected_replacement\",\n    (\n        (\"\\a\", \"\\\\a\"),\n        (\"\\b\", \"\\\\b\"),\n        (\"\\f\", \"\\\\f\"),\n        (\"\\r\", \"\\\\r\"),\n        (\"\\v\", \"\\\\v\"),\n    ),\n)\ndef test_can_handle_special_characters_in_docstrings(\n    special_character: str, expected_replacement: str\n) -> None:\n    class Something:\n        class Thing:\n            pass\n\n    Something.Thing.__doc__ = f\"\"\"\n    Multiline docstring\n    with {special_character} should be handled\n    \"\"\"\n\n    expected = \"\"\"\\\n\u256d\u2500 <class 'tests.test_inspect.test_can_handle_sp\u2500\u256e\n\u2502 class                                          \u2502\n\u2502 test_can_handle_special_characters_in_docstrin \u2502\n\u2502 gs.<locals>.Something():                       \u2502\n\u2502                                                \u2502\n\u2502 Thing = class Thing():                         \u2502\n\u2502         Multiline docstring                    \u2502\n\u2502         with %s should be handled              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\"\"\" % (\n        expected_replacement\n    )\n    assert render(Something, methods=True) == expected\n\n\n@pytest.mark.parametrize(\n    \"obj,expected_result\",\n    (\n        [object, (object,)],\n        [object(), (object,)],\n        [\"hi\", (str, object)],\n        [str, (str, object)],\n        [Foo(1), (Foo, object)],\n        [Foo, (Foo, object)],\n        [FooSubclass(1), (FooSubclass, Foo, object)],\n        [FooSubclass, (FooSubclass, Foo, object)],\n    ),\n)\ndef test_object_types_mro(obj: object, expected_result: Sequence[Type]):\n    assert get_object_types_mro(obj) == expected_result\n\n\n@pytest.mark.parametrize(\n    \"obj,expected_result\",\n    (\n        # fmt: off\n        [\"hi\", [\"builtins.str\", \"builtins.object\"]],\n        [str, [\"builtins.str\", \"builtins.object\"]],\n        [Foo(1), [f\"{__name__}.Foo\", \"builtins.object\"]],\n        [Foo, [f\"{__name__}.Foo\", \"builtins.object\"]],\n        [FooSubclass(1),\n         [f\"{__name__}.FooSubclass\", f\"{__name__}.Foo\", \"builtins.object\"]],\n        [FooSubclass,\n         [f\"{__name__}.FooSubclass\", f\"{__name__}.Foo\", \"builtins.object\"]],\n        # fmt: on\n    ),\n)\ndef test_object_types_mro_as_strings(obj: object, expected_result: Sequence[str]):\n    assert get_object_types_mro_as_strings(obj) == expected_result\n\n\n@pytest.mark.parametrize(\n    \"obj,types,expected_result\",\n    (\n        # fmt: off\n        [\"hi\", [\"builtins.str\"], True],\n        [str, [\"builtins.str\"], True],\n        [\"hi\", [\"builtins.str\", \"foo\"], True],\n        [str, [\"builtins.str\", \"foo\"], True],\n        [Foo(1), [f\"{__name__}.Foo\"], True],\n        [Foo, [f\"{__name__}.Foo\"], True],\n        [Foo(1), [\"builtins.str\", f\"{__name__}.Foo\"], True],\n        [Foo, [\"builtins.int\", f\"{__name__}.Foo\"], True],\n        [Foo(1), [f\"{__name__}.FooSubclass\"], False],\n        [Foo, [f\"{__name__}.FooSubclass\"], False],\n        [Foo(1), [f\"{__name__}.FooSubclass\", f\"{__name__}.Foo\"], True],\n        [Foo, [f\"{__name__}.Foo\", f\"{__name__}.FooSubclass\"], True],\n        # fmt: on\n    ),\n)\ndef test_object_is_one_of_types(\n    obj: object, types: Sequence[str], expected_result: bool\n):\n    assert is_object_one_of_types(obj, types) is expected_result\n", "tests/test_layout.py": "import sys\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.layout import Layout, NoSplitter\nfrom rich.panel import Panel\n\n\ndef test_no_layout():\n    layout = Layout()\n    with pytest.raises(NoSplitter):\n        layout.split(Layout(), Layout(), splitter=\"nope\")\n\n\ndef test_add_split():\n    layout = Layout()\n    layout.split(Layout(), Layout())\n    assert len(layout.children) == 2\n    layout.add_split(Layout(name=\"foo\"))\n    assert len(layout.children) == 3\n    assert layout.children[2].name == \"foo\"\n\n\ndef test_unsplit():\n    layout = Layout()\n    layout.split(Layout(), Layout())\n    assert len(layout.children) == 2\n\n    layout.unsplit()\n    assert len(layout.children) == 0\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\ndef test_render():\n    layout = Layout(name=\"root\")\n    repr(layout)\n\n    layout.split_column(Layout(name=\"top\"), Layout(name=\"bottom\"))\n    top = layout[\"top\"]\n    top.update(Panel(\"foo\"))\n\n    print(type(top._renderable))\n    assert isinstance(top.renderable, Panel)\n    layout[\"bottom\"].split_row(Layout(name=\"left\"), Layout(name=\"right\"))\n\n    assert layout[\"root\"].name == \"root\"\n    assert layout[\"left\"].name == \"left\"\n\n    assert isinstance(layout.map, dict)\n\n    with pytest.raises(KeyError):\n        top[\"asdasd\"]\n\n    layout[\"left\"].update(\"foobar\")\n    print(layout[\"left\"].children)\n\n    console = Console(width=60, color_system=None)\n\n    with console.capture() as capture:\n        console.print(layout, height=10)\n\n    result = capture.get()\n    print(repr(result))\n    expected = \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 foo                                                      \u2502\\n\u2502                                                          \u2502\\n\u2502                                                          \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\nfoobar                        \u256d\u2500\u2500\u2500\u2500\u2500 'right' (30 x 5) \u2500\u2500\u2500\u2500\u2500\u256e\\n                              \u2502                            \u2502\\n                              \u2502    Layout(name='right')    \u2502\\n                              \u2502                            \u2502\\n                              \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\"\n\n    assert result == expected\n\n\ndef test_tree():\n    layout = Layout(name=\"root\")\n    layout.split(Layout(\"foo\", size=2), Layout(\"bar\", name=\"bar\"))\n    layout[\"bar\"].split_row(Layout(), Layout())\n\n    console = Console(width=60, color_system=None)\n\n    with console.capture() as capture:\n        console.print(layout.tree, height=10)\n    result = capture.get()\n    print(repr(result))\n    expected = \"\u2b0d Layout(name='root')\\n\u251c\u2500\u2500 \u2b0d Layout(size=2)\\n\u2514\u2500\u2500 \u2b0c Layout(name='bar')\\n    \u251c\u2500\u2500 \u2b0d Layout()\\n    \u2514\u2500\u2500 \u2b0d Layout()\\n\"\n    print(result, \"\\n\", expected)\n    assert result == expected\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\ndef test_refresh_screen():\n    layout = Layout()\n    layout.split_row(Layout(name=\"foo\"), Layout(name=\"bar\"))\n    console = Console(force_terminal=True, width=20, height=5, _environ={})\n    with console.capture():\n        console.print(layout)\n    with console.screen():\n        with console.capture() as capture:\n            layout.refresh_screen(console, \"foo\")\n    result = capture.get()\n    print()\n    print(repr(result))\n    expected = \"\\x1b[1;1H\\x1b[34m\u256d\u2500\\x1b[0m\\x1b[34m \\x1b[0m\\x1b[32m'foo'\\x1b[0m\\x1b[34m\u2500\u256e\\x1b[0m\\x1b[2;1H\\x1b[34m\u2502\\x1b[0m \\x1b[1;35mLayout\\x1b[0m \\x1b[34m\u2502\\x1b[0m\\x1b[3;1H\\x1b[34m\u2502\\x1b[0m \\x1b[1m(\\x1b[0m      \\x1b[34m\u2502\\x1b[0m\\x1b[4;1H\\x1b[34m\u2502\\x1b[0m     \\x1b[33mna\\x1b[0m \\x1b[34m\u2502\\x1b[0m\\x1b[5;1H\\x1b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\x1b[0m\"\n    assert result == expected\n", "tests/test_palette.py": "from rich._palettes import STANDARD_PALETTE\nfrom rich.table import Table\n\n\ndef test_rich_cast():\n    table = STANDARD_PALETTE.__rich__()\n    assert isinstance(table, Table)\n    assert table.row_count == 16\n", "tests/test_padding.py": "import pytest\n\nfrom rich.padding import Padding\nfrom rich.console import Console, ConsoleDimensions, ConsoleOptions\nfrom rich.style import Style\nfrom rich.segment import Segment\n\n\ndef test_repr():\n    padding = Padding(\"foo\", (1, 2))\n    assert isinstance(repr(padding), str)\n\n\ndef test_indent():\n    indent_result = Padding.indent(\"test\", 4)\n    assert indent_result.top == 0\n    assert indent_result.right == 0\n    assert indent_result.bottom == 0\n    assert indent_result.left == 4\n\n\ndef test_unpack():\n    assert Padding.unpack(3) == (3, 3, 3, 3)\n    assert Padding.unpack((3,)) == (3, 3, 3, 3)\n    assert Padding.unpack((3, 4)) == (3, 4, 3, 4)\n    assert Padding.unpack((3, 4, 5, 6)) == (3, 4, 5, 6)\n    with pytest.raises(ValueError):\n        Padding.unpack((1, 2, 3))\n\n\ndef test_expand_false():\n    console = Console(width=100, color_system=None)\n    console.begin_capture()\n    console.print(Padding(\"foo\", 1, expand=False))\n    assert console.end_capture() == \"     \\n foo \\n     \\n\"\n\n\ndef test_rich_console():\n    renderable = \"test renderable\"\n    style = Style(color=\"red\")\n    options = ConsoleOptions(\n        ConsoleDimensions(80, 25),\n        max_height=25,\n        legacy_windows=False,\n        min_width=10,\n        max_width=20,\n        is_terminal=False,\n        encoding=\"utf-8\",\n    )\n\n    expected_outputs = [\n        Segment(renderable, style=style),\n        Segment(\" \" * (20 - len(renderable)), style=style),\n        Segment(\"\\n\", style=None),\n    ]\n    padding_generator = Padding(renderable, style=style).__rich_console__(\n        Console(), options\n    )\n    for output, expected in zip(padding_generator, expected_outputs):\n        assert output == expected\n", "tests/test_jupyter.py": "from rich.console import Console\n\n\ndef test_jupyter():\n    console = Console(force_jupyter=True)\n    assert console.width == 115\n    assert console.height == 100\n    assert console.color_system == \"truecolor\"\n\n\ndef test_jupyter_columns_env():\n    console = Console(_environ={\"JUPYTER_COLUMNS\": \"314\"}, force_jupyter=True)\n    assert console.width == 314\n    # width take precedence\n    console = Console(width=40, _environ={\"JUPYTER_COLUMNS\": \"314\"}, force_jupyter=True)\n    assert console.width == 40\n    # Should not fail\n    console = Console(\n        width=40, _environ={\"JUPYTER_COLUMNS\": \"broken\"}, force_jupyter=True\n    )\n\n\ndef test_jupyter_lines_env():\n    console = Console(_environ={\"JUPYTER_LINES\": \"220\"}, force_jupyter=True)\n    assert console.height == 220\n    # height take precedence\n    console = Console(height=40, _environ={\"JUPYTER_LINES\": \"220\"}, force_jupyter=True)\n    assert console.height == 40\n    # Should not fail\n    console = Console(\n        width=40, _environ={\"JUPYTER_LINES\": \"broken\"}, force_jupyter=True\n    )\n", "tests/test_color_triplet.py": "from rich.color_triplet import ColorTriplet\n\n\ndef test_hex():\n    assert ColorTriplet(255, 255, 255).hex == \"#ffffff\"\n    assert ColorTriplet(0, 255, 0).hex == \"#00ff00\"\n\n\ndef test_rgb():\n    assert ColorTriplet(255, 255, 255).rgb == \"rgb(255,255,255)\"\n    assert ColorTriplet(0, 255, 0).rgb == \"rgb(0,255,0)\"\n\n\ndef test_normalized():\n    assert ColorTriplet(255, 255, 255).normalized == (1.0, 1.0, 1.0)\n    assert ColorTriplet(0, 255, 0).normalized == (0.0, 1.0, 0.0)\n", "tests/test_columns_align.py": "# encoding=utf-8\n\nimport io\n\nfrom rich import box\nfrom rich.columns import Columns\nfrom rich.console import Console\nfrom rich.panel import Panel\n\n\ndef render():\n    console = Console(file=io.StringIO(), width=100, legacy_windows=False)\n    panel = Panel.fit(\"foo\", box=box.SQUARE, padding=0)\n    columns = Columns([panel] * 4)\n    columns.expand = True\n    console.rule(\"no align\")\n    console.print(columns)\n\n    columns.align = \"left\"\n    console.rule(\"left align\")\n    console.print(columns)\n\n    columns.align = \"center\"\n    console.rule(\"center align\")\n    console.print(columns)\n\n    columns.align = \"right\"\n    console.rule(\"right align\")\n    console.print(columns)\n\n    return console.file.getvalue()\n\n\ndef test_align():\n    result = render()\n    expected = \"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 no align \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\u250c\u2500\u2500\u2500\u2510                      \u250c\u2500\u2500\u2500\u2510                     \u250c\u2500\u2500\u2500\u2510                     \u250c\u2500\u2500\u2500\u2510                \\n\u2502foo\u2502                      \u2502foo\u2502                     \u2502foo\u2502                     \u2502foo\u2502                \\n\u2514\u2500\u2500\u2500\u2518                      \u2514\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2518                \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 left align \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\u250c\u2500\u2500\u2500\u2510                      \u250c\u2500\u2500\u2500\u2510                     \u250c\u2500\u2500\u2500\u2510                     \u250c\u2500\u2500\u2500\u2510                \\n\u2502foo\u2502                      \u2502foo\u2502                     \u2502foo\u2502                     \u2502foo\u2502                \\n\u2514\u2500\u2500\u2500\u2518                      \u2514\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2518                \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 center align \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n          \u250c\u2500\u2500\u2500\u2510                      \u250c\u2500\u2500\u2500\u2510                     \u250c\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2510        \\n          \u2502foo\u2502                      \u2502foo\u2502                     \u2502foo\u2502                   \u2502foo\u2502        \\n          \u2514\u2500\u2500\u2500\u2518                      \u2514\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2518        \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 right align \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                     \u250c\u2500\u2500\u2500\u2510                     \u250c\u2500\u2500\u2500\u2510                     \u250c\u2500\u2500\u2500\u2510                 \u250c\u2500\u2500\u2500\u2510\\n                     \u2502foo\u2502                     \u2502foo\u2502                     \u2502foo\u2502                 \u2502foo\u2502\\n                     \u2514\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2518\\n\"\n    assert result == expected\n\n\nif __name__ == \"__main__\":\n    rendered = render()\n    print(rendered)\n    print(repr(rendered))\n", "tests/test_text.py": "from io import StringIO\nfrom typing import List\n\nimport pytest\n\nfrom rich.console import Console, Group\nfrom rich.measure import Measurement\nfrom rich.style import Style\nfrom rich.text import Span, Text\n\n\ndef test_span():\n    span = Span(1, 10, \"foo\")\n    repr(span)\n    assert bool(span)\n    assert not Span(10, 10, \"foo\")\n\n\ndef test_span_split():\n    assert Span(5, 10, \"foo\").split(2) == (Span(5, 10, \"foo\"), None)\n    assert Span(5, 10, \"foo\").split(15) == (Span(5, 10, \"foo\"), None)\n    assert Span(0, 10, \"foo\").split(5) == (Span(0, 5, \"foo\"), Span(5, 10, \"foo\"))\n\n\ndef test_span_move():\n    assert Span(5, 10, \"foo\").move(2) == Span(7, 12, \"foo\")\n\n\ndef test_span_right_crop():\n    assert Span(5, 10, \"foo\").right_crop(15) == Span(5, 10, \"foo\")\n    assert Span(5, 10, \"foo\").right_crop(7) == Span(5, 7, \"foo\")\n\n\ndef test_len():\n    assert len(Text(\"foo\")) == 3\n\n\ndef test_cell_len():\n    assert Text(\"foo\").cell_len == 3\n    assert Text(\"\ud83d\ude00\").cell_len == 2\n\n\ndef test_bool():\n    assert Text(\"foo\")\n    assert not Text(\"\")\n\n\ndef test_str():\n    assert str(Text(\"foo\")) == \"foo\"\n\n\ndef test_repr():\n    assert isinstance(repr(Text(\"foo\")), str)\n\n\ndef test_add():\n    text = Text(\"foo\") + Text(\"bar\")\n    assert str(text) == \"foobar\"\n    assert Text(\"foo\").__add__(1) == NotImplemented\n\n\ndef test_eq():\n    assert Text(\"foo\") == Text(\"foo\")\n    assert Text(\"foo\") != Text(\"bar\")\n    assert Text(\"foo\").__eq__(1) == NotImplemented\n\n\ndef test_contain():\n    text = Text(\"foobar\")\n    assert \"foo\" in text\n    assert \"foo \" not in text\n    assert Text(\"bar\") in text\n    assert None not in text\n\n\ndef test_plain_property():\n    text = Text(\"foo\")\n    text.append(\"bar\")\n    text.append(\"baz\")\n    assert text.plain == \"foobarbaz\"\n\n\ndef test_plain_property_setter():\n    text = Text(\"foo\")\n    text.plain = \"bar\"\n    assert str(text) == \"bar\"\n    text = Text()\n    text.append(\"Hello, World\", \"bold\")\n    text.plain = \"Hello\"\n    assert str(text) == \"Hello\"\n    assert text._spans == [Span(0, 5, \"bold\")]\n\n\ndef test_from_markup():\n    text = Text.from_markup(\"Hello, [bold]World![/bold]\")\n    assert str(text) == \"Hello, World!\"\n    assert text._spans == [Span(7, 13, \"bold\")]\n\n\ndef test_from_ansi():\n    text = Text.from_ansi(\"Hello, \\033[1mWorld!\\033[0m\")\n    assert str(text) == \"Hello, World!\"\n    assert text._spans == [Span(7, 13, Style(bold=True))]\n\n    text = Text.from_ansi(\"Hello, \\033[1m\\nWorld!\\033[0m\")\n    assert str(text) == \"Hello, \\nWorld!\"\n    assert text._spans == [Span(8, 14, Style(bold=True))]\n\n    text = Text.from_ansi(\"\\033[1mBOLD\\033[m not bold\")\n    assert str(text) == \"BOLD not bold\"\n    assert text._spans == [Span(0, 4, Style(bold=True))]\n\n    text = Text.from_ansi(\"\\033[1m\\033[Kfoo barmbaz\")\n    assert str(text) == \"foo barmbaz\"\n    assert text._spans == [Span(0, 11, Style(bold=True))]\n\n\ndef test_copy():\n    text = Text()\n    text.append(\"Hello\", \"bold\")\n    text.append(\" \")\n    text.append(\"World\", \"italic\")\n    test_copy = text.copy()\n    assert text == test_copy\n    assert text is not test_copy\n\n\ndef test_rstrip():\n    text = Text(\"Hello, World!    \")\n    text.rstrip()\n    assert str(text) == \"Hello, World!\"\n\n\ndef test_rstrip_end():\n    text = Text(\"Hello, World!    \")\n    text.rstrip_end(14)\n    assert str(text) == \"Hello, World! \"\n\n\ndef test_stylize():\n    text = Text(\"Hello, World!\")\n    text.stylize(\"bold\", 7, 11)\n    assert text._spans == [Span(7, 11, \"bold\")]\n    text.stylize(\"bold\", 20, 25)\n    assert text._spans == [Span(7, 11, \"bold\")]\n\n\ndef test_stylize_before():\n    text = Text(\"Hello, World!\")\n    text.stylize(\"bold\", 0, 5)\n    text.stylize_before(\"italic\", 2, 7)\n    assert text._spans == [Span(2, 7, \"italic\"), Span(0, 5, \"bold\")]\n\n\ndef test_stylize_negative_index():\n    text = Text(\"Hello, World!\")\n    text.stylize(\"bold\", -6, -1)\n    assert text._spans == [Span(7, 12, \"bold\")]\n\n\ndef test_highlight_regex():\n    text = Text(\"peek-a-boo\")\n\n    count = text.highlight_regex(r\"NEVER_MATCH\", \"red\")\n    assert count == 0\n    assert len(text._spans) == 0\n\n    # text: peek-a-boo\n    # indx: 0123456789\n    count = text.highlight_regex(r\"[a|e|o]+\", \"red\")\n    assert count == 3\n    assert sorted(text._spans) == [\n        Span(1, 3, \"red\"),\n        Span(5, 6, \"red\"),\n        Span(8, 10, \"red\"),\n    ]\n\n    text = Text(\"Ada Lovelace, Alan Turing\")\n    count = text.highlight_regex(\n        r\"(?P<yellow>[A-Za-z]+)[ ]+(?P<red>[A-Za-z]+)(?P<NEVER_MATCH>NEVER_MATCH)*\"\n    )\n\n    # The number of matched name should be 2\n    assert count == 2\n    assert sorted(text._spans) == [\n        Span(0, 3, \"yellow\"),  # Ada\n        Span(4, 12, \"red\"),  # Lovelace\n        Span(14, 18, \"yellow\"),  # Alan\n        Span(19, 25, \"red\"),  # Turing\n    ]\n\n\ndef test_highlight_regex_callable():\n    text = Text(\"Vulnerability CVE-2018-6543 detected\")\n    re_cve = r\"CVE-\\d{4}-\\d+\"\n\n    def get_style(text: str) -> Style:\n        return Style.parse(\n            f\"bold yellow link https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword={text}\"\n        )\n\n    count = text.highlight_regex(re_cve, get_style)\n    assert count == 1\n    assert len(text._spans) == 1\n    assert text._spans[0].start == 14\n    assert text._spans[0].end == 27\n    assert (\n        text._spans[0].style.link\n        == \"https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2018-6543\"\n    )\n\n\ndef test_highlight_words():\n    text = Text(\"Do NOT! touch anything!\")\n    words = [\"NOT\", \"!\"]\n    count = text.highlight_words(words, \"red\")\n    assert count == 3\n    assert sorted(text._spans) == [\n        Span(3, 6, \"red\"),  # NOT\n        Span(6, 7, \"red\"),  # !\n        Span(22, 23, \"red\"),  # !\n    ]\n\n    # regex escape test\n    text = Text(\"[o|u]aeiou\")\n    words = [\"[a|e|i]\", \"[o|u]\"]\n    count = text.highlight_words(words, \"red\")\n    assert count == 1\n    assert text._spans == [Span(0, 5, \"red\")]\n\n    # case sensitive\n    text = Text(\"AB Ab aB ab\")\n    words = [\"AB\"]\n\n    count = text.highlight_words(words, \"red\")\n    assert count == 1\n    assert text._spans == [Span(0, 2, \"red\")]\n\n    text = Text(\"AB Ab aB ab\")\n    count = text.highlight_words(words, \"red\", case_sensitive=False)\n    assert count == 4\n\n\ndef test_set_length():\n    text = Text(\"Hello\")\n    text.set_length(5)\n    assert text == Text(\"Hello\")\n\n    text = Text(\"Hello\")\n    text.set_length(10)\n    assert text == Text(\"Hello     \")\n\n    text = Text(\"Hello World\")\n    text.stylize(\"bold\", 0, 5)\n    text.stylize(\"italic\", 7, 9)\n\n    text.set_length(3)\n    expected = Text()\n    expected.append(\"Hel\", \"bold\")\n    assert text == expected\n\n\ndef test_console_width():\n    console = Console()\n    text = Text(\"Hello World!\\nfoobarbaz\")\n    assert text.__rich_measure__(console, 80) == Measurement(9, 12)\n    assert Text(\" \" * 4).__rich_measure__(console, 80) == Measurement(4, 4)\n    assert Text(\" \\n  \\n   \").__rich_measure__(console, 80) == Measurement(3, 3)\n\n\ndef test_join():\n    text = Text(\"bar\").join([Text(\"foo\", \"red\"), Text(\"baz\", \"blue\")])\n    assert str(text) == \"foobarbaz\"\n    assert text._spans == [Span(0, 3, \"red\"), Span(6, 9, \"blue\")]\n\n\ndef test_trim_spans():\n    text = Text(\"Hello\")\n    text._spans[:] = [Span(0, 3, \"red\"), Span(3, 6, \"green\"), Span(6, 9, \"blue\")]\n    text._trim_spans()\n    assert text._spans == [Span(0, 3, \"red\"), Span(3, 5, \"green\")]\n\n\ndef test_pad_left():\n    text = Text(\"foo\")\n    text.pad_left(3, \"X\")\n    assert str(text) == \"XXXfoo\"\n\n\ndef test_pad_right():\n    text = Text(\"foo\")\n    text.pad_right(3, \"X\")\n    assert str(text) == \"fooXXX\"\n\n\ndef test_append():\n    text = Text(\"foo\")\n    text.append(\"bar\")\n    assert str(text) == \"foobar\"\n    text.append(Text(\"baz\", \"bold\"))\n    assert str(text) == \"foobarbaz\"\n    assert text._spans == [Span(6, 9, \"bold\")]\n\n    with pytest.raises(ValueError):\n        text.append(Text(\"foo\"), \"bar\")\n\n    with pytest.raises(TypeError):\n        text.append(1)\n\n\ndef test_append_text():\n    text = Text(\"foo\")\n    text.append_text(Text(\"bar\", style=\"bold\"))\n    assert str(text) == \"foobar\"\n    assert text._spans == [Span(3, 6, \"bold\")]\n\n\ndef test_end():\n    console = Console(width=20, file=StringIO())\n    text = Group(Text.from_markup(\"foo\", end=\" \"), Text.from_markup(\"bar\"))\n    console.print(text)\n    assert console.file.getvalue() == \"foo bar\\n\"\n\n\ndef test_split():\n    text = Text()\n    text.append(\"foo\", \"red\")\n    text.append(\"\\n\")\n    text.append(\"bar\", \"green\")\n    text.append(\"\\n\")\n\n    line1 = Text()\n    line1.append(\"foo\", \"red\")\n    line2 = Text()\n    line2.append(\"bar\", \"green\")\n    split = text.split(\"\\n\")\n    assert len(split) == 2\n    assert split[0] == line1\n    assert split[1] == line2\n\n    assert list(Text(\"foo\").split(\"\\n\")) == [Text(\"foo\")]\n\n\ndef test_split_spans():\n    text = Text.from_markup(\"[red]Hello\\n[b]World\")\n    lines = text.split(\"\\n\")\n    assert lines[0].plain == \"Hello\"\n    assert lines[1].plain == \"World\"\n    assert lines[0].spans == [Span(0, 5, \"red\")]\n    assert lines[1].spans == [Span(0, 5, \"red\"), Span(0, 5, \"bold\")]\n\n\ndef test_divide():\n    lines = Text(\"foo\").divide([])\n    assert len(lines) == 1\n    assert lines[0] == Text(\"foo\")\n\n    text = Text()\n    text.append(\"foo\", \"bold\")\n    lines = text.divide([1, 2])\n    assert len(lines) == 3\n    assert str(lines[0]) == \"f\"\n    assert str(lines[1]) == \"o\"\n    assert str(lines[2]) == \"o\"\n    assert lines[0]._spans == [Span(0, 1, \"bold\")]\n    assert lines[1]._spans == [Span(0, 1, \"bold\")]\n    assert lines[2]._spans == [Span(0, 1, \"bold\")]\n\n    text = Text()\n    text.append(\"foo\", \"red\")\n    text.append(\"bar\", \"green\")\n    text.append(\"baz\", \"blue\")\n    lines = text.divide([8])\n    assert len(lines) == 2\n    assert str(lines[0]) == \"foobarba\"\n    assert str(lines[1]) == \"z\"\n    assert lines[0]._spans == [\n        Span(0, 3, \"red\"),\n        Span(3, 6, \"green\"),\n        Span(6, 8, \"blue\"),\n    ]\n    assert lines[1]._spans == [Span(0, 1, \"blue\")]\n\n    lines = text.divide([1])\n    assert len(lines) == 2\n    assert str(lines[0]) == \"f\"\n    assert str(lines[1]) == \"oobarbaz\"\n    assert lines[0]._spans == [Span(0, 1, \"red\")]\n    assert lines[1]._spans == [\n        Span(0, 2, \"red\"),\n        Span(2, 5, \"green\"),\n        Span(5, 8, \"blue\"),\n    ]\n\n\ndef test_right_crop():\n    text = Text()\n    text.append(\"foobar\", \"red\")\n    text.right_crop(3)\n    assert str(text) == \"foo\"\n    assert text._spans == [Span(0, 3, \"red\")]\n\n\ndef test_wrap_3():\n    text = Text(\"foo bar baz\")\n    lines = text.wrap(Console(), 3)\n    print(repr(lines))\n    assert len(lines) == 3\n    assert lines[0] == Text(\"foo\")\n    assert lines[1] == Text(\"bar\")\n    assert lines[2] == Text(\"baz\")\n\n\ndef test_wrap_4():\n    text = Text(\"foo bar baz\", justify=\"left\")\n    lines = text.wrap(Console(), 4)\n    assert len(lines) == 3\n    assert lines[0] == Text(\"foo \")\n    assert lines[1] == Text(\"bar \")\n    assert lines[2] == Text(\"baz \")\n\n\ndef test_wrap_wrapped_word_length_greater_than_available_width():\n    text = Text(\"1234 12345678\")\n    lines = text.wrap(Console(), 7)\n    assert lines._lines == [\n        Text(\"1234 \"),\n        Text(\"1234567\"),\n        Text(\"8\"),\n    ]\n\n\ndef test_wrap_cjk():\n    text = Text(\"\u308f\u3055\u3073\")\n    lines = text.wrap(Console(), 4)\n    assert lines._lines == [\n        Text(\"\u308f\u3055\"),\n        Text(\"\u3073\"),\n    ]\n\n\ndef test_wrap_cjk_width_mid_character():\n    text = Text(\"\u308f\u3055\u3073\")\n    lines = text.wrap(Console(), 3)\n    assert lines._lines == [\n        Text(\"\u308f\"),\n        Text(\"\u3055\"),\n        Text(\"\u3073\"),\n    ]\n\n\ndef test_wrap_cjk_mixed():\n    \"\"\"Regression test covering https://github.com/Textualize/rich/issues/3176 and\n    https://github.com/Textualize/textual/issues/3567 - double width characters could\n    result in text going missing when wrapping.\"\"\"\n    text = Text(\"123\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\")\n    console = Console(width=20)  # let's ensure the width passed to wrap() wins.\n\n    wrapped_lines = text.wrap(console, width=8)\n    with console.capture() as capture:\n        console.print(wrapped_lines)\n\n    assert capture.get() == \"123\u3042\u308a\\n\u304c\u3068\u3046\u3054\\n\u3056\u3044\u307e\u3057\\n\u305f\\n\"\n\n\ndef test_wrap_long():\n    text = Text(\"abracadabra\", justify=\"left\")\n    lines = text.wrap(Console(), 4)\n    assert len(lines) == 3\n    assert lines[0] == Text(\"abra\")\n    assert lines[1] == Text(\"cada\")\n    assert lines[2] == Text(\"bra \")\n\n\ndef test_wrap_overflow():\n    text = Text(\"Some more words\")\n    lines = text.wrap(Console(), 4, overflow=\"ellipsis\")\n    assert (len(lines)) == 3\n    assert lines[0] == Text(\"Some\")\n    assert lines[1] == Text(\"more\")\n    assert lines[2] == Text(\"wor\u2026\")\n\n\ndef test_wrap_overflow_long():\n    text = Text(\"bigword\" * 10)\n    lines = text.wrap(Console(), 4, overflow=\"ellipsis\")\n    assert len(lines) == 1\n    assert lines[0] == Text(\"big\u2026\")\n\n\ndef test_wrap_long_words():\n    text = Text(\"XX 12345678912\")\n    lines = text.wrap(Console(), 4)\n\n    assert lines._lines == [\n        Text(\"XX \"),\n        Text(\"1234\"),\n        Text(\"5678\"),\n        Text(\"912\"),\n    ]\n\n\ndef test_wrap_long_words_2():\n    # https://github.com/Textualize/rich/issues/2273\n    text = Text(\"Hello, World...123\")\n    lines = text.wrap(Console(), 10)\n    assert lines._lines == [\n        Text(\"Hello, \"),\n        Text(\"World...12\"),\n        Text(\"3\"),\n    ]\n\n\ndef test_wrap_long_words_followed_by_other_words():\n    \"\"\"After folding a word across multiple lines, we should continue from\n    the next word immediately after the folded word (don't take a newline\n    following completion of the folded word).\"\"\"\n    text = Text(\"123 12345678 123 123\")\n    lines = text.wrap(Console(), 6)\n    assert lines._lines == [\n        Text(\"123 \"),\n        Text(\"123456\"),\n        Text(\"78 123\"),\n        Text(\"123\"),\n    ]\n\n\ndef test_wrap_long_word_preceeded_by_word_of_full_line_length():\n    \"\"\"The width of the first word is the same as the available width.\n    Ensures that folding works correctly when there's no space available\n    on the current line.\"\"\"\n    text = Text(\"123456 12345678 123 123\")\n    lines = text.wrap(Console(), 6)\n    assert lines._lines == [\n        Text(\"123456\"),\n        Text(\"123456\"),\n        Text(\"78 123\"),\n        Text(\"123\"),\n    ]\n\n\ndef test_wrap_multiple_consecutive_spaces():\n    \"\"\"Adding multiple consecutive spaces at the end of a line does not impact\n    the location at which a break will be added during the process of wrapping.\"\"\"\n    text = Text(\"123456    12345678 123 123\")\n    lines = text.wrap(Console(), 6)\n    assert lines._lines == [\n        Text(\"123456\"),\n        Text(\"123456\"),\n        Text(\"78 123\"),\n        Text(\"123\"),\n    ]\n\n\ndef test_wrap_long_words_justify_left():\n    text = Text(\"X 123456789\", justify=\"left\")\n    lines = text.wrap(Console(), 4)\n\n    assert len(lines) == 4\n    assert lines[0] == Text(\"X   \")\n    assert lines[1] == Text(\"1234\")\n    assert lines[2] == Text(\"5678\")\n    assert lines[3] == Text(\"9   \")\n\n\ndef test_wrap_leading_and_trailing_whitespace():\n    text = Text(\"   123  456 789   \")\n    lines = text.wrap(Console(), 4)\n    assert lines._lines == [\n        Text(\"   1\"),\n        Text(\"23  \"),\n        Text(\"456 \"),\n        Text(\"789 \"),\n    ]\n\n\ndef test_no_wrap_no_crop():\n    text = Text(\"Hello World!\" * 3)\n\n    console = Console(width=20, file=StringIO())\n    console.print(text, no_wrap=True)\n    console.print(text, no_wrap=True, crop=False, overflow=\"ignore\")\n\n    print(repr(console.file.getvalue()))\n    assert (\n        console.file.getvalue()\n        == \"Hello World!Hello Wo\\nHello World!Hello World!Hello World!\\n\"\n    )\n\n\ndef test_fit():\n    text = Text(\"Hello\\nWorld\")\n    lines = text.fit(3)\n    assert str(lines[0]) == \"Hel\"\n    assert str(lines[1]) == \"Wor\"\n\n\ndef test_wrap_tabs():\n    text = Text(\"foo\\tbar\", justify=\"left\")\n    lines = text.wrap(Console(), 4)\n    assert len(lines) == 2\n    assert str(lines[0]) == \"foo \"\n    assert str(lines[1]) == \"bar \"\n\n\ndef test_render():\n    console = Console(width=15, record=True)\n    text = Text.from_markup(\n        \"[u][b]Where[/b] there is a [i]Will[/i], there is a Way.[/u]\"\n    )\n    console.print(text)\n    output = console.export_text(styles=True)\n    expected = \"\\x1b[1;4mWhere\\x1b[0m\\x1b[4m there is \\x1b[0m\\n\\x1b[4ma \\x1b[0m\\x1b[3;4mWill\\x1b[0m\\x1b[4m, there \\x1b[0m\\n\\x1b[4mis a Way.\\x1b[0m\\n\"\n    assert output == expected\n\n\ndef test_render_simple():\n    console = Console(width=80)\n    console.begin_capture()\n    console.print(Text(\"foo\"))\n    result = console.end_capture()\n    assert result == \"foo\\n\"\n\n\n@pytest.mark.parametrize(\n    \"print_text,result\",\n    [\n        ((\".\"), \".\\n\"),\n        ((\".\", \".\"), \". .\\n\"),\n        ((\"Hello\", \"World\", \"!\"), \"Hello World !\\n\"),\n    ],\n)\ndef test_print(print_text, result):\n    console = Console(record=True)\n    console.print(*print_text)\n    assert console.export_text(styles=False) == result\n\n\n@pytest.mark.parametrize(\n    \"print_text,result\",\n    [\n        ((\".\"), \".X\"),\n        ((\".\", \".\"), \"..X\"),\n        ((\"Hello\", \"World\", \"!\"), \"HelloWorld!X\"),\n    ],\n)\ndef test_print_sep_end(print_text, result):\n    console = Console(record=True, file=StringIO())\n    console.print(*print_text, sep=\"\", end=\"X\")\n    assert console.file.getvalue() == result\n\n\ndef test_tabs_to_spaces():\n    text = Text(\"\\tHello\\tWorld\", tab_size=8)\n    text.expand_tabs()\n    assert text.plain == \"        Hello   World\"\n\n    text = Text(\"\\tHello\\tWorld\", tab_size=4)\n    text.expand_tabs()\n    assert text.plain == \"    Hello   World\"\n\n    text = Text(\".\\t..\\t...\\t....\\t\", tab_size=4)\n    text.expand_tabs()\n    assert text.plain == \".   ..  ... ....    \"\n\n    text = Text(\"No Tabs\")\n    text.expand_tabs()\n    assert text.plain == \"No Tabs\"\n\n    text = Text(\"No Tabs\", style=\"bold\")\n    text.expand_tabs()\n    assert text.plain == \"No Tabs\"\n    assert text.style == \"bold\"\n\n\n@pytest.mark.parametrize(\n    \"markup,tab_size,expected_text,expected_spans\",\n    [\n        (\"\", 4, \"\", []),\n        (\"\\t\", 4, \"    \", []),\n        (\"\\tbar\", 4, \"    bar\", []),\n        (\"foo\\tbar\", 4, \"foo bar\", []),\n        (\"foo\\nbar\\nbaz\", 4, \"foo\\nbar\\nbaz\", []),\n        (\n            \"[bold]foo\\tbar\",\n            4,\n            \"foo bar\",\n            [\n                Span(0, 4, \"bold\"),\n                Span(4, 7, \"bold\"),\n            ],\n        ),\n        (\n            \"[bold]\\tbar\",\n            4,\n            \"    bar\",\n            [\n                Span(0, 4, \"bold\"),\n                Span(4, 7, \"bold\"),\n            ],\n        ),\n        (\n            \"\\t[bold]bar\",\n            4,\n            \"    bar\",\n            [\n                Span(4, 7, \"bold\"),\n            ],\n        ),\n        (\n            \"[red]foo\\tbar\\n[green]egg\\tbaz\",\n            8,\n            \"foo     bar\\negg     baz\",\n            [\n                Span(0, 8, \"red\"),\n                Span(8, 12, \"red\"),\n                Span(12, 20, \"red\"),\n                Span(12, 20, \"green\"),\n                Span(20, 23, \"red\"),\n                Span(20, 23, \"green\"),\n            ],\n        ),\n        (\n            \"[bold]X\\tY\",\n            8,\n            \"X       Y\",\n            [\n                Span(0, 8, \"bold\"),\n                Span(8, 9, \"bold\"),\n            ],\n        ),\n        (\n            \"[bold]\ud83d\udca9\\t\ud83d\udca9\",\n            8,\n            \"\ud83d\udca9      \ud83d\udca9\",\n            [\n                Span(0, 7, \"bold\"),\n                Span(7, 8, \"bold\"),\n            ],\n        ),\n        (\n            \"[bold]\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\\t\ud83d\udca9\",\n            8,\n            \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9        \ud83d\udca9\",\n            [\n                Span(0, 12, \"bold\"),\n                Span(12, 13, \"bold\"),\n            ],\n        ),\n    ],\n)\ndef test_tabs_to_spaces_spans(\n    markup: str, tab_size: int, expected_text: str, expected_spans: List[Span]\n):\n    \"\"\"Test spans are correct after expand_tabs\"\"\"\n    text = Text.from_markup(markup)\n    text.expand_tabs(tab_size)\n    print(text._spans)\n    assert text.plain == expected_text\n    assert text._spans == expected_spans\n\n\ndef test_markup_switch():\n    \"\"\"Test markup can be disabled.\"\"\"\n    console = Console(file=StringIO(), markup=False)\n    console.print(\"[bold]foo[/bold]\")\n    assert console.file.getvalue() == \"[bold]foo[/bold]\\n\"\n\n\ndef test_emoji():\n    \"\"\"Test printing emoji codes.\"\"\"\n    console = Console(file=StringIO())\n    console.print(\":+1:\")\n    assert console.file.getvalue() == \"\ud83d\udc4d\\n\"\n\n\ndef test_emoji_switch():\n    \"\"\"Test emoji can be disabled.\"\"\"\n    console = Console(file=StringIO(), emoji=False)\n    console.print(\":+1:\")\n    assert console.file.getvalue() == \":+1:\\n\"\n\n\ndef test_assemble():\n    text = Text.assemble(\"foo\", (\"bar\", \"bold\"))\n    assert str(text) == \"foobar\"\n    assert text._spans == [Span(3, 6, \"bold\")]\n\n\ndef test_assemble_meta():\n    text = Text.assemble(\"foo\", (\"bar\", \"bold\"), meta={\"foo\": \"bar\"})\n    assert str(text) == \"foobar\"\n    assert text._spans == [Span(3, 6, \"bold\"), Span(0, 6, Style(meta={\"foo\": \"bar\"}))]\n    console = Console()\n    assert text.get_style_at_offset(console, 0).meta == {\"foo\": \"bar\"}\n\n\ndef test_styled():\n    text = Text.styled(\"foo\", \"bold red\")\n    assert text.style == \"\"\n    assert str(text) == \"foo\"\n    assert text._spans == [Span(0, 3, \"bold red\")]\n\n\ndef test_strip_control_codes():\n    text = Text(\"foo\\rbar\")\n    assert str(text) == \"foobar\"\n    text.append(\"\\x08\")\n    assert str(text) == \"foobar\"\n\n\ndef test_get_style_at_offset():\n    console = Console()\n    text = Text.from_markup(\"Hello [b]World[/b]\")\n    assert text.get_style_at_offset(console, 0) == Style()\n    assert text.get_style_at_offset(console, 6) == Style(bold=True)\n\n\n@pytest.mark.parametrize(\n    \"input, count, expected\",\n    [\n        (\"Hello\", 10, \"Hello\"),\n        (\"Hello\", 5, \"Hello\"),\n        (\"Hello\", 4, \"Hel\u2026\"),\n        (\"Hello\", 3, \"He\u2026\"),\n        (\"Hello\", 2, \"H\u2026\"),\n        (\"Hello\", 1, \"\u2026\"),\n    ],\n)\ndef test_truncate_ellipsis(input, count, expected):\n    text = Text(input)\n    text.truncate(count, overflow=\"ellipsis\")\n    assert text.plain == expected\n\n\n@pytest.mark.parametrize(\n    \"input, count, expected\",\n    [\n        (\"Hello\", 5, \"Hello\"),\n        (\"Hello\", 10, \"Hello     \"),\n        (\"Hello\", 3, \"He\u2026\"),\n    ],\n)\ndef test_truncate_ellipsis_pad(input, count, expected):\n    text = Text(input)\n    text.truncate(count, overflow=\"ellipsis\", pad=True)\n    assert text.plain == expected\n\n\ndef test_pad():\n    text = Text(\"foo\")\n    text.pad(2)\n    assert text.plain == \"  foo  \"\n\n\ndef test_align_left():\n    text = Text(\"foo\")\n    text.align(\"left\", 10)\n    assert text.plain == \"foo       \"\n\n\ndef test_align_right():\n    text = Text(\"foo\")\n    text.align(\"right\", 10)\n    assert text.plain == \"       foo\"\n\n\ndef test_align_center():\n    text = Text(\"foo\")\n    text.align(\"center\", 10)\n    assert text.plain == \"   foo    \"\n\n\ndef test_detect_indentation():\n    text = \"\"\"\\\nfoo\n    bar\n    \"\"\"\n    assert Text(text).detect_indentation() == 4\n    text = \"\"\"\\\nfoo\n    bar\n      baz\n    \"\"\"\n    assert Text(text).detect_indentation() == 2\n    assert Text(\"\").detect_indentation() == 1\n    assert Text(\" \").detect_indentation() == 1\n\n\ndef test_indentation_guides():\n    text = Text(\n        \"\"\"\\\nfor a in range(10):\n    print(a)\n\nfoo = [\n    1,\n    {\n        2\n    }\n]\n\n\"\"\"\n    )\n    result = text.with_indent_guides()\n    print(result.plain)\n    print(repr(result.plain))\n    expected = \"for a in range(10):\\n\u2502   print(a)\\n\\nfoo = [\\n\u2502   1,\\n\u2502   {\\n\u2502   \u2502   2\\n\u2502   }\\n]\\n\\n\"\n    assert result.plain == expected\n\n\ndef test_slice():\n    text = Text.from_markup(\"[red]foo [bold]bar[/red] baz[/bold]\")\n    assert text[0] == Text(\"f\", spans=[Span(0, 1, \"red\")])\n    assert text[4] == Text(\"b\", spans=[Span(0, 1, \"red\"), Span(0, 1, \"bold\")])\n\n    assert text[:3] == Text(\"foo\", spans=[Span(0, 3, \"red\")])\n    assert text[:4] == Text(\"foo \", spans=[Span(0, 4, \"red\")])\n    assert text[:5] == Text(\"foo b\", spans=[Span(0, 5, \"red\"), Span(4, 5, \"bold\")])\n    assert text[4:] == Text(\"bar baz\", spans=[Span(0, 3, \"red\"), Span(0, 7, \"bold\")])\n\n    with pytest.raises(TypeError):\n        text[::-1]\n\n\ndef test_wrap_invalid_style():\n    # https://github.com/textualize/rich/issues/987\n    console = Console(width=100, color_system=\"truecolor\")\n    a = \"[#######.................] xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [#######.................]\"\n    console.print(a, justify=\"full\")\n\n\ndef test_apply_meta():\n    text = Text(\"foobar\")\n    text.apply_meta({\"foo\": \"bar\"}, 1, 3)\n\n    console = Console()\n    assert text.get_style_at_offset(console, 0).meta == {}\n    assert text.get_style_at_offset(console, 1).meta == {\"foo\": \"bar\"}\n    assert text.get_style_at_offset(console, 2).meta == {\"foo\": \"bar\"}\n    assert text.get_style_at_offset(console, 3).meta == {}\n\n\ndef test_on():\n    console = Console()\n    text = Text(\"foo\")\n    text.on({\"foo\": \"bar\"}, click=\"CLICK\")\n    expected = {\"foo\": \"bar\", \"@click\": \"CLICK\"}\n    assert text.get_style_at_offset(console, 0).meta == expected\n    assert text.get_style_at_offset(console, 1).meta == expected\n    assert text.get_style_at_offset(console, 2).meta == expected\n\n\ndef test_markup_property():\n    assert Text(\"\").markup == \"\"\n    assert Text(\"foo\").markup == \"foo\"\n    assert Text(\"foo\", style=\"bold\").markup == \"[bold]foo[/bold]\"\n    assert Text.from_markup(\"foo [red]bar[/red]\").markup == \"foo [red]bar[/red]\"\n    assert (\n        Text.from_markup(\"foo [red]bar[/red]\", style=\"bold\").markup\n        == \"[bold]foo [red]bar[/red][/bold]\"\n    )\n    assert (\n        Text.from_markup(\"[bold]foo [italic]bar[/bold] baz[/italic]\").markup\n        == \"[bold]foo [italic]bar[/bold] baz[/italic]\"\n    )\n    assert Text(\"[bold]foo\").markup == \"\\\\[bold]foo\"\n\n\ndef test_extend_style():\n    text = Text.from_markup(\"[red]foo[/red] [bold]bar\")\n    text.extend_style(0)\n\n    assert text.plain == \"foo bar\"\n    assert text.spans == [Span(0, 3, \"red\"), Span(4, 7, \"bold\")]\n\n    text.extend_style(-1)\n    assert text.plain == \"foo bar\"\n    assert text.spans == [Span(0, 3, \"red\"), Span(4, 7, \"bold\")]\n\n    text.extend_style(2)\n    assert text.plain == \"foo bar  \"\n    assert text.spans == [Span(0, 3, \"red\"), Span(4, 9, \"bold\")]\n", "tests/test_style.py": "import pytest\n\nfrom rich import errors\nfrom rich.color import Color, ColorSystem, ColorType\nfrom rich.style import Style, StyleStack\n\n\ndef test_str():\n    assert str(Style(bold=False)) == \"not bold\"\n    assert str(Style(color=\"red\", bold=False)) == \"not bold red\"\n    assert str(Style(color=\"red\", bold=False, italic=True)) == \"not bold italic red\"\n    assert str(Style()) == \"none\"\n    assert str(Style(bold=True)) == \"bold\"\n    assert str(Style(color=\"red\", bold=True)) == \"bold red\"\n    assert str(Style(color=\"red\", bgcolor=\"black\", bold=True)) == \"bold red on black\"\n    all_styles = Style(\n        color=\"red\",\n        bgcolor=\"black\",\n        bold=True,\n        dim=True,\n        italic=True,\n        underline=True,\n        blink=True,\n        blink2=True,\n        reverse=True,\n        conceal=True,\n        strike=True,\n        underline2=True,\n        frame=True,\n        encircle=True,\n        overline=True,\n    )\n    expected = \"bold dim italic underline blink blink2 reverse conceal strike underline2 frame encircle overline red on black\"\n    assert str(all_styles) == expected\n    assert str(Style(link=\"foo\")) == \"link foo\"\n\n\ndef test_ansi_codes():\n    all_styles = Style(\n        color=\"red\",\n        bgcolor=\"black\",\n        bold=True,\n        dim=True,\n        italic=True,\n        underline=True,\n        blink=True,\n        blink2=True,\n        reverse=True,\n        conceal=True,\n        strike=True,\n        underline2=True,\n        frame=True,\n        encircle=True,\n        overline=True,\n    )\n    expected = \"1;2;3;4;5;6;7;8;9;21;51;52;53;31;40\"\n    assert all_styles._make_ansi_codes(ColorSystem.TRUECOLOR) == expected\n\n\ndef test_repr():\n    assert (\n        repr(Style(bold=True, color=\"red\"))\n        == \"Style(color=Color('red', ColorType.STANDARD, number=1), bold=True)\"\n    )\n\n\ndef test_eq():\n    assert Style(bold=True, color=\"red\") == Style(bold=True, color=\"red\")\n    assert Style(bold=True, color=\"red\") != Style(bold=True, color=\"green\")\n    assert Style().__eq__(\"foo\") == NotImplemented\n\n\ndef test_hash():\n    assert isinstance(hash(Style()), int)\n\n\ndef test_empty():\n    assert Style.null() == Style()\n\n\ndef test_bool():\n    assert bool(Style()) is False\n    assert bool(Style(bold=True)) is True\n    assert bool(Style(color=\"red\")) is True\n    assert bool(Style.parse(\"\")) is False\n\n\ndef test_color_property():\n    assert Style(color=\"red\").color == Color(\"red\", ColorType.STANDARD, 1, None)\n\n\ndef test_bgcolor_property():\n    assert Style(bgcolor=\"black\").bgcolor == Color(\"black\", ColorType.STANDARD, 0, None)\n\n\ndef test_parse():\n    assert Style.parse(\"\") == Style()\n    assert Style.parse(\"red\") == Style(color=\"red\")\n    assert Style.parse(\"not bold\") == Style(bold=False)\n    assert Style.parse(\"bold red on black\") == Style(\n        color=\"red\", bgcolor=\"black\", bold=True\n    )\n    assert Style.parse(\"bold link https://example.org\") == Style(\n        bold=True, link=\"https://example.org\"\n    )\n    with pytest.raises(errors.StyleSyntaxError):\n        Style.parse(\"on\")\n    with pytest.raises(errors.StyleSyntaxError):\n        Style.parse(\"on nothing\")\n    with pytest.raises(errors.StyleSyntaxError):\n        Style.parse(\"rgb(999,999,999)\")\n    with pytest.raises(errors.StyleSyntaxError):\n        Style.parse(\"not monkey\")\n    with pytest.raises(errors.StyleSyntaxError):\n        Style.parse(\"link\")\n\n\ndef test_link_id():\n    assert Style().link_id == \"\"\n    assert Style.parse(\"\").link_id == \"\"\n    assert Style.parse(\"red\").link_id == \"\"\n    style = Style.parse(\"red link https://example.org\")\n    assert isinstance(style.link_id, str)\n    assert len(style.link_id) > 1\n\n\ndef test_get_html_style():\n    expected = \"color: #7f7fbf; text-decoration-color: #7f7fbf; background-color: #800000; font-weight: bold; font-style: italic; text-decoration: underline; text-decoration: line-through; text-decoration: overline\"\n    html_style = Style(\n        reverse=True,\n        dim=True,\n        color=\"red\",\n        bgcolor=\"blue\",\n        bold=True,\n        italic=True,\n        underline=True,\n        strike=True,\n        overline=True,\n    ).get_html_style()\n    print(repr(html_style))\n    assert html_style == expected\n\n\ndef test_chain():\n    assert Style.chain(Style(color=\"red\"), Style(bold=True)) == Style(\n        color=\"red\", bold=True\n    )\n\n\ndef test_copy():\n    style = Style(color=\"red\", bgcolor=\"black\", italic=True)\n    assert style == style.copy()\n    assert style is not style.copy()\n\n\ndef test_render():\n    assert Style(color=\"red\").render(\"foo\", color_system=None) == \"foo\"\n    assert (\n        Style(color=\"red\", bgcolor=\"black\", bold=True).render(\"foo\")\n        == \"\\x1b[1;31;40mfoo\\x1b[0m\"\n    )\n    assert Style().render(\"foo\") == \"foo\"\n\n\ndef test_test():\n    Style(color=\"red\").test(\"hello\")\n\n\ndef test_add():\n    assert Style(color=\"red\") + None == Style(color=\"red\")\n\n\ndef test_iadd():\n    style = Style(color=\"red\")\n    style += Style(bold=True)\n    assert style == Style(color=\"red\", bold=True)\n    style += None\n    assert style == Style(color=\"red\", bold=True)\n\n\ndef test_style_stack():\n    stack = StyleStack(Style(color=\"red\"))\n    repr(stack)\n    assert stack.current == Style(color=\"red\")\n    stack.push(Style(bold=True))\n    assert stack.current == Style(color=\"red\", bold=True)\n    stack.pop()\n    assert stack.current == Style(color=\"red\")\n\n\ndef test_pick_first():\n    with pytest.raises(ValueError):\n        Style.pick_first()\n\n\ndef test_background_style():\n    assert Style(bold=True, color=\"yellow\", bgcolor=\"red\").background_style == Style(\n        bgcolor=\"red\"\n    )\n\n\ndef test_without_color():\n    style = Style(bold=True, color=\"red\", bgcolor=\"blue\")\n    colorless_style = style.without_color\n    assert colorless_style.color == None\n    assert colorless_style.bgcolor == None\n    assert colorless_style.bold == True\n    null_style = Style.null()\n    assert null_style.without_color == null_style\n\n\ndef test_meta():\n    style = Style(bold=True, meta={\"foo\": \"bar\"})\n    assert style.meta[\"foo\"] == \"bar\"\n\n    style += Style(meta={\"egg\": \"baz\"})\n\n    assert style.meta == {\"foo\": \"bar\", \"egg\": \"baz\"}\n\n    assert repr(style) == \"Style(bold=True, meta={'foo': 'bar', 'egg': 'baz'})\"\n\n\ndef test_from_meta():\n    style = Style.from_meta({\"foo\": \"bar\"})\n    assert style.color is None\n    assert style.bold is None\n\n\ndef test_on():\n    style = Style.on({\"foo\": \"bar\"}, click=\"CLICK\") + Style(color=\"red\")\n    assert style.meta == {\"foo\": \"bar\", \"@click\": \"CLICK\"}\n\n\ndef test_clear_meta_and_links():\n    style = Style.parse(\"bold red on black link https://example.org\") + Style.on(\n        click=\"CLICK\"\n    )\n\n    assert style.meta == {\"@click\": \"CLICK\"}\n    assert style.link == \"https://example.org\"\n    assert style.color == Color.parse(\"red\")\n    assert style.bgcolor == Color.parse(\"black\")\n    assert style.bold\n    assert not style.italic\n\n    clear_style = style.clear_meta_and_links()\n\n    assert clear_style.meta == {}\n    assert clear_style.link == None\n    assert clear_style.color == Color.parse(\"red\")\n    assert clear_style.bgcolor == Color.parse(\"black\")\n    assert clear_style.bold\n    assert not clear_style.italic\n", "tests/test_markdown.py": "# coding=utf-8\n\nMARKDOWN = \"\"\"Heading\n=======\n\nSub-heading\n-----------\n\n### Heading\n\n#### H4 Heading\n\n##### H5 Heading\n\n###### H6 Heading\n\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, \n**bold**, `monospace`.\n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. lather\n  2. rinse\n  3. repeat\n\nAn [example](http://example.com).\n\n> Markdown uses email-style > characters for blockquoting.\n>\n> Lorem ipsum\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\n\n```\na=1\n```\n\n```python\nimport this\n```\n\n```somelang\nfoobar\n```\n\n    import this\n\n\n1. List item\n\n       Code block\n\"\"\"\n\nimport io\nimport re\n\nfrom rich.console import Console, RenderableType\nfrom rich.markdown import Markdown\n\nre_link_ids = re.compile(r\"id=[\\d\\.\\-]*?;.*?\\x1b\")\n\n\ndef replace_link_ids(render: str) -> str:\n    \"\"\"Link IDs have a random ID and system path which is a problem for\n    reproducible tests.\n\n    \"\"\"\n    return re_link_ids.sub(\"id=0;foo\\x1b\", render)\n\n\ndef render(renderable: RenderableType) -> str:\n    console = Console(\n        width=100, file=io.StringIO(), color_system=\"truecolor\", legacy_windows=False\n    )\n    console.print(renderable)\n    output = replace_link_ids(console.file.getvalue())\n    print(repr(output))\n    return output\n\n\ndef test_markdown_render():\n    markdown = Markdown(MARKDOWN)\n    rendered_markdown = render(markdown)\n    expected = \"\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503                                             \\x1b[1mHeading\\x1b[0m                                              \u2503\\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\\n\\n\\n                                            \\x1b[1;4mSub-heading\\x1b[0m                                             \\n\\n                                              \\x1b[1mHeading\\x1b[0m                                               \\n\\n                                             \\x1b[1;2mH4 Heading\\x1b[0m                                             \\n\\n                                             \\x1b[4mH5 Heading\\x1b[0m                                             \\n\\n                                             \\x1b[3mH6 Heading\\x1b[0m                                             \\n\\nParagraphs are separated by a blank line.                                                           \\n\\nTwo spaces at the end of a line                                                                     \\nproduces a line break.                                                                              \\n\\nText attributes \\x1b[3mitalic\\x1b[0m, \\x1b[1mbold\\x1b[0m, \\x1b[1;36;40mmonospace\\x1b[0m.                                                            \\n\\nHorizontal rule:                                                                                    \\n\\n\\x1b[33m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\nBullet list:                                                                                        \\n\\n\\x1b[1;33m \u2022 \\x1b[0mapples                                                                                           \\n\\x1b[1;33m \u2022 \\x1b[0moranges                                                                                          \\n\\x1b[1;33m \u2022 \\x1b[0mpears                                                                                            \\n\\nNumbered list:                                                                                      \\n\\n\\x1b[1;33m 1 \\x1b[0mlather                                                                                           \\n\\x1b[1;33m 2 \\x1b[0mrinse                                                                                            \\n\\x1b[1;33m 3 \\x1b[0mrepeat                                                                                           \\n\\nAn \\x1b]8;id=0;foo\\x1b\\\\\\x1b[4;34mexample\\x1b[0m\\x1b]8;;\\x1b\\\\.                                                                                         \\n\\n\\x1b[35m\u258c \\x1b[0m\\x1b[35mMarkdown uses email-style > characters for blockquoting.\\x1b[0m\\x1b[35m                                        \\x1b[0m\\n\\x1b[35m\u258c \\x1b[0m\\x1b[35mLorem ipsum\\x1b[0m\\x1b[35m                                                                                     \\x1b[0m\\n\\n\ud83c\udf06 \\x1b]8;id=0;foo\\x1b\\\\progress\\x1b]8;;\\x1b\\\\                                                                                         \\n\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma=1\\x1b[0m\\x1b[48;2;39;40;34m                                                                                               \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34mimport\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mthis\\x1b[0m\\x1b[48;2;39;40;34m                                                                                       \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfoobar\\x1b[0m\\x1b[48;2;39;40;34m                                                                                            \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mimport this\\x1b[0m\\x1b[48;2;39;40;34m                                                                                       \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\n\\x1b[1;33m 1 \\x1b[0mList item                                                                                        \\n\\x1b[1;33m   \\x1b[0m\\x1b[48;2;39;40;34m                                                                                                 \\x1b[0m\\n\\x1b[1;33m   \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mCode block\\x1b[0m\\x1b[48;2;39;40;34m                                                                                     \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[1;33m   \\x1b[0m\\x1b[48;2;39;40;34m                                                                                                 \\x1b[0m\\n\"\n    assert rendered_markdown == expected\n\n\ndef test_inline_code():\n    markdown = Markdown(\n        \"inline `import this` code\",\n        inline_code_lexer=\"python\",\n        inline_code_theme=\"emacs\",\n    )\n    result = render(markdown)\n    expected = \"inline \\x1b[1;38;2;170;34;255;48;2;248;248;248mimport\\x1b[0m\\x1b[38;2;0;0;0;48;2;248;248;248m \\x1b[0m\\x1b[1;38;2;0;0;255;48;2;248;248;248mthis\\x1b[0m code                                                                             \\n\"\n    print(result)\n    print(repr(result))\n    assert result == expected\n\n\ndef test_markdown_table():\n    markdown = Markdown(\n        \"\"\"\\\n| Year |                      Title                       | Director          |  Box Office (USD) |\n|------|:------------------------------------------------:|:------------------|------------------:|\n| 1982 |            *E.T. the Extra-Terrestrial*          | Steven Spielberg  |    $792.9 million |\n| 1980 |  Star Wars: Episode V \u2013 The Empire Strikes Back  | Irvin Kershner    |    $538.4 million |\n| 1983 |    Star Wars: Episode VI \u2013 Return of the Jedi    | Richard Marquand  |    $475.1 million |\n| 1981 |             Raiders of the Lost Ark              | Steven Spielberg  |    $389.9 million |\n| 1984 |       Indiana Jones and the Temple of Doom       | Steven Spielberg  |    $333.1 million |\n\"\"\"\n    )\n    result = render(markdown)\n    expected = \"\\n                                                                                               \\n \\x1b[1m \\x1b[0m\\x1b[1mYear\\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1m                    Title                     \\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1mDirector        \\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1mBox Office (USD)\\x1b[0m\\x1b[1m \\x1b[0m \\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \\n  1982             \\x1b[3mE.T. the Extra-Terrestrial\\x1b[0m             Steven Spielberg     $792.9 million  \\n  1980   Star Wars: Episode V \u2013 The Empire Strikes Back   Irvin Kershner       $538.4 million  \\n  1983     Star Wars: Episode VI \u2013 Return of the Jedi     Richard Marquand     $475.1 million  \\n  1981              Raiders of the Lost Ark               Steven Spielberg     $389.9 million  \\n  1984        Indiana Jones and the Temple of Doom        Steven Spielberg     $333.1 million  \\n                                                                                               \\n\"\n    assert result == expected\n\n\ndef test_inline_styles_in_table():\n    \"\"\"Regression test for https://github.com/Textualize/rich/issues/3115\"\"\"\n    markdown = Markdown(\n        \"\"\"\\\n| Year | This **column** displays _the_ movie _title_ ~~description~~ | Director          |  Box Office (USD) |\n|------|:----------------------------------------------------------:|:------------------|------------------:|\n| 1982 | *E.T. the Extra-Terrestrial* ([Wikipedia article](https://en.wikipedia.org/wiki/E.T._the_Extra-Terrestrial)) | Steven Spielberg  |    $792.9 million |\n| 1980 |  Star Wars: Episode V \u2013 The *Empire* **Strikes** ~~Back~~  | Irvin Kershner    |    $538.4 million |\n\"\"\"\n    )\n    result = render(markdown)\n    expected = \"\\n                                                                                                 \\n \\x1b[1m \\x1b[0m\\x1b[1mYear\\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1mThis \\x1b[0m\\x1b[1mcolumn\\x1b[0m\\x1b[1m displays \\x1b[0m\\x1b[1;3mthe\\x1b[0m\\x1b[1m movie \\x1b[0m\\x1b[1;3mtitle\\x1b[0m\\x1b[1m \\x1b[0m\\x1b[1;9mdescription\\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1mDirector        \\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1mBox Office (USD)\\x1b[0m\\x1b[1m \\x1b[0m \\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \\n  1982    \\x1b[3mE.T. the Extra-Terrestrial\\x1b[0m (\\x1b]8;id=0;foo\\x1b\\\\\\x1b[4;34mWikipedia article\\x1b[0m\\x1b]8;;\\x1b\\\\)    Steven Spielberg     $792.9 million  \\n  1980    Star Wars: Episode V \u2013 The \\x1b[3mEmpire\\x1b[0m \\x1b[1mStrikes\\x1b[0m \\x1b[9mBack\\x1b[0m    Irvin Kershner       $538.4 million  \\n                                                                                                 \\n\"\n    assert result == expected\n\n\ndef test_inline_styles_with_justification():\n    \"\"\"Regression test for https://github.com/Textualize/rich/issues/3115\n\n    In particular, this tests the interaction between the change that was made to fix\n    #3115 and column text justification.\n    \"\"\"\n    markdown = Markdown(\n        \"\"\"\\\n| left | center | right |\n| :- | :-: | -: |\n| This is a long row | because it contains | a fairly long sentence. |\n| a*b* _c_ ~~d~~ e | a*b* _c_ ~~d~~ e | a*b* _c_ ~~d~~ e |\"\"\"\n    )\n    result = render(markdown)\n    expected = \"\\n                                                                      \\n \\x1b[1m \\x1b[0m\\x1b[1mleft              \\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1m      center       \\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1m                  right\\x1b[0m\\x1b[1m \\x1b[0m \\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \\n  This is a long row   because it contains   a fairly long sentence.  \\n  a\\x1b[3mb\\x1b[0m \\x1b[3mc\\x1b[0m \\x1b[9md\\x1b[0m e                  a\\x1b[3mb\\x1b[0m \\x1b[3mc\\x1b[0m \\x1b[9md\\x1b[0m e                        a\\x1b[3mb\\x1b[0m \\x1b[3mc\\x1b[0m \\x1b[9md\\x1b[0m e  \\n                                                                      \\n\"\n    assert result == expected\n\n\ndef test_partial_table():\n    markdown = Markdown(\"| Simple | Table |\\n| ------ | ----- \")\n    result = render(markdown)\n    print(repr(result))\n    expected = \"\\n                  \\n \\x1b[1m \\x1b[0m\\x1b[1mSimple\\x1b[0m\\x1b[1m \\x1b[0m \\x1b[1m \\x1b[0m\\x1b[1mTable\\x1b[0m\\x1b[1m \\x1b[0m \\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \\n                  \\n\"\n    assert result == expected\n\n\nif __name__ == \"__main__\":\n    markdown = Markdown(MARKDOWN)\n    rendered = render(markdown)\n    print(rendered)\n    print(repr(rendered))\n", "tests/test_measure.py": "from rich.text import Text\nimport pytest\n\nfrom rich.errors import NotRenderableError\nfrom rich.console import Console\nfrom rich.measure import Measurement, measure_renderables\n\n\ndef test_span():\n    measurement = Measurement(10, 100)\n    assert measurement.span == 90\n\n\ndef test_no_renderable():\n    console = Console()\n    text = Text()\n\n    with pytest.raises(NotRenderableError):\n        Measurement.get(console, console.options, None)\n\n\ndef test_measure_renderables():\n    console = Console()\n    assert measure_renderables(console, console.options, \"\") == Measurement(0, 0)\n    assert measure_renderables(\n        console, console.options.update_width(0), \"hello\"\n    ) == Measurement(0, 0)\n\n\ndef test_clamp():\n    measurement = Measurement(20, 100)\n    assert measurement.clamp(10, 50) == Measurement(20, 50)\n    assert measurement.clamp(30, 50) == Measurement(30, 50)\n    assert measurement.clamp(None, 50) == Measurement(20, 50)\n    assert measurement.clamp(30, None) == Measurement(30, 100)\n    assert measurement.clamp(None, None) == Measurement(20, 100)\n", "tests/test_spinner.py": "import pytest\n\nfrom rich.console import Console\nfrom rich.measure import Measurement\nfrom rich.rule import Rule\nfrom rich.spinner import Spinner\nfrom rich.text import Text\n\n\ndef test_spinner_create():\n    Spinner(\"dots\")\n    with pytest.raises(KeyError):\n        Spinner(\"foobar\")\n\n\ndef test_spinner_render():\n    time = 0.0\n\n    def get_time():\n        nonlocal time\n        return time\n\n    console = Console(\n        width=80, color_system=None, force_terminal=True, get_time=get_time\n    )\n    console.begin_capture()\n    spinner = Spinner(\"dots\", \"Foo\")\n    console.print(spinner)\n    time += 80 / 1000\n    console.print(spinner)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"\u280b Foo\\n\u2819 Foo\\n\"\n    assert result == expected\n\n\ndef test_spinner_update():\n    time = 0.0\n\n    def get_time():\n        nonlocal time\n        return time\n\n    console = Console(width=20, force_terminal=True, get_time=get_time, _environ={})\n    console.begin_capture()\n    spinner = Spinner(\"dots\")\n    console.print(spinner)\n\n    rule = Rule(\"Bar\")\n\n    spinner.update(text=rule)\n    time += 80 / 1000\n    console.print(spinner)\n\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"\u280b\\n\u2819 \\x1b[92m\u2500\\x1b[0m\\n\"\n    assert result == expected\n\n\ndef test_rich_measure():\n    console = Console(width=80, color_system=None, force_terminal=True)\n    spinner = Spinner(\"dots\", \"Foo\")\n    min_width, max_width = Measurement.get(console, console.options, spinner)\n    assert min_width == 3\n    assert max_width == 5\n\n\ndef test_spinner_markup():\n    spinner = Spinner(\"dots\", \"[bold]spinning[/bold]\")\n    assert isinstance(spinner.text, Text)\n    assert str(spinner.text) == \"spinning\"\n", "tests/test_stack.py": "from rich._stack import Stack\n\n\ndef test_stack():\n    stack = Stack()\n    stack.push(\"foo\")\n    stack.push(\"bar\")\n    assert stack.top == \"bar\"\n    assert stack.pop() == \"bar\"\n    assert stack.top == \"foo\"\n", "tests/test_protocol.py": "import io\n\nfrom rich.abc import RichRenderable\nfrom rich.console import Console\nfrom rich.panel import Panel\nfrom rich.text import Text\n\n\nclass Foo:\n    def __rich__(self) -> Text:\n        return Text(\"Foo\")\n\n\ndef test_rich_cast():\n    foo = Foo()\n    console = Console(file=io.StringIO())\n    console.print(foo)\n    assert console.file.getvalue() == \"Foo\\n\"\n\n\nclass Fake:\n    def __getattr__(self, name):\n        return 12\n\n    def __repr__(self) -> str:\n        return \"Fake()\"\n\n\ndef test_rich_cast_fake():\n    fake = Fake()\n    console = Console(file=io.StringIO())\n    console.print(fake)\n    assert console.file.getvalue() == \"Fake()\\n\"\n\n\ndef test_rich_cast_container():\n    foo = Foo()\n    console = Console(file=io.StringIO(), legacy_windows=False)\n    console.print(Panel.fit(foo, padding=0))\n    assert console.file.getvalue() == \"\u256d\u2500\u2500\u2500\u256e\\n\u2502Foo\u2502\\n\u2570\u2500\u2500\u2500\u256f\\n\"\n\n\ndef test_abc():\n    foo = Foo()\n    assert isinstance(foo, RichRenderable)\n    assert isinstance(Text(\"hello\"), RichRenderable)\n    assert isinstance(Panel(\"hello\"), RichRenderable)\n    assert not isinstance(foo, str)\n    assert not isinstance(\"foo\", RichRenderable)\n    assert not isinstance([], RichRenderable)\n\n\ndef test_cast_deep():\n    class B:\n        def __rich__(self) -> Foo:\n            return Foo()\n\n    class A:\n        def __rich__(self) -> B:\n            return B()\n\n    console = Console(file=io.StringIO())\n    console.print(A())\n    assert console.file.getvalue() == \"Foo\\n\"\n\n\ndef test_cast_recursive():\n    class B:\n        def __rich__(self) -> \"A\":\n            return A()\n\n        def __repr__(self) -> str:\n            return \"<B>\"\n\n    class A:\n        def __rich__(self) -> B:\n            return B()\n\n        def __repr__(self) -> str:\n            return \"<A>\"\n\n    console = Console(file=io.StringIO())\n    console.print(A())\n    assert console.file.getvalue() == \"<B>\\n\"\n", "tests/test_panel.py": "import io\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.panel import Panel\nfrom rich.segment import Segment\nfrom rich.style import Style\n\ntests = [\n    Panel(\"Hello, World\", padding=0),\n    Panel(\"Hello, World\", expand=False, padding=0),\n    Panel.fit(\"Hello, World\", padding=0),\n    Panel(\"Hello, World\", width=8, padding=0),\n    Panel(Panel(\"Hello, World\", padding=0), padding=0),\n    Panel(\"Hello, World\", title=\"FOO\", padding=0),\n    Panel(\"Hello, World\", subtitle=\"FOO\", padding=0),\n]\n\nexpected = [\n    \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502Hello, World                                    \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\",\n    \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502Hello, World\u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\",\n    \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502Hello, World\u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\",\n    \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502Hello,\u2502\\n\u2502World \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\",\n    \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u2502\\n\u2502\u2502Hello, World                                  \u2502\u2502\\n\u2502\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\",\n    \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 FOO \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502Hello, World                                    \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\",\n    \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502Hello, World                                    \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 FOO \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\",\n]\n\n\ndef render(panel, width=50) -> str:\n    console = Console(file=io.StringIO(), width=50, legacy_windows=False)\n    console.print(panel)\n    return console.file.getvalue()\n\n\n@pytest.mark.parametrize(\"panel,expected\", zip(tests, expected))\ndef test_render_panel(panel, expected):\n    assert render(panel) == expected\n\n\ndef test_console_width():\n    console = Console(file=io.StringIO(), width=50, legacy_windows=False)\n    panel = Panel(\"Hello, World\", expand=False)\n    min_width, max_width = panel.__rich_measure__(console, console.options)\n    assert min_width == 16\n    assert max_width == 16\n\n\ndef test_fixed_width():\n    console = Console(file=io.StringIO(), width=50, legacy_windows=False)\n    panel = Panel(\"Hello World\", width=20)\n    min_width, max_width = panel.__rich_measure__(console, console.options)\n    assert min_width == 20\n    assert max_width == 20\n\n\ndef test_render_size():\n    console = Console(width=63, height=46, legacy_windows=False)\n    options = console.options.update_dimensions(80, 4)\n    lines = console.render_lines(Panel(\"foo\", title=\"Hello\"), options=options)\n    print(repr(lines))\n    expected = [\n        [\n            Segment(\"\u256d\u2500\", Style()),\n            Segment(\n                \"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\"\n            ),\n            Segment(\"\u2500\u256e\", Style()),\n        ],\n        [\n            Segment(\"\u2502\", Style()),\n            Segment(\" \", Style()),\n            Segment(\"foo\"),\n            Segment(\n                \"                                                                         \",\n                Style(),\n            ),\n            Segment(\" \", Style()),\n            Segment(\"\u2502\", Style()),\n        ],\n        [\n            Segment(\"\u2502\", Style()),\n            Segment(\" \", Style()),\n            Segment(\n                \"                                                                            \",\n                Style(),\n            ),\n            Segment(\" \", Style()),\n            Segment(\"\u2502\", Style()),\n        ],\n        [\n            Segment(\n                \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\",\n                Style(),\n            )\n        ],\n    ]\n    assert lines == expected\n\n\nif __name__ == \"__main__\":\n    expected = []\n    for panel in tests:\n        result = render(panel)\n        print(result)\n        expected.append(result)\n    print(\"--\")\n    print()\n    print(f\"expected={repr(expected)}\")\n", "tests/test_prompt.py": "import io\n\nfrom rich.console import Console\nfrom rich.prompt import Prompt, IntPrompt, Confirm\n\n\ndef test_prompt_str():\n    INPUT = \"egg\\nfoo\"\n    console = Console(file=io.StringIO())\n    name = Prompt.ask(\n        \"what is your name\",\n        console=console,\n        choices=[\"foo\", \"bar\"],\n        default=\"baz\",\n        stream=io.StringIO(INPUT),\n    )\n    assert name == \"foo\"\n    expected = \"what is your name [foo/bar] (baz): Please select one of the available options\\nwhat is your name [foo/bar] (baz): \"\n    output = console.file.getvalue()\n    print(repr(output))\n    assert output == expected\n\n\ndef test_prompt_str_default():\n    INPUT = \"\"\n    console = Console(file=io.StringIO())\n    name = Prompt.ask(\n        \"what is your name\",\n        console=console,\n        default=\"Will\",\n        stream=io.StringIO(INPUT),\n    )\n    assert name == \"Will\"\n    expected = \"what is your name (Will): \"\n    output = console.file.getvalue()\n    print(repr(output))\n    assert output == expected\n\n\ndef test_prompt_int():\n    INPUT = \"foo\\n100\"\n    console = Console(file=io.StringIO())\n    number = IntPrompt.ask(\n        \"Enter a number\",\n        console=console,\n        stream=io.StringIO(INPUT),\n    )\n    assert number == 100\n    expected = \"Enter a number: Please enter a valid integer number\\nEnter a number: \"\n    output = console.file.getvalue()\n    print(repr(output))\n    assert output == expected\n\n\ndef test_prompt_confirm_no():\n    INPUT = \"foo\\nNO\\nn\"\n    console = Console(file=io.StringIO())\n    answer = Confirm.ask(\n        \"continue\",\n        console=console,\n        stream=io.StringIO(INPUT),\n    )\n    assert answer is False\n    expected = \"continue [y/n]: Please enter Y or N\\ncontinue [y/n]: Please enter Y or N\\ncontinue [y/n]: \"\n    output = console.file.getvalue()\n    print(repr(output))\n    assert output == expected\n\n\ndef test_prompt_confirm_yes():\n    INPUT = \"foo\\nNO\\ny\"\n    console = Console(file=io.StringIO())\n    answer = Confirm.ask(\n        \"continue\",\n        console=console,\n        stream=io.StringIO(INPUT),\n    )\n    assert answer is True\n    expected = \"continue [y/n]: Please enter Y or N\\ncontinue [y/n]: Please enter Y or N\\ncontinue [y/n]: \"\n    output = console.file.getvalue()\n    print(repr(output))\n    assert output == expected\n\n\ndef test_prompt_confirm_default():\n    INPUT = \"foo\\nNO\\ny\"\n    console = Console(file=io.StringIO())\n    answer = Confirm.ask(\n        \"continue\", console=console, stream=io.StringIO(INPUT), default=True\n    )\n    assert answer is True\n    expected = \"continue [y/n] (y): Please enter Y or N\\ncontinue [y/n] (y): Please enter Y or N\\ncontinue [y/n] (y): \"\n    output = console.file.getvalue()\n    print(repr(output))\n    assert output == expected\n", "tests/test_ansi.py": "import pytest\n\nfrom rich.ansi import AnsiDecoder\nfrom rich.console import Console\nfrom rich.style import Style\nfrom rich.text import Span, Text\n\n\ndef test_decode():\n    console = Console(\n        force_terminal=True, legacy_windows=False, color_system=\"truecolor\"\n    )\n    console.begin_capture()\n    console.print(\"Hello\")\n    console.print(\"[b]foo[/b]\")\n    console.print(\"[link http://example.org]bar\")\n    console.print(\"[#ff0000 on color(200)]red\")\n    console.print(\"[color(200) on #ff0000]red\")\n    terminal_codes = console.end_capture()\n\n    decoder = AnsiDecoder()\n    lines = list(decoder.decode(terminal_codes))\n\n    expected = [\n        Text(\"Hello\"),\n        Text(\"foo\", spans=[Span(0, 3, Style.parse(\"bold\"))]),\n        Text(\"bar\", spans=[Span(0, 3, Style.parse(\"link http://example.org\"))]),\n        Text(\"red\", spans=[Span(0, 3, Style.parse(\"#ff0000 on color(200)\"))]),\n        Text(\"red\", spans=[Span(0, 3, Style.parse(\"color(200) on #ff0000\"))]),\n    ]\n\n    assert lines == expected\n\n\ndef test_decode_example():\n    ansi_bytes = b\"\\x1b[01m\\x1b[KC:\\\\Users\\\\stefa\\\\AppData\\\\Local\\\\Temp\\\\tmp3ydingba:\\x1b[m\\x1b[K In function '\\x1b[01m\\x1b[Kmain\\x1b[m\\x1b[K':\\n\\x1b[01m\\x1b[KC:\\\\Users\\\\stefa\\\\AppData\\\\Local\\\\Temp\\\\tmp3ydingba:3:5:\\x1b[m\\x1b[K \\x1b[01;35m\\x1b[Kwarning: \\x1b[m\\x1b[Kunused variable '\\x1b[01m\\x1b[Ka\\x1b[m\\x1b[K' [\\x1b[01;35m\\x1b[K-Wunused-variable\\x1b[m\\x1b[K]\\n    3 | int \\x1b[01;35m\\x1b[Ka\\x1b[m\\x1b[K=1;\\n      |     \\x1b[01;35m\\x1b[K^\\x1b[m\\x1b[K\\n\"\n    ansi_text = ansi_bytes.decode(\"utf-8\")\n\n    text = Text.from_ansi(ansi_text)\n\n    console = Console(\n        force_terminal=True, legacy_windows=False, color_system=\"truecolor\"\n    )\n    with console.capture() as capture:\n        console.print(text)\n    result = capture.get()\n    print(repr(result))\n    expected = \"\\x1b[1mC:\\\\Users\\\\stefa\\\\AppData\\\\Local\\\\Temp\\\\tmp3ydingba:\\x1b[0m In function '\\x1b[1mmain\\x1b[0m':\\n\\x1b[1mC:\\\\Users\\\\stefa\\\\AppData\\\\Local\\\\Temp\\\\tmp3ydingba:3:5:\\x1b[0m \\x1b[1;35mwarning: \\x1b[0munused variable '\\x1b[1ma\\x1b[0m' \\n[\\x1b[1;35m-Wunused-variable\\x1b[0m]\\n    3 | int \\x1b[1;35ma\\x1b[0m=1;\\n      |     \\x1b[1;35m^\\x1b[0m\\n\"\n    assert result == expected\n\n\n@pytest.mark.parametrize(\n    \"ansi_bytes, expected_text\",\n    [\n        # https://github.com/Textualize/rich/issues/2688\n        (\n            b\"\\x1b[31mFound 4 errors in 2 files (checked 18 source files)\\x1b(B\\x1b[m\\n\",\n            \"Found 4 errors in 2 files (checked 18 source files)\",\n        ),\n        # https://mail.python.org/pipermail/python-list/2007-December/424756.html\n        (b\"Hallo\", \"Hallo\"),\n        (b\"\\x1b(BHallo\", \"Hallo\"),\n        (b\"\\x1b(JHallo\", \"Hallo\"),\n        (b\"\\x1b(BHal\\x1b(Jlo\", \"Hallo\"),\n    ],\n)\ndef test_decode_issue_2688(ansi_bytes, expected_text):\n    text = Text.from_ansi(ansi_bytes.decode())\n\n    assert str(text) == expected_text\n", "tests/test_highlighter.py": "\"\"\"Tests for the highlighter classes.\"\"\"\nimport json\nfrom typing import List\n\nimport pytest\n\nfrom rich.highlighter import (\n    ISO8601Highlighter,\n    JSONHighlighter,\n    NullHighlighter,\n    ReprHighlighter,\n)\nfrom rich.text import Span, Text\n\n\ndef test_wrong_type():\n    highlighter = NullHighlighter()\n    with pytest.raises(TypeError):\n        highlighter([])\n\n\nhighlight_tests = [\n    (\"\", []),\n    (\" \", []),\n    (\n        \"<foo>\",\n        [\n            Span(0, 1, \"repr.tag_start\"),\n            Span(1, 4, \"repr.tag_name\"),\n            Span(4, 5, \"repr.tag_end\"),\n        ],\n    ),\n    (\n        \"<foo: 23>\",\n        [\n            Span(0, 1, \"repr.tag_start\"),\n            Span(1, 5, \"repr.tag_name\"),\n            Span(5, 8, \"repr.tag_contents\"),\n            Span(8, 9, \"repr.tag_end\"),\n            Span(6, 8, \"repr.number\"),\n        ],\n    ),\n    (\n        \"<foo: <bar: 23>>\",\n        [\n            Span(0, 1, \"repr.tag_start\"),\n            Span(1, 5, \"repr.tag_name\"),\n            Span(5, 15, \"repr.tag_contents\"),\n            Span(15, 16, \"repr.tag_end\"),\n            Span(12, 14, \"repr.number\"),\n        ],\n    ),\n    (\n        \"False True None\",\n        [\n            Span(0, 5, \"repr.bool_false\"),\n            Span(6, 10, \"repr.bool_true\"),\n            Span(11, 15, \"repr.none\"),\n        ],\n    ),\n    (\"foo=bar\", [Span(0, 3, \"repr.attrib_name\"), Span(4, 7, \"repr.attrib_value\")]),\n    (\n        'foo=\"bar\"',\n        [\n            Span(0, 3, \"repr.attrib_name\"),\n            Span(4, 9, \"repr.attrib_value\"),\n            Span(4, 9, \"repr.str\"),\n        ],\n    ),\n    (\n        \"<Permission.WRITE|READ: 3>\",\n        [\n            Span(0, 1, \"repr.tag_start\"),\n            Span(1, 23, \"repr.tag_name\"),\n            Span(23, 25, \"repr.tag_contents\"),\n            Span(25, 26, \"repr.tag_end\"),\n            Span(24, 25, \"repr.number\"),\n        ],\n    ),\n    (\"( )\", [Span(0, 1, \"repr.brace\"), Span(2, 3, \"repr.brace\")]),\n    (\"[ ]\", [Span(0, 1, \"repr.brace\"), Span(2, 3, \"repr.brace\")]),\n    (\"{ }\", [Span(0, 1, \"repr.brace\"), Span(2, 3, \"repr.brace\")]),\n    (\" 1 \", [Span(1, 2, \"repr.number\")]),\n    (\" 1.2 \", [Span(1, 4, \"repr.number\")]),\n    (\" 0xff \", [Span(1, 5, \"repr.number\")]),\n    (\" 1e10 \", [Span(1, 5, \"repr.number\")]),\n    (\" 1j \", [Span(1, 3, \"repr.number_complex\")]),\n    (\" 3.14j \", [Span(1, 6, \"repr.number_complex\")]),\n    (\n        \" (3.14+2.06j) \",\n        [\n            Span(1, 2, \"repr.brace\"),\n            Span(12, 13, \"repr.brace\"),\n            Span(2, 12, \"repr.number_complex\"),\n        ],\n    ),\n    (\n        \" (3+2j) \",\n        [\n            Span(1, 2, \"repr.brace\"),\n            Span(6, 7, \"repr.brace\"),\n            Span(2, 6, \"repr.number_complex\"),\n        ],\n    ),\n    (\n        \" (123456.4321-1234.5678j) \",\n        [\n            Span(1, 2, \"repr.brace\"),\n            Span(24, 25, \"repr.brace\"),\n            Span(2, 24, \"repr.number_complex\"),\n        ],\n    ),\n    (\n        \" (-123123-2.1312342342423422e+25j) \",\n        [\n            Span(1, 2, \"repr.brace\"),\n            Span(33, 34, \"repr.brace\"),\n            Span(2, 33, \"repr.number_complex\"),\n        ],\n    ),\n    (\" /foo \", [Span(1, 2, \"repr.path\"), Span(2, 5, \"repr.filename\")]),\n    (\" /foo/bar.html \", [Span(1, 6, \"repr.path\"), Span(6, 14, \"repr.filename\")]),\n    (\"01-23-45-67-89-AB\", [Span(0, 17, \"repr.eui48\")]),  # 6x2 hyphen\n    (\"01-23-45-FF-FE-67-89-AB\", [Span(0, 23, \"repr.eui64\")]),  # 8x2 hyphen\n    (\"01:23:45:67:89:AB\", [Span(0, 17, \"repr.ipv6\")]),  # 6x2 colon\n    (\"01:23:45:FF:FE:67:89:AB\", [Span(0, 23, \"repr.ipv6\")]),  # 8x2 colon\n    (\"0123.4567.89AB\", [Span(0, 14, \"repr.eui48\")]),  # 3x4 dot\n    (\"0123.45FF.FE67.89AB\", [Span(0, 19, \"repr.eui64\")]),  # 4x4 dot\n    (\"ed-ed-ed-ed-ed-ed\", [Span(0, 17, \"repr.eui48\")]),  # lowercase\n    (\"ED-ED-ED-ED-ED-ED\", [Span(0, 17, \"repr.eui48\")]),  # uppercase\n    (\"Ed-Ed-Ed-Ed-Ed-Ed\", [Span(0, 17, \"repr.eui48\")]),  # mixed case\n    (\"0-00-1-01-2-02\", [Span(0, 14, \"repr.eui48\")]),  # dropped zero\n    (\" https://example.org \", [Span(1, 20, \"repr.url\")]),\n    (\" http://example.org \", [Span(1, 19, \"repr.url\")]),\n    (\" http://example.org/index.html \", [Span(1, 30, \"repr.url\")]),\n    (\" http://example.org/index.html#anchor \", [Span(1, 37, \"repr.url\")]),\n    (\n        \" http://example.org/index.html?param1=value1 \",\n        [\n            Span(31, 37, \"repr.attrib_name\"),\n            Span(38, 44, \"repr.attrib_value\"),\n            Span(1, 44, \"repr.url\"),\n        ],\n    ),\n    (\" http://example.org/~folder \", [Span(1, 27, \"repr.url\")]),\n    (\"No place like 127.0.0.1\", [Span(14, 23, \"repr.ipv4\")]),\n    (\"''\", [Span(0, 2, \"repr.str\")]),\n    (\"'hello'\", [Span(0, 7, \"repr.str\")]),\n    (\"'''hello'''\", [Span(0, 11, \"repr.str\")]),\n    ('\"\"', [Span(0, 2, \"repr.str\")]),\n    ('\"hello\"', [Span(0, 7, \"repr.str\")]),\n    ('\"\"\"hello\"\"\"', [Span(0, 11, \"repr.str\")]),\n    (\"\\\\'foo'\", []),\n    (\"it's no 'string'\", [Span(8, 16, \"repr.str\")]),\n    (\"78351748-9b32-4e08-ad3e-7e9ff124d541\", [Span(0, 36, \"repr.uuid\")]),\n]\n\n\n@pytest.mark.parametrize(\"test, spans\", highlight_tests)\ndef test_highlight_regex(test: str, spans: List[Span]):\n    \"\"\"Tests for the regular expressions used in ReprHighlighter.\"\"\"\n    text = Text(test)\n    highlighter = ReprHighlighter()\n    highlighter.highlight(text)\n    print(text.spans)\n    assert text.spans == spans\n\n\ndef test_highlight_json_with_indent():\n    json_string = json.dumps({\"name\": \"apple\", \"count\": 1}, indent=4)\n    text = Text(json_string)\n    highlighter = JSONHighlighter()\n    highlighter.highlight(text)\n    assert text.spans == [\n        Span(0, 1, \"json.brace\"),\n        Span(6, 12, \"json.str\"),\n        Span(14, 21, \"json.str\"),\n        Span(27, 34, \"json.str\"),\n        Span(36, 37, \"json.number\"),\n        Span(38, 39, \"json.brace\"),\n        Span(6, 12, \"json.key\"),\n        Span(27, 34, \"json.key\"),\n    ]\n\n\ndef test_highlight_json_string_only():\n    json_string = '\"abc\"'\n    text = Text(json_string)\n    highlighter = JSONHighlighter()\n    highlighter.highlight(text)\n    assert text.spans == [Span(0, 5, \"json.str\")]\n\n\ndef test_highlight_json_empty_string_only():\n    json_string = '\"\"'\n    text = Text(json_string)\n    highlighter = JSONHighlighter()\n    highlighter.highlight(text)\n    assert text.spans == [Span(0, 2, \"json.str\")]\n\n\ndef test_highlight_json_no_indent():\n    json_string = json.dumps({\"name\": \"apple\", \"count\": 1}, indent=None)\n    text = Text(json_string)\n    highlighter = JSONHighlighter()\n    highlighter.highlight(text)\n    assert text.spans == [\n        Span(0, 1, \"json.brace\"),\n        Span(1, 7, \"json.str\"),\n        Span(9, 16, \"json.str\"),\n        Span(18, 25, \"json.str\"),\n        Span(27, 28, \"json.number\"),\n        Span(28, 29, \"json.brace\"),\n        Span(1, 7, \"json.key\"),\n        Span(18, 25, \"json.key\"),\n    ]\n\n\niso8601_highlight_tests = [\n    (\"2008-08\", [Span(0, 4, \"iso8601.year\"), Span(5, 7, \"iso8601.month\")]),\n    (\n        \"2008-08-30\",\n        [\n            Span(0, 10, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 7, \"iso8601.month\"),\n            Span(8, 10, \"iso8601.day\"),\n        ],\n    ),\n    (\n        \"20080830\",\n        [\n            Span(0, 8, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(4, 6, \"iso8601.month\"),\n            Span(6, 8, \"iso8601.day\"),\n        ],\n    ),\n    (\n        \"2008-243\",\n        [\n            Span(0, 8, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 8, \"iso8601.day\"),\n        ],\n    ),\n    (\n        \"2008243\",\n        [\n            Span(0, 7, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(4, 7, \"iso8601.day\"),\n        ],\n    ),\n    (\n        \"2008-W35\",\n        [\n            Span(0, 8, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(6, 8, \"iso8601.week\"),\n        ],\n    ),\n    (\n        \"2008W35\",\n        [\n            Span(0, 7, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 7, \"iso8601.week\"),\n        ],\n    ),\n    (\n        \"2008-W35-6\",\n        [\n            Span(0, 10, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(6, 8, \"iso8601.week\"),\n            Span(9, 10, \"iso8601.day\"),\n        ],\n    ),\n    (\n        \"2008W356\",\n        [\n            Span(0, 8, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 7, \"iso8601.week\"),\n            Span(7, 8, \"iso8601.day\"),\n        ],\n    ),\n    (\n        \"17:21\",\n        [\n            Span(0, 5, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(3, 5, \"iso8601.minute\"),\n        ],\n    ),\n    (\n        \"1721\",\n        [\n            Span(0, 4, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(2, 4, \"iso8601.minute\"),\n        ],\n    ),\n    (\n        \"172159\",\n        [\n            Span(0, 6, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(2, 4, \"iso8601.minute\"),\n            Span(4, 6, \"iso8601.second\"),\n        ],\n    ),\n    (\"Z\", [Span(0, 1, \"iso8601.timezone\")]),\n    (\"+07\", [Span(0, 3, \"iso8601.timezone\")]),\n    (\"+07:00\", [Span(0, 6, \"iso8601.timezone\")]),\n    (\n        \"17:21:59+07:00\",\n        [\n            Span(0, 8, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(3, 5, \"iso8601.minute\"),\n            Span(6, 8, \"iso8601.second\"),\n            Span(8, 14, \"iso8601.timezone\"),\n        ],\n    ),\n    (\n        \"172159+0700\",\n        [\n            Span(0, 6, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(2, 4, \"iso8601.minute\"),\n            Span(4, 6, \"iso8601.second\"),\n            Span(6, 11, \"iso8601.timezone\"),\n        ],\n    ),\n    (\n        \"172159+07\",\n        [\n            Span(0, 6, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(2, 4, \"iso8601.minute\"),\n            Span(4, 6, \"iso8601.second\"),\n            Span(6, 9, \"iso8601.timezone\"),\n        ],\n    ),\n    (\n        \"2008-08-30 17:21:59\",\n        [\n            Span(0, 10, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(4, 5, \"iso8601.hyphen\"),\n            Span(5, 7, \"iso8601.month\"),\n            Span(8, 10, \"iso8601.day\"),\n            Span(11, 19, \"iso8601.time\"),\n            Span(11, 13, \"iso8601.hour\"),\n            Span(14, 16, \"iso8601.minute\"),\n            Span(17, 19, \"iso8601.second\"),\n        ],\n    ),\n    (\n        \"20080830 172159\",\n        [\n            Span(0, 8, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(4, 6, \"iso8601.month\"),\n            Span(6, 8, \"iso8601.day\"),\n            Span(9, 15, \"iso8601.time\"),\n            Span(9, 11, \"iso8601.hour\"),\n            Span(11, 13, \"iso8601.minute\"),\n            Span(13, 15, \"iso8601.second\"),\n        ],\n    ),\n    (\n        \"2008-08-30\",\n        [\n            Span(0, 10, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 7, \"iso8601.month\"),\n            Span(8, 10, \"iso8601.day\"),\n        ],\n    ),\n    (\n        \"2008-08-30+07:00\",\n        [\n            Span(0, 10, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 7, \"iso8601.month\"),\n            Span(8, 10, \"iso8601.day\"),\n            Span(10, 16, \"iso8601.timezone\"),\n        ],\n    ),\n    (\n        \"01:45:36\",\n        [\n            Span(0, 8, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(3, 5, \"iso8601.minute\"),\n            Span(6, 8, \"iso8601.second\"),\n        ],\n    ),\n    (\n        \"01:45:36.123+07:00\",\n        [\n            Span(0, 12, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(3, 5, \"iso8601.minute\"),\n            Span(6, 8, \"iso8601.second\"),\n            Span(8, 12, \"iso8601.frac\"),\n            Span(12, 18, \"iso8601.timezone\"),\n        ],\n    ),\n    (\n        \"01:45:36.123+07:00\",\n        [\n            Span(0, 12, \"iso8601.time\"),\n            Span(0, 2, \"iso8601.hour\"),\n            Span(3, 5, \"iso8601.minute\"),\n            Span(6, 8, \"iso8601.second\"),\n            Span(8, 12, \"iso8601.frac\"),\n            Span(12, 18, \"iso8601.timezone\"),\n        ],\n    ),\n    (\n        \"2008-08-30T01:45:36\",\n        [\n            Span(0, 10, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 7, \"iso8601.month\"),\n            Span(8, 10, \"iso8601.day\"),\n            Span(11, 19, \"iso8601.time\"),\n            Span(11, 13, \"iso8601.hour\"),\n            Span(14, 16, \"iso8601.minute\"),\n            Span(17, 19, \"iso8601.second\"),\n        ],\n    ),\n    (\n        \"2008-08-30T01:45:36.123Z\",\n        [\n            Span(0, 10, \"iso8601.date\"),\n            Span(0, 4, \"iso8601.year\"),\n            Span(5, 7, \"iso8601.month\"),\n            Span(8, 10, \"iso8601.day\"),\n            Span(11, 23, \"iso8601.time\"),\n            Span(11, 13, \"iso8601.hour\"),\n            Span(14, 16, \"iso8601.minute\"),\n            Span(17, 19, \"iso8601.second\"),\n            Span(19, 23, \"iso8601.ms\"),\n            Span(23, 24, \"iso8601.timezone\"),\n        ],\n    ),\n]\n\n\n@pytest.mark.parametrize(\"test, spans\", iso8601_highlight_tests)\ndef test_highlight_iso8601_regex(test: str, spans: List[Span]):\n    \"\"\"Tests for the regular expressions used in ISO8601Highlighter.\"\"\"\n    text = Text(test)\n    highlighter = ISO8601Highlighter()\n    highlighter.highlight(text)\n    print(text.spans)\n    assert text.spans == spans\n", "tests/test_align.py": "import io\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.align import Align, VerticalCenter\nfrom rich.measure import Measurement\n\n\ndef test_bad_align_legal():\n    # Legal\n    Align(\"foo\", \"left\")\n    Align(\"foo\", \"center\")\n    Align(\"foo\", \"right\")\n\n    # illegal\n    with pytest.raises(ValueError):\n        Align(\"foo\", None)\n    with pytest.raises(ValueError):\n        Align(\"foo\", \"middle\")\n    with pytest.raises(ValueError):\n        Align(\"foo\", \"\")\n    with pytest.raises(ValueError):\n        Align(\"foo\", \"LEFT\")\n    with pytest.raises(ValueError):\n        Align(\"foo\", vertical=\"somewhere\")\n\n\ndef test_repr():\n    repr(Align(\"foo\", \"left\"))\n    repr(Align(\"foo\", \"center\"))\n    repr(Align(\"foo\", \"right\"))\n\n\ndef test_align_left():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\", \"left\"))\n    assert console.file.getvalue() == \"foo       \\n\"\n\n\ndef test_align_center():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\", \"center\"))\n    assert console.file.getvalue() == \"   foo    \\n\"\n\n\ndef test_align_right():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\", \"right\"))\n    assert console.file.getvalue() == \"       foo\\n\"\n\n\ndef test_align_top():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\", vertical=\"top\"), height=5)\n    expected = \"foo       \\n          \\n          \\n          \\n          \\n\"\n    result = console.file.getvalue()\n    print(repr(result))\n    assert result == expected\n\n\ndef test_align_middle():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\", vertical=\"middle\"), height=5)\n    expected = \"          \\n          \\nfoo       \\n          \\n          \\n\"\n    result = console.file.getvalue()\n    print(repr(result))\n    assert result == expected\n\n\ndef test_align_bottom():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\", vertical=\"bottom\"), height=5)\n    expected = \"          \\n          \\n          \\n          \\nfoo       \\n\"\n    result = console.file.getvalue()\n    print(repr(result))\n    assert result == expected\n\n\ndef test_align_center_middle():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\\nbar\", \"center\", vertical=\"middle\"), height=5)\n    expected = \"          \\n   foo    \\n   bar    \\n          \\n          \\n\"\n    result = console.file.getvalue()\n    print(repr(result))\n    assert result == expected\n\n\ndef test_align_fit():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foobarbaze\", \"center\"))\n    assert console.file.getvalue() == \"foobarbaze\\n\"\n\n\ndef test_align_right_style():\n    console = Console(\n        file=io.StringIO(),\n        width=10,\n        color_system=\"truecolor\",\n        force_terminal=True,\n        _environ={},\n    )\n    console.print(Align(\"foo\", \"right\", style=\"on blue\"))\n    assert console.file.getvalue() == \"\\x1b[44m       \\x1b[0m\\x1b[44mfoo\\x1b[0m\\n\"\n\n\ndef test_measure():\n    console = Console(file=io.StringIO(), width=20)\n    _min, _max = Measurement.get(console, console.options, Align(\"foo bar\", \"left\"))\n    assert _min == 3\n    assert _max == 7\n\n\ndef test_align_no_pad():\n    console = Console(file=io.StringIO(), width=10)\n    console.print(Align(\"foo\", \"center\", pad=False))\n    console.print(Align(\"foo\", \"left\", pad=False))\n    assert console.file.getvalue() == \"   foo\\nfoo\\n\"\n\n\ndef test_align_width():\n    console = Console(file=io.StringIO(), width=40)\n    words = \"Deep in the human unconscious is a pervasive need for a logical universe that makes sense. But the real universe is always one step beyond logic\"\n    console.print(Align(words, \"center\", width=30))\n    result = console.file.getvalue()\n    expected = \"     Deep in the human unconscious      \\n     is a pervasive need for a          \\n     logical universe that makes        \\n     sense. But the real universe       \\n     is always one step beyond          \\n     logic                              \\n\"\n    assert result == expected\n\n\ndef test_shortcuts():\n    assert Align.left(\"foo\").align == \"left\"\n    assert Align.left(\"foo\").renderable == \"foo\"\n    assert Align.right(\"foo\").align == \"right\"\n    assert Align.right(\"foo\").renderable == \"foo\"\n    assert Align.center(\"foo\").align == \"center\"\n    assert Align.center(\"foo\").renderable == \"foo\"\n\n\ndef test_vertical_center():\n    console = Console(color_system=None, height=6)\n    console.begin_capture()\n    vertical_center = VerticalCenter(\"foo\")\n    repr(vertical_center)\n    console.print(vertical_center)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"   \\n   \\nfoo\\n   \\n   \\n   \\n\"\n    assert result == expected\n    assert Measurement.get(console, console.options, vertical_center) == Measurement(\n        3, 3\n    )\n", "tests/test_pretty.py": "import collections\nimport io\nimport sys\nfrom array import array\nfrom collections import UserDict, defaultdict\nfrom dataclasses import dataclass, field\nfrom typing import Any, List, NamedTuple\n\nimport attr\nimport pytest\n\nfrom rich.console import Console\nfrom rich.measure import Measurement\nfrom rich.pretty import Node, Pretty, _ipy_display_hook, install, pprint, pretty_repr\nfrom rich.text import Text\n\nskip_py37 = pytest.mark.skipif(\n    sys.version_info.minor == 7 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.7\",\n)\nskip_py38 = pytest.mark.skipif(\n    sys.version_info.minor == 8 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.8\",\n)\nskip_py39 = pytest.mark.skipif(\n    sys.version_info.minor == 9 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.9\",\n)\nskip_py310 = pytest.mark.skipif(\n    sys.version_info.minor == 10 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.10\",\n)\nskip_py311 = pytest.mark.skipif(\n    sys.version_info.minor == 11 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.11\",\n)\nskip_py312 = pytest.mark.skipif(\n    sys.version_info.minor == 12 and sys.version_info.major == 3,\n    reason=\"rendered differently on py3.12\",\n)\n\n\ndef test_install():\n    console = Console(file=io.StringIO())\n    dh = sys.displayhook\n    install(console)\n    sys.displayhook(\"foo\")\n    assert console.file.getvalue() == \"'foo'\\n\"\n    assert sys.displayhook is not dh\n\n\ndef test_install_max_depth():\n    console = Console(file=io.StringIO())\n    dh = sys.displayhook\n    install(console, max_depth=1)\n    sys.displayhook({\"foo\": {\"bar\": True}})\n    assert console.file.getvalue() == \"{'foo': {...}}\\n\"\n    assert sys.displayhook is not dh\n\n\ndef test_ipy_display_hook__repr_html():\n    console = Console(file=io.StringIO(), force_jupyter=True)\n\n    class Thing:\n        def _repr_html_(self):\n            return \"hello\"\n\n    console.begin_capture()\n    _ipy_display_hook(Thing(), console=console)\n\n    # Rendering delegated to notebook because _repr_html_ method exists\n    assert console.end_capture() == \"\"\n\n\ndef test_ipy_display_hook__multiple_special_reprs():\n    \"\"\"\n    The case where there are multiple IPython special _repr_*_\n    methods on the object, and one of them returns None but another\n    one does not.\n    \"\"\"\n    console = Console(file=io.StringIO(), force_jupyter=True)\n\n    class Thing:\n        def __repr__(self):\n            return \"A Thing\"\n\n        def _repr_latex_(self):\n            return None\n\n        def _repr_html_(self):\n            return \"hello\"\n\n    result = _ipy_display_hook(Thing(), console=console)\n    assert result == \"A Thing\"\n\n\ndef test_ipy_display_hook__no_special_repr_methods():\n    console = Console(file=io.StringIO(), force_jupyter=True)\n\n    class Thing:\n        def __repr__(self) -> str:\n            return \"hello\"\n\n    result = _ipy_display_hook(Thing(), console=console)\n    # should be repr as-is\n    assert result == \"hello\"\n\n\ndef test_ipy_display_hook__special_repr_raises_exception():\n    \"\"\"\n    When an IPython special repr method raises an exception,\n    we treat it as if it doesn't exist and look for the next.\n    \"\"\"\n    console = Console(file=io.StringIO(), force_jupyter=True)\n\n    class Thing:\n        def _repr_markdown_(self):\n            raise Exception()\n\n        def _repr_latex_(self):\n            return None\n\n        def _repr_html_(self):\n            return \"hello\"\n\n        def __repr__(self):\n            return \"therepr\"\n\n    result = _ipy_display_hook(Thing(), console=console)\n    assert result == \"therepr\"\n\n\ndef test_ipy_display_hook__console_renderables_on_newline():\n    console = Console(file=io.StringIO(), force_jupyter=True)\n    console.begin_capture()\n    result = _ipy_display_hook(Text(\"hello\"), console=console)\n    assert result == \"\\nhello\"\n\n\ndef test_pretty():\n    test = {\n        \"foo\": [1, 2, 3, (4, 5, {6}, 7, 8, {9}), {}],\n        \"bar\": {\"egg\": \"baz\", \"words\": [\"Hello World\"] * 10},\n        False: \"foo\",\n        True: \"\",\n        \"text\": (\"Hello World\", \"foo bar baz egg\"),\n    }\n\n    result = pretty_repr(test, max_width=80)\n    print(result)\n    expected = \"{\\n    'foo': [1, 2, 3, (4, 5, {6}, 7, 8, {9}), {}],\\n    'bar': {\\n        'egg': 'baz',\\n        'words': [\\n            'Hello World',\\n            'Hello World',\\n            'Hello World',\\n            'Hello World',\\n            'Hello World',\\n            'Hello World',\\n            'Hello World',\\n            'Hello World',\\n            'Hello World',\\n            'Hello World'\\n        ]\\n    },\\n    False: 'foo',\\n    True: '',\\n    'text': ('Hello World', 'foo bar baz egg')\\n}\"\n    print(expected)\n    assert result == expected\n\n\n@dataclass\nclass ExampleDataclass:\n    foo: int\n    bar: str\n    ignore: int = field(repr=False)\n    baz: List[str] = field(default_factory=list)\n    last: int = field(default=1, repr=False)\n\n\n@dataclass\nclass Empty:\n    pass\n\n\ndef test_pretty_dataclass():\n    dc = ExampleDataclass(1000, \"Hello, World\", 999, [\"foo\", \"bar\", \"baz\"])\n    result = pretty_repr(dc, max_width=80)\n    print(repr(result))\n    assert (\n        result\n        == \"ExampleDataclass(foo=1000, bar='Hello, World', baz=['foo', 'bar', 'baz'])\"\n    )\n    result = pretty_repr(dc, max_width=16)\n    print(repr(result))\n    assert (\n        result\n        == \"ExampleDataclass(\\n    foo=1000,\\n    bar='Hello, World',\\n    baz=[\\n        'foo',\\n        'bar',\\n        'baz'\\n    ]\\n)\"\n    )\n    dc.bar = dc\n    result = pretty_repr(dc, max_width=80)\n    print(repr(result))\n    assert result == \"ExampleDataclass(foo=1000, bar=..., baz=['foo', 'bar', 'baz'])\"\n\n\ndef test_empty_dataclass():\n    assert pretty_repr(Empty()) == \"Empty()\"\n    assert pretty_repr([Empty()]) == \"[Empty()]\"\n\n\nclass StockKeepingUnit(NamedTuple):\n    name: str\n    description: str\n    price: float\n    category: str\n    reviews: List[str]\n\n\ndef test_pretty_namedtuple():\n    console = Console(color_system=None)\n    console.begin_capture()\n\n    example_namedtuple = StockKeepingUnit(\n        \"Sparkling British Spring Water\",\n        \"Carbonated spring water\",\n        0.9,\n        \"water\",\n        [\"its amazing!\", \"its terrible!\"],\n    )\n\n    result = pretty_repr(example_namedtuple)\n\n    print(result)\n    assert (\n        result\n        == \"\"\"StockKeepingUnit(\n    name='Sparkling British Spring Water',\n    description='Carbonated spring water',\n    price=0.9,\n    category='water',\n    reviews=['its amazing!', 'its terrible!']\n)\"\"\"\n    )\n\n\ndef test_pretty_namedtuple_length_one_no_trailing_comma():\n    instance = collections.namedtuple(\"Thing\", [\"name\"])(name=\"Bob\")\n    assert pretty_repr(instance) == \"Thing(name='Bob')\"\n\n\ndef test_pretty_namedtuple_empty():\n    instance = collections.namedtuple(\"Thing\", [])()\n    assert pretty_repr(instance) == \"Thing()\"\n\n\ndef test_pretty_namedtuple_custom_repr():\n    class Thing(NamedTuple):\n        def __repr__(self):\n            return \"XX\"\n\n    assert pretty_repr(Thing()) == \"XX\"\n\n\ndef test_pretty_namedtuple_fields_invalid_type():\n    class LooksLikeANamedTupleButIsnt(tuple):\n        _fields = \"blah\"\n\n    instance = LooksLikeANamedTupleButIsnt()\n    result = pretty_repr(instance)\n    assert result == \"()\"  # Treated as tuple\n\n\ndef test_pretty_namedtuple_max_depth():\n    instance = {\"unit\": StockKeepingUnit(\"a\", \"b\", 1.0, \"c\", [\"d\", \"e\"])}\n    result = pretty_repr(instance, max_depth=1)\n    assert result == \"{'unit': StockKeepingUnit(...)}\"\n\n\ndef test_small_width():\n    test = [\"Hello world! 12345\"]\n    result = pretty_repr(test, max_width=10)\n    expected = \"[\\n    'Hello world! 12345'\\n]\"\n    assert result == expected\n\n\ndef test_ansi_in_pretty_repr():\n    class Hello:\n        def __repr__(self):\n            return \"Hello \\x1b[38;5;239mWorld!\"\n\n    pretty = Pretty(Hello())\n\n    console = Console(file=io.StringIO(), record=True)\n    console.print(pretty)\n    result = console.export_text()\n\n    assert result == \"Hello World!\\n\"\n\n\ndef test_broken_repr():\n    class BrokenRepr:\n        def __repr__(self):\n            1 / 0\n\n    test = [BrokenRepr()]\n    result = pretty_repr(test)\n    expected = \"[<repr-error 'division by zero'>]\"\n    assert result == expected\n\n\ndef test_broken_getattr():\n    class BrokenAttr:\n        def __getattr__(self, name):\n            1 / 0\n\n        def __repr__(self):\n            return \"BrokenAttr()\"\n\n    test = BrokenAttr()\n    result = pretty_repr(test)\n    assert result == \"BrokenAttr()\"\n\n\ndef test_reference_cycle_container():\n    test = []\n    test.append(test)\n    res = pretty_repr(test)\n    assert res == \"[...]\"\n\n    test = [1, []]\n    test[1].append(test)\n    res = pretty_repr(test)\n    assert res == \"[1, [...]]\"\n\n    # Not a cyclic reference, just a repeated reference\n    a = [2]\n    test = [1, [a, a]]\n    res = pretty_repr(test)\n    assert res == \"[1, [[2], [2]]]\"\n\n\ndef test_reference_cycle_namedtuple():\n    class Example(NamedTuple):\n        x: int\n        y: Any\n\n    test = Example(1, [Example(2, [])])\n    test.y[0].y.append(test)\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=[Example(x=2, y=[...])])\"\n\n    # Not a cyclic reference, just a repeated reference\n    a = Example(2, None)\n    test = Example(1, [a, a])\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=[Example(x=2, y=None), Example(x=2, y=None)])\"\n\n\ndef test_reference_cycle_dataclass():\n    @dataclass\n    class Example:\n        x: int\n        y: Any\n\n    test = Example(1, None)\n    test.y = test\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=...)\"\n\n    test = Example(1, Example(2, None))\n    test.y.y = test\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=Example(x=2, y=...))\"\n\n    # Not a cyclic reference, just a repeated reference\n    a = Example(2, None)\n    test = Example(1, [a, a])\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=[Example(x=2, y=None), Example(x=2, y=None)])\"\n\n\ndef test_reference_cycle_attrs():\n    @attr.define\n    class Example:\n        x: int\n        y: Any\n\n    test = Example(1, None)\n    test.y = test\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=...)\"\n\n    test = Example(1, Example(2, None))\n    test.y.y = test\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=Example(x=2, y=...))\"\n\n    # Not a cyclic reference, just a repeated reference\n    a = Example(2, None)\n    test = Example(1, [a, a])\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=[Example(x=2, y=None), Example(x=2, y=None)])\"\n\n\ndef test_reference_cycle_custom_repr():\n    class Example:\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n\n        def __rich_repr__(self):\n            yield (\"x\", self.x)\n            yield (\"y\", self.y)\n\n    test = Example(1, None)\n    test.y = test\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=...)\"\n\n    test = Example(1, Example(2, None))\n    test.y.y = test\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=Example(x=2, y=...))\"\n\n    # Not a cyclic reference, just a repeated reference\n    a = Example(2, None)\n    test = Example(1, [a, a])\n    res = pretty_repr(test)\n    assert res == \"Example(x=1, y=[Example(x=2, y=None), Example(x=2, y=None)])\"\n\n\ndef test_max_depth():\n    d = {}\n    d[\"foo\"] = {\"fob\": {\"a\": [1, 2, 3], \"b\": {\"z\": \"x\", \"y\": [\"a\", \"b\", \"c\"]}}}\n\n    assert pretty_repr(d, max_depth=0) == \"{...}\"\n    assert pretty_repr(d, max_depth=1) == \"{'foo': {...}}\"\n    assert pretty_repr(d, max_depth=2) == \"{'foo': {'fob': {...}}}\"\n    assert pretty_repr(d, max_depth=3) == \"{'foo': {'fob': {'a': [...], 'b': {...}}}}\"\n    assert (\n        pretty_repr(d, max_width=100, max_depth=4)\n        == \"{'foo': {'fob': {'a': [1, 2, 3], 'b': {'z': 'x', 'y': [...]}}}}\"\n    )\n    assert (\n        pretty_repr(d, max_width=100, max_depth=5)\n        == \"{'foo': {'fob': {'a': [1, 2, 3], 'b': {'z': 'x', 'y': ['a', 'b', 'c']}}}}\"\n    )\n    assert (\n        pretty_repr(d, max_width=100, max_depth=None)\n        == \"{'foo': {'fob': {'a': [1, 2, 3], 'b': {'z': 'x', 'y': ['a', 'b', 'c']}}}}\"\n    )\n\n\ndef test_max_depth_rich_repr():\n    class Foo:\n        def __init__(self, foo):\n            self.foo = foo\n\n        def __rich_repr__(self):\n            yield \"foo\", self.foo\n\n    class Bar:\n        def __init__(self, bar):\n            self.bar = bar\n\n        def __rich_repr__(self):\n            yield \"bar\", self.bar\n\n    assert (\n        pretty_repr(Foo(foo=Bar(bar=Foo(foo=[]))), max_depth=2)\n        == \"Foo(foo=Bar(bar=Foo(...)))\"\n    )\n\n\ndef test_max_depth_attrs():\n    @attr.define\n    class Foo:\n        foo = attr.field()\n\n    @attr.define\n    class Bar:\n        bar = attr.field()\n\n    assert (\n        pretty_repr(Foo(foo=Bar(bar=Foo(foo=[]))), max_depth=2)\n        == \"Foo(foo=Bar(bar=Foo(...)))\"\n    )\n\n\ndef test_max_depth_dataclass():\n    @dataclass\n    class Foo:\n        foo: object\n\n    @dataclass\n    class Bar:\n        bar: object\n\n    assert (\n        pretty_repr(Foo(foo=Bar(bar=Foo(foo=[]))), max_depth=2)\n        == \"Foo(foo=Bar(bar=Foo(...)))\"\n    )\n\n\ndef test_defaultdict():\n    test_dict = defaultdict(int, {\"foo\": 2})\n    result = pretty_repr(test_dict)\n    assert result == \"defaultdict(<class 'int'>, {'foo': 2})\"\n\n\ndef test_array():\n    test_array = array(\"I\", [1, 2, 3])\n    result = pretty_repr(test_array)\n    assert result == \"array('I', [1, 2, 3])\"\n\n\ndef test_tuple_of_one():\n    assert pretty_repr((1,)) == \"(1,)\"\n\n\ndef test_node():\n    node = Node(\"abc\")\n    assert pretty_repr(node) == \"abc: \"\n\n\ndef test_indent_lines():\n    console = Console(width=100, color_system=None)\n    console.begin_capture()\n    console.print(Pretty([100, 200], indent_guides=True), width=8)\n    expected = \"\"\"\\\n[\n\u2502   100,\n\u2502   200\n]\n\"\"\"\n    result = console.end_capture()\n    print(repr(result))\n    print(result)\n    assert result == expected\n\n\ndef test_pprint():\n    console = Console(color_system=None)\n    console.begin_capture()\n    pprint(1, console=console)\n    assert console.end_capture() == \"1\\n\"\n\n\ndef test_pprint_max_values():\n    console = Console(color_system=None)\n    console.begin_capture()\n    pprint([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], console=console, max_length=2)\n    assert console.end_capture() == \"[1, 2, ... +8]\\n\"\n\n\ndef test_pprint_max_items():\n    console = Console(color_system=None)\n    console.begin_capture()\n    pprint({\"foo\": 1, \"bar\": 2, \"egg\": 3}, console=console, max_length=2)\n    assert console.end_capture() == \"\"\"{'foo': 1, 'bar': 2, ... +1}\\n\"\"\"\n\n\ndef test_pprint_max_string():\n    console = Console(color_system=None)\n    console.begin_capture()\n    pprint([\"Hello\" * 20], console=console, max_string=8)\n    assert console.end_capture() == \"\"\"['HelloHel'+92]\\n\"\"\"\n\n\ndef test_tuples():\n    console = Console(color_system=None)\n    console.begin_capture()\n    pprint((1,), console=console)\n    pprint((1,), expand_all=True, console=console)\n    pprint(((1,),), expand_all=True, console=console)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"(1,)\\n(\\n\u2502   1,\\n)\\n(\\n\u2502   (\\n\u2502   \u2502   1,\\n\u2502   ),\\n)\\n\"\n    print(result)\n    print(\"--\")\n    print(expected)\n    assert result == expected\n\n\ndef test_newline():\n    console = Console(color_system=None)\n    console.begin_capture()\n    console.print(Pretty((1,), insert_line=True, expand_all=True))\n    result = console.end_capture()\n    expected = \"\\n(\\n    1,\\n)\\n\"\n    assert result == expected\n\n\ndef test_empty_repr():\n    class Foo:\n        def __repr__(self):\n            return \"\"\n\n    assert pretty_repr(Foo()) == \"\"\n\n\ndef test_attrs():\n    @attr.define\n    class Point:\n        x: int\n        y: int\n        foo: str = attr.field(repr=str.upper)\n        z: int = 0\n\n    result = pretty_repr(Point(1, 2, foo=\"bar\"))\n    print(repr(result))\n    expected = \"Point(x=1, y=2, foo=BAR, z=0)\"\n    assert result == expected\n\n\ndef test_attrs_empty():\n    @attr.define\n    class Nada:\n        pass\n\n    result = pretty_repr(Nada())\n    print(repr(result))\n    expected = \"Nada()\"\n    assert result == expected\n\n\n@skip_py310\n@skip_py311\n@skip_py312\ndef test_attrs_broken():\n    @attr.define\n    class Foo:\n        bar: int\n\n    foo = Foo(1)\n    del foo.bar\n    result = pretty_repr(foo)\n    print(repr(result))\n    expected = \"Foo(bar=AttributeError('bar'))\"\n    assert result == expected\n\n\n@skip_py37\n@skip_py38\n@skip_py39\ndef test_attrs_broken_310():\n    @attr.define\n    class Foo:\n        bar: int\n\n    foo = Foo(1)\n    del foo.bar\n    result = pretty_repr(foo)\n    print(repr(result))\n    expected = \"Foo(bar=AttributeError(\\\"'Foo' object has no attribute 'bar'\\\"))\"\n    assert result == expected\n\n\ndef test_user_dict():\n    class D1(UserDict):\n        pass\n\n    class D2(UserDict):\n        def __repr__(self):\n            return \"FOO\"\n\n    d1 = D1({\"foo\": \"bar\"})\n    d2 = D2({\"foo\": \"bar\"})\n    result = pretty_repr(d1, expand_all=True)\n    print(repr(result))\n    assert result == \"{\\n    'foo': 'bar'\\n}\"\n    result = pretty_repr(d2, expand_all=True)\n    print(repr(result))\n    assert result == \"FOO\"\n\n\ndef test_lying_attribute():\n    \"\"\"Test getattr doesn't break rich repr protocol\"\"\"\n\n    class Foo:\n        def __getattr__(self, attr):\n            return \"foo\"\n\n    foo = Foo()\n    result = pretty_repr(foo)\n    assert \"Foo\" in result\n\n\ndef test_measure_pretty():\n    \"\"\"Test measure respects expand_all\"\"\"\n    # https://github.com/Textualize/rich/issues/1998\n    console = Console()\n    pretty = Pretty([\"alpha\", \"beta\", \"delta\", \"gamma\"], expand_all=True)\n\n    measurement = console.measure(pretty)\n    assert measurement == Measurement(12, 12)\n\n\ndef test_tuple_rich_repr():\n    \"\"\"\n    Test that can use None as key to have tuple positional values.\n    \"\"\"\n\n    class Foo:\n        def __rich_repr__(self):\n            yield None, (1,)\n\n    assert pretty_repr(Foo()) == \"Foo((1,))\"\n\n\ndef test_tuple_rich_repr_default():\n    \"\"\"\n    Test that can use None as key to have tuple positional values and with a default.\n    \"\"\"\n\n    class Foo:\n        def __rich_repr__(self):\n            yield None, (1,), (1,)\n\n    assert pretty_repr(Foo()) == \"Foo()\"\n", "tests/test_cells.py": "from rich import cells\nfrom rich.cells import chop_cells\n\n\ndef test_cell_len_long_string():\n    # Long strings don't use cached cell length implementation\n    assert cells.cell_len(\"abc\" * 200) == 3 * 200\n    # Boundary case\n    assert cells.cell_len(\"a\" * 512) == 512\n\n\ndef test_cell_len_short_string():\n    # Short strings use cached cell length implementation\n    assert cells.cell_len(\"abc\" * 100) == 3 * 100\n    # Boundary case\n    assert cells.cell_len(\"a\" * 511) == 511\n\n\ndef test_set_cell_size():\n    assert cells.set_cell_size(\"foo\", 0) == \"\"\n    assert cells.set_cell_size(\"f\", 0) == \"\"\n    assert cells.set_cell_size(\"\", 0) == \"\"\n    assert cells.set_cell_size(\"\ud83d\ude3d\ud83d\ude3d\", 0) == \"\"\n    assert cells.set_cell_size(\"foo\", 2) == \"fo\"\n    assert cells.set_cell_size(\"foo\", 3) == \"foo\"\n    assert cells.set_cell_size(\"foo\", 4) == \"foo \"\n    assert cells.set_cell_size(\"\ud83d\ude3d\ud83d\ude3d\", 4) == \"\ud83d\ude3d\ud83d\ude3d\"\n    assert cells.set_cell_size(\"\ud83d\ude3d\ud83d\ude3d\", 3) == \"\ud83d\ude3d \"\n    assert cells.set_cell_size(\"\ud83d\ude3d\ud83d\ude3d\", 2) == \"\ud83d\ude3d\"\n    assert cells.set_cell_size(\"\ud83d\ude3d\ud83d\ude3d\", 1) == \" \"\n    assert cells.set_cell_size(\"\ud83d\ude3d\ud83d\ude3d\", 5) == \"\ud83d\ude3d\ud83d\ude3d \"\n\n\ndef test_set_cell_size_infinite():\n    for size in range(38):\n        assert (\n            cells.cell_len(\n                cells.set_cell_size(\n                    \"\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e01\u0e21\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e2d\u0e14\u0e17\u0e19\u0e21\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e15\u0e31\u0e49\u0e07\u0e40\u0e40\u0e15\u0e48\u0e40\u0e04\u0e22\u0e40\u0e25\u0e48\u0e19\u0e21\u0e32\", size\n                )\n            )\n            == size\n        )\n\n\ndef test_chop_cells():\n    \"\"\"Simple example of splitting cells into lines of width 3.\"\"\"\n    text = \"abcdefghijk\"\n    assert chop_cells(text, 3) == [\"abc\", \"def\", \"ghi\", \"jk\"]\n\n\ndef test_chop_cells_double_width_boundary():\n    \"\"\"The available width lies within a double-width character.\"\"\"\n    text = \"\u3042\u308a\u304c\u3068\u3046\"\n    assert chop_cells(text, 3) == [\"\u3042\", \"\u308a\", \"\u304c\", \"\u3068\", \"\u3046\"]\n\n\ndef test_chop_cells_mixed_width():\n    \"\"\"Mixed single and double-width characters.\"\"\"\n    text = \"\u30421\u308a234\u304c5\u30686\u304678\"\n    assert chop_cells(text, 3) == [\"\u30421\", \"\u308a2\", \"34\", \"\u304c5\", \"\u30686\", \"\u30467\", \"8\"]\n", "tests/test_constrain.py": "from rich.console import Console\nfrom rich.constrain import Constrain\nfrom rich.text import Text\n\n\ndef test_width_of_none():\n    console = Console()\n    constrain = Constrain(Text(\"foo\"), width=None)\n    min_width, max_width = constrain.__rich_measure__(\n        console, console.options.update_width(80)\n    )\n    assert min_width == 3\n    assert max_width == 3\n", "tests/test_windows_renderer.py": "import sys\nfrom unittest.mock import call, create_autospec\n\nimport pytest\n\ntry:\n    from rich._win32_console import LegacyWindowsTerm, WindowsCoordinates\n    from rich._windows_renderer import legacy_windows_render\nexcept:\n    # These modules can only be imported on Windows\n    pass\nfrom rich.segment import ControlType, Segment\nfrom rich.style import Style\n\npytestmark = pytest.mark.skipif(sys.platform != \"win32\", reason=\"windows only\")\n\n\n@pytest.fixture\ndef legacy_term_mock():\n    return create_autospec(LegacyWindowsTerm)\n\n\ndef test_text_only(legacy_term_mock):\n    text = \"Hello, world!\"\n    buffer = [Segment(text)]\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.write_text.assert_called_once_with(text)\n\n\ndef test_text_multiple_segments(legacy_term_mock):\n    buffer = [Segment(\"Hello, \"), Segment(\"world!\")]\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    assert legacy_term_mock.write_text.call_args_list == [\n        call(\"Hello, \"),\n        call(\"world!\"),\n    ]\n\n\ndef test_text_with_style(legacy_term_mock):\n    text = \"Hello, world!\"\n    style = Style.parse(\"black on red\")\n    buffer = [Segment(text, style)]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.write_styled.assert_called_once_with(text, style)\n\n\ndef test_control_cursor_move_to(legacy_term_mock):\n    buffer = [Segment(\"\", None, [(ControlType.CURSOR_MOVE_TO, 20, 30)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.move_cursor_to.assert_called_once_with(\n        WindowsCoordinates(row=29, col=19)\n    )\n\n\ndef test_control_carriage_return(legacy_term_mock):\n    buffer = [Segment(\"\", None, [(ControlType.CARRIAGE_RETURN,)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.write_text.assert_called_once_with(\"\\r\")\n\n\ndef test_control_home(legacy_term_mock):\n    buffer = [Segment(\"\", None, [(ControlType.HOME,)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.move_cursor_to.assert_called_once_with(WindowsCoordinates(0, 0))\n\n\n@pytest.mark.parametrize(\n    \"control_type, method_name\",\n    [\n        (ControlType.CURSOR_UP, \"move_cursor_up\"),\n        (ControlType.CURSOR_DOWN, \"move_cursor_down\"),\n        (ControlType.CURSOR_FORWARD, \"move_cursor_forward\"),\n        (ControlType.CURSOR_BACKWARD, \"move_cursor_backward\"),\n    ],\n)\ndef test_control_cursor_single_cell_movement(\n    legacy_term_mock, control_type, method_name\n):\n    buffer = [Segment(\"\", None, [(control_type,)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    getattr(legacy_term_mock, method_name).assert_called_once_with()\n\n\n@pytest.mark.parametrize(\n    \"erase_mode, method_name\",\n    [\n        (0, \"erase_end_of_line\"),\n        (1, \"erase_start_of_line\"),\n        (2, \"erase_line\"),\n    ],\n)\ndef test_control_erase_line(legacy_term_mock, erase_mode, method_name):\n    buffer = [Segment(\"\", None, [(ControlType.ERASE_IN_LINE, erase_mode)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    getattr(legacy_term_mock, method_name).assert_called_once_with()\n\n\ndef test_control_show_cursor(legacy_term_mock):\n    buffer = [Segment(\"\", None, [(ControlType.SHOW_CURSOR,)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.show_cursor.assert_called_once_with()\n\n\ndef test_control_hide_cursor(legacy_term_mock):\n    buffer = [Segment(\"\", None, [(ControlType.HIDE_CURSOR,)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.hide_cursor.assert_called_once_with()\n\n\ndef test_control_cursor_move_to_column(legacy_term_mock):\n    buffer = [Segment(\"\", None, [(ControlType.CURSOR_MOVE_TO_COLUMN, 3)])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.move_cursor_to_column.assert_called_once_with(2)\n\n\ndef test_control_set_terminal_window_title(legacy_term_mock):\n    buffer = [Segment(\"\", None, [(ControlType.SET_WINDOW_TITLE, \"Hello, world!\")])]\n\n    legacy_windows_render(buffer, legacy_term_mock)\n\n    legacy_term_mock.set_title.assert_called_once_with(\"Hello, world!\")\n", "tests/test_card.py": "import io\nimport re\n\nfrom rich.__main__ import make_test_card\nfrom rich.console import Console, RenderableType\n\nfrom ._card_render import expected\n\nre_link_ids = re.compile(r\"id=[\\d\\.\\-]*?;.*?\\x1b\")\n\n\ndef replace_link_ids(render: str) -> str:\n    \"\"\"Link IDs have a random ID and system path which is a problem for\n    reproducible tests.\n\n    \"\"\"\n    return re_link_ids.sub(\"id=0;foo\\x1b\", render)\n\n\ndef render(renderable: RenderableType) -> str:\n    console = Console(\n        width=100, file=io.StringIO(), color_system=\"truecolor\", legacy_windows=False\n    )\n    console.print(renderable)\n    output = replace_link_ids(console.file.getvalue())\n    return output\n\n\ndef test_card_render():\n    card = make_test_card()\n    result = render(card)\n    print(repr(result))\n    assert result == expected\n\n\nif __name__ == \"__main__\":\n    card = make_test_card()\n    with open(\"_card_render.py\", \"wt\") as fh:\n        card_render = render(card)\n        print(card_render)\n        fh.write(f\"expected={card_render!r}\")\n", "tests/test_markdown_no_hyperlinks.py": "# coding=utf-8\n\nMARKDOWN = \"\"\"Heading\n=======\n\nSub-heading\n-----------\n\n### Heading\n\n#### H4 Heading\n\n##### H5 Heading\n\n###### H6 Heading\n\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, \n**bold**, `monospace`.\n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. lather\n  2. rinse\n  3. repeat\n\nAn [example](http://example.com).\n\n> Markdown uses email-style > characters for blockquoting.\n>\n> Lorem ipsum\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\n\n```\na=1\n```\n\n```python\nimport this\n```\n\n```somelang\nfoobar\n```\n\n\"\"\"\n\nimport io\nimport re\n\nfrom rich.console import Console, RenderableType\nfrom rich.markdown import Markdown\n\nre_link_ids = re.compile(r\"id=[\\d\\.\\-]*?;.*?\\x1b\")\n\n\ndef replace_link_ids(render: str) -> str:\n    \"\"\"Link IDs have a random ID and system path which is a problem for\n    reproducible tests.\n\n    \"\"\"\n    return re_link_ids.sub(\"id=0;foo\\x1b\", render)\n\n\ndef render(renderable: RenderableType) -> str:\n    console = Console(\n        width=100, file=io.StringIO(), color_system=\"truecolor\", legacy_windows=False\n    )\n    console.print(renderable)\n    output = replace_link_ids(console.file.getvalue())\n    return output\n\n\ndef test_markdown_render():\n    markdown = Markdown(MARKDOWN, hyperlinks=False)\n    rendered_markdown = render(markdown)\n    print(repr(rendered_markdown))\n    expected = \"\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503                                             \\x1b[1mHeading\\x1b[0m                                              \u2503\\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\\n\\n\\n                                            \\x1b[1;4mSub-heading\\x1b[0m                                             \\n\\n                                              \\x1b[1mHeading\\x1b[0m                                               \\n\\n                                             \\x1b[1;2mH4 Heading\\x1b[0m                                             \\n\\n                                             \\x1b[4mH5 Heading\\x1b[0m                                             \\n\\n                                             \\x1b[3mH6 Heading\\x1b[0m                                             \\n\\nParagraphs are separated by a blank line.                                                           \\n\\nTwo spaces at the end of a line                                                                     \\nproduces a line break.                                                                              \\n\\nText attributes \\x1b[3mitalic\\x1b[0m, \\x1b[1mbold\\x1b[0m, \\x1b[1;36;40mmonospace\\x1b[0m.                                                            \\n\\nHorizontal rule:                                                                                    \\n\\n\\x1b[33m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\x1b[0m\\nBullet list:                                                                                        \\n\\n\\x1b[1;33m \u2022 \\x1b[0mapples                                                                                           \\n\\x1b[1;33m \u2022 \\x1b[0moranges                                                                                          \\n\\x1b[1;33m \u2022 \\x1b[0mpears                                                                                            \\n\\nNumbered list:                                                                                      \\n\\n\\x1b[1;33m 1 \\x1b[0mlather                                                                                           \\n\\x1b[1;33m 2 \\x1b[0mrinse                                                                                            \\n\\x1b[1;33m 3 \\x1b[0mrepeat                                                                                           \\n\\nAn \\x1b[94mexample\\x1b[0m (\\x1b[4;34mhttp://example.com\\x1b[0m).                                                                    \\n\\n\\x1b[35m\u258c \\x1b[0m\\x1b[35mMarkdown uses email-style > characters for blockquoting.\\x1b[0m\\x1b[35m                                        \\x1b[0m\\n\\x1b[35m\u258c \\x1b[0m\\x1b[35mLorem ipsum\\x1b[0m\\x1b[35m                                                                                     \\x1b[0m\\n\\n\ud83c\udf06 progress                                                                                         \\n\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34ma=1\\x1b[0m\\x1b[48;2;39;40;34m                                                                                               \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;255;70;137;48;2;39;40;34mimport\\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mthis\\x1b[0m\\x1b[48;2;39;40;34m                                                                                       \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\\x1b[48;2;39;40;34m \\x1b[0m\\x1b[38;2;248;248;242;48;2;39;40;34mfoobar\\x1b[0m\\x1b[48;2;39;40;34m                                                                                            \\x1b[0m\\x1b[48;2;39;40;34m \\x1b[0m\\n\\x1b[48;2;39;40;34m                                                                                                    \\x1b[0m\\n\"\n    assert rendered_markdown == expected\n\n\nif __name__ == \"__main__\":\n    markdown = Markdown(MARKDOWN, hyperlinks=False)\n    rendered = render(markdown)\n    print(rendered)\n    print(repr(rendered))\n", "tests/__init__.py": "", "tests/render.py": "import io\nimport re\n\nfrom rich.console import Console, RenderableType\n\n\nre_link_ids = re.compile(r\"id=[\\d.\\-]*?;.*?\\x1b\")\n\n\ndef replace_link_ids(render: str) -> str:\n    \"\"\"Link IDs have a random ID and system path which is a problem for\n    reproducible tests.\n\n    \"\"\"\n    return re_link_ids.sub(\"id=0;foo\\x1b\", render)\n\n\ndef render(renderable: RenderableType, no_wrap: bool = False) -> str:\n    console = Console(\n        width=100, file=io.StringIO(), color_system=\"truecolor\", legacy_windows=False\n    )\n    console.print(renderable, no_wrap=no_wrap)\n    output = replace_link_ids(console.file.getvalue())\n    return output\n", "tests/test_logging.py": "import io\nimport os\nimport logging\nfrom typing import Optional\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.logging import RichHandler\n\nhandler = RichHandler(\n    console=Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=80,\n        color_system=\"truecolor\",\n        _environ={},\n    ),\n    enable_link_path=False,\n)\n\nlogging.basicConfig(\n    level=\"NOTSET\", format=\"%(message)s\", datefmt=\"[DATE]\", handlers=[handler]\n)\nlog = logging.getLogger(\"rich\")\n\n\nskip_win = pytest.mark.skipif(\n    os.name == \"nt\",\n    reason=\"rendered differently on windows\",\n)\n\n\n@skip_win\ndef test_exception():\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=140,\n        color_system=None,\n        _environ={},\n    )\n    handler_with_tracebacks = RichHandler(\n        console=console, enable_link_path=False, rich_tracebacks=True\n    )\n    formatter = logging.Formatter(\"FORMATTER %(message)s %(asctime)s\")\n    handler_with_tracebacks.setFormatter(formatter)\n    log.addHandler(handler_with_tracebacks)\n    log.error(\"foo\")\n    try:\n        1 / 0\n    except ZeroDivisionError:\n        log.exception(\"message\")\n\n    render = handler_with_tracebacks.console.file.getvalue()\n    print(render)\n\n    assert \"FORMATTER foo\" in render\n    assert \"ZeroDivisionError\" in render\n    assert \"message\" in render\n    assert \"division by zero\" in render\n\n\ndef test_exception_with_extra_lines():\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=140,\n        color_system=None,\n        _environ={},\n    )\n    handler_extra_lines = RichHandler(\n        console=console,\n        enable_link_path=False,\n        markup=True,\n        rich_tracebacks=True,\n        tracebacks_extra_lines=5,\n    )\n    log.addHandler(handler_extra_lines)\n\n    try:\n        1 / 0\n    except ZeroDivisionError:\n        log.exception(\"message\")\n\n    render = handler_extra_lines.console.file.getvalue()\n    print(render)\n\n    assert \"ZeroDivisionError\" in render\n    assert \"message\" in render\n    assert \"division by zero\" in render\n\n\ndef test_stderr_and_stdout_are_none(monkeypatch):\n    # This test is specifically to handle cases when using pythonw on\n    # windows and stderr and stdout are set to None.\n    # See https://bugs.python.org/issue13807\n\n    monkeypatch.setattr(\"sys.stdout\", None)\n    monkeypatch.setattr(\"sys.stderr\", None)\n\n    console = Console(_environ={})\n    target_handler = RichHandler(console=console)\n    actual_record: Optional[logging.LogRecord] = None\n\n    def mock_handle_error(record):\n        nonlocal actual_record\n        actual_record = record\n\n    target_handler.handleError = mock_handle_error\n    log.addHandler(target_handler)\n\n    try:\n        1 / 0\n    except ZeroDivisionError:\n        log.exception(\"message\")\n\n    finally:\n        log.removeHandler(target_handler)\n\n    assert actual_record is not None\n    assert \"message\" in actual_record.msg\n\n\ndef test_markup_and_highlight():\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n        width=140,\n        color_system=\"truecolor\",\n        _environ={},\n    )\n    handler = RichHandler(console=console)\n\n    # Check defaults are as expected\n    assert handler.highlighter\n    assert not handler.markup\n\n    formatter = logging.Formatter(\"FORMATTER %(message)s %(asctime)s\")\n    handler.setFormatter(formatter)\n    log.addHandler(handler)\n\n    log_message = \"foo 3.141 127.0.0.1 [red]alert[/red]\"\n\n    log.error(log_message)\n    render_fancy = handler.console.file.getvalue()\n    assert \"FORMATTER\" in render_fancy\n    assert log_message not in render_fancy\n    assert \"red\" in render_fancy\n\n    handler.console.file = io.StringIO()\n    log.error(log_message, extra={\"markup\": True})\n    render_markup = handler.console.file.getvalue()\n    assert \"FORMATTER\" in render_markup\n    assert log_message not in render_markup\n    assert \"red\" not in render_markup\n\n    handler.console.file = io.StringIO()\n    log.error(log_message, extra={\"highlighter\": None})\n    render_plain = handler.console.file.getvalue()\n    assert \"FORMATTER\" in render_plain\n    assert log_message in render_plain\n\n\nif __name__ == \"__main__\":\n    render = make_log()\n    print(render)\n    print(repr(render))\n", "tests/test_ratio.py": "import pytest\nfrom typing import NamedTuple, Optional\n\nfrom rich._ratio import ratio_reduce, ratio_resolve\n\n\nclass Edge(NamedTuple):\n    size: Optional[int] = None\n    ratio: int = 1\n    minimum_size: int = 1\n\n\n@pytest.mark.parametrize(\n    \"total,ratios,maximums,values,result\",\n    [\n        (20, [2, 4], [20, 20], [5, 5], [-2, -8]),\n        (20, [2, 4], [1, 1], [5, 5], [4, 4]),\n        (20, [2, 4], [1, 1], [2, 2], [1, 1]),\n        (3, [2, 4], [3, 3], [2, 2], [1, 0]),\n        (3, [2, 4], [3, 3], [0, 0], [-1, -2]),\n        (3, [0, 0], [3, 3], [4, 4], [4, 4]),\n    ],\n)\ndef test_ratio_reduce(total, ratios, maximums, values, result):\n    assert ratio_reduce(total, ratios, maximums, values) == result\n\n\ndef test_ratio_resolve():\n    assert ratio_resolve(100, []) == []\n    assert ratio_resolve(100, [Edge(size=100), Edge(ratio=1)]) == [100, 1]\n    assert ratio_resolve(100, [Edge(ratio=1)]) == [100]\n    assert ratio_resolve(100, [Edge(ratio=1), Edge(ratio=1)]) == [50, 50]\n    assert ratio_resolve(100, [Edge(size=20), Edge(ratio=1), Edge(ratio=1)]) == [\n        20,\n        40,\n        40,\n    ]\n    assert ratio_resolve(100, [Edge(size=40), Edge(ratio=2), Edge(ratio=1)]) == [\n        40,\n        40,\n        20,\n    ]\n    assert ratio_resolve(\n        100, [Edge(size=40), Edge(ratio=2), Edge(ratio=1, minimum_size=25)]\n    ) == [40, 35, 25]\n    assert ratio_resolve(100, [Edge(ratio=1), Edge(ratio=1), Edge(ratio=1)]) == [\n        33,\n        33,\n        34,\n    ]\n    assert ratio_resolve(\n        50, [Edge(size=30), Edge(ratio=1, minimum_size=10), Edge(size=30)]\n    ) == [30, 10, 30]\n    assert ratio_resolve(110, [Edge(ratio=1), Edge(ratio=1), Edge(ratio=1)]) == [\n        36,\n        37,\n        37,\n    ]\n", "tests/test_traceback.py": "import io\nimport re\nimport sys\nfrom typing import List\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.theme import Theme\nfrom rich.traceback import Traceback, install\n\n# from .render import render\n\ntry:\n    from ._exception_render import expected\nexcept ImportError:\n    expected = None\n\n\nCAPTURED_EXCEPTION = 'Traceback (most recent call last):\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 File \"/Users/textualize/projects/rich/tests/test_traceback.py\", line 26, in test_handler        \u2502\\n\u2502    23     try:                                                                                   \u2502\\n\u2502    24         old_handler = install(console=console, line_numbers=False)                         \u2502\\n\u2502    25         try:                                                                               \u2502\\n\u2502  \u2771 26             1 / 0                                                                          \u2502\\n\u2502    27         except Exception:                                                                  \u2502\\n\u2502    28             exc_type, exc_value, traceback = sys.exc_info()                                \u2502\\n\u2502    29             sys.excepthook(exc_type, exc_value, traceback)                                 \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\nZeroDivisionError: division by zero\\n'\n\n\ndef test_handler():\n    console = Console(file=io.StringIO(), width=100, color_system=None)\n    expected_old_handler = sys.excepthook\n\n    def level1():\n        level2()\n\n    def level2():\n        return 1 / 0\n\n    try:\n        old_handler = install(console=console)\n        try:\n            level1()\n        except Exception:\n            exc_type, exc_value, traceback = sys.exc_info()\n            sys.excepthook(exc_type, exc_value, traceback)\n            rendered_exception = console.file.getvalue()\n            print(repr(rendered_exception))\n            assert \"Traceback\" in rendered_exception\n            assert \"ZeroDivisionError\" in rendered_exception\n\n            frame_blank_line_possible_preambles = (\n                # Start of the stack rendering:\n                \"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\",\n                # Each subsequent frame (starting with the file name) should then be preceded with a blank line:\n                \"\u2502\" + (\" \" * 98) + \"\u2502\",\n            )\n            for frame_start in re.finditer(\n                \"^\u2502 .+rich/tests/test_traceback.py:\",\n                rendered_exception,\n                flags=re.MULTILINE,\n            ):\n                frame_start_index = frame_start.start()\n                for preamble in frame_blank_line_possible_preambles:\n                    preamble_start, preamble_end = (\n                        frame_start_index - len(preamble) - 1,\n                        frame_start_index - 1,\n                    )\n                    if rendered_exception[preamble_start:preamble_end] == preamble:\n                        break\n                else:\n                    pytest.fail(\n                        f\"Frame {frame_start[0]} doesn't have the expected preamble\"\n                    )\n    finally:\n        sys.excepthook = old_handler\n        assert old_handler == expected_old_handler\n\n\ndef text_exception_render():\n    exc_render = render(get_exception())\n    assert exc_render == expected\n\n\ndef test_capture():\n    try:\n        1 / 0\n    except Exception:\n        tb = Traceback()\n        assert tb.trace.stacks[0].exc_type == \"ZeroDivisionError\"\n\n\ndef test_no_exception():\n    with pytest.raises(ValueError):\n        tb = Traceback()\n\n\ndef get_exception() -> Traceback:\n    def bar(a):\n        print(1 / a)\n\n    def foo(a):\n        bar(a)\n\n    try:\n        try:\n            foo(0)\n        except:\n            foobarbaz\n    except:\n        tb = Traceback()\n        return tb\n\n\ndef test_print_exception():\n    console = Console(width=100, file=io.StringIO())\n    try:\n        1 / 0\n    except Exception:\n        console.print_exception()\n    exception_text = console.file.getvalue()\n    assert \"ZeroDivisionError\" in exception_text\n\n\ndef test_print_exception_no_msg():\n    console = Console(width=100, file=io.StringIO())\n    try:\n        raise RuntimeError\n    except Exception:\n        console.print_exception()\n    exception_text = console.file.getvalue()\n    assert \"RuntimeError\" in exception_text\n    assert \"RuntimeError:\" not in exception_text\n\n\ndef test_print_exception_locals():\n    console = Console(width=100, file=io.StringIO())\n    try:\n        1 / 0\n    except Exception:\n        console.print_exception(show_locals=True)\n    exception_text = console.file.getvalue()\n    print(exception_text)\n    assert \"ZeroDivisionError\" in exception_text\n    assert \"locals\" in exception_text\n    assert \"console = <console width=100 None>\" in exception_text\n\n\ndef test_syntax_error():\n    console = Console(width=100, file=io.StringIO())\n    try:\n        # raises SyntaxError: unexpected EOF while parsing\n        eval(\"(2+2\")\n    except SyntaxError:\n        console.print_exception()\n    exception_text = console.file.getvalue()\n    assert \"SyntaxError\" in exception_text\n\n\ndef test_nested_exception():\n    console = Console(width=100, file=io.StringIO())\n    value_error_message = \"ValueError because of ZeroDivisionError\"\n\n    try:\n        try:\n            1 / 0\n        except ZeroDivisionError:\n            raise ValueError(value_error_message)\n    except Exception:\n        console.print_exception()\n    exception_text = console.file.getvalue()\n\n    text_should_contain = [\n        value_error_message,\n        \"ZeroDivisionError\",\n        \"ValueError\",\n        \"During handling of the above exception\",\n    ]\n\n    for msg in text_should_contain:\n        assert msg in exception_text\n\n    # ZeroDivisionError should come before ValueError\n    assert exception_text.find(\"ZeroDivisionError\") < exception_text.find(\"ValueError\")\n\n\ndef test_caused_exception():\n    console = Console(width=100, file=io.StringIO())\n    value_error_message = \"ValueError caused by ZeroDivisionError\"\n\n    try:\n        try:\n            1 / 0\n        except ZeroDivisionError as e:\n            raise ValueError(value_error_message) from e\n    except Exception:\n        console.print_exception()\n    exception_text = console.file.getvalue()\n\n    text_should_contain = [\n        value_error_message,\n        \"ZeroDivisionError\",\n        \"ValueError\",\n        \"The above exception was the direct cause\",\n    ]\n\n    for msg in text_should_contain:\n        assert msg in exception_text\n\n    # ZeroDivisionError should come before ValueError\n    assert exception_text.find(\"ZeroDivisionError\") < exception_text.find(\"ValueError\")\n\n\ndef test_filename_with_bracket():\n    console = Console(width=100, file=io.StringIO())\n    try:\n        exec(compile(\"1/0\", filename=\"<string>\", mode=\"exec\"))\n    except Exception:\n        console.print_exception()\n    exception_text = console.file.getvalue()\n    assert \"<string>\" in exception_text\n\n\ndef test_filename_not_a_file():\n    console = Console(width=100, file=io.StringIO())\n    try:\n        exec(compile(\"1/0\", filename=\"string\", mode=\"exec\"))\n    except Exception:\n        console.print_exception()\n    exception_text = console.file.getvalue()\n    assert \"string\" in exception_text\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"renders different on windows\")\ndef test_traceback_console_theme_applies():\n    \"\"\"\n    Ensure that themes supplied via Console init work on Tracebacks.\n    Regression test for https://github.com/Textualize/rich/issues/1786\n    \"\"\"\n    r, g, b = 123, 234, 123\n    console = Console(\n        force_terminal=True,\n        _environ={\"COLORTERM\": \"truecolor\"},\n        theme=Theme({\"traceback.title\": f\"rgb({r},{g},{b})\"}),\n    )\n\n    console.begin_capture()\n    try:\n        1 / 0\n    except Exception:\n        console.print_exception()\n\n    result = console.end_capture()\n\n    assert f\"\\\\x1b[38;2;{r};{g};{b}mTraceback \\\\x1b[0m\" in repr(result)\n\n\ndef test_broken_str():\n    class BrokenStr(Exception):\n        def __str__(self):\n            1 / 0\n\n    console = Console(width=100, file=io.StringIO())\n    try:\n        raise BrokenStr()\n    except Exception:\n        console.print_exception()\n    result = console.file.getvalue()\n    print(result)\n    assert \"<exception str() failed>\" in result\n\n\ndef test_guess_lexer():\n    assert Traceback._guess_lexer(\"foo.py\", \"code\") == \"python\"\n    code_python = \"#! usr/bin/env python\\nimport this\"\n    assert Traceback._guess_lexer(\"foo\", code_python) == \"python\"\n    assert Traceback._guess_lexer(\"foo\", \"foo\\nbnar\") == \"text\"\n\n\ndef test_guess_lexer_yaml_j2():\n    # https://github.com/Textualize/rich/issues/2018\n    code = \"\"\"\\\nfoobar:\n    something: {{ raiser() }}\n    else: {{ 5 + 5 }}\n    \"\"\"\n    assert Traceback._guess_lexer(\"test.yaml.j2\", code) in (\"text\", \"YAML+Jinja\")\n\n\ndef test_recursive():\n    def foo(n):\n        return bar(n)\n\n    def bar(n):\n        return foo(n)\n\n    console = Console(width=100, file=io.StringIO())\n    try:\n        foo(1)\n    except Exception:\n        console.print_exception(max_frames=6)\n    result = console.file.getvalue()\n    print(result)\n    assert \"frames hidden\" in result\n    assert result.count(\"in foo\") < 4\n\n\ndef test_suppress():\n    try:\n        1 / 0\n    except Exception:\n        traceback = Traceback(suppress=[pytest, \"foo\"])\n        assert len(traceback.suppress) == 2\n        assert \"pytest\" in traceback.suppress[0]\n        assert \"foo\" in traceback.suppress[1]\n\n\n@pytest.mark.parametrize(\n    \"rich_traceback_omit_for_level2,expected_frames_length,expected_frame_names\",\n    (\n        # fmt: off\n        [True, 3, [\"test_rich_traceback_omit_optional_local_flag\", \"level1\", \"level3\"]],\n        [False, 4, [\"test_rich_traceback_omit_optional_local_flag\", \"level1\", \"level2\", \"level3\"]],\n        # fmt: on\n    ),\n)\ndef test_rich_traceback_omit_optional_local_flag(\n    rich_traceback_omit_for_level2: bool,\n    expected_frames_length: int,\n    expected_frame_names: List[str],\n):\n    def level1():\n        return level2()\n\n    def level2():\n        # true-ish values are enough to trigger the opt-out:\n        _rich_traceback_omit = 1 if rich_traceback_omit_for_level2 else 0\n        return level3()\n\n    def level3():\n        return 1 / 0\n\n    try:\n        level1()\n    except Exception:\n        exc_type, exc_value, traceback = sys.exc_info()\n        trace = Traceback.from_exception(exc_type, exc_value, traceback).trace\n        frames = trace.stacks[0].frames\n        assert len(frames) == expected_frames_length\n        frame_names = [f.name for f in frames]\n        assert frame_names == expected_frame_names\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    expected = render(get_exception())\n\n    with open(\"_exception_render.py\", \"wt\") as fh:\n        exc_render = render(get_exception())\n        print(exc_render)\n        fh.write(f\"expected={exc_render!r}\")\n", "tests/test_tree.py": "import sys\n\nimport pytest\n\nfrom rich.console import Console\nfrom rich.measure import Measurement\nfrom rich.tree import Tree\n\n\ndef test_render_single_node():\n    tree = Tree(\"foo\")\n    console = Console(color_system=None, width=20)\n    console.begin_capture()\n    console.print(tree)\n    assert console.end_capture() == \"foo\\n\"\n\n\ndef test_render_single_branch():\n    tree = Tree(\"foo\")\n    tree.add(\"bar\")\n    console = Console(color_system=None, width=20)\n    console.begin_capture()\n    console.print(tree)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"foo\\n\u2514\u2500\u2500 bar\\n\"\n    assert result == expected\n\n\ndef test_render_double_branch():\n    tree = Tree(\"foo\")\n    tree.add(\"bar\")\n    tree.add(\"baz\")\n    console = Console(color_system=None, width=20)\n    console.begin_capture()\n    console.print(tree)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"foo\\n\u251c\u2500\u2500 bar\\n\u2514\u2500\u2500 baz\\n\"\n    assert result == expected\n\n\ndef test_render_ascii():\n    tree = Tree(\"foo\")\n    tree.add(\"bar\")\n    tree.add(\"baz\")\n\n    class AsciiConsole(Console):\n        @property\n        def encoding(self):\n            return \"ascii\"\n\n    console = AsciiConsole(color_system=None, width=20)\n    console.begin_capture()\n    console.print(tree)\n    result = console.end_capture()\n    expected = \"foo\\n+-- bar\\n`-- baz\\n\"\n    assert result == expected\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"different on Windows\")\ndef test_render_tree_non_win32():\n    tree = Tree(\"foo\")\n    tree.add(\"bar\", style=\"italic\")\n    baz_tree = tree.add(\"baz\", guide_style=\"bold red\", style=\"on blue\")\n    baz_tree.add(\"1\")\n    baz_tree.add(\"2\")\n    tree.add(\"egg\")\n\n    console = Console(\n        width=20, force_terminal=True, color_system=\"standard\", _environ={}\n    )\n    console.begin_capture()\n    console.print(tree)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"foo\\n\u251c\u2500\u2500 \\x1b[3mbar\\x1b[0m\\n\\x1b[44m\u251c\u2500\u2500 \\x1b[0m\\x1b[44mbaz\\x1b[0m\\n\\x1b[44m\u2502   \\x1b[0m\\x1b[31;44m\u2523\u2501\u2501 \\x1b[0m\\x1b[44m1\\x1b[0m\\n\\x1b[44m\u2502   \\x1b[0m\\x1b[31;44m\u2517\u2501\u2501 \\x1b[0m\\x1b[44m2\\x1b[0m\\n\u2514\u2500\u2500 egg\\n\"\n    assert result == expected\n\n\n@pytest.mark.skipif(sys.platform != \"win32\", reason=\"Windows specific\")\ndef test_render_tree_win32():\n    tree = Tree(\"foo\")\n    tree.add(\"bar\", style=\"italic\")\n    baz_tree = tree.add(\"baz\", guide_style=\"bold red\", style=\"on blue\")\n    baz_tree.add(\"1\")\n    baz_tree.add(\"2\")\n    tree.add(\"egg\")\n\n    console = Console(\n        width=20, force_terminal=True, color_system=\"standard\", legacy_windows=True\n    )\n    console.begin_capture()\n    console.print(tree)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"foo\\n\u251c\u2500\u2500 \\x1b[3mbar\\x1b[0m\\n\\x1b[44m\u251c\u2500\u2500 \\x1b[0m\\x1b[44mbaz\\x1b[0m\\n\\x1b[44m\u2502   \\x1b[0m\\x1b[31;44m\u251c\u2500\u2500 \\x1b[0m\\x1b[44m1\\x1b[0m\\n\\x1b[44m\u2502   \\x1b[0m\\x1b[31;44m\u2514\u2500\u2500 \\x1b[0m\\x1b[44m2\\x1b[0m\\n\u2514\u2500\u2500 egg\\n\"\n    assert result == expected\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"different on Windows\")\ndef test_render_tree_hide_root_non_win32():\n    tree = Tree(\"foo\", hide_root=True)\n    tree.add(\"bar\", style=\"italic\")\n    baz_tree = tree.add(\"baz\", guide_style=\"bold red\", style=\"on blue\")\n    baz_tree.add(\"1\")\n    baz_tree.add(\"2\")\n    tree.add(\"egg\")\n\n    console = Console(\n        width=20, force_terminal=True, color_system=\"standard\", _environ={}\n    )\n    console.begin_capture()\n    console.print(tree)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"\\x1b[3mbar\\x1b[0m\\n\\x1b[44mbaz\\x1b[0m\\n\\x1b[31;44m\u2523\u2501\u2501 \\x1b[0m\\x1b[44m1\\x1b[0m\\n\\x1b[31;44m\u2517\u2501\u2501 \\x1b[0m\\x1b[44m2\\x1b[0m\\negg\\n\"\n    assert result == expected\n\n\n@pytest.mark.skipif(sys.platform != \"win32\", reason=\"Windows specific\")\ndef test_render_tree_hide_root_win32():\n    tree = Tree(\"foo\", hide_root=True)\n    tree.add(\"bar\", style=\"italic\")\n    baz_tree = tree.add(\"baz\", guide_style=\"bold red\", style=\"on blue\")\n    baz_tree.add(\"1\")\n    baz_tree.add(\"2\")\n    tree.add(\"egg\")\n\n    console = Console(width=20, force_terminal=True, color_system=\"standard\")\n    console.begin_capture()\n    console.print(tree)\n    result = console.end_capture()\n    print(repr(result))\n    expected = \"\\x1b[3mbar\\x1b[0m\\n\\x1b[44mbaz\\x1b[0m\\n\\x1b[31;44m\u251c\u2500\u2500 \\x1b[0m\\x1b[44m1\\x1b[0m\\n\\x1b[31;44m\u2514\u2500\u2500 \\x1b[0m\\x1b[44m2\\x1b[0m\\negg\\n\"\n    assert result == expected\n\n\ndef test_tree_measure():\n    tree = Tree(\"foo\")\n    tree.add(\"bar\")\n    tree.add(\"mushroom risotto\")\n    console = Console()\n    measurement = Measurement.get(console, console.options, tree)\n    assert measurement == Measurement(12, 20)\n", "tests/test_box.py": "import pytest\n\nfrom rich.console import ConsoleOptions, ConsoleDimensions\nfrom rich.box import ASCII, DOUBLE, ROUNDED, HEAVY, SQUARE\n\n\ndef test_str():\n    assert str(ASCII) == \"+--+\\n| ||\\n|-+|\\n| ||\\n|-+|\\n|-+|\\n| ||\\n+--+\\n\"\n\n\ndef test_repr():\n    assert repr(ASCII) == \"Box(...)\"\n\n\ndef test_get_top():\n    top = HEAVY.get_top(widths=[1, 2])\n    assert top == \"\u250f\u2501\u2533\u2501\u2501\u2513\"\n\n\ndef test_get_row():\n    head_row = DOUBLE.get_row(widths=[3, 2, 1], level=\"head\")\n    assert head_row == \"\u2560\u2550\u2550\u2550\u256c\u2550\u2550\u256c\u2550\u2563\"\n\n    row = ASCII.get_row(widths=[1, 2, 3], level=\"row\")\n    assert row == \"|-+--+---|\"\n\n    foot_row = ROUNDED.get_row(widths=[2, 1, 3], level=\"foot\")\n    assert foot_row == \"\u251c\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2524\"\n\n    with pytest.raises(ValueError):\n        ROUNDED.get_row(widths=[1, 2, 3], level=\"FOO\")\n\n\ndef test_get_bottom():\n    bottom = HEAVY.get_bottom(widths=[1, 2, 3])\n    assert bottom == \"\u2517\u2501\u253b\u2501\u2501\u253b\u2501\u2501\u2501\u251b\"\n\n\ndef test_box_substitute():\n    options = ConsoleOptions(\n        ConsoleDimensions(80, 25),\n        legacy_windows=True,\n        min_width=1,\n        max_width=100,\n        is_terminal=True,\n        encoding=\"utf-8\",\n        max_height=25,\n    )\n    assert HEAVY.substitute(options) == SQUARE\n\n    options.legacy_windows = False\n    assert HEAVY.substitute(options) == HEAVY\n\n    options.encoding = \"ascii\"\n    assert HEAVY.substitute(options) == ASCII\n", "tests/test_bar.py": "from rich.console import Console\nfrom rich.progress_bar import ProgressBar\nfrom rich.segment import Segment\nfrom rich.style import Style\n\nfrom .render import render\n\n\ndef test_init():\n    bar = ProgressBar(completed=50)\n    repr(bar)\n    assert bar.percentage_completed == 50.0\n\n\ndef test_update():\n    bar = ProgressBar()\n    assert bar.completed == 0\n    assert bar.total == 100\n    bar.update(10, 20)\n    assert bar.completed == 10\n    assert bar.total == 20\n    assert bar.percentage_completed == 50\n    bar.update(100)\n    assert bar.percentage_completed == 100\n\n\nexpected = [\n    \"\\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2578\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\",\n    \"\\x1b[38;2;249;38;114m\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\\x1b[38;5;237m\u257a\\x1b[0m\\x1b[38;5;237m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\x1b[0m\",\n]\n\n\ndef test_render():\n    bar = ProgressBar(completed=11, width=50)\n    bar_render = render(bar)\n    assert bar_render == expected[0]\n    bar.update(completed=12)\n    bar_render = render(bar)\n    assert bar_render == expected[1]\n\n\ndef test_measure():\n    console = Console(width=120)\n    bar = ProgressBar()\n    measurement = bar.__rich_measure__(console, console.options)\n    assert measurement.minimum == 4\n    assert measurement.maximum == 120\n\n\ndef test_zero_total():\n    # Shouldn't throw zero division error\n    bar = ProgressBar(total=0)\n    render(bar)\n\n\ndef test_pulse():\n    bar = ProgressBar(pulse=True, animation_time=10)\n    bar_render = render(bar)\n    print(repr(bar_render))\n    expected = \"\\x1b[38;2;249;38;114m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;58;58;58m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;58;58;58m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;58;58;58m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;58;58;58m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;249;38;114m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;58;58;58m\u2501\\x1b[0m\\x1b[38;2;62;57;59m\u2501\\x1b[0m\\x1b[38;2;76;56;63m\u2501\\x1b[0m\\x1b[38;2;97;53;69m\u2501\\x1b[0m\\x1b[38;2;123;51;77m\u2501\\x1b[0m\\x1b[38;2;153;48;86m\u2501\\x1b[0m\\x1b[38;2;183;44;94m\u2501\\x1b[0m\\x1b[38;2;209;42;102m\u2501\\x1b[0m\\x1b[38;2;230;39;108m\u2501\\x1b[0m\\x1b[38;2;244;38;112m\u2501\\x1b[0m\"\n    assert bar_render == expected\n\n\ndef test_get_pulse_segments():\n    bar = ProgressBar()\n    segments = bar._get_pulse_segments(\n        Style.parse(\"red\"), Style.parse(\"yellow\"), None, False, False\n    )\n    print(repr(segments))\n    expected = [\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"red\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n        Segment(\"\u2501\", Style.parse(\"yellow\")),\n    ]\n    assert segments == expected\n\n\nif __name__ == \"__main__\":\n    bar = ProgressBar(completed=11, width=50)\n    bar_render = render(bar)\n    print(repr(bar_render))\n    bar.update(completed=12)\n    bar_render = render(bar)\n    print(repr(bar_render))\n", "tests/test_live_render.py": "import pytest\nfrom rich.live_render import LiveRender\nfrom rich.console import Console, ConsoleDimensions, ConsoleOptions\nfrom rich.style import Style\nfrom rich.segment import Segment\n\n\n@pytest.fixture\ndef live_render():\n    return LiveRender(renderable=\"my string\")\n\n\ndef test_renderable(live_render):\n    assert live_render.renderable == \"my string\"\n    live_render.set_renderable(\"another string\")\n    assert live_render.renderable == \"another string\"\n\n\ndef test_position_cursor(live_render):\n    assert str(live_render.position_cursor()) == \"\"\n    live_render._shape = (80, 2)\n    assert str(live_render.position_cursor()) == \"\\r\\x1b[2K\\x1b[1A\\x1b[2K\"\n\n\ndef test_restore_cursor(live_render):\n    assert str(live_render.restore_cursor()) == \"\"\n    live_render._shape = (80, 2)\n    assert str(live_render.restore_cursor()) == \"\\r\\x1b[1A\\x1b[2K\\x1b[1A\\x1b[2K\"\n\n\ndef test_rich_console(live_render):\n    options = ConsoleOptions(\n        ConsoleDimensions(80, 25),\n        max_height=25,\n        legacy_windows=False,\n        min_width=10,\n        max_width=20,\n        is_terminal=False,\n        encoding=\"utf-8\",\n    )\n    rich_console = live_render.__rich_console__(Console(), options)\n    assert [Segment(\"my string\", None)] == list(rich_console)\n    live_render.style = \"red\"\n    rich_console = live_render.__rich_console__(Console(), options)\n    assert [Segment(\"my string\", Style.parse(\"red\"))] == list(rich_console)\n", "tests/test_block_bar.py": "from rich.bar import Bar\nfrom rich.console import Console\n\nfrom .render import render\n\n\nexpected = [\n    \"\\x1b[39;49m     \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                   \\x1b[0m\\n\",\n    \"\\x1b[39;49m      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                     \\x1b[0m\\n\",\n    \"\\x1b[39;49m                                                  \\x1b[0m\\n\",\n]\n\n\ndef test_repr():\n    bar = Bar(size=100, begin=11, end=62, width=50)\n    assert repr(bar) == \"Bar(100, 11, 62)\"\n\n\ndef test_render():\n    bar = Bar(size=100, begin=11, end=62, width=50)\n    bar_render = render(bar)\n    assert bar_render == expected[0]\n    bar = Bar(size=100, begin=12, end=57, width=50)\n    bar_render = render(bar)\n    assert bar_render == expected[1]\n    # begin after end\n    bar = Bar(size=100, begin=60, end=40, width=50)\n    bar_render = render(bar)\n    assert bar_render == expected[2]\n\n\ndef test_measure():\n    console = Console(width=120)\n    bar = Bar(size=100, begin=11, end=62)\n    measurement = bar.__rich_measure__(console, console.options)\n    assert measurement.minimum == 4\n    assert measurement.maximum == 120\n\n\ndef test_zero_total():\n    # Shouldn't throw zero division error\n    bar = Bar(size=0, begin=0, end=0)\n    render(bar)\n\n\nif __name__ == \"__main__\":\n    bar = Bar(size=100, begin=11, end=62, width=50)\n    bar_render = render(bar)\n    print(repr(bar_render))\n    bar = Bar(size=100, begin=12, end=57, width=50)\n    bar_render = render(bar)\n    print(repr(bar_render))\n    bar = Bar(size=100, begin=60, end=40, width=50)\n    bar_render = render(bar)\n    print(repr(bar_render))\n", "tests/test_table.py": "# encoding=utf-8\n\nimport io\n\nimport pytest\n\nfrom rich import box, errors\nfrom rich.console import Console\nfrom rich.measure import Measurement\nfrom rich.style import Style\nfrom rich.table import Column, Table\nfrom rich.text import Text\n\n\ndef render_tables():\n    console = Console(\n        width=60,\n        force_terminal=True,\n        file=io.StringIO(),\n        legacy_windows=False,\n        color_system=None,\n        _environ={},\n    )\n\n    table = Table(title=\"test table\", caption=\"table caption\", expand=False)\n    table.add_column(\"foo\", footer=Text(\"total\"), no_wrap=True, overflow=\"ellipsis\")\n    table.add_column(\"bar\", justify=\"center\")\n    table.add_column(\"baz\", justify=\"right\")\n\n    table.add_row(\"Averlongwordgoeshere\", \"banana pancakes\", None)\n\n    assert Measurement.get(console, console.options, table) == Measurement(41, 48)\n    table.expand = True\n    assert Measurement.get(console, console.options, table) == Measurement(41, 48)\n\n    for width in range(10, 60, 5):\n        console.print(table, width=width)\n\n    table.expand = False\n    console.print(table, justify=\"left\")\n    console.print(table, justify=\"center\")\n    console.print(table, justify=\"right\")\n\n    assert table.row_count == 1\n\n    table.row_styles = [\"red\", \"yellow\"]\n    table.add_row(\"Coffee\")\n    table.add_row(\"Coffee\", \"Chocolate\", None, \"cinnamon\")\n\n    assert table.row_count == 3\n\n    console.print(table)\n\n    table.show_lines = True\n    console.print(table)\n\n    table.show_footer = True\n    console.print(table)\n\n    table.show_edge = False\n\n    console.print(table)\n\n    table.padding = 1\n    console.print(table)\n\n    table.width = 20\n    assert Measurement.get(console, console.options, table) == Measurement(20, 20)\n    table.expand = False\n    assert Measurement.get(console, console.options, table) == Measurement(20, 20)\n    table.expand = True\n    console.print(table)\n\n    table.columns[0].no_wrap = True\n    table.columns[1].no_wrap = True\n    table.columns[2].no_wrap = True\n\n    console.print(table)\n\n    table.padding = 0\n    table.width = 60\n    table.leading = 1\n    console.print(table)\n\n    return console.file.getvalue()\n\n\ndef test_render_table():\n    expected = \"test table\\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2533\u2513\\n\u2503 foo  \u2503\u2503\u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2547\u2529\\n\u2502 Ave\u2026 \u2502\u2502\u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2518\\n  table   \\n caption  \\n  test table   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2533\u2513\\n\u2503 foo       \u2503\u2503\u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2547\u2529\\n\u2502 Averlong\u2026 \u2502\u2502\u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2518\\n table caption \\n     test table     \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2533\u2513\\n\u2503 foo            \u2503\u2503\u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2547\u2529\\n\u2502 Averlongwordg\u2026 \u2502\u2502\u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2518\\n   table caption    \\n       test table        \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2533\u2513\\n\u2503 foo                 \u2503\u2503\u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2547\u2529\\n\u2502 Averlongwordgoeshe\u2026 \u2502\u2502\u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2518\\n      table caption      \\n          test table          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2533\u2501\u2501\u2513\\n\u2503 foo                  \u2503  \u2503  \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2547\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere \u2502  \u2502  \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518\\n        table caption         \\n            test table             \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                  \u2503 bar \u2503 b\u2026 \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere \u2502 ba\u2026 \u2502    \u2502\\n\u2502                      \u2502 pa\u2026 \u2502    \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\\n           table caption           \\n               test table               \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                  \u2503   bar   \u2503 baz \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere \u2502 banana  \u2502     \u2502\\n\u2502                      \u2502 pancak\u2026 \u2502     \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n             table caption              \\n                 test table                  \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                  \u2503     bar      \u2503 baz \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere \u2502    banana    \u2502     \u2502\\n\u2502                      \u2502   pancakes   \u2502     \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n                table caption                \\n                    test table                    \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                   \u2503       bar        \u2503 baz \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere  \u2502 banana pancakes  \u2502     \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n                  table caption                   \\n                      test table                       \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                      \u2503        bar         \u2503 baz \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere     \u2502  banana pancakes   \u2502     \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n                     table caption                     \\n                   test table                               \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513            \\n\u2503 foo                  \u2503       bar       \u2503 baz \u2503            \\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529            \\n\u2502 Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502            \\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518            \\n                 table caption                              \\n                         test table                         \\n      \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513      \\n      \u2503 foo                  \u2503       bar       \u2503 baz \u2503      \\n      \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529      \\n      \u2502 Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502      \\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518      \\n                       table caption                        \\n                               test table                   \\n            \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513\\n            \u2503 foo                  \u2503       bar       \u2503 baz \u2503\\n            \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529\\n            \u2502 Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502\\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n                             table caption                  \\n                        test table                         \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                  \u2503       bar       \u2503 baz \u2503          \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502          \u2502\\n\u2502 Coffee               \u2502                 \u2502     \u2502          \u2502\\n\u2502 Coffee               \u2502    Chocolate    \u2502     \u2502 cinnamon \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                       table caption                       \\n                        test table                         \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                  \u2503       bar       \u2503 baz \u2503          \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502          \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 Coffee               \u2502                 \u2502     \u2502          \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 Coffee               \u2502    Chocolate    \u2502     \u2502 cinnamon \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                       table caption                       \\n                        test table                         \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo                  \u2503       bar       \u2503 baz \u2503          \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502          \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 Coffee               \u2502                 \u2502     \u2502          \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 Coffee               \u2502    Chocolate    \u2502     \u2502 cinnamon \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 total                \u2502                 \u2502     \u2502          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                       table caption                       \\n                       test table                        \\n foo                  \u2503       bar       \u2503 baz \u2503          \\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502          \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n Coffee               \u2502                 \u2502     \u2502          \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n Coffee               \u2502    Chocolate    \u2502     \u2502 cinnamon \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n total                \u2502                 \u2502     \u2502          \\n                      table caption                      \\n                       test table                        \\n                      \u2503                 \u2503     \u2503          \\n foo                  \u2503       bar       \u2503 baz \u2503          \\n                      \u2503                 \u2503     \u2503          \\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n                      \u2502                 \u2502     \u2502          \\n Averlongwordgoeshere \u2502 banana pancakes \u2502     \u2502          \\n                      \u2502                 \u2502     \u2502          \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                      \u2502                 \u2502     \u2502          \\n Coffee               \u2502                 \u2502     \u2502          \\n                      \u2502                 \u2502     \u2502          \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                      \u2502                 \u2502     \u2502          \\n Coffee               \u2502    Chocolate    \u2502     \u2502 cinnamon \\n                      \u2502                 \u2502     \u2502          \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                      \u2502                 \u2502     \u2502          \\n total                \u2502                 \u2502     \u2502          \\n                      \u2502                 \u2502     \u2502          \\n                      table caption                      \\n     test table     \\n                 \u2503\u2503\u2503\\n foo             \u2503\u2503\u2503\\n                 \u2503\u2503\u2503\\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2547\u2547\\n                 \u2502\u2502\u2502\\n Averlongwordgo\u2026 \u2502\u2502\u2502\\n                 \u2502\u2502\u2502\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u253c\\n                 \u2502\u2502\u2502\\n Coffee          \u2502\u2502\u2502\\n                 \u2502\u2502\u2502\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u253c\\n                 \u2502\u2502\u2502\\n Coffee          \u2502\u2502\u2502\\n                 \u2502\u2502\u2502\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u253c\\n                 \u2502\u2502\u2502\\n total           \u2502\u2502\u2502\\n                 \u2502\u2502\u2502\\n   table caption    \\n      test table      \\n          \u2503         \u2503\u2503\\n foo      \u2503   bar   \u2503\u2503\\n          \u2503         \u2503\u2503\\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2547\\n          \u2502         \u2502\u2502\\n Averlon\u2026 \u2502 banana\u2026 \u2502\u2502\\n          \u2502         \u2502\u2502\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u253c\\n          \u2502         \u2502\u2502\\n Coffee   \u2502         \u2502\u2502\\n          \u2502         \u2502\u2502\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u253c\\n          \u2502         \u2502\u2502\\n Coffee   \u2502 Chocol\u2026 \u2502\u2502\\n          \u2502         \u2502\u2502\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u253c\\n          \u2502         \u2502\u2502\\n total    \u2502         \u2502\u2502\\n          \u2502         \u2502\u2502\\n    table caption     \\n                         test table                         \\nfoo                      \u2503        bar        \u2503 baz\u2503         \\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\nAverlongwordgoeshere     \u2502  banana pancakes  \u2502    \u2502         \\n                         \u2502                   \u2502    \u2502         \\nCoffee                   \u2502                   \u2502    \u2502         \\n                         \u2502                   \u2502    \u2502         \\nCoffee                   \u2502     Chocolate     \u2502    \u2502cinnamon \\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\ntotal                    \u2502                   \u2502    \u2502         \\n                       table caption                        \\n\"\n    result = render_tables()\n    print(repr(result))\n    assert result == expected\n\n\ndef test_not_renderable():\n    class Foo:\n        pass\n\n    table = Table()\n    with pytest.raises(errors.NotRenderableError):\n        table.add_row(Foo())\n\n\ndef test_init_append_column():\n    header_names = [\"header1\", \"header2\", \"header3\"]\n    test_columns = [\n        Column(_index=index, header=header) for index, header in enumerate(header_names)\n    ]\n\n    # Test appending of strings for header names\n    assert Table(*header_names).columns == test_columns\n    # Test directly passing a Table Column objects\n    assert Table(*test_columns).columns == test_columns\n\n\ndef test_rich_measure():\n    console = Console()\n    assert Table(\"test_header\", width=-1).__rich_measure__(\n        console, console.options\n    ) == Measurement(0, 0)\n    # Check __rich_measure__() for a positive width passed as an argument\n    assert Table(\"test_header\", width=None).__rich_measure__(\n        console, console.options.update_width(10)\n    ) == Measurement(10, 10)\n\n\ndef test_min_width():\n    table = Table(\"foo\", min_width=30)\n    table.add_row(\"bar\")\n    console = Console()\n    assert table.__rich_measure__(\n        console, console.options.update_width(100)\n    ) == Measurement(30, 30)\n    console = Console(color_system=None)\n    console.begin_capture()\n    console.print(table)\n    output = console.end_capture()\n    print(output)\n    assert all(len(line) == 30 for line in output.splitlines())\n\n\ndef test_no_columns():\n    console = Console(color_system=None)\n    console.begin_capture()\n    console.print(Table())\n    output = console.end_capture()\n    print(repr(output))\n    assert output == \"\\n\"\n\n\ndef test_get_row_style():\n    console = Console()\n    table = Table()\n    table.add_row(\"foo\")\n    table.add_row(\"bar\", style=\"on red\")\n    assert table.get_row_style(console, 0) == Style.parse(\"\")\n    assert table.get_row_style(console, 1) == Style.parse(\"on red\")\n\n\ndef test_vertical_align_top():\n    console = Console(_environ={})\n\n    def make_table(vertical_align):\n        table = Table(show_header=False, box=box.SQUARE)\n        table.add_column(vertical=vertical_align)\n        table.add_row(\"foo\", \"\\n\".join([\"bar\"] * 5))\n\n        return table\n\n    with console.capture() as capture:\n        console.print(make_table(\"top\"))\n        console.print()\n        console.print(make_table(\"middle\"))\n        console.print()\n        console.print(make_table(\"bottom\"))\n        console.print()\n    result = capture.get()\n    print(repr(result))\n    expected = \"\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 foo \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502 foo \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502     \u2502 bar \u2502\\n\u2502 foo \u2502 bar \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\"\n    assert result == expected\n\n\n@pytest.mark.parametrize(\n    \"box,result\",\n    [\n        (None, \" 1  2 \\n 3  4 \\n\"),\n        (box.HEAVY_HEAD, \"\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\\n\u2502 1 \u2502 2 \u2502\\n\u2502 3 \u2502 4 \u2502\\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\\n\"),\n        (box.SQUARE_DOUBLE_HEAD, \"\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\\n\u2502 1 \u2502 2 \u2502\\n\u2502 3 \u2502 4 \u2502\\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\\n\"),\n        (box.MINIMAL_DOUBLE_HEAD, \"    \u2577    \\n  1 \u2502 2  \\n  3 \u2502 4  \\n    \u2575    \\n\"),\n        (box.MINIMAL_HEAVY_HEAD, \"    \u2577    \\n  1 \u2502 2  \\n  3 \u2502 4  \\n    \u2575    \\n\"),\n        (box.ASCII_DOUBLE_HEAD, \"+---+---+\\n| 1 | 2 |\\n| 3 | 4 |\\n+---+---+\\n\"),\n    ],\n)\ndef test_table_show_header_false_substitution(box, result):\n    \"\"\"When the box style is one with a custom header edge, it should be substituted for\n    the equivalent box that does not have a custom header when show_header=False\"\"\"\n    table = Table(show_header=False, box=box)\n    table.add_column()\n    table.add_column()\n\n    table.add_row(\"1\", \"2\")\n    table.add_row(\"3\", \"4\")\n\n    console = Console(record=True)\n    console.print(table)\n    output = console.export_text()\n\n    assert output == result\n\n\ndef test_section():\n    table = Table(\"foo\")\n    table.add_section()  # Null-op\n    table.add_row(\"row1\")\n    table.add_row(\"row2\", end_section=True)\n    table.add_row(\"row3\")\n    table.add_row(\"row4\")\n    table.add_section()\n    table.add_row(\"row5\")\n    table.add_section()  # Null-op\n\n    console = Console(\n        width=80,\n        force_terminal=True,\n        color_system=\"truecolor\",\n        legacy_windows=False,\n        record=True,\n    )\n    console.print(table)\n    output = console.export_text()\n    print(repr(output))\n    expected = \"\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 foo  \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 row1 \u2502\\n\u2502 row2 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 row3 \u2502\\n\u2502 row4 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 row5 \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"\n\n    assert output == expected\n\n\nif __name__ == \"__main__\":\n    render = render_tables()\n    print(render)\n    print(repr(render))\n", "tests/test_json.py": "from rich.json import JSON\nimport datetime\n\n\ndef test_print_json_data_with_default():\n    date = datetime.date(2021, 1, 1)\n    json = JSON.from_data({\"date\": date}, default=lambda d: d.isoformat())\n    assert str(json.text) == '{\\n  \"date\": \"2021-01-01\"\\n}'\n", "benchmarks/benchmarks.py": "from io import StringIO\n\nfrom benchmarks import snippets\nfrom rich.color import Color, ColorSystem\nfrom rich.console import Console\nfrom rich.pretty import Pretty\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom rich.syntax import Syntax\nfrom rich.table import Table\nfrom rich.text import Text\n\n\nclass TextSuite:\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)\n\n    def time_wrapping(self):\n        self.text.wrap(self.console, 12, overflow=\"fold\")\n\n    def time_indent_guides(self):\n        Text(snippets.PYTHON_SNIPPET).with_indent_guides()\n\n    def time_fit(self):\n        Text(snippets.LOREM_IPSUM).fit(12)\n\n    def time_split(self):\n        self.text.split()\n\n    def time_divide(self):\n        Text(snippets.LOREM_IPSUM).divide(range(20, 100, 4))\n\n    def time_align_center(self):\n        Text(snippets.LOREM_IPSUM).align(\"center\", width=self.len_lorem_ipsum * 3)\n\n    def time_render(self):\n        list(self.text.render(self.console))\n\n    def time_wrapping_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).wrap(self.console, 12, overflow=\"fold\")\n\n    def time_fit_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).fit(12)\n\n    def time_split_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).split()\n\n    def time_divide_unicode_heavy(self):\n        self.text.divide(range(20, 100, 4))\n\n    def time_align_center_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).align(\n            \"center\", width=self.len_lorem_ipsum * 3\n        )\n\n    def time_render_unicode_heavy(self):\n        list(Text(snippets.UNICODE_HEAVY_TEXT).render(self.console))\n\n\nclass TextHotCacheSuite:\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n\n    def time_wrapping_unicode_heavy_warm_cache(self):\n        for _ in range(20):\n            Text(snippets.UNICODE_HEAVY_TEXT).wrap(self.console, 12, overflow=\"fold\")\n\n\nclass SyntaxWrappingSuite:\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.syntax = Syntax(\n            code=snippets.PYTHON_SNIPPET, lexer=\"python\", word_wrap=True\n        )\n\n    def time_text_thin_terminal_heavy_wrapping(self):\n        self._print_with_width(20)\n\n    def time_text_thin_terminal_medium_wrapping(self):\n        self._print_with_width(60)\n\n    def time_text_wide_terminal_no_wrapping(self):\n        self._print_with_width(100)\n\n    def _print_with_width(self, width):\n        self.console.print(self.syntax, width)\n\n\nclass TableSuite:\n    def time_table_no_wrapping(self):\n        self._print_table(width=100)\n\n    def time_table_heavy_wrapping(self):\n        self._print_table(width=30)\n\n    def _print_table(self, width):\n        table = Table(title=\"Star Wars Movies\")\n        console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=width\n        )\n        table.add_column(\"Released\", justify=\"right\", style=\"cyan\", no_wrap=True)\n        table.add_column(\"Title\", style=\"magenta\")\n        table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n        table.add_row(\n            \"Dec 20, 2019\", \"[b]Star Wars[/]: The Rise of Skywalker\", \"$952,110,690\"\n        )\n        table.add_row(\n            \"May 25, 2018\", \"Solo: A [red][b]Star Wars[/] Story[/]\", \"$393,151,347\"\n        )\n        table.add_row(\n            \"Dec 15, 2017\",\n            \"[b red]Star Wars[/] Ep. V111: The Last Jedi\",\n            \"$1,332,539,889\",\n        )\n        table.add_row(\n            \"Dec 16, 2016\", \"Rogue One: A [blue]Star Wars[/] Story\", \"$1,332,439,889\"\n        )\n        console.print(table)\n\n\nclass PrettySuite:\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n\n    def time_pretty(self):\n        pretty = Pretty(snippets.PYTHON_DICT)\n        self.console.print(pretty)\n\n    def time_pretty_indent_guides(self):\n        pretty = Pretty(snippets.PYTHON_DICT, indent_guides=True)\n        self.console.print(pretty)\n\n    def time_pretty_justify_center(self):\n        pretty = Pretty(snippets.PYTHON_DICT, justify=\"center\")\n        self.console.print(pretty)\n\n\nclass StyleSuite:\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.style1 = Style.parse(\"blue on red\")\n        self.style2 = Style.parse(\"green italic bold\")\n\n    def time_parse_ansi(self):\n        Style.parse(\"red on blue\")\n\n    def time_parse_hex(self):\n        Style.parse(\"#f0f0f0 on #e2e28a\")\n\n    def time_parse_mixed_complex_style(self):\n        Style.parse(\"dim bold reverse #00ee00 on rgb(123,12,50)\")\n\n    def time_style_add(self):\n        self.style1 + self.style2\n\n\nclass ColorSuite:\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")\n\n    def time_downgrade_to_eight_bit(self):\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n\n    def time_downgrade_to_standard(self):\n        self.color.downgrade(ColorSystem.STANDARD)\n\n    def time_downgrade_to_windows(self):\n        self.color.downgrade(ColorSystem.WINDOWS)\n\n\nclass ColorSuiteCached:\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")\n        # Warm cache\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n        self.color.downgrade(ColorSystem.STANDARD)\n        self.color.downgrade(ColorSystem.WINDOWS)\n\n    def time_downgrade_to_eight_bit(self):\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n\n    def time_downgrade_to_standard(self):\n        self.color.downgrade(ColorSystem.STANDARD)\n\n    def time_downgrade_to_windows(self):\n        self.color.downgrade(ColorSystem.WINDOWS)\n\n\nclass SegmentSuite:\n    def setup(self):\n        self.line = [\n            Segment(\"foo\"),\n            Segment(\"bar\"),\n            Segment(\"egg\"),\n            Segment(\"Where there is a Will\"),\n            Segment(\"There is a way\"),\n        ] * 2\n\n    def test_divide_complex(self):\n        list(Segment.divide(self.line, [5, 10, 20, 50, 108, 110, 118]))\n", "benchmarks/snippets.py": "PYTHON_SNIPPET = '''\ndef layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> List[int]:\n    \"\"\"Divide total space to satisfy size, fraction, and min_size, constraints.\n\n    The returned list of integers should add up to total in most cases, unless it is\n    impossible to satisfy all the constraints. For instance, if there are two edges\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\n    greater than total. In practice, this would mean that a Layout object would\n    clip the rows that would overflow the screen height.\n\n    Args:\n        total (int): Total number of characters.\n        edges (Sequence[Edge]): Edges within total space.\n\n    Returns:\n        list[int]: Number of characters for each edge.\n    \"\"\"\n    # Size of edge or None for yet to be determined\n    sizes = [(edge.size or None) for edge in edges]\n\n    if None not in sizes:\n        # No flexible edges\n        return cast(\"list[int]\", sizes)\n\n    # Get flexible edges and index to map these back on to sizes list\n    flexible_edges = [\n        (index, edge)\n        for index, (size, edge) in enumerate(zip(sizes, edges))\n        if size is None\n    ]\n    # Remaining space in total\n    remaining = total - sum([size or 0 for size in sizes])\n    if remaining <= 0:\n        # No room for flexible edges\n        return [\n            ((edge.min_size or 1) if size is None else size)\n            for size, edge in zip(sizes, edges)\n        ]\n\n    # Get the total fraction value for all flexible edges\n    total_flexible = sum([(edge.fraction or 1) for _, edge in flexible_edges])\n    while flexible_edges:\n        # Calculate number of characters in a ratio portion\n        portion = Fraction(remaining, total_flexible)\n\n        # If any edges will be less than their minimum, replace size with the minimum\n        for flexible_index, (index, edge) in enumerate(flexible_edges):\n            if portion * edge.fraction < edge.min_size:\n                # This flexible edge will be smaller than its minimum size\n                # We need to fix the size and redistribute the outstanding space\n                sizes[index] = edge.min_size\n                remaining -= edge.min_size\n                total_flexible -= edge.fraction or 1\n                del flexible_edges[flexible_index]\n                # New fixed size will invalidate calculations, so we need to repeat the process\n                break\n        else:\n            # Distribute flexible space and compensate for rounding error\n            # Since edge sizes can only be integers we need to add the remainder\n            # to the following line\n            remainder = Fraction(0)\n            for index, edge in flexible_edges:\n                sizes[index], remainder = divmod(portion * edge.fraction + remainder, 1)\n            break\n\n    # Sizes now contains integers only\n    return cast(\"list[int]\", sizes)\n'''\n\nPYTHON_DICT = {\n    \"glossary\": {\n        \"title\": \"example glossary\",\n        \"GlossDiv\": {\n            \"title\": \"S\",\n            \"GlossList\": {\n                \"GlossEntry\": {\n                    \"ID\": \"SGML\",\n                    \"SortAs\": \"SGML\",\n                    \"GlossTerm\": \"Standard Generalized Markup Language\",\n                    \"Acronym\": \"SGML\",\n                    \"Abbrev\": \"ISO 8879:1986\",\n                    \"GlossDef\": {\n                        \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                        \"GlossSeeAlso\": [\"GML\", \"XML\"],\n                    },\n                    \"GlossSee\": \"markup\",\n                }\n            },\n        },\n    }\n}\n\nLOREM_IPSUM = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Laoreet id donec ultrices tincidunt arcu. Eu facilisis sed odio morbi quis commodo odio aenean sed. Amet cursus sit amet dictum. Gravida rutrum quisque non tellus. Semper auctor neque vitae tempus quam pellentesque nec nam. Mauris sit amet massa vitae tortor condimentum lacinia quis. Adipiscing elit ut aliquam purus sit amet luctus venenatis lectus. Consectetur adipiscing elit ut aliquam purus sit amet. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Dui faucibus in ornare quam viverra. Et netus et malesuada fames ac turpis. A lacus vestibulum sed arcu non odio euismod. In massa tempor nec feugiat nisl pretium fusce.\n\nTellus in hac habitasse platea dictumst vestibulum. Feugiat nibh sed pulvinar proin. In cursus turpis massa tincidunt dui ut. Fermentum posuere urna nec tincidunt praesent semper feugiat. Interdum consectetur libero id faucibus. Habitant morbi tristique senectus et netus et malesuada fames ac. Facilisis leo vel fringilla est ullamcorper eget nulla facilisi. Aliquam faucibus purus in massa tempor. Tellus pellentesque eu tincidunt tortor aliquam nulla. Sem et tortor consequat id porta nibh. Massa id neque aliquam vestibulum morbi blandit cursus risus. Ut placerat orci nulla pellentesque dignissim enim. Nibh tellus molestie nunc non blandit massa enim nec dui. Ipsum a arcu cursus vitae congue mauris rhoncus aenean vel. Egestas congue quisque egestas diam in.\n\nPulvinar mattis nunc sed blandit libero volutpat sed. Accumsan in nisl nisi scelerisque eu. Eget aliquet nibh praesent tristique. Ipsum suspendisse ultrices gravida dictum fusce ut. Non sodales neque sodales ut etiam sit amet. Velit egestas dui id ornare. Massa ultricies mi quis hendrerit dolor magna. Id volutpat lacus laoreet non curabitur gravida arcu. Nulla facilisi cras fermentum odio eu feugiat pretium. Sed vulputate odio ut enim blandit volutpat. Amet massa vitae tortor condimentum lacinia. Tellus integer feugiat scelerisque varius. Quam nulla porttitor massa id. Facilisi cras fermentum odio eu feugiat pretium nibh ipsum. Eget nunc scelerisque viverra mauris in aliquam sem fringilla. Amet nulla facilisi morbi tempus iaculis urna id volutpat lacus. Facilisi etiam dignissim diam quis enim lobortis.\n\nNullam vehicula ipsum a arcu cursus vitae congue mauris rhoncus. Ullamcorper a lacus vestibulum sed arcu non. Suscipit adipiscing bibendum est ultricies integer quis auctor elit. Integer feugiat scelerisque varius morbi enim. Posuere urna nec tincidunt praesent semper feugiat nibh sed pulvinar. Lobortis feugiat vivamus at augue eget. Rhoncus dolor purus non enim praesent. Mi in nulla posuere sollicitudin aliquam ultrices sagittis orci. Mollis aliquam ut porttitor leo. Id cursus metus aliquam eleifend mi in nulla. Integer eget aliquet nibh praesent tristique magna sit amet. Egestas maecenas pharetra convallis posuere morbi.\n\nBlandit massa enim nec dui. Suscipit tellus mauris a diam maecenas. Sed id semper risus in. Purus faucibus ornare suspendisse sed nisi lacus. At in tellus integer feugiat. Egestas diam in arcu cursus euismod quis viverra nibh cras. Enim tortor at auctor urna nunc id. Tristique nulla aliquet enim tortor at auctor urna nunc id. Purus gravida quis blandit turpis cursus in hac habitasse platea. Ac turpis egestas integer eget. Tortor at auctor urna nunc. Neque aliquam vestibulum morbi blandit cursus. Massa tempor nec feugiat nisl pretium fusce id velit. Interdum consectetur libero id faucibus nisl tincidunt. Adipiscing diam donec adipiscing tristique risus nec feugiat in. Egestas integer eget aliquet nibh praesent tristique magna sit.\n\"\"\"\n\nUNICODE_HEAVY_TEXT = \"\"\"\nRich\u306f\u3001 _\u30ea\u30c3\u30c1_ \u306a\u30c6\u30ad\u30b9\u30c8\u3084\u7f8e\u3057\u3044\u66f8\u5f0f\u8a2d\u5b9a\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u884c\u3046\u305f\u3081\u306ePython\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n[Rich API](https://rich.readthedocs.io/en/latest/)\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u306e\u51fa\u529b\u306b\u8272\u3084\u30b9\u30bf\u30a4\u30eb\u3092\u7c21\u5358\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Rich\u306f\u304d\u308c\u3044\u306a\u30c6\u30fc\u30d6\u30eb\u3001\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u3001\u30de\u30fc\u30af\u30c0\u30a6\u30f3\u3001\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3001\u30c8\u30ec\u30fc\u30b9\u30d0\u30c3\u30af\u306a\u3069\u3092\u3059\u3050\u306b\u751f\u6210\u30fb\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n![\u6a5f\u80fd](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nRich\u306e\u7d39\u4ecb\u52d5\u753b\u306f\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).\n\n[Rich\u306b\u3064\u3044\u3066\u306e\u4eba\u3005\u306e\u611f\u60f3\u3092\u898b\u308b\u3002](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)\n\n## \u4e92\u63db\u6027\n\nRich\u306fLinux\u3001OSX\u3001Windows\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002True color\u3068\u7d75\u6587\u5b57\u306f\u65b0\u3057\u3044 Windows \u30bf\u30fc\u30df\u30ca\u30eb\u3067\u52d5\u4f5c\u3057\u307e\u3059\u304c\u3001\u53e4\u3044\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u306f8\u8272\u306b\u5236\u9650\u3055\u308c\u3066\u3044\u307e\u3059\u3002Rich\u3092\u4f7f\u7528\u3059\u308b\u306b\u306fPython\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f3.6.3\u4ee5\u964d\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nRich\u306f\u8ffd\u52a0\u306e\u8a2d\u5b9a\u3092\u884c\u308f\u305a\u3068\u3082\u3001[Jupyter notebooks](https://jupyter.org/)\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n`pip` \u3084\u3001\u3042\u306a\u305f\u306e\u304a\u6c17\u306b\u5165\u308a\u306ePyPI\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```sh\npython -m pip install rich\n```\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u30ea\u30c3\u30c1\u306e\u51fa\u529b\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059:\n\n```sh\npython -m rich\n```\n\n## Rich\u306eprint\u95a2\u6570\n\n\u7c21\u5358\u306b\u30ea\u30c3\u30c1\u306a\u51fa\u529b\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3059\u308b\u306b\u306f\u3001Python\u306e\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3068\u540c\u3058\u540d\u524d\u3092\u6301\u3064 [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) \u30e1\u30bd\u30c3\u30c9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\u3053\u3061\u3089\u3092\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich\u306fPython\u306eREPL\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u304d\u308c\u3044\u306b\u8868\u793a\u3055\u308c\u3001\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u307e\u3059\u3002\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Rich Inspect\n\nRich\u306b\u306fPython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30af\u30e9\u30b9\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306a\u3069\u306b\u95a2\u3059\u308b\u30ec\u30dd\u30fc\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3001[inspect\u95a2\u6570](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect)\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u306e\u4f7f\u3044\u65b9\n\n\u30ea\u30c3\u30c1\u306a\u30bf\u30fc\u30df\u30ca\u30eb\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u3088\u308a\u5236\u5fa1\u3057\u3066\u3044\u304f\u306b\u306f\u3001[Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u69cb\u7bc9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nConsole \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f `print` \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u3053\u308c\u306f\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306e `print` \u3068\u610f\u56f3\u7684\u306b\u4f3c\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u4f7f\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059:\n\n\u3042\u306a\u305f\u304c\u4e88\u60f3\u3057\u305f\u901a\u308a\u3001\u3053\u308c\u306f `\"Hello World!\"` \u3092\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u8868\u793a\u3057\u307e\u3059\u3002\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306e `print` \u3068\u306f\u7570\u306a\u308a\u3001Rich \u306f\u30bf\u30fc\u30df\u30ca\u30eb\u306e\u5e45\u306b\u5408\u308f\u305b\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u30ef\u30fc\u30c9\u30e9\u30c3\u30d7\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u51fa\u529b\u7d50\u679c\u306b\u8272\u3084\u30b9\u30bf\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\u306f\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u306b `style` \u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u51fa\u529b\u7d50\u679c\u5168\u4f53\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u4f8b\u3092\u793a\u3057\u307e\u3059:\n\"\"\"\n\n\nMARKUP = \"\\n\".join(\n    \"\"\"[bold]Hello [i]World[/i] [bold magenta]foo [i]bar[/i] baz[/] [blue u]https://textualize.io[/]\"\"\"\n    for _ in range(20)\n)\n", "benchmarks/__init__.py": "", "examples/print_calendar.py": "\"\"\"\nBuilds calendar layout using Columns and Tables.\nUsage:\npython print_calendar.py [YEAR]\nExample:\npython print_calendar.py 2021\n\"\"\"\nimport argparse\nimport calendar\nfrom datetime import datetime\n\nfrom rich.align import Align\nfrom rich import box\nfrom rich.columns import Columns\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.text import Text\n\n\ndef print_calendar(year):\n    \"\"\"Print a calendar for a given year.\"\"\"\n\n    today = datetime.today()\n    year = int(year)\n    cal = calendar.Calendar()\n    today_tuple = today.day, today.month, today.year\n\n    tables = []\n\n    for month in range(1, 13):\n        table = Table(\n            title=f\"{calendar.month_name[month]} {year}\",\n            style=\"green\",\n            box=box.SIMPLE_HEAVY,\n            padding=0,\n        )\n\n        for week_day in cal.iterweekdays():\n            table.add_column(\n                \"{:.3}\".format(calendar.day_name[week_day]), justify=\"right\"\n            )\n\n        month_days = cal.monthdayscalendar(year, month)\n        for weekdays in month_days:\n            days = []\n            for index, day in enumerate(weekdays):\n                day_label = Text(str(day or \"\"), style=\"magenta\")\n                if index in (5, 6):\n                    day_label.stylize(\"blue\")\n                if day and (day, month, year) == today_tuple:\n                    day_label.stylize(\"white on dark_red\")\n                days.append(day_label)\n            table.add_row(*days)\n\n        tables.append(Align.center(table))\n\n    console = Console()\n    columns = Columns(tables, padding=1, expand=True)\n    console.rule(str(year))\n    console.print()\n    console.print(columns)\n    console.rule(str(year))\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Rich calendar\")\n    parser.add_argument(\"year\", metavar=\"year\", type=int)\n    args = parser.parse_args()\n\n    print_calendar(args.year)\n", "examples/columns.py": "\"\"\"\nThis example shows how to display content in columns.\n\nThe data is pulled from https://randomuser.me\n\"\"\"\n\nimport json\nfrom urllib.request import urlopen\n\nfrom rich.console import Console\nfrom rich.columns import Columns\nfrom rich.panel import Panel\n\n\ndef get_content(user):\n    \"\"\"Extract text from user dict.\"\"\"\n    country = user[\"location\"][\"country\"]\n    name = f\"{user['name']['first']} {user['name']['last']}\"\n    return f\"[b]{name}[/b]\\n[yellow]{country}\"\n\n\nconsole = Console()\n\n\nusers = json.loads(urlopen(\"https://randomuser.me/api/?results=30\").read())[\"results\"]\nconsole.print(users, overflow=\"ignore\", crop=False)\nuser_renderables = [Panel(get_content(user), expand=True) for user in users]\nconsole.print(Columns(user_renderables))\n", "examples/exception.py": "\"\"\"\nBasic example to show how to print an traceback of an exception\n\"\"\"\nfrom typing import List, Tuple\n\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef divide_by(number: float, divisor: float) -> float:\n    \"\"\"Divide any number by zero.\"\"\"\n    # Will throw a ZeroDivisionError if divisor is 0\n    result = number / divisor\n    return result\n\n\ndef divide_all(divides: List[Tuple[float, float]]) -> None:\n    \"\"\"Do something impossible every day.\"\"\"\n\n    for number, divisor in divides:\n        console.print(f\"dividing {number} by {divisor}\")\n        try:\n            result = divide_by(number, divisor)\n        except Exception:\n            console.print_exception(extra_lines=8, show_locals=True)\n        else:\n            console.print(f\" = {result}\")\n\n\nDIVIDES = [\n    (1000, 200),\n    (10000, 500),\n    (1, 0),\n    (0, 1000000),\n    (3.1427, 2),\n    (888, 0),\n    (2**32, 2**16),\n]\n\ndivide_all(DIVIDES)\n", "examples/jobs.py": "from time import sleep\nfrom rich.panel import Panel\nfrom rich.progress import Progress\n\n\nJOBS = [100, 150, 25, 70, 110, 90]\n\nprogress = Progress(auto_refresh=False)\nmaster_task = progress.add_task(\"overall\", total=sum(JOBS))\njobs_task = progress.add_task(\"jobs\")\n\nprogress.console.print(\n    Panel(\n        \"[bold blue]A demonstration of progress with a current task and overall progress.\",\n        padding=1,\n    )\n)\n\nwith progress:\n    for job_no, job in enumerate(JOBS):\n        progress.log(f\"Starting job #{job_no}\")\n        sleep(0.2)\n        progress.reset(jobs_task, total=job, description=f\"job [bold yellow]#{job_no}\")\n        progress.start_task(jobs_task)\n        for wait in progress.track(range(job), task_id=jobs_task):\n            sleep(0.01)\n        progress.advance(master_task, job)\n        progress.log(f\"Job #{job_no} is complete\")\n    progress.log(\n        Panel(\":sparkle: All done! :sparkle:\", border_style=\"green\", padding=1)\n    )\n", "examples/fullscreen.py": "\"\"\"\nDemonstrates a Rich \"application\" using the Layout and Live classes.\n\n\"\"\"\n\nfrom datetime import datetime\n\nfrom rich import box\nfrom rich.align import Align\nfrom rich.console import Console, Group\nfrom rich.layout import Layout\nfrom rich.panel import Panel\nfrom rich.progress import BarColumn, Progress, SpinnerColumn, TextColumn\nfrom rich.syntax import Syntax\nfrom rich.table import Table\n\nconsole = Console()\n\n\ndef make_layout() -> Layout:\n    \"\"\"Define the layout.\"\"\"\n    layout = Layout(name=\"root\")\n\n    layout.split(\n        Layout(name=\"header\", size=3),\n        Layout(name=\"main\", ratio=1),\n        Layout(name=\"footer\", size=7),\n    )\n    layout[\"main\"].split_row(\n        Layout(name=\"side\"),\n        Layout(name=\"body\", ratio=2, minimum_size=60),\n    )\n    layout[\"side\"].split(Layout(name=\"box1\"), Layout(name=\"box2\"))\n    return layout\n\n\ndef make_sponsor_message() -> Panel:\n    \"\"\"Some example content.\"\"\"\n    sponsor_message = Table.grid(padding=1)\n    sponsor_message.add_column(style=\"green\", justify=\"right\")\n    sponsor_message.add_column(no_wrap=True)\n    sponsor_message.add_row(\n        \"Twitter\",\n        \"[u blue link=https://twitter.com/textualize]https://twitter.com/textualize\",\n    )\n    sponsor_message.add_row(\n        \"CEO\",\n        \"[u blue link=https://twitter.com/willmcgugan]https://twitter.com/willmcgugan\",\n    )\n    sponsor_message.add_row(\n        \"Textualize\", \"[u blue link=https://www.textualize.io]https://www.textualize.io\"\n    )\n\n    message = Table.grid(padding=1)\n    message.add_column()\n    message.add_column(no_wrap=True)\n    message.add_row(sponsor_message)\n\n    message_panel = Panel(\n        Align.center(\n            Group(\"\\n\", Align.center(sponsor_message)),\n            vertical=\"middle\",\n        ),\n        box=box.ROUNDED,\n        padding=(1, 2),\n        title=\"[b red]Thanks for trying out Rich!\",\n        border_style=\"bright_blue\",\n    )\n    return message_panel\n\n\nclass Header:\n    \"\"\"Display header with clock.\"\"\"\n\n    def __rich__(self) -> Panel:\n        grid = Table.grid(expand=True)\n        grid.add_column(justify=\"center\", ratio=1)\n        grid.add_column(justify=\"right\")\n        grid.add_row(\n            \"[b]Rich[/b] Layout application\",\n            datetime.now().ctime().replace(\":\", \"[blink]:[/]\"),\n        )\n        return Panel(grid, style=\"white on blue\")\n\n\ndef make_syntax() -> Syntax:\n    code = \"\"\"\\\ndef ratio_resolve(total: int, edges: List[Edge]) -> List[int]:\n    sizes = [(edge.size or None) for edge in edges]\n\n    # While any edges haven't been calculated\n    while any(size is None for size in sizes):\n        # Get flexible edges and index to map these back on to sizes list\n        flexible_edges = [\n            (index, edge)\n            for index, (size, edge) in enumerate(zip(sizes, edges))\n            if size is None\n        ]\n        # Remaining space in total\n        remaining = total - sum(size or 0 for size in sizes)\n        if remaining <= 0:\n            # No room for flexible edges\n            sizes[:] = [(size or 0) for size in sizes]\n            break\n        # Calculate number of characters in a ratio portion\n        portion = remaining / sum((edge.ratio or 1) for _, edge in flexible_edges)\n\n        # If any edges will be less than their minimum, replace size with the minimum\n        for index, edge in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                break\n        else:\n            # Distribute flexible space and compensate for rounding error\n            # Since edge sizes can only be integers we need to add the remainder\n            # to the following line\n            _modf = modf\n            remainder = 0.0\n            for index, edge in flexible_edges:\n                remainder, size = _modf(portion * edge.ratio + remainder)\n                sizes[index] = int(size)\n            break\n    # Sizes now contains integers only\n    return cast(List[int], sizes)\n    \"\"\"\n    syntax = Syntax(code, \"python\", line_numbers=True)\n    return syntax\n\n\njob_progress = Progress(\n    \"{task.description}\",\n    SpinnerColumn(),\n    BarColumn(),\n    TextColumn(\"[progress.percentage]{task.percentage:>3.0f}%\"),\n)\njob_progress.add_task(\"[green]Cooking\")\njob_progress.add_task(\"[magenta]Baking\", total=200)\njob_progress.add_task(\"[cyan]Mixing\", total=400)\n\ntotal = sum(task.total for task in job_progress.tasks)\noverall_progress = Progress()\noverall_task = overall_progress.add_task(\"All Jobs\", total=int(total))\n\nprogress_table = Table.grid(expand=True)\nprogress_table.add_row(\n    Panel(\n        overall_progress,\n        title=\"Overall Progress\",\n        border_style=\"green\",\n        padding=(2, 2),\n    ),\n    Panel(job_progress, title=\"[b]Jobs\", border_style=\"red\", padding=(1, 2)),\n)\n\n\nlayout = make_layout()\nlayout[\"header\"].update(Header())\nlayout[\"body\"].update(make_sponsor_message())\nlayout[\"box2\"].update(Panel(make_syntax(), border_style=\"green\"))\nlayout[\"box1\"].update(Panel(layout.tree, border_style=\"red\"))\nlayout[\"footer\"].update(progress_table)\n\n\nfrom time import sleep\n\nfrom rich.live import Live\n\nwith Live(layout, refresh_per_second=10, screen=True):\n    while not overall_progress.finished:\n        sleep(0.1)\n        for job in job_progress.tasks:\n            if not job.finished:\n                job_progress.advance(job.id)\n\n        completed = sum(task.completed for task in job_progress.tasks)\n        overall_progress.update(overall_task, completed=completed)\n", "examples/log.py": "\"\"\"\nA simulation of Rich console logging.\n\"\"\"\n\nimport time\nfrom rich.console import Console\nfrom rich.style import Style\nfrom rich.theme import Theme\nfrom rich.highlighter import RegexHighlighter\n\n\nclass RequestHighlighter(RegexHighlighter):\n    base_style = \"req.\"\n    highlights = [\n        r\"^(?P<protocol>\\w+) (?P<method>\\w+) (?P<path>\\S+) (?P<result>\\w+) (?P<stats>\\[.+\\])$\",\n        r\"\\/(?P<filename>\\w+\\..{3,4})\",\n    ]\n\n\ntheme = Theme(\n    {\n        \"req.protocol\": Style.parse(\"dim bold green\"),\n        \"req.method\": Style.parse(\"bold cyan\"),\n        \"req.path\": Style.parse(\"magenta\"),\n        \"req.filename\": Style.parse(\"bright_magenta\"),\n        \"req.result\": Style.parse(\"yellow\"),\n        \"req.stats\": Style.parse(\"dim\"),\n    }\n)\nconsole = Console(theme=theme)\n\nconsole.log(\"Server starting...\")\nconsole.log(\"Serving on http://127.0.0.1:8000\")\n\ntime.sleep(1)\n\nrequest_highlighter = RequestHighlighter()\n\nconsole.log(\n    request_highlighter(\"HTTP GET /foo/bar/baz/egg.html 200 [0.57, 127.0.0.1:59076]\"),\n)\n\nconsole.log(\n    request_highlighter(\n        \"HTTP GET /foo/bar/baz/background.jpg 200 [0.57, 127.0.0.1:59076]\"\n    ),\n)\n\n\ntime.sleep(1)\n\n\ndef test_locals():\n    foo = (1, 2, 3)\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console = Console()\n\n    console.log(\n        \"[b]JSON[/b] RPC [i]batch[/i]\",\n        [\n            {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [1, 2, 4], \"id\": \"1\"},\n            {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n            {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n            {\"foo\": \"boo\"},\n            {\n                \"jsonrpc\": \"2.0\",\n                \"method\": \"foo.get\",\n                \"params\": {\"name\": \"myself\", \"enable\": False, \"grommits\": None},\n                \"id\": \"5\",\n            },\n            {\"jsonrpc\": \"2.0\", \"method\": \"get_data\", \"id\": \"9\"},\n        ],\n        log_locals=True,\n    )\n\n\ntest_locals()\n", "examples/overflow.py": "from typing import List\nfrom rich.console import Console, OverflowMethod\n\nconsole = Console(width=14)\nsupercali = \"supercalifragilisticexpialidocious\"\n\noverflow_methods: List[OverflowMethod] = [\"fold\", \"crop\", \"ellipsis\"]\nfor overflow in overflow_methods:\n    console.rule(overflow)\n    console.print(supercali, overflow=overflow, style=\"bold blue\")\n    console.print()\n", "examples/table_movie.py": "\"\"\"Same as the table_movie.py but uses Live to update\"\"\"\nimport time\nfrom contextlib import contextmanager\n\nfrom rich import box\nfrom rich.align import Align\nfrom rich.console import Console\nfrom rich.live import Live\nfrom rich.table import Table\nfrom rich.text import Text\n\nTABLE_DATA = [\n    [\n        \"May 25, 1977\",\n        \"Star Wars Ep. [b]IV[/]: [i]A New Hope\",\n        \"$11,000,000\",\n        \"$1,554,475\",\n        \"$775,398,007\",\n    ],\n    [\n        \"May 21, 1980\",\n        \"Star Wars Ep. [b]V[/]: [i]The Empire Strikes Back\",\n        \"$23,000,000\",\n        \"$4,910,483\",\n        \"$547,969,004\",\n    ],\n    [\n        \"May 25, 1983\",\n        \"Star Wars Ep. [b]VI[/b]: [i]Return of the Jedi\",\n        \"$32,500,000\",\n        \"$23,019,618\",\n        \"$475,106,177\",\n    ],\n    [\n        \"May 19, 1999\",\n        \"Star Wars Ep. [b]I[/b]: [i]The phantom Menace\",\n        \"$115,000,000\",\n        \"$64,810,870\",\n        \"$1,027,044,677\",\n    ],\n    [\n        \"May 16, 2002\",\n        \"Star Wars Ep. [b]II[/b]: [i]Attack of the Clones\",\n        \"$115,000,000\",\n        \"$80,027,814\",\n        \"$656,695,615\",\n    ],\n    [\n        \"May 19, 2005\",\n        \"Star Wars Ep. [b]III[/b]: [i]Revenge of the Sith\",\n        \"$115,500,000\",\n        \"$380,270,577\",\n        \"$848,998,877\",\n    ],\n]\n\nconsole = Console()\n\nBEAT_TIME = 0.04\n\n\n@contextmanager\ndef beat(length: int = 1) -> None:\n    yield\n    time.sleep(length * BEAT_TIME)\n\n\ntable = Table(show_footer=False)\ntable_centered = Align.center(table)\n\nconsole.clear()\n\nwith Live(table_centered, console=console, screen=False, refresh_per_second=20):\n    with beat(10):\n        table.add_column(\"Release Date\", no_wrap=True)\n\n    with beat(10):\n        table.add_column(\"Title\", Text.from_markup(\"[b]Total\", justify=\"right\"))\n\n    with beat(10):\n        table.add_column(\"Budget\", \"[u]$412,000,000\", no_wrap=True)\n\n    with beat(10):\n        table.add_column(\"Opening Weekend\", \"[u]$577,703,455\", no_wrap=True)\n\n    with beat(10):\n        table.add_column(\"Box Office\", \"[u]$4,331,212,357\", no_wrap=True)\n\n    with beat(10):\n        table.title = \"Star Wars Box Office\"\n\n    with beat(10):\n        table.title = (\n            \"[not italic]:popcorn:[/] Star Wars Box Office [not italic]:popcorn:[/]\"\n        )\n\n    with beat(10):\n        table.caption = \"Made with Rich\"\n\n    with beat(10):\n        table.caption = \"Made with [b]Rich[/b]\"\n\n    with beat(10):\n        table.caption = \"Made with [b magenta not dim]Rich[/]\"\n\n    for row in TABLE_DATA:\n        with beat(10):\n            table.add_row(*row)\n\n    with beat(10):\n        table.show_footer = True\n\n    table_width = console.measure(table).maximum\n\n    with beat(10):\n        table.columns[2].justify = \"right\"\n\n    with beat(10):\n        table.columns[3].justify = \"right\"\n\n    with beat(10):\n        table.columns[4].justify = \"right\"\n\n    with beat(10):\n        table.columns[2].header_style = \"bold red\"\n\n    with beat(10):\n        table.columns[3].header_style = \"bold green\"\n\n    with beat(10):\n        table.columns[4].header_style = \"bold blue\"\n\n    with beat(10):\n        table.columns[2].style = \"red\"\n\n    with beat(10):\n        table.columns[3].style = \"green\"\n\n    with beat(10):\n        table.columns[4].style = \"blue\"\n\n    with beat(10):\n        table.columns[0].style = \"cyan\"\n        table.columns[0].header_style = \"bold cyan\"\n\n    with beat(10):\n        table.columns[1].style = \"magenta\"\n        table.columns[1].header_style = \"bold magenta\"\n\n    with beat(10):\n        table.columns[2].footer_style = \"bright_red\"\n\n    with beat(10):\n        table.columns[3].footer_style = \"bright_green\"\n\n    with beat(10):\n        table.columns[4].footer_style = \"bright_blue\"\n\n    with beat(10):\n        table.row_styles = [\"none\", \"dim\"]\n\n    with beat(10):\n        table.border_style = \"bright_yellow\"\n\n    for box_style in [\n        box.SQUARE,\n        box.MINIMAL,\n        box.SIMPLE,\n        box.SIMPLE_HEAD,\n    ]:\n        with beat(10):\n            table.box = box_style\n\n    with beat(10):\n        table.pad_edge = False\n\n    original_width = console.measure(table).maximum\n\n    for width in range(original_width, console.width, 2):\n        with beat(1):\n            table.width = width\n\n    for width in range(console.width, original_width, -2):\n        with beat(1):\n            table.width = width\n\n    for width in range(original_width, 90, -2):\n        with beat(1):\n            table.width = width\n\n    for width in range(90, original_width + 1, 2):\n        with beat(1):\n            table.width = width\n\n    with beat(2):\n        table.width = None\n", "examples/bars.py": "\"\"\"\n\nUse Bar to renderer a sort-of circle.\n\n\"\"\"\nimport math\n\nfrom rich.align import Align\nfrom rich.bar import Bar\nfrom rich.color import Color\nfrom rich import print\n\n\nSIZE = 40\n\nfor row in range(SIZE):\n    y = (row / (SIZE - 1)) * 2 - 1\n    x = math.sqrt(1 - y * y)\n    color = Color.from_rgb((1 + y) * 127.5, 0, 0)\n    bar = Bar(2, width=SIZE * 2, begin=1 - x, end=1 + x, color=color)\n    print(Align.center(bar))\n", "examples/listdir.py": "\"\"\"\nA very simple `ls` clone.\n\nIf your terminal supports hyperlinks you should be able to launch files by clicking the filename\n(usually with cmd / ctrl).\n\n\"\"\"\n\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\nfrom rich.text import Text\n\ntry:\n    root_path = sys.argv[1]\nexcept IndexError:\n    print(\"Usage: python listdir.py DIRECTORY\")\nelse:\n\n    def make_filename_text(filename):\n        path = os.path.abspath(os.path.join(root_path, filename))\n        text = Text(filename, style=\"bold blue\" if os.path.isdir(path) else \"default\")\n        text.stylize(f\"link file://{path}\")\n        text.highlight_regex(r\"\\..*?$\", \"bold\")\n        return text\n\n    filenames = [\n        filename for filename in os.listdir(root_path) if not filename.startswith(\".\")\n    ]\n    filenames.sort(key=lambda filename: filename.lower())\n    filename_text = [make_filename_text(filename) for filename in filenames]\n    columns = Columns(filename_text, equal=True, column_first=True)\n    print(columns)\n", "examples/justify.py": "\"\"\"\nThis example demonstrates the justify argument to print.\n\"\"\"\n\nfrom rich.console import Console\n\nconsole = Console(width=20)\n\nstyle = \"bold white on blue\"\nconsole.print(\"Rich\", style=style)\nconsole.print(\"Rich\", style=style, justify=\"left\")\nconsole.print(\"Rich\", style=style, justify=\"center\")\nconsole.print(\"Rich\", style=style, justify=\"right\")\n", "examples/table.py": "\"\"\"\nDemonstrates how to render a table.\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\ntable = Table(title=\"Star Wars Movies\")\n\ntable.add_column(\"Released\", style=\"cyan\", no_wrap=True)\ntable.add_column(\"Title\", style=\"magenta\")\ntable.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\ntable.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\ntable.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\ntable.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\ntable.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\nconsole = Console()\nconsole.print(table, justify=\"center\")\n", "examples/highlighter.py": "\"\"\"\nThis example demonstrates a simple text highlighter.\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.highlighter import RegexHighlighter\nfrom rich.theme import Theme\n\n\nclass EmailHighlighter(RegexHighlighter):\n    \"\"\"Apply style to anything that looks like an email.\"\"\"\n\n    base_style = \"example.\"\n    highlights = [r\"(?P<email>[\\w-]+@([\\w-]+\\.)+[\\w-]+)\"]\n\n\ntheme = Theme({\"example.email\": \"bold magenta\"})\nconsole = Console(highlighter=EmailHighlighter(), theme=theme)\n\nconsole.print(\"Send funds to money@example.org\")\n", "examples/dynamic_progress.py": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "examples/screen.py": "\"\"\"\nDemonstration of Console.screen() \n\"\"\"\n\nfrom time import sleep\n\nfrom rich.align import Align\nfrom rich.console import Console\nfrom rich.panel import Panel\n\nconsole = Console()\n\nwith console.screen(style=\"bold white on red\") as screen:\n    text = Align.center(\"[blink]Don't Panic![/blink]\", vertical=\"middle\")\n    screen.update(Panel(text))\n    sleep(5)\n", "examples/group.py": "from rich import print\nfrom rich.console import Group\nfrom rich.panel import Panel\n\npanel_group = Group(\n    Panel(\"Hello\", style=\"on blue\"),\n    Panel(\"World\", style=\"on red\"),\n)\nprint(Panel(panel_group))\n", "examples/file_progress.py": "from time import sleep\nfrom urllib.request import urlopen\n\nfrom rich.progress import wrap_file\n\n# Read a URL with urlopen\nresponse = urlopen(\"https://www.textualize.io\")\n# Get the size from the headers\nsize = int(response.headers[\"Content-Length\"])\n\n# Wrap the response so that it update progress\n\nwith wrap_file(response, size) as file:\n    for line in file:\n        print(line.decode(\"utf-8\"), end=\"\")\n        sleep(0.1)\n", "examples/recursive_error.py": "\"\"\"\n\nDemonstrates Rich tracebacks for recursion errors.\n\nRich can exclude frames in the middle to avoid huge tracebacks.\n\n\"\"\"\n\nfrom rich.console import Console\n\n\ndef foo(n):\n    return bar(n)\n\n\ndef bar(n):\n    return foo(n)\n\n\nconsole = Console()\n\ntry:\n    foo(1)\nexcept Exception:\n    console.print_exception(max_frames=20)\n", "examples/padding.py": "from rich import print\nfrom rich.padding import Padding\n\ntest = Padding(\"Hello\", (2, 4), style=\"on blue\", expand=False)\nprint(test)\n", "examples/group2.py": "from rich import print\nfrom rich.console import group\nfrom rich.panel import Panel\n\n\n@group()\ndef get_panels():\n    yield Panel(\"Hello\", style=\"on blue\")\n    yield Panel(\"World\", style=\"on red\")\n\n\nprint(Panel(get_panels()))\n", "examples/repr.py": "import rich.repr\n\n\n@rich.repr.auto\nclass Bird:\n    def __init__(self, name, eats=None, fly=True, extinct=False):\n        self.name = name\n        self.eats = list(eats) if eats else []\n        self.fly = fly\n        self.extinct = extinct\n\n\n# Note that the repr is still generated without Rich\n# Try commenting out the following line\n\nfrom rich import print\n\nBIRDS = {\n    \"gull\": Bird(\"gull\", eats=[\"fish\", \"chips\", \"ice cream\", \"sausage rolls\"]),\n    \"penguin\": Bird(\"penguin\", eats=[\"fish\"], fly=False),\n    \"dodo\": Bird(\"dodo\", eats=[\"fruit\"], fly=False, extinct=True),\n}\nprint(BIRDS)\n", "examples/attrs.py": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "examples/save_table_svg.py": "\"\"\"\nDemonstrates how to export a SVG\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\ntable = Table(title=\"Star Wars Movies\")\n\ntable.add_column(\"Released\", style=\"cyan\", no_wrap=True)\ntable.add_column(\"Title\", style=\"magenta\")\ntable.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\ntable.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\ntable.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\ntable.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\ntable.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\nconsole = Console(record=True)\nconsole.print(table, justify=\"center\")\nconsole.save_svg(\"table.svg\", title=\"save_table_svg.py\")\n\nimport os\nimport webbrowser\n\nwebbrowser.open(f\"file://{os.path.abspath('table.svg')}\")\n", "examples/cp_progress.py": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "examples/suppress.py": "try:\n    import click\nexcept ImportError:\n    print(\"Please install click for this example\")\n    print(\"    pip install click\")\n    exit()\n\nfrom rich.traceback import install\n\ninstall(suppress=[click])\n\n\n@click.command()\n@click.option(\"--count\", default=1, help=\"Number of greetings.\")\ndef hello(count):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    1 / 0\n    for x in range(count):\n        click.echo(f\"Hello {name}!\")\n\n\nif __name__ == \"__main__\":\n    hello()\n", "examples/justify2.py": "\"\"\"\nThis example demonstrates the justify argument to print.\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.panel import Panel\n\nconsole = Console(width=20)\n\nstyle = \"bold white on blue\"\npanel = Panel(\"Rich\", style=\"on red\", expand=False)\nconsole.print(panel, style=style)\nconsole.print(panel, style=style, justify=\"left\")\nconsole.print(panel, style=style, justify=\"center\")\nconsole.print(panel, style=style, justify=\"right\")\n", "examples/layout.py": "\"\"\"\n\nDemonstrates a dynamic Layout\n\n\"\"\"\n\nfrom datetime import datetime\n\nfrom time import sleep\n\nfrom rich.align import Align\nfrom rich.console import Console\nfrom rich.layout import Layout\nfrom rich.live import Live\nfrom rich.text import Text\n\nconsole = Console()\nlayout = Layout()\n\nlayout.split(\n    Layout(name=\"header\", size=1),\n    Layout(ratio=1, name=\"main\"),\n    Layout(size=10, name=\"footer\"),\n)\n\nlayout[\"main\"].split_row(Layout(name=\"side\"), Layout(name=\"body\", ratio=2))\n\nlayout[\"side\"].split(Layout(), Layout())\n\nlayout[\"body\"].update(\n    Align.center(\n        Text(\n            \"\"\"This is a demonstration of rich.Layout\\n\\nHit Ctrl+C to exit\"\"\",\n            justify=\"center\",\n        ),\n        vertical=\"middle\",\n    )\n)\n\n\nclass Clock:\n    \"\"\"Renders the time in the center of the screen.\"\"\"\n\n    def __rich__(self) -> Text:\n        return Text(datetime.now().ctime(), style=\"bold magenta\", justify=\"center\")\n\n\nlayout[\"header\"].update(Clock())\n\nwith Live(layout, screen=True, redirect_stderr=False) as live:\n    try:\n        while True:\n            sleep(1)\n    except KeyboardInterrupt:\n        pass\n", "examples/link.py": "from rich import print\n\nprint(\"If your terminal supports links, the following text should be clickable:\")\nprint(\"[link=https://www.willmcgugan.com][i]Visit [red]my[/red][/i] [yellow]Blog[/]\")\n", "examples/top_lite_simulator.py": "\"\"\"Lite simulation of the top linux command.\"\"\"\nimport datetime\nimport random\nimport sys\nimport time\nfrom dataclasses import dataclass\n\nfrom rich import box\nfrom rich.console import Console\nfrom rich.live import Live\nfrom rich.table import Table\n\nif sys.version_info >= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal\n\n\n@dataclass\nclass Process:\n    pid: int\n    command: str\n    cpu_percent: float\n    memory: int\n    start_time: datetime.datetime\n    thread_count: int\n    state: Literal[\"running\", \"sleeping\"]\n\n    @property\n    def memory_str(self) -> str:\n        if self.memory > 1e6:\n            return f\"{int(self.memory/1e6)}M\"\n        if self.memory > 1e3:\n            return f\"{int(self.memory/1e3)}K\"\n        return str(self.memory)\n\n    @property\n    def time_str(self) -> str:\n        return str(datetime.datetime.now() - self.start_time)\n\n\ndef generate_process(pid: int) -> Process:\n    return Process(\n        pid=pid,\n        command=f\"Process {pid}\",\n        cpu_percent=random.random() * 20,\n        memory=random.randint(10, 200) ** 3,\n        start_time=datetime.datetime.now()\n        - datetime.timedelta(seconds=random.randint(0, 500) ** 2),\n        thread_count=random.randint(1, 32),\n        state=\"running\" if random.randint(0, 10) < 8 else \"sleeping\",\n    )\n\n\ndef create_process_table(height: int) -> Table:\n    processes = sorted(\n        [generate_process(pid) for pid in range(height)],\n        key=lambda p: p.cpu_percent,\n        reverse=True,\n    )\n    table = Table(\n        \"PID\", \"Command\", \"CPU %\", \"Memory\", \"Time\", \"Thread #\", \"State\", box=box.SIMPLE\n    )\n\n    for process in processes:\n        table.add_row(\n            str(process.pid),\n            process.command,\n            f\"{process.cpu_percent:.1f}\",\n            process.memory_str,\n            process.time_str,\n            str(process.thread_count),\n            process.state,\n        )\n\n    return table\n\n\nconsole = Console()\n\nwith Live(console=console, screen=True, auto_refresh=False) as live:\n    while True:\n        live.update(create_process_table(console.size.height - 4), refresh=True)\n        time.sleep(1)\n", "examples/export.py": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "examples/status.py": "from time import sleep\nfrom rich.console import Console\n\nconsole = Console()\nconsole.print()\n\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n", "examples/rainbow.py": "\"\"\"\n\nThis example demonstrates how to write a custom highlighter.\n\n\"\"\"\n\nfrom random import randint\n\nfrom rich import print\nfrom rich.highlighter import Highlighter\n\n\nclass RainbowHighlighter(Highlighter):\n    def highlight(self, text):\n        for index in range(len(text)):\n            text.stylize(f\"color({randint(16, 255)})\", index, index + 1)\n\n\nrainbow = RainbowHighlighter()\nprint(rainbow(\"I must not fear. Fear is the mind-killer.\"))\n", "examples/downloader.py": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"\u2022\",\n    DownloadColumn(),\n    \"\u2022\",\n    TransferSpeedColumn(),\n    \"\u2022\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/20.04/ubuntu-20.04.3-desktop-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "examples/live_progress.py": "\"\"\"\n\nDemonstrates the use of multiple Progress instances in a single Live display.    \n\n\"\"\"\n\nfrom time import sleep\n\nfrom rich.live import Live\nfrom rich.panel import Panel\nfrom rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn\nfrom rich.table import Table\n\n\njob_progress = Progress(\n    \"{task.description}\",\n    SpinnerColumn(),\n    BarColumn(),\n    TextColumn(\"[progress.percentage]{task.percentage:>3.0f}%\"),\n)\njob1 = job_progress.add_task(\"[green]Cooking\")\njob2 = job_progress.add_task(\"[magenta]Baking\", total=200)\njob3 = job_progress.add_task(\"[cyan]Mixing\", total=400)\n\ntotal = sum(task.total for task in job_progress.tasks)\noverall_progress = Progress()\noverall_task = overall_progress.add_task(\"All Jobs\", total=int(total))\n\nprogress_table = Table.grid()\nprogress_table.add_row(\n    Panel.fit(\n        overall_progress, title=\"Overall Progress\", border_style=\"green\", padding=(2, 2)\n    ),\n    Panel.fit(job_progress, title=\"[b]Jobs\", border_style=\"red\", padding=(1, 2)),\n)\n\nwith Live(progress_table, refresh_per_second=10):\n    while not overall_progress.finished:\n        sleep(0.1)\n        for job in job_progress.tasks:\n            if not job.finished:\n                job_progress.advance(job.id)\n\n        completed = sum(task.completed for task in job_progress.tasks)\n        overall_progress.update(overall_task, completed=completed)\n", "examples/spinners.py": "from time import sleep\n\nfrom rich.columns import Columns\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.text import Text\nfrom rich.spinner import Spinner, SPINNERS\n\nall_spinners = Columns(\n    [\n        Spinner(spinner_name, text=Text(repr(spinner_name), style=\"green\"))\n        for spinner_name in sorted(SPINNERS)\n    ],\n    column_first=True,\n    expand=True,\n)\n\nwith Live(\n    Panel(all_spinners, title=\"Spinners\", border_style=\"blue\"),\n    refresh_per_second=20,\n) as live:\n    while True:\n        sleep(0.1)\n", "examples/tree.py": "\"\"\"\nDemonstrates how to display a tree of files / directories with the Tree renderable.\n\"\"\"\n\nimport os\nimport pathlib\nimport sys\n\nfrom rich import print\nfrom rich.filesize import decimal\nfrom rich.markup import escape\nfrom rich.text import Text\nfrom rich.tree import Tree\n\n\ndef walk_directory(directory: pathlib.Path, tree: Tree) -> None:\n    \"\"\"Recursively build a Tree with directory contents.\"\"\"\n    # Sort dirs first then by filename\n    paths = sorted(\n        pathlib.Path(directory).iterdir(),\n        key=lambda path: (path.is_file(), path.name.lower()),\n    )\n    for path in paths:\n        # Remove hidden files\n        if path.name.startswith(\".\"):\n            continue\n        if path.is_dir():\n            style = \"dim\" if path.name.startswith(\"__\") else \"\"\n            branch = tree.add(\n                f\"[bold magenta]:open_file_folder: [link file://{path}]{escape(path.name)}\",\n                style=style,\n                guide_style=style,\n            )\n            walk_directory(path, branch)\n        else:\n            text_filename = Text(path.name, \"green\")\n            text_filename.highlight_regex(r\"\\..*$\", \"bold red\")\n            text_filename.stylize(f\"link file://{path}\")\n            file_size = path.stat().st_size\n            text_filename.append(f\" ({decimal(file_size)})\", \"blue\")\n            icon = \"\ud83d\udc0d \" if path.suffix == \".py\" else \"\ud83d\udcc4 \"\n            tree.add(Text(icon) + text_filename)\n\n\ntry:\n    directory = os.path.abspath(sys.argv[1])\nexcept IndexError:\n    print(\"[b]Usage:[/] python tree.py <DIRECTORY>\")\nelse:\n    tree = Tree(\n        f\":open_file_folder: [link file://{directory}]{directory}\",\n        guide_style=\"bold bright_blue\",\n    )\n    walk_directory(pathlib.Path(directory), tree)\n    print(tree)\n"}