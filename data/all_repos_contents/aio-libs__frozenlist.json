{"frozenlist/__init__.py": "import os\nimport sys\nimport types\nfrom collections.abc import MutableSequence\nfrom functools import total_ordering\nfrom typing import Any, Type\n\n__version__ = \"1.4.2.dev0\"\n\n__all__ = (\"FrozenList\", \"PyFrozenList\")  # type: Tuple[str, ...]\n\n\nNO_EXTENSIONS = bool(os.environ.get(\"FROZENLIST_NO_EXTENSIONS\"))  # type: bool\n\n\n@total_ordering\nclass FrozenList(MutableSequence):\n    __slots__ = (\"_frozen\", \"_items\")\n\n    if sys.version_info >= (3, 9):\n        __class_getitem__ = classmethod(types.GenericAlias)\n    else:\n\n        @classmethod\n        def __class_getitem__(\n            cls: Type[\"FrozenList\"],\n            cls_item: Any,\n        ) -> Type[\"FrozenList\"]:\n            return cls\n\n    def __init__(self, items=None):\n        self._frozen = False\n        if items is not None:\n            items = list(items)\n        else:\n            items = []\n        self._items = items\n\n    @property\n    def frozen(self):\n        return self._frozen\n\n    def freeze(self):\n        self._frozen = True\n\n    def __getitem__(self, index):\n        return self._items[index]\n\n    def __setitem__(self, index, value):\n        if self._frozen:\n            raise RuntimeError(\"Cannot modify frozen list.\")\n        self._items[index] = value\n\n    def __delitem__(self, index):\n        if self._frozen:\n            raise RuntimeError(\"Cannot modify frozen list.\")\n        del self._items[index]\n\n    def __len__(self):\n        return self._items.__len__()\n\n    def __iter__(self):\n        return self._items.__iter__()\n\n    def __reversed__(self):\n        return self._items.__reversed__()\n\n    def __eq__(self, other):\n        return list(self) == other\n\n    def __le__(self, other):\n        return list(self) <= other\n\n    def insert(self, pos, item):\n        if self._frozen:\n            raise RuntimeError(\"Cannot modify frozen list.\")\n        self._items.insert(pos, item)\n\n    def __repr__(self):\n        return f\"<FrozenList(frozen={self._frozen}, {self._items!r})>\"\n\n    def __hash__(self):\n        if self._frozen:\n            return hash(tuple(self))\n        else:\n            raise RuntimeError(\"Cannot hash unfrozen list.\")\n\n\nPyFrozenList = FrozenList\n\n\nif not NO_EXTENSIONS:\n    try:\n        from ._frozenlist import FrozenList as CFrozenList  # type: ignore\n    except ImportError:  # pragma: no cover\n        pass\n    else:\n        FrozenList = CFrozenList  # type: ignore\n", "packaging/pep517_backend/_backend.py": "# fmt: off\n\"\"\"PEP 517 build backend wrapper for pre-building Cython for wheel.\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport typing as t\nfrom contextlib import contextmanager, nullcontext, suppress\nfrom pathlib import Path\nfrom shutil import copytree\nfrom sys import implementation as _system_implementation\nfrom sys import stderr as _standard_error_stream\nfrom sys import version_info as _python_version_tuple\nfrom tempfile import TemporaryDirectory\nfrom warnings import warn as _warn_that\n\nfrom setuptools.build_meta import build_sdist as _setuptools_build_sdist\nfrom setuptools.build_meta import build_wheel as _setuptools_build_wheel\nfrom setuptools.build_meta import (\n    get_requires_for_build_wheel as _setuptools_get_requires_for_build_wheel,\n)\nfrom setuptools.build_meta import (\n    prepare_metadata_for_build_wheel as _setuptools_prepare_metadata_for_build_wheel,\n)\n\ntry:\n    from setuptools.build_meta import build_editable as _setuptools_build_editable\nexcept ImportError:\n    _setuptools_build_editable = None  # type: ignore[assignment]\n\n\n# isort: split\nfrom distutils.command.install import install as _distutils_install_cmd\nfrom distutils.core import Distribution as _DistutilsDistribution\nfrom distutils.dist import DistributionMetadata as _DistutilsDistributionMetadata\n\nwith suppress(ImportError):\n    # NOTE: Only available for wheel builds that bundle C-extensions. Declared\n    # NOTE: by `get_requires_for_build_wheel()` and\n    # NOTE: `get_requires_for_build_editable()`, when `pure-python`\n    # NOTE: is not passed.\n    from Cython.Build.Cythonize import main as _cythonize_cli_cmd\n\nfrom ._compat import chdir_cm\nfrom ._cython_configuration import (  # noqa: WPS436\n    get_local_cython_config as _get_local_cython_config,\n)\nfrom ._cython_configuration import (\n    make_cythonize_cli_args_from_config as _make_cythonize_cli_args_from_config,\n)\nfrom ._cython_configuration import patched_env as _patched_cython_env\nfrom ._transformers import sanitize_rst_roles  # noqa: WPS436\n\n__all__ = (  # noqa: WPS410\n    'build_sdist',\n    'build_wheel',\n    'get_requires_for_build_wheel',\n    'prepare_metadata_for_build_wheel',\n    *(\n        () if _setuptools_build_editable is None\n        else (\n            'build_editable',\n            'get_requires_for_build_editable',\n            'prepare_metadata_for_build_editable',\n        )\n    ),\n)\n\n\nCYTHON_TRACING_CONFIG_SETTING = 'with-cython-tracing'\n\"\"\"Config setting name toggle to include line tracing to C-exts.\"\"\"\n\nCYTHON_TRACING_ENV_VAR = 'FROZENLIST_CYTHON_TRACING'\n\"\"\"Environment variable name toggle used to opt out of making C-exts.\"\"\"\n\nPURE_PYTHON_CONFIG_SETTING = 'pure-python'\n\"\"\"Config setting name toggle that is used to opt out of making C-exts.\"\"\"\n\nPURE_PYTHON_ENV_VAR = 'FROZENLIST_NO_EXTENSIONS'\n\"\"\"Environment variable name toggle used to opt out of making C-exts.\"\"\"\n\nIS_PY3_12_PLUS = _python_version_tuple[:2] >= (3, 12)\n\"\"\"A flag meaning that the current runtime is Python 3.12 or higher.\"\"\"\n\nIS_CPYTHON = _system_implementation.name == \"cpython\"\n\"\"\"A flag meaning that the current interpreter implementation is CPython.\"\"\"\n\nPURE_PYTHON_MODE_CLI_FALLBACK = not IS_CPYTHON\n\"\"\"A fallback for ``pure-python`` is not set.\"\"\"\n\n\ndef _is_truthy_setting_value(setting_value) -> bool:\n    truthy_values = {'', None, 'true', '1', 'on'}\n    return setting_value.lower() in truthy_values\n\n\ndef _get_setting_value(\n        config_settings: dict[str, str] | None = None,\n        config_setting_name: str | None = None,\n        env_var_name: str | None = None,\n        *,\n        default: bool = False,\n) -> bool:\n    user_provided_setting_sources = (\n        (config_settings, config_setting_name, (KeyError, TypeError)),\n        (os.environ, env_var_name, KeyError),\n    )\n    for src_mapping, src_key, lookup_errors in user_provided_setting_sources:\n        if src_key is None:\n            continue\n\n        with suppress(lookup_errors):  # type: ignore[arg-type]\n            return _is_truthy_setting_value(src_mapping[src_key])  # type: ignore[index]\n\n    return default\n\n\ndef _make_pure_python(config_settings: dict[str, str] | None = None) -> bool:\n    return _get_setting_value(\n        config_settings,\n        PURE_PYTHON_CONFIG_SETTING,\n        PURE_PYTHON_ENV_VAR,\n        default=PURE_PYTHON_MODE_CLI_FALLBACK,\n    )\n\n\ndef _include_cython_line_tracing(\n        config_settings: dict[str, str] | None = None,\n        *,\n        default=False,\n) -> bool:\n    return _get_setting_value(\n        config_settings,\n        CYTHON_TRACING_CONFIG_SETTING,\n        CYTHON_TRACING_ENV_VAR,\n        default=default,\n    )\n\n\n@contextmanager\ndef patched_distutils_cmd_install():\n    \"\"\"Make `install_lib` of `install` cmd always use `platlib`.\n\n    :yields: None\n    \"\"\"\n    # Without this, build_lib puts stuff under `*.data/purelib/` folder\n    orig_finalize = _distutils_install_cmd.finalize_options\n\n    def new_finalize_options(self):  # noqa: WPS430\n        self.install_lib = self.install_platlib\n        orig_finalize(self)\n\n    _distutils_install_cmd.finalize_options = new_finalize_options\n    try:\n        yield\n    finally:\n        _distutils_install_cmd.finalize_options = orig_finalize\n\n\n@contextmanager\ndef patched_dist_has_ext_modules():\n    \"\"\"Make `has_ext_modules` of `Distribution` always return `True`.\n\n    :yields: None\n    \"\"\"\n    # Without this, build_lib puts stuff under `*.data/platlib/` folder\n    orig_func = _DistutilsDistribution.has_ext_modules\n\n    _DistutilsDistribution.has_ext_modules = lambda *args, **kwargs: True\n    try:\n        yield\n    finally:\n        _DistutilsDistribution.has_ext_modules = orig_func\n\n\n@contextmanager\ndef patched_dist_get_long_description():\n    \"\"\"Make `has_ext_modules` of `Distribution` always return `True`.\n\n    :yields: None\n    \"\"\"\n    # Without this, build_lib puts stuff under `*.data/platlib/` folder\n    _orig_func = _DistutilsDistributionMetadata.get_long_description\n\n    def _get_sanitized_long_description(self):\n        return sanitize_rst_roles(self.long_description)\n\n    _DistutilsDistributionMetadata.get_long_description = (\n        _get_sanitized_long_description\n    )\n    try:\n        yield\n    finally:\n        _DistutilsDistributionMetadata.get_long_description = _orig_func\n\n\n@contextmanager\ndef _in_temporary_directory(src_dir: Path) -> t.Iterator[None]:\n    with TemporaryDirectory(prefix='.tmp-frozenlist-pep517-') as tmp_dir:\n        with chdir_cm(tmp_dir):\n            tmp_src_dir = Path(tmp_dir) / 'src'\n            copytree(src_dir, tmp_src_dir, symlinks=True)\n            os.chdir(tmp_src_dir)\n            yield\n\n\n@contextmanager\ndef maybe_prebuild_c_extensions(\n        line_trace_cython_when_unset: bool = False,\n        build_inplace: bool = False,\n        config_settings: dict[str, str] | None = None,\n) -> t.Generator[None, t.Any, t.Any]:\n    \"\"\"Pre-build C-extensions in a temporary directory, when needed.\n\n    This context manager also patches metadata, setuptools and distutils.\n\n    :param build_inplace: Whether to copy and chdir to a temporary location.\n    :param config_settings: :pep:`517` config settings mapping.\n\n    \"\"\"\n    cython_line_tracing_requested = _include_cython_line_tracing(\n        config_settings,\n        default=line_trace_cython_when_unset,\n    )\n    is_pure_python_build = _make_pure_python(config_settings)\n\n    if is_pure_python_build:\n        print(\"*********************\", file=_standard_error_stream)\n        print(\"* Pure Python build *\", file=_standard_error_stream)\n        print(\"*********************\", file=_standard_error_stream)\n\n        if cython_line_tracing_requested:\n            _warn_that(\n                f'The `{CYTHON_TRACING_CONFIG_SETTING !s}` setting requesting '\n                'Cython line tracing is set, but building C-extensions is not. '\n                'This option will not have any effect for in the pure-python '\n                'build mode.',\n                RuntimeWarning,\n                stacklevel=999,\n            )\n\n        yield\n        return\n\n    print(\"**********************\", file=_standard_error_stream)\n    print(\"* Accelerated build *\", file=_standard_error_stream)\n    print(\"**********************\", file=_standard_error_stream)\n    if not IS_CPYTHON:\n        _warn_that(\n            'Building C-extensions under the runtimes other than CPython is '\n            'unsupported and will likely fail. Consider passing the '\n            f'`{PURE_PYTHON_CONFIG_SETTING !s}` PEP 517 config setting.',\n            RuntimeWarning,\n            stacklevel=999,\n        )\n\n    build_dir_ctx = (\n        nullcontext() if build_inplace\n        else _in_temporary_directory(src_dir=Path.cwd().resolve())\n    )\n    with build_dir_ctx:\n        config = _get_local_cython_config()\n\n        cythonize_args = _make_cythonize_cli_args_from_config(config)\n        with _patched_cython_env(config['env'], cython_line_tracing_requested):\n            _cythonize_cli_cmd(cythonize_args)\n        with patched_distutils_cmd_install():\n            with patched_dist_has_ext_modules():\n                yield\n\n\n@patched_dist_get_long_description()\ndef build_wheel(\n        wheel_directory: str,\n        config_settings: dict[str, str] | None = None,\n        metadata_directory: str | None = None,\n) -> str:\n    \"\"\"Produce a built wheel.\n\n    This wraps the corresponding ``setuptools``' build backend hook.\n\n    :param wheel_directory: Directory to put the resulting wheel in.\n    :param config_settings: :pep:`517` config settings mapping.\n    :param metadata_directory: :file:`.dist-info` directory path.\n\n    \"\"\"\n    with maybe_prebuild_c_extensions(\n            line_trace_cython_when_unset=False,\n            build_inplace=False,\n            config_settings=config_settings,\n    ):\n        return _setuptools_build_wheel(\n            wheel_directory=wheel_directory,\n            config_settings=config_settings,\n            metadata_directory=metadata_directory,\n        )\n\n\n@patched_dist_get_long_description()\ndef build_editable(\n        wheel_directory: str,\n        config_settings: dict[str, str] | None = None,\n        metadata_directory: str | None = None,\n) -> str:\n    \"\"\"Produce a built wheel for editable installs.\n\n    This wraps the corresponding ``setuptools``' build backend hook.\n\n    :param wheel_directory: Directory to put the resulting wheel in.\n    :param config_settings: :pep:`517` config settings mapping.\n    :param metadata_directory: :file:`.dist-info` directory path.\n\n    \"\"\"\n    with maybe_prebuild_c_extensions(\n            line_trace_cython_when_unset=True,\n            build_inplace=True,\n            config_settings=config_settings,\n    ):\n        return _setuptools_build_editable(\n            wheel_directory=wheel_directory,\n            config_settings=config_settings,\n            metadata_directory=metadata_directory,\n        )\n\n\ndef get_requires_for_build_wheel(\n        config_settings: dict[str, str] | None = None,\n) -> list[str]:\n    \"\"\"Determine additional requirements for building wheels.\n\n    :param config_settings: :pep:`517` config settings mapping.\n\n    \"\"\"\n    is_pure_python_build = _make_pure_python(config_settings)\n\n    if not is_pure_python_build and not IS_CPYTHON:\n        _warn_that(\n            'Building C-extensions under the runtimes other than CPython is '\n            'unsupported and will likely fail. Consider passing the '\n            f'`{PURE_PYTHON_CONFIG_SETTING !s}` PEP 517 config setting.',\n            RuntimeWarning,\n            stacklevel=999,\n        )\n\n    c_ext_build_deps = [] if is_pure_python_build else [\n        'Cython >= 3.0.0b3' if IS_PY3_12_PLUS  # Only Cython 3+ is compatible\n        else 'Cython',\n    ]\n\n    return _setuptools_get_requires_for_build_wheel(\n        config_settings=config_settings,\n    ) + c_ext_build_deps\n\n\nbuild_sdist = patched_dist_get_long_description()(_setuptools_build_sdist)\nget_requires_for_build_editable = get_requires_for_build_wheel\nprepare_metadata_for_build_wheel = patched_dist_get_long_description()(\n    _setuptools_prepare_metadata_for_build_wheel,\n)\nprepare_metadata_for_build_editable = prepare_metadata_for_build_wheel\n", "packaging/pep517_backend/cli.py": "# fmt: off\n\nfrom __future__ import annotations\n\nimport sys\nfrom itertools import chain\nfrom pathlib import Path\n\nfrom Cython.Compiler.Main import compile as _translate_cython_cli_cmd\nfrom Cython.Compiler.Main import parse_command_line as _split_cython_cli_args\n\nfrom ._cython_configuration import get_local_cython_config as _get_local_cython_config\nfrom ._cython_configuration import (\n    make_cythonize_cli_args_from_config as _make_cythonize_cli_args_from_config,\n)\nfrom ._cython_configuration import patched_env as _patched_cython_env\n\n_PROJECT_PATH = Path(__file__).parents[2]\n\n\ndef run_main_program(argv) -> int | str:\n    \"\"\"Invoke ``translate-cython`` or fail.\"\"\"\n    if len(argv) != 2:\n        return 'This program only accepts one argument -- \"translate-cython\"'\n\n    if argv[1] != 'translate-cython':\n        return 'This program only implements the \"translate-cython\" subcommand'\n\n    config = _get_local_cython_config()\n    config['flags'] = {'keep-going': config['flags']['keep-going']}\n    config['src'] = list(\n        map(\n            str,\n            chain.from_iterable(\n                map(_PROJECT_PATH.glob, config['src']),\n            ),\n        ),\n    )\n    translate_cython_cli_args = _make_cythonize_cli_args_from_config(config)\n\n    cython_options, cython_sources = _split_cython_cli_args(\n        translate_cython_cli_args,\n    )\n\n    with _patched_cython_env(config['env'], cython_line_tracing_requested=True):\n        return _translate_cython_cli_cmd(\n            cython_sources,\n            cython_options,\n        ).num_errors\n\n\nif __name__ == '__main__':\n    sys.exit(run_main_program(argv=sys.argv))\n", "packaging/pep517_backend/_transformers.py": "\"\"\"Data conversion helpers for the in-tree PEP 517 build backend.\"\"\"\n\nfrom itertools import chain\nfrom re import sub as _substitute_with_regexp\n\n\ndef _emit_opt_pairs(opt_pair):\n    flag, flag_value = opt_pair\n    flag_opt = f\"--{flag!s}\"\n    if isinstance(flag_value, dict):\n        sub_pairs = flag_value.items()\n    else:\n        sub_pairs = ((flag_value,),)\n\n    yield from (\"=\".join(map(str, (flag_opt,) + pair)) for pair in sub_pairs)\n\n\ndef get_cli_kwargs_from_config(kwargs_map):\n    \"\"\"Make a list of options with values from config.\"\"\"\n    return list(chain.from_iterable(map(_emit_opt_pairs, kwargs_map.items())))\n\n\ndef get_enabled_cli_flags_from_config(flags_map):\n    \"\"\"Make a list of enabled boolean flags from config.\"\"\"\n    return [f\"--{flag}\" for flag, is_enabled in flags_map.items() if is_enabled]\n\n\ndef sanitize_rst_roles(rst_source_text: str) -> str:\n    \"\"\"Replace RST roles with inline highlighting.\"\"\"\n    pep_role_regex = r\"\"\"(?x)\n        :pep:`(?P<pep_number>\\d+)`\n    \"\"\"\n    pep_substitution_pattern = (\n        r\"`PEP \\g<pep_number> <https://peps.python.org/pep-\\g<pep_number>>`__\"\n    )\n\n    user_role_regex = r\"\"\"(?x)\n        :user:`(?P<github_username>[^`]+)(?:\\s+(.*))?`\n    \"\"\"\n    user_substitution_pattern = (\n        r\"`@\\g<github_username> \"\n        r\"<https://github.com/sponsors/\\g<github_username>>`__\"\n    )\n\n    issue_role_regex = r\"\"\"(?x)\n        :issue:`(?P<issue_number>[^`]+)(?:\\s+(.*))?`\n    \"\"\"\n    issue_substitution_pattern = (\n        r\"`#\\g<issue_number> \"\n        r\"<https://github.com/aio-libs/frozenlist/issues/\\g<issue_number>>`__\"\n    )\n\n    pr_role_regex = r\"\"\"(?x)\n        :pr:`(?P<pr_number>[^`]+)(?:\\s+(.*))?`\n    \"\"\"\n    pr_substitution_pattern = (\n        r\"`PR #\\g<pr_number> \"\n        r\"<https://github.com/aio-libs/frozenlist/pull/\\g<pr_number>>`__\"\n    )\n\n    commit_role_regex = r\"\"\"(?x)\n        :commit:`(?P<commit_sha>[^`]+)(?:\\s+(.*))?`\n    \"\"\"\n    commit_substitution_pattern = (\n        r\"`\\g<commit_sha> \"\n        r\"<https://github.com/aio-libs/frozenlist/commit/\\g<commit_sha>>`__\"\n    )\n\n    gh_role_regex = r\"\"\"(?x)\n        :gh:`(?P<gh_slug>[^`]+)(?:\\s+(.*))?`\n    \"\"\"\n    gh_substitution_pattern = (\n        r\"`GitHub: \\g<gh_slug> <https://github.com/\\g<gh_slug>>`__\"\n    )\n\n    meth_role_regex = r\"\"\"(?x)\n        (?::py)?:meth:`~?(?P<rendered_text>[^`<]+)(?:\\s+([^`]*))?`\n    \"\"\"\n    meth_substitution_pattern = r\"``\\g<rendered_text>()``\"\n\n    role_regex = r\"\"\"(?x)\n        (?::\\w+)?:\\w+:`(?P<rendered_text>[^`<]+)(?:\\s+([^`]*))?`\n    \"\"\"\n    substitution_pattern = r\"``\\g<rendered_text>``\"\n\n    substitutions = (\n        (pep_role_regex, pep_substitution_pattern),\n        (user_role_regex, user_substitution_pattern),\n        (issue_role_regex, issue_substitution_pattern),\n        (pr_role_regex, pr_substitution_pattern),\n        (commit_role_regex, commit_substitution_pattern),\n        (gh_role_regex, gh_substitution_pattern),\n        (meth_role_regex, meth_substitution_pattern),\n        (role_regex, substitution_pattern),\n    )\n\n    rst_source_normalized_text = rst_source_text\n    for regex, substitution in substitutions:\n        rst_source_normalized_text = _substitute_with_regexp(\n            regex,\n            substitution,\n            rst_source_normalized_text,\n        )\n\n    return rst_source_normalized_text\n", "packaging/pep517_backend/_cython_configuration.py": "# fmt: off\n\nfrom __future__ import annotations\n\nimport os\nfrom contextlib import contextmanager\nfrom pathlib import Path\nfrom sys import version_info as _python_version_tuple\n\nfrom expandvars import expandvars\n\nfrom ._compat import load_toml_from_string  # noqa: WPS436\nfrom ._transformers import (  # noqa: WPS436\n    get_cli_kwargs_from_config,\n    get_enabled_cli_flags_from_config,\n)\n\n\ndef get_local_cython_config() -> dict:\n    \"\"\"Grab optional build dependencies from pyproject.toml config.\n\n    :returns: config section from ``pyproject.toml``\n    :rtype: dict\n\n    This basically reads entries from::\n\n        [tool.local.cythonize]\n        # Env vars provisioned during cythonize call\n        src = [\"src/**/*.pyx\"]\n\n        [tool.local.cythonize.env]\n        # Env vars provisioned during cythonize call\n        LDFLAGS = \"-lssh\"\n\n        [tool.local.cythonize.flags]\n        # This section can contain the following booleans:\n        # * annotate \u2014 generate annotated HTML page for source files\n        # * build \u2014 build extension modules using distutils\n        # * inplace \u2014 build extension modules in place using distutils (implies -b)\n        # * force \u2014 force recompilation\n        # * quiet \u2014 be less verbose during compilation\n        # * lenient \u2014 increase Python compat by ignoring some compile time errors\n        # * keep-going \u2014 compile as much as possible, ignore compilation failures\n        annotate = false\n        build = false\n        inplace = true\n        force = true\n        quiet = false\n        lenient = false\n        keep-going = false\n\n        [tool.local.cythonize.kwargs]\n        # This section can contain args that have values:\n        # * exclude=PATTERN      exclude certain file patterns from the compilation\n        # * parallel=N    run builds in N parallel jobs (default: calculated per system)\n        exclude = \"**.py\"\n        parallel = 12\n\n        [tool.local.cythonize.kwargs.directives]\n        # This section can contain compiler directives\n        # NAME = \"VALUE\"\n\n        [tool.local.cythonize.kwargs.compile-time-env]\n        # This section can contain compile time env vars\n        # NAME = \"VALUE\"\n\n        [tool.local.cythonize.kwargs.options]\n        # This section can contain cythonize options\n        # NAME = \"VALUE\"\n    \"\"\"\n    config_toml_txt = (Path.cwd().resolve() / 'pyproject.toml').read_text()\n    config_mapping = load_toml_from_string(config_toml_txt)\n    return config_mapping['tool']['local']['cythonize']\n\n\ndef make_cythonize_cli_args_from_config(config) -> list[str]:\n    py_ver_arg = f'-{_python_version_tuple.major!s}'\n\n    cli_flags = get_enabled_cli_flags_from_config(config['flags'])\n    cli_kwargs = get_cli_kwargs_from_config(config['kwargs'])\n\n    return cli_flags + [py_ver_arg] + cli_kwargs + ['--'] + config['src']\n\n\n@contextmanager\ndef patched_env(env: dict[str, str], cython_line_tracing_requested: bool):\n    \"\"\"Temporary set given env vars.\n\n    :param env: tmp env vars to set\n    :type env: dict\n\n    :yields: None\n    \"\"\"\n    orig_env = os.environ.copy()\n    expanded_env = {name: expandvars(var_val) for name, var_val in env.items()}\n    os.environ.update(expanded_env)\n\n    if cython_line_tracing_requested:\n        os.environ['CFLAGS'] = ' '.join((\n            os.getenv('CFLAGS', ''),\n            '-DCYTHON_TRACE_NOGIL=1',  # Implies CYTHON_TRACE=1\n        )).strip()\n    try:\n        yield\n    finally:\n        os.environ.clear()\n        os.environ.update(orig_env)\n", "packaging/pep517_backend/__main__.py": "import sys\n\nfrom . import cli\n\nif __name__ == \"__main__\":\n    sys.exit(cli.run_main_program(argv=sys.argv))\n", "packaging/pep517_backend/_compat.py": "\"\"\"Cross-python stdlib shims.\"\"\"\n\nimport os\nimport typing as t\nfrom contextlib import contextmanager\nfrom pathlib import Path\n\ntry:\n    from contextlib import chdir as chdir_cm  # type: ignore[attr-defined]\nexcept ImportError:\n\n    @contextmanager  # type: ignore[no-redef]\n    def chdir_cm(path: os.PathLike) -> t.Iterator[None]:\n        \"\"\"Temporarily change the current directory, recovering on exit.\"\"\"\n        original_wd = Path.cwd()\n        os.chdir(path)\n        try:\n            yield\n        finally:\n            os.chdir(original_wd)\n\n\ntry:\n    from tomllib import loads as load_toml_from_string\nexcept ImportError:\n    from tomli import loads as load_toml_from_string  # type: ignore[no-redef]\n\n\n__all__ = (\"chdir_cm\", \"load_toml_from_string\")  # noqa: WPS410\n", "packaging/pep517_backend/__init__.py": "\"\"\"PEP 517 build backend for optionally pre-building Cython.\"\"\"\n", "packaging/pep517_backend/hooks.py": "\"\"\"PEP 517 build backend for optionally pre-building Cython.\"\"\"\n\nfrom contextlib import suppress as _suppress\n\nfrom setuptools.build_meta import *  # Re-exporting PEP 517 hooks  # pylint: disable=unused-wildcard-import,wildcard-import  # noqa: E501, F401, F403\n\n# Re-exporting PEP 517 hooks\nfrom ._backend import (  # type: ignore[assignment]  # noqa: WPS436\n    build_sdist,\n    build_wheel,\n    get_requires_for_build_wheel,\n    prepare_metadata_for_build_wheel,\n)\n\nwith _suppress(ImportError):  # Only succeeds w/ setuptools implementing PEP 660\n    # Re-exporting PEP 660 hooks\n    from ._backend import (  # type: ignore[assignment]  # noqa: WPS436\n        build_editable,\n        get_requires_for_build_editable,\n        prepare_metadata_for_build_editable,\n    )\n"}