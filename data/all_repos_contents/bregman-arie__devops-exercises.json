{"coding/python/binary_search.py": "#!/usr/bin/env python\n\nimport random\nfrom typing import List\n\n\ndef binary_search(arr: List[int], lb: int, ub: int, target: int) -> int:\n    \"\"\"\n    A Binary Search Example which has O(log n) time complexity.\n    \"\"\"\n    if lb <= ub:\n        mid: int = lb + (ub - lb) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            return binary_search(arr, mid + 1, ub, target)\n        else:\n            return binary_search(arr, lb, mid - 1, target)\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    rand_num_li: List[int] = sorted([random.randint(1, 50) for _ in range(10)])\n    target: int = random.randint(1, 50)\n    print(\"List: {}\\nTarget: {}\\nIndex: {}\".format(\n        rand_num_li, target,\n        binary_search(rand_num_li, 0, len(rand_num_li) - 1, target)))\n", "scripts/random_question.py": "import random\nimport optparse\nimport os\n\n\ndef main():\n    \"\"\"Reads through README.md for question/answer pairs and adds them to a\n    list to randomly select from and quiz yourself.\n    Supports skipping questions with no documented answer with the -s flag\n    \"\"\"\n    parser = optparse.OptionParser()\n    parser.add_option(\"-s\", \"--skip\", action=\"store_true\",\n                      help=\"skips questions without an answer.\",\n                      default=False)\n    options, args = parser.parse_args()\n\n    with open('README.md', 'r') as f:\n        text = f.read()\n\n    questions = []\n\n    while True:\n        question_start = text.find('<summary>') + 9\n        question_end = text.find('</summary>')\n        answer_end = text.find('</b></details>')\n\n        if answer_end == -1:\n            break\n\n        question = text[question_start: question_end].replace('<br>', '').replace('<b>', '')\n        answer = text[question_end + 17: answer_end]\n        questions.append((question, answer))\n        text = text[answer_end + 1:]\n\n    num_questions = len(questions)\n\n    while True:\n        try:\n            question, answer = questions[random.randint(0, num_questions)]\n\n            if options.skip and not answer.strip():\n                continue\n            os.system(\"clear\")\n            print(question)\n            print(\"...Press Enter to show answer...\")\n            input()\n            print('A: ', answer)\n            print(\"... Press Enter to continue, Ctrl-C to exit\")\n            input()\n\n        except KeyboardInterrupt:\n            break\n\n    print(\"\\nGoodbye! See you next time.\")\n\n\nif __name__ == '__main__':\n    main()\n", "scripts/update_question_number.py": "\"\"\"\nMeant to be used like this:\n\npython scripts/update_question_number.py\n\n\"\"\"\nimport pathlib\nfrom scripts.question_utils import get_question_list, get_challenges_count\n\nLINE_FLAG = b\":bar_chart:\"\n\np = pathlib.Path(__file__).parent.parent.joinpath('README.md')\n\n\nwith open(p, 'rb') as f:\n    file = f.readlines()\n\n\nfile_list = [line.rstrip() for line in file]\n\nquestion_list = get_question_list(file_list)\nquestion_count = len(question_list)\ntotal_count = question_count + get_challenges_count()\nprint(question_count)\nprint(get_challenges_count())\nprint(total_count)\nfor line in file:\n    if LINE_FLAG in line:\n        file[file.index(line)] = b':bar_chart: &nbsp;There are currently **%s** questions\\r\\n' %\\\n                                 str(total_count).encode()\n        break\n\nwith open(p, 'wb') as f:\n    f.writelines(file)\n", "scripts/question_utils.py": "\"\"\"\nQuestion utils functions\n\"\"\"\n\nimport pathlib\nfrom random import choice\nfrom typing import List\nimport re\n\np = pathlib.Path(__file__).parent.parent.joinpath(\"README.md\")\n\n\ndef get_file_list():\n    file_list = \"\"\n    with open(p, \"rb\") as f:\n        for line in f.readlines():\n            file_list += line.rstrip().decode()\n    return file_list\n\n\ndef get_question_list(file_list: List[str]) -> list:\n    file_list = re.findall(\"<details>(.*?)</details>\", file_list)\n    questions_list = []\n    for i in file_list:\n        q = re.findall(r\"<summary>(.*?)</summary>\", i)[0]\n        questions_list.append(q)\n    return questions_list\n\n\ndef get_answered_questions(question_list: List[str]) -> list:\n    t = []\n    question_list = re.findall(\"<details>(.*?)</details>\", question_list)\n    for i in question_list:\n        q = re.findall(r\"<summary>(.*?)</summary>\", i)\n        if q and q[0] == \"\":\n            continue\n        a = re.findall(r\"<b>(.*?)</b>\", i)\n        if a and a[0] == \"\":\n            continue\n        else:\n            t.append(q[0])\n    return t\n\n\ndef get_answers_count() -> List:\n    \"\"\"\n    Return [answer_questions,all_questions] ,PASS complete. FAIL incomplete.\n    >>> get_answers_count()\n    [463, 463]\n    \"\"\"\n    ans_questions = get_answered_questions(get_file_list())\n    len_ans_questions = len(ans_questions)\n    all_questions = get_question_list(get_file_list())\n    len_all_questions = len(all_questions)\n    return [len_ans_questions, len_all_questions]\n\n\ndef get_challenges_count() -> int:\n    challenges_path = (\n        pathlib.Path(__file__).parent.parent.joinpath(\"exercises\").glob(\"*.md\")\n    )\n    return len(list(challenges_path))\n\n\n# WIP WAITING FEEDBACK\ndef get_random_question(question_list: List[str], with_answer=False):\n    if with_answer:\n        return choice(get_answered_questions(question_list))\n    return choice(get_question_list(question_list))\n\n\n\"\"\"Use this question_list. Unless you have already opened/worked/need the file, then don't or\nyou will end up doing the same thing twice.\neg:\n#my_dir/main.py\nfrom scripts import question_utils\nprint(question_utils.get_answered_questions(question_utils.question_list)\n>> 123\n # noqa: E501\n\"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    # print(get_question_list(get_file_list()))\n    # print(get_answered_questions(get_file_list()))\n    # print(get_random_question(get_file_list(),True))\n    # print(get_random_question(get_file_list(),False))\n", "scripts/aws s3 event triggering/s3-lambda/s3-lambda.py": "import boto3\nimport json\n\ndef lambda_handler(event, context):\n\n  # i want to know that event thing\n  print(event)\n\n  # extract relevant information from the s3 event trigger\n  bucket_name=event['Records'][0]['s3']['bucket']['name']\n  object_key=event['Records'][0]['s3']['object']['key']\n\n  # perform desired operations with the upload file\n  print(f\"File '{object_key}' was uploaded to bucket '{bucket_name}'\")\n\n  # example: send a notification via sns\n  sns_client=boto3.client('sns')\n  topic_arn='arn:aws:sns:us-east-1:<account-id>:s3-lambda-sns'\n  sns_client.publish(\n    TopicArn=topic_arn,\n    Subject='s3 object created !!',\n    Message=f\"File '{object_key}' was uploaded to bucket '{bucket_name}\"\n  )\n\n  # Example: Trigger another Lambda function\n  # lambda_client = boto3.client('lambda')\n  # target_function_name = 'my-another-lambda-function'\n  # lambda_client.invoke(\n  #    FunctionName=target_function_name,\n  #    InvocationType='Event',\n  #    Payload=json.dumps({'bucket_name': bucket_name, 'object_key': object_key})\n  # )\n  # in case of queuing and other objective similar to the netflix flow of triggering\n\n  return {\n    'statusCode': 200,\n    'body': json.dumps(\"Lambda function executed successfully !!\")\n  }\n", "tests/syntax_checker_unittest.py": "\"\"\"\nWIP\n\nYes, we do write tests for our tests.\n\"\"\"\nfrom pathlib import Path\nfrom typing import List\nfrom unittest import TestCase\nfrom tests import syntax_lint\n\n\ndef open_test_case_file(n: int) -> List[bytes]:\n    tests_path = Path(__file__).parent.joinpath()\n\n    with open(f'{tests_path}/testcases/testcase{n}.md', 'rb') as f:\n        file_list = [line.rstrip() for line in f.readlines()]\n    return file_list\n\n\ntest_case_1 = open_test_case_file(1)\ntest_case_2 = open_test_case_file(2)\ntest_case_3 = open_test_case_file(3)\n\n\nclass TestSyntax(TestCase):\n\n    def test_details_count_case1(self):\n        self.assertTrue(syntax_lint.count_details(test_case_1))\n\n    def test_details_count_case2(self):\n        self.assertTrue(syntax_lint.count_details(test_case_2))\n\n    def test_details_errors_1(self):\n        syntax_lint.check_details_tag(test_case_1)\n        self.assertFalse(syntax_lint.errors)\n\n    def test_details_errors_2(self):\n        syntax_lint.check_details_tag(test_case_2)\n        self.assertFalse(syntax_lint.errors)\n    #\n    # def test_details_error_exist_1(self):\n    #     syntax_checker.check_details_tag(test_case_3)\n    #     print(syntax_checker.errors)\n    #     self.assertEqual(len(syntax_checker.errors), 3)\n", "tests/scripts_question_utils_unittest.py": "import unittest\nfrom pathlib import Path\nfrom typing import List\nfrom scripts.question_utils import get_answered_questions, get_question_list\n\n\ndef open_test_case_file(n: int) -> List[bytes]:\n    tests_path = Path(__file__).parent.joinpath()\n\n    with open(f'{tests_path}/testcases/testcase{n}.md', 'rb') as f:\n        file_list = [line.rstrip() for line in f.readlines()]\n    return file_list\n\n\nclass QuestionCount(unittest.TestCase):\n\n    def test_case_1(self):\n        raw_list = open_test_case_file(1)\n        question_list = get_question_list(raw_list)\n        answers = get_answered_questions(question_list)\n\n        self.assertEqual(len(question_list), 11)\n        self.assertEqual(len(answers), 3)\n\n    def test_case_2(self):\n        raw_list = open_test_case_file(2)\n        question_list = get_question_list(raw_list)\n        answers = get_answered_questions(question_list)\n\n        self.assertEqual(len(question_list), 16)\n        self.assertEqual(len(answers), 11)\n", "tests/syntax_lint.py": "\"\"\"\nTesting suite for https://github.com/bregman-arie/devops-interview-questions\nwritten by surister\n\nEven though both check_details_tag and check_summary_tags are practically the\nsame, due to readability and functionality it was decided to be split like\nthat.\n\nUsage:\n$ python tests/syntax_lint.py\n\n\"\"\"\n\nimport sys\n\np = sys.argv[1]\n\n\nerrors = []\n\n\ndef count_details(file_list):\n    \"\"\"\n    Counts the total amount of <details> and </details>\n\n    Used for debugging purpose, not meant to be used in actual tests\n    \"\"\"\n    details_final_count = 0\n    details_count = 0\n\n    for line_number, line in enumerate(file_list):\n        if b\"<details>\" in line:\n            details_count += 1\n        if b\"</details>\" in line:\n            details_final_count += 1\n\n    return details_count == details_final_count\n\n\ndef count_summary(file_list):\n    \"\"\"\n    Counts the total amount of <details> and </details>\n\n    Used for debugging purpose, not meant to be used in actual tests\n    \"\"\"\n    details_final_count = 0\n    details_count = 0\n\n    for line_number, line in enumerate(file_list):\n        if b\"<summary>\" in line:\n            details_count += 1\n        if b\"</summary>\" in line:\n            details_final_count += 1\n\n    return details_count == details_final_count\n\n\ndef check_details_tag(file_list):\n    \"\"\"\n    Check whether the structure:\n    <details>\n    ...\n    </details>\n\n    Is correctly followed, if not generates an error.\n\n    \"\"\"\n\n    after_detail = False\n    error = False\n    err_message = \"\"\n    for line_number, line in enumerate(file_list):\n        if b\"<details>\" in line and b\"</details>\" in line:\n            pass\n        else:\n            if b\"<details>\" in line and after_detail:\n                err_message = f\"Missing closing detail tag round line {line_number - 1}\"\n                error = True\n            if b\"</details>\" in line and not after_detail:\n                err_message = f\"Missing opening detail tag round line {line_number - 1}\"\n                error = True\n\n            if b\"<details>\" in line:\n                after_detail = True\n\n            if b\"</details>\" in line and after_detail:\n                after_detail = False\n\n            if error:\n                errors.append(err_message)\n\n        error = False\n\n\ndef check_summary_tag(file_list):\n    \"\"\"\n    Check whether the structure:\n    <summary>\n    ...\n    </summary>\n\n    Is correctly followed, if not generates an error.\n\n    \"\"\"\n\n    after_summary = False\n    error = False\n    err_message = \"\"\n    for idx, line in enumerate(file_list):\n        line_number = idx + 1\n        if b\"<summary>\" in line and b\"</summary>\" in line:\n            if after_summary:\n                err_message = f\"Missing closing summary tag around line {line_number}\"\n                error = True\n\n        else:\n            if b\"<summary>\" in line and after_summary:\n                err_message = f\"Missing closing summary tag around line {line_number}\"\n                error = True\n            if b\"</summary>\" in line and not after_summary:\n                err_message = f\"Missing opening summary tag around line {line_number}\"\n                error = True\n\n            if b\"<summary>\" in line:\n                after_summary = True\n\n            if b\"</summary>\" in line and after_summary:\n                after_summary = False\n\n        if error:\n            errors.append(err_message)\n\n        error = False\n\n\ndef check_md_file(file_name):\n    with open(p, \"rb\") as f:\n        file_list = [line.rstrip() for line in f.readlines()]\n    check_details_tag(file_list)\n    check_summary_tag(file_list)\n\n\nif __name__ == \"__main__\":\n    print(f\"..........Checking {p}..........\")\n    check_md_file(p)\n    if errors:\n        print(f\"{p} failed\", file=sys.stderr)\n        for error in errors:\n            print(error, file=sys.stderr)\n        exit(1)\n\n    print(\"Tests passed successfully.\")\n", "topics/flask_container_ci2/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport unittest\n\nfrom app import main\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.app = main.app.test_client()\n\n    def test_main_page(self):\n        response = self.app.get('/', follow_redirects=True)\n        self.assertEqual(response.status_code, 200)\n\n    def test_matrix(self):\n        response = self.app.get('/matrix/123n459,789', follow_redirects=True)\n        # Change when the matrix route is fixed and returning the actual matrix\n        self.assertEqual(response.status_code, 500)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "topics/flask_container_ci2/app/config.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport os\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nSECRET_KEY = 'shhh'\nCSRF_ENABLED = True\n\nSQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')\n", "topics/flask_container_ci2/app/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport os\nimport unittest\n\nfrom config import basedir\nfrom app import app\nfrom app import db\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        app.config['TESTING'] = True\n        app.config['WTF_CSRF_ENABLED'] = False\n        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(\n            basedir, 'test.db')\n        self.app = app.test_client()\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "topics/flask_container_ci2/app/main.py": "#!/usr/bin/env python\n# coding=utf-8\n\nfrom flask import Flask\nfrom flask import make_response\n\nimport json\nfrom flask_wtf.csrf import CSRFProtect\n\n# OpenRefactory Warning: The 'Flask' method creates a Flask app\n# without Cross-Site Request Forgery (CSRF) protection.\napp = Flask(__name__)\nCSRFProtect(app)\n\n\n@app.routee(\"/\", methods=['GET'])\ndef index():\n    return pretty_json({\n        \"resources\": {\n            \"matrix\": \"/matrix/<matrix>\",\n            \"column\": \"/columns/<matrix>/<column_number>\",\n            \"row\": \"/rows/<matrix>/<row_number>\",\n        },\n        \"current_uri\": \"/\",\n        \"example\": \"/matrix/'123n456n789'\",\n    })\n\n\n@app.route(\"/matrix/<matrix>\", methods=['GET'])\ndef matrix(matrix):\n    # TODO: return matrix, each row in a new line\n    pass\n\n\n@app.route(\"/matrix/<matrix>/<column_number>\", methods=['GET'])\ndef column(matrix, column_number):\n    # TODO: return column based on given column number\n    pass\n\n\n@app.route(\"/matrix/<matrix>/<row_number>\", methods=['GET'])\ndef row(matrix, row_number):\n    # TODO: return row based on given row number\n    pass\n\n\ndef pretty_json(arg):\n    response = make_response(json.dumps(arg, sort_keys=True, indent=4))\n    response.headers['Content-type'] = \"application/json\"\n    return response\n\n\nif __name__ == \"__main__\":\n    app.run(port=5000)\n", "topics/flask_container_ci2/app/__init__.py": "#!/usr/bin/env python\n# coding=utf-8\n", "topics/aws/exercises/subnets/pulumi/__main__.py": "import pulumi_aws as aws\n\navailableZones = aws.get_availability_zones(state=\"available\")\n\naws.ec2.Subnet(\"NewSubnet1\",\n               vpc_id=aws.vpc[\"main\"][\"id\"],\n               cidr_block=\"10.0.0.0/24\",\n               availability_zone=availableZones.names[0],\n               tags={\"Name\": \"NewSubnet1\"}\n               )\n\naws.ec2.Subnet(\"NewSubnet2\",\n               vpc_id=aws.vpc[\"main\"][\"id\"],\n               cidr_block=\"10.0.1.0/24\",\n               availability_zone=availableZones.names[1],\n               tags={\"Name\": \"NewSubnet2\"}\n               )\n\naws.ec2.Subnet(\"NewSubnet3\",\n               vpc_id=aws.vpc[\"main\"][\"id\"],\n               cidr_block=\"10.0.2.0/24\",\n               availability_zone=availableZones.names[2],\n               tags={\"Name\": \"NewSubnet3\"}\n               )\n\n# Run \"pulumi up\"\n", "topics/aws/exercises/s3/new_bucket/pulumi/__main__.py": "import pulumi_aws as aws\n\n# Private Bucket\nprivate_bucket = aws.s3.Bucket(\"my-first-private-bucket\",\n                               acl=\"private\",\n                               tags={\n                                   \"Environment\": \"Exercise\",\n                                   \"Name\": \"My First Private Bucket\"},\n                               region=\"eu-west-2\"\n                               )\n\n# Bucket Object\naws.s3.BucketObject(\"bucketObject\",\n                    key=\"some_object_key\",\n                    bucket=private_bucket.id,\n                    content=\"object content\")\n\n# Public Bucket\naws.s3.Bucket(\"my-first-public-bucket\",\n              acl=\"public-read\",\n              tags={\n                  \"Environment\": \"Exercise\",\n                  \"Name\": \"My First Public Bucket\"},\n              region=\"eu-west-1\",\n              versioning=aws.s3.BucketVersioningArgs(enabled=True))\n", "topics/aws/exercises/new_vpc/pulumi/__main__.py": "import pulumi\nimport pulumi_awsx as awsx\n\nvpc = awsx.ec2.Vpc(\"exercise-vpc\", cidr_block=\"10.0.0.0/16\")\n\npulumi.export(\"vpc_id\", vpc.vpc_id)\npulumi.export(\"publicSubnetIds\", vpc.public_subnet_ids)\npulumi.export(\"privateSubnetIds\", vpc.private_subnet_ids)\n\n# Run 'pulumi up' to create it\n", "topics/flask_container_ci/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport unittest\n\nfrom app import main\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.app = main.app.test_client()\n\n    def test_main_page(self):\n        response = self.app.get('/', follow_redirects=True)\n        self.assertEqual(response.status_code, 200)\n\n    def test_users_page(self):\n        response = self.app.get('/users', follow_redirects=True)\n        self.assertEqual(response.status_code, 200)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "topics/flask_container_ci/app/config.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport os\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nSECRET_KEY = 'shhh'\nCSRF_ENABLED = True\n\nSQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')\n", "topics/flask_container_ci/app/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport os\nimport unittest\n\nfrom config import basedir\nfrom app import app\nfrom app import db\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        app.config['TESTING'] = True\n        app.config['WTF_CSRF_ENABLED'] = False\n        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(\n            basedir, 'test.db')\n        self.app = app.test_client()\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "topics/flask_container_ci/app/main.py": "#!/usr/bin/env python\n# coding=utf-8\n\nfrom flask import Flask\nfrom flask import make_response\n\nimport json\nfrom flask_wtf.csrf import CSRFProtect\nfrom werkzeug.exceptions import NotFound\n\n# OpenRefactory Warning: The 'Flask' method creates a Flask app\n# without Cross-Site Request Forgery (CSRF) protection.\napp = Flask(__name__)\nCSRFProtect(app)\n\nwith open(\"./users.json\", \"r\") as f:\n    users = json.load(f)\n\n\n@app.route(\"/\", methods=['GET'])\ndef index():\n    return pretty_json({\n        \"resources\": {\n            \"users\": \"/users\",\n            \"user\": \"/users/<username>\",\n        },\n        \"current_uri\": \"/\"\n    })\n\n\n@app.route(\"/users\", methods=['GET'])\ndef all_users():\n    return pretty_json(users)\n\n\n@app.route(\"/users/<username>\", methods=['GET'])\ndef user_data(username):\n    if username not in users:\n        raise NotFound\n\n    return pretty_json(users[username])\n\n\n@app.route(\"/users/<username>/something\", methods=['GET'])\ndef user_something(username):\n    raise NotImplementedError()\n\n\ndef pretty_json(arg):\n    response = make_response(json.dumps(arg, sort_keys=True, indent=4))\n    response.headers['Content-type'] = \"application/json\"\n    return response\n\n\ndef create_test_app():\n    # OpenRefactory Warning: The 'Flask' method creates a Flask app\n    # without Cross-Site Request Forgery (CSRF) protection.\n    app = Flask(__name__)\n    CSRFProtect(app)\n    return app\n\n\nif __name__ == \"__main__\":\n    app.run(port=5000)\n", "topics/flask_container_ci/app/__init__.py": "#!/usr/bin/env python\n# coding=utf-8\n"}