{"setup.py": "from setuptools import setup\n\nif __name__ == \"__main__\":\n    setup()\n", "tools/check_changes.py": "#!/usr/bin/env python3\n\nimport sys\nfrom pathlib import Path\n\nALLOWED_SUFFIXES = [\".feature\", \".bugfix\", \".doc\", \".removal\", \".misc\"]\n\n\ndef get_root(script_path):\n    folder = script_path.resolve().parent\n    while not (folder / \".git\").exists():\n        folder = folder.parent\n        if folder == folder.anchor:\n            raise RuntimeError(\"git repo not found\")\n    return folder\n\n\ndef main(argv):\n    print('Check \"CHANGES\" folder... ', end=\"\", flush=True)\n    here = Path(argv[0])\n    root = get_root(here)\n    changes = root / \"CHANGES\"\n    failed = False\n    for fname in changes.iterdir():\n        if fname.name in (\".gitignore\", \".TEMPLATE.rst\", \"README.rst\"):\n            continue\n        if fname.suffix == \".rst\":\n            test_name = Path(fname.stem)\n        else:\n            test_name = fname\n        if test_name.suffix not in ALLOWED_SUFFIXES:\n            if not failed:\n                print(\"\")\n            print(fname, \"has illegal suffix\", file=sys.stderr)\n            failed = True\n\n    if failed:\n        print(\"\", file=sys.stderr)\n        print(\n            \"Allowed suffixes are:\",\n            ALLOWED_SUFFIXES + [suff + \".rst\" for suff in ALLOWED_SUFFIXES],\n            file=sys.stderr,\n        )\n        print(\"\", file=sys.stderr)\n    else:\n        print(\"OK\")\n\n    return int(failed)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main(sys.argv))\n", "aiosignal/__init__.py": "from frozenlist import FrozenList\n\n__version__ = \"1.3.1\"\n\n__all__ = (\"Signal\",)\n\n\nclass Signal(FrozenList):\n    \"\"\"Coroutine-based signal implementation.\n\n    To connect a callback to a signal, use any list method.\n\n    Signals are fired using the send() coroutine, which takes named\n    arguments.\n    \"\"\"\n\n    __slots__ = (\"_owner\",)\n\n    def __init__(self, owner):\n        super().__init__()\n        self._owner = owner\n\n    def __repr__(self):\n        return \"<Signal owner={}, frozen={}, {!r}>\".format(\n            self._owner, self.frozen, list(self)\n        )\n\n    async def send(self, *args, **kwargs):\n        \"\"\"\n        Sends data to all registered receivers.\n        \"\"\"\n        if not self.frozen:\n            raise RuntimeError(\"Cannot send non-frozen signal.\")\n\n        for receiver in self:\n            await receiver(*args, **kwargs)  # type: ignore\n"}