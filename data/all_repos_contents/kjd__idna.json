{"idna/idnadata.py": "# This file is automatically generated by tools/idna-data\n\n__version__ = '15.1.0'\nscripts = {\n    'Greek': (\n        0x37000000374,\n        0x37500000378,\n        0x37a0000037e,\n        0x37f00000380,\n        0x38400000385,\n        0x38600000387,\n        0x3880000038b,\n        0x38c0000038d,\n        0x38e000003a2,\n        0x3a3000003e2,\n        0x3f000000400,\n        0x1d2600001d2b,\n        0x1d5d00001d62,\n        0x1d6600001d6b,\n        0x1dbf00001dc0,\n        0x1f0000001f16,\n        0x1f1800001f1e,\n        0x1f2000001f46,\n        0x1f4800001f4e,\n        0x1f5000001f58,\n        0x1f5900001f5a,\n        0x1f5b00001f5c,\n        0x1f5d00001f5e,\n        0x1f5f00001f7e,\n        0x1f8000001fb5,\n        0x1fb600001fc5,\n        0x1fc600001fd4,\n        0x1fd600001fdc,\n        0x1fdd00001ff0,\n        0x1ff200001ff5,\n        0x1ff600001fff,\n        0x212600002127,\n        0xab650000ab66,\n        0x101400001018f,\n        0x101a0000101a1,\n        0x1d2000001d246,\n    ),\n    'Han': (\n        0x2e8000002e9a,\n        0x2e9b00002ef4,\n        0x2f0000002fd6,\n        0x300500003006,\n        0x300700003008,\n        0x30210000302a,\n        0x30380000303c,\n        0x340000004dc0,\n        0x4e000000a000,\n        0xf9000000fa6e,\n        0xfa700000fada,\n        0x16fe200016fe4,\n        0x16ff000016ff2,\n        0x200000002a6e0,\n        0x2a7000002b73a,\n        0x2b7400002b81e,\n        0x2b8200002cea2,\n        0x2ceb00002ebe1,\n        0x2ebf00002ee5e,\n        0x2f8000002fa1e,\n        0x300000003134b,\n        0x31350000323b0,\n    ),\n    'Hebrew': (\n        0x591000005c8,\n        0x5d0000005eb,\n        0x5ef000005f5,\n        0xfb1d0000fb37,\n        0xfb380000fb3d,\n        0xfb3e0000fb3f,\n        0xfb400000fb42,\n        0xfb430000fb45,\n        0xfb460000fb50,\n    ),\n    'Hiragana': (\n        0x304100003097,\n        0x309d000030a0,\n        0x1b0010001b120,\n        0x1b1320001b133,\n        0x1b1500001b153,\n        0x1f2000001f201,\n    ),\n    'Katakana': (\n        0x30a1000030fb,\n        0x30fd00003100,\n        0x31f000003200,\n        0x32d0000032ff,\n        0x330000003358,\n        0xff660000ff70,\n        0xff710000ff9e,\n        0x1aff00001aff4,\n        0x1aff50001affc,\n        0x1affd0001afff,\n        0x1b0000001b001,\n        0x1b1200001b123,\n        0x1b1550001b156,\n        0x1b1640001b168,\n    ),\n}\njoining_types = {\n    0xad: 84,\n    0x300: 84,\n    0x301: 84,\n    0x302: 84,\n    0x303: 84,\n    0x304: 84,\n    0x305: 84,\n    0x306: 84,\n    0x307: 84,\n    0x308: 84,\n    0x309: 84,\n    0x30a: 84,\n    0x30b: 84,\n    0x30c: 84,\n    0x30d: 84,\n    0x30e: 84,\n    0x30f: 84,\n    0x310: 84,\n    0x311: 84,\n    0x312: 84,\n    0x313: 84,\n    0x314: 84,\n    0x315: 84,\n    0x316: 84,\n    0x317: 84,\n    0x318: 84,\n    0x319: 84,\n    0x31a: 84,\n    0x31b: 84,\n    0x31c: 84,\n    0x31d: 84,\n    0x31e: 84,\n    0x31f: 84,\n    0x320: 84,\n    0x321: 84,\n    0x322: 84,\n    0x323: 84,\n    0x324: 84,\n    0x325: 84,\n    0x326: 84,\n    0x327: 84,\n    0x328: 84,\n    0x329: 84,\n    0x32a: 84,\n    0x32b: 84,\n    0x32c: 84,\n    0x32d: 84,\n    0x32e: 84,\n    0x32f: 84,\n    0x330: 84,\n    0x331: 84,\n    0x332: 84,\n    0x333: 84,\n    0x334: 84,\n    0x335: 84,\n    0x336: 84,\n    0x337: 84,\n    0x338: 84,\n    0x339: 84,\n    0x33a: 84,\n    0x33b: 84,\n    0x33c: 84,\n    0x33d: 84,\n    0x33e: 84,\n    0x33f: 84,\n    0x340: 84,\n    0x341: 84,\n    0x342: 84,\n    0x343: 84,\n    0x344: 84,\n    0x345: 84,\n    0x346: 84,\n    0x347: 84,\n    0x348: 84,\n    0x349: 84,\n    0x34a: 84,\n    0x34b: 84,\n    0x34c: 84,\n    0x34d: 84,\n    0x34e: 84,\n    0x34f: 84,\n    0x350: 84,\n    0x351: 84,\n    0x352: 84,\n    0x353: 84,\n    0x354: 84,\n    0x355: 84,\n    0x356: 84,\n    0x357: 84,\n    0x358: 84,\n    0x359: 84,\n    0x35a: 84,\n    0x35b: 84,\n    0x35c: 84,\n    0x35d: 84,\n    0x35e: 84,\n    0x35f: 84,\n    0x360: 84,\n    0x361: 84,\n    0x362: 84,\n    0x363: 84,\n    0x364: 84,\n    0x365: 84,\n    0x366: 84,\n    0x367: 84,\n    0x368: 84,\n    0x369: 84,\n    0x36a: 84,\n    0x36b: 84,\n    0x36c: 84,\n    0x36d: 84,\n    0x36e: 84,\n    0x36f: 84,\n    0x483: 84,\n    0x484: 84,\n    0x485: 84,\n    0x486: 84,\n    0x487: 84,\n    0x488: 84,\n    0x489: 84,\n    0x591: 84,\n    0x592: 84,\n    0x593: 84,\n    0x594: 84,\n    0x595: 84,\n    0x596: 84,\n    0x597: 84,\n    0x598: 84,\n    0x599: 84,\n    0x59a: 84,\n    0x59b: 84,\n    0x59c: 84,\n    0x59d: 84,\n    0x59e: 84,\n    0x59f: 84,\n    0x5a0: 84,\n    0x5a1: 84,\n    0x5a2: 84,\n    0x5a3: 84,\n    0x5a4: 84,\n    0x5a5: 84,\n    0x5a6: 84,\n    0x5a7: 84,\n    0x5a8: 84,\n    0x5a9: 84,\n    0x5aa: 84,\n    0x5ab: 84,\n    0x5ac: 84,\n    0x5ad: 84,\n    0x5ae: 84,\n    0x5af: 84,\n    0x5b0: 84,\n    0x5b1: 84,\n    0x5b2: 84,\n    0x5b3: 84,\n    0x5b4: 84,\n    0x5b5: 84,\n    0x5b6: 84,\n    0x5b7: 84,\n    0x5b8: 84,\n    0x5b9: 84,\n    0x5ba: 84,\n    0x5bb: 84,\n    0x5bc: 84,\n    0x5bd: 84,\n    0x5bf: 84,\n    0x5c1: 84,\n    0x5c2: 84,\n    0x5c4: 84,\n    0x5c5: 84,\n    0x5c7: 84,\n    0x610: 84,\n    0x611: 84,\n    0x612: 84,\n    0x613: 84,\n    0x614: 84,\n    0x615: 84,\n    0x616: 84,\n    0x617: 84,\n    0x618: 84,\n    0x619: 84,\n    0x61a: 84,\n    0x61c: 84,\n    0x620: 68,\n    0x622: 82,\n    0x623: 82,\n    0x624: 82,\n    0x625: 82,\n    0x626: 68,\n    0x627: 82,\n    0x628: 68,\n    0x629: 82,\n    0x62a: 68,\n    0x62b: 68,\n    0x62c: 68,\n    0x62d: 68,\n    0x62e: 68,\n    0x62f: 82,\n    0x630: 82,\n    0x631: 82,\n    0x632: 82,\n    0x633: 68,\n    0x634: 68,\n    0x635: 68,\n    0x636: 68,\n    0x637: 68,\n    0x638: 68,\n    0x639: 68,\n    0x63a: 68,\n    0x63b: 68,\n    0x63c: 68,\n    0x63d: 68,\n    0x63e: 68,\n    0x63f: 68,\n    0x640: 67,\n    0x641: 68,\n    0x642: 68,\n    0x643: 68,\n    0x644: 68,\n    0x645: 68,\n    0x646: 68,\n    0x647: 68,\n    0x648: 82,\n    0x649: 68,\n    0x64a: 68,\n    0x64b: 84,\n    0x64c: 84,\n    0x64d: 84,\n    0x64e: 84,\n    0x64f: 84,\n    0x650: 84,\n    0x651: 84,\n    0x652: 84,\n    0x653: 84,\n    0x654: 84,\n    0x655: 84,\n    0x656: 84,\n    0x657: 84,\n    0x658: 84,\n    0x659: 84,\n    0x65a: 84,\n    0x65b: 84,\n    0x65c: 84,\n    0x65d: 84,\n    0x65e: 84,\n    0x65f: 84,\n    0x66e: 68,\n    0x66f: 68,\n    0x670: 84,\n    0x671: 82,\n    0x672: 82,\n    0x673: 82,\n    0x675: 82,\n    0x676: 82,\n    0x677: 82,\n    0x678: 68,\n    0x679: 68,\n    0x67a: 68,\n    0x67b: 68,\n    0x67c: 68,\n    0x67d: 68,\n    0x67e: 68,\n    0x67f: 68,\n    0x680: 68,\n    0x681: 68,\n    0x682: 68,\n    0x683: 68,\n    0x684: 68,\n    0x685: 68,\n    0x686: 68,\n    0x687: 68,\n    0x688: 82,\n    0x689: 82,\n    0x68a: 82,\n    0x68b: 82,\n    0x68c: 82,\n    0x68d: 82,\n    0x68e: 82,\n    0x68f: 82,\n    0x690: 82,\n    0x691: 82,\n    0x692: 82,\n    0x693: 82,\n    0x694: 82,\n    0x695: 82,\n    0x696: 82,\n    0x697: 82,\n    0x698: 82,\n    0x699: 82,\n    0x69a: 68,\n    0x69b: 68,\n    0x69c: 68,\n    0x69d: 68,\n    0x69e: 68,\n    0x69f: 68,\n    0x6a0: 68,\n    0x6a1: 68,\n    0x6a2: 68,\n    0x6a3: 68,\n    0x6a4: 68,\n    0x6a5: 68,\n    0x6a6: 68,\n    0x6a7: 68,\n    0x6a8: 68,\n    0x6a9: 68,\n    0x6aa: 68,\n    0x6ab: 68,\n    0x6ac: 68,\n    0x6ad: 68,\n    0x6ae: 68,\n    0x6af: 68,\n    0x6b0: 68,\n    0x6b1: 68,\n    0x6b2: 68,\n    0x6b3: 68,\n    0x6b4: 68,\n    0x6b5: 68,\n    0x6b6: 68,\n    0x6b7: 68,\n    0x6b8: 68,\n    0x6b9: 68,\n    0x6ba: 68,\n    0x6bb: 68,\n    0x6bc: 68,\n    0x6bd: 68,\n    0x6be: 68,\n    0x6bf: 68,\n    0x6c0: 82,\n    0x6c1: 68,\n    0x6c2: 68,\n    0x6c3: 82,\n    0x6c4: 82,\n    0x6c5: 82,\n    0x6c6: 82,\n    0x6c7: 82,\n    0x6c8: 82,\n    0x6c9: 82,\n    0x6ca: 82,\n    0x6cb: 82,\n    0x6cc: 68,\n    0x6cd: 82,\n    0x6ce: 68,\n    0x6cf: 82,\n    0x6d0: 68,\n    0x6d1: 68,\n    0x6d2: 82,\n    0x6d3: 82,\n    0x6d5: 82,\n    0x6d6: 84,\n    0x6d7: 84,\n    0x6d8: 84,\n    0x6d9: 84,\n    0x6da: 84,\n    0x6db: 84,\n    0x6dc: 84,\n    0x6df: 84,\n    0x6e0: 84,\n    0x6e1: 84,\n    0x6e2: 84,\n    0x6e3: 84,\n    0x6e4: 84,\n    0x6e7: 84,\n    0x6e8: 84,\n    0x6ea: 84,\n    0x6eb: 84,\n    0x6ec: 84,\n    0x6ed: 84,\n    0x6ee: 82,\n    0x6ef: 82,\n    0x6fa: 68,\n    0x6fb: 68,\n    0x6fc: 68,\n    0x6ff: 68,\n    0x70f: 84,\n    0x710: 82,\n    0x711: 84,\n    0x712: 68,\n    0x713: 68,\n    0x714: 68,\n    0x715: 82,\n    0x716: 82,\n    0x717: 82,\n    0x718: 82,\n    0x719: 82,\n    0x71a: 68,\n    0x71b: 68,\n    0x71c: 68,\n    0x71d: 68,\n    0x71e: 82,\n    0x71f: 68,\n    0x720: 68,\n    0x721: 68,\n    0x722: 68,\n    0x723: 68,\n    0x724: 68,\n    0x725: 68,\n    0x726: 68,\n    0x727: 68,\n    0x728: 82,\n    0x729: 68,\n    0x72a: 82,\n    0x72b: 68,\n    0x72c: 82,\n    0x72d: 68,\n    0x72e: 68,\n    0x72f: 82,\n    0x730: 84,\n    0x731: 84,\n    0x732: 84,\n    0x733: 84,\n    0x734: 84,\n    0x735: 84,\n    0x736: 84,\n    0x737: 84,\n    0x738: 84,\n    0x739: 84,\n    0x73a: 84,\n    0x73b: 84,\n    0x73c: 84,\n    0x73d: 84,\n    0x73e: 84,\n    0x73f: 84,\n    0x740: 84,\n    0x741: 84,\n    0x742: 84,\n    0x743: 84,\n    0x744: 84,\n    0x745: 84,\n    0x746: 84,\n    0x747: 84,\n    0x748: 84,\n    0x749: 84,\n    0x74a: 84,\n    0x74d: 82,\n    0x74e: 68,\n    0x74f: 68,\n    0x750: 68,\n    0x751: 68,\n    0x752: 68,\n    0x753: 68,\n    0x754: 68,\n    0x755: 68,\n    0x756: 68,\n    0x757: 68,\n    0x758: 68,\n    0x759: 82,\n    0x75a: 82,\n    0x75b: 82,\n    0x75c: 68,\n    0x75d: 68,\n    0x75e: 68,\n    0x75f: 68,\n    0x760: 68,\n    0x761: 68,\n    0x762: 68,\n    0x763: 68,\n    0x764: 68,\n    0x765: 68,\n    0x766: 68,\n    0x767: 68,\n    0x768: 68,\n    0x769: 68,\n    0x76a: 68,\n    0x76b: 82,\n    0x76c: 82,\n    0x76d: 68,\n    0x76e: 68,\n    0x76f: 68,\n    0x770: 68,\n    0x771: 82,\n    0x772: 68,\n    0x773: 82,\n    0x774: 82,\n    0x775: 68,\n    0x776: 68,\n    0x777: 68,\n    0x778: 82,\n    0x779: 82,\n    0x77a: 68,\n    0x77b: 68,\n    0x77c: 68,\n    0x77d: 68,\n    0x77e: 68,\n    0x77f: 68,\n    0x7a6: 84,\n    0x7a7: 84,\n    0x7a8: 84,\n    0x7a9: 84,\n    0x7aa: 84,\n    0x7ab: 84,\n    0x7ac: 84,\n    0x7ad: 84,\n    0x7ae: 84,\n    0x7af: 84,\n    0x7b0: 84,\n    0x7ca: 68,\n    0x7cb: 68,\n    0x7cc: 68,\n    0x7cd: 68,\n    0x7ce: 68,\n    0x7cf: 68,\n    0x7d0: 68,\n    0x7d1: 68,\n    0x7d2: 68,\n    0x7d3: 68,\n    0x7d4: 68,\n    0x7d5: 68,\n    0x7d6: 68,\n    0x7d7: 68,\n    0x7d8: 68,\n    0x7d9: 68,\n    0x7da: 68,\n    0x7db: 68,\n    0x7dc: 68,\n    0x7dd: 68,\n    0x7de: 68,\n    0x7df: 68,\n    0x7e0: 68,\n    0x7e1: 68,\n    0x7e2: 68,\n    0x7e3: 68,\n    0x7e4: 68,\n    0x7e5: 68,\n    0x7e6: 68,\n    0x7e7: 68,\n    0x7e8: 68,\n    0x7e9: 68,\n    0x7ea: 68,\n    0x7eb: 84,\n    0x7ec: 84,\n    0x7ed: 84,\n    0x7ee: 84,\n    0x7ef: 84,\n    0x7f0: 84,\n    0x7f1: 84,\n    0x7f2: 84,\n    0x7f3: 84,\n    0x7fa: 67,\n    0x7fd: 84,\n    0x816: 84,\n    0x817: 84,\n    0x818: 84,\n    0x819: 84,\n    0x81b: 84,\n    0x81c: 84,\n    0x81d: 84,\n    0x81e: 84,\n    0x81f: 84,\n    0x820: 84,\n    0x821: 84,\n    0x822: 84,\n    0x823: 84,\n    0x825: 84,\n    0x826: 84,\n    0x827: 84,\n    0x829: 84,\n    0x82a: 84,\n    0x82b: 84,\n    0x82c: 84,\n    0x82d: 84,\n    0x840: 82,\n    0x841: 68,\n    0x842: 68,\n    0x843: 68,\n    0x844: 68,\n    0x845: 68,\n    0x846: 82,\n    0x847: 82,\n    0x848: 68,\n    0x849: 82,\n    0x84a: 68,\n    0x84b: 68,\n    0x84c: 68,\n    0x84d: 68,\n    0x84e: 68,\n    0x84f: 68,\n    0x850: 68,\n    0x851: 68,\n    0x852: 68,\n    0x853: 68,\n    0x854: 82,\n    0x855: 68,\n    0x856: 82,\n    0x857: 82,\n    0x858: 82,\n    0x859: 84,\n    0x85a: 84,\n    0x85b: 84,\n    0x860: 68,\n    0x862: 68,\n    0x863: 68,\n    0x864: 68,\n    0x865: 68,\n    0x867: 82,\n    0x868: 68,\n    0x869: 82,\n    0x86a: 82,\n    0x870: 82,\n    0x871: 82,\n    0x872: 82,\n    0x873: 82,\n    0x874: 82,\n    0x875: 82,\n    0x876: 82,\n    0x877: 82,\n    0x878: 82,\n    0x879: 82,\n    0x87a: 82,\n    0x87b: 82,\n    0x87c: 82,\n    0x87d: 82,\n    0x87e: 82,\n    0x87f: 82,\n    0x880: 82,\n    0x881: 82,\n    0x882: 82,\n    0x883: 67,\n    0x884: 67,\n    0x885: 67,\n    0x886: 68,\n    0x889: 68,\n    0x88a: 68,\n    0x88b: 68,\n    0x88c: 68,\n    0x88d: 68,\n    0x88e: 82,\n    0x898: 84,\n    0x899: 84,\n    0x89a: 84,\n    0x89b: 84,\n    0x89c: 84,\n    0x89d: 84,\n    0x89e: 84,\n    0x89f: 84,\n    0x8a0: 68,\n    0x8a1: 68,\n    0x8a2: 68,\n    0x8a3: 68,\n    0x8a4: 68,\n    0x8a5: 68,\n    0x8a6: 68,\n    0x8a7: 68,\n    0x8a8: 68,\n    0x8a9: 68,\n    0x8aa: 82,\n    0x8ab: 82,\n    0x8ac: 82,\n    0x8ae: 82,\n    0x8af: 68,\n    0x8b0: 68,\n    0x8b1: 82,\n    0x8b2: 82,\n    0x8b3: 68,\n    0x8b4: 68,\n    0x8b5: 68,\n    0x8b6: 68,\n    0x8b7: 68,\n    0x8b8: 68,\n    0x8b9: 82,\n    0x8ba: 68,\n    0x8bb: 68,\n    0x8bc: 68,\n    0x8bd: 68,\n    0x8be: 68,\n    0x8bf: 68,\n    0x8c0: 68,\n    0x8c1: 68,\n    0x8c2: 68,\n    0x8c3: 68,\n    0x8c4: 68,\n    0x8c5: 68,\n    0x8c6: 68,\n    0x8c7: 68,\n    0x8c8: 68,\n    0x8ca: 84,\n    0x8cb: 84,\n    0x8cc: 84,\n    0x8cd: 84,\n    0x8ce: 84,\n    0x8cf: 84,\n    0x8d0: 84,\n    0x8d1: 84,\n    0x8d2: 84,\n    0x8d3: 84,\n    0x8d4: 84,\n    0x8d5: 84,\n    0x8d6: 84,\n    0x8d7: 84,\n    0x8d8: 84,\n    0x8d9: 84,\n    0x8da: 84,\n    0x8db: 84,\n    0x8dc: 84,\n    0x8dd: 84,\n    0x8de: 84,\n    0x8df: 84,\n    0x8e0: 84,\n    0x8e1: 84,\n    0x8e3: 84,\n    0x8e4: 84,\n    0x8e5: 84,\n    0x8e6: 84,\n    0x8e7: 84,\n    0x8e8: 84,\n    0x8e9: 84,\n    0x8ea: 84,\n    0x8eb: 84,\n    0x8ec: 84,\n    0x8ed: 84,\n    0x8ee: 84,\n    0x8ef: 84,\n    0x8f0: 84,\n    0x8f1: 84,\n    0x8f2: 84,\n    0x8f3: 84,\n    0x8f4: 84,\n    0x8f5: 84,\n    0x8f6: 84,\n    0x8f7: 84,\n    0x8f8: 84,\n    0x8f9: 84,\n    0x8fa: 84,\n    0x8fb: 84,\n    0x8fc: 84,\n    0x8fd: 84,\n    0x8fe: 84,\n    0x8ff: 84,\n    0x900: 84,\n    0x901: 84,\n    0x902: 84,\n    0x93a: 84,\n    0x93c: 84,\n    0x941: 84,\n    0x942: 84,\n    0x943: 84,\n    0x944: 84,\n    0x945: 84,\n    0x946: 84,\n    0x947: 84,\n    0x948: 84,\n    0x94d: 84,\n    0x951: 84,\n    0x952: 84,\n    0x953: 84,\n    0x954: 84,\n    0x955: 84,\n    0x956: 84,\n    0x957: 84,\n    0x962: 84,\n    0x963: 84,\n    0x981: 84,\n    0x9bc: 84,\n    0x9c1: 84,\n    0x9c2: 84,\n    0x9c3: 84,\n    0x9c4: 84,\n    0x9cd: 84,\n    0x9e2: 84,\n    0x9e3: 84,\n    0x9fe: 84,\n    0xa01: 84,\n    0xa02: 84,\n    0xa3c: 84,\n    0xa41: 84,\n    0xa42: 84,\n    0xa47: 84,\n    0xa48: 84,\n    0xa4b: 84,\n    0xa4c: 84,\n    0xa4d: 84,\n    0xa51: 84,\n    0xa70: 84,\n    0xa71: 84,\n    0xa75: 84,\n    0xa81: 84,\n    0xa82: 84,\n    0xabc: 84,\n    0xac1: 84,\n    0xac2: 84,\n    0xac3: 84,\n    0xac4: 84,\n    0xac5: 84,\n    0xac7: 84,\n    0xac8: 84,\n    0xacd: 84,\n    0xae2: 84,\n    0xae3: 84,\n    0xafa: 84,\n    0xafb: 84,\n    0xafc: 84,\n    0xafd: 84,\n    0xafe: 84,\n    0xaff: 84,\n    0xb01: 84,\n    0xb3c: 84,\n    0xb3f: 84,\n    0xb41: 84,\n    0xb42: 84,\n    0xb43: 84,\n    0xb44: 84,\n    0xb4d: 84,\n    0xb55: 84,\n    0xb56: 84,\n    0xb62: 84,\n    0xb63: 84,\n    0xb82: 84,\n    0xbc0: 84,\n    0xbcd: 84,\n    0xc00: 84,\n    0xc04: 84,\n    0xc3c: 84,\n    0xc3e: 84,\n    0xc3f: 84,\n    0xc40: 84,\n    0xc46: 84,\n    0xc47: 84,\n    0xc48: 84,\n    0xc4a: 84,\n    0xc4b: 84,\n    0xc4c: 84,\n    0xc4d: 84,\n    0xc55: 84,\n    0xc56: 84,\n    0xc62: 84,\n    0xc63: 84,\n    0xc81: 84,\n    0xcbc: 84,\n    0xcbf: 84,\n    0xcc6: 84,\n    0xccc: 84,\n    0xccd: 84,\n    0xce2: 84,\n    0xce3: 84,\n    0xd00: 84,\n    0xd01: 84,\n    0xd3b: 84,\n    0xd3c: 84,\n    0xd41: 84,\n    0xd42: 84,\n    0xd43: 84,\n    0xd44: 84,\n    0xd4d: 84,\n    0xd62: 84,\n    0xd63: 84,\n    0xd81: 84,\n    0xdca: 84,\n    0xdd2: 84,\n    0xdd3: 84,\n    0xdd4: 84,\n    0xdd6: 84,\n    0xe31: 84,\n    0xe34: 84,\n    0xe35: 84,\n    0xe36: 84,\n    0xe37: 84,\n    0xe38: 84,\n    0xe39: 84,\n    0xe3a: 84,\n    0xe47: 84,\n    0xe48: 84,\n    0xe49: 84,\n    0xe4a: 84,\n    0xe4b: 84,\n    0xe4c: 84,\n    0xe4d: 84,\n    0xe4e: 84,\n    0xeb1: 84,\n    0xeb4: 84,\n    0xeb5: 84,\n    0xeb6: 84,\n    0xeb7: 84,\n    0xeb8: 84,\n    0xeb9: 84,\n    0xeba: 84,\n    0xebb: 84,\n    0xebc: 84,\n    0xec8: 84,\n    0xec9: 84,\n    0xeca: 84,\n    0xecb: 84,\n    0xecc: 84,\n    0xecd: 84,\n    0xece: 84,\n    0xf18: 84,\n    0xf19: 84,\n    0xf35: 84,\n    0xf37: 84,\n    0xf39: 84,\n    0xf71: 84,\n    0xf72: 84,\n    0xf73: 84,\n    0xf74: 84,\n    0xf75: 84,\n    0xf76: 84,\n    0xf77: 84,\n    0xf78: 84,\n    0xf79: 84,\n    0xf7a: 84,\n    0xf7b: 84,\n    0xf7c: 84,\n    0xf7d: 84,\n    0xf7e: 84,\n    0xf80: 84,\n    0xf81: 84,\n    0xf82: 84,\n    0xf83: 84,\n    0xf84: 84,\n    0xf86: 84,\n    0xf87: 84,\n    0xf8d: 84,\n    0xf8e: 84,\n    0xf8f: 84,\n    0xf90: 84,\n    0xf91: 84,\n    0xf92: 84,\n    0xf93: 84,\n    0xf94: 84,\n    0xf95: 84,\n    0xf96: 84,\n    0xf97: 84,\n    0xf99: 84,\n    0xf9a: 84,\n    0xf9b: 84,\n    0xf9c: 84,\n    0xf9d: 84,\n    0xf9e: 84,\n    0xf9f: 84,\n    0xfa0: 84,\n    0xfa1: 84,\n    0xfa2: 84,\n    0xfa3: 84,\n    0xfa4: 84,\n    0xfa5: 84,\n    0xfa6: 84,\n    0xfa7: 84,\n    0xfa8: 84,\n    0xfa9: 84,\n    0xfaa: 84,\n    0xfab: 84,\n    0xfac: 84,\n    0xfad: 84,\n    0xfae: 84,\n    0xfaf: 84,\n    0xfb0: 84,\n    0xfb1: 84,\n    0xfb2: 84,\n    0xfb3: 84,\n    0xfb4: 84,\n    0xfb5: 84,\n    0xfb6: 84,\n    0xfb7: 84,\n    0xfb8: 84,\n    0xfb9: 84,\n    0xfba: 84,\n    0xfbb: 84,\n    0xfbc: 84,\n    0xfc6: 84,\n    0x102d: 84,\n    0x102e: 84,\n    0x102f: 84,\n    0x1030: 84,\n    0x1032: 84,\n    0x1033: 84,\n    0x1034: 84,\n    0x1035: 84,\n    0x1036: 84,\n    0x1037: 84,\n    0x1039: 84,\n    0x103a: 84,\n    0x103d: 84,\n    0x103e: 84,\n    0x1058: 84,\n    0x1059: 84,\n    0x105e: 84,\n    0x105f: 84,\n    0x1060: 84,\n    0x1071: 84,\n    0x1072: 84,\n    0x1073: 84,\n    0x1074: 84,\n    0x1082: 84,\n    0x1085: 84,\n    0x1086: 84,\n    0x108d: 84,\n    0x109d: 84,\n    0x135d: 84,\n    0x135e: 84,\n    0x135f: 84,\n    0x1712: 84,\n    0x1713: 84,\n    0x1714: 84,\n    0x1732: 84,\n    0x1733: 84,\n    0x1752: 84,\n    0x1753: 84,\n    0x1772: 84,\n    0x1773: 84,\n    0x17b4: 84,\n    0x17b5: 84,\n    0x17b7: 84,\n    0x17b8: 84,\n    0x17b9: 84,\n    0x17ba: 84,\n    0x17bb: 84,\n    0x17bc: 84,\n    0x17bd: 84,\n    0x17c6: 84,\n    0x17c9: 84,\n    0x17ca: 84,\n    0x17cb: 84,\n    0x17cc: 84,\n    0x17cd: 84,\n    0x17ce: 84,\n    0x17cf: 84,\n    0x17d0: 84,\n    0x17d1: 84,\n    0x17d2: 84,\n    0x17d3: 84,\n    0x17dd: 84,\n    0x1807: 68,\n    0x180a: 67,\n    0x180b: 84,\n    0x180c: 84,\n    0x180d: 84,\n    0x180f: 84,\n    0x1820: 68,\n    0x1821: 68,\n    0x1822: 68,\n    0x1823: 68,\n    0x1824: 68,\n    0x1825: 68,\n    0x1826: 68,\n    0x1827: 68,\n    0x1828: 68,\n    0x1829: 68,\n    0x182a: 68,\n    0x182b: 68,\n    0x182c: 68,\n    0x182d: 68,\n    0x182e: 68,\n    0x182f: 68,\n    0x1830: 68,\n    0x1831: 68,\n    0x1832: 68,\n    0x1833: 68,\n    0x1834: 68,\n    0x1835: 68,\n    0x1836: 68,\n    0x1837: 68,\n    0x1838: 68,\n    0x1839: 68,\n    0x183a: 68,\n    0x183b: 68,\n    0x183c: 68,\n    0x183d: 68,\n    0x183e: 68,\n    0x183f: 68,\n    0x1840: 68,\n    0x1841: 68,\n    0x1842: 68,\n    0x1843: 68,\n    0x1844: 68,\n    0x1845: 68,\n    0x1846: 68,\n    0x1847: 68,\n    0x1848: 68,\n    0x1849: 68,\n    0x184a: 68,\n    0x184b: 68,\n    0x184c: 68,\n    0x184d: 68,\n    0x184e: 68,\n    0x184f: 68,\n    0x1850: 68,\n    0x1851: 68,\n    0x1852: 68,\n    0x1853: 68,\n    0x1854: 68,\n    0x1855: 68,\n    0x1856: 68,\n    0x1857: 68,\n    0x1858: 68,\n    0x1859: 68,\n    0x185a: 68,\n    0x185b: 68,\n    0x185c: 68,\n    0x185d: 68,\n    0x185e: 68,\n    0x185f: 68,\n    0x1860: 68,\n    0x1861: 68,\n    0x1862: 68,\n    0x1863: 68,\n    0x1864: 68,\n    0x1865: 68,\n    0x1866: 68,\n    0x1867: 68,\n    0x1868: 68,\n    0x1869: 68,\n    0x186a: 68,\n    0x186b: 68,\n    0x186c: 68,\n    0x186d: 68,\n    0x186e: 68,\n    0x186f: 68,\n    0x1870: 68,\n    0x1871: 68,\n    0x1872: 68,\n    0x1873: 68,\n    0x1874: 68,\n    0x1875: 68,\n    0x1876: 68,\n    0x1877: 68,\n    0x1878: 68,\n    0x1885: 84,\n    0x1886: 84,\n    0x1887: 68,\n    0x1888: 68,\n    0x1889: 68,\n    0x188a: 68,\n    0x188b: 68,\n    0x188c: 68,\n    0x188d: 68,\n    0x188e: 68,\n    0x188f: 68,\n    0x1890: 68,\n    0x1891: 68,\n    0x1892: 68,\n    0x1893: 68,\n    0x1894: 68,\n    0x1895: 68,\n    0x1896: 68,\n    0x1897: 68,\n    0x1898: 68,\n    0x1899: 68,\n    0x189a: 68,\n    0x189b: 68,\n    0x189c: 68,\n    0x189d: 68,\n    0x189e: 68,\n    0x189f: 68,\n    0x18a0: 68,\n    0x18a1: 68,\n    0x18a2: 68,\n    0x18a3: 68,\n    0x18a4: 68,\n    0x18a5: 68,\n    0x18a6: 68,\n    0x18a7: 68,\n    0x18a8: 68,\n    0x18a9: 84,\n    0x18aa: 68,\n    0x1920: 84,\n    0x1921: 84,\n    0x1922: 84,\n    0x1927: 84,\n    0x1928: 84,\n    0x1932: 84,\n    0x1939: 84,\n    0x193a: 84,\n    0x193b: 84,\n    0x1a17: 84,\n    0x1a18: 84,\n    0x1a1b: 84,\n    0x1a56: 84,\n    0x1a58: 84,\n    0x1a59: 84,\n    0x1a5a: 84,\n    0x1a5b: 84,\n    0x1a5c: 84,\n    0x1a5d: 84,\n    0x1a5e: 84,\n    0x1a60: 84,\n    0x1a62: 84,\n    0x1a65: 84,\n    0x1a66: 84,\n    0x1a67: 84,\n    0x1a68: 84,\n    0x1a69: 84,\n    0x1a6a: 84,\n    0x1a6b: 84,\n    0x1a6c: 84,\n    0x1a73: 84,\n    0x1a74: 84,\n    0x1a75: 84,\n    0x1a76: 84,\n    0x1a77: 84,\n    0x1a78: 84,\n    0x1a79: 84,\n    0x1a7a: 84,\n    0x1a7b: 84,\n    0x1a7c: 84,\n    0x1a7f: 84,\n    0x1ab0: 84,\n    0x1ab1: 84,\n    0x1ab2: 84,\n    0x1ab3: 84,\n    0x1ab4: 84,\n    0x1ab5: 84,\n    0x1ab6: 84,\n    0x1ab7: 84,\n    0x1ab8: 84,\n    0x1ab9: 84,\n    0x1aba: 84,\n    0x1abb: 84,\n    0x1abc: 84,\n    0x1abd: 84,\n    0x1abe: 84,\n    0x1abf: 84,\n    0x1ac0: 84,\n    0x1ac1: 84,\n    0x1ac2: 84,\n    0x1ac3: 84,\n    0x1ac4: 84,\n    0x1ac5: 84,\n    0x1ac6: 84,\n    0x1ac7: 84,\n    0x1ac8: 84,\n    0x1ac9: 84,\n    0x1aca: 84,\n    0x1acb: 84,\n    0x1acc: 84,\n    0x1acd: 84,\n    0x1ace: 84,\n    0x1b00: 84,\n    0x1b01: 84,\n    0x1b02: 84,\n    0x1b03: 84,\n    0x1b34: 84,\n    0x1b36: 84,\n    0x1b37: 84,\n    0x1b38: 84,\n    0x1b39: 84,\n    0x1b3a: 84,\n    0x1b3c: 84,\n    0x1b42: 84,\n    0x1b6b: 84,\n    0x1b6c: 84,\n    0x1b6d: 84,\n    0x1b6e: 84,\n    0x1b6f: 84,\n    0x1b70: 84,\n    0x1b71: 84,\n    0x1b72: 84,\n    0x1b73: 84,\n    0x1b80: 84,\n    0x1b81: 84,\n    0x1ba2: 84,\n    0x1ba3: 84,\n    0x1ba4: 84,\n    0x1ba5: 84,\n    0x1ba8: 84,\n    0x1ba9: 84,\n    0x1bab: 84,\n    0x1bac: 84,\n    0x1bad: 84,\n    0x1be6: 84,\n    0x1be8: 84,\n    0x1be9: 84,\n    0x1bed: 84,\n    0x1bef: 84,\n    0x1bf0: 84,\n    0x1bf1: 84,\n    0x1c2c: 84,\n    0x1c2d: 84,\n    0x1c2e: 84,\n    0x1c2f: 84,\n    0x1c30: 84,\n    0x1c31: 84,\n    0x1c32: 84,\n    0x1c33: 84,\n    0x1c36: 84,\n    0x1c37: 84,\n    0x1cd0: 84,\n    0x1cd1: 84,\n    0x1cd2: 84,\n    0x1cd4: 84,\n    0x1cd5: 84,\n    0x1cd6: 84,\n    0x1cd7: 84,\n    0x1cd8: 84,\n    0x1cd9: 84,\n    0x1cda: 84,\n    0x1cdb: 84,\n    0x1cdc: 84,\n    0x1cdd: 84,\n    0x1cde: 84,\n    0x1cdf: 84,\n    0x1ce0: 84,\n    0x1ce2: 84,\n    0x1ce3: 84,\n    0x1ce4: 84,\n    0x1ce5: 84,\n    0x1ce6: 84,\n    0x1ce7: 84,\n    0x1ce8: 84,\n    0x1ced: 84,\n    0x1cf4: 84,\n    0x1cf8: 84,\n    0x1cf9: 84,\n    0x1dc0: 84,\n    0x1dc1: 84,\n    0x1dc2: 84,\n    0x1dc3: 84,\n    0x1dc4: 84,\n    0x1dc5: 84,\n    0x1dc6: 84,\n    0x1dc7: 84,\n    0x1dc8: 84,\n    0x1dc9: 84,\n    0x1dca: 84,\n    0x1dcb: 84,\n    0x1dcc: 84,\n    0x1dcd: 84,\n    0x1dce: 84,\n    0x1dcf: 84,\n    0x1dd0: 84,\n    0x1dd1: 84,\n    0x1dd2: 84,\n    0x1dd3: 84,\n    0x1dd4: 84,\n    0x1dd5: 84,\n    0x1dd6: 84,\n    0x1dd7: 84,\n    0x1dd8: 84,\n    0x1dd9: 84,\n    0x1dda: 84,\n    0x1ddb: 84,\n    0x1ddc: 84,\n    0x1ddd: 84,\n    0x1dde: 84,\n    0x1ddf: 84,\n    0x1de0: 84,\n    0x1de1: 84,\n    0x1de2: 84,\n    0x1de3: 84,\n    0x1de4: 84,\n    0x1de5: 84,\n    0x1de6: 84,\n    0x1de7: 84,\n    0x1de8: 84,\n    0x1de9: 84,\n    0x1dea: 84,\n    0x1deb: 84,\n    0x1dec: 84,\n    0x1ded: 84,\n    0x1dee: 84,\n    0x1def: 84,\n    0x1df0: 84,\n    0x1df1: 84,\n    0x1df2: 84,\n    0x1df3: 84,\n    0x1df4: 84,\n    0x1df5: 84,\n    0x1df6: 84,\n    0x1df7: 84,\n    0x1df8: 84,\n    0x1df9: 84,\n    0x1dfa: 84,\n    0x1dfb: 84,\n    0x1dfc: 84,\n    0x1dfd: 84,\n    0x1dfe: 84,\n    0x1dff: 84,\n    0x200b: 84,\n    0x200d: 67,\n    0x200e: 84,\n    0x200f: 84,\n    0x202a: 84,\n    0x202b: 84,\n    0x202c: 84,\n    0x202d: 84,\n    0x202e: 84,\n    0x2060: 84,\n    0x2061: 84,\n    0x2062: 84,\n    0x2063: 84,\n    0x2064: 84,\n    0x206a: 84,\n    0x206b: 84,\n    0x206c: 84,\n    0x206d: 84,\n    0x206e: 84,\n    0x206f: 84,\n    0x20d0: 84,\n    0x20d1: 84,\n    0x20d2: 84,\n    0x20d3: 84,\n    0x20d4: 84,\n    0x20d5: 84,\n    0x20d6: 84,\n    0x20d7: 84,\n    0x20d8: 84,\n    0x20d9: 84,\n    0x20da: 84,\n    0x20db: 84,\n    0x20dc: 84,\n    0x20dd: 84,\n    0x20de: 84,\n    0x20df: 84,\n    0x20e0: 84,\n    0x20e1: 84,\n    0x20e2: 84,\n    0x20e3: 84,\n    0x20e4: 84,\n    0x20e5: 84,\n    0x20e6: 84,\n    0x20e7: 84,\n    0x20e8: 84,\n    0x20e9: 84,\n    0x20ea: 84,\n    0x20eb: 84,\n    0x20ec: 84,\n    0x20ed: 84,\n    0x20ee: 84,\n    0x20ef: 84,\n    0x20f0: 84,\n    0x2cef: 84,\n    0x2cf0: 84,\n    0x2cf1: 84,\n    0x2d7f: 84,\n    0x2de0: 84,\n    0x2de1: 84,\n    0x2de2: 84,\n    0x2de3: 84,\n    0x2de4: 84,\n    0x2de5: 84,\n    0x2de6: 84,\n    0x2de7: 84,\n    0x2de8: 84,\n    0x2de9: 84,\n    0x2dea: 84,\n    0x2deb: 84,\n    0x2dec: 84,\n    0x2ded: 84,\n    0x2dee: 84,\n    0x2def: 84,\n    0x2df0: 84,\n    0x2df1: 84,\n    0x2df2: 84,\n    0x2df3: 84,\n    0x2df4: 84,\n    0x2df5: 84,\n    0x2df6: 84,\n    0x2df7: 84,\n    0x2df8: 84,\n    0x2df9: 84,\n    0x2dfa: 84,\n    0x2dfb: 84,\n    0x2dfc: 84,\n    0x2dfd: 84,\n    0x2dfe: 84,\n    0x2dff: 84,\n    0x302a: 84,\n    0x302b: 84,\n    0x302c: 84,\n    0x302d: 84,\n    0x3099: 84,\n    0x309a: 84,\n    0xa66f: 84,\n    0xa670: 84,\n    0xa671: 84,\n    0xa672: 84,\n    0xa674: 84,\n    0xa675: 84,\n    0xa676: 84,\n    0xa677: 84,\n    0xa678: 84,\n    0xa679: 84,\n    0xa67a: 84,\n    0xa67b: 84,\n    0xa67c: 84,\n    0xa67d: 84,\n    0xa69e: 84,\n    0xa69f: 84,\n    0xa6f0: 84,\n    0xa6f1: 84,\n    0xa802: 84,\n    0xa806: 84,\n    0xa80b: 84,\n    0xa825: 84,\n    0xa826: 84,\n    0xa82c: 84,\n    0xa840: 68,\n    0xa841: 68,\n    0xa842: 68,\n    0xa843: 68,\n    0xa844: 68,\n    0xa845: 68,\n    0xa846: 68,\n    0xa847: 68,\n    0xa848: 68,\n    0xa849: 68,\n    0xa84a: 68,\n    0xa84b: 68,\n    0xa84c: 68,\n    0xa84d: 68,\n    0xa84e: 68,\n    0xa84f: 68,\n    0xa850: 68,\n    0xa851: 68,\n    0xa852: 68,\n    0xa853: 68,\n    0xa854: 68,\n    0xa855: 68,\n    0xa856: 68,\n    0xa857: 68,\n    0xa858: 68,\n    0xa859: 68,\n    0xa85a: 68,\n    0xa85b: 68,\n    0xa85c: 68,\n    0xa85d: 68,\n    0xa85e: 68,\n    0xa85f: 68,\n    0xa860: 68,\n    0xa861: 68,\n    0xa862: 68,\n    0xa863: 68,\n    0xa864: 68,\n    0xa865: 68,\n    0xa866: 68,\n    0xa867: 68,\n    0xa868: 68,\n    0xa869: 68,\n    0xa86a: 68,\n    0xa86b: 68,\n    0xa86c: 68,\n    0xa86d: 68,\n    0xa86e: 68,\n    0xa86f: 68,\n    0xa870: 68,\n    0xa871: 68,\n    0xa872: 76,\n    0xa8c4: 84,\n    0xa8c5: 84,\n    0xa8e0: 84,\n    0xa8e1: 84,\n    0xa8e2: 84,\n    0xa8e3: 84,\n    0xa8e4: 84,\n    0xa8e5: 84,\n    0xa8e6: 84,\n    0xa8e7: 84,\n    0xa8e8: 84,\n    0xa8e9: 84,\n    0xa8ea: 84,\n    0xa8eb: 84,\n    0xa8ec: 84,\n    0xa8ed: 84,\n    0xa8ee: 84,\n    0xa8ef: 84,\n    0xa8f0: 84,\n    0xa8f1: 84,\n    0xa8ff: 84,\n    0xa926: 84,\n    0xa927: 84,\n    0xa928: 84,\n    0xa929: 84,\n    0xa92a: 84,\n    0xa92b: 84,\n    0xa92c: 84,\n    0xa92d: 84,\n    0xa947: 84,\n    0xa948: 84,\n    0xa949: 84,\n    0xa94a: 84,\n    0xa94b: 84,\n    0xa94c: 84,\n    0xa94d: 84,\n    0xa94e: 84,\n    0xa94f: 84,\n    0xa950: 84,\n    0xa951: 84,\n    0xa980: 84,\n    0xa981: 84,\n    0xa982: 84,\n    0xa9b3: 84,\n    0xa9b6: 84,\n    0xa9b7: 84,\n    0xa9b8: 84,\n    0xa9b9: 84,\n    0xa9bc: 84,\n    0xa9bd: 84,\n    0xa9e5: 84,\n    0xaa29: 84,\n    0xaa2a: 84,\n    0xaa2b: 84,\n    0xaa2c: 84,\n    0xaa2d: 84,\n    0xaa2e: 84,\n    0xaa31: 84,\n    0xaa32: 84,\n    0xaa35: 84,\n    0xaa36: 84,\n    0xaa43: 84,\n    0xaa4c: 84,\n    0xaa7c: 84,\n    0xaab0: 84,\n    0xaab2: 84,\n    0xaab3: 84,\n    0xaab4: 84,\n    0xaab7: 84,\n    0xaab8: 84,\n    0xaabe: 84,\n    0xaabf: 84,\n    0xaac1: 84,\n    0xaaec: 84,\n    0xaaed: 84,\n    0xaaf6: 84,\n    0xabe5: 84,\n    0xabe8: 84,\n    0xabed: 84,\n    0xfb1e: 84,\n    0xfe00: 84,\n    0xfe01: 84,\n    0xfe02: 84,\n    0xfe03: 84,\n    0xfe04: 84,\n    0xfe05: 84,\n    0xfe06: 84,\n    0xfe07: 84,\n    0xfe08: 84,\n    0xfe09: 84,\n    0xfe0a: 84,\n    0xfe0b: 84,\n    0xfe0c: 84,\n    0xfe0d: 84,\n    0xfe0e: 84,\n    0xfe0f: 84,\n    0xfe20: 84,\n    0xfe21: 84,\n    0xfe22: 84,\n    0xfe23: 84,\n    0xfe24: 84,\n    0xfe25: 84,\n    0xfe26: 84,\n    0xfe27: 84,\n    0xfe28: 84,\n    0xfe29: 84,\n    0xfe2a: 84,\n    0xfe2b: 84,\n    0xfe2c: 84,\n    0xfe2d: 84,\n    0xfe2e: 84,\n    0xfe2f: 84,\n    0xfeff: 84,\n    0xfff9: 84,\n    0xfffa: 84,\n    0xfffb: 84,\n    0x101fd: 84,\n    0x102e0: 84,\n    0x10376: 84,\n    0x10377: 84,\n    0x10378: 84,\n    0x10379: 84,\n    0x1037a: 84,\n    0x10a01: 84,\n    0x10a02: 84,\n    0x10a03: 84,\n    0x10a05: 84,\n    0x10a06: 84,\n    0x10a0c: 84,\n    0x10a0d: 84,\n    0x10a0e: 84,\n    0x10a0f: 84,\n    0x10a38: 84,\n    0x10a39: 84,\n    0x10a3a: 84,\n    0x10a3f: 84,\n    0x10ac0: 68,\n    0x10ac1: 68,\n    0x10ac2: 68,\n    0x10ac3: 68,\n    0x10ac4: 68,\n    0x10ac5: 82,\n    0x10ac7: 82,\n    0x10ac9: 82,\n    0x10aca: 82,\n    0x10acd: 76,\n    0x10ace: 82,\n    0x10acf: 82,\n    0x10ad0: 82,\n    0x10ad1: 82,\n    0x10ad2: 82,\n    0x10ad3: 68,\n    0x10ad4: 68,\n    0x10ad5: 68,\n    0x10ad6: 68,\n    0x10ad7: 76,\n    0x10ad8: 68,\n    0x10ad9: 68,\n    0x10ada: 68,\n    0x10adb: 68,\n    0x10adc: 68,\n    0x10add: 82,\n    0x10ade: 68,\n    0x10adf: 68,\n    0x10ae0: 68,\n    0x10ae1: 82,\n    0x10ae4: 82,\n    0x10ae5: 84,\n    0x10ae6: 84,\n    0x10aeb: 68,\n    0x10aec: 68,\n    0x10aed: 68,\n    0x10aee: 68,\n    0x10aef: 82,\n    0x10b80: 68,\n    0x10b81: 82,\n    0x10b82: 68,\n    0x10b83: 82,\n    0x10b84: 82,\n    0x10b85: 82,\n    0x10b86: 68,\n    0x10b87: 68,\n    0x10b88: 68,\n    0x10b89: 82,\n    0x10b8a: 68,\n    0x10b8b: 68,\n    0x10b8c: 82,\n    0x10b8d: 68,\n    0x10b8e: 82,\n    0x10b8f: 82,\n    0x10b90: 68,\n    0x10b91: 82,\n    0x10ba9: 82,\n    0x10baa: 82,\n    0x10bab: 82,\n    0x10bac: 82,\n    0x10bad: 68,\n    0x10bae: 68,\n    0x10d00: 76,\n    0x10d01: 68,\n    0x10d02: 68,\n    0x10d03: 68,\n    0x10d04: 68,\n    0x10d05: 68,\n    0x10d06: 68,\n    0x10d07: 68,\n    0x10d08: 68,\n    0x10d09: 68,\n    0x10d0a: 68,\n    0x10d0b: 68,\n    0x10d0c: 68,\n    0x10d0d: 68,\n    0x10d0e: 68,\n    0x10d0f: 68,\n    0x10d10: 68,\n    0x10d11: 68,\n    0x10d12: 68,\n    0x10d13: 68,\n    0x10d14: 68,\n    0x10d15: 68,\n    0x10d16: 68,\n    0x10d17: 68,\n    0x10d18: 68,\n    0x10d19: 68,\n    0x10d1a: 68,\n    0x10d1b: 68,\n    0x10d1c: 68,\n    0x10d1d: 68,\n    0x10d1e: 68,\n    0x10d1f: 68,\n    0x10d20: 68,\n    0x10d21: 68,\n    0x10d22: 82,\n    0x10d23: 68,\n    0x10d24: 84,\n    0x10d25: 84,\n    0x10d26: 84,\n    0x10d27: 84,\n    0x10eab: 84,\n    0x10eac: 84,\n    0x10efd: 84,\n    0x10efe: 84,\n    0x10eff: 84,\n    0x10f30: 68,\n    0x10f31: 68,\n    0x10f32: 68,\n    0x10f33: 82,\n    0x10f34: 68,\n    0x10f35: 68,\n    0x10f36: 68,\n    0x10f37: 68,\n    0x10f38: 68,\n    0x10f39: 68,\n    0x10f3a: 68,\n    0x10f3b: 68,\n    0x10f3c: 68,\n    0x10f3d: 68,\n    0x10f3e: 68,\n    0x10f3f: 68,\n    0x10f40: 68,\n    0x10f41: 68,\n    0x10f42: 68,\n    0x10f43: 68,\n    0x10f44: 68,\n    0x10f46: 84,\n    0x10f47: 84,\n    0x10f48: 84,\n    0x10f49: 84,\n    0x10f4a: 84,\n    0x10f4b: 84,\n    0x10f4c: 84,\n    0x10f4d: 84,\n    0x10f4e: 84,\n    0x10f4f: 84,\n    0x10f50: 84,\n    0x10f51: 68,\n    0x10f52: 68,\n    0x10f53: 68,\n    0x10f54: 82,\n    0x10f70: 68,\n    0x10f71: 68,\n    0x10f72: 68,\n    0x10f73: 68,\n    0x10f74: 82,\n    0x10f75: 82,\n    0x10f76: 68,\n    0x10f77: 68,\n    0x10f78: 68,\n    0x10f79: 68,\n    0x10f7a: 68,\n    0x10f7b: 68,\n    0x10f7c: 68,\n    0x10f7d: 68,\n    0x10f7e: 68,\n    0x10f7f: 68,\n    0x10f80: 68,\n    0x10f81: 68,\n    0x10f82: 84,\n    0x10f83: 84,\n    0x10f84: 84,\n    0x10f85: 84,\n    0x10fb0: 68,\n    0x10fb2: 68,\n    0x10fb3: 68,\n    0x10fb4: 82,\n    0x10fb5: 82,\n    0x10fb6: 82,\n    0x10fb8: 68,\n    0x10fb9: 82,\n    0x10fba: 82,\n    0x10fbb: 68,\n    0x10fbc: 68,\n    0x10fbd: 82,\n    0x10fbe: 68,\n    0x10fbf: 68,\n    0x10fc1: 68,\n    0x10fc2: 82,\n    0x10fc3: 82,\n    0x10fc4: 68,\n    0x10fc9: 82,\n    0x10fca: 68,\n    0x10fcb: 76,\n    0x11001: 84,\n    0x11038: 84,\n    0x11039: 84,\n    0x1103a: 84,\n    0x1103b: 84,\n    0x1103c: 84,\n    0x1103d: 84,\n    0x1103e: 84,\n    0x1103f: 84,\n    0x11040: 84,\n    0x11041: 84,\n    0x11042: 84,\n    0x11043: 84,\n    0x11044: 84,\n    0x11045: 84,\n    0x11046: 84,\n    0x11070: 84,\n    0x11073: 84,\n    0x11074: 84,\n    0x1107f: 84,\n    0x11080: 84,\n    0x11081: 84,\n    0x110b3: 84,\n    0x110b4: 84,\n    0x110b5: 84,\n    0x110b6: 84,\n    0x110b9: 84,\n    0x110ba: 84,\n    0x110c2: 84,\n    0x11100: 84,\n    0x11101: 84,\n    0x11102: 84,\n    0x11127: 84,\n    0x11128: 84,\n    0x11129: 84,\n    0x1112a: 84,\n    0x1112b: 84,\n    0x1112d: 84,\n    0x1112e: 84,\n    0x1112f: 84,\n    0x11130: 84,\n    0x11131: 84,\n    0x11132: 84,\n    0x11133: 84,\n    0x11134: 84,\n    0x11173: 84,\n    0x11180: 84,\n    0x11181: 84,\n    0x111b6: 84,\n    0x111b7: 84,\n    0x111b8: 84,\n    0x111b9: 84,\n    0x111ba: 84,\n    0x111bb: 84,\n    0x111bc: 84,\n    0x111bd: 84,\n    0x111be: 84,\n    0x111c9: 84,\n    0x111ca: 84,\n    0x111cb: 84,\n    0x111cc: 84,\n    0x111cf: 84,\n    0x1122f: 84,\n    0x11230: 84,\n    0x11231: 84,\n    0x11234: 84,\n    0x11236: 84,\n    0x11237: 84,\n    0x1123e: 84,\n    0x11241: 84,\n    0x112df: 84,\n    0x112e3: 84,\n    0x112e4: 84,\n    0x112e5: 84,\n    0x112e6: 84,\n    0x112e7: 84,\n    0x112e8: 84,\n    0x112e9: 84,\n    0x112ea: 84,\n    0x11300: 84,\n    0x11301: 84,\n    0x1133b: 84,\n    0x1133c: 84,\n    0x11340: 84,\n    0x11366: 84,\n    0x11367: 84,\n    0x11368: 84,\n    0x11369: 84,\n    0x1136a: 84,\n    0x1136b: 84,\n    0x1136c: 84,\n    0x11370: 84,\n    0x11371: 84,\n    0x11372: 84,\n    0x11373: 84,\n    0x11374: 84,\n    0x11438: 84,\n    0x11439: 84,\n    0x1143a: 84,\n    0x1143b: 84,\n    0x1143c: 84,\n    0x1143d: 84,\n    0x1143e: 84,\n    0x1143f: 84,\n    0x11442: 84,\n    0x11443: 84,\n    0x11444: 84,\n    0x11446: 84,\n    0x1145e: 84,\n    0x114b3: 84,\n    0x114b4: 84,\n    0x114b5: 84,\n    0x114b6: 84,\n    0x114b7: 84,\n    0x114b8: 84,\n    0x114ba: 84,\n    0x114bf: 84,\n    0x114c0: 84,\n    0x114c2: 84,\n    0x114c3: 84,\n    0x115b2: 84,\n    0x115b3: 84,\n    0x115b4: 84,\n    0x115b5: 84,\n    0x115bc: 84,\n    0x115bd: 84,\n    0x115bf: 84,\n    0x115c0: 84,\n    0x115dc: 84,\n    0x115dd: 84,\n    0x11633: 84,\n    0x11634: 84,\n    0x11635: 84,\n    0x11636: 84,\n    0x11637: 84,\n    0x11638: 84,\n    0x11639: 84,\n    0x1163a: 84,\n    0x1163d: 84,\n    0x1163f: 84,\n    0x11640: 84,\n    0x116ab: 84,\n    0x116ad: 84,\n    0x116b0: 84,\n    0x116b1: 84,\n    0x116b2: 84,\n    0x116b3: 84,\n    0x116b4: 84,\n    0x116b5: 84,\n    0x116b7: 84,\n    0x1171d: 84,\n    0x1171e: 84,\n    0x1171f: 84,\n    0x11722: 84,\n    0x11723: 84,\n    0x11724: 84,\n    0x11725: 84,\n    0x11727: 84,\n    0x11728: 84,\n    0x11729: 84,\n    0x1172a: 84,\n    0x1172b: 84,\n    0x1182f: 84,\n    0x11830: 84,\n    0x11831: 84,\n    0x11832: 84,\n    0x11833: 84,\n    0x11834: 84,\n    0x11835: 84,\n    0x11836: 84,\n    0x11837: 84,\n    0x11839: 84,\n    0x1183a: 84,\n    0x1193b: 84,\n    0x1193c: 84,\n    0x1193e: 84,\n    0x11943: 84,\n    0x119d4: 84,\n    0x119d5: 84,\n    0x119d6: 84,\n    0x119d7: 84,\n    0x119da: 84,\n    0x119db: 84,\n    0x119e0: 84,\n    0x11a01: 84,\n    0x11a02: 84,\n    0x11a03: 84,\n    0x11a04: 84,\n    0x11a05: 84,\n    0x11a06: 84,\n    0x11a07: 84,\n    0x11a08: 84,\n    0x11a09: 84,\n    0x11a0a: 84,\n    0x11a33: 84,\n    0x11a34: 84,\n    0x11a35: 84,\n    0x11a36: 84,\n    0x11a37: 84,\n    0x11a38: 84,\n    0x11a3b: 84,\n    0x11a3c: 84,\n    0x11a3d: 84,\n    0x11a3e: 84,\n    0x11a47: 84,\n    0x11a51: 84,\n    0x11a52: 84,\n    0x11a53: 84,\n    0x11a54: 84,\n    0x11a55: 84,\n    0x11a56: 84,\n    0x11a59: 84,\n    0x11a5a: 84,\n    0x11a5b: 84,\n    0x11a8a: 84,\n    0x11a8b: 84,\n    0x11a8c: 84,\n    0x11a8d: 84,\n    0x11a8e: 84,\n    0x11a8f: 84,\n    0x11a90: 84,\n    0x11a91: 84,\n    0x11a92: 84,\n    0x11a93: 84,\n    0x11a94: 84,\n    0x11a95: 84,\n    0x11a96: 84,\n    0x11a98: 84,\n    0x11a99: 84,\n    0x11c30: 84,\n    0x11c31: 84,\n    0x11c32: 84,\n    0x11c33: 84,\n    0x11c34: 84,\n    0x11c35: 84,\n    0x11c36: 84,\n    0x11c38: 84,\n    0x11c39: 84,\n    0x11c3a: 84,\n    0x11c3b: 84,\n    0x11c3c: 84,\n    0x11c3d: 84,\n    0x11c3f: 84,\n    0x11c92: 84,\n    0x11c93: 84,\n    0x11c94: 84,\n    0x11c95: 84,\n    0x11c96: 84,\n    0x11c97: 84,\n    0x11c98: 84,\n    0x11c99: 84,\n    0x11c9a: 84,\n    0x11c9b: 84,\n    0x11c9c: 84,\n    0x11c9d: 84,\n    0x11c9e: 84,\n    0x11c9f: 84,\n    0x11ca0: 84,\n    0x11ca1: 84,\n    0x11ca2: 84,\n    0x11ca3: 84,\n    0x11ca4: 84,\n    0x11ca5: 84,\n    0x11ca6: 84,\n    0x11ca7: 84,\n    0x11caa: 84,\n    0x11cab: 84,\n    0x11cac: 84,\n    0x11cad: 84,\n    0x11cae: 84,\n    0x11caf: 84,\n    0x11cb0: 84,\n    0x11cb2: 84,\n    0x11cb3: 84,\n    0x11cb5: 84,\n    0x11cb6: 84,\n    0x11d31: 84,\n    0x11d32: 84,\n    0x11d33: 84,\n    0x11d34: 84,\n    0x11d35: 84,\n    0x11d36: 84,\n    0x11d3a: 84,\n    0x11d3c: 84,\n    0x11d3d: 84,\n    0x11d3f: 84,\n    0x11d40: 84,\n    0x11d41: 84,\n    0x11d42: 84,\n    0x11d43: 84,\n    0x11d44: 84,\n    0x11d45: 84,\n    0x11d47: 84,\n    0x11d90: 84,\n    0x11d91: 84,\n    0x11d95: 84,\n    0x11d97: 84,\n    0x11ef3: 84,\n    0x11ef4: 84,\n    0x11f00: 84,\n    0x11f01: 84,\n    0x11f36: 84,\n    0x11f37: 84,\n    0x11f38: 84,\n    0x11f39: 84,\n    0x11f3a: 84,\n    0x11f40: 84,\n    0x11f42: 84,\n    0x13430: 84,\n    0x13431: 84,\n    0x13432: 84,\n    0x13433: 84,\n    0x13434: 84,\n    0x13435: 84,\n    0x13436: 84,\n    0x13437: 84,\n    0x13438: 84,\n    0x13439: 84,\n    0x1343a: 84,\n    0x1343b: 84,\n    0x1343c: 84,\n    0x1343d: 84,\n    0x1343e: 84,\n    0x1343f: 84,\n    0x13440: 84,\n    0x13447: 84,\n    0x13448: 84,\n    0x13449: 84,\n    0x1344a: 84,\n    0x1344b: 84,\n    0x1344c: 84,\n    0x1344d: 84,\n    0x1344e: 84,\n    0x1344f: 84,\n    0x13450: 84,\n    0x13451: 84,\n    0x13452: 84,\n    0x13453: 84,\n    0x13454: 84,\n    0x13455: 84,\n    0x16af0: 84,\n    0x16af1: 84,\n    0x16af2: 84,\n    0x16af3: 84,\n    0x16af4: 84,\n    0x16b30: 84,\n    0x16b31: 84,\n    0x16b32: 84,\n    0x16b33: 84,\n    0x16b34: 84,\n    0x16b35: 84,\n    0x16b36: 84,\n    0x16f4f: 84,\n    0x16f8f: 84,\n    0x16f90: 84,\n    0x16f91: 84,\n    0x16f92: 84,\n    0x16fe4: 84,\n    0x1bc9d: 84,\n    0x1bc9e: 84,\n    0x1bca0: 84,\n    0x1bca1: 84,\n    0x1bca2: 84,\n    0x1bca3: 84,\n    0x1cf00: 84,\n    0x1cf01: 84,\n    0x1cf02: 84,\n    0x1cf03: 84,\n    0x1cf04: 84,\n    0x1cf05: 84,\n    0x1cf06: 84,\n    0x1cf07: 84,\n    0x1cf08: 84,\n    0x1cf09: 84,\n    0x1cf0a: 84,\n    0x1cf0b: 84,\n    0x1cf0c: 84,\n    0x1cf0d: 84,\n    0x1cf0e: 84,\n    0x1cf0f: 84,\n    0x1cf10: 84,\n    0x1cf11: 84,\n    0x1cf12: 84,\n    0x1cf13: 84,\n    0x1cf14: 84,\n    0x1cf15: 84,\n    0x1cf16: 84,\n    0x1cf17: 84,\n    0x1cf18: 84,\n    0x1cf19: 84,\n    0x1cf1a: 84,\n    0x1cf1b: 84,\n    0x1cf1c: 84,\n    0x1cf1d: 84,\n    0x1cf1e: 84,\n    0x1cf1f: 84,\n    0x1cf20: 84,\n    0x1cf21: 84,\n    0x1cf22: 84,\n    0x1cf23: 84,\n    0x1cf24: 84,\n    0x1cf25: 84,\n    0x1cf26: 84,\n    0x1cf27: 84,\n    0x1cf28: 84,\n    0x1cf29: 84,\n    0x1cf2a: 84,\n    0x1cf2b: 84,\n    0x1cf2c: 84,\n    0x1cf2d: 84,\n    0x1cf30: 84,\n    0x1cf31: 84,\n    0x1cf32: 84,\n    0x1cf33: 84,\n    0x1cf34: 84,\n    0x1cf35: 84,\n    0x1cf36: 84,\n    0x1cf37: 84,\n    0x1cf38: 84,\n    0x1cf39: 84,\n    0x1cf3a: 84,\n    0x1cf3b: 84,\n    0x1cf3c: 84,\n    0x1cf3d: 84,\n    0x1cf3e: 84,\n    0x1cf3f: 84,\n    0x1cf40: 84,\n    0x1cf41: 84,\n    0x1cf42: 84,\n    0x1cf43: 84,\n    0x1cf44: 84,\n    0x1cf45: 84,\n    0x1cf46: 84,\n    0x1d167: 84,\n    0x1d168: 84,\n    0x1d169: 84,\n    0x1d173: 84,\n    0x1d174: 84,\n    0x1d175: 84,\n    0x1d176: 84,\n    0x1d177: 84,\n    0x1d178: 84,\n    0x1d179: 84,\n    0x1d17a: 84,\n    0x1d17b: 84,\n    0x1d17c: 84,\n    0x1d17d: 84,\n    0x1d17e: 84,\n    0x1d17f: 84,\n    0x1d180: 84,\n    0x1d181: 84,\n    0x1d182: 84,\n    0x1d185: 84,\n    0x1d186: 84,\n    0x1d187: 84,\n    0x1d188: 84,\n    0x1d189: 84,\n    0x1d18a: 84,\n    0x1d18b: 84,\n    0x1d1aa: 84,\n    0x1d1ab: 84,\n    0x1d1ac: 84,\n    0x1d1ad: 84,\n    0x1d242: 84,\n    0x1d243: 84,\n    0x1d244: 84,\n    0x1da00: 84,\n    0x1da01: 84,\n    0x1da02: 84,\n    0x1da03: 84,\n    0x1da04: 84,\n    0x1da05: 84,\n    0x1da06: 84,\n    0x1da07: 84,\n    0x1da08: 84,\n    0x1da09: 84,\n    0x1da0a: 84,\n    0x1da0b: 84,\n    0x1da0c: 84,\n    0x1da0d: 84,\n    0x1da0e: 84,\n    0x1da0f: 84,\n    0x1da10: 84,\n    0x1da11: 84,\n    0x1da12: 84,\n    0x1da13: 84,\n    0x1da14: 84,\n    0x1da15: 84,\n    0x1da16: 84,\n    0x1da17: 84,\n    0x1da18: 84,\n    0x1da19: 84,\n    0x1da1a: 84,\n    0x1da1b: 84,\n    0x1da1c: 84,\n    0x1da1d: 84,\n    0x1da1e: 84,\n    0x1da1f: 84,\n    0x1da20: 84,\n    0x1da21: 84,\n    0x1da22: 84,\n    0x1da23: 84,\n    0x1da24: 84,\n    0x1da25: 84,\n    0x1da26: 84,\n    0x1da27: 84,\n    0x1da28: 84,\n    0x1da29: 84,\n    0x1da2a: 84,\n    0x1da2b: 84,\n    0x1da2c: 84,\n    0x1da2d: 84,\n    0x1da2e: 84,\n    0x1da2f: 84,\n    0x1da30: 84,\n    0x1da31: 84,\n    0x1da32: 84,\n    0x1da33: 84,\n    0x1da34: 84,\n    0x1da35: 84,\n    0x1da36: 84,\n    0x1da3b: 84,\n    0x1da3c: 84,\n    0x1da3d: 84,\n    0x1da3e: 84,\n    0x1da3f: 84,\n    0x1da40: 84,\n    0x1da41: 84,\n    0x1da42: 84,\n    0x1da43: 84,\n    0x1da44: 84,\n    0x1da45: 84,\n    0x1da46: 84,\n    0x1da47: 84,\n    0x1da48: 84,\n    0x1da49: 84,\n    0x1da4a: 84,\n    0x1da4b: 84,\n    0x1da4c: 84,\n    0x1da4d: 84,\n    0x1da4e: 84,\n    0x1da4f: 84,\n    0x1da50: 84,\n    0x1da51: 84,\n    0x1da52: 84,\n    0x1da53: 84,\n    0x1da54: 84,\n    0x1da55: 84,\n    0x1da56: 84,\n    0x1da57: 84,\n    0x1da58: 84,\n    0x1da59: 84,\n    0x1da5a: 84,\n    0x1da5b: 84,\n    0x1da5c: 84,\n    0x1da5d: 84,\n    0x1da5e: 84,\n    0x1da5f: 84,\n    0x1da60: 84,\n    0x1da61: 84,\n    0x1da62: 84,\n    0x1da63: 84,\n    0x1da64: 84,\n    0x1da65: 84,\n    0x1da66: 84,\n    0x1da67: 84,\n    0x1da68: 84,\n    0x1da69: 84,\n    0x1da6a: 84,\n    0x1da6b: 84,\n    0x1da6c: 84,\n    0x1da75: 84,\n    0x1da84: 84,\n    0x1da9b: 84,\n    0x1da9c: 84,\n    0x1da9d: 84,\n    0x1da9e: 84,\n    0x1da9f: 84,\n    0x1daa1: 84,\n    0x1daa2: 84,\n    0x1daa3: 84,\n    0x1daa4: 84,\n    0x1daa5: 84,\n    0x1daa6: 84,\n    0x1daa7: 84,\n    0x1daa8: 84,\n    0x1daa9: 84,\n    0x1daaa: 84,\n    0x1daab: 84,\n    0x1daac: 84,\n    0x1daad: 84,\n    0x1daae: 84,\n    0x1daaf: 84,\n    0x1e000: 84,\n    0x1e001: 84,\n    0x1e002: 84,\n    0x1e003: 84,\n    0x1e004: 84,\n    0x1e005: 84,\n    0x1e006: 84,\n    0x1e008: 84,\n    0x1e009: 84,\n    0x1e00a: 84,\n    0x1e00b: 84,\n    0x1e00c: 84,\n    0x1e00d: 84,\n    0x1e00e: 84,\n    0x1e00f: 84,\n    0x1e010: 84,\n    0x1e011: 84,\n    0x1e012: 84,\n    0x1e013: 84,\n    0x1e014: 84,\n    0x1e015: 84,\n    0x1e016: 84,\n    0x1e017: 84,\n    0x1e018: 84,\n    0x1e01b: 84,\n    0x1e01c: 84,\n    0x1e01d: 84,\n    0x1e01e: 84,\n    0x1e01f: 84,\n    0x1e020: 84,\n    0x1e021: 84,\n    0x1e023: 84,\n    0x1e024: 84,\n    0x1e026: 84,\n    0x1e027: 84,\n    0x1e028: 84,\n    0x1e029: 84,\n    0x1e02a: 84,\n    0x1e08f: 84,\n    0x1e130: 84,\n    0x1e131: 84,\n    0x1e132: 84,\n    0x1e133: 84,\n    0x1e134: 84,\n    0x1e135: 84,\n    0x1e136: 84,\n    0x1e2ae: 84,\n    0x1e2ec: 84,\n    0x1e2ed: 84,\n    0x1e2ee: 84,\n    0x1e2ef: 84,\n    0x1e4ec: 84,\n    0x1e4ed: 84,\n    0x1e4ee: 84,\n    0x1e4ef: 84,\n    0x1e8d0: 84,\n    0x1e8d1: 84,\n    0x1e8d2: 84,\n    0x1e8d3: 84,\n    0x1e8d4: 84,\n    0x1e8d5: 84,\n    0x1e8d6: 84,\n    0x1e900: 68,\n    0x1e901: 68,\n    0x1e902: 68,\n    0x1e903: 68,\n    0x1e904: 68,\n    0x1e905: 68,\n    0x1e906: 68,\n    0x1e907: 68,\n    0x1e908: 68,\n    0x1e909: 68,\n    0x1e90a: 68,\n    0x1e90b: 68,\n    0x1e90c: 68,\n    0x1e90d: 68,\n    0x1e90e: 68,\n    0x1e90f: 68,\n    0x1e910: 68,\n    0x1e911: 68,\n    0x1e912: 68,\n    0x1e913: 68,\n    0x1e914: 68,\n    0x1e915: 68,\n    0x1e916: 68,\n    0x1e917: 68,\n    0x1e918: 68,\n    0x1e919: 68,\n    0x1e91a: 68,\n    0x1e91b: 68,\n    0x1e91c: 68,\n    0x1e91d: 68,\n    0x1e91e: 68,\n    0x1e91f: 68,\n    0x1e920: 68,\n    0x1e921: 68,\n    0x1e922: 68,\n    0x1e923: 68,\n    0x1e924: 68,\n    0x1e925: 68,\n    0x1e926: 68,\n    0x1e927: 68,\n    0x1e928: 68,\n    0x1e929: 68,\n    0x1e92a: 68,\n    0x1e92b: 68,\n    0x1e92c: 68,\n    0x1e92d: 68,\n    0x1e92e: 68,\n    0x1e92f: 68,\n    0x1e930: 68,\n    0x1e931: 68,\n    0x1e932: 68,\n    0x1e933: 68,\n    0x1e934: 68,\n    0x1e935: 68,\n    0x1e936: 68,\n    0x1e937: 68,\n    0x1e938: 68,\n    0x1e939: 68,\n    0x1e93a: 68,\n    0x1e93b: 68,\n    0x1e93c: 68,\n    0x1e93d: 68,\n    0x1e93e: 68,\n    0x1e93f: 68,\n    0x1e940: 68,\n    0x1e941: 68,\n    0x1e942: 68,\n    0x1e943: 68,\n    0x1e944: 84,\n    0x1e945: 84,\n    0x1e946: 84,\n    0x1e947: 84,\n    0x1e948: 84,\n    0x1e949: 84,\n    0x1e94a: 84,\n    0x1e94b: 84,\n    0xe0001: 84,\n    0xe0020: 84,\n    0xe0021: 84,\n    0xe0022: 84,\n    0xe0023: 84,\n    0xe0024: 84,\n    0xe0025: 84,\n    0xe0026: 84,\n    0xe0027: 84,\n    0xe0028: 84,\n    0xe0029: 84,\n    0xe002a: 84,\n    0xe002b: 84,\n    0xe002c: 84,\n    0xe002d: 84,\n    0xe002e: 84,\n    0xe002f: 84,\n    0xe0030: 84,\n    0xe0031: 84,\n    0xe0032: 84,\n    0xe0033: 84,\n    0xe0034: 84,\n    0xe0035: 84,\n    0xe0036: 84,\n    0xe0037: 84,\n    0xe0038: 84,\n    0xe0039: 84,\n    0xe003a: 84,\n    0xe003b: 84,\n    0xe003c: 84,\n    0xe003d: 84,\n    0xe003e: 84,\n    0xe003f: 84,\n    0xe0040: 84,\n    0xe0041: 84,\n    0xe0042: 84,\n    0xe0043: 84,\n    0xe0044: 84,\n    0xe0045: 84,\n    0xe0046: 84,\n    0xe0047: 84,\n    0xe0048: 84,\n    0xe0049: 84,\n    0xe004a: 84,\n    0xe004b: 84,\n    0xe004c: 84,\n    0xe004d: 84,\n    0xe004e: 84,\n    0xe004f: 84,\n    0xe0050: 84,\n    0xe0051: 84,\n    0xe0052: 84,\n    0xe0053: 84,\n    0xe0054: 84,\n    0xe0055: 84,\n    0xe0056: 84,\n    0xe0057: 84,\n    0xe0058: 84,\n    0xe0059: 84,\n    0xe005a: 84,\n    0xe005b: 84,\n    0xe005c: 84,\n    0xe005d: 84,\n    0xe005e: 84,\n    0xe005f: 84,\n    0xe0060: 84,\n    0xe0061: 84,\n    0xe0062: 84,\n    0xe0063: 84,\n    0xe0064: 84,\n    0xe0065: 84,\n    0xe0066: 84,\n    0xe0067: 84,\n    0xe0068: 84,\n    0xe0069: 84,\n    0xe006a: 84,\n    0xe006b: 84,\n    0xe006c: 84,\n    0xe006d: 84,\n    0xe006e: 84,\n    0xe006f: 84,\n    0xe0070: 84,\n    0xe0071: 84,\n    0xe0072: 84,\n    0xe0073: 84,\n    0xe0074: 84,\n    0xe0075: 84,\n    0xe0076: 84,\n    0xe0077: 84,\n    0xe0078: 84,\n    0xe0079: 84,\n    0xe007a: 84,\n    0xe007b: 84,\n    0xe007c: 84,\n    0xe007d: 84,\n    0xe007e: 84,\n    0xe007f: 84,\n    0xe0100: 84,\n    0xe0101: 84,\n    0xe0102: 84,\n    0xe0103: 84,\n    0xe0104: 84,\n    0xe0105: 84,\n    0xe0106: 84,\n    0xe0107: 84,\n    0xe0108: 84,\n    0xe0109: 84,\n    0xe010a: 84,\n    0xe010b: 84,\n    0xe010c: 84,\n    0xe010d: 84,\n    0xe010e: 84,\n    0xe010f: 84,\n    0xe0110: 84,\n    0xe0111: 84,\n    0xe0112: 84,\n    0xe0113: 84,\n    0xe0114: 84,\n    0xe0115: 84,\n    0xe0116: 84,\n    0xe0117: 84,\n    0xe0118: 84,\n    0xe0119: 84,\n    0xe011a: 84,\n    0xe011b: 84,\n    0xe011c: 84,\n    0xe011d: 84,\n    0xe011e: 84,\n    0xe011f: 84,\n    0xe0120: 84,\n    0xe0121: 84,\n    0xe0122: 84,\n    0xe0123: 84,\n    0xe0124: 84,\n    0xe0125: 84,\n    0xe0126: 84,\n    0xe0127: 84,\n    0xe0128: 84,\n    0xe0129: 84,\n    0xe012a: 84,\n    0xe012b: 84,\n    0xe012c: 84,\n    0xe012d: 84,\n    0xe012e: 84,\n    0xe012f: 84,\n    0xe0130: 84,\n    0xe0131: 84,\n    0xe0132: 84,\n    0xe0133: 84,\n    0xe0134: 84,\n    0xe0135: 84,\n    0xe0136: 84,\n    0xe0137: 84,\n    0xe0138: 84,\n    0xe0139: 84,\n    0xe013a: 84,\n    0xe013b: 84,\n    0xe013c: 84,\n    0xe013d: 84,\n    0xe013e: 84,\n    0xe013f: 84,\n    0xe0140: 84,\n    0xe0141: 84,\n    0xe0142: 84,\n    0xe0143: 84,\n    0xe0144: 84,\n    0xe0145: 84,\n    0xe0146: 84,\n    0xe0147: 84,\n    0xe0148: 84,\n    0xe0149: 84,\n    0xe014a: 84,\n    0xe014b: 84,\n    0xe014c: 84,\n    0xe014d: 84,\n    0xe014e: 84,\n    0xe014f: 84,\n    0xe0150: 84,\n    0xe0151: 84,\n    0xe0152: 84,\n    0xe0153: 84,\n    0xe0154: 84,\n    0xe0155: 84,\n    0xe0156: 84,\n    0xe0157: 84,\n    0xe0158: 84,\n    0xe0159: 84,\n    0xe015a: 84,\n    0xe015b: 84,\n    0xe015c: 84,\n    0xe015d: 84,\n    0xe015e: 84,\n    0xe015f: 84,\n    0xe0160: 84,\n    0xe0161: 84,\n    0xe0162: 84,\n    0xe0163: 84,\n    0xe0164: 84,\n    0xe0165: 84,\n    0xe0166: 84,\n    0xe0167: 84,\n    0xe0168: 84,\n    0xe0169: 84,\n    0xe016a: 84,\n    0xe016b: 84,\n    0xe016c: 84,\n    0xe016d: 84,\n    0xe016e: 84,\n    0xe016f: 84,\n    0xe0170: 84,\n    0xe0171: 84,\n    0xe0172: 84,\n    0xe0173: 84,\n    0xe0174: 84,\n    0xe0175: 84,\n    0xe0176: 84,\n    0xe0177: 84,\n    0xe0178: 84,\n    0xe0179: 84,\n    0xe017a: 84,\n    0xe017b: 84,\n    0xe017c: 84,\n    0xe017d: 84,\n    0xe017e: 84,\n    0xe017f: 84,\n    0xe0180: 84,\n    0xe0181: 84,\n    0xe0182: 84,\n    0xe0183: 84,\n    0xe0184: 84,\n    0xe0185: 84,\n    0xe0186: 84,\n    0xe0187: 84,\n    0xe0188: 84,\n    0xe0189: 84,\n    0xe018a: 84,\n    0xe018b: 84,\n    0xe018c: 84,\n    0xe018d: 84,\n    0xe018e: 84,\n    0xe018f: 84,\n    0xe0190: 84,\n    0xe0191: 84,\n    0xe0192: 84,\n    0xe0193: 84,\n    0xe0194: 84,\n    0xe0195: 84,\n    0xe0196: 84,\n    0xe0197: 84,\n    0xe0198: 84,\n    0xe0199: 84,\n    0xe019a: 84,\n    0xe019b: 84,\n    0xe019c: 84,\n    0xe019d: 84,\n    0xe019e: 84,\n    0xe019f: 84,\n    0xe01a0: 84,\n    0xe01a1: 84,\n    0xe01a2: 84,\n    0xe01a3: 84,\n    0xe01a4: 84,\n    0xe01a5: 84,\n    0xe01a6: 84,\n    0xe01a7: 84,\n    0xe01a8: 84,\n    0xe01a9: 84,\n    0xe01aa: 84,\n    0xe01ab: 84,\n    0xe01ac: 84,\n    0xe01ad: 84,\n    0xe01ae: 84,\n    0xe01af: 84,\n    0xe01b0: 84,\n    0xe01b1: 84,\n    0xe01b2: 84,\n    0xe01b3: 84,\n    0xe01b4: 84,\n    0xe01b5: 84,\n    0xe01b6: 84,\n    0xe01b7: 84,\n    0xe01b8: 84,\n    0xe01b9: 84,\n    0xe01ba: 84,\n    0xe01bb: 84,\n    0xe01bc: 84,\n    0xe01bd: 84,\n    0xe01be: 84,\n    0xe01bf: 84,\n    0xe01c0: 84,\n    0xe01c1: 84,\n    0xe01c2: 84,\n    0xe01c3: 84,\n    0xe01c4: 84,\n    0xe01c5: 84,\n    0xe01c6: 84,\n    0xe01c7: 84,\n    0xe01c8: 84,\n    0xe01c9: 84,\n    0xe01ca: 84,\n    0xe01cb: 84,\n    0xe01cc: 84,\n    0xe01cd: 84,\n    0xe01ce: 84,\n    0xe01cf: 84,\n    0xe01d0: 84,\n    0xe01d1: 84,\n    0xe01d2: 84,\n    0xe01d3: 84,\n    0xe01d4: 84,\n    0xe01d5: 84,\n    0xe01d6: 84,\n    0xe01d7: 84,\n    0xe01d8: 84,\n    0xe01d9: 84,\n    0xe01da: 84,\n    0xe01db: 84,\n    0xe01dc: 84,\n    0xe01dd: 84,\n    0xe01de: 84,\n    0xe01df: 84,\n    0xe01e0: 84,\n    0xe01e1: 84,\n    0xe01e2: 84,\n    0xe01e3: 84,\n    0xe01e4: 84,\n    0xe01e5: 84,\n    0xe01e6: 84,\n    0xe01e7: 84,\n    0xe01e8: 84,\n    0xe01e9: 84,\n    0xe01ea: 84,\n    0xe01eb: 84,\n    0xe01ec: 84,\n    0xe01ed: 84,\n    0xe01ee: 84,\n    0xe01ef: 84,\n}\ncodepoint_classes = {\n    'PVALID': (\n        0x2d0000002e,\n        0x300000003a,\n        0x610000007b,\n        0xdf000000f7,\n        0xf800000100,\n        0x10100000102,\n        0x10300000104,\n        0x10500000106,\n        0x10700000108,\n        0x1090000010a,\n        0x10b0000010c,\n        0x10d0000010e,\n        0x10f00000110,\n        0x11100000112,\n        0x11300000114,\n        0x11500000116,\n        0x11700000118,\n        0x1190000011a,\n        0x11b0000011c,\n        0x11d0000011e,\n        0x11f00000120,\n        0x12100000122,\n        0x12300000124,\n        0x12500000126,\n        0x12700000128,\n        0x1290000012a,\n        0x12b0000012c,\n        0x12d0000012e,\n        0x12f00000130,\n        0x13100000132,\n        0x13500000136,\n        0x13700000139,\n        0x13a0000013b,\n        0x13c0000013d,\n        0x13e0000013f,\n        0x14200000143,\n        0x14400000145,\n        0x14600000147,\n        0x14800000149,\n        0x14b0000014c,\n        0x14d0000014e,\n        0x14f00000150,\n        0x15100000152,\n        0x15300000154,\n        0x15500000156,\n        0x15700000158,\n        0x1590000015a,\n        0x15b0000015c,\n        0x15d0000015e,\n        0x15f00000160,\n        0x16100000162,\n        0x16300000164,\n        0x16500000166,\n        0x16700000168,\n        0x1690000016a,\n        0x16b0000016c,\n        0x16d0000016e,\n        0x16f00000170,\n        0x17100000172,\n        0x17300000174,\n        0x17500000176,\n        0x17700000178,\n        0x17a0000017b,\n        0x17c0000017d,\n        0x17e0000017f,\n        0x18000000181,\n        0x18300000184,\n        0x18500000186,\n        0x18800000189,\n        0x18c0000018e,\n        0x19200000193,\n        0x19500000196,\n        0x1990000019c,\n        0x19e0000019f,\n        0x1a1000001a2,\n        0x1a3000001a4,\n        0x1a5000001a6,\n        0x1a8000001a9,\n        0x1aa000001ac,\n        0x1ad000001ae,\n        0x1b0000001b1,\n        0x1b4000001b5,\n        0x1b6000001b7,\n        0x1b9000001bc,\n        0x1bd000001c4,\n        0x1ce000001cf,\n        0x1d0000001d1,\n        0x1d2000001d3,\n        0x1d4000001d5,\n        0x1d6000001d7,\n        0x1d8000001d9,\n        0x1da000001db,\n        0x1dc000001de,\n        0x1df000001e0,\n        0x1e1000001e2,\n        0x1e3000001e4,\n        0x1e5000001e6,\n        0x1e7000001e8,\n        0x1e9000001ea,\n        0x1eb000001ec,\n        0x1ed000001ee,\n        0x1ef000001f1,\n        0x1f5000001f6,\n        0x1f9000001fa,\n        0x1fb000001fc,\n        0x1fd000001fe,\n        0x1ff00000200,\n        0x20100000202,\n        0x20300000204,\n        0x20500000206,\n        0x20700000208,\n        0x2090000020a,\n        0x20b0000020c,\n        0x20d0000020e,\n        0x20f00000210,\n        0x21100000212,\n        0x21300000214,\n        0x21500000216,\n        0x21700000218,\n        0x2190000021a,\n        0x21b0000021c,\n        0x21d0000021e,\n        0x21f00000220,\n        0x22100000222,\n        0x22300000224,\n        0x22500000226,\n        0x22700000228,\n        0x2290000022a,\n        0x22b0000022c,\n        0x22d0000022e,\n        0x22f00000230,\n        0x23100000232,\n        0x2330000023a,\n        0x23c0000023d,\n        0x23f00000241,\n        0x24200000243,\n        0x24700000248,\n        0x2490000024a,\n        0x24b0000024c,\n        0x24d0000024e,\n        0x24f000002b0,\n        0x2b9000002c2,\n        0x2c6000002d2,\n        0x2ec000002ed,\n        0x2ee000002ef,\n        0x30000000340,\n        0x34200000343,\n        0x3460000034f,\n        0x35000000370,\n        0x37100000372,\n        0x37300000374,\n        0x37700000378,\n        0x37b0000037e,\n        0x39000000391,\n        0x3ac000003cf,\n        0x3d7000003d8,\n        0x3d9000003da,\n        0x3db000003dc,\n        0x3dd000003de,\n        0x3df000003e0,\n        0x3e1000003e2,\n        0x3e3000003e4,\n        0x3e5000003e6,\n        0x3e7000003e8,\n        0x3e9000003ea,\n        0x3eb000003ec,\n        0x3ed000003ee,\n        0x3ef000003f0,\n        0x3f3000003f4,\n        0x3f8000003f9,\n        0x3fb000003fd,\n        0x43000000460,\n        0x46100000462,\n        0x46300000464,\n        0x46500000466,\n        0x46700000468,\n        0x4690000046a,\n        0x46b0000046c,\n        0x46d0000046e,\n        0x46f00000470,\n        0x47100000472,\n        0x47300000474,\n        0x47500000476,\n        0x47700000478,\n        0x4790000047a,\n        0x47b0000047c,\n        0x47d0000047e,\n        0x47f00000480,\n        0x48100000482,\n        0x48300000488,\n        0x48b0000048c,\n        0x48d0000048e,\n        0x48f00000490,\n        0x49100000492,\n        0x49300000494,\n        0x49500000496,\n        0x49700000498,\n        0x4990000049a,\n        0x49b0000049c,\n        0x49d0000049e,\n        0x49f000004a0,\n        0x4a1000004a2,\n        0x4a3000004a4,\n        0x4a5000004a6,\n        0x4a7000004a8,\n        0x4a9000004aa,\n        0x4ab000004ac,\n        0x4ad000004ae,\n        0x4af000004b0,\n        0x4b1000004b2,\n        0x4b3000004b4,\n        0x4b5000004b6,\n        0x4b7000004b8,\n        0x4b9000004ba,\n        0x4bb000004bc,\n        0x4bd000004be,\n        0x4bf000004c0,\n        0x4c2000004c3,\n        0x4c4000004c5,\n        0x4c6000004c7,\n        0x4c8000004c9,\n        0x4ca000004cb,\n        0x4cc000004cd,\n        0x4ce000004d0,\n        0x4d1000004d2,\n        0x4d3000004d4,\n        0x4d5000004d6,\n        0x4d7000004d8,\n        0x4d9000004da,\n        0x4db000004dc,\n        0x4dd000004de,\n        0x4df000004e0,\n        0x4e1000004e2,\n        0x4e3000004e4,\n        0x4e5000004e6,\n        0x4e7000004e8,\n        0x4e9000004ea,\n        0x4eb000004ec,\n        0x4ed000004ee,\n        0x4ef000004f0,\n        0x4f1000004f2,\n        0x4f3000004f4,\n        0x4f5000004f6,\n        0x4f7000004f8,\n        0x4f9000004fa,\n        0x4fb000004fc,\n        0x4fd000004fe,\n        0x4ff00000500,\n        0x50100000502,\n        0x50300000504,\n        0x50500000506,\n        0x50700000508,\n        0x5090000050a,\n        0x50b0000050c,\n        0x50d0000050e,\n        0x50f00000510,\n        0x51100000512,\n        0x51300000514,\n        0x51500000516,\n        0x51700000518,\n        0x5190000051a,\n        0x51b0000051c,\n        0x51d0000051e,\n        0x51f00000520,\n        0x52100000522,\n        0x52300000524,\n        0x52500000526,\n        0x52700000528,\n        0x5290000052a,\n        0x52b0000052c,\n        0x52d0000052e,\n        0x52f00000530,\n        0x5590000055a,\n        0x56000000587,\n        0x58800000589,\n        0x591000005be,\n        0x5bf000005c0,\n        0x5c1000005c3,\n        0x5c4000005c6,\n        0x5c7000005c8,\n        0x5d0000005eb,\n        0x5ef000005f3,\n        0x6100000061b,\n        0x62000000640,\n        0x64100000660,\n        0x66e00000675,\n        0x679000006d4,\n        0x6d5000006dd,\n        0x6df000006e9,\n        0x6ea000006f0,\n        0x6fa00000700,\n        0x7100000074b,\n        0x74d000007b2,\n        0x7c0000007f6,\n        0x7fd000007fe,\n        0x8000000082e,\n        0x8400000085c,\n        0x8600000086b,\n        0x87000000888,\n        0x8890000088f,\n        0x898000008e2,\n        0x8e300000958,\n        0x96000000964,\n        0x96600000970,\n        0x97100000984,\n        0x9850000098d,\n        0x98f00000991,\n        0x993000009a9,\n        0x9aa000009b1,\n        0x9b2000009b3,\n        0x9b6000009ba,\n        0x9bc000009c5,\n        0x9c7000009c9,\n        0x9cb000009cf,\n        0x9d7000009d8,\n        0x9e0000009e4,\n        0x9e6000009f2,\n        0x9fc000009fd,\n        0x9fe000009ff,\n        0xa0100000a04,\n        0xa0500000a0b,\n        0xa0f00000a11,\n        0xa1300000a29,\n        0xa2a00000a31,\n        0xa3200000a33,\n        0xa3500000a36,\n        0xa3800000a3a,\n        0xa3c00000a3d,\n        0xa3e00000a43,\n        0xa4700000a49,\n        0xa4b00000a4e,\n        0xa5100000a52,\n        0xa5c00000a5d,\n        0xa6600000a76,\n        0xa8100000a84,\n        0xa8500000a8e,\n        0xa8f00000a92,\n        0xa9300000aa9,\n        0xaaa00000ab1,\n        0xab200000ab4,\n        0xab500000aba,\n        0xabc00000ac6,\n        0xac700000aca,\n        0xacb00000ace,\n        0xad000000ad1,\n        0xae000000ae4,\n        0xae600000af0,\n        0xaf900000b00,\n        0xb0100000b04,\n        0xb0500000b0d,\n        0xb0f00000b11,\n        0xb1300000b29,\n        0xb2a00000b31,\n        0xb3200000b34,\n        0xb3500000b3a,\n        0xb3c00000b45,\n        0xb4700000b49,\n        0xb4b00000b4e,\n        0xb5500000b58,\n        0xb5f00000b64,\n        0xb6600000b70,\n        0xb7100000b72,\n        0xb8200000b84,\n        0xb8500000b8b,\n        0xb8e00000b91,\n        0xb9200000b96,\n        0xb9900000b9b,\n        0xb9c00000b9d,\n        0xb9e00000ba0,\n        0xba300000ba5,\n        0xba800000bab,\n        0xbae00000bba,\n        0xbbe00000bc3,\n        0xbc600000bc9,\n        0xbca00000bce,\n        0xbd000000bd1,\n        0xbd700000bd8,\n        0xbe600000bf0,\n        0xc0000000c0d,\n        0xc0e00000c11,\n        0xc1200000c29,\n        0xc2a00000c3a,\n        0xc3c00000c45,\n        0xc4600000c49,\n        0xc4a00000c4e,\n        0xc5500000c57,\n        0xc5800000c5b,\n        0xc5d00000c5e,\n        0xc6000000c64,\n        0xc6600000c70,\n        0xc8000000c84,\n        0xc8500000c8d,\n        0xc8e00000c91,\n        0xc9200000ca9,\n        0xcaa00000cb4,\n        0xcb500000cba,\n        0xcbc00000cc5,\n        0xcc600000cc9,\n        0xcca00000cce,\n        0xcd500000cd7,\n        0xcdd00000cdf,\n        0xce000000ce4,\n        0xce600000cf0,\n        0xcf100000cf4,\n        0xd0000000d0d,\n        0xd0e00000d11,\n        0xd1200000d45,\n        0xd4600000d49,\n        0xd4a00000d4f,\n        0xd5400000d58,\n        0xd5f00000d64,\n        0xd6600000d70,\n        0xd7a00000d80,\n        0xd8100000d84,\n        0xd8500000d97,\n        0xd9a00000db2,\n        0xdb300000dbc,\n        0xdbd00000dbe,\n        0xdc000000dc7,\n        0xdca00000dcb,\n        0xdcf00000dd5,\n        0xdd600000dd7,\n        0xdd800000de0,\n        0xde600000df0,\n        0xdf200000df4,\n        0xe0100000e33,\n        0xe3400000e3b,\n        0xe4000000e4f,\n        0xe5000000e5a,\n        0xe8100000e83,\n        0xe8400000e85,\n        0xe8600000e8b,\n        0xe8c00000ea4,\n        0xea500000ea6,\n        0xea700000eb3,\n        0xeb400000ebe,\n        0xec000000ec5,\n        0xec600000ec7,\n        0xec800000ecf,\n        0xed000000eda,\n        0xede00000ee0,\n        0xf0000000f01,\n        0xf0b00000f0c,\n        0xf1800000f1a,\n        0xf2000000f2a,\n        0xf3500000f36,\n        0xf3700000f38,\n        0xf3900000f3a,\n        0xf3e00000f43,\n        0xf4400000f48,\n        0xf4900000f4d,\n        0xf4e00000f52,\n        0xf5300000f57,\n        0xf5800000f5c,\n        0xf5d00000f69,\n        0xf6a00000f6d,\n        0xf7100000f73,\n        0xf7400000f75,\n        0xf7a00000f81,\n        0xf8200000f85,\n        0xf8600000f93,\n        0xf9400000f98,\n        0xf9900000f9d,\n        0xf9e00000fa2,\n        0xfa300000fa7,\n        0xfa800000fac,\n        0xfad00000fb9,\n        0xfba00000fbd,\n        0xfc600000fc7,\n        0x10000000104a,\n        0x10500000109e,\n        0x10d0000010fb,\n        0x10fd00001100,\n        0x120000001249,\n        0x124a0000124e,\n        0x125000001257,\n        0x125800001259,\n        0x125a0000125e,\n        0x126000001289,\n        0x128a0000128e,\n        0x1290000012b1,\n        0x12b2000012b6,\n        0x12b8000012bf,\n        0x12c0000012c1,\n        0x12c2000012c6,\n        0x12c8000012d7,\n        0x12d800001311,\n        0x131200001316,\n        0x13180000135b,\n        0x135d00001360,\n        0x138000001390,\n        0x13a0000013f6,\n        0x14010000166d,\n        0x166f00001680,\n        0x16810000169b,\n        0x16a0000016eb,\n        0x16f1000016f9,\n        0x170000001716,\n        0x171f00001735,\n        0x174000001754,\n        0x17600000176d,\n        0x176e00001771,\n        0x177200001774,\n        0x1780000017b4,\n        0x17b6000017d4,\n        0x17d7000017d8,\n        0x17dc000017de,\n        0x17e0000017ea,\n        0x18100000181a,\n        0x182000001879,\n        0x1880000018ab,\n        0x18b0000018f6,\n        0x19000000191f,\n        0x19200000192c,\n        0x19300000193c,\n        0x19460000196e,\n        0x197000001975,\n        0x1980000019ac,\n        0x19b0000019ca,\n        0x19d0000019da,\n        0x1a0000001a1c,\n        0x1a2000001a5f,\n        0x1a6000001a7d,\n        0x1a7f00001a8a,\n        0x1a9000001a9a,\n        0x1aa700001aa8,\n        0x1ab000001abe,\n        0x1abf00001acf,\n        0x1b0000001b4d,\n        0x1b5000001b5a,\n        0x1b6b00001b74,\n        0x1b8000001bf4,\n        0x1c0000001c38,\n        0x1c4000001c4a,\n        0x1c4d00001c7e,\n        0x1cd000001cd3,\n        0x1cd400001cfb,\n        0x1d0000001d2c,\n        0x1d2f00001d30,\n        0x1d3b00001d3c,\n        0x1d4e00001d4f,\n        0x1d6b00001d78,\n        0x1d7900001d9b,\n        0x1dc000001e00,\n        0x1e0100001e02,\n        0x1e0300001e04,\n        0x1e0500001e06,\n        0x1e0700001e08,\n        0x1e0900001e0a,\n        0x1e0b00001e0c,\n        0x1e0d00001e0e,\n        0x1e0f00001e10,\n        0x1e1100001e12,\n        0x1e1300001e14,\n        0x1e1500001e16,\n        0x1e1700001e18,\n        0x1e1900001e1a,\n        0x1e1b00001e1c,\n        0x1e1d00001e1e,\n        0x1e1f00001e20,\n        0x1e2100001e22,\n        0x1e2300001e24,\n        0x1e2500001e26,\n        0x1e2700001e28,\n        0x1e2900001e2a,\n        0x1e2b00001e2c,\n        0x1e2d00001e2e,\n        0x1e2f00001e30,\n        0x1e3100001e32,\n        0x1e3300001e34,\n        0x1e3500001e36,\n        0x1e3700001e38,\n        0x1e3900001e3a,\n        0x1e3b00001e3c,\n        0x1e3d00001e3e,\n        0x1e3f00001e40,\n        0x1e4100001e42,\n        0x1e4300001e44,\n        0x1e4500001e46,\n        0x1e4700001e48,\n        0x1e4900001e4a,\n        0x1e4b00001e4c,\n        0x1e4d00001e4e,\n        0x1e4f00001e50,\n        0x1e5100001e52,\n        0x1e5300001e54,\n        0x1e5500001e56,\n        0x1e5700001e58,\n        0x1e5900001e5a,\n        0x1e5b00001e5c,\n        0x1e5d00001e5e,\n        0x1e5f00001e60,\n        0x1e6100001e62,\n        0x1e6300001e64,\n        0x1e6500001e66,\n        0x1e6700001e68,\n        0x1e6900001e6a,\n        0x1e6b00001e6c,\n        0x1e6d00001e6e,\n        0x1e6f00001e70,\n        0x1e7100001e72,\n        0x1e7300001e74,\n        0x1e7500001e76,\n        0x1e7700001e78,\n        0x1e7900001e7a,\n        0x1e7b00001e7c,\n        0x1e7d00001e7e,\n        0x1e7f00001e80,\n        0x1e8100001e82,\n        0x1e8300001e84,\n        0x1e8500001e86,\n        0x1e8700001e88,\n        0x1e8900001e8a,\n        0x1e8b00001e8c,\n        0x1e8d00001e8e,\n        0x1e8f00001e90,\n        0x1e9100001e92,\n        0x1e9300001e94,\n        0x1e9500001e9a,\n        0x1e9c00001e9e,\n        0x1e9f00001ea0,\n        0x1ea100001ea2,\n        0x1ea300001ea4,\n        0x1ea500001ea6,\n        0x1ea700001ea8,\n        0x1ea900001eaa,\n        0x1eab00001eac,\n        0x1ead00001eae,\n        0x1eaf00001eb0,\n        0x1eb100001eb2,\n        0x1eb300001eb4,\n        0x1eb500001eb6,\n        0x1eb700001eb8,\n        0x1eb900001eba,\n        0x1ebb00001ebc,\n        0x1ebd00001ebe,\n        0x1ebf00001ec0,\n        0x1ec100001ec2,\n        0x1ec300001ec4,\n        0x1ec500001ec6,\n        0x1ec700001ec8,\n        0x1ec900001eca,\n        0x1ecb00001ecc,\n        0x1ecd00001ece,\n        0x1ecf00001ed0,\n        0x1ed100001ed2,\n        0x1ed300001ed4,\n        0x1ed500001ed6,\n        0x1ed700001ed8,\n        0x1ed900001eda,\n        0x1edb00001edc,\n        0x1edd00001ede,\n        0x1edf00001ee0,\n        0x1ee100001ee2,\n        0x1ee300001ee4,\n        0x1ee500001ee6,\n        0x1ee700001ee8,\n        0x1ee900001eea,\n        0x1eeb00001eec,\n        0x1eed00001eee,\n        0x1eef00001ef0,\n        0x1ef100001ef2,\n        0x1ef300001ef4,\n        0x1ef500001ef6,\n        0x1ef700001ef8,\n        0x1ef900001efa,\n        0x1efb00001efc,\n        0x1efd00001efe,\n        0x1eff00001f08,\n        0x1f1000001f16,\n        0x1f2000001f28,\n        0x1f3000001f38,\n        0x1f4000001f46,\n        0x1f5000001f58,\n        0x1f6000001f68,\n        0x1f7000001f71,\n        0x1f7200001f73,\n        0x1f7400001f75,\n        0x1f7600001f77,\n        0x1f7800001f79,\n        0x1f7a00001f7b,\n        0x1f7c00001f7d,\n        0x1fb000001fb2,\n        0x1fb600001fb7,\n        0x1fc600001fc7,\n        0x1fd000001fd3,\n        0x1fd600001fd8,\n        0x1fe000001fe3,\n        0x1fe400001fe8,\n        0x1ff600001ff7,\n        0x214e0000214f,\n        0x218400002185,\n        0x2c3000002c60,\n        0x2c6100002c62,\n        0x2c6500002c67,\n        0x2c6800002c69,\n        0x2c6a00002c6b,\n        0x2c6c00002c6d,\n        0x2c7100002c72,\n        0x2c7300002c75,\n        0x2c7600002c7c,\n        0x2c8100002c82,\n        0x2c8300002c84,\n        0x2c8500002c86,\n        0x2c8700002c88,\n        0x2c8900002c8a,\n        0x2c8b00002c8c,\n        0x2c8d00002c8e,\n        0x2c8f00002c90,\n        0x2c9100002c92,\n        0x2c9300002c94,\n        0x2c9500002c96,\n        0x2c9700002c98,\n        0x2c9900002c9a,\n        0x2c9b00002c9c,\n        0x2c9d00002c9e,\n        0x2c9f00002ca0,\n        0x2ca100002ca2,\n        0x2ca300002ca4,\n        0x2ca500002ca6,\n        0x2ca700002ca8,\n        0x2ca900002caa,\n        0x2cab00002cac,\n        0x2cad00002cae,\n        0x2caf00002cb0,\n        0x2cb100002cb2,\n        0x2cb300002cb4,\n        0x2cb500002cb6,\n        0x2cb700002cb8,\n        0x2cb900002cba,\n        0x2cbb00002cbc,\n        0x2cbd00002cbe,\n        0x2cbf00002cc0,\n        0x2cc100002cc2,\n        0x2cc300002cc4,\n        0x2cc500002cc6,\n        0x2cc700002cc8,\n        0x2cc900002cca,\n        0x2ccb00002ccc,\n        0x2ccd00002cce,\n        0x2ccf00002cd0,\n        0x2cd100002cd2,\n        0x2cd300002cd4,\n        0x2cd500002cd6,\n        0x2cd700002cd8,\n        0x2cd900002cda,\n        0x2cdb00002cdc,\n        0x2cdd00002cde,\n        0x2cdf00002ce0,\n        0x2ce100002ce2,\n        0x2ce300002ce5,\n        0x2cec00002ced,\n        0x2cee00002cf2,\n        0x2cf300002cf4,\n        0x2d0000002d26,\n        0x2d2700002d28,\n        0x2d2d00002d2e,\n        0x2d3000002d68,\n        0x2d7f00002d97,\n        0x2da000002da7,\n        0x2da800002daf,\n        0x2db000002db7,\n        0x2db800002dbf,\n        0x2dc000002dc7,\n        0x2dc800002dcf,\n        0x2dd000002dd7,\n        0x2dd800002ddf,\n        0x2de000002e00,\n        0x2e2f00002e30,\n        0x300500003008,\n        0x302a0000302e,\n        0x303c0000303d,\n        0x304100003097,\n        0x30990000309b,\n        0x309d0000309f,\n        0x30a1000030fb,\n        0x30fc000030ff,\n        0x310500003130,\n        0x31a0000031c0,\n        0x31f000003200,\n        0x340000004dc0,\n        0x4e000000a48d,\n        0xa4d00000a4fe,\n        0xa5000000a60d,\n        0xa6100000a62c,\n        0xa6410000a642,\n        0xa6430000a644,\n        0xa6450000a646,\n        0xa6470000a648,\n        0xa6490000a64a,\n        0xa64b0000a64c,\n        0xa64d0000a64e,\n        0xa64f0000a650,\n        0xa6510000a652,\n        0xa6530000a654,\n        0xa6550000a656,\n        0xa6570000a658,\n        0xa6590000a65a,\n        0xa65b0000a65c,\n        0xa65d0000a65e,\n        0xa65f0000a660,\n        0xa6610000a662,\n        0xa6630000a664,\n        0xa6650000a666,\n        0xa6670000a668,\n        0xa6690000a66a,\n        0xa66b0000a66c,\n        0xa66d0000a670,\n        0xa6740000a67e,\n        0xa67f0000a680,\n        0xa6810000a682,\n        0xa6830000a684,\n        0xa6850000a686,\n        0xa6870000a688,\n        0xa6890000a68a,\n        0xa68b0000a68c,\n        0xa68d0000a68e,\n        0xa68f0000a690,\n        0xa6910000a692,\n        0xa6930000a694,\n        0xa6950000a696,\n        0xa6970000a698,\n        0xa6990000a69a,\n        0xa69b0000a69c,\n        0xa69e0000a6e6,\n        0xa6f00000a6f2,\n        0xa7170000a720,\n        0xa7230000a724,\n        0xa7250000a726,\n        0xa7270000a728,\n        0xa7290000a72a,\n        0xa72b0000a72c,\n        0xa72d0000a72e,\n        0xa72f0000a732,\n        0xa7330000a734,\n        0xa7350000a736,\n        0xa7370000a738,\n        0xa7390000a73a,\n        0xa73b0000a73c,\n        0xa73d0000a73e,\n        0xa73f0000a740,\n        0xa7410000a742,\n        0xa7430000a744,\n        0xa7450000a746,\n        0xa7470000a748,\n        0xa7490000a74a,\n        0xa74b0000a74c,\n        0xa74d0000a74e,\n        0xa74f0000a750,\n        0xa7510000a752,\n        0xa7530000a754,\n        0xa7550000a756,\n        0xa7570000a758,\n        0xa7590000a75a,\n        0xa75b0000a75c,\n        0xa75d0000a75e,\n        0xa75f0000a760,\n        0xa7610000a762,\n        0xa7630000a764,\n        0xa7650000a766,\n        0xa7670000a768,\n        0xa7690000a76a,\n        0xa76b0000a76c,\n        0xa76d0000a76e,\n        0xa76f0000a770,\n        0xa7710000a779,\n        0xa77a0000a77b,\n        0xa77c0000a77d,\n        0xa77f0000a780,\n        0xa7810000a782,\n        0xa7830000a784,\n        0xa7850000a786,\n        0xa7870000a789,\n        0xa78c0000a78d,\n        0xa78e0000a790,\n        0xa7910000a792,\n        0xa7930000a796,\n        0xa7970000a798,\n        0xa7990000a79a,\n        0xa79b0000a79c,\n        0xa79d0000a79e,\n        0xa79f0000a7a0,\n        0xa7a10000a7a2,\n        0xa7a30000a7a4,\n        0xa7a50000a7a6,\n        0xa7a70000a7a8,\n        0xa7a90000a7aa,\n        0xa7af0000a7b0,\n        0xa7b50000a7b6,\n        0xa7b70000a7b8,\n        0xa7b90000a7ba,\n        0xa7bb0000a7bc,\n        0xa7bd0000a7be,\n        0xa7bf0000a7c0,\n        0xa7c10000a7c2,\n        0xa7c30000a7c4,\n        0xa7c80000a7c9,\n        0xa7ca0000a7cb,\n        0xa7d10000a7d2,\n        0xa7d30000a7d4,\n        0xa7d50000a7d6,\n        0xa7d70000a7d8,\n        0xa7d90000a7da,\n        0xa7f60000a7f8,\n        0xa7fa0000a828,\n        0xa82c0000a82d,\n        0xa8400000a874,\n        0xa8800000a8c6,\n        0xa8d00000a8da,\n        0xa8e00000a8f8,\n        0xa8fb0000a8fc,\n        0xa8fd0000a92e,\n        0xa9300000a954,\n        0xa9800000a9c1,\n        0xa9cf0000a9da,\n        0xa9e00000a9ff,\n        0xaa000000aa37,\n        0xaa400000aa4e,\n        0xaa500000aa5a,\n        0xaa600000aa77,\n        0xaa7a0000aac3,\n        0xaadb0000aade,\n        0xaae00000aaf0,\n        0xaaf20000aaf7,\n        0xab010000ab07,\n        0xab090000ab0f,\n        0xab110000ab17,\n        0xab200000ab27,\n        0xab280000ab2f,\n        0xab300000ab5b,\n        0xab600000ab69,\n        0xabc00000abeb,\n        0xabec0000abee,\n        0xabf00000abfa,\n        0xac000000d7a4,\n        0xfa0e0000fa10,\n        0xfa110000fa12,\n        0xfa130000fa15,\n        0xfa1f0000fa20,\n        0xfa210000fa22,\n        0xfa230000fa25,\n        0xfa270000fa2a,\n        0xfb1e0000fb1f,\n        0xfe200000fe30,\n        0xfe730000fe74,\n        0x100000001000c,\n        0x1000d00010027,\n        0x100280001003b,\n        0x1003c0001003e,\n        0x1003f0001004e,\n        0x100500001005e,\n        0x10080000100fb,\n        0x101fd000101fe,\n        0x102800001029d,\n        0x102a0000102d1,\n        0x102e0000102e1,\n        0x1030000010320,\n        0x1032d00010341,\n        0x103420001034a,\n        0x103500001037b,\n        0x103800001039e,\n        0x103a0000103c4,\n        0x103c8000103d0,\n        0x104280001049e,\n        0x104a0000104aa,\n        0x104d8000104fc,\n        0x1050000010528,\n        0x1053000010564,\n        0x10597000105a2,\n        0x105a3000105b2,\n        0x105b3000105ba,\n        0x105bb000105bd,\n        0x1060000010737,\n        0x1074000010756,\n        0x1076000010768,\n        0x1078000010781,\n        0x1080000010806,\n        0x1080800010809,\n        0x1080a00010836,\n        0x1083700010839,\n        0x1083c0001083d,\n        0x1083f00010856,\n        0x1086000010877,\n        0x108800001089f,\n        0x108e0000108f3,\n        0x108f4000108f6,\n        0x1090000010916,\n        0x109200001093a,\n        0x10980000109b8,\n        0x109be000109c0,\n        0x10a0000010a04,\n        0x10a0500010a07,\n        0x10a0c00010a14,\n        0x10a1500010a18,\n        0x10a1900010a36,\n        0x10a3800010a3b,\n        0x10a3f00010a40,\n        0x10a6000010a7d,\n        0x10a8000010a9d,\n        0x10ac000010ac8,\n        0x10ac900010ae7,\n        0x10b0000010b36,\n        0x10b4000010b56,\n        0x10b6000010b73,\n        0x10b8000010b92,\n        0x10c0000010c49,\n        0x10cc000010cf3,\n        0x10d0000010d28,\n        0x10d3000010d3a,\n        0x10e8000010eaa,\n        0x10eab00010ead,\n        0x10eb000010eb2,\n        0x10efd00010f1d,\n        0x10f2700010f28,\n        0x10f3000010f51,\n        0x10f7000010f86,\n        0x10fb000010fc5,\n        0x10fe000010ff7,\n        0x1100000011047,\n        0x1106600011076,\n        0x1107f000110bb,\n        0x110c2000110c3,\n        0x110d0000110e9,\n        0x110f0000110fa,\n        0x1110000011135,\n        0x1113600011140,\n        0x1114400011148,\n        0x1115000011174,\n        0x1117600011177,\n        0x11180000111c5,\n        0x111c9000111cd,\n        0x111ce000111db,\n        0x111dc000111dd,\n        0x1120000011212,\n        0x1121300011238,\n        0x1123e00011242,\n        0x1128000011287,\n        0x1128800011289,\n        0x1128a0001128e,\n        0x1128f0001129e,\n        0x1129f000112a9,\n        0x112b0000112eb,\n        0x112f0000112fa,\n        0x1130000011304,\n        0x113050001130d,\n        0x1130f00011311,\n        0x1131300011329,\n        0x1132a00011331,\n        0x1133200011334,\n        0x113350001133a,\n        0x1133b00011345,\n        0x1134700011349,\n        0x1134b0001134e,\n        0x1135000011351,\n        0x1135700011358,\n        0x1135d00011364,\n        0x113660001136d,\n        0x1137000011375,\n        0x114000001144b,\n        0x114500001145a,\n        0x1145e00011462,\n        0x11480000114c6,\n        0x114c7000114c8,\n        0x114d0000114da,\n        0x11580000115b6,\n        0x115b8000115c1,\n        0x115d8000115de,\n        0x1160000011641,\n        0x1164400011645,\n        0x116500001165a,\n        0x11680000116b9,\n        0x116c0000116ca,\n        0x117000001171b,\n        0x1171d0001172c,\n        0x117300001173a,\n        0x1174000011747,\n        0x118000001183b,\n        0x118c0000118ea,\n        0x118ff00011907,\n        0x119090001190a,\n        0x1190c00011914,\n        0x1191500011917,\n        0x1191800011936,\n        0x1193700011939,\n        0x1193b00011944,\n        0x119500001195a,\n        0x119a0000119a8,\n        0x119aa000119d8,\n        0x119da000119e2,\n        0x119e3000119e5,\n        0x11a0000011a3f,\n        0x11a4700011a48,\n        0x11a5000011a9a,\n        0x11a9d00011a9e,\n        0x11ab000011af9,\n        0x11c0000011c09,\n        0x11c0a00011c37,\n        0x11c3800011c41,\n        0x11c5000011c5a,\n        0x11c7200011c90,\n        0x11c9200011ca8,\n        0x11ca900011cb7,\n        0x11d0000011d07,\n        0x11d0800011d0a,\n        0x11d0b00011d37,\n        0x11d3a00011d3b,\n        0x11d3c00011d3e,\n        0x11d3f00011d48,\n        0x11d5000011d5a,\n        0x11d6000011d66,\n        0x11d6700011d69,\n        0x11d6a00011d8f,\n        0x11d9000011d92,\n        0x11d9300011d99,\n        0x11da000011daa,\n        0x11ee000011ef7,\n        0x11f0000011f11,\n        0x11f1200011f3b,\n        0x11f3e00011f43,\n        0x11f5000011f5a,\n        0x11fb000011fb1,\n        0x120000001239a,\n        0x1248000012544,\n        0x12f9000012ff1,\n        0x1300000013430,\n        0x1344000013456,\n        0x1440000014647,\n        0x1680000016a39,\n        0x16a4000016a5f,\n        0x16a6000016a6a,\n        0x16a7000016abf,\n        0x16ac000016aca,\n        0x16ad000016aee,\n        0x16af000016af5,\n        0x16b0000016b37,\n        0x16b4000016b44,\n        0x16b5000016b5a,\n        0x16b6300016b78,\n        0x16b7d00016b90,\n        0x16e6000016e80,\n        0x16f0000016f4b,\n        0x16f4f00016f88,\n        0x16f8f00016fa0,\n        0x16fe000016fe2,\n        0x16fe300016fe5,\n        0x16ff000016ff2,\n        0x17000000187f8,\n        0x1880000018cd6,\n        0x18d0000018d09,\n        0x1aff00001aff4,\n        0x1aff50001affc,\n        0x1affd0001afff,\n        0x1b0000001b123,\n        0x1b1320001b133,\n        0x1b1500001b153,\n        0x1b1550001b156,\n        0x1b1640001b168,\n        0x1b1700001b2fc,\n        0x1bc000001bc6b,\n        0x1bc700001bc7d,\n        0x1bc800001bc89,\n        0x1bc900001bc9a,\n        0x1bc9d0001bc9f,\n        0x1cf000001cf2e,\n        0x1cf300001cf47,\n        0x1da000001da37,\n        0x1da3b0001da6d,\n        0x1da750001da76,\n        0x1da840001da85,\n        0x1da9b0001daa0,\n        0x1daa10001dab0,\n        0x1df000001df1f,\n        0x1df250001df2b,\n        0x1e0000001e007,\n        0x1e0080001e019,\n        0x1e01b0001e022,\n        0x1e0230001e025,\n        0x1e0260001e02b,\n        0x1e08f0001e090,\n        0x1e1000001e12d,\n        0x1e1300001e13e,\n        0x1e1400001e14a,\n        0x1e14e0001e14f,\n        0x1e2900001e2af,\n        0x1e2c00001e2fa,\n        0x1e4d00001e4fa,\n        0x1e7e00001e7e7,\n        0x1e7e80001e7ec,\n        0x1e7ed0001e7ef,\n        0x1e7f00001e7ff,\n        0x1e8000001e8c5,\n        0x1e8d00001e8d7,\n        0x1e9220001e94c,\n        0x1e9500001e95a,\n        0x200000002a6e0,\n        0x2a7000002b73a,\n        0x2b7400002b81e,\n        0x2b8200002cea2,\n        0x2ceb00002ebe1,\n        0x2ebf00002ee5e,\n        0x300000003134b,\n        0x31350000323b0,\n    ),\n    'CONTEXTJ': (\n        0x200c0000200e,\n    ),\n    'CONTEXTO': (\n        0xb7000000b8,\n        0x37500000376,\n        0x5f3000005f5,\n        0x6600000066a,\n        0x6f0000006fa,\n        0x30fb000030fc,\n    ),\n}\n", "idna/core.py": "from . import idnadata\nimport bisect\nimport unicodedata\nimport re\nfrom typing import Union, Optional\nfrom .intranges import intranges_contain\n\n_virama_combining_class = 9\n_alabel_prefix = b'xn--'\n_unicode_dots_re = re.compile('[\\u002e\\u3002\\uff0e\\uff61]')\n\nclass IDNAError(UnicodeError):\n    \"\"\" Base exception for all IDNA-encoding related problems \"\"\"\n    pass\n\n\nclass IDNABidiError(IDNAError):\n    \"\"\" Exception when bidirectional requirements are not satisfied \"\"\"\n    pass\n\n\nclass InvalidCodepoint(IDNAError):\n    \"\"\" Exception when a disallowed or unallocated codepoint is used \"\"\"\n    pass\n\n\nclass InvalidCodepointContext(IDNAError):\n    \"\"\" Exception when the codepoint is not valid in the context it is used \"\"\"\n    pass\n\n\ndef _combining_class(cp: int) -> int:\n    v = unicodedata.combining(chr(cp))\n    if v == 0:\n        if not unicodedata.name(chr(cp)):\n            raise ValueError('Unknown character in unicodedata')\n    return v\n\ndef _is_script(cp: str, script: str) -> bool:\n    return intranges_contain(ord(cp), idnadata.scripts[script])\n\ndef _punycode(s: str) -> bytes:\n    return s.encode('punycode')\n\ndef _unot(s: int) -> str:\n    return 'U+{:04X}'.format(s)\n\n\ndef valid_label_length(label: Union[bytes, str]) -> bool:\n    if len(label) > 63:\n        return False\n    return True\n\n\ndef valid_string_length(label: Union[bytes, str], trailing_dot: bool) -> bool:\n    if len(label) > (254 if trailing_dot else 253):\n        return False\n    return True\n\n\ndef check_bidi(label: str, check_ltr: bool = False) -> bool:\n    # Bidi rules should only be applied if string contains RTL characters\n    bidi_label = False\n    for (idx, cp) in enumerate(label, 1):\n        direction = unicodedata.bidirectional(cp)\n        if direction == '':\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))\n        if direction in ['R', 'AL', 'AN']:\n            bidi_label = True\n    if not bidi_label and not check_ltr:\n        return True\n\n    # Bidi rule 1\n    direction = unicodedata.bidirectional(label[0])\n    if direction in ['R', 'AL']:\n        rtl = True\n    elif direction == 'L':\n        rtl = False\n    else:\n        raise IDNABidiError('First codepoint in label {} must be directionality L, R or AL'.format(repr(label)))\n\n    valid_ending = False\n    number_type = None  # type: Optional[str]\n    for (idx, cp) in enumerate(label, 1):\n        direction = unicodedata.bidirectional(cp)\n\n        if rtl:\n            # Bidi rule 2\n            if not direction in ['R', 'AL', 'AN', 'EN', 'ES', 'CS', 'ET', 'ON', 'BN', 'NSM']:\n                raise IDNABidiError('Invalid direction for codepoint at position {} in a right-to-left label'.format(idx))\n            # Bidi rule 3\n            if direction in ['R', 'AL', 'EN', 'AN']:\n                valid_ending = True\n            elif direction != 'NSM':\n                valid_ending = False\n            # Bidi rule 4\n            if direction in ['AN', 'EN']:\n                if not number_type:\n                    number_type = direction\n                else:\n                    if number_type != direction:\n                        raise IDNABidiError('Can not mix numeral types in a right-to-left label')\n        else:\n            # Bidi rule 5\n            if not direction in ['L', 'EN', 'ES', 'CS', 'ET', 'ON', 'BN', 'NSM']:\n                raise IDNABidiError('Invalid direction for codepoint at position {} in a left-to-right label'.format(idx))\n            # Bidi rule 6\n            if direction in ['L', 'EN']:\n                valid_ending = True\n            elif direction != 'NSM':\n                valid_ending = False\n\n    if not valid_ending:\n        raise IDNABidiError('Label ends with illegal codepoint directionality')\n\n    return True\n\n\ndef check_initial_combiner(label: str) -> bool:\n    if unicodedata.category(label[0])[0] == 'M':\n        raise IDNAError('Label begins with an illegal combining character')\n    return True\n\n\ndef check_hyphen_ok(label: str) -> bool:\n    if label[2:4] == '--':\n        raise IDNAError('Label has disallowed hyphens in 3rd and 4th position')\n    if label[0] == '-' or label[-1] == '-':\n        raise IDNAError('Label must not start or end with a hyphen')\n    return True\n\n\ndef check_nfc(label: str) -> None:\n    if unicodedata.normalize('NFC', label) != label:\n        raise IDNAError('Label must be in Normalization Form C')\n\n\ndef valid_contextj(label: str, pos: int) -> bool:\n    cp_value = ord(label[pos])\n\n    if cp_value == 0x200c:\n\n        if pos > 0:\n            if _combining_class(ord(label[pos - 1])) == _virama_combining_class:\n                return True\n\n        ok = False\n        for i in range(pos-1, -1, -1):\n            joining_type = idnadata.joining_types.get(ord(label[i]))\n            if joining_type == ord('T'):\n                continue\n            elif joining_type in [ord('L'), ord('D')]:\n                ok = True\n                break\n            else:\n                break\n\n        if not ok:\n            return False\n\n        ok = False\n        for i in range(pos+1, len(label)):\n            joining_type = idnadata.joining_types.get(ord(label[i]))\n            if joining_type == ord('T'):\n                continue\n            elif joining_type in [ord('R'), ord('D')]:\n                ok = True\n                break\n            else:\n                break\n        return ok\n\n    if cp_value == 0x200d:\n\n        if pos > 0:\n            if _combining_class(ord(label[pos - 1])) == _virama_combining_class:\n                return True\n        return False\n\n    else:\n\n        return False\n\n\ndef valid_contexto(label: str, pos: int, exception: bool = False) -> bool:\n    cp_value = ord(label[pos])\n\n    if cp_value == 0x00b7:\n        if 0 < pos < len(label)-1:\n            if ord(label[pos - 1]) == 0x006c and ord(label[pos + 1]) == 0x006c:\n                return True\n        return False\n\n    elif cp_value == 0x0375:\n        if pos < len(label)-1 and len(label) > 1:\n            return _is_script(label[pos + 1], 'Greek')\n        return False\n\n    elif cp_value == 0x05f3 or cp_value == 0x05f4:\n        if pos > 0:\n            return _is_script(label[pos - 1], 'Hebrew')\n        return False\n\n    elif cp_value == 0x30fb:\n        for cp in label:\n            if cp == '\\u30fb':\n                continue\n            if _is_script(cp, 'Hiragana') or _is_script(cp, 'Katakana') or _is_script(cp, 'Han'):\n                return True\n        return False\n\n    elif 0x660 <= cp_value <= 0x669:\n        for cp in label:\n            if 0x6f0 <= ord(cp) <= 0x06f9:\n                return False\n        return True\n\n    elif 0x6f0 <= cp_value <= 0x6f9:\n        for cp in label:\n            if 0x660 <= ord(cp) <= 0x0669:\n                return False\n        return True\n\n    return False\n\n\ndef check_label(label: Union[str, bytes, bytearray]) -> None:\n    if isinstance(label, (bytes, bytearray)):\n        label = label.decode('utf-8')\n    if len(label) == 0:\n        raise IDNAError('Empty Label')\n\n    check_nfc(label)\n    check_hyphen_ok(label)\n    check_initial_combiner(label)\n\n    for (pos, cp) in enumerate(label):\n        cp_value = ord(cp)\n        if intranges_contain(cp_value, idnadata.codepoint_classes['PVALID']):\n            continue\n        elif intranges_contain(cp_value, idnadata.codepoint_classes['CONTEXTJ']):\n            try:\n                if not valid_contextj(label, pos):\n                    raise InvalidCodepointContext('Joiner {} not allowed at position {} in {}'.format(\n                        _unot(cp_value), pos+1, repr(label)))\n            except ValueError:\n                raise IDNAError('Unknown codepoint adjacent to joiner {} at position {} in {}'.format(\n                    _unot(cp_value), pos+1, repr(label)))\n        elif intranges_contain(cp_value, idnadata.codepoint_classes['CONTEXTO']):\n            if not valid_contexto(label, pos):\n                raise InvalidCodepointContext('Codepoint {} not allowed at position {} in {}'.format(_unot(cp_value), pos+1, repr(label)))\n        else:\n            raise InvalidCodepoint('Codepoint {} at position {} of {} not allowed'.format(_unot(cp_value), pos+1, repr(label)))\n\n    check_bidi(label)\n\n\ndef alabel(label: str) -> bytes:\n    try:\n        label_bytes = label.encode('ascii')\n        ulabel(label_bytes)\n        if not valid_label_length(label_bytes):\n            raise IDNAError('Label too long')\n        return label_bytes\n    except UnicodeEncodeError:\n        pass\n\n    check_label(label)\n    label_bytes = _alabel_prefix + _punycode(label)\n\n    if not valid_label_length(label_bytes):\n        raise IDNAError('Label too long')\n\n    return label_bytes\n\n\ndef ulabel(label: Union[str, bytes, bytearray]) -> str:\n    if not isinstance(label, (bytes, bytearray)):\n        try:\n            label_bytes = label.encode('ascii')\n        except UnicodeEncodeError:\n            check_label(label)\n            return label\n    else:\n        label_bytes = label\n\n    label_bytes = label_bytes.lower()\n    if label_bytes.startswith(_alabel_prefix):\n        label_bytes = label_bytes[len(_alabel_prefix):]\n        if not label_bytes:\n            raise IDNAError('Malformed A-label, no Punycode eligible content found')\n        if label_bytes.decode('ascii')[-1] == '-':\n            raise IDNAError('A-label must not end with a hyphen')\n    else:\n        check_label(label_bytes)\n        return label_bytes.decode('ascii')\n\n    try:\n        label = label_bytes.decode('punycode')\n    except UnicodeError:\n        raise IDNAError('Invalid A-label')\n    check_label(label)\n    return label\n\n\ndef uts46_remap(domain: str, std3_rules: bool = True, transitional: bool = False) -> str:\n    \"\"\"Re-map the characters in the string according to UTS46 processing.\"\"\"\n    from .uts46data import uts46data\n    output = ''\n\n    for pos, char in enumerate(domain):\n        code_point = ord(char)\n        try:\n            uts46row = uts46data[code_point if code_point < 256 else\n                bisect.bisect_left(uts46data, (code_point, 'Z')) - 1]\n            status = uts46row[1]\n            replacement = None  # type: Optional[str]\n            if len(uts46row) == 3:\n                replacement = uts46row[2]\n            if (status == 'V' or\n                    (status == 'D' and not transitional) or\n                    (status == '3' and not std3_rules and replacement is None)):\n                output += char\n            elif replacement is not None and (status == 'M' or\n                    (status == '3' and not std3_rules) or\n                    (status == 'D' and transitional)):\n                output += replacement\n            elif status != 'I':\n                raise IndexError()\n        except IndexError:\n            raise InvalidCodepoint(\n                'Codepoint {} not allowed at position {} in {}'.format(\n                _unot(code_point), pos + 1, repr(domain)))\n\n    return unicodedata.normalize('NFC', output)\n\n\ndef encode(s: Union[str, bytes, bytearray], strict: bool = False, uts46: bool = False, std3_rules: bool = False, transitional: bool = False) -> bytes:\n    if not isinstance(s, str):\n        try:\n            s = str(s, 'ascii')\n        except UnicodeDecodeError:\n            raise IDNAError('should pass a unicode string to the function rather than a byte string.')\n    if uts46:\n        s = uts46_remap(s, std3_rules, transitional)\n    trailing_dot = False\n    result = []\n    if strict:\n        labels = s.split('.')\n    else:\n        labels = _unicode_dots_re.split(s)\n    if not labels or labels == ['']:\n        raise IDNAError('Empty domain')\n    if labels[-1] == '':\n        del labels[-1]\n        trailing_dot = True\n    for label in labels:\n        s = alabel(label)\n        if s:\n            result.append(s)\n        else:\n            raise IDNAError('Empty label')\n    if trailing_dot:\n        result.append(b'')\n    s = b'.'.join(result)\n    if not valid_string_length(s, trailing_dot):\n        raise IDNAError('Domain too long')\n    return s\n\n\ndef decode(s: Union[str, bytes, bytearray], strict: bool = False, uts46: bool = False, std3_rules: bool = False) -> str:\n    try:\n        if not isinstance(s, str):\n            s = str(s, 'ascii')\n    except UnicodeDecodeError:\n        raise IDNAError('Invalid ASCII in A-label')\n    if uts46:\n        s = uts46_remap(s, std3_rules, False)\n    trailing_dot = False\n    result = []\n    if not strict:\n        labels = _unicode_dots_re.split(s)\n    else:\n        labels = s.split('.')\n    if not labels or labels == ['']:\n        raise IDNAError('Empty domain')\n    if not labels[-1]:\n        del labels[-1]\n        trailing_dot = True\n    for label in labels:\n        s = ulabel(label)\n        if s:\n            result.append(s)\n        else:\n            raise IDNAError('Empty label')\n    if trailing_dot:\n        result.append('')\n    return '.'.join(result)\n", "idna/uts46data.py": "# This file is automatically generated by tools/idna-data\n# vim: set fileencoding=utf-8 :\n\nfrom typing import List, Tuple, Union\n\n\n\"\"\"IDNA Mapping Table from UTS46.\"\"\"\n\n\n__version__ = '15.1.0'\ndef _seg_0() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x0, '3'),\n    (0x1, '3'),\n    (0x2, '3'),\n    (0x3, '3'),\n    (0x4, '3'),\n    (0x5, '3'),\n    (0x6, '3'),\n    (0x7, '3'),\n    (0x8, '3'),\n    (0x9, '3'),\n    (0xA, '3'),\n    (0xB, '3'),\n    (0xC, '3'),\n    (0xD, '3'),\n    (0xE, '3'),\n    (0xF, '3'),\n    (0x10, '3'),\n    (0x11, '3'),\n    (0x12, '3'),\n    (0x13, '3'),\n    (0x14, '3'),\n    (0x15, '3'),\n    (0x16, '3'),\n    (0x17, '3'),\n    (0x18, '3'),\n    (0x19, '3'),\n    (0x1A, '3'),\n    (0x1B, '3'),\n    (0x1C, '3'),\n    (0x1D, '3'),\n    (0x1E, '3'),\n    (0x1F, '3'),\n    (0x20, '3'),\n    (0x21, '3'),\n    (0x22, '3'),\n    (0x23, '3'),\n    (0x24, '3'),\n    (0x25, '3'),\n    (0x26, '3'),\n    (0x27, '3'),\n    (0x28, '3'),\n    (0x29, '3'),\n    (0x2A, '3'),\n    (0x2B, '3'),\n    (0x2C, '3'),\n    (0x2D, 'V'),\n    (0x2E, 'V'),\n    (0x2F, '3'),\n    (0x30, 'V'),\n    (0x31, 'V'),\n    (0x32, 'V'),\n    (0x33, 'V'),\n    (0x34, 'V'),\n    (0x35, 'V'),\n    (0x36, 'V'),\n    (0x37, 'V'),\n    (0x38, 'V'),\n    (0x39, 'V'),\n    (0x3A, '3'),\n    (0x3B, '3'),\n    (0x3C, '3'),\n    (0x3D, '3'),\n    (0x3E, '3'),\n    (0x3F, '3'),\n    (0x40, '3'),\n    (0x41, 'M', 'a'),\n    (0x42, 'M', 'b'),\n    (0x43, 'M', 'c'),\n    (0x44, 'M', 'd'),\n    (0x45, 'M', 'e'),\n    (0x46, 'M', 'f'),\n    (0x47, 'M', 'g'),\n    (0x48, 'M', 'h'),\n    (0x49, 'M', 'i'),\n    (0x4A, 'M', 'j'),\n    (0x4B, 'M', 'k'),\n    (0x4C, 'M', 'l'),\n    (0x4D, 'M', 'm'),\n    (0x4E, 'M', 'n'),\n    (0x4F, 'M', 'o'),\n    (0x50, 'M', 'p'),\n    (0x51, 'M', 'q'),\n    (0x52, 'M', 'r'),\n    (0x53, 'M', 's'),\n    (0x54, 'M', 't'),\n    (0x55, 'M', 'u'),\n    (0x56, 'M', 'v'),\n    (0x57, 'M', 'w'),\n    (0x58, 'M', 'x'),\n    (0x59, 'M', 'y'),\n    (0x5A, 'M', 'z'),\n    (0x5B, '3'),\n    (0x5C, '3'),\n    (0x5D, '3'),\n    (0x5E, '3'),\n    (0x5F, '3'),\n    (0x60, '3'),\n    (0x61, 'V'),\n    (0x62, 'V'),\n    (0x63, 'V'),\n    ]\n\ndef _seg_1() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x64, 'V'),\n    (0x65, 'V'),\n    (0x66, 'V'),\n    (0x67, 'V'),\n    (0x68, 'V'),\n    (0x69, 'V'),\n    (0x6A, 'V'),\n    (0x6B, 'V'),\n    (0x6C, 'V'),\n    (0x6D, 'V'),\n    (0x6E, 'V'),\n    (0x6F, 'V'),\n    (0x70, 'V'),\n    (0x71, 'V'),\n    (0x72, 'V'),\n    (0x73, 'V'),\n    (0x74, 'V'),\n    (0x75, 'V'),\n    (0x76, 'V'),\n    (0x77, 'V'),\n    (0x78, 'V'),\n    (0x79, 'V'),\n    (0x7A, 'V'),\n    (0x7B, '3'),\n    (0x7C, '3'),\n    (0x7D, '3'),\n    (0x7E, '3'),\n    (0x7F, '3'),\n    (0x80, 'X'),\n    (0x81, 'X'),\n    (0x82, 'X'),\n    (0x83, 'X'),\n    (0x84, 'X'),\n    (0x85, 'X'),\n    (0x86, 'X'),\n    (0x87, 'X'),\n    (0x88, 'X'),\n    (0x89, 'X'),\n    (0x8A, 'X'),\n    (0x8B, 'X'),\n    (0x8C, 'X'),\n    (0x8D, 'X'),\n    (0x8E, 'X'),\n    (0x8F, 'X'),\n    (0x90, 'X'),\n    (0x91, 'X'),\n    (0x92, 'X'),\n    (0x93, 'X'),\n    (0x94, 'X'),\n    (0x95, 'X'),\n    (0x96, 'X'),\n    (0x97, 'X'),\n    (0x98, 'X'),\n    (0x99, 'X'),\n    (0x9A, 'X'),\n    (0x9B, 'X'),\n    (0x9C, 'X'),\n    (0x9D, 'X'),\n    (0x9E, 'X'),\n    (0x9F, 'X'),\n    (0xA0, '3', ' '),\n    (0xA1, 'V'),\n    (0xA2, 'V'),\n    (0xA3, 'V'),\n    (0xA4, 'V'),\n    (0xA5, 'V'),\n    (0xA6, 'V'),\n    (0xA7, 'V'),\n    (0xA8, '3', ' \u0308'),\n    (0xA9, 'V'),\n    (0xAA, 'M', 'a'),\n    (0xAB, 'V'),\n    (0xAC, 'V'),\n    (0xAD, 'I'),\n    (0xAE, 'V'),\n    (0xAF, '3', ' \u0304'),\n    (0xB0, 'V'),\n    (0xB1, 'V'),\n    (0xB2, 'M', '2'),\n    (0xB3, 'M', '3'),\n    (0xB4, '3', ' \u0301'),\n    (0xB5, 'M', '\u03bc'),\n    (0xB6, 'V'),\n    (0xB7, 'V'),\n    (0xB8, '3', ' \u0327'),\n    (0xB9, 'M', '1'),\n    (0xBA, 'M', 'o'),\n    (0xBB, 'V'),\n    (0xBC, 'M', '1\u20444'),\n    (0xBD, 'M', '1\u20442'),\n    (0xBE, 'M', '3\u20444'),\n    (0xBF, 'V'),\n    (0xC0, 'M', '\u00e0'),\n    (0xC1, 'M', '\u00e1'),\n    (0xC2, 'M', '\u00e2'),\n    (0xC3, 'M', '\u00e3'),\n    (0xC4, 'M', '\u00e4'),\n    (0xC5, 'M', '\u00e5'),\n    (0xC6, 'M', '\u00e6'),\n    (0xC7, 'M', '\u00e7'),\n    ]\n\ndef _seg_2() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xC8, 'M', '\u00e8'),\n    (0xC9, 'M', '\u00e9'),\n    (0xCA, 'M', '\u00ea'),\n    (0xCB, 'M', '\u00eb'),\n    (0xCC, 'M', '\u00ec'),\n    (0xCD, 'M', '\u00ed'),\n    (0xCE, 'M', '\u00ee'),\n    (0xCF, 'M', '\u00ef'),\n    (0xD0, 'M', '\u00f0'),\n    (0xD1, 'M', '\u00f1'),\n    (0xD2, 'M', '\u00f2'),\n    (0xD3, 'M', '\u00f3'),\n    (0xD4, 'M', '\u00f4'),\n    (0xD5, 'M', '\u00f5'),\n    (0xD6, 'M', '\u00f6'),\n    (0xD7, 'V'),\n    (0xD8, 'M', '\u00f8'),\n    (0xD9, 'M', '\u00f9'),\n    (0xDA, 'M', '\u00fa'),\n    (0xDB, 'M', '\u00fb'),\n    (0xDC, 'M', '\u00fc'),\n    (0xDD, 'M', '\u00fd'),\n    (0xDE, 'M', '\u00fe'),\n    (0xDF, 'D', 'ss'),\n    (0xE0, 'V'),\n    (0xE1, 'V'),\n    (0xE2, 'V'),\n    (0xE3, 'V'),\n    (0xE4, 'V'),\n    (0xE5, 'V'),\n    (0xE6, 'V'),\n    (0xE7, 'V'),\n    (0xE8, 'V'),\n    (0xE9, 'V'),\n    (0xEA, 'V'),\n    (0xEB, 'V'),\n    (0xEC, 'V'),\n    (0xED, 'V'),\n    (0xEE, 'V'),\n    (0xEF, 'V'),\n    (0xF0, 'V'),\n    (0xF1, 'V'),\n    (0xF2, 'V'),\n    (0xF3, 'V'),\n    (0xF4, 'V'),\n    (0xF5, 'V'),\n    (0xF6, 'V'),\n    (0xF7, 'V'),\n    (0xF8, 'V'),\n    (0xF9, 'V'),\n    (0xFA, 'V'),\n    (0xFB, 'V'),\n    (0xFC, 'V'),\n    (0xFD, 'V'),\n    (0xFE, 'V'),\n    (0xFF, 'V'),\n    (0x100, 'M', '\u0101'),\n    (0x101, 'V'),\n    (0x102, 'M', '\u0103'),\n    (0x103, 'V'),\n    (0x104, 'M', '\u0105'),\n    (0x105, 'V'),\n    (0x106, 'M', '\u0107'),\n    (0x107, 'V'),\n    (0x108, 'M', '\u0109'),\n    (0x109, 'V'),\n    (0x10A, 'M', '\u010b'),\n    (0x10B, 'V'),\n    (0x10C, 'M', '\u010d'),\n    (0x10D, 'V'),\n    (0x10E, 'M', '\u010f'),\n    (0x10F, 'V'),\n    (0x110, 'M', '\u0111'),\n    (0x111, 'V'),\n    (0x112, 'M', '\u0113'),\n    (0x113, 'V'),\n    (0x114, 'M', '\u0115'),\n    (0x115, 'V'),\n    (0x116, 'M', '\u0117'),\n    (0x117, 'V'),\n    (0x118, 'M', '\u0119'),\n    (0x119, 'V'),\n    (0x11A, 'M', '\u011b'),\n    (0x11B, 'V'),\n    (0x11C, 'M', '\u011d'),\n    (0x11D, 'V'),\n    (0x11E, 'M', '\u011f'),\n    (0x11F, 'V'),\n    (0x120, 'M', '\u0121'),\n    (0x121, 'V'),\n    (0x122, 'M', '\u0123'),\n    (0x123, 'V'),\n    (0x124, 'M', '\u0125'),\n    (0x125, 'V'),\n    (0x126, 'M', '\u0127'),\n    (0x127, 'V'),\n    (0x128, 'M', '\u0129'),\n    (0x129, 'V'),\n    (0x12A, 'M', '\u012b'),\n    (0x12B, 'V'),\n    ]\n\ndef _seg_3() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x12C, 'M', '\u012d'),\n    (0x12D, 'V'),\n    (0x12E, 'M', '\u012f'),\n    (0x12F, 'V'),\n    (0x130, 'M', 'i\u0307'),\n    (0x131, 'V'),\n    (0x132, 'M', 'ij'),\n    (0x134, 'M', '\u0135'),\n    (0x135, 'V'),\n    (0x136, 'M', '\u0137'),\n    (0x137, 'V'),\n    (0x139, 'M', '\u013a'),\n    (0x13A, 'V'),\n    (0x13B, 'M', '\u013c'),\n    (0x13C, 'V'),\n    (0x13D, 'M', '\u013e'),\n    (0x13E, 'V'),\n    (0x13F, 'M', 'l\u00b7'),\n    (0x141, 'M', '\u0142'),\n    (0x142, 'V'),\n    (0x143, 'M', '\u0144'),\n    (0x144, 'V'),\n    (0x145, 'M', '\u0146'),\n    (0x146, 'V'),\n    (0x147, 'M', '\u0148'),\n    (0x148, 'V'),\n    (0x149, 'M', '\u02bcn'),\n    (0x14A, 'M', '\u014b'),\n    (0x14B, 'V'),\n    (0x14C, 'M', '\u014d'),\n    (0x14D, 'V'),\n    (0x14E, 'M', '\u014f'),\n    (0x14F, 'V'),\n    (0x150, 'M', '\u0151'),\n    (0x151, 'V'),\n    (0x152, 'M', '\u0153'),\n    (0x153, 'V'),\n    (0x154, 'M', '\u0155'),\n    (0x155, 'V'),\n    (0x156, 'M', '\u0157'),\n    (0x157, 'V'),\n    (0x158, 'M', '\u0159'),\n    (0x159, 'V'),\n    (0x15A, 'M', '\u015b'),\n    (0x15B, 'V'),\n    (0x15C, 'M', '\u015d'),\n    (0x15D, 'V'),\n    (0x15E, 'M', '\u015f'),\n    (0x15F, 'V'),\n    (0x160, 'M', '\u0161'),\n    (0x161, 'V'),\n    (0x162, 'M', '\u0163'),\n    (0x163, 'V'),\n    (0x164, 'M', '\u0165'),\n    (0x165, 'V'),\n    (0x166, 'M', '\u0167'),\n    (0x167, 'V'),\n    (0x168, 'M', '\u0169'),\n    (0x169, 'V'),\n    (0x16A, 'M', '\u016b'),\n    (0x16B, 'V'),\n    (0x16C, 'M', '\u016d'),\n    (0x16D, 'V'),\n    (0x16E, 'M', '\u016f'),\n    (0x16F, 'V'),\n    (0x170, 'M', '\u0171'),\n    (0x171, 'V'),\n    (0x172, 'M', '\u0173'),\n    (0x173, 'V'),\n    (0x174, 'M', '\u0175'),\n    (0x175, 'V'),\n    (0x176, 'M', '\u0177'),\n    (0x177, 'V'),\n    (0x178, 'M', '\u00ff'),\n    (0x179, 'M', '\u017a'),\n    (0x17A, 'V'),\n    (0x17B, 'M', '\u017c'),\n    (0x17C, 'V'),\n    (0x17D, 'M', '\u017e'),\n    (0x17E, 'V'),\n    (0x17F, 'M', 's'),\n    (0x180, 'V'),\n    (0x181, 'M', '\u0253'),\n    (0x182, 'M', '\u0183'),\n    (0x183, 'V'),\n    (0x184, 'M', '\u0185'),\n    (0x185, 'V'),\n    (0x186, 'M', '\u0254'),\n    (0x187, 'M', '\u0188'),\n    (0x188, 'V'),\n    (0x189, 'M', '\u0256'),\n    (0x18A, 'M', '\u0257'),\n    (0x18B, 'M', '\u018c'),\n    (0x18C, 'V'),\n    (0x18E, 'M', '\u01dd'),\n    (0x18F, 'M', '\u0259'),\n    (0x190, 'M', '\u025b'),\n    (0x191, 'M', '\u0192'),\n    (0x192, 'V'),\n    (0x193, 'M', '\u0260'),\n    ]\n\ndef _seg_4() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x194, 'M', '\u0263'),\n    (0x195, 'V'),\n    (0x196, 'M', '\u0269'),\n    (0x197, 'M', '\u0268'),\n    (0x198, 'M', '\u0199'),\n    (0x199, 'V'),\n    (0x19C, 'M', '\u026f'),\n    (0x19D, 'M', '\u0272'),\n    (0x19E, 'V'),\n    (0x19F, 'M', '\u0275'),\n    (0x1A0, 'M', '\u01a1'),\n    (0x1A1, 'V'),\n    (0x1A2, 'M', '\u01a3'),\n    (0x1A3, 'V'),\n    (0x1A4, 'M', '\u01a5'),\n    (0x1A5, 'V'),\n    (0x1A6, 'M', '\u0280'),\n    (0x1A7, 'M', '\u01a8'),\n    (0x1A8, 'V'),\n    (0x1A9, 'M', '\u0283'),\n    (0x1AA, 'V'),\n    (0x1AC, 'M', '\u01ad'),\n    (0x1AD, 'V'),\n    (0x1AE, 'M', '\u0288'),\n    (0x1AF, 'M', '\u01b0'),\n    (0x1B0, 'V'),\n    (0x1B1, 'M', '\u028a'),\n    (0x1B2, 'M', '\u028b'),\n    (0x1B3, 'M', '\u01b4'),\n    (0x1B4, 'V'),\n    (0x1B5, 'M', '\u01b6'),\n    (0x1B6, 'V'),\n    (0x1B7, 'M', '\u0292'),\n    (0x1B8, 'M', '\u01b9'),\n    (0x1B9, 'V'),\n    (0x1BC, 'M', '\u01bd'),\n    (0x1BD, 'V'),\n    (0x1C4, 'M', 'd\u017e'),\n    (0x1C7, 'M', 'lj'),\n    (0x1CA, 'M', 'nj'),\n    (0x1CD, 'M', '\u01ce'),\n    (0x1CE, 'V'),\n    (0x1CF, 'M', '\u01d0'),\n    (0x1D0, 'V'),\n    (0x1D1, 'M', '\u01d2'),\n    (0x1D2, 'V'),\n    (0x1D3, 'M', '\u01d4'),\n    (0x1D4, 'V'),\n    (0x1D5, 'M', '\u01d6'),\n    (0x1D6, 'V'),\n    (0x1D7, 'M', '\u01d8'),\n    (0x1D8, 'V'),\n    (0x1D9, 'M', '\u01da'),\n    (0x1DA, 'V'),\n    (0x1DB, 'M', '\u01dc'),\n    (0x1DC, 'V'),\n    (0x1DE, 'M', '\u01df'),\n    (0x1DF, 'V'),\n    (0x1E0, 'M', '\u01e1'),\n    (0x1E1, 'V'),\n    (0x1E2, 'M', '\u01e3'),\n    (0x1E3, 'V'),\n    (0x1E4, 'M', '\u01e5'),\n    (0x1E5, 'V'),\n    (0x1E6, 'M', '\u01e7'),\n    (0x1E7, 'V'),\n    (0x1E8, 'M', '\u01e9'),\n    (0x1E9, 'V'),\n    (0x1EA, 'M', '\u01eb'),\n    (0x1EB, 'V'),\n    (0x1EC, 'M', '\u01ed'),\n    (0x1ED, 'V'),\n    (0x1EE, 'M', '\u01ef'),\n    (0x1EF, 'V'),\n    (0x1F1, 'M', 'dz'),\n    (0x1F4, 'M', '\u01f5'),\n    (0x1F5, 'V'),\n    (0x1F6, 'M', '\u0195'),\n    (0x1F7, 'M', '\u01bf'),\n    (0x1F8, 'M', '\u01f9'),\n    (0x1F9, 'V'),\n    (0x1FA, 'M', '\u01fb'),\n    (0x1FB, 'V'),\n    (0x1FC, 'M', '\u01fd'),\n    (0x1FD, 'V'),\n    (0x1FE, 'M', '\u01ff'),\n    (0x1FF, 'V'),\n    (0x200, 'M', '\u0201'),\n    (0x201, 'V'),\n    (0x202, 'M', '\u0203'),\n    (0x203, 'V'),\n    (0x204, 'M', '\u0205'),\n    (0x205, 'V'),\n    (0x206, 'M', '\u0207'),\n    (0x207, 'V'),\n    (0x208, 'M', '\u0209'),\n    (0x209, 'V'),\n    (0x20A, 'M', '\u020b'),\n    (0x20B, 'V'),\n    (0x20C, 'M', '\u020d'),\n    ]\n\ndef _seg_5() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x20D, 'V'),\n    (0x20E, 'M', '\u020f'),\n    (0x20F, 'V'),\n    (0x210, 'M', '\u0211'),\n    (0x211, 'V'),\n    (0x212, 'M', '\u0213'),\n    (0x213, 'V'),\n    (0x214, 'M', '\u0215'),\n    (0x215, 'V'),\n    (0x216, 'M', '\u0217'),\n    (0x217, 'V'),\n    (0x218, 'M', '\u0219'),\n    (0x219, 'V'),\n    (0x21A, 'M', '\u021b'),\n    (0x21B, 'V'),\n    (0x21C, 'M', '\u021d'),\n    (0x21D, 'V'),\n    (0x21E, 'M', '\u021f'),\n    (0x21F, 'V'),\n    (0x220, 'M', '\u019e'),\n    (0x221, 'V'),\n    (0x222, 'M', '\u0223'),\n    (0x223, 'V'),\n    (0x224, 'M', '\u0225'),\n    (0x225, 'V'),\n    (0x226, 'M', '\u0227'),\n    (0x227, 'V'),\n    (0x228, 'M', '\u0229'),\n    (0x229, 'V'),\n    (0x22A, 'M', '\u022b'),\n    (0x22B, 'V'),\n    (0x22C, 'M', '\u022d'),\n    (0x22D, 'V'),\n    (0x22E, 'M', '\u022f'),\n    (0x22F, 'V'),\n    (0x230, 'M', '\u0231'),\n    (0x231, 'V'),\n    (0x232, 'M', '\u0233'),\n    (0x233, 'V'),\n    (0x23A, 'M', '\u2c65'),\n    (0x23B, 'M', '\u023c'),\n    (0x23C, 'V'),\n    (0x23D, 'M', '\u019a'),\n    (0x23E, 'M', '\u2c66'),\n    (0x23F, 'V'),\n    (0x241, 'M', '\u0242'),\n    (0x242, 'V'),\n    (0x243, 'M', '\u0180'),\n    (0x244, 'M', '\u0289'),\n    (0x245, 'M', '\u028c'),\n    (0x246, 'M', '\u0247'),\n    (0x247, 'V'),\n    (0x248, 'M', '\u0249'),\n    (0x249, 'V'),\n    (0x24A, 'M', '\u024b'),\n    (0x24B, 'V'),\n    (0x24C, 'M', '\u024d'),\n    (0x24D, 'V'),\n    (0x24E, 'M', '\u024f'),\n    (0x24F, 'V'),\n    (0x2B0, 'M', 'h'),\n    (0x2B1, 'M', '\u0266'),\n    (0x2B2, 'M', 'j'),\n    (0x2B3, 'M', 'r'),\n    (0x2B4, 'M', '\u0279'),\n    (0x2B5, 'M', '\u027b'),\n    (0x2B6, 'M', '\u0281'),\n    (0x2B7, 'M', 'w'),\n    (0x2B8, 'M', 'y'),\n    (0x2B9, 'V'),\n    (0x2D8, '3', ' \u0306'),\n    (0x2D9, '3', ' \u0307'),\n    (0x2DA, '3', ' \u030a'),\n    (0x2DB, '3', ' \u0328'),\n    (0x2DC, '3', ' \u0303'),\n    (0x2DD, '3', ' \u030b'),\n    (0x2DE, 'V'),\n    (0x2E0, 'M', '\u0263'),\n    (0x2E1, 'M', 'l'),\n    (0x2E2, 'M', 's'),\n    (0x2E3, 'M', 'x'),\n    (0x2E4, 'M', '\u0295'),\n    (0x2E5, 'V'),\n    (0x340, 'M', '\u0300'),\n    (0x341, 'M', '\u0301'),\n    (0x342, 'V'),\n    (0x343, 'M', '\u0313'),\n    (0x344, 'M', '\u0308\u0301'),\n    (0x345, 'M', '\u03b9'),\n    (0x346, 'V'),\n    (0x34F, 'I'),\n    (0x350, 'V'),\n    (0x370, 'M', '\u0371'),\n    (0x371, 'V'),\n    (0x372, 'M', '\u0373'),\n    (0x373, 'V'),\n    (0x374, 'M', '\u02b9'),\n    (0x375, 'V'),\n    (0x376, 'M', '\u0377'),\n    (0x377, 'V'),\n    ]\n\ndef _seg_6() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x378, 'X'),\n    (0x37A, '3', ' \u03b9'),\n    (0x37B, 'V'),\n    (0x37E, '3', ';'),\n    (0x37F, 'M', '\u03f3'),\n    (0x380, 'X'),\n    (0x384, '3', ' \u0301'),\n    (0x385, '3', ' \u0308\u0301'),\n    (0x386, 'M', '\u03ac'),\n    (0x387, 'M', '\u00b7'),\n    (0x388, 'M', '\u03ad'),\n    (0x389, 'M', '\u03ae'),\n    (0x38A, 'M', '\u03af'),\n    (0x38B, 'X'),\n    (0x38C, 'M', '\u03cc'),\n    (0x38D, 'X'),\n    (0x38E, 'M', '\u03cd'),\n    (0x38F, 'M', '\u03ce'),\n    (0x390, 'V'),\n    (0x391, 'M', '\u03b1'),\n    (0x392, 'M', '\u03b2'),\n    (0x393, 'M', '\u03b3'),\n    (0x394, 'M', '\u03b4'),\n    (0x395, 'M', '\u03b5'),\n    (0x396, 'M', '\u03b6'),\n    (0x397, 'M', '\u03b7'),\n    (0x398, 'M', '\u03b8'),\n    (0x399, 'M', '\u03b9'),\n    (0x39A, 'M', '\u03ba'),\n    (0x39B, 'M', '\u03bb'),\n    (0x39C, 'M', '\u03bc'),\n    (0x39D, 'M', '\u03bd'),\n    (0x39E, 'M', '\u03be'),\n    (0x39F, 'M', '\u03bf'),\n    (0x3A0, 'M', '\u03c0'),\n    (0x3A1, 'M', '\u03c1'),\n    (0x3A2, 'X'),\n    (0x3A3, 'M', '\u03c3'),\n    (0x3A4, 'M', '\u03c4'),\n    (0x3A5, 'M', '\u03c5'),\n    (0x3A6, 'M', '\u03c6'),\n    (0x3A7, 'M', '\u03c7'),\n    (0x3A8, 'M', '\u03c8'),\n    (0x3A9, 'M', '\u03c9'),\n    (0x3AA, 'M', '\u03ca'),\n    (0x3AB, 'M', '\u03cb'),\n    (0x3AC, 'V'),\n    (0x3C2, 'D', '\u03c3'),\n    (0x3C3, 'V'),\n    (0x3CF, 'M', '\u03d7'),\n    (0x3D0, 'M', '\u03b2'),\n    (0x3D1, 'M', '\u03b8'),\n    (0x3D2, 'M', '\u03c5'),\n    (0x3D3, 'M', '\u03cd'),\n    (0x3D4, 'M', '\u03cb'),\n    (0x3D5, 'M', '\u03c6'),\n    (0x3D6, 'M', '\u03c0'),\n    (0x3D7, 'V'),\n    (0x3D8, 'M', '\u03d9'),\n    (0x3D9, 'V'),\n    (0x3DA, 'M', '\u03db'),\n    (0x3DB, 'V'),\n    (0x3DC, 'M', '\u03dd'),\n    (0x3DD, 'V'),\n    (0x3DE, 'M', '\u03df'),\n    (0x3DF, 'V'),\n    (0x3E0, 'M', '\u03e1'),\n    (0x3E1, 'V'),\n    (0x3E2, 'M', '\u03e3'),\n    (0x3E3, 'V'),\n    (0x3E4, 'M', '\u03e5'),\n    (0x3E5, 'V'),\n    (0x3E6, 'M', '\u03e7'),\n    (0x3E7, 'V'),\n    (0x3E8, 'M', '\u03e9'),\n    (0x3E9, 'V'),\n    (0x3EA, 'M', '\u03eb'),\n    (0x3EB, 'V'),\n    (0x3EC, 'M', '\u03ed'),\n    (0x3ED, 'V'),\n    (0x3EE, 'M', '\u03ef'),\n    (0x3EF, 'V'),\n    (0x3F0, 'M', '\u03ba'),\n    (0x3F1, 'M', '\u03c1'),\n    (0x3F2, 'M', '\u03c3'),\n    (0x3F3, 'V'),\n    (0x3F4, 'M', '\u03b8'),\n    (0x3F5, 'M', '\u03b5'),\n    (0x3F6, 'V'),\n    (0x3F7, 'M', '\u03f8'),\n    (0x3F8, 'V'),\n    (0x3F9, 'M', '\u03c3'),\n    (0x3FA, 'M', '\u03fb'),\n    (0x3FB, 'V'),\n    (0x3FD, 'M', '\u037b'),\n    (0x3FE, 'M', '\u037c'),\n    (0x3FF, 'M', '\u037d'),\n    (0x400, 'M', '\u0450'),\n    (0x401, 'M', '\u0451'),\n    (0x402, 'M', '\u0452'),\n    ]\n\ndef _seg_7() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x403, 'M', '\u0453'),\n    (0x404, 'M', '\u0454'),\n    (0x405, 'M', '\u0455'),\n    (0x406, 'M', '\u0456'),\n    (0x407, 'M', '\u0457'),\n    (0x408, 'M', '\u0458'),\n    (0x409, 'M', '\u0459'),\n    (0x40A, 'M', '\u045a'),\n    (0x40B, 'M', '\u045b'),\n    (0x40C, 'M', '\u045c'),\n    (0x40D, 'M', '\u045d'),\n    (0x40E, 'M', '\u045e'),\n    (0x40F, 'M', '\u045f'),\n    (0x410, 'M', '\u0430'),\n    (0x411, 'M', '\u0431'),\n    (0x412, 'M', '\u0432'),\n    (0x413, 'M', '\u0433'),\n    (0x414, 'M', '\u0434'),\n    (0x415, 'M', '\u0435'),\n    (0x416, 'M', '\u0436'),\n    (0x417, 'M', '\u0437'),\n    (0x418, 'M', '\u0438'),\n    (0x419, 'M', '\u0439'),\n    (0x41A, 'M', '\u043a'),\n    (0x41B, 'M', '\u043b'),\n    (0x41C, 'M', '\u043c'),\n    (0x41D, 'M', '\u043d'),\n    (0x41E, 'M', '\u043e'),\n    (0x41F, 'M', '\u043f'),\n    (0x420, 'M', '\u0440'),\n    (0x421, 'M', '\u0441'),\n    (0x422, 'M', '\u0442'),\n    (0x423, 'M', '\u0443'),\n    (0x424, 'M', '\u0444'),\n    (0x425, 'M', '\u0445'),\n    (0x426, 'M', '\u0446'),\n    (0x427, 'M', '\u0447'),\n    (0x428, 'M', '\u0448'),\n    (0x429, 'M', '\u0449'),\n    (0x42A, 'M', '\u044a'),\n    (0x42B, 'M', '\u044b'),\n    (0x42C, 'M', '\u044c'),\n    (0x42D, 'M', '\u044d'),\n    (0x42E, 'M', '\u044e'),\n    (0x42F, 'M', '\u044f'),\n    (0x430, 'V'),\n    (0x460, 'M', '\u0461'),\n    (0x461, 'V'),\n    (0x462, 'M', '\u0463'),\n    (0x463, 'V'),\n    (0x464, 'M', '\u0465'),\n    (0x465, 'V'),\n    (0x466, 'M', '\u0467'),\n    (0x467, 'V'),\n    (0x468, 'M', '\u0469'),\n    (0x469, 'V'),\n    (0x46A, 'M', '\u046b'),\n    (0x46B, 'V'),\n    (0x46C, 'M', '\u046d'),\n    (0x46D, 'V'),\n    (0x46E, 'M', '\u046f'),\n    (0x46F, 'V'),\n    (0x470, 'M', '\u0471'),\n    (0x471, 'V'),\n    (0x472, 'M', '\u0473'),\n    (0x473, 'V'),\n    (0x474, 'M', '\u0475'),\n    (0x475, 'V'),\n    (0x476, 'M', '\u0477'),\n    (0x477, 'V'),\n    (0x478, 'M', '\u0479'),\n    (0x479, 'V'),\n    (0x47A, 'M', '\u047b'),\n    (0x47B, 'V'),\n    (0x47C, 'M', '\u047d'),\n    (0x47D, 'V'),\n    (0x47E, 'M', '\u047f'),\n    (0x47F, 'V'),\n    (0x480, 'M', '\u0481'),\n    (0x481, 'V'),\n    (0x48A, 'M', '\u048b'),\n    (0x48B, 'V'),\n    (0x48C, 'M', '\u048d'),\n    (0x48D, 'V'),\n    (0x48E, 'M', '\u048f'),\n    (0x48F, 'V'),\n    (0x490, 'M', '\u0491'),\n    (0x491, 'V'),\n    (0x492, 'M', '\u0493'),\n    (0x493, 'V'),\n    (0x494, 'M', '\u0495'),\n    (0x495, 'V'),\n    (0x496, 'M', '\u0497'),\n    (0x497, 'V'),\n    (0x498, 'M', '\u0499'),\n    (0x499, 'V'),\n    (0x49A, 'M', '\u049b'),\n    (0x49B, 'V'),\n    (0x49C, 'M', '\u049d'),\n    (0x49D, 'V'),\n    ]\n\ndef _seg_8() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x49E, 'M', '\u049f'),\n    (0x49F, 'V'),\n    (0x4A0, 'M', '\u04a1'),\n    (0x4A1, 'V'),\n    (0x4A2, 'M', '\u04a3'),\n    (0x4A3, 'V'),\n    (0x4A4, 'M', '\u04a5'),\n    (0x4A5, 'V'),\n    (0x4A6, 'M', '\u04a7'),\n    (0x4A7, 'V'),\n    (0x4A8, 'M', '\u04a9'),\n    (0x4A9, 'V'),\n    (0x4AA, 'M', '\u04ab'),\n    (0x4AB, 'V'),\n    (0x4AC, 'M', '\u04ad'),\n    (0x4AD, 'V'),\n    (0x4AE, 'M', '\u04af'),\n    (0x4AF, 'V'),\n    (0x4B0, 'M', '\u04b1'),\n    (0x4B1, 'V'),\n    (0x4B2, 'M', '\u04b3'),\n    (0x4B3, 'V'),\n    (0x4B4, 'M', '\u04b5'),\n    (0x4B5, 'V'),\n    (0x4B6, 'M', '\u04b7'),\n    (0x4B7, 'V'),\n    (0x4B8, 'M', '\u04b9'),\n    (0x4B9, 'V'),\n    (0x4BA, 'M', '\u04bb'),\n    (0x4BB, 'V'),\n    (0x4BC, 'M', '\u04bd'),\n    (0x4BD, 'V'),\n    (0x4BE, 'M', '\u04bf'),\n    (0x4BF, 'V'),\n    (0x4C0, 'X'),\n    (0x4C1, 'M', '\u04c2'),\n    (0x4C2, 'V'),\n    (0x4C3, 'M', '\u04c4'),\n    (0x4C4, 'V'),\n    (0x4C5, 'M', '\u04c6'),\n    (0x4C6, 'V'),\n    (0x4C7, 'M', '\u04c8'),\n    (0x4C8, 'V'),\n    (0x4C9, 'M', '\u04ca'),\n    (0x4CA, 'V'),\n    (0x4CB, 'M', '\u04cc'),\n    (0x4CC, 'V'),\n    (0x4CD, 'M', '\u04ce'),\n    (0x4CE, 'V'),\n    (0x4D0, 'M', '\u04d1'),\n    (0x4D1, 'V'),\n    (0x4D2, 'M', '\u04d3'),\n    (0x4D3, 'V'),\n    (0x4D4, 'M', '\u04d5'),\n    (0x4D5, 'V'),\n    (0x4D6, 'M', '\u04d7'),\n    (0x4D7, 'V'),\n    (0x4D8, 'M', '\u04d9'),\n    (0x4D9, 'V'),\n    (0x4DA, 'M', '\u04db'),\n    (0x4DB, 'V'),\n    (0x4DC, 'M', '\u04dd'),\n    (0x4DD, 'V'),\n    (0x4DE, 'M', '\u04df'),\n    (0x4DF, 'V'),\n    (0x4E0, 'M', '\u04e1'),\n    (0x4E1, 'V'),\n    (0x4E2, 'M', '\u04e3'),\n    (0x4E3, 'V'),\n    (0x4E4, 'M', '\u04e5'),\n    (0x4E5, 'V'),\n    (0x4E6, 'M', '\u04e7'),\n    (0x4E7, 'V'),\n    (0x4E8, 'M', '\u04e9'),\n    (0x4E9, 'V'),\n    (0x4EA, 'M', '\u04eb'),\n    (0x4EB, 'V'),\n    (0x4EC, 'M', '\u04ed'),\n    (0x4ED, 'V'),\n    (0x4EE, 'M', '\u04ef'),\n    (0x4EF, 'V'),\n    (0x4F0, 'M', '\u04f1'),\n    (0x4F1, 'V'),\n    (0x4F2, 'M', '\u04f3'),\n    (0x4F3, 'V'),\n    (0x4F4, 'M', '\u04f5'),\n    (0x4F5, 'V'),\n    (0x4F6, 'M', '\u04f7'),\n    (0x4F7, 'V'),\n    (0x4F8, 'M', '\u04f9'),\n    (0x4F9, 'V'),\n    (0x4FA, 'M', '\u04fb'),\n    (0x4FB, 'V'),\n    (0x4FC, 'M', '\u04fd'),\n    (0x4FD, 'V'),\n    (0x4FE, 'M', '\u04ff'),\n    (0x4FF, 'V'),\n    (0x500, 'M', '\u0501'),\n    (0x501, 'V'),\n    (0x502, 'M', '\u0503'),\n    ]\n\ndef _seg_9() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x503, 'V'),\n    (0x504, 'M', '\u0505'),\n    (0x505, 'V'),\n    (0x506, 'M', '\u0507'),\n    (0x507, 'V'),\n    (0x508, 'M', '\u0509'),\n    (0x509, 'V'),\n    (0x50A, 'M', '\u050b'),\n    (0x50B, 'V'),\n    (0x50C, 'M', '\u050d'),\n    (0x50D, 'V'),\n    (0x50E, 'M', '\u050f'),\n    (0x50F, 'V'),\n    (0x510, 'M', '\u0511'),\n    (0x511, 'V'),\n    (0x512, 'M', '\u0513'),\n    (0x513, 'V'),\n    (0x514, 'M', '\u0515'),\n    (0x515, 'V'),\n    (0x516, 'M', '\u0517'),\n    (0x517, 'V'),\n    (0x518, 'M', '\u0519'),\n    (0x519, 'V'),\n    (0x51A, 'M', '\u051b'),\n    (0x51B, 'V'),\n    (0x51C, 'M', '\u051d'),\n    (0x51D, 'V'),\n    (0x51E, 'M', '\u051f'),\n    (0x51F, 'V'),\n    (0x520, 'M', '\u0521'),\n    (0x521, 'V'),\n    (0x522, 'M', '\u0523'),\n    (0x523, 'V'),\n    (0x524, 'M', '\u0525'),\n    (0x525, 'V'),\n    (0x526, 'M', '\u0527'),\n    (0x527, 'V'),\n    (0x528, 'M', '\u0529'),\n    (0x529, 'V'),\n    (0x52A, 'M', '\u052b'),\n    (0x52B, 'V'),\n    (0x52C, 'M', '\u052d'),\n    (0x52D, 'V'),\n    (0x52E, 'M', '\u052f'),\n    (0x52F, 'V'),\n    (0x530, 'X'),\n    (0x531, 'M', '\u0561'),\n    (0x532, 'M', '\u0562'),\n    (0x533, 'M', '\u0563'),\n    (0x534, 'M', '\u0564'),\n    (0x535, 'M', '\u0565'),\n    (0x536, 'M', '\u0566'),\n    (0x537, 'M', '\u0567'),\n    (0x538, 'M', '\u0568'),\n    (0x539, 'M', '\u0569'),\n    (0x53A, 'M', '\u056a'),\n    (0x53B, 'M', '\u056b'),\n    (0x53C, 'M', '\u056c'),\n    (0x53D, 'M', '\u056d'),\n    (0x53E, 'M', '\u056e'),\n    (0x53F, 'M', '\u056f'),\n    (0x540, 'M', '\u0570'),\n    (0x541, 'M', '\u0571'),\n    (0x542, 'M', '\u0572'),\n    (0x543, 'M', '\u0573'),\n    (0x544, 'M', '\u0574'),\n    (0x545, 'M', '\u0575'),\n    (0x546, 'M', '\u0576'),\n    (0x547, 'M', '\u0577'),\n    (0x548, 'M', '\u0578'),\n    (0x549, 'M', '\u0579'),\n    (0x54A, 'M', '\u057a'),\n    (0x54B, 'M', '\u057b'),\n    (0x54C, 'M', '\u057c'),\n    (0x54D, 'M', '\u057d'),\n    (0x54E, 'M', '\u057e'),\n    (0x54F, 'M', '\u057f'),\n    (0x550, 'M', '\u0580'),\n    (0x551, 'M', '\u0581'),\n    (0x552, 'M', '\u0582'),\n    (0x553, 'M', '\u0583'),\n    (0x554, 'M', '\u0584'),\n    (0x555, 'M', '\u0585'),\n    (0x556, 'M', '\u0586'),\n    (0x557, 'X'),\n    (0x559, 'V'),\n    (0x587, 'M', '\u0565\u0582'),\n    (0x588, 'V'),\n    (0x58B, 'X'),\n    (0x58D, 'V'),\n    (0x590, 'X'),\n    (0x591, 'V'),\n    (0x5C8, 'X'),\n    (0x5D0, 'V'),\n    (0x5EB, 'X'),\n    (0x5EF, 'V'),\n    (0x5F5, 'X'),\n    (0x606, 'V'),\n    (0x61C, 'X'),\n    (0x61D, 'V'),\n    ]\n\ndef _seg_10() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x675, 'M', '\u0627\u0674'),\n    (0x676, 'M', '\u0648\u0674'),\n    (0x677, 'M', '\u06c7\u0674'),\n    (0x678, 'M', '\u064a\u0674'),\n    (0x679, 'V'),\n    (0x6DD, 'X'),\n    (0x6DE, 'V'),\n    (0x70E, 'X'),\n    (0x710, 'V'),\n    (0x74B, 'X'),\n    (0x74D, 'V'),\n    (0x7B2, 'X'),\n    (0x7C0, 'V'),\n    (0x7FB, 'X'),\n    (0x7FD, 'V'),\n    (0x82E, 'X'),\n    (0x830, 'V'),\n    (0x83F, 'X'),\n    (0x840, 'V'),\n    (0x85C, 'X'),\n    (0x85E, 'V'),\n    (0x85F, 'X'),\n    (0x860, 'V'),\n    (0x86B, 'X'),\n    (0x870, 'V'),\n    (0x88F, 'X'),\n    (0x898, 'V'),\n    (0x8E2, 'X'),\n    (0x8E3, 'V'),\n    (0x958, 'M', '\u0915\u093c'),\n    (0x959, 'M', '\u0916\u093c'),\n    (0x95A, 'M', '\u0917\u093c'),\n    (0x95B, 'M', '\u091c\u093c'),\n    (0x95C, 'M', '\u0921\u093c'),\n    (0x95D, 'M', '\u0922\u093c'),\n    (0x95E, 'M', '\u092b\u093c'),\n    (0x95F, 'M', '\u092f\u093c'),\n    (0x960, 'V'),\n    (0x984, 'X'),\n    (0x985, 'V'),\n    (0x98D, 'X'),\n    (0x98F, 'V'),\n    (0x991, 'X'),\n    (0x993, 'V'),\n    (0x9A9, 'X'),\n    (0x9AA, 'V'),\n    (0x9B1, 'X'),\n    (0x9B2, 'V'),\n    (0x9B3, 'X'),\n    (0x9B6, 'V'),\n    (0x9BA, 'X'),\n    (0x9BC, 'V'),\n    (0x9C5, 'X'),\n    (0x9C7, 'V'),\n    (0x9C9, 'X'),\n    (0x9CB, 'V'),\n    (0x9CF, 'X'),\n    (0x9D7, 'V'),\n    (0x9D8, 'X'),\n    (0x9DC, 'M', '\u09a1\u09bc'),\n    (0x9DD, 'M', '\u09a2\u09bc'),\n    (0x9DE, 'X'),\n    (0x9DF, 'M', '\u09af\u09bc'),\n    (0x9E0, 'V'),\n    (0x9E4, 'X'),\n    (0x9E6, 'V'),\n    (0x9FF, 'X'),\n    (0xA01, 'V'),\n    (0xA04, 'X'),\n    (0xA05, 'V'),\n    (0xA0B, 'X'),\n    (0xA0F, 'V'),\n    (0xA11, 'X'),\n    (0xA13, 'V'),\n    (0xA29, 'X'),\n    (0xA2A, 'V'),\n    (0xA31, 'X'),\n    (0xA32, 'V'),\n    (0xA33, 'M', '\u0a32\u0a3c'),\n    (0xA34, 'X'),\n    (0xA35, 'V'),\n    (0xA36, 'M', '\u0a38\u0a3c'),\n    (0xA37, 'X'),\n    (0xA38, 'V'),\n    (0xA3A, 'X'),\n    (0xA3C, 'V'),\n    (0xA3D, 'X'),\n    (0xA3E, 'V'),\n    (0xA43, 'X'),\n    (0xA47, 'V'),\n    (0xA49, 'X'),\n    (0xA4B, 'V'),\n    (0xA4E, 'X'),\n    (0xA51, 'V'),\n    (0xA52, 'X'),\n    (0xA59, 'M', '\u0a16\u0a3c'),\n    (0xA5A, 'M', '\u0a17\u0a3c'),\n    (0xA5B, 'M', '\u0a1c\u0a3c'),\n    (0xA5C, 'V'),\n    (0xA5D, 'X'),\n    ]\n\ndef _seg_11() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xA5E, 'M', '\u0a2b\u0a3c'),\n    (0xA5F, 'X'),\n    (0xA66, 'V'),\n    (0xA77, 'X'),\n    (0xA81, 'V'),\n    (0xA84, 'X'),\n    (0xA85, 'V'),\n    (0xA8E, 'X'),\n    (0xA8F, 'V'),\n    (0xA92, 'X'),\n    (0xA93, 'V'),\n    (0xAA9, 'X'),\n    (0xAAA, 'V'),\n    (0xAB1, 'X'),\n    (0xAB2, 'V'),\n    (0xAB4, 'X'),\n    (0xAB5, 'V'),\n    (0xABA, 'X'),\n    (0xABC, 'V'),\n    (0xAC6, 'X'),\n    (0xAC7, 'V'),\n    (0xACA, 'X'),\n    (0xACB, 'V'),\n    (0xACE, 'X'),\n    (0xAD0, 'V'),\n    (0xAD1, 'X'),\n    (0xAE0, 'V'),\n    (0xAE4, 'X'),\n    (0xAE6, 'V'),\n    (0xAF2, 'X'),\n    (0xAF9, 'V'),\n    (0xB00, 'X'),\n    (0xB01, 'V'),\n    (0xB04, 'X'),\n    (0xB05, 'V'),\n    (0xB0D, 'X'),\n    (0xB0F, 'V'),\n    (0xB11, 'X'),\n    (0xB13, 'V'),\n    (0xB29, 'X'),\n    (0xB2A, 'V'),\n    (0xB31, 'X'),\n    (0xB32, 'V'),\n    (0xB34, 'X'),\n    (0xB35, 'V'),\n    (0xB3A, 'X'),\n    (0xB3C, 'V'),\n    (0xB45, 'X'),\n    (0xB47, 'V'),\n    (0xB49, 'X'),\n    (0xB4B, 'V'),\n    (0xB4E, 'X'),\n    (0xB55, 'V'),\n    (0xB58, 'X'),\n    (0xB5C, 'M', '\u0b21\u0b3c'),\n    (0xB5D, 'M', '\u0b22\u0b3c'),\n    (0xB5E, 'X'),\n    (0xB5F, 'V'),\n    (0xB64, 'X'),\n    (0xB66, 'V'),\n    (0xB78, 'X'),\n    (0xB82, 'V'),\n    (0xB84, 'X'),\n    (0xB85, 'V'),\n    (0xB8B, 'X'),\n    (0xB8E, 'V'),\n    (0xB91, 'X'),\n    (0xB92, 'V'),\n    (0xB96, 'X'),\n    (0xB99, 'V'),\n    (0xB9B, 'X'),\n    (0xB9C, 'V'),\n    (0xB9D, 'X'),\n    (0xB9E, 'V'),\n    (0xBA0, 'X'),\n    (0xBA3, 'V'),\n    (0xBA5, 'X'),\n    (0xBA8, 'V'),\n    (0xBAB, 'X'),\n    (0xBAE, 'V'),\n    (0xBBA, 'X'),\n    (0xBBE, 'V'),\n    (0xBC3, 'X'),\n    (0xBC6, 'V'),\n    (0xBC9, 'X'),\n    (0xBCA, 'V'),\n    (0xBCE, 'X'),\n    (0xBD0, 'V'),\n    (0xBD1, 'X'),\n    (0xBD7, 'V'),\n    (0xBD8, 'X'),\n    (0xBE6, 'V'),\n    (0xBFB, 'X'),\n    (0xC00, 'V'),\n    (0xC0D, 'X'),\n    (0xC0E, 'V'),\n    (0xC11, 'X'),\n    (0xC12, 'V'),\n    (0xC29, 'X'),\n    (0xC2A, 'V'),\n    ]\n\ndef _seg_12() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xC3A, 'X'),\n    (0xC3C, 'V'),\n    (0xC45, 'X'),\n    (0xC46, 'V'),\n    (0xC49, 'X'),\n    (0xC4A, 'V'),\n    (0xC4E, 'X'),\n    (0xC55, 'V'),\n    (0xC57, 'X'),\n    (0xC58, 'V'),\n    (0xC5B, 'X'),\n    (0xC5D, 'V'),\n    (0xC5E, 'X'),\n    (0xC60, 'V'),\n    (0xC64, 'X'),\n    (0xC66, 'V'),\n    (0xC70, 'X'),\n    (0xC77, 'V'),\n    (0xC8D, 'X'),\n    (0xC8E, 'V'),\n    (0xC91, 'X'),\n    (0xC92, 'V'),\n    (0xCA9, 'X'),\n    (0xCAA, 'V'),\n    (0xCB4, 'X'),\n    (0xCB5, 'V'),\n    (0xCBA, 'X'),\n    (0xCBC, 'V'),\n    (0xCC5, 'X'),\n    (0xCC6, 'V'),\n    (0xCC9, 'X'),\n    (0xCCA, 'V'),\n    (0xCCE, 'X'),\n    (0xCD5, 'V'),\n    (0xCD7, 'X'),\n    (0xCDD, 'V'),\n    (0xCDF, 'X'),\n    (0xCE0, 'V'),\n    (0xCE4, 'X'),\n    (0xCE6, 'V'),\n    (0xCF0, 'X'),\n    (0xCF1, 'V'),\n    (0xCF4, 'X'),\n    (0xD00, 'V'),\n    (0xD0D, 'X'),\n    (0xD0E, 'V'),\n    (0xD11, 'X'),\n    (0xD12, 'V'),\n    (0xD45, 'X'),\n    (0xD46, 'V'),\n    (0xD49, 'X'),\n    (0xD4A, 'V'),\n    (0xD50, 'X'),\n    (0xD54, 'V'),\n    (0xD64, 'X'),\n    (0xD66, 'V'),\n    (0xD80, 'X'),\n    (0xD81, 'V'),\n    (0xD84, 'X'),\n    (0xD85, 'V'),\n    (0xD97, 'X'),\n    (0xD9A, 'V'),\n    (0xDB2, 'X'),\n    (0xDB3, 'V'),\n    (0xDBC, 'X'),\n    (0xDBD, 'V'),\n    (0xDBE, 'X'),\n    (0xDC0, 'V'),\n    (0xDC7, 'X'),\n    (0xDCA, 'V'),\n    (0xDCB, 'X'),\n    (0xDCF, 'V'),\n    (0xDD5, 'X'),\n    (0xDD6, 'V'),\n    (0xDD7, 'X'),\n    (0xDD8, 'V'),\n    (0xDE0, 'X'),\n    (0xDE6, 'V'),\n    (0xDF0, 'X'),\n    (0xDF2, 'V'),\n    (0xDF5, 'X'),\n    (0xE01, 'V'),\n    (0xE33, 'M', '\u0e4d\u0e32'),\n    (0xE34, 'V'),\n    (0xE3B, 'X'),\n    (0xE3F, 'V'),\n    (0xE5C, 'X'),\n    (0xE81, 'V'),\n    (0xE83, 'X'),\n    (0xE84, 'V'),\n    (0xE85, 'X'),\n    (0xE86, 'V'),\n    (0xE8B, 'X'),\n    (0xE8C, 'V'),\n    (0xEA4, 'X'),\n    (0xEA5, 'V'),\n    (0xEA6, 'X'),\n    (0xEA7, 'V'),\n    (0xEB3, 'M', '\u0ecd\u0eb2'),\n    (0xEB4, 'V'),\n    ]\n\ndef _seg_13() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xEBE, 'X'),\n    (0xEC0, 'V'),\n    (0xEC5, 'X'),\n    (0xEC6, 'V'),\n    (0xEC7, 'X'),\n    (0xEC8, 'V'),\n    (0xECF, 'X'),\n    (0xED0, 'V'),\n    (0xEDA, 'X'),\n    (0xEDC, 'M', '\u0eab\u0e99'),\n    (0xEDD, 'M', '\u0eab\u0ea1'),\n    (0xEDE, 'V'),\n    (0xEE0, 'X'),\n    (0xF00, 'V'),\n    (0xF0C, 'M', '\u0f0b'),\n    (0xF0D, 'V'),\n    (0xF43, 'M', '\u0f42\u0fb7'),\n    (0xF44, 'V'),\n    (0xF48, 'X'),\n    (0xF49, 'V'),\n    (0xF4D, 'M', '\u0f4c\u0fb7'),\n    (0xF4E, 'V'),\n    (0xF52, 'M', '\u0f51\u0fb7'),\n    (0xF53, 'V'),\n    (0xF57, 'M', '\u0f56\u0fb7'),\n    (0xF58, 'V'),\n    (0xF5C, 'M', '\u0f5b\u0fb7'),\n    (0xF5D, 'V'),\n    (0xF69, 'M', '\u0f40\u0fb5'),\n    (0xF6A, 'V'),\n    (0xF6D, 'X'),\n    (0xF71, 'V'),\n    (0xF73, 'M', '\u0f71\u0f72'),\n    (0xF74, 'V'),\n    (0xF75, 'M', '\u0f71\u0f74'),\n    (0xF76, 'M', '\u0fb2\u0f80'),\n    (0xF77, 'M', '\u0fb2\u0f71\u0f80'),\n    (0xF78, 'M', '\u0fb3\u0f80'),\n    (0xF79, 'M', '\u0fb3\u0f71\u0f80'),\n    (0xF7A, 'V'),\n    (0xF81, 'M', '\u0f71\u0f80'),\n    (0xF82, 'V'),\n    (0xF93, 'M', '\u0f92\u0fb7'),\n    (0xF94, 'V'),\n    (0xF98, 'X'),\n    (0xF99, 'V'),\n    (0xF9D, 'M', '\u0f9c\u0fb7'),\n    (0xF9E, 'V'),\n    (0xFA2, 'M', '\u0fa1\u0fb7'),\n    (0xFA3, 'V'),\n    (0xFA7, 'M', '\u0fa6\u0fb7'),\n    (0xFA8, 'V'),\n    (0xFAC, 'M', '\u0fab\u0fb7'),\n    (0xFAD, 'V'),\n    (0xFB9, 'M', '\u0f90\u0fb5'),\n    (0xFBA, 'V'),\n    (0xFBD, 'X'),\n    (0xFBE, 'V'),\n    (0xFCD, 'X'),\n    (0xFCE, 'V'),\n    (0xFDB, 'X'),\n    (0x1000, 'V'),\n    (0x10A0, 'X'),\n    (0x10C7, 'M', '\u2d27'),\n    (0x10C8, 'X'),\n    (0x10CD, 'M', '\u2d2d'),\n    (0x10CE, 'X'),\n    (0x10D0, 'V'),\n    (0x10FC, 'M', '\u10dc'),\n    (0x10FD, 'V'),\n    (0x115F, 'X'),\n    (0x1161, 'V'),\n    (0x1249, 'X'),\n    (0x124A, 'V'),\n    (0x124E, 'X'),\n    (0x1250, 'V'),\n    (0x1257, 'X'),\n    (0x1258, 'V'),\n    (0x1259, 'X'),\n    (0x125A, 'V'),\n    (0x125E, 'X'),\n    (0x1260, 'V'),\n    (0x1289, 'X'),\n    (0x128A, 'V'),\n    (0x128E, 'X'),\n    (0x1290, 'V'),\n    (0x12B1, 'X'),\n    (0x12B2, 'V'),\n    (0x12B6, 'X'),\n    (0x12B8, 'V'),\n    (0x12BF, 'X'),\n    (0x12C0, 'V'),\n    (0x12C1, 'X'),\n    (0x12C2, 'V'),\n    (0x12C6, 'X'),\n    (0x12C8, 'V'),\n    (0x12D7, 'X'),\n    (0x12D8, 'V'),\n    (0x1311, 'X'),\n    (0x1312, 'V'),\n    ]\n\ndef _seg_14() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1316, 'X'),\n    (0x1318, 'V'),\n    (0x135B, 'X'),\n    (0x135D, 'V'),\n    (0x137D, 'X'),\n    (0x1380, 'V'),\n    (0x139A, 'X'),\n    (0x13A0, 'V'),\n    (0x13F6, 'X'),\n    (0x13F8, 'M', '\u13f0'),\n    (0x13F9, 'M', '\u13f1'),\n    (0x13FA, 'M', '\u13f2'),\n    (0x13FB, 'M', '\u13f3'),\n    (0x13FC, 'M', '\u13f4'),\n    (0x13FD, 'M', '\u13f5'),\n    (0x13FE, 'X'),\n    (0x1400, 'V'),\n    (0x1680, 'X'),\n    (0x1681, 'V'),\n    (0x169D, 'X'),\n    (0x16A0, 'V'),\n    (0x16F9, 'X'),\n    (0x1700, 'V'),\n    (0x1716, 'X'),\n    (0x171F, 'V'),\n    (0x1737, 'X'),\n    (0x1740, 'V'),\n    (0x1754, 'X'),\n    (0x1760, 'V'),\n    (0x176D, 'X'),\n    (0x176E, 'V'),\n    (0x1771, 'X'),\n    (0x1772, 'V'),\n    (0x1774, 'X'),\n    (0x1780, 'V'),\n    (0x17B4, 'X'),\n    (0x17B6, 'V'),\n    (0x17DE, 'X'),\n    (0x17E0, 'V'),\n    (0x17EA, 'X'),\n    (0x17F0, 'V'),\n    (0x17FA, 'X'),\n    (0x1800, 'V'),\n    (0x1806, 'X'),\n    (0x1807, 'V'),\n    (0x180B, 'I'),\n    (0x180E, 'X'),\n    (0x180F, 'I'),\n    (0x1810, 'V'),\n    (0x181A, 'X'),\n    (0x1820, 'V'),\n    (0x1879, 'X'),\n    (0x1880, 'V'),\n    (0x18AB, 'X'),\n    (0x18B0, 'V'),\n    (0x18F6, 'X'),\n    (0x1900, 'V'),\n    (0x191F, 'X'),\n    (0x1920, 'V'),\n    (0x192C, 'X'),\n    (0x1930, 'V'),\n    (0x193C, 'X'),\n    (0x1940, 'V'),\n    (0x1941, 'X'),\n    (0x1944, 'V'),\n    (0x196E, 'X'),\n    (0x1970, 'V'),\n    (0x1975, 'X'),\n    (0x1980, 'V'),\n    (0x19AC, 'X'),\n    (0x19B0, 'V'),\n    (0x19CA, 'X'),\n    (0x19D0, 'V'),\n    (0x19DB, 'X'),\n    (0x19DE, 'V'),\n    (0x1A1C, 'X'),\n    (0x1A1E, 'V'),\n    (0x1A5F, 'X'),\n    (0x1A60, 'V'),\n    (0x1A7D, 'X'),\n    (0x1A7F, 'V'),\n    (0x1A8A, 'X'),\n    (0x1A90, 'V'),\n    (0x1A9A, 'X'),\n    (0x1AA0, 'V'),\n    (0x1AAE, 'X'),\n    (0x1AB0, 'V'),\n    (0x1ACF, 'X'),\n    (0x1B00, 'V'),\n    (0x1B4D, 'X'),\n    (0x1B50, 'V'),\n    (0x1B7F, 'X'),\n    (0x1B80, 'V'),\n    (0x1BF4, 'X'),\n    (0x1BFC, 'V'),\n    (0x1C38, 'X'),\n    (0x1C3B, 'V'),\n    (0x1C4A, 'X'),\n    (0x1C4D, 'V'),\n    (0x1C80, 'M', '\u0432'),\n    ]\n\ndef _seg_15() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1C81, 'M', '\u0434'),\n    (0x1C82, 'M', '\u043e'),\n    (0x1C83, 'M', '\u0441'),\n    (0x1C84, 'M', '\u0442'),\n    (0x1C86, 'M', '\u044a'),\n    (0x1C87, 'M', '\u0463'),\n    (0x1C88, 'M', '\ua64b'),\n    (0x1C89, 'X'),\n    (0x1C90, 'M', '\u10d0'),\n    (0x1C91, 'M', '\u10d1'),\n    (0x1C92, 'M', '\u10d2'),\n    (0x1C93, 'M', '\u10d3'),\n    (0x1C94, 'M', '\u10d4'),\n    (0x1C95, 'M', '\u10d5'),\n    (0x1C96, 'M', '\u10d6'),\n    (0x1C97, 'M', '\u10d7'),\n    (0x1C98, 'M', '\u10d8'),\n    (0x1C99, 'M', '\u10d9'),\n    (0x1C9A, 'M', '\u10da'),\n    (0x1C9B, 'M', '\u10db'),\n    (0x1C9C, 'M', '\u10dc'),\n    (0x1C9D, 'M', '\u10dd'),\n    (0x1C9E, 'M', '\u10de'),\n    (0x1C9F, 'M', '\u10df'),\n    (0x1CA0, 'M', '\u10e0'),\n    (0x1CA1, 'M', '\u10e1'),\n    (0x1CA2, 'M', '\u10e2'),\n    (0x1CA3, 'M', '\u10e3'),\n    (0x1CA4, 'M', '\u10e4'),\n    (0x1CA5, 'M', '\u10e5'),\n    (0x1CA6, 'M', '\u10e6'),\n    (0x1CA7, 'M', '\u10e7'),\n    (0x1CA8, 'M', '\u10e8'),\n    (0x1CA9, 'M', '\u10e9'),\n    (0x1CAA, 'M', '\u10ea'),\n    (0x1CAB, 'M', '\u10eb'),\n    (0x1CAC, 'M', '\u10ec'),\n    (0x1CAD, 'M', '\u10ed'),\n    (0x1CAE, 'M', '\u10ee'),\n    (0x1CAF, 'M', '\u10ef'),\n    (0x1CB0, 'M', '\u10f0'),\n    (0x1CB1, 'M', '\u10f1'),\n    (0x1CB2, 'M', '\u10f2'),\n    (0x1CB3, 'M', '\u10f3'),\n    (0x1CB4, 'M', '\u10f4'),\n    (0x1CB5, 'M', '\u10f5'),\n    (0x1CB6, 'M', '\u10f6'),\n    (0x1CB7, 'M', '\u10f7'),\n    (0x1CB8, 'M', '\u10f8'),\n    (0x1CB9, 'M', '\u10f9'),\n    (0x1CBA, 'M', '\u10fa'),\n    (0x1CBB, 'X'),\n    (0x1CBD, 'M', '\u10fd'),\n    (0x1CBE, 'M', '\u10fe'),\n    (0x1CBF, 'M', '\u10ff'),\n    (0x1CC0, 'V'),\n    (0x1CC8, 'X'),\n    (0x1CD0, 'V'),\n    (0x1CFB, 'X'),\n    (0x1D00, 'V'),\n    (0x1D2C, 'M', 'a'),\n    (0x1D2D, 'M', '\u00e6'),\n    (0x1D2E, 'M', 'b'),\n    (0x1D2F, 'V'),\n    (0x1D30, 'M', 'd'),\n    (0x1D31, 'M', 'e'),\n    (0x1D32, 'M', '\u01dd'),\n    (0x1D33, 'M', 'g'),\n    (0x1D34, 'M', 'h'),\n    (0x1D35, 'M', 'i'),\n    (0x1D36, 'M', 'j'),\n    (0x1D37, 'M', 'k'),\n    (0x1D38, 'M', 'l'),\n    (0x1D39, 'M', 'm'),\n    (0x1D3A, 'M', 'n'),\n    (0x1D3B, 'V'),\n    (0x1D3C, 'M', 'o'),\n    (0x1D3D, 'M', '\u0223'),\n    (0x1D3E, 'M', 'p'),\n    (0x1D3F, 'M', 'r'),\n    (0x1D40, 'M', 't'),\n    (0x1D41, 'M', 'u'),\n    (0x1D42, 'M', 'w'),\n    (0x1D43, 'M', 'a'),\n    (0x1D44, 'M', '\u0250'),\n    (0x1D45, 'M', '\u0251'),\n    (0x1D46, 'M', '\u1d02'),\n    (0x1D47, 'M', 'b'),\n    (0x1D48, 'M', 'd'),\n    (0x1D49, 'M', 'e'),\n    (0x1D4A, 'M', '\u0259'),\n    (0x1D4B, 'M', '\u025b'),\n    (0x1D4C, 'M', '\u025c'),\n    (0x1D4D, 'M', 'g'),\n    (0x1D4E, 'V'),\n    (0x1D4F, 'M', 'k'),\n    (0x1D50, 'M', 'm'),\n    (0x1D51, 'M', '\u014b'),\n    (0x1D52, 'M', 'o'),\n    (0x1D53, 'M', '\u0254'),\n    ]\n\ndef _seg_16() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D54, 'M', '\u1d16'),\n    (0x1D55, 'M', '\u1d17'),\n    (0x1D56, 'M', 'p'),\n    (0x1D57, 'M', 't'),\n    (0x1D58, 'M', 'u'),\n    (0x1D59, 'M', '\u1d1d'),\n    (0x1D5A, 'M', '\u026f'),\n    (0x1D5B, 'M', 'v'),\n    (0x1D5C, 'M', '\u1d25'),\n    (0x1D5D, 'M', '\u03b2'),\n    (0x1D5E, 'M', '\u03b3'),\n    (0x1D5F, 'M', '\u03b4'),\n    (0x1D60, 'M', '\u03c6'),\n    (0x1D61, 'M', '\u03c7'),\n    (0x1D62, 'M', 'i'),\n    (0x1D63, 'M', 'r'),\n    (0x1D64, 'M', 'u'),\n    (0x1D65, 'M', 'v'),\n    (0x1D66, 'M', '\u03b2'),\n    (0x1D67, 'M', '\u03b3'),\n    (0x1D68, 'M', '\u03c1'),\n    (0x1D69, 'M', '\u03c6'),\n    (0x1D6A, 'M', '\u03c7'),\n    (0x1D6B, 'V'),\n    (0x1D78, 'M', '\u043d'),\n    (0x1D79, 'V'),\n    (0x1D9B, 'M', '\u0252'),\n    (0x1D9C, 'M', 'c'),\n    (0x1D9D, 'M', '\u0255'),\n    (0x1D9E, 'M', '\u00f0'),\n    (0x1D9F, 'M', '\u025c'),\n    (0x1DA0, 'M', 'f'),\n    (0x1DA1, 'M', '\u025f'),\n    (0x1DA2, 'M', '\u0261'),\n    (0x1DA3, 'M', '\u0265'),\n    (0x1DA4, 'M', '\u0268'),\n    (0x1DA5, 'M', '\u0269'),\n    (0x1DA6, 'M', '\u026a'),\n    (0x1DA7, 'M', '\u1d7b'),\n    (0x1DA8, 'M', '\u029d'),\n    (0x1DA9, 'M', '\u026d'),\n    (0x1DAA, 'M', '\u1d85'),\n    (0x1DAB, 'M', '\u029f'),\n    (0x1DAC, 'M', '\u0271'),\n    (0x1DAD, 'M', '\u0270'),\n    (0x1DAE, 'M', '\u0272'),\n    (0x1DAF, 'M', '\u0273'),\n    (0x1DB0, 'M', '\u0274'),\n    (0x1DB1, 'M', '\u0275'),\n    (0x1DB2, 'M', '\u0278'),\n    (0x1DB3, 'M', '\u0282'),\n    (0x1DB4, 'M', '\u0283'),\n    (0x1DB5, 'M', '\u01ab'),\n    (0x1DB6, 'M', '\u0289'),\n    (0x1DB7, 'M', '\u028a'),\n    (0x1DB8, 'M', '\u1d1c'),\n    (0x1DB9, 'M', '\u028b'),\n    (0x1DBA, 'M', '\u028c'),\n    (0x1DBB, 'M', 'z'),\n    (0x1DBC, 'M', '\u0290'),\n    (0x1DBD, 'M', '\u0291'),\n    (0x1DBE, 'M', '\u0292'),\n    (0x1DBF, 'M', '\u03b8'),\n    (0x1DC0, 'V'),\n    (0x1E00, 'M', '\u1e01'),\n    (0x1E01, 'V'),\n    (0x1E02, 'M', '\u1e03'),\n    (0x1E03, 'V'),\n    (0x1E04, 'M', '\u1e05'),\n    (0x1E05, 'V'),\n    (0x1E06, 'M', '\u1e07'),\n    (0x1E07, 'V'),\n    (0x1E08, 'M', '\u1e09'),\n    (0x1E09, 'V'),\n    (0x1E0A, 'M', '\u1e0b'),\n    (0x1E0B, 'V'),\n    (0x1E0C, 'M', '\u1e0d'),\n    (0x1E0D, 'V'),\n    (0x1E0E, 'M', '\u1e0f'),\n    (0x1E0F, 'V'),\n    (0x1E10, 'M', '\u1e11'),\n    (0x1E11, 'V'),\n    (0x1E12, 'M', '\u1e13'),\n    (0x1E13, 'V'),\n    (0x1E14, 'M', '\u1e15'),\n    (0x1E15, 'V'),\n    (0x1E16, 'M', '\u1e17'),\n    (0x1E17, 'V'),\n    (0x1E18, 'M', '\u1e19'),\n    (0x1E19, 'V'),\n    (0x1E1A, 'M', '\u1e1b'),\n    (0x1E1B, 'V'),\n    (0x1E1C, 'M', '\u1e1d'),\n    (0x1E1D, 'V'),\n    (0x1E1E, 'M', '\u1e1f'),\n    (0x1E1F, 'V'),\n    (0x1E20, 'M', '\u1e21'),\n    (0x1E21, 'V'),\n    (0x1E22, 'M', '\u1e23'),\n    (0x1E23, 'V'),\n    ]\n\ndef _seg_17() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1E24, 'M', '\u1e25'),\n    (0x1E25, 'V'),\n    (0x1E26, 'M', '\u1e27'),\n    (0x1E27, 'V'),\n    (0x1E28, 'M', '\u1e29'),\n    (0x1E29, 'V'),\n    (0x1E2A, 'M', '\u1e2b'),\n    (0x1E2B, 'V'),\n    (0x1E2C, 'M', '\u1e2d'),\n    (0x1E2D, 'V'),\n    (0x1E2E, 'M', '\u1e2f'),\n    (0x1E2F, 'V'),\n    (0x1E30, 'M', '\u1e31'),\n    (0x1E31, 'V'),\n    (0x1E32, 'M', '\u1e33'),\n    (0x1E33, 'V'),\n    (0x1E34, 'M', '\u1e35'),\n    (0x1E35, 'V'),\n    (0x1E36, 'M', '\u1e37'),\n    (0x1E37, 'V'),\n    (0x1E38, 'M', '\u1e39'),\n    (0x1E39, 'V'),\n    (0x1E3A, 'M', '\u1e3b'),\n    (0x1E3B, 'V'),\n    (0x1E3C, 'M', '\u1e3d'),\n    (0x1E3D, 'V'),\n    (0x1E3E, 'M', '\u1e3f'),\n    (0x1E3F, 'V'),\n    (0x1E40, 'M', '\u1e41'),\n    (0x1E41, 'V'),\n    (0x1E42, 'M', '\u1e43'),\n    (0x1E43, 'V'),\n    (0x1E44, 'M', '\u1e45'),\n    (0x1E45, 'V'),\n    (0x1E46, 'M', '\u1e47'),\n    (0x1E47, 'V'),\n    (0x1E48, 'M', '\u1e49'),\n    (0x1E49, 'V'),\n    (0x1E4A, 'M', '\u1e4b'),\n    (0x1E4B, 'V'),\n    (0x1E4C, 'M', '\u1e4d'),\n    (0x1E4D, 'V'),\n    (0x1E4E, 'M', '\u1e4f'),\n    (0x1E4F, 'V'),\n    (0x1E50, 'M', '\u1e51'),\n    (0x1E51, 'V'),\n    (0x1E52, 'M', '\u1e53'),\n    (0x1E53, 'V'),\n    (0x1E54, 'M', '\u1e55'),\n    (0x1E55, 'V'),\n    (0x1E56, 'M', '\u1e57'),\n    (0x1E57, 'V'),\n    (0x1E58, 'M', '\u1e59'),\n    (0x1E59, 'V'),\n    (0x1E5A, 'M', '\u1e5b'),\n    (0x1E5B, 'V'),\n    (0x1E5C, 'M', '\u1e5d'),\n    (0x1E5D, 'V'),\n    (0x1E5E, 'M', '\u1e5f'),\n    (0x1E5F, 'V'),\n    (0x1E60, 'M', '\u1e61'),\n    (0x1E61, 'V'),\n    (0x1E62, 'M', '\u1e63'),\n    (0x1E63, 'V'),\n    (0x1E64, 'M', '\u1e65'),\n    (0x1E65, 'V'),\n    (0x1E66, 'M', '\u1e67'),\n    (0x1E67, 'V'),\n    (0x1E68, 'M', '\u1e69'),\n    (0x1E69, 'V'),\n    (0x1E6A, 'M', '\u1e6b'),\n    (0x1E6B, 'V'),\n    (0x1E6C, 'M', '\u1e6d'),\n    (0x1E6D, 'V'),\n    (0x1E6E, 'M', '\u1e6f'),\n    (0x1E6F, 'V'),\n    (0x1E70, 'M', '\u1e71'),\n    (0x1E71, 'V'),\n    (0x1E72, 'M', '\u1e73'),\n    (0x1E73, 'V'),\n    (0x1E74, 'M', '\u1e75'),\n    (0x1E75, 'V'),\n    (0x1E76, 'M', '\u1e77'),\n    (0x1E77, 'V'),\n    (0x1E78, 'M', '\u1e79'),\n    (0x1E79, 'V'),\n    (0x1E7A, 'M', '\u1e7b'),\n    (0x1E7B, 'V'),\n    (0x1E7C, 'M', '\u1e7d'),\n    (0x1E7D, 'V'),\n    (0x1E7E, 'M', '\u1e7f'),\n    (0x1E7F, 'V'),\n    (0x1E80, 'M', '\u1e81'),\n    (0x1E81, 'V'),\n    (0x1E82, 'M', '\u1e83'),\n    (0x1E83, 'V'),\n    (0x1E84, 'M', '\u1e85'),\n    (0x1E85, 'V'),\n    (0x1E86, 'M', '\u1e87'),\n    (0x1E87, 'V'),\n    ]\n\ndef _seg_18() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1E88, 'M', '\u1e89'),\n    (0x1E89, 'V'),\n    (0x1E8A, 'M', '\u1e8b'),\n    (0x1E8B, 'V'),\n    (0x1E8C, 'M', '\u1e8d'),\n    (0x1E8D, 'V'),\n    (0x1E8E, 'M', '\u1e8f'),\n    (0x1E8F, 'V'),\n    (0x1E90, 'M', '\u1e91'),\n    (0x1E91, 'V'),\n    (0x1E92, 'M', '\u1e93'),\n    (0x1E93, 'V'),\n    (0x1E94, 'M', '\u1e95'),\n    (0x1E95, 'V'),\n    (0x1E9A, 'M', 'a\u02be'),\n    (0x1E9B, 'M', '\u1e61'),\n    (0x1E9C, 'V'),\n    (0x1E9E, 'M', '\u00df'),\n    (0x1E9F, 'V'),\n    (0x1EA0, 'M', '\u1ea1'),\n    (0x1EA1, 'V'),\n    (0x1EA2, 'M', '\u1ea3'),\n    (0x1EA3, 'V'),\n    (0x1EA4, 'M', '\u1ea5'),\n    (0x1EA5, 'V'),\n    (0x1EA6, 'M', '\u1ea7'),\n    (0x1EA7, 'V'),\n    (0x1EA8, 'M', '\u1ea9'),\n    (0x1EA9, 'V'),\n    (0x1EAA, 'M', '\u1eab'),\n    (0x1EAB, 'V'),\n    (0x1EAC, 'M', '\u1ead'),\n    (0x1EAD, 'V'),\n    (0x1EAE, 'M', '\u1eaf'),\n    (0x1EAF, 'V'),\n    (0x1EB0, 'M', '\u1eb1'),\n    (0x1EB1, 'V'),\n    (0x1EB2, 'M', '\u1eb3'),\n    (0x1EB3, 'V'),\n    (0x1EB4, 'M', '\u1eb5'),\n    (0x1EB5, 'V'),\n    (0x1EB6, 'M', '\u1eb7'),\n    (0x1EB7, 'V'),\n    (0x1EB8, 'M', '\u1eb9'),\n    (0x1EB9, 'V'),\n    (0x1EBA, 'M', '\u1ebb'),\n    (0x1EBB, 'V'),\n    (0x1EBC, 'M', '\u1ebd'),\n    (0x1EBD, 'V'),\n    (0x1EBE, 'M', '\u1ebf'),\n    (0x1EBF, 'V'),\n    (0x1EC0, 'M', '\u1ec1'),\n    (0x1EC1, 'V'),\n    (0x1EC2, 'M', '\u1ec3'),\n    (0x1EC3, 'V'),\n    (0x1EC4, 'M', '\u1ec5'),\n    (0x1EC5, 'V'),\n    (0x1EC6, 'M', '\u1ec7'),\n    (0x1EC7, 'V'),\n    (0x1EC8, 'M', '\u1ec9'),\n    (0x1EC9, 'V'),\n    (0x1ECA, 'M', '\u1ecb'),\n    (0x1ECB, 'V'),\n    (0x1ECC, 'M', '\u1ecd'),\n    (0x1ECD, 'V'),\n    (0x1ECE, 'M', '\u1ecf'),\n    (0x1ECF, 'V'),\n    (0x1ED0, 'M', '\u1ed1'),\n    (0x1ED1, 'V'),\n    (0x1ED2, 'M', '\u1ed3'),\n    (0x1ED3, 'V'),\n    (0x1ED4, 'M', '\u1ed5'),\n    (0x1ED5, 'V'),\n    (0x1ED6, 'M', '\u1ed7'),\n    (0x1ED7, 'V'),\n    (0x1ED8, 'M', '\u1ed9'),\n    (0x1ED9, 'V'),\n    (0x1EDA, 'M', '\u1edb'),\n    (0x1EDB, 'V'),\n    (0x1EDC, 'M', '\u1edd'),\n    (0x1EDD, 'V'),\n    (0x1EDE, 'M', '\u1edf'),\n    (0x1EDF, 'V'),\n    (0x1EE0, 'M', '\u1ee1'),\n    (0x1EE1, 'V'),\n    (0x1EE2, 'M', '\u1ee3'),\n    (0x1EE3, 'V'),\n    (0x1EE4, 'M', '\u1ee5'),\n    (0x1EE5, 'V'),\n    (0x1EE6, 'M', '\u1ee7'),\n    (0x1EE7, 'V'),\n    (0x1EE8, 'M', '\u1ee9'),\n    (0x1EE9, 'V'),\n    (0x1EEA, 'M', '\u1eeb'),\n    (0x1EEB, 'V'),\n    (0x1EEC, 'M', '\u1eed'),\n    (0x1EED, 'V'),\n    (0x1EEE, 'M', '\u1eef'),\n    (0x1EEF, 'V'),\n    (0x1EF0, 'M', '\u1ef1'),\n    ]\n\ndef _seg_19() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1EF1, 'V'),\n    (0x1EF2, 'M', '\u1ef3'),\n    (0x1EF3, 'V'),\n    (0x1EF4, 'M', '\u1ef5'),\n    (0x1EF5, 'V'),\n    (0x1EF6, 'M', '\u1ef7'),\n    (0x1EF7, 'V'),\n    (0x1EF8, 'M', '\u1ef9'),\n    (0x1EF9, 'V'),\n    (0x1EFA, 'M', '\u1efb'),\n    (0x1EFB, 'V'),\n    (0x1EFC, 'M', '\u1efd'),\n    (0x1EFD, 'V'),\n    (0x1EFE, 'M', '\u1eff'),\n    (0x1EFF, 'V'),\n    (0x1F08, 'M', '\u1f00'),\n    (0x1F09, 'M', '\u1f01'),\n    (0x1F0A, 'M', '\u1f02'),\n    (0x1F0B, 'M', '\u1f03'),\n    (0x1F0C, 'M', '\u1f04'),\n    (0x1F0D, 'M', '\u1f05'),\n    (0x1F0E, 'M', '\u1f06'),\n    (0x1F0F, 'M', '\u1f07'),\n    (0x1F10, 'V'),\n    (0x1F16, 'X'),\n    (0x1F18, 'M', '\u1f10'),\n    (0x1F19, 'M', '\u1f11'),\n    (0x1F1A, 'M', '\u1f12'),\n    (0x1F1B, 'M', '\u1f13'),\n    (0x1F1C, 'M', '\u1f14'),\n    (0x1F1D, 'M', '\u1f15'),\n    (0x1F1E, 'X'),\n    (0x1F20, 'V'),\n    (0x1F28, 'M', '\u1f20'),\n    (0x1F29, 'M', '\u1f21'),\n    (0x1F2A, 'M', '\u1f22'),\n    (0x1F2B, 'M', '\u1f23'),\n    (0x1F2C, 'M', '\u1f24'),\n    (0x1F2D, 'M', '\u1f25'),\n    (0x1F2E, 'M', '\u1f26'),\n    (0x1F2F, 'M', '\u1f27'),\n    (0x1F30, 'V'),\n    (0x1F38, 'M', '\u1f30'),\n    (0x1F39, 'M', '\u1f31'),\n    (0x1F3A, 'M', '\u1f32'),\n    (0x1F3B, 'M', '\u1f33'),\n    (0x1F3C, 'M', '\u1f34'),\n    (0x1F3D, 'M', '\u1f35'),\n    (0x1F3E, 'M', '\u1f36'),\n    (0x1F3F, 'M', '\u1f37'),\n    (0x1F40, 'V'),\n    (0x1F46, 'X'),\n    (0x1F48, 'M', '\u1f40'),\n    (0x1F49, 'M', '\u1f41'),\n    (0x1F4A, 'M', '\u1f42'),\n    (0x1F4B, 'M', '\u1f43'),\n    (0x1F4C, 'M', '\u1f44'),\n    (0x1F4D, 'M', '\u1f45'),\n    (0x1F4E, 'X'),\n    (0x1F50, 'V'),\n    (0x1F58, 'X'),\n    (0x1F59, 'M', '\u1f51'),\n    (0x1F5A, 'X'),\n    (0x1F5B, 'M', '\u1f53'),\n    (0x1F5C, 'X'),\n    (0x1F5D, 'M', '\u1f55'),\n    (0x1F5E, 'X'),\n    (0x1F5F, 'M', '\u1f57'),\n    (0x1F60, 'V'),\n    (0x1F68, 'M', '\u1f60'),\n    (0x1F69, 'M', '\u1f61'),\n    (0x1F6A, 'M', '\u1f62'),\n    (0x1F6B, 'M', '\u1f63'),\n    (0x1F6C, 'M', '\u1f64'),\n    (0x1F6D, 'M', '\u1f65'),\n    (0x1F6E, 'M', '\u1f66'),\n    (0x1F6F, 'M', '\u1f67'),\n    (0x1F70, 'V'),\n    (0x1F71, 'M', '\u03ac'),\n    (0x1F72, 'V'),\n    (0x1F73, 'M', '\u03ad'),\n    (0x1F74, 'V'),\n    (0x1F75, 'M', '\u03ae'),\n    (0x1F76, 'V'),\n    (0x1F77, 'M', '\u03af'),\n    (0x1F78, 'V'),\n    (0x1F79, 'M', '\u03cc'),\n    (0x1F7A, 'V'),\n    (0x1F7B, 'M', '\u03cd'),\n    (0x1F7C, 'V'),\n    (0x1F7D, 'M', '\u03ce'),\n    (0x1F7E, 'X'),\n    (0x1F80, 'M', '\u1f00\u03b9'),\n    (0x1F81, 'M', '\u1f01\u03b9'),\n    (0x1F82, 'M', '\u1f02\u03b9'),\n    (0x1F83, 'M', '\u1f03\u03b9'),\n    (0x1F84, 'M', '\u1f04\u03b9'),\n    (0x1F85, 'M', '\u1f05\u03b9'),\n    (0x1F86, 'M', '\u1f06\u03b9'),\n    (0x1F87, 'M', '\u1f07\u03b9'),\n    ]\n\ndef _seg_20() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1F88, 'M', '\u1f00\u03b9'),\n    (0x1F89, 'M', '\u1f01\u03b9'),\n    (0x1F8A, 'M', '\u1f02\u03b9'),\n    (0x1F8B, 'M', '\u1f03\u03b9'),\n    (0x1F8C, 'M', '\u1f04\u03b9'),\n    (0x1F8D, 'M', '\u1f05\u03b9'),\n    (0x1F8E, 'M', '\u1f06\u03b9'),\n    (0x1F8F, 'M', '\u1f07\u03b9'),\n    (0x1F90, 'M', '\u1f20\u03b9'),\n    (0x1F91, 'M', '\u1f21\u03b9'),\n    (0x1F92, 'M', '\u1f22\u03b9'),\n    (0x1F93, 'M', '\u1f23\u03b9'),\n    (0x1F94, 'M', '\u1f24\u03b9'),\n    (0x1F95, 'M', '\u1f25\u03b9'),\n    (0x1F96, 'M', '\u1f26\u03b9'),\n    (0x1F97, 'M', '\u1f27\u03b9'),\n    (0x1F98, 'M', '\u1f20\u03b9'),\n    (0x1F99, 'M', '\u1f21\u03b9'),\n    (0x1F9A, 'M', '\u1f22\u03b9'),\n    (0x1F9B, 'M', '\u1f23\u03b9'),\n    (0x1F9C, 'M', '\u1f24\u03b9'),\n    (0x1F9D, 'M', '\u1f25\u03b9'),\n    (0x1F9E, 'M', '\u1f26\u03b9'),\n    (0x1F9F, 'M', '\u1f27\u03b9'),\n    (0x1FA0, 'M', '\u1f60\u03b9'),\n    (0x1FA1, 'M', '\u1f61\u03b9'),\n    (0x1FA2, 'M', '\u1f62\u03b9'),\n    (0x1FA3, 'M', '\u1f63\u03b9'),\n    (0x1FA4, 'M', '\u1f64\u03b9'),\n    (0x1FA5, 'M', '\u1f65\u03b9'),\n    (0x1FA6, 'M', '\u1f66\u03b9'),\n    (0x1FA7, 'M', '\u1f67\u03b9'),\n    (0x1FA8, 'M', '\u1f60\u03b9'),\n    (0x1FA9, 'M', '\u1f61\u03b9'),\n    (0x1FAA, 'M', '\u1f62\u03b9'),\n    (0x1FAB, 'M', '\u1f63\u03b9'),\n    (0x1FAC, 'M', '\u1f64\u03b9'),\n    (0x1FAD, 'M', '\u1f65\u03b9'),\n    (0x1FAE, 'M', '\u1f66\u03b9'),\n    (0x1FAF, 'M', '\u1f67\u03b9'),\n    (0x1FB0, 'V'),\n    (0x1FB2, 'M', '\u1f70\u03b9'),\n    (0x1FB3, 'M', '\u03b1\u03b9'),\n    (0x1FB4, 'M', '\u03ac\u03b9'),\n    (0x1FB5, 'X'),\n    (0x1FB6, 'V'),\n    (0x1FB7, 'M', '\u1fb6\u03b9'),\n    (0x1FB8, 'M', '\u1fb0'),\n    (0x1FB9, 'M', '\u1fb1'),\n    (0x1FBA, 'M', '\u1f70'),\n    (0x1FBB, 'M', '\u03ac'),\n    (0x1FBC, 'M', '\u03b1\u03b9'),\n    (0x1FBD, '3', ' \u0313'),\n    (0x1FBE, 'M', '\u03b9'),\n    (0x1FBF, '3', ' \u0313'),\n    (0x1FC0, '3', ' \u0342'),\n    (0x1FC1, '3', ' \u0308\u0342'),\n    (0x1FC2, 'M', '\u1f74\u03b9'),\n    (0x1FC3, 'M', '\u03b7\u03b9'),\n    (0x1FC4, 'M', '\u03ae\u03b9'),\n    (0x1FC5, 'X'),\n    (0x1FC6, 'V'),\n    (0x1FC7, 'M', '\u1fc6\u03b9'),\n    (0x1FC8, 'M', '\u1f72'),\n    (0x1FC9, 'M', '\u03ad'),\n    (0x1FCA, 'M', '\u1f74'),\n    (0x1FCB, 'M', '\u03ae'),\n    (0x1FCC, 'M', '\u03b7\u03b9'),\n    (0x1FCD, '3', ' \u0313\u0300'),\n    (0x1FCE, '3', ' \u0313\u0301'),\n    (0x1FCF, '3', ' \u0313\u0342'),\n    (0x1FD0, 'V'),\n    (0x1FD3, 'M', '\u0390'),\n    (0x1FD4, 'X'),\n    (0x1FD6, 'V'),\n    (0x1FD8, 'M', '\u1fd0'),\n    (0x1FD9, 'M', '\u1fd1'),\n    (0x1FDA, 'M', '\u1f76'),\n    (0x1FDB, 'M', '\u03af'),\n    (0x1FDC, 'X'),\n    (0x1FDD, '3', ' \u0314\u0300'),\n    (0x1FDE, '3', ' \u0314\u0301'),\n    (0x1FDF, '3', ' \u0314\u0342'),\n    (0x1FE0, 'V'),\n    (0x1FE3, 'M', '\u03b0'),\n    (0x1FE4, 'V'),\n    (0x1FE8, 'M', '\u1fe0'),\n    (0x1FE9, 'M', '\u1fe1'),\n    (0x1FEA, 'M', '\u1f7a'),\n    (0x1FEB, 'M', '\u03cd'),\n    (0x1FEC, 'M', '\u1fe5'),\n    (0x1FED, '3', ' \u0308\u0300'),\n    (0x1FEE, '3', ' \u0308\u0301'),\n    (0x1FEF, '3', '`'),\n    (0x1FF0, 'X'),\n    (0x1FF2, 'M', '\u1f7c\u03b9'),\n    (0x1FF3, 'M', '\u03c9\u03b9'),\n    (0x1FF4, 'M', '\u03ce\u03b9'),\n    (0x1FF5, 'X'),\n    (0x1FF6, 'V'),\n    ]\n\ndef _seg_21() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1FF7, 'M', '\u1ff6\u03b9'),\n    (0x1FF8, 'M', '\u1f78'),\n    (0x1FF9, 'M', '\u03cc'),\n    (0x1FFA, 'M', '\u1f7c'),\n    (0x1FFB, 'M', '\u03ce'),\n    (0x1FFC, 'M', '\u03c9\u03b9'),\n    (0x1FFD, '3', ' \u0301'),\n    (0x1FFE, '3', ' \u0314'),\n    (0x1FFF, 'X'),\n    (0x2000, '3', ' '),\n    (0x200B, 'I'),\n    (0x200C, 'D', ''),\n    (0x200E, 'X'),\n    (0x2010, 'V'),\n    (0x2011, 'M', '\u2010'),\n    (0x2012, 'V'),\n    (0x2017, '3', ' \u0333'),\n    (0x2018, 'V'),\n    (0x2024, 'X'),\n    (0x2027, 'V'),\n    (0x2028, 'X'),\n    (0x202F, '3', ' '),\n    (0x2030, 'V'),\n    (0x2033, 'M', '\u2032\u2032'),\n    (0x2034, 'M', '\u2032\u2032\u2032'),\n    (0x2035, 'V'),\n    (0x2036, 'M', '\u2035\u2035'),\n    (0x2037, 'M', '\u2035\u2035\u2035'),\n    (0x2038, 'V'),\n    (0x203C, '3', '!!'),\n    (0x203D, 'V'),\n    (0x203E, '3', ' \u0305'),\n    (0x203F, 'V'),\n    (0x2047, '3', '??'),\n    (0x2048, '3', '?!'),\n    (0x2049, '3', '!?'),\n    (0x204A, 'V'),\n    (0x2057, 'M', '\u2032\u2032\u2032\u2032'),\n    (0x2058, 'V'),\n    (0x205F, '3', ' '),\n    (0x2060, 'I'),\n    (0x2061, 'X'),\n    (0x2064, 'I'),\n    (0x2065, 'X'),\n    (0x2070, 'M', '0'),\n    (0x2071, 'M', 'i'),\n    (0x2072, 'X'),\n    (0x2074, 'M', '4'),\n    (0x2075, 'M', '5'),\n    (0x2076, 'M', '6'),\n    (0x2077, 'M', '7'),\n    (0x2078, 'M', '8'),\n    (0x2079, 'M', '9'),\n    (0x207A, '3', '+'),\n    (0x207B, 'M', '\u2212'),\n    (0x207C, '3', '='),\n    (0x207D, '3', '('),\n    (0x207E, '3', ')'),\n    (0x207F, 'M', 'n'),\n    (0x2080, 'M', '0'),\n    (0x2081, 'M', '1'),\n    (0x2082, 'M', '2'),\n    (0x2083, 'M', '3'),\n    (0x2084, 'M', '4'),\n    (0x2085, 'M', '5'),\n    (0x2086, 'M', '6'),\n    (0x2087, 'M', '7'),\n    (0x2088, 'M', '8'),\n    (0x2089, 'M', '9'),\n    (0x208A, '3', '+'),\n    (0x208B, 'M', '\u2212'),\n    (0x208C, '3', '='),\n    (0x208D, '3', '('),\n    (0x208E, '3', ')'),\n    (0x208F, 'X'),\n    (0x2090, 'M', 'a'),\n    (0x2091, 'M', 'e'),\n    (0x2092, 'M', 'o'),\n    (0x2093, 'M', 'x'),\n    (0x2094, 'M', '\u0259'),\n    (0x2095, 'M', 'h'),\n    (0x2096, 'M', 'k'),\n    (0x2097, 'M', 'l'),\n    (0x2098, 'M', 'm'),\n    (0x2099, 'M', 'n'),\n    (0x209A, 'M', 'p'),\n    (0x209B, 'M', 's'),\n    (0x209C, 'M', 't'),\n    (0x209D, 'X'),\n    (0x20A0, 'V'),\n    (0x20A8, 'M', 'rs'),\n    (0x20A9, 'V'),\n    (0x20C1, 'X'),\n    (0x20D0, 'V'),\n    (0x20F1, 'X'),\n    (0x2100, '3', 'a/c'),\n    (0x2101, '3', 'a/s'),\n    (0x2102, 'M', 'c'),\n    (0x2103, 'M', '\u00b0c'),\n    (0x2104, 'V'),\n    ]\n\ndef _seg_22() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2105, '3', 'c/o'),\n    (0x2106, '3', 'c/u'),\n    (0x2107, 'M', '\u025b'),\n    (0x2108, 'V'),\n    (0x2109, 'M', '\u00b0f'),\n    (0x210A, 'M', 'g'),\n    (0x210B, 'M', 'h'),\n    (0x210F, 'M', '\u0127'),\n    (0x2110, 'M', 'i'),\n    (0x2112, 'M', 'l'),\n    (0x2114, 'V'),\n    (0x2115, 'M', 'n'),\n    (0x2116, 'M', 'no'),\n    (0x2117, 'V'),\n    (0x2119, 'M', 'p'),\n    (0x211A, 'M', 'q'),\n    (0x211B, 'M', 'r'),\n    (0x211E, 'V'),\n    (0x2120, 'M', 'sm'),\n    (0x2121, 'M', 'tel'),\n    (0x2122, 'M', 'tm'),\n    (0x2123, 'V'),\n    (0x2124, 'M', 'z'),\n    (0x2125, 'V'),\n    (0x2126, 'M', '\u03c9'),\n    (0x2127, 'V'),\n    (0x2128, 'M', 'z'),\n    (0x2129, 'V'),\n    (0x212A, 'M', 'k'),\n    (0x212B, 'M', '\u00e5'),\n    (0x212C, 'M', 'b'),\n    (0x212D, 'M', 'c'),\n    (0x212E, 'V'),\n    (0x212F, 'M', 'e'),\n    (0x2131, 'M', 'f'),\n    (0x2132, 'X'),\n    (0x2133, 'M', 'm'),\n    (0x2134, 'M', 'o'),\n    (0x2135, 'M', '\u05d0'),\n    (0x2136, 'M', '\u05d1'),\n    (0x2137, 'M', '\u05d2'),\n    (0x2138, 'M', '\u05d3'),\n    (0x2139, 'M', 'i'),\n    (0x213A, 'V'),\n    (0x213B, 'M', 'fax'),\n    (0x213C, 'M', '\u03c0'),\n    (0x213D, 'M', '\u03b3'),\n    (0x213F, 'M', '\u03c0'),\n    (0x2140, 'M', '\u2211'),\n    (0x2141, 'V'),\n    (0x2145, 'M', 'd'),\n    (0x2147, 'M', 'e'),\n    (0x2148, 'M', 'i'),\n    (0x2149, 'M', 'j'),\n    (0x214A, 'V'),\n    (0x2150, 'M', '1\u20447'),\n    (0x2151, 'M', '1\u20449'),\n    (0x2152, 'M', '1\u204410'),\n    (0x2153, 'M', '1\u20443'),\n    (0x2154, 'M', '2\u20443'),\n    (0x2155, 'M', '1\u20445'),\n    (0x2156, 'M', '2\u20445'),\n    (0x2157, 'M', '3\u20445'),\n    (0x2158, 'M', '4\u20445'),\n    (0x2159, 'M', '1\u20446'),\n    (0x215A, 'M', '5\u20446'),\n    (0x215B, 'M', '1\u20448'),\n    (0x215C, 'M', '3\u20448'),\n    (0x215D, 'M', '5\u20448'),\n    (0x215E, 'M', '7\u20448'),\n    (0x215F, 'M', '1\u2044'),\n    (0x2160, 'M', 'i'),\n    (0x2161, 'M', 'ii'),\n    (0x2162, 'M', 'iii'),\n    (0x2163, 'M', 'iv'),\n    (0x2164, 'M', 'v'),\n    (0x2165, 'M', 'vi'),\n    (0x2166, 'M', 'vii'),\n    (0x2167, 'M', 'viii'),\n    (0x2168, 'M', 'ix'),\n    (0x2169, 'M', 'x'),\n    (0x216A, 'M', 'xi'),\n    (0x216B, 'M', 'xii'),\n    (0x216C, 'M', 'l'),\n    (0x216D, 'M', 'c'),\n    (0x216E, 'M', 'd'),\n    (0x216F, 'M', 'm'),\n    (0x2170, 'M', 'i'),\n    (0x2171, 'M', 'ii'),\n    (0x2172, 'M', 'iii'),\n    (0x2173, 'M', 'iv'),\n    (0x2174, 'M', 'v'),\n    (0x2175, 'M', 'vi'),\n    (0x2176, 'M', 'vii'),\n    (0x2177, 'M', 'viii'),\n    (0x2178, 'M', 'ix'),\n    (0x2179, 'M', 'x'),\n    (0x217A, 'M', 'xi'),\n    (0x217B, 'M', 'xii'),\n    (0x217C, 'M', 'l'),\n    ]\n\ndef _seg_23() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x217D, 'M', 'c'),\n    (0x217E, 'M', 'd'),\n    (0x217F, 'M', 'm'),\n    (0x2180, 'V'),\n    (0x2183, 'X'),\n    (0x2184, 'V'),\n    (0x2189, 'M', '0\u20443'),\n    (0x218A, 'V'),\n    (0x218C, 'X'),\n    (0x2190, 'V'),\n    (0x222C, 'M', '\u222b\u222b'),\n    (0x222D, 'M', '\u222b\u222b\u222b'),\n    (0x222E, 'V'),\n    (0x222F, 'M', '\u222e\u222e'),\n    (0x2230, 'M', '\u222e\u222e\u222e'),\n    (0x2231, 'V'),\n    (0x2329, 'M', '\u3008'),\n    (0x232A, 'M', '\u3009'),\n    (0x232B, 'V'),\n    (0x2427, 'X'),\n    (0x2440, 'V'),\n    (0x244B, 'X'),\n    (0x2460, 'M', '1'),\n    (0x2461, 'M', '2'),\n    (0x2462, 'M', '3'),\n    (0x2463, 'M', '4'),\n    (0x2464, 'M', '5'),\n    (0x2465, 'M', '6'),\n    (0x2466, 'M', '7'),\n    (0x2467, 'M', '8'),\n    (0x2468, 'M', '9'),\n    (0x2469, 'M', '10'),\n    (0x246A, 'M', '11'),\n    (0x246B, 'M', '12'),\n    (0x246C, 'M', '13'),\n    (0x246D, 'M', '14'),\n    (0x246E, 'M', '15'),\n    (0x246F, 'M', '16'),\n    (0x2470, 'M', '17'),\n    (0x2471, 'M', '18'),\n    (0x2472, 'M', '19'),\n    (0x2473, 'M', '20'),\n    (0x2474, '3', '(1)'),\n    (0x2475, '3', '(2)'),\n    (0x2476, '3', '(3)'),\n    (0x2477, '3', '(4)'),\n    (0x2478, '3', '(5)'),\n    (0x2479, '3', '(6)'),\n    (0x247A, '3', '(7)'),\n    (0x247B, '3', '(8)'),\n    (0x247C, '3', '(9)'),\n    (0x247D, '3', '(10)'),\n    (0x247E, '3', '(11)'),\n    (0x247F, '3', '(12)'),\n    (0x2480, '3', '(13)'),\n    (0x2481, '3', '(14)'),\n    (0x2482, '3', '(15)'),\n    (0x2483, '3', '(16)'),\n    (0x2484, '3', '(17)'),\n    (0x2485, '3', '(18)'),\n    (0x2486, '3', '(19)'),\n    (0x2487, '3', '(20)'),\n    (0x2488, 'X'),\n    (0x249C, '3', '(a)'),\n    (0x249D, '3', '(b)'),\n    (0x249E, '3', '(c)'),\n    (0x249F, '3', '(d)'),\n    (0x24A0, '3', '(e)'),\n    (0x24A1, '3', '(f)'),\n    (0x24A2, '3', '(g)'),\n    (0x24A3, '3', '(h)'),\n    (0x24A4, '3', '(i)'),\n    (0x24A5, '3', '(j)'),\n    (0x24A6, '3', '(k)'),\n    (0x24A7, '3', '(l)'),\n    (0x24A8, '3', '(m)'),\n    (0x24A9, '3', '(n)'),\n    (0x24AA, '3', '(o)'),\n    (0x24AB, '3', '(p)'),\n    (0x24AC, '3', '(q)'),\n    (0x24AD, '3', '(r)'),\n    (0x24AE, '3', '(s)'),\n    (0x24AF, '3', '(t)'),\n    (0x24B0, '3', '(u)'),\n    (0x24B1, '3', '(v)'),\n    (0x24B2, '3', '(w)'),\n    (0x24B3, '3', '(x)'),\n    (0x24B4, '3', '(y)'),\n    (0x24B5, '3', '(z)'),\n    (0x24B6, 'M', 'a'),\n    (0x24B7, 'M', 'b'),\n    (0x24B8, 'M', 'c'),\n    (0x24B9, 'M', 'd'),\n    (0x24BA, 'M', 'e'),\n    (0x24BB, 'M', 'f'),\n    (0x24BC, 'M', 'g'),\n    (0x24BD, 'M', 'h'),\n    (0x24BE, 'M', 'i'),\n    (0x24BF, 'M', 'j'),\n    (0x24C0, 'M', 'k'),\n    ]\n\ndef _seg_24() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x24C1, 'M', 'l'),\n    (0x24C2, 'M', 'm'),\n    (0x24C3, 'M', 'n'),\n    (0x24C4, 'M', 'o'),\n    (0x24C5, 'M', 'p'),\n    (0x24C6, 'M', 'q'),\n    (0x24C7, 'M', 'r'),\n    (0x24C8, 'M', 's'),\n    (0x24C9, 'M', 't'),\n    (0x24CA, 'M', 'u'),\n    (0x24CB, 'M', 'v'),\n    (0x24CC, 'M', 'w'),\n    (0x24CD, 'M', 'x'),\n    (0x24CE, 'M', 'y'),\n    (0x24CF, 'M', 'z'),\n    (0x24D0, 'M', 'a'),\n    (0x24D1, 'M', 'b'),\n    (0x24D2, 'M', 'c'),\n    (0x24D3, 'M', 'd'),\n    (0x24D4, 'M', 'e'),\n    (0x24D5, 'M', 'f'),\n    (0x24D6, 'M', 'g'),\n    (0x24D7, 'M', 'h'),\n    (0x24D8, 'M', 'i'),\n    (0x24D9, 'M', 'j'),\n    (0x24DA, 'M', 'k'),\n    (0x24DB, 'M', 'l'),\n    (0x24DC, 'M', 'm'),\n    (0x24DD, 'M', 'n'),\n    (0x24DE, 'M', 'o'),\n    (0x24DF, 'M', 'p'),\n    (0x24E0, 'M', 'q'),\n    (0x24E1, 'M', 'r'),\n    (0x24E2, 'M', 's'),\n    (0x24E3, 'M', 't'),\n    (0x24E4, 'M', 'u'),\n    (0x24E5, 'M', 'v'),\n    (0x24E6, 'M', 'w'),\n    (0x24E7, 'M', 'x'),\n    (0x24E8, 'M', 'y'),\n    (0x24E9, 'M', 'z'),\n    (0x24EA, 'M', '0'),\n    (0x24EB, 'V'),\n    (0x2A0C, 'M', '\u222b\u222b\u222b\u222b'),\n    (0x2A0D, 'V'),\n    (0x2A74, '3', '::='),\n    (0x2A75, '3', '=='),\n    (0x2A76, '3', '==='),\n    (0x2A77, 'V'),\n    (0x2ADC, 'M', '\u2add\u0338'),\n    (0x2ADD, 'V'),\n    (0x2B74, 'X'),\n    (0x2B76, 'V'),\n    (0x2B96, 'X'),\n    (0x2B97, 'V'),\n    (0x2C00, 'M', '\u2c30'),\n    (0x2C01, 'M', '\u2c31'),\n    (0x2C02, 'M', '\u2c32'),\n    (0x2C03, 'M', '\u2c33'),\n    (0x2C04, 'M', '\u2c34'),\n    (0x2C05, 'M', '\u2c35'),\n    (0x2C06, 'M', '\u2c36'),\n    (0x2C07, 'M', '\u2c37'),\n    (0x2C08, 'M', '\u2c38'),\n    (0x2C09, 'M', '\u2c39'),\n    (0x2C0A, 'M', '\u2c3a'),\n    (0x2C0B, 'M', '\u2c3b'),\n    (0x2C0C, 'M', '\u2c3c'),\n    (0x2C0D, 'M', '\u2c3d'),\n    (0x2C0E, 'M', '\u2c3e'),\n    (0x2C0F, 'M', '\u2c3f'),\n    (0x2C10, 'M', '\u2c40'),\n    (0x2C11, 'M', '\u2c41'),\n    (0x2C12, 'M', '\u2c42'),\n    (0x2C13, 'M', '\u2c43'),\n    (0x2C14, 'M', '\u2c44'),\n    (0x2C15, 'M', '\u2c45'),\n    (0x2C16, 'M', '\u2c46'),\n    (0x2C17, 'M', '\u2c47'),\n    (0x2C18, 'M', '\u2c48'),\n    (0x2C19, 'M', '\u2c49'),\n    (0x2C1A, 'M', '\u2c4a'),\n    (0x2C1B, 'M', '\u2c4b'),\n    (0x2C1C, 'M', '\u2c4c'),\n    (0x2C1D, 'M', '\u2c4d'),\n    (0x2C1E, 'M', '\u2c4e'),\n    (0x2C1F, 'M', '\u2c4f'),\n    (0x2C20, 'M', '\u2c50'),\n    (0x2C21, 'M', '\u2c51'),\n    (0x2C22, 'M', '\u2c52'),\n    (0x2C23, 'M', '\u2c53'),\n    (0x2C24, 'M', '\u2c54'),\n    (0x2C25, 'M', '\u2c55'),\n    (0x2C26, 'M', '\u2c56'),\n    (0x2C27, 'M', '\u2c57'),\n    (0x2C28, 'M', '\u2c58'),\n    (0x2C29, 'M', '\u2c59'),\n    (0x2C2A, 'M', '\u2c5a'),\n    (0x2C2B, 'M', '\u2c5b'),\n    (0x2C2C, 'M', '\u2c5c'),\n    ]\n\ndef _seg_25() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2C2D, 'M', '\u2c5d'),\n    (0x2C2E, 'M', '\u2c5e'),\n    (0x2C2F, 'M', '\u2c5f'),\n    (0x2C30, 'V'),\n    (0x2C60, 'M', '\u2c61'),\n    (0x2C61, 'V'),\n    (0x2C62, 'M', '\u026b'),\n    (0x2C63, 'M', '\u1d7d'),\n    (0x2C64, 'M', '\u027d'),\n    (0x2C65, 'V'),\n    (0x2C67, 'M', '\u2c68'),\n    (0x2C68, 'V'),\n    (0x2C69, 'M', '\u2c6a'),\n    (0x2C6A, 'V'),\n    (0x2C6B, 'M', '\u2c6c'),\n    (0x2C6C, 'V'),\n    (0x2C6D, 'M', '\u0251'),\n    (0x2C6E, 'M', '\u0271'),\n    (0x2C6F, 'M', '\u0250'),\n    (0x2C70, 'M', '\u0252'),\n    (0x2C71, 'V'),\n    (0x2C72, 'M', '\u2c73'),\n    (0x2C73, 'V'),\n    (0x2C75, 'M', '\u2c76'),\n    (0x2C76, 'V'),\n    (0x2C7C, 'M', 'j'),\n    (0x2C7D, 'M', 'v'),\n    (0x2C7E, 'M', '\u023f'),\n    (0x2C7F, 'M', '\u0240'),\n    (0x2C80, 'M', '\u2c81'),\n    (0x2C81, 'V'),\n    (0x2C82, 'M', '\u2c83'),\n    (0x2C83, 'V'),\n    (0x2C84, 'M', '\u2c85'),\n    (0x2C85, 'V'),\n    (0x2C86, 'M', '\u2c87'),\n    (0x2C87, 'V'),\n    (0x2C88, 'M', '\u2c89'),\n    (0x2C89, 'V'),\n    (0x2C8A, 'M', '\u2c8b'),\n    (0x2C8B, 'V'),\n    (0x2C8C, 'M', '\u2c8d'),\n    (0x2C8D, 'V'),\n    (0x2C8E, 'M', '\u2c8f'),\n    (0x2C8F, 'V'),\n    (0x2C90, 'M', '\u2c91'),\n    (0x2C91, 'V'),\n    (0x2C92, 'M', '\u2c93'),\n    (0x2C93, 'V'),\n    (0x2C94, 'M', '\u2c95'),\n    (0x2C95, 'V'),\n    (0x2C96, 'M', '\u2c97'),\n    (0x2C97, 'V'),\n    (0x2C98, 'M', '\u2c99'),\n    (0x2C99, 'V'),\n    (0x2C9A, 'M', '\u2c9b'),\n    (0x2C9B, 'V'),\n    (0x2C9C, 'M', '\u2c9d'),\n    (0x2C9D, 'V'),\n    (0x2C9E, 'M', '\u2c9f'),\n    (0x2C9F, 'V'),\n    (0x2CA0, 'M', '\u2ca1'),\n    (0x2CA1, 'V'),\n    (0x2CA2, 'M', '\u2ca3'),\n    (0x2CA3, 'V'),\n    (0x2CA4, 'M', '\u2ca5'),\n    (0x2CA5, 'V'),\n    (0x2CA6, 'M', '\u2ca7'),\n    (0x2CA7, 'V'),\n    (0x2CA8, 'M', '\u2ca9'),\n    (0x2CA9, 'V'),\n    (0x2CAA, 'M', '\u2cab'),\n    (0x2CAB, 'V'),\n    (0x2CAC, 'M', '\u2cad'),\n    (0x2CAD, 'V'),\n    (0x2CAE, 'M', '\u2caf'),\n    (0x2CAF, 'V'),\n    (0x2CB0, 'M', '\u2cb1'),\n    (0x2CB1, 'V'),\n    (0x2CB2, 'M', '\u2cb3'),\n    (0x2CB3, 'V'),\n    (0x2CB4, 'M', '\u2cb5'),\n    (0x2CB5, 'V'),\n    (0x2CB6, 'M', '\u2cb7'),\n    (0x2CB7, 'V'),\n    (0x2CB8, 'M', '\u2cb9'),\n    (0x2CB9, 'V'),\n    (0x2CBA, 'M', '\u2cbb'),\n    (0x2CBB, 'V'),\n    (0x2CBC, 'M', '\u2cbd'),\n    (0x2CBD, 'V'),\n    (0x2CBE, 'M', '\u2cbf'),\n    (0x2CBF, 'V'),\n    (0x2CC0, 'M', '\u2cc1'),\n    (0x2CC1, 'V'),\n    (0x2CC2, 'M', '\u2cc3'),\n    (0x2CC3, 'V'),\n    (0x2CC4, 'M', '\u2cc5'),\n    (0x2CC5, 'V'),\n    (0x2CC6, 'M', '\u2cc7'),\n    ]\n\ndef _seg_26() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2CC7, 'V'),\n    (0x2CC8, 'M', '\u2cc9'),\n    (0x2CC9, 'V'),\n    (0x2CCA, 'M', '\u2ccb'),\n    (0x2CCB, 'V'),\n    (0x2CCC, 'M', '\u2ccd'),\n    (0x2CCD, 'V'),\n    (0x2CCE, 'M', '\u2ccf'),\n    (0x2CCF, 'V'),\n    (0x2CD0, 'M', '\u2cd1'),\n    (0x2CD1, 'V'),\n    (0x2CD2, 'M', '\u2cd3'),\n    (0x2CD3, 'V'),\n    (0x2CD4, 'M', '\u2cd5'),\n    (0x2CD5, 'V'),\n    (0x2CD6, 'M', '\u2cd7'),\n    (0x2CD7, 'V'),\n    (0x2CD8, 'M', '\u2cd9'),\n    (0x2CD9, 'V'),\n    (0x2CDA, 'M', '\u2cdb'),\n    (0x2CDB, 'V'),\n    (0x2CDC, 'M', '\u2cdd'),\n    (0x2CDD, 'V'),\n    (0x2CDE, 'M', '\u2cdf'),\n    (0x2CDF, 'V'),\n    (0x2CE0, 'M', '\u2ce1'),\n    (0x2CE1, 'V'),\n    (0x2CE2, 'M', '\u2ce3'),\n    (0x2CE3, 'V'),\n    (0x2CEB, 'M', '\u2cec'),\n    (0x2CEC, 'V'),\n    (0x2CED, 'M', '\u2cee'),\n    (0x2CEE, 'V'),\n    (0x2CF2, 'M', '\u2cf3'),\n    (0x2CF3, 'V'),\n    (0x2CF4, 'X'),\n    (0x2CF9, 'V'),\n    (0x2D26, 'X'),\n    (0x2D27, 'V'),\n    (0x2D28, 'X'),\n    (0x2D2D, 'V'),\n    (0x2D2E, 'X'),\n    (0x2D30, 'V'),\n    (0x2D68, 'X'),\n    (0x2D6F, 'M', '\u2d61'),\n    (0x2D70, 'V'),\n    (0x2D71, 'X'),\n    (0x2D7F, 'V'),\n    (0x2D97, 'X'),\n    (0x2DA0, 'V'),\n    (0x2DA7, 'X'),\n    (0x2DA8, 'V'),\n    (0x2DAF, 'X'),\n    (0x2DB0, 'V'),\n    (0x2DB7, 'X'),\n    (0x2DB8, 'V'),\n    (0x2DBF, 'X'),\n    (0x2DC0, 'V'),\n    (0x2DC7, 'X'),\n    (0x2DC8, 'V'),\n    (0x2DCF, 'X'),\n    (0x2DD0, 'V'),\n    (0x2DD7, 'X'),\n    (0x2DD8, 'V'),\n    (0x2DDF, 'X'),\n    (0x2DE0, 'V'),\n    (0x2E5E, 'X'),\n    (0x2E80, 'V'),\n    (0x2E9A, 'X'),\n    (0x2E9B, 'V'),\n    (0x2E9F, 'M', '\u6bcd'),\n    (0x2EA0, 'V'),\n    (0x2EF3, 'M', '\u9f9f'),\n    (0x2EF4, 'X'),\n    (0x2F00, 'M', '\u4e00'),\n    (0x2F01, 'M', '\u4e28'),\n    (0x2F02, 'M', '\u4e36'),\n    (0x2F03, 'M', '\u4e3f'),\n    (0x2F04, 'M', '\u4e59'),\n    (0x2F05, 'M', '\u4e85'),\n    (0x2F06, 'M', '\u4e8c'),\n    (0x2F07, 'M', '\u4ea0'),\n    (0x2F08, 'M', '\u4eba'),\n    (0x2F09, 'M', '\u513f'),\n    (0x2F0A, 'M', '\u5165'),\n    (0x2F0B, 'M', '\u516b'),\n    (0x2F0C, 'M', '\u5182'),\n    (0x2F0D, 'M', '\u5196'),\n    (0x2F0E, 'M', '\u51ab'),\n    (0x2F0F, 'M', '\u51e0'),\n    (0x2F10, 'M', '\u51f5'),\n    (0x2F11, 'M', '\u5200'),\n    (0x2F12, 'M', '\u529b'),\n    (0x2F13, 'M', '\u52f9'),\n    (0x2F14, 'M', '\u5315'),\n    (0x2F15, 'M', '\u531a'),\n    (0x2F16, 'M', '\u5338'),\n    (0x2F17, 'M', '\u5341'),\n    (0x2F18, 'M', '\u535c'),\n    (0x2F19, 'M', '\u5369'),\n    ]\n\ndef _seg_27() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2F1A, 'M', '\u5382'),\n    (0x2F1B, 'M', '\u53b6'),\n    (0x2F1C, 'M', '\u53c8'),\n    (0x2F1D, 'M', '\u53e3'),\n    (0x2F1E, 'M', '\u56d7'),\n    (0x2F1F, 'M', '\u571f'),\n    (0x2F20, 'M', '\u58eb'),\n    (0x2F21, 'M', '\u5902'),\n    (0x2F22, 'M', '\u590a'),\n    (0x2F23, 'M', '\u5915'),\n    (0x2F24, 'M', '\u5927'),\n    (0x2F25, 'M', '\u5973'),\n    (0x2F26, 'M', '\u5b50'),\n    (0x2F27, 'M', '\u5b80'),\n    (0x2F28, 'M', '\u5bf8'),\n    (0x2F29, 'M', '\u5c0f'),\n    (0x2F2A, 'M', '\u5c22'),\n    (0x2F2B, 'M', '\u5c38'),\n    (0x2F2C, 'M', '\u5c6e'),\n    (0x2F2D, 'M', '\u5c71'),\n    (0x2F2E, 'M', '\u5ddb'),\n    (0x2F2F, 'M', '\u5de5'),\n    (0x2F30, 'M', '\u5df1'),\n    (0x2F31, 'M', '\u5dfe'),\n    (0x2F32, 'M', '\u5e72'),\n    (0x2F33, 'M', '\u5e7a'),\n    (0x2F34, 'M', '\u5e7f'),\n    (0x2F35, 'M', '\u5ef4'),\n    (0x2F36, 'M', '\u5efe'),\n    (0x2F37, 'M', '\u5f0b'),\n    (0x2F38, 'M', '\u5f13'),\n    (0x2F39, 'M', '\u5f50'),\n    (0x2F3A, 'M', '\u5f61'),\n    (0x2F3B, 'M', '\u5f73'),\n    (0x2F3C, 'M', '\u5fc3'),\n    (0x2F3D, 'M', '\u6208'),\n    (0x2F3E, 'M', '\u6236'),\n    (0x2F3F, 'M', '\u624b'),\n    (0x2F40, 'M', '\u652f'),\n    (0x2F41, 'M', '\u6534'),\n    (0x2F42, 'M', '\u6587'),\n    (0x2F43, 'M', '\u6597'),\n    (0x2F44, 'M', '\u65a4'),\n    (0x2F45, 'M', '\u65b9'),\n    (0x2F46, 'M', '\u65e0'),\n    (0x2F47, 'M', '\u65e5'),\n    (0x2F48, 'M', '\u66f0'),\n    (0x2F49, 'M', '\u6708'),\n    (0x2F4A, 'M', '\u6728'),\n    (0x2F4B, 'M', '\u6b20'),\n    (0x2F4C, 'M', '\u6b62'),\n    (0x2F4D, 'M', '\u6b79'),\n    (0x2F4E, 'M', '\u6bb3'),\n    (0x2F4F, 'M', '\u6bcb'),\n    (0x2F50, 'M', '\u6bd4'),\n    (0x2F51, 'M', '\u6bdb'),\n    (0x2F52, 'M', '\u6c0f'),\n    (0x2F53, 'M', '\u6c14'),\n    (0x2F54, 'M', '\u6c34'),\n    (0x2F55, 'M', '\u706b'),\n    (0x2F56, 'M', '\u722a'),\n    (0x2F57, 'M', '\u7236'),\n    (0x2F58, 'M', '\u723b'),\n    (0x2F59, 'M', '\u723f'),\n    (0x2F5A, 'M', '\u7247'),\n    (0x2F5B, 'M', '\u7259'),\n    (0x2F5C, 'M', '\u725b'),\n    (0x2F5D, 'M', '\u72ac'),\n    (0x2F5E, 'M', '\u7384'),\n    (0x2F5F, 'M', '\u7389'),\n    (0x2F60, 'M', '\u74dc'),\n    (0x2F61, 'M', '\u74e6'),\n    (0x2F62, 'M', '\u7518'),\n    (0x2F63, 'M', '\u751f'),\n    (0x2F64, 'M', '\u7528'),\n    (0x2F65, 'M', '\u7530'),\n    (0x2F66, 'M', '\u758b'),\n    (0x2F67, 'M', '\u7592'),\n    (0x2F68, 'M', '\u7676'),\n    (0x2F69, 'M', '\u767d'),\n    (0x2F6A, 'M', '\u76ae'),\n    (0x2F6B, 'M', '\u76bf'),\n    (0x2F6C, 'M', '\u76ee'),\n    (0x2F6D, 'M', '\u77db'),\n    (0x2F6E, 'M', '\u77e2'),\n    (0x2F6F, 'M', '\u77f3'),\n    (0x2F70, 'M', '\u793a'),\n    (0x2F71, 'M', '\u79b8'),\n    (0x2F72, 'M', '\u79be'),\n    (0x2F73, 'M', '\u7a74'),\n    (0x2F74, 'M', '\u7acb'),\n    (0x2F75, 'M', '\u7af9'),\n    (0x2F76, 'M', '\u7c73'),\n    (0x2F77, 'M', '\u7cf8'),\n    (0x2F78, 'M', '\u7f36'),\n    (0x2F79, 'M', '\u7f51'),\n    (0x2F7A, 'M', '\u7f8a'),\n    (0x2F7B, 'M', '\u7fbd'),\n    (0x2F7C, 'M', '\u8001'),\n    (0x2F7D, 'M', '\u800c'),\n    ]\n\ndef _seg_28() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2F7E, 'M', '\u8012'),\n    (0x2F7F, 'M', '\u8033'),\n    (0x2F80, 'M', '\u807f'),\n    (0x2F81, 'M', '\u8089'),\n    (0x2F82, 'M', '\u81e3'),\n    (0x2F83, 'M', '\u81ea'),\n    (0x2F84, 'M', '\u81f3'),\n    (0x2F85, 'M', '\u81fc'),\n    (0x2F86, 'M', '\u820c'),\n    (0x2F87, 'M', '\u821b'),\n    (0x2F88, 'M', '\u821f'),\n    (0x2F89, 'M', '\u826e'),\n    (0x2F8A, 'M', '\u8272'),\n    (0x2F8B, 'M', '\u8278'),\n    (0x2F8C, 'M', '\u864d'),\n    (0x2F8D, 'M', '\u866b'),\n    (0x2F8E, 'M', '\u8840'),\n    (0x2F8F, 'M', '\u884c'),\n    (0x2F90, 'M', '\u8863'),\n    (0x2F91, 'M', '\u897e'),\n    (0x2F92, 'M', '\u898b'),\n    (0x2F93, 'M', '\u89d2'),\n    (0x2F94, 'M', '\u8a00'),\n    (0x2F95, 'M', '\u8c37'),\n    (0x2F96, 'M', '\u8c46'),\n    (0x2F97, 'M', '\u8c55'),\n    (0x2F98, 'M', '\u8c78'),\n    (0x2F99, 'M', '\u8c9d'),\n    (0x2F9A, 'M', '\u8d64'),\n    (0x2F9B, 'M', '\u8d70'),\n    (0x2F9C, 'M', '\u8db3'),\n    (0x2F9D, 'M', '\u8eab'),\n    (0x2F9E, 'M', '\u8eca'),\n    (0x2F9F, 'M', '\u8f9b'),\n    (0x2FA0, 'M', '\u8fb0'),\n    (0x2FA1, 'M', '\u8fb5'),\n    (0x2FA2, 'M', '\u9091'),\n    (0x2FA3, 'M', '\u9149'),\n    (0x2FA4, 'M', '\u91c6'),\n    (0x2FA5, 'M', '\u91cc'),\n    (0x2FA6, 'M', '\u91d1'),\n    (0x2FA7, 'M', '\u9577'),\n    (0x2FA8, 'M', '\u9580'),\n    (0x2FA9, 'M', '\u961c'),\n    (0x2FAA, 'M', '\u96b6'),\n    (0x2FAB, 'M', '\u96b9'),\n    (0x2FAC, 'M', '\u96e8'),\n    (0x2FAD, 'M', '\u9751'),\n    (0x2FAE, 'M', '\u975e'),\n    (0x2FAF, 'M', '\u9762'),\n    (0x2FB0, 'M', '\u9769'),\n    (0x2FB1, 'M', '\u97cb'),\n    (0x2FB2, 'M', '\u97ed'),\n    (0x2FB3, 'M', '\u97f3'),\n    (0x2FB4, 'M', '\u9801'),\n    (0x2FB5, 'M', '\u98a8'),\n    (0x2FB6, 'M', '\u98db'),\n    (0x2FB7, 'M', '\u98df'),\n    (0x2FB8, 'M', '\u9996'),\n    (0x2FB9, 'M', '\u9999'),\n    (0x2FBA, 'M', '\u99ac'),\n    (0x2FBB, 'M', '\u9aa8'),\n    (0x2FBC, 'M', '\u9ad8'),\n    (0x2FBD, 'M', '\u9adf'),\n    (0x2FBE, 'M', '\u9b25'),\n    (0x2FBF, 'M', '\u9b2f'),\n    (0x2FC0, 'M', '\u9b32'),\n    (0x2FC1, 'M', '\u9b3c'),\n    (0x2FC2, 'M', '\u9b5a'),\n    (0x2FC3, 'M', '\u9ce5'),\n    (0x2FC4, 'M', '\u9e75'),\n    (0x2FC5, 'M', '\u9e7f'),\n    (0x2FC6, 'M', '\u9ea5'),\n    (0x2FC7, 'M', '\u9ebb'),\n    (0x2FC8, 'M', '\u9ec3'),\n    (0x2FC9, 'M', '\u9ecd'),\n    (0x2FCA, 'M', '\u9ed1'),\n    (0x2FCB, 'M', '\u9ef9'),\n    (0x2FCC, 'M', '\u9efd'),\n    (0x2FCD, 'M', '\u9f0e'),\n    (0x2FCE, 'M', '\u9f13'),\n    (0x2FCF, 'M', '\u9f20'),\n    (0x2FD0, 'M', '\u9f3b'),\n    (0x2FD1, 'M', '\u9f4a'),\n    (0x2FD2, 'M', '\u9f52'),\n    (0x2FD3, 'M', '\u9f8d'),\n    (0x2FD4, 'M', '\u9f9c'),\n    (0x2FD5, 'M', '\u9fa0'),\n    (0x2FD6, 'X'),\n    (0x3000, '3', ' '),\n    (0x3001, 'V'),\n    (0x3002, 'M', '.'),\n    (0x3003, 'V'),\n    (0x3036, 'M', '\u3012'),\n    (0x3037, 'V'),\n    (0x3038, 'M', '\u5341'),\n    (0x3039, 'M', '\u5344'),\n    (0x303A, 'M', '\u5345'),\n    (0x303B, 'V'),\n    (0x3040, 'X'),\n    ]\n\ndef _seg_29() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x3041, 'V'),\n    (0x3097, 'X'),\n    (0x3099, 'V'),\n    (0x309B, '3', ' \u3099'),\n    (0x309C, '3', ' \u309a'),\n    (0x309D, 'V'),\n    (0x309F, 'M', '\u3088\u308a'),\n    (0x30A0, 'V'),\n    (0x30FF, 'M', '\u30b3\u30c8'),\n    (0x3100, 'X'),\n    (0x3105, 'V'),\n    (0x3130, 'X'),\n    (0x3131, 'M', '\u1100'),\n    (0x3132, 'M', '\u1101'),\n    (0x3133, 'M', '\u11aa'),\n    (0x3134, 'M', '\u1102'),\n    (0x3135, 'M', '\u11ac'),\n    (0x3136, 'M', '\u11ad'),\n    (0x3137, 'M', '\u1103'),\n    (0x3138, 'M', '\u1104'),\n    (0x3139, 'M', '\u1105'),\n    (0x313A, 'M', '\u11b0'),\n    (0x313B, 'M', '\u11b1'),\n    (0x313C, 'M', '\u11b2'),\n    (0x313D, 'M', '\u11b3'),\n    (0x313E, 'M', '\u11b4'),\n    (0x313F, 'M', '\u11b5'),\n    (0x3140, 'M', '\u111a'),\n    (0x3141, 'M', '\u1106'),\n    (0x3142, 'M', '\u1107'),\n    (0x3143, 'M', '\u1108'),\n    (0x3144, 'M', '\u1121'),\n    (0x3145, 'M', '\u1109'),\n    (0x3146, 'M', '\u110a'),\n    (0x3147, 'M', '\u110b'),\n    (0x3148, 'M', '\u110c'),\n    (0x3149, 'M', '\u110d'),\n    (0x314A, 'M', '\u110e'),\n    (0x314B, 'M', '\u110f'),\n    (0x314C, 'M', '\u1110'),\n    (0x314D, 'M', '\u1111'),\n    (0x314E, 'M', '\u1112'),\n    (0x314F, 'M', '\u1161'),\n    (0x3150, 'M', '\u1162'),\n    (0x3151, 'M', '\u1163'),\n    (0x3152, 'M', '\u1164'),\n    (0x3153, 'M', '\u1165'),\n    (0x3154, 'M', '\u1166'),\n    (0x3155, 'M', '\u1167'),\n    (0x3156, 'M', '\u1168'),\n    (0x3157, 'M', '\u1169'),\n    (0x3158, 'M', '\u116a'),\n    (0x3159, 'M', '\u116b'),\n    (0x315A, 'M', '\u116c'),\n    (0x315B, 'M', '\u116d'),\n    (0x315C, 'M', '\u116e'),\n    (0x315D, 'M', '\u116f'),\n    (0x315E, 'M', '\u1170'),\n    (0x315F, 'M', '\u1171'),\n    (0x3160, 'M', '\u1172'),\n    (0x3161, 'M', '\u1173'),\n    (0x3162, 'M', '\u1174'),\n    (0x3163, 'M', '\u1175'),\n    (0x3164, 'X'),\n    (0x3165, 'M', '\u1114'),\n    (0x3166, 'M', '\u1115'),\n    (0x3167, 'M', '\u11c7'),\n    (0x3168, 'M', '\u11c8'),\n    (0x3169, 'M', '\u11cc'),\n    (0x316A, 'M', '\u11ce'),\n    (0x316B, 'M', '\u11d3'),\n    (0x316C, 'M', '\u11d7'),\n    (0x316D, 'M', '\u11d9'),\n    (0x316E, 'M', '\u111c'),\n    (0x316F, 'M', '\u11dd'),\n    (0x3170, 'M', '\u11df'),\n    (0x3171, 'M', '\u111d'),\n    (0x3172, 'M', '\u111e'),\n    (0x3173, 'M', '\u1120'),\n    (0x3174, 'M', '\u1122'),\n    (0x3175, 'M', '\u1123'),\n    (0x3176, 'M', '\u1127'),\n    (0x3177, 'M', '\u1129'),\n    (0x3178, 'M', '\u112b'),\n    (0x3179, 'M', '\u112c'),\n    (0x317A, 'M', '\u112d'),\n    (0x317B, 'M', '\u112e'),\n    (0x317C, 'M', '\u112f'),\n    (0x317D, 'M', '\u1132'),\n    (0x317E, 'M', '\u1136'),\n    (0x317F, 'M', '\u1140'),\n    (0x3180, 'M', '\u1147'),\n    (0x3181, 'M', '\u114c'),\n    (0x3182, 'M', '\u11f1'),\n    (0x3183, 'M', '\u11f2'),\n    (0x3184, 'M', '\u1157'),\n    (0x3185, 'M', '\u1158'),\n    (0x3186, 'M', '\u1159'),\n    (0x3187, 'M', '\u1184'),\n    (0x3188, 'M', '\u1185'),\n    ]\n\ndef _seg_30() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x3189, 'M', '\u1188'),\n    (0x318A, 'M', '\u1191'),\n    (0x318B, 'M', '\u1192'),\n    (0x318C, 'M', '\u1194'),\n    (0x318D, 'M', '\u119e'),\n    (0x318E, 'M', '\u11a1'),\n    (0x318F, 'X'),\n    (0x3190, 'V'),\n    (0x3192, 'M', '\u4e00'),\n    (0x3193, 'M', '\u4e8c'),\n    (0x3194, 'M', '\u4e09'),\n    (0x3195, 'M', '\u56db'),\n    (0x3196, 'M', '\u4e0a'),\n    (0x3197, 'M', '\u4e2d'),\n    (0x3198, 'M', '\u4e0b'),\n    (0x3199, 'M', '\u7532'),\n    (0x319A, 'M', '\u4e59'),\n    (0x319B, 'M', '\u4e19'),\n    (0x319C, 'M', '\u4e01'),\n    (0x319D, 'M', '\u5929'),\n    (0x319E, 'M', '\u5730'),\n    (0x319F, 'M', '\u4eba'),\n    (0x31A0, 'V'),\n    (0x31E4, 'X'),\n    (0x31F0, 'V'),\n    (0x3200, '3', '(\u1100)'),\n    (0x3201, '3', '(\u1102)'),\n    (0x3202, '3', '(\u1103)'),\n    (0x3203, '3', '(\u1105)'),\n    (0x3204, '3', '(\u1106)'),\n    (0x3205, '3', '(\u1107)'),\n    (0x3206, '3', '(\u1109)'),\n    (0x3207, '3', '(\u110b)'),\n    (0x3208, '3', '(\u110c)'),\n    (0x3209, '3', '(\u110e)'),\n    (0x320A, '3', '(\u110f)'),\n    (0x320B, '3', '(\u1110)'),\n    (0x320C, '3', '(\u1111)'),\n    (0x320D, '3', '(\u1112)'),\n    (0x320E, '3', '(\uac00)'),\n    (0x320F, '3', '(\ub098)'),\n    (0x3210, '3', '(\ub2e4)'),\n    (0x3211, '3', '(\ub77c)'),\n    (0x3212, '3', '(\ub9c8)'),\n    (0x3213, '3', '(\ubc14)'),\n    (0x3214, '3', '(\uc0ac)'),\n    (0x3215, '3', '(\uc544)'),\n    (0x3216, '3', '(\uc790)'),\n    (0x3217, '3', '(\ucc28)'),\n    (0x3218, '3', '(\uce74)'),\n    (0x3219, '3', '(\ud0c0)'),\n    (0x321A, '3', '(\ud30c)'),\n    (0x321B, '3', '(\ud558)'),\n    (0x321C, '3', '(\uc8fc)'),\n    (0x321D, '3', '(\uc624\uc804)'),\n    (0x321E, '3', '(\uc624\ud6c4)'),\n    (0x321F, 'X'),\n    (0x3220, '3', '(\u4e00)'),\n    (0x3221, '3', '(\u4e8c)'),\n    (0x3222, '3', '(\u4e09)'),\n    (0x3223, '3', '(\u56db)'),\n    (0x3224, '3', '(\u4e94)'),\n    (0x3225, '3', '(\u516d)'),\n    (0x3226, '3', '(\u4e03)'),\n    (0x3227, '3', '(\u516b)'),\n    (0x3228, '3', '(\u4e5d)'),\n    (0x3229, '3', '(\u5341)'),\n    (0x322A, '3', '(\u6708)'),\n    (0x322B, '3', '(\u706b)'),\n    (0x322C, '3', '(\u6c34)'),\n    (0x322D, '3', '(\u6728)'),\n    (0x322E, '3', '(\u91d1)'),\n    (0x322F, '3', '(\u571f)'),\n    (0x3230, '3', '(\u65e5)'),\n    (0x3231, '3', '(\u682a)'),\n    (0x3232, '3', '(\u6709)'),\n    (0x3233, '3', '(\u793e)'),\n    (0x3234, '3', '(\u540d)'),\n    (0x3235, '3', '(\u7279)'),\n    (0x3236, '3', '(\u8ca1)'),\n    (0x3237, '3', '(\u795d)'),\n    (0x3238, '3', '(\u52b4)'),\n    (0x3239, '3', '(\u4ee3)'),\n    (0x323A, '3', '(\u547c)'),\n    (0x323B, '3', '(\u5b66)'),\n    (0x323C, '3', '(\u76e3)'),\n    (0x323D, '3', '(\u4f01)'),\n    (0x323E, '3', '(\u8cc7)'),\n    (0x323F, '3', '(\u5354)'),\n    (0x3240, '3', '(\u796d)'),\n    (0x3241, '3', '(\u4f11)'),\n    (0x3242, '3', '(\u81ea)'),\n    (0x3243, '3', '(\u81f3)'),\n    (0x3244, 'M', '\u554f'),\n    (0x3245, 'M', '\u5e7c'),\n    (0x3246, 'M', '\u6587'),\n    (0x3247, 'M', '\u7b8f'),\n    (0x3248, 'V'),\n    (0x3250, 'M', 'pte'),\n    (0x3251, 'M', '21'),\n    ]\n\ndef _seg_31() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x3252, 'M', '22'),\n    (0x3253, 'M', '23'),\n    (0x3254, 'M', '24'),\n    (0x3255, 'M', '25'),\n    (0x3256, 'M', '26'),\n    (0x3257, 'M', '27'),\n    (0x3258, 'M', '28'),\n    (0x3259, 'M', '29'),\n    (0x325A, 'M', '30'),\n    (0x325B, 'M', '31'),\n    (0x325C, 'M', '32'),\n    (0x325D, 'M', '33'),\n    (0x325E, 'M', '34'),\n    (0x325F, 'M', '35'),\n    (0x3260, 'M', '\u1100'),\n    (0x3261, 'M', '\u1102'),\n    (0x3262, 'M', '\u1103'),\n    (0x3263, 'M', '\u1105'),\n    (0x3264, 'M', '\u1106'),\n    (0x3265, 'M', '\u1107'),\n    (0x3266, 'M', '\u1109'),\n    (0x3267, 'M', '\u110b'),\n    (0x3268, 'M', '\u110c'),\n    (0x3269, 'M', '\u110e'),\n    (0x326A, 'M', '\u110f'),\n    (0x326B, 'M', '\u1110'),\n    (0x326C, 'M', '\u1111'),\n    (0x326D, 'M', '\u1112'),\n    (0x326E, 'M', '\uac00'),\n    (0x326F, 'M', '\ub098'),\n    (0x3270, 'M', '\ub2e4'),\n    (0x3271, 'M', '\ub77c'),\n    (0x3272, 'M', '\ub9c8'),\n    (0x3273, 'M', '\ubc14'),\n    (0x3274, 'M', '\uc0ac'),\n    (0x3275, 'M', '\uc544'),\n    (0x3276, 'M', '\uc790'),\n    (0x3277, 'M', '\ucc28'),\n    (0x3278, 'M', '\uce74'),\n    (0x3279, 'M', '\ud0c0'),\n    (0x327A, 'M', '\ud30c'),\n    (0x327B, 'M', '\ud558'),\n    (0x327C, 'M', '\ucc38\uace0'),\n    (0x327D, 'M', '\uc8fc\uc758'),\n    (0x327E, 'M', '\uc6b0'),\n    (0x327F, 'V'),\n    (0x3280, 'M', '\u4e00'),\n    (0x3281, 'M', '\u4e8c'),\n    (0x3282, 'M', '\u4e09'),\n    (0x3283, 'M', '\u56db'),\n    (0x3284, 'M', '\u4e94'),\n    (0x3285, 'M', '\u516d'),\n    (0x3286, 'M', '\u4e03'),\n    (0x3287, 'M', '\u516b'),\n    (0x3288, 'M', '\u4e5d'),\n    (0x3289, 'M', '\u5341'),\n    (0x328A, 'M', '\u6708'),\n    (0x328B, 'M', '\u706b'),\n    (0x328C, 'M', '\u6c34'),\n    (0x328D, 'M', '\u6728'),\n    (0x328E, 'M', '\u91d1'),\n    (0x328F, 'M', '\u571f'),\n    (0x3290, 'M', '\u65e5'),\n    (0x3291, 'M', '\u682a'),\n    (0x3292, 'M', '\u6709'),\n    (0x3293, 'M', '\u793e'),\n    (0x3294, 'M', '\u540d'),\n    (0x3295, 'M', '\u7279'),\n    (0x3296, 'M', '\u8ca1'),\n    (0x3297, 'M', '\u795d'),\n    (0x3298, 'M', '\u52b4'),\n    (0x3299, 'M', '\u79d8'),\n    (0x329A, 'M', '\u7537'),\n    (0x329B, 'M', '\u5973'),\n    (0x329C, 'M', '\u9069'),\n    (0x329D, 'M', '\u512a'),\n    (0x329E, 'M', '\u5370'),\n    (0x329F, 'M', '\u6ce8'),\n    (0x32A0, 'M', '\u9805'),\n    (0x32A1, 'M', '\u4f11'),\n    (0x32A2, 'M', '\u5199'),\n    (0x32A3, 'M', '\u6b63'),\n    (0x32A4, 'M', '\u4e0a'),\n    (0x32A5, 'M', '\u4e2d'),\n    (0x32A6, 'M', '\u4e0b'),\n    (0x32A7, 'M', '\u5de6'),\n    (0x32A8, 'M', '\u53f3'),\n    (0x32A9, 'M', '\u533b'),\n    (0x32AA, 'M', '\u5b97'),\n    (0x32AB, 'M', '\u5b66'),\n    (0x32AC, 'M', '\u76e3'),\n    (0x32AD, 'M', '\u4f01'),\n    (0x32AE, 'M', '\u8cc7'),\n    (0x32AF, 'M', '\u5354'),\n    (0x32B0, 'M', '\u591c'),\n    (0x32B1, 'M', '36'),\n    (0x32B2, 'M', '37'),\n    (0x32B3, 'M', '38'),\n    (0x32B4, 'M', '39'),\n    (0x32B5, 'M', '40'),\n    ]\n\ndef _seg_32() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x32B6, 'M', '41'),\n    (0x32B7, 'M', '42'),\n    (0x32B8, 'M', '43'),\n    (0x32B9, 'M', '44'),\n    (0x32BA, 'M', '45'),\n    (0x32BB, 'M', '46'),\n    (0x32BC, 'M', '47'),\n    (0x32BD, 'M', '48'),\n    (0x32BE, 'M', '49'),\n    (0x32BF, 'M', '50'),\n    (0x32C0, 'M', '1\u6708'),\n    (0x32C1, 'M', '2\u6708'),\n    (0x32C2, 'M', '3\u6708'),\n    (0x32C3, 'M', '4\u6708'),\n    (0x32C4, 'M', '5\u6708'),\n    (0x32C5, 'M', '6\u6708'),\n    (0x32C6, 'M', '7\u6708'),\n    (0x32C7, 'M', '8\u6708'),\n    (0x32C8, 'M', '9\u6708'),\n    (0x32C9, 'M', '10\u6708'),\n    (0x32CA, 'M', '11\u6708'),\n    (0x32CB, 'M', '12\u6708'),\n    (0x32CC, 'M', 'hg'),\n    (0x32CD, 'M', 'erg'),\n    (0x32CE, 'M', 'ev'),\n    (0x32CF, 'M', 'ltd'),\n    (0x32D0, 'M', '\u30a2'),\n    (0x32D1, 'M', '\u30a4'),\n    (0x32D2, 'M', '\u30a6'),\n    (0x32D3, 'M', '\u30a8'),\n    (0x32D4, 'M', '\u30aa'),\n    (0x32D5, 'M', '\u30ab'),\n    (0x32D6, 'M', '\u30ad'),\n    (0x32D7, 'M', '\u30af'),\n    (0x32D8, 'M', '\u30b1'),\n    (0x32D9, 'M', '\u30b3'),\n    (0x32DA, 'M', '\u30b5'),\n    (0x32DB, 'M', '\u30b7'),\n    (0x32DC, 'M', '\u30b9'),\n    (0x32DD, 'M', '\u30bb'),\n    (0x32DE, 'M', '\u30bd'),\n    (0x32DF, 'M', '\u30bf'),\n    (0x32E0, 'M', '\u30c1'),\n    (0x32E1, 'M', '\u30c4'),\n    (0x32E2, 'M', '\u30c6'),\n    (0x32E3, 'M', '\u30c8'),\n    (0x32E4, 'M', '\u30ca'),\n    (0x32E5, 'M', '\u30cb'),\n    (0x32E6, 'M', '\u30cc'),\n    (0x32E7, 'M', '\u30cd'),\n    (0x32E8, 'M', '\u30ce'),\n    (0x32E9, 'M', '\u30cf'),\n    (0x32EA, 'M', '\u30d2'),\n    (0x32EB, 'M', '\u30d5'),\n    (0x32EC, 'M', '\u30d8'),\n    (0x32ED, 'M', '\u30db'),\n    (0x32EE, 'M', '\u30de'),\n    (0x32EF, 'M', '\u30df'),\n    (0x32F0, 'M', '\u30e0'),\n    (0x32F1, 'M', '\u30e1'),\n    (0x32F2, 'M', '\u30e2'),\n    (0x32F3, 'M', '\u30e4'),\n    (0x32F4, 'M', '\u30e6'),\n    (0x32F5, 'M', '\u30e8'),\n    (0x32F6, 'M', '\u30e9'),\n    (0x32F7, 'M', '\u30ea'),\n    (0x32F8, 'M', '\u30eb'),\n    (0x32F9, 'M', '\u30ec'),\n    (0x32FA, 'M', '\u30ed'),\n    (0x32FB, 'M', '\u30ef'),\n    (0x32FC, 'M', '\u30f0'),\n    (0x32FD, 'M', '\u30f1'),\n    (0x32FE, 'M', '\u30f2'),\n    (0x32FF, 'M', '\u4ee4\u548c'),\n    (0x3300, 'M', '\u30a2\u30d1\u30fc\u30c8'),\n    (0x3301, 'M', '\u30a2\u30eb\u30d5\u30a1'),\n    (0x3302, 'M', '\u30a2\u30f3\u30da\u30a2'),\n    (0x3303, 'M', '\u30a2\u30fc\u30eb'),\n    (0x3304, 'M', '\u30a4\u30cb\u30f3\u30b0'),\n    (0x3305, 'M', '\u30a4\u30f3\u30c1'),\n    (0x3306, 'M', '\u30a6\u30a9\u30f3'),\n    (0x3307, 'M', '\u30a8\u30b9\u30af\u30fc\u30c9'),\n    (0x3308, 'M', '\u30a8\u30fc\u30ab\u30fc'),\n    (0x3309, 'M', '\u30aa\u30f3\u30b9'),\n    (0x330A, 'M', '\u30aa\u30fc\u30e0'),\n    (0x330B, 'M', '\u30ab\u30a4\u30ea'),\n    (0x330C, 'M', '\u30ab\u30e9\u30c3\u30c8'),\n    (0x330D, 'M', '\u30ab\u30ed\u30ea\u30fc'),\n    (0x330E, 'M', '\u30ac\u30ed\u30f3'),\n    (0x330F, 'M', '\u30ac\u30f3\u30de'),\n    (0x3310, 'M', '\u30ae\u30ac'),\n    (0x3311, 'M', '\u30ae\u30cb\u30fc'),\n    (0x3312, 'M', '\u30ad\u30e5\u30ea\u30fc'),\n    (0x3313, 'M', '\u30ae\u30eb\u30c0\u30fc'),\n    (0x3314, 'M', '\u30ad\u30ed'),\n    (0x3315, 'M', '\u30ad\u30ed\u30b0\u30e9\u30e0'),\n    (0x3316, 'M', '\u30ad\u30ed\u30e1\u30fc\u30c8\u30eb'),\n    (0x3317, 'M', '\u30ad\u30ed\u30ef\u30c3\u30c8'),\n    (0x3318, 'M', '\u30b0\u30e9\u30e0'),\n    (0x3319, 'M', '\u30b0\u30e9\u30e0\u30c8\u30f3'),\n    ]\n\ndef _seg_33() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x331A, 'M', '\u30af\u30eb\u30bc\u30a4\u30ed'),\n    (0x331B, 'M', '\u30af\u30ed\u30fc\u30cd'),\n    (0x331C, 'M', '\u30b1\u30fc\u30b9'),\n    (0x331D, 'M', '\u30b3\u30eb\u30ca'),\n    (0x331E, 'M', '\u30b3\u30fc\u30dd'),\n    (0x331F, 'M', '\u30b5\u30a4\u30af\u30eb'),\n    (0x3320, 'M', '\u30b5\u30f3\u30c1\u30fc\u30e0'),\n    (0x3321, 'M', '\u30b7\u30ea\u30f3\u30b0'),\n    (0x3322, 'M', '\u30bb\u30f3\u30c1'),\n    (0x3323, 'M', '\u30bb\u30f3\u30c8'),\n    (0x3324, 'M', '\u30c0\u30fc\u30b9'),\n    (0x3325, 'M', '\u30c7\u30b7'),\n    (0x3326, 'M', '\u30c9\u30eb'),\n    (0x3327, 'M', '\u30c8\u30f3'),\n    (0x3328, 'M', '\u30ca\u30ce'),\n    (0x3329, 'M', '\u30ce\u30c3\u30c8'),\n    (0x332A, 'M', '\u30cf\u30a4\u30c4'),\n    (0x332B, 'M', '\u30d1\u30fc\u30bb\u30f3\u30c8'),\n    (0x332C, 'M', '\u30d1\u30fc\u30c4'),\n    (0x332D, 'M', '\u30d0\u30fc\u30ec\u30eb'),\n    (0x332E, 'M', '\u30d4\u30a2\u30b9\u30c8\u30eb'),\n    (0x332F, 'M', '\u30d4\u30af\u30eb'),\n    (0x3330, 'M', '\u30d4\u30b3'),\n    (0x3331, 'M', '\u30d3\u30eb'),\n    (0x3332, 'M', '\u30d5\u30a1\u30e9\u30c3\u30c9'),\n    (0x3333, 'M', '\u30d5\u30a3\u30fc\u30c8'),\n    (0x3334, 'M', '\u30d6\u30c3\u30b7\u30a7\u30eb'),\n    (0x3335, 'M', '\u30d5\u30e9\u30f3'),\n    (0x3336, 'M', '\u30d8\u30af\u30bf\u30fc\u30eb'),\n    (0x3337, 'M', '\u30da\u30bd'),\n    (0x3338, 'M', '\u30da\u30cb\u30d2'),\n    (0x3339, 'M', '\u30d8\u30eb\u30c4'),\n    (0x333A, 'M', '\u30da\u30f3\u30b9'),\n    (0x333B, 'M', '\u30da\u30fc\u30b8'),\n    (0x333C, 'M', '\u30d9\u30fc\u30bf'),\n    (0x333D, 'M', '\u30dd\u30a4\u30f3\u30c8'),\n    (0x333E, 'M', '\u30dc\u30eb\u30c8'),\n    (0x333F, 'M', '\u30db\u30f3'),\n    (0x3340, 'M', '\u30dd\u30f3\u30c9'),\n    (0x3341, 'M', '\u30db\u30fc\u30eb'),\n    (0x3342, 'M', '\u30db\u30fc\u30f3'),\n    (0x3343, 'M', '\u30de\u30a4\u30af\u30ed'),\n    (0x3344, 'M', '\u30de\u30a4\u30eb'),\n    (0x3345, 'M', '\u30de\u30c3\u30cf'),\n    (0x3346, 'M', '\u30de\u30eb\u30af'),\n    (0x3347, 'M', '\u30de\u30f3\u30b7\u30e7\u30f3'),\n    (0x3348, 'M', '\u30df\u30af\u30ed\u30f3'),\n    (0x3349, 'M', '\u30df\u30ea'),\n    (0x334A, 'M', '\u30df\u30ea\u30d0\u30fc\u30eb'),\n    (0x334B, 'M', '\u30e1\u30ac'),\n    (0x334C, 'M', '\u30e1\u30ac\u30c8\u30f3'),\n    (0x334D, 'M', '\u30e1\u30fc\u30c8\u30eb'),\n    (0x334E, 'M', '\u30e4\u30fc\u30c9'),\n    (0x334F, 'M', '\u30e4\u30fc\u30eb'),\n    (0x3350, 'M', '\u30e6\u30a2\u30f3'),\n    (0x3351, 'M', '\u30ea\u30c3\u30c8\u30eb'),\n    (0x3352, 'M', '\u30ea\u30e9'),\n    (0x3353, 'M', '\u30eb\u30d4\u30fc'),\n    (0x3354, 'M', '\u30eb\u30fc\u30d6\u30eb'),\n    (0x3355, 'M', '\u30ec\u30e0'),\n    (0x3356, 'M', '\u30ec\u30f3\u30c8\u30b2\u30f3'),\n    (0x3357, 'M', '\u30ef\u30c3\u30c8'),\n    (0x3358, 'M', '0\u70b9'),\n    (0x3359, 'M', '1\u70b9'),\n    (0x335A, 'M', '2\u70b9'),\n    (0x335B, 'M', '3\u70b9'),\n    (0x335C, 'M', '4\u70b9'),\n    (0x335D, 'M', '5\u70b9'),\n    (0x335E, 'M', '6\u70b9'),\n    (0x335F, 'M', '7\u70b9'),\n    (0x3360, 'M', '8\u70b9'),\n    (0x3361, 'M', '9\u70b9'),\n    (0x3362, 'M', '10\u70b9'),\n    (0x3363, 'M', '11\u70b9'),\n    (0x3364, 'M', '12\u70b9'),\n    (0x3365, 'M', '13\u70b9'),\n    (0x3366, 'M', '14\u70b9'),\n    (0x3367, 'M', '15\u70b9'),\n    (0x3368, 'M', '16\u70b9'),\n    (0x3369, 'M', '17\u70b9'),\n    (0x336A, 'M', '18\u70b9'),\n    (0x336B, 'M', '19\u70b9'),\n    (0x336C, 'M', '20\u70b9'),\n    (0x336D, 'M', '21\u70b9'),\n    (0x336E, 'M', '22\u70b9'),\n    (0x336F, 'M', '23\u70b9'),\n    (0x3370, 'M', '24\u70b9'),\n    (0x3371, 'M', 'hpa'),\n    (0x3372, 'M', 'da'),\n    (0x3373, 'M', 'au'),\n    (0x3374, 'M', 'bar'),\n    (0x3375, 'M', 'ov'),\n    (0x3376, 'M', 'pc'),\n    (0x3377, 'M', 'dm'),\n    (0x3378, 'M', 'dm2'),\n    (0x3379, 'M', 'dm3'),\n    (0x337A, 'M', 'iu'),\n    (0x337B, 'M', '\u5e73\u6210'),\n    (0x337C, 'M', '\u662d\u548c'),\n    (0x337D, 'M', '\u5927\u6b63'),\n    ]\n\ndef _seg_34() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x337E, 'M', '\u660e\u6cbb'),\n    (0x337F, 'M', '\u682a\u5f0f\u4f1a\u793e'),\n    (0x3380, 'M', 'pa'),\n    (0x3381, 'M', 'na'),\n    (0x3382, 'M', '\u03bca'),\n    (0x3383, 'M', 'ma'),\n    (0x3384, 'M', 'ka'),\n    (0x3385, 'M', 'kb'),\n    (0x3386, 'M', 'mb'),\n    (0x3387, 'M', 'gb'),\n    (0x3388, 'M', 'cal'),\n    (0x3389, 'M', 'kcal'),\n    (0x338A, 'M', 'pf'),\n    (0x338B, 'M', 'nf'),\n    (0x338C, 'M', '\u03bcf'),\n    (0x338D, 'M', '\u03bcg'),\n    (0x338E, 'M', 'mg'),\n    (0x338F, 'M', 'kg'),\n    (0x3390, 'M', 'hz'),\n    (0x3391, 'M', 'khz'),\n    (0x3392, 'M', 'mhz'),\n    (0x3393, 'M', 'ghz'),\n    (0x3394, 'M', 'thz'),\n    (0x3395, 'M', '\u03bcl'),\n    (0x3396, 'M', 'ml'),\n    (0x3397, 'M', 'dl'),\n    (0x3398, 'M', 'kl'),\n    (0x3399, 'M', 'fm'),\n    (0x339A, 'M', 'nm'),\n    (0x339B, 'M', '\u03bcm'),\n    (0x339C, 'M', 'mm'),\n    (0x339D, 'M', 'cm'),\n    (0x339E, 'M', 'km'),\n    (0x339F, 'M', 'mm2'),\n    (0x33A0, 'M', 'cm2'),\n    (0x33A1, 'M', 'm2'),\n    (0x33A2, 'M', 'km2'),\n    (0x33A3, 'M', 'mm3'),\n    (0x33A4, 'M', 'cm3'),\n    (0x33A5, 'M', 'm3'),\n    (0x33A6, 'M', 'km3'),\n    (0x33A7, 'M', 'm\u2215s'),\n    (0x33A8, 'M', 'm\u2215s2'),\n    (0x33A9, 'M', 'pa'),\n    (0x33AA, 'M', 'kpa'),\n    (0x33AB, 'M', 'mpa'),\n    (0x33AC, 'M', 'gpa'),\n    (0x33AD, 'M', 'rad'),\n    (0x33AE, 'M', 'rad\u2215s'),\n    (0x33AF, 'M', 'rad\u2215s2'),\n    (0x33B0, 'M', 'ps'),\n    (0x33B1, 'M', 'ns'),\n    (0x33B2, 'M', '\u03bcs'),\n    (0x33B3, 'M', 'ms'),\n    (0x33B4, 'M', 'pv'),\n    (0x33B5, 'M', 'nv'),\n    (0x33B6, 'M', '\u03bcv'),\n    (0x33B7, 'M', 'mv'),\n    (0x33B8, 'M', 'kv'),\n    (0x33B9, 'M', 'mv'),\n    (0x33BA, 'M', 'pw'),\n    (0x33BB, 'M', 'nw'),\n    (0x33BC, 'M', '\u03bcw'),\n    (0x33BD, 'M', 'mw'),\n    (0x33BE, 'M', 'kw'),\n    (0x33BF, 'M', 'mw'),\n    (0x33C0, 'M', 'k\u03c9'),\n    (0x33C1, 'M', 'm\u03c9'),\n    (0x33C2, 'X'),\n    (0x33C3, 'M', 'bq'),\n    (0x33C4, 'M', 'cc'),\n    (0x33C5, 'M', 'cd'),\n    (0x33C6, 'M', 'c\u2215kg'),\n    (0x33C7, 'X'),\n    (0x33C8, 'M', 'db'),\n    (0x33C9, 'M', 'gy'),\n    (0x33CA, 'M', 'ha'),\n    (0x33CB, 'M', 'hp'),\n    (0x33CC, 'M', 'in'),\n    (0x33CD, 'M', 'kk'),\n    (0x33CE, 'M', 'km'),\n    (0x33CF, 'M', 'kt'),\n    (0x33D0, 'M', 'lm'),\n    (0x33D1, 'M', 'ln'),\n    (0x33D2, 'M', 'log'),\n    (0x33D3, 'M', 'lx'),\n    (0x33D4, 'M', 'mb'),\n    (0x33D5, 'M', 'mil'),\n    (0x33D6, 'M', 'mol'),\n    (0x33D7, 'M', 'ph'),\n    (0x33D8, 'X'),\n    (0x33D9, 'M', 'ppm'),\n    (0x33DA, 'M', 'pr'),\n    (0x33DB, 'M', 'sr'),\n    (0x33DC, 'M', 'sv'),\n    (0x33DD, 'M', 'wb'),\n    (0x33DE, 'M', 'v\u2215m'),\n    (0x33DF, 'M', 'a\u2215m'),\n    (0x33E0, 'M', '1\u65e5'),\n    (0x33E1, 'M', '2\u65e5'),\n    ]\n\ndef _seg_35() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x33E2, 'M', '3\u65e5'),\n    (0x33E3, 'M', '4\u65e5'),\n    (0x33E4, 'M', '5\u65e5'),\n    (0x33E5, 'M', '6\u65e5'),\n    (0x33E6, 'M', '7\u65e5'),\n    (0x33E7, 'M', '8\u65e5'),\n    (0x33E8, 'M', '9\u65e5'),\n    (0x33E9, 'M', '10\u65e5'),\n    (0x33EA, 'M', '11\u65e5'),\n    (0x33EB, 'M', '12\u65e5'),\n    (0x33EC, 'M', '13\u65e5'),\n    (0x33ED, 'M', '14\u65e5'),\n    (0x33EE, 'M', '15\u65e5'),\n    (0x33EF, 'M', '16\u65e5'),\n    (0x33F0, 'M', '17\u65e5'),\n    (0x33F1, 'M', '18\u65e5'),\n    (0x33F2, 'M', '19\u65e5'),\n    (0x33F3, 'M', '20\u65e5'),\n    (0x33F4, 'M', '21\u65e5'),\n    (0x33F5, 'M', '22\u65e5'),\n    (0x33F6, 'M', '23\u65e5'),\n    (0x33F7, 'M', '24\u65e5'),\n    (0x33F8, 'M', '25\u65e5'),\n    (0x33F9, 'M', '26\u65e5'),\n    (0x33FA, 'M', '27\u65e5'),\n    (0x33FB, 'M', '28\u65e5'),\n    (0x33FC, 'M', '29\u65e5'),\n    (0x33FD, 'M', '30\u65e5'),\n    (0x33FE, 'M', '31\u65e5'),\n    (0x33FF, 'M', 'gal'),\n    (0x3400, 'V'),\n    (0xA48D, 'X'),\n    (0xA490, 'V'),\n    (0xA4C7, 'X'),\n    (0xA4D0, 'V'),\n    (0xA62C, 'X'),\n    (0xA640, 'M', '\ua641'),\n    (0xA641, 'V'),\n    (0xA642, 'M', '\ua643'),\n    (0xA643, 'V'),\n    (0xA644, 'M', '\ua645'),\n    (0xA645, 'V'),\n    (0xA646, 'M', '\ua647'),\n    (0xA647, 'V'),\n    (0xA648, 'M', '\ua649'),\n    (0xA649, 'V'),\n    (0xA64A, 'M', '\ua64b'),\n    (0xA64B, 'V'),\n    (0xA64C, 'M', '\ua64d'),\n    (0xA64D, 'V'),\n    (0xA64E, 'M', '\ua64f'),\n    (0xA64F, 'V'),\n    (0xA650, 'M', '\ua651'),\n    (0xA651, 'V'),\n    (0xA652, 'M', '\ua653'),\n    (0xA653, 'V'),\n    (0xA654, 'M', '\ua655'),\n    (0xA655, 'V'),\n    (0xA656, 'M', '\ua657'),\n    (0xA657, 'V'),\n    (0xA658, 'M', '\ua659'),\n    (0xA659, 'V'),\n    (0xA65A, 'M', '\ua65b'),\n    (0xA65B, 'V'),\n    (0xA65C, 'M', '\ua65d'),\n    (0xA65D, 'V'),\n    (0xA65E, 'M', '\ua65f'),\n    (0xA65F, 'V'),\n    (0xA660, 'M', '\ua661'),\n    (0xA661, 'V'),\n    (0xA662, 'M', '\ua663'),\n    (0xA663, 'V'),\n    (0xA664, 'M', '\ua665'),\n    (0xA665, 'V'),\n    (0xA666, 'M', '\ua667'),\n    (0xA667, 'V'),\n    (0xA668, 'M', '\ua669'),\n    (0xA669, 'V'),\n    (0xA66A, 'M', '\ua66b'),\n    (0xA66B, 'V'),\n    (0xA66C, 'M', '\ua66d'),\n    (0xA66D, 'V'),\n    (0xA680, 'M', '\ua681'),\n    (0xA681, 'V'),\n    (0xA682, 'M', '\ua683'),\n    (0xA683, 'V'),\n    (0xA684, 'M', '\ua685'),\n    (0xA685, 'V'),\n    (0xA686, 'M', '\ua687'),\n    (0xA687, 'V'),\n    (0xA688, 'M', '\ua689'),\n    (0xA689, 'V'),\n    (0xA68A, 'M', '\ua68b'),\n    (0xA68B, 'V'),\n    (0xA68C, 'M', '\ua68d'),\n    (0xA68D, 'V'),\n    (0xA68E, 'M', '\ua68f'),\n    (0xA68F, 'V'),\n    (0xA690, 'M', '\ua691'),\n    (0xA691, 'V'),\n    ]\n\ndef _seg_36() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xA692, 'M', '\ua693'),\n    (0xA693, 'V'),\n    (0xA694, 'M', '\ua695'),\n    (0xA695, 'V'),\n    (0xA696, 'M', '\ua697'),\n    (0xA697, 'V'),\n    (0xA698, 'M', '\ua699'),\n    (0xA699, 'V'),\n    (0xA69A, 'M', '\ua69b'),\n    (0xA69B, 'V'),\n    (0xA69C, 'M', '\u044a'),\n    (0xA69D, 'M', '\u044c'),\n    (0xA69E, 'V'),\n    (0xA6F8, 'X'),\n    (0xA700, 'V'),\n    (0xA722, 'M', '\ua723'),\n    (0xA723, 'V'),\n    (0xA724, 'M', '\ua725'),\n    (0xA725, 'V'),\n    (0xA726, 'M', '\ua727'),\n    (0xA727, 'V'),\n    (0xA728, 'M', '\ua729'),\n    (0xA729, 'V'),\n    (0xA72A, 'M', '\ua72b'),\n    (0xA72B, 'V'),\n    (0xA72C, 'M', '\ua72d'),\n    (0xA72D, 'V'),\n    (0xA72E, 'M', '\ua72f'),\n    (0xA72F, 'V'),\n    (0xA732, 'M', '\ua733'),\n    (0xA733, 'V'),\n    (0xA734, 'M', '\ua735'),\n    (0xA735, 'V'),\n    (0xA736, 'M', '\ua737'),\n    (0xA737, 'V'),\n    (0xA738, 'M', '\ua739'),\n    (0xA739, 'V'),\n    (0xA73A, 'M', '\ua73b'),\n    (0xA73B, 'V'),\n    (0xA73C, 'M', '\ua73d'),\n    (0xA73D, 'V'),\n    (0xA73E, 'M', '\ua73f'),\n    (0xA73F, 'V'),\n    (0xA740, 'M', '\ua741'),\n    (0xA741, 'V'),\n    (0xA742, 'M', '\ua743'),\n    (0xA743, 'V'),\n    (0xA744, 'M', '\ua745'),\n    (0xA745, 'V'),\n    (0xA746, 'M', '\ua747'),\n    (0xA747, 'V'),\n    (0xA748, 'M', '\ua749'),\n    (0xA749, 'V'),\n    (0xA74A, 'M', '\ua74b'),\n    (0xA74B, 'V'),\n    (0xA74C, 'M', '\ua74d'),\n    (0xA74D, 'V'),\n    (0xA74E, 'M', '\ua74f'),\n    (0xA74F, 'V'),\n    (0xA750, 'M', '\ua751'),\n    (0xA751, 'V'),\n    (0xA752, 'M', '\ua753'),\n    (0xA753, 'V'),\n    (0xA754, 'M', '\ua755'),\n    (0xA755, 'V'),\n    (0xA756, 'M', '\ua757'),\n    (0xA757, 'V'),\n    (0xA758, 'M', '\ua759'),\n    (0xA759, 'V'),\n    (0xA75A, 'M', '\ua75b'),\n    (0xA75B, 'V'),\n    (0xA75C, 'M', '\ua75d'),\n    (0xA75D, 'V'),\n    (0xA75E, 'M', '\ua75f'),\n    (0xA75F, 'V'),\n    (0xA760, 'M', '\ua761'),\n    (0xA761, 'V'),\n    (0xA762, 'M', '\ua763'),\n    (0xA763, 'V'),\n    (0xA764, 'M', '\ua765'),\n    (0xA765, 'V'),\n    (0xA766, 'M', '\ua767'),\n    (0xA767, 'V'),\n    (0xA768, 'M', '\ua769'),\n    (0xA769, 'V'),\n    (0xA76A, 'M', '\ua76b'),\n    (0xA76B, 'V'),\n    (0xA76C, 'M', '\ua76d'),\n    (0xA76D, 'V'),\n    (0xA76E, 'M', '\ua76f'),\n    (0xA76F, 'V'),\n    (0xA770, 'M', '\ua76f'),\n    (0xA771, 'V'),\n    (0xA779, 'M', '\ua77a'),\n    (0xA77A, 'V'),\n    (0xA77B, 'M', '\ua77c'),\n    (0xA77C, 'V'),\n    (0xA77D, 'M', '\u1d79'),\n    (0xA77E, 'M', '\ua77f'),\n    (0xA77F, 'V'),\n    ]\n\ndef _seg_37() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xA780, 'M', '\ua781'),\n    (0xA781, 'V'),\n    (0xA782, 'M', '\ua783'),\n    (0xA783, 'V'),\n    (0xA784, 'M', '\ua785'),\n    (0xA785, 'V'),\n    (0xA786, 'M', '\ua787'),\n    (0xA787, 'V'),\n    (0xA78B, 'M', '\ua78c'),\n    (0xA78C, 'V'),\n    (0xA78D, 'M', '\u0265'),\n    (0xA78E, 'V'),\n    (0xA790, 'M', '\ua791'),\n    (0xA791, 'V'),\n    (0xA792, 'M', '\ua793'),\n    (0xA793, 'V'),\n    (0xA796, 'M', '\ua797'),\n    (0xA797, 'V'),\n    (0xA798, 'M', '\ua799'),\n    (0xA799, 'V'),\n    (0xA79A, 'M', '\ua79b'),\n    (0xA79B, 'V'),\n    (0xA79C, 'M', '\ua79d'),\n    (0xA79D, 'V'),\n    (0xA79E, 'M', '\ua79f'),\n    (0xA79F, 'V'),\n    (0xA7A0, 'M', '\ua7a1'),\n    (0xA7A1, 'V'),\n    (0xA7A2, 'M', '\ua7a3'),\n    (0xA7A3, 'V'),\n    (0xA7A4, 'M', '\ua7a5'),\n    (0xA7A5, 'V'),\n    (0xA7A6, 'M', '\ua7a7'),\n    (0xA7A7, 'V'),\n    (0xA7A8, 'M', '\ua7a9'),\n    (0xA7A9, 'V'),\n    (0xA7AA, 'M', '\u0266'),\n    (0xA7AB, 'M', '\u025c'),\n    (0xA7AC, 'M', '\u0261'),\n    (0xA7AD, 'M', '\u026c'),\n    (0xA7AE, 'M', '\u026a'),\n    (0xA7AF, 'V'),\n    (0xA7B0, 'M', '\u029e'),\n    (0xA7B1, 'M', '\u0287'),\n    (0xA7B2, 'M', '\u029d'),\n    (0xA7B3, 'M', '\uab53'),\n    (0xA7B4, 'M', '\ua7b5'),\n    (0xA7B5, 'V'),\n    (0xA7B6, 'M', '\ua7b7'),\n    (0xA7B7, 'V'),\n    (0xA7B8, 'M', '\ua7b9'),\n    (0xA7B9, 'V'),\n    (0xA7BA, 'M', '\ua7bb'),\n    (0xA7BB, 'V'),\n    (0xA7BC, 'M', '\ua7bd'),\n    (0xA7BD, 'V'),\n    (0xA7BE, 'M', '\ua7bf'),\n    (0xA7BF, 'V'),\n    (0xA7C0, 'M', '\ua7c1'),\n    (0xA7C1, 'V'),\n    (0xA7C2, 'M', '\ua7c3'),\n    (0xA7C3, 'V'),\n    (0xA7C4, 'M', '\ua794'),\n    (0xA7C5, 'M', '\u0282'),\n    (0xA7C6, 'M', '\u1d8e'),\n    (0xA7C7, 'M', '\ua7c8'),\n    (0xA7C8, 'V'),\n    (0xA7C9, 'M', '\ua7ca'),\n    (0xA7CA, 'V'),\n    (0xA7CB, 'X'),\n    (0xA7D0, 'M', '\ua7d1'),\n    (0xA7D1, 'V'),\n    (0xA7D2, 'X'),\n    (0xA7D3, 'V'),\n    (0xA7D4, 'X'),\n    (0xA7D5, 'V'),\n    (0xA7D6, 'M', '\ua7d7'),\n    (0xA7D7, 'V'),\n    (0xA7D8, 'M', '\ua7d9'),\n    (0xA7D9, 'V'),\n    (0xA7DA, 'X'),\n    (0xA7F2, 'M', 'c'),\n    (0xA7F3, 'M', 'f'),\n    (0xA7F4, 'M', 'q'),\n    (0xA7F5, 'M', '\ua7f6'),\n    (0xA7F6, 'V'),\n    (0xA7F8, 'M', '\u0127'),\n    (0xA7F9, 'M', '\u0153'),\n    (0xA7FA, 'V'),\n    (0xA82D, 'X'),\n    (0xA830, 'V'),\n    (0xA83A, 'X'),\n    (0xA840, 'V'),\n    (0xA878, 'X'),\n    (0xA880, 'V'),\n    (0xA8C6, 'X'),\n    (0xA8CE, 'V'),\n    (0xA8DA, 'X'),\n    (0xA8E0, 'V'),\n    (0xA954, 'X'),\n    ]\n\ndef _seg_38() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xA95F, 'V'),\n    (0xA97D, 'X'),\n    (0xA980, 'V'),\n    (0xA9CE, 'X'),\n    (0xA9CF, 'V'),\n    (0xA9DA, 'X'),\n    (0xA9DE, 'V'),\n    (0xA9FF, 'X'),\n    (0xAA00, 'V'),\n    (0xAA37, 'X'),\n    (0xAA40, 'V'),\n    (0xAA4E, 'X'),\n    (0xAA50, 'V'),\n    (0xAA5A, 'X'),\n    (0xAA5C, 'V'),\n    (0xAAC3, 'X'),\n    (0xAADB, 'V'),\n    (0xAAF7, 'X'),\n    (0xAB01, 'V'),\n    (0xAB07, 'X'),\n    (0xAB09, 'V'),\n    (0xAB0F, 'X'),\n    (0xAB11, 'V'),\n    (0xAB17, 'X'),\n    (0xAB20, 'V'),\n    (0xAB27, 'X'),\n    (0xAB28, 'V'),\n    (0xAB2F, 'X'),\n    (0xAB30, 'V'),\n    (0xAB5C, 'M', '\ua727'),\n    (0xAB5D, 'M', '\uab37'),\n    (0xAB5E, 'M', '\u026b'),\n    (0xAB5F, 'M', '\uab52'),\n    (0xAB60, 'V'),\n    (0xAB69, 'M', '\u028d'),\n    (0xAB6A, 'V'),\n    (0xAB6C, 'X'),\n    (0xAB70, 'M', '\u13a0'),\n    (0xAB71, 'M', '\u13a1'),\n    (0xAB72, 'M', '\u13a2'),\n    (0xAB73, 'M', '\u13a3'),\n    (0xAB74, 'M', '\u13a4'),\n    (0xAB75, 'M', '\u13a5'),\n    (0xAB76, 'M', '\u13a6'),\n    (0xAB77, 'M', '\u13a7'),\n    (0xAB78, 'M', '\u13a8'),\n    (0xAB79, 'M', '\u13a9'),\n    (0xAB7A, 'M', '\u13aa'),\n    (0xAB7B, 'M', '\u13ab'),\n    (0xAB7C, 'M', '\u13ac'),\n    (0xAB7D, 'M', '\u13ad'),\n    (0xAB7E, 'M', '\u13ae'),\n    (0xAB7F, 'M', '\u13af'),\n    (0xAB80, 'M', '\u13b0'),\n    (0xAB81, 'M', '\u13b1'),\n    (0xAB82, 'M', '\u13b2'),\n    (0xAB83, 'M', '\u13b3'),\n    (0xAB84, 'M', '\u13b4'),\n    (0xAB85, 'M', '\u13b5'),\n    (0xAB86, 'M', '\u13b6'),\n    (0xAB87, 'M', '\u13b7'),\n    (0xAB88, 'M', '\u13b8'),\n    (0xAB89, 'M', '\u13b9'),\n    (0xAB8A, 'M', '\u13ba'),\n    (0xAB8B, 'M', '\u13bb'),\n    (0xAB8C, 'M', '\u13bc'),\n    (0xAB8D, 'M', '\u13bd'),\n    (0xAB8E, 'M', '\u13be'),\n    (0xAB8F, 'M', '\u13bf'),\n    (0xAB90, 'M', '\u13c0'),\n    (0xAB91, 'M', '\u13c1'),\n    (0xAB92, 'M', '\u13c2'),\n    (0xAB93, 'M', '\u13c3'),\n    (0xAB94, 'M', '\u13c4'),\n    (0xAB95, 'M', '\u13c5'),\n    (0xAB96, 'M', '\u13c6'),\n    (0xAB97, 'M', '\u13c7'),\n    (0xAB98, 'M', '\u13c8'),\n    (0xAB99, 'M', '\u13c9'),\n    (0xAB9A, 'M', '\u13ca'),\n    (0xAB9B, 'M', '\u13cb'),\n    (0xAB9C, 'M', '\u13cc'),\n    (0xAB9D, 'M', '\u13cd'),\n    (0xAB9E, 'M', '\u13ce'),\n    (0xAB9F, 'M', '\u13cf'),\n    (0xABA0, 'M', '\u13d0'),\n    (0xABA1, 'M', '\u13d1'),\n    (0xABA2, 'M', '\u13d2'),\n    (0xABA3, 'M', '\u13d3'),\n    (0xABA4, 'M', '\u13d4'),\n    (0xABA5, 'M', '\u13d5'),\n    (0xABA6, 'M', '\u13d6'),\n    (0xABA7, 'M', '\u13d7'),\n    (0xABA8, 'M', '\u13d8'),\n    (0xABA9, 'M', '\u13d9'),\n    (0xABAA, 'M', '\u13da'),\n    (0xABAB, 'M', '\u13db'),\n    (0xABAC, 'M', '\u13dc'),\n    (0xABAD, 'M', '\u13dd'),\n    (0xABAE, 'M', '\u13de'),\n    ]\n\ndef _seg_39() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xABAF, 'M', '\u13df'),\n    (0xABB0, 'M', '\u13e0'),\n    (0xABB1, 'M', '\u13e1'),\n    (0xABB2, 'M', '\u13e2'),\n    (0xABB3, 'M', '\u13e3'),\n    (0xABB4, 'M', '\u13e4'),\n    (0xABB5, 'M', '\u13e5'),\n    (0xABB6, 'M', '\u13e6'),\n    (0xABB7, 'M', '\u13e7'),\n    (0xABB8, 'M', '\u13e8'),\n    (0xABB9, 'M', '\u13e9'),\n    (0xABBA, 'M', '\u13ea'),\n    (0xABBB, 'M', '\u13eb'),\n    (0xABBC, 'M', '\u13ec'),\n    (0xABBD, 'M', '\u13ed'),\n    (0xABBE, 'M', '\u13ee'),\n    (0xABBF, 'M', '\u13ef'),\n    (0xABC0, 'V'),\n    (0xABEE, 'X'),\n    (0xABF0, 'V'),\n    (0xABFA, 'X'),\n    (0xAC00, 'V'),\n    (0xD7A4, 'X'),\n    (0xD7B0, 'V'),\n    (0xD7C7, 'X'),\n    (0xD7CB, 'V'),\n    (0xD7FC, 'X'),\n    (0xF900, 'M', '\u8c48'),\n    (0xF901, 'M', '\u66f4'),\n    (0xF902, 'M', '\u8eca'),\n    (0xF903, 'M', '\u8cc8'),\n    (0xF904, 'M', '\u6ed1'),\n    (0xF905, 'M', '\u4e32'),\n    (0xF906, 'M', '\u53e5'),\n    (0xF907, 'M', '\u9f9c'),\n    (0xF909, 'M', '\u5951'),\n    (0xF90A, 'M', '\u91d1'),\n    (0xF90B, 'M', '\u5587'),\n    (0xF90C, 'M', '\u5948'),\n    (0xF90D, 'M', '\u61f6'),\n    (0xF90E, 'M', '\u7669'),\n    (0xF90F, 'M', '\u7f85'),\n    (0xF910, 'M', '\u863f'),\n    (0xF911, 'M', '\u87ba'),\n    (0xF912, 'M', '\u88f8'),\n    (0xF913, 'M', '\u908f'),\n    (0xF914, 'M', '\u6a02'),\n    (0xF915, 'M', '\u6d1b'),\n    (0xF916, 'M', '\u70d9'),\n    (0xF917, 'M', '\u73de'),\n    (0xF918, 'M', '\u843d'),\n    (0xF919, 'M', '\u916a'),\n    (0xF91A, 'M', '\u99f1'),\n    (0xF91B, 'M', '\u4e82'),\n    (0xF91C, 'M', '\u5375'),\n    (0xF91D, 'M', '\u6b04'),\n    (0xF91E, 'M', '\u721b'),\n    (0xF91F, 'M', '\u862d'),\n    (0xF920, 'M', '\u9e1e'),\n    (0xF921, 'M', '\u5d50'),\n    (0xF922, 'M', '\u6feb'),\n    (0xF923, 'M', '\u85cd'),\n    (0xF924, 'M', '\u8964'),\n    (0xF925, 'M', '\u62c9'),\n    (0xF926, 'M', '\u81d8'),\n    (0xF927, 'M', '\u881f'),\n    (0xF928, 'M', '\u5eca'),\n    (0xF929, 'M', '\u6717'),\n    (0xF92A, 'M', '\u6d6a'),\n    (0xF92B, 'M', '\u72fc'),\n    (0xF92C, 'M', '\u90ce'),\n    (0xF92D, 'M', '\u4f86'),\n    (0xF92E, 'M', '\u51b7'),\n    (0xF92F, 'M', '\u52de'),\n    (0xF930, 'M', '\u64c4'),\n    (0xF931, 'M', '\u6ad3'),\n    (0xF932, 'M', '\u7210'),\n    (0xF933, 'M', '\u76e7'),\n    (0xF934, 'M', '\u8001'),\n    (0xF935, 'M', '\u8606'),\n    (0xF936, 'M', '\u865c'),\n    (0xF937, 'M', '\u8def'),\n    (0xF938, 'M', '\u9732'),\n    (0xF939, 'M', '\u9b6f'),\n    (0xF93A, 'M', '\u9dfa'),\n    (0xF93B, 'M', '\u788c'),\n    (0xF93C, 'M', '\u797f'),\n    (0xF93D, 'M', '\u7da0'),\n    (0xF93E, 'M', '\u83c9'),\n    (0xF93F, 'M', '\u9304'),\n    (0xF940, 'M', '\u9e7f'),\n    (0xF941, 'M', '\u8ad6'),\n    (0xF942, 'M', '\u58df'),\n    (0xF943, 'M', '\u5f04'),\n    (0xF944, 'M', '\u7c60'),\n    (0xF945, 'M', '\u807e'),\n    (0xF946, 'M', '\u7262'),\n    (0xF947, 'M', '\u78ca'),\n    (0xF948, 'M', '\u8cc2'),\n    (0xF949, 'M', '\u96f7'),\n    ]\n\ndef _seg_40() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xF94A, 'M', '\u58d8'),\n    (0xF94B, 'M', '\u5c62'),\n    (0xF94C, 'M', '\u6a13'),\n    (0xF94D, 'M', '\u6dda'),\n    (0xF94E, 'M', '\u6f0f'),\n    (0xF94F, 'M', '\u7d2f'),\n    (0xF950, 'M', '\u7e37'),\n    (0xF951, 'M', '\u964b'),\n    (0xF952, 'M', '\u52d2'),\n    (0xF953, 'M', '\u808b'),\n    (0xF954, 'M', '\u51dc'),\n    (0xF955, 'M', '\u51cc'),\n    (0xF956, 'M', '\u7a1c'),\n    (0xF957, 'M', '\u7dbe'),\n    (0xF958, 'M', '\u83f1'),\n    (0xF959, 'M', '\u9675'),\n    (0xF95A, 'M', '\u8b80'),\n    (0xF95B, 'M', '\u62cf'),\n    (0xF95C, 'M', '\u6a02'),\n    (0xF95D, 'M', '\u8afe'),\n    (0xF95E, 'M', '\u4e39'),\n    (0xF95F, 'M', '\u5be7'),\n    (0xF960, 'M', '\u6012'),\n    (0xF961, 'M', '\u7387'),\n    (0xF962, 'M', '\u7570'),\n    (0xF963, 'M', '\u5317'),\n    (0xF964, 'M', '\u78fb'),\n    (0xF965, 'M', '\u4fbf'),\n    (0xF966, 'M', '\u5fa9'),\n    (0xF967, 'M', '\u4e0d'),\n    (0xF968, 'M', '\u6ccc'),\n    (0xF969, 'M', '\u6578'),\n    (0xF96A, 'M', '\u7d22'),\n    (0xF96B, 'M', '\u53c3'),\n    (0xF96C, 'M', '\u585e'),\n    (0xF96D, 'M', '\u7701'),\n    (0xF96E, 'M', '\u8449'),\n    (0xF96F, 'M', '\u8aaa'),\n    (0xF970, 'M', '\u6bba'),\n    (0xF971, 'M', '\u8fb0'),\n    (0xF972, 'M', '\u6c88'),\n    (0xF973, 'M', '\u62fe'),\n    (0xF974, 'M', '\u82e5'),\n    (0xF975, 'M', '\u63a0'),\n    (0xF976, 'M', '\u7565'),\n    (0xF977, 'M', '\u4eae'),\n    (0xF978, 'M', '\u5169'),\n    (0xF979, 'M', '\u51c9'),\n    (0xF97A, 'M', '\u6881'),\n    (0xF97B, 'M', '\u7ce7'),\n    (0xF97C, 'M', '\u826f'),\n    (0xF97D, 'M', '\u8ad2'),\n    (0xF97E, 'M', '\u91cf'),\n    (0xF97F, 'M', '\u52f5'),\n    (0xF980, 'M', '\u5442'),\n    (0xF981, 'M', '\u5973'),\n    (0xF982, 'M', '\u5eec'),\n    (0xF983, 'M', '\u65c5'),\n    (0xF984, 'M', '\u6ffe'),\n    (0xF985, 'M', '\u792a'),\n    (0xF986, 'M', '\u95ad'),\n    (0xF987, 'M', '\u9a6a'),\n    (0xF988, 'M', '\u9e97'),\n    (0xF989, 'M', '\u9ece'),\n    (0xF98A, 'M', '\u529b'),\n    (0xF98B, 'M', '\u66c6'),\n    (0xF98C, 'M', '\u6b77'),\n    (0xF98D, 'M', '\u8f62'),\n    (0xF98E, 'M', '\u5e74'),\n    (0xF98F, 'M', '\u6190'),\n    (0xF990, 'M', '\u6200'),\n    (0xF991, 'M', '\u649a'),\n    (0xF992, 'M', '\u6f23'),\n    (0xF993, 'M', '\u7149'),\n    (0xF994, 'M', '\u7489'),\n    (0xF995, 'M', '\u79ca'),\n    (0xF996, 'M', '\u7df4'),\n    (0xF997, 'M', '\u806f'),\n    (0xF998, 'M', '\u8f26'),\n    (0xF999, 'M', '\u84ee'),\n    (0xF99A, 'M', '\u9023'),\n    (0xF99B, 'M', '\u934a'),\n    (0xF99C, 'M', '\u5217'),\n    (0xF99D, 'M', '\u52a3'),\n    (0xF99E, 'M', '\u54bd'),\n    (0xF99F, 'M', '\u70c8'),\n    (0xF9A0, 'M', '\u88c2'),\n    (0xF9A1, 'M', '\u8aaa'),\n    (0xF9A2, 'M', '\u5ec9'),\n    (0xF9A3, 'M', '\u5ff5'),\n    (0xF9A4, 'M', '\u637b'),\n    (0xF9A5, 'M', '\u6bae'),\n    (0xF9A6, 'M', '\u7c3e'),\n    (0xF9A7, 'M', '\u7375'),\n    (0xF9A8, 'M', '\u4ee4'),\n    (0xF9A9, 'M', '\u56f9'),\n    (0xF9AA, 'M', '\u5be7'),\n    (0xF9AB, 'M', '\u5dba'),\n    (0xF9AC, 'M', '\u601c'),\n    (0xF9AD, 'M', '\u73b2'),\n    ]\n\ndef _seg_41() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xF9AE, 'M', '\u7469'),\n    (0xF9AF, 'M', '\u7f9a'),\n    (0xF9B0, 'M', '\u8046'),\n    (0xF9B1, 'M', '\u9234'),\n    (0xF9B2, 'M', '\u96f6'),\n    (0xF9B3, 'M', '\u9748'),\n    (0xF9B4, 'M', '\u9818'),\n    (0xF9B5, 'M', '\u4f8b'),\n    (0xF9B6, 'M', '\u79ae'),\n    (0xF9B7, 'M', '\u91b4'),\n    (0xF9B8, 'M', '\u96b8'),\n    (0xF9B9, 'M', '\u60e1'),\n    (0xF9BA, 'M', '\u4e86'),\n    (0xF9BB, 'M', '\u50da'),\n    (0xF9BC, 'M', '\u5bee'),\n    (0xF9BD, 'M', '\u5c3f'),\n    (0xF9BE, 'M', '\u6599'),\n    (0xF9BF, 'M', '\u6a02'),\n    (0xF9C0, 'M', '\u71ce'),\n    (0xF9C1, 'M', '\u7642'),\n    (0xF9C2, 'M', '\u84fc'),\n    (0xF9C3, 'M', '\u907c'),\n    (0xF9C4, 'M', '\u9f8d'),\n    (0xF9C5, 'M', '\u6688'),\n    (0xF9C6, 'M', '\u962e'),\n    (0xF9C7, 'M', '\u5289'),\n    (0xF9C8, 'M', '\u677b'),\n    (0xF9C9, 'M', '\u67f3'),\n    (0xF9CA, 'M', '\u6d41'),\n    (0xF9CB, 'M', '\u6e9c'),\n    (0xF9CC, 'M', '\u7409'),\n    (0xF9CD, 'M', '\u7559'),\n    (0xF9CE, 'M', '\u786b'),\n    (0xF9CF, 'M', '\u7d10'),\n    (0xF9D0, 'M', '\u985e'),\n    (0xF9D1, 'M', '\u516d'),\n    (0xF9D2, 'M', '\u622e'),\n    (0xF9D3, 'M', '\u9678'),\n    (0xF9D4, 'M', '\u502b'),\n    (0xF9D5, 'M', '\u5d19'),\n    (0xF9D6, 'M', '\u6dea'),\n    (0xF9D7, 'M', '\u8f2a'),\n    (0xF9D8, 'M', '\u5f8b'),\n    (0xF9D9, 'M', '\u6144'),\n    (0xF9DA, 'M', '\u6817'),\n    (0xF9DB, 'M', '\u7387'),\n    (0xF9DC, 'M', '\u9686'),\n    (0xF9DD, 'M', '\u5229'),\n    (0xF9DE, 'M', '\u540f'),\n    (0xF9DF, 'M', '\u5c65'),\n    (0xF9E0, 'M', '\u6613'),\n    (0xF9E1, 'M', '\u674e'),\n    (0xF9E2, 'M', '\u68a8'),\n    (0xF9E3, 'M', '\u6ce5'),\n    (0xF9E4, 'M', '\u7406'),\n    (0xF9E5, 'M', '\u75e2'),\n    (0xF9E6, 'M', '\u7f79'),\n    (0xF9E7, 'M', '\u88cf'),\n    (0xF9E8, 'M', '\u88e1'),\n    (0xF9E9, 'M', '\u91cc'),\n    (0xF9EA, 'M', '\u96e2'),\n    (0xF9EB, 'M', '\u533f'),\n    (0xF9EC, 'M', '\u6eba'),\n    (0xF9ED, 'M', '\u541d'),\n    (0xF9EE, 'M', '\u71d0'),\n    (0xF9EF, 'M', '\u7498'),\n    (0xF9F0, 'M', '\u85fa'),\n    (0xF9F1, 'M', '\u96a3'),\n    (0xF9F2, 'M', '\u9c57'),\n    (0xF9F3, 'M', '\u9e9f'),\n    (0xF9F4, 'M', '\u6797'),\n    (0xF9F5, 'M', '\u6dcb'),\n    (0xF9F6, 'M', '\u81e8'),\n    (0xF9F7, 'M', '\u7acb'),\n    (0xF9F8, 'M', '\u7b20'),\n    (0xF9F9, 'M', '\u7c92'),\n    (0xF9FA, 'M', '\u72c0'),\n    (0xF9FB, 'M', '\u7099'),\n    (0xF9FC, 'M', '\u8b58'),\n    (0xF9FD, 'M', '\u4ec0'),\n    (0xF9FE, 'M', '\u8336'),\n    (0xF9FF, 'M', '\u523a'),\n    (0xFA00, 'M', '\u5207'),\n    (0xFA01, 'M', '\u5ea6'),\n    (0xFA02, 'M', '\u62d3'),\n    (0xFA03, 'M', '\u7cd6'),\n    (0xFA04, 'M', '\u5b85'),\n    (0xFA05, 'M', '\u6d1e'),\n    (0xFA06, 'M', '\u66b4'),\n    (0xFA07, 'M', '\u8f3b'),\n    (0xFA08, 'M', '\u884c'),\n    (0xFA09, 'M', '\u964d'),\n    (0xFA0A, 'M', '\u898b'),\n    (0xFA0B, 'M', '\u5ed3'),\n    (0xFA0C, 'M', '\u5140'),\n    (0xFA0D, 'M', '\u55c0'),\n    (0xFA0E, 'V'),\n    (0xFA10, 'M', '\u585a'),\n    (0xFA11, 'V'),\n    (0xFA12, 'M', '\u6674'),\n    ]\n\ndef _seg_42() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFA13, 'V'),\n    (0xFA15, 'M', '\u51de'),\n    (0xFA16, 'M', '\u732a'),\n    (0xFA17, 'M', '\u76ca'),\n    (0xFA18, 'M', '\u793c'),\n    (0xFA19, 'M', '\u795e'),\n    (0xFA1A, 'M', '\u7965'),\n    (0xFA1B, 'M', '\u798f'),\n    (0xFA1C, 'M', '\u9756'),\n    (0xFA1D, 'M', '\u7cbe'),\n    (0xFA1E, 'M', '\u7fbd'),\n    (0xFA1F, 'V'),\n    (0xFA20, 'M', '\u8612'),\n    (0xFA21, 'V'),\n    (0xFA22, 'M', '\u8af8'),\n    (0xFA23, 'V'),\n    (0xFA25, 'M', '\u9038'),\n    (0xFA26, 'M', '\u90fd'),\n    (0xFA27, 'V'),\n    (0xFA2A, 'M', '\u98ef'),\n    (0xFA2B, 'M', '\u98fc'),\n    (0xFA2C, 'M', '\u9928'),\n    (0xFA2D, 'M', '\u9db4'),\n    (0xFA2E, 'M', '\u90de'),\n    (0xFA2F, 'M', '\u96b7'),\n    (0xFA30, 'M', '\u4fae'),\n    (0xFA31, 'M', '\u50e7'),\n    (0xFA32, 'M', '\u514d'),\n    (0xFA33, 'M', '\u52c9'),\n    (0xFA34, 'M', '\u52e4'),\n    (0xFA35, 'M', '\u5351'),\n    (0xFA36, 'M', '\u559d'),\n    (0xFA37, 'M', '\u5606'),\n    (0xFA38, 'M', '\u5668'),\n    (0xFA39, 'M', '\u5840'),\n    (0xFA3A, 'M', '\u58a8'),\n    (0xFA3B, 'M', '\u5c64'),\n    (0xFA3C, 'M', '\u5c6e'),\n    (0xFA3D, 'M', '\u6094'),\n    (0xFA3E, 'M', '\u6168'),\n    (0xFA3F, 'M', '\u618e'),\n    (0xFA40, 'M', '\u61f2'),\n    (0xFA41, 'M', '\u654f'),\n    (0xFA42, 'M', '\u65e2'),\n    (0xFA43, 'M', '\u6691'),\n    (0xFA44, 'M', '\u6885'),\n    (0xFA45, 'M', '\u6d77'),\n    (0xFA46, 'M', '\u6e1a'),\n    (0xFA47, 'M', '\u6f22'),\n    (0xFA48, 'M', '\u716e'),\n    (0xFA49, 'M', '\u722b'),\n    (0xFA4A, 'M', '\u7422'),\n    (0xFA4B, 'M', '\u7891'),\n    (0xFA4C, 'M', '\u793e'),\n    (0xFA4D, 'M', '\u7949'),\n    (0xFA4E, 'M', '\u7948'),\n    (0xFA4F, 'M', '\u7950'),\n    (0xFA50, 'M', '\u7956'),\n    (0xFA51, 'M', '\u795d'),\n    (0xFA52, 'M', '\u798d'),\n    (0xFA53, 'M', '\u798e'),\n    (0xFA54, 'M', '\u7a40'),\n    (0xFA55, 'M', '\u7a81'),\n    (0xFA56, 'M', '\u7bc0'),\n    (0xFA57, 'M', '\u7df4'),\n    (0xFA58, 'M', '\u7e09'),\n    (0xFA59, 'M', '\u7e41'),\n    (0xFA5A, 'M', '\u7f72'),\n    (0xFA5B, 'M', '\u8005'),\n    (0xFA5C, 'M', '\u81ed'),\n    (0xFA5D, 'M', '\u8279'),\n    (0xFA5F, 'M', '\u8457'),\n    (0xFA60, 'M', '\u8910'),\n    (0xFA61, 'M', '\u8996'),\n    (0xFA62, 'M', '\u8b01'),\n    (0xFA63, 'M', '\u8b39'),\n    (0xFA64, 'M', '\u8cd3'),\n    (0xFA65, 'M', '\u8d08'),\n    (0xFA66, 'M', '\u8fb6'),\n    (0xFA67, 'M', '\u9038'),\n    (0xFA68, 'M', '\u96e3'),\n    (0xFA69, 'M', '\u97ff'),\n    (0xFA6A, 'M', '\u983b'),\n    (0xFA6B, 'M', '\u6075'),\n    (0xFA6C, 'M', '\ud850\udeee'),\n    (0xFA6D, 'M', '\u8218'),\n    (0xFA6E, 'X'),\n    (0xFA70, 'M', '\u4e26'),\n    (0xFA71, 'M', '\u51b5'),\n    (0xFA72, 'M', '\u5168'),\n    (0xFA73, 'M', '\u4f80'),\n    (0xFA74, 'M', '\u5145'),\n    (0xFA75, 'M', '\u5180'),\n    (0xFA76, 'M', '\u52c7'),\n    (0xFA77, 'M', '\u52fa'),\n    (0xFA78, 'M', '\u559d'),\n    (0xFA79, 'M', '\u5555'),\n    (0xFA7A, 'M', '\u5599'),\n    (0xFA7B, 'M', '\u55e2'),\n    (0xFA7C, 'M', '\u585a'),\n    ]\n\ndef _seg_43() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFA7D, 'M', '\u58b3'),\n    (0xFA7E, 'M', '\u5944'),\n    (0xFA7F, 'M', '\u5954'),\n    (0xFA80, 'M', '\u5a62'),\n    (0xFA81, 'M', '\u5b28'),\n    (0xFA82, 'M', '\u5ed2'),\n    (0xFA83, 'M', '\u5ed9'),\n    (0xFA84, 'M', '\u5f69'),\n    (0xFA85, 'M', '\u5fad'),\n    (0xFA86, 'M', '\u60d8'),\n    (0xFA87, 'M', '\u614e'),\n    (0xFA88, 'M', '\u6108'),\n    (0xFA89, 'M', '\u618e'),\n    (0xFA8A, 'M', '\u6160'),\n    (0xFA8B, 'M', '\u61f2'),\n    (0xFA8C, 'M', '\u6234'),\n    (0xFA8D, 'M', '\u63c4'),\n    (0xFA8E, 'M', '\u641c'),\n    (0xFA8F, 'M', '\u6452'),\n    (0xFA90, 'M', '\u6556'),\n    (0xFA91, 'M', '\u6674'),\n    (0xFA92, 'M', '\u6717'),\n    (0xFA93, 'M', '\u671b'),\n    (0xFA94, 'M', '\u6756'),\n    (0xFA95, 'M', '\u6b79'),\n    (0xFA96, 'M', '\u6bba'),\n    (0xFA97, 'M', '\u6d41'),\n    (0xFA98, 'M', '\u6edb'),\n    (0xFA99, 'M', '\u6ecb'),\n    (0xFA9A, 'M', '\u6f22'),\n    (0xFA9B, 'M', '\u701e'),\n    (0xFA9C, 'M', '\u716e'),\n    (0xFA9D, 'M', '\u77a7'),\n    (0xFA9E, 'M', '\u7235'),\n    (0xFA9F, 'M', '\u72af'),\n    (0xFAA0, 'M', '\u732a'),\n    (0xFAA1, 'M', '\u7471'),\n    (0xFAA2, 'M', '\u7506'),\n    (0xFAA3, 'M', '\u753b'),\n    (0xFAA4, 'M', '\u761d'),\n    (0xFAA5, 'M', '\u761f'),\n    (0xFAA6, 'M', '\u76ca'),\n    (0xFAA7, 'M', '\u76db'),\n    (0xFAA8, 'M', '\u76f4'),\n    (0xFAA9, 'M', '\u774a'),\n    (0xFAAA, 'M', '\u7740'),\n    (0xFAAB, 'M', '\u78cc'),\n    (0xFAAC, 'M', '\u7ab1'),\n    (0xFAAD, 'M', '\u7bc0'),\n    (0xFAAE, 'M', '\u7c7b'),\n    (0xFAAF, 'M', '\u7d5b'),\n    (0xFAB0, 'M', '\u7df4'),\n    (0xFAB1, 'M', '\u7f3e'),\n    (0xFAB2, 'M', '\u8005'),\n    (0xFAB3, 'M', '\u8352'),\n    (0xFAB4, 'M', '\u83ef'),\n    (0xFAB5, 'M', '\u8779'),\n    (0xFAB6, 'M', '\u8941'),\n    (0xFAB7, 'M', '\u8986'),\n    (0xFAB8, 'M', '\u8996'),\n    (0xFAB9, 'M', '\u8abf'),\n    (0xFABA, 'M', '\u8af8'),\n    (0xFABB, 'M', '\u8acb'),\n    (0xFABC, 'M', '\u8b01'),\n    (0xFABD, 'M', '\u8afe'),\n    (0xFABE, 'M', '\u8aed'),\n    (0xFABF, 'M', '\u8b39'),\n    (0xFAC0, 'M', '\u8b8a'),\n    (0xFAC1, 'M', '\u8d08'),\n    (0xFAC2, 'M', '\u8f38'),\n    (0xFAC3, 'M', '\u9072'),\n    (0xFAC4, 'M', '\u9199'),\n    (0xFAC5, 'M', '\u9276'),\n    (0xFAC6, 'M', '\u967c'),\n    (0xFAC7, 'M', '\u96e3'),\n    (0xFAC8, 'M', '\u9756'),\n    (0xFAC9, 'M', '\u97db'),\n    (0xFACA, 'M', '\u97ff'),\n    (0xFACB, 'M', '\u980b'),\n    (0xFACC, 'M', '\u983b'),\n    (0xFACD, 'M', '\u9b12'),\n    (0xFACE, 'M', '\u9f9c'),\n    (0xFACF, 'M', '\ud84a\udc4a'),\n    (0xFAD0, 'M', '\ud84a\udc44'),\n    (0xFAD1, 'M', '\ud84c\udfd5'),\n    (0xFAD2, 'M', '\u3b9d'),\n    (0xFAD3, 'M', '\u4018'),\n    (0xFAD4, 'M', '\u4039'),\n    (0xFAD5, 'M', '\ud854\ude49'),\n    (0xFAD6, 'M', '\ud857\udcd0'),\n    (0xFAD7, 'M', '\ud85f\uded3'),\n    (0xFAD8, 'M', '\u9f43'),\n    (0xFAD9, 'M', '\u9f8e'),\n    (0xFADA, 'X'),\n    (0xFB00, 'M', 'ff'),\n    (0xFB01, 'M', 'fi'),\n    (0xFB02, 'M', 'fl'),\n    (0xFB03, 'M', 'ffi'),\n    (0xFB04, 'M', 'ffl'),\n    (0xFB05, 'M', 'st'),\n    ]\n\ndef _seg_44() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFB07, 'X'),\n    (0xFB13, 'M', '\u0574\u0576'),\n    (0xFB14, 'M', '\u0574\u0565'),\n    (0xFB15, 'M', '\u0574\u056b'),\n    (0xFB16, 'M', '\u057e\u0576'),\n    (0xFB17, 'M', '\u0574\u056d'),\n    (0xFB18, 'X'),\n    (0xFB1D, 'M', '\u05d9\u05b4'),\n    (0xFB1E, 'V'),\n    (0xFB1F, 'M', '\u05f2\u05b7'),\n    (0xFB20, 'M', '\u05e2'),\n    (0xFB21, 'M', '\u05d0'),\n    (0xFB22, 'M', '\u05d3'),\n    (0xFB23, 'M', '\u05d4'),\n    (0xFB24, 'M', '\u05db'),\n    (0xFB25, 'M', '\u05dc'),\n    (0xFB26, 'M', '\u05dd'),\n    (0xFB27, 'M', '\u05e8'),\n    (0xFB28, 'M', '\u05ea'),\n    (0xFB29, '3', '+'),\n    (0xFB2A, 'M', '\u05e9\u05c1'),\n    (0xFB2B, 'M', '\u05e9\u05c2'),\n    (0xFB2C, 'M', '\u05e9\u05bc\u05c1'),\n    (0xFB2D, 'M', '\u05e9\u05bc\u05c2'),\n    (0xFB2E, 'M', '\u05d0\u05b7'),\n    (0xFB2F, 'M', '\u05d0\u05b8'),\n    (0xFB30, 'M', '\u05d0\u05bc'),\n    (0xFB31, 'M', '\u05d1\u05bc'),\n    (0xFB32, 'M', '\u05d2\u05bc'),\n    (0xFB33, 'M', '\u05d3\u05bc'),\n    (0xFB34, 'M', '\u05d4\u05bc'),\n    (0xFB35, 'M', '\u05d5\u05bc'),\n    (0xFB36, 'M', '\u05d6\u05bc'),\n    (0xFB37, 'X'),\n    (0xFB38, 'M', '\u05d8\u05bc'),\n    (0xFB39, 'M', '\u05d9\u05bc'),\n    (0xFB3A, 'M', '\u05da\u05bc'),\n    (0xFB3B, 'M', '\u05db\u05bc'),\n    (0xFB3C, 'M', '\u05dc\u05bc'),\n    (0xFB3D, 'X'),\n    (0xFB3E, 'M', '\u05de\u05bc'),\n    (0xFB3F, 'X'),\n    (0xFB40, 'M', '\u05e0\u05bc'),\n    (0xFB41, 'M', '\u05e1\u05bc'),\n    (0xFB42, 'X'),\n    (0xFB43, 'M', '\u05e3\u05bc'),\n    (0xFB44, 'M', '\u05e4\u05bc'),\n    (0xFB45, 'X'),\n    (0xFB46, 'M', '\u05e6\u05bc'),\n    (0xFB47, 'M', '\u05e7\u05bc'),\n    (0xFB48, 'M', '\u05e8\u05bc'),\n    (0xFB49, 'M', '\u05e9\u05bc'),\n    (0xFB4A, 'M', '\u05ea\u05bc'),\n    (0xFB4B, 'M', '\u05d5\u05b9'),\n    (0xFB4C, 'M', '\u05d1\u05bf'),\n    (0xFB4D, 'M', '\u05db\u05bf'),\n    (0xFB4E, 'M', '\u05e4\u05bf'),\n    (0xFB4F, 'M', '\u05d0\u05dc'),\n    (0xFB50, 'M', '\u0671'),\n    (0xFB52, 'M', '\u067b'),\n    (0xFB56, 'M', '\u067e'),\n    (0xFB5A, 'M', '\u0680'),\n    (0xFB5E, 'M', '\u067a'),\n    (0xFB62, 'M', '\u067f'),\n    (0xFB66, 'M', '\u0679'),\n    (0xFB6A, 'M', '\u06a4'),\n    (0xFB6E, 'M', '\u06a6'),\n    (0xFB72, 'M', '\u0684'),\n    (0xFB76, 'M', '\u0683'),\n    (0xFB7A, 'M', '\u0686'),\n    (0xFB7E, 'M', '\u0687'),\n    (0xFB82, 'M', '\u068d'),\n    (0xFB84, 'M', '\u068c'),\n    (0xFB86, 'M', '\u068e'),\n    (0xFB88, 'M', '\u0688'),\n    (0xFB8A, 'M', '\u0698'),\n    (0xFB8C, 'M', '\u0691'),\n    (0xFB8E, 'M', '\u06a9'),\n    (0xFB92, 'M', '\u06af'),\n    (0xFB96, 'M', '\u06b3'),\n    (0xFB9A, 'M', '\u06b1'),\n    (0xFB9E, 'M', '\u06ba'),\n    (0xFBA0, 'M', '\u06bb'),\n    (0xFBA4, 'M', '\u06c0'),\n    (0xFBA6, 'M', '\u06c1'),\n    (0xFBAA, 'M', '\u06be'),\n    (0xFBAE, 'M', '\u06d2'),\n    (0xFBB0, 'M', '\u06d3'),\n    (0xFBB2, 'V'),\n    (0xFBC3, 'X'),\n    (0xFBD3, 'M', '\u06ad'),\n    (0xFBD7, 'M', '\u06c7'),\n    (0xFBD9, 'M', '\u06c6'),\n    (0xFBDB, 'M', '\u06c8'),\n    (0xFBDD, 'M', '\u06c7\u0674'),\n    (0xFBDE, 'M', '\u06cb'),\n    (0xFBE0, 'M', '\u06c5'),\n    (0xFBE2, 'M', '\u06c9'),\n    (0xFBE4, 'M', '\u06d0'),\n    (0xFBE8, 'M', '\u0649'),\n    ]\n\ndef _seg_45() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFBEA, 'M', '\u0626\u0627'),\n    (0xFBEC, 'M', '\u0626\u06d5'),\n    (0xFBEE, 'M', '\u0626\u0648'),\n    (0xFBF0, 'M', '\u0626\u06c7'),\n    (0xFBF2, 'M', '\u0626\u06c6'),\n    (0xFBF4, 'M', '\u0626\u06c8'),\n    (0xFBF6, 'M', '\u0626\u06d0'),\n    (0xFBF9, 'M', '\u0626\u0649'),\n    (0xFBFC, 'M', '\u06cc'),\n    (0xFC00, 'M', '\u0626\u062c'),\n    (0xFC01, 'M', '\u0626\u062d'),\n    (0xFC02, 'M', '\u0626\u0645'),\n    (0xFC03, 'M', '\u0626\u0649'),\n    (0xFC04, 'M', '\u0626\u064a'),\n    (0xFC05, 'M', '\u0628\u062c'),\n    (0xFC06, 'M', '\u0628\u062d'),\n    (0xFC07, 'M', '\u0628\u062e'),\n    (0xFC08, 'M', '\u0628\u0645'),\n    (0xFC09, 'M', '\u0628\u0649'),\n    (0xFC0A, 'M', '\u0628\u064a'),\n    (0xFC0B, 'M', '\u062a\u062c'),\n    (0xFC0C, 'M', '\u062a\u062d'),\n    (0xFC0D, 'M', '\u062a\u062e'),\n    (0xFC0E, 'M', '\u062a\u0645'),\n    (0xFC0F, 'M', '\u062a\u0649'),\n    (0xFC10, 'M', '\u062a\u064a'),\n    (0xFC11, 'M', '\u062b\u062c'),\n    (0xFC12, 'M', '\u062b\u0645'),\n    (0xFC13, 'M', '\u062b\u0649'),\n    (0xFC14, 'M', '\u062b\u064a'),\n    (0xFC15, 'M', '\u062c\u062d'),\n    (0xFC16, 'M', '\u062c\u0645'),\n    (0xFC17, 'M', '\u062d\u062c'),\n    (0xFC18, 'M', '\u062d\u0645'),\n    (0xFC19, 'M', '\u062e\u062c'),\n    (0xFC1A, 'M', '\u062e\u062d'),\n    (0xFC1B, 'M', '\u062e\u0645'),\n    (0xFC1C, 'M', '\u0633\u062c'),\n    (0xFC1D, 'M', '\u0633\u062d'),\n    (0xFC1E, 'M', '\u0633\u062e'),\n    (0xFC1F, 'M', '\u0633\u0645'),\n    (0xFC20, 'M', '\u0635\u062d'),\n    (0xFC21, 'M', '\u0635\u0645'),\n    (0xFC22, 'M', '\u0636\u062c'),\n    (0xFC23, 'M', '\u0636\u062d'),\n    (0xFC24, 'M', '\u0636\u062e'),\n    (0xFC25, 'M', '\u0636\u0645'),\n    (0xFC26, 'M', '\u0637\u062d'),\n    (0xFC27, 'M', '\u0637\u0645'),\n    (0xFC28, 'M', '\u0638\u0645'),\n    (0xFC29, 'M', '\u0639\u062c'),\n    (0xFC2A, 'M', '\u0639\u0645'),\n    (0xFC2B, 'M', '\u063a\u062c'),\n    (0xFC2C, 'M', '\u063a\u0645'),\n    (0xFC2D, 'M', '\u0641\u062c'),\n    (0xFC2E, 'M', '\u0641\u062d'),\n    (0xFC2F, 'M', '\u0641\u062e'),\n    (0xFC30, 'M', '\u0641\u0645'),\n    (0xFC31, 'M', '\u0641\u0649'),\n    (0xFC32, 'M', '\u0641\u064a'),\n    (0xFC33, 'M', '\u0642\u062d'),\n    (0xFC34, 'M', '\u0642\u0645'),\n    (0xFC35, 'M', '\u0642\u0649'),\n    (0xFC36, 'M', '\u0642\u064a'),\n    (0xFC37, 'M', '\u0643\u0627'),\n    (0xFC38, 'M', '\u0643\u062c'),\n    (0xFC39, 'M', '\u0643\u062d'),\n    (0xFC3A, 'M', '\u0643\u062e'),\n    (0xFC3B, 'M', '\u0643\u0644'),\n    (0xFC3C, 'M', '\u0643\u0645'),\n    (0xFC3D, 'M', '\u0643\u0649'),\n    (0xFC3E, 'M', '\u0643\u064a'),\n    (0xFC3F, 'M', '\u0644\u062c'),\n    (0xFC40, 'M', '\u0644\u062d'),\n    (0xFC41, 'M', '\u0644\u062e'),\n    (0xFC42, 'M', '\u0644\u0645'),\n    (0xFC43, 'M', '\u0644\u0649'),\n    (0xFC44, 'M', '\u0644\u064a'),\n    (0xFC45, 'M', '\u0645\u062c'),\n    (0xFC46, 'M', '\u0645\u062d'),\n    (0xFC47, 'M', '\u0645\u062e'),\n    (0xFC48, 'M', '\u0645\u0645'),\n    (0xFC49, 'M', '\u0645\u0649'),\n    (0xFC4A, 'M', '\u0645\u064a'),\n    (0xFC4B, 'M', '\u0646\u062c'),\n    (0xFC4C, 'M', '\u0646\u062d'),\n    (0xFC4D, 'M', '\u0646\u062e'),\n    (0xFC4E, 'M', '\u0646\u0645'),\n    (0xFC4F, 'M', '\u0646\u0649'),\n    (0xFC50, 'M', '\u0646\u064a'),\n    (0xFC51, 'M', '\u0647\u062c'),\n    (0xFC52, 'M', '\u0647\u0645'),\n    (0xFC53, 'M', '\u0647\u0649'),\n    (0xFC54, 'M', '\u0647\u064a'),\n    (0xFC55, 'M', '\u064a\u062c'),\n    (0xFC56, 'M', '\u064a\u062d'),\n    (0xFC57, 'M', '\u064a\u062e'),\n    (0xFC58, 'M', '\u064a\u0645'),\n    (0xFC59, 'M', '\u064a\u0649'),\n    (0xFC5A, 'M', '\u064a\u064a'),\n    ]\n\ndef _seg_46() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFC5B, 'M', '\u0630\u0670'),\n    (0xFC5C, 'M', '\u0631\u0670'),\n    (0xFC5D, 'M', '\u0649\u0670'),\n    (0xFC5E, '3', ' \u064c\u0651'),\n    (0xFC5F, '3', ' \u064d\u0651'),\n    (0xFC60, '3', ' \u064e\u0651'),\n    (0xFC61, '3', ' \u064f\u0651'),\n    (0xFC62, '3', ' \u0650\u0651'),\n    (0xFC63, '3', ' \u0651\u0670'),\n    (0xFC64, 'M', '\u0626\u0631'),\n    (0xFC65, 'M', '\u0626\u0632'),\n    (0xFC66, 'M', '\u0626\u0645'),\n    (0xFC67, 'M', '\u0626\u0646'),\n    (0xFC68, 'M', '\u0626\u0649'),\n    (0xFC69, 'M', '\u0626\u064a'),\n    (0xFC6A, 'M', '\u0628\u0631'),\n    (0xFC6B, 'M', '\u0628\u0632'),\n    (0xFC6C, 'M', '\u0628\u0645'),\n    (0xFC6D, 'M', '\u0628\u0646'),\n    (0xFC6E, 'M', '\u0628\u0649'),\n    (0xFC6F, 'M', '\u0628\u064a'),\n    (0xFC70, 'M', '\u062a\u0631'),\n    (0xFC71, 'M', '\u062a\u0632'),\n    (0xFC72, 'M', '\u062a\u0645'),\n    (0xFC73, 'M', '\u062a\u0646'),\n    (0xFC74, 'M', '\u062a\u0649'),\n    (0xFC75, 'M', '\u062a\u064a'),\n    (0xFC76, 'M', '\u062b\u0631'),\n    (0xFC77, 'M', '\u062b\u0632'),\n    (0xFC78, 'M', '\u062b\u0645'),\n    (0xFC79, 'M', '\u062b\u0646'),\n    (0xFC7A, 'M', '\u062b\u0649'),\n    (0xFC7B, 'M', '\u062b\u064a'),\n    (0xFC7C, 'M', '\u0641\u0649'),\n    (0xFC7D, 'M', '\u0641\u064a'),\n    (0xFC7E, 'M', '\u0642\u0649'),\n    (0xFC7F, 'M', '\u0642\u064a'),\n    (0xFC80, 'M', '\u0643\u0627'),\n    (0xFC81, 'M', '\u0643\u0644'),\n    (0xFC82, 'M', '\u0643\u0645'),\n    (0xFC83, 'M', '\u0643\u0649'),\n    (0xFC84, 'M', '\u0643\u064a'),\n    (0xFC85, 'M', '\u0644\u0645'),\n    (0xFC86, 'M', '\u0644\u0649'),\n    (0xFC87, 'M', '\u0644\u064a'),\n    (0xFC88, 'M', '\u0645\u0627'),\n    (0xFC89, 'M', '\u0645\u0645'),\n    (0xFC8A, 'M', '\u0646\u0631'),\n    (0xFC8B, 'M', '\u0646\u0632'),\n    (0xFC8C, 'M', '\u0646\u0645'),\n    (0xFC8D, 'M', '\u0646\u0646'),\n    (0xFC8E, 'M', '\u0646\u0649'),\n    (0xFC8F, 'M', '\u0646\u064a'),\n    (0xFC90, 'M', '\u0649\u0670'),\n    (0xFC91, 'M', '\u064a\u0631'),\n    (0xFC92, 'M', '\u064a\u0632'),\n    (0xFC93, 'M', '\u064a\u0645'),\n    (0xFC94, 'M', '\u064a\u0646'),\n    (0xFC95, 'M', '\u064a\u0649'),\n    (0xFC96, 'M', '\u064a\u064a'),\n    (0xFC97, 'M', '\u0626\u062c'),\n    (0xFC98, 'M', '\u0626\u062d'),\n    (0xFC99, 'M', '\u0626\u062e'),\n    (0xFC9A, 'M', '\u0626\u0645'),\n    (0xFC9B, 'M', '\u0626\u0647'),\n    (0xFC9C, 'M', '\u0628\u062c'),\n    (0xFC9D, 'M', '\u0628\u062d'),\n    (0xFC9E, 'M', '\u0628\u062e'),\n    (0xFC9F, 'M', '\u0628\u0645'),\n    (0xFCA0, 'M', '\u0628\u0647'),\n    (0xFCA1, 'M', '\u062a\u062c'),\n    (0xFCA2, 'M', '\u062a\u062d'),\n    (0xFCA3, 'M', '\u062a\u062e'),\n    (0xFCA4, 'M', '\u062a\u0645'),\n    (0xFCA5, 'M', '\u062a\u0647'),\n    (0xFCA6, 'M', '\u062b\u0645'),\n    (0xFCA7, 'M', '\u062c\u062d'),\n    (0xFCA8, 'M', '\u062c\u0645'),\n    (0xFCA9, 'M', '\u062d\u062c'),\n    (0xFCAA, 'M', '\u062d\u0645'),\n    (0xFCAB, 'M', '\u062e\u062c'),\n    (0xFCAC, 'M', '\u062e\u0645'),\n    (0xFCAD, 'M', '\u0633\u062c'),\n    (0xFCAE, 'M', '\u0633\u062d'),\n    (0xFCAF, 'M', '\u0633\u062e'),\n    (0xFCB0, 'M', '\u0633\u0645'),\n    (0xFCB1, 'M', '\u0635\u062d'),\n    (0xFCB2, 'M', '\u0635\u062e'),\n    (0xFCB3, 'M', '\u0635\u0645'),\n    (0xFCB4, 'M', '\u0636\u062c'),\n    (0xFCB5, 'M', '\u0636\u062d'),\n    (0xFCB6, 'M', '\u0636\u062e'),\n    (0xFCB7, 'M', '\u0636\u0645'),\n    (0xFCB8, 'M', '\u0637\u062d'),\n    (0xFCB9, 'M', '\u0638\u0645'),\n    (0xFCBA, 'M', '\u0639\u062c'),\n    (0xFCBB, 'M', '\u0639\u0645'),\n    (0xFCBC, 'M', '\u063a\u062c'),\n    (0xFCBD, 'M', '\u063a\u0645'),\n    (0xFCBE, 'M', '\u0641\u062c'),\n    ]\n\ndef _seg_47() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFCBF, 'M', '\u0641\u062d'),\n    (0xFCC0, 'M', '\u0641\u062e'),\n    (0xFCC1, 'M', '\u0641\u0645'),\n    (0xFCC2, 'M', '\u0642\u062d'),\n    (0xFCC3, 'M', '\u0642\u0645'),\n    (0xFCC4, 'M', '\u0643\u062c'),\n    (0xFCC5, 'M', '\u0643\u062d'),\n    (0xFCC6, 'M', '\u0643\u062e'),\n    (0xFCC7, 'M', '\u0643\u0644'),\n    (0xFCC8, 'M', '\u0643\u0645'),\n    (0xFCC9, 'M', '\u0644\u062c'),\n    (0xFCCA, 'M', '\u0644\u062d'),\n    (0xFCCB, 'M', '\u0644\u062e'),\n    (0xFCCC, 'M', '\u0644\u0645'),\n    (0xFCCD, 'M', '\u0644\u0647'),\n    (0xFCCE, 'M', '\u0645\u062c'),\n    (0xFCCF, 'M', '\u0645\u062d'),\n    (0xFCD0, 'M', '\u0645\u062e'),\n    (0xFCD1, 'M', '\u0645\u0645'),\n    (0xFCD2, 'M', '\u0646\u062c'),\n    (0xFCD3, 'M', '\u0646\u062d'),\n    (0xFCD4, 'M', '\u0646\u062e'),\n    (0xFCD5, 'M', '\u0646\u0645'),\n    (0xFCD6, 'M', '\u0646\u0647'),\n    (0xFCD7, 'M', '\u0647\u062c'),\n    (0xFCD8, 'M', '\u0647\u0645'),\n    (0xFCD9, 'M', '\u0647\u0670'),\n    (0xFCDA, 'M', '\u064a\u062c'),\n    (0xFCDB, 'M', '\u064a\u062d'),\n    (0xFCDC, 'M', '\u064a\u062e'),\n    (0xFCDD, 'M', '\u064a\u0645'),\n    (0xFCDE, 'M', '\u064a\u0647'),\n    (0xFCDF, 'M', '\u0626\u0645'),\n    (0xFCE0, 'M', '\u0626\u0647'),\n    (0xFCE1, 'M', '\u0628\u0645'),\n    (0xFCE2, 'M', '\u0628\u0647'),\n    (0xFCE3, 'M', '\u062a\u0645'),\n    (0xFCE4, 'M', '\u062a\u0647'),\n    (0xFCE5, 'M', '\u062b\u0645'),\n    (0xFCE6, 'M', '\u062b\u0647'),\n    (0xFCE7, 'M', '\u0633\u0645'),\n    (0xFCE8, 'M', '\u0633\u0647'),\n    (0xFCE9, 'M', '\u0634\u0645'),\n    (0xFCEA, 'M', '\u0634\u0647'),\n    (0xFCEB, 'M', '\u0643\u0644'),\n    (0xFCEC, 'M', '\u0643\u0645'),\n    (0xFCED, 'M', '\u0644\u0645'),\n    (0xFCEE, 'M', '\u0646\u0645'),\n    (0xFCEF, 'M', '\u0646\u0647'),\n    (0xFCF0, 'M', '\u064a\u0645'),\n    (0xFCF1, 'M', '\u064a\u0647'),\n    (0xFCF2, 'M', '\u0640\u064e\u0651'),\n    (0xFCF3, 'M', '\u0640\u064f\u0651'),\n    (0xFCF4, 'M', '\u0640\u0650\u0651'),\n    (0xFCF5, 'M', '\u0637\u0649'),\n    (0xFCF6, 'M', '\u0637\u064a'),\n    (0xFCF7, 'M', '\u0639\u0649'),\n    (0xFCF8, 'M', '\u0639\u064a'),\n    (0xFCF9, 'M', '\u063a\u0649'),\n    (0xFCFA, 'M', '\u063a\u064a'),\n    (0xFCFB, 'M', '\u0633\u0649'),\n    (0xFCFC, 'M', '\u0633\u064a'),\n    (0xFCFD, 'M', '\u0634\u0649'),\n    (0xFCFE, 'M', '\u0634\u064a'),\n    (0xFCFF, 'M', '\u062d\u0649'),\n    (0xFD00, 'M', '\u062d\u064a'),\n    (0xFD01, 'M', '\u062c\u0649'),\n    (0xFD02, 'M', '\u062c\u064a'),\n    (0xFD03, 'M', '\u062e\u0649'),\n    (0xFD04, 'M', '\u062e\u064a'),\n    (0xFD05, 'M', '\u0635\u0649'),\n    (0xFD06, 'M', '\u0635\u064a'),\n    (0xFD07, 'M', '\u0636\u0649'),\n    (0xFD08, 'M', '\u0636\u064a'),\n    (0xFD09, 'M', '\u0634\u062c'),\n    (0xFD0A, 'M', '\u0634\u062d'),\n    (0xFD0B, 'M', '\u0634\u062e'),\n    (0xFD0C, 'M', '\u0634\u0645'),\n    (0xFD0D, 'M', '\u0634\u0631'),\n    (0xFD0E, 'M', '\u0633\u0631'),\n    (0xFD0F, 'M', '\u0635\u0631'),\n    (0xFD10, 'M', '\u0636\u0631'),\n    (0xFD11, 'M', '\u0637\u0649'),\n    (0xFD12, 'M', '\u0637\u064a'),\n    (0xFD13, 'M', '\u0639\u0649'),\n    (0xFD14, 'M', '\u0639\u064a'),\n    (0xFD15, 'M', '\u063a\u0649'),\n    (0xFD16, 'M', '\u063a\u064a'),\n    (0xFD17, 'M', '\u0633\u0649'),\n    (0xFD18, 'M', '\u0633\u064a'),\n    (0xFD19, 'M', '\u0634\u0649'),\n    (0xFD1A, 'M', '\u0634\u064a'),\n    (0xFD1B, 'M', '\u062d\u0649'),\n    (0xFD1C, 'M', '\u062d\u064a'),\n    (0xFD1D, 'M', '\u062c\u0649'),\n    (0xFD1E, 'M', '\u062c\u064a'),\n    (0xFD1F, 'M', '\u062e\u0649'),\n    (0xFD20, 'M', '\u062e\u064a'),\n    (0xFD21, 'M', '\u0635\u0649'),\n    (0xFD22, 'M', '\u0635\u064a'),\n    ]\n\ndef _seg_48() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFD23, 'M', '\u0636\u0649'),\n    (0xFD24, 'M', '\u0636\u064a'),\n    (0xFD25, 'M', '\u0634\u062c'),\n    (0xFD26, 'M', '\u0634\u062d'),\n    (0xFD27, 'M', '\u0634\u062e'),\n    (0xFD28, 'M', '\u0634\u0645'),\n    (0xFD29, 'M', '\u0634\u0631'),\n    (0xFD2A, 'M', '\u0633\u0631'),\n    (0xFD2B, 'M', '\u0635\u0631'),\n    (0xFD2C, 'M', '\u0636\u0631'),\n    (0xFD2D, 'M', '\u0634\u062c'),\n    (0xFD2E, 'M', '\u0634\u062d'),\n    (0xFD2F, 'M', '\u0634\u062e'),\n    (0xFD30, 'M', '\u0634\u0645'),\n    (0xFD31, 'M', '\u0633\u0647'),\n    (0xFD32, 'M', '\u0634\u0647'),\n    (0xFD33, 'M', '\u0637\u0645'),\n    (0xFD34, 'M', '\u0633\u062c'),\n    (0xFD35, 'M', '\u0633\u062d'),\n    (0xFD36, 'M', '\u0633\u062e'),\n    (0xFD37, 'M', '\u0634\u062c'),\n    (0xFD38, 'M', '\u0634\u062d'),\n    (0xFD39, 'M', '\u0634\u062e'),\n    (0xFD3A, 'M', '\u0637\u0645'),\n    (0xFD3B, 'M', '\u0638\u0645'),\n    (0xFD3C, 'M', '\u0627\u064b'),\n    (0xFD3E, 'V'),\n    (0xFD50, 'M', '\u062a\u062c\u0645'),\n    (0xFD51, 'M', '\u062a\u062d\u062c'),\n    (0xFD53, 'M', '\u062a\u062d\u0645'),\n    (0xFD54, 'M', '\u062a\u062e\u0645'),\n    (0xFD55, 'M', '\u062a\u0645\u062c'),\n    (0xFD56, 'M', '\u062a\u0645\u062d'),\n    (0xFD57, 'M', '\u062a\u0645\u062e'),\n    (0xFD58, 'M', '\u062c\u0645\u062d'),\n    (0xFD5A, 'M', '\u062d\u0645\u064a'),\n    (0xFD5B, 'M', '\u062d\u0645\u0649'),\n    (0xFD5C, 'M', '\u0633\u062d\u062c'),\n    (0xFD5D, 'M', '\u0633\u062c\u062d'),\n    (0xFD5E, 'M', '\u0633\u062c\u0649'),\n    (0xFD5F, 'M', '\u0633\u0645\u062d'),\n    (0xFD61, 'M', '\u0633\u0645\u062c'),\n    (0xFD62, 'M', '\u0633\u0645\u0645'),\n    (0xFD64, 'M', '\u0635\u062d\u062d'),\n    (0xFD66, 'M', '\u0635\u0645\u0645'),\n    (0xFD67, 'M', '\u0634\u062d\u0645'),\n    (0xFD69, 'M', '\u0634\u062c\u064a'),\n    (0xFD6A, 'M', '\u0634\u0645\u062e'),\n    (0xFD6C, 'M', '\u0634\u0645\u0645'),\n    (0xFD6E, 'M', '\u0636\u062d\u0649'),\n    (0xFD6F, 'M', '\u0636\u062e\u0645'),\n    (0xFD71, 'M', '\u0637\u0645\u062d'),\n    (0xFD73, 'M', '\u0637\u0645\u0645'),\n    (0xFD74, 'M', '\u0637\u0645\u064a'),\n    (0xFD75, 'M', '\u0639\u062c\u0645'),\n    (0xFD76, 'M', '\u0639\u0645\u0645'),\n    (0xFD78, 'M', '\u0639\u0645\u0649'),\n    (0xFD79, 'M', '\u063a\u0645\u0645'),\n    (0xFD7A, 'M', '\u063a\u0645\u064a'),\n    (0xFD7B, 'M', '\u063a\u0645\u0649'),\n    (0xFD7C, 'M', '\u0641\u062e\u0645'),\n    (0xFD7E, 'M', '\u0642\u0645\u062d'),\n    (0xFD7F, 'M', '\u0642\u0645\u0645'),\n    (0xFD80, 'M', '\u0644\u062d\u0645'),\n    (0xFD81, 'M', '\u0644\u062d\u064a'),\n    (0xFD82, 'M', '\u0644\u062d\u0649'),\n    (0xFD83, 'M', '\u0644\u062c\u062c'),\n    (0xFD85, 'M', '\u0644\u062e\u0645'),\n    (0xFD87, 'M', '\u0644\u0645\u062d'),\n    (0xFD89, 'M', '\u0645\u062d\u062c'),\n    (0xFD8A, 'M', '\u0645\u062d\u0645'),\n    (0xFD8B, 'M', '\u0645\u062d\u064a'),\n    (0xFD8C, 'M', '\u0645\u062c\u062d'),\n    (0xFD8D, 'M', '\u0645\u062c\u0645'),\n    (0xFD8E, 'M', '\u0645\u062e\u062c'),\n    (0xFD8F, 'M', '\u0645\u062e\u0645'),\n    (0xFD90, 'X'),\n    (0xFD92, 'M', '\u0645\u062c\u062e'),\n    (0xFD93, 'M', '\u0647\u0645\u062c'),\n    (0xFD94, 'M', '\u0647\u0645\u0645'),\n    (0xFD95, 'M', '\u0646\u062d\u0645'),\n    (0xFD96, 'M', '\u0646\u062d\u0649'),\n    (0xFD97, 'M', '\u0646\u062c\u0645'),\n    (0xFD99, 'M', '\u0646\u062c\u0649'),\n    (0xFD9A, 'M', '\u0646\u0645\u064a'),\n    (0xFD9B, 'M', '\u0646\u0645\u0649'),\n    (0xFD9C, 'M', '\u064a\u0645\u0645'),\n    (0xFD9E, 'M', '\u0628\u062e\u064a'),\n    (0xFD9F, 'M', '\u062a\u062c\u064a'),\n    (0xFDA0, 'M', '\u062a\u062c\u0649'),\n    (0xFDA1, 'M', '\u062a\u062e\u064a'),\n    (0xFDA2, 'M', '\u062a\u062e\u0649'),\n    (0xFDA3, 'M', '\u062a\u0645\u064a'),\n    (0xFDA4, 'M', '\u062a\u0645\u0649'),\n    (0xFDA5, 'M', '\u062c\u0645\u064a'),\n    (0xFDA6, 'M', '\u062c\u062d\u0649'),\n    (0xFDA7, 'M', '\u062c\u0645\u0649'),\n    (0xFDA8, 'M', '\u0633\u062e\u0649'),\n    (0xFDA9, 'M', '\u0635\u062d\u064a'),\n    (0xFDAA, 'M', '\u0634\u062d\u064a'),\n    ]\n\ndef _seg_49() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFDAB, 'M', '\u0636\u062d\u064a'),\n    (0xFDAC, 'M', '\u0644\u062c\u064a'),\n    (0xFDAD, 'M', '\u0644\u0645\u064a'),\n    (0xFDAE, 'M', '\u064a\u062d\u064a'),\n    (0xFDAF, 'M', '\u064a\u062c\u064a'),\n    (0xFDB0, 'M', '\u064a\u0645\u064a'),\n    (0xFDB1, 'M', '\u0645\u0645\u064a'),\n    (0xFDB2, 'M', '\u0642\u0645\u064a'),\n    (0xFDB3, 'M', '\u0646\u062d\u064a'),\n    (0xFDB4, 'M', '\u0642\u0645\u062d'),\n    (0xFDB5, 'M', '\u0644\u062d\u0645'),\n    (0xFDB6, 'M', '\u0639\u0645\u064a'),\n    (0xFDB7, 'M', '\u0643\u0645\u064a'),\n    (0xFDB8, 'M', '\u0646\u062c\u062d'),\n    (0xFDB9, 'M', '\u0645\u062e\u064a'),\n    (0xFDBA, 'M', '\u0644\u062c\u0645'),\n    (0xFDBB, 'M', '\u0643\u0645\u0645'),\n    (0xFDBC, 'M', '\u0644\u062c\u0645'),\n    (0xFDBD, 'M', '\u0646\u062c\u062d'),\n    (0xFDBE, 'M', '\u062c\u062d\u064a'),\n    (0xFDBF, 'M', '\u062d\u062c\u064a'),\n    (0xFDC0, 'M', '\u0645\u062c\u064a'),\n    (0xFDC1, 'M', '\u0641\u0645\u064a'),\n    (0xFDC2, 'M', '\u0628\u062d\u064a'),\n    (0xFDC3, 'M', '\u0643\u0645\u0645'),\n    (0xFDC4, 'M', '\u0639\u062c\u0645'),\n    (0xFDC5, 'M', '\u0635\u0645\u0645'),\n    (0xFDC6, 'M', '\u0633\u062e\u064a'),\n    (0xFDC7, 'M', '\u0646\u062c\u064a'),\n    (0xFDC8, 'X'),\n    (0xFDCF, 'V'),\n    (0xFDD0, 'X'),\n    (0xFDF0, 'M', '\u0635\u0644\u06d2'),\n    (0xFDF1, 'M', '\u0642\u0644\u06d2'),\n    (0xFDF2, 'M', '\u0627\u0644\u0644\u0647'),\n    (0xFDF3, 'M', '\u0627\u0643\u0628\u0631'),\n    (0xFDF4, 'M', '\u0645\u062d\u0645\u062f'),\n    (0xFDF5, 'M', '\u0635\u0644\u0639\u0645'),\n    (0xFDF6, 'M', '\u0631\u0633\u0648\u0644'),\n    (0xFDF7, 'M', '\u0639\u0644\u064a\u0647'),\n    (0xFDF8, 'M', '\u0648\u0633\u0644\u0645'),\n    (0xFDF9, 'M', '\u0635\u0644\u0649'),\n    (0xFDFA, '3', '\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 \u0639\u0644\u064a\u0647 \u0648\u0633\u0644\u0645'),\n    (0xFDFB, '3', '\u062c\u0644 \u062c\u0644\u0627\u0644\u0647'),\n    (0xFDFC, 'M', '\u0631\u06cc\u0627\u0644'),\n    (0xFDFD, 'V'),\n    (0xFE00, 'I'),\n    (0xFE10, '3', ','),\n    (0xFE11, 'M', '\u3001'),\n    (0xFE12, 'X'),\n    (0xFE13, '3', ':'),\n    (0xFE14, '3', ';'),\n    (0xFE15, '3', '!'),\n    (0xFE16, '3', '?'),\n    (0xFE17, 'M', '\u3016'),\n    (0xFE18, 'M', '\u3017'),\n    (0xFE19, 'X'),\n    (0xFE20, 'V'),\n    (0xFE30, 'X'),\n    (0xFE31, 'M', '\u2014'),\n    (0xFE32, 'M', '\u2013'),\n    (0xFE33, '3', '_'),\n    (0xFE35, '3', '('),\n    (0xFE36, '3', ')'),\n    (0xFE37, '3', '{'),\n    (0xFE38, '3', '}'),\n    (0xFE39, 'M', '\u3014'),\n    (0xFE3A, 'M', '\u3015'),\n    (0xFE3B, 'M', '\u3010'),\n    (0xFE3C, 'M', '\u3011'),\n    (0xFE3D, 'M', '\u300a'),\n    (0xFE3E, 'M', '\u300b'),\n    (0xFE3F, 'M', '\u3008'),\n    (0xFE40, 'M', '\u3009'),\n    (0xFE41, 'M', '\u300c'),\n    (0xFE42, 'M', '\u300d'),\n    (0xFE43, 'M', '\u300e'),\n    (0xFE44, 'M', '\u300f'),\n    (0xFE45, 'V'),\n    (0xFE47, '3', '['),\n    (0xFE48, '3', ']'),\n    (0xFE49, '3', ' \u0305'),\n    (0xFE4D, '3', '_'),\n    (0xFE50, '3', ','),\n    (0xFE51, 'M', '\u3001'),\n    (0xFE52, 'X'),\n    (0xFE54, '3', ';'),\n    (0xFE55, '3', ':'),\n    (0xFE56, '3', '?'),\n    (0xFE57, '3', '!'),\n    (0xFE58, 'M', '\u2014'),\n    (0xFE59, '3', '('),\n    (0xFE5A, '3', ')'),\n    (0xFE5B, '3', '{'),\n    (0xFE5C, '3', '}'),\n    (0xFE5D, 'M', '\u3014'),\n    (0xFE5E, 'M', '\u3015'),\n    (0xFE5F, '3', '#'),\n    (0xFE60, '3', '&'),\n    (0xFE61, '3', '*'),\n    ]\n\ndef _seg_50() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFE62, '3', '+'),\n    (0xFE63, 'M', '-'),\n    (0xFE64, '3', '<'),\n    (0xFE65, '3', '>'),\n    (0xFE66, '3', '='),\n    (0xFE67, 'X'),\n    (0xFE68, '3', '\\\\'),\n    (0xFE69, '3', '$'),\n    (0xFE6A, '3', '%'),\n    (0xFE6B, '3', '@'),\n    (0xFE6C, 'X'),\n    (0xFE70, '3', ' \u064b'),\n    (0xFE71, 'M', '\u0640\u064b'),\n    (0xFE72, '3', ' \u064c'),\n    (0xFE73, 'V'),\n    (0xFE74, '3', ' \u064d'),\n    (0xFE75, 'X'),\n    (0xFE76, '3', ' \u064e'),\n    (0xFE77, 'M', '\u0640\u064e'),\n    (0xFE78, '3', ' \u064f'),\n    (0xFE79, 'M', '\u0640\u064f'),\n    (0xFE7A, '3', ' \u0650'),\n    (0xFE7B, 'M', '\u0640\u0650'),\n    (0xFE7C, '3', ' \u0651'),\n    (0xFE7D, 'M', '\u0640\u0651'),\n    (0xFE7E, '3', ' \u0652'),\n    (0xFE7F, 'M', '\u0640\u0652'),\n    (0xFE80, 'M', '\u0621'),\n    (0xFE81, 'M', '\u0622'),\n    (0xFE83, 'M', '\u0623'),\n    (0xFE85, 'M', '\u0624'),\n    (0xFE87, 'M', '\u0625'),\n    (0xFE89, 'M', '\u0626'),\n    (0xFE8D, 'M', '\u0627'),\n    (0xFE8F, 'M', '\u0628'),\n    (0xFE93, 'M', '\u0629'),\n    (0xFE95, 'M', '\u062a'),\n    (0xFE99, 'M', '\u062b'),\n    (0xFE9D, 'M', '\u062c'),\n    (0xFEA1, 'M', '\u062d'),\n    (0xFEA5, 'M', '\u062e'),\n    (0xFEA9, 'M', '\u062f'),\n    (0xFEAB, 'M', '\u0630'),\n    (0xFEAD, 'M', '\u0631'),\n    (0xFEAF, 'M', '\u0632'),\n    (0xFEB1, 'M', '\u0633'),\n    (0xFEB5, 'M', '\u0634'),\n    (0xFEB9, 'M', '\u0635'),\n    (0xFEBD, 'M', '\u0636'),\n    (0xFEC1, 'M', '\u0637'),\n    (0xFEC5, 'M', '\u0638'),\n    (0xFEC9, 'M', '\u0639'),\n    (0xFECD, 'M', '\u063a'),\n    (0xFED1, 'M', '\u0641'),\n    (0xFED5, 'M', '\u0642'),\n    (0xFED9, 'M', '\u0643'),\n    (0xFEDD, 'M', '\u0644'),\n    (0xFEE1, 'M', '\u0645'),\n    (0xFEE5, 'M', '\u0646'),\n    (0xFEE9, 'M', '\u0647'),\n    (0xFEED, 'M', '\u0648'),\n    (0xFEEF, 'M', '\u0649'),\n    (0xFEF1, 'M', '\u064a'),\n    (0xFEF5, 'M', '\u0644\u0622'),\n    (0xFEF7, 'M', '\u0644\u0623'),\n    (0xFEF9, 'M', '\u0644\u0625'),\n    (0xFEFB, 'M', '\u0644\u0627'),\n    (0xFEFD, 'X'),\n    (0xFEFF, 'I'),\n    (0xFF00, 'X'),\n    (0xFF01, '3', '!'),\n    (0xFF02, '3', '\"'),\n    (0xFF03, '3', '#'),\n    (0xFF04, '3', '$'),\n    (0xFF05, '3', '%'),\n    (0xFF06, '3', '&'),\n    (0xFF07, '3', '\\''),\n    (0xFF08, '3', '('),\n    (0xFF09, '3', ')'),\n    (0xFF0A, '3', '*'),\n    (0xFF0B, '3', '+'),\n    (0xFF0C, '3', ','),\n    (0xFF0D, 'M', '-'),\n    (0xFF0E, 'M', '.'),\n    (0xFF0F, '3', '/'),\n    (0xFF10, 'M', '0'),\n    (0xFF11, 'M', '1'),\n    (0xFF12, 'M', '2'),\n    (0xFF13, 'M', '3'),\n    (0xFF14, 'M', '4'),\n    (0xFF15, 'M', '5'),\n    (0xFF16, 'M', '6'),\n    (0xFF17, 'M', '7'),\n    (0xFF18, 'M', '8'),\n    (0xFF19, 'M', '9'),\n    (0xFF1A, '3', ':'),\n    (0xFF1B, '3', ';'),\n    (0xFF1C, '3', '<'),\n    (0xFF1D, '3', '='),\n    (0xFF1E, '3', '>'),\n    ]\n\ndef _seg_51() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFF1F, '3', '?'),\n    (0xFF20, '3', '@'),\n    (0xFF21, 'M', 'a'),\n    (0xFF22, 'M', 'b'),\n    (0xFF23, 'M', 'c'),\n    (0xFF24, 'M', 'd'),\n    (0xFF25, 'M', 'e'),\n    (0xFF26, 'M', 'f'),\n    (0xFF27, 'M', 'g'),\n    (0xFF28, 'M', 'h'),\n    (0xFF29, 'M', 'i'),\n    (0xFF2A, 'M', 'j'),\n    (0xFF2B, 'M', 'k'),\n    (0xFF2C, 'M', 'l'),\n    (0xFF2D, 'M', 'm'),\n    (0xFF2E, 'M', 'n'),\n    (0xFF2F, 'M', 'o'),\n    (0xFF30, 'M', 'p'),\n    (0xFF31, 'M', 'q'),\n    (0xFF32, 'M', 'r'),\n    (0xFF33, 'M', 's'),\n    (0xFF34, 'M', 't'),\n    (0xFF35, 'M', 'u'),\n    (0xFF36, 'M', 'v'),\n    (0xFF37, 'M', 'w'),\n    (0xFF38, 'M', 'x'),\n    (0xFF39, 'M', 'y'),\n    (0xFF3A, 'M', 'z'),\n    (0xFF3B, '3', '['),\n    (0xFF3C, '3', '\\\\'),\n    (0xFF3D, '3', ']'),\n    (0xFF3E, '3', '^'),\n    (0xFF3F, '3', '_'),\n    (0xFF40, '3', '`'),\n    (0xFF41, 'M', 'a'),\n    (0xFF42, 'M', 'b'),\n    (0xFF43, 'M', 'c'),\n    (0xFF44, 'M', 'd'),\n    (0xFF45, 'M', 'e'),\n    (0xFF46, 'M', 'f'),\n    (0xFF47, 'M', 'g'),\n    (0xFF48, 'M', 'h'),\n    (0xFF49, 'M', 'i'),\n    (0xFF4A, 'M', 'j'),\n    (0xFF4B, 'M', 'k'),\n    (0xFF4C, 'M', 'l'),\n    (0xFF4D, 'M', 'm'),\n    (0xFF4E, 'M', 'n'),\n    (0xFF4F, 'M', 'o'),\n    (0xFF50, 'M', 'p'),\n    (0xFF51, 'M', 'q'),\n    (0xFF52, 'M', 'r'),\n    (0xFF53, 'M', 's'),\n    (0xFF54, 'M', 't'),\n    (0xFF55, 'M', 'u'),\n    (0xFF56, 'M', 'v'),\n    (0xFF57, 'M', 'w'),\n    (0xFF58, 'M', 'x'),\n    (0xFF59, 'M', 'y'),\n    (0xFF5A, 'M', 'z'),\n    (0xFF5B, '3', '{'),\n    (0xFF5C, '3', '|'),\n    (0xFF5D, '3', '}'),\n    (0xFF5E, '3', '~'),\n    (0xFF5F, 'M', '\u2985'),\n    (0xFF60, 'M', '\u2986'),\n    (0xFF61, 'M', '.'),\n    (0xFF62, 'M', '\u300c'),\n    (0xFF63, 'M', '\u300d'),\n    (0xFF64, 'M', '\u3001'),\n    (0xFF65, 'M', '\u30fb'),\n    (0xFF66, 'M', '\u30f2'),\n    (0xFF67, 'M', '\u30a1'),\n    (0xFF68, 'M', '\u30a3'),\n    (0xFF69, 'M', '\u30a5'),\n    (0xFF6A, 'M', '\u30a7'),\n    (0xFF6B, 'M', '\u30a9'),\n    (0xFF6C, 'M', '\u30e3'),\n    (0xFF6D, 'M', '\u30e5'),\n    (0xFF6E, 'M', '\u30e7'),\n    (0xFF6F, 'M', '\u30c3'),\n    (0xFF70, 'M', '\u30fc'),\n    (0xFF71, 'M', '\u30a2'),\n    (0xFF72, 'M', '\u30a4'),\n    (0xFF73, 'M', '\u30a6'),\n    (0xFF74, 'M', '\u30a8'),\n    (0xFF75, 'M', '\u30aa'),\n    (0xFF76, 'M', '\u30ab'),\n    (0xFF77, 'M', '\u30ad'),\n    (0xFF78, 'M', '\u30af'),\n    (0xFF79, 'M', '\u30b1'),\n    (0xFF7A, 'M', '\u30b3'),\n    (0xFF7B, 'M', '\u30b5'),\n    (0xFF7C, 'M', '\u30b7'),\n    (0xFF7D, 'M', '\u30b9'),\n    (0xFF7E, 'M', '\u30bb'),\n    (0xFF7F, 'M', '\u30bd'),\n    (0xFF80, 'M', '\u30bf'),\n    (0xFF81, 'M', '\u30c1'),\n    (0xFF82, 'M', '\u30c4'),\n    ]\n\ndef _seg_52() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFF83, 'M', '\u30c6'),\n    (0xFF84, 'M', '\u30c8'),\n    (0xFF85, 'M', '\u30ca'),\n    (0xFF86, 'M', '\u30cb'),\n    (0xFF87, 'M', '\u30cc'),\n    (0xFF88, 'M', '\u30cd'),\n    (0xFF89, 'M', '\u30ce'),\n    (0xFF8A, 'M', '\u30cf'),\n    (0xFF8B, 'M', '\u30d2'),\n    (0xFF8C, 'M', '\u30d5'),\n    (0xFF8D, 'M', '\u30d8'),\n    (0xFF8E, 'M', '\u30db'),\n    (0xFF8F, 'M', '\u30de'),\n    (0xFF90, 'M', '\u30df'),\n    (0xFF91, 'M', '\u30e0'),\n    (0xFF92, 'M', '\u30e1'),\n    (0xFF93, 'M', '\u30e2'),\n    (0xFF94, 'M', '\u30e4'),\n    (0xFF95, 'M', '\u30e6'),\n    (0xFF96, 'M', '\u30e8'),\n    (0xFF97, 'M', '\u30e9'),\n    (0xFF98, 'M', '\u30ea'),\n    (0xFF99, 'M', '\u30eb'),\n    (0xFF9A, 'M', '\u30ec'),\n    (0xFF9B, 'M', '\u30ed'),\n    (0xFF9C, 'M', '\u30ef'),\n    (0xFF9D, 'M', '\u30f3'),\n    (0xFF9E, 'M', '\u3099'),\n    (0xFF9F, 'M', '\u309a'),\n    (0xFFA0, 'X'),\n    (0xFFA1, 'M', '\u1100'),\n    (0xFFA2, 'M', '\u1101'),\n    (0xFFA3, 'M', '\u11aa'),\n    (0xFFA4, 'M', '\u1102'),\n    (0xFFA5, 'M', '\u11ac'),\n    (0xFFA6, 'M', '\u11ad'),\n    (0xFFA7, 'M', '\u1103'),\n    (0xFFA8, 'M', '\u1104'),\n    (0xFFA9, 'M', '\u1105'),\n    (0xFFAA, 'M', '\u11b0'),\n    (0xFFAB, 'M', '\u11b1'),\n    (0xFFAC, 'M', '\u11b2'),\n    (0xFFAD, 'M', '\u11b3'),\n    (0xFFAE, 'M', '\u11b4'),\n    (0xFFAF, 'M', '\u11b5'),\n    (0xFFB0, 'M', '\u111a'),\n    (0xFFB1, 'M', '\u1106'),\n    (0xFFB2, 'M', '\u1107'),\n    (0xFFB3, 'M', '\u1108'),\n    (0xFFB4, 'M', '\u1121'),\n    (0xFFB5, 'M', '\u1109'),\n    (0xFFB6, 'M', '\u110a'),\n    (0xFFB7, 'M', '\u110b'),\n    (0xFFB8, 'M', '\u110c'),\n    (0xFFB9, 'M', '\u110d'),\n    (0xFFBA, 'M', '\u110e'),\n    (0xFFBB, 'M', '\u110f'),\n    (0xFFBC, 'M', '\u1110'),\n    (0xFFBD, 'M', '\u1111'),\n    (0xFFBE, 'M', '\u1112'),\n    (0xFFBF, 'X'),\n    (0xFFC2, 'M', '\u1161'),\n    (0xFFC3, 'M', '\u1162'),\n    (0xFFC4, 'M', '\u1163'),\n    (0xFFC5, 'M', '\u1164'),\n    (0xFFC6, 'M', '\u1165'),\n    (0xFFC7, 'M', '\u1166'),\n    (0xFFC8, 'X'),\n    (0xFFCA, 'M', '\u1167'),\n    (0xFFCB, 'M', '\u1168'),\n    (0xFFCC, 'M', '\u1169'),\n    (0xFFCD, 'M', '\u116a'),\n    (0xFFCE, 'M', '\u116b'),\n    (0xFFCF, 'M', '\u116c'),\n    (0xFFD0, 'X'),\n    (0xFFD2, 'M', '\u116d'),\n    (0xFFD3, 'M', '\u116e'),\n    (0xFFD4, 'M', '\u116f'),\n    (0xFFD5, 'M', '\u1170'),\n    (0xFFD6, 'M', '\u1171'),\n    (0xFFD7, 'M', '\u1172'),\n    (0xFFD8, 'X'),\n    (0xFFDA, 'M', '\u1173'),\n    (0xFFDB, 'M', '\u1174'),\n    (0xFFDC, 'M', '\u1175'),\n    (0xFFDD, 'X'),\n    (0xFFE0, 'M', '\u00a2'),\n    (0xFFE1, 'M', '\u00a3'),\n    (0xFFE2, 'M', '\u00ac'),\n    (0xFFE3, '3', ' \u0304'),\n    (0xFFE4, 'M', '\u00a6'),\n    (0xFFE5, 'M', '\u00a5'),\n    (0xFFE6, 'M', '\u20a9'),\n    (0xFFE7, 'X'),\n    (0xFFE8, 'M', '\u2502'),\n    (0xFFE9, 'M', '\u2190'),\n    (0xFFEA, 'M', '\u2191'),\n    (0xFFEB, 'M', '\u2192'),\n    (0xFFEC, 'M', '\u2193'),\n    (0xFFED, 'M', '\u25a0'),\n    ]\n\ndef _seg_53() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0xFFEE, 'M', '\u25cb'),\n    (0xFFEF, 'X'),\n    (0x10000, 'V'),\n    (0x1000C, 'X'),\n    (0x1000D, 'V'),\n    (0x10027, 'X'),\n    (0x10028, 'V'),\n    (0x1003B, 'X'),\n    (0x1003C, 'V'),\n    (0x1003E, 'X'),\n    (0x1003F, 'V'),\n    (0x1004E, 'X'),\n    (0x10050, 'V'),\n    (0x1005E, 'X'),\n    (0x10080, 'V'),\n    (0x100FB, 'X'),\n    (0x10100, 'V'),\n    (0x10103, 'X'),\n    (0x10107, 'V'),\n    (0x10134, 'X'),\n    (0x10137, 'V'),\n    (0x1018F, 'X'),\n    (0x10190, 'V'),\n    (0x1019D, 'X'),\n    (0x101A0, 'V'),\n    (0x101A1, 'X'),\n    (0x101D0, 'V'),\n    (0x101FE, 'X'),\n    (0x10280, 'V'),\n    (0x1029D, 'X'),\n    (0x102A0, 'V'),\n    (0x102D1, 'X'),\n    (0x102E0, 'V'),\n    (0x102FC, 'X'),\n    (0x10300, 'V'),\n    (0x10324, 'X'),\n    (0x1032D, 'V'),\n    (0x1034B, 'X'),\n    (0x10350, 'V'),\n    (0x1037B, 'X'),\n    (0x10380, 'V'),\n    (0x1039E, 'X'),\n    (0x1039F, 'V'),\n    (0x103C4, 'X'),\n    (0x103C8, 'V'),\n    (0x103D6, 'X'),\n    (0x10400, 'M', '\ud801\udc28'),\n    (0x10401, 'M', '\ud801\udc29'),\n    (0x10402, 'M', '\ud801\udc2a'),\n    (0x10403, 'M', '\ud801\udc2b'),\n    (0x10404, 'M', '\ud801\udc2c'),\n    (0x10405, 'M', '\ud801\udc2d'),\n    (0x10406, 'M', '\ud801\udc2e'),\n    (0x10407, 'M', '\ud801\udc2f'),\n    (0x10408, 'M', '\ud801\udc30'),\n    (0x10409, 'M', '\ud801\udc31'),\n    (0x1040A, 'M', '\ud801\udc32'),\n    (0x1040B, 'M', '\ud801\udc33'),\n    (0x1040C, 'M', '\ud801\udc34'),\n    (0x1040D, 'M', '\ud801\udc35'),\n    (0x1040E, 'M', '\ud801\udc36'),\n    (0x1040F, 'M', '\ud801\udc37'),\n    (0x10410, 'M', '\ud801\udc38'),\n    (0x10411, 'M', '\ud801\udc39'),\n    (0x10412, 'M', '\ud801\udc3a'),\n    (0x10413, 'M', '\ud801\udc3b'),\n    (0x10414, 'M', '\ud801\udc3c'),\n    (0x10415, 'M', '\ud801\udc3d'),\n    (0x10416, 'M', '\ud801\udc3e'),\n    (0x10417, 'M', '\ud801\udc3f'),\n    (0x10418, 'M', '\ud801\udc40'),\n    (0x10419, 'M', '\ud801\udc41'),\n    (0x1041A, 'M', '\ud801\udc42'),\n    (0x1041B, 'M', '\ud801\udc43'),\n    (0x1041C, 'M', '\ud801\udc44'),\n    (0x1041D, 'M', '\ud801\udc45'),\n    (0x1041E, 'M', '\ud801\udc46'),\n    (0x1041F, 'M', '\ud801\udc47'),\n    (0x10420, 'M', '\ud801\udc48'),\n    (0x10421, 'M', '\ud801\udc49'),\n    (0x10422, 'M', '\ud801\udc4a'),\n    (0x10423, 'M', '\ud801\udc4b'),\n    (0x10424, 'M', '\ud801\udc4c'),\n    (0x10425, 'M', '\ud801\udc4d'),\n    (0x10426, 'M', '\ud801\udc4e'),\n    (0x10427, 'M', '\ud801\udc4f'),\n    (0x10428, 'V'),\n    (0x1049E, 'X'),\n    (0x104A0, 'V'),\n    (0x104AA, 'X'),\n    (0x104B0, 'M', '\ud801\udcd8'),\n    (0x104B1, 'M', '\ud801\udcd9'),\n    (0x104B2, 'M', '\ud801\udcda'),\n    (0x104B3, 'M', '\ud801\udcdb'),\n    (0x104B4, 'M', '\ud801\udcdc'),\n    (0x104B5, 'M', '\ud801\udcdd'),\n    (0x104B6, 'M', '\ud801\udcde'),\n    (0x104B7, 'M', '\ud801\udcdf'),\n    (0x104B8, 'M', '\ud801\udce0'),\n    (0x104B9, 'M', '\ud801\udce1'),\n    ]\n\ndef _seg_54() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x104BA, 'M', '\ud801\udce2'),\n    (0x104BB, 'M', '\ud801\udce3'),\n    (0x104BC, 'M', '\ud801\udce4'),\n    (0x104BD, 'M', '\ud801\udce5'),\n    (0x104BE, 'M', '\ud801\udce6'),\n    (0x104BF, 'M', '\ud801\udce7'),\n    (0x104C0, 'M', '\ud801\udce8'),\n    (0x104C1, 'M', '\ud801\udce9'),\n    (0x104C2, 'M', '\ud801\udcea'),\n    (0x104C3, 'M', '\ud801\udceb'),\n    (0x104C4, 'M', '\ud801\udcec'),\n    (0x104C5, 'M', '\ud801\udced'),\n    (0x104C6, 'M', '\ud801\udcee'),\n    (0x104C7, 'M', '\ud801\udcef'),\n    (0x104C8, 'M', '\ud801\udcf0'),\n    (0x104C9, 'M', '\ud801\udcf1'),\n    (0x104CA, 'M', '\ud801\udcf2'),\n    (0x104CB, 'M', '\ud801\udcf3'),\n    (0x104CC, 'M', '\ud801\udcf4'),\n    (0x104CD, 'M', '\ud801\udcf5'),\n    (0x104CE, 'M', '\ud801\udcf6'),\n    (0x104CF, 'M', '\ud801\udcf7'),\n    (0x104D0, 'M', '\ud801\udcf8'),\n    (0x104D1, 'M', '\ud801\udcf9'),\n    (0x104D2, 'M', '\ud801\udcfa'),\n    (0x104D3, 'M', '\ud801\udcfb'),\n    (0x104D4, 'X'),\n    (0x104D8, 'V'),\n    (0x104FC, 'X'),\n    (0x10500, 'V'),\n    (0x10528, 'X'),\n    (0x10530, 'V'),\n    (0x10564, 'X'),\n    (0x1056F, 'V'),\n    (0x10570, 'M', '\ud801\udd97'),\n    (0x10571, 'M', '\ud801\udd98'),\n    (0x10572, 'M', '\ud801\udd99'),\n    (0x10573, 'M', '\ud801\udd9a'),\n    (0x10574, 'M', '\ud801\udd9b'),\n    (0x10575, 'M', '\ud801\udd9c'),\n    (0x10576, 'M', '\ud801\udd9d'),\n    (0x10577, 'M', '\ud801\udd9e'),\n    (0x10578, 'M', '\ud801\udd9f'),\n    (0x10579, 'M', '\ud801\udda0'),\n    (0x1057A, 'M', '\ud801\udda1'),\n    (0x1057B, 'X'),\n    (0x1057C, 'M', '\ud801\udda3'),\n    (0x1057D, 'M', '\ud801\udda4'),\n    (0x1057E, 'M', '\ud801\udda5'),\n    (0x1057F, 'M', '\ud801\udda6'),\n    (0x10580, 'M', '\ud801\udda7'),\n    (0x10581, 'M', '\ud801\udda8'),\n    (0x10582, 'M', '\ud801\udda9'),\n    (0x10583, 'M', '\ud801\uddaa'),\n    (0x10584, 'M', '\ud801\uddab'),\n    (0x10585, 'M', '\ud801\uddac'),\n    (0x10586, 'M', '\ud801\uddad'),\n    (0x10587, 'M', '\ud801\uddae'),\n    (0x10588, 'M', '\ud801\uddaf'),\n    (0x10589, 'M', '\ud801\uddb0'),\n    (0x1058A, 'M', '\ud801\uddb1'),\n    (0x1058B, 'X'),\n    (0x1058C, 'M', '\ud801\uddb3'),\n    (0x1058D, 'M', '\ud801\uddb4'),\n    (0x1058E, 'M', '\ud801\uddb5'),\n    (0x1058F, 'M', '\ud801\uddb6'),\n    (0x10590, 'M', '\ud801\uddb7'),\n    (0x10591, 'M', '\ud801\uddb8'),\n    (0x10592, 'M', '\ud801\uddb9'),\n    (0x10593, 'X'),\n    (0x10594, 'M', '\ud801\uddbb'),\n    (0x10595, 'M', '\ud801\uddbc'),\n    (0x10596, 'X'),\n    (0x10597, 'V'),\n    (0x105A2, 'X'),\n    (0x105A3, 'V'),\n    (0x105B2, 'X'),\n    (0x105B3, 'V'),\n    (0x105BA, 'X'),\n    (0x105BB, 'V'),\n    (0x105BD, 'X'),\n    (0x10600, 'V'),\n    (0x10737, 'X'),\n    (0x10740, 'V'),\n    (0x10756, 'X'),\n    (0x10760, 'V'),\n    (0x10768, 'X'),\n    (0x10780, 'V'),\n    (0x10781, 'M', '\u02d0'),\n    (0x10782, 'M', '\u02d1'),\n    (0x10783, 'M', '\u00e6'),\n    (0x10784, 'M', '\u0299'),\n    (0x10785, 'M', '\u0253'),\n    (0x10786, 'X'),\n    (0x10787, 'M', '\u02a3'),\n    (0x10788, 'M', '\uab66'),\n    (0x10789, 'M', '\u02a5'),\n    (0x1078A, 'M', '\u02a4'),\n    (0x1078B, 'M', '\u0256'),\n    (0x1078C, 'M', '\u0257'),\n    ]\n\ndef _seg_55() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1078D, 'M', '\u1d91'),\n    (0x1078E, 'M', '\u0258'),\n    (0x1078F, 'M', '\u025e'),\n    (0x10790, 'M', '\u02a9'),\n    (0x10791, 'M', '\u0264'),\n    (0x10792, 'M', '\u0262'),\n    (0x10793, 'M', '\u0260'),\n    (0x10794, 'M', '\u029b'),\n    (0x10795, 'M', '\u0127'),\n    (0x10796, 'M', '\u029c'),\n    (0x10797, 'M', '\u0267'),\n    (0x10798, 'M', '\u0284'),\n    (0x10799, 'M', '\u02aa'),\n    (0x1079A, 'M', '\u02ab'),\n    (0x1079B, 'M', '\u026c'),\n    (0x1079C, 'M', '\ud837\udf04'),\n    (0x1079D, 'M', '\ua78e'),\n    (0x1079E, 'M', '\u026e'),\n    (0x1079F, 'M', '\ud837\udf05'),\n    (0x107A0, 'M', '\u028e'),\n    (0x107A1, 'M', '\ud837\udf06'),\n    (0x107A2, 'M', '\u00f8'),\n    (0x107A3, 'M', '\u0276'),\n    (0x107A4, 'M', '\u0277'),\n    (0x107A5, 'M', 'q'),\n    (0x107A6, 'M', '\u027a'),\n    (0x107A7, 'M', '\ud837\udf08'),\n    (0x107A8, 'M', '\u027d'),\n    (0x107A9, 'M', '\u027e'),\n    (0x107AA, 'M', '\u0280'),\n    (0x107AB, 'M', '\u02a8'),\n    (0x107AC, 'M', '\u02a6'),\n    (0x107AD, 'M', '\uab67'),\n    (0x107AE, 'M', '\u02a7'),\n    (0x107AF, 'M', '\u0288'),\n    (0x107B0, 'M', '\u2c71'),\n    (0x107B1, 'X'),\n    (0x107B2, 'M', '\u028f'),\n    (0x107B3, 'M', '\u02a1'),\n    (0x107B4, 'M', '\u02a2'),\n    (0x107B5, 'M', '\u0298'),\n    (0x107B6, 'M', '\u01c0'),\n    (0x107B7, 'M', '\u01c1'),\n    (0x107B8, 'M', '\u01c2'),\n    (0x107B9, 'M', '\ud837\udf0a'),\n    (0x107BA, 'M', '\ud837\udf1e'),\n    (0x107BB, 'X'),\n    (0x10800, 'V'),\n    (0x10806, 'X'),\n    (0x10808, 'V'),\n    (0x10809, 'X'),\n    (0x1080A, 'V'),\n    (0x10836, 'X'),\n    (0x10837, 'V'),\n    (0x10839, 'X'),\n    (0x1083C, 'V'),\n    (0x1083D, 'X'),\n    (0x1083F, 'V'),\n    (0x10856, 'X'),\n    (0x10857, 'V'),\n    (0x1089F, 'X'),\n    (0x108A7, 'V'),\n    (0x108B0, 'X'),\n    (0x108E0, 'V'),\n    (0x108F3, 'X'),\n    (0x108F4, 'V'),\n    (0x108F6, 'X'),\n    (0x108FB, 'V'),\n    (0x1091C, 'X'),\n    (0x1091F, 'V'),\n    (0x1093A, 'X'),\n    (0x1093F, 'V'),\n    (0x10940, 'X'),\n    (0x10980, 'V'),\n    (0x109B8, 'X'),\n    (0x109BC, 'V'),\n    (0x109D0, 'X'),\n    (0x109D2, 'V'),\n    (0x10A04, 'X'),\n    (0x10A05, 'V'),\n    (0x10A07, 'X'),\n    (0x10A0C, 'V'),\n    (0x10A14, 'X'),\n    (0x10A15, 'V'),\n    (0x10A18, 'X'),\n    (0x10A19, 'V'),\n    (0x10A36, 'X'),\n    (0x10A38, 'V'),\n    (0x10A3B, 'X'),\n    (0x10A3F, 'V'),\n    (0x10A49, 'X'),\n    (0x10A50, 'V'),\n    (0x10A59, 'X'),\n    (0x10A60, 'V'),\n    (0x10AA0, 'X'),\n    (0x10AC0, 'V'),\n    (0x10AE7, 'X'),\n    (0x10AEB, 'V'),\n    (0x10AF7, 'X'),\n    (0x10B00, 'V'),\n    ]\n\ndef _seg_56() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x10B36, 'X'),\n    (0x10B39, 'V'),\n    (0x10B56, 'X'),\n    (0x10B58, 'V'),\n    (0x10B73, 'X'),\n    (0x10B78, 'V'),\n    (0x10B92, 'X'),\n    (0x10B99, 'V'),\n    (0x10B9D, 'X'),\n    (0x10BA9, 'V'),\n    (0x10BB0, 'X'),\n    (0x10C00, 'V'),\n    (0x10C49, 'X'),\n    (0x10C80, 'M', '\ud803\udcc0'),\n    (0x10C81, 'M', '\ud803\udcc1'),\n    (0x10C82, 'M', '\ud803\udcc2'),\n    (0x10C83, 'M', '\ud803\udcc3'),\n    (0x10C84, 'M', '\ud803\udcc4'),\n    (0x10C85, 'M', '\ud803\udcc5'),\n    (0x10C86, 'M', '\ud803\udcc6'),\n    (0x10C87, 'M', '\ud803\udcc7'),\n    (0x10C88, 'M', '\ud803\udcc8'),\n    (0x10C89, 'M', '\ud803\udcc9'),\n    (0x10C8A, 'M', '\ud803\udcca'),\n    (0x10C8B, 'M', '\ud803\udccb'),\n    (0x10C8C, 'M', '\ud803\udccc'),\n    (0x10C8D, 'M', '\ud803\udccd'),\n    (0x10C8E, 'M', '\ud803\udcce'),\n    (0x10C8F, 'M', '\ud803\udccf'),\n    (0x10C90, 'M', '\ud803\udcd0'),\n    (0x10C91, 'M', '\ud803\udcd1'),\n    (0x10C92, 'M', '\ud803\udcd2'),\n    (0x10C93, 'M', '\ud803\udcd3'),\n    (0x10C94, 'M', '\ud803\udcd4'),\n    (0x10C95, 'M', '\ud803\udcd5'),\n    (0x10C96, 'M', '\ud803\udcd6'),\n    (0x10C97, 'M', '\ud803\udcd7'),\n    (0x10C98, 'M', '\ud803\udcd8'),\n    (0x10C99, 'M', '\ud803\udcd9'),\n    (0x10C9A, 'M', '\ud803\udcda'),\n    (0x10C9B, 'M', '\ud803\udcdb'),\n    (0x10C9C, 'M', '\ud803\udcdc'),\n    (0x10C9D, 'M', '\ud803\udcdd'),\n    (0x10C9E, 'M', '\ud803\udcde'),\n    (0x10C9F, 'M', '\ud803\udcdf'),\n    (0x10CA0, 'M', '\ud803\udce0'),\n    (0x10CA1, 'M', '\ud803\udce1'),\n    (0x10CA2, 'M', '\ud803\udce2'),\n    (0x10CA3, 'M', '\ud803\udce3'),\n    (0x10CA4, 'M', '\ud803\udce4'),\n    (0x10CA5, 'M', '\ud803\udce5'),\n    (0x10CA6, 'M', '\ud803\udce6'),\n    (0x10CA7, 'M', '\ud803\udce7'),\n    (0x10CA8, 'M', '\ud803\udce8'),\n    (0x10CA9, 'M', '\ud803\udce9'),\n    (0x10CAA, 'M', '\ud803\udcea'),\n    (0x10CAB, 'M', '\ud803\udceb'),\n    (0x10CAC, 'M', '\ud803\udcec'),\n    (0x10CAD, 'M', '\ud803\udced'),\n    (0x10CAE, 'M', '\ud803\udcee'),\n    (0x10CAF, 'M', '\ud803\udcef'),\n    (0x10CB0, 'M', '\ud803\udcf0'),\n    (0x10CB1, 'M', '\ud803\udcf1'),\n    (0x10CB2, 'M', '\ud803\udcf2'),\n    (0x10CB3, 'X'),\n    (0x10CC0, 'V'),\n    (0x10CF3, 'X'),\n    (0x10CFA, 'V'),\n    (0x10D28, 'X'),\n    (0x10D30, 'V'),\n    (0x10D3A, 'X'),\n    (0x10E60, 'V'),\n    (0x10E7F, 'X'),\n    (0x10E80, 'V'),\n    (0x10EAA, 'X'),\n    (0x10EAB, 'V'),\n    (0x10EAE, 'X'),\n    (0x10EB0, 'V'),\n    (0x10EB2, 'X'),\n    (0x10EFD, 'V'),\n    (0x10F28, 'X'),\n    (0x10F30, 'V'),\n    (0x10F5A, 'X'),\n    (0x10F70, 'V'),\n    (0x10F8A, 'X'),\n    (0x10FB0, 'V'),\n    (0x10FCC, 'X'),\n    (0x10FE0, 'V'),\n    (0x10FF7, 'X'),\n    (0x11000, 'V'),\n    (0x1104E, 'X'),\n    (0x11052, 'V'),\n    (0x11076, 'X'),\n    (0x1107F, 'V'),\n    (0x110BD, 'X'),\n    (0x110BE, 'V'),\n    (0x110C3, 'X'),\n    (0x110D0, 'V'),\n    (0x110E9, 'X'),\n    (0x110F0, 'V'),\n    ]\n\ndef _seg_57() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x110FA, 'X'),\n    (0x11100, 'V'),\n    (0x11135, 'X'),\n    (0x11136, 'V'),\n    (0x11148, 'X'),\n    (0x11150, 'V'),\n    (0x11177, 'X'),\n    (0x11180, 'V'),\n    (0x111E0, 'X'),\n    (0x111E1, 'V'),\n    (0x111F5, 'X'),\n    (0x11200, 'V'),\n    (0x11212, 'X'),\n    (0x11213, 'V'),\n    (0x11242, 'X'),\n    (0x11280, 'V'),\n    (0x11287, 'X'),\n    (0x11288, 'V'),\n    (0x11289, 'X'),\n    (0x1128A, 'V'),\n    (0x1128E, 'X'),\n    (0x1128F, 'V'),\n    (0x1129E, 'X'),\n    (0x1129F, 'V'),\n    (0x112AA, 'X'),\n    (0x112B0, 'V'),\n    (0x112EB, 'X'),\n    (0x112F0, 'V'),\n    (0x112FA, 'X'),\n    (0x11300, 'V'),\n    (0x11304, 'X'),\n    (0x11305, 'V'),\n    (0x1130D, 'X'),\n    (0x1130F, 'V'),\n    (0x11311, 'X'),\n    (0x11313, 'V'),\n    (0x11329, 'X'),\n    (0x1132A, 'V'),\n    (0x11331, 'X'),\n    (0x11332, 'V'),\n    (0x11334, 'X'),\n    (0x11335, 'V'),\n    (0x1133A, 'X'),\n    (0x1133B, 'V'),\n    (0x11345, 'X'),\n    (0x11347, 'V'),\n    (0x11349, 'X'),\n    (0x1134B, 'V'),\n    (0x1134E, 'X'),\n    (0x11350, 'V'),\n    (0x11351, 'X'),\n    (0x11357, 'V'),\n    (0x11358, 'X'),\n    (0x1135D, 'V'),\n    (0x11364, 'X'),\n    (0x11366, 'V'),\n    (0x1136D, 'X'),\n    (0x11370, 'V'),\n    (0x11375, 'X'),\n    (0x11400, 'V'),\n    (0x1145C, 'X'),\n    (0x1145D, 'V'),\n    (0x11462, 'X'),\n    (0x11480, 'V'),\n    (0x114C8, 'X'),\n    (0x114D0, 'V'),\n    (0x114DA, 'X'),\n    (0x11580, 'V'),\n    (0x115B6, 'X'),\n    (0x115B8, 'V'),\n    (0x115DE, 'X'),\n    (0x11600, 'V'),\n    (0x11645, 'X'),\n    (0x11650, 'V'),\n    (0x1165A, 'X'),\n    (0x11660, 'V'),\n    (0x1166D, 'X'),\n    (0x11680, 'V'),\n    (0x116BA, 'X'),\n    (0x116C0, 'V'),\n    (0x116CA, 'X'),\n    (0x11700, 'V'),\n    (0x1171B, 'X'),\n    (0x1171D, 'V'),\n    (0x1172C, 'X'),\n    (0x11730, 'V'),\n    (0x11747, 'X'),\n    (0x11800, 'V'),\n    (0x1183C, 'X'),\n    (0x118A0, 'M', '\ud806\udcc0'),\n    (0x118A1, 'M', '\ud806\udcc1'),\n    (0x118A2, 'M', '\ud806\udcc2'),\n    (0x118A3, 'M', '\ud806\udcc3'),\n    (0x118A4, 'M', '\ud806\udcc4'),\n    (0x118A5, 'M', '\ud806\udcc5'),\n    (0x118A6, 'M', '\ud806\udcc6'),\n    (0x118A7, 'M', '\ud806\udcc7'),\n    (0x118A8, 'M', '\ud806\udcc8'),\n    (0x118A9, 'M', '\ud806\udcc9'),\n    (0x118AA, 'M', '\ud806\udcca'),\n    ]\n\ndef _seg_58() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x118AB, 'M', '\ud806\udccb'),\n    (0x118AC, 'M', '\ud806\udccc'),\n    (0x118AD, 'M', '\ud806\udccd'),\n    (0x118AE, 'M', '\ud806\udcce'),\n    (0x118AF, 'M', '\ud806\udccf'),\n    (0x118B0, 'M', '\ud806\udcd0'),\n    (0x118B1, 'M', '\ud806\udcd1'),\n    (0x118B2, 'M', '\ud806\udcd2'),\n    (0x118B3, 'M', '\ud806\udcd3'),\n    (0x118B4, 'M', '\ud806\udcd4'),\n    (0x118B5, 'M', '\ud806\udcd5'),\n    (0x118B6, 'M', '\ud806\udcd6'),\n    (0x118B7, 'M', '\ud806\udcd7'),\n    (0x118B8, 'M', '\ud806\udcd8'),\n    (0x118B9, 'M', '\ud806\udcd9'),\n    (0x118BA, 'M', '\ud806\udcda'),\n    (0x118BB, 'M', '\ud806\udcdb'),\n    (0x118BC, 'M', '\ud806\udcdc'),\n    (0x118BD, 'M', '\ud806\udcdd'),\n    (0x118BE, 'M', '\ud806\udcde'),\n    (0x118BF, 'M', '\ud806\udcdf'),\n    (0x118C0, 'V'),\n    (0x118F3, 'X'),\n    (0x118FF, 'V'),\n    (0x11907, 'X'),\n    (0x11909, 'V'),\n    (0x1190A, 'X'),\n    (0x1190C, 'V'),\n    (0x11914, 'X'),\n    (0x11915, 'V'),\n    (0x11917, 'X'),\n    (0x11918, 'V'),\n    (0x11936, 'X'),\n    (0x11937, 'V'),\n    (0x11939, 'X'),\n    (0x1193B, 'V'),\n    (0x11947, 'X'),\n    (0x11950, 'V'),\n    (0x1195A, 'X'),\n    (0x119A0, 'V'),\n    (0x119A8, 'X'),\n    (0x119AA, 'V'),\n    (0x119D8, 'X'),\n    (0x119DA, 'V'),\n    (0x119E5, 'X'),\n    (0x11A00, 'V'),\n    (0x11A48, 'X'),\n    (0x11A50, 'V'),\n    (0x11AA3, 'X'),\n    (0x11AB0, 'V'),\n    (0x11AF9, 'X'),\n    (0x11B00, 'V'),\n    (0x11B0A, 'X'),\n    (0x11C00, 'V'),\n    (0x11C09, 'X'),\n    (0x11C0A, 'V'),\n    (0x11C37, 'X'),\n    (0x11C38, 'V'),\n    (0x11C46, 'X'),\n    (0x11C50, 'V'),\n    (0x11C6D, 'X'),\n    (0x11C70, 'V'),\n    (0x11C90, 'X'),\n    (0x11C92, 'V'),\n    (0x11CA8, 'X'),\n    (0x11CA9, 'V'),\n    (0x11CB7, 'X'),\n    (0x11D00, 'V'),\n    (0x11D07, 'X'),\n    (0x11D08, 'V'),\n    (0x11D0A, 'X'),\n    (0x11D0B, 'V'),\n    (0x11D37, 'X'),\n    (0x11D3A, 'V'),\n    (0x11D3B, 'X'),\n    (0x11D3C, 'V'),\n    (0x11D3E, 'X'),\n    (0x11D3F, 'V'),\n    (0x11D48, 'X'),\n    (0x11D50, 'V'),\n    (0x11D5A, 'X'),\n    (0x11D60, 'V'),\n    (0x11D66, 'X'),\n    (0x11D67, 'V'),\n    (0x11D69, 'X'),\n    (0x11D6A, 'V'),\n    (0x11D8F, 'X'),\n    (0x11D90, 'V'),\n    (0x11D92, 'X'),\n    (0x11D93, 'V'),\n    (0x11D99, 'X'),\n    (0x11DA0, 'V'),\n    (0x11DAA, 'X'),\n    (0x11EE0, 'V'),\n    (0x11EF9, 'X'),\n    (0x11F00, 'V'),\n    (0x11F11, 'X'),\n    (0x11F12, 'V'),\n    (0x11F3B, 'X'),\n    (0x11F3E, 'V'),\n    ]\n\ndef _seg_59() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x11F5A, 'X'),\n    (0x11FB0, 'V'),\n    (0x11FB1, 'X'),\n    (0x11FC0, 'V'),\n    (0x11FF2, 'X'),\n    (0x11FFF, 'V'),\n    (0x1239A, 'X'),\n    (0x12400, 'V'),\n    (0x1246F, 'X'),\n    (0x12470, 'V'),\n    (0x12475, 'X'),\n    (0x12480, 'V'),\n    (0x12544, 'X'),\n    (0x12F90, 'V'),\n    (0x12FF3, 'X'),\n    (0x13000, 'V'),\n    (0x13430, 'X'),\n    (0x13440, 'V'),\n    (0x13456, 'X'),\n    (0x14400, 'V'),\n    (0x14647, 'X'),\n    (0x16800, 'V'),\n    (0x16A39, 'X'),\n    (0x16A40, 'V'),\n    (0x16A5F, 'X'),\n    (0x16A60, 'V'),\n    (0x16A6A, 'X'),\n    (0x16A6E, 'V'),\n    (0x16ABF, 'X'),\n    (0x16AC0, 'V'),\n    (0x16ACA, 'X'),\n    (0x16AD0, 'V'),\n    (0x16AEE, 'X'),\n    (0x16AF0, 'V'),\n    (0x16AF6, 'X'),\n    (0x16B00, 'V'),\n    (0x16B46, 'X'),\n    (0x16B50, 'V'),\n    (0x16B5A, 'X'),\n    (0x16B5B, 'V'),\n    (0x16B62, 'X'),\n    (0x16B63, 'V'),\n    (0x16B78, 'X'),\n    (0x16B7D, 'V'),\n    (0x16B90, 'X'),\n    (0x16E40, 'M', '\ud81b\ude60'),\n    (0x16E41, 'M', '\ud81b\ude61'),\n    (0x16E42, 'M', '\ud81b\ude62'),\n    (0x16E43, 'M', '\ud81b\ude63'),\n    (0x16E44, 'M', '\ud81b\ude64'),\n    (0x16E45, 'M', '\ud81b\ude65'),\n    (0x16E46, 'M', '\ud81b\ude66'),\n    (0x16E47, 'M', '\ud81b\ude67'),\n    (0x16E48, 'M', '\ud81b\ude68'),\n    (0x16E49, 'M', '\ud81b\ude69'),\n    (0x16E4A, 'M', '\ud81b\ude6a'),\n    (0x16E4B, 'M', '\ud81b\ude6b'),\n    (0x16E4C, 'M', '\ud81b\ude6c'),\n    (0x16E4D, 'M', '\ud81b\ude6d'),\n    (0x16E4E, 'M', '\ud81b\ude6e'),\n    (0x16E4F, 'M', '\ud81b\ude6f'),\n    (0x16E50, 'M', '\ud81b\ude70'),\n    (0x16E51, 'M', '\ud81b\ude71'),\n    (0x16E52, 'M', '\ud81b\ude72'),\n    (0x16E53, 'M', '\ud81b\ude73'),\n    (0x16E54, 'M', '\ud81b\ude74'),\n    (0x16E55, 'M', '\ud81b\ude75'),\n    (0x16E56, 'M', '\ud81b\ude76'),\n    (0x16E57, 'M', '\ud81b\ude77'),\n    (0x16E58, 'M', '\ud81b\ude78'),\n    (0x16E59, 'M', '\ud81b\ude79'),\n    (0x16E5A, 'M', '\ud81b\ude7a'),\n    (0x16E5B, 'M', '\ud81b\ude7b'),\n    (0x16E5C, 'M', '\ud81b\ude7c'),\n    (0x16E5D, 'M', '\ud81b\ude7d'),\n    (0x16E5E, 'M', '\ud81b\ude7e'),\n    (0x16E5F, 'M', '\ud81b\ude7f'),\n    (0x16E60, 'V'),\n    (0x16E9B, 'X'),\n    (0x16F00, 'V'),\n    (0x16F4B, 'X'),\n    (0x16F4F, 'V'),\n    (0x16F88, 'X'),\n    (0x16F8F, 'V'),\n    (0x16FA0, 'X'),\n    (0x16FE0, 'V'),\n    (0x16FE5, 'X'),\n    (0x16FF0, 'V'),\n    (0x16FF2, 'X'),\n    (0x17000, 'V'),\n    (0x187F8, 'X'),\n    (0x18800, 'V'),\n    (0x18CD6, 'X'),\n    (0x18D00, 'V'),\n    (0x18D09, 'X'),\n    (0x1AFF0, 'V'),\n    (0x1AFF4, 'X'),\n    (0x1AFF5, 'V'),\n    (0x1AFFC, 'X'),\n    (0x1AFFD, 'V'),\n    ]\n\ndef _seg_60() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1AFFF, 'X'),\n    (0x1B000, 'V'),\n    (0x1B123, 'X'),\n    (0x1B132, 'V'),\n    (0x1B133, 'X'),\n    (0x1B150, 'V'),\n    (0x1B153, 'X'),\n    (0x1B155, 'V'),\n    (0x1B156, 'X'),\n    (0x1B164, 'V'),\n    (0x1B168, 'X'),\n    (0x1B170, 'V'),\n    (0x1B2FC, 'X'),\n    (0x1BC00, 'V'),\n    (0x1BC6B, 'X'),\n    (0x1BC70, 'V'),\n    (0x1BC7D, 'X'),\n    (0x1BC80, 'V'),\n    (0x1BC89, 'X'),\n    (0x1BC90, 'V'),\n    (0x1BC9A, 'X'),\n    (0x1BC9C, 'V'),\n    (0x1BCA0, 'I'),\n    (0x1BCA4, 'X'),\n    (0x1CF00, 'V'),\n    (0x1CF2E, 'X'),\n    (0x1CF30, 'V'),\n    (0x1CF47, 'X'),\n    (0x1CF50, 'V'),\n    (0x1CFC4, 'X'),\n    (0x1D000, 'V'),\n    (0x1D0F6, 'X'),\n    (0x1D100, 'V'),\n    (0x1D127, 'X'),\n    (0x1D129, 'V'),\n    (0x1D15E, 'M', '\ud834\udd57\ud834\udd65'),\n    (0x1D15F, 'M', '\ud834\udd58\ud834\udd65'),\n    (0x1D160, 'M', '\ud834\udd58\ud834\udd65\ud834\udd6e'),\n    (0x1D161, 'M', '\ud834\udd58\ud834\udd65\ud834\udd6f'),\n    (0x1D162, 'M', '\ud834\udd58\ud834\udd65\ud834\udd70'),\n    (0x1D163, 'M', '\ud834\udd58\ud834\udd65\ud834\udd71'),\n    (0x1D164, 'M', '\ud834\udd58\ud834\udd65\ud834\udd72'),\n    (0x1D165, 'V'),\n    (0x1D173, 'X'),\n    (0x1D17B, 'V'),\n    (0x1D1BB, 'M', '\ud834\uddb9\ud834\udd65'),\n    (0x1D1BC, 'M', '\ud834\uddba\ud834\udd65'),\n    (0x1D1BD, 'M', '\ud834\uddb9\ud834\udd65\ud834\udd6e'),\n    (0x1D1BE, 'M', '\ud834\uddba\ud834\udd65\ud834\udd6e'),\n    (0x1D1BF, 'M', '\ud834\uddb9\ud834\udd65\ud834\udd6f'),\n    (0x1D1C0, 'M', '\ud834\uddba\ud834\udd65\ud834\udd6f'),\n    (0x1D1C1, 'V'),\n    (0x1D1EB, 'X'),\n    (0x1D200, 'V'),\n    (0x1D246, 'X'),\n    (0x1D2C0, 'V'),\n    (0x1D2D4, 'X'),\n    (0x1D2E0, 'V'),\n    (0x1D2F4, 'X'),\n    (0x1D300, 'V'),\n    (0x1D357, 'X'),\n    (0x1D360, 'V'),\n    (0x1D379, 'X'),\n    (0x1D400, 'M', 'a'),\n    (0x1D401, 'M', 'b'),\n    (0x1D402, 'M', 'c'),\n    (0x1D403, 'M', 'd'),\n    (0x1D404, 'M', 'e'),\n    (0x1D405, 'M', 'f'),\n    (0x1D406, 'M', 'g'),\n    (0x1D407, 'M', 'h'),\n    (0x1D408, 'M', 'i'),\n    (0x1D409, 'M', 'j'),\n    (0x1D40A, 'M', 'k'),\n    (0x1D40B, 'M', 'l'),\n    (0x1D40C, 'M', 'm'),\n    (0x1D40D, 'M', 'n'),\n    (0x1D40E, 'M', 'o'),\n    (0x1D40F, 'M', 'p'),\n    (0x1D410, 'M', 'q'),\n    (0x1D411, 'M', 'r'),\n    (0x1D412, 'M', 's'),\n    (0x1D413, 'M', 't'),\n    (0x1D414, 'M', 'u'),\n    (0x1D415, 'M', 'v'),\n    (0x1D416, 'M', 'w'),\n    (0x1D417, 'M', 'x'),\n    (0x1D418, 'M', 'y'),\n    (0x1D419, 'M', 'z'),\n    (0x1D41A, 'M', 'a'),\n    (0x1D41B, 'M', 'b'),\n    (0x1D41C, 'M', 'c'),\n    (0x1D41D, 'M', 'd'),\n    (0x1D41E, 'M', 'e'),\n    (0x1D41F, 'M', 'f'),\n    (0x1D420, 'M', 'g'),\n    (0x1D421, 'M', 'h'),\n    (0x1D422, 'M', 'i'),\n    (0x1D423, 'M', 'j'),\n    (0x1D424, 'M', 'k'),\n    ]\n\ndef _seg_61() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D425, 'M', 'l'),\n    (0x1D426, 'M', 'm'),\n    (0x1D427, 'M', 'n'),\n    (0x1D428, 'M', 'o'),\n    (0x1D429, 'M', 'p'),\n    (0x1D42A, 'M', 'q'),\n    (0x1D42B, 'M', 'r'),\n    (0x1D42C, 'M', 's'),\n    (0x1D42D, 'M', 't'),\n    (0x1D42E, 'M', 'u'),\n    (0x1D42F, 'M', 'v'),\n    (0x1D430, 'M', 'w'),\n    (0x1D431, 'M', 'x'),\n    (0x1D432, 'M', 'y'),\n    (0x1D433, 'M', 'z'),\n    (0x1D434, 'M', 'a'),\n    (0x1D435, 'M', 'b'),\n    (0x1D436, 'M', 'c'),\n    (0x1D437, 'M', 'd'),\n    (0x1D438, 'M', 'e'),\n    (0x1D439, 'M', 'f'),\n    (0x1D43A, 'M', 'g'),\n    (0x1D43B, 'M', 'h'),\n    (0x1D43C, 'M', 'i'),\n    (0x1D43D, 'M', 'j'),\n    (0x1D43E, 'M', 'k'),\n    (0x1D43F, 'M', 'l'),\n    (0x1D440, 'M', 'm'),\n    (0x1D441, 'M', 'n'),\n    (0x1D442, 'M', 'o'),\n    (0x1D443, 'M', 'p'),\n    (0x1D444, 'M', 'q'),\n    (0x1D445, 'M', 'r'),\n    (0x1D446, 'M', 's'),\n    (0x1D447, 'M', 't'),\n    (0x1D448, 'M', 'u'),\n    (0x1D449, 'M', 'v'),\n    (0x1D44A, 'M', 'w'),\n    (0x1D44B, 'M', 'x'),\n    (0x1D44C, 'M', 'y'),\n    (0x1D44D, 'M', 'z'),\n    (0x1D44E, 'M', 'a'),\n    (0x1D44F, 'M', 'b'),\n    (0x1D450, 'M', 'c'),\n    (0x1D451, 'M', 'd'),\n    (0x1D452, 'M', 'e'),\n    (0x1D453, 'M', 'f'),\n    (0x1D454, 'M', 'g'),\n    (0x1D455, 'X'),\n    (0x1D456, 'M', 'i'),\n    (0x1D457, 'M', 'j'),\n    (0x1D458, 'M', 'k'),\n    (0x1D459, 'M', 'l'),\n    (0x1D45A, 'M', 'm'),\n    (0x1D45B, 'M', 'n'),\n    (0x1D45C, 'M', 'o'),\n    (0x1D45D, 'M', 'p'),\n    (0x1D45E, 'M', 'q'),\n    (0x1D45F, 'M', 'r'),\n    (0x1D460, 'M', 's'),\n    (0x1D461, 'M', 't'),\n    (0x1D462, 'M', 'u'),\n    (0x1D463, 'M', 'v'),\n    (0x1D464, 'M', 'w'),\n    (0x1D465, 'M', 'x'),\n    (0x1D466, 'M', 'y'),\n    (0x1D467, 'M', 'z'),\n    (0x1D468, 'M', 'a'),\n    (0x1D469, 'M', 'b'),\n    (0x1D46A, 'M', 'c'),\n    (0x1D46B, 'M', 'd'),\n    (0x1D46C, 'M', 'e'),\n    (0x1D46D, 'M', 'f'),\n    (0x1D46E, 'M', 'g'),\n    (0x1D46F, 'M', 'h'),\n    (0x1D470, 'M', 'i'),\n    (0x1D471, 'M', 'j'),\n    (0x1D472, 'M', 'k'),\n    (0x1D473, 'M', 'l'),\n    (0x1D474, 'M', 'm'),\n    (0x1D475, 'M', 'n'),\n    (0x1D476, 'M', 'o'),\n    (0x1D477, 'M', 'p'),\n    (0x1D478, 'M', 'q'),\n    (0x1D479, 'M', 'r'),\n    (0x1D47A, 'M', 's'),\n    (0x1D47B, 'M', 't'),\n    (0x1D47C, 'M', 'u'),\n    (0x1D47D, 'M', 'v'),\n    (0x1D47E, 'M', 'w'),\n    (0x1D47F, 'M', 'x'),\n    (0x1D480, 'M', 'y'),\n    (0x1D481, 'M', 'z'),\n    (0x1D482, 'M', 'a'),\n    (0x1D483, 'M', 'b'),\n    (0x1D484, 'M', 'c'),\n    (0x1D485, 'M', 'd'),\n    (0x1D486, 'M', 'e'),\n    (0x1D487, 'M', 'f'),\n    (0x1D488, 'M', 'g'),\n    ]\n\ndef _seg_62() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D489, 'M', 'h'),\n    (0x1D48A, 'M', 'i'),\n    (0x1D48B, 'M', 'j'),\n    (0x1D48C, 'M', 'k'),\n    (0x1D48D, 'M', 'l'),\n    (0x1D48E, 'M', 'm'),\n    (0x1D48F, 'M', 'n'),\n    (0x1D490, 'M', 'o'),\n    (0x1D491, 'M', 'p'),\n    (0x1D492, 'M', 'q'),\n    (0x1D493, 'M', 'r'),\n    (0x1D494, 'M', 's'),\n    (0x1D495, 'M', 't'),\n    (0x1D496, 'M', 'u'),\n    (0x1D497, 'M', 'v'),\n    (0x1D498, 'M', 'w'),\n    (0x1D499, 'M', 'x'),\n    (0x1D49A, 'M', 'y'),\n    (0x1D49B, 'M', 'z'),\n    (0x1D49C, 'M', 'a'),\n    (0x1D49D, 'X'),\n    (0x1D49E, 'M', 'c'),\n    (0x1D49F, 'M', 'd'),\n    (0x1D4A0, 'X'),\n    (0x1D4A2, 'M', 'g'),\n    (0x1D4A3, 'X'),\n    (0x1D4A5, 'M', 'j'),\n    (0x1D4A6, 'M', 'k'),\n    (0x1D4A7, 'X'),\n    (0x1D4A9, 'M', 'n'),\n    (0x1D4AA, 'M', 'o'),\n    (0x1D4AB, 'M', 'p'),\n    (0x1D4AC, 'M', 'q'),\n    (0x1D4AD, 'X'),\n    (0x1D4AE, 'M', 's'),\n    (0x1D4AF, 'M', 't'),\n    (0x1D4B0, 'M', 'u'),\n    (0x1D4B1, 'M', 'v'),\n    (0x1D4B2, 'M', 'w'),\n    (0x1D4B3, 'M', 'x'),\n    (0x1D4B4, 'M', 'y'),\n    (0x1D4B5, 'M', 'z'),\n    (0x1D4B6, 'M', 'a'),\n    (0x1D4B7, 'M', 'b'),\n    (0x1D4B8, 'M', 'c'),\n    (0x1D4B9, 'M', 'd'),\n    (0x1D4BA, 'X'),\n    (0x1D4BB, 'M', 'f'),\n    (0x1D4BC, 'X'),\n    (0x1D4BD, 'M', 'h'),\n    (0x1D4BE, 'M', 'i'),\n    (0x1D4BF, 'M', 'j'),\n    (0x1D4C0, 'M', 'k'),\n    (0x1D4C1, 'M', 'l'),\n    (0x1D4C2, 'M', 'm'),\n    (0x1D4C3, 'M', 'n'),\n    (0x1D4C4, 'X'),\n    (0x1D4C5, 'M', 'p'),\n    (0x1D4C6, 'M', 'q'),\n    (0x1D4C7, 'M', 'r'),\n    (0x1D4C8, 'M', 's'),\n    (0x1D4C9, 'M', 't'),\n    (0x1D4CA, 'M', 'u'),\n    (0x1D4CB, 'M', 'v'),\n    (0x1D4CC, 'M', 'w'),\n    (0x1D4CD, 'M', 'x'),\n    (0x1D4CE, 'M', 'y'),\n    (0x1D4CF, 'M', 'z'),\n    (0x1D4D0, 'M', 'a'),\n    (0x1D4D1, 'M', 'b'),\n    (0x1D4D2, 'M', 'c'),\n    (0x1D4D3, 'M', 'd'),\n    (0x1D4D4, 'M', 'e'),\n    (0x1D4D5, 'M', 'f'),\n    (0x1D4D6, 'M', 'g'),\n    (0x1D4D7, 'M', 'h'),\n    (0x1D4D8, 'M', 'i'),\n    (0x1D4D9, 'M', 'j'),\n    (0x1D4DA, 'M', 'k'),\n    (0x1D4DB, 'M', 'l'),\n    (0x1D4DC, 'M', 'm'),\n    (0x1D4DD, 'M', 'n'),\n    (0x1D4DE, 'M', 'o'),\n    (0x1D4DF, 'M', 'p'),\n    (0x1D4E0, 'M', 'q'),\n    (0x1D4E1, 'M', 'r'),\n    (0x1D4E2, 'M', 's'),\n    (0x1D4E3, 'M', 't'),\n    (0x1D4E4, 'M', 'u'),\n    (0x1D4E5, 'M', 'v'),\n    (0x1D4E6, 'M', 'w'),\n    (0x1D4E7, 'M', 'x'),\n    (0x1D4E8, 'M', 'y'),\n    (0x1D4E9, 'M', 'z'),\n    (0x1D4EA, 'M', 'a'),\n    (0x1D4EB, 'M', 'b'),\n    (0x1D4EC, 'M', 'c'),\n    (0x1D4ED, 'M', 'd'),\n    (0x1D4EE, 'M', 'e'),\n    (0x1D4EF, 'M', 'f'),\n    ]\n\ndef _seg_63() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D4F0, 'M', 'g'),\n    (0x1D4F1, 'M', 'h'),\n    (0x1D4F2, 'M', 'i'),\n    (0x1D4F3, 'M', 'j'),\n    (0x1D4F4, 'M', 'k'),\n    (0x1D4F5, 'M', 'l'),\n    (0x1D4F6, 'M', 'm'),\n    (0x1D4F7, 'M', 'n'),\n    (0x1D4F8, 'M', 'o'),\n    (0x1D4F9, 'M', 'p'),\n    (0x1D4FA, 'M', 'q'),\n    (0x1D4FB, 'M', 'r'),\n    (0x1D4FC, 'M', 's'),\n    (0x1D4FD, 'M', 't'),\n    (0x1D4FE, 'M', 'u'),\n    (0x1D4FF, 'M', 'v'),\n    (0x1D500, 'M', 'w'),\n    (0x1D501, 'M', 'x'),\n    (0x1D502, 'M', 'y'),\n    (0x1D503, 'M', 'z'),\n    (0x1D504, 'M', 'a'),\n    (0x1D505, 'M', 'b'),\n    (0x1D506, 'X'),\n    (0x1D507, 'M', 'd'),\n    (0x1D508, 'M', 'e'),\n    (0x1D509, 'M', 'f'),\n    (0x1D50A, 'M', 'g'),\n    (0x1D50B, 'X'),\n    (0x1D50D, 'M', 'j'),\n    (0x1D50E, 'M', 'k'),\n    (0x1D50F, 'M', 'l'),\n    (0x1D510, 'M', 'm'),\n    (0x1D511, 'M', 'n'),\n    (0x1D512, 'M', 'o'),\n    (0x1D513, 'M', 'p'),\n    (0x1D514, 'M', 'q'),\n    (0x1D515, 'X'),\n    (0x1D516, 'M', 's'),\n    (0x1D517, 'M', 't'),\n    (0x1D518, 'M', 'u'),\n    (0x1D519, 'M', 'v'),\n    (0x1D51A, 'M', 'w'),\n    (0x1D51B, 'M', 'x'),\n    (0x1D51C, 'M', 'y'),\n    (0x1D51D, 'X'),\n    (0x1D51E, 'M', 'a'),\n    (0x1D51F, 'M', 'b'),\n    (0x1D520, 'M', 'c'),\n    (0x1D521, 'M', 'd'),\n    (0x1D522, 'M', 'e'),\n    (0x1D523, 'M', 'f'),\n    (0x1D524, 'M', 'g'),\n    (0x1D525, 'M', 'h'),\n    (0x1D526, 'M', 'i'),\n    (0x1D527, 'M', 'j'),\n    (0x1D528, 'M', 'k'),\n    (0x1D529, 'M', 'l'),\n    (0x1D52A, 'M', 'm'),\n    (0x1D52B, 'M', 'n'),\n    (0x1D52C, 'M', 'o'),\n    (0x1D52D, 'M', 'p'),\n    (0x1D52E, 'M', 'q'),\n    (0x1D52F, 'M', 'r'),\n    (0x1D530, 'M', 's'),\n    (0x1D531, 'M', 't'),\n    (0x1D532, 'M', 'u'),\n    (0x1D533, 'M', 'v'),\n    (0x1D534, 'M', 'w'),\n    (0x1D535, 'M', 'x'),\n    (0x1D536, 'M', 'y'),\n    (0x1D537, 'M', 'z'),\n    (0x1D538, 'M', 'a'),\n    (0x1D539, 'M', 'b'),\n    (0x1D53A, 'X'),\n    (0x1D53B, 'M', 'd'),\n    (0x1D53C, 'M', 'e'),\n    (0x1D53D, 'M', 'f'),\n    (0x1D53E, 'M', 'g'),\n    (0x1D53F, 'X'),\n    (0x1D540, 'M', 'i'),\n    (0x1D541, 'M', 'j'),\n    (0x1D542, 'M', 'k'),\n    (0x1D543, 'M', 'l'),\n    (0x1D544, 'M', 'm'),\n    (0x1D545, 'X'),\n    (0x1D546, 'M', 'o'),\n    (0x1D547, 'X'),\n    (0x1D54A, 'M', 's'),\n    (0x1D54B, 'M', 't'),\n    (0x1D54C, 'M', 'u'),\n    (0x1D54D, 'M', 'v'),\n    (0x1D54E, 'M', 'w'),\n    (0x1D54F, 'M', 'x'),\n    (0x1D550, 'M', 'y'),\n    (0x1D551, 'X'),\n    (0x1D552, 'M', 'a'),\n    (0x1D553, 'M', 'b'),\n    (0x1D554, 'M', 'c'),\n    (0x1D555, 'M', 'd'),\n    (0x1D556, 'M', 'e'),\n    ]\n\ndef _seg_64() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D557, 'M', 'f'),\n    (0x1D558, 'M', 'g'),\n    (0x1D559, 'M', 'h'),\n    (0x1D55A, 'M', 'i'),\n    (0x1D55B, 'M', 'j'),\n    (0x1D55C, 'M', 'k'),\n    (0x1D55D, 'M', 'l'),\n    (0x1D55E, 'M', 'm'),\n    (0x1D55F, 'M', 'n'),\n    (0x1D560, 'M', 'o'),\n    (0x1D561, 'M', 'p'),\n    (0x1D562, 'M', 'q'),\n    (0x1D563, 'M', 'r'),\n    (0x1D564, 'M', 's'),\n    (0x1D565, 'M', 't'),\n    (0x1D566, 'M', 'u'),\n    (0x1D567, 'M', 'v'),\n    (0x1D568, 'M', 'w'),\n    (0x1D569, 'M', 'x'),\n    (0x1D56A, 'M', 'y'),\n    (0x1D56B, 'M', 'z'),\n    (0x1D56C, 'M', 'a'),\n    (0x1D56D, 'M', 'b'),\n    (0x1D56E, 'M', 'c'),\n    (0x1D56F, 'M', 'd'),\n    (0x1D570, 'M', 'e'),\n    (0x1D571, 'M', 'f'),\n    (0x1D572, 'M', 'g'),\n    (0x1D573, 'M', 'h'),\n    (0x1D574, 'M', 'i'),\n    (0x1D575, 'M', 'j'),\n    (0x1D576, 'M', 'k'),\n    (0x1D577, 'M', 'l'),\n    (0x1D578, 'M', 'm'),\n    (0x1D579, 'M', 'n'),\n    (0x1D57A, 'M', 'o'),\n    (0x1D57B, 'M', 'p'),\n    (0x1D57C, 'M', 'q'),\n    (0x1D57D, 'M', 'r'),\n    (0x1D57E, 'M', 's'),\n    (0x1D57F, 'M', 't'),\n    (0x1D580, 'M', 'u'),\n    (0x1D581, 'M', 'v'),\n    (0x1D582, 'M', 'w'),\n    (0x1D583, 'M', 'x'),\n    (0x1D584, 'M', 'y'),\n    (0x1D585, 'M', 'z'),\n    (0x1D586, 'M', 'a'),\n    (0x1D587, 'M', 'b'),\n    (0x1D588, 'M', 'c'),\n    (0x1D589, 'M', 'd'),\n    (0x1D58A, 'M', 'e'),\n    (0x1D58B, 'M', 'f'),\n    (0x1D58C, 'M', 'g'),\n    (0x1D58D, 'M', 'h'),\n    (0x1D58E, 'M', 'i'),\n    (0x1D58F, 'M', 'j'),\n    (0x1D590, 'M', 'k'),\n    (0x1D591, 'M', 'l'),\n    (0x1D592, 'M', 'm'),\n    (0x1D593, 'M', 'n'),\n    (0x1D594, 'M', 'o'),\n    (0x1D595, 'M', 'p'),\n    (0x1D596, 'M', 'q'),\n    (0x1D597, 'M', 'r'),\n    (0x1D598, 'M', 's'),\n    (0x1D599, 'M', 't'),\n    (0x1D59A, 'M', 'u'),\n    (0x1D59B, 'M', 'v'),\n    (0x1D59C, 'M', 'w'),\n    (0x1D59D, 'M', 'x'),\n    (0x1D59E, 'M', 'y'),\n    (0x1D59F, 'M', 'z'),\n    (0x1D5A0, 'M', 'a'),\n    (0x1D5A1, 'M', 'b'),\n    (0x1D5A2, 'M', 'c'),\n    (0x1D5A3, 'M', 'd'),\n    (0x1D5A4, 'M', 'e'),\n    (0x1D5A5, 'M', 'f'),\n    (0x1D5A6, 'M', 'g'),\n    (0x1D5A7, 'M', 'h'),\n    (0x1D5A8, 'M', 'i'),\n    (0x1D5A9, 'M', 'j'),\n    (0x1D5AA, 'M', 'k'),\n    (0x1D5AB, 'M', 'l'),\n    (0x1D5AC, 'M', 'm'),\n    (0x1D5AD, 'M', 'n'),\n    (0x1D5AE, 'M', 'o'),\n    (0x1D5AF, 'M', 'p'),\n    (0x1D5B0, 'M', 'q'),\n    (0x1D5B1, 'M', 'r'),\n    (0x1D5B2, 'M', 's'),\n    (0x1D5B3, 'M', 't'),\n    (0x1D5B4, 'M', 'u'),\n    (0x1D5B5, 'M', 'v'),\n    (0x1D5B6, 'M', 'w'),\n    (0x1D5B7, 'M', 'x'),\n    (0x1D5B8, 'M', 'y'),\n    (0x1D5B9, 'M', 'z'),\n    (0x1D5BA, 'M', 'a'),\n    ]\n\ndef _seg_65() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D5BB, 'M', 'b'),\n    (0x1D5BC, 'M', 'c'),\n    (0x1D5BD, 'M', 'd'),\n    (0x1D5BE, 'M', 'e'),\n    (0x1D5BF, 'M', 'f'),\n    (0x1D5C0, 'M', 'g'),\n    (0x1D5C1, 'M', 'h'),\n    (0x1D5C2, 'M', 'i'),\n    (0x1D5C3, 'M', 'j'),\n    (0x1D5C4, 'M', 'k'),\n    (0x1D5C5, 'M', 'l'),\n    (0x1D5C6, 'M', 'm'),\n    (0x1D5C7, 'M', 'n'),\n    (0x1D5C8, 'M', 'o'),\n    (0x1D5C9, 'M', 'p'),\n    (0x1D5CA, 'M', 'q'),\n    (0x1D5CB, 'M', 'r'),\n    (0x1D5CC, 'M', 's'),\n    (0x1D5CD, 'M', 't'),\n    (0x1D5CE, 'M', 'u'),\n    (0x1D5CF, 'M', 'v'),\n    (0x1D5D0, 'M', 'w'),\n    (0x1D5D1, 'M', 'x'),\n    (0x1D5D2, 'M', 'y'),\n    (0x1D5D3, 'M', 'z'),\n    (0x1D5D4, 'M', 'a'),\n    (0x1D5D5, 'M', 'b'),\n    (0x1D5D6, 'M', 'c'),\n    (0x1D5D7, 'M', 'd'),\n    (0x1D5D8, 'M', 'e'),\n    (0x1D5D9, 'M', 'f'),\n    (0x1D5DA, 'M', 'g'),\n    (0x1D5DB, 'M', 'h'),\n    (0x1D5DC, 'M', 'i'),\n    (0x1D5DD, 'M', 'j'),\n    (0x1D5DE, 'M', 'k'),\n    (0x1D5DF, 'M', 'l'),\n    (0x1D5E0, 'M', 'm'),\n    (0x1D5E1, 'M', 'n'),\n    (0x1D5E2, 'M', 'o'),\n    (0x1D5E3, 'M', 'p'),\n    (0x1D5E4, 'M', 'q'),\n    (0x1D5E5, 'M', 'r'),\n    (0x1D5E6, 'M', 's'),\n    (0x1D5E7, 'M', 't'),\n    (0x1D5E8, 'M', 'u'),\n    (0x1D5E9, 'M', 'v'),\n    (0x1D5EA, 'M', 'w'),\n    (0x1D5EB, 'M', 'x'),\n    (0x1D5EC, 'M', 'y'),\n    (0x1D5ED, 'M', 'z'),\n    (0x1D5EE, 'M', 'a'),\n    (0x1D5EF, 'M', 'b'),\n    (0x1D5F0, 'M', 'c'),\n    (0x1D5F1, 'M', 'd'),\n    (0x1D5F2, 'M', 'e'),\n    (0x1D5F3, 'M', 'f'),\n    (0x1D5F4, 'M', 'g'),\n    (0x1D5F5, 'M', 'h'),\n    (0x1D5F6, 'M', 'i'),\n    (0x1D5F7, 'M', 'j'),\n    (0x1D5F8, 'M', 'k'),\n    (0x1D5F9, 'M', 'l'),\n    (0x1D5FA, 'M', 'm'),\n    (0x1D5FB, 'M', 'n'),\n    (0x1D5FC, 'M', 'o'),\n    (0x1D5FD, 'M', 'p'),\n    (0x1D5FE, 'M', 'q'),\n    (0x1D5FF, 'M', 'r'),\n    (0x1D600, 'M', 's'),\n    (0x1D601, 'M', 't'),\n    (0x1D602, 'M', 'u'),\n    (0x1D603, 'M', 'v'),\n    (0x1D604, 'M', 'w'),\n    (0x1D605, 'M', 'x'),\n    (0x1D606, 'M', 'y'),\n    (0x1D607, 'M', 'z'),\n    (0x1D608, 'M', 'a'),\n    (0x1D609, 'M', 'b'),\n    (0x1D60A, 'M', 'c'),\n    (0x1D60B, 'M', 'd'),\n    (0x1D60C, 'M', 'e'),\n    (0x1D60D, 'M', 'f'),\n    (0x1D60E, 'M', 'g'),\n    (0x1D60F, 'M', 'h'),\n    (0x1D610, 'M', 'i'),\n    (0x1D611, 'M', 'j'),\n    (0x1D612, 'M', 'k'),\n    (0x1D613, 'M', 'l'),\n    (0x1D614, 'M', 'm'),\n    (0x1D615, 'M', 'n'),\n    (0x1D616, 'M', 'o'),\n    (0x1D617, 'M', 'p'),\n    (0x1D618, 'M', 'q'),\n    (0x1D619, 'M', 'r'),\n    (0x1D61A, 'M', 's'),\n    (0x1D61B, 'M', 't'),\n    (0x1D61C, 'M', 'u'),\n    (0x1D61D, 'M', 'v'),\n    (0x1D61E, 'M', 'w'),\n    ]\n\ndef _seg_66() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D61F, 'M', 'x'),\n    (0x1D620, 'M', 'y'),\n    (0x1D621, 'M', 'z'),\n    (0x1D622, 'M', 'a'),\n    (0x1D623, 'M', 'b'),\n    (0x1D624, 'M', 'c'),\n    (0x1D625, 'M', 'd'),\n    (0x1D626, 'M', 'e'),\n    (0x1D627, 'M', 'f'),\n    (0x1D628, 'M', 'g'),\n    (0x1D629, 'M', 'h'),\n    (0x1D62A, 'M', 'i'),\n    (0x1D62B, 'M', 'j'),\n    (0x1D62C, 'M', 'k'),\n    (0x1D62D, 'M', 'l'),\n    (0x1D62E, 'M', 'm'),\n    (0x1D62F, 'M', 'n'),\n    (0x1D630, 'M', 'o'),\n    (0x1D631, 'M', 'p'),\n    (0x1D632, 'M', 'q'),\n    (0x1D633, 'M', 'r'),\n    (0x1D634, 'M', 's'),\n    (0x1D635, 'M', 't'),\n    (0x1D636, 'M', 'u'),\n    (0x1D637, 'M', 'v'),\n    (0x1D638, 'M', 'w'),\n    (0x1D639, 'M', 'x'),\n    (0x1D63A, 'M', 'y'),\n    (0x1D63B, 'M', 'z'),\n    (0x1D63C, 'M', 'a'),\n    (0x1D63D, 'M', 'b'),\n    (0x1D63E, 'M', 'c'),\n    (0x1D63F, 'M', 'd'),\n    (0x1D640, 'M', 'e'),\n    (0x1D641, 'M', 'f'),\n    (0x1D642, 'M', 'g'),\n    (0x1D643, 'M', 'h'),\n    (0x1D644, 'M', 'i'),\n    (0x1D645, 'M', 'j'),\n    (0x1D646, 'M', 'k'),\n    (0x1D647, 'M', 'l'),\n    (0x1D648, 'M', 'm'),\n    (0x1D649, 'M', 'n'),\n    (0x1D64A, 'M', 'o'),\n    (0x1D64B, 'M', 'p'),\n    (0x1D64C, 'M', 'q'),\n    (0x1D64D, 'M', 'r'),\n    (0x1D64E, 'M', 's'),\n    (0x1D64F, 'M', 't'),\n    (0x1D650, 'M', 'u'),\n    (0x1D651, 'M', 'v'),\n    (0x1D652, 'M', 'w'),\n    (0x1D653, 'M', 'x'),\n    (0x1D654, 'M', 'y'),\n    (0x1D655, 'M', 'z'),\n    (0x1D656, 'M', 'a'),\n    (0x1D657, 'M', 'b'),\n    (0x1D658, 'M', 'c'),\n    (0x1D659, 'M', 'd'),\n    (0x1D65A, 'M', 'e'),\n    (0x1D65B, 'M', 'f'),\n    (0x1D65C, 'M', 'g'),\n    (0x1D65D, 'M', 'h'),\n    (0x1D65E, 'M', 'i'),\n    (0x1D65F, 'M', 'j'),\n    (0x1D660, 'M', 'k'),\n    (0x1D661, 'M', 'l'),\n    (0x1D662, 'M', 'm'),\n    (0x1D663, 'M', 'n'),\n    (0x1D664, 'M', 'o'),\n    (0x1D665, 'M', 'p'),\n    (0x1D666, 'M', 'q'),\n    (0x1D667, 'M', 'r'),\n    (0x1D668, 'M', 's'),\n    (0x1D669, 'M', 't'),\n    (0x1D66A, 'M', 'u'),\n    (0x1D66B, 'M', 'v'),\n    (0x1D66C, 'M', 'w'),\n    (0x1D66D, 'M', 'x'),\n    (0x1D66E, 'M', 'y'),\n    (0x1D66F, 'M', 'z'),\n    (0x1D670, 'M', 'a'),\n    (0x1D671, 'M', 'b'),\n    (0x1D672, 'M', 'c'),\n    (0x1D673, 'M', 'd'),\n    (0x1D674, 'M', 'e'),\n    (0x1D675, 'M', 'f'),\n    (0x1D676, 'M', 'g'),\n    (0x1D677, 'M', 'h'),\n    (0x1D678, 'M', 'i'),\n    (0x1D679, 'M', 'j'),\n    (0x1D67A, 'M', 'k'),\n    (0x1D67B, 'M', 'l'),\n    (0x1D67C, 'M', 'm'),\n    (0x1D67D, 'M', 'n'),\n    (0x1D67E, 'M', 'o'),\n    (0x1D67F, 'M', 'p'),\n    (0x1D680, 'M', 'q'),\n    (0x1D681, 'M', 'r'),\n    (0x1D682, 'M', 's'),\n    ]\n\ndef _seg_67() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D683, 'M', 't'),\n    (0x1D684, 'M', 'u'),\n    (0x1D685, 'M', 'v'),\n    (0x1D686, 'M', 'w'),\n    (0x1D687, 'M', 'x'),\n    (0x1D688, 'M', 'y'),\n    (0x1D689, 'M', 'z'),\n    (0x1D68A, 'M', 'a'),\n    (0x1D68B, 'M', 'b'),\n    (0x1D68C, 'M', 'c'),\n    (0x1D68D, 'M', 'd'),\n    (0x1D68E, 'M', 'e'),\n    (0x1D68F, 'M', 'f'),\n    (0x1D690, 'M', 'g'),\n    (0x1D691, 'M', 'h'),\n    (0x1D692, 'M', 'i'),\n    (0x1D693, 'M', 'j'),\n    (0x1D694, 'M', 'k'),\n    (0x1D695, 'M', 'l'),\n    (0x1D696, 'M', 'm'),\n    (0x1D697, 'M', 'n'),\n    (0x1D698, 'M', 'o'),\n    (0x1D699, 'M', 'p'),\n    (0x1D69A, 'M', 'q'),\n    (0x1D69B, 'M', 'r'),\n    (0x1D69C, 'M', 's'),\n    (0x1D69D, 'M', 't'),\n    (0x1D69E, 'M', 'u'),\n    (0x1D69F, 'M', 'v'),\n    (0x1D6A0, 'M', 'w'),\n    (0x1D6A1, 'M', 'x'),\n    (0x1D6A2, 'M', 'y'),\n    (0x1D6A3, 'M', 'z'),\n    (0x1D6A4, 'M', '\u0131'),\n    (0x1D6A5, 'M', '\u0237'),\n    (0x1D6A6, 'X'),\n    (0x1D6A8, 'M', '\u03b1'),\n    (0x1D6A9, 'M', '\u03b2'),\n    (0x1D6AA, 'M', '\u03b3'),\n    (0x1D6AB, 'M', '\u03b4'),\n    (0x1D6AC, 'M', '\u03b5'),\n    (0x1D6AD, 'M', '\u03b6'),\n    (0x1D6AE, 'M', '\u03b7'),\n    (0x1D6AF, 'M', '\u03b8'),\n    (0x1D6B0, 'M', '\u03b9'),\n    (0x1D6B1, 'M', '\u03ba'),\n    (0x1D6B2, 'M', '\u03bb'),\n    (0x1D6B3, 'M', '\u03bc'),\n    (0x1D6B4, 'M', '\u03bd'),\n    (0x1D6B5, 'M', '\u03be'),\n    (0x1D6B6, 'M', '\u03bf'),\n    (0x1D6B7, 'M', '\u03c0'),\n    (0x1D6B8, 'M', '\u03c1'),\n    (0x1D6B9, 'M', '\u03b8'),\n    (0x1D6BA, 'M', '\u03c3'),\n    (0x1D6BB, 'M', '\u03c4'),\n    (0x1D6BC, 'M', '\u03c5'),\n    (0x1D6BD, 'M', '\u03c6'),\n    (0x1D6BE, 'M', '\u03c7'),\n    (0x1D6BF, 'M', '\u03c8'),\n    (0x1D6C0, 'M', '\u03c9'),\n    (0x1D6C1, 'M', '\u2207'),\n    (0x1D6C2, 'M', '\u03b1'),\n    (0x1D6C3, 'M', '\u03b2'),\n    (0x1D6C4, 'M', '\u03b3'),\n    (0x1D6C5, 'M', '\u03b4'),\n    (0x1D6C6, 'M', '\u03b5'),\n    (0x1D6C7, 'M', '\u03b6'),\n    (0x1D6C8, 'M', '\u03b7'),\n    (0x1D6C9, 'M', '\u03b8'),\n    (0x1D6CA, 'M', '\u03b9'),\n    (0x1D6CB, 'M', '\u03ba'),\n    (0x1D6CC, 'M', '\u03bb'),\n    (0x1D6CD, 'M', '\u03bc'),\n    (0x1D6CE, 'M', '\u03bd'),\n    (0x1D6CF, 'M', '\u03be'),\n    (0x1D6D0, 'M', '\u03bf'),\n    (0x1D6D1, 'M', '\u03c0'),\n    (0x1D6D2, 'M', '\u03c1'),\n    (0x1D6D3, 'M', '\u03c3'),\n    (0x1D6D5, 'M', '\u03c4'),\n    (0x1D6D6, 'M', '\u03c5'),\n    (0x1D6D7, 'M', '\u03c6'),\n    (0x1D6D8, 'M', '\u03c7'),\n    (0x1D6D9, 'M', '\u03c8'),\n    (0x1D6DA, 'M', '\u03c9'),\n    (0x1D6DB, 'M', '\u2202'),\n    (0x1D6DC, 'M', '\u03b5'),\n    (0x1D6DD, 'M', '\u03b8'),\n    (0x1D6DE, 'M', '\u03ba'),\n    (0x1D6DF, 'M', '\u03c6'),\n    (0x1D6E0, 'M', '\u03c1'),\n    (0x1D6E1, 'M', '\u03c0'),\n    (0x1D6E2, 'M', '\u03b1'),\n    (0x1D6E3, 'M', '\u03b2'),\n    (0x1D6E4, 'M', '\u03b3'),\n    (0x1D6E5, 'M', '\u03b4'),\n    (0x1D6E6, 'M', '\u03b5'),\n    (0x1D6E7, 'M', '\u03b6'),\n    (0x1D6E8, 'M', '\u03b7'),\n    ]\n\ndef _seg_68() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D6E9, 'M', '\u03b8'),\n    (0x1D6EA, 'M', '\u03b9'),\n    (0x1D6EB, 'M', '\u03ba'),\n    (0x1D6EC, 'M', '\u03bb'),\n    (0x1D6ED, 'M', '\u03bc'),\n    (0x1D6EE, 'M', '\u03bd'),\n    (0x1D6EF, 'M', '\u03be'),\n    (0x1D6F0, 'M', '\u03bf'),\n    (0x1D6F1, 'M', '\u03c0'),\n    (0x1D6F2, 'M', '\u03c1'),\n    (0x1D6F3, 'M', '\u03b8'),\n    (0x1D6F4, 'M', '\u03c3'),\n    (0x1D6F5, 'M', '\u03c4'),\n    (0x1D6F6, 'M', '\u03c5'),\n    (0x1D6F7, 'M', '\u03c6'),\n    (0x1D6F8, 'M', '\u03c7'),\n    (0x1D6F9, 'M', '\u03c8'),\n    (0x1D6FA, 'M', '\u03c9'),\n    (0x1D6FB, 'M', '\u2207'),\n    (0x1D6FC, 'M', '\u03b1'),\n    (0x1D6FD, 'M', '\u03b2'),\n    (0x1D6FE, 'M', '\u03b3'),\n    (0x1D6FF, 'M', '\u03b4'),\n    (0x1D700, 'M', '\u03b5'),\n    (0x1D701, 'M', '\u03b6'),\n    (0x1D702, 'M', '\u03b7'),\n    (0x1D703, 'M', '\u03b8'),\n    (0x1D704, 'M', '\u03b9'),\n    (0x1D705, 'M', '\u03ba'),\n    (0x1D706, 'M', '\u03bb'),\n    (0x1D707, 'M', '\u03bc'),\n    (0x1D708, 'M', '\u03bd'),\n    (0x1D709, 'M', '\u03be'),\n    (0x1D70A, 'M', '\u03bf'),\n    (0x1D70B, 'M', '\u03c0'),\n    (0x1D70C, 'M', '\u03c1'),\n    (0x1D70D, 'M', '\u03c3'),\n    (0x1D70F, 'M', '\u03c4'),\n    (0x1D710, 'M', '\u03c5'),\n    (0x1D711, 'M', '\u03c6'),\n    (0x1D712, 'M', '\u03c7'),\n    (0x1D713, 'M', '\u03c8'),\n    (0x1D714, 'M', '\u03c9'),\n    (0x1D715, 'M', '\u2202'),\n    (0x1D716, 'M', '\u03b5'),\n    (0x1D717, 'M', '\u03b8'),\n    (0x1D718, 'M', '\u03ba'),\n    (0x1D719, 'M', '\u03c6'),\n    (0x1D71A, 'M', '\u03c1'),\n    (0x1D71B, 'M', '\u03c0'),\n    (0x1D71C, 'M', '\u03b1'),\n    (0x1D71D, 'M', '\u03b2'),\n    (0x1D71E, 'M', '\u03b3'),\n    (0x1D71F, 'M', '\u03b4'),\n    (0x1D720, 'M', '\u03b5'),\n    (0x1D721, 'M', '\u03b6'),\n    (0x1D722, 'M', '\u03b7'),\n    (0x1D723, 'M', '\u03b8'),\n    (0x1D724, 'M', '\u03b9'),\n    (0x1D725, 'M', '\u03ba'),\n    (0x1D726, 'M', '\u03bb'),\n    (0x1D727, 'M', '\u03bc'),\n    (0x1D728, 'M', '\u03bd'),\n    (0x1D729, 'M', '\u03be'),\n    (0x1D72A, 'M', '\u03bf'),\n    (0x1D72B, 'M', '\u03c0'),\n    (0x1D72C, 'M', '\u03c1'),\n    (0x1D72D, 'M', '\u03b8'),\n    (0x1D72E, 'M', '\u03c3'),\n    (0x1D72F, 'M', '\u03c4'),\n    (0x1D730, 'M', '\u03c5'),\n    (0x1D731, 'M', '\u03c6'),\n    (0x1D732, 'M', '\u03c7'),\n    (0x1D733, 'M', '\u03c8'),\n    (0x1D734, 'M', '\u03c9'),\n    (0x1D735, 'M', '\u2207'),\n    (0x1D736, 'M', '\u03b1'),\n    (0x1D737, 'M', '\u03b2'),\n    (0x1D738, 'M', '\u03b3'),\n    (0x1D739, 'M', '\u03b4'),\n    (0x1D73A, 'M', '\u03b5'),\n    (0x1D73B, 'M', '\u03b6'),\n    (0x1D73C, 'M', '\u03b7'),\n    (0x1D73D, 'M', '\u03b8'),\n    (0x1D73E, 'M', '\u03b9'),\n    (0x1D73F, 'M', '\u03ba'),\n    (0x1D740, 'M', '\u03bb'),\n    (0x1D741, 'M', '\u03bc'),\n    (0x1D742, 'M', '\u03bd'),\n    (0x1D743, 'M', '\u03be'),\n    (0x1D744, 'M', '\u03bf'),\n    (0x1D745, 'M', '\u03c0'),\n    (0x1D746, 'M', '\u03c1'),\n    (0x1D747, 'M', '\u03c3'),\n    (0x1D749, 'M', '\u03c4'),\n    (0x1D74A, 'M', '\u03c5'),\n    (0x1D74B, 'M', '\u03c6'),\n    (0x1D74C, 'M', '\u03c7'),\n    (0x1D74D, 'M', '\u03c8'),\n    (0x1D74E, 'M', '\u03c9'),\n    ]\n\ndef _seg_69() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D74F, 'M', '\u2202'),\n    (0x1D750, 'M', '\u03b5'),\n    (0x1D751, 'M', '\u03b8'),\n    (0x1D752, 'M', '\u03ba'),\n    (0x1D753, 'M', '\u03c6'),\n    (0x1D754, 'M', '\u03c1'),\n    (0x1D755, 'M', '\u03c0'),\n    (0x1D756, 'M', '\u03b1'),\n    (0x1D757, 'M', '\u03b2'),\n    (0x1D758, 'M', '\u03b3'),\n    (0x1D759, 'M', '\u03b4'),\n    (0x1D75A, 'M', '\u03b5'),\n    (0x1D75B, 'M', '\u03b6'),\n    (0x1D75C, 'M', '\u03b7'),\n    (0x1D75D, 'M', '\u03b8'),\n    (0x1D75E, 'M', '\u03b9'),\n    (0x1D75F, 'M', '\u03ba'),\n    (0x1D760, 'M', '\u03bb'),\n    (0x1D761, 'M', '\u03bc'),\n    (0x1D762, 'M', '\u03bd'),\n    (0x1D763, 'M', '\u03be'),\n    (0x1D764, 'M', '\u03bf'),\n    (0x1D765, 'M', '\u03c0'),\n    (0x1D766, 'M', '\u03c1'),\n    (0x1D767, 'M', '\u03b8'),\n    (0x1D768, 'M', '\u03c3'),\n    (0x1D769, 'M', '\u03c4'),\n    (0x1D76A, 'M', '\u03c5'),\n    (0x1D76B, 'M', '\u03c6'),\n    (0x1D76C, 'M', '\u03c7'),\n    (0x1D76D, 'M', '\u03c8'),\n    (0x1D76E, 'M', '\u03c9'),\n    (0x1D76F, 'M', '\u2207'),\n    (0x1D770, 'M', '\u03b1'),\n    (0x1D771, 'M', '\u03b2'),\n    (0x1D772, 'M', '\u03b3'),\n    (0x1D773, 'M', '\u03b4'),\n    (0x1D774, 'M', '\u03b5'),\n    (0x1D775, 'M', '\u03b6'),\n    (0x1D776, 'M', '\u03b7'),\n    (0x1D777, 'M', '\u03b8'),\n    (0x1D778, 'M', '\u03b9'),\n    (0x1D779, 'M', '\u03ba'),\n    (0x1D77A, 'M', '\u03bb'),\n    (0x1D77B, 'M', '\u03bc'),\n    (0x1D77C, 'M', '\u03bd'),\n    (0x1D77D, 'M', '\u03be'),\n    (0x1D77E, 'M', '\u03bf'),\n    (0x1D77F, 'M', '\u03c0'),\n    (0x1D780, 'M', '\u03c1'),\n    (0x1D781, 'M', '\u03c3'),\n    (0x1D783, 'M', '\u03c4'),\n    (0x1D784, 'M', '\u03c5'),\n    (0x1D785, 'M', '\u03c6'),\n    (0x1D786, 'M', '\u03c7'),\n    (0x1D787, 'M', '\u03c8'),\n    (0x1D788, 'M', '\u03c9'),\n    (0x1D789, 'M', '\u2202'),\n    (0x1D78A, 'M', '\u03b5'),\n    (0x1D78B, 'M', '\u03b8'),\n    (0x1D78C, 'M', '\u03ba'),\n    (0x1D78D, 'M', '\u03c6'),\n    (0x1D78E, 'M', '\u03c1'),\n    (0x1D78F, 'M', '\u03c0'),\n    (0x1D790, 'M', '\u03b1'),\n    (0x1D791, 'M', '\u03b2'),\n    (0x1D792, 'M', '\u03b3'),\n    (0x1D793, 'M', '\u03b4'),\n    (0x1D794, 'M', '\u03b5'),\n    (0x1D795, 'M', '\u03b6'),\n    (0x1D796, 'M', '\u03b7'),\n    (0x1D797, 'M', '\u03b8'),\n    (0x1D798, 'M', '\u03b9'),\n    (0x1D799, 'M', '\u03ba'),\n    (0x1D79A, 'M', '\u03bb'),\n    (0x1D79B, 'M', '\u03bc'),\n    (0x1D79C, 'M', '\u03bd'),\n    (0x1D79D, 'M', '\u03be'),\n    (0x1D79E, 'M', '\u03bf'),\n    (0x1D79F, 'M', '\u03c0'),\n    (0x1D7A0, 'M', '\u03c1'),\n    (0x1D7A1, 'M', '\u03b8'),\n    (0x1D7A2, 'M', '\u03c3'),\n    (0x1D7A3, 'M', '\u03c4'),\n    (0x1D7A4, 'M', '\u03c5'),\n    (0x1D7A5, 'M', '\u03c6'),\n    (0x1D7A6, 'M', '\u03c7'),\n    (0x1D7A7, 'M', '\u03c8'),\n    (0x1D7A8, 'M', '\u03c9'),\n    (0x1D7A9, 'M', '\u2207'),\n    (0x1D7AA, 'M', '\u03b1'),\n    (0x1D7AB, 'M', '\u03b2'),\n    (0x1D7AC, 'M', '\u03b3'),\n    (0x1D7AD, 'M', '\u03b4'),\n    (0x1D7AE, 'M', '\u03b5'),\n    (0x1D7AF, 'M', '\u03b6'),\n    (0x1D7B0, 'M', '\u03b7'),\n    (0x1D7B1, 'M', '\u03b8'),\n    (0x1D7B2, 'M', '\u03b9'),\n    (0x1D7B3, 'M', '\u03ba'),\n    ]\n\ndef _seg_70() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1D7B4, 'M', '\u03bb'),\n    (0x1D7B5, 'M', '\u03bc'),\n    (0x1D7B6, 'M', '\u03bd'),\n    (0x1D7B7, 'M', '\u03be'),\n    (0x1D7B8, 'M', '\u03bf'),\n    (0x1D7B9, 'M', '\u03c0'),\n    (0x1D7BA, 'M', '\u03c1'),\n    (0x1D7BB, 'M', '\u03c3'),\n    (0x1D7BD, 'M', '\u03c4'),\n    (0x1D7BE, 'M', '\u03c5'),\n    (0x1D7BF, 'M', '\u03c6'),\n    (0x1D7C0, 'M', '\u03c7'),\n    (0x1D7C1, 'M', '\u03c8'),\n    (0x1D7C2, 'M', '\u03c9'),\n    (0x1D7C3, 'M', '\u2202'),\n    (0x1D7C4, 'M', '\u03b5'),\n    (0x1D7C5, 'M', '\u03b8'),\n    (0x1D7C6, 'M', '\u03ba'),\n    (0x1D7C7, 'M', '\u03c6'),\n    (0x1D7C8, 'M', '\u03c1'),\n    (0x1D7C9, 'M', '\u03c0'),\n    (0x1D7CA, 'M', '\u03dd'),\n    (0x1D7CC, 'X'),\n    (0x1D7CE, 'M', '0'),\n    (0x1D7CF, 'M', '1'),\n    (0x1D7D0, 'M', '2'),\n    (0x1D7D1, 'M', '3'),\n    (0x1D7D2, 'M', '4'),\n    (0x1D7D3, 'M', '5'),\n    (0x1D7D4, 'M', '6'),\n    (0x1D7D5, 'M', '7'),\n    (0x1D7D6, 'M', '8'),\n    (0x1D7D7, 'M', '9'),\n    (0x1D7D8, 'M', '0'),\n    (0x1D7D9, 'M', '1'),\n    (0x1D7DA, 'M', '2'),\n    (0x1D7DB, 'M', '3'),\n    (0x1D7DC, 'M', '4'),\n    (0x1D7DD, 'M', '5'),\n    (0x1D7DE, 'M', '6'),\n    (0x1D7DF, 'M', '7'),\n    (0x1D7E0, 'M', '8'),\n    (0x1D7E1, 'M', '9'),\n    (0x1D7E2, 'M', '0'),\n    (0x1D7E3, 'M', '1'),\n    (0x1D7E4, 'M', '2'),\n    (0x1D7E5, 'M', '3'),\n    (0x1D7E6, 'M', '4'),\n    (0x1D7E7, 'M', '5'),\n    (0x1D7E8, 'M', '6'),\n    (0x1D7E9, 'M', '7'),\n    (0x1D7EA, 'M', '8'),\n    (0x1D7EB, 'M', '9'),\n    (0x1D7EC, 'M', '0'),\n    (0x1D7ED, 'M', '1'),\n    (0x1D7EE, 'M', '2'),\n    (0x1D7EF, 'M', '3'),\n    (0x1D7F0, 'M', '4'),\n    (0x1D7F1, 'M', '5'),\n    (0x1D7F2, 'M', '6'),\n    (0x1D7F3, 'M', '7'),\n    (0x1D7F4, 'M', '8'),\n    (0x1D7F5, 'M', '9'),\n    (0x1D7F6, 'M', '0'),\n    (0x1D7F7, 'M', '1'),\n    (0x1D7F8, 'M', '2'),\n    (0x1D7F9, 'M', '3'),\n    (0x1D7FA, 'M', '4'),\n    (0x1D7FB, 'M', '5'),\n    (0x1D7FC, 'M', '6'),\n    (0x1D7FD, 'M', '7'),\n    (0x1D7FE, 'M', '8'),\n    (0x1D7FF, 'M', '9'),\n    (0x1D800, 'V'),\n    (0x1DA8C, 'X'),\n    (0x1DA9B, 'V'),\n    (0x1DAA0, 'X'),\n    (0x1DAA1, 'V'),\n    (0x1DAB0, 'X'),\n    (0x1DF00, 'V'),\n    (0x1DF1F, 'X'),\n    (0x1DF25, 'V'),\n    (0x1DF2B, 'X'),\n    (0x1E000, 'V'),\n    (0x1E007, 'X'),\n    (0x1E008, 'V'),\n    (0x1E019, 'X'),\n    (0x1E01B, 'V'),\n    (0x1E022, 'X'),\n    (0x1E023, 'V'),\n    (0x1E025, 'X'),\n    (0x1E026, 'V'),\n    (0x1E02B, 'X'),\n    (0x1E030, 'M', '\u0430'),\n    (0x1E031, 'M', '\u0431'),\n    (0x1E032, 'M', '\u0432'),\n    (0x1E033, 'M', '\u0433'),\n    (0x1E034, 'M', '\u0434'),\n    (0x1E035, 'M', '\u0435'),\n    (0x1E036, 'M', '\u0436'),\n    ]\n\ndef _seg_71() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1E037, 'M', '\u0437'),\n    (0x1E038, 'M', '\u0438'),\n    (0x1E039, 'M', '\u043a'),\n    (0x1E03A, 'M', '\u043b'),\n    (0x1E03B, 'M', '\u043c'),\n    (0x1E03C, 'M', '\u043e'),\n    (0x1E03D, 'M', '\u043f'),\n    (0x1E03E, 'M', '\u0440'),\n    (0x1E03F, 'M', '\u0441'),\n    (0x1E040, 'M', '\u0442'),\n    (0x1E041, 'M', '\u0443'),\n    (0x1E042, 'M', '\u0444'),\n    (0x1E043, 'M', '\u0445'),\n    (0x1E044, 'M', '\u0446'),\n    (0x1E045, 'M', '\u0447'),\n    (0x1E046, 'M', '\u0448'),\n    (0x1E047, 'M', '\u044b'),\n    (0x1E048, 'M', '\u044d'),\n    (0x1E049, 'M', '\u044e'),\n    (0x1E04A, 'M', '\ua689'),\n    (0x1E04B, 'M', '\u04d9'),\n    (0x1E04C, 'M', '\u0456'),\n    (0x1E04D, 'M', '\u0458'),\n    (0x1E04E, 'M', '\u04e9'),\n    (0x1E04F, 'M', '\u04af'),\n    (0x1E050, 'M', '\u04cf'),\n    (0x1E051, 'M', '\u0430'),\n    (0x1E052, 'M', '\u0431'),\n    (0x1E053, 'M', '\u0432'),\n    (0x1E054, 'M', '\u0433'),\n    (0x1E055, 'M', '\u0434'),\n    (0x1E056, 'M', '\u0435'),\n    (0x1E057, 'M', '\u0436'),\n    (0x1E058, 'M', '\u0437'),\n    (0x1E059, 'M', '\u0438'),\n    (0x1E05A, 'M', '\u043a'),\n    (0x1E05B, 'M', '\u043b'),\n    (0x1E05C, 'M', '\u043e'),\n    (0x1E05D, 'M', '\u043f'),\n    (0x1E05E, 'M', '\u0441'),\n    (0x1E05F, 'M', '\u0443'),\n    (0x1E060, 'M', '\u0444'),\n    (0x1E061, 'M', '\u0445'),\n    (0x1E062, 'M', '\u0446'),\n    (0x1E063, 'M', '\u0447'),\n    (0x1E064, 'M', '\u0448'),\n    (0x1E065, 'M', '\u044a'),\n    (0x1E066, 'M', '\u044b'),\n    (0x1E067, 'M', '\u0491'),\n    (0x1E068, 'M', '\u0456'),\n    (0x1E069, 'M', '\u0455'),\n    (0x1E06A, 'M', '\u045f'),\n    (0x1E06B, 'M', '\u04ab'),\n    (0x1E06C, 'M', '\ua651'),\n    (0x1E06D, 'M', '\u04b1'),\n    (0x1E06E, 'X'),\n    (0x1E08F, 'V'),\n    (0x1E090, 'X'),\n    (0x1E100, 'V'),\n    (0x1E12D, 'X'),\n    (0x1E130, 'V'),\n    (0x1E13E, 'X'),\n    (0x1E140, 'V'),\n    (0x1E14A, 'X'),\n    (0x1E14E, 'V'),\n    (0x1E150, 'X'),\n    (0x1E290, 'V'),\n    (0x1E2AF, 'X'),\n    (0x1E2C0, 'V'),\n    (0x1E2FA, 'X'),\n    (0x1E2FF, 'V'),\n    (0x1E300, 'X'),\n    (0x1E4D0, 'V'),\n    (0x1E4FA, 'X'),\n    (0x1E7E0, 'V'),\n    (0x1E7E7, 'X'),\n    (0x1E7E8, 'V'),\n    (0x1E7EC, 'X'),\n    (0x1E7ED, 'V'),\n    (0x1E7EF, 'X'),\n    (0x1E7F0, 'V'),\n    (0x1E7FF, 'X'),\n    (0x1E800, 'V'),\n    (0x1E8C5, 'X'),\n    (0x1E8C7, 'V'),\n    (0x1E8D7, 'X'),\n    (0x1E900, 'M', '\ud83a\udd22'),\n    (0x1E901, 'M', '\ud83a\udd23'),\n    (0x1E902, 'M', '\ud83a\udd24'),\n    (0x1E903, 'M', '\ud83a\udd25'),\n    (0x1E904, 'M', '\ud83a\udd26'),\n    (0x1E905, 'M', '\ud83a\udd27'),\n    (0x1E906, 'M', '\ud83a\udd28'),\n    (0x1E907, 'M', '\ud83a\udd29'),\n    (0x1E908, 'M', '\ud83a\udd2a'),\n    (0x1E909, 'M', '\ud83a\udd2b'),\n    (0x1E90A, 'M', '\ud83a\udd2c'),\n    (0x1E90B, 'M', '\ud83a\udd2d'),\n    (0x1E90C, 'M', '\ud83a\udd2e'),\n    (0x1E90D, 'M', '\ud83a\udd2f'),\n    ]\n\ndef _seg_72() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1E90E, 'M', '\ud83a\udd30'),\n    (0x1E90F, 'M', '\ud83a\udd31'),\n    (0x1E910, 'M', '\ud83a\udd32'),\n    (0x1E911, 'M', '\ud83a\udd33'),\n    (0x1E912, 'M', '\ud83a\udd34'),\n    (0x1E913, 'M', '\ud83a\udd35'),\n    (0x1E914, 'M', '\ud83a\udd36'),\n    (0x1E915, 'M', '\ud83a\udd37'),\n    (0x1E916, 'M', '\ud83a\udd38'),\n    (0x1E917, 'M', '\ud83a\udd39'),\n    (0x1E918, 'M', '\ud83a\udd3a'),\n    (0x1E919, 'M', '\ud83a\udd3b'),\n    (0x1E91A, 'M', '\ud83a\udd3c'),\n    (0x1E91B, 'M', '\ud83a\udd3d'),\n    (0x1E91C, 'M', '\ud83a\udd3e'),\n    (0x1E91D, 'M', '\ud83a\udd3f'),\n    (0x1E91E, 'M', '\ud83a\udd40'),\n    (0x1E91F, 'M', '\ud83a\udd41'),\n    (0x1E920, 'M', '\ud83a\udd42'),\n    (0x1E921, 'M', '\ud83a\udd43'),\n    (0x1E922, 'V'),\n    (0x1E94C, 'X'),\n    (0x1E950, 'V'),\n    (0x1E95A, 'X'),\n    (0x1E95E, 'V'),\n    (0x1E960, 'X'),\n    (0x1EC71, 'V'),\n    (0x1ECB5, 'X'),\n    (0x1ED01, 'V'),\n    (0x1ED3E, 'X'),\n    (0x1EE00, 'M', '\u0627'),\n    (0x1EE01, 'M', '\u0628'),\n    (0x1EE02, 'M', '\u062c'),\n    (0x1EE03, 'M', '\u062f'),\n    (0x1EE04, 'X'),\n    (0x1EE05, 'M', '\u0648'),\n    (0x1EE06, 'M', '\u0632'),\n    (0x1EE07, 'M', '\u062d'),\n    (0x1EE08, 'M', '\u0637'),\n    (0x1EE09, 'M', '\u064a'),\n    (0x1EE0A, 'M', '\u0643'),\n    (0x1EE0B, 'M', '\u0644'),\n    (0x1EE0C, 'M', '\u0645'),\n    (0x1EE0D, 'M', '\u0646'),\n    (0x1EE0E, 'M', '\u0633'),\n    (0x1EE0F, 'M', '\u0639'),\n    (0x1EE10, 'M', '\u0641'),\n    (0x1EE11, 'M', '\u0635'),\n    (0x1EE12, 'M', '\u0642'),\n    (0x1EE13, 'M', '\u0631'),\n    (0x1EE14, 'M', '\u0634'),\n    (0x1EE15, 'M', '\u062a'),\n    (0x1EE16, 'M', '\u062b'),\n    (0x1EE17, 'M', '\u062e'),\n    (0x1EE18, 'M', '\u0630'),\n    (0x1EE19, 'M', '\u0636'),\n    (0x1EE1A, 'M', '\u0638'),\n    (0x1EE1B, 'M', '\u063a'),\n    (0x1EE1C, 'M', '\u066e'),\n    (0x1EE1D, 'M', '\u06ba'),\n    (0x1EE1E, 'M', '\u06a1'),\n    (0x1EE1F, 'M', '\u066f'),\n    (0x1EE20, 'X'),\n    (0x1EE21, 'M', '\u0628'),\n    (0x1EE22, 'M', '\u062c'),\n    (0x1EE23, 'X'),\n    (0x1EE24, 'M', '\u0647'),\n    (0x1EE25, 'X'),\n    (0x1EE27, 'M', '\u062d'),\n    (0x1EE28, 'X'),\n    (0x1EE29, 'M', '\u064a'),\n    (0x1EE2A, 'M', '\u0643'),\n    (0x1EE2B, 'M', '\u0644'),\n    (0x1EE2C, 'M', '\u0645'),\n    (0x1EE2D, 'M', '\u0646'),\n    (0x1EE2E, 'M', '\u0633'),\n    (0x1EE2F, 'M', '\u0639'),\n    (0x1EE30, 'M', '\u0641'),\n    (0x1EE31, 'M', '\u0635'),\n    (0x1EE32, 'M', '\u0642'),\n    (0x1EE33, 'X'),\n    (0x1EE34, 'M', '\u0634'),\n    (0x1EE35, 'M', '\u062a'),\n    (0x1EE36, 'M', '\u062b'),\n    (0x1EE37, 'M', '\u062e'),\n    (0x1EE38, 'X'),\n    (0x1EE39, 'M', '\u0636'),\n    (0x1EE3A, 'X'),\n    (0x1EE3B, 'M', '\u063a'),\n    (0x1EE3C, 'X'),\n    (0x1EE42, 'M', '\u062c'),\n    (0x1EE43, 'X'),\n    (0x1EE47, 'M', '\u062d'),\n    (0x1EE48, 'X'),\n    (0x1EE49, 'M', '\u064a'),\n    (0x1EE4A, 'X'),\n    (0x1EE4B, 'M', '\u0644'),\n    (0x1EE4C, 'X'),\n    (0x1EE4D, 'M', '\u0646'),\n    (0x1EE4E, 'M', '\u0633'),\n    ]\n\ndef _seg_73() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1EE4F, 'M', '\u0639'),\n    (0x1EE50, 'X'),\n    (0x1EE51, 'M', '\u0635'),\n    (0x1EE52, 'M', '\u0642'),\n    (0x1EE53, 'X'),\n    (0x1EE54, 'M', '\u0634'),\n    (0x1EE55, 'X'),\n    (0x1EE57, 'M', '\u062e'),\n    (0x1EE58, 'X'),\n    (0x1EE59, 'M', '\u0636'),\n    (0x1EE5A, 'X'),\n    (0x1EE5B, 'M', '\u063a'),\n    (0x1EE5C, 'X'),\n    (0x1EE5D, 'M', '\u06ba'),\n    (0x1EE5E, 'X'),\n    (0x1EE5F, 'M', '\u066f'),\n    (0x1EE60, 'X'),\n    (0x1EE61, 'M', '\u0628'),\n    (0x1EE62, 'M', '\u062c'),\n    (0x1EE63, 'X'),\n    (0x1EE64, 'M', '\u0647'),\n    (0x1EE65, 'X'),\n    (0x1EE67, 'M', '\u062d'),\n    (0x1EE68, 'M', '\u0637'),\n    (0x1EE69, 'M', '\u064a'),\n    (0x1EE6A, 'M', '\u0643'),\n    (0x1EE6B, 'X'),\n    (0x1EE6C, 'M', '\u0645'),\n    (0x1EE6D, 'M', '\u0646'),\n    (0x1EE6E, 'M', '\u0633'),\n    (0x1EE6F, 'M', '\u0639'),\n    (0x1EE70, 'M', '\u0641'),\n    (0x1EE71, 'M', '\u0635'),\n    (0x1EE72, 'M', '\u0642'),\n    (0x1EE73, 'X'),\n    (0x1EE74, 'M', '\u0634'),\n    (0x1EE75, 'M', '\u062a'),\n    (0x1EE76, 'M', '\u062b'),\n    (0x1EE77, 'M', '\u062e'),\n    (0x1EE78, 'X'),\n    (0x1EE79, 'M', '\u0636'),\n    (0x1EE7A, 'M', '\u0638'),\n    (0x1EE7B, 'M', '\u063a'),\n    (0x1EE7C, 'M', '\u066e'),\n    (0x1EE7D, 'X'),\n    (0x1EE7E, 'M', '\u06a1'),\n    (0x1EE7F, 'X'),\n    (0x1EE80, 'M', '\u0627'),\n    (0x1EE81, 'M', '\u0628'),\n    (0x1EE82, 'M', '\u062c'),\n    (0x1EE83, 'M', '\u062f'),\n    (0x1EE84, 'M', '\u0647'),\n    (0x1EE85, 'M', '\u0648'),\n    (0x1EE86, 'M', '\u0632'),\n    (0x1EE87, 'M', '\u062d'),\n    (0x1EE88, 'M', '\u0637'),\n    (0x1EE89, 'M', '\u064a'),\n    (0x1EE8A, 'X'),\n    (0x1EE8B, 'M', '\u0644'),\n    (0x1EE8C, 'M', '\u0645'),\n    (0x1EE8D, 'M', '\u0646'),\n    (0x1EE8E, 'M', '\u0633'),\n    (0x1EE8F, 'M', '\u0639'),\n    (0x1EE90, 'M', '\u0641'),\n    (0x1EE91, 'M', '\u0635'),\n    (0x1EE92, 'M', '\u0642'),\n    (0x1EE93, 'M', '\u0631'),\n    (0x1EE94, 'M', '\u0634'),\n    (0x1EE95, 'M', '\u062a'),\n    (0x1EE96, 'M', '\u062b'),\n    (0x1EE97, 'M', '\u062e'),\n    (0x1EE98, 'M', '\u0630'),\n    (0x1EE99, 'M', '\u0636'),\n    (0x1EE9A, 'M', '\u0638'),\n    (0x1EE9B, 'M', '\u063a'),\n    (0x1EE9C, 'X'),\n    (0x1EEA1, 'M', '\u0628'),\n    (0x1EEA2, 'M', '\u062c'),\n    (0x1EEA3, 'M', '\u062f'),\n    (0x1EEA4, 'X'),\n    (0x1EEA5, 'M', '\u0648'),\n    (0x1EEA6, 'M', '\u0632'),\n    (0x1EEA7, 'M', '\u062d'),\n    (0x1EEA8, 'M', '\u0637'),\n    (0x1EEA9, 'M', '\u064a'),\n    (0x1EEAA, 'X'),\n    (0x1EEAB, 'M', '\u0644'),\n    (0x1EEAC, 'M', '\u0645'),\n    (0x1EEAD, 'M', '\u0646'),\n    (0x1EEAE, 'M', '\u0633'),\n    (0x1EEAF, 'M', '\u0639'),\n    (0x1EEB0, 'M', '\u0641'),\n    (0x1EEB1, 'M', '\u0635'),\n    (0x1EEB2, 'M', '\u0642'),\n    (0x1EEB3, 'M', '\u0631'),\n    (0x1EEB4, 'M', '\u0634'),\n    (0x1EEB5, 'M', '\u062a'),\n    (0x1EEB6, 'M', '\u062b'),\n    (0x1EEB7, 'M', '\u062e'),\n    (0x1EEB8, 'M', '\u0630'),\n    ]\n\ndef _seg_74() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1EEB9, 'M', '\u0636'),\n    (0x1EEBA, 'M', '\u0638'),\n    (0x1EEBB, 'M', '\u063a'),\n    (0x1EEBC, 'X'),\n    (0x1EEF0, 'V'),\n    (0x1EEF2, 'X'),\n    (0x1F000, 'V'),\n    (0x1F02C, 'X'),\n    (0x1F030, 'V'),\n    (0x1F094, 'X'),\n    (0x1F0A0, 'V'),\n    (0x1F0AF, 'X'),\n    (0x1F0B1, 'V'),\n    (0x1F0C0, 'X'),\n    (0x1F0C1, 'V'),\n    (0x1F0D0, 'X'),\n    (0x1F0D1, 'V'),\n    (0x1F0F6, 'X'),\n    (0x1F101, '3', '0,'),\n    (0x1F102, '3', '1,'),\n    (0x1F103, '3', '2,'),\n    (0x1F104, '3', '3,'),\n    (0x1F105, '3', '4,'),\n    (0x1F106, '3', '5,'),\n    (0x1F107, '3', '6,'),\n    (0x1F108, '3', '7,'),\n    (0x1F109, '3', '8,'),\n    (0x1F10A, '3', '9,'),\n    (0x1F10B, 'V'),\n    (0x1F110, '3', '(a)'),\n    (0x1F111, '3', '(b)'),\n    (0x1F112, '3', '(c)'),\n    (0x1F113, '3', '(d)'),\n    (0x1F114, '3', '(e)'),\n    (0x1F115, '3', '(f)'),\n    (0x1F116, '3', '(g)'),\n    (0x1F117, '3', '(h)'),\n    (0x1F118, '3', '(i)'),\n    (0x1F119, '3', '(j)'),\n    (0x1F11A, '3', '(k)'),\n    (0x1F11B, '3', '(l)'),\n    (0x1F11C, '3', '(m)'),\n    (0x1F11D, '3', '(n)'),\n    (0x1F11E, '3', '(o)'),\n    (0x1F11F, '3', '(p)'),\n    (0x1F120, '3', '(q)'),\n    (0x1F121, '3', '(r)'),\n    (0x1F122, '3', '(s)'),\n    (0x1F123, '3', '(t)'),\n    (0x1F124, '3', '(u)'),\n    (0x1F125, '3', '(v)'),\n    (0x1F126, '3', '(w)'),\n    (0x1F127, '3', '(x)'),\n    (0x1F128, '3', '(y)'),\n    (0x1F129, '3', '(z)'),\n    (0x1F12A, 'M', '\u3014s\u3015'),\n    (0x1F12B, 'M', 'c'),\n    (0x1F12C, 'M', 'r'),\n    (0x1F12D, 'M', 'cd'),\n    (0x1F12E, 'M', 'wz'),\n    (0x1F12F, 'V'),\n    (0x1F130, 'M', 'a'),\n    (0x1F131, 'M', 'b'),\n    (0x1F132, 'M', 'c'),\n    (0x1F133, 'M', 'd'),\n    (0x1F134, 'M', 'e'),\n    (0x1F135, 'M', 'f'),\n    (0x1F136, 'M', 'g'),\n    (0x1F137, 'M', 'h'),\n    (0x1F138, 'M', 'i'),\n    (0x1F139, 'M', 'j'),\n    (0x1F13A, 'M', 'k'),\n    (0x1F13B, 'M', 'l'),\n    (0x1F13C, 'M', 'm'),\n    (0x1F13D, 'M', 'n'),\n    (0x1F13E, 'M', 'o'),\n    (0x1F13F, 'M', 'p'),\n    (0x1F140, 'M', 'q'),\n    (0x1F141, 'M', 'r'),\n    (0x1F142, 'M', 's'),\n    (0x1F143, 'M', 't'),\n    (0x1F144, 'M', 'u'),\n    (0x1F145, 'M', 'v'),\n    (0x1F146, 'M', 'w'),\n    (0x1F147, 'M', 'x'),\n    (0x1F148, 'M', 'y'),\n    (0x1F149, 'M', 'z'),\n    (0x1F14A, 'M', 'hv'),\n    (0x1F14B, 'M', 'mv'),\n    (0x1F14C, 'M', 'sd'),\n    (0x1F14D, 'M', 'ss'),\n    (0x1F14E, 'M', 'ppv'),\n    (0x1F14F, 'M', 'wc'),\n    (0x1F150, 'V'),\n    (0x1F16A, 'M', 'mc'),\n    (0x1F16B, 'M', 'md'),\n    (0x1F16C, 'M', 'mr'),\n    (0x1F16D, 'V'),\n    (0x1F190, 'M', 'dj'),\n    (0x1F191, 'V'),\n    ]\n\ndef _seg_75() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1F1AE, 'X'),\n    (0x1F1E6, 'V'),\n    (0x1F200, 'M', '\u307b\u304b'),\n    (0x1F201, 'M', '\u30b3\u30b3'),\n    (0x1F202, 'M', '\u30b5'),\n    (0x1F203, 'X'),\n    (0x1F210, 'M', '\u624b'),\n    (0x1F211, 'M', '\u5b57'),\n    (0x1F212, 'M', '\u53cc'),\n    (0x1F213, 'M', '\u30c7'),\n    (0x1F214, 'M', '\u4e8c'),\n    (0x1F215, 'M', '\u591a'),\n    (0x1F216, 'M', '\u89e3'),\n    (0x1F217, 'M', '\u5929'),\n    (0x1F218, 'M', '\u4ea4'),\n    (0x1F219, 'M', '\u6620'),\n    (0x1F21A, 'M', '\u7121'),\n    (0x1F21B, 'M', '\u6599'),\n    (0x1F21C, 'M', '\u524d'),\n    (0x1F21D, 'M', '\u5f8c'),\n    (0x1F21E, 'M', '\u518d'),\n    (0x1F21F, 'M', '\u65b0'),\n    (0x1F220, 'M', '\u521d'),\n    (0x1F221, 'M', '\u7d42'),\n    (0x1F222, 'M', '\u751f'),\n    (0x1F223, 'M', '\u8ca9'),\n    (0x1F224, 'M', '\u58f0'),\n    (0x1F225, 'M', '\u5439'),\n    (0x1F226, 'M', '\u6f14'),\n    (0x1F227, 'M', '\u6295'),\n    (0x1F228, 'M', '\u6355'),\n    (0x1F229, 'M', '\u4e00'),\n    (0x1F22A, 'M', '\u4e09'),\n    (0x1F22B, 'M', '\u904a'),\n    (0x1F22C, 'M', '\u5de6'),\n    (0x1F22D, 'M', '\u4e2d'),\n    (0x1F22E, 'M', '\u53f3'),\n    (0x1F22F, 'M', '\u6307'),\n    (0x1F230, 'M', '\u8d70'),\n    (0x1F231, 'M', '\u6253'),\n    (0x1F232, 'M', '\u7981'),\n    (0x1F233, 'M', '\u7a7a'),\n    (0x1F234, 'M', '\u5408'),\n    (0x1F235, 'M', '\u6e80'),\n    (0x1F236, 'M', '\u6709'),\n    (0x1F237, 'M', '\u6708'),\n    (0x1F238, 'M', '\u7533'),\n    (0x1F239, 'M', '\u5272'),\n    (0x1F23A, 'M', '\u55b6'),\n    (0x1F23B, 'M', '\u914d'),\n    (0x1F23C, 'X'),\n    (0x1F240, 'M', '\u3014\u672c\u3015'),\n    (0x1F241, 'M', '\u3014\u4e09\u3015'),\n    (0x1F242, 'M', '\u3014\u4e8c\u3015'),\n    (0x1F243, 'M', '\u3014\u5b89\u3015'),\n    (0x1F244, 'M', '\u3014\u70b9\u3015'),\n    (0x1F245, 'M', '\u3014\u6253\u3015'),\n    (0x1F246, 'M', '\u3014\u76d7\u3015'),\n    (0x1F247, 'M', '\u3014\u52dd\u3015'),\n    (0x1F248, 'M', '\u3014\u6557\u3015'),\n    (0x1F249, 'X'),\n    (0x1F250, 'M', '\u5f97'),\n    (0x1F251, 'M', '\u53ef'),\n    (0x1F252, 'X'),\n    (0x1F260, 'V'),\n    (0x1F266, 'X'),\n    (0x1F300, 'V'),\n    (0x1F6D8, 'X'),\n    (0x1F6DC, 'V'),\n    (0x1F6ED, 'X'),\n    (0x1F6F0, 'V'),\n    (0x1F6FD, 'X'),\n    (0x1F700, 'V'),\n    (0x1F777, 'X'),\n    (0x1F77B, 'V'),\n    (0x1F7DA, 'X'),\n    (0x1F7E0, 'V'),\n    (0x1F7EC, 'X'),\n    (0x1F7F0, 'V'),\n    (0x1F7F1, 'X'),\n    (0x1F800, 'V'),\n    (0x1F80C, 'X'),\n    (0x1F810, 'V'),\n    (0x1F848, 'X'),\n    (0x1F850, 'V'),\n    (0x1F85A, 'X'),\n    (0x1F860, 'V'),\n    (0x1F888, 'X'),\n    (0x1F890, 'V'),\n    (0x1F8AE, 'X'),\n    (0x1F8B0, 'V'),\n    (0x1F8B2, 'X'),\n    (0x1F900, 'V'),\n    (0x1FA54, 'X'),\n    (0x1FA60, 'V'),\n    (0x1FA6E, 'X'),\n    (0x1FA70, 'V'),\n    (0x1FA7D, 'X'),\n    (0x1FA80, 'V'),\n    (0x1FA89, 'X'),\n    ]\n\ndef _seg_76() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x1FA90, 'V'),\n    (0x1FABE, 'X'),\n    (0x1FABF, 'V'),\n    (0x1FAC6, 'X'),\n    (0x1FACE, 'V'),\n    (0x1FADC, 'X'),\n    (0x1FAE0, 'V'),\n    (0x1FAE9, 'X'),\n    (0x1FAF0, 'V'),\n    (0x1FAF9, 'X'),\n    (0x1FB00, 'V'),\n    (0x1FB93, 'X'),\n    (0x1FB94, 'V'),\n    (0x1FBCB, 'X'),\n    (0x1FBF0, 'M', '0'),\n    (0x1FBF1, 'M', '1'),\n    (0x1FBF2, 'M', '2'),\n    (0x1FBF3, 'M', '3'),\n    (0x1FBF4, 'M', '4'),\n    (0x1FBF5, 'M', '5'),\n    (0x1FBF6, 'M', '6'),\n    (0x1FBF7, 'M', '7'),\n    (0x1FBF8, 'M', '8'),\n    (0x1FBF9, 'M', '9'),\n    (0x1FBFA, 'X'),\n    (0x20000, 'V'),\n    (0x2A6E0, 'X'),\n    (0x2A700, 'V'),\n    (0x2B73A, 'X'),\n    (0x2B740, 'V'),\n    (0x2B81E, 'X'),\n    (0x2B820, 'V'),\n    (0x2CEA2, 'X'),\n    (0x2CEB0, 'V'),\n    (0x2EBE1, 'X'),\n    (0x2EBF0, 'V'),\n    (0x2EE5E, 'X'),\n    (0x2F800, 'M', '\u4e3d'),\n    (0x2F801, 'M', '\u4e38'),\n    (0x2F802, 'M', '\u4e41'),\n    (0x2F803, 'M', '\ud840\udd22'),\n    (0x2F804, 'M', '\u4f60'),\n    (0x2F805, 'M', '\u4fae'),\n    (0x2F806, 'M', '\u4fbb'),\n    (0x2F807, 'M', '\u5002'),\n    (0x2F808, 'M', '\u507a'),\n    (0x2F809, 'M', '\u5099'),\n    (0x2F80A, 'M', '\u50e7'),\n    (0x2F80B, 'M', '\u50cf'),\n    (0x2F80C, 'M', '\u349e'),\n    (0x2F80D, 'M', '\ud841\ude3a'),\n    (0x2F80E, 'M', '\u514d'),\n    (0x2F80F, 'M', '\u5154'),\n    (0x2F810, 'M', '\u5164'),\n    (0x2F811, 'M', '\u5177'),\n    (0x2F812, 'M', '\ud841\udd1c'),\n    (0x2F813, 'M', '\u34b9'),\n    (0x2F814, 'M', '\u5167'),\n    (0x2F815, 'M', '\u518d'),\n    (0x2F816, 'M', '\ud841\udd4b'),\n    (0x2F817, 'M', '\u5197'),\n    (0x2F818, 'M', '\u51a4'),\n    (0x2F819, 'M', '\u4ecc'),\n    (0x2F81A, 'M', '\u51ac'),\n    (0x2F81B, 'M', '\u51b5'),\n    (0x2F81C, 'M', '\ud864\udddf'),\n    (0x2F81D, 'M', '\u51f5'),\n    (0x2F81E, 'M', '\u5203'),\n    (0x2F81F, 'M', '\u34df'),\n    (0x2F820, 'M', '\u523b'),\n    (0x2F821, 'M', '\u5246'),\n    (0x2F822, 'M', '\u5272'),\n    (0x2F823, 'M', '\u5277'),\n    (0x2F824, 'M', '\u3515'),\n    (0x2F825, 'M', '\u52c7'),\n    (0x2F826, 'M', '\u52c9'),\n    (0x2F827, 'M', '\u52e4'),\n    (0x2F828, 'M', '\u52fa'),\n    (0x2F829, 'M', '\u5305'),\n    (0x2F82A, 'M', '\u5306'),\n    (0x2F82B, 'M', '\u5317'),\n    (0x2F82C, 'M', '\u5349'),\n    (0x2F82D, 'M', '\u5351'),\n    (0x2F82E, 'M', '\u535a'),\n    (0x2F82F, 'M', '\u5373'),\n    (0x2F830, 'M', '\u537d'),\n    (0x2F831, 'M', '\u537f'),\n    (0x2F834, 'M', '\ud842\ude2c'),\n    (0x2F835, 'M', '\u7070'),\n    (0x2F836, 'M', '\u53ca'),\n    (0x2F837, 'M', '\u53df'),\n    (0x2F838, 'M', '\ud842\udf63'),\n    (0x2F839, 'M', '\u53eb'),\n    (0x2F83A, 'M', '\u53f1'),\n    (0x2F83B, 'M', '\u5406'),\n    (0x2F83C, 'M', '\u549e'),\n    (0x2F83D, 'M', '\u5438'),\n    (0x2F83E, 'M', '\u5448'),\n    (0x2F83F, 'M', '\u5468'),\n    (0x2F840, 'M', '\u54a2'),\n    ]\n\ndef _seg_77() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2F841, 'M', '\u54f6'),\n    (0x2F842, 'M', '\u5510'),\n    (0x2F843, 'M', '\u5553'),\n    (0x2F844, 'M', '\u5563'),\n    (0x2F845, 'M', '\u5584'),\n    (0x2F847, 'M', '\u5599'),\n    (0x2F848, 'M', '\u55ab'),\n    (0x2F849, 'M', '\u55b3'),\n    (0x2F84A, 'M', '\u55c2'),\n    (0x2F84B, 'M', '\u5716'),\n    (0x2F84C, 'M', '\u5606'),\n    (0x2F84D, 'M', '\u5717'),\n    (0x2F84E, 'M', '\u5651'),\n    (0x2F84F, 'M', '\u5674'),\n    (0x2F850, 'M', '\u5207'),\n    (0x2F851, 'M', '\u58ee'),\n    (0x2F852, 'M', '\u57ce'),\n    (0x2F853, 'M', '\u57f4'),\n    (0x2F854, 'M', '\u580d'),\n    (0x2F855, 'M', '\u578b'),\n    (0x2F856, 'M', '\u5832'),\n    (0x2F857, 'M', '\u5831'),\n    (0x2F858, 'M', '\u58ac'),\n    (0x2F859, 'M', '\ud845\udce4'),\n    (0x2F85A, 'M', '\u58f2'),\n    (0x2F85B, 'M', '\u58f7'),\n    (0x2F85C, 'M', '\u5906'),\n    (0x2F85D, 'M', '\u591a'),\n    (0x2F85E, 'M', '\u5922'),\n    (0x2F85F, 'M', '\u5962'),\n    (0x2F860, 'M', '\ud845\udea8'),\n    (0x2F861, 'M', '\ud845\udeea'),\n    (0x2F862, 'M', '\u59ec'),\n    (0x2F863, 'M', '\u5a1b'),\n    (0x2F864, 'M', '\u5a27'),\n    (0x2F865, 'M', '\u59d8'),\n    (0x2F866, 'M', '\u5a66'),\n    (0x2F867, 'M', '\u36ee'),\n    (0x2F868, 'X'),\n    (0x2F869, 'M', '\u5b08'),\n    (0x2F86A, 'M', '\u5b3e'),\n    (0x2F86C, 'M', '\ud846\uddc8'),\n    (0x2F86D, 'M', '\u5bc3'),\n    (0x2F86E, 'M', '\u5bd8'),\n    (0x2F86F, 'M', '\u5be7'),\n    (0x2F870, 'M', '\u5bf3'),\n    (0x2F871, 'M', '\ud846\udf18'),\n    (0x2F872, 'M', '\u5bff'),\n    (0x2F873, 'M', '\u5c06'),\n    (0x2F874, 'X'),\n    (0x2F875, 'M', '\u5c22'),\n    (0x2F876, 'M', '\u3781'),\n    (0x2F877, 'M', '\u5c60'),\n    (0x2F878, 'M', '\u5c6e'),\n    (0x2F879, 'M', '\u5cc0'),\n    (0x2F87A, 'M', '\u5c8d'),\n    (0x2F87B, 'M', '\ud847\udde4'),\n    (0x2F87C, 'M', '\u5d43'),\n    (0x2F87D, 'M', '\ud847\udde6'),\n    (0x2F87E, 'M', '\u5d6e'),\n    (0x2F87F, 'M', '\u5d6b'),\n    (0x2F880, 'M', '\u5d7c'),\n    (0x2F881, 'M', '\u5de1'),\n    (0x2F882, 'M', '\u5de2'),\n    (0x2F883, 'M', '\u382f'),\n    (0x2F884, 'M', '\u5dfd'),\n    (0x2F885, 'M', '\u5e28'),\n    (0x2F886, 'M', '\u5e3d'),\n    (0x2F887, 'M', '\u5e69'),\n    (0x2F888, 'M', '\u3862'),\n    (0x2F889, 'M', '\ud848\udd83'),\n    (0x2F88A, 'M', '\u387c'),\n    (0x2F88B, 'M', '\u5eb0'),\n    (0x2F88C, 'M', '\u5eb3'),\n    (0x2F88D, 'M', '\u5eb6'),\n    (0x2F88E, 'M', '\u5eca'),\n    (0x2F88F, 'M', '\ud868\udf92'),\n    (0x2F890, 'M', '\u5efe'),\n    (0x2F891, 'M', '\ud848\udf31'),\n    (0x2F893, 'M', '\u8201'),\n    (0x2F894, 'M', '\u5f22'),\n    (0x2F896, 'M', '\u38c7'),\n    (0x2F897, 'M', '\ud84c\udeb8'),\n    (0x2F898, 'M', '\ud858\uddda'),\n    (0x2F899, 'M', '\u5f62'),\n    (0x2F89A, 'M', '\u5f6b'),\n    (0x2F89B, 'M', '\u38e3'),\n    (0x2F89C, 'M', '\u5f9a'),\n    (0x2F89D, 'M', '\u5fcd'),\n    (0x2F89E, 'M', '\u5fd7'),\n    (0x2F89F, 'M', '\u5ff9'),\n    (0x2F8A0, 'M', '\u6081'),\n    (0x2F8A1, 'M', '\u393a'),\n    (0x2F8A2, 'M', '\u391c'),\n    (0x2F8A3, 'M', '\u6094'),\n    (0x2F8A4, 'M', '\ud849\uded4'),\n    (0x2F8A5, 'M', '\u60c7'),\n    (0x2F8A6, 'M', '\u6148'),\n    (0x2F8A7, 'M', '\u614c'),\n    (0x2F8A8, 'M', '\u614e'),\n    ]\n\ndef _seg_78() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2F8A9, 'M', '\u614c'),\n    (0x2F8AA, 'M', '\u617a'),\n    (0x2F8AB, 'M', '\u618e'),\n    (0x2F8AC, 'M', '\u61b2'),\n    (0x2F8AD, 'M', '\u61a4'),\n    (0x2F8AE, 'M', '\u61af'),\n    (0x2F8AF, 'M', '\u61de'),\n    (0x2F8B0, 'M', '\u61f2'),\n    (0x2F8B1, 'M', '\u61f6'),\n    (0x2F8B2, 'M', '\u6210'),\n    (0x2F8B3, 'M', '\u621b'),\n    (0x2F8B4, 'M', '\u625d'),\n    (0x2F8B5, 'M', '\u62b1'),\n    (0x2F8B6, 'M', '\u62d4'),\n    (0x2F8B7, 'M', '\u6350'),\n    (0x2F8B8, 'M', '\ud84a\udf0c'),\n    (0x2F8B9, 'M', '\u633d'),\n    (0x2F8BA, 'M', '\u62fc'),\n    (0x2F8BB, 'M', '\u6368'),\n    (0x2F8BC, 'M', '\u6383'),\n    (0x2F8BD, 'M', '\u63e4'),\n    (0x2F8BE, 'M', '\ud84a\udff1'),\n    (0x2F8BF, 'M', '\u6422'),\n    (0x2F8C0, 'M', '\u63c5'),\n    (0x2F8C1, 'M', '\u63a9'),\n    (0x2F8C2, 'M', '\u3a2e'),\n    (0x2F8C3, 'M', '\u6469'),\n    (0x2F8C4, 'M', '\u647e'),\n    (0x2F8C5, 'M', '\u649d'),\n    (0x2F8C6, 'M', '\u6477'),\n    (0x2F8C7, 'M', '\u3a6c'),\n    (0x2F8C8, 'M', '\u654f'),\n    (0x2F8C9, 'M', '\u656c'),\n    (0x2F8CA, 'M', '\ud84c\udc0a'),\n    (0x2F8CB, 'M', '\u65e3'),\n    (0x2F8CC, 'M', '\u66f8'),\n    (0x2F8CD, 'M', '\u6649'),\n    (0x2F8CE, 'M', '\u3b19'),\n    (0x2F8CF, 'M', '\u6691'),\n    (0x2F8D0, 'M', '\u3b08'),\n    (0x2F8D1, 'M', '\u3ae4'),\n    (0x2F8D2, 'M', '\u5192'),\n    (0x2F8D3, 'M', '\u5195'),\n    (0x2F8D4, 'M', '\u6700'),\n    (0x2F8D5, 'M', '\u669c'),\n    (0x2F8D6, 'M', '\u80ad'),\n    (0x2F8D7, 'M', '\u43d9'),\n    (0x2F8D8, 'M', '\u6717'),\n    (0x2F8D9, 'M', '\u671b'),\n    (0x2F8DA, 'M', '\u6721'),\n    (0x2F8DB, 'M', '\u675e'),\n    (0x2F8DC, 'M', '\u6753'),\n    (0x2F8DD, 'M', '\ud84c\udfc3'),\n    (0x2F8DE, 'M', '\u3b49'),\n    (0x2F8DF, 'M', '\u67fa'),\n    (0x2F8E0, 'M', '\u6785'),\n    (0x2F8E1, 'M', '\u6852'),\n    (0x2F8E2, 'M', '\u6885'),\n    (0x2F8E3, 'M', '\ud84d\udc6d'),\n    (0x2F8E4, 'M', '\u688e'),\n    (0x2F8E5, 'M', '\u681f'),\n    (0x2F8E6, 'M', '\u6914'),\n    (0x2F8E7, 'M', '\u3b9d'),\n    (0x2F8E8, 'M', '\u6942'),\n    (0x2F8E9, 'M', '\u69a3'),\n    (0x2F8EA, 'M', '\u69ea'),\n    (0x2F8EB, 'M', '\u6aa8'),\n    (0x2F8EC, 'M', '\ud84d\udea3'),\n    (0x2F8ED, 'M', '\u6adb'),\n    (0x2F8EE, 'M', '\u3c18'),\n    (0x2F8EF, 'M', '\u6b21'),\n    (0x2F8F0, 'M', '\ud84e\udca7'),\n    (0x2F8F1, 'M', '\u6b54'),\n    (0x2F8F2, 'M', '\u3c4e'),\n    (0x2F8F3, 'M', '\u6b72'),\n    (0x2F8F4, 'M', '\u6b9f'),\n    (0x2F8F5, 'M', '\u6bba'),\n    (0x2F8F6, 'M', '\u6bbb'),\n    (0x2F8F7, 'M', '\ud84e\ude8d'),\n    (0x2F8F8, 'M', '\ud847\udd0b'),\n    (0x2F8F9, 'M', '\ud84e\udefa'),\n    (0x2F8FA, 'M', '\u6c4e'),\n    (0x2F8FB, 'M', '\ud84f\udcbc'),\n    (0x2F8FC, 'M', '\u6cbf'),\n    (0x2F8FD, 'M', '\u6ccd'),\n    (0x2F8FE, 'M', '\u6c67'),\n    (0x2F8FF, 'M', '\u6d16'),\n    (0x2F900, 'M', '\u6d3e'),\n    (0x2F901, 'M', '\u6d77'),\n    (0x2F902, 'M', '\u6d41'),\n    (0x2F903, 'M', '\u6d69'),\n    (0x2F904, 'M', '\u6d78'),\n    (0x2F905, 'M', '\u6d85'),\n    (0x2F906, 'M', '\ud84f\udd1e'),\n    (0x2F907, 'M', '\u6d34'),\n    (0x2F908, 'M', '\u6e2f'),\n    (0x2F909, 'M', '\u6e6e'),\n    (0x2F90A, 'M', '\u3d33'),\n    (0x2F90B, 'M', '\u6ecb'),\n    (0x2F90C, 'M', '\u6ec7'),\n    ]\n\ndef _seg_79() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2F90D, 'M', '\ud84f\uded1'),\n    (0x2F90E, 'M', '\u6df9'),\n    (0x2F90F, 'M', '\u6f6e'),\n    (0x2F910, 'M', '\ud84f\udf5e'),\n    (0x2F911, 'M', '\ud84f\udf8e'),\n    (0x2F912, 'M', '\u6fc6'),\n    (0x2F913, 'M', '\u7039'),\n    (0x2F914, 'M', '\u701e'),\n    (0x2F915, 'M', '\u701b'),\n    (0x2F916, 'M', '\u3d96'),\n    (0x2F917, 'M', '\u704a'),\n    (0x2F918, 'M', '\u707d'),\n    (0x2F919, 'M', '\u7077'),\n    (0x2F91A, 'M', '\u70ad'),\n    (0x2F91B, 'M', '\ud841\udd25'),\n    (0x2F91C, 'M', '\u7145'),\n    (0x2F91D, 'M', '\ud850\ude63'),\n    (0x2F91E, 'M', '\u719c'),\n    (0x2F91F, 'X'),\n    (0x2F920, 'M', '\u7228'),\n    (0x2F921, 'M', '\u7235'),\n    (0x2F922, 'M', '\u7250'),\n    (0x2F923, 'M', '\ud851\ude08'),\n    (0x2F924, 'M', '\u7280'),\n    (0x2F925, 'M', '\u7295'),\n    (0x2F926, 'M', '\ud851\udf35'),\n    (0x2F927, 'M', '\ud852\udc14'),\n    (0x2F928, 'M', '\u737a'),\n    (0x2F929, 'M', '\u738b'),\n    (0x2F92A, 'M', '\u3eac'),\n    (0x2F92B, 'M', '\u73a5'),\n    (0x2F92C, 'M', '\u3eb8'),\n    (0x2F92E, 'M', '\u7447'),\n    (0x2F92F, 'M', '\u745c'),\n    (0x2F930, 'M', '\u7471'),\n    (0x2F931, 'M', '\u7485'),\n    (0x2F932, 'M', '\u74ca'),\n    (0x2F933, 'M', '\u3f1b'),\n    (0x2F934, 'M', '\u7524'),\n    (0x2F935, 'M', '\ud853\udc36'),\n    (0x2F936, 'M', '\u753e'),\n    (0x2F937, 'M', '\ud853\udc92'),\n    (0x2F938, 'M', '\u7570'),\n    (0x2F939, 'M', '\ud848\udd9f'),\n    (0x2F93A, 'M', '\u7610'),\n    (0x2F93B, 'M', '\ud853\udfa1'),\n    (0x2F93C, 'M', '\ud853\udfb8'),\n    (0x2F93D, 'M', '\ud854\udc44'),\n    (0x2F93E, 'M', '\u3ffc'),\n    (0x2F93F, 'M', '\u4008'),\n    (0x2F940, 'M', '\u76f4'),\n    (0x2F941, 'M', '\ud854\udcf3'),\n    (0x2F942, 'M', '\ud854\udcf2'),\n    (0x2F943, 'M', '\ud854\udd19'),\n    (0x2F944, 'M', '\ud854\udd33'),\n    (0x2F945, 'M', '\u771e'),\n    (0x2F946, 'M', '\u771f'),\n    (0x2F948, 'M', '\u774a'),\n    (0x2F949, 'M', '\u4039'),\n    (0x2F94A, 'M', '\u778b'),\n    (0x2F94B, 'M', '\u4046'),\n    (0x2F94C, 'M', '\u4096'),\n    (0x2F94D, 'M', '\ud855\udc1d'),\n    (0x2F94E, 'M', '\u784e'),\n    (0x2F94F, 'M', '\u788c'),\n    (0x2F950, 'M', '\u78cc'),\n    (0x2F951, 'M', '\u40e3'),\n    (0x2F952, 'M', '\ud855\ude26'),\n    (0x2F953, 'M', '\u7956'),\n    (0x2F954, 'M', '\ud855\ude9a'),\n    (0x2F955, 'M', '\ud855\udec5'),\n    (0x2F956, 'M', '\u798f'),\n    (0x2F957, 'M', '\u79eb'),\n    (0x2F958, 'M', '\u412f'),\n    (0x2F959, 'M', '\u7a40'),\n    (0x2F95A, 'M', '\u7a4a'),\n    (0x2F95B, 'M', '\u7a4f'),\n    (0x2F95C, 'M', '\ud856\udd7c'),\n    (0x2F95D, 'M', '\ud856\udea7'),\n    (0x2F95F, 'X'),\n    (0x2F960, 'M', '\u4202'),\n    (0x2F961, 'M', '\ud856\udfab'),\n    (0x2F962, 'M', '\u7bc6'),\n    (0x2F963, 'M', '\u7bc9'),\n    (0x2F964, 'M', '\u4227'),\n    (0x2F965, 'M', '\ud857\udc80'),\n    (0x2F966, 'M', '\u7cd2'),\n    (0x2F967, 'M', '\u42a0'),\n    (0x2F968, 'M', '\u7ce8'),\n    (0x2F969, 'M', '\u7ce3'),\n    (0x2F96A, 'M', '\u7d00'),\n    (0x2F96B, 'M', '\ud857\udf86'),\n    (0x2F96C, 'M', '\u7d63'),\n    (0x2F96D, 'M', '\u4301'),\n    (0x2F96E, 'M', '\u7dc7'),\n    (0x2F96F, 'M', '\u7e02'),\n    (0x2F970, 'M', '\u7e45'),\n    (0x2F971, 'M', '\u4334'),\n    (0x2F972, 'M', '\ud858\ude28'),\n    (0x2F973, 'M', '\ud858\ude47'),\n    ]\n\ndef _seg_80() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2F974, 'M', '\u4359'),\n    (0x2F975, 'M', '\ud858\uded9'),\n    (0x2F976, 'M', '\u7f7a'),\n    (0x2F977, 'M', '\ud858\udf3e'),\n    (0x2F978, 'M', '\u7f95'),\n    (0x2F979, 'M', '\u7ffa'),\n    (0x2F97A, 'M', '\u8005'),\n    (0x2F97B, 'M', '\ud859\udcda'),\n    (0x2F97C, 'M', '\ud859\udd23'),\n    (0x2F97D, 'M', '\u8060'),\n    (0x2F97E, 'M', '\ud859\udda8'),\n    (0x2F97F, 'M', '\u8070'),\n    (0x2F980, 'M', '\ud84c\udf5f'),\n    (0x2F981, 'M', '\u43d5'),\n    (0x2F982, 'M', '\u80b2'),\n    (0x2F983, 'M', '\u8103'),\n    (0x2F984, 'M', '\u440b'),\n    (0x2F985, 'M', '\u813e'),\n    (0x2F986, 'M', '\u5ab5'),\n    (0x2F987, 'M', '\ud859\udfa7'),\n    (0x2F988, 'M', '\ud859\udfb5'),\n    (0x2F989, 'M', '\ud84c\udf93'),\n    (0x2F98A, 'M', '\ud84c\udf9c'),\n    (0x2F98B, 'M', '\u8201'),\n    (0x2F98C, 'M', '\u8204'),\n    (0x2F98D, 'M', '\u8f9e'),\n    (0x2F98E, 'M', '\u446b'),\n    (0x2F98F, 'M', '\u8291'),\n    (0x2F990, 'M', '\u828b'),\n    (0x2F991, 'M', '\u829d'),\n    (0x2F992, 'M', '\u52b3'),\n    (0x2F993, 'M', '\u82b1'),\n    (0x2F994, 'M', '\u82b3'),\n    (0x2F995, 'M', '\u82bd'),\n    (0x2F996, 'M', '\u82e6'),\n    (0x2F997, 'M', '\ud85a\udf3c'),\n    (0x2F998, 'M', '\u82e5'),\n    (0x2F999, 'M', '\u831d'),\n    (0x2F99A, 'M', '\u8363'),\n    (0x2F99B, 'M', '\u83ad'),\n    (0x2F99C, 'M', '\u8323'),\n    (0x2F99D, 'M', '\u83bd'),\n    (0x2F99E, 'M', '\u83e7'),\n    (0x2F99F, 'M', '\u8457'),\n    (0x2F9A0, 'M', '\u8353'),\n    (0x2F9A1, 'M', '\u83ca'),\n    (0x2F9A2, 'M', '\u83cc'),\n    (0x2F9A3, 'M', '\u83dc'),\n    (0x2F9A4, 'M', '\ud85b\udc36'),\n    (0x2F9A5, 'M', '\ud85b\udd6b'),\n    (0x2F9A6, 'M', '\ud85b\udcd5'),\n    (0x2F9A7, 'M', '\u452b'),\n    (0x2F9A8, 'M', '\u84f1'),\n    (0x2F9A9, 'M', '\u84f3'),\n    (0x2F9AA, 'M', '\u8516'),\n    (0x2F9AB, 'M', '\ud85c\udfca'),\n    (0x2F9AC, 'M', '\u8564'),\n    (0x2F9AD, 'M', '\ud85b\udf2c'),\n    (0x2F9AE, 'M', '\u455d'),\n    (0x2F9AF, 'M', '\u4561'),\n    (0x2F9B0, 'M', '\ud85b\udfb1'),\n    (0x2F9B1, 'M', '\ud85c\udcd2'),\n    (0x2F9B2, 'M', '\u456b'),\n    (0x2F9B3, 'M', '\u8650'),\n    (0x2F9B4, 'M', '\u865c'),\n    (0x2F9B5, 'M', '\u8667'),\n    (0x2F9B6, 'M', '\u8669'),\n    (0x2F9B7, 'M', '\u86a9'),\n    (0x2F9B8, 'M', '\u8688'),\n    (0x2F9B9, 'M', '\u870e'),\n    (0x2F9BA, 'M', '\u86e2'),\n    (0x2F9BB, 'M', '\u8779'),\n    (0x2F9BC, 'M', '\u8728'),\n    (0x2F9BD, 'M', '\u876b'),\n    (0x2F9BE, 'M', '\u8786'),\n    (0x2F9BF, 'X'),\n    (0x2F9C0, 'M', '\u87e1'),\n    (0x2F9C1, 'M', '\u8801'),\n    (0x2F9C2, 'M', '\u45f9'),\n    (0x2F9C3, 'M', '\u8860'),\n    (0x2F9C4, 'M', '\u8863'),\n    (0x2F9C5, 'M', '\ud85d\ude67'),\n    (0x2F9C6, 'M', '\u88d7'),\n    (0x2F9C7, 'M', '\u88de'),\n    (0x2F9C8, 'M', '\u4635'),\n    (0x2F9C9, 'M', '\u88fa'),\n    (0x2F9CA, 'M', '\u34bb'),\n    (0x2F9CB, 'M', '\ud85e\udcae'),\n    (0x2F9CC, 'M', '\ud85e\udd66'),\n    (0x2F9CD, 'M', '\u46be'),\n    (0x2F9CE, 'M', '\u46c7'),\n    (0x2F9CF, 'M', '\u8aa0'),\n    (0x2F9D0, 'M', '\u8aed'),\n    (0x2F9D1, 'M', '\u8b8a'),\n    (0x2F9D2, 'M', '\u8c55'),\n    (0x2F9D3, 'M', '\ud85f\udca8'),\n    (0x2F9D4, 'M', '\u8cab'),\n    (0x2F9D5, 'M', '\u8cc1'),\n    (0x2F9D6, 'M', '\u8d1b'),\n    (0x2F9D7, 'M', '\u8d77'),\n    ]\n\ndef _seg_81() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:\n    return [\n    (0x2F9D8, 'M', '\ud85f\udf2f'),\n    (0x2F9D9, 'M', '\ud842\udc04'),\n    (0x2F9DA, 'M', '\u8dcb'),\n    (0x2F9DB, 'M', '\u8dbc'),\n    (0x2F9DC, 'M', '\u8df0'),\n    (0x2F9DD, 'M', '\ud842\udcde'),\n    (0x2F9DE, 'M', '\u8ed4'),\n    (0x2F9DF, 'M', '\u8f38'),\n    (0x2F9E0, 'M', '\ud861\uddd2'),\n    (0x2F9E1, 'M', '\ud861\udded'),\n    (0x2F9E2, 'M', '\u9094'),\n    (0x2F9E3, 'M', '\u90f1'),\n    (0x2F9E4, 'M', '\u9111'),\n    (0x2F9E5, 'M', '\ud861\udf2e'),\n    (0x2F9E6, 'M', '\u911b'),\n    (0x2F9E7, 'M', '\u9238'),\n    (0x2F9E8, 'M', '\u92d7'),\n    (0x2F9E9, 'M', '\u92d8'),\n    (0x2F9EA, 'M', '\u927c'),\n    (0x2F9EB, 'M', '\u93f9'),\n    (0x2F9EC, 'M', '\u9415'),\n    (0x2F9ED, 'M', '\ud862\udffa'),\n    (0x2F9EE, 'M', '\u958b'),\n    (0x2F9EF, 'M', '\u4995'),\n    (0x2F9F0, 'M', '\u95b7'),\n    (0x2F9F1, 'M', '\ud863\udd77'),\n    (0x2F9F2, 'M', '\u49e6'),\n    (0x2F9F3, 'M', '\u96c3'),\n    (0x2F9F4, 'M', '\u5db2'),\n    (0x2F9F5, 'M', '\u9723'),\n    (0x2F9F6, 'M', '\ud864\udd45'),\n    (0x2F9F7, 'M', '\ud864\ude1a'),\n    (0x2F9F8, 'M', '\u4a6e'),\n    (0x2F9F9, 'M', '\u4a76'),\n    (0x2F9FA, 'M', '\u97e0'),\n    (0x2F9FB, 'M', '\ud865\udc0a'),\n    (0x2F9FC, 'M', '\u4ab2'),\n    (0x2F9FD, 'M', '\ud865\udc96'),\n    (0x2F9FE, 'M', '\u980b'),\n    (0x2FA00, 'M', '\u9829'),\n    (0x2FA01, 'M', '\ud865\uddb6'),\n    (0x2FA02, 'M', '\u98e2'),\n    (0x2FA03, 'M', '\u4b33'),\n    (0x2FA04, 'M', '\u9929'),\n    (0x2FA05, 'M', '\u99a7'),\n    (0x2FA06, 'M', '\u99c2'),\n    (0x2FA07, 'M', '\u99fe'),\n    (0x2FA08, 'M', '\u4bce'),\n    (0x2FA09, 'M', '\ud866\udf30'),\n    (0x2FA0A, 'M', '\u9b12'),\n    (0x2FA0B, 'M', '\u9c40'),\n    (0x2FA0C, 'M', '\u9cfd'),\n    (0x2FA0D, 'M', '\u4cce'),\n    (0x2FA0E, 'M', '\u4ced'),\n    (0x2FA0F, 'M', '\u9d67'),\n    (0x2FA10, 'M', '\ud868\udcce'),\n    (0x2FA11, 'M', '\u4cf8'),\n    (0x2FA12, 'M', '\ud868\udd05'),\n    (0x2FA13, 'M', '\ud868\ude0e'),\n    (0x2FA14, 'M', '\ud868\ude91'),\n    (0x2FA15, 'M', '\u9ebb'),\n    (0x2FA16, 'M', '\u4d56'),\n    (0x2FA17, 'M', '\u9ef9'),\n    (0x2FA18, 'M', '\u9efe'),\n    (0x2FA19, 'M', '\u9f05'),\n    (0x2FA1A, 'M', '\u9f0f'),\n    (0x2FA1B, 'M', '\u9f16'),\n    (0x2FA1C, 'M', '\u9f3b'),\n    (0x2FA1D, 'M', '\ud869\ude00'),\n    (0x2FA1E, 'X'),\n    (0x30000, 'V'),\n    (0x3134B, 'X'),\n    (0x31350, 'V'),\n    (0x323B0, 'X'),\n    (0xE0100, 'I'),\n    (0xE01F0, 'X'),\n    ]\n\nuts46data = tuple(\n    _seg_0()\n    + _seg_1()\n    + _seg_2()\n    + _seg_3()\n    + _seg_4()\n    + _seg_5()\n    + _seg_6()\n    + _seg_7()\n    + _seg_8()\n    + _seg_9()\n    + _seg_10()\n    + _seg_11()\n    + _seg_12()\n    + _seg_13()\n    + _seg_14()\n    + _seg_15()\n    + _seg_16()\n    + _seg_17()\n    + _seg_18()\n    + _seg_19()\n    + _seg_20()\n    + _seg_21()\n    + _seg_22()\n    + _seg_23()\n    + _seg_24()\n    + _seg_25()\n    + _seg_26()\n    + _seg_27()\n    + _seg_28()\n    + _seg_29()\n    + _seg_30()\n    + _seg_31()\n    + _seg_32()\n    + _seg_33()\n    + _seg_34()\n    + _seg_35()\n    + _seg_36()\n    + _seg_37()\n    + _seg_38()\n    + _seg_39()\n    + _seg_40()\n    + _seg_41()\n    + _seg_42()\n    + _seg_43()\n    + _seg_44()\n    + _seg_45()\n    + _seg_46()\n    + _seg_47()\n    + _seg_48()\n    + _seg_49()\n    + _seg_50()\n    + _seg_51()\n    + _seg_52()\n    + _seg_53()\n    + _seg_54()\n    + _seg_55()\n    + _seg_56()\n    + _seg_57()\n    + _seg_58()\n    + _seg_59()\n    + _seg_60()\n    + _seg_61()\n    + _seg_62()\n    + _seg_63()\n    + _seg_64()\n    + _seg_65()\n    + _seg_66()\n    + _seg_67()\n    + _seg_68()\n    + _seg_69()\n    + _seg_70()\n    + _seg_71()\n    + _seg_72()\n    + _seg_73()\n    + _seg_74()\n    + _seg_75()\n    + _seg_76()\n    + _seg_77()\n    + _seg_78()\n    + _seg_79()\n    + _seg_80()\n    + _seg_81()\n)  # type: Tuple[Union[Tuple[int, str], Tuple[int, str, str]], ...]\n", "idna/intranges.py": "\"\"\"\nGiven a list of integers, made up of (hopefully) a small number of long runs\nof consecutive integers, compute a representation of the form\n((start1, end1), (start2, end2) ...). Then answer the question \"was x present\nin the original list?\" in time O(log(# runs)).\n\"\"\"\n\nimport bisect\nfrom typing import List, Tuple\n\ndef intranges_from_list(list_: List[int]) -> Tuple[int, ...]:\n    \"\"\"Represent a list of integers as a sequence of ranges:\n    ((start_0, end_0), (start_1, end_1), ...), such that the original\n    integers are exactly those x such that start_i <= x < end_i for some i.\n\n    Ranges are encoded as single integers (start << 32 | end), not as tuples.\n    \"\"\"\n\n    sorted_list = sorted(list_)\n    ranges = []\n    last_write = -1\n    for i in range(len(sorted_list)):\n        if i+1 < len(sorted_list):\n            if sorted_list[i] == sorted_list[i+1]-1:\n                continue\n        current_range = sorted_list[last_write+1:i+1]\n        ranges.append(_encode_range(current_range[0], current_range[-1] + 1))\n        last_write = i\n\n    return tuple(ranges)\n\ndef _encode_range(start: int, end: int) -> int:\n    return (start << 32) | end\n\ndef _decode_range(r: int) -> Tuple[int, int]:\n    return (r >> 32), (r & ((1 << 32) - 1))\n\n\ndef intranges_contain(int_: int, ranges: Tuple[int, ...]) -> bool:\n    \"\"\"Determine if `int_` falls into one of the ranges in `ranges`.\"\"\"\n    tuple_ = _encode_range(int_, 0)\n    pos = bisect.bisect_left(ranges, tuple_)\n    # we could be immediately ahead of a tuple (start, end)\n    # with start < int_ <= end\n    if pos > 0:\n        left, right = _decode_range(ranges[pos-1])\n        if left <= int_ < right:\n            return True\n    # or we could be immediately behind a tuple (int_, end)\n    if pos < len(ranges):\n        left, _ = _decode_range(ranges[pos])\n        if left == int_:\n            return True\n    return False\n", "idna/codec.py": "from .core import encode, decode, alabel, ulabel, IDNAError\nimport codecs\nimport re\nfrom typing import Any, Tuple, Optional\n\n_unicode_dots_re = re.compile('[\\u002e\\u3002\\uff0e\\uff61]')\n\nclass Codec(codecs.Codec):\n\n    def encode(self, data: str, errors: str = 'strict') -> Tuple[bytes, int]:\n        if errors != 'strict':\n            raise IDNAError('Unsupported error handling \\\"{}\\\"'.format(errors))\n\n        if not data:\n            return b\"\", 0\n\n        return encode(data), len(data)\n\n    def decode(self, data: bytes, errors: str = 'strict') -> Tuple[str, int]:\n        if errors != 'strict':\n            raise IDNAError('Unsupported error handling \\\"{}\\\"'.format(errors))\n\n        if not data:\n            return '', 0\n\n        return decode(data), len(data)\n\nclass IncrementalEncoder(codecs.BufferedIncrementalEncoder):\n    def _buffer_encode(self, data: str, errors: str, final: bool) -> Tuple[bytes, int]:\n        if errors != 'strict':\n            raise IDNAError('Unsupported error handling \\\"{}\\\"'.format(errors))\n\n        if not data:\n            return b'', 0\n\n        labels = _unicode_dots_re.split(data)\n        trailing_dot = b''\n        if labels:\n            if not labels[-1]:\n                trailing_dot = b'.'\n                del labels[-1]\n            elif not final:\n                # Keep potentially unfinished label until the next call\n                del labels[-1]\n                if labels:\n                    trailing_dot = b'.'\n\n        result = []\n        size = 0\n        for label in labels:\n            result.append(alabel(label))\n            if size:\n                size += 1\n            size += len(label)\n\n        # Join with U+002E\n        result_bytes = b'.'.join(result) + trailing_dot\n        size += len(trailing_dot)\n        return result_bytes, size\n\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def _buffer_decode(self, data: Any, errors: str, final: bool) -> Tuple[str, int]:\n        if errors != 'strict':\n            raise IDNAError('Unsupported error handling \\\"{}\\\"'.format(errors))\n\n        if not data:\n            return ('', 0)\n\n        if not isinstance(data, str):\n            data = str(data, 'ascii')\n\n        labels = _unicode_dots_re.split(data)\n        trailing_dot = ''\n        if labels:\n            if not labels[-1]:\n                trailing_dot = '.'\n                del labels[-1]\n            elif not final:\n                # Keep potentially unfinished label until the next call\n                del labels[-1]\n                if labels:\n                    trailing_dot = '.'\n\n        result = []\n        size = 0\n        for label in labels:\n            result.append(ulabel(label))\n            if size:\n                size += 1\n            size += len(label)\n\n        result_str = '.'.join(result) + trailing_dot\n        size += len(trailing_dot)\n        return (result_str, size)\n\n\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\n\n\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n\n\ndef search_function(name: str) -> Optional[codecs.CodecInfo]:\n    if name != 'idna2008':\n        return None\n    return codecs.CodecInfo(\n        name=name,\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n\ncodecs.register(search_function)\n", "idna/__init__.py": "from .package_data import __version__\nfrom .core import (\n    IDNABidiError,\n    IDNAError,\n    InvalidCodepoint,\n    InvalidCodepointContext,\n    alabel,\n    check_bidi,\n    check_hyphen_ok,\n    check_initial_combiner,\n    check_label,\n    check_nfc,\n    decode,\n    encode,\n    ulabel,\n    uts46_remap,\n    valid_contextj,\n    valid_contexto,\n    valid_label_length,\n    valid_string_length,\n)\nfrom .intranges import intranges_contain\n\n__all__ = [\n    \"IDNABidiError\",\n    \"IDNAError\",\n    \"InvalidCodepoint\",\n    \"InvalidCodepointContext\",\n    \"alabel\",\n    \"check_bidi\",\n    \"check_hyphen_ok\",\n    \"check_initial_combiner\",\n    \"check_label\",\n    \"check_nfc\",\n    \"decode\",\n    \"encode\",\n    \"intranges_contain\",\n    \"ulabel\",\n    \"uts46_remap\",\n    \"valid_contextj\",\n    \"valid_contexto\",\n    \"valid_label_length\",\n    \"valid_string_length\",\n]\n", "idna/compat.py": "from .core import *\nfrom .codec import *\nfrom typing import Any, Union\n\ndef ToASCII(label: str) -> bytes:\n    return encode(label)\n\ndef ToUnicode(label: Union[bytes, bytearray]) -> str:\n    return decode(label)\n\ndef nameprep(s: Any) -> None:\n    raise NotImplementedError('IDNA 2008 does not utilise nameprep protocol')\n\n", "idna/package_data.py": "__version__ = '3.7'\n\n", "tests/test_idna.py": "#!/usr/bin/env python\n\nimport unittest\n\nimport idna\n\n\nclass IDNATests(unittest.TestCase):\n\n    def setUp(self):\n        self.tld_strings = [\n            ['\\u6d4b\\u8bd5', b'xn--0zwm56d'],\n            ['\\u092a\\u0930\\u0940\\u0915\\u094d\\u0937\\u093e', b'xn--11b5bs3a9aj6g'],\n            ['\\ud55c\\uad6d', b'xn--3e0b707e'],\n            ['\\u09ad\\u09be\\u09b0\\u09a4', b'xn--45brj9c'],\n            ['\\u09ac\\u09be\\u0982\\u09b2\\u09be', b'xn--54b7fta0cc'],\n            ['\\u0438\\u0441\\u043f\\u044b\\u0442\\u0430\\u043d\\u0438\\u0435', b'xn--80akhbyknj4f'],\n            ['\\u0441\\u0440\\u0431', b'xn--90a3ac'],\n            ['\\ud14c\\uc2a4\\ud2b8', b'xn--9t4b11yi5a'],\n            ['\\u0b9a\\u0bbf\\u0b99\\u0bcd\\u0b95\\u0baa\\u0bcd\\u0baa\\u0bc2\\u0bb0\\u0bcd', b'xn--clchc0ea0b2g2a9gcd'],\n            ['\\u05d8\\u05e2\\u05e1\\u05d8', b'xn--deba0ad'],\n            ['\\u4e2d\\u56fd', b'xn--fiqs8s'],\n            ['\\u4e2d\\u570b', b'xn--fiqz9s'],\n            ['\\u0c2d\\u0c3e\\u0c30\\u0c24\\u0c4d', b'xn--fpcrj9c3d'],\n            ['\\u0dbd\\u0d82\\u0d9a\\u0dcf', b'xn--fzc2c9e2c'],\n            ['\\u6e2c\\u8a66', b'xn--g6w251d'],\n            ['\\u0aad\\u0abe\\u0ab0\\u0aa4', b'xn--gecrj9c'],\n            ['\\u092d\\u093e\\u0930\\u0924', b'xn--h2brj9c'],\n            ['\\u0622\\u0632\\u0645\\u0627\\u06cc\\u0634\\u06cc', b'xn--hgbk6aj7f53bba'],\n            ['\\u0baa\\u0bb0\\u0bbf\\u0b9f\\u0bcd\\u0b9a\\u0bc8', b'xn--hlcj6aya9esc7a'],\n            ['\\u0443\\u043a\\u0440', b'xn--j1amh'],\n            ['\\u9999\\u6e2f', b'xn--j6w193g'],\n            ['\\u03b4\\u03bf\\u03ba\\u03b9\\u03bc\\u03ae', b'xn--jxalpdlp'],\n            ['\\u0625\\u062e\\u062a\\u0628\\u0627\\u0631', b'xn--kgbechtv'],\n            ['\\u53f0\\u6e7e', b'xn--kprw13d'],\n            ['\\u53f0\\u7063', b'xn--kpry57d'],\n            ['\\u0627\\u0644\\u062c\\u0632\\u0627\\u0626\\u0631', b'xn--lgbbat1ad8j'],\n            ['\\u0639\\u0645\\u0627\\u0646', b'xn--mgb9awbf'],\n            ['\\u0627\\u06cc\\u0631\\u0627\\u0646', b'xn--mgba3a4f16a'],\n            ['\\u0627\\u0645\\u0627\\u0631\\u0627\\u062a', b'xn--mgbaam7a8h'],\n            ['\\u067e\\u0627\\u06a9\\u0633\\u062a\\u0627\\u0646', b'xn--mgbai9azgqp6j'],\n            ['\\u0627\\u0644\\u0627\\u0631\\u062f\\u0646', b'xn--mgbayh7gpa'],\n            ['\\u0628\\u06be\\u0627\\u0631\\u062a', b'xn--mgbbh1a71e'],\n            ['\\u0627\\u0644\\u0645\\u063a\\u0631\\u0628', b'xn--mgbc0a9azcg'],\n            ['\\u0627\\u0644\\u0633\\u0639\\u0648\\u062f\\u064a\\u0629', b'xn--mgberp4a5d4ar'],\n            ['\\u10d2\\u10d4', b'xn--node'],\n            ['\\u0e44\\u0e17\\u0e22', b'xn--o3cw4h'],\n            ['\\u0633\\u0648\\u0631\\u064a\\u0629', b'xn--ogbpf8fl'],\n            ['\\u0440\\u0444', b'xn--p1ai'],\n            ['\\u062a\\u0648\\u0646\\u0633', b'xn--pgbs0dh'],\n            ['\\u0a2d\\u0a3e\\u0a30\\u0a24', b'xn--s9brj9c'],\n            ['\\u0645\\u0635\\u0631', b'xn--wgbh1c'],\n            ['\\u0642\\u0637\\u0631', b'xn--wgbl6a'],\n            ['\\u0b87\\u0bb2\\u0b99\\u0bcd\\u0b95\\u0bc8', b'xn--xkc2al3hye2a'],\n            ['\\u0b87\\u0ba8\\u0bcd\\u0ba4\\u0bbf\\u0baf\\u0bbe', b'xn--xkc2dl3a5ee0h'],\n            ['\\u65b0\\u52a0\\u5761', b'xn--yfro4i67o'],\n            ['\\u0641\\u0644\\u0633\\u0637\\u064a\\u0646', b'xn--ygbi2ammx'],\n            ['\\u30c6\\u30b9\\u30c8', b'xn--zckzah'],\n            ['\\u049b\\u0430\\u0437', b'xn--80ao21a'],\n            ['\\u0645\\u0644\\u064a\\u0633\\u064a\\u0627', b'xn--mgbx4cd0ab'],\n            ['\\u043c\\u043e\\u043d', b'xn--l1acc'],\n            ['\\u0633\\u0648\\u062f\\u0627\\u0646', b'xn--mgbpl2fh'],\n        ]\n\n    def testIDNTLDALabels(self):\n\n        for (ulabel, alabel) in self.tld_strings:\n            self.assertEqual(alabel, idna.alabel(ulabel))\n\n    def testIDNTLDULabels(self):\n\n        for (ulabel, alabel) in self.tld_strings:\n            self.assertEqual(ulabel, idna.ulabel(alabel))\n\n    def test_valid_label_length(self):\n\n        self.assertTrue(idna.valid_label_length('a' * 63))\n        self.assertFalse(idna.valid_label_length('a' * 64))\n        self.assertRaises(idna.IDNAError, idna.encode, 'a' * 64)\n\n    def test_check_bidi(self):\n\n        l = '\\u0061'\n        r = '\\u05d0'\n        al = '\\u0627'\n        an = '\\u0660'\n        en = '\\u0030'\n        es = '\\u002d'\n        cs = '\\u002c'\n        et = '\\u0024'\n        on = '\\u0021'\n        bn = '\\u200c'\n        nsm = '\\u0610'\n        ws = '\\u0020'\n\n        # RFC 5893 Rule 1\n        self.assertTrue(idna.check_bidi(l))\n        self.assertTrue(idna.check_bidi(r))\n        self.assertTrue(idna.check_bidi(al))\n        self.assertRaises(idna.IDNABidiError, idna.check_bidi, an)\n\n        # RFC 5893 Rule 2\n        self.assertTrue(idna.check_bidi(r + al))\n        self.assertTrue(idna.check_bidi(r + al))\n        self.assertTrue(idna.check_bidi(r + an))\n        self.assertTrue(idna.check_bidi(r + en))\n        self.assertTrue(idna.check_bidi(r + es + al))\n        self.assertTrue(idna.check_bidi(r + cs + al))\n        self.assertTrue(idna.check_bidi(r + et + al))\n        self.assertTrue(idna.check_bidi(r + on + al))\n        self.assertTrue(idna.check_bidi(r + bn + al))\n        self.assertTrue(idna.check_bidi(r + nsm))\n        self.assertRaises(idna.IDNABidiError, idna.check_bidi, r + l)\n        self.assertRaises(idna.IDNABidiError, idna.check_bidi, r + ws)\n\n        # RFC 5893 Rule 3\n        self.assertTrue(idna.check_bidi(r + al))\n        self.assertTrue(idna.check_bidi(r + en))\n        self.assertTrue(idna.check_bidi(r + an))\n        self.assertTrue(idna.check_bidi(r + nsm))\n        self.assertTrue(idna.check_bidi(r + nsm + nsm))\n        self.assertRaises(idna.IDNABidiError, idna.check_bidi, r + on)\n\n        # RFC 5893 Rule 4\n        self.assertTrue(idna.check_bidi(r + en))\n        self.assertTrue(idna.check_bidi(r + an))\n        self.assertRaises(idna.IDNABidiError, idna.check_bidi, r + en + an)\n        self.assertRaises(idna.IDNABidiError, idna.check_bidi, r + an + en)\n\n        # RFC 5893 Rule 5\n        self.assertTrue(idna.check_bidi(l + en, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + es + l, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + cs + l, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + et + l, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + on + l, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + bn + l, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + nsm, check_ltr=True))\n\n        # RFC 5893 Rule 6\n        self.assertTrue(idna.check_bidi(l + l, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + en, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + en + nsm, check_ltr=True))\n        self.assertTrue(idna.check_bidi(l + en + nsm + nsm, check_ltr=True))\n        self.assertRaises(idna.IDNABidiError, idna.check_bidi, l + cs, check_ltr=True)\n\n    def test_check_initial_combiner(self):\n\n        m = '\\u0300'\n        a = '\\u0061'\n\n        self.assertTrue(idna.check_initial_combiner(a))\n        self.assertTrue(idna.check_initial_combiner(a + m))\n        self.assertRaises(idna.IDNAError, idna.check_initial_combiner, m + a)\n\n    def test_check_hyphen_ok(self):\n\n        self.assertTrue(idna.check_hyphen_ok('abc'))\n        self.assertTrue(idna.check_hyphen_ok('a--b'))\n        self.assertRaises(idna.IDNAError, idna.check_hyphen_ok, 'aa--')\n        self.assertRaises(idna.IDNAError, idna.check_hyphen_ok, 'a-')\n        self.assertRaises(idna.IDNAError, idna.check_hyphen_ok, '-a')\n\n    def test_valid_contextj(self):\n\n        zwnj = '\\u200c'\n        zwj = '\\u200d'\n        virama = '\\u094d'\n        latin = '\\u0061'\n\n        # RFC 5892 Appendix A.1 (Zero Width Non-Joiner)\n        self.assertFalse(idna.valid_contextj(zwnj, 0))\n        self.assertFalse(idna.valid_contextj(latin + zwnj, 1)) # No preceding Virama\n        self.assertTrue(idna.valid_contextj(virama + zwnj, 1)) # Preceding Virama\n\n        # RFC 5892 Appendix A.2 (Zero Width Joiner)\n        self.assertFalse(idna.valid_contextj(zwj, 0))\n        self.assertFalse(idna.valid_contextj(latin + zwj, 1)) # No preceding Virama\n        self.assertTrue(idna.valid_contextj(virama + zwj, 1)) # Preceding Virama\n\n    def test_valid_contexto(self):\n\n        latin = '\\u0061'\n        latin_l = '\\u006c'\n        greek = '\\u03b1'\n        hebrew = '\\u05d0'\n        katakana = '\\u30a1'\n        hiragana = '\\u3041'\n        han = '\\u6f22'\n        arabic_digit = '\\u0660'\n        ext_arabic_digit = '\\u06f0'\n\n        # RFC 5892 Rule A.3 (Middle Dot)\n        latin_middle_dot = '\\u00b7'\n        self.assertTrue(idna.valid_contexto(latin_l + latin_middle_dot + latin_l, 1))\n        self.assertFalse(idna.valid_contexto(latin_middle_dot + latin_l, 1))\n        self.assertFalse(idna.valid_contexto(latin_l + latin_middle_dot, 0))\n        self.assertFalse(idna.valid_contexto(latin_middle_dot, 0))\n        self.assertFalse(idna.valid_contexto(latin_l + latin_middle_dot + latin, 1))\n\n        # RFC 5892 Rule A.4 (Greek Lower Numeral Sign)\n        glns = '\\u0375'\n        self.assertTrue(idna.valid_contexto(glns + greek, 0))\n        self.assertFalse(idna.valid_contexto(glns + latin, 0))\n        self.assertFalse(idna.valid_contexto(glns, 0))\n        self.assertFalse(idna.valid_contexto(greek + glns, 1))\n\n        # RFC 5892 Rule A.5 (Hebrew Punctuation Geresh)\n        geresh = '\\u05f3'\n        self.assertTrue(idna.valid_contexto(hebrew + geresh, 1))\n        self.assertFalse(idna.valid_contexto(latin + geresh, 1))\n\n        # RFC 5892 Rule A.6 (Hebrew Punctuation Gershayim)\n        gershayim = '\\u05f4'\n        self.assertTrue(idna.valid_contexto(hebrew + gershayim, 1))\n        self.assertFalse(idna.valid_contexto(latin + gershayim, 1))\n\n        # RFC 5892 Rule A.7 (Katakana Middle Dot)\n        ja_middle_dot = '\\u30fb'\n        self.assertTrue(idna.valid_contexto(katakana + ja_middle_dot + katakana, 1))\n        self.assertTrue(idna.valid_contexto(hiragana + ja_middle_dot + hiragana, 1))\n        self.assertTrue(idna.valid_contexto(han + ja_middle_dot + han, 1))\n        self.assertTrue(idna.valid_contexto(han + ja_middle_dot + latin, 1))\n        self.assertTrue(idna.valid_contexto('\\u6f22\\u30fb\\u5b57', 1))\n        self.assertFalse(idna.valid_contexto('\\u0061\\u30fb\\u0061', 1))\n\n        # RFC 5892 Rule A.8 (Arabic-Indic Digits)\n        self.assertTrue(idna.valid_contexto(arabic_digit + arabic_digit, 0))\n        self.assertFalse(idna.valid_contexto(arabic_digit + ext_arabic_digit, 0))\n\n        # RFC 5892 Rule A.9 (Extended Arabic-Indic Digits)\n        self.assertTrue(idna.valid_contexto(ext_arabic_digit + ext_arabic_digit, 0))\n        self.assertFalse(idna.valid_contexto(ext_arabic_digit + arabic_digit, 0))\n\n    def test_encode(self, encode=None, skip_bytes=False):\n        if encode is None:\n            encode = idna.encode\n\n        self.assertEqual(encode('xn--zckzah.xn--zckzah'), b'xn--zckzah.xn--zckzah')\n        self.assertEqual(encode('\\u30c6\\u30b9\\u30c8.xn--zckzah'), b'xn--zckzah.xn--zckzah')\n        self.assertEqual(encode('\\u30c6\\u30b9\\u30c8.\\u30c6\\u30b9\\u30c8'), b'xn--zckzah.xn--zckzah')\n        self.assertEqual(encode('abc.abc'), b'abc.abc')\n        self.assertEqual(encode('xn--zckzah.abc'), b'xn--zckzah.abc')\n        self.assertEqual(encode('\\u30c6\\u30b9\\u30c8.abc'), b'xn--zckzah.abc')\n        self.assertEqual(encode('\\u0521\\u0525\\u0523-\\u0523\\u0523-----\\u0521\\u0523\\u0523\\u0523.aa'),\n                         b'xn---------90gglbagaar.aa')\n        if encode is idna.encode:\n            self.assertRaises(idna.IDNAError, encode,\n                              '\\u0521\\u0524\\u0523-\\u0523\\u0523-----\\u0521\\u0523\\u0523\\u0523.aa', uts46=False)\n        self.assertEqual(encode('a'*63), b'a'*63)\n        self.assertRaises(idna.IDNAError, encode, 'a'*64)\n        self.assertRaises(idna.core.InvalidCodepoint, encode, '*')\n        if not skip_bytes:\n            self.assertRaises(idna.IDNAError, encode, b'\\x0a\\x33\\x81')\n\n    def test_decode(self, decode=None, skip_str=False):\n        if decode is None:\n            decode = idna.decode\n        self.assertEqual(decode(b'xn--zckzah.xn--zckzah'), '\\u30c6\\u30b9\\u30c8.\\u30c6\\u30b9\\u30c8')\n        self.assertEqual(decode(b'xn--d1acufc.xn--80akhbyknj4f'),\n                         '\\u0434\\u043e\\u043c\\u0435\\u043d.\\u0438\\u0441\\u043f\\u044b\\u0442\\u0430\\u043d\\u0438\\u0435')\n        if not skip_str:\n            self.assertEqual(decode('\\u30c6\\u30b9\\u30c8.xn--zckzah'), '\\u30c6\\u30b9\\u30c8.\\u30c6\\u30b9\\u30c8')\n            self.assertEqual(decode('\\u30c6\\u30b9\\u30c8.\\u30c6\\u30b9\\u30c8'),\n                             '\\u30c6\\u30b9\\u30c8.\\u30c6\\u30b9\\u30c8')\n            self.assertEqual(decode('abc.abc'), 'abc.abc')\n        self.assertEqual(decode(b'xn---------90gglbagaar.aa'),\n                         '\\u0521\\u0525\\u0523-\\u0523\\u0523-----\\u0521\\u0523\\u0523\\u0523.aa')\n        self.assertRaises(idna.IDNAError, decode, b'XN---------90GGLBAGAAC.AA')\n        self.assertRaises(idna.IDNAError, decode, b'xn---------90gglbagaac.aa')\n        self.assertRaises(idna.IDNAError, decode, b'xn--')\n        self.assertRaises(idna.IDNAError, decode, b'\\x8d\\xd2')\n        self.assertRaises(idna.IDNAError, decode, b'A.A.0.a.a.A.0.a.A.A.0.a.A.0A.2.a.A.A.0.a.A.0.A.a.A0.a.a.A.0.a.fB.A.A.a.A.A.B.A.A.a.A.A.B.A.A.a.A.A.0.a.A.a.a.A.A.0.a.A.0.A.a.A0.a.a.A.0.a.fB.A.A.a.A.A.B.0A.A.a.A.A.B.A.A.a.A.A.a.A.A.B.A.A.a.A.0.a.B.A.A.a.A.B.A.a.A.A.5.a.A.0.a.Ba.A.B.A.A.a.A.0.a.Xn--B.A.A.A.a')\n        self.assertRaises(idna.IDNAError, decode, b'xn--ukba655qaaaa14431eeaaba.c')\n\nif __name__ == '__main__':\n    unittest.main()\n", "tests/test_idna_uts46.py": "\"\"\"Tests for TR46 code.\"\"\"\n\nimport os.path\nimport re\nimport unittest\n\nimport idna\n\n_RE_UNICODE = re.compile(\"\\\\\\\\u([0-9a-fA-F]{4})\")\n_RE_SURROGATE = re.compile(\"[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\")\n_SKIP_TESTS = [\n    # These are strings that are illegal in IDNA 2008. Older versions of the UTS-46 test suite\n    # had these denoted with the 'NV8' marker but this has been removed, so we need to manually\n    # review exceptions and add them here to skip them as text vectors if they are invalid.\n    '\\U000102F7\\u3002\\u200D',\n    '\\U0001D7F5\\u9681\\u2BEE\\uFF0E\\u180D\\u200C',\n    '9\\u9681\\u2BEE.\\u180D\\u200C',\n    '\\u00DF\\u200C\\uAAF6\\u18A5.\\u22B6\\u2D21\\u2D16',\n    'ss\\u200C\\uAAF6\\u18A5.\\u22B6\\u2D21\\u2D16',\n    '\\u00DF\\u200C\\uAAF6\\u18A5\\uFF0E\\u22B6\\u2D21\\u2D16',\n    'ss\\u200C\\uAAF6\\u18A5\\uFF0E\\u22B6\\u2D21\\u2D16',\n    '\\U00010A57\\u200D\\u3002\\u2D09\\u2D15',\n    '\\U00010A57\\u200D\\uFF61\\u2D09\\u2D15',\n    '\\U0001D7CF\\U0001DA19\\u2E16.\\u200D',\n    '1\\U0001DA19\\u2E16.\\u200D',\n    '\\U0001D7E04\\U000E01D7\\U0001D23B\\uFF0E\\u200D\\U000102F5\\u26E7\\u200D',\n    '84\\U000E01D7\\U0001D23B.\\u200D\\U000102F5\\u26E7\\u200D',\n    '\\u00A1', 'xn--7a', '\\u19DA', 'xn--pkf', '\\u2615', 'xn--53h',\n    '\\U0001E937.\\U00010B90\\U0001E881\\U00010E60\\u0624',\n    '\\U0001E937.\\U00010B90\\U0001E881\\U00010E60\\u0648\\u0654',\n    '\\U0001E915.\\U00010B90\\U0001E881\\U00010E60\\u0648\\u0654',\n    '\\U0001E915.\\U00010B90\\U0001E881\\U00010E60\\u0624',\n    'xn--ve6h.xn--jgb1694kz0b2176a',\n    '\\u00DF\\u3002\\U000102F3\\u2D0C\\u0FB8',\n    'ss\\u3002\\U000102F3\\u2D0C\\u0FB8',\n    'ss.xn--lgd921mvv0m',\n    'ss.\\U000102F3\\u2D0C\\u0FB8',\n    'xn--zca.xn--lgd921mvv0m',\n    '\\u00DF.\\U000102F3\\u2D0C\\u0FB8',\n    '\\u00DF\\uFF61\\U000102F3\\u2D0C\\u0FB8',\n    'ss\\uFF61\\U000102F3\\u2D0C\\u0FB8',\n    '\\u16AD\\uFF61\\U0001D320\\u00DF\\U00016AF1',\n    '\\u16AD\\u3002\\U0001D320\\u00DF\\U00016AF1',\n    '\\u16AD\\u3002\\U0001D320SS\\U00016AF1',\n    '\\u16AD\\u3002\\U0001D320ss\\U00016AF1',\n    '\\u16AD\\u3002\\U0001D320Ss\\U00016AF1',\n    'xn--hwe.xn--ss-ci1ub261a',\n    '\\u16AD.\\U0001D320ss\\U00016AF1',\n    '\\u16AD.\\U0001D320SS\\U00016AF1',\n    '\\u16AD.\\U0001D320Ss\\U00016AF1',\n    'xn--hwe.xn--zca4946pblnc',\n    '\\u16AD.\\U0001D320\\u00DF\\U00016AF1',\n    '\\u16AD\\uFF61\\U0001D320SS\\U00016AF1',\n    '\\u16AD\\uFF61\\U0001D320ss\\U00016AF1',\n    '\\u16AD\\uFF61\\U0001D320Ss\\U00016AF1',\n    '\\u2D1A\\U000102F8\\U000E0104\\u30025\\uD7F6\\u103A',\n    'xn--ilj2659d.xn--5-dug9054m',\n    '\\u2D1A\\U000102F8.5\\uD7F6\\u103A',\n    '\\u2D1A\\U000102F8\\U000E0104\\u3002\\U0001D7DD\\uD7F6\\u103A',\n    'xn--9-mfs8024b.',\n    '9\\u9681\\u2BEE.',\n    'xn--ss-4epx629f.xn--ifh802b6a',\n    'ss\\uAAF6\\u18A5.\\u22B6\\u2D21\\u2D16',\n    'xn--pt9c.xn--0kjya',\n    '\\U00010A57.\\u2D09\\u2D15',\n    '\\uA5F7\\U00011180.\\u075D\\U00010A52',\n    'xn--ju8a625r.xn--hpb0073k',\n    '\\u03C2.\\u0641\\u0645\\u064A\\U0001F79B1.',\n    '\\u03A3.\\u0641\\u0645\\u064A\\U0001F79B1.',\n    '\\u03C3.\\u0641\\u0645\\u064A\\U0001F79B1.',\n    'xn--4xa.xn--1-gocmu97674d.',\n    'xn--3xa.xn--1-gocmu97674d.',\n    'xn--1-5bt6845n.',\n    '1\\U0001DA19\\u2E16.',\n    'xn--84-s850a.xn--59h6326e',\n    '84\\U0001D23B.\\U000102F5\\u26E7',\n    'xn--r97c.',\n    '\\U000102F7.',\n\n    # These appear to be errors in the test vectors. All relate to incorrectly applying\n    # bidi rules across label boundaries. Appears independently confirmed\n    # at http://www.alvestrand.no/pipermail/idna-update/2017-January/007946.html\n    '0\\u00E0.\\u05D0', '0a\\u0300.\\u05D0', '0A\\u0300.\\u05D0', '0\\u00C0.\\u05D0', 'xn--0-sfa.xn--4db',\n    '\\u00E0\\u02c7.\\u05D0', 'a\\u0300\\u02c7.\\u05D0', 'A\\u0300\\u02c7.\\u05D0', '\\u00C0\\u02c7.\\u05D0',\n    'xn--0ca88g.xn--4db', '0A.\\u05D0', '0a.\\u05D0', '0a.xn--4db', 'c.xn--0-eha.xn--4db',\n    'c.0\\u00FC.\\u05D0', 'c.0u\\u0308.\\u05D0', 'C.0U\\u0308.\\u05D0', 'C.0\\u00DC.\\u05D0',\n    'C.0\\u00FC.\\u05D0', 'C.0\\u0075\\u0308.\\u05D0', '\\u06B6\\u06DF\\u3002\\u2087\\uA806', '\\u06B6\\u06DF\\u30027\\uA806',\n    'xn--pkb6f.xn--7-x93e', '\\u06B6\\u06DF.7\\uA806', '1.\\uAC7E6.\\U00010C41\\u06D0',\n    '1.\\u1100\\u1165\\u11B56.\\U00010C41\\u06D0', '1.xn--6-945e.xn--glb1794k',\n]\n\ndef unicode_fixup(string):\n    \"\"\"Replace backslash-u-XXXX with appropriate unicode characters.\"\"\"\n    return _RE_SURROGATE.sub(lambda match: chr(\n        (ord(match.group(0)[0]) - 0xd800) * 0x400 +\n        ord(match.group(0)[1]) - 0xdc00 + 0x10000),\n        _RE_UNICODE.sub(lambda match: chr(int(match.group(1), 16)), string))\n\ndef parse_idna_test_table(inputstream):\n    \"\"\"Parse IdnaTestV2.txt and return a list of tuples.\"\"\"\n    for lineno, line in enumerate(inputstream):\n        line = line.decode('utf-8').strip()\n        if '#' in line:\n            line = line.split('#', 1)[0]\n        if not line:\n            continue\n        yield((lineno + 1, tuple(field.strip() for field in line.split(';'))))\n\n\nclass TestIdnaTest(unittest.TestCase):\n    \"\"\"Run one of the IdnaTestV2.txt test lines.\"\"\"\n    def __init__(self, lineno=None, fields=None):\n        super().__init__()\n        self.lineno = lineno\n        self.fields = fields\n\n    def id(self):\n        return '{}.{}'.format(super().id(), self.lineno)\n\n    def shortDescription(self):\n        if not self.fields:\n            return ''\n        return 'IdnaTestV2.txt line {}: {}'.format(self.lineno, '; '.join(self.fields))\n\n    def runTest(self):\n        if not self.fields:\n            return\n        source, to_unicode, to_unicode_status, to_ascii, to_ascii_status, to_ascii_t, to_ascii_t_status = self.fields\n        if source in _SKIP_TESTS:\n            return\n        if not to_unicode:\n            to_unicode = source\n        if not to_unicode_status:\n            to_unicode_status = '[]'\n        if not to_ascii:\n            to_ascii = to_unicode\n        if not to_ascii_status:\n            to_ascii_status = to_unicode_status\n        if not to_ascii_t:\n            to_ascii_t = to_ascii\n        if not to_ascii_t_status:\n            to_ascii_t_status = to_ascii_status\n\n        try:\n            output = idna.decode(source, uts46=True, strict=True)\n            if to_unicode_status != '[]':\n                self.fail('decode() did not emit required error {} for {}'.format(to_unicode, repr(source)))\n            self.assertEqual(output, to_unicode, 'unexpected decode() output')\n        except (idna.IDNAError, UnicodeError, ValueError) as exc:\n            if str(exc).startswith(\"Unknown\"):\n                raise unittest.SkipTest(\"Test requires support for a newer\"\n                    \" version of Unicode than this Python supports\")\n            if to_unicode_status == '[]':\n                raise\n\n        try:\n            output = idna.encode(source, uts46=True, strict=True).decode('ascii')\n            if to_ascii_status != '[]':\n                self.fail('encode() did not emit required error {} for {}'.\n                    format(to_ascii_status, repr(source)))\n            self.assertEqual(output, to_ascii, 'unexpected encode() output')\n        except (idna.IDNAError, UnicodeError, ValueError) as exc:\n            if str(exc).startswith(\"Unknown\"):\n                raise unittest.SkipTest(\"Test requires support for a newer\"\n                    \" version of Unicode than this Python supports\")\n            if to_ascii_status == '[]':\n                raise\n\n        try:\n            output = idna.encode(source, uts46=True, strict=True, transitional=True).decode('ascii')\n            if to_ascii_t_status != '[]':\n                self.fail('encode(transitional=True) did not emit required error {} for {}'.\n                    format(to_ascii_t_status, repr(source)))\n            self.assertEqual(output, to_ascii_t, 'unexpected encode() output')\n        except (idna.IDNAError, UnicodeError, ValueError) as exc:\n            if str(exc).startswith(\"Unknown\"):\n                raise unittest.SkipTest(\"Test requires support for a newer\"\n                    \" version of Unicode than this Python supports\")\n            if to_ascii_t_status == '[]':\n                raise\n\n\ndef load_tests(loader, tests, pattern):\n    \"\"\"Create a suite of all the individual tests.\"\"\"\n    suite = unittest.TestSuite()\n    with open(os.path.join(os.path.dirname(__file__),\n            'IdnaTestV2.txt'), 'rb') as tests_file:\n        suite.addTests(TestIdnaTest(lineno, fields)\n            for lineno, fields in parse_idna_test_table(tests_file))\n    return suite\n", "tests/test_idna_compat.py": "#!/usr/bin/env python\n\nimport unittest\n\nimport idna.compat\n\nclass IDNACompatTests(unittest.TestCase):\n\n    def testToASCII(self):\n        self.assertEqual(idna.compat.ToASCII('\\u30c6\\u30b9\\u30c8.xn--zckzah'), b'xn--zckzah.xn--zckzah')\n\n    def testToUnicode(self):\n        self.assertEqual(idna.compat.ToUnicode(b'xn--zckzah.xn--zckzah'), '\\u30c6\\u30b9\\u30c8.\\u30c6\\u30b9\\u30c8')\n\n    def test_nameprep(self):\n        self.assertRaises(NotImplementedError, idna.compat.nameprep, \"a\")\n\nif __name__ == '__main__':\n    unittest.main()\n", "tests/test_idna_codec.py": "#!/usr/bin/env python\n\nimport codecs\nimport io\nimport unittest\n\nimport idna.codec\n\nCODEC_NAME = 'idna2008'\n\nclass IDNACodecTests(unittest.TestCase):\n    def setUp(self):\n        from . import test_idna\n        self.idnatests = test_idna.IDNATests()\n        self.idnatests.setUp()\n\n    def testCodec(self):\n        self.assertIs(codecs.lookup(CODEC_NAME).incrementalencoder, idna.codec.IncrementalEncoder)\n\n    def testDirectDecode(self):\n        self.idnatests.test_decode(decode=lambda obj: codecs.decode(obj, CODEC_NAME))\n\n    def testIndirectDecode(self):\n        self.idnatests.test_decode(decode=lambda obj: obj.decode(CODEC_NAME), skip_str=True)\n\n    def testDirectEncode(self):\n        self.idnatests.test_encode(encode=lambda obj: codecs.encode(obj, CODEC_NAME))\n\n    def testIndirectEncode(self):\n        self.idnatests.test_encode(encode=lambda obj: obj.encode(CODEC_NAME), skip_bytes=True)\n\n    def testStreamReader(self):\n        def decode(obj):\n            if isinstance(obj, str):\n                obj = bytes(obj, 'ascii')\n            buffer = io.BytesIO(obj)\n            stream = codecs.getreader(CODEC_NAME)(buffer)\n            return stream.read()\n        return self.idnatests.test_decode(decode=decode, skip_str=True)\n\n    def testStreamWriter(self):\n        def encode(obj):\n            buffer = io.BytesIO()\n            stream = codecs.getwriter(CODEC_NAME)(buffer)\n            stream.write(obj)\n            stream.flush()\n            return buffer.getvalue()\n        return self.idnatests.test_encode(encode=encode)\n\n    def testIncrementalDecoder(self):\n\n        # Tests derived from Python standard library test/test_codecs.py\n\n        incremental_tests = (\n            (\"python.org\", b\"python.org\"),\n            (\"python.org.\", b\"python.org.\"),\n            (\"pyth\\xf6n.org\", b\"xn--pythn-mua.org\"),\n            (\"pyth\\xf6n.org.\", b\"xn--pythn-mua.org.\"),\n        )\n\n        for decoded, encoded in incremental_tests:\n            self.assertEqual(\"\".join(codecs.iterdecode((bytes([c]) for c in encoded), CODEC_NAME)),\n                             decoded)\n\n        decoder = codecs.getincrementaldecoder(CODEC_NAME)()\n        self.assertEqual(decoder.decode(b\"xn--xam\", ), \"\")\n        self.assertEqual(decoder.decode(b\"ple-9ta.o\", ), \"\\xe4xample.\")\n        self.assertEqual(decoder.decode(b\"rg\"), \"\")\n        self.assertEqual(decoder.decode(b\"\", True), \"org\")\n\n        decoder.reset()\n        self.assertEqual(decoder.decode(b\"xn--xam\", ), \"\")\n        self.assertEqual(decoder.decode(b\"ple-9ta.o\", ), \"\\xe4xample.\")\n        self.assertEqual(decoder.decode(b\"rg.\"), \"org.\")\n        self.assertEqual(decoder.decode(b\"\", True), \"\")\n\n\n    def testIncrementalEncoder(self):\n\n        # Tests derived from Python standard library test/test_codecs.py\n\n        incremental_tests = (\n            (\"python.org\", b\"python.org\"),\n            (\"python.org.\", b\"python.org.\"),\n            (\"pyth\\xf6n.org\", b\"xn--pythn-mua.org\"),\n            (\"pyth\\xf6n.org.\", b\"xn--pythn-mua.org.\"),\n        )\n        for decoded, encoded in incremental_tests:\n            self.assertEqual(b\"\".join(codecs.iterencode(decoded, CODEC_NAME)),\n                             encoded)\n\n        encoder = codecs.getincrementalencoder(CODEC_NAME)()\n        self.assertEqual(encoder.encode(\"\\xe4x\"), b\"\")\n        self.assertEqual(encoder.encode(\"ample.org\"), b\"xn--xample-9ta.\")\n        self.assertEqual(encoder.encode(\"\", True), b\"org\")\n\n        encoder.reset()\n        self.assertEqual(encoder.encode(\"\\xe4x\"), b\"\")\n        self.assertEqual(encoder.encode(\"ample.org.\"), b\"xn--xample-9ta.org.\")\n        self.assertEqual(encoder.encode(\"\", True), b\"\")\n\nif __name__ == '__main__':\n    unittest.main()\n", "tests/test_idna_other.py": "\"\"\"Tests for other functions\"\"\"\n\nimport unittest\n\nimport idna\n\n\nclass OtherUTS46Tests(unittest.TestCase):\n\n    def test_std3(self):\n\n        self.assertEqual(idna.uts46_remap('A_', std3_rules=False), 'a_')\n        self.assertRaises(idna.InvalidCodepoint, idna.uts46_remap, 'A_', std3_rules=True)\n\n", "tests/test_intranges.py": "#!/usr/bin/env python\n\nimport unittest\n\nfrom idna.intranges import intranges_from_list, intranges_contain, _encode_range\n\n\nclass IntrangeTests(unittest.TestCase):\n\n    def test_ranging(self):\n        self.assertEqual(\n            intranges_from_list(list(range(293, 499)) + list(range(4888, 9876))),\n            (_encode_range(293, 499), _encode_range(4888, 9876),)\n        )\n\n    def test_ranging_2(self):\n        self.assertEqual(\n            intranges_from_list([111]),\n            (_encode_range(111, 112),)\n        )\n\n    def test_skips(self):\n        self.assertEqual(\n            intranges_from_list([0, 2, 4, 6, 9, 10, 11, 13, 15,]),\n            (\n                _encode_range(0, 1),\n                _encode_range(2, 3),\n                _encode_range(4, 5),\n                _encode_range(6, 7),\n                _encode_range(9, 12),\n                _encode_range(13, 14),\n                _encode_range(15, 16),\n            )\n        )\n\n    def test_empty_range(self):\n        self.assertEqual(\n            intranges_from_list([]),\n            ()\n        )\n\n\nclass IntrangeContainsTests(unittest.TestCase):\n\n    def _test_containment(self, ints, disjoint_ints):\n        ranges = intranges_from_list(ints)\n        for int_ in ints:\n            assert intranges_contain(int_, ranges)\n        for int_ in disjoint_ints:\n            assert not intranges_contain(int_, ranges)\n\n    def test_simple(self):\n        self._test_containment(range(10, 20), [2, 3, 68, 3893])\n\n    def test_skips(self):\n        self._test_containment(\n            [0, 2, 4, 6, 9, 10, 11, 13, 15,],\n            [-1, 1, 3, 5, 7, 4898]\n        )\n\n    def test_singleton(self):\n        self._test_containment([111], [110, 112])\n\n    def test_empty(self):\n        self._test_containment([], range(100))\n", "tests/__init__.py": ""}