{"doc/conf.py": "# Configuration file for the Sphinx documentation builder.\n#\n# For the full list of built-in configuration values, see the documentation:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\nimport os.path\nimport sys\n\nfrom docutils.nodes import Element\nfrom sphinx.writers.html5 import HTML5Translator\n\nsys.path.insert(0, os.path.abspath('.'))\n\n# -- Project information -----------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information\n\nproject = 'typing_extensions'\ncopyright = '2023, Guido van Rossum and others'\nauthor = 'Guido van Rossum and others'\nrelease = '4.6.0'\n\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\n\nextensions = ['sphinx.ext.intersphinx', '_extensions.gh_link']\n\ntemplates_path = ['_templates']\nexclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n\nintersphinx_mapping = {'py': ('https://docs.python.org/3.12', None)}\n\nadd_module_names = False\n\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\n\nhtml_theme = 'alabaster'\n\n\nclass MyTranslator(HTML5Translator):\n    \"\"\"Adds a link target to name without `typing_extensions.` prefix.\"\"\"\n    def visit_desc_signature(self, node: Element) -> None:\n        desc_name = node.get(\"fullname\")\n        if desc_name:\n            self.body.append(f'<span id=\"{desc_name}\"></span>')\n        super().visit_desc_signature(node)\n\n\ndef setup(app):\n    app.set_translator('html', MyTranslator)\n", "doc/_extensions/gh_link.py": "from docutils import nodes\n\n\ndef setup(app):\n    app.add_role(\n        \"pr\", autolink(\"https://github.com/python/typing_extensions/pull/{}\", \"PR #\")\n    )\n    app.add_role(\n        \"pr-cpy\", autolink(\"https://github.com/python/cpython/pull/{}\", \"CPython PR #\")\n    )\n    app.add_role(\n        \"issue\",\n        autolink(\"https://github.com/python/typing_extensions/issues/{}\", \"issue #\"),\n    )\n    app.add_role(\n        \"issue-cpy\",\n        autolink(\"https://github.com/python/cpython/issues/{}\", \"CPython issue #\"),\n    )\n\n\ndef autolink(pattern: str, prefix: str):\n    def role(name, rawtext, text: str, lineno, inliner, options=None, content=None):\n        if options is None:\n            options = {}\n        url = pattern.format(text)\n        node = nodes.reference(rawtext, f\"{prefix}{text}\", refuri=url, **options)\n        return [node], []\n\n    return role\n", "doc/_extensions/__init__.py": "", "scripts/check_package.py": "import argparse\nimport re\nimport sys\nimport tomllib\nfrom pathlib import Path\n\n\nclass ValidationError(Exception):\n    pass\n\n\ndef check(github_ref: str | None) -> None:\n    pyproject = Path(__file__).parent.parent / \"pyproject.toml\"\n    if not pyproject.exists():\n        raise ValidationError(\"pyproject.toml not found\")\n    with pyproject.open(\"rb\") as f:\n        data = tomllib.load(f)\n    pyproject_version = data[\"project\"][\"version\"]\n\n    if github_ref is not None and github_ref.startswith(\"refs/tags/\"):\n        version = github_ref.removeprefix(\"refs/tags/\")\n        if version != pyproject_version:\n            raise ValidationError(\n                f\"Version mismatch: GitHub ref is {version}, \"\n                f\"but pyproject.toml is {pyproject_version}\"\n            )\n\n    requires_python = data[\"project\"][\"requires-python\"]\n    assert sys.version_info[0] == 3, \"Rewrite this script when Python 4 comes out\"\n    match = re.fullmatch(r\">=3\\.(\\d+)\", requires_python)\n    if not match:\n        raise ValidationError(f\"Invalid requires-python: {requires_python!r}\")\n    lowest_minor = int(match.group(1))\n\n    description = data[\"project\"][\"description\"]\n    if not description.endswith(f\"3.{lowest_minor}+\"):\n        raise ValidationError(f\"Description should mention Python 3.{lowest_minor}+\")\n\n    classifiers = set(data[\"project\"][\"classifiers\"])\n    for should_be_supported in range(lowest_minor, sys.version_info[1] + 1):\n        if (\n            f\"Programming Language :: Python :: 3.{should_be_supported}\"\n            not in classifiers\n        ):\n            raise ValidationError(\n                f\"Missing classifier for Python 3.{should_be_supported}\"\n            )\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(\"Script to check the package metadata\")\n    parser.add_argument(\n        \"github_ref\", type=str, help=\"The current GitHub ref\", nargs=\"?\"\n    )\n    args = parser.parse_args()\n    try:\n        check(args.github_ref)\n    except ValidationError as e:\n        print(e)\n        sys.exit(1)\n", "src/typing_extensions.py": "import abc\nimport collections\nimport collections.abc\nimport contextlib\nimport enum\nimport functools\nimport inspect\nimport operator\nimport sys\nimport types as _types\nimport typing\nimport warnings\n\n__all__ = [\n    # Super-special typing primitives.\n    'Any',\n    'ClassVar',\n    'Concatenate',\n    'Final',\n    'LiteralString',\n    'ParamSpec',\n    'ParamSpecArgs',\n    'ParamSpecKwargs',\n    'Self',\n    'Type',\n    'TypeVar',\n    'TypeVarTuple',\n    'Unpack',\n\n    # ABCs (from collections.abc).\n    'Awaitable',\n    'AsyncIterator',\n    'AsyncIterable',\n    'Coroutine',\n    'AsyncGenerator',\n    'AsyncContextManager',\n    'Buffer',\n    'ChainMap',\n\n    # Concrete collection types.\n    'ContextManager',\n    'Counter',\n    'Deque',\n    'DefaultDict',\n    'NamedTuple',\n    'OrderedDict',\n    'TypedDict',\n\n    # Structural checks, a.k.a. protocols.\n    'SupportsAbs',\n    'SupportsBytes',\n    'SupportsComplex',\n    'SupportsFloat',\n    'SupportsIndex',\n    'SupportsInt',\n    'SupportsRound',\n\n    # One-off things.\n    'Annotated',\n    'assert_never',\n    'assert_type',\n    'clear_overloads',\n    'dataclass_transform',\n    'deprecated',\n    'Doc',\n    'get_overloads',\n    'final',\n    'Format',\n    'get_annotations',\n    'get_args',\n    'get_origin',\n    'get_original_bases',\n    'get_protocol_members',\n    'get_type_hints',\n    'IntVar',\n    'is_protocol',\n    'is_typeddict',\n    'Literal',\n    'NewType',\n    'overload',\n    'override',\n    'Protocol',\n    'reveal_type',\n    'runtime',\n    'runtime_checkable',\n    'Text',\n    'TypeAlias',\n    'TypeAliasType',\n    'TypeExpr',\n    'TypeGuard',\n    'TypeIs',\n    'TYPE_CHECKING',\n    'Never',\n    'NoReturn',\n    'ReadOnly',\n    'Required',\n    'NotRequired',\n\n    # Pure aliases, have always been in typing\n    'AbstractSet',\n    'AnyStr',\n    'BinaryIO',\n    'Callable',\n    'Collection',\n    'Container',\n    'Dict',\n    'ForwardRef',\n    'FrozenSet',\n    'Generator',\n    'Generic',\n    'Hashable',\n    'IO',\n    'ItemsView',\n    'Iterable',\n    'Iterator',\n    'KeysView',\n    'List',\n    'Mapping',\n    'MappingView',\n    'Match',\n    'MutableMapping',\n    'MutableSequence',\n    'MutableSet',\n    'NoDefault',\n    'Optional',\n    'Pattern',\n    'Reversible',\n    'Sequence',\n    'Set',\n    'Sized',\n    'TextIO',\n    'Tuple',\n    'Union',\n    'ValuesView',\n    'cast',\n    'no_type_check',\n    'no_type_check_decorator',\n]\n\n# for backward compatibility\nPEP_560 = True\nGenericMeta = type\n_PEP_696_IMPLEMENTED = sys.version_info >= (3, 13, 0, \"beta\")\n\n# The functions below are modified copies of typing internal helpers.\n# They are needed by _ProtocolMeta and they provide support for PEP 646.\n\n\nclass _Sentinel:\n    def __repr__(self):\n        return \"<sentinel>\"\n\n\n_marker = _Sentinel()\n\n\nif sys.version_info >= (3, 10):\n    def _should_collect_from_parameters(t):\n        return isinstance(\n            t, (typing._GenericAlias, _types.GenericAlias, _types.UnionType)\n        )\nelif sys.version_info >= (3, 9):\n    def _should_collect_from_parameters(t):\n        return isinstance(t, (typing._GenericAlias, _types.GenericAlias))\nelse:\n    def _should_collect_from_parameters(t):\n        return isinstance(t, typing._GenericAlias) and not t._special\n\n\nNoReturn = typing.NoReturn\n\n# Some unconstrained type variables.  These are used by the container types.\n# (These are not for export.)\nT = typing.TypeVar('T')  # Any type.\nKT = typing.TypeVar('KT')  # Key type.\nVT = typing.TypeVar('VT')  # Value type.\nT_co = typing.TypeVar('T_co', covariant=True)  # Any type covariant containers.\nT_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\n\n\nif sys.version_info >= (3, 11):\n    from typing import Any\nelse:\n\n    class _AnyMeta(type):\n        def __instancecheck__(self, obj):\n            if self is Any:\n                raise TypeError(\"typing_extensions.Any cannot be used with isinstance()\")\n            return super().__instancecheck__(obj)\n\n        def __repr__(self):\n            if self is Any:\n                return \"typing_extensions.Any\"\n            return super().__repr__()\n\n    class Any(metaclass=_AnyMeta):\n        \"\"\"Special type indicating an unconstrained type.\n        - Any is compatible with every type.\n        - Any assumed to have all methods.\n        - All values assumed to be instances of Any.\n        Note that all the above statements are true from the point of view of\n        static type checkers. At runtime, Any should not be used with instance\n        checks.\n        \"\"\"\n        def __new__(cls, *args, **kwargs):\n            if cls is Any:\n                raise TypeError(\"Any cannot be instantiated\")\n            return super().__new__(cls, *args, **kwargs)\n\n\nClassVar = typing.ClassVar\n\n\nclass _ExtensionsSpecialForm(typing._SpecialForm, _root=True):\n    def __repr__(self):\n        return 'typing_extensions.' + self._name\n\n\nFinal = typing.Final\n\nif sys.version_info >= (3, 11):\n    final = typing.final\nelse:\n    # @final exists in 3.8+, but we backport it for all versions\n    # before 3.11 to keep support for the __final__ attribute.\n    # See https://bugs.python.org/issue46342\n    def final(f):\n        \"\"\"This decorator can be used to indicate to type checkers that\n        the decorated method cannot be overridden, and decorated class\n        cannot be subclassed. For example:\n\n            class Base:\n                @final\n                def done(self) -> None:\n                    ...\n            class Sub(Base):\n                def done(self) -> None:  # Error reported by type checker\n                    ...\n            @final\n            class Leaf:\n                ...\n            class Other(Leaf):  # Error reported by type checker\n                ...\n\n        There is no runtime checking of these properties. The decorator\n        sets the ``__final__`` attribute to ``True`` on the decorated object\n        to allow runtime introspection.\n        \"\"\"\n        try:\n            f.__final__ = True\n        except (AttributeError, TypeError):\n            # Skip the attribute silently if it is not writable.\n            # AttributeError happens if the object has __slots__ or a\n            # read-only property, TypeError if it's a builtin class.\n            pass\n        return f\n\n\ndef IntVar(name):\n    return typing.TypeVar(name)\n\n\n# A Literal bug was fixed in 3.11.0, 3.10.1 and 3.9.8\nif sys.version_info >= (3, 10, 1):\n    Literal = typing.Literal\nelse:\n    def _flatten_literal_params(parameters):\n        \"\"\"An internal helper for Literal creation: flatten Literals among parameters\"\"\"\n        params = []\n        for p in parameters:\n            if isinstance(p, _LiteralGenericAlias):\n                params.extend(p.__args__)\n            else:\n                params.append(p)\n        return tuple(params)\n\n    def _value_and_type_iter(params):\n        for p in params:\n            yield p, type(p)\n\n    class _LiteralGenericAlias(typing._GenericAlias, _root=True):\n        def __eq__(self, other):\n            if not isinstance(other, _LiteralGenericAlias):\n                return NotImplemented\n            these_args_deduped = set(_value_and_type_iter(self.__args__))\n            other_args_deduped = set(_value_and_type_iter(other.__args__))\n            return these_args_deduped == other_args_deduped\n\n        def __hash__(self):\n            return hash(frozenset(_value_and_type_iter(self.__args__)))\n\n    class _LiteralForm(_ExtensionsSpecialForm, _root=True):\n        def __init__(self, doc: str):\n            self._name = 'Literal'\n            self._doc = self.__doc__ = doc\n\n        def __getitem__(self, parameters):\n            if not isinstance(parameters, tuple):\n                parameters = (parameters,)\n\n            parameters = _flatten_literal_params(parameters)\n\n            val_type_pairs = list(_value_and_type_iter(parameters))\n            try:\n                deduped_pairs = set(val_type_pairs)\n            except TypeError:\n                # unhashable parameters\n                pass\n            else:\n                # similar logic to typing._deduplicate on Python 3.9+\n                if len(deduped_pairs) < len(val_type_pairs):\n                    new_parameters = []\n                    for pair in val_type_pairs:\n                        if pair in deduped_pairs:\n                            new_parameters.append(pair[0])\n                            deduped_pairs.remove(pair)\n                    assert not deduped_pairs, deduped_pairs\n                    parameters = tuple(new_parameters)\n\n            return _LiteralGenericAlias(self, parameters)\n\n    Literal = _LiteralForm(doc=\"\"\"\\\n                           A type that can be used to indicate to type checkers\n                           that the corresponding value has a value literally equivalent\n                           to the provided parameter. For example:\n\n                               var: Literal[4] = 4\n\n                           The type checker understands that 'var' is literally equal to\n                           the value 4 and no other value.\n\n                           Literal[...] cannot be subclassed. There is no runtime\n                           checking verifying that the parameter is actually a value\n                           instead of a type.\"\"\")\n\n\n_overload_dummy = typing._overload_dummy\n\n\nif hasattr(typing, \"get_overloads\"):  # 3.11+\n    overload = typing.overload\n    get_overloads = typing.get_overloads\n    clear_overloads = typing.clear_overloads\nelse:\n    # {module: {qualname: {firstlineno: func}}}\n    _overload_registry = collections.defaultdict(\n        functools.partial(collections.defaultdict, dict)\n    )\n\n    def overload(func):\n        \"\"\"Decorator for overloaded functions/methods.\n\n        In a stub file, place two or more stub definitions for the same\n        function in a row, each decorated with @overload.  For example:\n\n        @overload\n        def utf8(value: None) -> None: ...\n        @overload\n        def utf8(value: bytes) -> bytes: ...\n        @overload\n        def utf8(value: str) -> bytes: ...\n\n        In a non-stub file (i.e. a regular .py file), do the same but\n        follow it with an implementation.  The implementation should *not*\n        be decorated with @overload.  For example:\n\n        @overload\n        def utf8(value: None) -> None: ...\n        @overload\n        def utf8(value: bytes) -> bytes: ...\n        @overload\n        def utf8(value: str) -> bytes: ...\n        def utf8(value):\n            # implementation goes here\n\n        The overloads for a function can be retrieved at runtime using the\n        get_overloads() function.\n        \"\"\"\n        # classmethod and staticmethod\n        f = getattr(func, \"__func__\", func)\n        try:\n            _overload_registry[f.__module__][f.__qualname__][\n                f.__code__.co_firstlineno\n            ] = func\n        except AttributeError:\n            # Not a normal function; ignore.\n            pass\n        return _overload_dummy\n\n    def get_overloads(func):\n        \"\"\"Return all defined overloads for *func* as a sequence.\"\"\"\n        # classmethod and staticmethod\n        f = getattr(func, \"__func__\", func)\n        if f.__module__ not in _overload_registry:\n            return []\n        mod_dict = _overload_registry[f.__module__]\n        if f.__qualname__ not in mod_dict:\n            return []\n        return list(mod_dict[f.__qualname__].values())\n\n    def clear_overloads():\n        \"\"\"Clear all overloads in the registry.\"\"\"\n        _overload_registry.clear()\n\n\n# This is not a real generic class.  Don't use outside annotations.\nType = typing.Type\n\n# Various ABCs mimicking those in collections.abc.\n# A few are simply re-exported for completeness.\nAwaitable = typing.Awaitable\nCoroutine = typing.Coroutine\nAsyncIterable = typing.AsyncIterable\nAsyncIterator = typing.AsyncIterator\nDeque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\n\n\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):\n        return attr.startswith('__') and attr.endswith('__')\n\n    # Python <3.9 doesn't have typing._SpecialGenericAlias\n    _special_generic_alias_base = getattr(\n        typing, \"_SpecialGenericAlias\", typing._GenericAlias\n    )\n\n    class _SpecialGenericAlias(_special_generic_alias_base, _root=True):\n        def __init__(self, origin, nparams, *, inst=True, name=None, defaults=()):\n            if _special_generic_alias_base is typing._GenericAlias:\n                # Python <3.9\n                self.__origin__ = origin\n                self._nparams = nparams\n                super().__init__(origin, nparams, special=True, inst=inst, name=name)\n            else:\n                # Python >= 3.9\n                super().__init__(origin, nparams, inst=inst, name=name)\n            self._defaults = defaults\n\n        def __setattr__(self, attr, val):\n            allowed_attrs = {'_name', '_inst', '_nparams', '_defaults'}\n            if _special_generic_alias_base is typing._GenericAlias:\n                # Python <3.9\n                allowed_attrs.add(\"__origin__\")\n            if _is_dunder(attr) or attr in allowed_attrs:\n                object.__setattr__(self, attr, val)\n            else:\n                setattr(self.__origin__, attr, val)\n\n        @typing._tp_cache\n        def __getitem__(self, params):\n            if not isinstance(params, tuple):\n                params = (params,)\n            msg = \"Parameters to generic types must be types.\"\n            params = tuple(typing._type_check(p, msg) for p in params)\n            if (\n                self._defaults\n                and len(params) < self._nparams\n                and len(params) + len(self._defaults) >= self._nparams\n            ):\n                params = (*params, *self._defaults[len(params) - self._nparams:])\n            actual_len = len(params)\n\n            if actual_len != self._nparams:\n                if self._defaults:\n                    expected = f\"at least {self._nparams - len(self._defaults)}\"\n                else:\n                    expected = str(self._nparams)\n                if not self._nparams:\n                    raise TypeError(f\"{self} is not a generic class\")\n                raise TypeError(\n                    f\"Too {'many' if actual_len > self._nparams else 'few'}\"\n                    f\" arguments for {self};\"\n                    f\" actual {actual_len}, expected {expected}\"\n                )\n            return self.copy_with(params)\n\n    _NoneType = type(None)\n    Generator = _SpecialGenericAlias(\n        collections.abc.Generator, 3, defaults=(_NoneType, _NoneType)\n    )\n    AsyncGenerator = _SpecialGenericAlias(\n        collections.abc.AsyncGenerator, 2, defaults=(_NoneType,)\n    )\n    ContextManager = _SpecialGenericAlias(\n        contextlib.AbstractContextManager,\n        2,\n        name=\"ContextManager\",\n        defaults=(typing.Optional[bool],)\n    )\n    AsyncContextManager = _SpecialGenericAlias(\n        contextlib.AbstractAsyncContextManager,\n        2,\n        name=\"AsyncContextManager\",\n        defaults=(typing.Optional[bool],)\n    )\n\n\n_PROTO_ALLOWLIST = {\n    'collections.abc': [\n        'Callable', 'Awaitable', 'Iterable', 'Iterator', 'AsyncIterable',\n        'Hashable', 'Sized', 'Container', 'Collection', 'Reversible', 'Buffer',\n    ],\n    'contextlib': ['AbstractContextManager', 'AbstractAsyncContextManager'],\n    'typing_extensions': ['Buffer'],\n}\n\n\n_EXCLUDED_ATTRS = frozenset(typing.EXCLUDED_ATTRIBUTES) | {\n    \"__match_args__\", \"__protocol_attrs__\", \"__non_callable_proto_members__\",\n    \"__final__\",\n}\n\n\ndef _get_protocol_attrs(cls):\n    attrs = set()\n    for base in cls.__mro__[:-1]:  # without object\n        if base.__name__ in {'Protocol', 'Generic'}:\n            continue\n        annotations = getattr(base, '__annotations__', {})\n        for attr in (*base.__dict__, *annotations):\n            if (not attr.startswith('_abc_') and attr not in _EXCLUDED_ATTRS):\n                attrs.add(attr)\n    return attrs\n\n\ndef _caller(depth=2):\n    try:\n        return sys._getframe(depth).f_globals.get('__name__', '__main__')\n    except (AttributeError, ValueError):  # For platforms without _getframe()\n        return None\n\n\n# `__match_args__` attribute was removed from protocol members in 3.13,\n# we want to backport this change to older Python versions.\nif sys.version_info >= (3, 13):\n    Protocol = typing.Protocol\nelse:\n    def _allow_reckless_class_checks(depth=3):\n        \"\"\"Allow instance and class checks for special stdlib modules.\n        The abc and functools modules indiscriminately call isinstance() and\n        issubclass() on the whole MRO of a user class, which may contain protocols.\n        \"\"\"\n        return _caller(depth) in {'abc', 'functools', None}\n\n    def _no_init(self, *args, **kwargs):\n        if type(self)._is_protocol:\n            raise TypeError('Protocols cannot be instantiated')\n\n    def _type_check_issubclass_arg_1(arg):\n        \"\"\"Raise TypeError if `arg` is not an instance of `type`\n        in `issubclass(arg, <protocol>)`.\n\n        In most cases, this is verified by type.__subclasscheck__.\n        Checking it again unnecessarily would slow down issubclass() checks,\n        so, we don't perform this check unless we absolutely have to.\n\n        For various error paths, however,\n        we want to ensure that *this* error message is shown to the user\n        where relevant, rather than a typing.py-specific error message.\n        \"\"\"\n        if not isinstance(arg, type):\n            # Same error message as for issubclass(1, int).\n            raise TypeError('issubclass() arg 1 must be a class')\n\n    # Inheriting from typing._ProtocolMeta isn't actually desirable,\n    # but is necessary to allow typing.Protocol and typing_extensions.Protocol\n    # to mix without getting TypeErrors about \"metaclass conflict\"\n    class _ProtocolMeta(type(typing.Protocol)):\n        # This metaclass is somewhat unfortunate,\n        # but is necessary for several reasons...\n        #\n        # NOTE: DO NOT call super() in any methods in this class\n        # That would call the methods on typing._ProtocolMeta on Python 3.8-3.11\n        # and those are slow\n        def __new__(mcls, name, bases, namespace, **kwargs):\n            if name == \"Protocol\" and len(bases) < 2:\n                pass\n            elif {Protocol, typing.Protocol} & set(bases):\n                for base in bases:\n                    if not (\n                        base in {object, typing.Generic, Protocol, typing.Protocol}\n                        or base.__name__ in _PROTO_ALLOWLIST.get(base.__module__, [])\n                        or is_protocol(base)\n                    ):\n                        raise TypeError(\n                            f\"Protocols can only inherit from other protocols, \"\n                            f\"got {base!r}\"\n                        )\n            return abc.ABCMeta.__new__(mcls, name, bases, namespace, **kwargs)\n\n        def __init__(cls, *args, **kwargs):\n            abc.ABCMeta.__init__(cls, *args, **kwargs)\n            if getattr(cls, \"_is_protocol\", False):\n                cls.__protocol_attrs__ = _get_protocol_attrs(cls)\n\n        def __subclasscheck__(cls, other):\n            if cls is Protocol:\n                return type.__subclasscheck__(cls, other)\n            if (\n                getattr(cls, '_is_protocol', False)\n                and not _allow_reckless_class_checks()\n            ):\n                if not getattr(cls, '_is_runtime_protocol', False):\n                    _type_check_issubclass_arg_1(other)\n                    raise TypeError(\n                        \"Instance and class checks can only be used with \"\n                        \"@runtime_checkable protocols\"\n                    )\n                if (\n                    # this attribute is set by @runtime_checkable:\n                    cls.__non_callable_proto_members__\n                    and cls.__dict__.get(\"__subclasshook__\") is _proto_hook\n                ):\n                    _type_check_issubclass_arg_1(other)\n                    non_method_attrs = sorted(cls.__non_callable_proto_members__)\n                    raise TypeError(\n                        \"Protocols with non-method members don't support issubclass().\"\n                        f\" Non-method members: {str(non_method_attrs)[1:-1]}.\"\n                    )\n            return abc.ABCMeta.__subclasscheck__(cls, other)\n\n        def __instancecheck__(cls, instance):\n            # We need this method for situations where attributes are\n            # assigned in __init__.\n            if cls is Protocol:\n                return type.__instancecheck__(cls, instance)\n            if not getattr(cls, \"_is_protocol\", False):\n                # i.e., it's a concrete subclass of a protocol\n                return abc.ABCMeta.__instancecheck__(cls, instance)\n\n            if (\n                not getattr(cls, '_is_runtime_protocol', False) and\n                not _allow_reckless_class_checks()\n            ):\n                raise TypeError(\"Instance and class checks can only be used with\"\n                                \" @runtime_checkable protocols\")\n\n            if abc.ABCMeta.__instancecheck__(cls, instance):\n                return True\n\n            for attr in cls.__protocol_attrs__:\n                try:\n                    val = inspect.getattr_static(instance, attr)\n                except AttributeError:\n                    break\n                # this attribute is set by @runtime_checkable:\n                if val is None and attr not in cls.__non_callable_proto_members__:\n                    break\n            else:\n                return True\n\n            return False\n\n        def __eq__(cls, other):\n            # Hack so that typing.Generic.__class_getitem__\n            # treats typing_extensions.Protocol\n            # as equivalent to typing.Protocol\n            if abc.ABCMeta.__eq__(cls, other) is True:\n                return True\n            return cls is Protocol and other is typing.Protocol\n\n        # This has to be defined, or the abc-module cache\n        # complains about classes with this metaclass being unhashable,\n        # if we define only __eq__!\n        def __hash__(cls) -> int:\n            return type.__hash__(cls)\n\n    @classmethod\n    def _proto_hook(cls, other):\n        if not cls.__dict__.get('_is_protocol', False):\n            return NotImplemented\n\n        for attr in cls.__protocol_attrs__:\n            for base in other.__mro__:\n                # Check if the members appears in the class dictionary...\n                if attr in base.__dict__:\n                    if base.__dict__[attr] is None:\n                        return NotImplemented\n                    break\n\n                # ...or in annotations, if it is a sub-protocol.\n                annotations = getattr(base, '__annotations__', {})\n                if (\n                    isinstance(annotations, collections.abc.Mapping)\n                    and attr in annotations\n                    and is_protocol(other)\n                ):\n                    break\n            else:\n                return NotImplemented\n        return True\n\n    class Protocol(typing.Generic, metaclass=_ProtocolMeta):\n        __doc__ = typing.Protocol.__doc__\n        __slots__ = ()\n        _is_protocol = True\n        _is_runtime_protocol = False\n\n        def __init_subclass__(cls, *args, **kwargs):\n            super().__init_subclass__(*args, **kwargs)\n\n            # Determine if this is a protocol or a concrete subclass.\n            if not cls.__dict__.get('_is_protocol', False):\n                cls._is_protocol = any(b is Protocol for b in cls.__bases__)\n\n            # Set (or override) the protocol subclass hook.\n            if '__subclasshook__' not in cls.__dict__:\n                cls.__subclasshook__ = _proto_hook\n\n            # Prohibit instantiation for protocol classes\n            if cls._is_protocol and cls.__init__ is Protocol.__init__:\n                cls.__init__ = _no_init\n\n\nif sys.version_info >= (3, 13):\n    runtime_checkable = typing.runtime_checkable\nelse:\n    def runtime_checkable(cls):\n        \"\"\"Mark a protocol class as a runtime protocol.\n\n        Such protocol can be used with isinstance() and issubclass().\n        Raise TypeError if applied to a non-protocol class.\n        This allows a simple-minded structural check very similar to\n        one trick ponies in collections.abc such as Iterable.\n\n        For example::\n\n            @runtime_checkable\n            class Closable(Protocol):\n                def close(self): ...\n\n            assert isinstance(open('/some/file'), Closable)\n\n        Warning: this will check only the presence of the required methods,\n        not their type signatures!\n        \"\"\"\n        if not issubclass(cls, typing.Generic) or not getattr(cls, '_is_protocol', False):\n            raise TypeError(f'@runtime_checkable can be only applied to protocol classes,'\n                            f' got {cls!r}')\n        cls._is_runtime_protocol = True\n\n        # typing.Protocol classes on <=3.11 break if we execute this block,\n        # because typing.Protocol classes on <=3.11 don't have a\n        # `__protocol_attrs__` attribute, and this block relies on the\n        # `__protocol_attrs__` attribute. Meanwhile, typing.Protocol classes on 3.12.2+\n        # break if we *don't* execute this block, because *they* assume that all\n        # protocol classes have a `__non_callable_proto_members__` attribute\n        # (which this block sets)\n        if isinstance(cls, _ProtocolMeta) or sys.version_info >= (3, 12, 2):\n            # PEP 544 prohibits using issubclass()\n            # with protocols that have non-method members.\n            # See gh-113320 for why we compute this attribute here,\n            # rather than in `_ProtocolMeta.__init__`\n            cls.__non_callable_proto_members__ = set()\n            for attr in cls.__protocol_attrs__:\n                try:\n                    is_callable = callable(getattr(cls, attr, None))\n                except Exception as e:\n                    raise TypeError(\n                        f\"Failed to determine whether protocol member {attr!r} \"\n                        \"is a method member\"\n                    ) from e\n                else:\n                    if not is_callable:\n                        cls.__non_callable_proto_members__.add(attr)\n\n        return cls\n\n\n# The \"runtime\" alias exists for backwards compatibility.\nruntime = runtime_checkable\n\n\n# Our version of runtime-checkable protocols is faster on Python 3.8-3.11\nif sys.version_info >= (3, 12):\n    SupportsInt = typing.SupportsInt\n    SupportsFloat = typing.SupportsFloat\n    SupportsComplex = typing.SupportsComplex\n    SupportsBytes = typing.SupportsBytes\n    SupportsIndex = typing.SupportsIndex\n    SupportsAbs = typing.SupportsAbs\n    SupportsRound = typing.SupportsRound\nelse:\n    @runtime_checkable\n    class SupportsInt(Protocol):\n        \"\"\"An ABC with one abstract method __int__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __int__(self) -> int:\n            pass\n\n    @runtime_checkable\n    class SupportsFloat(Protocol):\n        \"\"\"An ABC with one abstract method __float__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __float__(self) -> float:\n            pass\n\n    @runtime_checkable\n    class SupportsComplex(Protocol):\n        \"\"\"An ABC with one abstract method __complex__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __complex__(self) -> complex:\n            pass\n\n    @runtime_checkable\n    class SupportsBytes(Protocol):\n        \"\"\"An ABC with one abstract method __bytes__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __bytes__(self) -> bytes:\n            pass\n\n    @runtime_checkable\n    class SupportsIndex(Protocol):\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __index__(self) -> int:\n            pass\n\n    @runtime_checkable\n    class SupportsAbs(Protocol[T_co]):\n        \"\"\"\n        An ABC with one abstract method __abs__ that is covariant in its return type.\n        \"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __abs__(self) -> T_co:\n            pass\n\n    @runtime_checkable\n    class SupportsRound(Protocol[T_co]):\n        \"\"\"\n        An ABC with one abstract method __round__ that is covariant in its return type.\n        \"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __round__(self, ndigits: int = 0) -> T_co:\n            pass\n\n\ndef _ensure_subclassable(mro_entries):\n    def inner(func):\n        if sys.implementation.name == \"pypy\" and sys.version_info < (3, 9):\n            cls_dict = {\n                \"__call__\": staticmethod(func),\n                \"__mro_entries__\": staticmethod(mro_entries)\n            }\n            t = type(func.__name__, (), cls_dict)\n            return functools.update_wrapper(t(), func)\n        else:\n            func.__mro_entries__ = mro_entries\n            return func\n    return inner\n\n\n# Update this to something like >=3.13.0b1 if and when\n# PEP 728 is implemented in CPython\n_PEP_728_IMPLEMENTED = False\n\nif _PEP_728_IMPLEMENTED:\n    # The standard library TypedDict in Python 3.8 does not store runtime information\n    # about which (if any) keys are optional.  See https://bugs.python.org/issue38834\n    # The standard library TypedDict in Python 3.9.0/1 does not honour the \"total\"\n    # keyword with old-style TypedDict().  See https://bugs.python.org/issue42059\n    # The standard library TypedDict below Python 3.11 does not store runtime\n    # information about optional and required keys when using Required or NotRequired.\n    # Generic TypedDicts are also impossible using typing.TypedDict on Python <3.11.\n    # Aaaand on 3.12 we add __orig_bases__ to TypedDict\n    # to enable better runtime introspection.\n    # On 3.13 we deprecate some odd ways of creating TypedDicts.\n    # Also on 3.13, PEP 705 adds the ReadOnly[] qualifier.\n    # PEP 728 (still pending) makes more changes.\n    TypedDict = typing.TypedDict\n    _TypedDictMeta = typing._TypedDictMeta\n    is_typeddict = typing.is_typeddict\nelse:\n    # 3.10.0 and later\n    _TAKES_MODULE = \"module\" in inspect.signature(typing._type_check).parameters\n\n    def _get_typeddict_qualifiers(annotation_type):\n        while True:\n            annotation_origin = get_origin(annotation_type)\n            if annotation_origin is Annotated:\n                annotation_args = get_args(annotation_type)\n                if annotation_args:\n                    annotation_type = annotation_args[0]\n                else:\n                    break\n            elif annotation_origin is Required:\n                yield Required\n                annotation_type, = get_args(annotation_type)\n            elif annotation_origin is NotRequired:\n                yield NotRequired\n                annotation_type, = get_args(annotation_type)\n            elif annotation_origin is ReadOnly:\n                yield ReadOnly\n                annotation_type, = get_args(annotation_type)\n            else:\n                break\n\n    class _TypedDictMeta(type):\n        def __new__(cls, name, bases, ns, *, total=True, closed=False):\n            \"\"\"Create new typed dict class object.\n\n            This method is called when TypedDict is subclassed,\n            or when TypedDict is instantiated. This way\n            TypedDict supports all three syntax forms described in its docstring.\n            Subclasses and instances of TypedDict return actual dictionaries.\n            \"\"\"\n            for base in bases:\n                if type(base) is not _TypedDictMeta and base is not typing.Generic:\n                    raise TypeError('cannot inherit from both a TypedDict type '\n                                    'and a non-TypedDict base class')\n\n            if any(issubclass(b, typing.Generic) for b in bases):\n                generic_base = (typing.Generic,)\n            else:\n                generic_base = ()\n\n            # typing.py generally doesn't let you inherit from plain Generic, unless\n            # the name of the class happens to be \"Protocol\"\n            tp_dict = type.__new__(_TypedDictMeta, \"Protocol\", (*generic_base, dict), ns)\n            tp_dict.__name__ = name\n            if tp_dict.__qualname__ == \"Protocol\":\n                tp_dict.__qualname__ = name\n\n            if not hasattr(tp_dict, '__orig_bases__'):\n                tp_dict.__orig_bases__ = bases\n\n            annotations = {}\n            if \"__annotations__\" in ns:\n                own_annotations = ns[\"__annotations__\"]\n            elif \"__annotate__\" in ns:\n                # TODO: Use inspect.VALUE here, and make the annotations lazily evaluated\n                own_annotations = ns[\"__annotate__\"](1)\n            else:\n                own_annotations = {}\n            msg = \"TypedDict('Name', {f0: t0, f1: t1, ...}); each t must be a type\"\n            if _TAKES_MODULE:\n                own_annotations = {\n                    n: typing._type_check(tp, msg, module=tp_dict.__module__)\n                    for n, tp in own_annotations.items()\n                }\n            else:\n                own_annotations = {\n                    n: typing._type_check(tp, msg)\n                    for n, tp in own_annotations.items()\n                }\n            required_keys = set()\n            optional_keys = set()\n            readonly_keys = set()\n            mutable_keys = set()\n            extra_items_type = None\n\n            for base in bases:\n                base_dict = base.__dict__\n\n                annotations.update(base_dict.get('__annotations__', {}))\n                required_keys.update(base_dict.get('__required_keys__', ()))\n                optional_keys.update(base_dict.get('__optional_keys__', ()))\n                readonly_keys.update(base_dict.get('__readonly_keys__', ()))\n                mutable_keys.update(base_dict.get('__mutable_keys__', ()))\n                base_extra_items_type = base_dict.get('__extra_items__', None)\n                if base_extra_items_type is not None:\n                    extra_items_type = base_extra_items_type\n\n            if closed and extra_items_type is None:\n                extra_items_type = Never\n            if closed and \"__extra_items__\" in own_annotations:\n                annotation_type = own_annotations.pop(\"__extra_items__\")\n                qualifiers = set(_get_typeddict_qualifiers(annotation_type))\n                if Required in qualifiers:\n                    raise TypeError(\n                        \"Special key __extra_items__ does not support \"\n                        \"Required\"\n                    )\n                if NotRequired in qualifiers:\n                    raise TypeError(\n                        \"Special key __extra_items__ does not support \"\n                        \"NotRequired\"\n                    )\n                extra_items_type = annotation_type\n\n            annotations.update(own_annotations)\n            for annotation_key, annotation_type in own_annotations.items():\n                qualifiers = set(_get_typeddict_qualifiers(annotation_type))\n\n                if Required in qualifiers:\n                    required_keys.add(annotation_key)\n                elif NotRequired in qualifiers:\n                    optional_keys.add(annotation_key)\n                elif total:\n                    required_keys.add(annotation_key)\n                else:\n                    optional_keys.add(annotation_key)\n                if ReadOnly in qualifiers:\n                    mutable_keys.discard(annotation_key)\n                    readonly_keys.add(annotation_key)\n                else:\n                    mutable_keys.add(annotation_key)\n                    readonly_keys.discard(annotation_key)\n\n            tp_dict.__annotations__ = annotations\n            tp_dict.__required_keys__ = frozenset(required_keys)\n            tp_dict.__optional_keys__ = frozenset(optional_keys)\n            tp_dict.__readonly_keys__ = frozenset(readonly_keys)\n            tp_dict.__mutable_keys__ = frozenset(mutable_keys)\n            if not hasattr(tp_dict, '__total__'):\n                tp_dict.__total__ = total\n            tp_dict.__closed__ = closed\n            tp_dict.__extra_items__ = extra_items_type\n            return tp_dict\n\n        __call__ = dict  # static method\n\n        def __subclasscheck__(cls, other):\n            # Typed dicts are only for static structural subtyping.\n            raise TypeError('TypedDict does not support instance and class checks')\n\n        __instancecheck__ = __subclasscheck__\n\n    _TypedDict = type.__new__(_TypedDictMeta, 'TypedDict', (), {})\n\n    @_ensure_subclassable(lambda bases: (_TypedDict,))\n    def TypedDict(typename, fields=_marker, /, *, total=True, closed=False, **kwargs):\n        \"\"\"A simple typed namespace. At runtime it is equivalent to a plain dict.\n\n        TypedDict creates a dictionary type such that a type checker will expect all\n        instances to have a certain set of keys, where each key is\n        associated with a value of a consistent type. This expectation\n        is not checked at runtime.\n\n        Usage::\n\n            class Point2D(TypedDict):\n                x: int\n                y: int\n                label: str\n\n            a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n            b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\n            assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n\n        The type info can be accessed via the Point2D.__annotations__ dict, and\n        the Point2D.__required_keys__ and Point2D.__optional_keys__ frozensets.\n        TypedDict supports an additional equivalent form::\n\n            Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n\n        By default, all keys must be present in a TypedDict. It is possible\n        to override this by specifying totality::\n\n            class Point2D(TypedDict, total=False):\n                x: int\n                y: int\n\n        This means that a Point2D TypedDict can have any of the keys omitted. A type\n        checker is only expected to support a literal False or True as the value of\n        the total argument. True is the default, and makes all items defined in the\n        class body be required.\n\n        The Required and NotRequired special forms can also be used to mark\n        individual keys as being required or not required::\n\n            class Point2D(TypedDict):\n                x: int  # the \"x\" key must always be present (Required is the default)\n                y: NotRequired[int]  # the \"y\" key can be omitted\n\n        See PEP 655 for more details on Required and NotRequired.\n        \"\"\"\n        if fields is _marker or fields is None:\n            if fields is _marker:\n                deprecated_thing = \"Failing to pass a value for the 'fields' parameter\"\n            else:\n                deprecated_thing = \"Passing `None` as the 'fields' parameter\"\n\n            example = f\"`{typename} = TypedDict({typename!r}, {{}})`\"\n            deprecation_msg = (\n                f\"{deprecated_thing} is deprecated and will be disallowed in \"\n                \"Python 3.15. To create a TypedDict class with 0 fields \"\n                \"using the functional syntax, pass an empty dictionary, e.g. \"\n            ) + example + \".\"\n            warnings.warn(deprecation_msg, DeprecationWarning, stacklevel=2)\n            if closed is not False and closed is not True:\n                kwargs[\"closed\"] = closed\n                closed = False\n            fields = kwargs\n        elif kwargs:\n            raise TypeError(\"TypedDict takes either a dict or keyword arguments,\"\n                            \" but not both\")\n        if kwargs:\n            if sys.version_info >= (3, 13):\n                raise TypeError(\"TypedDict takes no keyword arguments\")\n            warnings.warn(\n                \"The kwargs-based syntax for TypedDict definitions is deprecated \"\n                \"in Python 3.11, will be removed in Python 3.13, and may not be \"\n                \"understood by third-party type checkers.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n\n        ns = {'__annotations__': dict(fields)}\n        module = _caller()\n        if module is not None:\n            # Setting correct module is necessary to make typed dict classes pickleable.\n            ns['__module__'] = module\n\n        td = _TypedDictMeta(typename, (), ns, total=total, closed=closed)\n        td.__orig_bases__ = (TypedDict,)\n        return td\n\n    if hasattr(typing, \"_TypedDictMeta\"):\n        _TYPEDDICT_TYPES = (typing._TypedDictMeta, _TypedDictMeta)\n    else:\n        _TYPEDDICT_TYPES = (_TypedDictMeta,)\n\n    def is_typeddict(tp):\n        \"\"\"Check if an annotation is a TypedDict class\n\n        For example::\n            class Film(TypedDict):\n                title: str\n                year: int\n\n            is_typeddict(Film)  # => True\n            is_typeddict(Union[list, str])  # => False\n        \"\"\"\n        # On 3.8, this would otherwise return True\n        if hasattr(typing, \"TypedDict\") and tp is typing.TypedDict:\n            return False\n        return isinstance(tp, _TYPEDDICT_TYPES)\n\n\nif hasattr(typing, \"assert_type\"):\n    assert_type = typing.assert_type\n\nelse:\n    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\nif hasattr(typing, \"ReadOnly\"):  # 3.13+\n    get_type_hints = typing.get_type_hints\nelse:  # <=3.13\n    # replaces _strip_annotations()\n    def _strip_extras(t):\n        \"\"\"Strips Annotated, Required and NotRequired from a given type.\"\"\"\n        if isinstance(t, _AnnotatedAlias):\n            return _strip_extras(t.__origin__)\n        if hasattr(t, \"__origin__\") and t.__origin__ in (Required, NotRequired, ReadOnly):\n            return _strip_extras(t.__args__[0])\n        if isinstance(t, typing._GenericAlias):\n            stripped_args = tuple(_strip_extras(a) for a in t.__args__)\n            if stripped_args == t.__args__:\n                return t\n            return t.copy_with(stripped_args)\n        if hasattr(_types, \"GenericAlias\") and isinstance(t, _types.GenericAlias):\n            stripped_args = tuple(_strip_extras(a) for a in t.__args__)\n            if stripped_args == t.__args__:\n                return t\n            return _types.GenericAlias(t.__origin__, stripped_args)\n        if hasattr(_types, \"UnionType\") and isinstance(t, _types.UnionType):\n            stripped_args = tuple(_strip_extras(a) for a in t.__args__)\n            if stripped_args == t.__args__:\n                return t\n            return functools.reduce(operator.or_, stripped_args)\n\n        return t\n\n    def get_type_hints(obj, globalns=None, localns=None, include_extras=False):\n        \"\"\"Return type hints for an object.\n\n        This is often the same as obj.__annotations__, but it handles\n        forward references encoded as string literals, adds Optional[t] if a\n        default value equal to None is set and recursively replaces all\n        'Annotated[T, ...]', 'Required[T]' or 'NotRequired[T]' with 'T'\n        (unless 'include_extras=True').\n\n        The argument may be a module, class, method, or function. The annotations\n        are returned as a dictionary. For classes, annotations include also\n        inherited members.\n\n        TypeError is raised if the argument is not of a type that can contain\n        annotations, and an empty dictionary is returned if no annotations are\n        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the\n          globals from obj (or the respective module's globals for classes),\n          and these are also used as the locals.  If the object does not appear\n          to have globals, an empty dictionary is used.\n\n        - If one dict argument is passed, it is used for both globals and\n          locals.\n\n        - If two dict arguments are passed, they specify globals and\n          locals, respectively.\n        \"\"\"\n        if hasattr(typing, \"Annotated\"):  # 3.9+\n            hint = typing.get_type_hints(\n                obj, globalns=globalns, localns=localns, include_extras=True\n            )\n        else:  # 3.8\n            hint = typing.get_type_hints(obj, globalns=globalns, localns=localns)\n        if include_extras:\n            return hint\n        return {k: _strip_extras(t) for k, t in hint.items()}\n\n\n# Python 3.9+ has PEP 593 (Annotated)\nif hasattr(typing, 'Annotated'):\n    Annotated = typing.Annotated\n    # Not exported and not a public API, but needed for get_origin() and get_args()\n    # to work.\n    _AnnotatedAlias = typing._AnnotatedAlias\n# 3.8\nelse:\n    class _AnnotatedAlias(typing._GenericAlias, _root=True):\n        \"\"\"Runtime representation of an annotated type.\n\n        At its core 'Annotated[t, dec1, dec2, ...]' is an alias for the type 't'\n        with extra annotations. The alias behaves like a normal typing alias,\n        instantiating is the same as instantiating the underlying type, binding\n        it to types is also the same.\n        \"\"\"\n        def __init__(self, origin, metadata):\n            if isinstance(origin, _AnnotatedAlias):\n                metadata = origin.__metadata__ + metadata\n                origin = origin.__origin__\n            super().__init__(origin, origin)\n            self.__metadata__ = metadata\n\n        def copy_with(self, params):\n            assert len(params) == 1\n            new_type = params[0]\n            return _AnnotatedAlias(new_type, self.__metadata__)\n\n        def __repr__(self):\n            return (f\"typing_extensions.Annotated[{typing._type_repr(self.__origin__)}, \"\n                    f\"{', '.join(repr(a) for a in self.__metadata__)}]\")\n\n        def __reduce__(self):\n            return operator.getitem, (\n                Annotated, (self.__origin__, *self.__metadata__)\n            )\n\n        def __eq__(self, other):\n            if not isinstance(other, _AnnotatedAlias):\n                return NotImplemented\n            if self.__origin__ != other.__origin__:\n                return False\n            return self.__metadata__ == other.__metadata__\n\n        def __hash__(self):\n            return hash((self.__origin__, self.__metadata__))\n\n    class Annotated:\n        \"\"\"Add context specific metadata to a type.\n\n        Example: Annotated[int, runtime_check.Unsigned] indicates to the\n        hypothetical runtime_check module that this type is an unsigned int.\n        Every other consumer of this type can ignore this metadata and treat\n        this type as int.\n\n        The first argument to Annotated must be a valid type (and will be in\n        the __origin__ field), the remaining arguments are kept as a tuple in\n        the __extra__ field.\n\n        Details:\n\n        - It's an error to call `Annotated` with less than two arguments.\n        - Nested Annotated are flattened::\n\n            Annotated[Annotated[T, Ann1, Ann2], Ann3] == Annotated[T, Ann1, Ann2, Ann3]\n\n        - Instantiating an annotated type is equivalent to instantiating the\n        underlying type::\n\n            Annotated[C, Ann1](5) == C(5)\n\n        - Annotated can be used as a generic type alias::\n\n            Optimized = Annotated[T, runtime.Optimize()]\n            Optimized[int] == Annotated[int, runtime.Optimize()]\n\n            OptimizedList = Annotated[List[T], runtime.Optimize()]\n            OptimizedList[int] == Annotated[List[int], runtime.Optimize()]\n        \"\"\"\n\n        __slots__ = ()\n\n        def __new__(cls, *args, **kwargs):\n            raise TypeError(\"Type Annotated cannot be instantiated.\")\n\n        @typing._tp_cache\n        def __class_getitem__(cls, params):\n            if not isinstance(params, tuple) or len(params) < 2:\n                raise TypeError(\"Annotated[...] should be used \"\n                                \"with at least two arguments (a type and an \"\n                                \"annotation).\")\n            allowed_special_forms = (ClassVar, Final)\n            if get_origin(params[0]) in allowed_special_forms:\n                origin = params[0]\n            else:\n                msg = \"Annotated[t, ...]: t must be a type.\"\n                origin = typing._type_check(params[0], msg)\n            metadata = tuple(params[1:])\n            return _AnnotatedAlias(origin, metadata)\n\n        def __init_subclass__(cls, *args, **kwargs):\n            raise TypeError(\n                f\"Cannot subclass {cls.__module__}.Annotated\"\n            )\n\n# Python 3.8 has get_origin() and get_args() but those implementations aren't\n# Annotated-aware, so we can't use those. Python 3.9's versions don't support\n# ParamSpecArgs and ParamSpecKwargs, so only Python 3.10's versions will do.\nif sys.version_info[:2] >= (3, 10):\n    get_origin = typing.get_origin\n    get_args = typing.get_args\n# 3.8-3.9\nelse:\n    try:\n        # 3.9+\n        from typing import _BaseGenericAlias\n    except ImportError:\n        _BaseGenericAlias = typing._GenericAlias\n    try:\n        # 3.9+\n        from typing import GenericAlias as _typing_GenericAlias\n    except ImportError:\n        _typing_GenericAlias = typing._GenericAlias\n\n    def get_origin(tp):\n        \"\"\"Get the unsubscripted version of a type.\n\n        This supports generic types, Callable, Tuple, Union, Literal, Final, ClassVar\n        and Annotated. Return None for unsupported types. Examples::\n\n            get_origin(Literal[42]) is Literal\n            get_origin(int) is None\n            get_origin(ClassVar[int]) is ClassVar\n            get_origin(Generic) is Generic\n            get_origin(Generic[T]) is Generic\n            get_origin(Union[T, int]) is Union\n            get_origin(List[Tuple[T, T]][int]) == list\n            get_origin(P.args) is P\n        \"\"\"\n        if isinstance(tp, _AnnotatedAlias):\n            return Annotated\n        if isinstance(tp, (typing._GenericAlias, _typing_GenericAlias, _BaseGenericAlias,\n                           ParamSpecArgs, ParamSpecKwargs)):\n            return tp.__origin__\n        if tp is typing.Generic:\n            return typing.Generic\n        return None\n\n    def get_args(tp):\n        \"\"\"Get type arguments with all substitutions performed.\n\n        For unions, basic simplifications used by Union constructor are performed.\n        Examples::\n            get_args(Dict[str, int]) == (str, int)\n            get_args(int) == ()\n            get_args(Union[int, Union[T, int], str][int]) == (int, str)\n            get_args(Union[int, Tuple[T, int]][str]) == (int, Tuple[str, int])\n            get_args(Callable[[], T][int]) == ([], int)\n        \"\"\"\n        if isinstance(tp, _AnnotatedAlias):\n            return (tp.__origin__, *tp.__metadata__)\n        if isinstance(tp, (typing._GenericAlias, _typing_GenericAlias)):\n            if getattr(tp, \"_special\", False):\n                return ()\n            res = tp.__args__\n            if get_origin(tp) is collections.abc.Callable and res[0] is not Ellipsis:\n                res = (list(res[:-1]), res[-1])\n            return res\n        return ()\n\n\n# 3.10+\nif hasattr(typing, 'TypeAlias'):\n    TypeAlias = typing.TypeAlias\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def TypeAlias(self, parameters):\n        \"\"\"Special marker indicating that an assignment should\n        be recognized as a proper type alias definition by type\n        checkers.\n\n        For example::\n\n            Predicate: TypeAlias = Callable[..., bool]\n\n        It's invalid when used anywhere except as in the example above.\n        \"\"\"\n        raise TypeError(f\"{self} is not subscriptable\")\n# 3.8\nelse:\n    TypeAlias = _ExtensionsSpecialForm(\n        'TypeAlias',\n        doc=\"\"\"Special marker indicating that an assignment should\n        be recognized as a proper type alias definition by type\n        checkers.\n\n        For example::\n\n            Predicate: TypeAlias = Callable[..., bool]\n\n        It's invalid when used anywhere except as in the example\n        above.\"\"\"\n    )\n\n\nif hasattr(typing, \"NoDefault\"):\n    NoDefault = typing.NoDefault\nelse:\n    class NoDefaultTypeMeta(type):\n        def __setattr__(cls, attr, value):\n            # TypeError is consistent with the behavior of NoneType\n            raise TypeError(\n                f\"cannot set {attr!r} attribute of immutable type {cls.__name__!r}\"\n            )\n\n    class NoDefaultType(metaclass=NoDefaultTypeMeta):\n        \"\"\"The type of the NoDefault singleton.\"\"\"\n\n        __slots__ = ()\n\n        def __new__(cls):\n            return globals().get(\"NoDefault\") or object.__new__(cls)\n\n        def __repr__(self):\n            return \"typing_extensions.NoDefault\"\n\n        def __reduce__(self):\n            return \"NoDefault\"\n\n    NoDefault = NoDefaultType()\n    del NoDefaultType, NoDefaultTypeMeta\n\n\ndef _set_default(type_param, default):\n    type_param.has_default = lambda: default is not NoDefault\n    type_param.__default__ = default\n\n\ndef _set_module(typevarlike):\n    # for pickling:\n    def_mod = _caller(depth=3)\n    if def_mod != 'typing_extensions':\n        typevarlike.__module__ = def_mod\n\n\nclass _DefaultMixin:\n    \"\"\"Mixin for TypeVarLike defaults.\"\"\"\n\n    __slots__ = ()\n    __init__ = _set_default\n\n\n# Classes using this metaclass must provide a _backported_typevarlike ClassVar\nclass _TypeVarLikeMeta(type):\n    def __instancecheck__(cls, __instance: Any) -> bool:\n        return isinstance(__instance, cls._backported_typevarlike)\n\n\nif _PEP_696_IMPLEMENTED:\n    from typing import TypeVar\nelse:\n    # Add default and infer_variance parameters from PEP 696 and 695\n    class TypeVar(metaclass=_TypeVarLikeMeta):\n        \"\"\"Type variable.\"\"\"\n\n        _backported_typevarlike = typing.TypeVar\n\n        def __new__(cls, name, *constraints, bound=None,\n                    covariant=False, contravariant=False,\n                    default=NoDefault, infer_variance=False):\n            if hasattr(typing, \"TypeAliasType\"):\n                # PEP 695 implemented (3.12+), can pass infer_variance to typing.TypeVar\n                typevar = typing.TypeVar(name, *constraints, bound=bound,\n                                         covariant=covariant, contravariant=contravariant,\n                                         infer_variance=infer_variance)\n            else:\n                typevar = typing.TypeVar(name, *constraints, bound=bound,\n                                         covariant=covariant, contravariant=contravariant)\n                if infer_variance and (covariant or contravariant):\n                    raise ValueError(\"Variance cannot be specified with infer_variance.\")\n                typevar.__infer_variance__ = infer_variance\n\n            _set_default(typevar, default)\n            _set_module(typevar)\n\n            def _tvar_prepare_subst(alias, args):\n                if (\n                    typevar.has_default()\n                    and alias.__parameters__.index(typevar) == len(args)\n                ):\n                    args += (typevar.__default__,)\n                return args\n\n            typevar.__typing_prepare_subst__ = _tvar_prepare_subst\n            return typevar\n\n        def __init_subclass__(cls) -> None:\n            raise TypeError(f\"type '{__name__}.TypeVar' is not an acceptable base type\")\n\n\n# Python 3.10+ has PEP 612\nif hasattr(typing, 'ParamSpecArgs'):\n    ParamSpecArgs = typing.ParamSpecArgs\n    ParamSpecKwargs = typing.ParamSpecKwargs\n# 3.8-3.9\nelse:\n    class _Immutable:\n        \"\"\"Mixin to indicate that object should not be copied.\"\"\"\n        __slots__ = ()\n\n        def __copy__(self):\n            return self\n\n        def __deepcopy__(self, memo):\n            return self\n\n    class ParamSpecArgs(_Immutable):\n        \"\"\"The args for a ParamSpec object.\n\n        Given a ParamSpec object P, P.args is an instance of ParamSpecArgs.\n\n        ParamSpecArgs objects have a reference back to their ParamSpec:\n\n        P.args.__origin__ is P\n\n        This type is meant for runtime introspection and has no special meaning to\n        static type checkers.\n        \"\"\"\n        def __init__(self, origin):\n            self.__origin__ = origin\n\n        def __repr__(self):\n            return f\"{self.__origin__.__name__}.args\"\n\n        def __eq__(self, other):\n            if not isinstance(other, ParamSpecArgs):\n                return NotImplemented\n            return self.__origin__ == other.__origin__\n\n    class ParamSpecKwargs(_Immutable):\n        \"\"\"The kwargs for a ParamSpec object.\n\n        Given a ParamSpec object P, P.kwargs is an instance of ParamSpecKwargs.\n\n        ParamSpecKwargs objects have a reference back to their ParamSpec:\n\n        P.kwargs.__origin__ is P\n\n        This type is meant for runtime introspection and has no special meaning to\n        static type checkers.\n        \"\"\"\n        def __init__(self, origin):\n            self.__origin__ = origin\n\n        def __repr__(self):\n            return f\"{self.__origin__.__name__}.kwargs\"\n\n        def __eq__(self, other):\n            if not isinstance(other, ParamSpecKwargs):\n                return NotImplemented\n            return self.__origin__ == other.__origin__\n\n\nif _PEP_696_IMPLEMENTED:\n    from typing import ParamSpec\n\n# 3.10+\nelif hasattr(typing, 'ParamSpec'):\n\n    # Add default parameter - PEP 696\n    class ParamSpec(metaclass=_TypeVarLikeMeta):\n        \"\"\"Parameter specification.\"\"\"\n\n        _backported_typevarlike = typing.ParamSpec\n\n        def __new__(cls, name, *, bound=None,\n                    covariant=False, contravariant=False,\n                    infer_variance=False, default=NoDefault):\n            if hasattr(typing, \"TypeAliasType\"):\n                # PEP 695 implemented, can pass infer_variance to typing.TypeVar\n                paramspec = typing.ParamSpec(name, bound=bound,\n                                             covariant=covariant,\n                                             contravariant=contravariant,\n                                             infer_variance=infer_variance)\n            else:\n                paramspec = typing.ParamSpec(name, bound=bound,\n                                             covariant=covariant,\n                                             contravariant=contravariant)\n                paramspec.__infer_variance__ = infer_variance\n\n            _set_default(paramspec, default)\n            _set_module(paramspec)\n\n            def _paramspec_prepare_subst(alias, args):\n                params = alias.__parameters__\n                i = params.index(paramspec)\n                if i == len(args) and paramspec.has_default():\n                    args = [*args, paramspec.__default__]\n                if i >= len(args):\n                    raise TypeError(f\"Too few arguments for {alias}\")\n                # Special case where Z[[int, str, bool]] == Z[int, str, bool] in PEP 612.\n                if len(params) == 1 and not typing._is_param_expr(args[0]):\n                    assert i == 0\n                    args = (args,)\n                # Convert lists to tuples to help other libraries cache the results.\n                elif isinstance(args[i], list):\n                    args = (*args[:i], tuple(args[i]), *args[i + 1:])\n                return args\n\n            paramspec.__typing_prepare_subst__ = _paramspec_prepare_subst\n            return paramspec\n\n        def __init_subclass__(cls) -> None:\n            raise TypeError(f\"type '{__name__}.ParamSpec' is not an acceptable base type\")\n\n# 3.8-3.9\nelse:\n\n    # Inherits from list as a workaround for Callable checks in Python < 3.9.2.\n    class ParamSpec(list, _DefaultMixin):\n        \"\"\"Parameter specification variable.\n\n        Usage::\n\n           P = ParamSpec('P')\n\n        Parameter specification variables exist primarily for the benefit of static\n        type checkers.  They are used to forward the parameter types of one\n        callable to another callable, a pattern commonly found in higher order\n        functions and decorators.  They are only valid when used in ``Concatenate``,\n        or s the first argument to ``Callable``. In Python 3.10 and higher,\n        they are also supported in user-defined Generics at runtime.\n        See class Generic for more information on generic types.  An\n        example for annotating a decorator::\n\n           T = TypeVar('T')\n           P = ParamSpec('P')\n\n           def add_logging(f: Callable[P, T]) -> Callable[P, T]:\n               '''A type-safe decorator to add logging to a function.'''\n               def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                   logging.info(f'{f.__name__} was called')\n                   return f(*args, **kwargs)\n               return inner\n\n           @add_logging\n           def add_two(x: float, y: float) -> float:\n               '''Add two numbers together.'''\n               return x + y\n\n        Parameter specification variables defined with covariant=True or\n        contravariant=True can be used to declare covariant or contravariant\n        generic types.  These keyword arguments are valid, but their actual semantics\n        are yet to be decided.  See PEP 612 for details.\n\n        Parameter specification variables can be introspected. e.g.:\n\n           P.__name__ == 'T'\n           P.__bound__ == None\n           P.__covariant__ == False\n           P.__contravariant__ == False\n\n        Note that only parameter specification variables defined in global scope can\n        be pickled.\n        \"\"\"\n\n        # Trick Generic __parameters__.\n        __class__ = typing.TypeVar\n\n        @property\n        def args(self):\n            return ParamSpecArgs(self)\n\n        @property\n        def kwargs(self):\n            return ParamSpecKwargs(self)\n\n        def __init__(self, name, *, bound=None, covariant=False, contravariant=False,\n                     infer_variance=False, default=NoDefault):\n            list.__init__(self, [self])\n            self.__name__ = name\n            self.__covariant__ = bool(covariant)\n            self.__contravariant__ = bool(contravariant)\n            self.__infer_variance__ = bool(infer_variance)\n            if bound:\n                self.__bound__ = typing._type_check(bound, 'Bound must be a type.')\n            else:\n                self.__bound__ = None\n            _DefaultMixin.__init__(self, default)\n\n            # for pickling:\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n\n        def __repr__(self):\n            if self.__infer_variance__:\n                prefix = ''\n            elif self.__covariant__:\n                prefix = '+'\n            elif self.__contravariant__:\n                prefix = '-'\n            else:\n                prefix = '~'\n            return prefix + self.__name__\n\n        def __hash__(self):\n            return object.__hash__(self)\n\n        def __eq__(self, other):\n            return self is other\n\n        def __reduce__(self):\n            return self.__name__\n\n        # Hack to get typing._type_check to pass.\n        def __call__(self, *args, **kwargs):\n            pass\n\n\n# 3.8-3.9\nif not hasattr(typing, 'Concatenate'):\n    # Inherits from list as a workaround for Callable checks in Python < 3.9.2.\n    class _ConcatenateGenericAlias(list):\n\n        # Trick Generic into looking into this for __parameters__.\n        __class__ = typing._GenericAlias\n\n        # Flag in 3.8.\n        _special = False\n\n        def __init__(self, origin, args):\n            super().__init__(args)\n            self.__origin__ = origin\n            self.__args__ = args\n\n        def __repr__(self):\n            _type_repr = typing._type_repr\n            return (f'{_type_repr(self.__origin__)}'\n                    f'[{\", \".join(_type_repr(arg) for arg in self.__args__)}]')\n\n        def __hash__(self):\n            return hash((self.__origin__, self.__args__))\n\n        # Hack to get typing._type_check to pass in Generic.\n        def __call__(self, *args, **kwargs):\n            pass\n\n        @property\n        def __parameters__(self):\n            return tuple(\n                tp for tp in self.__args__ if isinstance(tp, (typing.TypeVar, ParamSpec))\n            )\n\n\n# 3.8-3.9\n@typing._tp_cache\ndef _concatenate_getitem(self, parameters):\n    if parameters == ():\n        raise TypeError(\"Cannot take a Concatenate of no types.\")\n    if not isinstance(parameters, tuple):\n        parameters = (parameters,)\n    if not isinstance(parameters[-1], ParamSpec):\n        raise TypeError(\"The last parameter to Concatenate should be a \"\n                        \"ParamSpec variable.\")\n    msg = \"Concatenate[arg, ...]: each arg must be a type.\"\n    parameters = tuple(typing._type_check(p, msg) for p in parameters)\n    return _ConcatenateGenericAlias(self, parameters)\n\n\n# 3.10+\nif hasattr(typing, 'Concatenate'):\n    Concatenate = typing.Concatenate\n    _ConcatenateGenericAlias = typing._ConcatenateGenericAlias\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def Concatenate(self, parameters):\n        \"\"\"Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\n        higher order function which adds, removes or transforms parameters of a\n        callable.\n\n        For example::\n\n           Callable[Concatenate[int, P], int]\n\n        See PEP 612 for detailed information.\n        \"\"\"\n        return _concatenate_getitem(self, parameters)\n# 3.8\nelse:\n    class _ConcatenateForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            return _concatenate_getitem(self, parameters)\n\n    Concatenate = _ConcatenateForm(\n        'Concatenate',\n        doc=\"\"\"Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\n        higher order function which adds, removes or transforms parameters of a\n        callable.\n\n        For example::\n\n           Callable[Concatenate[int, P], int]\n\n        See PEP 612 for detailed information.\n        \"\"\")\n\n# 3.10+\nif hasattr(typing, 'TypeGuard'):\n    TypeGuard = typing.TypeGuard\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def TypeGuard(self, parameters):\n        \"\"\"Special typing form used to annotate the return type of a user-defined\n        type guard function.  ``TypeGuard`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeGuard[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeGuard`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the type inside ``TypeGuard``.\n\n        For example::\n\n            def is_str(val: Union[str, float]):\n                # \"isinstance\" type guard\n                if isinstance(val, str):\n                    # Type of ``val`` is narrowed to ``str``\n                    ...\n                else:\n                    # Else, type of ``val`` is narrowed to ``float``.\n                    ...\n\n        Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower\n        form of ``TypeA`` (it can even be a wider form) and this may lead to\n        type-unsafe results.  The main reason is to allow for things like\n        narrowing ``List[object]`` to ``List[str]`` even though the latter is not\n        a subtype of the former, since ``List`` is invariant.  The responsibility of\n        writing type-safe type guards is left to the user.\n\n        ``TypeGuard`` also works with type variables.  For more information, see\n        PEP 647 (User-Defined Type Guards).\n        \"\"\"\n        item = typing._type_check(parameters, f'{self} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n# 3.8\nelse:\n    class _TypeGuardForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type')\n            return typing._GenericAlias(self, (item,))\n\n    TypeGuard = _TypeGuardForm(\n        'TypeGuard',\n        doc=\"\"\"Special typing form used to annotate the return type of a user-defined\n        type guard function.  ``TypeGuard`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeGuard[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeGuard`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the type inside ``TypeGuard``.\n\n        For example::\n\n            def is_str(val: Union[str, float]):\n                # \"isinstance\" type guard\n                if isinstance(val, str):\n                    # Type of ``val`` is narrowed to ``str``\n                    ...\n                else:\n                    # Else, type of ``val`` is narrowed to ``float``.\n                    ...\n\n        Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower\n        form of ``TypeA`` (it can even be a wider form) and this may lead to\n        type-unsafe results.  The main reason is to allow for things like\n        narrowing ``List[object]`` to ``List[str]`` even though the latter is not\n        a subtype of the former, since ``List`` is invariant.  The responsibility of\n        writing type-safe type guards is left to the user.\n\n        ``TypeGuard`` also works with type variables.  For more information, see\n        PEP 647 (User-Defined Type Guards).\n        \"\"\")\n\n# 3.13+\nif hasattr(typing, 'TypeIs'):\n    TypeIs = typing.TypeIs\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def TypeIs(self, parameters):\n        \"\"\"Special typing form used to annotate the return type of a user-defined\n        type narrower function.  ``TypeIs`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeIs`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeIs[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeIs`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the intersection of the type inside ``TypeGuard`` and the argument's\n        previously known type.\n\n        For example::\n\n            def is_awaitable(val: object) -> TypeIs[Awaitable[Any]]:\n                return hasattr(val, '__await__')\n\n            def f(val: Union[int, Awaitable[int]]) -> int:\n                if is_awaitable(val):\n                    assert_type(val, Awaitable[int])\n                else:\n                    assert_type(val, int)\n\n        ``TypeIs`` also works with type variables.  For more information, see\n        PEP 742 (Narrowing types with TypeIs).\n        \"\"\"\n        item = typing._type_check(parameters, f'{self} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n# 3.8\nelse:\n    class _TypeIsForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type')\n            return typing._GenericAlias(self, (item,))\n\n    TypeIs = _TypeIsForm(\n        'TypeIs',\n        doc=\"\"\"Special typing form used to annotate the return type of a user-defined\n        type narrower function.  ``TypeIs`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeIs`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeIs[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeIs`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the intersection of the type inside ``TypeGuard`` and the argument's\n        previously known type.\n\n        For example::\n\n            def is_awaitable(val: object) -> TypeIs[Awaitable[Any]]:\n                return hasattr(val, '__await__')\n\n            def f(val: Union[int, Awaitable[int]]) -> int:\n                if is_awaitable(val):\n                    assert_type(val, Awaitable[int])\n                else:\n                    assert_type(val, int)\n\n        ``TypeIs`` also works with type variables.  For more information, see\n        PEP 742 (Narrowing types with TypeIs).\n        \"\"\")\n\n# 3.14+?\nif hasattr(typing, 'TypeExpr'):\n    TypeExpr = typing.TypeExpr\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    class _TypeExprForm(_ExtensionsSpecialForm, _root=True):\n        # TypeExpr(X) is equivalent to X but indicates to the type checker\n        # that the object is a TypeExpr.\n        def __call__(self, obj, /):\n            return obj\n\n    @_TypeExprForm\n    def TypeExpr(self, parameters):\n        \"\"\"Special typing form used to represent a type expression.\n\n        Usage:\n\n            def cast[T](typ: TypeExpr[T], value: Any) -> T: ...\n\n            reveal_type(cast(int, \"x\"))  # int\n\n        See PEP 747 for more information.\n        \"\"\"\n        item = typing._type_check(parameters, f'{self} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n# 3.8\nelse:\n    class _TypeExprForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type')\n            return typing._GenericAlias(self, (item,))\n\n        def __call__(self, obj, /):\n            return obj\n\n    TypeExpr = _TypeExprForm(\n        'TypeExpr',\n        doc=\"\"\"Special typing form used to represent a type expression.\n\n        Usage:\n\n            def cast[T](typ: TypeExpr[T], value: Any) -> T: ...\n\n            reveal_type(cast(int, \"x\"))  # int\n\n        See PEP 747 for more information.\n        \"\"\")\n\n\n# Vendored from cpython typing._SpecialFrom\nclass _SpecialForm(typing._Final, _root=True):\n    __slots__ = ('_name', '__doc__', '_getitem')\n\n    def __init__(self, getitem):\n        self._getitem = getitem\n        self._name = getitem.__name__\n        self.__doc__ = getitem.__doc__\n\n    def __getattr__(self, item):\n        if item in {'__name__', '__qualname__'}:\n            return self._name\n\n        raise AttributeError(item)\n\n    def __mro_entries__(self, bases):\n        raise TypeError(f\"Cannot subclass {self!r}\")\n\n    def __repr__(self):\n        return f'typing_extensions.{self._name}'\n\n    def __reduce__(self):\n        return self._name\n\n    def __call__(self, *args, **kwds):\n        raise TypeError(f\"Cannot instantiate {self!r}\")\n\n    def __or__(self, other):\n        return typing.Union[self, other]\n\n    def __ror__(self, other):\n        return typing.Union[other, self]\n\n    def __instancecheck__(self, obj):\n        raise TypeError(f\"{self} cannot be used with isinstance()\")\n\n    def __subclasscheck__(self, cls):\n        raise TypeError(f\"{self} cannot be used with issubclass()\")\n\n    @typing._tp_cache\n    def __getitem__(self, parameters):\n        return self._getitem(self, parameters)\n\n\nif hasattr(typing, \"LiteralString\"):  # 3.11+\n    LiteralString = typing.LiteralString\nelse:\n    @_SpecialForm\n    def LiteralString(self, params):\n        \"\"\"Represents an arbitrary literal string.\n\n        Example::\n\n          from typing_extensions import LiteralString\n\n          def query(sql: LiteralString) -> ...:\n              ...\n\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.\n\n        \"\"\"\n        raise TypeError(f\"{self} is not subscriptable\")\n\n\nif hasattr(typing, \"Self\"):  # 3.11+\n    Self = typing.Self\nelse:\n    @_SpecialForm\n    def Self(self, params):\n        \"\"\"Used to spell the type of \"self\" in classes.\n\n        Example::\n\n          from typing import Self\n\n          class ReturnsSelf:\n              def parse(self, data: bytes) -> Self:\n                  ...\n                  return self\n\n        \"\"\"\n\n        raise TypeError(f\"{self} is not subscriptable\")\n\n\nif hasattr(typing, \"Never\"):  # 3.11+\n    Never = typing.Never\nelse:\n    @_SpecialForm\n    def Never(self, params):\n        \"\"\"The bottom type, a type that has no members.\n\n        This can be used to define a function that should never be\n        called, or a function that never returns::\n\n            from typing_extensions import Never\n\n            def never_call_me(arg: Never) -> None:\n                pass\n\n            def int_or_str(arg: int | str) -> None:\n                never_call_me(arg)  # type checker error\n                match arg:\n                    case int():\n                        print(\"It's an int\")\n                    case str():\n                        print(\"It's a str\")\n                    case _:\n                        never_call_me(arg)  # ok, arg is of type Never\n\n        \"\"\"\n\n        raise TypeError(f\"{self} is not subscriptable\")\n\n\nif hasattr(typing, 'Required'):  # 3.11+\n    Required = typing.Required\n    NotRequired = typing.NotRequired\nelif sys.version_info[:2] >= (3, 9):  # 3.9-3.10\n    @_ExtensionsSpecialForm\n    def Required(self, parameters):\n        \"\"\"A special typing construct to mark a key of a total=False TypedDict\n        as required. For example:\n\n            class Movie(TypedDict, total=False):\n                title: Required[str]\n                year: int\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n\n        There is no runtime checking that a required key is actually provided\n        when instantiating a related TypedDict.\n        \"\"\"\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n\n    @_ExtensionsSpecialForm\n    def NotRequired(self, parameters):\n        \"\"\"A special typing construct to mark a key of a TypedDict as\n        potentially missing. For example:\n\n            class Movie(TypedDict):\n                title: str\n                year: NotRequired[int]\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n        \"\"\"\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n\nelse:  # 3.8\n    class _RequiredForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type.')\n            return typing._GenericAlias(self, (item,))\n\n    Required = _RequiredForm(\n        'Required',\n        doc=\"\"\"A special typing construct to mark a key of a total=False TypedDict\n        as required. For example:\n\n            class Movie(TypedDict, total=False):\n                title: Required[str]\n                year: int\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n\n        There is no runtime checking that a required key is actually provided\n        when instantiating a related TypedDict.\n        \"\"\")\n    NotRequired = _RequiredForm(\n        'NotRequired',\n        doc=\"\"\"A special typing construct to mark a key of a TypedDict as\n        potentially missing. For example:\n\n            class Movie(TypedDict):\n                title: str\n                year: NotRequired[int]\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n        \"\"\")\n\n\nif hasattr(typing, 'ReadOnly'):\n    ReadOnly = typing.ReadOnly\nelif sys.version_info[:2] >= (3, 9):  # 3.9-3.12\n    @_ExtensionsSpecialForm\n    def ReadOnly(self, parameters):\n        \"\"\"A special typing construct to mark an item of a TypedDict as read-only.\n\n        For example:\n\n            class Movie(TypedDict):\n                title: ReadOnly[str]\n                year: int\n\n            def mutate_movie(m: Movie) -> None:\n                m[\"year\"] = 1992  # allowed\n                m[\"title\"] = \"The Matrix\"  # typechecker error\n\n        There is no runtime checking for this property.\n        \"\"\"\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n\nelse:  # 3.8\n    class _ReadOnlyForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type.')\n            return typing._GenericAlias(self, (item,))\n\n    ReadOnly = _ReadOnlyForm(\n        'ReadOnly',\n        doc=\"\"\"A special typing construct to mark a key of a TypedDict as read-only.\n\n        For example:\n\n            class Movie(TypedDict):\n                title: ReadOnly[str]\n                year: int\n\n            def mutate_movie(m: Movie) -> None:\n                m[\"year\"] = 1992  # allowed\n                m[\"title\"] = \"The Matrix\"  # typechecker error\n\n        There is no runtime checking for this propery.\n        \"\"\")\n\n\n_UNPACK_DOC = \"\"\"\\\nType unpack operator.\n\nThe type unpack operator takes the child types from some container type,\nsuch as `tuple[int, str]` or a `TypeVarTuple`, and 'pulls them out'. For\nexample:\n\n  # For some generic class `Foo`:\n  Foo[Unpack[tuple[int, str]]]  # Equivalent to Foo[int, str]\n\n  Ts = TypeVarTuple('Ts')\n  # Specifies that `Bar` is generic in an arbitrary number of types.\n  # (Think of `Ts` as a tuple of an arbitrary number of individual\n  #  `TypeVar`s, which the `Unpack` is 'pulling out' directly into the\n  #  `Generic[]`.)\n  class Bar(Generic[Unpack[Ts]]): ...\n  Bar[int]  # Valid\n  Bar[int, str]  # Also valid\n\nFrom Python 3.11, this can also be done using the `*` operator:\n\n    Foo[*tuple[int, str]]\n    class Bar(Generic[*Ts]): ...\n\nThe operator can also be used along with a `TypedDict` to annotate\n`**kwargs` in a function signature. For instance:\n\n  class Movie(TypedDict):\n    name: str\n    year: int\n\n  # This function expects two keyword arguments - *name* of type `str` and\n  # *year* of type `int`.\n  def foo(**kwargs: Unpack[Movie]): ...\n\nNote that there is only some runtime checking of this operator. Not\neverything the runtime allows may be accepted by static type checkers.\n\nFor more information, see PEP 646 and PEP 692.\n\"\"\"\n\n\nif sys.version_info >= (3, 12):  # PEP 692 changed the repr of Unpack[]\n    Unpack = typing.Unpack\n\n    def _is_unpack(obj):\n        return get_origin(obj) is Unpack\n\nelif sys.version_info[:2] >= (3, 9):  # 3.9+\n    class _UnpackSpecialForm(_ExtensionsSpecialForm, _root=True):\n        def __init__(self, getitem):\n            super().__init__(getitem)\n            self.__doc__ = _UNPACK_DOC\n\n    class _UnpackAlias(typing._GenericAlias, _root=True):\n        __class__ = typing.TypeVar\n\n        @property\n        def __typing_unpacked_tuple_args__(self):\n            assert self.__origin__ is Unpack\n            assert len(self.__args__) == 1\n            arg, = self.__args__\n            if isinstance(arg, (typing._GenericAlias, _types.GenericAlias)):\n                if arg.__origin__ is not tuple:\n                    raise TypeError(\"Unpack[...] must be used with a tuple type\")\n                return arg.__args__\n            return None\n\n    @_UnpackSpecialForm\n    def Unpack(self, parameters):\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return _UnpackAlias(self, (item,))\n\n    def _is_unpack(obj):\n        return isinstance(obj, _UnpackAlias)\n\nelse:  # 3.8\n    class _UnpackAlias(typing._GenericAlias, _root=True):\n        __class__ = typing.TypeVar\n\n    class _UnpackForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type.')\n            return _UnpackAlias(self, (item,))\n\n    Unpack = _UnpackForm('Unpack', doc=_UNPACK_DOC)\n\n    def _is_unpack(obj):\n        return isinstance(obj, _UnpackAlias)\n\n\nif _PEP_696_IMPLEMENTED:\n    from typing import TypeVarTuple\n\nelif hasattr(typing, \"TypeVarTuple\"):  # 3.11+\n\n    def _unpack_args(*args):\n        newargs = []\n        for arg in args:\n            subargs = getattr(arg, '__typing_unpacked_tuple_args__', None)\n            if subargs is not None and not (subargs and subargs[-1] is ...):\n                newargs.extend(subargs)\n            else:\n                newargs.append(arg)\n        return newargs\n\n    # Add default parameter - PEP 696\n    class TypeVarTuple(metaclass=_TypeVarLikeMeta):\n        \"\"\"Type variable tuple.\"\"\"\n\n        _backported_typevarlike = typing.TypeVarTuple\n\n        def __new__(cls, name, *, default=NoDefault):\n            tvt = typing.TypeVarTuple(name)\n            _set_default(tvt, default)\n            _set_module(tvt)\n\n            def _typevartuple_prepare_subst(alias, args):\n                params = alias.__parameters__\n                typevartuple_index = params.index(tvt)\n                for param in params[typevartuple_index + 1:]:\n                    if isinstance(param, TypeVarTuple):\n                        raise TypeError(\n                            f\"More than one TypeVarTuple parameter in {alias}\"\n                        )\n\n                alen = len(args)\n                plen = len(params)\n                left = typevartuple_index\n                right = plen - typevartuple_index - 1\n                var_tuple_index = None\n                fillarg = None\n                for k, arg in enumerate(args):\n                    if not isinstance(arg, type):\n                        subargs = getattr(arg, '__typing_unpacked_tuple_args__', None)\n                        if subargs and len(subargs) == 2 and subargs[-1] is ...:\n                            if var_tuple_index is not None:\n                                raise TypeError(\n                                    \"More than one unpacked \"\n                                    \"arbitrary-length tuple argument\"\n                                )\n                            var_tuple_index = k\n                            fillarg = subargs[0]\n                if var_tuple_index is not None:\n                    left = min(left, var_tuple_index)\n                    right = min(right, alen - var_tuple_index - 1)\n                elif left + right > alen:\n                    raise TypeError(f\"Too few arguments for {alias};\"\n                                    f\" actual {alen}, expected at least {plen - 1}\")\n                if left == alen - right and tvt.has_default():\n                    replacement = _unpack_args(tvt.__default__)\n                else:\n                    replacement = args[left: alen - right]\n\n                return (\n                    *args[:left],\n                    *([fillarg] * (typevartuple_index - left)),\n                    replacement,\n                    *([fillarg] * (plen - right - left - typevartuple_index - 1)),\n                    *args[alen - right:],\n                )\n\n            tvt.__typing_prepare_subst__ = _typevartuple_prepare_subst\n            return tvt\n\n        def __init_subclass__(self, *args, **kwds):\n            raise TypeError(\"Cannot subclass special typing classes\")\n\nelse:  # <=3.10\n    class TypeVarTuple(_DefaultMixin):\n        \"\"\"Type variable tuple.\n\n        Usage::\n\n            Ts = TypeVarTuple('Ts')\n\n        In the same way that a normal type variable is a stand-in for a single\n        type such as ``int``, a type variable *tuple* is a stand-in for a *tuple*\n        type such as ``Tuple[int, str]``.\n\n        Type variable tuples can be used in ``Generic`` declarations.\n        Consider the following example::\n\n            class Array(Generic[*Ts]): ...\n\n        The ``Ts`` type variable tuple here behaves like ``tuple[T1, T2]``,\n        where ``T1`` and ``T2`` are type variables. To use these type variables\n        as type parameters of ``Array``, we must *unpack* the type variable tuple using\n        the star operator: ``*Ts``. The signature of ``Array`` then behaves\n        as if we had simply written ``class Array(Generic[T1, T2]): ...``.\n        In contrast to ``Generic[T1, T2]``, however, ``Generic[*Shape]`` allows\n        us to parameterise the class with an *arbitrary* number of type parameters.\n\n        Type variable tuples can be used anywhere a normal ``TypeVar`` can.\n        This includes class definitions, as shown above, as well as function\n        signatures and variable annotations::\n\n            class Array(Generic[*Ts]):\n\n                def __init__(self, shape: Tuple[*Ts]):\n                    self._shape: Tuple[*Ts] = shape\n\n                def get_shape(self) -> Tuple[*Ts]:\n                    return self._shape\n\n            shape = (Height(480), Width(640))\n            x: Array[Height, Width] = Array(shape)\n            y = abs(x)  # Inferred type is Array[Height, Width]\n            z = x + x   #        ...    is Array[Height, Width]\n            x.get_shape()  #     ...    is tuple[Height, Width]\n\n        \"\"\"\n\n        # Trick Generic __parameters__.\n        __class__ = typing.TypeVar\n\n        def __iter__(self):\n            yield self.__unpacked__\n\n        def __init__(self, name, *, default=NoDefault):\n            self.__name__ = name\n            _DefaultMixin.__init__(self, default)\n\n            # for pickling:\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n\n            self.__unpacked__ = Unpack[self]\n\n        def __repr__(self):\n            return self.__name__\n\n        def __hash__(self):\n            return object.__hash__(self)\n\n        def __eq__(self, other):\n            return self is other\n\n        def __reduce__(self):\n            return self.__name__\n\n        def __init_subclass__(self, *args, **kwds):\n            if '_root' not in kwds:\n                raise TypeError(\"Cannot subclass special typing classes\")\n\n\nif hasattr(typing, \"reveal_type\"):  # 3.11+\n    reveal_type = typing.reveal_type\nelse:  # <=3.10\n    def reveal_type(obj: T, /) -> T:\n        \"\"\"Reveal the inferred type of a variable.\n\n        When a static type checker encounters a call to ``reveal_type()``,\n        it will emit the inferred type of the argument::\n\n            x: int = 1\n            reveal_type(x)\n\n        Running a static type checker (e.g., ``mypy``) on this example\n        will produce output similar to 'Revealed type is \"builtins.int\"'.\n\n        At runtime, the function prints the runtime type of the\n        argument and returns it unchanged.\n\n        \"\"\"\n        print(f\"Runtime type is {type(obj).__name__!r}\", file=sys.stderr)\n        return obj\n\n\nif hasattr(typing, \"_ASSERT_NEVER_REPR_MAX_LENGTH\"):  # 3.11+\n    _ASSERT_NEVER_REPR_MAX_LENGTH = typing._ASSERT_NEVER_REPR_MAX_LENGTH\nelse:  # <=3.10\n    _ASSERT_NEVER_REPR_MAX_LENGTH = 100\n\n\nif hasattr(typing, \"assert_never\"):  # 3.11+\n    assert_never = typing.assert_never\nelse:  # <=3.10\n    def assert_never(arg: Never, /) -> Never:\n        \"\"\"Assert to the type checker that a line of code is unreachable.\n\n        Example::\n\n            def int_or_str(arg: int | str) -> None:\n                match arg:\n                    case int():\n                        print(\"It's an int\")\n                    case str():\n                        print(\"It's a str\")\n                    case _:\n                        assert_never(arg)\n\n        If a type checker finds that a call to assert_never() is\n        reachable, it will emit an error.\n\n        At runtime, this throws an exception when called.\n\n        \"\"\"\n        value = repr(arg)\n        if len(value) > _ASSERT_NEVER_REPR_MAX_LENGTH:\n            value = value[:_ASSERT_NEVER_REPR_MAX_LENGTH] + '...'\n        raise AssertionError(f\"Expected code to be unreachable, but got: {value}\")\n\n\nif sys.version_info >= (3, 12):  # 3.12+\n    # dataclass_transform exists in 3.11 but lacks the frozen_default parameter\n    dataclass_transform = typing.dataclass_transform\nelse:  # <=3.11\n    def dataclass_transform(\n        *,\n        eq_default: bool = True,\n        order_default: bool = False,\n        kw_only_default: bool = False,\n        frozen_default: bool = False,\n        field_specifiers: typing.Tuple[\n            typing.Union[typing.Type[typing.Any], typing.Callable[..., typing.Any]],\n            ...\n        ] = (),\n        **kwargs: typing.Any,\n    ) -> typing.Callable[[T], T]:\n        \"\"\"Decorator that marks a function, class, or metaclass as providing\n        dataclass-like behavior.\n\n        Example:\n\n            from typing_extensions import dataclass_transform\n\n            _T = TypeVar(\"_T\")\n\n            # Used on a decorator function\n            @dataclass_transform()\n            def create_model(cls: type[_T]) -> type[_T]:\n                ...\n                return cls\n\n            @create_model\n            class CustomerModel:\n                id: int\n                name: str\n\n            # Used on a base class\n            @dataclass_transform()\n            class ModelBase: ...\n\n            class CustomerModel(ModelBase):\n                id: int\n                name: str\n\n            # Used on a metaclass\n            @dataclass_transform()\n            class ModelMeta(type): ...\n\n            class ModelBase(metaclass=ModelMeta): ...\n\n            class CustomerModel(ModelBase):\n                id: int\n                name: str\n\n        Each of the ``CustomerModel`` classes defined in this example will now\n        behave similarly to a dataclass created with the ``@dataclasses.dataclass``\n        decorator. For example, the type checker will synthesize an ``__init__``\n        method.\n\n        The arguments to this decorator can be used to customize this behavior:\n        - ``eq_default`` indicates whether the ``eq`` parameter is assumed to be\n          True or False if it is omitted by the caller.\n        - ``order_default`` indicates whether the ``order`` parameter is\n          assumed to be True or False if it is omitted by the caller.\n        - ``kw_only_default`` indicates whether the ``kw_only`` parameter is\n          assumed to be True or False if it is omitted by the caller.\n        - ``frozen_default`` indicates whether the ``frozen`` parameter is\n          assumed to be True or False if it is omitted by the caller.\n        - ``field_specifiers`` specifies a static list of supported classes\n          or functions that describe fields, similar to ``dataclasses.field()``.\n\n        At runtime, this decorator records its arguments in the\n        ``__dataclass_transform__`` attribute on the decorated object.\n\n        See PEP 681 for details.\n\n        \"\"\"\n        def decorator(cls_or_fn):\n            cls_or_fn.__dataclass_transform__ = {\n                \"eq_default\": eq_default,\n                \"order_default\": order_default,\n                \"kw_only_default\": kw_only_default,\n                \"frozen_default\": frozen_default,\n                \"field_specifiers\": field_specifiers,\n                \"kwargs\": kwargs,\n            }\n            return cls_or_fn\n        return decorator\n\n\nif hasattr(typing, \"override\"):  # 3.12+\n    override = typing.override\nelse:  # <=3.11\n    _F = typing.TypeVar(\"_F\", bound=typing.Callable[..., typing.Any])\n\n    def override(arg: _F, /) -> _F:\n        \"\"\"Indicate that a method is intended to override a method in a base class.\n\n        Usage:\n\n            class Base:\n                def method(self) -> None:\n                    pass\n\n            class Child(Base):\n                @override\n                def method(self) -> None:\n                    super().method()\n\n        When this decorator is applied to a method, the type checker will\n        validate that it overrides a method with the same name on a base class.\n        This helps prevent bugs that may occur when a base class is changed\n        without an equivalent change to a child class.\n\n        There is no runtime checking of these properties. The decorator\n        sets the ``__override__`` attribute to ``True`` on the decorated object\n        to allow runtime introspection.\n\n        See PEP 698 for details.\n\n        \"\"\"\n        try:\n            arg.__override__ = True\n        except (AttributeError, TypeError):\n            # Skip the attribute silently if it is not writable.\n            # AttributeError happens if the object has __slots__ or a\n            # read-only property, TypeError if it's a builtin class.\n            pass\n        return arg\n\n\nif hasattr(warnings, \"deprecated\"):\n    deprecated = warnings.deprecated\nelse:\n    _T = typing.TypeVar(\"_T\")\n\n    class deprecated:\n        \"\"\"Indicate that a class, function or overload is deprecated.\n\n        When this decorator is applied to an object, the type checker\n        will generate a diagnostic on usage of the deprecated object.\n\n        Usage:\n\n            @deprecated(\"Use B instead\")\n            class A:\n                pass\n\n            @deprecated(\"Use g instead\")\n            def f():\n                pass\n\n            @overload\n            @deprecated(\"int support is deprecated\")\n            def g(x: int) -> int: ...\n            @overload\n            def g(x: str) -> int: ...\n\n        The warning specified by *category* will be emitted at runtime\n        on use of deprecated objects. For functions, that happens on calls;\n        for classes, on instantiation and on creation of subclasses.\n        If the *category* is ``None``, no warning is emitted at runtime.\n        The *stacklevel* determines where the\n        warning is emitted. If it is ``1`` (the default), the warning\n        is emitted at the direct caller of the deprecated object; if it\n        is higher, it is emitted further up the stack.\n        Static type checker behavior is not affected by the *category*\n        and *stacklevel* arguments.\n\n        The deprecation message passed to the decorator is saved in the\n        ``__deprecated__`` attribute on the decorated object.\n        If applied to an overload, the decorator\n        must be after the ``@overload`` decorator for the attribute to\n        exist on the overload as returned by ``get_overloads()``.\n\n        See PEP 702 for details.\n\n        \"\"\"\n        def __init__(\n            self,\n            message: str,\n            /,\n            *,\n            category: typing.Optional[typing.Type[Warning]] = DeprecationWarning,\n            stacklevel: int = 1,\n        ) -> None:\n            if not isinstance(message, str):\n                raise TypeError(\n                    \"Expected an object of type str for 'message', not \"\n                    f\"{type(message).__name__!r}\"\n                )\n            self.message = message\n            self.category = category\n            self.stacklevel = stacklevel\n\n        def __call__(self, arg: _T, /) -> _T:\n            # Make sure the inner functions created below don't\n            # retain a reference to self.\n            msg = self.message\n            category = self.category\n            stacklevel = self.stacklevel\n            if category is None:\n                arg.__deprecated__ = msg\n                return arg\n            elif isinstance(arg, type):\n                import functools\n                from types import MethodType\n\n                original_new = arg.__new__\n\n                @functools.wraps(original_new)\n                def __new__(cls, *args, **kwargs):\n                    if cls is arg:\n                        warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                    if original_new is not object.__new__:\n                        return original_new(cls, *args, **kwargs)\n                    # Mirrors a similar check in object.__new__.\n                    elif cls.__init__ is object.__init__ and (args or kwargs):\n                        raise TypeError(f\"{cls.__name__}() takes no arguments\")\n                    else:\n                        return original_new(cls)\n\n                arg.__new__ = staticmethod(__new__)\n\n                original_init_subclass = arg.__init_subclass__\n                # We need slightly different behavior if __init_subclass__\n                # is a bound method (likely if it was implemented in Python)\n                if isinstance(original_init_subclass, MethodType):\n                    original_init_subclass = original_init_subclass.__func__\n\n                    @functools.wraps(original_init_subclass)\n                    def __init_subclass__(*args, **kwargs):\n                        warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                        return original_init_subclass(*args, **kwargs)\n\n                    arg.__init_subclass__ = classmethod(__init_subclass__)\n                # Or otherwise, which likely means it's a builtin such as\n                # object's implementation of __init_subclass__.\n                else:\n                    @functools.wraps(original_init_subclass)\n                    def __init_subclass__(*args, **kwargs):\n                        warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                        return original_init_subclass(*args, **kwargs)\n\n                    arg.__init_subclass__ = __init_subclass__\n\n                arg.__deprecated__ = __new__.__deprecated__ = msg\n                __init_subclass__.__deprecated__ = msg\n                return arg\n            elif callable(arg):\n                import functools\n\n                @functools.wraps(arg)\n                def wrapper(*args, **kwargs):\n                    warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                    return arg(*args, **kwargs)\n\n                arg.__deprecated__ = wrapper.__deprecated__ = msg\n                return wrapper\n            else:\n                raise TypeError(\n                    \"@deprecated decorator with non-None category must be applied to \"\n                    f\"a class or callable, not {arg!r}\"\n                )\n\n\n# We have to do some monkey patching to deal with the dual nature of\n# Unpack/TypeVarTuple:\n# - We want Unpack to be a kind of TypeVar so it gets accepted in\n#   Generic[Unpack[Ts]]\n# - We want it to *not* be treated as a TypeVar for the purposes of\n#   counting generic parameters, so that when we subscript a generic,\n#   the runtime doesn't try to substitute the Unpack with the subscripted type.\nif not hasattr(typing, \"TypeVarTuple\"):\n    def _check_generic(cls, parameters, elen=_marker):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n\n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n            raise TypeError(f\"{cls} is not a generic class\")\n        if elen is _marker:\n            if not hasattr(cls, \"__parameters__\") or not cls.__parameters__:\n                raise TypeError(f\"{cls} is not a generic class\")\n            elen = len(cls.__parameters__)\n        alen = len(parameters)\n        if alen != elen:\n            expect_val = elen\n            if hasattr(cls, \"__parameters__\"):\n                parameters = [p for p in cls.__parameters__ if not _is_unpack(p)]\n                num_tv_tuples = sum(isinstance(p, TypeVarTuple) for p in parameters)\n                if (num_tv_tuples > 0) and (alen >= elen - num_tv_tuples):\n                    return\n\n                # deal with TypeVarLike defaults\n                # required TypeVarLikes cannot appear after a defaulted one.\n                if alen < elen:\n                    # since we validate TypeVarLike default in _collect_type_vars\n                    # or _collect_parameters we can safely check parameters[alen]\n                    if (\n                        getattr(parameters[alen], '__default__', NoDefault)\n                        is not NoDefault\n                    ):\n                        return\n\n                    num_default_tv = sum(getattr(p, '__default__', NoDefault)\n                                         is not NoDefault for p in parameters)\n\n                    elen -= num_default_tv\n\n                    expect_val = f\"at least {elen}\"\n\n            things = \"arguments\" if sys.version_info >= (3, 10) else \"parameters\"\n            raise TypeError(f\"Too {'many' if alen > elen else 'few'} {things}\"\n                            f\" for {cls}; actual {alen}, expected {expect_val}\")\nelse:\n    # Python 3.11+\n\n    def _check_generic(cls, parameters, elen):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n\n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n            raise TypeError(f\"{cls} is not a generic class\")\n        alen = len(parameters)\n        if alen != elen:\n            expect_val = elen\n            if hasattr(cls, \"__parameters__\"):\n                parameters = [p for p in cls.__parameters__ if not _is_unpack(p)]\n\n                # deal with TypeVarLike defaults\n                # required TypeVarLikes cannot appear after a defaulted one.\n                if alen < elen:\n                    # since we validate TypeVarLike default in _collect_type_vars\n                    # or _collect_parameters we can safely check parameters[alen]\n                    if (\n                        getattr(parameters[alen], '__default__', NoDefault)\n                        is not NoDefault\n                    ):\n                        return\n\n                    num_default_tv = sum(getattr(p, '__default__', NoDefault)\n                                         is not NoDefault for p in parameters)\n\n                    elen -= num_default_tv\n\n                    expect_val = f\"at least {elen}\"\n\n            raise TypeError(f\"Too {'many' if alen > elen else 'few'} arguments\"\n                            f\" for {cls}; actual {alen}, expected {expect_val}\")\n\nif not _PEP_696_IMPLEMENTED:\n    typing._check_generic = _check_generic\n\n\ndef _has_generic_or_protocol_as_origin() -> bool:\n    try:\n        frame = sys._getframe(2)\n    # - Catch AttributeError: not all Python implementations have sys._getframe()\n    # - Catch ValueError: maybe we're called from an unexpected module\n    #   and the call stack isn't deep enough\n    except (AttributeError, ValueError):\n        return False  # err on the side of leniency\n    else:\n        # If we somehow get invoked from outside typing.py,\n        # also err on the side of leniency\n        if frame.f_globals.get(\"__name__\") != \"typing\":\n            return False\n        origin = frame.f_locals.get(\"origin\")\n        # Cannot use \"in\" because origin may be an object with a buggy __eq__ that\n        # throws an error.\n        return origin is typing.Generic or origin is Protocol or origin is typing.Protocol\n\n\n_TYPEVARTUPLE_TYPES = {TypeVarTuple, getattr(typing, \"TypeVarTuple\", None)}\n\n\ndef _is_unpacked_typevartuple(x) -> bool:\n    if get_origin(x) is not Unpack:\n        return False\n    args = get_args(x)\n    return (\n        bool(args)\n        and len(args) == 1\n        and type(args[0]) in _TYPEVARTUPLE_TYPES\n    )\n\n\n# Python 3.11+ _collect_type_vars was renamed to _collect_parameters\nif hasattr(typing, '_collect_type_vars'):\n    def _collect_type_vars(types, typevar_types=None):\n        \"\"\"Collect all type variable contained in types in order of\n        first appearance (lexicographic order). For example::\n\n            _collect_type_vars((T, List[S, T])) == (T, S)\n        \"\"\"\n        if typevar_types is None:\n            typevar_types = typing.TypeVar\n        tvars = []\n\n        # A required TypeVarLike cannot appear after a TypeVarLike with a default\n        # if it was a direct call to `Generic[]` or `Protocol[]`\n        enforce_default_ordering = _has_generic_or_protocol_as_origin()\n        default_encountered = False\n\n        # Also, a TypeVarLike with a default cannot appear after a TypeVarTuple\n        type_var_tuple_encountered = False\n\n        for t in types:\n            if _is_unpacked_typevartuple(t):\n                type_var_tuple_encountered = True\n            elif isinstance(t, typevar_types) and t not in tvars:\n                if enforce_default_ordering:\n                    has_default = getattr(t, '__default__', NoDefault) is not NoDefault\n                    if has_default:\n                        if type_var_tuple_encountered:\n                            raise TypeError('Type parameter with a default'\n                                            ' follows TypeVarTuple')\n                        default_encountered = True\n                    elif default_encountered:\n                        raise TypeError(f'Type parameter {t!r} without a default'\n                                        ' follows type parameter with a default')\n\n                tvars.append(t)\n            if _should_collect_from_parameters(t):\n                tvars.extend([t for t in t.__parameters__ if t not in tvars])\n        return tuple(tvars)\n\n    typing._collect_type_vars = _collect_type_vars\nelse:\n    def _collect_parameters(args):\n        \"\"\"Collect all type variables and parameter specifications in args\n        in order of first appearance (lexicographic order).\n\n        For example::\n\n            assert _collect_parameters((T, Callable[P, T])) == (T, P)\n        \"\"\"\n        parameters = []\n\n        # A required TypeVarLike cannot appear after a TypeVarLike with default\n        # if it was a direct call to `Generic[]` or `Protocol[]`\n        enforce_default_ordering = _has_generic_or_protocol_as_origin()\n        default_encountered = False\n\n        # Also, a TypeVarLike with a default cannot appear after a TypeVarTuple\n        type_var_tuple_encountered = False\n\n        for t in args:\n            if isinstance(t, type):\n                # We don't want __parameters__ descriptor of a bare Python class.\n                pass\n            elif isinstance(t, tuple):\n                # `t` might be a tuple, when `ParamSpec` is substituted with\n                # `[T, int]`, or `[int, *Ts]`, etc.\n                for x in t:\n                    for collected in _collect_parameters([x]):\n                        if collected not in parameters:\n                            parameters.append(collected)\n            elif hasattr(t, '__typing_subst__'):\n                if t not in parameters:\n                    if enforce_default_ordering:\n                        has_default = (\n                            getattr(t, '__default__', NoDefault) is not NoDefault\n                        )\n\n                        if type_var_tuple_encountered and has_default:\n                            raise TypeError('Type parameter with a default'\n                                            ' follows TypeVarTuple')\n\n                        if has_default:\n                            default_encountered = True\n                        elif default_encountered:\n                            raise TypeError(f'Type parameter {t!r} without a default'\n                                            ' follows type parameter with a default')\n\n                    parameters.append(t)\n            else:\n                if _is_unpacked_typevartuple(t):\n                    type_var_tuple_encountered = True\n                for x in getattr(t, '__parameters__', ()):\n                    if x not in parameters:\n                        parameters.append(x)\n\n        return tuple(parameters)\n\n    if not _PEP_696_IMPLEMENTED:\n        typing._collect_parameters = _collect_parameters\n\n# Backport typing.NamedTuple as it exists in Python 3.13.\n# In 3.11, the ability to define generic `NamedTuple`s was supported.\n# This was explicitly disallowed in 3.9-3.10, and only half-worked in <=3.8.\n# On 3.12, we added __orig_bases__ to call-based NamedTuples\n# On 3.13, we deprecated kwargs-based NamedTuples\nif sys.version_info >= (3, 13):\n    NamedTuple = typing.NamedTuple\nelse:\n    def _make_nmtuple(name, types, module, defaults=()):\n        fields = [n for n, t in types]\n        annotations = {n: typing._type_check(t, f\"field {n} annotation must be a type\")\n                       for n, t in types}\n        nm_tpl = collections.namedtuple(name, fields,\n                                        defaults=defaults, module=module)\n        nm_tpl.__annotations__ = nm_tpl.__new__.__annotations__ = annotations\n        # The `_field_types` attribute was removed in 3.9;\n        # in earlier versions, it is the same as the `__annotations__` attribute\n        if sys.version_info < (3, 9):\n            nm_tpl._field_types = annotations\n        return nm_tpl\n\n    _prohibited_namedtuple_fields = typing._prohibited\n    _special_namedtuple_fields = frozenset({'__module__', '__name__', '__annotations__'})\n\n    class _NamedTupleMeta(type):\n        def __new__(cls, typename, bases, ns):\n            assert _NamedTuple in bases\n            for base in bases:\n                if base is not _NamedTuple and base is not typing.Generic:\n                    raise TypeError(\n                        'can only inherit from a NamedTuple type and Generic')\n            bases = tuple(tuple if base is _NamedTuple else base for base in bases)\n            if \"__annotations__\" in ns:\n                types = ns[\"__annotations__\"]\n            elif \"__annotate__\" in ns:\n                # TODO: Use inspect.VALUE here, and make the annotations lazily evaluated\n                types = ns[\"__annotate__\"](1)\n            else:\n                types = {}\n            default_names = []\n            for field_name in types:\n                if field_name in ns:\n                    default_names.append(field_name)\n                elif default_names:\n                    raise TypeError(f\"Non-default namedtuple field {field_name} \"\n                                    f\"cannot follow default field\"\n                                    f\"{'s' if len(default_names) > 1 else ''} \"\n                                    f\"{', '.join(default_names)}\")\n            nm_tpl = _make_nmtuple(\n                typename, types.items(),\n                defaults=[ns[n] for n in default_names],\n                module=ns['__module__']\n            )\n            nm_tpl.__bases__ = bases\n            if typing.Generic in bases:\n                if hasattr(typing, '_generic_class_getitem'):  # 3.12+\n                    nm_tpl.__class_getitem__ = classmethod(typing._generic_class_getitem)\n                else:\n                    class_getitem = typing.Generic.__class_getitem__.__func__\n                    nm_tpl.__class_getitem__ = classmethod(class_getitem)\n            # update from user namespace without overriding special namedtuple attributes\n            for key, val in ns.items():\n                if key in _prohibited_namedtuple_fields:\n                    raise AttributeError(\"Cannot overwrite NamedTuple attribute \" + key)\n                elif key not in _special_namedtuple_fields:\n                    if key not in nm_tpl._fields:\n                        setattr(nm_tpl, key, ns[key])\n                    try:\n                        set_name = type(val).__set_name__\n                    except AttributeError:\n                        pass\n                    else:\n                        try:\n                            set_name(val, nm_tpl, key)\n                        except BaseException as e:\n                            msg = (\n                                f\"Error calling __set_name__ on {type(val).__name__!r} \"\n                                f\"instance {key!r} in {typename!r}\"\n                            )\n                            # BaseException.add_note() existed on py311,\n                            # but the __set_name__ machinery didn't start\n                            # using add_note() until py312.\n                            # Making sure exceptions are raised in the same way\n                            # as in \"normal\" classes seems most important here.\n                            if sys.version_info >= (3, 12):\n                                e.add_note(msg)\n                                raise\n                            else:\n                                raise RuntimeError(msg) from e\n\n            if typing.Generic in bases:\n                nm_tpl.__init_subclass__()\n            return nm_tpl\n\n    _NamedTuple = type.__new__(_NamedTupleMeta, 'NamedTuple', (), {})\n\n    def _namedtuple_mro_entries(bases):\n        assert NamedTuple in bases\n        return (_NamedTuple,)\n\n    @_ensure_subclassable(_namedtuple_mro_entries)\n    def NamedTuple(typename, fields=_marker, /, **kwargs):\n        \"\"\"Typed version of namedtuple.\n\n        Usage::\n\n            class Employee(NamedTuple):\n                name: str\n                id: int\n\n        This is equivalent to::\n\n            Employee = collections.namedtuple('Employee', ['name', 'id'])\n\n        The resulting class has an extra __annotations__ attribute, giving a\n        dict that maps field names to types.  (The field names are also in\n        the _fields attribute, which is part of the namedtuple API.)\n        An alternative equivalent functional syntax is also accepted::\n\n            Employee = NamedTuple('Employee', [('name', str), ('id', int)])\n        \"\"\"\n        if fields is _marker:\n            if kwargs:\n                deprecated_thing = \"Creating NamedTuple classes using keyword arguments\"\n                deprecation_msg = (\n                    \"{name} is deprecated and will be disallowed in Python {remove}. \"\n                    \"Use the class-based or functional syntax instead.\"\n                )\n            else:\n                deprecated_thing = \"Failing to pass a value for the 'fields' parameter\"\n                example = f\"`{typename} = NamedTuple({typename!r}, [])`\"\n                deprecation_msg = (\n                    \"{name} is deprecated and will be disallowed in Python {remove}. \"\n                    \"To create a NamedTuple class with 0 fields \"\n                    \"using the functional syntax, \"\n                    \"pass an empty list, e.g. \"\n                ) + example + \".\"\n        elif fields is None:\n            if kwargs:\n                raise TypeError(\n                    \"Cannot pass `None` as the 'fields' parameter \"\n                    \"and also specify fields using keyword arguments\"\n                )\n            else:\n                deprecated_thing = \"Passing `None` as the 'fields' parameter\"\n                example = f\"`{typename} = NamedTuple({typename!r}, [])`\"\n                deprecation_msg = (\n                    \"{name} is deprecated and will be disallowed in Python {remove}. \"\n                    \"To create a NamedTuple class with 0 fields \"\n                    \"using the functional syntax, \"\n                    \"pass an empty list, e.g. \"\n                ) + example + \".\"\n        elif kwargs:\n            raise TypeError(\"Either list of fields or keywords\"\n                            \" can be provided to NamedTuple, not both\")\n        if fields is _marker or fields is None:\n            warnings.warn(\n                deprecation_msg.format(name=deprecated_thing, remove=\"3.15\"),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            fields = kwargs.items()\n        nt = _make_nmtuple(typename, fields, module=_caller())\n        nt.__orig_bases__ = (NamedTuple,)\n        return nt\n\n\nif hasattr(collections.abc, \"Buffer\"):\n    Buffer = collections.abc.Buffer\nelse:\n    class Buffer(abc.ABC):  # noqa: B024\n        \"\"\"Base class for classes that implement the buffer protocol.\n\n        The buffer protocol allows Python objects to expose a low-level\n        memory buffer interface. Before Python 3.12, it is not possible\n        to implement the buffer protocol in pure Python code, or even\n        to check whether a class implements the buffer protocol. In\n        Python 3.12 and higher, the ``__buffer__`` method allows access\n        to the buffer protocol from Python code, and the\n        ``collections.abc.Buffer`` ABC allows checking whether a class\n        implements the buffer protocol.\n\n        To indicate support for the buffer protocol in earlier versions,\n        inherit from this ABC, either in a stub file or at runtime,\n        or use ABC registration. This ABC provides no methods, because\n        there is no Python-accessible methods shared by pre-3.12 buffer\n        classes. It is useful primarily for static checks.\n\n        \"\"\"\n\n    # As a courtesy, register the most common stdlib buffer classes.\n    Buffer.register(memoryview)\n    Buffer.register(bytearray)\n    Buffer.register(bytes)\n\n\n# Backport of types.get_original_bases, available on 3.12+ in CPython\nif hasattr(_types, \"get_original_bases\"):\n    get_original_bases = _types.get_original_bases\nelse:\n    def get_original_bases(cls, /):\n        \"\"\"Return the class's \"original\" bases prior to modification by `__mro_entries__`.\n\n        Examples::\n\n            from typing import TypeVar, Generic\n            from typing_extensions import NamedTuple, TypedDict\n\n            T = TypeVar(\"T\")\n            class Foo(Generic[T]): ...\n            class Bar(Foo[int], float): ...\n            class Baz(list[str]): ...\n            Eggs = NamedTuple(\"Eggs\", [(\"a\", int), (\"b\", str)])\n            Spam = TypedDict(\"Spam\", {\"a\": int, \"b\": str})\n\n            assert get_original_bases(Bar) == (Foo[int], float)\n            assert get_original_bases(Baz) == (list[str],)\n            assert get_original_bases(Eggs) == (NamedTuple,)\n            assert get_original_bases(Spam) == (TypedDict,)\n            assert get_original_bases(int) == (object,)\n        \"\"\"\n        try:\n            return cls.__dict__.get(\"__orig_bases__\", cls.__bases__)\n        except AttributeError:\n            raise TypeError(\n                f'Expected an instance of type, not {type(cls).__name__!r}'\n            ) from None\n\n\n# NewType is a class on Python 3.10+, making it pickleable\n# The error message for subclassing instances of NewType was improved on 3.11+\nif sys.version_info >= (3, 11):\n    NewType = typing.NewType\nelse:\n    class NewType:\n        \"\"\"NewType creates simple unique types with almost zero\n        runtime overhead. NewType(name, tp) is considered a subtype of tp\n        by static type checkers. At runtime, NewType(name, tp) returns\n        a dummy callable that simply returns its argument. Usage::\n            UserId = NewType('UserId', int)\n            def name_by_id(user_id: UserId) -> str:\n                ...\n            UserId('user')          # Fails type check\n            name_by_id(42)          # Fails type check\n            name_by_id(UserId(42))  # OK\n            num = UserId(5) + 1     # type: int\n        \"\"\"\n\n        def __call__(self, obj, /):\n            return obj\n\n        def __init__(self, name, tp):\n            self.__qualname__ = name\n            if '.' in name:\n                name = name.rpartition('.')[-1]\n            self.__name__ = name\n            self.__supertype__ = tp\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n\n        def __mro_entries__(self, bases):\n            # We defined __mro_entries__ to get a better error message\n            # if a user attempts to subclass a NewType instance. bpo-46170\n            supercls_name = self.__name__\n\n            class Dummy:\n                def __init_subclass__(cls):\n                    subcls_name = cls.__name__\n                    raise TypeError(\n                        f\"Cannot subclass an instance of NewType. \"\n                        f\"Perhaps you were looking for: \"\n                        f\"`{subcls_name} = NewType({subcls_name!r}, {supercls_name})`\"\n                    )\n\n            return (Dummy,)\n\n        def __repr__(self):\n            return f'{self.__module__}.{self.__qualname__}'\n\n        def __reduce__(self):\n            return self.__qualname__\n\n        if sys.version_info >= (3, 10):\n            # PEP 604 methods\n            # It doesn't make sense to have these methods on Python <3.10\n\n            def __or__(self, other):\n                return typing.Union[self, other]\n\n            def __ror__(self, other):\n                return typing.Union[other, self]\n\n\nif hasattr(typing, \"TypeAliasType\"):\n    TypeAliasType = typing.TypeAliasType\nelse:\n    def _is_unionable(obj):\n        \"\"\"Corresponds to is_unionable() in unionobject.c in CPython.\"\"\"\n        return obj is None or isinstance(obj, (\n            type,\n            _types.GenericAlias,\n            _types.UnionType,\n            TypeAliasType,\n        ))\n\n    class TypeAliasType:\n        \"\"\"Create named, parameterized type aliases.\n\n        This provides a backport of the new `type` statement in Python 3.12:\n\n            type ListOrSet[T] = list[T] | set[T]\n\n        is equivalent to:\n\n            T = TypeVar(\"T\")\n            ListOrSet = TypeAliasType(\"ListOrSet\", list[T] | set[T], type_params=(T,))\n\n        The name ListOrSet can then be used as an alias for the type it refers to.\n\n        The type_params argument should contain all the type parameters used\n        in the value of the type alias. If the alias is not generic, this\n        argument is omitted.\n\n        Static type checkers should only support type aliases declared using\n        TypeAliasType that follow these rules:\n\n        - The first argument (the name) must be a string literal.\n        - The TypeAliasType instance must be immediately assigned to a variable\n          of the same name. (For example, 'X = TypeAliasType(\"Y\", int)' is invalid,\n          as is 'X, Y = TypeAliasType(\"X\", int), TypeAliasType(\"Y\", int)').\n\n        \"\"\"\n\n        def __init__(self, name: str, value, *, type_params=()):\n            if not isinstance(name, str):\n                raise TypeError(\"TypeAliasType name must be a string\")\n            self.__value__ = value\n            self.__type_params__ = type_params\n\n            parameters = []\n            for type_param in type_params:\n                if isinstance(type_param, TypeVarTuple):\n                    parameters.extend(type_param)\n                else:\n                    parameters.append(type_param)\n            self.__parameters__ = tuple(parameters)\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n            # Setting this attribute closes the TypeAliasType from further modification\n            self.__name__ = name\n\n        def __setattr__(self, name: str, value: object, /) -> None:\n            if hasattr(self, \"__name__\"):\n                self._raise_attribute_error(name)\n            super().__setattr__(name, value)\n\n        def __delattr__(self, name: str, /) -> Never:\n            self._raise_attribute_error(name)\n\n        def _raise_attribute_error(self, name: str) -> Never:\n            # Match the Python 3.12 error messages exactly\n            if name == \"__name__\":\n                raise AttributeError(\"readonly attribute\")\n            elif name in {\"__value__\", \"__type_params__\", \"__parameters__\", \"__module__\"}:\n                raise AttributeError(\n                    f\"attribute '{name}' of 'typing.TypeAliasType' objects \"\n                    \"is not writable\"\n                )\n            else:\n                raise AttributeError(\n                    f\"'typing.TypeAliasType' object has no attribute '{name}'\"\n                )\n\n        def __repr__(self) -> str:\n            return self.__name__\n\n        def __getitem__(self, parameters):\n            if not isinstance(parameters, tuple):\n                parameters = (parameters,)\n            parameters = [\n                typing._type_check(\n                    item, f'Subscripting {self.__name__} requires a type.'\n                )\n                for item in parameters\n            ]\n            return typing._GenericAlias(self, tuple(parameters))\n\n        def __reduce__(self):\n            return self.__name__\n\n        def __init_subclass__(cls, *args, **kwargs):\n            raise TypeError(\n                \"type 'typing_extensions.TypeAliasType' is not an acceptable base type\"\n            )\n\n        # The presence of this method convinces typing._type_check\n        # that TypeAliasTypes are types.\n        def __call__(self):\n            raise TypeError(\"Type alias is not callable\")\n\n        if sys.version_info >= (3, 10):\n            def __or__(self, right):\n                # For forward compatibility with 3.12, reject Unions\n                # that are not accepted by the built-in Union.\n                if not _is_unionable(right):\n                    return NotImplemented\n                return typing.Union[self, right]\n\n            def __ror__(self, left):\n                if not _is_unionable(left):\n                    return NotImplemented\n                return typing.Union[left, self]\n\n\nif hasattr(typing, \"is_protocol\"):\n    is_protocol = typing.is_protocol\n    get_protocol_members = typing.get_protocol_members\nelse:\n    def is_protocol(tp: type, /) -> bool:\n        \"\"\"Return True if the given type is a Protocol.\n\n        Example::\n\n            >>> from typing_extensions import Protocol, is_protocol\n            >>> class P(Protocol):\n            ...     def a(self) -> str: ...\n            ...     b: int\n            >>> is_protocol(P)\n            True\n            >>> is_protocol(int)\n            False\n        \"\"\"\n        return (\n            isinstance(tp, type)\n            and getattr(tp, '_is_protocol', False)\n            and tp is not Protocol\n            and tp is not typing.Protocol\n        )\n\n    def get_protocol_members(tp: type, /) -> typing.FrozenSet[str]:\n        \"\"\"Return the set of members defined in a Protocol.\n\n        Example::\n\n            >>> from typing_extensions import Protocol, get_protocol_members\n            >>> class P(Protocol):\n            ...     def a(self) -> str: ...\n            ...     b: int\n            >>> get_protocol_members(P)\n            frozenset({'a', 'b'})\n\n        Raise a TypeError for arguments that are not Protocols.\n        \"\"\"\n        if not is_protocol(tp):\n            raise TypeError(f'{tp!r} is not a Protocol')\n        if hasattr(tp, '__protocol_attrs__'):\n            return frozenset(tp.__protocol_attrs__)\n        return frozenset(_get_protocol_attrs(tp))\n\n\nif hasattr(typing, \"Doc\"):\n    Doc = typing.Doc\nelse:\n    class Doc:\n        \"\"\"Define the documentation of a type annotation using ``Annotated``, to be\n         used in class attributes, function and method parameters, return values,\n         and variables.\n\n        The value should be a positional-only string literal to allow static tools\n        like editors and documentation generators to use it.\n\n        This complements docstrings.\n\n        The string value passed is available in the attribute ``documentation``.\n\n        Example::\n\n            >>> from typing_extensions import Annotated, Doc\n            >>> def hi(to: Annotated[str, Doc(\"Who to say hi to\")]) -> None: ...\n        \"\"\"\n        def __init__(self, documentation: str, /) -> None:\n            self.documentation = documentation\n\n        def __repr__(self) -> str:\n            return f\"Doc({self.documentation!r})\"\n\n        def __hash__(self) -> int:\n            return hash(self.documentation)\n\n        def __eq__(self, other: object) -> bool:\n            if not isinstance(other, Doc):\n                return NotImplemented\n            return self.documentation == other.documentation\n\n\n_CapsuleType = getattr(_types, \"CapsuleType\", None)\n\nif _CapsuleType is None:\n    try:\n        import _socket\n    except ImportError:\n        pass\n    else:\n        _CAPI = getattr(_socket, \"CAPI\", None)\n        if _CAPI is not None:\n            _CapsuleType = type(_CAPI)\n\nif _CapsuleType is not None:\n    CapsuleType = _CapsuleType\n    __all__.append(\"CapsuleType\")\n\n\n# Using this convoluted approach so that this keeps working\n# whether we end up using PEP 649 as written, PEP 749, or\n# some other variation: in any case, inspect.get_annotations\n# will continue to exist and will gain a `format` parameter.\n_PEP_649_OR_749_IMPLEMENTED = (\n    hasattr(inspect, 'get_annotations')\n    and inspect.get_annotations.__kwdefaults__ is not None\n    and \"format\" in inspect.get_annotations.__kwdefaults__\n)\n\n\nclass Format(enum.IntEnum):\n    VALUE = 1\n    FORWARDREF = 2\n    SOURCE = 3\n\n\nif _PEP_649_OR_749_IMPLEMENTED:\n    get_annotations = inspect.get_annotations\nelse:\n    def get_annotations(obj, *, globals=None, locals=None, eval_str=False,\n                        format=Format.VALUE):\n        \"\"\"Compute the annotations dict for an object.\n\n        obj may be a callable, class, or module.\n        Passing in an object of any other type raises TypeError.\n\n        Returns a dict.  get_annotations() returns a new dict every time\n        it's called; calling it twice on the same object will return two\n        different but equivalent dicts.\n\n        This is a backport of `inspect.get_annotations`, which has been\n        in the standard library since Python 3.10. See the standard library\n        documentation for more:\n\n            https://docs.python.org/3/library/inspect.html#inspect.get_annotations\n\n        This backport adds the *format* argument introduced by PEP 649. The\n        three formats supported are:\n        * VALUE: the annotations are returned as-is. This is the default and\n          it is compatible with the behavior on previous Python versions.\n        * FORWARDREF: return annotations as-is if possible, but replace any\n          undefined names with ForwardRef objects. The implementation proposed by\n          PEP 649 relies on language changes that cannot be backported; the\n          typing-extensions implementation simply returns the same result as VALUE.\n        * SOURCE: return annotations as strings, in a format close to the original\n          source. Again, this behavior cannot be replicated directly in a backport.\n          As an approximation, typing-extensions retrieves the annotations under\n          VALUE semantics and then stringifies them.\n\n        The purpose of this backport is to allow users who would like to use\n        FORWARDREF or SOURCE semantics once PEP 649 is implemented, but who also\n        want to support earlier Python versions, to simply write:\n\n            typing_extensions.get_annotations(obj, format=Format.FORWARDREF)\n\n        \"\"\"\n        format = Format(format)\n\n        if eval_str and format is not Format.VALUE:\n            raise ValueError(\"eval_str=True is only supported with format=Format.VALUE\")\n\n        if isinstance(obj, type):\n            # class\n            obj_dict = getattr(obj, '__dict__', None)\n            if obj_dict and hasattr(obj_dict, 'get'):\n                ann = obj_dict.get('__annotations__', None)\n                if isinstance(ann, _types.GetSetDescriptorType):\n                    ann = None\n            else:\n                ann = None\n\n            obj_globals = None\n            module_name = getattr(obj, '__module__', None)\n            if module_name:\n                module = sys.modules.get(module_name, None)\n                if module:\n                    obj_globals = getattr(module, '__dict__', None)\n            obj_locals = dict(vars(obj))\n            unwrap = obj\n        elif isinstance(obj, _types.ModuleType):\n            # module\n            ann = getattr(obj, '__annotations__', None)\n            obj_globals = obj.__dict__\n            obj_locals = None\n            unwrap = None\n        elif callable(obj):\n            # this includes types.Function, types.BuiltinFunctionType,\n            # types.BuiltinMethodType, functools.partial, functools.singledispatch,\n            # \"class funclike\" from Lib/test/test_inspect... on and on it goes.\n            ann = getattr(obj, '__annotations__', None)\n            obj_globals = getattr(obj, '__globals__', None)\n            obj_locals = None\n            unwrap = obj\n        elif hasattr(obj, '__annotations__'):\n            ann = obj.__annotations__\n            obj_globals = obj_locals = unwrap = None\n        else:\n            raise TypeError(f\"{obj!r} is not a module, class, or callable.\")\n\n        if ann is None:\n            return {}\n\n        if not isinstance(ann, dict):\n            raise ValueError(f\"{obj!r}.__annotations__ is neither a dict nor None\")\n\n        if not ann:\n            return {}\n\n        if not eval_str:\n            if format is Format.SOURCE:\n                return {\n                    key: value if isinstance(value, str) else typing._type_repr(value)\n                    for key, value in ann.items()\n                }\n            return dict(ann)\n\n        if unwrap is not None:\n            while True:\n                if hasattr(unwrap, '__wrapped__'):\n                    unwrap = unwrap.__wrapped__\n                    continue\n                if isinstance(unwrap, functools.partial):\n                    unwrap = unwrap.func\n                    continue\n                break\n            if hasattr(unwrap, \"__globals__\"):\n                obj_globals = unwrap.__globals__\n\n        if globals is None:\n            globals = obj_globals\n        if locals is None:\n            locals = obj_locals or {}\n\n        # \"Inject\" type parameters into the local namespace\n        # (unless they are shadowed by assignments *in* the local namespace),\n        # as a way of emulating annotation scopes when calling `eval()`\n        if type_params := getattr(obj, \"__type_params__\", ()):\n            locals = {param.__name__: param for param in type_params} | locals\n\n        return_value = {key:\n            value if not isinstance(value, str) else eval(value, globals, locals)\n            for key, value in ann.items() }\n        return return_value\n\n# Aliases for items that have always been in typing.\n# Explicitly assign these (rather than using `from typing import *` at the top),\n# so that we get a CI error if one of these is deleted from typing.py\n# in a future version of Python\nAbstractSet = typing.AbstractSet\nAnyStr = typing.AnyStr\nBinaryIO = typing.BinaryIO\nCallable = typing.Callable\nCollection = typing.Collection\nContainer = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator\n", "src/test_typing_extensions.py": "import abc\nimport collections\nimport collections.abc\nimport contextlib\nimport copy\nimport functools\nimport gc\nimport importlib\nimport inspect\nimport io\nimport pickle\nimport re\nimport subprocess\nimport sys\nimport tempfile\nimport textwrap\nimport types\nimport typing\nimport warnings\nfrom collections import defaultdict\nfrom functools import lru_cache\nfrom pathlib import Path\nfrom unittest import TestCase, main, skipIf, skipUnless\nfrom unittest.mock import patch\n\nimport typing_extensions\nfrom _typed_dict_test_helper import Foo, FooGeneric, VeryAnnotated\nfrom typing_extensions import (\n    _PEP_649_OR_749_IMPLEMENTED,\n    Annotated,\n    Any,\n    AnyStr,\n    AsyncContextManager,\n    AsyncIterator,\n    Awaitable,\n    Buffer,\n    Callable,\n    ClassVar,\n    Concatenate,\n    Dict,\n    Doc,\n    Final,\n    Format,\n    Generic,\n    IntVar,\n    Iterable,\n    Iterator,\n    List,\n    Literal,\n    LiteralString,\n    NamedTuple,\n    Never,\n    NewType,\n    NoDefault,\n    NoReturn,\n    NotRequired,\n    Optional,\n    ParamSpec,\n    ParamSpecArgs,\n    ParamSpecKwargs,\n    Protocol,\n    ReadOnly,\n    Required,\n    Self,\n    Set,\n    Tuple,\n    Type,\n    TypeAlias,\n    TypeAliasType,\n    TypedDict,\n    TypeExpr,\n    TypeGuard,\n    TypeIs,\n    TypeVar,\n    TypeVarTuple,\n    Union,\n    Unpack,\n    assert_never,\n    assert_type,\n    clear_overloads,\n    dataclass_transform,\n    deprecated,\n    final,\n    get_annotations,\n    get_args,\n    get_origin,\n    get_original_bases,\n    get_overloads,\n    get_protocol_members,\n    get_type_hints,\n    is_protocol,\n    is_typeddict,\n    no_type_check,\n    overload,\n    override,\n    reveal_type,\n    runtime,\n    runtime_checkable,\n)\n\nNoneType = type(None)\nT = TypeVar(\"T\")\nKT = TypeVar(\"KT\")\nVT = TypeVar(\"VT\")\n\n# Flags used to mark tests that only apply after a specific\n# version of the typing module.\nTYPING_3_9_0 = sys.version_info[:3] >= (3, 9, 0)\nTYPING_3_10_0 = sys.version_info[:3] >= (3, 10, 0)\n\n# 3.11 makes runtime type checks (_type_check) more lenient.\nTYPING_3_11_0 = sys.version_info[:3] >= (3, 11, 0)\n\n# 3.12 changes the representation of Unpack[] (PEP 692)\n# and adds PEP 695 to CPython's grammar\nTYPING_3_12_0 = sys.version_info[:3] >= (3, 12, 0)\n\n# 3.13 drops support for the keyword argument syntax of TypedDict\nTYPING_3_13_0 = sys.version_info[:3] >= (3, 13, 0)\n\n# https://github.com/python/cpython/pull/27017 was backported into some 3.9 and 3.10\n# versions, but not all\nHAS_FORWARD_MODULE = \"module\" in inspect.signature(typing._type_check).parameters\n\nskip_if_py313_beta_1 = skipIf(\n    sys.version_info[:5] == (3, 13, 0, 'beta', 1),\n    \"Bugfixes will be released in 3.13.0b2\"\n)\n\nANN_MODULE_SOURCE = '''\\\nimport sys\nfrom typing import List, Optional\nfrom functools import wraps\n\ntry:\n    __annotations__[1] = 2\nexcept NameError:\n    assert sys.version_info >= (3, 14)\n\nclass C:\n\n    x = 5; y: Optional['C'] = None\n\nfrom typing import Tuple\nx: int = 5; y: str = x; f: Tuple[int, int]\n\nclass M(type):\n    try:\n        __annotations__['123'] = 123\n    except NameError:\n        assert sys.version_info >= (3, 14)\n    o: type = object\n\n(pars): bool = True\n\nclass D(C):\n    j: str = 'hi'; k: str= 'bye'\n\nfrom types import new_class\nh_class = new_class('H', (C,))\nj_class = new_class('J')\n\nclass F():\n    z: int = 5\n    def __init__(self, x):\n        pass\n\nclass Y(F):\n    def __init__(self):\n        super(F, self).__init__(123)\n\nclass Meta(type):\n    def __new__(meta, name, bases, namespace):\n        return super().__new__(meta, name, bases, namespace)\n\nclass S(metaclass = Meta):\n    x: str = 'something'\n    y: str = 'something else'\n\ndef foo(x: int = 10):\n    def bar(y: List[str]):\n        x: str = 'yes'\n    bar()\n\ndef dec(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper\n'''\n\nANN_MODULE_2_SOURCE = '''\\\nfrom typing import no_type_check, ClassVar\n\ni: int = 1\nj: int\nx: float = i/10\n\ndef f():\n    class C: ...\n    return C()\n\nf().new_attr: object = object()\n\nclass C:\n    def __init__(self, x: int) -> None:\n        self.x = x\n\nc = C(5)\nc.new_attr: int = 10\n\n__annotations__ = {}\n\n\n@no_type_check\nclass NTC:\n    def meth(self, param: complex) -> None:\n        ...\n\nclass CV:\n    var: ClassVar['CV']\n\nCV.var = CV()\n'''\n\nANN_MODULE_3_SOURCE = '''\\\ndef f_bad_ann():\n    __annotations__[1] = 2\n\nclass C_OK:\n    def __init__(self, x: int) -> None:\n        self.x: no_such_name = x  # This one is OK as proposed by Guido\n\nclass D_bad_ann:\n    def __init__(self, x: int) -> None:\n        sfel.y: int = 0\n\ndef g_bad_ann():\n    no_such_name.attr: int = 0\n'''\n\n\nSTOCK_ANNOTATIONS = \"\"\"\na:int=3\nb:str=\"foo\"\n\nclass MyClass:\n    a:int=4\n    b:str=\"bar\"\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        return isinstance(other, MyClass) and self.a == other.a and self.b == other.b\n\ndef function(a:int, b:str) -> MyClass:\n    return MyClass(a, b)\n\n\ndef function2(a:int, b:\"str\", c:MyClass) -> MyClass:\n    pass\n\n\ndef function3(a:\"int\", b:\"str\", c:\"MyClass\"):\n    pass\n\n\nclass UnannotatedClass:\n    pass\n\ndef unannotated_function(a, b, c): pass\n\"\"\"\n\nSTRINGIZED_ANNOTATIONS = \"\"\"\nfrom __future__ import annotations\n\na:int=3\nb:str=\"foo\"\n\nclass MyClass:\n    a:int=4\n    b:str=\"bar\"\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        return isinstance(other, MyClass) and self.a == other.a and self.b == other.b\n\ndef function(a:int, b:str) -> MyClass:\n    return MyClass(a, b)\n\n\ndef function2(a:int, b:\"str\", c:MyClass) -> MyClass:\n    pass\n\n\ndef function3(a:\"int\", b:\"str\", c:\"MyClass\"):\n    pass\n\n\nclass UnannotatedClass:\n    pass\n\ndef unannotated_function(a, b, c): pass\n\nclass MyClassWithLocalAnnotations:\n    mytype = int\n    x: mytype\n\"\"\"\n\nSTRINGIZED_ANNOTATIONS_2 = \"\"\"\nfrom __future__ import annotations\n\n\ndef foo(a, b, c):  pass\n\"\"\"\n\nif TYPING_3_12_0:\n    STRINGIZED_ANNOTATIONS_PEP_695 = textwrap.dedent(\n        \"\"\"\n        from __future__ import annotations\n        from typing import Callable, Unpack\n\n\n        class A[T, *Ts, **P]:\n            x: T\n            y: tuple[*Ts]\n            z: Callable[P, str]\n\n\n        class B[T, *Ts, **P]:\n            T = int\n            Ts = str\n            P = bytes\n            x: T\n            y: Ts\n            z: P\n\n\n        Eggs = int\n        Spam = str\n\n\n        class C[Eggs, **Spam]:\n            x: Eggs\n            y: Spam\n\n\n        def generic_function[T, *Ts, **P](\n            x: T, *y: Unpack[Ts], z: P.args, zz: P.kwargs\n        ) -> None: ...\n\n\n        def generic_function_2[Eggs, **Spam](x: Eggs, y: Spam): pass\n\n\n        class D:\n            Foo = int\n            Bar = str\n\n            def generic_method[Foo, **Bar](\n                self, x: Foo, y: Bar\n            ) -> None: ...\n\n            def generic_method_2[Eggs, **Spam](self, x: Eggs, y: Spam): pass\n\n\n        # Eggs is `int` in globals, a TypeVar in type_params, and `str` in locals:\n        class E[Eggs]:\n            Eggs = str\n            x: Eggs\n\n\n\n        def nested():\n            from types import SimpleNamespace\n            from typing_extensions import get_annotations\n\n            Eggs = bytes\n            Spam = memoryview\n\n\n            class F[Eggs, **Spam]:\n                x: Eggs\n                y: Spam\n\n                def generic_method[Eggs, **Spam](self, x: Eggs, y: Spam): pass\n\n\n            def generic_function[Eggs, **Spam](x: Eggs, y: Spam): pass\n\n\n            # Eggs is `int` in globals, `bytes` in the function scope,\n            # a TypeVar in the type_params, and `str` in locals:\n            class G[Eggs]:\n                Eggs = str\n                x: Eggs\n\n\n            return SimpleNamespace(\n                F=F,\n                F_annotations=get_annotations(F, eval_str=True),\n                F_meth_annotations=get_annotations(F.generic_method, eval_str=True),\n                G_annotations=get_annotations(G, eval_str=True),\n                generic_func=generic_function,\n                generic_func_annotations=get_annotations(generic_function, eval_str=True)\n            )\n        \"\"\"\n    )\nelse:\n    STRINGIZED_ANNOTATIONS_PEP_695 = None\n\n\nclass BaseTestCase(TestCase):\n    def assertIsSubclass(self, cls, class_or_tuple, msg=None):\n        if not issubclass(cls, class_or_tuple):\n            message = f'{cls!r} is not a subclass of {class_or_tuple!r}'\n            if msg is not None:\n                message += f' : {msg}'\n            raise self.failureException(message)\n\n    def assertNotIsSubclass(self, cls, class_or_tuple, msg=None):\n        if issubclass(cls, class_or_tuple):\n            message = f'{cls!r} is a subclass of {class_or_tuple!r}'\n            if msg is not None:\n                message += f' : {msg}'\n            raise self.failureException(message)\n\n\nclass Employee:\n    pass\n\n\nclass BottomTypeTestsMixin:\n    bottom_type: ClassVar[Any]\n\n    def test_equality(self):\n        self.assertEqual(self.bottom_type, self.bottom_type)\n        self.assertIs(self.bottom_type, self.bottom_type)\n        self.assertNotEqual(self.bottom_type, None)\n\n    def test_get_origin(self):\n        self.assertIs(get_origin(self.bottom_type), None)\n\n    def test_instance_type_error(self):\n        with self.assertRaises(TypeError):\n            isinstance(42, self.bottom_type)\n\n    def test_subclass_type_error(self):\n        with self.assertRaises(TypeError):\n            issubclass(Employee, self.bottom_type)\n        with self.assertRaises(TypeError):\n            issubclass(NoReturn, self.bottom_type)\n\n    def test_not_generic(self):\n        with self.assertRaises(TypeError):\n            self.bottom_type[int]\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class A(self.bottom_type):\n                pass\n        with self.assertRaises(TypeError):\n            class B(type(self.bottom_type)):\n                pass\n\n    def test_cannot_instantiate(self):\n        with self.assertRaises(TypeError):\n            self.bottom_type()\n        with self.assertRaises(TypeError):\n            type(self.bottom_type)()\n\n    def test_pickle(self):\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            pickled = pickle.dumps(self.bottom_type, protocol=proto)\n            self.assertIs(self.bottom_type, pickle.loads(pickled))\n\n\nclass NoReturnTests(BottomTypeTestsMixin, BaseTestCase):\n    bottom_type = NoReturn\n\n    def test_repr(self):\n        if hasattr(typing, 'NoReturn'):\n            self.assertEqual(repr(NoReturn), 'typing.NoReturn')\n        else:\n            self.assertEqual(repr(NoReturn), 'typing_extensions.NoReturn')\n\n    def test_get_type_hints(self):\n        def some(arg: NoReturn) -> NoReturn: ...\n        def some_str(arg: 'NoReturn') -> 'typing.NoReturn': ...\n\n        expected = {'arg': NoReturn, 'return': NoReturn}\n        for target in some, some_str:\n            with self.subTest(target=target):\n                self.assertEqual(gth(target), expected)\n\n    def test_not_equality(self):\n        self.assertNotEqual(NoReturn, Never)\n        self.assertNotEqual(Never, NoReturn)\n\n\nclass NeverTests(BottomTypeTestsMixin, BaseTestCase):\n    bottom_type = Never\n\n    def test_repr(self):\n        if hasattr(typing, 'Never'):\n            self.assertEqual(repr(Never), 'typing.Never')\n        else:\n            self.assertEqual(repr(Never), 'typing_extensions.Never')\n\n    def test_get_type_hints(self):\n        def some(arg: Never) -> Never: ...\n        def some_str(arg: 'Never') -> 'typing_extensions.Never': ...\n\n        expected = {'arg': Never, 'return': Never}\n        for target in [some, some_str]:\n            with self.subTest(target=target):\n                self.assertEqual(gth(target), expected)\n\n\nclass AssertNeverTests(BaseTestCase):\n    def test_exception(self):\n        with self.assertRaises(AssertionError):\n            assert_never(None)\n\n        value = \"some value\"\n        with self.assertRaisesRegex(AssertionError, value):\n            assert_never(value)\n\n        # Make sure a huge value doesn't get printed in its entirety\n        huge_value = \"a\" * 10000\n        with self.assertRaises(AssertionError) as cm:\n            assert_never(huge_value)\n        self.assertLess(\n            len(cm.exception.args[0]),\n            typing_extensions._ASSERT_NEVER_REPR_MAX_LENGTH * 2,\n        )\n\n\nclass OverrideTests(BaseTestCase):\n    def test_override(self):\n        class Base:\n            def normal_method(self): ...\n            @staticmethod\n            def static_method_good_order(): ...\n            @staticmethod\n            def static_method_bad_order(): ...\n            @staticmethod\n            def decorator_with_slots(): ...\n\n        class Derived(Base):\n            @override\n            def normal_method(self):\n                return 42\n\n            @staticmethod\n            @override\n            def static_method_good_order():\n                return 42\n\n            @override\n            @staticmethod\n            def static_method_bad_order():\n                return 42\n\n        self.assertIsSubclass(Derived, Base)\n        instance = Derived()\n        self.assertEqual(instance.normal_method(), 42)\n        self.assertIs(True, instance.normal_method.__override__)\n        self.assertEqual(Derived.static_method_good_order(), 42)\n        self.assertIs(True, Derived.static_method_good_order.__override__)\n        self.assertEqual(Derived.static_method_bad_order(), 42)\n        self.assertIs(False, hasattr(Derived.static_method_bad_order, \"__override__\"))\n\n\nclass DeprecatedTests(BaseTestCase):\n    def test_dunder_deprecated(self):\n        @deprecated(\"A will go away soon\")\n        class A:\n            pass\n\n        self.assertEqual(A.__deprecated__, \"A will go away soon\")\n        self.assertIsInstance(A, type)\n\n        @deprecated(\"b will go away soon\")\n        def b():\n            pass\n\n        self.assertEqual(b.__deprecated__, \"b will go away soon\")\n        self.assertIsInstance(b, types.FunctionType)\n\n        @overload\n        @deprecated(\"no more ints\")\n        def h(x: int) -> int: ...\n        @overload\n        def h(x: str) -> str: ...\n        def h(x):\n            return x\n\n        overloads = get_overloads(h)\n        self.assertEqual(len(overloads), 2)\n        self.assertEqual(overloads[0].__deprecated__, \"no more ints\")\n\n    def test_class(self):\n        @deprecated(\"A will go away soon\")\n        class A:\n            pass\n\n        with self.assertWarnsRegex(DeprecationWarning, \"A will go away soon\"):\n            A()\n        with self.assertWarnsRegex(DeprecationWarning, \"A will go away soon\"):\n            with self.assertRaises(TypeError):\n                A(42)\n\n    def test_class_with_init(self):\n        @deprecated(\"HasInit will go away soon\")\n        class HasInit:\n            def __init__(self, x):\n                self.x = x\n\n        with self.assertWarnsRegex(DeprecationWarning, \"HasInit will go away soon\"):\n            instance = HasInit(42)\n        self.assertEqual(instance.x, 42)\n\n    def test_class_with_new(self):\n        has_new_called = False\n\n        @deprecated(\"HasNew will go away soon\")\n        class HasNew:\n            def __new__(cls, x):\n                nonlocal has_new_called\n                has_new_called = True\n                return super().__new__(cls)\n\n            def __init__(self, x) -> None:\n                self.x = x\n\n        with self.assertWarnsRegex(DeprecationWarning, \"HasNew will go away soon\"):\n            instance = HasNew(42)\n        self.assertEqual(instance.x, 42)\n        self.assertTrue(has_new_called)\n\n    def test_class_with_inherited_new(self):\n        new_base_called = False\n\n        class NewBase:\n            def __new__(cls, x):\n                nonlocal new_base_called\n                new_base_called = True\n                return super().__new__(cls)\n\n            def __init__(self, x) -> None:\n                self.x = x\n\n        @deprecated(\"HasInheritedNew will go away soon\")\n        class HasInheritedNew(NewBase):\n            pass\n\n        with self.assertWarnsRegex(DeprecationWarning, \"HasInheritedNew will go away soon\"):\n            instance = HasInheritedNew(42)\n        self.assertEqual(instance.x, 42)\n        self.assertTrue(new_base_called)\n\n    def test_class_with_new_but_no_init(self):\n        new_called = False\n\n        @deprecated(\"HasNewNoInit will go away soon\")\n        class HasNewNoInit:\n            def __new__(cls, x):\n                nonlocal new_called\n                new_called = True\n                obj = super().__new__(cls)\n                obj.x = x\n                return obj\n\n        with self.assertWarnsRegex(DeprecationWarning, \"HasNewNoInit will go away soon\"):\n            instance = HasNewNoInit(42)\n        self.assertEqual(instance.x, 42)\n        self.assertTrue(new_called)\n\n    def test_mixin_class(self):\n        @deprecated(\"Mixin will go away soon\")\n        class Mixin:\n            pass\n\n        class Base:\n            def __init__(self, a) -> None:\n                self.a = a\n\n        with self.assertWarnsRegex(DeprecationWarning, \"Mixin will go away soon\"):\n            class Child(Base, Mixin):\n                pass\n\n        instance = Child(42)\n        self.assertEqual(instance.a, 42)\n\n    def test_existing_init_subclass(self):\n        @deprecated(\"C will go away soon\")\n        class C:\n            def __init_subclass__(cls) -> None:\n                cls.inited = True\n\n        with self.assertWarnsRegex(DeprecationWarning, \"C will go away soon\"):\n            C()\n\n        with self.assertWarnsRegex(DeprecationWarning, \"C will go away soon\"):\n            class D(C):\n                pass\n\n        self.assertTrue(D.inited)\n        self.assertIsInstance(D(), D)  # no deprecation\n\n    def test_existing_init_subclass_in_base(self):\n        class Base:\n            def __init_subclass__(cls, x) -> None:\n                cls.inited = x\n\n        @deprecated(\"C will go away soon\")\n        class C(Base, x=42):\n            pass\n\n        self.assertEqual(C.inited, 42)\n\n        with self.assertWarnsRegex(DeprecationWarning, \"C will go away soon\"):\n            C()\n\n        with self.assertWarnsRegex(DeprecationWarning, \"C will go away soon\"):\n            class D(C, x=3):\n                pass\n\n        self.assertEqual(D.inited, 3)\n\n    def test_init_subclass_has_correct_cls(self):\n        init_subclass_saw = None\n\n        @deprecated(\"Base will go away soon\")\n        class Base:\n            def __init_subclass__(cls) -> None:\n                nonlocal init_subclass_saw\n                init_subclass_saw = cls\n\n        self.assertIsNone(init_subclass_saw)\n\n        with self.assertWarnsRegex(DeprecationWarning, \"Base will go away soon\"):\n            class C(Base):\n                pass\n\n        self.assertIs(init_subclass_saw, C)\n\n    def test_init_subclass_with_explicit_classmethod(self):\n        init_subclass_saw = None\n\n        @deprecated(\"Base will go away soon\")\n        class Base:\n            @classmethod\n            def __init_subclass__(cls) -> None:\n                nonlocal init_subclass_saw\n                init_subclass_saw = cls\n\n        self.assertIsNone(init_subclass_saw)\n\n        with self.assertWarnsRegex(DeprecationWarning, \"Base will go away soon\"):\n            class C(Base):\n                pass\n\n        self.assertIs(init_subclass_saw, C)\n\n    def test_function(self):\n        @deprecated(\"b will go away soon\")\n        def b():\n            pass\n\n        with self.assertWarnsRegex(DeprecationWarning, \"b will go away soon\"):\n            b()\n\n    def test_method(self):\n        class Capybara:\n            @deprecated(\"x will go away soon\")\n            def x(self):\n                pass\n\n        instance = Capybara()\n        with self.assertWarnsRegex(DeprecationWarning, \"x will go away soon\"):\n            instance.x()\n\n    def test_property(self):\n        class Capybara:\n            @property\n            @deprecated(\"x will go away soon\")\n            def x(self):\n                pass\n\n            @property\n            def no_more_setting(self):\n                return 42\n\n            @no_more_setting.setter\n            @deprecated(\"no more setting\")\n            def no_more_setting(self, value):\n                pass\n\n        instance = Capybara()\n        with self.assertWarnsRegex(DeprecationWarning, \"x will go away soon\"):\n            instance.x\n\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")\n            self.assertEqual(instance.no_more_setting, 42)\n\n        with self.assertWarnsRegex(DeprecationWarning, \"no more setting\"):\n            instance.no_more_setting = 42\n\n    def test_category(self):\n        @deprecated(\"c will go away soon\", category=RuntimeWarning)\n        def c():\n            pass\n\n        with self.assertWarnsRegex(RuntimeWarning, \"c will go away soon\"):\n            c()\n\n    def test_turn_off_warnings(self):\n        @deprecated(\"d will go away soon\", category=None)\n        def d():\n            pass\n\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")\n            d()\n\n    def test_only_strings_allowed(self):\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Expected an object of type str for 'message', not 'type'\"\n        ):\n            @deprecated\n            class Foo: ...\n\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Expected an object of type str for 'message', not 'function'\"\n        ):\n            @deprecated\n            def foo(): ...\n\n    def test_no_retained_references_to_wrapper_instance(self):\n        @deprecated('depr')\n        def d(): pass\n\n        self.assertFalse(any(\n            isinstance(cell.cell_contents, deprecated) for cell in d.__closure__\n        ))\n\n\nclass AnyTests(BaseTestCase):\n    def test_can_subclass(self):\n        class Mock(Any): pass\n        self.assertTrue(issubclass(Mock, Any))\n        self.assertIsInstance(Mock(), Mock)\n\n        class Something: pass\n        self.assertFalse(issubclass(Something, Any))\n        self.assertNotIsInstance(Something(), Mock)\n\n        class MockSomething(Something, Mock): pass\n        self.assertTrue(issubclass(MockSomething, Any))\n        ms = MockSomething()\n        self.assertIsInstance(ms, MockSomething)\n        self.assertIsInstance(ms, Something)\n        self.assertIsInstance(ms, Mock)\n\n    class SubclassesAny(Any):\n        ...\n\n    def test_repr(self):\n        if sys.version_info >= (3, 11):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(Any), f\"{mod_name}.Any\")\n\n    @skipIf(sys.version_info[:3] == (3, 11, 0), \"A bug was fixed in 3.11.1\")\n    def test_repr_on_Any_subclass(self):\n        self.assertEqual(\n            repr(self.SubclassesAny),\n            f\"<class '{self.SubclassesAny.__module__}.AnyTests.SubclassesAny'>\"\n        )\n\n    def test_instantiation(self):\n        with self.assertRaises(TypeError):\n            Any()\n\n        self.SubclassesAny()\n\n    def test_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(object(), Any)\n\n        isinstance(object(), self.SubclassesAny)\n\n\nclass ClassVarTests(BaseTestCase):\n\n    def test_basics(self):\n        if not TYPING_3_11_0:\n            with self.assertRaises(TypeError):\n                ClassVar[1]\n        with self.assertRaises(TypeError):\n            ClassVar[int, str]\n        with self.assertRaises(TypeError):\n            ClassVar[int][str]\n\n    def test_repr(self):\n        if hasattr(typing, 'ClassVar'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(ClassVar), mod_name + '.ClassVar')\n        cv = ClassVar[int]\n        self.assertEqual(repr(cv), mod_name + '.ClassVar[int]')\n        cv = ClassVar[Employee]\n        self.assertEqual(repr(cv), mod_name + f'.ClassVar[{__name__}.Employee]')\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(ClassVar)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(type(ClassVar[int])):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            ClassVar()\n        with self.assertRaises(TypeError):\n            type(ClassVar)()\n        with self.assertRaises(TypeError):\n            type(ClassVar[Optional[int]])()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, ClassVar[int])\n        with self.assertRaises(TypeError):\n            issubclass(int, ClassVar)\n\n\nclass FinalTests(BaseTestCase):\n\n    def test_basics(self):\n        if not TYPING_3_11_0:\n            with self.assertRaises(TypeError):\n                Final[1]\n        with self.assertRaises(TypeError):\n            Final[int, str]\n        with self.assertRaises(TypeError):\n            Final[int][str]\n\n    def test_repr(self):\n        self.assertEqual(repr(Final), 'typing.Final')\n        cv = Final[int]\n        self.assertEqual(repr(cv), 'typing.Final[int]')\n        cv = Final[Employee]\n        self.assertEqual(repr(cv), f'typing.Final[{__name__}.Employee]')\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(Final)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(type(Final[int])):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            Final()\n        with self.assertRaises(TypeError):\n            type(Final)()\n        with self.assertRaises(TypeError):\n            type(Final[Optional[int]])()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, Final[int])\n        with self.assertRaises(TypeError):\n            issubclass(int, Final)\n\n\nclass RequiredTests(BaseTestCase):\n\n    def test_basics(self):\n        if not TYPING_3_11_0:\n            with self.assertRaises(TypeError):\n                Required[1]\n        with self.assertRaises(TypeError):\n            Required[int, str]\n        with self.assertRaises(TypeError):\n            Required[int][str]\n\n    def test_repr(self):\n        if hasattr(typing, 'Required'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(Required), f'{mod_name}.Required')\n        cv = Required[int]\n        self.assertEqual(repr(cv), f'{mod_name}.Required[int]')\n        cv = Required[Employee]\n        self.assertEqual(repr(cv), f'{mod_name}.Required[{__name__}.Employee]')\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(Required)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(type(Required[int])):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            Required()\n        with self.assertRaises(TypeError):\n            type(Required)()\n        with self.assertRaises(TypeError):\n            type(Required[Optional[int]])()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, Required[int])\n        with self.assertRaises(TypeError):\n            issubclass(int, Required)\n\n\nclass NotRequiredTests(BaseTestCase):\n\n    def test_basics(self):\n        if not TYPING_3_11_0:\n            with self.assertRaises(TypeError):\n                NotRequired[1]\n        with self.assertRaises(TypeError):\n            NotRequired[int, str]\n        with self.assertRaises(TypeError):\n            NotRequired[int][str]\n\n    def test_repr(self):\n        if hasattr(typing, 'NotRequired'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(NotRequired), f'{mod_name}.NotRequired')\n        cv = NotRequired[int]\n        self.assertEqual(repr(cv), f'{mod_name}.NotRequired[int]')\n        cv = NotRequired[Employee]\n        self.assertEqual(repr(cv), f'{mod_name}.NotRequired[{ __name__}.Employee]')\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(NotRequired)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(type(NotRequired[int])):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            NotRequired()\n        with self.assertRaises(TypeError):\n            type(NotRequired)()\n        with self.assertRaises(TypeError):\n            type(NotRequired[Optional[int]])()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, NotRequired[int])\n        with self.assertRaises(TypeError):\n            issubclass(int, NotRequired)\n\n\nclass IntVarTests(BaseTestCase):\n    def test_valid(self):\n        IntVar(\"T_ints\")\n\n    def test_invalid(self):\n        with self.assertRaises(TypeError):\n            IntVar(\"T_ints\", int)\n        with self.assertRaises(TypeError):\n            IntVar(\"T_ints\", bound=int)\n        with self.assertRaises(TypeError):\n            IntVar(\"T_ints\", covariant=True)\n\n\nclass LiteralTests(BaseTestCase):\n    def test_basics(self):\n        Literal[1]\n        Literal[1, 2, 3]\n        Literal[\"x\", \"y\", \"z\"]\n        Literal[None]\n\n    def test_enum(self):\n        import enum\n        class My(enum.Enum):\n            A = 'A'\n\n        self.assertEqual(Literal[My.A].__args__, (My.A,))\n\n    def test_illegal_parameters_do_not_raise_runtime_errors(self):\n        # Type checkers should reject these types, but we do not\n        # raise errors at runtime to maintain maximum flexibility\n        Literal[int]\n        Literal[Literal[1, 2], Literal[4, 5]]\n        Literal[3j + 2, ..., ()]\n        Literal[b\"foo\", \"bar\"]\n        Literal[{\"foo\": 3, \"bar\": 4}]\n        Literal[T]\n\n    def test_literals_inside_other_types(self):\n        List[Literal[1, 2, 3]]\n        List[Literal[(\"foo\", \"bar\", \"baz\")]]\n\n    def test_repr(self):\n        # we backport various bugfixes that were added in 3.10.1 and earlier\n        if sys.version_info >= (3, 10, 1):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(Literal[1]), mod_name + \".Literal[1]\")\n        self.assertEqual(repr(Literal[1, True, \"foo\"]), mod_name + \".Literal[1, True, 'foo']\")\n        self.assertEqual(repr(Literal[int]), mod_name + \".Literal[int]\")\n        self.assertEqual(repr(Literal), mod_name + \".Literal\")\n        self.assertEqual(repr(Literal[None]), mod_name + \".Literal[None]\")\n        self.assertEqual(repr(Literal[1, 2, 3, 3]), mod_name + \".Literal[1, 2, 3]\")\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            Literal()\n        with self.assertRaises(TypeError):\n            Literal[1]()\n        with self.assertRaises(TypeError):\n            type(Literal)()\n        with self.assertRaises(TypeError):\n            type(Literal[1])()\n\n    def test_no_isinstance_or_issubclass(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, Literal[1])\n        with self.assertRaises(TypeError):\n            isinstance(int, Literal[1])\n        with self.assertRaises(TypeError):\n            issubclass(1, Literal[1])\n        with self.assertRaises(TypeError):\n            issubclass(int, Literal[1])\n\n    def test_no_subclassing(self):\n        with self.assertRaises(TypeError):\n            class Foo(Literal[1]): pass\n        with self.assertRaises(TypeError):\n            class Bar(Literal): pass\n\n    def test_no_multiple_subscripts(self):\n        with self.assertRaises(TypeError):\n            Literal[1][1]\n\n    def test_equal(self):\n        self.assertNotEqual(Literal[0], Literal[False])\n        self.assertNotEqual(Literal[True], Literal[1])\n        self.assertNotEqual(Literal[1], Literal[2])\n        self.assertNotEqual(Literal[1, True], Literal[1])\n        self.assertNotEqual(Literal[1, True], Literal[1, 1])\n        self.assertNotEqual(Literal[1, 2], Literal[True, 2])\n        self.assertEqual(Literal[1], Literal[1])\n        self.assertEqual(Literal[1, 2], Literal[2, 1])\n        self.assertEqual(Literal[1, 2, 3], Literal[1, 2, 3, 3])\n\n    def test_hash(self):\n        self.assertEqual(hash(Literal[1]), hash(Literal[1]))\n        self.assertEqual(hash(Literal[1, 2]), hash(Literal[2, 1]))\n        self.assertEqual(hash(Literal[1, 2, 3]), hash(Literal[1, 2, 3, 3]))\n\n    def test_args(self):\n        self.assertEqual(Literal[1, 2, 3].__args__, (1, 2, 3))\n        self.assertEqual(Literal[1, 2, 3, 3].__args__, (1, 2, 3))\n        self.assertEqual(Literal[1, Literal[2], Literal[3, 4]].__args__, (1, 2, 3, 4))\n        # Mutable arguments will not be deduplicated\n        self.assertEqual(Literal[[], []].__args__, ([], []))\n\n    def test_union_of_literals(self):\n        self.assertEqual(Union[Literal[1], Literal[2]].__args__,\n                         (Literal[1], Literal[2]))\n        self.assertEqual(Union[Literal[1], Literal[1]],\n                         Literal[1])\n\n        self.assertEqual(Union[Literal[False], Literal[0]].__args__,\n                         (Literal[False], Literal[0]))\n        self.assertEqual(Union[Literal[True], Literal[1]].__args__,\n                         (Literal[True], Literal[1]))\n\n        import enum\n        class Ints(enum.IntEnum):\n            A = 0\n            B = 1\n\n        self.assertEqual(Union[Literal[Ints.A], Literal[Ints.B]].__args__,\n                         (Literal[Ints.A], Literal[Ints.B]))\n\n        self.assertEqual(Union[Literal[Ints.A], Literal[Ints.A]],\n                         Literal[Ints.A])\n        self.assertEqual(Union[Literal[Ints.B], Literal[Ints.B]],\n                         Literal[Ints.B])\n\n        self.assertEqual(Union[Literal[0], Literal[Ints.A], Literal[False]].__args__,\n                         (Literal[0], Literal[Ints.A], Literal[False]))\n        self.assertEqual(Union[Literal[1], Literal[Ints.B], Literal[True]].__args__,\n                         (Literal[1], Literal[Ints.B], Literal[True]))\n\n    @skipUnless(TYPING_3_10_0, \"Python 3.10+ required\")\n    def test_or_type_operator_with_Literal(self):\n        self.assertEqual((Literal[1] | Literal[2]).__args__,\n                         (Literal[1], Literal[2]))\n\n        self.assertEqual((Literal[0] | Literal[False]).__args__,\n                         (Literal[0], Literal[False]))\n        self.assertEqual((Literal[1] | Literal[True]).__args__,\n                         (Literal[1], Literal[True]))\n\n        self.assertEqual(Literal[1] | Literal[1], Literal[1])\n        self.assertEqual(Literal['a'] | Literal['a'], Literal['a'])\n\n        import enum\n        class Ints(enum.IntEnum):\n            A = 0\n            B = 1\n\n        self.assertEqual(Literal[Ints.A] | Literal[Ints.A], Literal[Ints.A])\n        self.assertEqual(Literal[Ints.B] | Literal[Ints.B], Literal[Ints.B])\n\n        self.assertEqual((Literal[Ints.B] | Literal[Ints.A]).__args__,\n                         (Literal[Ints.B], Literal[Ints.A]))\n\n        self.assertEqual((Literal[0] | Literal[Ints.A]).__args__,\n                         (Literal[0], Literal[Ints.A]))\n        self.assertEqual((Literal[1] | Literal[Ints.B]).__args__,\n                         (Literal[1], Literal[Ints.B]))\n\n    def test_flatten(self):\n        l1 = Literal[Literal[1], Literal[2], Literal[3]]\n        l2 = Literal[Literal[1, 2], 3]\n        l3 = Literal[Literal[1, 2, 3]]\n        for lit in l1, l2, l3:\n            self.assertEqual(lit, Literal[1, 2, 3])\n            self.assertEqual(lit.__args__, (1, 2, 3))\n\n    def test_does_not_flatten_enum(self):\n        import enum\n        class Ints(enum.IntEnum):\n            A = 1\n            B = 2\n\n        literal = Literal[\n            Literal[Ints.A],\n            Literal[Ints.B],\n            Literal[1],\n            Literal[2],\n        ]\n        self.assertEqual(literal.__args__, (Ints.A, Ints.B, 1, 2))\n\n    def test_caching_of_Literal_respects_type(self):\n        self.assertIs(type(Literal[1].__args__[0]), int)\n        self.assertIs(type(Literal[True].__args__[0]), bool)\n\n\nclass MethodHolder:\n    @classmethod\n    def clsmethod(cls): ...\n    @staticmethod\n    def stmethod(): ...\n    def method(self): ...\n\n\nif TYPING_3_11_0:\n    registry_holder = typing\nelse:\n    registry_holder = typing_extensions\n\n\nclass OverloadTests(BaseTestCase):\n\n    def test_overload_fails(self):\n        with self.assertRaises(RuntimeError):\n\n            @overload\n            def blah():\n                pass\n\n            blah()\n\n    def test_overload_succeeds(self):\n        @overload\n        def blah():\n            pass\n\n        def blah():\n            pass\n\n        blah()\n\n    @skipIf(\n        sys.implementation.name == \"pypy\",\n        \"sum() and print() are not compiled in pypy\"\n    )\n    @patch(\n        f\"{registry_holder.__name__}._overload_registry\",\n        defaultdict(lambda: defaultdict(dict))\n    )\n    def test_overload_on_compiled_functions(self):\n        registry = registry_holder._overload_registry\n        # The registry starts out empty:\n        self.assertEqual(registry, {})\n\n        # This should just not fail:\n        overload(sum)\n        overload(print)\n\n        # No overloads are recorded:\n        self.assertEqual(get_overloads(sum), [])\n        self.assertEqual(get_overloads(print), [])\n\n    def set_up_overloads(self):\n        def blah():\n            pass\n\n        overload1 = blah\n        overload(blah)\n\n        def blah():\n            pass\n\n        overload2 = blah\n        overload(blah)\n\n        def blah():\n            pass\n\n        return blah, [overload1, overload2]\n\n    # Make sure we don't clear the global overload registry\n    @patch(\n        f\"{registry_holder.__name__}._overload_registry\",\n        defaultdict(lambda: defaultdict(dict))\n    )\n    def test_overload_registry(self):\n        registry = registry_holder._overload_registry\n        # The registry starts out empty\n        self.assertEqual(registry, {})\n\n        impl, overloads = self.set_up_overloads()\n        self.assertNotEqual(registry, {})\n        self.assertEqual(list(get_overloads(impl)), overloads)\n\n        def some_other_func(): pass\n        overload(some_other_func)\n        other_overload = some_other_func\n        def some_other_func(): pass\n        self.assertEqual(list(get_overloads(some_other_func)), [other_overload])\n        # Unrelated function still has no overloads:\n        def not_overloaded(): pass\n        self.assertEqual(list(get_overloads(not_overloaded)), [])\n\n        # Make sure that after we clear all overloads, the registry is\n        # completely empty.\n        clear_overloads()\n        self.assertEqual(registry, {})\n        self.assertEqual(get_overloads(impl), [])\n\n        # Querying a function with no overloads shouldn't change the registry.\n        def the_only_one(): pass\n        self.assertEqual(get_overloads(the_only_one), [])\n        self.assertEqual(registry, {})\n\n    def test_overload_registry_repeated(self):\n        for _ in range(2):\n            impl, overloads = self.set_up_overloads()\n\n            self.assertEqual(list(get_overloads(impl)), overloads)\n\n\nclass AssertTypeTests(BaseTestCase):\n\n    def test_basics(self):\n        arg = 42\n        self.assertIs(assert_type(arg, int), arg)\n        self.assertIs(assert_type(arg, Union[str, float]), arg)\n        self.assertIs(assert_type(arg, AnyStr), arg)\n        self.assertIs(assert_type(arg, None), arg)\n\n    def test_errors(self):\n        # Bogus calls are not expected to fail.\n        arg = 42\n        self.assertIs(assert_type(arg, 42), arg)\n        self.assertIs(assert_type(arg, 'hello'), arg)\n\n\nT_a = TypeVar('T_a')\n\nclass AwaitableWrapper(Awaitable[T_a]):\n\n    def __init__(self, value):\n        self.value = value\n\n    def __await__(self) -> typing.Iterator[T_a]:\n        yield\n        return self.value\n\nclass AsyncIteratorWrapper(AsyncIterator[T_a]):\n\n    def __init__(self, value: Iterable[T_a]):\n        self.value = value\n\n    def __aiter__(self) -> AsyncIterator[T_a]:\n        return self\n\n    async def __anext__(self) -> T_a:\n        data = await self.value\n        if data:\n            return data\n        else:\n            raise StopAsyncIteration\n\nclass ACM:\n    async def __aenter__(self) -> int:\n        return 42\n\n    async def __aexit__(self, etype, eval, tb):\n        return None\n\n\nclass A:\n    y: float\nclass B(A):\n    x: ClassVar[Optional['B']] = None\n    y: int\n    b: int\nclass CSub(B):\n    z: ClassVar['CSub'] = B()\nclass G(Generic[T]):\n    lst: ClassVar[List[T]] = []\n\nclass Loop:\n    attr: Final['Loop']\n\nclass NoneAndForward:\n    parent: 'NoneAndForward'\n    meaning: None\n\nclass XRepr(NamedTuple):\n    x: int\n    y: int = 1\n\n    def __str__(self):\n        return f'{self.x} -> {self.y}'\n\n    def __add__(self, other):\n        return 0\n\n@runtime_checkable\nclass HasCallProtocol(Protocol):\n    __call__: typing.Callable\n\n\nasync def g_with(am: AsyncContextManager[int]):\n    x: int\n    async with am as x:\n        return x\n\ntry:\n    g_with(ACM()).send(None)\nexcept StopIteration as e:\n    assert e.args[0] == 42\n\nLabel = TypedDict('Label', [('label', str)])\n\nclass Point2D(TypedDict):\n    x: int\n    y: int\n\nclass Point2Dor3D(Point2D, total=False):\n    z: int\n\nclass LabelPoint2D(Point2D, Label): ...\n\nclass Options(TypedDict, total=False):\n    log_level: int\n    log_path: str\n\nclass BaseAnimal(TypedDict):\n    name: str\n\nclass Animal(BaseAnimal, total=False):\n    voice: str\n    tail: bool\n\nclass Cat(Animal):\n    fur_color: str\n\nclass TotalMovie(TypedDict):\n    title: str\n    year: NotRequired[int]\n\nclass NontotalMovie(TypedDict, total=False):\n    title: Required[str]\n    year: int\n\nclass ParentNontotalMovie(TypedDict, total=False):\n    title: Required[str]\n\nclass ChildTotalMovie(ParentNontotalMovie):\n    year: NotRequired[int]\n\nclass ParentDeeplyAnnotatedMovie(TypedDict):\n    title: Annotated[Annotated[Required[str], \"foobar\"], \"another level\"]\n\nclass ChildDeeplyAnnotatedMovie(ParentDeeplyAnnotatedMovie):\n    year: NotRequired[Annotated[int, 2000]]\n\nclass AnnotatedMovie(TypedDict):\n    title: Annotated[Required[str], \"foobar\"]\n    year: NotRequired[Annotated[int, 2000]]\n\nclass WeirdlyQuotedMovie(TypedDict):\n    title: Annotated['Annotated[Required[str], \"foobar\"]', \"another level\"]\n    year: NotRequired['Annotated[int, 2000]']\n\n\ngth = get_type_hints\n\n\nclass GetTypeHintTests(BaseTestCase):\n    @classmethod\n    def setUpClass(cls):\n        with tempfile.TemporaryDirectory() as tempdir:\n            sys.path.append(tempdir)\n            Path(tempdir, \"ann_module.py\").write_text(ANN_MODULE_SOURCE)\n            Path(tempdir, \"ann_module2.py\").write_text(ANN_MODULE_2_SOURCE)\n            Path(tempdir, \"ann_module3.py\").write_text(ANN_MODULE_3_SOURCE)\n            cls.ann_module = importlib.import_module(\"ann_module\")\n            cls.ann_module2 = importlib.import_module(\"ann_module2\")\n            cls.ann_module3 = importlib.import_module(\"ann_module3\")\n        sys.path.pop()\n\n    @classmethod\n    def tearDownClass(cls):\n        for modname in \"ann_module\", \"ann_module2\", \"ann_module3\":\n            delattr(cls, modname)\n            del sys.modules[modname]\n\n    def test_get_type_hints_modules(self):\n        if sys.version_info >= (3, 14):\n            ann_module_type_hints = {'f': Tuple[int, int], 'x': int, 'y': str}\n        else:\n            ann_module_type_hints = {1: 2, 'f': Tuple[int, int], 'x': int, 'y': str}\n        self.assertEqual(gth(self.ann_module), ann_module_type_hints)\n        self.assertEqual(gth(self.ann_module2), {})\n        self.assertEqual(gth(self.ann_module3), {})\n\n    def test_get_type_hints_classes(self):\n        self.assertEqual(gth(self.ann_module.C, self.ann_module.__dict__),\n                         {'y': Optional[self.ann_module.C]})\n        self.assertIsInstance(gth(self.ann_module.j_class), dict)\n        if sys.version_info >= (3, 14):\n            self.assertEqual(gth(self.ann_module.M), {'o': type})\n        else:\n            self.assertEqual(gth(self.ann_module.M), {'123': 123, 'o': type})\n        self.assertEqual(gth(self.ann_module.D),\n                         {'j': str, 'k': str, 'y': Optional[self.ann_module.C]})\n        self.assertEqual(gth(self.ann_module.Y), {'z': int})\n        self.assertEqual(gth(self.ann_module.h_class),\n                         {'y': Optional[self.ann_module.C]})\n        self.assertEqual(gth(self.ann_module.S), {'x': str, 'y': str})\n        self.assertEqual(gth(self.ann_module.foo), {'x': int})\n        self.assertEqual(gth(NoneAndForward, globals()),\n                         {'parent': NoneAndForward, 'meaning': type(None)})\n\n    def test_respect_no_type_check(self):\n        @no_type_check\n        class NoTpCheck:\n            class Inn:\n                def __init__(self, x: 'not a type'): ...  # noqa: F722  # (yes, there's a syntax error in this annotation, that's the point)\n        self.assertTrue(NoTpCheck.__no_type_check__)\n        self.assertTrue(NoTpCheck.Inn.__init__.__no_type_check__)\n        self.assertEqual(gth(self.ann_module2.NTC.meth), {})\n        class ABase(Generic[T]):\n            def meth(x: int): ...\n        @no_type_check\n        class Der(ABase): ...\n        self.assertEqual(gth(ABase.meth), {'x': int})\n\n    def test_get_type_hints_ClassVar(self):\n        self.assertEqual(gth(self.ann_module2.CV, self.ann_module2.__dict__),\n                         {'var': ClassVar[self.ann_module2.CV]})\n        self.assertEqual(gth(B, globals()),\n                         {'y': int, 'x': ClassVar[Optional[B]], 'b': int})\n        self.assertEqual(gth(CSub, globals()),\n                         {'z': ClassVar[CSub], 'y': int, 'b': int,\n                          'x': ClassVar[Optional[B]]})\n        self.assertEqual(gth(G), {'lst': ClassVar[List[T]]})\n\n    def test_final_forward_ref(self):\n        self.assertEqual(gth(Loop, globals())['attr'], Final[Loop])\n        self.assertNotEqual(gth(Loop, globals())['attr'], Final[int])\n        self.assertNotEqual(gth(Loop, globals())['attr'], Final)\n\n\nclass GetUtilitiesTestCase(TestCase):\n    def test_get_origin(self):\n        T = TypeVar('T')\n        P = ParamSpec('P')\n        Ts = TypeVarTuple('Ts')\n        class C(Generic[T]): pass\n        self.assertIs(get_origin(C[int]), C)\n        self.assertIs(get_origin(C[T]), C)\n        self.assertIs(get_origin(int), None)\n        self.assertIs(get_origin(ClassVar[int]), ClassVar)\n        self.assertIs(get_origin(Union[int, str]), Union)\n        self.assertIs(get_origin(Literal[42, 43]), Literal)\n        self.assertIs(get_origin(Final[List[int]]), Final)\n        self.assertIs(get_origin(Generic), Generic)\n        self.assertIs(get_origin(Generic[T]), Generic)\n        self.assertIs(get_origin(List[Tuple[T, T]][int]), list)\n        self.assertIs(get_origin(Annotated[T, 'thing']), Annotated)\n        self.assertIs(get_origin(List), list)\n        self.assertIs(get_origin(Tuple), tuple)\n        self.assertIs(get_origin(Callable), collections.abc.Callable)\n        if sys.version_info >= (3, 9):\n            self.assertIs(get_origin(list[int]), list)\n        self.assertIs(get_origin(list), None)\n        self.assertIs(get_origin(P.args), P)\n        self.assertIs(get_origin(P.kwargs), P)\n        self.assertIs(get_origin(Required[int]), Required)\n        self.assertIs(get_origin(NotRequired[int]), NotRequired)\n        self.assertIs(get_origin(Unpack[Ts]), Unpack)\n        self.assertIs(get_origin(Unpack), None)\n\n    def test_get_args(self):\n        T = TypeVar('T')\n        Ts = TypeVarTuple('Ts')\n        class C(Generic[T]): pass\n        self.assertEqual(get_args(C[int]), (int,))\n        self.assertEqual(get_args(C[T]), (T,))\n        self.assertEqual(get_args(int), ())\n        self.assertEqual(get_args(ClassVar[int]), (int,))\n        self.assertEqual(get_args(Union[int, str]), (int, str))\n        self.assertEqual(get_args(Literal[42, 43]), (42, 43))\n        self.assertEqual(get_args(Final[List[int]]), (List[int],))\n        self.assertEqual(get_args(Union[int, Tuple[T, int]][str]),\n                         (int, Tuple[str, int]))\n        self.assertEqual(get_args(typing.Dict[int, Tuple[T, T]][Optional[int]]),\n                         (int, Tuple[Optional[int], Optional[int]]))\n        self.assertEqual(get_args(Callable[[], T][int]), ([], int))\n        self.assertEqual(get_args(Callable[..., int]), (..., int))\n        self.assertEqual(get_args(Union[int, Callable[[Tuple[T, ...]], str]]),\n                         (int, Callable[[Tuple[T, ...]], str]))\n        self.assertEqual(get_args(Tuple[int, ...]), (int, ...))\n        if TYPING_3_11_0:\n            self.assertEqual(get_args(Tuple[()]), ())\n        else:\n            self.assertEqual(get_args(Tuple[()]), ((),))\n        self.assertEqual(get_args(Annotated[T, 'one', 2, ['three']]), (T, 'one', 2, ['three']))\n        self.assertEqual(get_args(List), ())\n        self.assertEqual(get_args(Tuple), ())\n        self.assertEqual(get_args(Callable), ())\n        if sys.version_info >= (3, 9):\n            self.assertEqual(get_args(list[int]), (int,))\n        self.assertEqual(get_args(list), ())\n        if sys.version_info >= (3, 9):\n            # Support Python versions with and without the fix for\n            # https://bugs.python.org/issue42195\n            # The first variant is for 3.9.2+, the second for 3.9.0 and 1\n            self.assertIn(get_args(collections.abc.Callable[[int], str]),\n                          (([int], str), ([[int]], str)))\n            self.assertIn(get_args(collections.abc.Callable[[], str]),\n                          (([], str), ([[]], str)))\n            self.assertEqual(get_args(collections.abc.Callable[..., str]), (..., str))\n        P = ParamSpec('P')\n        # In 3.9 and lower we use typing_extensions's hacky implementation\n        # of ParamSpec, which gets incorrectly wrapped in a list\n        self.assertIn(get_args(Callable[P, int]), [(P, int), ([P], int)])\n        self.assertEqual(get_args(Callable[Concatenate[int, P], int]),\n                         (Concatenate[int, P], int))\n        self.assertEqual(get_args(Required[int]), (int,))\n        self.assertEqual(get_args(NotRequired[int]), (int,))\n        self.assertEqual(get_args(Unpack[Ts]), (Ts,))\n        self.assertEqual(get_args(Unpack), ())\n\n\nclass CollectionsAbcTests(BaseTestCase):\n\n    def test_isinstance_collections(self):\n        self.assertNotIsInstance(1, collections.abc.Mapping)\n        self.assertNotIsInstance(1, collections.abc.Iterable)\n        self.assertNotIsInstance(1, collections.abc.Container)\n        self.assertNotIsInstance(1, collections.abc.Sized)\n        with self.assertRaises(TypeError):\n            isinstance(collections.deque(), typing_extensions.Deque[int])\n        with self.assertRaises(TypeError):\n            issubclass(collections.Counter, typing_extensions.Counter[str])\n\n    def test_awaitable(self):\n        async def foo() -> typing_extensions.Awaitable[int]:\n            return await AwaitableWrapper(42)\n\n        g = foo()\n        self.assertIsInstance(g, typing_extensions.Awaitable)\n        self.assertNotIsInstance(foo, typing_extensions.Awaitable)\n        g.send(None)  # Run foo() till completion, to avoid warning.\n\n    def test_coroutine(self):\n        async def foo():\n            return\n\n        g = foo()\n        self.assertIsInstance(g, typing_extensions.Coroutine)\n        with self.assertRaises(TypeError):\n            isinstance(g, typing_extensions.Coroutine[int])\n        self.assertNotIsInstance(foo, typing_extensions.Coroutine)\n        try:\n            g.send(None)\n        except StopIteration:\n            pass\n\n    def test_async_iterable(self):\n        base_it: Iterator[int] = range(10)\n        it = AsyncIteratorWrapper(base_it)\n        self.assertIsInstance(it, typing_extensions.AsyncIterable)\n        self.assertIsInstance(it, typing_extensions.AsyncIterable)\n        self.assertNotIsInstance(42, typing_extensions.AsyncIterable)\n\n    def test_async_iterator(self):\n        base_it: Iterator[int] = range(10)\n        it = AsyncIteratorWrapper(base_it)\n        self.assertIsInstance(it, typing_extensions.AsyncIterator)\n        self.assertNotIsInstance(42, typing_extensions.AsyncIterator)\n\n    def test_deque(self):\n        self.assertIsSubclass(collections.deque, typing_extensions.Deque)\n        class MyDeque(typing_extensions.Deque[int]): ...\n        self.assertIsInstance(MyDeque(), collections.deque)\n\n    def test_counter(self):\n        self.assertIsSubclass(collections.Counter, typing_extensions.Counter)\n\n    def test_defaultdict_instantiation(self):\n        self.assertIs(\n            type(typing_extensions.DefaultDict()),\n            collections.defaultdict)\n        self.assertIs(\n            type(typing_extensions.DefaultDict[KT, VT]()),\n            collections.defaultdict)\n        self.assertIs(\n            type(typing_extensions.DefaultDict[str, int]()),\n            collections.defaultdict)\n\n    def test_defaultdict_subclass(self):\n\n        class MyDefDict(typing_extensions.DefaultDict[str, int]):\n            pass\n\n        dd = MyDefDict()\n        self.assertIsInstance(dd, MyDefDict)\n\n        self.assertIsSubclass(MyDefDict, collections.defaultdict)\n        self.assertNotIsSubclass(collections.defaultdict, MyDefDict)\n\n    def test_ordereddict_instantiation(self):\n        self.assertIs(\n            type(typing_extensions.OrderedDict()),\n            collections.OrderedDict)\n        self.assertIs(\n            type(typing_extensions.OrderedDict[KT, VT]()),\n            collections.OrderedDict)\n        self.assertIs(\n            type(typing_extensions.OrderedDict[str, int]()),\n            collections.OrderedDict)\n\n    def test_ordereddict_subclass(self):\n\n        class MyOrdDict(typing_extensions.OrderedDict[str, int]):\n            pass\n\n        od = MyOrdDict()\n        self.assertIsInstance(od, MyOrdDict)\n\n        self.assertIsSubclass(MyOrdDict, collections.OrderedDict)\n        self.assertNotIsSubclass(collections.OrderedDict, MyOrdDict)\n\n    def test_chainmap_instantiation(self):\n        self.assertIs(type(typing_extensions.ChainMap()), collections.ChainMap)\n        self.assertIs(type(typing_extensions.ChainMap[KT, VT]()), collections.ChainMap)\n        self.assertIs(type(typing_extensions.ChainMap[str, int]()), collections.ChainMap)\n        class CM(typing_extensions.ChainMap[KT, VT]): ...\n        self.assertIs(type(CM[int, str]()), CM)\n\n    def test_chainmap_subclass(self):\n\n        class MyChainMap(typing_extensions.ChainMap[str, int]):\n            pass\n\n        cm = MyChainMap()\n        self.assertIsInstance(cm, MyChainMap)\n\n        self.assertIsSubclass(MyChainMap, collections.ChainMap)\n        self.assertNotIsSubclass(collections.ChainMap, MyChainMap)\n\n    def test_deque_instantiation(self):\n        self.assertIs(type(typing_extensions.Deque()), collections.deque)\n        self.assertIs(type(typing_extensions.Deque[T]()), collections.deque)\n        self.assertIs(type(typing_extensions.Deque[int]()), collections.deque)\n        class D(typing_extensions.Deque[T]): ...\n        self.assertIs(type(D[int]()), D)\n\n    def test_counter_instantiation(self):\n        self.assertIs(type(typing_extensions.Counter()), collections.Counter)\n        self.assertIs(type(typing_extensions.Counter[T]()), collections.Counter)\n        self.assertIs(type(typing_extensions.Counter[int]()), collections.Counter)\n        class C(typing_extensions.Counter[T]): ...\n        self.assertIs(type(C[int]()), C)\n        self.assertEqual(C.__bases__, (collections.Counter, typing.Generic))\n\n    def test_counter_subclass_instantiation(self):\n\n        class MyCounter(typing_extensions.Counter[int]):\n            pass\n\n        d = MyCounter()\n        self.assertIsInstance(d, MyCounter)\n        self.assertIsInstance(d, collections.Counter)\n        self.assertIsInstance(d, typing_extensions.Counter)\n\n\n# These are a separate TestCase class,\n# as (unlike most collections.abc aliases in typing_extensions),\n# these are reimplemented on Python <=3.12 so that we can provide\n# default values for the second and third parameters\nclass GeneratorTests(BaseTestCase):\n\n    def test_generator_basics(self):\n        def foo():\n            yield 42\n        g = foo()\n\n        self.assertIsInstance(g, typing_extensions.Generator)\n        self.assertNotIsInstance(foo, typing_extensions.Generator)\n        self.assertIsSubclass(type(g), typing_extensions.Generator)\n        self.assertNotIsSubclass(type(foo), typing_extensions.Generator)\n\n        parameterized = typing_extensions.Generator[int, str, None]\n        with self.assertRaises(TypeError):\n            isinstance(g, parameterized)\n        with self.assertRaises(TypeError):\n            issubclass(type(g), parameterized)\n\n    def test_generator_default(self):\n        g1 = typing_extensions.Generator[int]\n        g2 = typing_extensions.Generator[int, None, None]\n        self.assertEqual(get_args(g1), (int, type(None), type(None)))\n        self.assertEqual(get_args(g1), get_args(g2))\n\n        g3 = typing_extensions.Generator[int, float]\n        g4 = typing_extensions.Generator[int, float, None]\n        self.assertEqual(get_args(g3), (int, float, type(None)))\n        self.assertEqual(get_args(g3), get_args(g4))\n\n    def test_no_generator_instantiation(self):\n        with self.assertRaises(TypeError):\n            typing_extensions.Generator()\n        with self.assertRaises(TypeError):\n            typing_extensions.Generator[T, T, T]()\n        with self.assertRaises(TypeError):\n            typing_extensions.Generator[int, int, int]()\n\n    def test_subclassing_generator(self):\n        class G(typing_extensions.Generator[int, int, None]):\n            def send(self, value):\n                pass\n            def throw(self, typ, val=None, tb=None):\n                pass\n\n        def g(): yield 0\n\n        self.assertIsSubclass(G, typing_extensions.Generator)\n        self.assertIsSubclass(G, typing_extensions.Iterable)\n        self.assertIsSubclass(G, collections.abc.Generator)\n        self.assertIsSubclass(G, collections.abc.Iterable)\n        self.assertNotIsSubclass(type(g), G)\n\n        instance = G()\n        self.assertIsInstance(instance, typing_extensions.Generator)\n        self.assertIsInstance(instance, typing_extensions.Iterable)\n        self.assertIsInstance(instance, collections.abc.Generator)\n        self.assertIsInstance(instance, collections.abc.Iterable)\n        self.assertNotIsInstance(type(g), G)\n        self.assertNotIsInstance(g, G)\n\n    def test_async_generator_basics(self):\n        async def f():\n            yield 42\n        g = f()\n\n        self.assertIsInstance(g, typing_extensions.AsyncGenerator)\n        self.assertIsSubclass(type(g), typing_extensions.AsyncGenerator)\n        self.assertNotIsInstance(f, typing_extensions.AsyncGenerator)\n        self.assertNotIsSubclass(type(f), typing_extensions.AsyncGenerator)\n\n        parameterized = typing_extensions.AsyncGenerator[int, str]\n        with self.assertRaises(TypeError):\n            isinstance(g, parameterized)\n        with self.assertRaises(TypeError):\n            issubclass(type(g), parameterized)\n\n    def test_async_generator_default(self):\n        ag1 = typing_extensions.AsyncGenerator[int]\n        ag2 = typing_extensions.AsyncGenerator[int, None]\n        self.assertEqual(get_args(ag1), (int, type(None)))\n        self.assertEqual(get_args(ag1), get_args(ag2))\n\n    def test_no_async_generator_instantiation(self):\n        with self.assertRaises(TypeError):\n            typing_extensions.AsyncGenerator()\n        with self.assertRaises(TypeError):\n            typing_extensions.AsyncGenerator[T, T]()\n        with self.assertRaises(TypeError):\n            typing_extensions.AsyncGenerator[int, int]()\n\n    def test_subclassing_async_generator(self):\n        class G(typing_extensions.AsyncGenerator[int, int]):\n            def asend(self, value):\n                pass\n            def athrow(self, typ, val=None, tb=None):\n                pass\n\n        async def g(): yield 0\n\n        self.assertIsSubclass(G, typing_extensions.AsyncGenerator)\n        self.assertIsSubclass(G, typing_extensions.AsyncIterable)\n        self.assertIsSubclass(G, collections.abc.AsyncGenerator)\n        self.assertIsSubclass(G, collections.abc.AsyncIterable)\n        self.assertNotIsSubclass(type(g), G)\n\n        instance = G()\n        self.assertIsInstance(instance, typing_extensions.AsyncGenerator)\n        self.assertIsInstance(instance, typing_extensions.AsyncIterable)\n        self.assertIsInstance(instance, collections.abc.AsyncGenerator)\n        self.assertIsInstance(instance, collections.abc.AsyncIterable)\n        self.assertNotIsInstance(type(g), G)\n        self.assertNotIsInstance(g, G)\n\n    def test_subclassing_subclasshook(self):\n\n        class Base(typing_extensions.Generator):\n            @classmethod\n            def __subclasshook__(cls, other):\n                if other.__name__ == 'Foo':\n                    return True\n                else:\n                    return False\n\n        class C(Base): ...\n        class Foo: ...\n        class Bar: ...\n        self.assertIsSubclass(Foo, Base)\n        self.assertIsSubclass(Foo, C)\n        self.assertNotIsSubclass(Bar, C)\n\n    def test_subclassing_register(self):\n\n        class A(typing_extensions.Generator): ...\n        class B(A): ...\n\n        class C: ...\n        A.register(C)\n        self.assertIsSubclass(C, A)\n        self.assertNotIsSubclass(C, B)\n\n        class D: ...\n        B.register(D)\n        self.assertIsSubclass(D, A)\n        self.assertIsSubclass(D, B)\n\n        class M: ...\n        collections.abc.Generator.register(M)\n        self.assertIsSubclass(M, typing_extensions.Generator)\n\n    def test_collections_as_base(self):\n\n        class M(collections.abc.Generator): ...\n        self.assertIsSubclass(M, typing_extensions.Generator)\n        self.assertIsSubclass(M, typing_extensions.Iterable)\n\n        class S(collections.abc.AsyncGenerator): ...\n        self.assertIsSubclass(S, typing_extensions.AsyncGenerator)\n        self.assertIsSubclass(S, typing_extensions.AsyncIterator)\n\n        class A(collections.abc.Generator, metaclass=abc.ABCMeta): ...\n        class B: ...\n        A.register(B)\n        self.assertIsSubclass(B, typing_extensions.Generator)\n\n    @skipIf(sys.version_info < (3, 10), \"PEP 604 has yet to be\")\n    def test_or_and_ror(self):\n        self.assertEqual(\n            typing_extensions.Generator | typing_extensions.AsyncGenerator,\n            Union[typing_extensions.Generator, typing_extensions.AsyncGenerator]\n        )\n        self.assertEqual(\n            typing_extensions.Generator | typing.Deque,\n            Union[typing_extensions.Generator, typing.Deque]\n        )\n\n\nclass OtherABCTests(BaseTestCase):\n\n    def test_contextmanager(self):\n        @contextlib.contextmanager\n        def manager():\n            yield 42\n\n        cm = manager()\n        self.assertIsInstance(cm, typing_extensions.ContextManager)\n        self.assertNotIsInstance(42, typing_extensions.ContextManager)\n\n    def test_contextmanager_type_params(self):\n        cm1 = typing_extensions.ContextManager[int]\n        self.assertEqual(get_args(cm1), (int, typing.Optional[bool]))\n        cm2 = typing_extensions.ContextManager[int, None]\n        self.assertEqual(get_args(cm2), (int, NoneType))\n\n    def test_async_contextmanager(self):\n        class NotACM:\n            pass\n        self.assertIsInstance(ACM(), typing_extensions.AsyncContextManager)\n        self.assertNotIsInstance(NotACM(), typing_extensions.AsyncContextManager)\n        @contextlib.contextmanager\n        def manager():\n            yield 42\n\n        cm = manager()\n        self.assertNotIsInstance(cm, typing_extensions.AsyncContextManager)\n        self.assertEqual(\n            typing_extensions.AsyncContextManager[int].__args__,\n            (int, typing.Optional[bool])\n        )\n        with self.assertRaises(TypeError):\n            isinstance(42, typing_extensions.AsyncContextManager[int])\n        with self.assertRaises(TypeError):\n            typing_extensions.AsyncContextManager[int, str, float]\n\n    def test_asynccontextmanager_type_params(self):\n        cm1 = typing_extensions.AsyncContextManager[int]\n        self.assertEqual(get_args(cm1), (int, typing.Optional[bool]))\n        cm2 = typing_extensions.AsyncContextManager[int, None]\n        self.assertEqual(get_args(cm2), (int, NoneType))\n\n\nclass TypeTests(BaseTestCase):\n\n    def test_type_basic(self):\n\n        class User: pass\n        class BasicUser(User): pass\n        class ProUser(User): pass\n\n        def new_user(user_class: Type[User]) -> User:\n            return user_class()\n\n        new_user(BasicUser)\n\n    def test_type_typevar(self):\n\n        class User: pass\n        class BasicUser(User): pass\n        class ProUser(User): pass\n\n        U = TypeVar('U', bound=User)\n\n        def new_user(user_class: Type[U]) -> U:\n            return user_class()\n\n        new_user(BasicUser)\n\n    def test_type_optional(self):\n        A = Optional[Type[BaseException]]\n\n        def foo(a: A) -> Optional[BaseException]:\n            if a is None:\n                return None\n            else:\n                return a()\n\n        assert isinstance(foo(KeyboardInterrupt), KeyboardInterrupt)\n        assert foo(None) is None\n\n\nclass NewTypeTests(BaseTestCase):\n    @classmethod\n    def setUpClass(cls):\n        global UserId\n        UserId = NewType('UserId', int)\n        cls.UserName = NewType(cls.__qualname__ + '.UserName', str)\n\n    @classmethod\n    def tearDownClass(cls):\n        global UserId\n        del UserId\n        del cls.UserName\n\n    def test_basic(self):\n        self.assertIsInstance(UserId(5), int)\n        self.assertIsInstance(self.UserName('Joe'), str)\n        self.assertEqual(UserId(5) + 1, 6)\n\n    def test_errors(self):\n        with self.assertRaises(TypeError):\n            issubclass(UserId, int)\n        with self.assertRaises(TypeError):\n            class D(UserId):\n                pass\n\n    @skipUnless(TYPING_3_10_0, \"PEP 604 has yet to be\")\n    def test_or(self):\n        for cls in (int, self.UserName):\n            with self.subTest(cls=cls):\n                self.assertEqual(UserId | cls, Union[UserId, cls])\n                self.assertEqual(cls | UserId, Union[cls, UserId])\n\n                self.assertEqual(get_args(UserId | cls), (UserId, cls))\n                self.assertEqual(get_args(cls | UserId), (cls, UserId))\n\n    def test_special_attrs(self):\n        self.assertEqual(UserId.__name__, 'UserId')\n        self.assertEqual(UserId.__qualname__, 'UserId')\n        self.assertEqual(UserId.__module__, __name__)\n        self.assertEqual(UserId.__supertype__, int)\n\n        UserName = self.UserName\n        self.assertEqual(UserName.__name__, 'UserName')\n        self.assertEqual(UserName.__qualname__,\n                         self.__class__.__qualname__ + '.UserName')\n        self.assertEqual(UserName.__module__, __name__)\n        self.assertEqual(UserName.__supertype__, str)\n\n    def test_repr(self):\n        self.assertEqual(repr(UserId), f'{__name__}.UserId')\n        self.assertEqual(repr(self.UserName),\n                         f'{__name__}.{self.__class__.__qualname__}.UserName')\n\n    def test_pickle(self):\n        UserAge = NewType('UserAge', float)\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            with self.subTest(proto=proto):\n                pickled = pickle.dumps(UserId, proto)\n                loaded = pickle.loads(pickled)\n                self.assertIs(loaded, UserId)\n\n                pickled = pickle.dumps(self.UserName, proto)\n                loaded = pickle.loads(pickled)\n                self.assertIs(loaded, self.UserName)\n\n                with self.assertRaises(pickle.PicklingError):\n                    pickle.dumps(UserAge, proto)\n\n    def test_missing__name__(self):\n        code = (\"import typing_extensions\\n\"\n                \"NT = typing_extensions.NewType('NT', int)\\n\"\n                )\n        exec(code, {})\n\n    def test_error_message_when_subclassing(self):\n        with self.assertRaisesRegex(\n            TypeError,\n            re.escape(\n                \"Cannot subclass an instance of NewType. Perhaps you were looking for: \"\n                \"`ProUserId = NewType('ProUserId', UserId)`\"\n            )\n        ):\n            class ProUserId(UserId):\n                ...\n\n\nclass Coordinate(Protocol):\n    x: int\n    y: int\n\n@runtime_checkable\nclass Point(Coordinate, Protocol):\n    label: str\n\nclass MyPoint:\n    x: int\n    y: int\n    label: str\n\nclass XAxis(Protocol):\n    x: int\n\nclass YAxis(Protocol):\n    y: int\n\n@runtime_checkable\nclass Position(XAxis, YAxis, Protocol):\n    pass\n\n@runtime_checkable\nclass Proto(Protocol):\n    attr: int\n\n    def meth(self, arg: str) -> int:\n        ...\n\nclass Concrete(Proto):\n    pass\n\nclass Other:\n    attr: int = 1\n\n    def meth(self, arg: str) -> int:\n        if arg == 'this':\n            return 1\n        return 0\n\nclass NT(NamedTuple):\n    x: int\n    y: int\n\n\nskip_if_py312b1 = skipIf(\n    sys.version_info == (3, 12, 0, 'beta', 1),\n    \"CPython had bugs in 3.12.0b1\"\n)\n\n\nclass ProtocolTests(BaseTestCase):\n    def test_runtime_alias(self):\n        self.assertIs(runtime, runtime_checkable)\n\n    def test_basic_protocol(self):\n        @runtime_checkable\n        class P(Protocol):\n            def meth(self):\n                pass\n        class C: pass\n        class D:\n            def meth(self):\n                pass\n        def f():\n            pass\n        self.assertIsSubclass(D, P)\n        self.assertIsInstance(D(), P)\n        self.assertNotIsSubclass(C, P)\n        self.assertNotIsInstance(C(), P)\n        self.assertNotIsSubclass(types.FunctionType, P)\n        self.assertNotIsInstance(f, P)\n\n    def test_everything_implements_empty_protocol(self):\n        @runtime_checkable\n        class Empty(Protocol): pass\n        class C: pass\n        def f():\n            pass\n        for thing in (object, type, tuple, C, types.FunctionType):\n            self.assertIsSubclass(thing, Empty)\n        for thing in (object(), 1, (), typing, f):\n            self.assertIsInstance(thing, Empty)\n\n    def test_function_implements_protocol(self):\n        def f():\n            pass\n        self.assertIsInstance(f, HasCallProtocol)\n\n    def test_no_inheritance_from_nominal(self):\n        class C: pass\n        class BP(Protocol): pass\n        with self.assertRaises(TypeError):\n            class P(C, Protocol):\n                pass\n        with self.assertRaises(TypeError):\n            class Q(Protocol, C):\n                pass\n        with self.assertRaises(TypeError):\n            class R(BP, C, Protocol):\n                pass\n        class D(BP, C): pass\n        class E(C, BP): pass\n        self.assertNotIsInstance(D(), E)\n        self.assertNotIsInstance(E(), D)\n\n    def test_runtimecheckable_on_typing_dot_Protocol(self):\n        @runtime_checkable\n        class Foo(typing.Protocol):\n            x: int\n\n        class Bar:\n            def __init__(self):\n                self.x = 42\n\n        self.assertIsInstance(Bar(), Foo)\n        self.assertNotIsInstance(object(), Foo)\n\n    def test_typing_dot_runtimecheckable_on_Protocol(self):\n        @typing.runtime_checkable\n        class Foo(Protocol):\n            x: int\n\n        class Bar:\n            def __init__(self):\n                self.x = 42\n\n        self.assertIsInstance(Bar(), Foo)\n        self.assertNotIsInstance(object(), Foo)\n\n    def test_typing_Protocol_and_extensions_Protocol_can_mix(self):\n        class TypingProto(typing.Protocol):\n            x: int\n\n        class ExtensionsProto(Protocol):\n            y: int\n\n        class SubProto(TypingProto, ExtensionsProto, typing.Protocol):\n            z: int\n\n        class SubProto2(TypingProto, ExtensionsProto, Protocol):\n            z: int\n\n        class SubProto3(ExtensionsProto, TypingProto, typing.Protocol):\n            z: int\n\n        class SubProto4(ExtensionsProto, TypingProto, Protocol):\n            z: int\n\n        for proto in (\n            ExtensionsProto, SubProto, SubProto2, SubProto3, SubProto4\n        ):\n            with self.subTest(proto=proto.__name__):\n                self.assertTrue(is_protocol(proto))\n                if Protocol is not typing.Protocol:\n                    self.assertIsInstance(proto, typing_extensions._ProtocolMeta)\n                self.assertIsInstance(proto.__protocol_attrs__, set)\n                with self.assertRaisesRegex(\n                    TypeError, \"Protocols cannot be instantiated\"\n                ):\n                    proto()\n                # check these don't raise\n                runtime_checkable(proto)\n                typing.runtime_checkable(proto)\n\n        class Concrete(SubProto): pass\n        class Concrete2(SubProto2): pass\n        class Concrete3(SubProto3): pass\n        class Concrete4(SubProto4): pass\n\n        for cls in Concrete, Concrete2, Concrete3, Concrete4:\n            with self.subTest(cls=cls.__name__):\n                self.assertFalse(is_protocol(cls))\n                # Check that this doesn't raise:\n                self.assertIsInstance(cls(), cls)\n                with self.assertRaises(TypeError):\n                    runtime_checkable(cls)\n                with self.assertRaises(TypeError):\n                    typing.runtime_checkable(cls)\n\n    def test_no_instantiation(self):\n        class P(Protocol): pass\n        with self.assertRaises(TypeError):\n            P()\n        class C(P): pass\n        self.assertIsInstance(C(), C)\n        T = TypeVar('T')\n        class PG(Protocol[T]): pass\n        with self.assertRaises(TypeError):\n            PG()\n        with self.assertRaises(TypeError):\n            PG[int]()\n        with self.assertRaises(TypeError):\n            PG[T]()\n        class CG(PG[T]): pass\n        self.assertIsInstance(CG[int](), CG)\n\n    def test_protocol_defining_init_does_not_get_overridden(self):\n        # check that P.__init__ doesn't get clobbered\n        # see https://bugs.python.org/issue44807\n\n        class P(Protocol):\n            x: int\n            def __init__(self, x: int) -> None:\n                self.x = x\n        class C: pass\n\n        c = C()\n        P.__init__(c, 1)\n        self.assertEqual(c.x, 1)\n\n    def test_concrete_class_inheriting_init_from_protocol(self):\n        class P(Protocol):\n            x: int\n            def __init__(self, x: int) -> None:\n                self.x = x\n\n        class C(P): pass\n\n        c = C(1)\n        self.assertIsInstance(c, C)\n        self.assertEqual(c.x, 1)\n\n    def test_cannot_instantiate_abstract(self):\n        @runtime_checkable\n        class P(Protocol):\n            @abc.abstractmethod\n            def ameth(self) -> int:\n                raise NotImplementedError\n        class B(P):\n            pass\n        class C(B):\n            def ameth(self) -> int:\n                return 26\n        with self.assertRaises(TypeError):\n            B()\n        self.assertIsInstance(C(), P)\n\n    def test_subprotocols_extending(self):\n        class P1(Protocol):\n            def meth1(self):\n                pass\n        @runtime_checkable\n        class P2(P1, Protocol):\n            def meth2(self):\n                pass\n        class C:\n            def meth1(self):\n                pass\n            def meth2(self):\n                pass\n        class C1:\n            def meth1(self):\n                pass\n        class C2:\n            def meth2(self):\n                pass\n        self.assertNotIsInstance(C1(), P2)\n        self.assertNotIsInstance(C2(), P2)\n        self.assertNotIsSubclass(C1, P2)\n        self.assertNotIsSubclass(C2, P2)\n        self.assertIsInstance(C(), P2)\n        self.assertIsSubclass(C, P2)\n\n    def test_subprotocols_merging(self):\n        class P1(Protocol):\n            def meth1(self):\n                pass\n        class P2(Protocol):\n            def meth2(self):\n                pass\n        @runtime_checkable\n        class P(P1, P2, Protocol):\n            pass\n        class C:\n            def meth1(self):\n                pass\n            def meth2(self):\n                pass\n        class C1:\n            def meth1(self):\n                pass\n        class C2:\n            def meth2(self):\n                pass\n        self.assertNotIsInstance(C1(), P)\n        self.assertNotIsInstance(C2(), P)\n        self.assertNotIsSubclass(C1, P)\n        self.assertNotIsSubclass(C2, P)\n        self.assertIsInstance(C(), P)\n        self.assertIsSubclass(C, P)\n\n    def test_protocols_issubclass(self):\n        T = TypeVar('T')\n        @runtime_checkable\n        class P(Protocol):\n            def x(self): ...\n        @runtime_checkable\n        class PG(Protocol[T]):\n            def x(self): ...\n        class BadP(Protocol):\n            def x(self): ...\n        class BadPG(Protocol[T]):\n            def x(self): ...\n        class C:\n            def x(self): ...\n        self.assertIsSubclass(C, P)\n        self.assertIsSubclass(C, PG)\n        self.assertIsSubclass(BadP, PG)\n\n        no_subscripted_generics = (\n            \"Subscripted generics cannot be used with class and instance checks\"\n        )\n\n        with self.assertRaisesRegex(TypeError, no_subscripted_generics):\n            issubclass(C, PG[T])\n        with self.assertRaisesRegex(TypeError, no_subscripted_generics):\n            issubclass(C, PG[C])\n\n        only_runtime_checkable_protocols = (\n            \"Instance and class checks can only be used with \"\n            \"@runtime_checkable protocols\"\n        )\n\n        with self.assertRaisesRegex(TypeError, only_runtime_checkable_protocols):\n            issubclass(C, BadP)\n        with self.assertRaisesRegex(TypeError, only_runtime_checkable_protocols):\n            issubclass(C, BadPG)\n\n        with self.assertRaisesRegex(TypeError, no_subscripted_generics):\n            issubclass(P, PG[T])\n        with self.assertRaisesRegex(TypeError, no_subscripted_generics):\n            issubclass(PG, PG[int])\n\n        only_classes_allowed = r\"issubclass\\(\\) arg 1 must be a class\"\n\n        with self.assertRaisesRegex(TypeError, only_classes_allowed):\n            issubclass(1, P)\n        with self.assertRaisesRegex(TypeError, only_classes_allowed):\n            issubclass(1, PG)\n        with self.assertRaisesRegex(TypeError, only_classes_allowed):\n            issubclass(1, BadP)\n        with self.assertRaisesRegex(TypeError, only_classes_allowed):\n            issubclass(1, BadPG)\n\n    def test_implicit_issubclass_between_two_protocols(self):\n        @runtime_checkable\n        class CallableMembersProto(Protocol):\n            def meth(self): ...\n\n        # All the below protocols should be considered \"subclasses\"\n        # of CallableMembersProto at runtime,\n        # even though none of them explicitly subclass CallableMembersProto\n\n        class IdenticalProto(Protocol):\n            def meth(self): ...\n\n        class SupersetProto(Protocol):\n            def meth(self): ...\n            def meth2(self): ...\n\n        class NonCallableMembersProto(Protocol):\n            meth: Callable[[], None]\n\n        class NonCallableMembersSupersetProto(Protocol):\n            meth: Callable[[], None]\n            meth2: Callable[[str, int], bool]\n\n        class MixedMembersProto1(Protocol):\n            meth: Callable[[], None]\n            def meth2(self): ...\n\n        class MixedMembersProto2(Protocol):\n            def meth(self): ...\n            meth2: Callable[[str, int], bool]\n\n        for proto in (\n            IdenticalProto, SupersetProto, NonCallableMembersProto,\n            NonCallableMembersSupersetProto, MixedMembersProto1, MixedMembersProto2\n        ):\n            with self.subTest(proto=proto.__name__):\n                self.assertIsSubclass(proto, CallableMembersProto)\n\n        # These two shouldn't be considered subclasses of CallableMembersProto, however,\n        # since they don't have the `meth` protocol member\n\n        class EmptyProtocol(Protocol): ...\n        class UnrelatedProtocol(Protocol):\n            def wut(self): ...\n\n        self.assertNotIsSubclass(EmptyProtocol, CallableMembersProto)\n        self.assertNotIsSubclass(UnrelatedProtocol, CallableMembersProto)\n\n        # These aren't protocols at all (despite having annotations),\n        # so they should only be considered subclasses of CallableMembersProto\n        # if they *actually have an attribute* matching the `meth` member\n        # (just having an annotation is insufficient)\n\n        class AnnotatedButNotAProtocol:\n            meth: Callable[[], None]\n\n        class NotAProtocolButAnImplicitSubclass:\n            def meth(self): pass\n\n        class NotAProtocolButAnImplicitSubclass2:\n            meth: Callable[[], None]\n            def meth(self): pass\n\n        class NotAProtocolButAnImplicitSubclass3:\n            meth: Callable[[], None]\n            meth2: Callable[[int, str], bool]\n            def meth(self): pass\n            def meth2(self, x, y): return True\n\n        self.assertNotIsSubclass(AnnotatedButNotAProtocol, CallableMembersProto)\n        self.assertIsSubclass(NotAProtocolButAnImplicitSubclass, CallableMembersProto)\n        self.assertIsSubclass(NotAProtocolButAnImplicitSubclass2, CallableMembersProto)\n        self.assertIsSubclass(NotAProtocolButAnImplicitSubclass3, CallableMembersProto)\n\n    @skip_if_py312b1\n    def test_issubclass_and_isinstance_on_Protocol_itself(self):\n        class C:\n            def x(self): pass\n\n        self.assertNotIsSubclass(object, Protocol)\n        self.assertNotIsInstance(object(), Protocol)\n\n        self.assertNotIsSubclass(str, Protocol)\n        self.assertNotIsInstance('foo', Protocol)\n\n        self.assertNotIsSubclass(C, Protocol)\n        self.assertNotIsInstance(C(), Protocol)\n\n        only_classes_allowed = r\"issubclass\\(\\) arg 1 must be a class\"\n\n        with self.assertRaisesRegex(TypeError, only_classes_allowed):\n            issubclass(1, Protocol)\n        with self.assertRaisesRegex(TypeError, only_classes_allowed):\n            issubclass('foo', Protocol)\n        with self.assertRaisesRegex(TypeError, only_classes_allowed):\n            issubclass(C(), Protocol)\n\n        T = TypeVar('T')\n\n        @runtime_checkable\n        class EmptyProtocol(Protocol): pass\n\n        @runtime_checkable\n        class SupportsStartsWith(Protocol):\n            def startswith(self, x: str) -> bool: ...\n\n        @runtime_checkable\n        class SupportsX(Protocol[T]):\n            def x(self): ...\n\n        for proto in EmptyProtocol, SupportsStartsWith, SupportsX:\n            with self.subTest(proto=proto.__name__):\n                self.assertIsSubclass(proto, Protocol)\n\n        # gh-105237 / PR #105239:\n        # check that the presence of Protocol subclasses\n        # where `issubclass(X, <subclass>)` evaluates to True\n        # doesn't influence the result of `issubclass(X, Protocol)`\n\n        self.assertIsSubclass(object, EmptyProtocol)\n        self.assertIsInstance(object(), EmptyProtocol)\n        self.assertNotIsSubclass(object, Protocol)\n        self.assertNotIsInstance(object(), Protocol)\n\n        self.assertIsSubclass(str, SupportsStartsWith)\n        self.assertIsInstance('foo', SupportsStartsWith)\n        self.assertNotIsSubclass(str, Protocol)\n        self.assertNotIsInstance('foo', Protocol)\n\n        self.assertIsSubclass(C, SupportsX)\n        self.assertIsInstance(C(), SupportsX)\n        self.assertNotIsSubclass(C, Protocol)\n        self.assertNotIsInstance(C(), Protocol)\n\n    @skip_if_py312b1\n    def test_isinstance_checks_not_at_whim_of_gc(self):\n        self.addCleanup(gc.enable)\n        gc.disable()\n\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Protocols can only inherit from other protocols\"\n        ):\n            class Foo(collections.abc.Mapping, Protocol):\n                pass\n\n        self.assertNotIsInstance([], collections.abc.Mapping)\n\n    def test_protocols_issubclass_non_callable(self):\n        class C:\n            x = 1\n\n        @runtime_checkable\n        class PNonCall(Protocol):\n            x = 1\n\n        non_callable_members_illegal = (\n            \"Protocols with non-method members don't support issubclass()\"\n        )\n\n        with self.assertRaisesRegex(TypeError, non_callable_members_illegal):\n            issubclass(C, PNonCall)\n\n        self.assertIsInstance(C(), PNonCall)\n        PNonCall.register(C)\n\n        with self.assertRaisesRegex(TypeError, non_callable_members_illegal):\n            issubclass(C, PNonCall)\n\n        self.assertIsInstance(C(), PNonCall)\n\n        # check that non-protocol subclasses are not affected\n        class D(PNonCall): ...\n\n        self.assertNotIsSubclass(C, D)\n        self.assertNotIsInstance(C(), D)\n        D.register(C)\n        self.assertIsSubclass(C, D)\n        self.assertIsInstance(C(), D)\n\n        with self.assertRaisesRegex(TypeError, non_callable_members_illegal):\n            issubclass(D, PNonCall)\n\n    def test_no_weird_caching_with_issubclass_after_isinstance(self):\n        @runtime_checkable\n        class Spam(Protocol):\n            x: int\n\n        class Eggs:\n            def __init__(self) -> None:\n                self.x = 42\n\n        self.assertIsInstance(Eggs(), Spam)\n\n        # gh-104555: If we didn't override ABCMeta.__subclasscheck__ in _ProtocolMeta,\n        # TypeError wouldn't be raised here,\n        # as the cached result of the isinstance() check immediately above\n        # would mean the issubclass() call would short-circuit\n        # before we got to the \"raise TypeError\" line\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Protocols with non-method members don't support issubclass()\"\n        ):\n            issubclass(Eggs, Spam)\n\n    def test_no_weird_caching_with_issubclass_after_isinstance_2(self):\n        @runtime_checkable\n        class Spam(Protocol):\n            x: int\n\n        class Eggs: ...\n\n        self.assertNotIsInstance(Eggs(), Spam)\n\n        # gh-104555: If we didn't override ABCMeta.__subclasscheck__ in _ProtocolMeta,\n        # TypeError wouldn't be raised here,\n        # as the cached result of the isinstance() check immediately above\n        # would mean the issubclass() call would short-circuit\n        # before we got to the \"raise TypeError\" line\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Protocols with non-method members don't support issubclass()\"\n        ):\n            issubclass(Eggs, Spam)\n\n    def test_no_weird_caching_with_issubclass_after_isinstance_3(self):\n        @runtime_checkable\n        class Spam(Protocol):\n            x: int\n\n        class Eggs:\n            def __getattr__(self, attr):\n                if attr == \"x\":\n                    return 42\n                raise AttributeError(attr)\n\n        self.assertNotIsInstance(Eggs(), Spam)\n\n        # gh-104555: If we didn't override ABCMeta.__subclasscheck__ in _ProtocolMeta,\n        # TypeError wouldn't be raised here,\n        # as the cached result of the isinstance() check immediately above\n        # would mean the issubclass() call would short-circuit\n        # before we got to the \"raise TypeError\" line\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Protocols with non-method members don't support issubclass()\"\n        ):\n            issubclass(Eggs, Spam)\n\n    def test_protocols_isinstance(self):\n        T = TypeVar('T')\n        @runtime_checkable\n        class P(Protocol):\n            def meth(x): ...\n        @runtime_checkable\n        class PG(Protocol[T]):\n            def meth(x): ...\n        @runtime_checkable\n        class WeirdProto(Protocol):\n            meth = str.maketrans\n        @runtime_checkable\n        class WeirdProto2(Protocol):\n            meth = lambda *args, **kwargs: None  # noqa: E731\n        class CustomCallable:\n            def __call__(self, *args, **kwargs):\n                pass\n        @runtime_checkable\n        class WeirderProto(Protocol):\n            meth = CustomCallable()\n        class BadP(Protocol):\n            def meth(x): ...\n        class BadPG(Protocol[T]):\n            def meth(x): ...\n        class C:\n            def meth(x): ...\n        class C2:\n            def __init__(self):\n                self.meth = lambda: None\n        for klass in C, C2:\n            for proto in P, PG, WeirdProto, WeirdProto2, WeirderProto:\n                with self.subTest(klass=klass.__name__, proto=proto.__name__):\n                    self.assertIsInstance(klass(), proto)\n\n        no_subscripted_generics = (\n            \"Subscripted generics cannot be used with class and instance checks\"\n        )\n\n        with self.assertRaisesRegex(TypeError, no_subscripted_generics):\n            isinstance(C(), PG[T])\n        with self.assertRaisesRegex(TypeError, no_subscripted_generics):\n            isinstance(C(), PG[C])\n\n        only_runtime_checkable_msg = (\n            \"Instance and class checks can only be used \"\n            \"with @runtime_checkable protocols\"\n        )\n\n        with self.assertRaisesRegex(TypeError, only_runtime_checkable_msg):\n            isinstance(C(), BadP)\n        with self.assertRaisesRegex(TypeError, only_runtime_checkable_msg):\n            isinstance(C(), BadPG)\n\n    def test_protocols_isinstance_properties_and_descriptors(self):\n        class C:\n            @property\n            def attr(self):\n                return 42\n\n        class CustomDescriptor:\n            def __get__(self, obj, objtype=None):\n                return 42\n\n        class D:\n            attr = CustomDescriptor()\n\n        # Check that properties set on superclasses\n        # are still found by the isinstance() logic\n        class E(C): ...\n        class F(D): ...\n\n        class Empty: ...\n\n        T = TypeVar('T')\n\n        @runtime_checkable\n        class P(Protocol):\n            @property\n            def attr(self): ...\n\n        @runtime_checkable\n        class P1(Protocol):\n            attr: int\n\n        @runtime_checkable\n        class PG(Protocol[T]):\n            @property\n            def attr(self): ...\n\n        @runtime_checkable\n        class PG1(Protocol[T]):\n            attr: T\n\n        @runtime_checkable\n        class MethodP(Protocol):\n            def attr(self): ...\n\n        @runtime_checkable\n        class MethodPG(Protocol[T]):\n            def attr(self) -> T: ...\n\n        for protocol_class in P, P1, PG, PG1, MethodP, MethodPG:\n            for klass in C, D, E, F:\n                with self.subTest(\n                    klass=klass.__name__,\n                    protocol_class=protocol_class.__name__\n                ):\n                    self.assertIsInstance(klass(), protocol_class)\n\n            with self.subTest(klass=\"Empty\", protocol_class=protocol_class.__name__):\n                self.assertNotIsInstance(Empty(), protocol_class)\n\n        class BadP(Protocol):\n            @property\n            def attr(self): ...\n\n        class BadP1(Protocol):\n            attr: int\n\n        class BadPG(Protocol[T]):\n            @property\n            def attr(self): ...\n\n        class BadPG1(Protocol[T]):\n            attr: T\n\n        cases = (\n            PG[T], PG[C], PG1[T], PG1[C], MethodPG[T],\n            MethodPG[C], BadP, BadP1, BadPG, BadPG1\n        )\n\n        for obj in cases:\n            for klass in C, D, E, F, Empty:\n                with self.subTest(klass=klass.__name__, obj=obj):\n                    with self.assertRaises(TypeError):\n                        isinstance(klass(), obj)\n\n    def test_protocols_isinstance_not_fooled_by_custom_dir(self):\n        @runtime_checkable\n        class HasX(Protocol):\n            x: int\n\n        class CustomDirWithX:\n            x = 10\n            def __dir__(self):\n                return []\n\n        class CustomDirWithoutX:\n            def __dir__(self):\n                return [\"x\"]\n\n        self.assertIsInstance(CustomDirWithX(), HasX)\n        self.assertNotIsInstance(CustomDirWithoutX(), HasX)\n\n    def test_protocols_isinstance_attribute_access_with_side_effects(self):\n        class C:\n            @property\n            def attr(self):\n                raise AttributeError('no')\n\n        class CustomDescriptor:\n            def __get__(self, obj, objtype=None):\n                raise RuntimeError(\"NO\")\n\n        class D:\n            attr = CustomDescriptor()\n\n        # Check that properties set on superclasses\n        # are still found by the isinstance() logic\n        class E(C): ...\n        class F(D): ...\n\n        class WhyWouldYouDoThis:\n            def __getattr__(self, name):\n                raise RuntimeError(\"wut\")\n\n        T = TypeVar('T')\n\n        @runtime_checkable\n        class P(Protocol):\n            @property\n            def attr(self): ...\n\n        @runtime_checkable\n        class P1(Protocol):\n            attr: int\n\n        @runtime_checkable\n        class PG(Protocol[T]):\n            @property\n            def attr(self): ...\n\n        @runtime_checkable\n        class PG1(Protocol[T]):\n            attr: T\n\n        @runtime_checkable\n        class MethodP(Protocol):\n            def attr(self): ...\n\n        @runtime_checkable\n        class MethodPG(Protocol[T]):\n            def attr(self) -> T: ...\n\n        for protocol_class in P, P1, PG, PG1, MethodP, MethodPG:\n            for klass in C, D, E, F:\n                with self.subTest(\n                    klass=klass.__name__,\n                    protocol_class=protocol_class.__name__\n                ):\n                    self.assertIsInstance(klass(), protocol_class)\n\n            with self.subTest(\n                klass=\"WhyWouldYouDoThis\",\n                protocol_class=protocol_class.__name__\n            ):\n                self.assertNotIsInstance(WhyWouldYouDoThis(), protocol_class)\n\n    def test_protocols_isinstance___slots__(self):\n        # As per the consensus in https://github.com/python/typing/issues/1367,\n        # this is desirable behaviour\n        @runtime_checkable\n        class HasX(Protocol):\n            x: int\n\n        class HasNothingButSlots:\n            __slots__ = (\"x\",)\n\n        self.assertIsInstance(HasNothingButSlots(), HasX)\n\n    def test_protocols_isinstance_py36(self):\n        class APoint:\n            def __init__(self, x, y, label):\n                self.x = x\n                self.y = y\n                self.label = label\n        class BPoint:\n            label = 'B'\n            def __init__(self, x, y):\n                self.x = x\n                self.y = y\n        class C:\n            def __init__(self, attr):\n                self.attr = attr\n            def meth(self, arg):\n                return 0\n        class Bad: pass\n        self.assertIsInstance(APoint(1, 2, 'A'), Point)\n        self.assertIsInstance(BPoint(1, 2), Point)\n        self.assertNotIsInstance(MyPoint(), Point)\n        self.assertIsInstance(BPoint(1, 2), Position)\n        self.assertIsInstance(Other(), Proto)\n        self.assertIsInstance(Concrete(), Proto)\n        self.assertIsInstance(C(42), Proto)\n        self.assertNotIsInstance(Bad(), Proto)\n        self.assertNotIsInstance(Bad(), Point)\n        self.assertNotIsInstance(Bad(), Position)\n        self.assertNotIsInstance(Bad(), Concrete)\n        self.assertNotIsInstance(Other(), Concrete)\n        self.assertIsInstance(NT(1, 2), Position)\n\n    def test_runtime_checkable_with_match_args(self):\n        @runtime_checkable\n        class P_regular(Protocol):\n            x: int\n            y: int\n\n        @runtime_checkable\n        class P_match(Protocol):\n            __match_args__ = (\"x\", \"y\")\n            x: int\n            y: int\n\n        class Regular:\n            def __init__(self, x: int, y: int):\n                self.x = x\n                self.y = y\n\n        class WithMatch:\n            __match_args__ = (\"x\", \"y\", \"z\")\n            def __init__(self, x: int, y: int, z: int):\n                self.x = x\n                self.y = y\n                self.z = z\n\n        class Nope: ...\n\n        self.assertIsInstance(Regular(1, 2), P_regular)\n        self.assertIsInstance(Regular(1, 2), P_match)\n        self.assertIsInstance(WithMatch(1, 2, 3), P_regular)\n        self.assertIsInstance(WithMatch(1, 2, 3), P_match)\n        self.assertNotIsInstance(Nope(), P_regular)\n        self.assertNotIsInstance(Nope(), P_match)\n\n    def test_protocols_isinstance_init(self):\n        T = TypeVar('T')\n        @runtime_checkable\n        class P(Protocol):\n            x = 1\n        @runtime_checkable\n        class PG(Protocol[T]):\n            x = 1\n        class C:\n            def __init__(self, x):\n                self.x = x\n        self.assertIsInstance(C(1), P)\n        self.assertIsInstance(C(1), PG)\n\n    def test_protocols_isinstance_monkeypatching(self):\n        @runtime_checkable\n        class HasX(Protocol):\n            x: int\n\n        class Foo: ...\n\n        f = Foo()\n        self.assertNotIsInstance(f, HasX)\n        f.x = 42\n        self.assertIsInstance(f, HasX)\n        del f.x\n        self.assertNotIsInstance(f, HasX)\n\n    @skip_if_py312b1\n    def test_runtime_checkable_generic_non_protocol(self):\n        # Make sure this doesn't raise AttributeError\n        with self.assertRaisesRegex(\n            TypeError,\n            \"@runtime_checkable can be only applied to protocol classes\",\n        ):\n            @runtime_checkable\n            class Foo(Generic[T]): ...\n\n    def test_runtime_checkable_generic(self):\n        @runtime_checkable\n        class Foo(Protocol[T]):\n            def meth(self) -> T: ...\n\n        class Impl:\n            def meth(self) -> int: ...\n\n        self.assertIsSubclass(Impl, Foo)\n\n        class NotImpl:\n            def method(self) -> int: ...\n\n        self.assertNotIsSubclass(NotImpl, Foo)\n\n    if sys.version_info >= (3, 12):\n        exec(textwrap.dedent(\n            \"\"\"\n            @skip_if_py312b1\n            def test_pep695_generics_can_be_runtime_checkable(self):\n                @runtime_checkable\n                class HasX(Protocol):\n                    x: int\n\n                class Bar[T]:\n                    x: T\n                    def __init__(self, x):\n                        self.x = x\n\n                class Capybara[T]:\n                    y: str\n                    def __init__(self, y):\n                        self.y = y\n\n                self.assertIsInstance(Bar(1), HasX)\n                self.assertNotIsInstance(Capybara('a'), HasX)\n                \"\"\"\n        ))\n\n    @skip_if_py312b1\n    def test_protocols_isinstance_generic_classes(self):\n        T = TypeVar(\"T\")\n\n        class Foo(Generic[T]):\n            x: T\n\n            def __init__(self, x):\n                self.x = x\n\n        class Bar(Foo[int]):\n            ...\n\n        @runtime_checkable\n        class HasX(Protocol):\n            x: int\n\n        foo = Foo(1)\n        self.assertIsInstance(foo, HasX)\n\n        bar = Bar(2)\n        self.assertIsInstance(bar, HasX)\n\n    def test_protocols_support_register(self):\n        @runtime_checkable\n        class P(Protocol):\n            x = 1\n        class PM(Protocol):\n            def meth(self): pass\n        class D(PM): pass\n        class C: pass\n        D.register(C)\n        P.register(C)\n        self.assertIsInstance(C(), P)\n        self.assertIsInstance(C(), D)\n\n    def test_none_on_non_callable_doesnt_block_implementation(self):\n        @runtime_checkable\n        class P(Protocol):\n            x = 1\n        class A:\n            x = 1\n        class B(A):\n            x = None\n        class C:\n            def __init__(self):\n                self.x = None\n        self.assertIsInstance(B(), P)\n        self.assertIsInstance(C(), P)\n\n    def test_none_on_callable_blocks_implementation(self):\n        @runtime_checkable\n        class P(Protocol):\n            def x(self): ...\n        class A:\n            def x(self): ...\n        class B(A):\n            x = None\n        class C:\n            def __init__(self):\n                self.x = None\n        self.assertNotIsInstance(B(), P)\n        self.assertNotIsInstance(C(), P)\n\n    def test_non_protocol_subclasses(self):\n        class P(Protocol):\n            x = 1\n        @runtime_checkable\n        class PR(Protocol):\n            def meth(self): pass\n        class NonP(P):\n            x = 1\n        class NonPR(PR): pass\n        class C(metaclass=abc.ABCMeta):\n            x = 1\n        class D(metaclass=abc.ABCMeta):\n            def meth(self): pass  # noqa: B027\n        self.assertNotIsInstance(C(), NonP)\n        self.assertNotIsInstance(D(), NonPR)\n        self.assertNotIsSubclass(C, NonP)\n        self.assertNotIsSubclass(D, NonPR)\n        self.assertIsInstance(NonPR(), PR)\n        self.assertIsSubclass(NonPR, PR)\n\n        self.assertNotIn(\"__protocol_attrs__\", vars(NonP))\n        self.assertNotIn(\"__protocol_attrs__\", vars(NonPR))\n        self.assertNotIn(\"__non_callable_proto_members__\", vars(NonP))\n        self.assertNotIn(\"__non_callable_proto_members__\", vars(NonPR))\n\n        acceptable_extra_attrs = {\n            '_is_protocol', '_is_runtime_protocol', '__parameters__',\n            '__init__', '__annotations__', '__subclasshook__', '__annotate__'\n        }\n        self.assertLessEqual(vars(NonP).keys(), vars(C).keys() | acceptable_extra_attrs)\n        self.assertLessEqual(\n            vars(NonPR).keys(), vars(D).keys() | acceptable_extra_attrs\n        )\n\n    def test_custom_subclasshook(self):\n        class P(Protocol):\n            x = 1\n        class OKClass: pass\n        class BadClass:\n            x = 1\n        class C(P):\n            @classmethod\n            def __subclasshook__(cls, other):\n                return other.__name__.startswith(\"OK\")\n        self.assertIsInstance(OKClass(), C)\n        self.assertNotIsInstance(BadClass(), C)\n        self.assertIsSubclass(OKClass, C)\n        self.assertNotIsSubclass(BadClass, C)\n\n    @skipIf(\n        sys.version_info[:4] == (3, 12, 0, 'beta') and sys.version_info[4] < 4,\n        \"Early betas of Python 3.12 had a bug\"\n    )\n    def test_custom_subclasshook_2(self):\n        @runtime_checkable\n        class HasX(Protocol):\n            # The presence of a non-callable member\n            # would mean issubclass() checks would fail with TypeError\n            # if it weren't for the custom `__subclasshook__` method\n            x = 1\n\n            @classmethod\n            def __subclasshook__(cls, other):\n                return hasattr(other, 'x')\n\n        class Empty: pass\n\n        class ImplementsHasX:\n            x = 1\n\n        self.assertIsInstance(ImplementsHasX(), HasX)\n        self.assertNotIsInstance(Empty(), HasX)\n        self.assertIsSubclass(ImplementsHasX, HasX)\n        self.assertNotIsSubclass(Empty, HasX)\n\n        # isinstance() and issubclass() checks against this still raise TypeError,\n        # despite the presence of the custom __subclasshook__ method,\n        # as it's not decorated with @runtime_checkable\n        class NotRuntimeCheckable(Protocol):\n            @classmethod\n            def __subclasshook__(cls, other):\n                return hasattr(other, 'x')\n\n        must_be_runtime_checkable = (\n            \"Instance and class checks can only be used \"\n            \"with @runtime_checkable protocols\"\n        )\n\n        with self.assertRaisesRegex(TypeError, must_be_runtime_checkable):\n            issubclass(object, NotRuntimeCheckable)\n        with self.assertRaisesRegex(TypeError, must_be_runtime_checkable):\n            isinstance(object(), NotRuntimeCheckable)\n\n    @skip_if_py312b1\n    def test_issubclass_fails_correctly(self):\n        @runtime_checkable\n        class NonCallableMembers(Protocol):\n            x = 1\n\n        class NotRuntimeCheckable(Protocol):\n            def callable_member(self) -> int: ...\n\n        @runtime_checkable\n        class RuntimeCheckable(Protocol):\n            def callable_member(self) -> int: ...\n\n        class C: pass\n\n        # These three all exercise different code paths,\n        # but should result in the same error message:\n        for protocol in NonCallableMembers, NotRuntimeCheckable, RuntimeCheckable:\n            with self.subTest(proto_name=protocol.__name__):\n                with self.assertRaisesRegex(\n                    TypeError, r\"issubclass\\(\\) arg 1 must be a class\"\n                ):\n                    issubclass(C(), protocol)\n\n    def test_defining_generic_protocols(self):\n        T = TypeVar('T')\n        S = TypeVar('S')\n        @runtime_checkable\n        class PR(Protocol[T, S]):\n            def meth(self): pass\n        class P(PR[int, T], Protocol[T]):\n            y = 1\n        with self.assertRaises(TypeError):\n            issubclass(PR[int, T], PR)\n        with self.assertRaises(TypeError):\n            issubclass(P[str], PR)\n        with self.assertRaises(TypeError):\n            PR[int]\n        with self.assertRaises(TypeError):\n            P[int, str]\n        if not TYPING_3_10_0:\n            with self.assertRaises(TypeError):\n                PR[int, 1]\n            with self.assertRaises(TypeError):\n                PR[int, ClassVar]\n        class C(PR[int, T]): pass\n        self.assertIsInstance(C[str](), C)\n\n    def test_defining_generic_protocols_old_style(self):\n        T = TypeVar('T')\n        S = TypeVar('S')\n        @runtime_checkable\n        class PR(Protocol, Generic[T, S]):\n            def meth(self): pass\n        class P(PR[int, str], Protocol):\n            y = 1\n        with self.assertRaises(TypeError):\n            self.assertIsSubclass(PR[int, str], PR)\n        self.assertIsSubclass(P, PR)\n        with self.assertRaises(TypeError):\n            PR[int]\n        if not TYPING_3_10_0:\n            with self.assertRaises(TypeError):\n                PR[int, 1]\n        class P1(Protocol, Generic[T]):\n            def bar(self, x: T) -> str: ...\n        class P2(Generic[T], Protocol):\n            def bar(self, x: T) -> str: ...\n        @runtime_checkable\n        class PSub(P1[str], Protocol):\n            x = 1\n        class Test:\n            x = 1\n            def bar(self, x: str) -> str:\n                return x\n        self.assertIsInstance(Test(), PSub)\n        if not TYPING_3_10_0:\n            with self.assertRaises(TypeError):\n                PR[int, ClassVar]\n\n    if hasattr(typing, \"TypeAliasType\"):\n        exec(textwrap.dedent(\n            \"\"\"\n            def test_pep695_generic_protocol_callable_members(self):\n                @runtime_checkable\n                class Foo[T](Protocol):\n                    def meth(self, x: T) -> None: ...\n\n                class Bar[T]:\n                    def meth(self, x: T) -> None: ...\n\n                self.assertIsInstance(Bar(), Foo)\n                self.assertIsSubclass(Bar, Foo)\n\n                @runtime_checkable\n                class SupportsTrunc[T](Protocol):\n                    def __trunc__(self) -> T: ...\n\n                self.assertIsInstance(0.0, SupportsTrunc)\n                self.assertIsSubclass(float, SupportsTrunc)\n\n            def test_no_weird_caching_with_issubclass_after_isinstance_pep695(self):\n                @runtime_checkable\n                class Spam[T](Protocol):\n                    x: T\n\n                class Eggs[T]:\n                    def __init__(self, x: T) -> None:\n                        self.x = x\n\n                self.assertIsInstance(Eggs(42), Spam)\n\n                # gh-104555: If we didn't override ABCMeta.__subclasscheck__ in _ProtocolMeta,\n                # TypeError wouldn't be raised here,\n                # as the cached result of the isinstance() check immediately above\n                # would mean the issubclass() call would short-circuit\n                # before we got to the \"raise TypeError\" line\n                with self.assertRaises(TypeError):\n                    issubclass(Eggs, Spam)\n            \"\"\"\n        ))\n\n    def test_init_called(self):\n        T = TypeVar('T')\n        class P(Protocol[T]): pass\n        class C(P[T]):\n            def __init__(self):\n                self.test = 'OK'\n        self.assertEqual(C[int]().test, 'OK')\n\n    def test_protocols_bad_subscripts(self):\n        T = TypeVar('T')\n        S = TypeVar('S')\n        with self.assertRaises(TypeError):\n            class P(Protocol[T, T]): pass\n        with self.assertRaises(TypeError):\n            class P2(Protocol[int]): pass\n        with self.assertRaises(TypeError):\n            class P3(Protocol[T], Protocol[S]): pass\n        with self.assertRaises(TypeError):\n            class P4(typing.Mapping[T, S], Protocol[T]): pass\n\n    def test_generic_protocols_repr(self):\n        T = TypeVar('T')\n        S = TypeVar('S')\n        class P(Protocol[T, S]): pass\n        self.assertTrue(repr(P[T, S]).endswith('P[~T, ~S]'))\n        self.assertTrue(repr(P[int, str]).endswith('P[int, str]'))\n\n    def test_generic_protocols_eq(self):\n        T = TypeVar('T')\n        S = TypeVar('S')\n        class P(Protocol[T, S]): pass\n        self.assertEqual(P, P)\n        self.assertEqual(P[int, T], P[int, T])\n        self.assertEqual(P[T, T][Tuple[T, S]][int, str],\n                         P[Tuple[int, str], Tuple[int, str]])\n\n    def test_generic_protocols_special_from_generic(self):\n        T = TypeVar('T')\n        class P(Protocol[T]): pass\n        self.assertEqual(P.__parameters__, (T,))\n        self.assertEqual(P[int].__parameters__, ())\n        self.assertEqual(P[int].__args__, (int,))\n        self.assertIs(P[int].__origin__, P)\n\n    def test_generic_protocols_special_from_protocol(self):\n        @runtime_checkable\n        class PR(Protocol):\n            x = 1\n        class P(Protocol):\n            def meth(self):\n                pass\n        T = TypeVar('T')\n        class PG(Protocol[T]):\n            x = 1\n            def meth(self):\n                pass\n        self.assertTrue(P._is_protocol)\n        self.assertTrue(PR._is_protocol)\n        self.assertTrue(PG._is_protocol)\n        self.assertFalse(P._is_runtime_protocol)\n        self.assertTrue(PR._is_runtime_protocol)\n        self.assertTrue(PG[int]._is_protocol)\n        self.assertEqual(typing_extensions._get_protocol_attrs(P), {'meth'})\n        self.assertEqual(typing_extensions._get_protocol_attrs(PR), {'x'})\n        self.assertEqual(frozenset(typing_extensions._get_protocol_attrs(PG)),\n                         frozenset({'x', 'meth'}))\n\n    def test_no_runtime_deco_on_nominal(self):\n        with self.assertRaises(TypeError):\n            @runtime_checkable\n            class C: pass\n        class Proto(Protocol):\n            x = 1\n        with self.assertRaises(TypeError):\n            @runtime_checkable\n            class Concrete(Proto):\n                pass\n\n    def test_none_treated_correctly(self):\n        @runtime_checkable\n        class P(Protocol):\n            x: int = None\n        class B: pass\n        self.assertNotIsInstance(B(), P)\n        class C:\n            x = 1\n        class D:\n            x = None\n        self.assertIsInstance(C(), P)\n        self.assertIsInstance(D(), P)\n        class CI:\n            def __init__(self):\n                self.x = 1\n        class DI:\n            def __init__(self):\n                self.x = None\n        self.assertIsInstance(CI(), P)\n        self.assertIsInstance(DI(), P)\n\n    def test_protocols_in_unions(self):\n        class P(Protocol):\n            x: int = None\n        Alias = typing.Union[typing.Iterable, P]\n        Alias2 = typing.Union[P, typing.Iterable]\n        self.assertEqual(Alias, Alias2)\n\n    def test_protocols_pickleable(self):\n        global P, CP  # pickle wants to reference the class by name\n        T = TypeVar('T')\n\n        @runtime_checkable\n        class P(Protocol[T]):\n            x = 1\n        class CP(P[int]):\n            pass\n\n        c = CP()\n        c.foo = 42\n        c.bar = 'abc'\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            z = pickle.dumps(c, proto)\n            x = pickle.loads(z)\n            self.assertEqual(x.foo, 42)\n            self.assertEqual(x.bar, 'abc')\n            self.assertEqual(x.x, 1)\n            self.assertEqual(x.__dict__, {'foo': 42, 'bar': 'abc'})\n            s = pickle.dumps(P)\n            D = pickle.loads(s)\n            class E:\n                x = 1\n            self.assertIsInstance(E(), D)\n\n    def test_collections_protocols_allowed(self):\n        @runtime_checkable\n        class Custom(collections.abc.Iterable, Protocol):\n            def close(self): pass\n\n        class A: ...\n        class B:\n            def __iter__(self):\n                return []\n            def close(self):\n                return 0\n\n        self.assertIsSubclass(B, Custom)\n        self.assertNotIsSubclass(A, Custom)\n\n    @skipUnless(\n        hasattr(collections.abc, \"Buffer\"),\n        \"needs collections.abc.Buffer to exist\"\n    )\n    @skip_if_py312b1\n    def test_collections_abc_buffer_protocol_allowed(self):\n        @runtime_checkable\n        class ReleasableBuffer(collections.abc.Buffer, Protocol):\n            def __release_buffer__(self, mv: memoryview) -> None: ...\n\n        class C: pass\n        class D:\n            def __buffer__(self, flags: int) -> memoryview:\n                return memoryview(b'')\n            def __release_buffer__(self, mv: memoryview) -> None:\n                pass\n\n        self.assertIsSubclass(D, ReleasableBuffer)\n        self.assertIsInstance(D(), ReleasableBuffer)\n        self.assertNotIsSubclass(C, ReleasableBuffer)\n        self.assertNotIsInstance(C(), ReleasableBuffer)\n\n    def test_builtin_protocol_allowlist(self):\n        with self.assertRaises(TypeError):\n            class CustomProtocol(TestCase, Protocol):\n                pass\n\n        class CustomContextManager(typing.ContextManager, Protocol):\n            pass\n\n    @skip_if_py312b1\n    def test_typing_extensions_protocol_allowlist(self):\n        @runtime_checkable\n        class ReleasableBuffer(Buffer, Protocol):\n            def __release_buffer__(self, mv: memoryview) -> None: ...\n\n        class C: pass\n        class D:\n            def __buffer__(self, flags: int) -> memoryview:\n                return memoryview(b'')\n            def __release_buffer__(self, mv: memoryview) -> None:\n                pass\n\n        self.assertIsSubclass(D, ReleasableBuffer)\n        self.assertIsInstance(D(), ReleasableBuffer)\n        self.assertNotIsSubclass(C, ReleasableBuffer)\n        self.assertNotIsInstance(C(), ReleasableBuffer)\n\n    def test_non_runtime_protocol_isinstance_check(self):\n        class P(Protocol):\n            x: int\n\n        with self.assertRaisesRegex(TypeError, \"@runtime_checkable\"):\n            isinstance(1, P)\n\n    def test_no_init_same_for_different_protocol_implementations(self):\n        class CustomProtocolWithoutInitA(Protocol):\n            pass\n\n        class CustomProtocolWithoutInitB(Protocol):\n            pass\n\n        self.assertEqual(CustomProtocolWithoutInitA.__init__, CustomProtocolWithoutInitB.__init__)\n\n    def test_protocol_generic_over_paramspec(self):\n        P = ParamSpec(\"P\")\n        T = TypeVar(\"T\")\n        T2 = TypeVar(\"T2\")\n\n        class MemoizedFunc(Protocol[P, T, T2]):\n            cache: typing.Dict[T2, T]\n            def __call__(self, *args: P.args, **kwargs: P.kwargs) -> T: ...\n\n        self.assertEqual(MemoizedFunc.__parameters__, (P, T, T2))\n        self.assertTrue(MemoizedFunc._is_protocol)\n\n        with self.assertRaises(TypeError):\n            MemoizedFunc[[int, str, str]]\n\n        if sys.version_info >= (3, 10):\n            # These unfortunately don't pass on <=3.9,\n            # due to typing._type_check on older Python versions\n            X = MemoizedFunc[[int, str, str], T, T2]\n            self.assertEqual(X.__parameters__, (T, T2))\n            self.assertEqual(X.__args__, ((int, str, str), T, T2))\n\n            Y = X[bytes, memoryview]\n            self.assertEqual(Y.__parameters__, ())\n            self.assertEqual(Y.__args__, ((int, str, str), bytes, memoryview))\n\n    def test_protocol_generic_over_typevartuple(self):\n        Ts = TypeVarTuple(\"Ts\")\n        T = TypeVar(\"T\")\n        T2 = TypeVar(\"T2\")\n\n        class MemoizedFunc(Protocol[Unpack[Ts], T, T2]):\n            cache: typing.Dict[T2, T]\n            def __call__(self, *args: Unpack[Ts]) -> T: ...\n\n        self.assertEqual(MemoizedFunc.__parameters__, (Ts, T, T2))\n        self.assertTrue(MemoizedFunc._is_protocol)\n\n        things = \"arguments\" if sys.version_info >= (3, 10) else \"parameters\"\n\n        # A bug was fixed in 3.11.1\n        # (https://github.com/python/cpython/commit/74920aa27d0c57443dd7f704d6272cca9c507ab3)\n        # That means this assertion doesn't pass on 3.11.0,\n        # but it passes on all other Python versions\n        if sys.version_info[:3] != (3, 11, 0):\n            with self.assertRaisesRegex(TypeError, f\"Too few {things}\"):\n                MemoizedFunc[int]\n\n        X = MemoizedFunc[int, T, T2]\n        self.assertEqual(X.__parameters__, (T, T2))\n        self.assertEqual(X.__args__, (int, T, T2))\n\n        Y = X[bytes, memoryview]\n        self.assertEqual(Y.__parameters__, ())\n        self.assertEqual(Y.__args__, (int, bytes, memoryview))\n\n    def test_get_protocol_members(self):\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(object)\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(object())\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(Protocol)\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(Generic)\n\n        class P(Protocol):\n            a: int\n            def b(self) -> str: ...\n            @property\n            def c(self) -> int: ...\n\n        self.assertEqual(get_protocol_members(P), {'a', 'b', 'c'})\n        self.assertIsInstance(get_protocol_members(P), frozenset)\n        self.assertIsNot(get_protocol_members(P), P.__protocol_attrs__)\n\n        class Concrete:\n            a: int\n            def b(self) -> str: return \"capybara\"\n            @property\n            def c(self) -> int: return 5\n\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(Concrete)\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(Concrete())\n\n        class ConcreteInherit(P):\n            a: int = 42\n            def b(self) -> str: return \"capybara\"\n            @property\n            def c(self) -> int: return 5\n\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(ConcreteInherit)\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(ConcreteInherit())\n\n    def test_get_protocol_members_typing(self):\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(typing.Protocol)\n\n        class P(typing.Protocol):\n            a: int\n            def b(self) -> str: ...\n            @property\n            def c(self) -> int: ...\n\n        self.assertEqual(get_protocol_members(P), {'a', 'b', 'c'})\n        self.assertIsInstance(get_protocol_members(P), frozenset)\n        if hasattr(P, \"__protocol_attrs__\"):\n            self.assertIsNot(get_protocol_members(P), P.__protocol_attrs__)\n\n        class Concrete:\n            a: int\n            def b(self) -> str: return \"capybara\"\n            @property\n            def c(self) -> int: return 5\n\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(Concrete)\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(Concrete())\n\n        class ConcreteInherit(P):\n            a: int = 42\n            def b(self) -> str: return \"capybara\"\n            @property\n            def c(self) -> int: return 5\n\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(ConcreteInherit)\n        with self.assertRaisesRegex(TypeError, \"not a Protocol\"):\n            get_protocol_members(ConcreteInherit())\n\n    def test_is_protocol(self):\n        self.assertTrue(is_protocol(Proto))\n        self.assertTrue(is_protocol(Point))\n        self.assertFalse(is_protocol(Concrete))\n        self.assertFalse(is_protocol(Concrete()))\n        self.assertFalse(is_protocol(Generic))\n        self.assertFalse(is_protocol(object))\n\n        # Protocol is not itself a protocol\n        self.assertFalse(is_protocol(Protocol))\n\n    def test_is_protocol_with_typing(self):\n        self.assertFalse(is_protocol(typing.Protocol))\n\n        class TypingProto(typing.Protocol):\n            a: int\n\n        self.assertTrue(is_protocol(TypingProto))\n\n        class Concrete(TypingProto):\n            a: int\n\n        self.assertFalse(is_protocol(Concrete))\n\n    @skip_if_py312b1\n    def test_interaction_with_isinstance_checks_on_superclasses_with_ABCMeta(self):\n        # Ensure the cache is empty, or this test won't work correctly\n        collections.abc.Sized._abc_registry_clear()\n\n        class Foo(collections.abc.Sized, Protocol): pass\n\n        # CPython gh-105144: this previously raised TypeError\n        # if a Protocol subclass of Sized had been created\n        # before any isinstance() checks against Sized\n        self.assertNotIsInstance(1, collections.abc.Sized)\n\n    @skip_if_py312b1\n    def test_interaction_with_isinstance_checks_on_superclasses_with_ABCMeta_2(self):\n        # Ensure the cache is empty, or this test won't work correctly\n        collections.abc.Sized._abc_registry_clear()\n\n        class Foo(typing.Sized, Protocol): pass\n\n        # CPython gh-105144: this previously raised TypeError\n        # if a Protocol subclass of Sized had been created\n        # before any isinstance() checks against Sized\n        self.assertNotIsInstance(1, typing.Sized)\n\n    def test_empty_protocol_decorated_with_final(self):\n        @final\n        @runtime_checkable\n        class EmptyProtocol(Protocol): ...\n\n        self.assertIsSubclass(object, EmptyProtocol)\n        self.assertIsInstance(object(), EmptyProtocol)\n\n    def test_protocol_decorated_with_final_callable_members(self):\n        @final\n        @runtime_checkable\n        class ProtocolWithMethod(Protocol):\n            def startswith(self, string: str) -> bool: ...\n\n        self.assertIsSubclass(str, ProtocolWithMethod)\n        self.assertNotIsSubclass(int, ProtocolWithMethod)\n        self.assertIsInstance('foo', ProtocolWithMethod)\n        self.assertNotIsInstance(42, ProtocolWithMethod)\n\n    def test_protocol_decorated_with_final_noncallable_members(self):\n        @final\n        @runtime_checkable\n        class ProtocolWithNonCallableMember(Protocol):\n            x: int\n\n        class Foo:\n            x = 42\n\n        only_callable_members_please = (\n            r\"Protocols with non-method members don't support issubclass()\"\n        )\n\n        with self.assertRaisesRegex(TypeError, only_callable_members_please):\n            issubclass(Foo, ProtocolWithNonCallableMember)\n\n        with self.assertRaisesRegex(TypeError, only_callable_members_please):\n            issubclass(int, ProtocolWithNonCallableMember)\n\n        self.assertIsInstance(Foo(), ProtocolWithNonCallableMember)\n        self.assertNotIsInstance(42, ProtocolWithNonCallableMember)\n\n    def test_protocol_decorated_with_final_mixed_members(self):\n        @final\n        @runtime_checkable\n        class ProtocolWithMixedMembers(Protocol):\n            x: int\n            def method(self) -> None: ...\n\n        class Foo:\n            x = 42\n            def method(self) -> None: ...\n\n        only_callable_members_please = (\n            r\"Protocols with non-method members don't support issubclass()\"\n        )\n\n        with self.assertRaisesRegex(TypeError, only_callable_members_please):\n            issubclass(Foo, ProtocolWithMixedMembers)\n\n        with self.assertRaisesRegex(TypeError, only_callable_members_please):\n            issubclass(int, ProtocolWithMixedMembers)\n\n        self.assertIsInstance(Foo(), ProtocolWithMixedMembers)\n        self.assertNotIsInstance(42, ProtocolWithMixedMembers)\n\n    def test_protocol_issubclass_error_message(self):\n        @runtime_checkable\n        class Vec2D(Protocol):\n            x: float\n            y: float\n\n            def square_norm(self) -> float:\n                return self.x ** 2 + self.y ** 2\n\n        self.assertEqual(Vec2D.__protocol_attrs__, {'x', 'y', 'square_norm'})\n        expected_error_message = (\n            \"Protocols with non-method members don't support issubclass().\"\n            \" Non-method members: 'x', 'y'.\"\n        )\n        with self.assertRaisesRegex(TypeError, re.escape(expected_error_message)):\n            issubclass(int, Vec2D)\n\n    def test_nonruntime_protocol_interaction_with_evil_classproperty(self):\n        class classproperty:\n            def __get__(self, instance, type):\n                raise RuntimeError(\"NO\")\n\n        class Commentable(Protocol):\n            evil = classproperty()\n\n        # recognised as a protocol attr,\n        # but not actually accessed by the protocol metaclass\n        # (which would raise RuntimeError) for non-runtime protocols.\n        # See gh-113320\n        self.assertEqual(get_protocol_members(Commentable), {\"evil\"})\n\n    def test_runtime_protocol_interaction_with_evil_classproperty(self):\n        class CustomError(Exception): pass\n\n        class classproperty:\n            def __get__(self, instance, type):\n                raise CustomError\n\n        with self.assertRaises(TypeError) as cm:\n            @runtime_checkable\n            class Commentable(Protocol):\n                evil = classproperty()\n\n        exc = cm.exception\n        self.assertEqual(\n            exc.args[0],\n            \"Failed to determine whether protocol member 'evil' is a method member\"\n        )\n        self.assertIs(type(exc.__cause__), CustomError)\n\n    def test_extensions_runtimecheckable_on_typing_Protocol(self):\n        @runtime_checkable\n        class Functor(typing.Protocol):\n            def foo(self) -> None: ...\n\n        self.assertNotIsSubclass(object, Functor)\n\n        class Bar:\n            def foo(self): pass\n\n        self.assertIsSubclass(Bar, Functor)\n\n\nclass Point2DGeneric(Generic[T], TypedDict):\n    a: T\n    b: T\n\n\nclass Bar(Foo):\n    b: int\n\n\nclass BarGeneric(FooGeneric[T], total=False):\n    b: int\n\n\nclass TypedDictTests(BaseTestCase):\n    def test_basics_functional_syntax(self):\n        Emp = TypedDict('Emp', {'name': str, 'id': int})\n        self.assertIsSubclass(Emp, dict)\n        self.assertIsSubclass(Emp, typing.MutableMapping)\n        self.assertNotIsSubclass(Emp, collections.abc.Sequence)\n        jim = Emp(name='Jim', id=1)\n        self.assertIs(type(jim), dict)\n        self.assertEqual(jim['name'], 'Jim')\n        self.assertEqual(jim['id'], 1)\n        self.assertEqual(Emp.__name__, 'Emp')\n        self.assertEqual(Emp.__module__, __name__)\n        self.assertEqual(Emp.__bases__, (dict,))\n        self.assertEqual(Emp.__annotations__, {'name': str, 'id': int})\n        self.assertEqual(Emp.__total__, True)\n\n    @skipIf(sys.version_info < (3, 13), \"Change in behavior in 3.13\")\n    def test_keywords_syntax_raises_on_3_13(self):\n        with self.assertRaises(TypeError), self.assertWarns(DeprecationWarning):\n            TypedDict('Emp', name=str, id=int)\n\n    @skipIf(sys.version_info >= (3, 13), \"3.13 removes support for kwargs\")\n    def test_basics_keywords_syntax(self):\n        with self.assertWarns(DeprecationWarning):\n            Emp = TypedDict('Emp', name=str, id=int)\n        self.assertIsSubclass(Emp, dict)\n        self.assertIsSubclass(Emp, typing.MutableMapping)\n        self.assertNotIsSubclass(Emp, collections.abc.Sequence)\n        jim = Emp(name='Jim', id=1)\n        self.assertIs(type(jim), dict)\n        self.assertEqual(jim['name'], 'Jim')\n        self.assertEqual(jim['id'], 1)\n        self.assertEqual(Emp.__name__, 'Emp')\n        self.assertEqual(Emp.__module__, __name__)\n        self.assertEqual(Emp.__bases__, (dict,))\n        self.assertEqual(Emp.__annotations__, {'name': str, 'id': int})\n        self.assertEqual(Emp.__total__, True)\n\n    @skipIf(sys.version_info >= (3, 13), \"3.13 removes support for kwargs\")\n    def test_typeddict_special_keyword_names(self):\n        with self.assertWarns(DeprecationWarning):\n            TD = TypedDict(\"TD\", cls=type, self=object, typename=str, _typename=int,\n                           fields=list, _fields=dict)\n        self.assertEqual(TD.__name__, 'TD')\n        self.assertEqual(TD.__annotations__, {'cls': type, 'self': object, 'typename': str,\n                                              '_typename': int, 'fields': list, '_fields': dict})\n        a = TD(cls=str, self=42, typename='foo', _typename=53,\n               fields=[('bar', tuple)], _fields={'baz', set})\n        self.assertEqual(a['cls'], str)\n        self.assertEqual(a['self'], 42)\n        self.assertEqual(a['typename'], 'foo')\n        self.assertEqual(a['_typename'], 53)\n        self.assertEqual(a['fields'], [('bar', tuple)])\n        self.assertEqual(a['_fields'], {'baz', set})\n\n    def test_typeddict_create_errors(self):\n        with self.assertRaises(TypeError):\n            TypedDict.__new__()\n        with self.assertRaises(TypeError):\n            TypedDict()\n        with self.assertRaises(TypeError):\n            TypedDict('Emp', [('name', str)], None)\n\n    def test_typeddict_errors(self):\n        Emp = TypedDict('Emp', {'name': str, 'id': int})\n        self.assertEqual(TypedDict.__module__, 'typing_extensions')\n        jim = Emp(name='Jim', id=1)\n        with self.assertRaises(TypeError):\n            isinstance({}, Emp)\n        with self.assertRaises(TypeError):\n            isinstance(jim, Emp)\n        with self.assertRaises(TypeError):\n            issubclass(dict, Emp)\n\n        if not TYPING_3_11_0:\n            with self.assertRaises(TypeError), self.assertWarns(DeprecationWarning):\n                TypedDict('Hi', x=1)\n            with self.assertRaises(TypeError):\n                TypedDict('Hi', [('x', int), ('y', 1)])\n        with self.assertRaises(TypeError):\n            TypedDict('Hi', [('x', int)], y=int)\n\n    def test_py36_class_syntax_usage(self):\n        self.assertEqual(LabelPoint2D.__name__, 'LabelPoint2D')\n        self.assertEqual(LabelPoint2D.__module__, __name__)\n        self.assertEqual(LabelPoint2D.__annotations__, {'x': int, 'y': int, 'label': str})\n        self.assertEqual(LabelPoint2D.__bases__, (dict,))\n        self.assertEqual(LabelPoint2D.__total__, True)\n        self.assertNotIsSubclass(LabelPoint2D, typing.Sequence)\n        not_origin = Point2D(x=0, y=1)\n        self.assertEqual(not_origin['x'], 0)\n        self.assertEqual(not_origin['y'], 1)\n        other = LabelPoint2D(x=0, y=1, label='hi')\n        self.assertEqual(other['label'], 'hi')\n\n    def test_pickle(self):\n        global EmpD  # pickle wants to reference the class by name\n        EmpD = TypedDict('EmpD', {'name': str, 'id': int})\n        jane = EmpD({'name': 'jane', 'id': 37})\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            z = pickle.dumps(jane, proto)\n            jane2 = pickle.loads(z)\n            self.assertEqual(jane2, jane)\n            self.assertEqual(jane2, {'name': 'jane', 'id': 37})\n            ZZ = pickle.dumps(EmpD, proto)\n            EmpDnew = pickle.loads(ZZ)\n            self.assertEqual(EmpDnew({'name': 'jane', 'id': 37}), jane)\n\n    def test_pickle_generic(self):\n        point = Point2DGeneric(a=5.0, b=3.0)\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            z = pickle.dumps(point, proto)\n            point2 = pickle.loads(z)\n            self.assertEqual(point2, point)\n            self.assertEqual(point2, {'a': 5.0, 'b': 3.0})\n            ZZ = pickle.dumps(Point2DGeneric, proto)\n            Point2DGenericNew = pickle.loads(ZZ)\n            self.assertEqual(Point2DGenericNew({'a': 5.0, 'b': 3.0}), point)\n\n    def test_optional(self):\n        EmpD = TypedDict('EmpD', {'name': str, 'id': int})\n\n        self.assertEqual(typing.Optional[EmpD], typing.Union[None, EmpD])\n        self.assertNotEqual(typing.List[EmpD], typing.Tuple[EmpD])\n\n    def test_total(self):\n        D = TypedDict('D', {'x': int}, total=False)\n        self.assertEqual(D(), {})\n        self.assertEqual(D(x=1), {'x': 1})\n        self.assertEqual(D.__total__, False)\n        self.assertEqual(D.__required_keys__, frozenset())\n        self.assertEqual(D.__optional_keys__, {'x'})\n\n        self.assertEqual(Options(), {})\n        self.assertEqual(Options(log_level=2), {'log_level': 2})\n        self.assertEqual(Options.__total__, False)\n        self.assertEqual(Options.__required_keys__, frozenset())\n        self.assertEqual(Options.__optional_keys__, {'log_level', 'log_path'})\n\n    def test_optional_keys(self):\n        class Point2Dor3D(Point2D, total=False):\n            z: int\n\n        assert Point2Dor3D.__required_keys__ == frozenset(['x', 'y'])\n        assert Point2Dor3D.__optional_keys__ == frozenset(['z'])\n\n    def test_keys_inheritance(self):\n        class BaseAnimal(TypedDict):\n            name: str\n\n        class Animal(BaseAnimal, total=False):\n            voice: str\n            tail: bool\n\n        class Cat(Animal):\n            fur_color: str\n\n        assert BaseAnimal.__required_keys__ == frozenset(['name'])\n        assert BaseAnimal.__optional_keys__ == frozenset([])\n        assert BaseAnimal.__annotations__ == {'name': str}\n\n        assert Animal.__required_keys__ == frozenset(['name'])\n        assert Animal.__optional_keys__ == frozenset(['tail', 'voice'])\n        assert Animal.__annotations__ == {\n            'name': str,\n            'tail': bool,\n            'voice': str,\n        }\n\n        assert Cat.__required_keys__ == frozenset(['name', 'fur_color'])\n        assert Cat.__optional_keys__ == frozenset(['tail', 'voice'])\n        assert Cat.__annotations__ == {\n            'fur_color': str,\n            'name': str,\n            'tail': bool,\n            'voice': str,\n        }\n\n    def test_required_notrequired_keys(self):\n        self.assertEqual(NontotalMovie.__required_keys__,\n                         frozenset({\"title\"}))\n        self.assertEqual(NontotalMovie.__optional_keys__,\n                         frozenset({\"year\"}))\n\n        self.assertEqual(TotalMovie.__required_keys__,\n                         frozenset({\"title\"}))\n        self.assertEqual(TotalMovie.__optional_keys__,\n                         frozenset({\"year\"}))\n\n        self.assertEqual(VeryAnnotated.__required_keys__,\n                         frozenset())\n        self.assertEqual(VeryAnnotated.__optional_keys__,\n                         frozenset({\"a\"}))\n\n        self.assertEqual(AnnotatedMovie.__required_keys__,\n                         frozenset({\"title\"}))\n        self.assertEqual(AnnotatedMovie.__optional_keys__,\n                         frozenset({\"year\"}))\n\n        self.assertEqual(WeirdlyQuotedMovie.__required_keys__,\n                         frozenset({\"title\"}))\n        self.assertEqual(WeirdlyQuotedMovie.__optional_keys__,\n                         frozenset({\"year\"}))\n\n        self.assertEqual(ChildTotalMovie.__required_keys__,\n                         frozenset({\"title\"}))\n        self.assertEqual(ChildTotalMovie.__optional_keys__,\n                         frozenset({\"year\"}))\n\n        self.assertEqual(ChildDeeplyAnnotatedMovie.__required_keys__,\n                         frozenset({\"title\"}))\n        self.assertEqual(ChildDeeplyAnnotatedMovie.__optional_keys__,\n                         frozenset({\"year\"}))\n\n    def test_multiple_inheritance(self):\n        class One(TypedDict):\n            one: int\n        class Two(TypedDict):\n            two: str\n        class Untotal(TypedDict, total=False):\n            untotal: str\n        Inline = TypedDict('Inline', {'inline': bool})\n        class Regular:\n            pass\n\n        class Child(One, Two):\n            child: bool\n        self.assertEqual(\n            Child.__required_keys__,\n            frozenset(['one', 'two', 'child']),\n        )\n        self.assertEqual(\n            Child.__optional_keys__,\n            frozenset([]),\n        )\n        self.assertEqual(\n            Child.__annotations__,\n            {'one': int, 'two': str, 'child': bool},\n        )\n\n        class ChildWithOptional(One, Untotal):\n            child: bool\n        self.assertEqual(\n            ChildWithOptional.__required_keys__,\n            frozenset(['one', 'child']),\n        )\n        self.assertEqual(\n            ChildWithOptional.__optional_keys__,\n            frozenset(['untotal']),\n        )\n        self.assertEqual(\n            ChildWithOptional.__annotations__,\n            {'one': int, 'untotal': str, 'child': bool},\n        )\n\n        class ChildWithTotalFalse(One, Untotal, total=False):\n            child: bool\n        self.assertEqual(\n            ChildWithTotalFalse.__required_keys__,\n            frozenset(['one']),\n        )\n        self.assertEqual(\n            ChildWithTotalFalse.__optional_keys__,\n            frozenset(['untotal', 'child']),\n        )\n        self.assertEqual(\n            ChildWithTotalFalse.__annotations__,\n            {'one': int, 'untotal': str, 'child': bool},\n        )\n\n        class ChildWithInlineAndOptional(Untotal, Inline):\n            child: bool\n        self.assertEqual(\n            ChildWithInlineAndOptional.__required_keys__,\n            frozenset(['inline', 'child']),\n        )\n        self.assertEqual(\n            ChildWithInlineAndOptional.__optional_keys__,\n            frozenset(['untotal']),\n        )\n        self.assertEqual(\n            ChildWithInlineAndOptional.__annotations__,\n            {'inline': bool, 'untotal': str, 'child': bool},\n        )\n\n        class Closed(TypedDict, closed=True):\n            __extra_items__: None\n\n        class Unclosed(TypedDict, closed=False):\n            ...\n\n        class ChildUnclosed(Closed, Unclosed):\n            ...\n\n        self.assertFalse(ChildUnclosed.__closed__)\n        self.assertEqual(ChildUnclosed.__extra_items__, type(None))\n\n        class ChildClosed(Unclosed, Closed):\n            ...\n\n        self.assertFalse(ChildClosed.__closed__)\n        self.assertEqual(ChildClosed.__extra_items__, type(None))\n\n        wrong_bases = [\n            (One, Regular),\n            (Regular, One),\n            (One, Two, Regular),\n            (Inline, Regular),\n            (Untotal, Regular),\n        ]\n        for bases in wrong_bases:\n            with self.subTest(bases=bases):\n                with self.assertRaisesRegex(\n                    TypeError,\n                    'cannot inherit from both a TypedDict type and a non-TypedDict',\n                ):\n                    class Wrong(*bases):\n                        pass\n\n    def test_is_typeddict(self):\n        self.assertIs(is_typeddict(Point2D), True)\n        self.assertIs(is_typeddict(Point2Dor3D), True)\n        self.assertIs(is_typeddict(Union[str, int]), False)\n        # classes, not instances\n        self.assertIs(is_typeddict(Point2D()), False)\n        call_based = TypedDict('call_based', {'a': int})\n        self.assertIs(is_typeddict(call_based), True)\n        self.assertIs(is_typeddict(call_based()), False)\n\n        T = TypeVar(\"T\")\n        class BarGeneric(TypedDict, Generic[T]):\n            a: T\n        self.assertIs(is_typeddict(BarGeneric), True)\n        self.assertIs(is_typeddict(BarGeneric[int]), False)\n        self.assertIs(is_typeddict(BarGeneric()), False)\n\n        if hasattr(typing, \"TypeAliasType\"):\n            ns = {\"TypedDict\": TypedDict}\n            exec(\"\"\"if True:\n                class NewGeneric[T](TypedDict):\n                    a: T\n            \"\"\", ns)\n            NewGeneric = ns[\"NewGeneric\"]\n            self.assertIs(is_typeddict(NewGeneric), True)\n            self.assertIs(is_typeddict(NewGeneric[int]), False)\n            self.assertIs(is_typeddict(NewGeneric()), False)\n\n        # The TypedDict constructor is not itself a TypedDict\n        self.assertIs(is_typeddict(TypedDict), False)\n        if hasattr(typing, \"TypedDict\"):\n            self.assertIs(is_typeddict(typing.TypedDict), False)\n\n    def test_is_typeddict_against_typeddict_from_typing(self):\n        Point = typing.TypedDict('Point', {'x': int, 'y': int})\n\n        class PointDict2D(typing.TypedDict):\n            x: int\n            y: int\n\n        class PointDict3D(PointDict2D, total=False):\n            z: int\n\n        assert is_typeddict(Point) is True\n        assert is_typeddict(PointDict2D) is True\n        assert is_typeddict(PointDict3D) is True\n\n    @skipUnless(HAS_FORWARD_MODULE, \"ForwardRef.__forward_module__ was added in 3.9\")\n    def test_get_type_hints_cross_module_subclass(self):\n        self.assertNotIn(\"_DoNotImport\", globals())\n        self.assertEqual(\n            {k: v.__name__ for k, v in get_type_hints(Bar).items()},\n            {'a': \"_DoNotImport\", 'b': \"int\"}\n        )\n\n    def test_get_type_hints_generic(self):\n        self.assertEqual(\n            get_type_hints(BarGeneric),\n            {'a': typing.Optional[T], 'b': int}\n        )\n\n        class FooBarGeneric(BarGeneric[int]):\n            c: str\n\n        self.assertEqual(\n            get_type_hints(FooBarGeneric),\n            {'a': typing.Optional[T], 'b': int, 'c': str}\n        )\n\n    @skipUnless(TYPING_3_12_0, \"PEP 695 required\")\n    def test_pep695_generic_typeddict(self):\n        ns = {\"TypedDict\": TypedDict}\n        exec(\"\"\"if True:\n            class A[T](TypedDict):\n                a: T\n            \"\"\", ns)\n        A = ns[\"A\"]\n        T, = A.__type_params__\n        self.assertIsInstance(T, TypeVar)\n        self.assertEqual(T.__name__, 'T')\n        self.assertEqual(A.__bases__, (Generic, dict))\n        self.assertEqual(A.__orig_bases__, (TypedDict, Generic[T]))\n        self.assertEqual(A.__mro__, (A, Generic, dict, object))\n        self.assertEqual(A.__parameters__, (T,))\n        self.assertEqual(A[str].__parameters__, ())\n        self.assertEqual(A[str].__args__, (str,))\n\n    def test_generic_inheritance(self):\n        class A(TypedDict, Generic[T]):\n            a: T\n\n        self.assertEqual(A.__bases__, (Generic, dict))\n        self.assertEqual(A.__orig_bases__, (TypedDict, Generic[T]))\n        self.assertEqual(A.__mro__, (A, Generic, dict, object))\n        self.assertEqual(A.__parameters__, (T,))\n        self.assertEqual(A[str].__parameters__, ())\n        self.assertEqual(A[str].__args__, (str,))\n\n        class A2(Generic[T], TypedDict):\n            a: T\n\n        self.assertEqual(A2.__bases__, (Generic, dict))\n        self.assertEqual(A2.__orig_bases__, (Generic[T], TypedDict))\n        self.assertEqual(A2.__mro__, (A2, Generic, dict, object))\n        self.assertEqual(A2.__parameters__, (T,))\n        self.assertEqual(A2[str].__parameters__, ())\n        self.assertEqual(A2[str].__args__, (str,))\n\n        class B(A[KT], total=False):\n            b: KT\n\n        self.assertEqual(B.__bases__, (Generic, dict))\n        self.assertEqual(B.__orig_bases__, (A[KT],))\n        self.assertEqual(B.__mro__, (B, Generic, dict, object))\n        self.assertEqual(B.__parameters__, (KT,))\n        self.assertEqual(B.__total__, False)\n        self.assertEqual(B.__optional_keys__, frozenset(['b']))\n        self.assertEqual(B.__required_keys__, frozenset(['a']))\n\n        self.assertEqual(B[str].__parameters__, ())\n        self.assertEqual(B[str].__args__, (str,))\n        self.assertEqual(B[str].__origin__, B)\n\n        class C(B[int]):\n            c: int\n\n        self.assertEqual(C.__bases__, (Generic, dict))\n        self.assertEqual(C.__orig_bases__, (B[int],))\n        self.assertEqual(C.__mro__, (C, Generic, dict, object))\n        self.assertEqual(C.__parameters__, ())\n        self.assertEqual(C.__total__, True)\n        self.assertEqual(C.__optional_keys__, frozenset(['b']))\n        self.assertEqual(C.__required_keys__, frozenset(['a', 'c']))\n        assert C.__annotations__ == {\n            'a': T,\n            'b': KT,\n            'c': int,\n        }\n        with self.assertRaises(TypeError):\n            C[str]\n\n        class Point3D(Point2DGeneric[T], Generic[T, KT]):\n            c: KT\n\n        self.assertEqual(Point3D.__bases__, (Generic, dict))\n        self.assertEqual(Point3D.__orig_bases__, (Point2DGeneric[T], Generic[T, KT]))\n        self.assertEqual(Point3D.__mro__, (Point3D, Generic, dict, object))\n        self.assertEqual(Point3D.__parameters__, (T, KT))\n        self.assertEqual(Point3D.__total__, True)\n        self.assertEqual(Point3D.__optional_keys__, frozenset())\n        self.assertEqual(Point3D.__required_keys__, frozenset(['a', 'b', 'c']))\n        self.assertEqual(Point3D.__annotations__, {\n            'a': T,\n            'b': T,\n            'c': KT,\n        })\n        self.assertEqual(Point3D[int, str].__origin__, Point3D)\n\n        with self.assertRaises(TypeError):\n            Point3D[int]\n\n        with self.assertRaises(TypeError):\n            class Point3D(Point2DGeneric[T], Generic[KT]):\n                c: KT\n\n    def test_implicit_any_inheritance(self):\n        class A(TypedDict, Generic[T]):\n            a: T\n\n        class B(A[KT], total=False):\n            b: KT\n\n        class WithImplicitAny(B):\n            c: int\n\n        self.assertEqual(WithImplicitAny.__bases__, (Generic, dict,))\n        self.assertEqual(WithImplicitAny.__mro__, (WithImplicitAny, Generic, dict, object))\n        # Consistent with GenericTests.test_implicit_any\n        self.assertEqual(WithImplicitAny.__parameters__, ())\n        self.assertEqual(WithImplicitAny.__total__, True)\n        self.assertEqual(WithImplicitAny.__optional_keys__, frozenset(['b']))\n        self.assertEqual(WithImplicitAny.__required_keys__, frozenset(['a', 'c']))\n        assert WithImplicitAny.__annotations__ == {\n            'a': T,\n            'b': KT,\n            'c': int,\n        }\n        with self.assertRaises(TypeError):\n            WithImplicitAny[str]\n\n    @skipUnless(TYPING_3_9_0, \"Was changed in 3.9\")\n    def test_non_generic_subscript(self):\n        # For backward compatibility, subscription works\n        # on arbitrary TypedDict types.\n        # (But we don't attempt to backport this misfeature onto 3.8.)\n        class TD(TypedDict):\n            a: T\n        A = TD[int]\n        self.assertEqual(A.__origin__, TD)\n        self.assertEqual(A.__parameters__, ())\n        self.assertEqual(A.__args__, (int,))\n        a = A(a=1)\n        self.assertIs(type(a), dict)\n        self.assertEqual(a, {'a': 1})\n\n    def test_orig_bases(self):\n        T = TypeVar('T')\n\n        class Parent(TypedDict):\n            pass\n\n        class Child(Parent):\n            pass\n\n        class OtherChild(Parent):\n            pass\n\n        class MixedChild(Child, OtherChild, Parent):\n            pass\n\n        class GenericParent(TypedDict, Generic[T]):\n            pass\n\n        class GenericChild(GenericParent[int]):\n            pass\n\n        class OtherGenericChild(GenericParent[str]):\n            pass\n\n        class MixedGenericChild(GenericChild, OtherGenericChild, GenericParent[float]):\n            pass\n\n        class MultipleGenericBases(GenericParent[int], GenericParent[float]):\n            pass\n\n        CallTypedDict = TypedDict('CallTypedDict', {})\n\n        self.assertEqual(Parent.__orig_bases__, (TypedDict,))\n        self.assertEqual(Child.__orig_bases__, (Parent,))\n        self.assertEqual(OtherChild.__orig_bases__, (Parent,))\n        self.assertEqual(MixedChild.__orig_bases__, (Child, OtherChild, Parent,))\n        self.assertEqual(GenericParent.__orig_bases__, (TypedDict, Generic[T]))\n        self.assertEqual(GenericChild.__orig_bases__, (GenericParent[int],))\n        self.assertEqual(OtherGenericChild.__orig_bases__, (GenericParent[str],))\n        self.assertEqual(MixedGenericChild.__orig_bases__, (GenericChild, OtherGenericChild, GenericParent[float]))\n        self.assertEqual(MultipleGenericBases.__orig_bases__, (GenericParent[int], GenericParent[float]))\n        self.assertEqual(CallTypedDict.__orig_bases__, (TypedDict,))\n\n    def test_zero_fields_typeddicts(self):\n        T1 = TypedDict(\"T1\", {})\n        class T2(TypedDict): pass\n        try:\n            ns = {\"TypedDict\": TypedDict}\n            exec(\"class T3[tvar](TypedDict): pass\", ns)\n            T3 = ns[\"T3\"]\n        except SyntaxError:\n            class T3(TypedDict): pass\n        S = TypeVar(\"S\")\n        class T4(TypedDict, Generic[S]): pass\n\n        expected_warning = re.escape(\n            \"Failing to pass a value for the 'fields' parameter is deprecated \"\n            \"and will be disallowed in Python 3.15. \"\n            \"To create a TypedDict class with 0 fields \"\n            \"using the functional syntax, \"\n            \"pass an empty dictionary, e.g. `T5 = TypedDict('T5', {})`.\"\n        )\n        with self.assertWarnsRegex(DeprecationWarning, fr\"^{expected_warning}$\"):\n            T5 = TypedDict('T5')\n\n        expected_warning = re.escape(\n            \"Passing `None` as the 'fields' parameter is deprecated \"\n            \"and will be disallowed in Python 3.15. \"\n            \"To create a TypedDict class with 0 fields \"\n            \"using the functional syntax, \"\n            \"pass an empty dictionary, e.g. `T6 = TypedDict('T6', {})`.\"\n        )\n        with self.assertWarnsRegex(DeprecationWarning, fr\"^{expected_warning}$\"):\n            T6 = TypedDict('T6', None)\n\n        for klass in T1, T2, T3, T4, T5, T6:\n            with self.subTest(klass=klass.__name__):\n                self.assertEqual(klass.__annotations__, {})\n                self.assertEqual(klass.__required_keys__, set())\n                self.assertEqual(klass.__optional_keys__, set())\n                self.assertIsInstance(klass(), dict)\n\n    def test_readonly_inheritance(self):\n        class Base1(TypedDict):\n            a: ReadOnly[int]\n\n        class Child1(Base1):\n            b: str\n\n        self.assertEqual(Child1.__readonly_keys__, frozenset({'a'}))\n        self.assertEqual(Child1.__mutable_keys__, frozenset({'b'}))\n\n        class Base2(TypedDict):\n            a: ReadOnly[int]\n\n        class Child2(Base2):\n            b: str\n\n        self.assertEqual(Child1.__readonly_keys__, frozenset({'a'}))\n        self.assertEqual(Child1.__mutable_keys__, frozenset({'b'}))\n\n    def test_make_mutable_key_readonly(self):\n        class Base(TypedDict):\n            a: int\n\n        self.assertEqual(Base.__readonly_keys__, frozenset())\n        self.assertEqual(Base.__mutable_keys__, frozenset({'a'}))\n\n        class Child(Base):\n            a: ReadOnly[int]  # type checker error, but allowed at runtime\n\n        self.assertEqual(Child.__readonly_keys__, frozenset({'a'}))\n        self.assertEqual(Child.__mutable_keys__, frozenset())\n\n    def test_can_make_readonly_key_mutable(self):\n        class Base(TypedDict):\n            a: ReadOnly[int]\n\n        class Child(Base):\n            a: int\n\n        self.assertEqual(Child.__readonly_keys__, frozenset())\n        self.assertEqual(Child.__mutable_keys__, frozenset({'a'}))\n\n    def test_combine_qualifiers(self):\n        class AllTheThings(TypedDict):\n            a: Annotated[Required[ReadOnly[int]], \"why not\"]\n            b: Required[Annotated[ReadOnly[int], \"why not\"]]\n            c: ReadOnly[NotRequired[Annotated[int, \"why not\"]]]\n            d: NotRequired[Annotated[int, \"why not\"]]\n\n        self.assertEqual(AllTheThings.__required_keys__, frozenset({'a', 'b'}))\n        self.assertEqual(AllTheThings.__optional_keys__, frozenset({'c', 'd'}))\n        self.assertEqual(AllTheThings.__readonly_keys__, frozenset({'a', 'b', 'c'}))\n        self.assertEqual(AllTheThings.__mutable_keys__, frozenset({'d'}))\n\n        self.assertEqual(\n            get_type_hints(AllTheThings, include_extras=False),\n            {'a': int, 'b': int, 'c': int, 'd': int},\n        )\n        self.assertEqual(\n            get_type_hints(AllTheThings, include_extras=True),\n            {\n                'a': Annotated[Required[ReadOnly[int]], 'why not'],\n                'b': Required[Annotated[ReadOnly[int], 'why not']],\n                'c': ReadOnly[NotRequired[Annotated[int, 'why not']]],\n                'd': NotRequired[Annotated[int, 'why not']],\n            },\n        )\n\n    def test_extra_keys_non_readonly(self):\n        class Base(TypedDict, closed=True):\n            __extra_items__: str\n\n        class Child(Base):\n            a: NotRequired[int]\n\n        self.assertEqual(Child.__required_keys__, frozenset({}))\n        self.assertEqual(Child.__optional_keys__, frozenset({'a'}))\n        self.assertEqual(Child.__readonly_keys__, frozenset({}))\n        self.assertEqual(Child.__mutable_keys__, frozenset({'a'}))\n\n    def test_extra_keys_readonly(self):\n        class Base(TypedDict, closed=True):\n            __extra_items__: ReadOnly[str]\n\n        class Child(Base):\n            a: NotRequired[str]\n\n        self.assertEqual(Child.__required_keys__, frozenset({}))\n        self.assertEqual(Child.__optional_keys__, frozenset({'a'}))\n        self.assertEqual(Child.__readonly_keys__, frozenset({}))\n        self.assertEqual(Child.__mutable_keys__, frozenset({'a'}))\n\n    def test_extra_key_required(self):\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Special key __extra_items__ does not support Required\"\n        ):\n            TypedDict(\"A\", {\"__extra_items__\": Required[int]}, closed=True)\n\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Special key __extra_items__ does not support NotRequired\"\n        ):\n            TypedDict(\"A\", {\"__extra_items__\": NotRequired[int]}, closed=True)\n\n    def test_regular_extra_items(self):\n        class ExtraReadOnly(TypedDict):\n            __extra_items__: ReadOnly[str]\n\n        self.assertEqual(ExtraReadOnly.__required_keys__, frozenset({'__extra_items__'}))\n        self.assertEqual(ExtraReadOnly.__optional_keys__, frozenset({}))\n        self.assertEqual(ExtraReadOnly.__readonly_keys__, frozenset({'__extra_items__'}))\n        self.assertEqual(ExtraReadOnly.__mutable_keys__, frozenset({}))\n        self.assertEqual(ExtraReadOnly.__extra_items__, None)\n        self.assertFalse(ExtraReadOnly.__closed__)\n\n        class ExtraRequired(TypedDict):\n            __extra_items__: Required[str]\n\n        self.assertEqual(ExtraRequired.__required_keys__, frozenset({'__extra_items__'}))\n        self.assertEqual(ExtraRequired.__optional_keys__, frozenset({}))\n        self.assertEqual(ExtraRequired.__readonly_keys__, frozenset({}))\n        self.assertEqual(ExtraRequired.__mutable_keys__, frozenset({'__extra_items__'}))\n        self.assertEqual(ExtraRequired.__extra_items__, None)\n        self.assertFalse(ExtraRequired.__closed__)\n\n        class ExtraNotRequired(TypedDict):\n            __extra_items__: NotRequired[str]\n\n        self.assertEqual(ExtraNotRequired.__required_keys__, frozenset({}))\n        self.assertEqual(ExtraNotRequired.__optional_keys__, frozenset({'__extra_items__'}))\n        self.assertEqual(ExtraNotRequired.__readonly_keys__, frozenset({}))\n        self.assertEqual(ExtraNotRequired.__mutable_keys__, frozenset({'__extra_items__'}))\n        self.assertEqual(ExtraNotRequired.__extra_items__, None)\n        self.assertFalse(ExtraNotRequired.__closed__)\n\n    def test_closed_inheritance(self):\n        class Base(TypedDict, closed=True):\n            __extra_items__: ReadOnly[Union[str, None]]\n\n        self.assertEqual(Base.__required_keys__, frozenset({}))\n        self.assertEqual(Base.__optional_keys__, frozenset({}))\n        self.assertEqual(Base.__readonly_keys__, frozenset({}))\n        self.assertEqual(Base.__mutable_keys__, frozenset({}))\n        self.assertEqual(Base.__annotations__, {})\n        self.assertEqual(Base.__extra_items__, ReadOnly[Union[str, None]])\n        self.assertTrue(Base.__closed__)\n\n        class Child(Base):\n            a: int\n            __extra_items__: int\n\n        self.assertEqual(Child.__required_keys__, frozenset({'a', \"__extra_items__\"}))\n        self.assertEqual(Child.__optional_keys__, frozenset({}))\n        self.assertEqual(Child.__readonly_keys__, frozenset({}))\n        self.assertEqual(Child.__mutable_keys__, frozenset({'a', \"__extra_items__\"}))\n        self.assertEqual(Child.__annotations__, {\"__extra_items__\": int, \"a\": int})\n        self.assertEqual(Child.__extra_items__, ReadOnly[Union[str, None]])\n        self.assertFalse(Child.__closed__)\n\n        class GrandChild(Child, closed=True):\n            __extra_items__: str\n\n        self.assertEqual(GrandChild.__required_keys__, frozenset({'a', \"__extra_items__\"}))\n        self.assertEqual(GrandChild.__optional_keys__, frozenset({}))\n        self.assertEqual(GrandChild.__readonly_keys__, frozenset({}))\n        self.assertEqual(GrandChild.__mutable_keys__, frozenset({'a', \"__extra_items__\"}))\n        self.assertEqual(GrandChild.__annotations__, {\"__extra_items__\": int, \"a\": int})\n        self.assertEqual(GrandChild.__extra_items__, str)\n        self.assertTrue(GrandChild.__closed__)\n\n    def test_implicit_extra_items(self):\n        class Base(TypedDict):\n            a: int\n\n        self.assertEqual(Base.__extra_items__, None)\n        self.assertFalse(Base.__closed__)\n\n        class ChildA(Base, closed=True):\n            ...\n\n        self.assertEqual(ChildA.__extra_items__, Never)\n        self.assertTrue(ChildA.__closed__)\n\n        class ChildB(Base, closed=True):\n            __extra_items__: None\n\n        self.assertEqual(ChildB.__extra_items__, type(None))\n        self.assertTrue(ChildB.__closed__)\n\n    @skipIf(\n        TYPING_3_13_0,\n        \"The keyword argument alternative to define a \"\n        \"TypedDict type using the functional syntax is no longer supported\"\n    )\n    def test_backwards_compatibility(self):\n        with self.assertWarns(DeprecationWarning):\n            TD = TypedDict(\"TD\", closed=int)\n        self.assertFalse(TD.__closed__)\n        self.assertEqual(TD.__annotations__, {\"closed\": int})\n\n\nclass AnnotatedTests(BaseTestCase):\n\n    def test_repr(self):\n        if hasattr(typing, 'Annotated'):\n            mod_name = 'typing'\n        else:\n            mod_name = \"typing_extensions\"\n        self.assertEqual(\n            repr(Annotated[int, 4, 5]),\n            mod_name + \".Annotated[int, 4, 5]\"\n        )\n        self.assertEqual(\n            repr(Annotated[List[int], 4, 5]),\n            mod_name + \".Annotated[typing.List[int], 4, 5]\"\n        )\n\n    def test_flatten(self):\n        A = Annotated[Annotated[int, 4], 5]\n        self.assertEqual(A, Annotated[int, 4, 5])\n        self.assertEqual(A.__metadata__, (4, 5))\n        self.assertEqual(A.__origin__, int)\n\n    def test_specialize(self):\n        L = Annotated[List[T], \"my decoration\"]\n        LI = Annotated[List[int], \"my decoration\"]\n        self.assertEqual(L[int], Annotated[List[int], \"my decoration\"])\n        self.assertEqual(L[int].__metadata__, (\"my decoration\",))\n        self.assertEqual(L[int].__origin__, List[int])\n        with self.assertRaises(TypeError):\n            LI[int]\n        with self.assertRaises(TypeError):\n            L[int, float]\n\n    def test_hash_eq(self):\n        self.assertEqual(len({Annotated[int, 4, 5], Annotated[int, 4, 5]}), 1)\n        self.assertNotEqual(Annotated[int, 4, 5], Annotated[int, 5, 4])\n        self.assertNotEqual(Annotated[int, 4, 5], Annotated[str, 4, 5])\n        self.assertNotEqual(Annotated[int, 4], Annotated[int, 4, 4])\n        self.assertEqual(\n            {Annotated[int, 4, 5], Annotated[int, 4, 5], Annotated[T, 4, 5]},\n            {Annotated[int, 4, 5], Annotated[T, 4, 5]}\n        )\n\n    def test_instantiate(self):\n        class C:\n            classvar = 4\n\n            def __init__(self, x):\n                self.x = x\n\n            def __eq__(self, other):\n                if not isinstance(other, C):\n                    return NotImplemented\n                return other.x == self.x\n\n        A = Annotated[C, \"a decoration\"]\n        a = A(5)\n        c = C(5)\n        self.assertEqual(a, c)\n        self.assertEqual(a.x, c.x)\n        self.assertEqual(a.classvar, c.classvar)\n\n    def test_instantiate_generic(self):\n        MyCount = Annotated[typing_extensions.Counter[T], \"my decoration\"]\n        self.assertEqual(MyCount([4, 4, 5]), {4: 2, 5: 1})\n        self.assertEqual(MyCount[int]([4, 4, 5]), {4: 2, 5: 1})\n\n    def test_cannot_instantiate_forward(self):\n        A = Annotated[\"int\", (5, 6)]\n        with self.assertRaises(TypeError):\n            A(5)\n\n    def test_cannot_instantiate_type_var(self):\n        A = Annotated[T, (5, 6)]\n        with self.assertRaises(TypeError):\n            A(5)\n\n    def test_cannot_getattr_typevar(self):\n        with self.assertRaises(AttributeError):\n            Annotated[T, (5, 7)].x\n\n    def test_attr_passthrough(self):\n        class C:\n            classvar = 4\n\n        A = Annotated[C, \"a decoration\"]\n        self.assertEqual(A.classvar, 4)\n        A.x = 5\n        self.assertEqual(C.x, 5)\n\n    @skipIf(sys.version_info[:2] in ((3, 9), (3, 10)), \"Waiting for bpo-46491 bugfix.\")\n    def test_special_form_containment(self):\n        class C:\n            classvar: Annotated[ClassVar[int], \"a decoration\"] = 4\n            const: Annotated[Final[int], \"Const\"] = 4\n\n        self.assertEqual(get_type_hints(C, globals())[\"classvar\"], ClassVar[int])\n        self.assertEqual(get_type_hints(C, globals())[\"const\"], Final[int])\n\n    def test_cannot_subclass(self):\n        with self.assertRaisesRegex(TypeError, \"Cannot subclass .*Annotated\"):\n            class C(Annotated):\n                pass\n\n    def test_cannot_check_instance(self):\n        with self.assertRaises(TypeError):\n            isinstance(5, Annotated[int, \"positive\"])\n\n    def test_cannot_check_subclass(self):\n        with self.assertRaises(TypeError):\n            issubclass(int, Annotated[int, \"positive\"])\n\n    def test_pickle(self):\n        samples = [typing.Any, typing.Union[int, str],\n                   typing.Optional[str], Tuple[int, ...],\n                   typing.Callable[[str], bytes],\n                   Self, LiteralString, Never]\n\n        for t in samples:\n            x = Annotated[t, \"a\"]\n\n            for prot in range(pickle.HIGHEST_PROTOCOL + 1):\n                with self.subTest(protocol=prot, type=t):\n                    pickled = pickle.dumps(x, prot)\n                    restored = pickle.loads(pickled)\n                    self.assertEqual(x, restored)\n\n        global _Annotated_test_G\n\n        class _Annotated_test_G(Generic[T]):\n            x = 1\n\n        G = Annotated[_Annotated_test_G[int], \"A decoration\"]\n        G.foo = 42\n        G.bar = 'abc'\n\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            z = pickle.dumps(G, proto)\n            x = pickle.loads(z)\n            self.assertEqual(x.foo, 42)\n            self.assertEqual(x.bar, 'abc')\n            self.assertEqual(x.x, 1)\n\n    def test_subst(self):\n        dec = \"a decoration\"\n        dec2 = \"another decoration\"\n\n        S = Annotated[T, dec2]\n        self.assertEqual(S[int], Annotated[int, dec2])\n\n        self.assertEqual(S[Annotated[int, dec]], Annotated[int, dec, dec2])\n        L = Annotated[List[T], dec]\n\n        self.assertEqual(L[int], Annotated[List[int], dec])\n        with self.assertRaises(TypeError):\n            L[int, int]\n\n        self.assertEqual(S[L[int]], Annotated[List[int], dec, dec2])\n\n        D = Annotated[Dict[KT, VT], dec]\n        self.assertEqual(D[str, int], Annotated[Dict[str, int], dec])\n        with self.assertRaises(TypeError):\n            D[int]\n\n        It = Annotated[int, dec]\n        with self.assertRaises(TypeError):\n            It[None]\n\n        LI = L[int]\n        with self.assertRaises(TypeError):\n            LI[None]\n\n    def test_annotated_in_other_types(self):\n        X = List[Annotated[T, 5]]\n        self.assertEqual(X[int], List[Annotated[int, 5]])\n\n    def test_nested_annotated_with_unhashable_metadata(self):\n        X = Annotated[\n            List[Annotated[str, {\"unhashable_metadata\"}]],\n            \"metadata\"\n        ]\n        self.assertEqual(X.__origin__, List[Annotated[str, {\"unhashable_metadata\"}]])\n        self.assertEqual(X.__metadata__, (\"metadata\",))\n\n\nclass GetTypeHintsTests(BaseTestCase):\n    def test_get_type_hints(self):\n        def foobar(x: List['X']): ...\n        X = Annotated[int, (1, 10)]\n        self.assertEqual(\n            get_type_hints(foobar, globals(), locals()),\n            {'x': List[int]}\n        )\n        self.assertEqual(\n            get_type_hints(foobar, globals(), locals(), include_extras=True),\n            {'x': List[Annotated[int, (1, 10)]]}\n        )\n        BA = Tuple[Annotated[T, (1, 0)], ...]\n        def barfoo(x: BA): ...\n        self.assertEqual(get_type_hints(barfoo, globals(), locals())['x'], Tuple[T, ...])\n        self.assertIs(\n            get_type_hints(barfoo, globals(), locals(), include_extras=True)['x'],\n            BA\n        )\n        def barfoo2(x: typing.Callable[..., Annotated[List[T], \"const\"]],\n                    y: typing.Union[int, Annotated[T, \"mutable\"]]): ...\n        self.assertEqual(\n            get_type_hints(barfoo2, globals(), locals()),\n            {'x': typing.Callable[..., List[T]], 'y': typing.Union[int, T]}\n        )\n        BA2 = typing.Callable[..., List[T]]\n        def barfoo3(x: BA2): ...\n        self.assertIs(\n            get_type_hints(barfoo3, globals(), locals(), include_extras=True)[\"x\"],\n            BA2\n        )\n\n    def test_get_type_hints_refs(self):\n\n        Const = Annotated[T, \"Const\"]\n\n        class MySet(Generic[T]):\n\n            def __ior__(self, other: \"Const[MySet[T]]\") -> \"MySet[T]\":\n                ...\n\n            def __iand__(self, other: Const[\"MySet[T]\"]) -> \"MySet[T]\":\n                ...\n\n        self.assertEqual(\n            get_type_hints(MySet.__iand__, globals(), locals()),\n            {'other': MySet[T], 'return': MySet[T]}\n        )\n\n        self.assertEqual(\n            get_type_hints(MySet.__iand__, globals(), locals(), include_extras=True),\n            {'other': Const[MySet[T]], 'return': MySet[T]}\n        )\n\n        self.assertEqual(\n            get_type_hints(MySet.__ior__, globals(), locals()),\n            {'other': MySet[T], 'return': MySet[T]}\n        )\n\n    def test_get_type_hints_typeddict(self):\n        assert get_type_hints(TotalMovie) == {'title': str, 'year': int}\n        assert get_type_hints(TotalMovie, include_extras=True) == {\n            'title': str,\n            'year': NotRequired[int],\n        }\n\n        assert get_type_hints(AnnotatedMovie) == {'title': str, 'year': int}\n        assert get_type_hints(AnnotatedMovie, include_extras=True) == {\n            'title': Annotated[Required[str], \"foobar\"],\n            'year': NotRequired[Annotated[int, 2000]],\n        }\n\n    def test_orig_bases(self):\n        T = TypeVar('T')\n\n        class Parent(TypedDict):\n            pass\n\n        class Child(Parent):\n            pass\n\n        class OtherChild(Parent):\n            pass\n\n        class MixedChild(Child, OtherChild, Parent):\n            pass\n\n        class GenericParent(TypedDict, Generic[T]):\n            pass\n\n        class GenericChild(GenericParent[int]):\n            pass\n\n        class OtherGenericChild(GenericParent[str]):\n            pass\n\n        class MixedGenericChild(GenericChild, OtherGenericChild, GenericParent[float]):\n            pass\n\n        class MultipleGenericBases(GenericParent[int], GenericParent[float]):\n            pass\n\n        CallTypedDict = TypedDict('CallTypedDict', {})\n\n        self.assertEqual(Parent.__orig_bases__, (TypedDict,))\n        self.assertEqual(Child.__orig_bases__, (Parent,))\n        self.assertEqual(OtherChild.__orig_bases__, (Parent,))\n        self.assertEqual(MixedChild.__orig_bases__, (Child, OtherChild, Parent,))\n        self.assertEqual(GenericParent.__orig_bases__, (TypedDict, Generic[T]))\n        self.assertEqual(GenericChild.__orig_bases__, (GenericParent[int],))\n        self.assertEqual(OtherGenericChild.__orig_bases__, (GenericParent[str],))\n        self.assertEqual(MixedGenericChild.__orig_bases__, (GenericChild, OtherGenericChild, GenericParent[float]))\n        self.assertEqual(MultipleGenericBases.__orig_bases__, (GenericParent[int], GenericParent[float]))\n        self.assertEqual(CallTypedDict.__orig_bases__, (TypedDict,))\n\n\nclass TypeAliasTests(BaseTestCase):\n    def test_canonical_usage_with_variable_annotation(self):\n        ns = {}\n        exec('Alias: TypeAlias = Employee', globals(), ns)\n\n    def test_canonical_usage_with_type_comment(self):\n        Alias: TypeAlias = Employee  # noqa: F841\n\n    def test_cannot_instantiate(self):\n        with self.assertRaises(TypeError):\n            TypeAlias()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(42, TypeAlias)\n\n    def test_no_issubclass(self):\n        with self.assertRaises(TypeError):\n            issubclass(Employee, TypeAlias)\n\n        with self.assertRaises(TypeError):\n            issubclass(TypeAlias, Employee)\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(TypeAlias):\n                pass\n\n        with self.assertRaises(TypeError):\n            class D(type(TypeAlias)):\n                pass\n\n    def test_repr(self):\n        if hasattr(typing, 'TypeAlias'):\n            self.assertEqual(repr(TypeAlias), 'typing.TypeAlias')\n        else:\n            self.assertEqual(repr(TypeAlias), 'typing_extensions.TypeAlias')\n\n    def test_cannot_subscript(self):\n        with self.assertRaises(TypeError):\n            TypeAlias[int]\n\nclass ParamSpecTests(BaseTestCase):\n\n    def test_basic_plain(self):\n        P = ParamSpec('P')\n        self.assertEqual(P, P)\n        self.assertIsInstance(P, ParamSpec)\n        self.assertEqual(P.__name__, 'P')\n        # Should be hashable\n        hash(P)\n\n    def test_repr(self):\n        P = ParamSpec('P')\n        P_co = ParamSpec('P_co', covariant=True)\n        P_contra = ParamSpec('P_contra', contravariant=True)\n        P_infer = ParamSpec('P_infer', infer_variance=True)\n        P_2 = ParamSpec('P_2')\n        self.assertEqual(repr(P), '~P')\n        self.assertEqual(repr(P_2), '~P_2')\n\n        # Note: PEP 612 doesn't require these to be repr-ed correctly, but\n        # just follow CPython.\n        self.assertEqual(repr(P_co), '+P_co')\n        self.assertEqual(repr(P_contra), '-P_contra')\n        # On other versions we use typing.ParamSpec, but it is not aware of\n        # infer_variance=. Not worth creating our own version of ParamSpec\n        # for this.\n        if hasattr(typing, 'TypeAliasType') or not hasattr(typing, 'ParamSpec'):\n            self.assertEqual(repr(P_infer), 'P_infer')\n        else:\n            self.assertEqual(repr(P_infer), '~P_infer')\n\n    def test_variance(self):\n        P_co = ParamSpec('P_co', covariant=True)\n        P_contra = ParamSpec('P_contra', contravariant=True)\n        P_infer = ParamSpec('P_infer', infer_variance=True)\n\n        self.assertIs(P_co.__covariant__, True)\n        self.assertIs(P_co.__contravariant__, False)\n        self.assertIs(P_co.__infer_variance__, False)\n\n        self.assertIs(P_contra.__covariant__, False)\n        self.assertIs(P_contra.__contravariant__, True)\n        self.assertIs(P_contra.__infer_variance__, False)\n\n        self.assertIs(P_infer.__covariant__, False)\n        self.assertIs(P_infer.__contravariant__, False)\n        self.assertIs(P_infer.__infer_variance__, True)\n\n    def test_valid_uses(self):\n        P = ParamSpec('P')\n        T = TypeVar('T')\n        C1 = typing.Callable[P, int]\n        self.assertEqual(C1.__args__, (P, int))\n        self.assertEqual(C1.__parameters__, (P,))\n        C2 = typing.Callable[P, T]\n        self.assertEqual(C2.__args__, (P, T))\n        self.assertEqual(C2.__parameters__, (P, T))\n\n        # Test collections.abc.Callable too.\n        if sys.version_info[:2] >= (3, 9):\n            # Note: no tests for Callable.__parameters__ here\n            # because types.GenericAlias Callable is hardcoded to search\n            # for tp_name \"TypeVar\" in C.  This was changed in 3.10.\n            C3 = collections.abc.Callable[P, int]\n            self.assertEqual(C3.__args__, (P, int))\n            C4 = collections.abc.Callable[P, T]\n            self.assertEqual(C4.__args__, (P, T))\n\n        # ParamSpec instances should also have args and kwargs attributes.\n        # Note: not in dir(P) because of __class__ hacks\n        self.assertTrue(hasattr(P, 'args'))\n        self.assertTrue(hasattr(P, 'kwargs'))\n\n    @skipIf((3, 10, 0) <= sys.version_info[:3] <= (3, 10, 2), \"Needs bpo-46676.\")\n    def test_args_kwargs(self):\n        P = ParamSpec('P')\n        P_2 = ParamSpec('P_2')\n        # Note: not in dir(P) because of __class__ hacks\n        self.assertTrue(hasattr(P, 'args'))\n        self.assertTrue(hasattr(P, 'kwargs'))\n        self.assertIsInstance(P.args, ParamSpecArgs)\n        self.assertIsInstance(P.kwargs, ParamSpecKwargs)\n        self.assertIs(P.args.__origin__, P)\n        self.assertIs(P.kwargs.__origin__, P)\n        self.assertEqual(P.args, P.args)\n        self.assertEqual(P.kwargs, P.kwargs)\n        self.assertNotEqual(P.args, P_2.args)\n        self.assertNotEqual(P.kwargs, P_2.kwargs)\n        self.assertNotEqual(P.args, P.kwargs)\n        self.assertNotEqual(P.kwargs, P.args)\n        self.assertNotEqual(P.args, P_2.kwargs)\n        self.assertEqual(repr(P.args), \"P.args\")\n        self.assertEqual(repr(P.kwargs), \"P.kwargs\")\n\n    def test_user_generics(self):\n        T = TypeVar(\"T\")\n        P = ParamSpec(\"P\")\n        P_2 = ParamSpec(\"P_2\")\n\n        class X(Generic[T, P]):\n            pass\n\n        class Y(Protocol[T, P]):\n            pass\n\n        for klass in X, Y:\n            with self.subTest(klass=klass.__name__):\n                G1 = klass[int, P_2]\n                self.assertEqual(G1.__args__, (int, P_2))\n                self.assertEqual(G1.__parameters__, (P_2,))\n\n                G2 = klass[int, Concatenate[int, P_2]]\n                self.assertEqual(G2.__args__, (int, Concatenate[int, P_2]))\n                self.assertEqual(G2.__parameters__, (P_2,))\n\n        # The following are some valid uses cases in PEP 612 that don't work:\n        # These do not work in 3.9, _type_check blocks the list and ellipsis.\n        # G3 = X[int, [int, bool]]\n        # G4 = X[int, ...]\n        # G5 = Z[[int, str, bool]]\n        # Not working because this is special-cased in 3.10.\n        # G6 = Z[int, str, bool]\n\n        class Z(Generic[P]):\n            pass\n\n        class ProtoZ(Protocol[P]):\n            pass\n\n    def test_pickle(self):\n        global P, P_co, P_contra, P_default\n        P = ParamSpec('P')\n        P_co = ParamSpec('P_co', covariant=True)\n        P_contra = ParamSpec('P_contra', contravariant=True)\n        P_default = ParamSpec('P_default', default=[int])\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            with self.subTest(f'Pickle protocol {proto}'):\n                for paramspec in (P, P_co, P_contra, P_default):\n                    z = pickle.loads(pickle.dumps(paramspec, proto))\n                    self.assertEqual(z.__name__, paramspec.__name__)\n                    self.assertEqual(z.__covariant__, paramspec.__covariant__)\n                    self.assertEqual(z.__contravariant__, paramspec.__contravariant__)\n                    self.assertEqual(z.__bound__, paramspec.__bound__)\n                    self.assertEqual(z.__default__, paramspec.__default__)\n\n    def test_eq(self):\n        P = ParamSpec('P')\n        self.assertEqual(P, P)\n        self.assertEqual(hash(P), hash(P))\n        # ParamSpec should compare by id similar to TypeVar in CPython\n        self.assertNotEqual(ParamSpec('P'), P)\n        self.assertIsNot(ParamSpec('P'), P)\n        # Note: normally you don't test this as it breaks when there's\n        # a hash collision. However, ParamSpec *must* guarantee that\n        # as long as two objects don't have the same ID, their hashes\n        # won't be the same.\n        self.assertNotEqual(hash(ParamSpec('P')), hash(P))\n\n    def test_isinstance_results_unaffected_by_presence_of_tracing_function(self):\n        # See https://github.com/python/typing_extensions/issues/318\n\n        code = textwrap.dedent(\n            \"\"\"\\\n            import sys, typing\n\n            def trace_call(*args):\n                return trace_call\n\n            def run():\n                sys.modules.pop(\"typing_extensions\", None)\n                from typing_extensions import ParamSpec\n                return isinstance(ParamSpec(\"P\"), typing.TypeVar)\n\n            isinstance_result_1 = run()\n            sys.setprofile(trace_call)\n            isinstance_result_2 = run()\n            sys.stdout.write(f\"{isinstance_result_1} {isinstance_result_2}\")\n            \"\"\"\n        )\n\n        # Run this in an isolated process or it pollutes the environment\n        # and makes other tests fail:\n        try:\n            proc = subprocess.run(\n                [sys.executable, \"-c\", code], check=True, capture_output=True, text=True,\n            )\n        except subprocess.CalledProcessError as exc:\n            print(\"stdout\", exc.stdout, sep=\"\\n\")\n            print(\"stderr\", exc.stderr, sep=\"\\n\")\n            raise\n\n        # Sanity checks that assert the test is working as expected\n        self.assertIsInstance(proc.stdout, str)\n        result1, result2 = proc.stdout.split(\" \")\n        self.assertIn(result1, {\"True\", \"False\"})\n        self.assertIn(result2, {\"True\", \"False\"})\n\n        # The actual test:\n        self.assertEqual(result1, result2)\n\n\nclass ConcatenateTests(BaseTestCase):\n    def test_basics(self):\n        P = ParamSpec('P')\n\n        class MyClass: ...\n\n        c = Concatenate[MyClass, P]\n        self.assertNotEqual(c, Concatenate)\n\n    def test_valid_uses(self):\n        P = ParamSpec('P')\n        T = TypeVar('T')\n\n        C1 = Callable[Concatenate[int, P], int]\n        C2 = Callable[Concatenate[int, T, P], T]\n        self.assertEqual(C1.__origin__, C2.__origin__)\n        self.assertNotEqual(C1, C2)\n\n        # Test collections.abc.Callable too.\n        if sys.version_info[:2] >= (3, 9):\n            C3 = collections.abc.Callable[Concatenate[int, P], int]\n            C4 = collections.abc.Callable[Concatenate[int, T, P], T]\n            self.assertEqual(C3.__origin__, C4.__origin__)\n            self.assertNotEqual(C3, C4)\n\n    def test_invalid_uses(self):\n        P = ParamSpec('P')\n        T = TypeVar('T')\n\n        with self.assertRaisesRegex(\n            TypeError,\n            'Cannot take a Concatenate of no types',\n        ):\n            Concatenate[()]\n\n        with self.assertRaisesRegex(\n            TypeError,\n            'The last parameter to Concatenate should be a ParamSpec variable',\n        ):\n            Concatenate[P, T]\n\n        if not TYPING_3_11_0:\n            with self.assertRaisesRegex(\n                TypeError,\n                'each arg must be a type',\n            ):\n                Concatenate[1, P]\n\n    def test_basic_introspection(self):\n        P = ParamSpec('P')\n        C1 = Concatenate[int, P]\n        C2 = Concatenate[int, T, P]\n        self.assertEqual(C1.__origin__, Concatenate)\n        self.assertEqual(C1.__args__, (int, P))\n        self.assertEqual(C2.__origin__, Concatenate)\n        self.assertEqual(C2.__args__, (int, T, P))\n\n    def test_eq(self):\n        P = ParamSpec('P')\n        C1 = Concatenate[int, P]\n        C2 = Concatenate[int, P]\n        C3 = Concatenate[int, T, P]\n        self.assertEqual(C1, C2)\n        self.assertEqual(hash(C1), hash(C2))\n        self.assertNotEqual(C1, C3)\n\n\nclass TypeGuardTests(BaseTestCase):\n    def test_basics(self):\n        TypeGuard[int]  # OK\n        self.assertEqual(TypeGuard[int], TypeGuard[int])\n\n        def foo(arg) -> TypeGuard[int]: ...\n        self.assertEqual(gth(foo), {'return': TypeGuard[int]})\n\n    def test_repr(self):\n        if hasattr(typing, 'TypeGuard'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(TypeGuard), f'{mod_name}.TypeGuard')\n        cv = TypeGuard[int]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeGuard[int]')\n        cv = TypeGuard[Employee]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeGuard[{__name__}.Employee]')\n        cv = TypeGuard[Tuple[int]]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeGuard[typing.Tuple[int]]')\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(TypeGuard)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(type(TypeGuard[int])):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            TypeGuard()\n        with self.assertRaises(TypeError):\n            type(TypeGuard)()\n        with self.assertRaises(TypeError):\n            type(TypeGuard[Optional[int]])()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, TypeGuard[int])\n        with self.assertRaises(TypeError):\n            issubclass(int, TypeGuard)\n\n\nclass TypeIsTests(BaseTestCase):\n    def test_basics(self):\n        TypeIs[int]  # OK\n        self.assertEqual(TypeIs[int], TypeIs[int])\n\n        def foo(arg) -> TypeIs[int]: ...\n        self.assertEqual(gth(foo), {'return': TypeIs[int]})\n\n    def test_repr(self):\n        if hasattr(typing, 'TypeIs'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(TypeIs), f'{mod_name}.TypeIs')\n        cv = TypeIs[int]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeIs[int]')\n        cv = TypeIs[Employee]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeIs[{__name__}.Employee]')\n        cv = TypeIs[Tuple[int]]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeIs[typing.Tuple[int]]')\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(TypeIs)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(type(TypeIs[int])):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            TypeIs()\n        with self.assertRaises(TypeError):\n            type(TypeIs)()\n        with self.assertRaises(TypeError):\n            type(TypeIs[Optional[int]])()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, TypeIs[int])\n        with self.assertRaises(TypeError):\n            issubclass(int, TypeIs)\n\n\nclass TypeExprTests(BaseTestCase):\n    def test_basics(self):\n        TypeExpr[int]  # OK\n        self.assertEqual(TypeExpr[int], TypeExpr[int])\n\n        def foo(arg) -> TypeExpr[int]: ...\n        self.assertEqual(gth(foo), {'return': TypeExpr[int]})\n\n    def test_repr(self):\n        if hasattr(typing, 'TypeExpr'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(TypeExpr), f'{mod_name}.TypeExpr')\n        cv = TypeExpr[int]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeExpr[int]')\n        cv = TypeExpr[Employee]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeExpr[{__name__}.Employee]')\n        cv = TypeExpr[Tuple[int]]\n        self.assertEqual(repr(cv), f'{mod_name}.TypeExpr[typing.Tuple[int]]')\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(TypeExpr)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(type(TypeExpr[int])):\n                pass\n\n    def test_call(self):\n        objs = [\n            1,\n            \"int\",\n            int,\n            Tuple[int, str],\n        ]\n        for obj in objs:\n            with self.subTest(obj=obj):\n                self.assertIs(TypeExpr(obj), obj)\n\n        with self.assertRaises(TypeError):\n            TypeExpr()\n        with self.assertRaises(TypeError):\n            TypeExpr(\"too\", \"many\")\n\n    def test_cannot_init_type(self):\n        with self.assertRaises(TypeError):\n            type(TypeExpr)()\n        with self.assertRaises(TypeError):\n            type(TypeExpr[Optional[int]])()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, TypeExpr[int])\n        with self.assertRaises(TypeError):\n            issubclass(int, TypeExpr)\n\n\nclass LiteralStringTests(BaseTestCase):\n    def test_basics(self):\n        class Foo:\n            def bar(self) -> LiteralString: ...\n            def baz(self) -> \"LiteralString\": ...\n\n        self.assertEqual(gth(Foo.bar), {'return': LiteralString})\n        self.assertEqual(gth(Foo.baz), {'return': LiteralString})\n\n    def test_get_origin(self):\n        self.assertIsNone(get_origin(LiteralString))\n\n    def test_repr(self):\n        if hasattr(typing, 'LiteralString'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(LiteralString), f'{mod_name}.LiteralString')\n\n    def test_cannot_subscript(self):\n        with self.assertRaises(TypeError):\n            LiteralString[int]\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(LiteralString)):\n                pass\n        with self.assertRaises(TypeError):\n            class D(LiteralString):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            LiteralString()\n        with self.assertRaises(TypeError):\n            type(LiteralString)()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, LiteralString)\n        with self.assertRaises(TypeError):\n            issubclass(int, LiteralString)\n\n    def test_alias(self):\n        StringTuple = Tuple[LiteralString, LiteralString]\n        class Alias:\n            def return_tuple(self) -> StringTuple:\n                return (\"foo\", \"pep\" + \"675\")\n\n    def test_typevar(self):\n        StrT = TypeVar(\"StrT\", bound=LiteralString)\n        self.assertIs(StrT.__bound__, LiteralString)\n\n    def test_pickle(self):\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            pickled = pickle.dumps(LiteralString, protocol=proto)\n            self.assertIs(LiteralString, pickle.loads(pickled))\n\n\nclass SelfTests(BaseTestCase):\n    def test_basics(self):\n        class Foo:\n            def bar(self) -> Self: ...\n\n        self.assertEqual(gth(Foo.bar), {'return': Self})\n\n    def test_repr(self):\n        if hasattr(typing, 'Self'):\n            mod_name = 'typing'\n        else:\n            mod_name = 'typing_extensions'\n        self.assertEqual(repr(Self), f'{mod_name}.Self')\n\n    def test_cannot_subscript(self):\n        with self.assertRaises(TypeError):\n            Self[int]\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class C(type(Self)):\n                pass\n\n    def test_cannot_init(self):\n        with self.assertRaises(TypeError):\n            Self()\n        with self.assertRaises(TypeError):\n            type(Self)()\n\n    def test_no_isinstance(self):\n        with self.assertRaises(TypeError):\n            isinstance(1, Self)\n        with self.assertRaises(TypeError):\n            issubclass(int, Self)\n\n    def test_alias(self):\n        TupleSelf = Tuple[Self, Self]\n        class Alias:\n            def return_tuple(self) -> TupleSelf:\n                return (self, self)\n\n    def test_pickle(self):\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            pickled = pickle.dumps(Self, protocol=proto)\n            self.assertIs(Self, pickle.loads(pickled))\n\n\nclass UnpackTests(BaseTestCase):\n    def test_basic_plain(self):\n        Ts = TypeVarTuple('Ts')\n        self.assertEqual(Unpack[Ts], Unpack[Ts])\n        with self.assertRaises(TypeError):\n            Unpack()\n\n    def test_repr(self):\n        Ts = TypeVarTuple('Ts')\n        self.assertEqual(repr(Unpack[Ts]), f'{Unpack.__module__}.Unpack[Ts]')\n\n    def test_cannot_subclass_vars(self):\n        with self.assertRaises(TypeError):\n            class V(Unpack[TypeVarTuple('Ts')]):\n                pass\n\n    def test_tuple(self):\n        Ts = TypeVarTuple('Ts')\n        Tuple[Unpack[Ts]]\n\n    def test_union(self):\n        Xs = TypeVarTuple('Xs')\n        Ys = TypeVarTuple('Ys')\n        self.assertEqual(\n            Union[Unpack[Xs]],\n            Unpack[Xs]\n        )\n        self.assertNotEqual(\n            Union[Unpack[Xs]],\n            Union[Unpack[Xs], Unpack[Ys]]\n        )\n        self.assertEqual(\n            Union[Unpack[Xs], Unpack[Xs]],\n            Unpack[Xs]\n        )\n        self.assertNotEqual(\n            Union[Unpack[Xs], int],\n            Union[Unpack[Xs]]\n        )\n        self.assertNotEqual(\n            Union[Unpack[Xs], int],\n            Union[int]\n        )\n        self.assertEqual(\n            Union[Unpack[Xs], int].__args__,\n            (Unpack[Xs], int)\n        )\n        self.assertEqual(\n            Union[Unpack[Xs], int].__parameters__,\n            (Xs,)\n        )\n        self.assertIs(\n            Union[Unpack[Xs], int].__origin__,\n            Union\n        )\n\n    def test_concatenation(self):\n        Xs = TypeVarTuple('Xs')\n        self.assertEqual(Tuple[int, Unpack[Xs]].__args__, (int, Unpack[Xs]))\n        self.assertEqual(Tuple[Unpack[Xs], int].__args__, (Unpack[Xs], int))\n        self.assertEqual(Tuple[int, Unpack[Xs], str].__args__,\n                         (int, Unpack[Xs], str))\n        class C(Generic[Unpack[Xs]]): pass\n        class D(Protocol[Unpack[Xs]]): pass\n        for klass in C, D:\n            with self.subTest(klass=klass.__name__):\n                self.assertEqual(klass[int, Unpack[Xs]].__args__, (int, Unpack[Xs]))\n                self.assertEqual(klass[Unpack[Xs], int].__args__, (Unpack[Xs], int))\n                self.assertEqual(klass[int, Unpack[Xs], str].__args__,\n                                 (int, Unpack[Xs], str))\n\n    def test_class(self):\n        Ts = TypeVarTuple('Ts')\n\n        class C(Generic[Unpack[Ts]]): pass\n        class D(Protocol[Unpack[Ts]]): pass\n\n        for klass in C, D:\n            with self.subTest(klass=klass.__name__):\n                self.assertEqual(klass[int].__args__, (int,))\n                self.assertEqual(klass[int, str].__args__, (int, str))\n\n        with self.assertRaises(TypeError):\n            class C(Generic[Unpack[Ts], int]): pass\n\n        with self.assertRaises(TypeError):\n            class D(Protocol[Unpack[Ts], int]): pass\n\n        T1 = TypeVar('T')\n        T2 = TypeVar('T')\n        class C(Generic[T1, T2, Unpack[Ts]]): pass\n        class D(Protocol[T1, T2, Unpack[Ts]]): pass\n        for klass in C, D:\n            with self.subTest(klass=klass.__name__):\n                self.assertEqual(klass[int, str].__args__, (int, str))\n                self.assertEqual(klass[int, str, float].__args__, (int, str, float))\n                self.assertEqual(\n                    klass[int, str, float, bool].__args__, (int, str, float, bool)\n                )\n                # A bug was fixed in 3.11.1\n                # (https://github.com/python/cpython/commit/74920aa27d0c57443dd7f704d6272cca9c507ab3)\n                # That means this assertion doesn't pass on 3.11.0,\n                # but it passes on all other Python versions\n                if sys.version_info[:3] != (3, 11, 0):\n                    with self.assertRaises(TypeError):\n                        klass[int]\n\n\nclass TypeVarTupleTests(BaseTestCase):\n\n    def test_basic_plain(self):\n        Ts = TypeVarTuple('Ts')\n        self.assertEqual(Ts, Ts)\n        self.assertIsInstance(Ts, TypeVarTuple)\n        Xs = TypeVarTuple('Xs')\n        Ys = TypeVarTuple('Ys')\n        self.assertNotEqual(Xs, Ys)\n\n    def test_repr(self):\n        Ts = TypeVarTuple('Ts')\n        self.assertEqual(repr(Ts), 'Ts')\n\n    def test_no_redefinition(self):\n        self.assertNotEqual(TypeVarTuple('Ts'), TypeVarTuple('Ts'))\n\n    def test_cannot_subclass_vars(self):\n        with self.assertRaises(TypeError):\n            class V(TypeVarTuple('Ts')):\n                pass\n\n    def test_cannot_subclass_var_itself(self):\n        with self.assertRaises(TypeError):\n            class V(TypeVarTuple):\n                pass\n\n    def test_cannot_instantiate_vars(self):\n        Ts = TypeVarTuple('Ts')\n        with self.assertRaises(TypeError):\n            Ts()\n\n    def test_tuple(self):\n        Ts = TypeVarTuple('Ts')\n        # Not legal at type checking time but we can't really check against it.\n        Tuple[Ts]\n\n    def test_args_and_parameters(self):\n        Ts = TypeVarTuple('Ts')\n\n        t = Tuple[tuple(Ts)]\n        if sys.version_info >= (3, 11):\n            self.assertEqual(t.__args__, (typing.Unpack[Ts],))\n        else:\n            self.assertEqual(t.__args__, (Unpack[Ts],))\n        self.assertEqual(t.__parameters__, (Ts,))\n\n    def test_pickle(self):\n        global Ts, Ts_default  # pickle wants to reference the class by name\n        Ts = TypeVarTuple('Ts')\n        Ts_default = TypeVarTuple('Ts_default', default=Unpack[Tuple[int, str]])\n\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            for typevartuple in (Ts, Ts_default):\n                z = pickle.loads(pickle.dumps(typevartuple, proto))\n                self.assertEqual(z.__name__, typevartuple.__name__)\n                self.assertEqual(z.__default__, typevartuple.__default__)\n\n\nclass FinalDecoratorTests(BaseTestCase):\n    def test_final_unmodified(self):\n        def func(x): ...\n        self.assertIs(func, final(func))\n\n    def test_dunder_final(self):\n        @final\n        def func(): ...\n        @final\n        class Cls: ...\n        self.assertIs(True, func.__final__)\n        self.assertIs(True, Cls.__final__)\n\n        class Wrapper:\n            __slots__ = (\"func\",)\n            def __init__(self, func):\n                self.func = func\n            def __call__(self, *args, **kwargs):\n                return self.func(*args, **kwargs)\n\n        # Check that no error is thrown if the attribute\n        # is not writable.\n        @final\n        @Wrapper\n        def wrapped(): ...\n        self.assertIsInstance(wrapped, Wrapper)\n        self.assertIs(False, hasattr(wrapped, \"__final__\"))\n\n        class Meta(type):\n            @property\n            def __final__(self): return \"can't set me\"\n        @final\n        class WithMeta(metaclass=Meta): ...\n        self.assertEqual(WithMeta.__final__, \"can't set me\")\n\n        # Builtin classes throw TypeError if you try to set an\n        # attribute.\n        final(int)\n        self.assertIs(False, hasattr(int, \"__final__\"))\n\n        # Make sure it works with common builtin decorators\n        class Methods:\n            @final\n            @classmethod\n            def clsmethod(cls): ...\n\n            @final\n            @staticmethod\n            def stmethod(): ...\n\n            # The other order doesn't work because property objects\n            # don't allow attribute assignment.\n            @property\n            @final\n            def prop(self): ...\n\n            @final\n            @lru_cache  # noqa: B019\n            def cached(self): ...\n\n        # Use getattr_static because the descriptor returns the\n        # underlying function, which doesn't have __final__.\n        self.assertIs(\n            True,\n            inspect.getattr_static(Methods, \"clsmethod\").__final__\n        )\n        self.assertIs(\n            True,\n            inspect.getattr_static(Methods, \"stmethod\").__final__\n        )\n        self.assertIs(True, Methods.prop.fget.__final__)\n        self.assertIs(True, Methods.cached.__final__)\n\n\nclass RevealTypeTests(BaseTestCase):\n    def test_reveal_type(self):\n        obj = object()\n\n        with contextlib.redirect_stderr(io.StringIO()) as stderr:\n            self.assertIs(obj, reveal_type(obj))\n            self.assertEqual(\"Runtime type is 'object'\", stderr.getvalue().strip())\n\n\nclass DataclassTransformTests(BaseTestCase):\n    def test_decorator(self):\n        def create_model(*, frozen: bool = False, kw_only: bool = True):\n            return lambda cls: cls\n\n        decorated = dataclass_transform(kw_only_default=True, order_default=False)(create_model)\n\n        class CustomerModel:\n            id: int\n\n        self.assertIs(decorated, create_model)\n        self.assertEqual(\n            decorated.__dataclass_transform__,\n            {\n                \"eq_default\": True,\n                \"order_default\": False,\n                \"kw_only_default\": True,\n                \"frozen_default\": False,\n                \"field_specifiers\": (),\n                \"kwargs\": {},\n            }\n        )\n        self.assertIs(\n            decorated(frozen=True, kw_only=False)(CustomerModel),\n            CustomerModel\n        )\n\n    def test_base_class(self):\n        class ModelBase:\n            def __init_subclass__(cls, *, frozen: bool = False): ...\n\n        Decorated = dataclass_transform(\n            eq_default=True,\n            order_default=True,\n            # Arbitrary unrecognized kwargs are accepted at runtime.\n            make_everything_awesome=True,\n        )(ModelBase)\n\n        class CustomerModel(Decorated, frozen=True):\n            id: int\n\n        self.assertIs(Decorated, ModelBase)\n        self.assertEqual(\n            Decorated.__dataclass_transform__,\n            {\n                \"eq_default\": True,\n                \"order_default\": True,\n                \"kw_only_default\": False,\n                \"frozen_default\": False,\n                \"field_specifiers\": (),\n                \"kwargs\": {\"make_everything_awesome\": True},\n            }\n        )\n        self.assertIsSubclass(CustomerModel, Decorated)\n\n    def test_metaclass(self):\n        class Field: ...\n\n        class ModelMeta(type):\n            def __new__(\n                cls, name, bases, namespace, *, init: bool = True,\n            ):\n                return super().__new__(cls, name, bases, namespace)\n\n        Decorated = dataclass_transform(\n            order_default=True, field_specifiers=(Field,)\n        )(ModelMeta)\n\n        class ModelBase(metaclass=Decorated): ...\n\n        class CustomerModel(ModelBase, init=False):\n            id: int\n\n        self.assertIs(Decorated, ModelMeta)\n        self.assertEqual(\n            Decorated.__dataclass_transform__,\n            {\n                \"eq_default\": True,\n                \"order_default\": True,\n                \"kw_only_default\": False,\n                \"frozen_default\": False,\n                \"field_specifiers\": (Field,),\n                \"kwargs\": {},\n            }\n        )\n        self.assertIsInstance(CustomerModel, Decorated)\n\n\nclass AllTests(BaseTestCase):\n\n    def test_drop_in_for_typing(self):\n        # Check that the typing_extensions.__all__ is a superset of\n        # typing.__all__.\n        t_all = set(typing.__all__)\n        te_all = set(typing_extensions.__all__)\n        exceptions = {\"ByteString\"}\n        self.assertGreaterEqual(te_all, t_all - exceptions)\n        # Deprecated, to be removed in 3.14\n        self.assertFalse(hasattr(typing_extensions, \"ByteString\"))\n        # These were never included in `typing.__all__`,\n        # and have been removed in Python 3.13\n        self.assertNotIn('re', te_all)\n        self.assertNotIn('io', te_all)\n\n    def test_typing_extensions_includes_standard(self):\n        a = typing_extensions.__all__\n        self.assertIn('ClassVar', a)\n        self.assertIn('Type', a)\n        self.assertIn('ChainMap', a)\n        self.assertIn('ContextManager', a)\n        self.assertIn('Counter', a)\n        self.assertIn('DefaultDict', a)\n        self.assertIn('Deque', a)\n        self.assertIn('NewType', a)\n        self.assertIn('overload', a)\n        self.assertIn('Text', a)\n        self.assertIn('TYPE_CHECKING', a)\n        self.assertIn('TypeAlias', a)\n        self.assertIn('ParamSpec', a)\n        self.assertIn(\"Concatenate\", a)\n\n        self.assertIn('Annotated', a)\n        self.assertIn('get_type_hints', a)\n\n        self.assertIn('Awaitable', a)\n        self.assertIn('AsyncIterator', a)\n        self.assertIn('AsyncIterable', a)\n        self.assertIn('Coroutine', a)\n        self.assertIn('AsyncContextManager', a)\n\n        self.assertIn('AsyncGenerator', a)\n\n        self.assertIn('Protocol', a)\n        self.assertIn('runtime', a)\n\n        # Check that all objects in `__all__` are present in the module\n        for name in a:\n            self.assertTrue(hasattr(typing_extensions, name))\n\n    def test_all_names_in___all__(self):\n        exclude = {\n            'GenericMeta',\n            'KT',\n            'PEP_560',\n            'T',\n            'T_co',\n            'T_contra',\n            'VT',\n        }\n        actual_names = {\n            name for name in dir(typing_extensions)\n            if not name.startswith(\"_\")\n            and not isinstance(getattr(typing_extensions, name), types.ModuleType)\n        }\n        # Make sure all public names are in __all__\n        self.assertEqual({*exclude, *typing_extensions.__all__},\n                         actual_names)\n        # Make sure all excluded names actually exist\n        self.assertLessEqual(exclude, actual_names)\n\n    def test_typing_extensions_defers_when_possible(self):\n        exclude = set()\n        if sys.version_info < (3, 10):\n            exclude |= {'get_args', 'get_origin'}\n        if sys.version_info < (3, 10, 1):\n            exclude |= {\"Literal\"}\n        if sys.version_info < (3, 11):\n            exclude |= {'final', 'Any', 'NewType', 'overload'}\n        if sys.version_info < (3, 12):\n            exclude |= {\n                'SupportsAbs', 'SupportsBytes',\n                'SupportsComplex', 'SupportsFloat', 'SupportsIndex', 'SupportsInt',\n                'SupportsRound', 'Unpack', 'dataclass_transform',\n            }\n        if sys.version_info < (3, 13):\n            exclude |= {\n                'NamedTuple', 'Protocol', 'runtime_checkable', 'Generator',\n                'AsyncGenerator', 'ContextManager', 'AsyncContextManager',\n                'ParamSpec', 'TypeVar', 'TypeVarTuple', 'get_type_hints',\n            }\n        if not typing_extensions._PEP_728_IMPLEMENTED:\n            exclude |= {'TypedDict', 'is_typeddict'}\n        for item in typing_extensions.__all__:\n            if item not in exclude and hasattr(typing, item):\n                self.assertIs(\n                    getattr(typing_extensions, item),\n                    getattr(typing, item))\n\n    def test_typing_extensions_compiles_with_opt(self):\n        file_path = typing_extensions.__file__\n        try:\n            subprocess.check_output(f'{sys.executable} -OO {file_path}',\n                                    stderr=subprocess.STDOUT,\n                                    shell=True)\n        except subprocess.CalledProcessError:\n            self.fail('Module does not compile with optimize=2 (-OO flag).')\n\n\nclass CoolEmployee(NamedTuple):\n    name: str\n    cool: int\n\n\nclass CoolEmployeeWithDefault(NamedTuple):\n    name: str\n    cool: int = 0\n\n\nclass XMeth(NamedTuple):\n    x: int\n\n    def double(self):\n        return 2 * self.x\n\n\nclass NamedTupleTests(BaseTestCase):\n    class NestedEmployee(NamedTuple):\n        name: str\n        cool: int\n\n    def test_basics(self):\n        Emp = NamedTuple('Emp', [('name', str), ('id', int)])\n        self.assertIsSubclass(Emp, tuple)\n        joe = Emp('Joe', 42)\n        jim = Emp(name='Jim', id=1)\n        self.assertIsInstance(joe, Emp)\n        self.assertIsInstance(joe, tuple)\n        self.assertEqual(joe.name, 'Joe')\n        self.assertEqual(joe.id, 42)\n        self.assertEqual(jim.name, 'Jim')\n        self.assertEqual(jim.id, 1)\n        self.assertEqual(Emp.__name__, 'Emp')\n        self.assertEqual(Emp._fields, ('name', 'id'))\n        self.assertEqual(Emp.__annotations__,\n                         collections.OrderedDict([('name', str), ('id', int)]))\n\n    def test_annotation_usage(self):\n        tim = CoolEmployee('Tim', 9000)\n        self.assertIsInstance(tim, CoolEmployee)\n        self.assertIsInstance(tim, tuple)\n        self.assertEqual(tim.name, 'Tim')\n        self.assertEqual(tim.cool, 9000)\n        self.assertEqual(CoolEmployee.__name__, 'CoolEmployee')\n        self.assertEqual(CoolEmployee._fields, ('name', 'cool'))\n        self.assertEqual(CoolEmployee.__annotations__,\n                         collections.OrderedDict(name=str, cool=int))\n\n    def test_annotation_usage_with_default(self):\n        jelle = CoolEmployeeWithDefault('Jelle')\n        self.assertIsInstance(jelle, CoolEmployeeWithDefault)\n        self.assertIsInstance(jelle, tuple)\n        self.assertEqual(jelle.name, 'Jelle')\n        self.assertEqual(jelle.cool, 0)\n        cooler_employee = CoolEmployeeWithDefault('Sjoerd', 1)\n        self.assertEqual(cooler_employee.cool, 1)\n\n        self.assertEqual(CoolEmployeeWithDefault.__name__, 'CoolEmployeeWithDefault')\n        self.assertEqual(CoolEmployeeWithDefault._fields, ('name', 'cool'))\n        self.assertEqual(CoolEmployeeWithDefault.__annotations__,\n                         dict(name=str, cool=int))\n\n        with self.assertRaisesRegex(\n            TypeError,\n            'Non-default namedtuple field y cannot follow default field x'\n        ):\n            class NonDefaultAfterDefault(NamedTuple):\n                x: int = 3\n                y: int\n\n    def test_field_defaults(self):\n        self.assertEqual(CoolEmployeeWithDefault._field_defaults, dict(cool=0))\n\n    def test_annotation_usage_with_methods(self):\n        self.assertEqual(XMeth(1).double(), 2)\n        self.assertEqual(XMeth(42).x, XMeth(42)[0])\n        self.assertEqual(str(XRepr(42)), '42 -> 1')\n        self.assertEqual(XRepr(1, 2) + XRepr(3), 0)\n\n        bad_overwrite_error_message = 'Cannot overwrite NamedTuple attribute'\n\n        with self.assertRaisesRegex(AttributeError, bad_overwrite_error_message):\n            class XMethBad(NamedTuple):\n                x: int\n                def _fields(self):\n                    return 'no chance for this'\n\n        with self.assertRaisesRegex(AttributeError, bad_overwrite_error_message):\n            class XMethBad2(NamedTuple):\n                x: int\n                def _source(self):\n                    return 'no chance for this as well'\n\n    def test_multiple_inheritance(self):\n        class A:\n            pass\n        with self.assertRaisesRegex(\n            TypeError,\n            'can only inherit from a NamedTuple type and Generic'\n        ):\n            class X(NamedTuple, A):\n                x: int\n\n        with self.assertRaisesRegex(\n            TypeError,\n            'can only inherit from a NamedTuple type and Generic'\n        ):\n            class Y(NamedTuple, tuple):\n                x: int\n\n        with self.assertRaisesRegex(TypeError, 'duplicate base class'):\n            class Z(NamedTuple, NamedTuple):\n                x: int\n\n        class A(NamedTuple):\n            x: int\n        with self.assertRaisesRegex(\n            TypeError,\n            'can only inherit from a NamedTuple type and Generic'\n        ):\n            class XX(NamedTuple, A):\n                y: str\n\n    def test_generic(self):\n        class X(NamedTuple, Generic[T]):\n            x: T\n        self.assertEqual(X.__bases__, (tuple, Generic))\n        self.assertEqual(X.__orig_bases__, (NamedTuple, Generic[T]))\n        self.assertEqual(X.__mro__, (X, tuple, Generic, object))\n\n        class Y(Generic[T], NamedTuple):\n            x: T\n        self.assertEqual(Y.__bases__, (Generic, tuple))\n        self.assertEqual(Y.__orig_bases__, (Generic[T], NamedTuple))\n        self.assertEqual(Y.__mro__, (Y, Generic, tuple, object))\n\n        for G in X, Y:\n            with self.subTest(type=G):\n                self.assertEqual(G.__parameters__, (T,))\n                A = G[int]\n                self.assertIs(A.__origin__, G)\n                self.assertEqual(A.__args__, (int,))\n                self.assertEqual(A.__parameters__, ())\n\n                a = A(3)\n                self.assertIs(type(a), G)\n                self.assertIsInstance(a, G)\n                self.assertEqual(a.x, 3)\n\n                things = \"arguments\" if sys.version_info >= (3, 10) else \"parameters\"\n                with self.assertRaisesRegex(TypeError, f'Too many {things}'):\n                    G[int, str]\n\n    @skipUnless(TYPING_3_9_0, \"tuple.__class_getitem__ was added in 3.9\")\n    def test_non_generic_subscript_py39_plus(self):\n        # For backward compatibility, subscription works\n        # on arbitrary NamedTuple types.\n        class Group(NamedTuple):\n            key: T\n            group: list[T]\n        A = Group[int]\n        self.assertEqual(A.__origin__, Group)\n        self.assertEqual(A.__parameters__, ())\n        self.assertEqual(A.__args__, (int,))\n        a = A(1, [2])\n        self.assertIs(type(a), Group)\n        self.assertEqual(a, (1, [2]))\n\n    @skipIf(TYPING_3_9_0, \"Test isn't relevant to 3.9+\")\n    def test_non_generic_subscript_error_message_py38(self):\n        class Group(NamedTuple):\n            key: T\n            group: List[T]\n\n        with self.assertRaisesRegex(TypeError, 'not subscriptable'):\n            Group[int]\n\n        for attr in ('__args__', '__origin__', '__parameters__'):\n            with self.subTest(attr=attr):\n                self.assertFalse(hasattr(Group, attr))\n\n    def test_namedtuple_keyword_usage(self):\n        with self.assertWarnsRegex(\n            DeprecationWarning,\n            \"Creating NamedTuple classes using keyword arguments is deprecated\"\n        ):\n            LocalEmployee = NamedTuple(\"LocalEmployee\", name=str, age=int)\n\n        nick = LocalEmployee('Nick', 25)\n        self.assertIsInstance(nick, tuple)\n        self.assertEqual(nick.name, 'Nick')\n        self.assertEqual(LocalEmployee.__name__, 'LocalEmployee')\n        self.assertEqual(LocalEmployee._fields, ('name', 'age'))\n        self.assertEqual(LocalEmployee.__annotations__, dict(name=str, age=int))\n\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Either list of fields or keywords can be provided to NamedTuple, not both\"\n        ):\n            NamedTuple('Name', [('x', int)], y=str)\n\n        with self.assertRaisesRegex(\n            TypeError,\n            \"Either list of fields or keywords can be provided to NamedTuple, not both\"\n        ):\n            NamedTuple('Name', [], y=str)\n\n        with self.assertRaisesRegex(\n            TypeError,\n            (\n                r\"Cannot pass `None` as the 'fields' parameter \"\n                r\"and also specify fields using keyword arguments\"\n            )\n        ):\n            NamedTuple('Name', None, x=int)\n\n    def test_namedtuple_special_keyword_names(self):\n        with self.assertWarnsRegex(\n            DeprecationWarning,\n            \"Creating NamedTuple classes using keyword arguments is deprecated\"\n        ):\n            NT = NamedTuple(\"NT\", cls=type, self=object, typename=str, fields=list)\n\n        self.assertEqual(NT.__name__, 'NT')\n        self.assertEqual(NT._fields, ('cls', 'self', 'typename', 'fields'))\n        a = NT(cls=str, self=42, typename='foo', fields=[('bar', tuple)])\n        self.assertEqual(a.cls, str)\n        self.assertEqual(a.self, 42)\n        self.assertEqual(a.typename, 'foo')\n        self.assertEqual(a.fields, [('bar', tuple)])\n\n    def test_empty_namedtuple(self):\n        expected_warning = re.escape(\n            \"Failing to pass a value for the 'fields' parameter is deprecated \"\n            \"and will be disallowed in Python 3.15. \"\n            \"To create a NamedTuple class with 0 fields \"\n            \"using the functional syntax, \"\n            \"pass an empty list, e.g. `NT1 = NamedTuple('NT1', [])`.\"\n        )\n        with self.assertWarnsRegex(DeprecationWarning, fr\"^{expected_warning}$\"):\n            NT1 = NamedTuple('NT1')\n\n        expected_warning = re.escape(\n            \"Passing `None` as the 'fields' parameter is deprecated \"\n            \"and will be disallowed in Python 3.15. \"\n            \"To create a NamedTuple class with 0 fields \"\n            \"using the functional syntax, \"\n            \"pass an empty list, e.g. `NT2 = NamedTuple('NT2', [])`.\"\n        )\n        with self.assertWarnsRegex(DeprecationWarning, fr\"^{expected_warning}$\"):\n            NT2 = NamedTuple('NT2', None)\n\n        NT3 = NamedTuple('NT2', [])\n\n        class CNT(NamedTuple):\n            pass  # empty body\n\n        for struct in NT1, NT2, NT3, CNT:\n            with self.subTest(struct=struct):\n                self.assertEqual(struct._fields, ())\n                self.assertEqual(struct.__annotations__, {})\n                self.assertIsInstance(struct(), struct)\n                self.assertEqual(struct._field_defaults, {})\n\n    def test_namedtuple_errors(self):\n        with self.assertRaises(TypeError):\n            NamedTuple.__new__()\n        with self.assertRaises(TypeError):\n            NamedTuple()\n        with self.assertRaises(TypeError):\n            NamedTuple('Emp', [('name', str)], None)\n        with self.assertRaisesRegex(ValueError, 'cannot start with an underscore'):\n            NamedTuple('Emp', [('_name', str)])\n        with self.assertRaises(TypeError):\n            NamedTuple(typename='Emp', name=str, id=int)\n\n    def test_copy_and_pickle(self):\n        global Emp  # pickle wants to reference the class by name\n        Emp = NamedTuple('Emp', [('name', str), ('cool', int)])\n        for cls in Emp, CoolEmployee, self.NestedEmployee:\n            with self.subTest(cls=cls):\n                jane = cls('jane', 37)\n                for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n                    z = pickle.dumps(jane, proto)\n                    jane2 = pickle.loads(z)\n                    self.assertEqual(jane2, jane)\n                    self.assertIsInstance(jane2, cls)\n\n                jane2 = copy.copy(jane)\n                self.assertEqual(jane2, jane)\n                self.assertIsInstance(jane2, cls)\n\n                jane2 = copy.deepcopy(jane)\n                self.assertEqual(jane2, jane)\n                self.assertIsInstance(jane2, cls)\n\n    def test_docstring(self):\n        self.assertIsInstance(NamedTuple.__doc__, str)\n\n    @skipUnless(TYPING_3_9_0, \"NamedTuple was a class on 3.8 and lower\")\n    def test_same_as_typing_NamedTuple_39_plus(self):\n        self.assertEqual(\n            set(dir(NamedTuple)) - {\"__text_signature__\"},\n            set(dir(typing.NamedTuple))\n        )\n        self.assertIs(type(NamedTuple), type(typing.NamedTuple))\n\n    @skipIf(TYPING_3_9_0, \"tests are only relevant to <=3.8\")\n    def test_same_as_typing_NamedTuple_38_minus(self):\n        self.assertEqual(\n            self.NestedEmployee.__annotations__,\n            self.NestedEmployee._field_types\n        )\n\n    def test_orig_bases(self):\n        T = TypeVar('T')\n\n        class SimpleNamedTuple(NamedTuple):\n            pass\n\n        class GenericNamedTuple(NamedTuple, Generic[T]):\n            pass\n\n        self.assertEqual(SimpleNamedTuple.__orig_bases__, (NamedTuple,))\n        self.assertEqual(GenericNamedTuple.__orig_bases__, (NamedTuple, Generic[T]))\n\n        CallNamedTuple = NamedTuple('CallNamedTuple', [])\n\n        self.assertEqual(CallNamedTuple.__orig_bases__, (NamedTuple,))\n\n    def test_setname_called_on_values_in_class_dictionary(self):\n        class Vanilla:\n            def __set_name__(self, owner, name):\n                self.name = name\n\n        class Foo(NamedTuple):\n            attr = Vanilla()\n\n        foo = Foo()\n        self.assertEqual(len(foo), 0)\n        self.assertNotIn('attr', Foo._fields)\n        self.assertIsInstance(foo.attr, Vanilla)\n        self.assertEqual(foo.attr.name, \"attr\")\n\n        class Bar(NamedTuple):\n            attr: Vanilla = Vanilla()\n\n        bar = Bar()\n        self.assertEqual(len(bar), 1)\n        self.assertIn('attr', Bar._fields)\n        self.assertIsInstance(bar.attr, Vanilla)\n        self.assertEqual(bar.attr.name, \"attr\")\n\n    @skipIf(\n        TYPING_3_12_0,\n        \"__set_name__ behaviour changed on py312+ to use BaseException.add_note()\"\n    )\n    def test_setname_raises_the_same_as_on_other_classes_py311_minus(self):\n        class CustomException(BaseException): pass\n\n        class Annoying:\n            def __set_name__(self, owner, name):\n                raise CustomException\n\n        annoying = Annoying()\n\n        with self.assertRaises(RuntimeError) as cm:\n            class NormalClass:\n                attr = annoying\n        normal_exception = cm.exception\n\n        with self.assertRaises(RuntimeError) as cm:\n            class NamedTupleClass(NamedTuple):\n                attr = annoying\n        namedtuple_exception = cm.exception\n\n        self.assertIs(type(namedtuple_exception), RuntimeError)\n        self.assertIs(type(namedtuple_exception), type(normal_exception))\n        self.assertEqual(len(namedtuple_exception.args), len(normal_exception.args))\n        self.assertEqual(\n            namedtuple_exception.args[0],\n            normal_exception.args[0].replace(\"NormalClass\", \"NamedTupleClass\")\n        )\n\n        self.assertIs(type(namedtuple_exception.__cause__), CustomException)\n        self.assertIs(\n            type(namedtuple_exception.__cause__), type(normal_exception.__cause__)\n        )\n        self.assertEqual(\n            namedtuple_exception.__cause__.args, normal_exception.__cause__.args\n        )\n\n    @skipUnless(\n        TYPING_3_12_0,\n        \"__set_name__ behaviour changed on py312+ to use BaseException.add_note()\"\n    )\n    def test_setname_raises_the_same_as_on_other_classes_py312_plus(self):\n        class CustomException(BaseException): pass\n\n        class Annoying:\n            def __set_name__(self, owner, name):\n                raise CustomException\n\n        annoying = Annoying()\n\n        with self.assertRaises(CustomException) as cm:\n            class NormalClass:\n                attr = annoying\n        normal_exception = cm.exception\n\n        with self.assertRaises(CustomException) as cm:\n            class NamedTupleClass(NamedTuple):\n                attr = annoying\n        namedtuple_exception = cm.exception\n\n        expected_note = (\n            \"Error calling __set_name__ on 'Annoying' instance \"\n            \"'attr' in 'NamedTupleClass'\"\n        )\n\n        self.assertIs(type(namedtuple_exception), CustomException)\n        self.assertIs(type(namedtuple_exception), type(normal_exception))\n        self.assertEqual(namedtuple_exception.args, normal_exception.args)\n\n        self.assertEqual(len(namedtuple_exception.__notes__), 1)\n        self.assertEqual(\n            len(namedtuple_exception.__notes__), len(normal_exception.__notes__)\n        )\n\n        self.assertEqual(namedtuple_exception.__notes__[0], expected_note)\n        self.assertEqual(\n            namedtuple_exception.__notes__[0],\n            normal_exception.__notes__[0].replace(\"NormalClass\", \"NamedTupleClass\")\n        )\n\n    def test_strange_errors_when_accessing_set_name_itself(self):\n        class CustomException(Exception): pass\n\n        class Meta(type):\n            def __getattribute__(self, attr):\n                if attr == \"__set_name__\":\n                    raise CustomException\n                return object.__getattribute__(self, attr)\n\n        class VeryAnnoying(metaclass=Meta): pass\n\n        very_annoying = VeryAnnoying()\n\n        with self.assertRaises(CustomException):\n            class Foo(NamedTuple):\n                attr = very_annoying\n\n\nclass TypeVarTests(BaseTestCase):\n    def test_basic_plain(self):\n        T = TypeVar('T')\n        # T equals itself.\n        self.assertEqual(T, T)\n        # T is an instance of TypeVar\n        self.assertIsInstance(T, TypeVar)\n        self.assertEqual(T.__name__, 'T')\n        self.assertEqual(T.__constraints__, ())\n        self.assertIs(T.__bound__, None)\n        self.assertIs(T.__covariant__, False)\n        self.assertIs(T.__contravariant__, False)\n        self.assertIs(T.__infer_variance__, False)\n\n    def test_attributes(self):\n        T_bound = TypeVar('T_bound', bound=int)\n        self.assertEqual(T_bound.__name__, 'T_bound')\n        self.assertEqual(T_bound.__constraints__, ())\n        self.assertIs(T_bound.__bound__, int)\n\n        T_constraints = TypeVar('T_constraints', int, str)\n        self.assertEqual(T_constraints.__name__, 'T_constraints')\n        self.assertEqual(T_constraints.__constraints__, (int, str))\n        self.assertIs(T_constraints.__bound__, None)\n\n        T_co = TypeVar('T_co', covariant=True)\n        self.assertEqual(T_co.__name__, 'T_co')\n        self.assertIs(T_co.__covariant__, True)\n        self.assertIs(T_co.__contravariant__, False)\n        self.assertIs(T_co.__infer_variance__, False)\n\n        T_contra = TypeVar('T_contra', contravariant=True)\n        self.assertEqual(T_contra.__name__, 'T_contra')\n        self.assertIs(T_contra.__covariant__, False)\n        self.assertIs(T_contra.__contravariant__, True)\n        self.assertIs(T_contra.__infer_variance__, False)\n\n        T_infer = TypeVar('T_infer', infer_variance=True)\n        self.assertEqual(T_infer.__name__, 'T_infer')\n        self.assertIs(T_infer.__covariant__, False)\n        self.assertIs(T_infer.__contravariant__, False)\n        self.assertIs(T_infer.__infer_variance__, True)\n\n    def test_typevar_instance_type_error(self):\n        T = TypeVar('T')\n        with self.assertRaises(TypeError):\n            isinstance(42, T)\n\n    def test_typevar_subclass_type_error(self):\n        T = TypeVar('T')\n        with self.assertRaises(TypeError):\n            issubclass(int, T)\n        with self.assertRaises(TypeError):\n            issubclass(T, int)\n\n    def test_constrained_error(self):\n        with self.assertRaises(TypeError):\n            X = TypeVar('X', int)\n            X\n\n    def test_union_unique(self):\n        X = TypeVar('X')\n        Y = TypeVar('Y')\n        self.assertNotEqual(X, Y)\n        self.assertEqual(Union[X], X)\n        self.assertNotEqual(Union[X], Union[X, Y])\n        self.assertEqual(Union[X, X], X)\n        self.assertNotEqual(Union[X, int], Union[X])\n        self.assertNotEqual(Union[X, int], Union[int])\n        self.assertEqual(Union[X, int].__args__, (X, int))\n        self.assertEqual(Union[X, int].__parameters__, (X,))\n        self.assertIs(Union[X, int].__origin__, Union)\n\n    if hasattr(types, \"UnionType\"):\n        def test_or(self):\n            X = TypeVar('X')\n            # use a string because str doesn't implement\n            # __or__/__ror__ itself\n            self.assertEqual(X | \"x\", Union[X, \"x\"])\n            self.assertEqual(\"x\" | X, Union[\"x\", X])\n            # make sure the order is correct\n            self.assertEqual(get_args(X | \"x\"), (X, typing.ForwardRef(\"x\")))\n            self.assertEqual(get_args(\"x\" | X), (typing.ForwardRef(\"x\"), X))\n\n    def test_union_constrained(self):\n        A = TypeVar('A', str, bytes)\n        self.assertNotEqual(Union[A, str], Union[A])\n\n    def test_repr(self):\n        self.assertEqual(repr(T), '~T')\n        self.assertEqual(repr(KT), '~KT')\n        self.assertEqual(repr(VT), '~VT')\n        self.assertEqual(repr(AnyStr), '~AnyStr')\n        T_co = TypeVar('T_co', covariant=True)\n        self.assertEqual(repr(T_co), '+T_co')\n        T_contra = TypeVar('T_contra', contravariant=True)\n        self.assertEqual(repr(T_contra), '-T_contra')\n\n    def test_no_redefinition(self):\n        self.assertNotEqual(TypeVar('T'), TypeVar('T'))\n        self.assertNotEqual(TypeVar('T', int, str), TypeVar('T', int, str))\n\n    def test_cannot_subclass(self):\n        with self.assertRaises(TypeError):\n            class V(TypeVar): pass\n        T = TypeVar(\"T\")\n        with self.assertRaises(TypeError):\n            class W(T): pass\n\n    def test_cannot_instantiate_vars(self):\n        with self.assertRaises(TypeError):\n            TypeVar('A')()\n\n    def test_bound_errors(self):\n        with self.assertRaises(TypeError):\n            TypeVar('X', bound=Union)\n        with self.assertRaises(TypeError):\n            TypeVar('X', str, float, bound=Employee)\n        with self.assertRaisesRegex(TypeError,\n                                    r\"Bound must be a type\\. Got \\(1, 2\\)\\.\"):\n            TypeVar('X', bound=(1, 2))\n\n    # Technically we could run it on later versions of 3.8,\n    # but that's not worth the effort.\n    @skipUnless(TYPING_3_9_0, \"Fix was not backported\")\n    def test_missing__name__(self):\n        # See bpo-39942\n        code = (\"import typing\\n\"\n                \"T = typing.TypeVar('T')\\n\"\n                )\n        exec(code, {})\n\n    def test_no_bivariant(self):\n        with self.assertRaises(ValueError):\n            TypeVar('T', covariant=True, contravariant=True)\n\n    def test_cannot_combine_explicit_and_infer(self):\n        with self.assertRaises(ValueError):\n            TypeVar('T', covariant=True, infer_variance=True)\n        with self.assertRaises(ValueError):\n            TypeVar('T', contravariant=True, infer_variance=True)\n\n\nclass TypeVarLikeDefaultsTests(BaseTestCase):\n    def test_typevar(self):\n        T = typing_extensions.TypeVar('T', default=int)\n        typing_T = typing.TypeVar('T')\n        self.assertEqual(T.__default__, int)\n        self.assertIsInstance(T, typing_extensions.TypeVar)\n        self.assertIsInstance(T, typing.TypeVar)\n        self.assertIsInstance(typing_T, typing.TypeVar)\n        self.assertIsInstance(typing_T, typing_extensions.TypeVar)\n\n        class A(Generic[T]): ...\n        self.assertEqual(Optional[T].__args__, (T, type(None)))\n\n    def test_typevar_none(self):\n        U = typing_extensions.TypeVar('U')\n        U_None = typing_extensions.TypeVar('U_None', default=None)\n        self.assertIs(U.__default__, NoDefault)\n        self.assertFalse(U.has_default())\n        self.assertEqual(U_None.__default__, None)\n        self.assertTrue(U_None.has_default())\n\n    def test_paramspec(self):\n        P = ParamSpec('P', default=[str, int])\n        self.assertEqual(P.__default__, [str, int])\n        self.assertTrue(P.has_default())\n        self.assertIsInstance(P, ParamSpec)\n        if hasattr(typing, \"ParamSpec\"):\n            self.assertIsInstance(P, typing.ParamSpec)\n            typing_P = typing.ParamSpec('P')\n            self.assertIsInstance(typing_P, typing.ParamSpec)\n            self.assertIsInstance(typing_P, ParamSpec)\n\n        class A(Generic[P]): ...\n        self.assertEqual(typing.Callable[P, None].__args__, (P, type(None)))\n\n        P_default = ParamSpec('P_default', default=...)\n        self.assertIs(P_default.__default__, ...)\n        self.assertTrue(P_default.has_default())\n\n    def test_paramspec_none(self):\n        U = ParamSpec('U')\n        U_None = ParamSpec('U_None', default=None)\n        self.assertIs(U.__default__, NoDefault)\n        self.assertFalse(U.has_default())\n        self.assertIs(U_None.__default__, None)\n        self.assertTrue(U_None.has_default())\n\n    def test_typevartuple(self):\n        Ts = TypeVarTuple('Ts', default=Unpack[Tuple[str, int]])\n        self.assertEqual(Ts.__default__, Unpack[Tuple[str, int]])\n        self.assertIsInstance(Ts, TypeVarTuple)\n        self.assertTrue(Ts.has_default())\n        if hasattr(typing, \"TypeVarTuple\"):\n            self.assertIsInstance(Ts, typing.TypeVarTuple)\n            typing_Ts = typing.TypeVarTuple('Ts')\n            self.assertIsInstance(typing_Ts, typing.TypeVarTuple)\n            self.assertIsInstance(typing_Ts, TypeVarTuple)\n\n        class A(Generic[Unpack[Ts]]): ...\n        self.assertEqual(Optional[Unpack[Ts]].__args__, (Unpack[Ts], type(None)))\n\n    @skipIf(\n        sys.version_info < (3, 11, 1),\n        \"Not yet backported for older versions of Python\"\n    )\n    def test_typevartuple_specialization(self):\n        T = TypeVar(\"T\")\n        Ts = TypeVarTuple('Ts', default=Unpack[Tuple[str, int]])\n        self.assertEqual(Ts.__default__, Unpack[Tuple[str, int]])\n        class A(Generic[T, Unpack[Ts]]): ...\n        self.assertEqual(A[float].__args__, (float, str, int))\n        self.assertEqual(A[float, range].__args__, (float, range))\n        self.assertEqual(A[float, Unpack[tuple[int, ...]]].__args__, (float, Unpack[tuple[int, ...]]))\n\n    @skipIf(\n        sys.version_info < (3, 11, 1),\n        \"Not yet backported for older versions of Python\"\n    )\n    def test_typevar_and_typevartuple_specialization(self):\n        T = TypeVar(\"T\")\n        U = TypeVar(\"U\", default=float)\n        Ts = TypeVarTuple('Ts', default=Unpack[Tuple[str, int]])\n        self.assertEqual(Ts.__default__, Unpack[Tuple[str, int]])\n        class A(Generic[T, U, Unpack[Ts]]): ...\n        self.assertEqual(A[int].__args__, (int, float, str, int))\n        self.assertEqual(A[int, str].__args__, (int, str, str, int))\n        self.assertEqual(A[int, str, range].__args__, (int, str, range))\n        self.assertEqual(A[int, str, Unpack[tuple[int, ...]]].__args__, (int, str, Unpack[tuple[int, ...]]))\n\n    def test_no_default_after_typevar_tuple(self):\n        T = TypeVar(\"T\", default=int)\n        Ts = TypeVarTuple(\"Ts\")\n        Ts_default = TypeVarTuple(\"Ts_default\", default=Unpack[Tuple[str, int]])\n\n        with self.assertRaises(TypeError):\n            class X(Generic[Unpack[Ts], T]): ...\n\n        with self.assertRaises(TypeError):\n            class Y(Generic[Unpack[Ts_default], T]): ...\n\n    def test_typevartuple_none(self):\n        U = TypeVarTuple('U')\n        U_None = TypeVarTuple('U_None', default=None)\n        self.assertIs(U.__default__, NoDefault)\n        self.assertFalse(U.has_default())\n        self.assertIs(U_None.__default__, None)\n        self.assertTrue(U_None.has_default())\n\n    def test_no_default_after_non_default(self):\n        DefaultStrT = typing_extensions.TypeVar('DefaultStrT', default=str)\n        T = TypeVar('T')\n\n        with self.assertRaises(TypeError):\n            Generic[DefaultStrT, T]\n\n    def test_need_more_params(self):\n        DefaultStrT = typing_extensions.TypeVar('DefaultStrT', default=str)\n        T = typing_extensions.TypeVar('T')\n        U = typing_extensions.TypeVar('U')\n\n        class A(Generic[T, U, DefaultStrT]): ...\n        A[int, bool]\n        A[int, bool, str]\n\n        with self.assertRaises(\n            TypeError, msg=\"Too few arguments for .+; actual 1, expected at least 2\"\n        ):\n            A[int]\n\n    def test_pickle(self):\n        global U, U_co, U_contra, U_default  # pickle wants to reference the class by name\n        U = typing_extensions.TypeVar('U')\n        U_co = typing_extensions.TypeVar('U_co', covariant=True)\n        U_contra = typing_extensions.TypeVar('U_contra', contravariant=True)\n        U_default = typing_extensions.TypeVar('U_default', default=int)\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            for typevar in (U, U_co, U_contra, U_default):\n                z = pickle.loads(pickle.dumps(typevar, proto))\n                self.assertEqual(z.__name__, typevar.__name__)\n                self.assertEqual(z.__covariant__, typevar.__covariant__)\n                self.assertEqual(z.__contravariant__, typevar.__contravariant__)\n                self.assertEqual(z.__bound__, typevar.__bound__)\n                self.assertEqual(z.__default__, typevar.__default__)\n\n    def test_strange_defaults_are_allowed(self):\n        # Leave it to type checkers to check whether strange default values\n        # should be allowed or disallowed\n        def not_a_type(): ...\n\n        for typevarlike_cls in TypeVar, ParamSpec, TypeVarTuple:\n            for default in not_a_type, 42, bytearray(), (int, not_a_type, 42):\n                with self.subTest(typevarlike_cls=typevarlike_cls, default=default):\n                    T = typevarlike_cls(\"T\", default=default)\n                    self.assertEqual(T.__default__, default)\n\n    @skip_if_py313_beta_1\n    def test_allow_default_after_non_default_in_alias(self):\n        T_default = TypeVar('T_default', default=int)\n        T = TypeVar('T')\n        Ts = TypeVarTuple('Ts')\n\n        a1 = Callable[[T_default], T]\n        self.assertEqual(a1.__args__, (T_default, T))\n\n        if sys.version_info >= (3, 9):\n            a2 = dict[T_default, T]\n            self.assertEqual(a2.__args__, (T_default, T))\n\n        a3 = typing.Dict[T_default, T]\n        self.assertEqual(a3.__args__, (T_default, T))\n\n        a4 = Callable[[Unpack[Ts]], T]\n        self.assertEqual(a4.__args__, (Unpack[Ts], T))\n\n    @skipIf(\n        typing_extensions.Protocol is typing.Protocol,\n        \"Test currently fails with the CPython version of Protocol and that's not our fault\"\n    )\n    def test_generic_with_broken_eq(self):\n        # See https://github.com/python/typing_extensions/pull/422 for context\n        class BrokenEq(type):\n            def __eq__(self, other):\n                if other is typing_extensions.Protocol:\n                    raise TypeError(\"I'm broken\")\n                return False\n\n        class G(Generic[T], metaclass=BrokenEq):\n            pass\n\n        alias = G[int]\n        self.assertIs(get_origin(alias), G)\n        self.assertEqual(get_args(alias), (int,))\n\n    @skipIf(\n        sys.version_info < (3, 11, 1),\n        \"Not yet backported for older versions of Python\"\n    )\n    def test_paramspec_specialization(self):\n        T = TypeVar(\"T\")\n        P = ParamSpec('P', default=[str, int])\n        self.assertEqual(P.__default__, [str, int])\n        class A(Generic[T, P]): ...\n        self.assertEqual(A[float].__args__, (float, (str, int)))\n        self.assertEqual(A[float, [range]].__args__, (float, (range,)))\n\n    @skipIf(\n        sys.version_info < (3, 11, 1),\n        \"Not yet backported for older versions of Python\"\n    )\n    def test_typevar_and_paramspec_specialization(self):\n        T = TypeVar(\"T\")\n        U = TypeVar(\"U\", default=float)\n        P = ParamSpec('P', default=[str, int])\n        self.assertEqual(P.__default__, [str, int])\n        class A(Generic[T, U, P]): ...\n        self.assertEqual(A[float].__args__, (float, float, (str, int)))\n        self.assertEqual(A[float, int].__args__, (float, int, (str, int)))\n        self.assertEqual(A[float, int, [range]].__args__, (float, int, (range,)))\n\n    @skipIf(\n        sys.version_info < (3, 11, 1),\n        \"Not yet backported for older versions of Python\"\n    )\n    def test_paramspec_and_typevar_specialization(self):\n        T = TypeVar(\"T\")\n        P = ParamSpec('P', default=[str, int])\n        U = TypeVar(\"U\", default=float)\n        self.assertEqual(P.__default__, [str, int])\n        class A(Generic[T, P, U]): ...\n        self.assertEqual(A[float].__args__, (float, (str, int), float))\n        self.assertEqual(A[float, [range]].__args__, (float, (range,), float))\n        self.assertEqual(A[float, [range], int].__args__, (float, (range,), int))\n\n\nclass NoDefaultTests(BaseTestCase):\n    @skip_if_py313_beta_1\n    def test_pickling(self):\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            s = pickle.dumps(NoDefault, proto)\n            loaded = pickle.loads(s)\n            self.assertIs(NoDefault, loaded)\n\n    @skip_if_py313_beta_1\n    def test_doc(self):\n        self.assertIsInstance(NoDefault.__doc__, str)\n\n    def test_constructor(self):\n        self.assertIs(NoDefault, type(NoDefault)())\n        with self.assertRaises(TypeError):\n            type(NoDefault)(1)\n\n    def test_repr(self):\n        self.assertRegex(repr(NoDefault), r'typing(_extensions)?\\.NoDefault')\n\n    def test_no_call(self):\n        with self.assertRaises(TypeError):\n            NoDefault()\n\n    @skip_if_py313_beta_1\n    def test_immutable(self):\n        with self.assertRaises(AttributeError):\n            NoDefault.foo = 'bar'\n        with self.assertRaises(AttributeError):\n            NoDefault.foo\n\n        # TypeError is consistent with the behavior of NoneType\n        with self.assertRaises(TypeError):\n            type(NoDefault).foo = 3\n        with self.assertRaises(AttributeError):\n            type(NoDefault).foo\n\n\nclass TypeVarInferVarianceTests(BaseTestCase):\n    def test_typevar(self):\n        T = typing_extensions.TypeVar('T')\n        self.assertFalse(T.__infer_variance__)\n        T_infer = typing_extensions.TypeVar('T_infer', infer_variance=True)\n        self.assertTrue(T_infer.__infer_variance__)\n        T_noinfer = typing_extensions.TypeVar('T_noinfer', infer_variance=False)\n        self.assertFalse(T_noinfer.__infer_variance__)\n\n    def test_pickle(self):\n        global U, U_infer  # pickle wants to reference the class by name\n        U = typing_extensions.TypeVar('U')\n        U_infer = typing_extensions.TypeVar('U_infer', infer_variance=True)\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            for typevar in (U, U_infer):\n                z = pickle.loads(pickle.dumps(typevar, proto))\n                self.assertEqual(z.__name__, typevar.__name__)\n                self.assertEqual(z.__covariant__, typevar.__covariant__)\n                self.assertEqual(z.__contravariant__, typevar.__contravariant__)\n                self.assertEqual(z.__bound__, typevar.__bound__)\n                self.assertEqual(z.__infer_variance__, typevar.__infer_variance__)\n\n\nclass BufferTests(BaseTestCase):\n    def test(self):\n        self.assertIsInstance(memoryview(b''), Buffer)\n        self.assertIsInstance(bytearray(), Buffer)\n        self.assertIsInstance(b\"x\", Buffer)\n        self.assertNotIsInstance(1, Buffer)\n\n        self.assertIsSubclass(bytearray, Buffer)\n        self.assertIsSubclass(memoryview, Buffer)\n        self.assertIsSubclass(bytes, Buffer)\n        self.assertNotIsSubclass(int, Buffer)\n\n        class MyRegisteredBuffer:\n            def __buffer__(self, flags: int) -> memoryview:\n                return memoryview(b'')\n\n        # On 3.12, collections.abc.Buffer does a structural compatibility check\n        if TYPING_3_12_0:\n            self.assertIsInstance(MyRegisteredBuffer(), Buffer)\n            self.assertIsSubclass(MyRegisteredBuffer, Buffer)\n        else:\n            self.assertNotIsInstance(MyRegisteredBuffer(), Buffer)\n            self.assertNotIsSubclass(MyRegisteredBuffer, Buffer)\n        Buffer.register(MyRegisteredBuffer)\n        self.assertIsInstance(MyRegisteredBuffer(), Buffer)\n        self.assertIsSubclass(MyRegisteredBuffer, Buffer)\n\n        class MySubclassedBuffer(Buffer):\n            def __buffer__(self, flags: int) -> memoryview:\n                return memoryview(b'')\n\n        self.assertIsInstance(MySubclassedBuffer(), Buffer)\n        self.assertIsSubclass(MySubclassedBuffer, Buffer)\n\n\nclass GetOriginalBasesTests(BaseTestCase):\n    def test_basics(self):\n        T = TypeVar('T')\n        class A: pass\n        class B(Generic[T]): pass\n        class C(B[int]): pass\n        class D(B[str], float): pass\n        self.assertEqual(get_original_bases(A), (object,))\n        self.assertEqual(get_original_bases(B), (Generic[T],))\n        self.assertEqual(get_original_bases(C), (B[int],))\n        self.assertEqual(get_original_bases(int), (object,))\n        self.assertEqual(get_original_bases(D), (B[str], float))\n\n        with self.assertRaisesRegex(TypeError, \"Expected an instance of type\"):\n            get_original_bases(object())\n\n    @skipUnless(TYPING_3_9_0, \"PEP 585 is yet to be\")\n    def test_builtin_generics(self):\n        class E(list[T]): pass\n        class F(list[int]): pass\n\n        self.assertEqual(get_original_bases(E), (list[T],))\n        self.assertEqual(get_original_bases(F), (list[int],))\n\n    @skipIf(\n        sys.version_info[:3] == (3, 12, 0) and sys.version_info[3] in {\"alpha\", \"beta\"},\n        \"Early versions of py312 had a bug\"\n    )\n    def test_concrete_subclasses_of_generic_classes(self):\n        T = TypeVar(\"T\")\n\n        class FirstBase(Generic[T]): pass\n        class SecondBase(Generic[T]): pass\n        class First(FirstBase[int]): pass\n        class Second(SecondBase[int]): pass\n        class G(First, Second): pass\n        self.assertEqual(get_original_bases(G), (First, Second))\n\n        class First_(Generic[T]): pass\n        class Second_(Generic[T]): pass\n        class H(First_, Second_): pass\n        self.assertEqual(get_original_bases(H), (First_, Second_))\n\n    def test_namedtuples(self):\n        # On 3.12, this should work well with typing.NamedTuple and typing_extensions.NamedTuple\n        # On lower versions, it will only work fully with typing_extensions.NamedTuple\n        if sys.version_info >= (3, 12):\n            namedtuple_classes = (typing.NamedTuple, typing_extensions.NamedTuple)\n        else:\n            namedtuple_classes = (typing_extensions.NamedTuple,)\n\n        for NamedTuple in namedtuple_classes:  # noqa: F402\n            with self.subTest(cls=NamedTuple):\n                class ClassBasedNamedTuple(NamedTuple):\n                    x: int\n\n                class GenericNamedTuple(NamedTuple, Generic[T]):\n                    x: T\n\n                CallBasedNamedTuple = NamedTuple(\"CallBasedNamedTuple\", [(\"x\", int)])\n\n                self.assertIs(\n                    get_original_bases(ClassBasedNamedTuple)[0], NamedTuple\n                )\n                self.assertEqual(\n                    get_original_bases(GenericNamedTuple),\n                    (NamedTuple, Generic[T])\n                )\n                self.assertIs(\n                    get_original_bases(CallBasedNamedTuple)[0], NamedTuple\n                )\n\n    def test_typeddicts(self):\n        # On 3.12, this should work well with typing.TypedDict and typing_extensions.TypedDict\n        # On lower versions, it will only work fully with typing_extensions.TypedDict\n        if sys.version_info >= (3, 12):\n            typeddict_classes = (typing.TypedDict, typing_extensions.TypedDict)\n        else:\n            typeddict_classes = (typing_extensions.TypedDict,)\n\n        for TypedDict in typeddict_classes:  # noqa: F402\n            with self.subTest(cls=TypedDict):\n                class ClassBasedTypedDict(TypedDict):\n                    x: int\n\n                class GenericTypedDict(TypedDict, Generic[T]):\n                    x: T\n\n                CallBasedTypedDict = TypedDict(\"CallBasedTypedDict\", {\"x\": int})\n\n                self.assertIs(\n                    get_original_bases(ClassBasedTypedDict)[0],\n                    TypedDict\n                )\n                self.assertEqual(\n                    get_original_bases(GenericTypedDict),\n                    (TypedDict, Generic[T])\n                )\n                self.assertIs(\n                    get_original_bases(CallBasedTypedDict)[0],\n                    TypedDict\n                )\n\n\nclass TypeAliasTypeTests(BaseTestCase):\n    def test_attributes(self):\n        Simple = TypeAliasType(\"Simple\", int)\n        self.assertEqual(Simple.__name__, \"Simple\")\n        self.assertIs(Simple.__value__, int)\n        self.assertEqual(Simple.__type_params__, ())\n        self.assertEqual(Simple.__parameters__, ())\n\n        T = TypeVar(\"T\")\n        ListOrSetT = TypeAliasType(\"ListOrSetT\", Union[List[T], Set[T]], type_params=(T,))\n        self.assertEqual(ListOrSetT.__name__, \"ListOrSetT\")\n        self.assertEqual(ListOrSetT.__value__, Union[List[T], Set[T]])\n        self.assertEqual(ListOrSetT.__type_params__, (T,))\n        self.assertEqual(ListOrSetT.__parameters__, (T,))\n\n        Ts = TypeVarTuple(\"Ts\")\n        Variadic = TypeAliasType(\"Variadic\", Tuple[int, Unpack[Ts]], type_params=(Ts,))\n        self.assertEqual(Variadic.__name__, \"Variadic\")\n        self.assertEqual(Variadic.__value__, Tuple[int, Unpack[Ts]])\n        self.assertEqual(Variadic.__type_params__, (Ts,))\n        self.assertEqual(Variadic.__parameters__, tuple(iter(Ts)))\n\n    def test_cannot_set_attributes(self):\n        Simple = TypeAliasType(\"Simple\", int)\n        with self.assertRaisesRegex(AttributeError, \"readonly attribute\"):\n            Simple.__name__ = \"NewName\"\n        with self.assertRaisesRegex(\n            AttributeError,\n            \"attribute '__value__' of 'typing.TypeAliasType' objects is not writable\",\n        ):\n            Simple.__value__ = str\n        with self.assertRaisesRegex(\n            AttributeError,\n            \"attribute '__type_params__' of 'typing.TypeAliasType' objects is not writable\",\n        ):\n            Simple.__type_params__ = (T,)\n        with self.assertRaisesRegex(\n            AttributeError,\n            \"attribute '__parameters__' of 'typing.TypeAliasType' objects is not writable\",\n        ):\n            Simple.__parameters__ = (T,)\n        with self.assertRaisesRegex(\n            AttributeError,\n            \"attribute '__module__' of 'typing.TypeAliasType' objects is not writable\",\n        ):\n            Simple.__module__ = 42\n        with self.assertRaisesRegex(\n            AttributeError,\n            \"'typing.TypeAliasType' object has no attribute 'some_attribute'\",\n        ):\n            Simple.some_attribute = \"not allowed\"\n\n    def test_cannot_delete_attributes(self):\n        Simple = TypeAliasType(\"Simple\", int)\n        with self.assertRaisesRegex(AttributeError, \"readonly attribute\"):\n            del Simple.__name__\n        with self.assertRaisesRegex(\n            AttributeError,\n            \"attribute '__value__' of 'typing.TypeAliasType' objects is not writable\",\n        ):\n            del Simple.__value__\n        with self.assertRaisesRegex(\n            AttributeError,\n            \"'typing.TypeAliasType' object has no attribute 'some_attribute'\",\n        ):\n            del Simple.some_attribute\n\n    def test_or(self):\n        Alias = TypeAliasType(\"Alias\", int)\n        if sys.version_info >= (3, 10):\n            self.assertEqual(Alias | int, Union[Alias, int])\n            self.assertEqual(Alias | None, Union[Alias, None])\n            self.assertEqual(Alias | (int | str), Union[Alias, int | str])\n            self.assertEqual(Alias | list[float], Union[Alias, list[float]])\n        else:\n            with self.assertRaises(TypeError):\n                Alias | int\n        # Rejected on all versions\n        with self.assertRaises(TypeError):\n            Alias | \"Ref\"\n\n    def test_getitem(self):\n        ListOrSetT = TypeAliasType(\"ListOrSetT\", Union[List[T], Set[T]], type_params=(T,))\n        subscripted = ListOrSetT[int]\n        self.assertEqual(get_args(subscripted), (int,))\n        self.assertIs(get_origin(subscripted), ListOrSetT)\n        with self.assertRaises(TypeError):\n            subscripted[str]\n\n        still_generic = ListOrSetT[Iterable[T]]\n        self.assertEqual(get_args(still_generic), (Iterable[T],))\n        self.assertIs(get_origin(still_generic), ListOrSetT)\n        fully_subscripted = still_generic[float]\n        self.assertEqual(get_args(fully_subscripted), (Iterable[float],))\n        self.assertIs(get_origin(fully_subscripted), ListOrSetT)\n\n    def test_pickle(self):\n        global Alias\n        Alias = TypeAliasType(\"Alias\", int)\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            with self.subTest(proto=proto):\n                pickled = pickle.dumps(Alias, proto)\n                unpickled = pickle.loads(pickled)\n                self.assertIs(unpickled, Alias)\n\n    def test_no_instance_subclassing(self):\n        with self.assertRaises(TypeError):\n            class MyAlias(TypeAliasType):\n                pass\n\n\nclass DocTests(BaseTestCase):\n    def test_annotation(self):\n\n        def hi(to: Annotated[str, Doc(\"Who to say hi to\")]) -> None: pass\n\n        hints = get_type_hints(hi, include_extras=True)\n        doc_info = hints[\"to\"].__metadata__[0]\n        self.assertEqual(doc_info.documentation, \"Who to say hi to\")\n        self.assertIsInstance(doc_info, Doc)\n\n    def test_repr(self):\n        doc_info = Doc(\"Who to say hi to\")\n        self.assertEqual(repr(doc_info), \"Doc('Who to say hi to')\")\n\n    def test_hashability(self):\n        doc_info = Doc(\"Who to say hi to\")\n        self.assertIsInstance(hash(doc_info), int)\n        self.assertNotEqual(hash(doc_info), hash(Doc(\"Who not to say hi to\")))\n\n    def test_equality(self):\n        doc_info = Doc(\"Who to say hi to\")\n        # Equal to itself\n        self.assertEqual(doc_info, doc_info)\n        # Equal to another instance with the same string\n        self.assertEqual(doc_info, Doc(\"Who to say hi to\"))\n        # Not equal to another instance with a different string\n        self.assertNotEqual(doc_info, Doc(\"Who not to say hi to\"))\n\n    def test_pickle(self):\n        doc_info = Doc(\"Who to say hi to\")\n        for proto in range(pickle.HIGHEST_PROTOCOL):\n            pickled = pickle.dumps(doc_info, protocol=proto)\n            self.assertEqual(doc_info, pickle.loads(pickled))\n\n\n@skipUnless(\n    hasattr(typing_extensions, \"CapsuleType\"),\n    \"CapsuleType is not available on all Python implementations\"\n)\nclass CapsuleTypeTests(BaseTestCase):\n    def test_capsule_type(self):\n        import _datetime\n        self.assertIsInstance(_datetime.datetime_CAPI, typing_extensions.CapsuleType)\n\n\ndef times_three(fn):\n    @functools.wraps(fn)\n    def wrapper(a, b):\n        return fn(a * 3, b * 3)\n\n    return wrapper\n\n\nclass TestGetAnnotations(BaseTestCase):\n    @classmethod\n    def setUpClass(cls):\n        with tempfile.TemporaryDirectory() as tempdir:\n            sys.path.append(tempdir)\n            Path(tempdir, \"inspect_stock_annotations.py\").write_text(STOCK_ANNOTATIONS)\n            Path(tempdir, \"inspect_stringized_annotations.py\").write_text(STRINGIZED_ANNOTATIONS)\n            Path(tempdir, \"inspect_stringized_annotations_2.py\").write_text(STRINGIZED_ANNOTATIONS_2)\n            cls.inspect_stock_annotations = importlib.import_module(\"inspect_stock_annotations\")\n            cls.inspect_stringized_annotations = importlib.import_module(\"inspect_stringized_annotations\")\n            cls.inspect_stringized_annotations_2 = importlib.import_module(\"inspect_stringized_annotations_2\")\n        sys.path.pop()\n\n    @classmethod\n    def tearDownClass(cls):\n        for modname in (\n            \"inspect_stock_annotations\",\n            \"inspect_stringized_annotations\",\n            \"inspect_stringized_annotations_2\",\n        ):\n            delattr(cls, modname)\n            del sys.modules[modname]\n\n    def test_builtin_type(self):\n        self.assertEqual(get_annotations(int), {})\n        self.assertEqual(get_annotations(object), {})\n\n    def test_format(self):\n        def f1(a: int):\n            pass\n\n        def f2(a: \"undefined\"):  # noqa: F821\n            pass\n\n        self.assertEqual(\n            get_annotations(f1, format=Format.VALUE), {\"a\": int}\n        )\n        self.assertEqual(get_annotations(f1, format=1), {\"a\": int})\n\n        self.assertEqual(\n            get_annotations(f2, format=Format.FORWARDREF),\n            {\"a\": \"undefined\"},\n        )\n        self.assertEqual(get_annotations(f2, format=2), {\"a\": \"undefined\"})\n\n        self.assertEqual(\n            get_annotations(f1, format=Format.SOURCE),\n            {\"a\": \"int\"},\n        )\n        self.assertEqual(get_annotations(f1, format=3), {\"a\": \"int\"})\n\n        with self.assertRaises(ValueError):\n            get_annotations(f1, format=0)\n\n        with self.assertRaises(ValueError):\n            get_annotations(f1, format=4)\n\n    def test_custom_object_with_annotations(self):\n        class C:\n            def __init__(self, x: int = 0, y: str = \"\"):\n                self.__annotations__ = {\"x\": int, \"y\": str}\n\n        self.assertEqual(get_annotations(C()), {\"x\": int, \"y\": str})\n\n    def test_custom_format_eval_str(self):\n        def foo():\n            pass\n\n        with self.assertRaises(ValueError):\n            get_annotations(\n                foo, format=Format.FORWARDREF, eval_str=True\n            )\n            get_annotations(\n                foo, format=Format.SOURCE, eval_str=True\n            )\n\n    def test_stock_annotations(self):\n        def foo(a: int, b: str):\n            pass\n\n        for format in (Format.VALUE, Format.FORWARDREF):\n            with self.subTest(format=format):\n                self.assertEqual(\n                    get_annotations(foo, format=format),\n                    {\"a\": int, \"b\": str},\n                )\n        self.assertEqual(\n            get_annotations(foo, format=Format.SOURCE),\n            {\"a\": \"int\", \"b\": \"str\"},\n        )\n\n        foo.__annotations__ = {\"a\": \"foo\", \"b\": \"str\"}\n        for format in Format:\n            with self.subTest(format=format):\n                self.assertEqual(\n                    get_annotations(foo, format=format),\n                    {\"a\": \"foo\", \"b\": \"str\"},\n                )\n\n        self.assertEqual(\n            get_annotations(foo, eval_str=True, locals=locals()),\n            {\"a\": foo, \"b\": str},\n        )\n        self.assertEqual(\n            get_annotations(foo, eval_str=True, globals=locals()),\n            {\"a\": foo, \"b\": str},\n        )\n\n    def test_stock_annotations_in_module(self):\n        isa = self.inspect_stock_annotations\n\n        for kwargs in [\n            {},\n            {\"eval_str\": False},\n            {\"format\": Format.VALUE},\n            {\"format\": Format.FORWARDREF},\n            {\"format\": Format.VALUE, \"eval_str\": False},\n            {\"format\": Format.FORWARDREF, \"eval_str\": False},\n        ]:\n            with self.subTest(**kwargs):\n                self.assertEqual(\n                    get_annotations(isa, **kwargs), {\"a\": int, \"b\": str}\n                )\n                self.assertEqual(\n                    get_annotations(isa.MyClass, **kwargs),\n                    {\"a\": int, \"b\": str},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function, **kwargs),\n                    {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function2, **kwargs),\n                    {\"a\": int, \"b\": \"str\", \"c\": isa.MyClass, \"return\": isa.MyClass},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function3, **kwargs),\n                    {\"a\": \"int\", \"b\": \"str\", \"c\": \"MyClass\"},\n                )\n                self.assertEqual(\n                    get_annotations(inspect, **kwargs), {}\n                )  # inspect module has no annotations\n                self.assertEqual(\n                    get_annotations(isa.UnannotatedClass, **kwargs), {}\n                )\n                self.assertEqual(\n                    get_annotations(isa.unannotated_function, **kwargs), {}\n                )\n\n        for kwargs in [\n            {\"eval_str\": True},\n            {\"format\": Format.VALUE, \"eval_str\": True},\n        ]:\n            with self.subTest(**kwargs):\n                self.assertEqual(\n                    get_annotations(isa, **kwargs), {\"a\": int, \"b\": str}\n                )\n                self.assertEqual(\n                    get_annotations(isa.MyClass, **kwargs),\n                    {\"a\": int, \"b\": str},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function, **kwargs),\n                    {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function2, **kwargs),\n                    {\"a\": int, \"b\": str, \"c\": isa.MyClass, \"return\": isa.MyClass},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function3, **kwargs),\n                    {\"a\": int, \"b\": str, \"c\": isa.MyClass},\n                )\n                self.assertEqual(get_annotations(inspect, **kwargs), {})\n                self.assertEqual(\n                    get_annotations(isa.UnannotatedClass, **kwargs), {}\n                )\n                self.assertEqual(\n                    get_annotations(isa.unannotated_function, **kwargs), {}\n                )\n\n        self.assertEqual(\n            get_annotations(isa, format=Format.SOURCE),\n            {\"a\": \"int\", \"b\": \"str\"},\n        )\n        self.assertEqual(\n            get_annotations(isa.MyClass, format=Format.SOURCE),\n            {\"a\": \"int\", \"b\": \"str\"},\n        )\n        mycls = \"MyClass\" if _PEP_649_OR_749_IMPLEMENTED else \"inspect_stock_annotations.MyClass\"\n        self.assertEqual(\n            get_annotations(isa.function, format=Format.SOURCE),\n            {\"a\": \"int\", \"b\": \"str\", \"return\": mycls},\n        )\n        self.assertEqual(\n            get_annotations(\n                isa.function2, format=Format.SOURCE\n            ),\n            {\"a\": \"int\", \"b\": \"str\", \"c\": mycls, \"return\": mycls},\n        )\n        self.assertEqual(\n            get_annotations(\n                isa.function3, format=Format.SOURCE\n            ),\n            {\"a\": \"int\", \"b\": \"str\", \"c\": \"MyClass\"},\n        )\n        self.assertEqual(\n            get_annotations(inspect, format=Format.SOURCE),\n            {},\n        )\n        self.assertEqual(\n            get_annotations(\n                isa.UnannotatedClass, format=Format.SOURCE\n            ),\n            {},\n        )\n        self.assertEqual(\n            get_annotations(\n                isa.unannotated_function, format=Format.SOURCE\n            ),\n            {},\n        )\n\n    def test_stock_annotations_on_wrapper(self):\n        isa = self.inspect_stock_annotations\n\n        wrapped = times_three(isa.function)\n        self.assertEqual(wrapped(1, \"x\"), isa.MyClass(3, \"xxx\"))\n        self.assertIsNot(wrapped.__globals__, isa.function.__globals__)\n        self.assertEqual(\n            get_annotations(wrapped),\n            {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n        )\n        self.assertEqual(\n            get_annotations(wrapped, format=Format.FORWARDREF),\n            {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n        )\n        mycls = \"MyClass\" if _PEP_649_OR_749_IMPLEMENTED else \"inspect_stock_annotations.MyClass\"\n        self.assertEqual(\n            get_annotations(wrapped, format=Format.SOURCE),\n            {\"a\": \"int\", \"b\": \"str\", \"return\": mycls},\n        )\n        self.assertEqual(\n            get_annotations(wrapped, eval_str=True),\n            {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n        )\n        self.assertEqual(\n            get_annotations(wrapped, eval_str=False),\n            {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n        )\n\n    def test_stringized_annotations_in_module(self):\n        isa = self.inspect_stringized_annotations\n        for kwargs in [\n            {},\n            {\"eval_str\": False},\n            {\"format\": Format.VALUE},\n            {\"format\": Format.FORWARDREF},\n            {\"format\": Format.SOURCE},\n            {\"format\": Format.VALUE, \"eval_str\": False},\n            {\"format\": Format.FORWARDREF, \"eval_str\": False},\n            {\"format\": Format.SOURCE, \"eval_str\": False},\n        ]:\n            with self.subTest(**kwargs):\n                self.assertEqual(\n                    get_annotations(isa, **kwargs), {\"a\": \"int\", \"b\": \"str\"}\n                )\n                self.assertEqual(\n                    get_annotations(isa.MyClass, **kwargs),\n                    {\"a\": \"int\", \"b\": \"str\"},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function, **kwargs),\n                    {\"a\": \"int\", \"b\": \"str\", \"return\": \"MyClass\"},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function2, **kwargs),\n                    {\"a\": \"int\", \"b\": \"'str'\", \"c\": \"MyClass\", \"return\": \"MyClass\"},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function3, **kwargs),\n                    {\"a\": \"'int'\", \"b\": \"'str'\", \"c\": \"'MyClass'\"},\n                )\n                self.assertEqual(\n                    get_annotations(isa.UnannotatedClass, **kwargs), {}\n                )\n                self.assertEqual(\n                    get_annotations(isa.unannotated_function, **kwargs), {}\n                )\n\n        for kwargs in [\n            {\"eval_str\": True},\n            {\"format\": Format.VALUE, \"eval_str\": True},\n        ]:\n            with self.subTest(**kwargs):\n                self.assertEqual(\n                    get_annotations(isa, **kwargs), {\"a\": int, \"b\": str}\n                )\n                self.assertEqual(\n                    get_annotations(isa.MyClass, **kwargs),\n                    {\"a\": int, \"b\": str},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function, **kwargs),\n                    {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function2, **kwargs),\n                    {\"a\": int, \"b\": \"str\", \"c\": isa.MyClass, \"return\": isa.MyClass},\n                )\n                self.assertEqual(\n                    get_annotations(isa.function3, **kwargs),\n                    {\"a\": \"int\", \"b\": \"str\", \"c\": \"MyClass\"},\n                )\n                self.assertEqual(\n                    get_annotations(isa.UnannotatedClass, **kwargs), {}\n                )\n                self.assertEqual(\n                    get_annotations(isa.unannotated_function, **kwargs), {}\n                )\n\n    def test_stringized_annotations_in_empty_module(self):\n        isa2 = self.inspect_stringized_annotations_2\n        self.assertEqual(get_annotations(isa2), {})\n        self.assertEqual(get_annotations(isa2, eval_str=True), {})\n        self.assertEqual(get_annotations(isa2, eval_str=False), {})\n\n    def test_stringized_annotations_on_wrapper(self):\n        isa = self.inspect_stringized_annotations\n        wrapped = times_three(isa.function)\n        self.assertEqual(wrapped(1, \"x\"), isa.MyClass(3, \"xxx\"))\n        self.assertIsNot(wrapped.__globals__, isa.function.__globals__)\n        self.assertEqual(\n            get_annotations(wrapped),\n            {\"a\": \"int\", \"b\": \"str\", \"return\": \"MyClass\"},\n        )\n        self.assertEqual(\n            get_annotations(wrapped, eval_str=True),\n            {\"a\": int, \"b\": str, \"return\": isa.MyClass},\n        )\n        self.assertEqual(\n            get_annotations(wrapped, eval_str=False),\n            {\"a\": \"int\", \"b\": \"str\", \"return\": \"MyClass\"},\n        )\n\n    def test_stringized_annotations_on_class(self):\n        isa = self.inspect_stringized_annotations\n        # test that local namespace lookups work\n        self.assertEqual(\n            get_annotations(isa.MyClassWithLocalAnnotations),\n            {\"x\": \"mytype\"},\n        )\n        self.assertEqual(\n            get_annotations(isa.MyClassWithLocalAnnotations, eval_str=True),\n            {\"x\": int},\n        )\n\n    def test_modify_annotations(self):\n        def f(x: int):\n            pass\n\n        self.assertEqual(get_annotations(f), {\"x\": int})\n        self.assertEqual(\n            get_annotations(f, format=Format.FORWARDREF),\n            {\"x\": int},\n        )\n\n        f.__annotations__[\"x\"] = str\n        self.assertEqual(get_annotations(f), {\"x\": str})\n\n\n@skipIf(STRINGIZED_ANNOTATIONS_PEP_695 is None, \"PEP 695 has yet to be\")\nclass TestGetAnnotationsWithPEP695(BaseTestCase):\n    @classmethod\n    def setUpClass(cls):\n        with tempfile.TemporaryDirectory() as tempdir:\n            sys.path.append(tempdir)\n            Path(tempdir, \"inspect_stringized_annotations_pep_695.py\").write_text(STRINGIZED_ANNOTATIONS_PEP_695)\n            cls.inspect_stringized_annotations_pep_695 = importlib.import_module(\n                \"inspect_stringized_annotations_pep_695\"\n            )\n        sys.path.pop()\n\n    @classmethod\n    def tearDownClass(cls):\n        del cls.inspect_stringized_annotations_pep_695\n        del sys.modules[\"inspect_stringized_annotations_pep_695\"]\n\n    def test_pep695_generic_class_with_future_annotations(self):\n        ann_module695 = self.inspect_stringized_annotations_pep_695\n        A_annotations = get_annotations(ann_module695.A, eval_str=True)\n        A_type_params = ann_module695.A.__type_params__\n        self.assertIs(A_annotations[\"x\"], A_type_params[0])\n        self.assertEqual(A_annotations[\"y\"].__args__[0], Unpack[A_type_params[1]])\n        self.assertIs(A_annotations[\"z\"].__args__[0], A_type_params[2])\n\n    def test_pep695_generic_class_with_future_annotations_and_local_shadowing(self):\n        B_annotations = get_annotations(\n            self.inspect_stringized_annotations_pep_695.B, eval_str=True\n        )\n        self.assertEqual(B_annotations, {\"x\": int, \"y\": str, \"z\": bytes})\n\n    def test_pep695_generic_class_with_future_annotations_name_clash_with_global_vars(self):\n        ann_module695 = self.inspect_stringized_annotations_pep_695\n        C_annotations = get_annotations(ann_module695.C, eval_str=True)\n        self.assertEqual(\n            set(C_annotations.values()),\n            set(ann_module695.C.__type_params__)\n        )\n\n    def test_pep_695_generic_function_with_future_annotations(self):\n        ann_module695 = self.inspect_stringized_annotations_pep_695\n        generic_func_annotations = get_annotations(\n            ann_module695.generic_function, eval_str=True\n        )\n        func_t_params = ann_module695.generic_function.__type_params__\n        self.assertEqual(\n            generic_func_annotations.keys(), {\"x\", \"y\", \"z\", \"zz\", \"return\"}\n        )\n        self.assertIs(generic_func_annotations[\"x\"], func_t_params[0])\n        self.assertEqual(generic_func_annotations[\"y\"], Unpack[func_t_params[1]])\n        self.assertIs(generic_func_annotations[\"z\"].__origin__, func_t_params[2])\n        self.assertIs(generic_func_annotations[\"zz\"].__origin__, func_t_params[2])\n\n    def test_pep_695_generic_function_with_future_annotations_name_clash_with_global_vars(self):\n        self.assertEqual(\n            set(\n                get_annotations(\n                    self.inspect_stringized_annotations_pep_695.generic_function_2,\n                    eval_str=True\n                ).values()\n            ),\n            set(\n                self.inspect_stringized_annotations_pep_695.generic_function_2.__type_params__\n            )\n        )\n\n    def test_pep_695_generic_method_with_future_annotations(self):\n        ann_module695 = self.inspect_stringized_annotations_pep_695\n        generic_method_annotations = get_annotations(\n            ann_module695.D.generic_method, eval_str=True\n        )\n        params = {\n            param.__name__: param\n            for param in ann_module695.D.generic_method.__type_params__\n        }\n        self.assertEqual(\n            generic_method_annotations,\n            {\"x\": params[\"Foo\"], \"y\": params[\"Bar\"], \"return\": None}\n        )\n\n    def test_pep_695_generic_method_with_future_annotations_name_clash_with_global_vars(self):\n        self.assertEqual(\n            set(\n                get_annotations(\n                    self.inspect_stringized_annotations_pep_695.D.generic_method_2,\n                    eval_str=True\n                ).values()\n            ),\n            set(\n                self.inspect_stringized_annotations_pep_695.D.generic_method_2.__type_params__\n            )\n        )\n\n    def test_pep_695_generic_method_with_future_annotations_name_clash_with_global_and_local_vars(self):\n        self.assertEqual(\n            get_annotations(\n                self.inspect_stringized_annotations_pep_695.E, eval_str=True\n            ),\n            {\"x\": str},\n        )\n\n    def test_pep_695_generics_with_future_annotations_nested_in_function(self):\n        results = self.inspect_stringized_annotations_pep_695.nested()\n\n        self.assertEqual(\n            set(results.F_annotations.values()),\n            set(results.F.__type_params__)\n        )\n        self.assertEqual(\n            set(results.F_meth_annotations.values()),\n            set(results.F.generic_method.__type_params__)\n        )\n        self.assertNotEqual(\n            set(results.F_meth_annotations.values()),\n            set(results.F.__type_params__)\n        )\n        self.assertEqual(\n            set(results.F_meth_annotations.values()).intersection(results.F.__type_params__),\n            set()\n        )\n\n        self.assertEqual(results.G_annotations, {\"x\": str})\n\n        self.assertEqual(\n            set(results.generic_func_annotations.values()),\n            set(results.generic_func.__type_params__)\n        )\n\n\nif __name__ == '__main__':\n    main()\n", "src/_typed_dict_test_helper.py": "from __future__ import annotations\n\nfrom typing import Generic, Optional, T\n\nfrom typing_extensions import Annotated, Required, TypedDict\n\n\n# this class must not be imported into test_typing_extensions.py at top level, otherwise\n# the test_get_type_hints_cross_module_subclass test will pass for the wrong reason\nclass _DoNotImport:\n    pass\n\n\nclass Foo(TypedDict):\n    a: _DoNotImport\n\n\nclass FooGeneric(TypedDict, Generic[T]):\n    a: Optional[T]\n\n\nclass VeryAnnotated(TypedDict, total=False):\n    a: Annotated[Annotated[Annotated[Required[int], \"a\"], \"b\"], \"c\"]\n"}