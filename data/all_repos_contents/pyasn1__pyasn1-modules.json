{"setup.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\nfrom setuptools import setup\n\nsetup()\n", "tools/pkcs1dump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read unencrypted PKCS#1/PKIX-compliant, PEM&DER encoded private keys on\n# stdin, print them pretty and encode back into original wire format.\n# Private keys can be generated with \"openssl genrsa|gendsa\" commands.\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2437\nfrom pyasn1_modules import rfc2459\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat rsakey.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\ncnt = 0\n\nwhile True:\n    idx, substrate = pem.readPemBlocksFromFile(\n        sys.stdin,\n        ('-----BEGIN RSA PRIVATE KEY-----', '-----END RSA PRIVATE KEY-----'),\n        ('-----BEGIN DSA PRIVATE KEY-----', '-----END DSA PRIVATE KEY-----')\n    )\n    if not substrate:\n        break\n\n    if idx == 0:\n        asn1Spec = rfc2437.RSAPrivateKey()\n    elif idx == 1:\n        asn1Spec = rfc2459.DSAPrivateKey()\n    else:\n        break\n\n    key, rest = decoder.decode(substrate, asn1Spec=asn1Spec)\n\n    if rest:\n        substrate = substrate[:-len(rest)]\n\n    print(key.prettyPrint())\n\n    assert encoder.encode(key) == substrate, 'pkcs8 recode fails'\n\n    cnt += 1\n\nprint('*** %s key(s) re/serialized' % cnt)\n", "tools/pkcs7dump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM PKCS#7 on stdin, parse it into plain text,\n# then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2315\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat pkcs7Certificate.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\nidx, substrate = pem.readPemBlocksFromFile(\n    sys.stdin, ('-----BEGIN PKCS7-----', '-----END PKCS7-----')\n)\n\nassert substrate, 'bad PKCS7 data on input'\n\ncontentInfo, rest = decoder.decode(substrate, asn1Spec=rfc2315.ContentInfo())\n\nif rest:\n    substrate = substrate[:-len(rest)]\n\nprint(contentInfo.prettyPrint())\n\nassert encoder.encode(contentInfo) == substrate, 're-encode fails'\n\ncontentType = contentInfo.getComponentByName('contentType')\n\ncontentInfoMap = {\n    (1, 2, 840, 113549, 1, 7, 1): rfc2315.Data(),\n    (1, 2, 840, 113549, 1, 7, 2): rfc2315.SignedData(),\n    (1, 2, 840, 113549, 1, 7, 3): rfc2315.EnvelopedData(),\n    (1, 2, 840, 113549, 1, 7, 4): rfc2315.SignedAndEnvelopedData(),\n    (1, 2, 840, 113549, 1, 7, 5): rfc2315.DigestedData(),\n    (1, 2, 840, 113549, 1, 7, 6): rfc2315.EncryptedData()\n}\n\ncontent, _ = decoder.decode(\n    contentInfo.getComponentByName('content'),\n    asn1Spec=contentInfoMap[contentType]\n)\n\nprint(content.prettyPrint())\n", "tools/cmcdump.py": "#!/usr/bin/env python\n#\n# Read CMC certificate request with wrappers on stdin, parse each into\n# plain text, then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc6402\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat cmc_request.pem | %s\"\"\" % (sys.argv[0],))\n    sys.exit(-1)\n\nreqCnt = 0\n\nsubstrate = pem.readBase64FromFile(sys.stdin)\n\n_, rest = decoder.decode(substrate, asn1Spec=rfc5652.ContentInfo())\nassert not rest\n\nnext_layer = rfc5652.id_ct_contentInfo\ndata = substrate\nwhile next_layer:\n    if next_layer == rfc5652.id_ct_contentInfo:\n        layer, rest = decoder.decode(data, asn1Spec=rfc5652.ContentInfo())\n        assert encoder.encode(layer) == data, 'wrapper recode fails'\n        assert not rest\n\n        print(\" * New layer (wrapper):\")\n        print(layer.prettyPrint())\n\n        next_layer = layer['contentType']\n        data = layer['content']\n\n    elif next_layer == rfc5652.id_signedData:\n        layer, rest = decoder.decode(data, asn1Spec=rfc5652.SignedData())\n        assert encoder.encode(layer) == data, 'wrapper recode fails'\n        assert not rest\n\n        print(\" * New layer (wrapper):\")\n        print(layer.prettyPrint())\n\n        next_layer = layer['encapContentInfo']['eContentType']\n        data = layer['encapContentInfo']['eContent']\n\n    elif next_layer == rfc6402.id_cct_PKIData:\n        layer, rest = decoder.decode(data, asn1Spec=rfc6402.PKIData())\n        assert encoder.encode(layer) == data, 'pkidata recode fails'\n        assert not rest\n\n        print(\" * New layer (pkidata):\")\n        print(layer.prettyPrint())\n\n        next_layer = None\n        data = None\n", "tools/pkcs10dump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM X.509 certificate requests (PKCS#10 format) on stdin, \n# parse each into plain text, then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2314\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat certificateRequest.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\ncertType = rfc2314.CertificationRequest()\n\ncertCnt = 0\n\nwhile True:\n    idx, substrate = pem.readPemBlocksFromFile(\n        sys.stdin, ('-----BEGIN CERTIFICATE REQUEST-----',\n                    '-----END CERTIFICATE REQUEST-----')\n    )\n    if not substrate:\n        break\n\n    cert, rest = decoder.decode(substrate, asn1Spec=certType)\n\n    if rest:\n        substrate = substrate[:-len(rest)]\n\n    print(cert.prettyPrint())\n\n    assert encoder.encode(cert) == substrate, 'cert recode fails'\n\n    certCnt += 1\n\nprint('*** %s PEM certificate request(s) de/serialized' % certCnt)\n", "tools/snmpget.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Generate SNMPGET request, parse response\n#\nimport socket\nimport sys\n\nfrom pyasn1.codec.ber import decoder\nfrom pyasn1.codec.ber import encoder\n\nfrom pyasn1_modules import rfc1157\n\nif len(sys.argv) != 4:\n    print(\"\"\"Usage:\n$ %s <community> <host> <OID>\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\nmsg = rfc1157.Message()\nmsg.setComponentByPosition(0)\nmsg.setComponentByPosition(1, sys.argv[1])\n# pdu\npdus = msg.setComponentByPosition(2).getComponentByPosition(2)\npdu = pdus.setComponentByPosition(0).getComponentByPosition(0)\npdu.setComponentByPosition(0, 123)\npdu.setComponentByPosition(1, 0)\npdu.setComponentByPosition(2, 0)\nvbl = pdu.setComponentByPosition(3).getComponentByPosition(3)\nvb = vbl.setComponentByPosition(0).getComponentByPosition(0)\nvb.setComponentByPosition(0, sys.argv[3])\nv = vb.setComponentByPosition(1).getComponentByPosition(1).setComponentByPosition(0).getComponentByPosition(0).setComponentByPosition(3).getComponentByPosition(3)\n\nprint('sending: %s' % msg.prettyPrint())\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.sendto(encoder.encode(msg), (sys.argv[2], 161))\n\nsubstrate, _ = sock.recvfrom(2048)\n\n# noinspection PyRedeclaration\nrMsg, _ = decoder.decode(substrate, asn1Spec=msg)\n\nprint('received: %s' % rMsg.prettyPrint())\n", "tools/ocspreqdump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM X.509 CRMF request on stdin, parse into\n# plain text, then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2560\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat ocsp-request.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\nocspReq = rfc2560.OCSPRequest()\n\nsubstrate = pem.readBase64FromFile(sys.stdin)\nif not substrate:\n    sys.exit(0)\n\ncr, rest = decoder.decode(substrate, asn1Spec=ocspReq)\n\nprint(cr.prettyPrint())\n\nassert encoder.encode(cr) == substrate, 'OCSP request recode fails'\n", "tools/ocsprspdump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM OCSP response on stdin, parse into\n# plain text, then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2560\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat ocsp-response.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\nocspReq = rfc2560.OCSPResponse()\n\nsubstrate = pem.readBase64FromFile(sys.stdin)\nif not substrate:\n    sys.exit(0)\n\ncr, rest = decoder.decode(substrate, asn1Spec=ocspReq)\n\nprint(cr.prettyPrint())\n\nassert encoder.encode(cr) == substrate, 'OCSP request recode fails'\n", "tools/crldump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read X.509 CRL on stdin, print them pretty and encode back into \n# original wire format.\n# CRL can be generated with \"openssl openssl ca -gencrl ...\" commands.\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2459\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat crl.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\nasn1Spec = rfc2459.CertificateList()\n\ncnt = 0\n\nwhile True:\n    idx, substrate = pem.readPemBlocksFromFile(sys.stdin, ('-----BEGIN X509 CRL-----', '-----END X509 CRL-----'))\n    if not substrate:\n        break\n\n    key, rest = decoder.decode(substrate, asn1Spec=asn1Spec)\n\n    if rest:\n        substrate = substrate[:-len(rest)]\n\n    print(key.prettyPrint())\n\n    assert encoder.encode(key) == substrate, 'pkcs8 recode fails'\n\n    cnt += 1\n\nprint('*** %s CRL(s) re/serialized' % cnt)\n", "tools/x509dump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM X.509 certificates on stdin, parse each into plain text,\n# then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2459\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat CACertificate.pem | %s\n$ cat userCertificate.pem | %s\"\"\" % (sys.argv[0], sys.argv[0]))\n    sys.exit(-1)\n\ncertType = rfc2459.Certificate()\n\ncertCnt = 0\n\nwhile True:\n    idx, substrate = pem.readPemBlocksFromFile(\n        sys.stdin, ('-----BEGIN CERTIFICATE-----',\n                    '-----END CERTIFICATE-----')\n    )\n    if not substrate:\n        break\n\n    cert, rest = decoder.decode(substrate, asn1Spec=certType)\n\n    if rest:\n        substrate = substrate[:-len(rest)]\n\n    print(cert.prettyPrint())\n\n    assert encoder.encode(cert) == substrate, 'cert recode fails'\n\n    certCnt += 1\n\nprint('*** %s PEM cert(s) de/serialized' % certCnt)\n", "tools/x509dump-rfc5280.py": "#!/usr/bin/env python\n# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM X.509 certificates on stdin, parse each into plain text,\n# then build substrate from it (using RFC5280)\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc5280\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat CACertificate.pem | %s\n$ cat userCertificate.pem | %s\"\"\" % (sys.argv[0], sys.argv[0]))\n    sys.exit(-1)\n\ncertType = rfc5280.Certificate()\n\ncertCnt = 0\n\nwhile 1:\n    idx, substrate = pem.readPemBlocksFromFile(\n        sys.stdin, ('-----BEGIN CERTIFICATE-----',\n                    '-----END CERTIFICATE-----')\n    )\n    if not substrate:\n        break\n\n    cert, rest = decoder.decode(substrate, asn1Spec=certType)\n\n    if rest:\n        substrate = substrate[:-len(rest)]\n\n    print(cert.prettyPrint())\n\n    assert encoder.encode(cert) == substrate, 'cert recode fails'\n\n    certCnt += 1\n\nprint('*** %s PEM cert(s) de/serialized' % certCnt)\n", "tools/cmpdump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM CMP message on stdin, parse into\n# plain text, then build substrate from it\n#\nimport sys\n\nfrom pyasn1 import debug\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc4210\n\nif len(sys.argv) == 2 and sys.argv[1] == '-d':\n    debug.setLogger(debug.Debug('all'))\nelif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat cmp.pem | %s [-d]\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\npkiMessage = rfc4210.PKIMessage()\n\nsubstrate = pem.readBase64FromFile(sys.stdin)\nif not substrate:\n    sys.exit(0)\n\npkiMsg, rest = decoder.decode(substrate, asn1Spec=pkiMessage)\n\nprint(pkiMsg.prettyPrint())\n\nassert encoder.encode(pkiMsg) == substrate, 'CMP message recode fails'\n", "tools/ocspclient.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\nimport hashlib\nimport sys\n\ntry:\n    import urllib2\n\nexcept ImportError:\n    import urllib.request as urllib2\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc2560\nfrom pyasn1_modules import rfc2459\nfrom pyasn1_modules import pem\n\nsha1oid = univ.ObjectIdentifier((1, 3, 14, 3, 2, 26))\n\n\n# noinspection PyClassHasNoInit\nclass ValueOnlyBitStringEncoder(encoder.encoder.BitStringEncoder):\n    # These methods just do not encode tag and length fields of TLV\n    def encodeTag(self, *args):\n        return ''\n\n    def encodeLength(self, *args):\n        return ''\n\n    def encodeValue(*args):\n        substrate, isConstructed = encoder.encoder.BitStringEncoder.encodeValue(*args)\n        # OCSP-specific hack follows: cut off the \"unused bit count\"\n        # encoded bit-string value.\n        return substrate[1:], isConstructed\n\n    def __call__(self, bitStringValue):\n        return self.encode(None, bitStringValue, defMode=True, maxChunkSize=0)\n\n\nvalueOnlyBitStringEncoder = ValueOnlyBitStringEncoder()\n\n\n# noinspection PyShadowingNames\ndef mkOcspRequest(issuerCert, userCert):\n    issuerTbsCertificate = issuerCert.getComponentByName('tbsCertificate')\n    issuerSubject = issuerTbsCertificate.getComponentByName('subject')\n\n    userTbsCertificate = userCert.getComponentByName('tbsCertificate')\n    userIssuer = userTbsCertificate.getComponentByName('issuer')\n\n    assert issuerSubject == userIssuer, '%s\\n%s' % (\n        issuerSubject.prettyPrint(), userIssuer.prettyPrint()\n    )\n\n    userIssuerHash = hashlib.sha1(\n        encoder.encode(userIssuer)\n    ).digest()\n\n    issuerSubjectPublicKey = issuerTbsCertificate.getComponentByName('subjectPublicKeyInfo').getComponentByName(\n        'subjectPublicKey')\n\n    issuerKeyHash = hashlib.sha1(\n        valueOnlyBitStringEncoder(issuerSubjectPublicKey)\n    ).digest()\n\n    userSerialNumber = userTbsCertificate.getComponentByName('serialNumber')\n\n    # Build request object\n\n    request = rfc2560.Request()\n\n    reqCert = request.setComponentByName('reqCert').getComponentByName('reqCert')\n\n    hashAlgorithm = reqCert.setComponentByName('hashAlgorithm').getComponentByName('hashAlgorithm')\n    hashAlgorithm.setComponentByName('algorithm', sha1oid)\n\n    reqCert.setComponentByName('issuerNameHash', userIssuerHash)\n    reqCert.setComponentByName('issuerKeyHash', issuerKeyHash)\n    reqCert.setComponentByName('serialNumber', userSerialNumber)\n\n    ocspRequest = rfc2560.OCSPRequest()\n\n    tbsRequest = ocspRequest.setComponentByName('tbsRequest').getComponentByName('tbsRequest')\n    tbsRequest.setComponentByName('version', 'v1')\n\n    requestList = tbsRequest.setComponentByName('requestList').getComponentByName('requestList')\n    requestList.setComponentByPosition(0, request)\n\n    return ocspRequest\n\n\ndef parseOcspResponse(ocspResponse):\n    responseStatus = ocspResponse.getComponentByName('responseStatus')\n    assert responseStatus == rfc2560.OCSPResponseStatus('successful'), responseStatus.prettyPrint()\n    responseBytes = ocspResponse.getComponentByName('responseBytes')\n    responseType = responseBytes.getComponentByName('responseType')\n    assert responseType == rfc2560.id_pkix_ocsp_basic, responseType.prettyPrint()\n\n    response = responseBytes.getComponentByName('response')\n\n    basicOCSPResponse, _ = decoder.decode(\n        response, asn1Spec=rfc2560.BasicOCSPResponse()\n    )\n\n    tbsResponseData = basicOCSPResponse.getComponentByName('tbsResponseData')\n\n    response0 = tbsResponseData.getComponentByName('responses').getComponentByPosition(0)\n\n    return (\n        tbsResponseData.getComponentByName('producedAt'),\n        response0.getComponentByName('certID'),\n        response0.getComponentByName('certStatus').getName(),\n        response0.getComponentByName('thisUpdate')\n    )\n\n\nif len(sys.argv) != 2:\n    print(\"\"\"Usage:\n$ cat CACertificate.pem userCertificate.pem | %s <ocsp-responder-url>\"\"\" % sys.argv[0])\n    sys.exit(-1)\nelse:\n    ocspUrl = sys.argv[1]\n\n# Parse CA and user certificates\n\nissuerCert, _ = decoder.decode(\n    pem.readPemBlocksFromFile(\n        sys.stdin, ('-----BEGIN CERTIFICATE-----', '-----END CERTIFICATE-----')\n    )[1],\n    asn1Spec=rfc2459.Certificate()\n)\n# noinspection PyRedeclaration\nuserCert, _ = decoder.decode(\n    pem.readPemBlocksFromFile(\n        sys.stdin, ('-----BEGIN CERTIFICATE-----', '-----END CERTIFICATE-----')\n    )[1],\n    asn1Spec=rfc2459.Certificate()\n)\n\n# Build OCSP request\n\nocspReq = mkOcspRequest(issuerCert, userCert)\n\n# Use HTTP POST to get response (see Appendix A of RFC 2560)\n# In case you need proxies, set the http_proxy env variable\n\nhttpReq = urllib2.Request(\n    ocspUrl,\n    encoder.encode(ocspReq),\n    {'Content-Type': 'application/ocsp-request'}\n)\nhttpRsp = urllib2.urlopen(httpReq).read()\n\n# Process OCSP response\n\n# noinspection PyRedeclaration\nocspRsp, _ = decoder.decode(httpRsp, asn1Spec=rfc2560.OCSPResponse())\n\nproducedAt, certId, certStatus, thisUpdate = parseOcspResponse(ocspRsp)\n\nprint('Certificate ID %s is %s at %s till %s\\n' % (certId.getComponentByName('serialNumber'),\n                                                   certStatus, producedAt, thisUpdate))\n", "tools/pkcs8dump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read  bunch of ASN.1/PEM plain/encrypted private keys in PKCS#8 \n# format on stdin, parse each into plain text, then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc5208\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat pkcs8key.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\ncnt = 0\n\nwhile True:\n    idx, substrate = pem.readPemBlocksFromFile(\n        sys.stdin,\n        ('-----BEGIN PRIVATE KEY-----', '-----END PRIVATE KEY-----'),\n        ('-----BEGIN ENCRYPTED PRIVATE KEY-----', '-----END ENCRYPTED PRIVATE KEY-----')\n    )\n    if not substrate:\n        break\n\n    if idx == 0:\n        asn1Spec = rfc5208.PrivateKeyInfo()\n    elif idx == 1:\n        asn1Spec = rfc5208.EncryptedPrivateKeyInfo()\n    else:\n        break\n\n    key, rest = decoder.decode(substrate, asn1Spec=asn1Spec)\n\n    if rest:\n        substrate = substrate[:-len(rest)]\n\n    print(key.prettyPrint())\n\n    assert encoder.encode(key) == substrate, 'pkcs8 recode fails'\n\n    cnt += 1\n\nprint('*** %s PKCS#8 key(s) de/serialized' % cnt)\n", "tools/crmfdump.py": "#!/usr/bin/env python\n#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Read ASN.1/PEM X.509 CRMF request on stdin, parse into\n# plain text, then build substrate from it\n#\nimport sys\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1.codec.der import encoder\n\nfrom pyasn1_modules import pem\nfrom pyasn1_modules import rfc2511\n\nif len(sys.argv) != 1:\n    print(\"\"\"Usage:\n$ cat crmf.pem | %s\"\"\" % sys.argv[0])\n    sys.exit(-1)\n\ncertReq = rfc2511.CertReqMessages()\n\nsubstrate = pem.readBase64FromFile(sys.stdin)\nif not substrate:\n    sys.exit(0)\n\ncr, rest = decoder.decode(substrate, asn1Spec=certReq)\n\nprint(cr.prettyPrint())\n\nassert encoder.encode(cr) == substrate, 'crmf recode fails'\n", "pyasn1_modules/rfc6402.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Modified by Russ Housley to add a maps for CMC Control Attributes\n#   and CMC Content Types for use with opentypes.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Certificate Management over CMS (CMC) Updates\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6402.txt\n#\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc4211\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\ndef _buildOid(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\n# Since CMS Attributes and CMC Controls both use 'attrType', one map is used \ncmcControlAttributesMap = rfc5652.cmsAttributesMap\n\n\nclass ChangeSubjectName(univ.Sequence):\n    pass\n\n\nChangeSubjectName.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('subject', rfc5280.Name()),\n    namedtype.OptionalNamedType('subjectAlt', rfc5280.GeneralNames())\n)\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass CMCStatus(univ.Integer):\n    pass\n\n\nCMCStatus.namedValues = namedval.NamedValues(\n    ('success', 0),\n    ('failed', 2),\n    ('pending', 3),\n    ('noSupport', 4),\n    ('confirmRequired', 5),\n    ('popRequired', 6),\n    ('partial', 7)\n)\n\n\nclass PendInfo(univ.Sequence):\n    pass\n\n\nPendInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pendToken', univ.OctetString()),\n    namedtype.NamedType('pendTime', useful.GeneralizedTime())\n)\n\nbodyIdMax = univ.Integer(4294967295)\n\n\nclass BodyPartID(univ.Integer):\n    pass\n\n\nBodyPartID.subtypeSpec = constraint.ValueRangeConstraint(0, bodyIdMax)\n\n\nclass BodyPartPath(univ.SequenceOf):\n    pass\n\n\nBodyPartPath.componentType = BodyPartID()\nBodyPartPath.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass BodyPartReference(univ.Choice):\n    pass\n\n\nBodyPartReference.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyPartID', BodyPartID()),\n    namedtype.NamedType('bodyPartPath', BodyPartPath())\n)\n\n\nclass CMCFailInfo(univ.Integer):\n    pass\n\n\nCMCFailInfo.namedValues = namedval.NamedValues(\n    ('badAlg', 0),\n    ('badMessageCheck', 1),\n    ('badRequest', 2),\n    ('badTime', 3),\n    ('badCertId', 4),\n    ('unsupportedExt', 5),\n    ('mustArchiveKeys', 6),\n    ('badIdentity', 7),\n    ('popRequired', 8),\n    ('popFailed', 9),\n    ('noKeyReuse', 10),\n    ('internalCAError', 11),\n    ('tryLater', 12),\n    ('authDataFail', 13)\n)\n\n\nclass CMCStatusInfoV2(univ.Sequence):\n    pass\n\n\nCMCStatusInfoV2.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('cMCStatus', CMCStatus()),\n    namedtype.NamedType('bodyList', univ.SequenceOf(componentType=BodyPartReference())),\n    namedtype.OptionalNamedType('statusString', char.UTF8String()),\n    namedtype.OptionalNamedType(\n        'otherInfo', univ.Choice(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType('failInfo', CMCFailInfo()),\n                namedtype.NamedType('pendInfo', PendInfo()),\n                namedtype.NamedType(\n                    'extendedFailInfo', univ.Sequence(\n                    componentType=namedtype.NamedTypes(\n                        namedtype.NamedType('failInfoOID', univ.ObjectIdentifier()),\n                        namedtype.NamedType('failInfoValue', AttributeValue()))\n                    )\n                )\n            )\n        )\n    )\n)\n\n\nclass GetCRL(univ.Sequence):\n    pass\n\n\nGetCRL.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerName', rfc5280.Name()),\n    namedtype.OptionalNamedType('cRLName', rfc5280.GeneralName()),\n    namedtype.OptionalNamedType('time', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('reasons', rfc5280.ReasonFlags())\n)\n\nid_pkix = _buildOid(1, 3, 6, 1, 5, 5, 7)\n\nid_cmc = _buildOid(id_pkix, 7)\n\nid_cmc_batchResponses = _buildOid(id_cmc, 29)\n\nid_cmc_popLinkWitness = _buildOid(id_cmc, 23)\n\n\nclass PopLinkWitnessV2(univ.Sequence):\n    pass\n\n\nPopLinkWitnessV2.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyGenAlgorithm', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('macAlgorithm', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('witness', univ.OctetString())\n)\n\nid_cmc_popLinkWitnessV2 = _buildOid(id_cmc, 33)\n\nid_cmc_identityProofV2 = _buildOid(id_cmc, 34)\n\nid_cmc_revokeRequest = _buildOid(id_cmc, 17)\n\nid_cmc_recipientNonce = _buildOid(id_cmc, 7)\n\n\nclass ControlsProcessed(univ.Sequence):\n    pass\n\n\nControlsProcessed.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyList', univ.SequenceOf(componentType=BodyPartReference()))\n)\n\n\nclass CertificationRequest(univ.Sequence):\n    pass\n\n\nCertificationRequest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType(\n        'certificationRequestInfo', univ.Sequence(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType('version', univ.Integer()),\n                namedtype.NamedType('subject', rfc5280.Name()),\n                namedtype.NamedType(\n                    'subjectPublicKeyInfo', univ.Sequence(\n                        componentType=namedtype.NamedTypes(\n                            namedtype.NamedType('algorithm', rfc5280.AlgorithmIdentifier()),\n                            namedtype.NamedType('subjectPublicKey', univ.BitString())\n                        )\n                    )\n                ),\n                namedtype.NamedType(\n                    'attributes', univ.SetOf(\n                        componentType=rfc5652.Attribute()).subtype(\n                        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))\n                )\n            )\n        )\n    ),\n    namedtype.NamedType('signatureAlgorithm', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\n\nclass TaggedCertificationRequest(univ.Sequence):\n    pass\n\n\nTaggedCertificationRequest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyPartID', BodyPartID()),\n    namedtype.NamedType('certificationRequest', CertificationRequest())\n)\n\n\nclass TaggedRequest(univ.Choice):\n    pass\n\n\nTaggedRequest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tcr', TaggedCertificationRequest().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('crm',\n                        rfc4211.CertReqMsg().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('orm', univ.Sequence(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('bodyPartID', BodyPartID()),\n        namedtype.NamedType('requestMessageType', univ.ObjectIdentifier()),\n        namedtype.NamedType('requestMessageValue', univ.Any())\n    ))\n                        .subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n)\n\nid_cmc_popLinkRandom = _buildOid(id_cmc, 22)\n\nid_cmc_statusInfo = _buildOid(id_cmc, 1)\n\nid_cmc_trustedAnchors = _buildOid(id_cmc, 26)\n\nid_cmc_transactionId = _buildOid(id_cmc, 5)\n\nid_cmc_encryptedPOP = _buildOid(id_cmc, 9)\n\n\nclass PublishTrustAnchors(univ.Sequence):\n    pass\n\n\nPublishTrustAnchors.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('seqNumber', univ.Integer()),\n    namedtype.NamedType('hashAlgorithm', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('anchorHashes', univ.SequenceOf(componentType=univ.OctetString()))\n)\n\n\nclass RevokeRequest(univ.Sequence):\n    pass\n\n\nRevokeRequest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerName', rfc5280.Name()),\n    namedtype.NamedType('serialNumber', univ.Integer()),\n    namedtype.NamedType('reason', rfc5280.CRLReason()),\n    namedtype.OptionalNamedType('invalidityDate', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('passphrase', univ.OctetString()),\n    namedtype.OptionalNamedType('comment', char.UTF8String())\n)\n\nid_cmc_senderNonce = _buildOid(id_cmc, 6)\n\nid_cmc_authData = _buildOid(id_cmc, 27)\n\n\nclass TaggedContentInfo(univ.Sequence):\n    pass\n\n\nTaggedContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyPartID', BodyPartID()),\n    namedtype.NamedType('contentInfo', rfc5652.ContentInfo())\n)\n\n\nclass IdentifyProofV2(univ.Sequence):\n    pass\n\n\nIdentifyProofV2.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('proofAlgID', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('macAlgId', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('witness', univ.OctetString())\n)\n\n\nclass CMCPublicationInfo(univ.Sequence):\n    pass\n\n\nCMCPublicationInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hashAlg', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('certHashes', univ.SequenceOf(componentType=univ.OctetString())),\n    namedtype.NamedType('pubInfo', rfc4211.PKIPublicationInfo())\n)\n\nid_kp_cmcCA = _buildOid(rfc5280.id_kp, 27)\n\nid_cmc_confirmCertAcceptance = _buildOid(id_cmc, 24)\n\nid_cmc_raIdentityWitness = _buildOid(id_cmc, 35)\n\nid_ExtensionReq = _buildOid(1, 2, 840, 113549, 1, 9, 14)\n\nid_cct = _buildOid(id_pkix, 12)\n\nid_cct_PKIData = _buildOid(id_cct, 2)\n\nid_kp_cmcRA = _buildOid(rfc5280.id_kp, 28)\n\n\nclass CMCStatusInfo(univ.Sequence):\n    pass\n\n\nCMCStatusInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('cMCStatus', CMCStatus()),\n    namedtype.NamedType('bodyList', univ.SequenceOf(componentType=BodyPartID())),\n    namedtype.OptionalNamedType('statusString', char.UTF8String()),\n    namedtype.OptionalNamedType(\n        'otherInfo', univ.Choice(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType('failInfo', CMCFailInfo()),\n                namedtype.NamedType('pendInfo', PendInfo())\n            )\n        )\n    )\n)\n\n\nclass DecryptedPOP(univ.Sequence):\n    pass\n\n\nDecryptedPOP.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyPartID', BodyPartID()),\n    namedtype.NamedType('thePOPAlgID', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('thePOP', univ.OctetString())\n)\n\nid_cmc_addExtensions = _buildOid(id_cmc, 8)\n\nid_cmc_modCertTemplate = _buildOid(id_cmc, 31)\n\n\nclass TaggedAttribute(univ.Sequence):\n    pass\n\n\nTaggedAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyPartID', BodyPartID()),\n    namedtype.NamedType('attrType', univ.ObjectIdentifier()),\n    namedtype.NamedType('attrValues', univ.SetOf(componentType=AttributeValue()),\n        openType=opentype.OpenType('attrType', cmcControlAttributesMap)\n    )\n)\n\n\nclass OtherMsg(univ.Sequence):\n    pass\n\n\nOtherMsg.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyPartID', BodyPartID()),\n    namedtype.NamedType('otherMsgType', univ.ObjectIdentifier()),\n    namedtype.NamedType('otherMsgValue', univ.Any())\n)\n\n\nclass PKIData(univ.Sequence):\n    pass\n\n\nPKIData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('controlSequence', univ.SequenceOf(componentType=TaggedAttribute())),\n    namedtype.NamedType('reqSequence', univ.SequenceOf(componentType=TaggedRequest())),\n    namedtype.NamedType('cmsSequence', univ.SequenceOf(componentType=TaggedContentInfo())),\n    namedtype.NamedType('otherMsgSequence', univ.SequenceOf(componentType=OtherMsg()))\n)\n\n\nclass BodyPartList(univ.SequenceOf):\n    pass\n\n\nBodyPartList.componentType = BodyPartID()\nBodyPartList.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_cmc_responseBody = _buildOid(id_cmc, 37)\n\n\nclass AuthPublish(BodyPartID):\n    pass\n\n\nclass CMCUnsignedData(univ.Sequence):\n    pass\n\n\nCMCUnsignedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bodyPartPath', BodyPartPath()),\n    namedtype.NamedType('identifier', univ.ObjectIdentifier()),\n    namedtype.NamedType('content', univ.Any())\n)\n\n\nclass CMCCertId(rfc5652.IssuerAndSerialNumber):\n    pass\n\n\nclass PKIResponse(univ.Sequence):\n    pass\n\n\nPKIResponse.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('controlSequence', univ.SequenceOf(componentType=TaggedAttribute())),\n    namedtype.NamedType('cmsSequence', univ.SequenceOf(componentType=TaggedContentInfo())),\n    namedtype.NamedType('otherMsgSequence', univ.SequenceOf(componentType=OtherMsg()))\n)\n\n\nclass ResponseBody(PKIResponse):\n    pass\n\n\nid_cmc_statusInfoV2 = _buildOid(id_cmc, 25)\n\nid_cmc_lraPOPWitness = _buildOid(id_cmc, 11)\n\n\nclass ModCertTemplate(univ.Sequence):\n    pass\n\n\nModCertTemplate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pkiDataReference', BodyPartPath()),\n    namedtype.NamedType('certReferences', BodyPartList()),\n    namedtype.DefaultedNamedType('replace', univ.Boolean().subtype(value=1)),\n    namedtype.NamedType('certTemplate', rfc4211.CertTemplate())\n)\n\nid_cmc_regInfo = _buildOid(id_cmc, 18)\n\nid_cmc_identityProof = _buildOid(id_cmc, 3)\n\n\nclass ExtensionReq(univ.SequenceOf):\n    pass\n\n\nExtensionReq.componentType = rfc5280.Extension()\nExtensionReq.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_kp_cmcArchive = _buildOid(rfc5280.id_kp, 28)\n\nid_cmc_publishCert = _buildOid(id_cmc, 30)\n\nid_cmc_dataReturn = _buildOid(id_cmc, 4)\n\n\nclass LraPopWitness(univ.Sequence):\n    pass\n\n\nLraPopWitness.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pkiDataBodyid', BodyPartID()),\n    namedtype.NamedType('bodyIds', univ.SequenceOf(componentType=BodyPartID()))\n)\n\nid_aa = _buildOid(1, 2, 840, 113549, 1, 9, 16, 2)\n\nid_aa_cmc_unsignedData = _buildOid(id_aa, 34)\n\nid_cmc_getCert = _buildOid(id_cmc, 15)\n\nid_cmc_batchRequests = _buildOid(id_cmc, 28)\n\nid_cmc_decryptedPOP = _buildOid(id_cmc, 10)\n\nid_cmc_responseInfo = _buildOid(id_cmc, 19)\n\nid_cmc_changeSubjectName = _buildOid(id_cmc, 36)\n\n\nclass GetCert(univ.Sequence):\n    pass\n\n\nGetCert.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerName', rfc5280.GeneralName()),\n    namedtype.NamedType('serialNumber', univ.Integer())\n)\n\nid_cmc_identification = _buildOid(id_cmc, 2)\n\nid_cmc_queryPending = _buildOid(id_cmc, 21)\n\n\nclass AddExtensions(univ.Sequence):\n    pass\n\n\nAddExtensions.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pkiDataReference', BodyPartID()),\n    namedtype.NamedType('certReferences', univ.SequenceOf(componentType=BodyPartID())),\n    namedtype.NamedType('extensions', univ.SequenceOf(componentType=rfc5280.Extension()))\n)\n\n\nclass EncryptedPOP(univ.Sequence):\n    pass\n\n\nEncryptedPOP.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('request', TaggedRequest()),\n    namedtype.NamedType('cms', rfc5652.ContentInfo()),\n    namedtype.NamedType('thePOPAlgID', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('witnessAlgID', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('witness', univ.OctetString())\n)\n\nid_cmc_getCRL = _buildOid(id_cmc, 16)\n\nid_cct_PKIResponse = _buildOid(id_cct, 3)\n\nid_cmc_controlProcessed = _buildOid(id_cmc, 32)\n\n\nclass NoSignatureValue(univ.OctetString):\n    pass\n\n\nid_ad_cmc = _buildOid(rfc5280.id_ad, 12)\n\nid_alg_noSignature = _buildOid(id_pkix, 6, 2)\n\n\n# Map of CMC Control OIDs to CMC Control Attributes\n\n_cmcControlAttributesMapUpdate = {\n    id_cmc_statusInfo: CMCStatusInfo(),\n    id_cmc_statusInfoV2: CMCStatusInfoV2(),\n    id_cmc_identification: char.UTF8String(),\n    id_cmc_identityProof: univ.OctetString(),\n    id_cmc_identityProofV2: IdentifyProofV2(),\n    id_cmc_dataReturn: univ.OctetString(),\n    id_cmc_transactionId: univ.Integer(),\n    id_cmc_senderNonce: univ.OctetString(),\n    id_cmc_recipientNonce: univ.OctetString(),\n    id_cmc_addExtensions: AddExtensions(),\n    id_cmc_encryptedPOP: EncryptedPOP(),\n    id_cmc_decryptedPOP: DecryptedPOP(),\n    id_cmc_lraPOPWitness: LraPopWitness(),\n    id_cmc_getCert: GetCert(),\n    id_cmc_getCRL: GetCRL(),\n    id_cmc_revokeRequest: RevokeRequest(),\n    id_cmc_regInfo: univ.OctetString(),\n    id_cmc_responseInfo: univ.OctetString(),\n    id_cmc_queryPending: univ.OctetString(),\n    id_cmc_popLinkRandom: univ.OctetString(),\n    id_cmc_popLinkWitness: univ.OctetString(),\n    id_cmc_popLinkWitnessV2: PopLinkWitnessV2(),\n    id_cmc_confirmCertAcceptance: CMCCertId(),\n    id_cmc_trustedAnchors: PublishTrustAnchors(),\n    id_cmc_authData: AuthPublish(),\n    id_cmc_batchRequests: BodyPartList(),\n    id_cmc_batchResponses: BodyPartList(),\n    id_cmc_publishCert: CMCPublicationInfo(),\n    id_cmc_modCertTemplate: ModCertTemplate(),\n    id_cmc_controlProcessed: ControlsProcessed(),\n    id_ExtensionReq: ExtensionReq(),\n}\n\ncmcControlAttributesMap.update(_cmcControlAttributesMapUpdate)\n\n\n# Map of CMC Content Type OIDs to CMC Content Types are added to\n# the ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_cct_PKIData: PKIData(),\n    id_cct_PKIResponse: PKIResponse(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n\n", "pyasn1_modules/rfc7030.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Enrollment over Secure Transport (EST)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7030.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\n# Imports from RFC 5652\n\nAttribute = rfc5652.Attribute\n\n\n# Asymmetric Decrypt Key Identifier Attribute\n\nid_aa_asymmDecryptKeyID = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.54')\n\nclass AsymmetricDecryptKeyIdentifier(univ.OctetString):\n    pass\n\n\naa_asymmDecryptKeyID = Attribute()\naa_asymmDecryptKeyID['attrType'] = id_aa_asymmDecryptKeyID\naa_asymmDecryptKeyID['attrValues'][0] = AsymmetricDecryptKeyIdentifier()\n\n\n# CSR Attributes\n\nclass AttrOrOID(univ.Choice):\n    pass\n\nAttrOrOID.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('oid', univ.ObjectIdentifier()),\n    namedtype.NamedType('attribute', Attribute())\n)\n\n\nclass CsrAttrs(univ.SequenceOf):\n    pass\n\nCsrAttrs.componentType = AttrOrOID()\nCsrAttrs.subtypeSpec=constraint.ValueSizeConstraint(0, MAX)\n\n   \n# Update CMS Attribute Map\n\n_cmsAttributesMapUpdate = {\n    id_aa_asymmDecryptKeyID: AsymmetricDecryptKeyIdentifier(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc3537.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SEED Encryption Algorithm in CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4010.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nid_alg_HMACwith3DESwrap = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.11')\n   \n   \nid_alg_HMACwithAESwrap = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.12')\n\n\n# Update the Algorithm Identifier map in rfc5280.py.\n\n_algorithmIdentifierMapUpdate = {\n    id_alg_HMACwith3DESwrap: univ.Null(\"\"),\n    id_alg_HMACwithAESwrap: univ.Null(\"\"),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc6187.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# X.509v3 Certificates for Secure Shell Authentication\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6187.txt\n#\n\nfrom pyasn1.type import univ\n\nid_pkix = univ.ObjectIdentifier('1.3.6.1.5.5.7')\n\nid_kp = id_pkix + (3, )\n\nid_kp_secureShellClient = id_kp + (21, )\nid_kp_secureShellServer = id_kp + (22, )\n", "pyasn1_modules/rfc3770.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Certificate Extensions and Attributes Supporting Authentication\n#   in PPP and Wireless LAN Networks\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3770.txt\n# https://www.rfc-editor.org/errata/eid234\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nMAX = float('inf')\n\n\n# Extended Key Usage Values\n\nid_kp_eapOverLAN = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.14')\n\nid_kp_eapOverPPP = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.13')\n\n\n# Wireless LAN SSID Extension\n\nid_pe_wlanSSID = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.13')\n\n\nclass SSID(univ.OctetString):\n    pass\n\nSSID.subtypeSpec = constraint.ValueSizeConstraint(1, 32)\n\n\nclass SSIDList(univ.SequenceOf):\n    pass\n\nSSIDList.componentType = SSID()\nSSIDList.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\n# Wireless LAN SSID Attribute Certificate Attribute\n# Uses same syntax as the certificate extension: SSIDList\n# Correction for https://www.rfc-editor.org/errata/eid234\n\nid_aca_wlanSSID = univ.ObjectIdentifier('1.3.6.1.5.5.7.10.7')\n\n\n# Map of Certificate Extension OIDs to Extensions\n# To be added to the ones that are in rfc5280.py\n\n_certificateExtensionsMap = {\n    id_pe_wlanSSID: SSIDList(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMap)\n\n\n# Map of AttributeType OIDs to AttributeValue added to the\n# ones that are in rfc5280.py\n\n_certificateAttributesMapUpdate = {\n    id_aca_wlanSSID: SSIDList(),\n}\n\nrfc5280.certificateAttributesMap.update(_certificateAttributesMapUpdate)\n", "pyasn1_modules/rfc6955.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Diffie-Hellman Proof-of-Possession Algorithms\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6955.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc3279\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\n\n# Imports from RFC 5652\n\nMessageDigest = rfc5652.MessageDigest\n\nIssuerAndSerialNumber = rfc5652.IssuerAndSerialNumber\n\n\n# Imports from RFC 5280\n\nid_pkix = rfc5280.id_pkix\n\n\n# Imports from RFC 3279\n\nDss_Sig_Value = rfc3279.Dss_Sig_Value\n\nDomainParameters = rfc3279.DomainParameters\n\n\n# Static DH Proof-of-Possession\n\nclass DhSigStatic(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('issuerAndSerial', IssuerAndSerialNumber()),\n        namedtype.NamedType('hashValue', MessageDigest())\n    )\n\n\n# Object Identifiers\n\nid_dh_sig_hmac_sha1 = id_pkix + (6, 3, )\n\nid_dhPop_static_sha1_hmac_sha1 = univ.ObjectIdentifier(id_dh_sig_hmac_sha1)\n\n\nid_alg_dh_pop = id_pkix + (6, 4, )\n\nid_alg_dhPop_sha1 = univ.ObjectIdentifier(id_alg_dh_pop)\n\nid_alg_dhPop_sha224 = id_pkix + (6, 5, )\n\nid_alg_dhPop_sha256 = id_pkix + (6, 6, )\n\nid_alg_dhPop_sha384 = id_pkix + (6, 7, )\n\nid_alg_dhPop_sha512 = id_pkix + (6, 8, )\n\n\nid_alg_dhPop_static_sha224_hmac_sha224 = id_pkix + (6, 15, )\n\nid_alg_dhPop_static_sha256_hmac_sha256 = id_pkix + (6, 16, )\n\nid_alg_dhPop_static_sha384_hmac_sha384 = id_pkix + (6, 17, )\n\nid_alg_dhPop_static_sha512_hmac_sha512 = id_pkix + (6, 18, )\n\n\nid_alg_ecdhPop_static_sha224_hmac_sha224 = id_pkix + (6, 25, )\n\nid_alg_ecdhPop_static_sha256_hmac_sha256 = id_pkix + (6, 26, )\n\nid_alg_ecdhPop_static_sha384_hmac_sha384 = id_pkix + (6, 27, )\n\nid_alg_ecdhPop_static_sha512_hmac_sha512 = id_pkix + (6, 28, )\n\n\n# Update the Algorithm Identifier map in rfc5280.py\n\n_algorithmIdentifierMapUpdate = {\n    id_alg_dh_pop: DomainParameters(),\n    id_alg_dhPop_sha224: DomainParameters(),\n    id_alg_dhPop_sha256: DomainParameters(),\n    id_alg_dhPop_sha384: DomainParameters(),\n    id_alg_dhPop_sha512: DomainParameters(),\n    id_dh_sig_hmac_sha1: univ.Null(\"\"),\n    id_alg_dhPop_static_sha224_hmac_sha224: univ.Null(\"\"),\n    id_alg_dhPop_static_sha256_hmac_sha256: univ.Null(\"\"),\n    id_alg_dhPop_static_sha384_hmac_sha384: univ.Null(\"\"),\n    id_alg_dhPop_static_sha512_hmac_sha512: univ.Null(\"\"),\n    id_alg_ecdhPop_static_sha224_hmac_sha224: univ.Null(\"\"),\n    id_alg_ecdhPop_static_sha256_hmac_sha256: univ.Null(\"\"),\n    id_alg_ecdhPop_static_sha384_hmac_sha384: univ.Null(\"\"),\n    id_alg_ecdhPop_static_sha512_hmac_sha512: univ.Null(\"\"),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc3412.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SNMPv3 message syntax\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc3412.txt\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc1905\n\n\nclass ScopedPDU(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('contextEngineId', univ.OctetString()),\n        namedtype.NamedType('contextName', univ.OctetString()),\n        namedtype.NamedType('data', rfc1905.PDUs())\n    )\n\n\nclass ScopedPduData(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('plaintext', ScopedPDU()),\n        namedtype.NamedType('encryptedPDU', univ.OctetString()),\n    )\n\n\nclass HeaderData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('msgID',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647))),\n        namedtype.NamedType('msgMaxSize',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(484, 2147483647))),\n        namedtype.NamedType('msgFlags', univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 1))),\n        namedtype.NamedType('msgSecurityModel',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647)))\n    )\n\n\nclass SNMPv3Message(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('msgVersion',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647))),\n        namedtype.NamedType('msgGlobalData', HeaderData()),\n        namedtype.NamedType('msgSecurityParameters', univ.OctetString()),\n        namedtype.NamedType('msgData', ScopedPduData())\n    )\n", "pyasn1_modules/rfc2876.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# KEA and SKIPJACK Algorithms in CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc2876.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5751\n\n\nid_fortezzaConfidentialityAlgorithm = univ.ObjectIdentifier('2.16.840.1.101.2.1.1.4')\n\n\nid_fortezzaWrap80 = univ.ObjectIdentifier('2.16.840.1.101.2.1.1.23')\n\n\nid_kEAKeyEncryptionAlgorithm = univ.ObjectIdentifier('2.16.840.1.101.2.1.1.24')\n\n\nid_keyExchangeAlgorithm = univ.ObjectIdentifier('2.16.840.1.101.2.1.1.22')\n\n\nclass Skipjack_Parm(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('initialization-vector', univ.OctetString())\n    )\n\n\n# Update the Algorithm Identifier map in rfc5280.py.\n\n_algorithmIdentifierMapUpdate = {\n    id_fortezzaConfidentialityAlgorithm: Skipjack_Parm(),\n    id_kEAKeyEncryptionAlgorithm: rfc5280.AlgorithmIdentifier(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n\n\n# Update the SMIMECapabilities Attribute map in rfc5751.py\n\n_smimeCapabilityMapUpdate = {\n    id_kEAKeyEncryptionAlgorithm: rfc5280.AlgorithmIdentifier(),\n}\n\nrfc5751.smimeCapabilityMap.update(_smimeCapabilityMapUpdate)\n", "pyasn1_modules/rfc5480.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add maps for opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Elliptic Curve Cryptography Subject Public Key Information\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5480.txt\n\n\n# What can be imported from rfc4055.py ?\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc3279\nfrom pyasn1_modules import rfc5280\n\n\n# These structures are the same as RFC 3279.\n\nDHPublicKey = rfc3279.DHPublicKey\n\nDSAPublicKey = rfc3279.DSAPublicKey\n\nValidationParms = rfc3279.ValidationParms\n\nDomainParameters = rfc3279.DomainParameters\n\nECDSA_Sig_Value = rfc3279.ECDSA_Sig_Value\n\nECPoint = rfc3279.ECPoint\n\nKEA_Parms_Id = rfc3279.KEA_Parms_Id\n\nRSAPublicKey = rfc3279.RSAPublicKey\n\n\n# RFC 5480 changed the names of these structures from RFC 3279.\n\nDSS_Parms = rfc3279.Dss_Parms\n\nDSA_Sig_Value = rfc3279.Dss_Sig_Value\n\n\n# RFC 3279 defines a more complex alternative for ECParameters.\n# RFC 5480 narrows the definition to a single CHOICE: namedCurve.\n\nclass ECParameters(univ.Choice):\n    pass\n\nECParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('namedCurve', univ.ObjectIdentifier())\n)\n\n\n# OIDs for Message Digest Algorithms\n\nid_md2 = univ.ObjectIdentifier('1.2.840.113549.2.2')\n\nid_md5 = univ.ObjectIdentifier('1.2.840.113549.2.5')\n\nid_sha1 = univ.ObjectIdentifier('1.3.14.3.2.26')\n\nid_sha224 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.4')\n\nid_sha256 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.1')\n\nid_sha384 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.2')\n\nid_sha512 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.3')\n\n\n# OID for RSA PK Algorithm and Key\n\nrsaEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.1')\n\n\n# OID for DSA PK Algorithm, Key, and Parameters\n\nid_dsa = univ.ObjectIdentifier('1.2.840.10040.4.1')\n\n\n# OID for Diffie-Hellman PK Algorithm, Key, and Parameters\n\ndhpublicnumber = univ.ObjectIdentifier('1.2.840.10046.2.1')\n\n# OID for KEA PK Algorithm and Parameters\n\nid_keyExchangeAlgorithm = univ.ObjectIdentifier('2.16.840.1.101.2.1.1.22')\n\n\n# OIDs for Elliptic Curve Algorithm ID, Key, and Parameters\n# Note that ECDSA keys always use this OID\n\nid_ecPublicKey = univ.ObjectIdentifier('1.2.840.10045.2.1')\n\nid_ecDH = univ.ObjectIdentifier('1.3.132.1.12')\n\nid_ecMQV = univ.ObjectIdentifier('1.3.132.1.13')\n\n\n# OIDs for RSA Signature Algorithms\n\nmd2WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.2')\n\nmd5WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.4')\n\nsha1WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.5')\n\n\n# OIDs for DSA Signature Algorithms\n\nid_dsa_with_sha1 = univ.ObjectIdentifier('1.2.840.10040.4.3')\n\nid_dsa_with_sha224 = univ.ObjectIdentifier('2.16.840.1.101.3.4.3.1')\n\nid_dsa_with_sha256 = univ.ObjectIdentifier('2.16.840.1.101.3.4.3.2')\n\n\n# OIDs for ECDSA Signature Algorithms\n\necdsa_with_SHA1 = univ.ObjectIdentifier('1.2.840.10045.4.1')\n\necdsa_with_SHA224 = univ.ObjectIdentifier('1.2.840.10045.4.3.1')\n\necdsa_with_SHA256 = univ.ObjectIdentifier('1.2.840.10045.4.3.2')\n\necdsa_with_SHA384 = univ.ObjectIdentifier('1.2.840.10045.4.3.3')\n\necdsa_with_SHA512 = univ.ObjectIdentifier('1.2.840.10045.4.3.4')\n\n\n# OIDs for Named Elliptic Curves\n\nsecp192r1 = univ.ObjectIdentifier('1.2.840.10045.3.1.1')\n\nsect163k1 = univ.ObjectIdentifier('1.3.132.0.1')\n\nsect163r2 = univ.ObjectIdentifier('1.3.132.0.15')\n\nsecp224r1 = univ.ObjectIdentifier('1.3.132.0.33')\n\nsect233k1 = univ.ObjectIdentifier('1.3.132.0.26')\n\nsect233r1 = univ.ObjectIdentifier('1.3.132.0.27')\n\nsecp256r1 = univ.ObjectIdentifier('1.2.840.10045.3.1.7')\n\nsect283k1 = univ.ObjectIdentifier('1.3.132.0.16')\n\nsect283r1 = univ.ObjectIdentifier('1.3.132.0.17')\n\nsecp384r1 = univ.ObjectIdentifier('1.3.132.0.34')\n\nsect409k1 = univ.ObjectIdentifier('1.3.132.0.36')\n\nsect409r1 = univ.ObjectIdentifier('1.3.132.0.37')\n\nsecp521r1 = univ.ObjectIdentifier('1.3.132.0.35')\n\nsect571k1 = univ.ObjectIdentifier('1.3.132.0.38')\n\nsect571r1 = univ.ObjectIdentifier('1.3.132.0.39')\n\n\n# Map of Algorithm Identifier OIDs to Parameters\n# The algorithm is not included if the parameters MUST be absent\n\n_algorithmIdentifierMapUpdate = {\n    rsaEncryption: univ.Null(),\n    md2WithRSAEncryption: univ.Null(),\n    md5WithRSAEncryption: univ.Null(),\n    sha1WithRSAEncryption: univ.Null(),\n    id_dsa: DSS_Parms(),\n    dhpublicnumber: DomainParameters(),\n    id_keyExchangeAlgorithm: KEA_Parms_Id(),\n    id_ecPublicKey: ECParameters(),\n    id_ecDH: ECParameters(),\n    id_ecMQV: ECParameters(),\n}\n\n\n# Add these Algorithm Identifier map entries to the ones in rfc5280.py\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc8360.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Resource Public Key Infrastructure (RPKI) Validation Reconsidered\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8360.txt\n# https://www.rfc-editor.org/errata/eid5870\n#\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc3779\nfrom pyasn1_modules import rfc5280\n\n\n# IP Address Delegation Extension V2\n\nid_pe_ipAddrBlocks_v2 = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.28')\n\nIPAddrBlocks = rfc3779.IPAddrBlocks\n\n\n# Autonomous System Identifier Delegation Extension V2\n\nid_pe_autonomousSysIds_v2 = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.29')\n\nASIdentifiers = rfc3779.ASIdentifiers\n\n\n# Map of Certificate Extension OIDs to Extensions is added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_ipAddrBlocks_v2: IPAddrBlocks(),\n    id_pe_autonomousSysIds_v2: ASIdentifiers(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc7229.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Object Identifiers for Test Certificate Policies\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7229.txt\n#\n\nfrom pyasn1.type import univ\n\n\nid_pkix = univ.ObjectIdentifier('1.3.6.1.5.5.7')\n\nid_TEST = id_pkix + (13, )\n\nid_TEST_certPolicyOne   = id_TEST + (1, )\nid_TEST_certPolicyTwo   = id_TEST + (2, )\nid_TEST_certPolicyThree = id_TEST + (3, )\nid_TEST_certPolicyFour  = id_TEST + (4, )\nid_TEST_certPolicyFive  = id_TEST + (5, )\nid_TEST_certPolicySix   = id_TEST + (6, )\nid_TEST_certPolicySeven = id_TEST + (7, )\nid_TEST_certPolicyEight = id_TEST + (8, )\n", "pyasn1_modules/rfc5126.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CMS Advanced Electronic Signatures (CAdES)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5126.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import useful\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5035\nfrom pyasn1_modules import rfc5755\nfrom pyasn1_modules import rfc6960\nfrom pyasn1_modules import rfc3161\n\nMAX = float('inf')\n\n\n# Maps for OpenTypes\n\ncommitmentQualifierMap = { }\n\nsigQualifiersMap = { }\n\notherRevRefMap = { }\n\notherRevValMap = { }\n\n\n# Imports from RFC 5652\n\nContentInfo = rfc5652.ContentInfo\n\nContentType = rfc5652.ContentType\n\nSignedData = rfc5652.SignedData\n\nEncapsulatedContentInfo = rfc5652.EncapsulatedContentInfo\n\nSignerInfo = rfc5652.SignerInfo\n\nMessageDigest = rfc5652.MessageDigest\n\nSigningTime = rfc5652.SigningTime\n\nCountersignature = rfc5652.Countersignature\n\nid_data = rfc5652.id_data\n\nid_signedData = rfc5652.id_signedData\n\nid_contentType= rfc5652.id_contentType\n\nid_messageDigest = rfc5652.id_messageDigest\n\nid_signingTime = rfc5652.id_signingTime\n\nid_countersignature = rfc5652.id_countersignature\n\n\n# Imports from RFC 5035\n\nSigningCertificate = rfc5035.SigningCertificate\n\nIssuerSerial = rfc5035.IssuerSerial\n\nContentReference = rfc5035.ContentReference\n\nContentIdentifier = rfc5035.ContentIdentifier\n\nid_aa_contentReference = rfc5035.id_aa_contentReference\n\nid_aa_contentIdentifier = rfc5035.id_aa_contentIdentifier\n    \nid_aa_signingCertificate = rfc5035.id_aa_signingCertificate\n\nid_aa_signingCertificateV2 = rfc5035.id_aa_signingCertificateV2\n\n\n# Imports from RFC 5280\n\nCertificate = rfc5280.Certificate\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nCertificateList = rfc5280.CertificateList\n\nName = rfc5280.Name\n\nAttribute = rfc5280.Attribute\n\nGeneralNames = rfc5280.GeneralNames\n\nGeneralName = rfc5280.GeneralName\n\nPolicyInformation = rfc5280.PolicyInformation\n\nDirectoryString = rfc5280.DirectoryString\n\n\n# Imports from RFC 5755\n\nAttributeCertificate = rfc5755.AttributeCertificate\n\n\n# Imports from RFC 6960\n\nBasicOCSPResponse = rfc6960.BasicOCSPResponse\n\nResponderID = rfc6960.ResponderID\n\n\n# Imports from RFC 3161\n\nTimeStampToken = rfc3161.TimeStampToken\n\n\n# OID used referencing electronic signature mechanisms\n\nid_etsi_es_IDUP_Mechanism_v1 = univ.ObjectIdentifier('0.4.0.1733.1.4.1')\n\n\n# OtherSigningCertificate - deprecated\n\nid_aa_ets_otherSigCert = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.19')\n\n\nclass OtherHashValue(univ.OctetString):\n    pass\n\n\nclass OtherHashAlgAndValue(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('hashAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('hashValue', OtherHashValue())\n    )\n\n\nclass OtherHash(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('sha1Hash', OtherHashValue()),\n        namedtype.NamedType('otherHash', OtherHashAlgAndValue())\n    )\n\n\nclass OtherCertID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('otherCertHash', OtherHash()),\n        namedtype.OptionalNamedType('issuerSerial', IssuerSerial())\n    )\n\n\nclass OtherSigningCertificate(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certs',\n            univ.SequenceOf(componentType=OtherCertID())),\n        namedtype.OptionalNamedType('policies',\n            univ.SequenceOf(componentType=PolicyInformation()))\n    )\n\n\n# Signature Policy Identifier\n\nid_aa_ets_sigPolicyId = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.15')\n\n\nclass SigPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass SigPolicyHash(OtherHashAlgAndValue):\n    pass\n\n\nclass SigPolicyQualifierId(univ.ObjectIdentifier):\n    pass\n\n\nclass SigPolicyQualifierInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('sigPolicyQualifierId', SigPolicyQualifierId()),\n        namedtype.NamedType('sigQualifier', univ.Any(),\n            openType=opentype.OpenType('sigPolicyQualifierId', sigQualifiersMap))\n    )\n\n\nclass SignaturePolicyId(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('sigPolicyId', SigPolicyId()),\n        namedtype.NamedType('sigPolicyHash', SigPolicyHash()),\n        namedtype.OptionalNamedType('sigPolicyQualifiers',\n            univ.SequenceOf(componentType=SigPolicyQualifierInfo()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\nclass SignaturePolicyImplied(univ.Null):\n    pass\n\n\nclass SignaturePolicy(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signaturePolicyId', SignaturePolicyId()),\n        namedtype.NamedType('signaturePolicyImplied', SignaturePolicyImplied())\n    )\n\n\nid_spq_ets_unotice = univ.ObjectIdentifier('1.2.840.113549.1.9.16.5.2')\n\n\nclass DisplayText(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('visibleString', char.VisibleString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n        namedtype.NamedType('bmpString', char.BMPString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n        namedtype.NamedType('utf8String', char.UTF8String().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, 200)))\n    )\n\n\nclass NoticeReference(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('organization', DisplayText()),\n        namedtype.NamedType('noticeNumbers',\n            univ.SequenceOf(componentType=univ.Integer()))\n    )\n\nclass SPUserNotice(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('noticeRef', NoticeReference()),\n        namedtype.OptionalNamedType('explicitText', DisplayText())\n    )\n\n\nnoticeToUser = SigPolicyQualifierInfo()\nnoticeToUser['sigPolicyQualifierId'] = id_spq_ets_unotice\nnoticeToUser['sigQualifier'] = SPUserNotice()\n\n\nid_spq_ets_uri = univ.ObjectIdentifier('1.2.840.113549.1.9.16.5.1')\n\n\nclass SPuri(char.IA5String):\n    pass\n\n\npointerToSigPolSpec = SigPolicyQualifierInfo()\npointerToSigPolSpec['sigPolicyQualifierId'] = id_spq_ets_uri\npointerToSigPolSpec['sigQualifier'] = SPuri()\n\n\n# Commitment Type\n\nid_aa_ets_commitmentType = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.16')\n\n\nclass CommitmentTypeIdentifier(univ.ObjectIdentifier):\n    pass\n\n\nclass CommitmentTypeQualifier(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('commitmentTypeIdentifier',\n             CommitmentTypeIdentifier()),\n        namedtype.NamedType('qualifier', univ.Any(),\n            openType=opentype.OpenType('commitmentTypeIdentifier',\n                 commitmentQualifierMap))\n    )\n\n\nclass CommitmentTypeIndication(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('commitmentTypeId', CommitmentTypeIdentifier()),\n        namedtype.OptionalNamedType('commitmentTypeQualifier',\n            univ.SequenceOf(componentType=CommitmentTypeQualifier()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\nid_cti_ets_proofOfOrigin = univ.ObjectIdentifier('1.2.840.113549.1.9.16.6.1')\n\nid_cti_ets_proofOfReceipt = univ.ObjectIdentifier('1.2.840.113549.1.9.16.6.2')\n\nid_cti_ets_proofOfDelivery = univ.ObjectIdentifier('1.2.840.113549.1.9.16.6.3')\n\nid_cti_ets_proofOfSender = univ.ObjectIdentifier('1.2.840.113549.1.9.16.6.4')\n\nid_cti_ets_proofOfApproval = univ.ObjectIdentifier('1.2.840.113549.1.9.16.6.5')\n\nid_cti_ets_proofOfCreation = univ.ObjectIdentifier('1.2.840.113549.1.9.16.6.6')\n\n\n# Signer Location\n\nid_aa_ets_signerLocation = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.17')\n\n\nclass PostalAddress(univ.SequenceOf):\n    componentType = DirectoryString()\n    subtypeSpec = constraint.ValueSizeConstraint(1, 6)\n\n\nclass SignerLocation(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('countryName',\n            DirectoryString().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('localityName',\n            DirectoryString().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('postalAdddress',\n            PostalAddress().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\n# Signature Timestamp\n\nid_aa_signatureTimeStampToken = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.14')\n\n\nclass SignatureTimeStampToken(TimeStampToken):\n    pass\n\n\n# Content Timestamp\n\nid_aa_ets_contentTimestamp = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.20')\n\n\nclass ContentTimestamp(TimeStampToken):\n    pass\n\n\n# Signer Attributes\n\nid_aa_ets_signerAttr = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.18')\n\n\nclass ClaimedAttributes(univ.SequenceOf):\n    componentType = Attribute()\n\n\nclass CertifiedAttributes(AttributeCertificate):\n    pass\n\n\nclass SignerAttribute(univ.SequenceOf):\n    componentType = univ.Choice(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('claimedAttributes',\n            ClaimedAttributes().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('certifiedAttributes',\n            CertifiedAttributes().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    ))\n\n\n# Complete Certificate Refs\n\nid_aa_ets_certificateRefs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.21')\n\n\nclass CompleteCertificateRefs(univ.SequenceOf):\n    componentType = OtherCertID()\n\n\n# Complete Revocation Refs\n\nid_aa_ets_revocationRefs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.22')\n\n\nclass CrlIdentifier(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('crlissuer', Name()),\n        namedtype.NamedType('crlIssuedTime', useful.UTCTime()),\n        namedtype.OptionalNamedType('crlNumber', univ.Integer())\n    )\n\n\nclass CrlValidatedID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('crlHash', OtherHash()),\n        namedtype.OptionalNamedType('crlIdentifier', CrlIdentifier())\n    )\n\n\nclass CRLListID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('crls',\n            univ.SequenceOf(componentType=CrlValidatedID()))\n    )\n\n\nclass OcspIdentifier(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('ocspResponderID', ResponderID()),\n        namedtype.NamedType('producedAt', useful.GeneralizedTime())\n    )\n\n\nclass OcspResponsesID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('ocspIdentifier', OcspIdentifier()),\n        namedtype.OptionalNamedType('ocspRepHash', OtherHash())\n    )\n\n\nclass OcspListID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('ocspResponses',\n            univ.SequenceOf(componentType=OcspResponsesID()))\n    )\n\n\nclass OtherRevRefType(univ.ObjectIdentifier):\n    pass\n\n\nclass OtherRevRefs(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('otherRevRefType', OtherRevRefType()),\n        namedtype.NamedType('otherRevRefs', univ.Any(),\n            openType=opentype.OpenType('otherRevRefType', otherRevRefMap))\n    )\n\n\nclass CrlOcspRef(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('crlids',\n            CRLListID().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('ocspids',\n            OcspListID().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('otherRev',\n            OtherRevRefs().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2)))\n    )\n\n\nclass CompleteRevocationRefs(univ.SequenceOf):\n    componentType = CrlOcspRef()\n\n\n# Certificate Values\n\nid_aa_ets_certValues = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.23')\n\n\nclass CertificateValues(univ.SequenceOf):\n    componentType = Certificate()\n\n\n# Certificate Revocation Values\n\nid_aa_ets_revocationValues = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.24')\n\n\nclass OtherRevValType(univ.ObjectIdentifier):\n    pass\n\n\nclass OtherRevVals(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('otherRevValType', OtherRevValType()),\n        namedtype.NamedType('otherRevVals', univ.Any(),\n            openType=opentype.OpenType('otherRevValType', otherRevValMap))\n    )\n\n\nclass RevocationValues(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('crlVals',\n            univ.SequenceOf(componentType=CertificateList()).subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('ocspVals',\n            univ.SequenceOf(componentType=BasicOCSPResponse()).subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('otherRevVals',\n            OtherRevVals().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2)))\n    )\n\n\n# CAdES-C Timestamp\n\nid_aa_ets_escTimeStamp = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.25')\n\n\nclass ESCTimeStampToken(TimeStampToken):\n    pass\n\n\n# Time-Stamped Certificates and CRLs\n\nid_aa_ets_certCRLTimestamp = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.26')\n\n\nclass TimestampedCertsCRLs(TimeStampToken):\n    pass\n\n\n# Archive Timestamp\n\nid_aa_ets_archiveTimestampV2 = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.48')\n\n\nclass ArchiveTimeStampToken(TimeStampToken):\n    pass\n\n\n# Attribute certificate references\n\nid_aa_ets_attrCertificateRefs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.44')\n\n\nclass AttributeCertificateRefs(univ.SequenceOf):\n    componentType = OtherCertID()\n\n\n# Attribute revocation references\n\nid_aa_ets_attrRevocationRefs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.45')\n\n\nclass AttributeRevocationRefs(univ.SequenceOf):\n    componentType = CrlOcspRef()\n\n\n# Update the sigQualifiersMap\n\n_sigQualifiersMapUpdate = {\n    id_spq_ets_unotice: SPUserNotice(),\n    id_spq_ets_uri: SPuri(),\n}\n\nsigQualifiersMap.update(_sigQualifiersMapUpdate)\n\n\n# Update the CMS Attribute Map in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_ets_otherSigCert: OtherSigningCertificate(),\n    id_aa_ets_sigPolicyId: SignaturePolicy(),\n    id_aa_ets_commitmentType: CommitmentTypeIndication(),\n    id_aa_ets_signerLocation: SignerLocation(),\n    id_aa_signatureTimeStampToken: SignatureTimeStampToken(),\n    id_aa_ets_contentTimestamp: ContentTimestamp(),\n    id_aa_ets_signerAttr: SignerAttribute(),\n    id_aa_ets_certificateRefs: CompleteCertificateRefs(),\n    id_aa_ets_revocationRefs: CompleteRevocationRefs(),\n    id_aa_ets_certValues: CertificateValues(),\n    id_aa_ets_revocationValues: RevocationValues(),\n    id_aa_ets_escTimeStamp: ESCTimeStampToken(),\n    id_aa_ets_certCRLTimestamp: TimestampedCertsCRLs(),\n    id_aa_ets_archiveTimestampV2: ArchiveTimeStampToken(),\n    id_aa_ets_attrCertificateRefs: AttributeCertificateRefs(),\n    id_aa_ets_attrRevocationRefs: AttributeRevocationRefs(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc5208.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS#8 syntax\n#\n# ASN.1 source from:\n# http://tools.ietf.org/html/rfc5208\n#\n# Sample captures could be obtained with \"openssl pkcs8 -topk8\" command\n#\nfrom pyasn1_modules import rfc2251\nfrom pyasn1_modules.rfc2459 import *\n\n\nclass KeyEncryptionAlgorithms(AlgorithmIdentifier):\n    pass\n\n\nclass PrivateKeyAlgorithms(AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedData(univ.OctetString):\n    pass\n\n\nclass EncryptedPrivateKeyInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('encryptionAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('encryptedData', EncryptedData())\n    )\n\n\nclass PrivateKey(univ.OctetString):\n    pass\n\n\nclass Attributes(univ.SetOf):\n    componentType = rfc2251.Attribute()\n\n\nclass Version(univ.Integer):\n    namedValues = namedval.NamedValues(('v1', 0), ('v2', 1))\n\n\nclass PrivateKeyInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('privateKeyAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('privateKey', PrivateKey()),\n        namedtype.OptionalNamedType('attributes', Attributes().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n", "pyasn1_modules/rfc4985.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Expression of Service Names in X.509 Certificates\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4985.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# As specified in Appendix A.2 of RFC 4985\n\nid_pkix = rfc5280.id_pkix\n\nid_on = id_pkix + (8, )\n\nid_on_dnsSRV = id_on + (7, )\n\n\nclass SRVName(char.IA5String):\n    subtypeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nsrvName = rfc5280.AnotherName()\nsrvName['type-id'] = id_on_dnsSRV\nsrvName['value'] = SRVName()\n\n\n# Map of Other Name OIDs to Other Name is added to the\n# ones that are in rfc5280.py\n\n_anotherNameMapUpdate = {\n    id_on_dnsSRV: SRVName(),\n}\n\nrfc5280.anotherNameMap.update(_anotherNameMapUpdate)\n", "pyasn1_modules/rfc4357.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Additional Cryptographic Algorithms for Use with GOST 28147-89,\n# GOST R 34.10-94, GOST R 34.10-2001, and GOST R 34.11-94 Algorithms\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4357.txt\n# https://www.rfc-editor.org/errata/eid5927\n# https://www.rfc-editor.org/errata/eid5928\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# Import from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\n\n# Object Identifiers\n\nid_CryptoPro = univ.ObjectIdentifier((1, 2, 643, 2, 2,))\n\n\nid_CryptoPro_modules = id_CryptoPro + (1, 1,)\n\nid_CryptoPro_extensions = id_CryptoPro + (34,)\n\nid_CryptoPro_policyIds = id_CryptoPro + (38,)\n\nid_CryptoPro_policyQt = id_CryptoPro + (39,)\n\n\ncryptographic_Gost_Useful_Definitions = id_CryptoPro_modules + (0, 1,)\n\ngostR3411_94_DigestSyntax = id_CryptoPro_modules + (1, 1,)\n\ngostR3410_94_PKISyntax = id_CryptoPro_modules + (2, 1,)\n\ngostR3410_94_SignatureSyntax = id_CryptoPro_modules + (3, 1,)\n\ngost28147_89_EncryptionSyntax = id_CryptoPro_modules + (4, 1,)\n\ngostR3410_EncryptionSyntax = id_CryptoPro_modules + (5, 2,)\n\ngost28147_89_ParamSetSyntax = id_CryptoPro_modules + (6, 1,)\n\ngostR3411_94_ParamSetSyntax = id_CryptoPro_modules + (7, 1,)\n\ngostR3410_94_ParamSetSyntax = id_CryptoPro_modules + (8, 1, 1)\n\ngostR3410_2001_PKISyntax = id_CryptoPro_modules + (9, 1,)\n\ngostR3410_2001_SignatureSyntax = id_CryptoPro_modules + (10, 1,)\n\ngostR3410_2001_ParamSetSyntax = id_CryptoPro_modules + (12, 1,)\n\ngost_CryptoPro_ExtendedKeyUsage = id_CryptoPro_modules + (13, 1,)\n\ngost_CryptoPro_PrivateKey = id_CryptoPro_modules + (14, 1,)\n\ngost_CryptoPro_PKIXCMP = id_CryptoPro_modules + (15, 1,)\n\ngost_CryptoPro_TLS = id_CryptoPro_modules + (16, 1,)\n\ngost_CryptoPro_Policy = id_CryptoPro_modules + (17, 1,)\n\ngost_CryptoPro_Constants = id_CryptoPro_modules + (18, 1,)\n\n\nid_CryptoPro_algorithms = id_CryptoPro\n\nid_GostR3411_94_with_GostR3410_2001 = id_CryptoPro_algorithms + (3,)\n\nid_GostR3411_94_with_GostR3410_94 = id_CryptoPro_algorithms + (4,)\n\nid_GostR3411_94 = id_CryptoPro_algorithms + (9,)\n\nid_Gost28147_89_None_KeyMeshing = id_CryptoPro_algorithms + (14, 0,)\n\nid_Gost28147_89_CryptoPro_KeyMeshing = id_CryptoPro_algorithms + (14, 1,)\n\nid_GostR3410_2001 = id_CryptoPro_algorithms + (19,)\n\nid_GostR3410_94 = id_CryptoPro_algorithms + (20,)\n\nid_Gost28147_89 = id_CryptoPro_algorithms + (21,)\n\nid_Gost28147_89_MAC = id_CryptoPro_algorithms + (22,)\n\nid_CryptoPro_hashes = id_CryptoPro_algorithms + (30,)\n\nid_CryptoPro_encrypts = id_CryptoPro_algorithms + (31,)\n\nid_CryptoPro_signs = id_CryptoPro_algorithms + (32,)\n\nid_CryptoPro_exchanges = id_CryptoPro_algorithms + (33,)\n\nid_CryptoPro_ecc_signs = id_CryptoPro_algorithms + (35,)\n\nid_CryptoPro_ecc_exchanges = id_CryptoPro_algorithms + (36,)\n\nid_CryptoPro_private_keys = id_CryptoPro_algorithms + (37,)\n\nid_CryptoPro_pkixcmp_infos = id_CryptoPro_algorithms + (41,)\n\nid_CryptoPro_audit_service_types = id_CryptoPro_algorithms + (42,)\n\nid_CryptoPro_audit_record_types = id_CryptoPro_algorithms + (43,)\n\nid_CryptoPro_attributes = id_CryptoPro_algorithms + (44,)\n\nid_CryptoPro_name_service_types = id_CryptoPro_algorithms + (45,)\n\nid_GostR3410_2001DH = id_CryptoPro_algorithms + (98,)\n\nid_GostR3410_94DH = id_CryptoPro_algorithms + (99,)\n\n\nid_Gost28147_89_TestParamSet = id_CryptoPro_encrypts + (0,)\n\nid_Gost28147_89_CryptoPro_A_ParamSet = id_CryptoPro_encrypts + (1,)\n\nid_Gost28147_89_CryptoPro_B_ParamSet = id_CryptoPro_encrypts + (2,)\n\nid_Gost28147_89_CryptoPro_C_ParamSet = id_CryptoPro_encrypts + (3,)\n\nid_Gost28147_89_CryptoPro_D_ParamSet = id_CryptoPro_encrypts + (4,)\n\nid_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = id_CryptoPro_encrypts + (5,)\n\nid_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = id_CryptoPro_encrypts + (6,)\n\nid_Gost28147_89_CryptoPro_RIC_1_ParamSet = id_CryptoPro_encrypts + (7,)\n\n\nid_GostR3410_2001_TestParamSet = id_CryptoPro_ecc_signs + (0,)\n\nid_GostR3410_2001_CryptoPro_A_ParamSet = id_CryptoPro_ecc_signs + (1,)\n\nid_GostR3410_2001_CryptoPro_B_ParamSet = id_CryptoPro_ecc_signs + (2,)\n\nid_GostR3410_2001_CryptoPro_C_ParamSet = id_CryptoPro_ecc_signs + (3,)\n\n\nid_GostR3410_2001_CryptoPro_XchA_ParamSet = id_CryptoPro_ecc_exchanges + (0,)\n\nid_GostR3410_2001_CryptoPro_XchB_ParamSet = id_CryptoPro_ecc_exchanges + (1,)\n\n\nid_GostR3410_94_TestParamSet = id_CryptoPro_signs + (0,)\n\nid_GostR3410_94_CryptoPro_A_ParamSet = id_CryptoPro_signs + (2,)\n\nid_GostR3410_94_CryptoPro_B_ParamSet = id_CryptoPro_signs + (3,)\n\nid_GostR3410_94_CryptoPro_C_ParamSet = id_CryptoPro_signs + (4,)\n\nid_GostR3410_94_CryptoPro_D_ParamSet = id_CryptoPro_signs + (5,)\n\n\nid_GostR3410_94_CryptoPro_XchA_ParamSet = id_CryptoPro_exchanges + (1,)\n\nid_GostR3410_94_CryptoPro_XchB_ParamSet = id_CryptoPro_exchanges + (2,)\n\nid_GostR3410_94_CryptoPro_XchC_ParamSet = id_CryptoPro_exchanges + (3,)\n\n\nid_GostR3410_94_a = id_GostR3410_94 + (1,)\n\nid_GostR3410_94_aBis = id_GostR3410_94 + (2,)\n\nid_GostR3410_94_b = id_GostR3410_94 + (3,)\n\nid_GostR3410_94_bBis = id_GostR3410_94 + (4,)\n\n\nid_GostR3411_94_TestParamSet = id_CryptoPro_hashes + (0,)\n\nid_GostR3411_94_CryptoProParamSet = id_CryptoPro_hashes + (1,)\n\n\n\n\nclass Gost28147_89_ParamSet(univ.ObjectIdentifier):\n    pass\n\nGost28147_89_ParamSet.subtypeSpec = constraint.SingleValueConstraint(\n    id_Gost28147_89_TestParamSet,\n    id_Gost28147_89_CryptoPro_A_ParamSet,\n    id_Gost28147_89_CryptoPro_B_ParamSet,\n    id_Gost28147_89_CryptoPro_C_ParamSet,\n    id_Gost28147_89_CryptoPro_D_ParamSet,\n    id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet,\n    id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet,\n    id_Gost28147_89_CryptoPro_RIC_1_ParamSet\n)\n\n\nclass Gost28147_89_BlobParameters(univ.Sequence):\n    pass\n\nGost28147_89_BlobParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('encryptionParamSet', Gost28147_89_ParamSet())\n)\n\n\nclass Gost28147_89_MAC(univ.OctetString):\n    pass\n\nGost28147_89_MAC.subtypeSpec = constraint.ValueSizeConstraint(1, 4)\n\n\nclass Gost28147_89_Key(univ.OctetString):\n    pass\n\nGost28147_89_Key.subtypeSpec = constraint.ValueSizeConstraint(32, 32)\n\n\nclass Gost28147_89_EncryptedKey(univ.Sequence):\n    pass\n\nGost28147_89_EncryptedKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('encryptedKey', Gost28147_89_Key()),\n    namedtype.OptionalNamedType('maskKey', Gost28147_89_Key().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('macKey', Gost28147_89_MAC())\n)\n\n\nclass Gost28147_89_IV(univ.OctetString):\n    pass\n\nGost28147_89_IV.subtypeSpec = constraint.ValueSizeConstraint(8, 8)\n\n\nclass Gost28147_89_UZ(univ.OctetString):\n    pass\n\nGost28147_89_UZ.subtypeSpec = constraint.ValueSizeConstraint(64, 64)\n\n\nclass Gost28147_89_ParamSetParameters(univ.Sequence):\n    pass\n\nGost28147_89_ParamSetParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('eUZ', Gost28147_89_UZ()),\n    namedtype.NamedType('mode',\n        univ.Integer(namedValues=namedval.NamedValues(\n            ('gost28147-89-CNT', 0),\n            ('gost28147-89-CFB', 1),\n            ('cryptoPro-CBC', 2)\n    ))),\n    namedtype.NamedType('shiftBits',\n        univ.Integer(namedValues=namedval.NamedValues(\n            ('gost28147-89-block', 64)\n    ))),\n    namedtype.NamedType('keyMeshing', AlgorithmIdentifier())\n)\n\n\nclass Gost28147_89_Parameters(univ.Sequence):\n    pass\n\nGost28147_89_Parameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('iv', Gost28147_89_IV()),\n    namedtype.NamedType('encryptionParamSet', Gost28147_89_ParamSet())\n)\n\n\nclass GostR3410_2001_CertificateSignature(univ.BitString):\n    pass\n\nGostR3410_2001_CertificateSignature.subtypeSpec=constraint.ValueSizeConstraint(256, 512)\n\n\nclass GostR3410_2001_ParamSetParameters(univ.Sequence):\n    pass\n\nGostR3410_2001_ParamSetParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('a', univ.Integer()),\n    namedtype.NamedType('b', univ.Integer()),\n    namedtype.NamedType('p', univ.Integer()),\n    namedtype.NamedType('q', univ.Integer()),\n    namedtype.NamedType('x', univ.Integer()),\n    namedtype.NamedType('y', univ.Integer())\n)\n\n\nclass GostR3410_2001_PublicKey(univ.OctetString):\n    pass\n\nGostR3410_2001_PublicKey.subtypeSpec = constraint.ValueSizeConstraint(64, 64)\n\n\nclass GostR3410_2001_PublicKeyParameters(univ.Sequence):\n    pass\n\nGostR3410_2001_PublicKeyParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('publicKeyParamSet', univ.ObjectIdentifier().subtype(\n        subtypeSpec=constraint.SingleValueConstraint(\n            id_GostR3410_2001_TestParamSet,\n            id_GostR3410_2001_CryptoPro_A_ParamSet,\n            id_GostR3410_2001_CryptoPro_B_ParamSet,\n            id_GostR3410_2001_CryptoPro_C_ParamSet,\n            id_GostR3410_2001_CryptoPro_XchA_ParamSet,\n            id_GostR3410_2001_CryptoPro_XchB_ParamSet\n    ))),\n    namedtype.NamedType('digestParamSet', univ.ObjectIdentifier().subtype(\n        subtypeSpec=constraint.SingleValueConstraint(\n            id_GostR3411_94_TestParamSet,\n            id_GostR3411_94_CryptoProParamSet\n    ))),\n    namedtype.DefaultedNamedType('encryptionParamSet',\n        Gost28147_89_ParamSet().subtype(value=id_Gost28147_89_CryptoPro_A_ParamSet\n    ))\n)\n\n\nclass GostR3410_94_CertificateSignature(univ.BitString):\n    pass\n\nGostR3410_94_CertificateSignature.subtypeSpec = constraint.ValueSizeConstraint(256, 512)\n\n\nclass GostR3410_94_ParamSetParameters_t(univ.Integer):\n    pass\n\nGostR3410_94_ParamSetParameters_t.subtypeSpec = constraint.SingleValueConstraint(512, 1024)\n\n\nclass GostR3410_94_ParamSetParameters(univ.Sequence):\n    pass\n\nGostR3410_94_ParamSetParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('t', GostR3410_94_ParamSetParameters_t()),\n    namedtype.NamedType('p', univ.Integer()),\n    namedtype.NamedType('q', univ.Integer()),\n    namedtype.NamedType('a', univ.Integer()),\n    namedtype.OptionalNamedType('validationAlgorithm', AlgorithmIdentifier())\n)\n\n\nclass GostR3410_94_PublicKey(univ.OctetString):\n    pass\n\nGostR3410_94_PublicKey.subtypeSpec = constraint.ConstraintsUnion(\n    constraint.ValueSizeConstraint(64, 64),\n    constraint.ValueSizeConstraint(128, 128)\n)\n\n\nclass GostR3410_94_PublicKeyParameters(univ.Sequence):\n    pass\n\nGostR3410_94_PublicKeyParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('publicKeyParamSet', univ.ObjectIdentifier().subtype(\n        subtypeSpec=constraint.SingleValueConstraint(\n            id_GostR3410_94_TestParamSet,\n            id_GostR3410_94_CryptoPro_A_ParamSet,\n            id_GostR3410_94_CryptoPro_B_ParamSet,\n            id_GostR3410_94_CryptoPro_C_ParamSet,\n            id_GostR3410_94_CryptoPro_D_ParamSet,\n            id_GostR3410_94_CryptoPro_XchA_ParamSet,\n            id_GostR3410_94_CryptoPro_XchB_ParamSet,\n            id_GostR3410_94_CryptoPro_XchC_ParamSet\n    ))),\n    namedtype.NamedType('digestParamSet', univ.ObjectIdentifier().subtype(\n        subtypeSpec=constraint.SingleValueConstraint(\n            id_GostR3411_94_TestParamSet,\n            id_GostR3411_94_CryptoProParamSet\n    ))),\n    namedtype.DefaultedNamedType('encryptionParamSet',\n        Gost28147_89_ParamSet().subtype(value=id_Gost28147_89_CryptoPro_A_ParamSet\n    ))\n)\n\n\nclass GostR3410_94_ValidationBisParameters_c(univ.Integer):\n    pass\n\nGostR3410_94_ValidationBisParameters_c.subtypeSpec = constraint.ValueRangeConstraint(0, 4294967295)\n\n\nclass GostR3410_94_ValidationBisParameters(univ.Sequence):\n    pass\n\nGostR3410_94_ValidationBisParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('x0', GostR3410_94_ValidationBisParameters_c()),\n    namedtype.NamedType('c', GostR3410_94_ValidationBisParameters_c()),\n    namedtype.OptionalNamedType('d', univ.Integer())\n)\n\n\nclass GostR3410_94_ValidationParameters_c(univ.Integer):\n    pass\n\nGostR3410_94_ValidationParameters_c.subtypeSpec = constraint.ValueRangeConstraint(0, 65535)\n\n\nclass GostR3410_94_ValidationParameters(univ.Sequence):\n    pass\n\nGostR3410_94_ValidationParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('x0', GostR3410_94_ValidationParameters_c()),\n    namedtype.NamedType('c', GostR3410_94_ValidationParameters_c()),\n    namedtype.OptionalNamedType('d', univ.Integer())\n)\n\n\nclass GostR3411_94_Digest(univ.OctetString):\n    pass\n\nGostR3411_94_Digest.subtypeSpec = constraint.ValueSizeConstraint(32, 32)\n\n\nclass GostR3411_94_DigestParameters(univ.ObjectIdentifier):\n    pass\n\nGostR3411_94_DigestParameters.subtypeSpec = constraint.ConstraintsUnion(\n     constraint.SingleValueConstraint(id_GostR3411_94_TestParamSet),\n     constraint.SingleValueConstraint(id_GostR3411_94_CryptoProParamSet),\n)\n\n\nclass GostR3411_94_ParamSetParameters(univ.Sequence):\n    pass\n\nGostR3411_94_ParamSetParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hUZ', Gost28147_89_UZ()),\n    namedtype.NamedType('h0', GostR3411_94_Digest())\n)\n\n\n# Update the Algorithm Identifier map in rfc5280.py\n\n_algorithmIdentifierMapUpdate = {\n    id_Gost28147_89: Gost28147_89_Parameters(),\n    id_Gost28147_89_TestParamSet: Gost28147_89_ParamSetParameters(),\n    id_Gost28147_89_CryptoPro_A_ParamSet: Gost28147_89_ParamSetParameters(),\n    id_Gost28147_89_CryptoPro_B_ParamSet: Gost28147_89_ParamSetParameters(),\n    id_Gost28147_89_CryptoPro_C_ParamSet: Gost28147_89_ParamSetParameters(),\n    id_Gost28147_89_CryptoPro_D_ParamSet: Gost28147_89_ParamSetParameters(),\n    id_Gost28147_89_CryptoPro_KeyMeshing: univ.Null(\"\"),\n    id_Gost28147_89_None_KeyMeshing: univ.Null(\"\"),\n    id_GostR3410_94: GostR3410_94_PublicKeyParameters(),\n    id_GostR3410_94_TestParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_CryptoPro_A_ParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_CryptoPro_B_ParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_CryptoPro_C_ParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_CryptoPro_D_ParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_CryptoPro_XchA_ParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_CryptoPro_XchB_ParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_CryptoPro_XchC_ParamSet: GostR3410_94_ParamSetParameters(),\n    id_GostR3410_94_a: GostR3410_94_ValidationParameters(),\n    id_GostR3410_94_aBis: GostR3410_94_ValidationBisParameters(),\n    id_GostR3410_94_b: GostR3410_94_ValidationParameters(),\n    id_GostR3410_94_bBis: GostR3410_94_ValidationBisParameters(),\n    id_GostR3410_2001: univ.Null(\"\"),\n    id_GostR3411_94: univ.Null(\"\"),\n    id_GostR3411_94_TestParamSet: GostR3411_94_ParamSetParameters(),\n    id_GostR3411_94_CryptoProParamSet: GostR3411_94_ParamSetParameters(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc4055.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with a very small amount of assistance from\n# asn1ate v.0.6.0.\n# Modified by Russ Housley to add maps for opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Additional Algorithms and Identifiers for RSA Cryptography\n# for use in Certificates and CRLs\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4055.txt\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n    return univ.ObjectIdentifier(output)\n\n\nid_sha1 = _OID(1, 3, 14, 3, 2, 26)\n\nid_sha256 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 1)\n\nid_sha384 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 2)\n\nid_sha512 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 3)\n\nid_sha224 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 4)\n\nrsaEncryption = _OID(1, 2, 840, 113549, 1, 1, 1)\n\nid_mgf1 = _OID(1, 2, 840, 113549, 1, 1, 8)\n\nid_RSAES_OAEP = _OID(1, 2, 840, 113549, 1, 1, 7)\n\nid_pSpecified = _OID(1, 2, 840, 113549, 1, 1, 9)\n\nid_RSASSA_PSS = _OID(1, 2, 840, 113549, 1, 1, 10)\n\nsha256WithRSAEncryption = _OID(1, 2, 840, 113549, 1, 1, 11)\n\nsha384WithRSAEncryption = _OID(1, 2, 840, 113549, 1, 1, 12)\n\nsha512WithRSAEncryption = _OID(1, 2, 840, 113549, 1, 1, 13)\n\nsha224WithRSAEncryption = _OID(1, 2, 840, 113549, 1, 1, 14)\n\nsha1Identifier = rfc5280.AlgorithmIdentifier()\nsha1Identifier['algorithm'] = id_sha1\nsha1Identifier['parameters'] = univ.Null(\"\")\n\nsha224Identifier = rfc5280.AlgorithmIdentifier()\nsha224Identifier['algorithm'] = id_sha224\nsha224Identifier['parameters'] = univ.Null(\"\")\n\nsha256Identifier = rfc5280.AlgorithmIdentifier()\nsha256Identifier['algorithm'] = id_sha256\nsha256Identifier['parameters'] = univ.Null(\"\")\n\nsha384Identifier = rfc5280.AlgorithmIdentifier()\nsha384Identifier['algorithm'] = id_sha384\nsha384Identifier['parameters'] = univ.Null(\"\")\n\nsha512Identifier = rfc5280.AlgorithmIdentifier()\nsha512Identifier['algorithm'] = id_sha512\nsha512Identifier['parameters'] = univ.Null(\"\")\n\nmgf1SHA1Identifier = rfc5280.AlgorithmIdentifier()\nmgf1SHA1Identifier['algorithm'] = id_mgf1\nmgf1SHA1Identifier['parameters'] = sha1Identifier\n\nmgf1SHA224Identifier = rfc5280.AlgorithmIdentifier()\nmgf1SHA224Identifier['algorithm'] = id_mgf1\nmgf1SHA224Identifier['parameters'] = sha224Identifier\n\nmgf1SHA256Identifier = rfc5280.AlgorithmIdentifier()\nmgf1SHA256Identifier['algorithm'] = id_mgf1\nmgf1SHA256Identifier['parameters'] = sha256Identifier\n\nmgf1SHA384Identifier = rfc5280.AlgorithmIdentifier()\nmgf1SHA384Identifier['algorithm'] = id_mgf1\nmgf1SHA384Identifier['parameters'] = sha384Identifier\n\nmgf1SHA512Identifier = rfc5280.AlgorithmIdentifier()\nmgf1SHA512Identifier['algorithm'] = id_mgf1\nmgf1SHA512Identifier['parameters'] = sha512Identifier\n\npSpecifiedEmptyIdentifier = rfc5280.AlgorithmIdentifier()\npSpecifiedEmptyIdentifier['algorithm'] = id_pSpecified\npSpecifiedEmptyIdentifier['parameters'] = univ.OctetString(value='')\n\n\nclass RSAPublicKey(univ.Sequence):\n    pass\n\nRSAPublicKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('modulus', univ.Integer()),\n    namedtype.NamedType('publicExponent', univ.Integer())\n)\n\n\nclass HashAlgorithm(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass MaskGenAlgorithm(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass RSAES_OAEP_params(univ.Sequence):\n    pass\n\nRSAES_OAEP_params.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('hashFunc', rfc5280.AlgorithmIdentifier().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('maskGenFunc', rfc5280.AlgorithmIdentifier().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n    namedtype.OptionalNamedType('pSourceFunc', rfc5280.AlgorithmIdentifier().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n)\n\nrSAES_OAEP_Default_Params = RSAES_OAEP_params()\n\nrSAES_OAEP_Default_Identifier = rfc5280.AlgorithmIdentifier()\nrSAES_OAEP_Default_Identifier['algorithm'] = id_RSAES_OAEP\nrSAES_OAEP_Default_Identifier['parameters'] = rSAES_OAEP_Default_Params\n\nrSAES_OAEP_SHA224_Params = RSAES_OAEP_params()\nrSAES_OAEP_SHA224_Params['hashFunc'] = sha224Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSAES_OAEP_SHA224_Params['maskGenFunc'] = mgf1SHA224Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSAES_OAEP_SHA224_Identifier = rfc5280.AlgorithmIdentifier()\nrSAES_OAEP_SHA224_Identifier['algorithm'] = id_RSAES_OAEP\nrSAES_OAEP_SHA224_Identifier['parameters'] = rSAES_OAEP_SHA224_Params\n\nrSAES_OAEP_SHA256_Params = RSAES_OAEP_params()\nrSAES_OAEP_SHA256_Params['hashFunc'] = sha256Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSAES_OAEP_SHA256_Params['maskGenFunc'] = mgf1SHA256Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSAES_OAEP_SHA256_Identifier = rfc5280.AlgorithmIdentifier()\nrSAES_OAEP_SHA256_Identifier['algorithm'] = id_RSAES_OAEP\nrSAES_OAEP_SHA256_Identifier['parameters'] = rSAES_OAEP_SHA256_Params\n\nrSAES_OAEP_SHA384_Params = RSAES_OAEP_params()\nrSAES_OAEP_SHA384_Params['hashFunc'] = sha384Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSAES_OAEP_SHA384_Params['maskGenFunc'] = mgf1SHA384Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSAES_OAEP_SHA384_Identifier = rfc5280.AlgorithmIdentifier()\nrSAES_OAEP_SHA384_Identifier['algorithm'] = id_RSAES_OAEP\nrSAES_OAEP_SHA384_Identifier['parameters'] = rSAES_OAEP_SHA384_Params\n\nrSAES_OAEP_SHA512_Params = RSAES_OAEP_params()\nrSAES_OAEP_SHA512_Params['hashFunc'] = sha512Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSAES_OAEP_SHA512_Params['maskGenFunc'] = mgf1SHA512Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSAES_OAEP_SHA512_Identifier = rfc5280.AlgorithmIdentifier()\nrSAES_OAEP_SHA512_Identifier['algorithm'] = id_RSAES_OAEP\nrSAES_OAEP_SHA512_Identifier['parameters'] = rSAES_OAEP_SHA512_Params\n\n\nclass RSASSA_PSS_params(univ.Sequence):\n    pass\n\nRSASSA_PSS_params.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('hashAlgorithm', rfc5280.AlgorithmIdentifier().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('maskGenAlgorithm', rfc5280.AlgorithmIdentifier().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n    namedtype.DefaultedNamedType('saltLength', univ.Integer(value=20).subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.DefaultedNamedType('trailerField', univ.Integer(value=1).subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\nrSASSA_PSS_Default_Params = RSASSA_PSS_params()\n\nrSASSA_PSS_Default_Identifier = rfc5280.AlgorithmIdentifier()\nrSASSA_PSS_Default_Identifier['algorithm'] = id_RSASSA_PSS\nrSASSA_PSS_Default_Identifier['parameters'] = rSASSA_PSS_Default_Params\n\nrSASSA_PSS_SHA224_Params = RSASSA_PSS_params()\nrSASSA_PSS_SHA224_Params['hashAlgorithm'] = sha224Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSASSA_PSS_SHA224_Params['maskGenAlgorithm'] = mgf1SHA224Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSASSA_PSS_SHA224_Identifier = rfc5280.AlgorithmIdentifier()\nrSASSA_PSS_SHA224_Identifier['algorithm'] = id_RSASSA_PSS\nrSASSA_PSS_SHA224_Identifier['parameters'] = rSASSA_PSS_SHA224_Params\n\nrSASSA_PSS_SHA256_Params = RSASSA_PSS_params()\nrSASSA_PSS_SHA256_Params['hashAlgorithm'] = sha256Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSASSA_PSS_SHA256_Params['maskGenAlgorithm'] = mgf1SHA256Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSASSA_PSS_SHA256_Identifier = rfc5280.AlgorithmIdentifier()\nrSASSA_PSS_SHA256_Identifier['algorithm'] = id_RSASSA_PSS\nrSASSA_PSS_SHA256_Identifier['parameters'] = rSASSA_PSS_SHA256_Params\n\nrSASSA_PSS_SHA384_Params = RSASSA_PSS_params()\nrSASSA_PSS_SHA384_Params['hashAlgorithm'] = sha384Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSASSA_PSS_SHA384_Params['maskGenAlgorithm'] = mgf1SHA384Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSASSA_PSS_SHA384_Identifier = rfc5280.AlgorithmIdentifier()\nrSASSA_PSS_SHA384_Identifier['algorithm'] = id_RSASSA_PSS\nrSASSA_PSS_SHA384_Identifier['parameters'] = rSASSA_PSS_SHA384_Params\n\nrSASSA_PSS_SHA512_Params = RSASSA_PSS_params()\nrSASSA_PSS_SHA512_Params['hashAlgorithm'] = sha512Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0), cloneValueFlag=True)\nrSASSA_PSS_SHA512_Params['maskGenAlgorithm'] = mgf1SHA512Identifier.subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1), cloneValueFlag=True)\n\nrSASSA_PSS_SHA512_Identifier = rfc5280.AlgorithmIdentifier()\nrSASSA_PSS_SHA512_Identifier['algorithm'] = id_RSASSA_PSS\nrSASSA_PSS_SHA512_Identifier['parameters'] = rSASSA_PSS_SHA512_Params\n\n\n# Update the Algorithm Identifier map\n\n_algorithmIdentifierMapUpdate = {\n    id_sha1: univ.Null(),\n    id_sha224: univ.Null(),\n    id_sha256: univ.Null(),\n    id_sha384: univ.Null(),\n    id_sha512: univ.Null(),\n    id_mgf1: rfc5280.AlgorithmIdentifier(),\n    id_pSpecified: univ.OctetString(),\n    id_RSAES_OAEP: RSAES_OAEP_params(),\n    id_RSASSA_PSS: RSASSA_PSS_params(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc7906.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# NSA's CMS Key Management Attributes\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7906.txt\n# https://www.rfc-editor.org/errata/eid5850\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc2634\nfrom pyasn1_modules import rfc4108\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc6010\nfrom pyasn1_modules import rfc6019\nfrom pyasn1_modules import rfc7191\n\nMAX = float('inf')\n\n\n# Imports From RFC 2634\n\nid_aa_contentHint = rfc2634.id_aa_contentHint\n\nContentHints = rfc2634.ContentHints\n\nid_aa_securityLabel = rfc2634.id_aa_securityLabel\n\nSecurityPolicyIdentifier = rfc2634.SecurityPolicyIdentifier\n\nSecurityClassification = rfc2634.SecurityClassification\n\nESSPrivacyMark = rfc2634.ESSPrivacyMark\n\nSecurityCategories= rfc2634.SecurityCategories\n\nESSSecurityLabel = rfc2634.ESSSecurityLabel\n\n\n# Imports From RFC 4108\n\nid_aa_communityIdentifiers = rfc4108.id_aa_communityIdentifiers\n\nCommunityIdentifier = rfc4108.CommunityIdentifier\n\nCommunityIdentifiers = rfc4108.CommunityIdentifiers\n\n\n# Imports From RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nName = rfc5280.Name\n\nCertificate = rfc5280.Certificate\n\nGeneralNames = rfc5280.GeneralNames\n\nGeneralName = rfc5280.GeneralName\n\n\nSubjectInfoAccessSyntax = rfc5280.SubjectInfoAccessSyntax\n\nid_pkix = rfc5280.id_pkix\n\nid_pe = rfc5280.id_pe\n\nid_pe_subjectInfoAccess = rfc5280.id_pe_subjectInfoAccess\n\n\n# Imports From RFC 6010\n\nCMSContentConstraints = rfc6010.CMSContentConstraints\n\n\n# Imports From RFC 6019\n\nBinaryTime = rfc6019.BinaryTime\n\nid_aa_binarySigningTime = rfc6019.id_aa_binarySigningTime\n\nBinarySigningTime = rfc6019.BinarySigningTime\n\n\n# Imports From RFC 5652\n\nAttribute = rfc5652.Attribute\n\nCertificateSet = rfc5652.CertificateSet\n\nCertificateChoices = rfc5652.CertificateChoices\n\nid_contentType = rfc5652.id_contentType\n\nContentType = rfc5652.ContentType\n\nid_messageDigest = rfc5652.id_messageDigest\n\nMessageDigest = rfc5652.MessageDigest\n\n\n# Imports From RFC 7191\n\nSIREntityName = rfc7191.SIREntityName\n\nid_aa_KP_keyPkgIdAndReceiptReq = rfc7191.id_aa_KP_keyPkgIdAndReceiptReq\n\nKeyPkgIdentifierAndReceiptReq = rfc7191.KeyPkgIdentifierAndReceiptReq\n\n\n# Key Province Attribute\n\nid_aa_KP_keyProvinceV2 = univ.ObjectIdentifier('2.16.840.1.101.2.1.5.71')\n\n\nclass KeyProvinceV2(univ.ObjectIdentifier):\n    pass\n\n\naa_keyProvince_v2 = Attribute()\naa_keyProvince_v2['attrType'] = id_aa_KP_keyProvinceV2\naa_keyProvince_v2['attrValues'][0] = KeyProvinceV2()\n \n\n# Manifest Attribute\n\nid_aa_KP_manifest = univ.ObjectIdentifier('2.16.840.1.101.2.1.5.72')\n\n\nclass ShortTitle(char.PrintableString):\n    pass\n\n\nclass Manifest(univ.SequenceOf):\n    pass\n\nManifest.componentType = ShortTitle()\nManifest.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\naa_manifest = Attribute()\naa_manifest['attrType'] = id_aa_KP_manifest\naa_manifest['attrValues'][0] = Manifest()\n\n\n# Key Algorithm Attribute\n\nid_kma_keyAlgorithm = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.1')\n\n\nclass KeyAlgorithm(univ.Sequence):\n    pass\n\nKeyAlgorithm.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyAlg', univ.ObjectIdentifier()),\n    namedtype.OptionalNamedType('checkWordAlg', univ.ObjectIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('crcAlg', univ.ObjectIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\naa_keyAlgorithm = Attribute()\naa_keyAlgorithm['attrType'] = id_kma_keyAlgorithm\naa_keyAlgorithm['attrValues'][0] = KeyAlgorithm()\n\n\n# User Certificate Attribute\n\nid_at_userCertificate = univ.ObjectIdentifier('2.5.4.36')\n\n\naa_userCertificate = Attribute()\naa_userCertificate['attrType'] = id_at_userCertificate\naa_userCertificate['attrValues'][0] =  Certificate()\n\n\n# Key Package Receivers Attribute\n\nid_kma_keyPkgReceiversV2 = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.16')\n\n\nclass KeyPkgReceiver(univ.Choice):\n    pass\n\nKeyPkgReceiver.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('sirEntity', SIREntityName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('community', CommunityIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass KeyPkgReceiversV2(univ.SequenceOf):\n    pass\n\nKeyPkgReceiversV2.componentType = KeyPkgReceiver()\nKeyPkgReceiversV2.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\naa_keyPackageReceivers_v2 = Attribute()\naa_keyPackageReceivers_v2['attrType'] = id_kma_keyPkgReceiversV2\naa_keyPackageReceivers_v2['attrValues'][0] = KeyPkgReceiversV2()\n\n\n# TSEC Nomenclature Attribute\n\nid_kma_TSECNomenclature = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.3')\n\n\nclass CharEdition(char.PrintableString):\n    pass\n\n\nclass CharEditionRange(univ.Sequence):\n    pass\n\nCharEditionRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('firstCharEdition', CharEdition()),\n    namedtype.NamedType('lastCharEdition', CharEdition())\n)\n\n\nclass NumEdition(univ.Integer):\n    pass\n\nNumEdition.subtypeSpec = constraint.ValueRangeConstraint(0, 308915776)\n\n\nclass NumEditionRange(univ.Sequence):\n    pass\n\nNumEditionRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('firstNumEdition', NumEdition()),\n    namedtype.NamedType('lastNumEdition', NumEdition())\n)\n\n\nclass EditionID(univ.Choice):\n    pass\n\nEditionID.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('char', univ.Choice(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('charEdition', CharEdition().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('charEditionRange', CharEditionRange().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n    ))\n    ),\n    namedtype.NamedType('num', univ.Choice(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('numEdition', NumEdition().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.NamedType('numEditionRange', NumEditionRange().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4)))\n    ))\n    )\n)\n\n\nclass Register(univ.Integer):\n    pass\n\nRegister.subtypeSpec = constraint.ValueRangeConstraint(0, 2147483647)\n\n\nclass RegisterRange(univ.Sequence):\n    pass\n\nRegisterRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('firstRegister', Register()),\n    namedtype.NamedType('lastRegister', Register())\n)\n\n\nclass RegisterID(univ.Choice):\n    pass\n\nRegisterID.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('register', Register().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))),\n    namedtype.NamedType('registerRange', RegisterRange().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6)))\n)\n\n\nclass SegmentNumber(univ.Integer):\n    pass\n\nSegmentNumber.subtypeSpec = constraint.ValueRangeConstraint(1, 127)\n\n\nclass SegmentRange(univ.Sequence):\n    pass\n\nSegmentRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('firstSegment', SegmentNumber()),\n    namedtype.NamedType('lastSegment', SegmentNumber())\n)\n\n\nclass SegmentID(univ.Choice):\n    pass\n\nSegmentID.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('segmentNumber', SegmentNumber().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n    namedtype.NamedType('segmentRange', SegmentRange().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8)))\n)\n\n\nclass TSECNomenclature(univ.Sequence):\n    pass\n\nTSECNomenclature.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('shortTitle', ShortTitle()),\n    namedtype.OptionalNamedType('editionID', EditionID()),\n    namedtype.OptionalNamedType('registerID', RegisterID()),\n    namedtype.OptionalNamedType('segmentID', SegmentID())\n)\n\n\naa_tsecNomenclature = Attribute()\naa_tsecNomenclature['attrType'] = id_kma_TSECNomenclature\naa_tsecNomenclature['attrValues'][0] = TSECNomenclature()\n\n\n# Key Purpose Attribute\n\nid_kma_keyPurpose = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.13')\n\n\nclass KeyPurpose(univ.Enumerated):\n    pass\n\nKeyPurpose.namedValues = namedval.NamedValues(\n    ('n-a', 0),\n    ('a', 65),\n    ('b', 66),\n    ('l', 76),\n    ('m', 77),\n    ('r', 82),\n    ('s', 83),\n    ('t', 84),\n    ('v', 86),\n    ('x', 88),\n    ('z', 90)\n)\n\n\naa_keyPurpose = Attribute()\naa_keyPurpose['attrType'] = id_kma_keyPurpose\naa_keyPurpose['attrValues'][0] = KeyPurpose()\n\n\n# Key Use Attribute\n\nid_kma_keyUse = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.14')\n\n\nclass KeyUse(univ.Enumerated):\n    pass\n\nKeyUse.namedValues = namedval.NamedValues(\n    ('n-a', 0),\n    ('ffk', 1),\n    ('kek', 2),\n    ('kpk', 3),\n    ('msk', 4),\n    ('qkek', 5),\n    ('tek', 6),\n    ('tsk', 7),\n    ('trkek', 8),\n    ('nfk', 9),\n    ('effk', 10),\n    ('ebfk', 11),\n    ('aek', 12),\n    ('wod', 13),\n    ('kesk', 246),\n    ('eik', 247),\n    ('ask', 248),\n    ('kmk', 249),\n    ('rsk', 250),\n    ('csk', 251),\n    ('sak', 252),\n    ('rgk', 253),\n    ('cek', 254),\n    ('exk', 255)\n)\n\n\naa_keyUse = Attribute()\naa_keyPurpose['attrType'] = id_kma_keyUse\naa_keyPurpose['attrValues'][0] = KeyUse()\n\n\n# Transport Key Attribute\n\nid_kma_transportKey = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.15')\n\n\nclass TransOp(univ.Enumerated):\n    pass\n\nTransOp.namedValues = namedval.NamedValues(\n    ('transport', 1),\n    ('operational', 2)\n)\n\n\naa_transportKey = Attribute()\naa_transportKey['attrType'] = id_kma_transportKey\naa_transportKey['attrValues'][0] = TransOp()\n\n\n# Key Distribution Period Attribute\n\nid_kma_keyDistPeriod = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.5')\n\n\nclass KeyDistPeriod(univ.Sequence):\n    pass\n\nKeyDistPeriod.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('doNotDistBefore', BinaryTime().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('doNotDistAfter', BinaryTime())\n)\n\n\naa_keyDistributionPeriod = Attribute()\naa_keyDistributionPeriod['attrType'] = id_kma_keyDistPeriod\naa_keyDistributionPeriod['attrValues'][0] = KeyDistPeriod()\n\n\n# Key Validity Period Attribute\n\nid_kma_keyValidityPeriod = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.6')\n\n\nclass KeyValidityPeriod(univ.Sequence):\n    pass\n\nKeyValidityPeriod.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('doNotUseBefore', BinaryTime()),\n    namedtype.OptionalNamedType('doNotUseAfter', BinaryTime())\n)\n\n\naa_keyValidityPeriod = Attribute()\naa_keyValidityPeriod['attrType'] = id_kma_keyValidityPeriod\naa_keyValidityPeriod['attrValues'][0] = KeyValidityPeriod()\n\n\n# Key Duration Attribute\n\nid_kma_keyDuration = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.7')\n\n\nub_KeyDuration_months = univ.Integer(72)\n\nub_KeyDuration_hours = univ.Integer(96)\n\nub_KeyDuration_days = univ.Integer(732)\n\nub_KeyDuration_weeks = univ.Integer(104)\n\nub_KeyDuration_years = univ.Integer(100)\n\n\nclass KeyDuration(univ.Choice):\n    pass\n\nKeyDuration.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hours', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(1, ub_KeyDuration_hours)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('days', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(1, ub_KeyDuration_days))),\n    namedtype.NamedType('weeks', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(1, ub_KeyDuration_weeks)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('months', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(1, ub_KeyDuration_months)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('years', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(1, ub_KeyDuration_years)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\n\naa_keyDurationPeriod = Attribute()\naa_keyDurationPeriod['attrType'] = id_kma_keyDuration\naa_keyDurationPeriod['attrValues'][0] = KeyDuration()\n\n\n# Classification Attribute\n\nid_aa_KP_classification = univ.ObjectIdentifier(id_aa_securityLabel)\n\n\nid_enumeratedPermissiveAttributes = univ.ObjectIdentifier('2.16.840.1.101.2.1.8.3.1')\n\nid_enumeratedRestrictiveAttributes = univ.ObjectIdentifier('2.16.840.1.101.2.1.8.3.4')\n\nid_informativeAttributes = univ.ObjectIdentifier('2.16.840.1.101.2.1.8.3.3')\n\n\nclass SecurityAttribute(univ.Integer):\n    pass\n\nSecurityAttribute.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass EnumeratedTag(univ.Sequence):\n    pass\n\nEnumeratedTag.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tagName', univ.ObjectIdentifier()),\n    namedtype.NamedType('attributeList', univ.SetOf(componentType=SecurityAttribute()))\n)\n\n\nclass FreeFormField(univ.Choice):\n    pass\n\nFreeFormField.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bitSetAttributes', univ.BitString()), # Not permitted in RFC 7906\n    namedtype.NamedType('securityAttributes', univ.SetOf(componentType=SecurityAttribute()))\n)\n\n\nclass InformativeTag(univ.Sequence):\n    pass\n\nInformativeTag.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tagName', univ.ObjectIdentifier()),\n    namedtype.NamedType('attributes', FreeFormField())\n)\n\n\nclass Classification(ESSSecurityLabel):\n    pass\n\n\naa_classification = Attribute()\naa_classification['attrType'] = id_aa_KP_classification\naa_classification['attrValues'][0] = Classification()\n\n\n# Split Identifier Attribute\n\nid_kma_splitID = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.11')\n\n\nclass SplitID(univ.Sequence):\n    pass\n\nSplitID.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('half', univ.Enumerated(\n        namedValues=namedval.NamedValues(('a', 0), ('b', 1)))),\n    namedtype.OptionalNamedType('combineAlg', AlgorithmIdentifier())\n)\n\n\naa_splitIdentifier = Attribute()\naa_splitIdentifier['attrType'] = id_kma_splitID\naa_splitIdentifier['attrValues'][0] = SplitID()\n\n\n# Key Package Type Attribute\n\nid_kma_keyPkgType = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.12')\n\n\nclass KeyPkgType(univ.ObjectIdentifier):\n    pass\n\n\naa_keyPackageType = Attribute()\naa_keyPackageType['attrType'] = id_kma_keyPkgType\naa_keyPackageType['attrValues'][0] = KeyPkgType()\n\n\n# Signature Usage Attribute\n\nid_kma_sigUsageV3 = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.22')\n\n\nclass SignatureUsage(CMSContentConstraints):\n    pass\n\n\naa_signatureUsage_v3 = Attribute()\naa_signatureUsage_v3['attrType'] = id_kma_sigUsageV3\naa_signatureUsage_v3['attrValues'][0] = SignatureUsage()\n\n\n# Other Certificate Format Attribute\n\nid_kma_otherCertFormats = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.19')\n\n\naa_otherCertificateFormats = Attribute()\naa_signatureUsage_v3['attrType'] = id_kma_otherCertFormats\naa_signatureUsage_v3['attrValues'][0] = CertificateChoices()\n\n\n# PKI Path Attribute\n\nid_at_pkiPath = univ.ObjectIdentifier('2.5.4.70')\n\n\nclass PkiPath(univ.SequenceOf):\n    pass\n\nPkiPath.componentType = Certificate()\nPkiPath.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\naa_pkiPath = Attribute()\naa_pkiPath['attrType'] = id_at_pkiPath\naa_pkiPath['attrValues'][0] = PkiPath()\n\n\n# Useful Certificates Attribute\n\nid_kma_usefulCerts = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.20')\n\n\naa_usefulCertificates = Attribute()\naa_usefulCertificates['attrType'] = id_kma_usefulCerts\naa_usefulCertificates['attrValues'][0] = CertificateSet()\n\n\n# Key Wrap Attribute\n\nid_kma_keyWrapAlgorithm = univ.ObjectIdentifier('2.16.840.1.101.2.1.13.21')\n\n\naa_keyWrapAlgorithm  = Attribute()\naa_keyWrapAlgorithm['attrType'] = id_kma_keyWrapAlgorithm\naa_keyWrapAlgorithm['attrValues'][0] = AlgorithmIdentifier()\n\n\n# Content Decryption Key Identifier Attribute\n\nid_aa_KP_contentDecryptKeyID = univ.ObjectIdentifier('2.16.840.1.101.2.1.5.66')\n\n\nclass ContentDecryptKeyID(univ.OctetString):\n    pass\n\n\naa_contentDecryptKeyIdentifier = Attribute()\naa_contentDecryptKeyIdentifier['attrType'] = id_aa_KP_contentDecryptKeyID\naa_contentDecryptKeyIdentifier['attrValues'][0] = ContentDecryptKeyID()\n\n\n# Certificate Pointers Attribute\n\naa_certificatePointers = Attribute()\naa_certificatePointers['attrType'] = id_pe_subjectInfoAccess\naa_certificatePointers['attrValues'][0] = SubjectInfoAccessSyntax()\n\n\n# CRL Pointers Attribute\n\nid_aa_KP_crlPointers = univ.ObjectIdentifier('2.16.840.1.101.2.1.5.70')\n\n\naa_cRLDistributionPoints = Attribute()\naa_cRLDistributionPoints['attrType'] = id_aa_KP_crlPointers\naa_cRLDistributionPoints['attrValues'][0] = GeneralNames()\n\n\n# Extended Error Codes\n\nid_errorCodes = univ.ObjectIdentifier('2.16.840.1.101.2.1.22')\n\nid_missingKeyType = univ.ObjectIdentifier('2.16.840.1.101.2.1.22.1')\n\nid_privacyMarkTooLong = univ.ObjectIdentifier('2.16.840.1.101.2.1.22.2')\n\nid_unrecognizedSecurityPolicy = univ.ObjectIdentifier('2.16.840.1.101.2.1.22.3')\n\n\n# Map of Attribute Type OIDs to Attributes added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_contentHint: ContentHints(),\n    id_aa_communityIdentifiers: CommunityIdentifiers(),\n    id_aa_binarySigningTime: BinarySigningTime(),\n    id_contentType: ContentType(),\n    id_messageDigest: MessageDigest(),\n    id_aa_KP_keyPkgIdAndReceiptReq: KeyPkgIdentifierAndReceiptReq(),\n    id_aa_KP_keyProvinceV2: KeyProvinceV2(),\n    id_aa_KP_manifest: Manifest(),\n    id_kma_keyAlgorithm: KeyAlgorithm(),\n    id_at_userCertificate: Certificate(),\n    id_kma_keyPkgReceiversV2: KeyPkgReceiversV2(),\n    id_kma_TSECNomenclature: TSECNomenclature(),\n    id_kma_keyPurpose: KeyPurpose(),\n    id_kma_keyUse: KeyUse(),\n    id_kma_transportKey: TransOp(),\n    id_kma_keyDistPeriod: KeyDistPeriod(),\n    id_kma_keyValidityPeriod: KeyValidityPeriod(),\n    id_kma_keyDuration: KeyDuration(),\n    id_aa_KP_classification: Classification(),\n    id_kma_splitID: SplitID(),\n    id_kma_keyPkgType: KeyPkgType(),\n    id_kma_sigUsageV3: SignatureUsage(),\n    id_kma_otherCertFormats: CertificateChoices(),\n    id_at_pkiPath: PkiPath(),\n    id_kma_usefulCerts: CertificateSet(),\n    id_kma_keyWrapAlgorithm: AlgorithmIdentifier(),\n    id_aa_KP_contentDecryptKeyID: ContentDecryptKeyID(),\n    id_pe_subjectInfoAccess: SubjectInfoAccessSyntax(),\n    id_aa_KP_crlPointers: GeneralNames(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc7633.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with some assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Transport Layer Security (TLS) Feature Certificate Extension\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7633.txt\n#\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# TLS Features Extension\n\nid_pe = univ.ObjectIdentifier('1.3.6.1.5.5.7.1')\n\nid_pe_tlsfeature = id_pe + (24, )\n\n\nclass Features(univ.SequenceOf):\n    componentType = univ.Integer()\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_tlsfeature: Features(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc5917.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Clearance Sponsor Attribute\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5917.txt\n# https://www.rfc-editor.org/errata/eid4558\n# https://www.rfc-editor.org/errata/eid5883\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# DirectoryString is the same as RFC 5280, except for two things:\n#   1. the length is limited to 64;\n#   2. only the 'utf8String' choice remains because the ASN.1\n#      specification says: ( WITH COMPONENTS { utf8String PRESENT } )\n\nclass DirectoryString(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('utf8String', char.UTF8String().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, 64))),\n    )\n\n\n# Clearance Sponsor Attribute\n\nid_clearanceSponsor = univ.ObjectIdentifier((2, 16, 840, 1, 101, 2, 1, 5, 68))\n\nub_clearance_sponsor = univ.Integer(64)\n\n\nat_clearanceSponsor = rfc5280.Attribute()\nat_clearanceSponsor['type'] = id_clearanceSponsor\nat_clearanceSponsor['values'][0] = DirectoryString()\n\n\n# Add to the map of Attribute Type OIDs to Attributes in rfc5280.py.\n\n_certificateAttributesMapUpdate = {\n    id_clearanceSponsor: DirectoryString(),\n}\n\nrfc5280.certificateAttributesMap.update(_certificateAttributesMapUpdate)\n", "pyasn1_modules/rfc3370.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Cryptographic Message Syntax (CMS) Algorithms\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3370.txt\n#\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc3279\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5751\nfrom pyasn1_modules import rfc5753\nfrom pyasn1_modules import rfc5990\nfrom pyasn1_modules import rfc8018\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\n\n# Imports from RFC 3279\n\ndhpublicnumber = rfc3279.dhpublicnumber\n\ndh_public_number = dhpublicnumber\n\nDHPublicKey = rfc3279.DHPublicKey\n\nDomainParameters = rfc3279.DomainParameters\n\nDHDomainParameters = DomainParameters\n\nDss_Parms = rfc3279.Dss_Parms\n\nDss_Sig_Value = rfc3279.Dss_Sig_Value\n\nmd5 = rfc3279.md5\n\nmd5WithRSAEncryption = rfc3279.md5WithRSAEncryption\n\nRSAPublicKey = rfc3279.RSAPublicKey\n\nrsaEncryption = rfc3279.rsaEncryption\n\nValidationParms = rfc3279.ValidationParms\n\nid_dsa = rfc3279.id_dsa\n\nid_dsa_with_sha1 = rfc3279.id_dsa_with_sha1\n\nid_sha1 = rfc3279.id_sha1\n\nsha_1 = id_sha1\n\nsha1WithRSAEncryption = rfc3279.sha1WithRSAEncryption\n\n\n# Imports from RFC 5753\n\nCBCParameter = rfc5753.CBCParameter\n\nCBCParameter = rfc5753.IV\n\nKeyWrapAlgorithm = rfc5753.KeyWrapAlgorithm\n\n\n# Imports from RFC 5990\n\nid_alg_CMS3DESwrap = rfc5990.id_alg_CMS3DESwrap\n\n\n# Imports from RFC 8018\n\ndes_EDE3_CBC = rfc8018.des_EDE3_CBC\n\ndes_ede3_cbc = des_EDE3_CBC\n\nrc2CBC = rfc8018.rc2CBC\n\nrc2_cbc = rc2CBC\n\nRC2_CBC_Parameter = rfc8018.RC2_CBC_Parameter\n\nRC2CBCParameter = RC2_CBC_Parameter\n\nPBKDF2_params = rfc8018.PBKDF2_params\n\nid_PBKDF2 = rfc8018.id_PBKDF2\n\n\n# The few things that are not already defined elsewhere\n\nhMAC_SHA1 = univ.ObjectIdentifier('1.3.6.1.5.5.8.1.2')\n\n\nid_alg_ESDH = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.5')\n\n\nid_alg_SSDH = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.10')\n\n\nid_alg_CMSRC2wrap = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.7')\n\n\nclass RC2ParameterVersion(univ.Integer):\n    pass\n\n\nclass RC2wrapParameter(RC2ParameterVersion):\n    pass\n\n\nclass Dss_Pub_Key(univ.Integer):\n    pass\n\n\n# Update the Algorithm Identifier map in rfc5280.py.\n\n_algorithmIdentifierMapUpdate = {\n    hMAC_SHA1: univ.Null(\"\"),\n    id_alg_CMSRC2wrap: RC2wrapParameter(),\n    id_alg_ESDH: KeyWrapAlgorithm(),\n    id_alg_SSDH: KeyWrapAlgorithm(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n\n\n# Update the S/MIME Capabilities map in rfc5751.py.\n\n_smimeCapabilityMapUpdate = {\n    id_alg_CMSRC2wrap: RC2wrapParameter(),\n    id_alg_ESDH: KeyWrapAlgorithm(),\n    id_alg_SSDH: KeyWrapAlgorithm(),\n}\n\nrfc5751.smimeCapabilityMap.update(_smimeCapabilityMapUpdate)\n", "pyasn1_modules/rfc8494.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Multicast Email (MULE) over Allied Communications Publication 142\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8494.txt\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\n\nid_mmhs_CDT = univ.ObjectIdentifier('1.3.26.0.4406.0.4.2')\n\n\nclass AlgorithmID_ShortForm(univ.Integer):\n    pass\n\nAlgorithmID_ShortForm.namedValues = namedval.NamedValues(\n    ('zlibCompress', 0)\n)\n\n\nclass ContentType_ShortForm(univ.Integer):\n    pass\n\nContentType_ShortForm.namedValues = namedval.NamedValues(\n    ('unidentified', 0),\n    ('external', 1),\n    ('p1', 2),\n    ('p3', 3),\n    ('p7', 4),\n    ('mule', 25)\n)\n\n\nclass CompressedContentInfo(univ.Sequence):\n    pass\n\nCompressedContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('unnamed', univ.Choice(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('contentType-ShortForm',\n            ContentType_ShortForm().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('contentType-OID',\n            univ.ObjectIdentifier().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    ))),\n    namedtype.NamedType('compressedContent',\n        univ.OctetString().subtype(explicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass CompressionAlgorithmIdentifier(univ.Choice):\n    pass\n\nCompressionAlgorithmIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algorithmID-ShortForm',\n        AlgorithmID_ShortForm().subtype(explicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('algorithmID-OID',\n        univ.ObjectIdentifier().subtype(explicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass CompressedData(univ.Sequence):\n    pass\n\nCompressedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('compressionAlgorithm', CompressionAlgorithmIdentifier()),\n    namedtype.NamedType('compressedContentInfo', CompressedContentInfo())\n)\n", "pyasn1_modules/rfc1905.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SNMPv2c PDU syntax\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc1905.txt\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc1902\n\nmax_bindings = rfc1902.Integer(2147483647)\n\n\nclass _BindValue(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('value', rfc1902.ObjectSyntax()),\n        namedtype.NamedType('unSpecified', univ.Null()),\n        namedtype.NamedType('noSuchObject',\n                            univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('noSuchInstance',\n                            univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('endOfMibView',\n                            univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass VarBind(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('name', rfc1902.ObjectName()),\n        namedtype.NamedType('', _BindValue())\n    )\n\n\nclass VarBindList(univ.SequenceOf):\n    componentType = VarBind()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(\n        0, max_bindings\n    )\n\n\nclass PDU(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('request-id', rfc1902.Integer32()),\n        namedtype.NamedType('error-status', univ.Integer(\n            namedValues=namedval.NamedValues(('noError', 0), ('tooBig', 1), ('noSuchName', 2), ('badValue', 3),\n                                             ('readOnly', 4), ('genErr', 5), ('noAccess', 6), ('wrongType', 7),\n                                             ('wrongLength', 8), ('wrongEncoding', 9), ('wrongValue', 10),\n                                             ('noCreation', 11), ('inconsistentValue', 12), ('resourceUnavailable', 13),\n                                             ('commitFailed', 14), ('undoFailed', 15), ('authorizationError', 16),\n                                             ('notWritable', 17), ('inconsistentName', 18)))),\n        namedtype.NamedType('error-index',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, max_bindings))),\n        namedtype.NamedType('variable-bindings', VarBindList())\n    )\n\n\nclass BulkPDU(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('request-id', rfc1902.Integer32()),\n        namedtype.NamedType('non-repeaters',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, max_bindings))),\n        namedtype.NamedType('max-repetitions',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, max_bindings))),\n        namedtype.NamedType('variable-bindings', VarBindList())\n    )\n\n\nclass GetRequestPDU(PDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)\n    )\n\n\nclass GetNextRequestPDU(PDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)\n    )\n\n\nclass ResponsePDU(PDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)\n    )\n\n\nclass SetRequestPDU(PDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)\n    )\n\n\nclass GetBulkRequestPDU(BulkPDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5)\n    )\n\n\nclass InformRequestPDU(PDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6)\n    )\n\n\nclass SNMPv2TrapPDU(PDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 7)\n    )\n\n\nclass ReportPDU(PDU):\n    tagSet = PDU.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8)\n    )\n\n\nclass PDUs(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('get-request', GetRequestPDU()),\n        namedtype.NamedType('get-next-request', GetNextRequestPDU()),\n        namedtype.NamedType('get-bulk-request', GetBulkRequestPDU()),\n        namedtype.NamedType('response', ResponsePDU()),\n        namedtype.NamedType('set-request', SetRequestPDU()),\n        namedtype.NamedType('inform-request', InformRequestPDU()),\n        namedtype.NamedType('snmpV2-trap', SNMPv2TrapPDU()),\n        namedtype.NamedType('report', ReportPDU())\n    )\n", "pyasn1_modules/rfc3058.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# IDEA Encryption Algorithm in CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3058.txt\n# https://www.rfc-editor.org/errata/eid5913\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nid_IDEA_CBC = univ.ObjectIdentifier('1.3.6.1.4.1.188.7.1.1.2')\n\n           \nid_alg_CMSIDEAwrap = univ.ObjectIdentifier('1.3.6.1.4.1.188.7.1.1.6')\n\n\nclass IDEA_CBCPar(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('iv', univ.OctetString())\n        # exactly 8 octets, when present\n    )\n\n\n# Update the Algorithm Identifier map in rfc5280.py.\n\n_algorithmIdentifierMapUpdate = {\n    id_IDEA_CBC: IDEA_CBCPar(),\n    id_alg_CMSIDEAwrap: univ.Null(\"\")\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc2251.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# LDAP message syntax\n#\n# ASN.1 source from:\n# http://www.trl.ibm.com/projects/xml/xss4j/data/asn1/grammars/ldap.asn\n#\n# Sample captures from:\n# http://wiki.wireshark.org/SampleCaptures/\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nmaxInt = univ.Integer(2147483647)\n\n\nclass LDAPString(univ.OctetString):\n    pass\n\n\nclass LDAPOID(univ.OctetString):\n    pass\n\n\nclass LDAPDN(LDAPString):\n    pass\n\n\nclass RelativeLDAPDN(LDAPString):\n    pass\n\n\nclass AttributeType(LDAPString):\n    pass\n\n\nclass AttributeDescription(LDAPString):\n    pass\n\n\nclass AttributeDescriptionList(univ.SequenceOf):\n    componentType = AttributeDescription()\n\n\nclass AttributeValue(univ.OctetString):\n    pass\n\n\nclass AssertionValue(univ.OctetString):\n    pass\n\n\nclass AttributeValueAssertion(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('attributeDesc', AttributeDescription()),\n        namedtype.NamedType('assertionValue', AssertionValue())\n    )\n\n\nclass Attribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeDescription()),\n        namedtype.NamedType('vals', univ.SetOf(componentType=AttributeValue()))\n    )\n\n\nclass MatchingRuleId(LDAPString):\n    pass\n\n\nclass Control(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('controlType', LDAPOID()),\n        namedtype.DefaultedNamedType('criticality', univ.Boolean('False')),\n        namedtype.OptionalNamedType('controlValue', univ.OctetString())\n    )\n\n\nclass Controls(univ.SequenceOf):\n    componentType = Control()\n\n\nclass LDAPURL(LDAPString):\n    pass\n\n\nclass Referral(univ.SequenceOf):\n    componentType = LDAPURL()\n\n\nclass SaslCredentials(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('mechanism', LDAPString()),\n        namedtype.OptionalNamedType('credentials', univ.OctetString())\n    )\n\n\nclass AuthenticationChoice(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('simple', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('reserved-1', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('reserved-2', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.NamedType('sasl',\n                            SaslCredentials().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n    )\n\n\nclass BindRequest(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 0)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 127))),\n        namedtype.NamedType('name', LDAPDN()),\n        namedtype.NamedType('authentication', AuthenticationChoice())\n    )\n\n\nclass PartialAttributeList(univ.SequenceOf):\n    componentType = univ.Sequence(\n        componentType=namedtype.NamedTypes(\n            namedtype.NamedType('type', AttributeDescription()),\n            namedtype.NamedType('vals', univ.SetOf(componentType=AttributeValue()))\n        )\n    )\n\n\nclass SearchResultEntry(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 4)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('objectName', LDAPDN()),\n        namedtype.NamedType('attributes', PartialAttributeList())\n    )\n\n\nclass MatchingRuleAssertion(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('matchingRule', MatchingRuleId().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('type', AttributeDescription().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.NamedType('matchValue',\n                            AssertionValue().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.DefaultedNamedType('dnAttributes', univ.Boolean('False').subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))\n    )\n\n\nclass SubstringFilter(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeDescription()),\n        namedtype.NamedType('substrings',\n            univ.SequenceOf(\n                componentType=univ.Choice(\n                    componentType=namedtype.NamedTypes(\n                        namedtype.NamedType(\n                            'initial', LDAPString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))\n                        ),\n                        namedtype.NamedType(\n                            'any', LDAPString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))\n                        ),\n                        namedtype.NamedType(\n                            'final', LDAPString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))\n                        )\n                    )\n                )\n            )\n        )\n    )\n\n\n# Ugly hack to handle recursive Filter reference (up to 3-levels deep).\n\nclass Filter3(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('equalityMatch', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.NamedType('substrings', SubstringFilter().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n        namedtype.NamedType('greaterOrEqual', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n        namedtype.NamedType('lessOrEqual', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6))),\n        namedtype.NamedType('present', AttributeDescription().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n        namedtype.NamedType('approxMatch', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8))),\n        namedtype.NamedType('extensibleMatch', MatchingRuleAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 9)))\n    )\n\n\nclass Filter2(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('and', univ.SetOf(componentType=Filter3()).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('or', univ.SetOf(componentType=Filter3()).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.NamedType('not',\n                            Filter3().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.NamedType('equalityMatch', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.NamedType('substrings', SubstringFilter().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n        namedtype.NamedType('greaterOrEqual', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n        namedtype.NamedType('lessOrEqual', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6))),\n        namedtype.NamedType('present', AttributeDescription().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n        namedtype.NamedType('approxMatch', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8))),\n        namedtype.NamedType('extensibleMatch', MatchingRuleAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 9)))\n    )\n\n\nclass Filter(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('and', univ.SetOf(componentType=Filter2()).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('or', univ.SetOf(componentType=Filter2()).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.NamedType('not',\n                            Filter2().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.NamedType('equalityMatch', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.NamedType('substrings', SubstringFilter().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n        namedtype.NamedType('greaterOrEqual', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n        namedtype.NamedType('lessOrEqual', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6))),\n        namedtype.NamedType('present', AttributeDescription().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n        namedtype.NamedType('approxMatch', AttributeValueAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8))),\n        namedtype.NamedType('extensibleMatch', MatchingRuleAssertion().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 9)))\n    )\n\n\n# End of Filter hack\n\nclass SearchRequest(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 3)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('baseObject', LDAPDN()),\n        namedtype.NamedType('scope', univ.Enumerated(\n            namedValues=namedval.NamedValues(('baseObject', 0), ('singleLevel', 1), ('wholeSubtree', 2)))),\n        namedtype.NamedType('derefAliases', univ.Enumerated(\n            namedValues=namedval.NamedValues(('neverDerefAliases', 0), ('derefInSearching', 1),\n                                             ('derefFindingBaseObj', 2), ('derefAlways', 3)))),\n        namedtype.NamedType('sizeLimit',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, maxInt))),\n        namedtype.NamedType('timeLimit',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, maxInt))),\n        namedtype.NamedType('typesOnly', univ.Boolean()),\n        namedtype.NamedType('filter', Filter()),\n        namedtype.NamedType('attributes', AttributeDescriptionList())\n    )\n\n\nclass UnbindRequest(univ.Null):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 2)\n    )\n\n\nclass BindResponse(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('resultCode', univ.Enumerated(\n            namedValues=namedval.NamedValues(('success', 0), ('operationsError', 1), ('protocolError', 2),\n                                             ('timeLimitExceeded', 3), ('sizeLimitExceeded', 4), ('compareFalse', 5),\n                                             ('compareTrue', 6), ('authMethodNotSupported', 7),\n                                             ('strongAuthRequired', 8), ('reserved-9', 9), ('referral', 10),\n                                             ('adminLimitExceeded', 11), ('unavailableCriticalExtension', 12),\n                                             ('confidentialityRequired', 13), ('saslBindInProgress', 14),\n                                             ('noSuchAttribute', 16), ('undefinedAttributeType', 17),\n                                             ('inappropriateMatching', 18), ('constraintViolation', 19),\n                                             ('attributeOrValueExists', 20), ('invalidAttributeSyntax', 21),\n                                             ('noSuchObject', 32), ('aliasProblem', 33), ('invalidDNSyntax', 34),\n                                             ('reserved-35', 35), ('aliasDereferencingProblem', 36),\n                                             ('inappropriateAuthentication', 48), ('invalidCredentials', 49),\n                                             ('insufficientAccessRights', 50), ('busy', 51), ('unavailable', 52),\n                                             ('unwillingToPerform', 53), ('loopDetect', 54), ('namingViolation', 64),\n                                             ('objectClassViolation', 65), ('notAllowedOnNonLeaf', 66),\n                                             ('notAllowedOnRDN', 67), ('entryAlreadyExists', 68),\n                                             ('objectClassModsProhibited', 69), ('reserved-70', 70),\n                                             ('affectsMultipleDSAs', 71), ('other', 80), ('reserved-81', 81),\n                                             ('reserved-82', 82), ('reserved-83', 83), ('reserved-84', 84),\n                                             ('reserved-85', 85), ('reserved-86', 86), ('reserved-87', 87),\n                                             ('reserved-88', 88), ('reserved-89', 89), ('reserved-90', 90)))),\n        namedtype.NamedType('matchedDN', LDAPDN()),\n        namedtype.NamedType('errorMessage', LDAPString()),\n        namedtype.OptionalNamedType('referral', Referral().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.OptionalNamedType('serverSaslCreds', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 7)))\n    )\n\n\nclass LDAPResult(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('resultCode', univ.Enumerated(\n            namedValues=namedval.NamedValues(('success', 0), ('operationsError', 1), ('protocolError', 2),\n                                             ('timeLimitExceeded', 3), ('sizeLimitExceeded', 4), ('compareFalse', 5),\n                                             ('compareTrue', 6), ('authMethodNotSupported', 7),\n                                             ('strongAuthRequired', 8), ('reserved-9', 9), ('referral', 10),\n                                             ('adminLimitExceeded', 11), ('unavailableCriticalExtension', 12),\n                                             ('confidentialityRequired', 13), ('saslBindInProgress', 14),\n                                             ('noSuchAttribute', 16), ('undefinedAttributeType', 17),\n                                             ('inappropriateMatching', 18), ('constraintViolation', 19),\n                                             ('attributeOrValueExists', 20), ('invalidAttributeSyntax', 21),\n                                             ('noSuchObject', 32), ('aliasProblem', 33), ('invalidDNSyntax', 34),\n                                             ('reserved-35', 35), ('aliasDereferencingProblem', 36),\n                                             ('inappropriateAuthentication', 48), ('invalidCredentials', 49),\n                                             ('insufficientAccessRights', 50), ('busy', 51), ('unavailable', 52),\n                                             ('unwillingToPerform', 53), ('loopDetect', 54), ('namingViolation', 64),\n                                             ('objectClassViolation', 65), ('notAllowedOnNonLeaf', 66),\n                                             ('notAllowedOnRDN', 67), ('entryAlreadyExists', 68),\n                                             ('objectClassModsProhibited', 69), ('reserved-70', 70),\n                                             ('affectsMultipleDSAs', 71), ('other', 80), ('reserved-81', 81),\n                                             ('reserved-82', 82), ('reserved-83', 83), ('reserved-84', 84),\n                                             ('reserved-85', 85), ('reserved-86', 86), ('reserved-87', 87),\n                                             ('reserved-88', 88), ('reserved-89', 89), ('reserved-90', 90)))),\n        namedtype.NamedType('matchedDN', LDAPDN()),\n        namedtype.NamedType('errorMessage', LDAPString()),\n        namedtype.OptionalNamedType('referral', Referral().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)))\n    )\n\n\nclass SearchResultReference(univ.SequenceOf):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 19)\n    )\n    componentType = LDAPURL()\n\n\nclass SearchResultDone(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 5)\n    )\n\n\nclass AttributeTypeAndValues(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeDescription()),\n        namedtype.NamedType('vals', univ.SetOf(componentType=AttributeValue()))\n    )\n\n\nclass ModifyRequest(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 6)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('object', LDAPDN()),\n        namedtype.NamedType('modification',\n            univ.SequenceOf(\n                componentType=univ.Sequence(\n                    componentType=namedtype.NamedTypes(\n                        namedtype.NamedType(\n                            'operation', univ.Enumerated(namedValues=namedval.NamedValues(('add', 0), ('delete', 1), ('replace', 2)))\n                        ),\n                        namedtype.NamedType('modification', AttributeTypeAndValues())))\n            )\n        )\n    )\n\n\nclass ModifyResponse(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 7)\n    )\n\n\nclass AttributeList(univ.SequenceOf):\n    componentType = univ.Sequence(\n        componentType=namedtype.NamedTypes(\n           namedtype.NamedType('type', AttributeDescription()),\n           namedtype.NamedType('vals', univ.SetOf(componentType=AttributeValue()))\n        )\n    )\n\n\nclass AddRequest(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 8)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('entry', LDAPDN()),\n        namedtype.NamedType('attributes', AttributeList())\n    )\n\n\nclass AddResponse(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 9)\n    )\n\n\nclass DelRequest(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 10)\n    )\n\n\nclass DelResponse(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 11)\n    )\n\n\nclass ModifyDNRequest(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 12)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('entry', LDAPDN()),\n        namedtype.NamedType('newrdn', RelativeLDAPDN()),\n        namedtype.NamedType('deleteoldrdn', univ.Boolean()),\n        namedtype.OptionalNamedType('newSuperior',\n                                    LDAPDN().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n\n    )\n\n\nclass ModifyDNResponse(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 13)\n    )\n\n\nclass CompareRequest(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 14)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('entry', LDAPDN()),\n        namedtype.NamedType('ava', AttributeValueAssertion())\n    )\n\n\nclass CompareResponse(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 15)\n    )\n\n\nclass AbandonRequest(LDAPResult):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 16)\n    )\n\n\nclass ExtendedRequest(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 23)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('requestName',\n                            LDAPOID().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('requestValue', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass ExtendedResponse(univ.Sequence):\n    tagSet = univ.Sequence.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 24)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('resultCode', univ.Enumerated(\n            namedValues=namedval.NamedValues(('success', 0), ('operationsError', 1), ('protocolError', 2),\n                                             ('timeLimitExceeded', 3), ('sizeLimitExceeded', 4), ('compareFalse', 5),\n                                             ('compareTrue', 6), ('authMethodNotSupported', 7),\n                                             ('strongAuthRequired', 8), ('reserved-9', 9), ('referral', 10),\n                                             ('adminLimitExceeded', 11), ('unavailableCriticalExtension', 12),\n                                             ('confidentialityRequired', 13), ('saslBindInProgress', 14),\n                                             ('noSuchAttribute', 16), ('undefinedAttributeType', 17),\n                                             ('inappropriateMatching', 18), ('constraintViolation', 19),\n                                             ('attributeOrValueExists', 20), ('invalidAttributeSyntax', 21),\n                                             ('noSuchObject', 32), ('aliasProblem', 33), ('invalidDNSyntax', 34),\n                                             ('reserved-35', 35), ('aliasDereferencingProblem', 36),\n                                             ('inappropriateAuthentication', 48), ('invalidCredentials', 49),\n                                             ('insufficientAccessRights', 50), ('busy', 51), ('unavailable', 52),\n                                             ('unwillingToPerform', 53), ('loopDetect', 54), ('namingViolation', 64),\n                                             ('objectClassViolation', 65), ('notAllowedOnNonLeaf', 66),\n                                             ('notAllowedOnRDN', 67), ('entryAlreadyExists', 68),\n                                             ('objectClassModsProhibited', 69), ('reserved-70', 70),\n                                             ('affectsMultipleDSAs', 71), ('other', 80), ('reserved-81', 81),\n                                             ('reserved-82', 82), ('reserved-83', 83), ('reserved-84', 84),\n                                             ('reserved-85', 85), ('reserved-86', 86), ('reserved-87', 87),\n                                             ('reserved-88', 88), ('reserved-89', 89), ('reserved-90', 90)))),\n        namedtype.NamedType('matchedDN', LDAPDN()),\n        namedtype.NamedType('errorMessage', LDAPString()),\n        namedtype.OptionalNamedType('referral', Referral().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n\n        namedtype.OptionalNamedType('responseName', LDAPOID().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 10))),\n        namedtype.OptionalNamedType('response', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 11)))\n    )\n\n\nclass MessageID(univ.Integer):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, maxInt\n    )\n\n\nclass LDAPMessage(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('messageID', MessageID()),\n        namedtype.NamedType(\n            'protocolOp', univ.Choice(\n                componentType=namedtype.NamedTypes(\n                    namedtype.NamedType('bindRequest', BindRequest()),\n                    namedtype.NamedType('bindResponse', BindResponse()),\n                    namedtype.NamedType('unbindRequest', UnbindRequest()),\n                    namedtype.NamedType('searchRequest', SearchRequest()),\n                    namedtype.NamedType('searchResEntry', SearchResultEntry()),\n                    namedtype.NamedType('searchResDone', SearchResultDone()),\n                    namedtype.NamedType('searchResRef', SearchResultReference()),\n                    namedtype.NamedType('modifyRequest', ModifyRequest()),\n                    namedtype.NamedType('modifyResponse', ModifyResponse()),\n                    namedtype.NamedType('addRequest', AddRequest()),\n                    namedtype.NamedType('addResponse', AddResponse()),\n                    namedtype.NamedType('delRequest', DelRequest()),\n                    namedtype.NamedType('delResponse', DelResponse()),\n                    namedtype.NamedType('modDNRequest', ModifyDNRequest()),\n                    namedtype.NamedType('modDNResponse', ModifyDNResponse()),\n                    namedtype.NamedType('compareRequest', CompareRequest()),\n                    namedtype.NamedType('compareResponse', CompareResponse()),\n                    namedtype.NamedType('abandonRequest', AbandonRequest()),\n                    namedtype.NamedType('extendedReq', ExtendedRequest()),\n                    namedtype.NamedType('extendedResp', ExtendedResponse())\n                )\n            )\n        ),\n        namedtype.OptionalNamedType('controls', Controls().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n", "pyasn1_modules/rfc6482.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# RPKI Route Origin Authorizations (ROAs)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6482.txt\n# https://www.rfc-editor.org/errata/eid5881\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\nid_ct_routeOriginAuthz = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.24')\n\n\nclass ASID(univ.Integer):\n    pass\n\n\nclass IPAddress(univ.BitString):\n    pass\n\n\nclass ROAIPAddress(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('address', IPAddress()),\n        namedtype.OptionalNamedType('maxLength', univ.Integer())\n    )\n\n\nclass ROAIPAddressFamily(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('addressFamily',\n            univ.OctetString().subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(2, 3))),\n        namedtype.NamedType('addresses',\n            univ.SequenceOf(componentType=ROAIPAddress()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\nclass RouteOriginAttestation(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('version',\n            univ.Integer().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0)).subtype(value=0)),\n        namedtype.NamedType('asID', ASID()),\n        namedtype.NamedType('ipAddrBlocks',\n            univ.SequenceOf(componentType=ROAIPAddressFamily()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\n# Map of Content Type OIDs to Content Types added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_routeOriginAuthz: RouteOriginAttestation(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc5958.py": "#\n# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n# Modified by Russ Housley to add a map for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Asymmetric Key Packages, which is essentially version 2 of\n#   the PrivateKeyInfo structure in PKCS#8 in RFC 5208\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5958.txt\n\nfrom pyasn1.type import univ, constraint, namedtype, namedval, tag\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\n\nMAX = float('inf')\n\n\nclass KeyEncryptionAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass PrivateKeyAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedData(univ.OctetString):\n    pass\n\n\nclass EncryptedPrivateKeyInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('encryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n        namedtype.NamedType('encryptedData', EncryptedData())\n    )\n\n\nclass Version(univ.Integer):\n    namedValues = namedval.NamedValues(('v1', 0), ('v2', 1))\n\n\nclass PrivateKey(univ.OctetString):\n    pass\n\n\nclass Attributes(univ.SetOf):\n    componentType = rfc5652.Attribute()\n\n\nclass PublicKey(univ.BitString):\n   pass\n\n\n# OneAsymmetricKey is essentially version 2 of PrivateKeyInfo.\n# If publicKey is present, then the version must be v2;\n# otherwise, the version should be v1.\n\nclass OneAsymmetricKey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('privateKeyAlgorithm', PrivateKeyAlgorithmIdentifier()),\n        namedtype.NamedType('privateKey', PrivateKey()),\n        namedtype.OptionalNamedType('attributes', Attributes().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('publicKey', PublicKey().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass PrivateKeyInfo(OneAsymmetricKey):\n    pass\n\n\n# The CMS AsymmetricKeyPackage Content Type\n\nid_ct_KP_aKeyPackage = univ.ObjectIdentifier('2.16.840.1.101.2.1.2.78.5')\n\nclass AsymmetricKeyPackage(univ.SequenceOf):\n    pass\n\nAsymmetricKeyPackage.componentType = OneAsymmetricKey()\nAsymmetricKeyPackage.sizeSpec=constraint.ValueSizeConstraint(1, MAX)\n    \n\n# Map of Content Type OIDs to Content Types is added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_KP_aKeyPackage: AsymmetricKeyPackage(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc5913.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Authority Clearance Constraints Certificate Extension\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5913.txt\n# https://www.rfc-editor.org/errata/eid5890\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5755\n\nMAX = float('inf')\n\n\n# Authority Clearance Constraints Certificate Extension\n\nid_pe_clearanceConstraints = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.21')\n\nid_pe_authorityClearanceConstraints = id_pe_clearanceConstraints\n\n\nclass AuthorityClearanceConstraints(univ.SequenceOf):\n    componentType = rfc5755.Clearance()\n    subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_clearanceConstraints: AuthorityClearanceConstraints(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc3779.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# X.509 Extensions for IP Addresses and AS Identifiers\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3779.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# IP Address Delegation Extension\n\nid_pe_ipAddrBlocks = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.7')\n\n\nclass IPAddress(univ.BitString):\n    pass\n\n\nclass IPAddressRange(univ.Sequence):\n    pass\n\nIPAddressRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('min', IPAddress()),\n    namedtype.NamedType('max', IPAddress())\n)\n\n\nclass IPAddressOrRange(univ.Choice):\n    pass\n\nIPAddressOrRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('addressPrefix', IPAddress()),\n    namedtype.NamedType('addressRange', IPAddressRange())\n)\n\n\nclass IPAddressChoice(univ.Choice):\n    pass\n\nIPAddressChoice.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('inherit', univ.Null()),\n    namedtype.NamedType('addressesOrRanges', univ.SequenceOf(\n        componentType=IPAddressOrRange())\n    )\n)\n\n\nclass IPAddressFamily(univ.Sequence):\n    pass\n\nIPAddressFamily.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('addressFamily', univ.OctetString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(2, 3))),\n    namedtype.NamedType('ipAddressChoice', IPAddressChoice())\n)\n\n\nclass IPAddrBlocks(univ.SequenceOf):\n    pass\n\nIPAddrBlocks.componentType = IPAddressFamily()\n\n\n# Autonomous System Identifier Delegation Extension\n\nid_pe_autonomousSysIds = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.8')\n\n\nclass ASId(univ.Integer):\n    pass\n\n\nclass ASRange(univ.Sequence):\n    pass\n\nASRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('min', ASId()),\n    namedtype.NamedType('max', ASId())\n)\n\n\nclass ASIdOrRange(univ.Choice):\n    pass\n\nASIdOrRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('id', ASId()),\n    namedtype.NamedType('range', ASRange())\n)\n\n\nclass ASIdentifierChoice(univ.Choice):\n    pass\n\nASIdentifierChoice.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('inherit', univ.Null()),\n    namedtype.NamedType('asIdsOrRanges', univ.SequenceOf(\n        componentType=ASIdOrRange())\n    )\n)\n\n\nclass ASIdentifiers(univ.Sequence):\n    pass\n\nASIdentifiers.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('asnum', ASIdentifierChoice().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('rdi', ASIdentifierChoice().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatConstructed, 1)))\n)\n\n\n# Map of Certificate Extension OIDs to Extensions is added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_ipAddrBlocks: IPAddrBlocks(),\n    id_pe_autonomousSysIds: ASIdentifiers(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc6010.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Certificate Extension for CMS Content Constraints (CCC)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6010.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\nAttributeType = rfc5280.AttributeType\n\nAttributeValue = rfc5280.AttributeValue\n\n\nid_ct_anyContentType = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.0')\n\n\nclass AttrConstraint(univ.Sequence):\n    pass\n\nAttrConstraint.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', AttributeType()),\n    namedtype.NamedType('attrValues', univ.SetOf(\n        componentType=AttributeValue()).subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\nclass AttrConstraintList(univ.SequenceOf):\n    pass\n\nAttrConstraintList.componentType = AttrConstraint()\nAttrConstraintList.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass ContentTypeGeneration(univ.Enumerated):\n    pass\n\nContentTypeGeneration.namedValues = namedval.NamedValues(\n    ('canSource', 0),\n    ('cannotSource', 1)\n)\n\n\nclass ContentTypeConstraint(univ.Sequence):\n    pass\n\nContentTypeConstraint.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('contentType', univ.ObjectIdentifier()),\n    namedtype.DefaultedNamedType('canSource', ContentTypeGeneration().subtype(value='canSource')),\n    namedtype.OptionalNamedType('attrConstraints', AttrConstraintList())\n)\n\n\n# CMS Content Constraints (CCC) Extension and Object Identifier\n\nid_pe_cmsContentConstraints = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.18')\n\nclass CMSContentConstraints(univ.SequenceOf):\n    pass\n\nCMSContentConstraints.componentType = ContentTypeConstraint()\nCMSContentConstraints.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\n# Map of Certificate Extension OIDs to Extensions\n# To be added to the ones that are in rfc5280.py\n\n_certificateExtensionsMap = {\n    id_pe_cmsContentConstraints: CMSContentConstraints(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMap)\n", "pyasn1_modules/rfc4073.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with some assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add a map for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Protecting Multiple Contents with the CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4073.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\n# Content Collection Content Type and Object Identifier\n\nid_ct_contentCollection = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.19')\n\nclass ContentCollection(univ.SequenceOf):\n    pass\n\nContentCollection.componentType = rfc5652.ContentInfo()\nContentCollection.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\n# Content With Attributes Content Type and Object Identifier\n\nid_ct_contentWithAttrs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.20')\n\nclass ContentWithAttributes(univ.Sequence):\n    pass\n\nContentWithAttributes.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('content', rfc5652.ContentInfo()),\n    namedtype.NamedType('attrs', univ.SequenceOf(\n        componentType=rfc5652.Attribute()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\n# Map of Content Type OIDs to Content Types is added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_contentCollection: ContentCollection(),\n    id_ct_contentWithAttrs: ContentWithAttributes(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc3414.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SNMPv3 message syntax\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc3414.txt\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\n\nclass UsmSecurityParameters(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('msgAuthoritativeEngineID', univ.OctetString()),\n        namedtype.NamedType('msgAuthoritativeEngineBoots',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647))),\n        namedtype.NamedType('msgAuthoritativeEngineTime',\n                            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647))),\n        namedtype.NamedType('msgUserName',\n                            univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 32))),\n        namedtype.NamedType('msgAuthenticationParameters', univ.OctetString()),\n        namedtype.NamedType('msgPrivacyParameters', univ.OctetString())\n    )\n", "pyasn1_modules/rfc5035.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add a map for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Update to Enhanced Security Services for S/MIME\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5035.txt\n#\n\nfrom pyasn1.codec.der.encoder import encode as der_encode\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc2634\nfrom pyasn1_modules import rfc4055\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5280\n\nContentType = rfc5652.ContentType\n\nIssuerAndSerialNumber = rfc5652.IssuerAndSerialNumber\n\nSubjectKeyIdentifier = rfc5652.SubjectKeyIdentifier\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nPolicyInformation = rfc5280.PolicyInformation\n\nGeneralNames = rfc5280.GeneralNames\n\nCertificateSerialNumber = rfc5280.CertificateSerialNumber\n\n\n# Signing Certificate Attribute V1 and V2\n\nid_aa_signingCertificate = rfc2634.id_aa_signingCertificate\n\nid_aa_signingCertificateV2 = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.47')\n\nHash = rfc2634.Hash\n\nIssuerSerial = rfc2634.IssuerSerial\n\nESSCertID = rfc2634.ESSCertID\n\nSigningCertificate = rfc2634.SigningCertificate\n\n\nsha256AlgId = AlgorithmIdentifier()\nsha256AlgId['algorithm'] = rfc4055.id_sha256\n# A non-schema object for sha256AlgId['parameters'] as absent\nsha256AlgId['parameters'] = der_encode(univ.OctetString(''))\n\n\nclass ESSCertIDv2(univ.Sequence):\n    pass\n\nESSCertIDv2.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('hashAlgorithm', sha256AlgId),\n    namedtype.NamedType('certHash', Hash()),\n    namedtype.OptionalNamedType('issuerSerial', IssuerSerial())\n)\n\n\nclass SigningCertificateV2(univ.Sequence):\n    pass\n\nSigningCertificateV2.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certs', univ.SequenceOf(\n        componentType=ESSCertIDv2())),\n    namedtype.OptionalNamedType('policies', univ.SequenceOf(\n        componentType=PolicyInformation()))\n)\n\n\n# Mail List Expansion History Attribute\n\nid_aa_mlExpandHistory = rfc2634.id_aa_mlExpandHistory\n\nub_ml_expansion_history = rfc2634.ub_ml_expansion_history\n\nEntityIdentifier = rfc2634.EntityIdentifier\n\nMLReceiptPolicy = rfc2634.MLReceiptPolicy\n\nMLData = rfc2634.MLData\n\nMLExpansionHistory = rfc2634.MLExpansionHistory\n\n\n# ESS Security Label Attribute\n\nid_aa_securityLabel = rfc2634.id_aa_securityLabel\n\nub_privacy_mark_length = rfc2634.ub_privacy_mark_length\n\nub_security_categories = rfc2634.ub_security_categories\n\nub_integer_options = rfc2634.ub_integer_options\n\nESSPrivacyMark = rfc2634.ESSPrivacyMark\n\nSecurityClassification = rfc2634.SecurityClassification\n\nSecurityPolicyIdentifier = rfc2634.SecurityPolicyIdentifier\n\nSecurityCategory = rfc2634.SecurityCategory\n\nSecurityCategories = rfc2634.SecurityCategories\n\nESSSecurityLabel = rfc2634.ESSSecurityLabel\n\n\n# Equivalent Labels Attribute\n\nid_aa_equivalentLabels = rfc2634.id_aa_equivalentLabels\n\nEquivalentLabels = rfc2634.EquivalentLabels\n\n\n# Content Identifier Attribute\n\nid_aa_contentIdentifier = rfc2634.id_aa_contentIdentifier\n\nContentIdentifier = rfc2634.ContentIdentifier\n\n\n# Content Reference Attribute\n\nid_aa_contentReference = rfc2634.id_aa_contentReference\n\nContentReference = rfc2634.ContentReference\n\n\n# Message Signature Digest Attribute\n\nid_aa_msgSigDigest = rfc2634.id_aa_msgSigDigest\n\nMsgSigDigest = rfc2634.MsgSigDigest\n\n\n# Content Hints Attribute\n\nid_aa_contentHint = rfc2634.id_aa_contentHint\n\nContentHints = rfc2634.ContentHints\n\n\n# Receipt Request Attribute\n\nAllOrFirstTier = rfc2634.AllOrFirstTier\n\nReceiptsFrom = rfc2634.ReceiptsFrom\n\nid_aa_receiptRequest = rfc2634.id_aa_receiptRequest\n\nub_receiptsTo = rfc2634.ub_receiptsTo\n\nReceiptRequest = rfc2634.ReceiptRequest\n\n\n# Receipt Content Type\n\nESSVersion = rfc2634.ESSVersion\n\nid_ct_receipt = rfc2634.id_ct_receipt\n\nReceipt = rfc2634.Receipt\n\nub_receiptsTo = rfc2634.ub_receiptsTo\n\nReceiptRequest = rfc2634.ReceiptRequest\n\n\n# Map of Attribute Type to the Attribute structure is added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_signingCertificateV2: SigningCertificateV2(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n\n# Map of Content Type OIDs to Content Types is added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_receipt: Receipt(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc3114.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# TEST Company Classification Policies\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3114.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import namedval\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5755\n\n\nid_smime = univ.ObjectIdentifier((1, 2, 840, 113549, 1, 9, 16, ))\n\nid_tsp = id_smime + (7, )\n\nid_tsp_TEST_Amoco = id_tsp + (1, )\n\nclass Amoco_SecurityClassification(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('amoco-general', 6),\n        ('amoco-confidential', 7),\n        ('amoco-highly-confidential', 8)\n    )\n\n\nid_tsp_TEST_Caterpillar = id_tsp + (2, )\n\nclass Caterpillar_SecurityClassification(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('caterpillar-public', 6),\n        ('caterpillar-green', 7),\n        ('caterpillar-yellow', 8),\n        ('caterpillar-red', 9)\n    )\n\n\nid_tsp_TEST_Whirlpool = id_tsp + (3, )\n\nclass Whirlpool_SecurityClassification(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('whirlpool-public', 6),\n        ('whirlpool-internal', 7),\n        ('whirlpool-confidential', 8)\n    )\n\n\nid_tsp_TEST_Whirlpool_Categories = id_tsp + (4, )\n\nclass SecurityCategoryValues(univ.SequenceOf):\n    componentType = char.UTF8String()\n\n# Example SecurityCategoryValues: \"LAW DEPARTMENT USE ONLY\"\n# Example SecurityCategoryValues: \"HUMAN RESOURCES USE ONLY\"\n\n\n# Also, the privacy mark in the security label can contain a string,\n# such as: \"ATTORNEY-CLIENT PRIVILEGED INFORMATION\"\n\n\n# Map of security category type OIDs to security category added\n# to the ones that are in rfc5755.py\n\n_securityCategoryMapUpdate = {\n    id_tsp_TEST_Whirlpool_Categories: SecurityCategoryValues(),\n}\n\nrfc5755.securityCategoryMap.update(_securityCategoryMapUpdate)\n", "pyasn1_modules/rfc8479.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Storing Validation Parameters in PKCS#8\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8479.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\n\nid_attr_validation_parameters = univ.ObjectIdentifier('1.3.6.1.4.1.2312.18.8.1')\n\n\nclass ValidationParams(univ.Sequence):\n    pass\n\nValidationParams.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hashAlg', univ.ObjectIdentifier()),\n    namedtype.NamedType('seed', univ.OctetString())\n)\n\n\nat_validation_parameters = rfc5652.Attribute()\nat_validation_parameters['attrType'] = id_attr_validation_parameters\nat_validation_parameters['attrValues'][0] = ValidationParams()\n\n\n# Map of Attribute Type OIDs to Attributes added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_attr_validation_parameters: ValidationParams(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc2511.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# X.509 certificate Request Message Format (CRMF) syntax\n#\n# ASN.1 source from:\n# http://tools.ietf.org/html/rfc2511\n#\n# Sample captures could be obtained with OpenSSL\n#\nfrom pyasn1_modules import rfc2315\nfrom pyasn1_modules.rfc2459 import *\n\nMAX = float('inf')\n\nid_pkix = univ.ObjectIdentifier('1.3.6.1.5.5.7')\nid_pkip = univ.ObjectIdentifier('1.3.6.1.5.5.7.5')\nid_regCtrl = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.1')\nid_regCtrl_regToken = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.1.1')\nid_regCtrl_authenticator = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.1.2')\nid_regCtrl_pkiPublicationInfo = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.1.3')\nid_regCtrl_pkiArchiveOptions = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.1.4')\nid_regCtrl_oldCertID = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.1.5')\nid_regCtrl_protocolEncrKey = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.1.6')\nid_regInfo = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.2')\nid_regInfo_utf8Pairs = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.2.1')\nid_regInfo_certReq = univ.ObjectIdentifier('1.3.6.1.5.5.7.5.2.2')\n\n\n# This should be in PKIX Certificate Extensions module\n\nclass GeneralName(univ.OctetString):\n    pass\n\n\n# end of PKIX Certificate Extensions module\n\nclass UTF8Pairs(char.UTF8String):\n    pass\n\n\nclass ProtocolEncrKey(SubjectPublicKeyInfo):\n    pass\n\n\nclass CertId(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('issuer', GeneralName()),\n        namedtype.NamedType('serialNumber', univ.Integer())\n    )\n\n\nclass OldCertId(CertId):\n    pass\n\n\nclass KeyGenParameters(univ.OctetString):\n    pass\n\n\nclass EncryptedValue(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('intendedAlg', AlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('symmAlg', AlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('encSymmKey', univ.BitString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.OptionalNamedType('keyAlg', AlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.OptionalNamedType('valueHint', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n        namedtype.NamedType('encValue', univ.BitString())\n    )\n\n\nclass EncryptedKey(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('encryptedValue', EncryptedValue()),\n        namedtype.NamedType('envelopedData', rfc2315.EnvelopedData().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n\n\nclass PKIArchiveOptions(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('encryptedPrivKey', EncryptedKey().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('keyGenParameters', KeyGenParameters().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('archiveRemGenPrivKey',\n                            univ.Boolean().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass SinglePubInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('pubMethod', univ.Integer(\n            namedValues=namedval.NamedValues(('dontCare', 0), ('x500', 1), ('web', 2), ('ldap', 3)))),\n        namedtype.OptionalNamedType('pubLocation', GeneralName())\n    )\n\n\nclass PKIPublicationInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('action',\n                            univ.Integer(namedValues=namedval.NamedValues(('dontPublish', 0), ('pleasePublish', 1)))),\n        namedtype.OptionalNamedType('pubInfos', univ.SequenceOf(componentType=SinglePubInfo()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\nclass Authenticator(char.UTF8String):\n    pass\n\n\nclass RegToken(char.UTF8String):\n    pass\n\n\nclass SubsequentMessage(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('encrCert', 0),\n        ('challengeResp', 1)\n    )\n\n\nclass POPOPrivKey(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('thisMessage',\n                            univ.BitString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('subsequentMessage', SubsequentMessage().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('dhMAC',\n                            univ.BitString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass PBMParameter(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('salt', univ.OctetString()),\n        namedtype.NamedType('owf', AlgorithmIdentifier()),\n        namedtype.NamedType('iterationCount', univ.Integer()),\n        namedtype.NamedType('mac', AlgorithmIdentifier())\n    )\n\n\nclass PKMACValue(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('algId', AlgorithmIdentifier()),\n        namedtype.NamedType('value', univ.BitString())\n    )\n\n\nclass POPOSigningKeyInput(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType(\n            'authInfo', univ.Choice(\n                componentType=namedtype.NamedTypes(\n                    namedtype.NamedType(\n                        'sender', GeneralName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))\n                    ),\n                    namedtype.NamedType('publicKeyMAC', PKMACValue())\n                )\n            )\n        ),\n        namedtype.NamedType('publicKey', SubjectPublicKeyInfo())\n    )\n\n\nclass POPOSigningKey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('poposkInput', POPOSigningKeyInput().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('algorithmIdentifier', AlgorithmIdentifier()),\n        namedtype.NamedType('signature', univ.BitString())\n    )\n\n\nclass ProofOfPossession(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('raVerified',\n                            univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('signature', POPOSigningKey().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.NamedType('keyEncipherment', POPOPrivKey().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.NamedType('keyAgreement', POPOPrivKey().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)))\n    )\n\n\nclass Controls(univ.SequenceOf):\n    componentType = AttributeTypeAndValue()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass OptionalValidity(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('notBefore',\n                                    Time().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('notAfter',\n                                    Time().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass CertTemplate(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('version', Version().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('serialNumber', univ.Integer().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('signingAlg', AlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.OptionalNamedType('issuer', Name().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.OptionalNamedType('validity', OptionalValidity().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n        namedtype.OptionalNamedType('subject', Name().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n        namedtype.OptionalNamedType('publicKey', SubjectPublicKeyInfo().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6))),\n        namedtype.OptionalNamedType('issuerUID', UniqueIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n        namedtype.OptionalNamedType('subjectUID', UniqueIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 8))),\n        namedtype.OptionalNamedType('extensions', Extensions().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 9)))\n    )\n\n\nclass CertRequest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certReqId', univ.Integer()),\n        namedtype.NamedType('certTemplate', CertTemplate()),\n        namedtype.OptionalNamedType('controls', Controls())\n    )\n\n\nclass CertReq(CertRequest):\n    pass\n\n\nclass CertReqMsg(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certReq', CertRequest()),\n        namedtype.OptionalNamedType('pop', ProofOfPossession()),\n        namedtype.OptionalNamedType('regInfo', univ.SequenceOf(componentType=AttributeTypeAndValue()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\nclass CertReqMessages(univ.SequenceOf):\n    componentType = CertReqMsg()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n", "pyasn1_modules/rfc5636.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Traceable Anonymous Certificate\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5480.txt\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc5652\n\n\n# Imports from RFC 5652\n\nContentInfo = rfc5652.ContentInfo\n\nEncapsulatedContentInfo = rfc5652.EncapsulatedContentInfo\n\nid_data = rfc5652.id_data\n\n\n# Object Identifiers\n\nid_KISA = univ.ObjectIdentifier((1, 2, 410, 200004,))\n\n\nid_npki = id_KISA + (10,)\n\n\nid_attribute = id_npki + (1,)\n\n\nid_kisa_tac = id_attribute + (1,)\n\n\nid_kisa_tac_token = id_kisa_tac + (1,)\n\n\nid_kisa_tac_tokenandblindbash = id_kisa_tac + (2,)\n\n\nid_kisa_tac_tokenandpartially = id_kisa_tac + (3,)\n\n\n# Structures for Traceable Anonymous Certificate (TAC)\n\nclass UserKey(univ.OctetString):\n    pass\n\n\nclass Timeout(useful.GeneralizedTime):\n    pass\n\n\nclass BlinedCertificateHash(univ.OctetString):\n    pass\n\n\nclass PartiallySignedCertificateHash(univ.OctetString):\n    pass\n\n\nclass Token(ContentInfo):\n    pass\n\n\nclass TokenandBlindHash(ContentInfo):\n    pass\n\n\nclass TokenandPartiallySignedCertificateHash(ContentInfo):\n    pass\n\n\n# Added to the module in RFC 5636 for the CMS Content Type Map\n\nclass TACToken(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('userKey', UserKey()),\n        namedtype.NamedType('timeout', Timeout())\n    )\n\n\nclass TACTokenandBlindHash(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('token', Token()),\n        namedtype.NamedType('blinded', BlinedCertificateHash())\n    )\n\n\nclass TACTokenandPartiallySignedCertificateHash(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('token', Token()),\n        namedtype.NamedType('partially', PartiallySignedCertificateHash())\n    )\n\n\n# Add to the CMS Content Type Map in rfc5752.py\n\n_cmsContentTypesMapUpdate = {\n    id_kisa_tac_token: TACToken(),\n    id_kisa_tac_tokenandblindbash: TACTokenandBlindHash(),\n    id_kisa_tac_tokenandpartially: TACTokenandPartiallySignedCertificateHash(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc5751.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# S/MIME Version 3.2 Message Specification\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5751.txt\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc8018\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n    return univ.ObjectIdentifier(output)\n\n\n# Imports from RFC 5652 and RFC 8018\n\nIssuerAndSerialNumber = rfc5652.IssuerAndSerialNumber\n\nRecipientKeyIdentifier = rfc5652.RecipientKeyIdentifier\n\nSubjectKeyIdentifier = rfc5652.SubjectKeyIdentifier\n\nrc2CBC = rfc8018.rc2CBC\n\n\n# S/MIME Capabilities Attribute\n\nsmimeCapabilities = univ.ObjectIdentifier('1.2.840.113549.1.9.15')\n\n\nsmimeCapabilityMap = { }\n\n\nclass SMIMECapability(univ.Sequence):\n    pass\n\nSMIMECapability.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('capabilityID', univ.ObjectIdentifier()),\n    namedtype.OptionalNamedType('parameters', univ.Any(),\n        openType=opentype.OpenType('capabilityID', smimeCapabilityMap))\n)\n\n\nclass SMIMECapabilities(univ.SequenceOf):\n    pass\n\nSMIMECapabilities.componentType = SMIMECapability()\n\n\nclass SMIMECapabilitiesParametersForRC2CBC(univ.Integer):\n    # which carries the RC2 Key Length (number of bits)\n    pass\n\n\n# S/MIME Encryption Key Preference Attribute\n\nid_smime = univ.ObjectIdentifier('1.2.840.113549.1.9.16')\n\nid_aa = _OID(id_smime, 2)\n\nid_aa_encrypKeyPref = _OID(id_aa, 11)\n\n\nclass SMIMEEncryptionKeyPreference(univ.Choice):\n    pass\n\nSMIMEEncryptionKeyPreference.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber',\n        IssuerAndSerialNumber().subtype(implicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('receipentKeyId',\n        # Yes, 'receipentKeyId' is spelled incorrectly, but kept\n        # this way for alignment with the ASN.1 module in the RFC.\n        RecipientKeyIdentifier().subtype(implicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('subjectAltKeyIdentifier',\n        SubjectKeyIdentifier().subtype(implicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\n# The Prefer Binary Inside SMIMECapabilities attribute\n\nid_cap = _OID(id_smime, 11)\n\nid_cap_preferBinaryInside = _OID(id_cap, 1)\n\n\n# CMS Attribute Map\n\n_cmsAttributesMapUpdate = {\n    smimeCapabilities: SMIMECapabilities(),\n    id_aa_encrypKeyPref: SMIMEEncryptionKeyPreference(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n\n# SMIMECapabilities Attribute Map\n#\n# Do not include OIDs in the dictionary when the parameters are absent.\n\n_smimeCapabilityMapUpdate = {\n    rc2CBC: SMIMECapabilitiesParametersForRC2CBC(),\n}\n\nsmimeCapabilityMap.update(_smimeCapabilityMapUpdate)\n", "pyasn1_modules/rfc7292.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from the asn1ate tool.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS #12: Personal Information Exchange Syntax v1.1\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7292.txt\n# https://www.rfc-editor.org/errata_search.php?rfc=7292\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc2315\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5958\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\n# Initialize the maps used in PKCS#12\n\npkcs12BagTypeMap = { }\n\npkcs12CertBagMap = { }\n\npkcs12CRLBagMap = { }\n\npkcs12SecretBagMap = { }\n\n\n# Imports from RFC 2315, RFC 5652, and RFC 5958\n\nDigestInfo = rfc2315.DigestInfo\n\n\nContentInfo = rfc5652.ContentInfo\n\nPKCS12Attribute = rfc5652.Attribute\n\n\nEncryptedPrivateKeyInfo = rfc5958.EncryptedPrivateKeyInfo\n\nPrivateKeyInfo = rfc5958.PrivateKeyInfo\n\n\n# CMSSingleAttribute is the same as Attribute in RFC 5652 except the attrValues\n# SET must have one and only one member\n\nclass AttributeType(univ.ObjectIdentifier):\n    pass\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass AttributeValues(univ.SetOf):\n    pass\n\nAttributeValues.componentType = AttributeValue()\n\n\nclass CMSSingleAttribute(univ.Sequence):\n    pass\n\nCMSSingleAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', AttributeType()),\n    namedtype.NamedType('attrValues',\n        AttributeValues().subtype(sizeSpec=constraint.ValueSizeConstraint(1, 1)),\n        openType=opentype.OpenType('attrType', rfc5652.cmsAttributesMap)\n    )\n)\n\n\n# Object identifier arcs\n\nrsadsi = _OID(1, 2, 840, 113549)\n\npkcs = _OID(rsadsi, 1)\n\npkcs_9 = _OID(pkcs, 9)\n\ncertTypes = _OID(pkcs_9, 22)\n\ncrlTypes = _OID(pkcs_9, 23)\n\npkcs_12 = _OID(pkcs, 12)\n\n\n# PBE Algorithm Identifiers and Parameters Structure\n\npkcs_12PbeIds = _OID(pkcs_12, 1)\n\npbeWithSHAAnd128BitRC4 = _OID(pkcs_12PbeIds, 1)\n\npbeWithSHAAnd40BitRC4 = _OID(pkcs_12PbeIds, 2)\n\npbeWithSHAAnd3_KeyTripleDES_CBC = _OID(pkcs_12PbeIds, 3)\n\npbeWithSHAAnd2_KeyTripleDES_CBC = _OID(pkcs_12PbeIds, 4)\n\npbeWithSHAAnd128BitRC2_CBC = _OID(pkcs_12PbeIds, 5)\n\npbeWithSHAAnd40BitRC2_CBC = _OID(pkcs_12PbeIds, 6)\n\n\nclass Pkcs_12PbeParams(univ.Sequence):\n    pass\n\nPkcs_12PbeParams.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('salt', univ.OctetString()),\n    namedtype.NamedType('iterations', univ.Integer())\n)\n\n\n# Bag types\n\nbagtypes = _OID(pkcs_12, 10, 1)\n\nclass BAG_TYPE(univ.Sequence):\n    pass\n\nBAG_TYPE.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('id', univ.ObjectIdentifier()),\n    namedtype.NamedType('unnamed1', univ.Any(),\n        openType=opentype.OpenType('attrType', pkcs12BagTypeMap)\n    )\n)\n\n\nid_keyBag = _OID(bagtypes, 1)\n\nclass KeyBag(PrivateKeyInfo):\n    pass\n\n\nid_pkcs8ShroudedKeyBag = _OID(bagtypes, 2)\n\nclass PKCS8ShroudedKeyBag(EncryptedPrivateKeyInfo):\n    pass\n\n\nid_certBag = _OID(bagtypes, 3)\n\nclass CertBag(univ.Sequence):\n    pass\n\nCertBag.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certId', univ.ObjectIdentifier()),\n    namedtype.NamedType('certValue',\n        univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)),\n        openType=opentype.OpenType('certId', pkcs12CertBagMap)\n    )\n)\n\n\nx509Certificate = CertBag()\nx509Certificate['certId'] = _OID(certTypes, 1)\nx509Certificate['certValue'] = univ.OctetString()\n# DER-encoded X.509 certificate stored in OCTET STRING\n\n\nsdsiCertificate = CertBag()\nsdsiCertificate['certId'] = _OID(certTypes, 2)\nsdsiCertificate['certValue'] = char.IA5String()\n# Base64-encoded SDSI certificate stored in IA5String\n\n\nid_CRLBag = _OID(bagtypes, 4)\n\nclass CRLBag(univ.Sequence):\n    pass\n\nCRLBag.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('crlId', univ.ObjectIdentifier()),\n    namedtype.NamedType('crlValue',\n        univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)),\n                openType=opentype.OpenType('crlId', pkcs12CRLBagMap)\n    )\n)\n\n\nx509CRL = CRLBag()\nx509CRL['crlId'] = _OID(crlTypes, 1)\nx509CRL['crlValue'] = univ.OctetString()\n# DER-encoded X.509 CRL stored in OCTET STRING\n\n\nid_secretBag = _OID(bagtypes, 5)\n\nclass SecretBag(univ.Sequence):\n    pass\n\nSecretBag.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('secretTypeId', univ.ObjectIdentifier()),\n    namedtype.NamedType('secretValue',\n        univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)),\n        openType=opentype.OpenType('secretTypeId', pkcs12SecretBagMap)\n    )\n)\n\n\nid_safeContentsBag = _OID(bagtypes, 6)\n\nclass SafeBag(univ.Sequence):\n    pass\n\nSafeBag.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('bagId', univ.ObjectIdentifier()),\n    namedtype.NamedType('bagValue',\n        univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)),\n        openType=opentype.OpenType('bagId', pkcs12BagTypeMap)\n    ),\n    namedtype.OptionalNamedType('bagAttributes',\n        univ.SetOf(componentType=PKCS12Attribute())\n    )\n)\n\n\nclass SafeContents(univ.SequenceOf):\n    pass\n\nSafeContents.componentType = SafeBag()\n\n\n# The PFX PDU\n\nclass AuthenticatedSafe(univ.SequenceOf):\n    pass\n\nAuthenticatedSafe.componentType = ContentInfo()\n# Data if unencrypted\n# EncryptedData if password-encrypted\n# EnvelopedData if public key-encrypted\n\n\nclass MacData(univ.Sequence):\n    pass\n\nMacData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('mac', DigestInfo()),\n    namedtype.NamedType('macSalt', univ.OctetString()),\n    namedtype.DefaultedNamedType('iterations', univ.Integer().subtype(value=1))\n    # Note: The default is for historical reasons and its use is deprecated\n)\n\n\nclass PFX(univ.Sequence):\n    pass\n\nPFX.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version',\n        univ.Integer(namedValues=namedval.NamedValues(('v3', 3)))\n    ),\n    namedtype.NamedType('authSafe', ContentInfo()),\n    namedtype.OptionalNamedType('macData', MacData())\n)\n\n\n# Local key identifier (also defined as certificateAttribute in rfc2985.py)\n\npkcs_9_at_localKeyId = _OID(pkcs_9, 21)\n\nlocalKeyId = CMSSingleAttribute()\nlocalKeyId['attrType'] = pkcs_9_at_localKeyId\nlocalKeyId['attrValues'][0] = univ.OctetString()\n\n\n# Friendly name (also defined as certificateAttribute in rfc2985.py)\n\npkcs_9_ub_pkcs9String = univ.Integer(255)\n\npkcs_9_ub_friendlyName = univ.Integer(pkcs_9_ub_pkcs9String)\n\npkcs_9_at_friendlyName = _OID(pkcs_9, 20)\n\nclass FriendlyName(char.BMPString):\n    pass\n\nFriendlyName.subtypeSpec = constraint.ValueSizeConstraint(1, pkcs_9_ub_friendlyName)\n\n\nfriendlyName = CMSSingleAttribute()\nfriendlyName['attrType'] = pkcs_9_at_friendlyName\nfriendlyName['attrValues'][0] = FriendlyName()\n\n\n# Update the PKCS#12 maps\n\n_pkcs12BagTypeMap = {\n    id_keyBag: KeyBag(),\n    id_pkcs8ShroudedKeyBag: PKCS8ShroudedKeyBag(),\n    id_certBag: CertBag(),\n    id_CRLBag: CRLBag(),\n    id_secretBag: SecretBag(),\n    id_safeContentsBag: SafeBag(),\n}\n\npkcs12BagTypeMap.update(_pkcs12BagTypeMap)\n\n\n_pkcs12CertBagMap = {\n    _OID(certTypes, 1): univ.OctetString(),\n    _OID(certTypes, 2): char.IA5String(),\n}\n\npkcs12CertBagMap.update(_pkcs12CertBagMap)\n\n\n_pkcs12CRLBagMap = {\n    _OID(crlTypes, 1): univ.OctetString(),\n}\n\npkcs12CRLBagMap.update(_pkcs12CRLBagMap)\n\n\n# Update the Algorithm Identifier map\n\n_algorithmIdentifierMapUpdate = {\n    pbeWithSHAAnd128BitRC4: Pkcs_12PbeParams(),\n    pbeWithSHAAnd40BitRC4: Pkcs_12PbeParams(),\n    pbeWithSHAAnd3_KeyTripleDES_CBC: Pkcs_12PbeParams(),\n    pbeWithSHAAnd2_KeyTripleDES_CBC: Pkcs_12PbeParams(),\n    pbeWithSHAAnd128BitRC2_CBC: Pkcs_12PbeParams(),\n    pbeWithSHAAnd40BitRC2_CBC: Pkcs_12PbeParams(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n\n\n# Update the CMS Attribute map\n\n_cmsAttributesMapUpdate = {\n    pkcs_9_at_friendlyName: FriendlyName(),\n    pkcs_9_at_localKeyId: univ.OctetString(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc8226.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from the asn1ate tool, with manual\n#   changes to implement appropriate constraints and added comments.\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# JWT Claim Constraints and TN Authorization List for certificate extensions.\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8226.txt (with errata corrected)\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nclass JWTClaimName(char.IA5String):\n    pass\n\n\nclass JWTClaimNames(univ.SequenceOf):\n    pass\n\nJWTClaimNames.componentType = JWTClaimName()\nJWTClaimNames.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass JWTClaimPermittedValues(univ.Sequence):\n    pass\n\nJWTClaimPermittedValues.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('claim', JWTClaimName()),\n    namedtype.NamedType('permitted', univ.SequenceOf(\n        componentType=char.UTF8String()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\nclass JWTClaimPermittedValuesList(univ.SequenceOf):\n    pass\n\nJWTClaimPermittedValuesList.componentType = JWTClaimPermittedValues()\nJWTClaimPermittedValuesList.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass JWTClaimConstraints(univ.Sequence):\n    pass\n\nJWTClaimConstraints.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('mustInclude',\n        JWTClaimNames().subtype(explicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('permittedValues',\n        JWTClaimPermittedValuesList().subtype(explicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatSimple, 1)))\n)\n\nJWTClaimConstraints.subtypeSpec = constraint.ConstraintsUnion(\n    constraint.WithComponentsConstraint(\n        ('mustInclude', constraint.ComponentPresentConstraint())),\n    constraint.WithComponentsConstraint(\n        ('permittedValues', constraint.ComponentPresentConstraint()))\n)\n\n\nid_pe_JWTClaimConstraints = _OID(1, 3, 6, 1, 5, 5, 7, 1, 27)\n\n\nclass ServiceProviderCode(char.IA5String):\n    pass\n\n\nclass TelephoneNumber(char.IA5String):\n    pass\n\nTelephoneNumber.subtypeSpec = constraint.ConstraintsIntersection(\n    constraint.ValueSizeConstraint(1, 15),\n    constraint.PermittedAlphabetConstraint(\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '#', '*')\n)\n\n\nclass TelephoneNumberRange(univ.Sequence):\n    pass\n\nTelephoneNumberRange.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('start', TelephoneNumber()),\n    namedtype.NamedType('count',\n        univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(2, MAX)))\n)\n\n\nclass TNEntry(univ.Choice):\n    pass\n\nTNEntry.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('spc',\n        ServiceProviderCode().subtype(explicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatSimple, 0))),\n    namedtype.NamedType('range',\n        TelephoneNumberRange().subtype(explicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatConstructed, 1))),\n    namedtype.NamedType('one',\n        TelephoneNumber().subtype(explicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatSimple, 2)))\n)\n\n\nclass TNAuthorizationList(univ.SequenceOf):\n    pass\n\nTNAuthorizationList.componentType = TNEntry()\nTNAuthorizationList.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_pe_TNAuthList = _OID(1, 3, 6, 1, 5, 5, 7, 1, 26)\n\n\nid_ad_stirTNList = _OID(1, 3, 6, 1, 5, 5, 7, 48, 14)\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_TNAuthList: TNAuthorizationList(),\n    id_pe_JWTClaimConstraints: JWTClaimConstraints(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc5084.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from the asn1ate tool, with manual\n#   changes to AES_CCM_ICVlen.subtypeSpec and added comments\n#\n# Copyright (c) 2018-2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n#  AES-CCM and AES-GCM Algorithms fo use with the Authenticated-Enveloped-Data\n#  protecting content type for the Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5084.txt\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nclass AES_CCM_ICVlen(univ.Integer):\n    pass\n\n\nclass AES_GCM_ICVlen(univ.Integer):\n    pass\n\n\nAES_CCM_ICVlen.subtypeSpec = constraint.SingleValueConstraint(4, 6, 8, 10, 12, 14, 16)\n\nAES_GCM_ICVlen.subtypeSpec = constraint.ValueRangeConstraint(12, 16)\n\n\nclass CCMParameters(univ.Sequence):\n    pass\n\n\nCCMParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('aes-nonce', univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(7, 13))),\n    # The aes-nonce parameter contains 15-L octets, where L is the size of the length field. L=8 is RECOMMENDED.\n    # Within the scope of any content-authenticated-encryption key, the nonce value MUST be unique.\n    namedtype.DefaultedNamedType('aes-ICVlen', AES_CCM_ICVlen().subtype(value=12))\n)\n\n\nclass GCMParameters(univ.Sequence):\n    pass\n\n\nGCMParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('aes-nonce', univ.OctetString()),\n    # The aes-nonce may have any number of bits between 8 and 2^64, but it MUST be a multiple of 8 bits.\n    # Within the scope of any content-authenticated-encryption key, the nonce value MUST be unique.\n    # A nonce value of 12 octets can be processed more efficiently, so that length is RECOMMENDED.\n    namedtype.DefaultedNamedType('aes-ICVlen', AES_GCM_ICVlen().subtype(value=12))\n)\n\naes = _OID(2, 16, 840, 1, 101, 3, 4, 1)\n\nid_aes128_CCM = _OID(aes, 7)\n\nid_aes128_GCM = _OID(aes, 6)\n\nid_aes192_CCM = _OID(aes, 27)\n\nid_aes192_GCM = _OID(aes, 26)\n\nid_aes256_CCM = _OID(aes, 47)\n\nid_aes256_GCM = _OID(aes, 46)\n\n\n# Map of Algorithm Identifier OIDs to Parameters is added to the\n# ones in rfc5280.py\n\n_algorithmIdentifierMapUpdate = {\n    id_aes128_CCM: CCMParameters(),\n    id_aes128_GCM: GCMParameters(),\n    id_aes192_CCM: CCMParameters(),\n    id_aes192_GCM: GCMParameters(),\n    id_aes256_CCM: CCMParameters(),\n    id_aes256_GCM: GCMParameters(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc6211.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CMS Algorithm Identifier Protection Attribute\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6211.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\n\n# Imports from RFC 5652\n\nDigestAlgorithmIdentifier = rfc5652.DigestAlgorithmIdentifier\n\nMessageAuthenticationCodeAlgorithm = rfc5652.MessageAuthenticationCodeAlgorithm\n\nSignatureAlgorithmIdentifier = rfc5652.SignatureAlgorithmIdentifier\n\n\n# CMS Algorithm Protection attribute\n\nid_aa_cmsAlgorithmProtect = univ.ObjectIdentifier('1.2.840.113549.1.9.52')\n\n\nclass CMSAlgorithmProtection(univ.Sequence):\n    pass\n\nCMSAlgorithmProtection.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n    namedtype.OptionalNamedType('signatureAlgorithm',\n        SignatureAlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('macAlgorithm',\n        MessageAuthenticationCodeAlgorithm().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\nCMSAlgorithmProtection.subtypeSpec = constraint.ConstraintsUnion(\n    constraint.WithComponentsConstraint(\n        ('signatureAlgorithm', constraint.ComponentPresentConstraint()),\n        ('macAlgorithm', constraint.ComponentAbsentConstraint())),\n    constraint.WithComponentsConstraint(\n        ('signatureAlgorithm', constraint.ComponentAbsentConstraint()),\n        ('macAlgorithm', constraint.ComponentPresentConstraint()))\n)\n\n\naa_cmsAlgorithmProtection = rfc5652.Attribute()\naa_cmsAlgorithmProtection['attrType'] = id_aa_cmsAlgorithmProtect\naa_cmsAlgorithmProtection['attrValues'][0] = CMSAlgorithmProtection()\n\n\n# Map of Attribute Type OIDs to Attributes are\n# added to the ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_cmsAlgorithmProtect: CMSAlgorithmProtection(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)", "pyasn1_modules/rfc5924.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Extended Key Usage (EKU) for Session Initiation Protocol (SIP)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5924.txt\n#\n\nfrom pyasn1.type import univ\n\nid_kp = univ.ObjectIdentifier('1.3.6.1.5.5.7.3')\n\nid_kp_sipDomain = id_kp + (20, )\n", "pyasn1_modules/rfc3161.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Time-Stamp Protocol (TSP)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3161.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc4210\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\n\nExtensions = rfc5280.Extensions\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nGeneralName = rfc5280.GeneralName\n\nContentInfo = rfc5652.ContentInfo\n\nPKIFreeText = rfc4210.PKIFreeText\n\n\nid_ct_TSTInfo = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.4')\n\n\nclass Accuracy(univ.Sequence):\n    pass\n\nAccuracy.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('seconds', univ.Integer()),\n    namedtype.OptionalNamedType('millis', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 999)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('micros', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 999)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass MessageImprint(univ.Sequence):\n    pass\n\nMessageImprint.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hashAlgorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('hashedMessage', univ.OctetString())\n)\n\n\nclass PKIFailureInfo(univ.BitString):\n    pass\n\nPKIFailureInfo.namedValues = namedval.NamedValues(\n    ('badAlg', 0),\n    ('badRequest', 2),\n    ('badDataFormat', 5),\n    ('timeNotAvailable', 14),\n    ('unacceptedPolicy', 15),\n    ('unacceptedExtension', 16),\n    ('addInfoNotAvailable', 17),\n    ('systemFailure', 25)\n)\n\n\nclass PKIStatus(univ.Integer):\n    pass\n\nPKIStatus.namedValues = namedval.NamedValues(\n    ('granted', 0),\n    ('grantedWithMods', 1),\n    ('rejection', 2),\n    ('waiting', 3),\n    ('revocationWarning', 4),\n    ('revocationNotification', 5)\n)\n\n\nclass PKIStatusInfo(univ.Sequence):\n    pass\n\nPKIStatusInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('status', PKIStatus()),\n    namedtype.OptionalNamedType('statusString', PKIFreeText()),\n    namedtype.OptionalNamedType('failInfo', PKIFailureInfo())\n)\n\n\nclass TSAPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass TSTInfo(univ.Sequence):\n    pass\n\nTSTInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', univ.Integer(namedValues=namedval.NamedValues(('v1', 1)))),\n    namedtype.NamedType('policy', TSAPolicyId()),\n    namedtype.NamedType('messageImprint', MessageImprint()),\n    namedtype.NamedType('serialNumber', univ.Integer()),\n    namedtype.NamedType('genTime', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('accuracy', Accuracy()),\n    namedtype.DefaultedNamedType('ordering', univ.Boolean().subtype(value=0)),\n    namedtype.OptionalNamedType('nonce', univ.Integer()),\n    namedtype.OptionalNamedType('tsa', GeneralName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('extensions', Extensions().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass TimeStampReq(univ.Sequence):\n    pass\n\nTimeStampReq.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', univ.Integer(namedValues=namedval.NamedValues(('v1', 1)))),\n    namedtype.NamedType('messageImprint', MessageImprint()),\n    namedtype.OptionalNamedType('reqPolicy', TSAPolicyId()),\n    namedtype.OptionalNamedType('nonce', univ.Integer()),\n    namedtype.DefaultedNamedType('certReq', univ.Boolean().subtype(value=0)),\n    namedtype.OptionalNamedType('extensions', Extensions().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass TimeStampToken(ContentInfo):\n    pass\n\n\nclass TimeStampResp(univ.Sequence):\n    pass\n\nTimeStampResp.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('status', PKIStatusInfo()),\n    namedtype.OptionalNamedType('timeStampToken', TimeStampToken())\n)\n", "pyasn1_modules/rfc6120.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Extensible Messaging and Presence Protocol (XMPP)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6120.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# XmppAddr Identifier Type as specified in Section 13.7.1.4. of RFC 6120\n\nid_pkix = rfc5280.id_pkix\n\nid_on = id_pkix + (8, )\n\nid_on_xmppAddr = id_on + (5, )\n\n\nclass XmppAddr(char.UTF8String):\n    pass\n\n\n# Map of Other Name OIDs to Other Name is added to the\n# ones that are in rfc5280.py\n\n_anotherNameMapUpdate = {\n    id_on_xmppAddr: XmppAddr(),\n}\n\nrfc5280.anotherNameMap.update(_anotherNameMapUpdate)\n", "pyasn1_modules/rfc4387.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Certificate Store Access via HTTP\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4387.txt\n#\n\n\nfrom pyasn1.type import univ\n\n\nid_ad = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, ))\n\nid_ad_http_certs = id_ad + (6, )\n\nid_ad_http_crls = id_ad  + (7,)\n", "pyasn1_modules/rfc2314.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS#10 syntax\n#\n# ASN.1 source from:\n# http://tools.ietf.org/html/rfc2314\n#\n# Sample captures could be obtained with \"openssl req\" command\n#\nfrom pyasn1_modules.rfc2459 import *\n\n\nclass Attributes(univ.SetOf):\n    componentType = Attribute()\n\n\nclass Version(univ.Integer):\n    pass\n\n\nclass CertificationRequestInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('subject', Name()),\n        namedtype.NamedType('subjectPublicKeyInfo', SubjectPublicKeyInfo()),\n        namedtype.NamedType('attributes',\n                            Attributes().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n\n\nclass Signature(univ.BitString):\n    pass\n\n\nclass SignatureAlgorithmIdentifier(AlgorithmIdentifier):\n    pass\n\n\nclass CertificationRequest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certificationRequestInfo', CertificationRequestInfo()),\n        namedtype.NamedType('signatureAlgorithm', SignatureAlgorithmIdentifier()),\n        namedtype.NamedType('signature', Signature())\n    )\n", "pyasn1_modules/rfc1902.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SNMPv2c message syntax\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc1902.txt\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\n\nclass Integer(univ.Integer):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        -2147483648, 2147483647\n    )\n\n\nclass Integer32(univ.Integer):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        -2147483648, 2147483647\n    )\n\n\nclass OctetString(univ.OctetString):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(\n        0, 65535\n    )\n\n\nclass IpAddress(univ.OctetString):\n    tagSet = univ.OctetString.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0x00)\n    )\n    subtypeSpec = univ.OctetString.subtypeSpec + constraint.ValueSizeConstraint(\n        4, 4\n    )\n\n\nclass Counter32(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0x01)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 4294967295\n    )\n\n\nclass Gauge32(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0x02)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 4294967295\n    )\n\n\nclass Unsigned32(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0x02)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 4294967295\n    )\n\n\nclass TimeTicks(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0x03)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 4294967295\n    )\n\n\nclass Opaque(univ.OctetString):\n    tagSet = univ.OctetString.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0x04)\n    )\n\n\nclass Counter64(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0x06)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 18446744073709551615\n    )\n\n\nclass Bits(univ.OctetString):\n    pass\n\n\nclass ObjectName(univ.ObjectIdentifier):\n    pass\n\n\nclass SimpleSyntax(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('integer-value', Integer()),\n        namedtype.NamedType('string-value', OctetString()),\n        namedtype.NamedType('objectID-value', univ.ObjectIdentifier())\n    )\n\n\nclass ApplicationSyntax(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('ipAddress-value', IpAddress()),\n        namedtype.NamedType('counter-value', Counter32()),\n        namedtype.NamedType('timeticks-value', TimeTicks()),\n        namedtype.NamedType('arbitrary-value', Opaque()),\n        namedtype.NamedType('big-counter-value', Counter64()),\n        # This conflicts with Counter32\n        #        namedtype.NamedType('unsigned-integer-value', Unsigned32()),\n        namedtype.NamedType('gauge32-value', Gauge32())\n    )  # BITS misplaced?\n\n\nclass ObjectSyntax(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('simple', SimpleSyntax()),\n        namedtype.NamedType('application-wide', ApplicationSyntax())\n    )\n", "pyasn1_modules/rfc6210.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Experiment for Hash Functions with Parameters in the CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6210.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nid_alg_MD5_XOR_EXPERIMENT = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.13')\n\n\nclass MD5_XOR_EXPERIMENT(univ.OctetString):\n    pass\n\nMD5_XOR_EXPERIMENT.subtypeSpec = constraint.ValueSizeConstraint(64, 64)\n\n\nmda_xor_md5_EXPERIMENT = rfc5280.AlgorithmIdentifier()\nmda_xor_md5_EXPERIMENT['algorithm'] = id_alg_MD5_XOR_EXPERIMENT\nmda_xor_md5_EXPERIMENT['parameters'] = MD5_XOR_EXPERIMENT()\n\n\n# Map of Algorithm Identifier OIDs to Parameters added to the\n# ones that are in rfc5280.py.\n\n_algorithmIdentifierMapUpdate = {\n    id_alg_MD5_XOR_EXPERIMENT: MD5_XOR_EXPERIMENT(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc8696.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with some assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Using Pre-Shared Key (PSK) in the Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8696.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\nid_ori = univ.ObjectIdentifier('1.2.840.113549.1.9.16.13')\n\nid_ori_keyTransPSK = univ.ObjectIdentifier('1.2.840.113549.1.9.16.13.1')\n\nid_ori_keyAgreePSK = univ.ObjectIdentifier('1.2.840.113549.1.9.16.13.2')\n\n\nclass PreSharedKeyIdentifier(univ.OctetString):\n    pass\n\n\nclass KeyTransRecipientInfos(univ.SequenceOf):\n    componentType = rfc5652.KeyTransRecipientInfo()\n\n\nclass KeyTransPSKRecipientInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version',\n            rfc5652.CMSVersion()),\n        namedtype.NamedType('pskid',\n            PreSharedKeyIdentifier()),\n        namedtype.NamedType('kdfAlgorithm',\n            rfc5652.KeyDerivationAlgorithmIdentifier()),\n        namedtype.NamedType('keyEncryptionAlgorithm',\n            rfc5652.KeyEncryptionAlgorithmIdentifier()),\n        namedtype.NamedType('ktris',\n            KeyTransRecipientInfos()),\n        namedtype.NamedType('encryptedKey',\n            rfc5652.EncryptedKey())\n    )\n\n\nclass KeyAgreePSKRecipientInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version',\n            rfc5652.CMSVersion()),\n        namedtype.NamedType('pskid',\n            PreSharedKeyIdentifier()),\n        namedtype.NamedType('originator',\n            rfc5652.OriginatorIdentifierOrKey().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('ukm',\n            rfc5652.UserKeyingMaterial().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('kdfAlgorithm',\n            rfc5652.KeyDerivationAlgorithmIdentifier()),\n        namedtype.NamedType('keyEncryptionAlgorithm',\n            rfc5652.KeyEncryptionAlgorithmIdentifier()),\n        namedtype.NamedType('recipientEncryptedKeys',\n            rfc5652.RecipientEncryptedKeys())\n    )\n\n\nclass CMSORIforPSKOtherInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('psk',\n            univ.OctetString()),\n        namedtype.NamedType('keyMgmtAlgType',\n            univ.Enumerated(namedValues=namedval.NamedValues(\n                ('keyTrans', 5), ('keyAgree', 10)))),\n        namedtype.NamedType('keyEncryptionAlgorithm',\n            rfc5652.KeyEncryptionAlgorithmIdentifier()),\n        namedtype.NamedType('pskLength',\n            univ.Integer().subtype(\n                subtypeSpec=constraint.ValueRangeConstraint(1, MAX))),\n        namedtype.NamedType('kdkLength',\n            univ.Integer().subtype(\n                subtypeSpec=constraint.ValueRangeConstraint(1, MAX)))\n    )\n\n\n# Update the CMS Other Recipient Info map in rfc5652.py\n\n_otherRecipientInfoMapUpdate = {\n    id_ori_keyTransPSK: KeyTransPSKRecipientInfo(),\n    id_ori_keyAgreePSK: KeyAgreePSKRecipientInfo(),\n}\n\nrfc5652.otherRecipientInfoMap.update(_otherRecipientInfoMapUpdate)\n", "pyasn1_modules/rfc1155.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SNMPv1 message syntax\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc1155.txt\n#\n# Sample captures from:\n# http://wiki.wireshark.org/SampleCaptures/\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\n\nclass ObjectName(univ.ObjectIdentifier):\n    pass\n\n\nclass SimpleSyntax(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('number', univ.Integer()),\n        namedtype.NamedType('string', univ.OctetString()),\n        namedtype.NamedType('object', univ.ObjectIdentifier()),\n        namedtype.NamedType('empty', univ.Null())\n    )\n\n\nclass IpAddress(univ.OctetString):\n    tagSet = univ.OctetString.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(\n        4, 4\n    )\n\n\nclass NetworkAddress(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('internet', IpAddress())\n    )\n\n\nclass Counter(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 1)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 4294967295\n    )\n\n\nclass Gauge(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 2)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 4294967295\n    )\n\n\nclass TimeTicks(univ.Integer):\n    tagSet = univ.Integer.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 3)\n    )\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(\n        0, 4294967295\n    )\n\n\nclass Opaque(univ.OctetString):\n    tagSet = univ.OctetString.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 4)\n    )\n\n\nclass ApplicationSyntax(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('address', NetworkAddress()),\n        namedtype.NamedType('counter', Counter()),\n        namedtype.NamedType('gauge', Gauge()),\n        namedtype.NamedType('ticks', TimeTicks()),\n        namedtype.NamedType('arbitrary', Opaque())\n    )\n\n\nclass ObjectSyntax(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('simple', SimpleSyntax()),\n        namedtype.NamedType('application-wide', ApplicationSyntax())\n    )\n", "pyasn1_modules/rfc7296.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# IKEv2 Certificate Bundle\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7296.txt\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nclass CertificateOrCRL(univ.Choice):\n    pass\n\nCertificateOrCRL.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('cert', rfc5280.Certificate().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('crl', rfc5280.CertificateList().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass CertificateBundle(univ.SequenceOf):\n    pass\n\nCertificateBundle.componentType = CertificateOrCRL()\n", "pyasn1_modules/rfc5275.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# An Internet Attribute Certificate Profile for Authorization\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5275.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc3565\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5751\nfrom pyasn1_modules import rfc5755\n\nMAX = float('inf')\n\n\n# Initialize the map for GLAQueryRequests and GLAQueryResponses\n\nglaQueryRRMap = { }\n\n\n# Imports from RFC 3565\n\nid_aes128_wrap = rfc3565.id_aes128_wrap\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nCertificate = rfc5280.Certificate\n\nGeneralName = rfc5280.GeneralName\n\n\n# Imports from RFC 5652\n\nCertificateSet = rfc5652.CertificateSet\n\nKEKIdentifier = rfc5652.KEKIdentifier\n\nRecipientInfos = rfc5652.RecipientInfos\n\n\n# Imports from RFC 5751\n\nSMIMECapability = rfc5751.SMIMECapability\n\n\n# Imports from RFC 5755\n\nAttributeCertificate = rfc5755.AttributeCertificate\n\n\n# The GL symmetric key distribution object identifier arc\n\nid_skd = univ.ObjectIdentifier((1, 2, 840, 113549, 1, 9, 16, 8,))\n\n\n# The GL Use KEK control attribute\n\nid_skd_glUseKEK = id_skd + (1,)\n\n\nclass Certificates(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('pKC',\n            Certificate().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('aC',\n            univ.SequenceOf(componentType=AttributeCertificate()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX)).subtype(\n                    implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('certPath',\n            CertificateSet().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass GLInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.NamedType('glAddress', GeneralName())\n    )\n\n\nclass GLOwnerInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glOwnerName', GeneralName()),\n        namedtype.NamedType('glOwnerAddress', GeneralName()),\n        namedtype.OptionalNamedType('certificates', Certificates())\n    )\n\n\nclass GLAdministration(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('unmanaged', 0),\n        ('managed', 1),\n        ('closed', 2)\n    )\n\n\nrequested_algorithm = SMIMECapability().subtype(\n   implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))\nrequested_algorithm['capabilityID'] = id_aes128_wrap\n\n\nclass GLKeyAttributes(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('rekeyControlledByGLO',\n            univ.Boolean().subtype(value=0,\n                implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.DefaultedNamedType('recipientsNotMutuallyAware',\n            univ.Boolean().subtype(value=1,\n                implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.DefaultedNamedType('duration',\n            univ.Integer().subtype(value=0,\n                implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.DefaultedNamedType('generationCounter',\n            univ.Integer().subtype(value=2,\n                implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.DefaultedNamedType('requestedAlgorithm', requested_algorithm)\n    )\n\n\nclass GLUseKEK(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glInfo', GLInfo()),\n        namedtype.NamedType('glOwnerInfo',\n            univ.SequenceOf(componentType=GLOwnerInfo()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n        namedtype.DefaultedNamedType('glAdministration',\n            GLAdministration().subtype(value=1)),\n        namedtype.OptionalNamedType('glKeyAttributes', GLKeyAttributes())\n    )\n\n\n# The Delete GL control attribute\n\nid_skd_glDelete = id_skd + (2,)\n\n\nclass DeleteGL(GeneralName):\n    pass\n\n\n# The Add GL Member control attribute\n\nid_skd_glAddMember = id_skd + (3,)\n\n\nclass GLMember(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glMemberName', GeneralName()),\n        namedtype.OptionalNamedType('glMemberAddress', GeneralName()),\n        namedtype.OptionalNamedType('certificates', Certificates())\n    )\n\n\nclass GLAddMember(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.NamedType('glMember', GLMember())\n    )\n\n\n# The Delete GL Member control attribute\n\nid_skd_glDeleteMember = id_skd + (4,)\n\n\nclass GLDeleteMember(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.NamedType('glMemberToDelete', GeneralName())\n    )\n\n\n# The GL Rekey control attribute\n\nid_skd_glRekey = id_skd + (5,)\n\n\nclass GLNewKeyAttributes(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('rekeyControlledByGLO',\n            univ.Boolean().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('recipientsNotMutuallyAware',\n            univ.Boolean().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('duration',\n            univ.Integer().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('generationCounter',\n            univ.Integer().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.OptionalNamedType('requestedAlgorithm',\n            AlgorithmIdentifier().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 4)))\n    )\n\n\nclass GLRekey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.OptionalNamedType('glAdministration', GLAdministration()),\n        namedtype.OptionalNamedType('glNewKeyAttributes', GLNewKeyAttributes()),\n        namedtype.OptionalNamedType('glRekeyAllGLKeys', univ.Boolean())\n    )\n\n\n# The Add and Delete GL Owner control attributes\n\nid_skd_glAddOwner = id_skd + (6,)\n\nid_skd_glRemoveOwner = id_skd + (7,)\n\n\nclass GLOwnerAdministration(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.NamedType('glOwnerInfo', GLOwnerInfo())\n    )\n\n\n# The GL Key Compromise control attribute\n\nid_skd_glKeyCompromise = id_skd + (8,)\n\n\nclass GLKCompromise(GeneralName):\n    pass\n\n\n# The GL Key Refresh control attribute\n\nid_skd_glkRefresh = id_skd + (9,)\n\n\nclass Date(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('start', useful.GeneralizedTime()),\n        namedtype.OptionalNamedType('end', useful.GeneralizedTime())\n    )\n\n\nclass GLKRefresh(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.NamedType('dates',\n            univ.SequenceOf(componentType=Date()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\n# The GLA Query Request control attribute\n\nid_skd_glaQueryRequest = id_skd + (11,)\n\n\nclass GLAQueryRequest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glaRequestType', univ.ObjectIdentifier()),\n        namedtype.NamedType('glaRequestValue', univ.Any(),\n            openType=opentype.OpenType('glaRequestType', glaQueryRRMap))\n    )\n\n\n# The GLA Query Response control attribute\n\nid_skd_glaQueryResponse = id_skd + (12,)\n\n\nclass GLAQueryResponse(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glaResponseType', univ.ObjectIdentifier()),\n        namedtype.NamedType('glaResponseValue', univ.Any(),\n            openType=opentype.OpenType('glaResponseType', glaQueryRRMap))\n    )\n\n\n# The GLA Request/Response (glaRR) arc for glaRequestType/glaResponseType\n\nid_cmc_glaRR = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 7, 99,))\n\n\n# The Algorithm Request\n\nid_cmc_gla_skdAlgRequest = id_cmc_glaRR + (1,)\n\n\nclass SKDAlgRequest(univ.Null):\n    pass\n\n\n# The Algorithm Response\n\nid_cmc_gla_skdAlgResponse = id_cmc_glaRR + (2,)\n\nSMIMECapabilities = rfc5751.SMIMECapabilities\n\n\n# The control attribute to request an updated certificate to the GLA and\n# the control attribute to return an updated certificate to the GLA\n\nid_skd_glProvideCert = id_skd + (13,)\n\nid_skd_glManageCert = id_skd + (14,)\n\n\nclass GLManageCert(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.NamedType('glMember', GLMember())\n    )\n\n\n# The control attribute to distribute the GL shared KEK\n\nid_skd_glKey = id_skd + (15,)\n\n\nclass GLKey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('glName', GeneralName()),\n        namedtype.NamedType('glIdentifier', KEKIdentifier()),\n        namedtype.NamedType('glkWrapped', RecipientInfos()),\n        namedtype.NamedType('glkAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('glkNotBefore', useful.GeneralizedTime()),\n        namedtype.NamedType('glkNotAfter', useful.GeneralizedTime())\n    )\n\n\n# The CMC error types\n\nid_cet_skdFailInfo = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 15, 1,))\n\n\nclass SKDFailInfo(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('unspecified', 0),\n        ('closedGL', 1),\n        ('unsupportedDuration', 2),\n        ('noGLACertificate', 3),\n        ('invalidCert', 4),\n        ('unsupportedAlgorithm', 5),\n        ('noGLONameMatch', 6),\n        ('invalidGLName', 7),\n        ('nameAlreadyInUse', 8),\n        ('noSpam', 9),\n        ('alreadyAMember', 11),\n        ('notAMember', 12),\n        ('alreadyAnOwner', 13),\n        ('notAnOwner', 14)\n    )\n\n\n# Update the map for GLAQueryRequests and GLAQueryResponses\n\n_glaQueryRRMapUpdate = {\n    id_cmc_gla_skdAlgRequest: univ.Null(\"\"),\n    id_cmc_gla_skdAlgResponse: SMIMECapabilities(),\n}\n\nglaQueryRRMap.update(_glaQueryRRMapUpdate)\n\n\n# Update the map for CMC control attributes; since CMS Attributes and\n# CMC Controls both use 'attrType', one map is used for both\n\n_cmcControlAttributesMapUpdate = {\n    id_skd_glUseKEK: GLUseKEK(),\n    id_skd_glDelete: DeleteGL(),\n    id_skd_glAddMember: GLAddMember(),\n    id_skd_glDeleteMember: GLDeleteMember(),\n    id_skd_glRekey: GLRekey(),\n    id_skd_glAddOwner: GLOwnerAdministration(),\n    id_skd_glRemoveOwner: GLOwnerAdministration(),\n    id_skd_glKeyCompromise: GLKCompromise(),\n    id_skd_glkRefresh: GLKRefresh(),\n    id_skd_glaQueryRequest: GLAQueryRequest(),\n    id_skd_glaQueryResponse: GLAQueryResponse(),\n    id_skd_glProvideCert: GLManageCert(),\n    id_skd_glManageCert: GLManageCert(),\n    id_skd_glKey: GLKey(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmcControlAttributesMapUpdate)\n", "pyasn1_modules/rfc4210.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Certificate Management Protocol structures as per RFC4210\n#\n# Based on Alex Railean's work\n#\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc2314\nfrom pyasn1_modules import rfc2459\nfrom pyasn1_modules import rfc2511\n\nMAX = float('inf')\n\n\nclass KeyIdentifier(univ.OctetString):\n    pass\n\n\nclass CMPCertificate(rfc2459.Certificate):\n    pass\n\n\nclass OOBCert(CMPCertificate):\n    pass\n\n\nclass CertAnnContent(CMPCertificate):\n    pass\n\n\nclass PKIFreeText(univ.SequenceOf):\n    \"\"\"\n    PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String\n    \"\"\"\n    componentType = char.UTF8String()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass PollRepContent(univ.SequenceOf):\n    \"\"\"\n         PollRepContent ::= SEQUENCE OF SEQUENCE {\n         certReqId              INTEGER,\n         checkAfter             INTEGER,  -- time in seconds\n         reason                 PKIFreeText OPTIONAL\n     }\n    \"\"\"\n\n    class CertReq(univ.Sequence):\n        componentType = namedtype.NamedTypes(\n            namedtype.NamedType('certReqId', univ.Integer()),\n            namedtype.NamedType('checkAfter', univ.Integer()),\n            namedtype.OptionalNamedType('reason', PKIFreeText())\n        )\n\n    componentType = CertReq()\n\n\nclass PollReqContent(univ.SequenceOf):\n    \"\"\"\n         PollReqContent ::= SEQUENCE OF SEQUENCE {\n         certReqId              INTEGER\n     }\n\n    \"\"\"\n\n    class CertReq(univ.Sequence):\n        componentType = namedtype.NamedTypes(\n            namedtype.NamedType('certReqId', univ.Integer())\n        )\n\n    componentType = CertReq()\n\n\nclass InfoTypeAndValue(univ.Sequence):\n    \"\"\"\n    InfoTypeAndValue ::= SEQUENCE {\n     infoType               OBJECT IDENTIFIER,\n     infoValue              ANY DEFINED BY infoType  OPTIONAL\n    }\"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('infoType', univ.ObjectIdentifier()),\n        namedtype.OptionalNamedType('infoValue', univ.Any())\n    )\n\n\nclass GenRepContent(univ.SequenceOf):\n    componentType = InfoTypeAndValue()\n\n\nclass GenMsgContent(univ.SequenceOf):\n    componentType = InfoTypeAndValue()\n\n\nclass PKIConfirmContent(univ.Null):\n    pass\n\n\nclass CRLAnnContent(univ.SequenceOf):\n    componentType = rfc2459.CertificateList()\n\n\nclass CAKeyUpdAnnContent(univ.Sequence):\n    \"\"\"\n    CAKeyUpdAnnContent ::= SEQUENCE {\n         oldWithNew   CMPCertificate,\n         newWithOld   CMPCertificate,\n         newWithNew   CMPCertificate\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('oldWithNew', CMPCertificate()),\n        namedtype.NamedType('newWithOld', CMPCertificate()),\n        namedtype.NamedType('newWithNew', CMPCertificate())\n    )\n\n\nclass RevDetails(univ.Sequence):\n    \"\"\"\n    RevDetails ::= SEQUENCE {\n         certDetails         CertTemplate,\n         crlEntryDetails     Extensions       OPTIONAL\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certDetails', rfc2511.CertTemplate()),\n        namedtype.OptionalNamedType('crlEntryDetails', rfc2459.Extensions())\n    )\n\n\nclass RevReqContent(univ.SequenceOf):\n    componentType = RevDetails()\n\n\nclass CertOrEncCert(univ.Choice):\n    \"\"\"\n     CertOrEncCert ::= CHOICE {\n         certificate     [0] CMPCertificate,\n         encryptedCert   [1] EncryptedValue\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certificate', CMPCertificate().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('encryptedCert', rfc2511.EncryptedValue().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass CertifiedKeyPair(univ.Sequence):\n    \"\"\"\n    CertifiedKeyPair ::= SEQUENCE {\n         certOrEncCert       CertOrEncCert,\n         privateKey      [0] EncryptedValue      OPTIONAL,\n         publicationInfo [1] PKIPublicationInfo  OPTIONAL\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certOrEncCert', CertOrEncCert()),\n        namedtype.OptionalNamedType('privateKey', rfc2511.EncryptedValue().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('publicationInfo', rfc2511.PKIPublicationInfo().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass POPODecKeyRespContent(univ.SequenceOf):\n    componentType = univ.Integer()\n\n\nclass Challenge(univ.Sequence):\n    \"\"\"\n    Challenge ::= SEQUENCE {\n         owf                 AlgorithmIdentifier  OPTIONAL,\n         witness             OCTET STRING,\n         challenge           OCTET STRING\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('owf', rfc2459.AlgorithmIdentifier()),\n        namedtype.NamedType('witness', univ.OctetString()),\n        namedtype.NamedType('challenge', univ.OctetString())\n    )\n\n\nclass PKIStatus(univ.Integer):\n    \"\"\"\n    PKIStatus ::= INTEGER {\n         accepted                (0),\n         grantedWithMods        (1),\n         rejection              (2),\n         waiting                (3),\n         revocationWarning      (4),\n         revocationNotification (5),\n         keyUpdateWarning       (6)\n     }\n    \"\"\"\n    namedValues = namedval.NamedValues(\n        ('accepted', 0),\n        ('grantedWithMods', 1),\n        ('rejection', 2),\n        ('waiting', 3),\n        ('revocationWarning', 4),\n        ('revocationNotification', 5),\n        ('keyUpdateWarning', 6)\n    )\n\n\nclass PKIFailureInfo(univ.BitString):\n    \"\"\"\n    PKIFailureInfo ::= BIT STRING {\n         badAlg              (0),\n         badMessageCheck     (1),\n         badRequest          (2),\n         badTime             (3),\n         badCertId           (4),\n         badDataFormat       (5),\n         wrongAuthority      (6),\n         incorrectData       (7),\n         missingTimeStamp    (8),\n         badPOP              (9),\n         certRevoked         (10),\n         certConfirmed       (11),\n         wrongIntegrity      (12),\n         badRecipientNonce   (13),\n         timeNotAvailable    (14),\n         unacceptedPolicy    (15),\n         unacceptedExtension (16),\n         addInfoNotAvailable (17),\n         badSenderNonce      (18),\n         badCertTemplate     (19),\n         signerNotTrusted    (20),\n         transactionIdInUse  (21),\n         unsupportedVersion  (22),\n         notAuthorized       (23),\n         systemUnavail       (24),\n         systemFailure       (25),\n         duplicateCertReq    (26)\n    \"\"\"\n    namedValues = namedval.NamedValues(\n        ('badAlg', 0),\n        ('badMessageCheck', 1),\n        ('badRequest', 2),\n        ('badTime', 3),\n        ('badCertId', 4),\n        ('badDataFormat', 5),\n        ('wrongAuthority', 6),\n        ('incorrectData', 7),\n        ('missingTimeStamp', 8),\n        ('badPOP', 9),\n        ('certRevoked', 10),\n        ('certConfirmed', 11),\n        ('wrongIntegrity', 12),\n        ('badRecipientNonce', 13),\n        ('timeNotAvailable', 14),\n        ('unacceptedPolicy', 15),\n        ('unacceptedExtension', 16),\n        ('addInfoNotAvailable', 17),\n        ('badSenderNonce', 18),\n        ('badCertTemplate', 19),\n        ('signerNotTrusted', 20),\n        ('transactionIdInUse', 21),\n        ('unsupportedVersion', 22),\n        ('notAuthorized', 23),\n        ('systemUnavail', 24),\n        ('systemFailure', 25),\n        ('duplicateCertReq', 26)\n    )\n\n\nclass PKIStatusInfo(univ.Sequence):\n    \"\"\"\n    PKIStatusInfo ::= SEQUENCE {\n         status        PKIStatus,\n         statusString  PKIFreeText     OPTIONAL,\n         failInfo      PKIFailureInfo  OPTIONAL\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('status', PKIStatus()),\n        namedtype.OptionalNamedType('statusString', PKIFreeText()),\n        namedtype.OptionalNamedType('failInfo', PKIFailureInfo())\n    )\n\n\nclass ErrorMsgContent(univ.Sequence):\n    \"\"\"\n    ErrorMsgContent ::= SEQUENCE {\n         pKIStatusInfo          PKIStatusInfo,\n         errorCode              INTEGER           OPTIONAL,\n         -- implementation-specific error codes\n         errorDetails           PKIFreeText       OPTIONAL\n         -- implementation-specific error details\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('pKIStatusInfo', PKIStatusInfo()),\n        namedtype.OptionalNamedType('errorCode', univ.Integer()),\n        namedtype.OptionalNamedType('errorDetails', PKIFreeText())\n    )\n\n\nclass CertStatus(univ.Sequence):\n    \"\"\"\n    CertStatus ::= SEQUENCE {\n        certHash    OCTET STRING,\n        certReqId   INTEGER,\n        statusInfo  PKIStatusInfo OPTIONAL\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certHash', univ.OctetString()),\n        namedtype.NamedType('certReqId', univ.Integer()),\n        namedtype.OptionalNamedType('statusInfo', PKIStatusInfo())\n    )\n\n\nclass CertConfirmContent(univ.SequenceOf):\n    componentType = CertStatus()\n\n\nclass RevAnnContent(univ.Sequence):\n    \"\"\"\n    RevAnnContent ::= SEQUENCE {\n         status              PKIStatus,\n         certId              CertId,\n         willBeRevokedAt     GeneralizedTime,\n         badSinceDate        GeneralizedTime,\n         crlDetails          Extensions  OPTIONAL\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('status', PKIStatus()),\n        namedtype.NamedType('certId', rfc2511.CertId()),\n        namedtype.NamedType('willBeRevokedAt', useful.GeneralizedTime()),\n        namedtype.NamedType('badSinceDate', useful.GeneralizedTime()),\n        namedtype.OptionalNamedType('crlDetails', rfc2459.Extensions())\n    )\n\n\nclass RevRepContent(univ.Sequence):\n    \"\"\"\n    RevRepContent ::= SEQUENCE {\n         status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,\n         revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId\n                                             OPTIONAL,\n         crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList\n                                             OPTIONAL\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType(\n            'status', univ.SequenceOf(\n                componentType=PKIStatusInfo(),\n                sizeSpec=constraint.ValueSizeConstraint(1, MAX)\n            )\n        ),\n        namedtype.OptionalNamedType(\n            'revCerts', univ.SequenceOf(componentType=rfc2511.CertId()).subtype(\n                sizeSpec=constraint.ValueSizeConstraint(1, MAX),\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)\n            )\n        ),\n        namedtype.OptionalNamedType(\n            'crls', univ.SequenceOf(componentType=rfc2459.CertificateList()).subtype(\n                sizeSpec=constraint.ValueSizeConstraint(1, MAX),\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)\n            )\n        )\n    )\n\n\nclass KeyRecRepContent(univ.Sequence):\n    \"\"\"\n    KeyRecRepContent ::= SEQUENCE {\n         status                  PKIStatusInfo,\n         newSigCert          [0] CMPCertificate OPTIONAL,\n         caCerts             [1] SEQUENCE SIZE (1..MAX) OF\n                                             CMPCertificate OPTIONAL,\n         keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF\n                                             CertifiedKeyPair OPTIONAL\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('status', PKIStatusInfo()),\n        namedtype.OptionalNamedType(\n            'newSigCert', CMPCertificate().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)\n            )\n        ),\n        namedtype.OptionalNamedType(\n            'caCerts', univ.SequenceOf(componentType=CMPCertificate()).subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1),\n                sizeSpec=constraint.ValueSizeConstraint(1, MAX)\n            )\n        ),\n        namedtype.OptionalNamedType('keyPairHist', univ.SequenceOf(componentType=CertifiedKeyPair()).subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2),\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX))\n        )\n    )\n\n\nclass CertResponse(univ.Sequence):\n    \"\"\"\n    CertResponse ::= SEQUENCE {\n         certReqId           INTEGER,\n         status              PKIStatusInfo,\n         certifiedKeyPair    CertifiedKeyPair    OPTIONAL,\n         rspInfo             OCTET STRING        OPTIONAL\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certReqId', univ.Integer()),\n        namedtype.NamedType('status', PKIStatusInfo()),\n        namedtype.OptionalNamedType('certifiedKeyPair', CertifiedKeyPair()),\n        namedtype.OptionalNamedType('rspInfo', univ.OctetString())\n    )\n\n\nclass CertRepMessage(univ.Sequence):\n    \"\"\"\n    CertRepMessage ::= SEQUENCE {\n         caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate\n                          OPTIONAL,\n         response         SEQUENCE OF CertResponse\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType(\n            'caPubs', univ.SequenceOf(\n                componentType=CMPCertificate()\n            ).subtype(sizeSpec=constraint.ValueSizeConstraint(1, MAX),\n                      explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))\n        ),\n        namedtype.NamedType('response', univ.SequenceOf(componentType=CertResponse()))\n    )\n\n\nclass POPODecKeyChallContent(univ.SequenceOf):\n    componentType = Challenge()\n\n\nclass OOBCertHash(univ.Sequence):\n    \"\"\"\n    OOBCertHash ::= SEQUENCE {\n         hashAlg     [0] AlgorithmIdentifier     OPTIONAL,\n         certId      [1] CertId                  OPTIONAL,\n         hashVal         BIT STRING\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType(\n            'hashAlg', rfc2459.AlgorithmIdentifier().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))\n        ),\n        namedtype.OptionalNamedType(\n            'certId', rfc2511.CertId().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))\n        ),\n        namedtype.NamedType('hashVal', univ.BitString())\n    )\n\n\n# pyasn1 does not naturally handle recursive definitions, thus this hack:\n# NestedMessageContent ::= PKIMessages\nclass NestedMessageContent(univ.SequenceOf):\n    \"\"\"\n    NestedMessageContent ::= PKIMessages\n    \"\"\"\n    componentType = univ.Any()\n\n\nclass DHBMParameter(univ.Sequence):\n    \"\"\"\n    DHBMParameter ::= SEQUENCE {\n         owf                 AlgorithmIdentifier,\n         -- AlgId for a One-Way Function (SHA-1 recommended)\n         mac                 AlgorithmIdentifier\n         -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],\n     }   -- or HMAC [RFC2104, RFC2202])\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('owf', rfc2459.AlgorithmIdentifier()),\n        namedtype.NamedType('mac', rfc2459.AlgorithmIdentifier())\n    )\n\n\nid_DHBasedMac = univ.ObjectIdentifier('1.2.840.113533.7.66.30')\n\n\nclass PBMParameter(univ.Sequence):\n    \"\"\"\n    PBMParameter ::= SEQUENCE {\n         salt                OCTET STRING,\n         owf                 AlgorithmIdentifier,\n         iterationCount      INTEGER,\n         mac                 AlgorithmIdentifier\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType(\n            'salt', univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 128))\n        ),\n        namedtype.NamedType('owf', rfc2459.AlgorithmIdentifier()),\n        namedtype.NamedType('iterationCount', univ.Integer()),\n        namedtype.NamedType('mac', rfc2459.AlgorithmIdentifier())\n    )\n\n\nid_PasswordBasedMac = univ.ObjectIdentifier('1.2.840.113533.7.66.13')\n\n\nclass PKIProtection(univ.BitString):\n    pass\n\n\n# pyasn1 does not naturally handle recursive definitions, thus this hack:\n# NestedMessageContent ::= PKIMessages\nnestedMessageContent = NestedMessageContent().subtype(\n    explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 20))\n\n\nclass PKIBody(univ.Choice):\n    \"\"\"\n    PKIBody ::= CHOICE {       -- message-specific body elements\n         ir       [0]  CertReqMessages,        --Initialization Request\n         ip       [1]  CertRepMessage,         --Initialization Response\n         cr       [2]  CertReqMessages,        --Certification Request\n         cp       [3]  CertRepMessage,         --Certification Response\n         p10cr    [4]  CertificationRequest,   --imported from [PKCS10]\n         popdecc  [5]  POPODecKeyChallContent, --pop Challenge\n         popdecr  [6]  POPODecKeyRespContent,  --pop Response\n         kur      [7]  CertReqMessages,        --Key Update Request\n         kup      [8]  CertRepMessage,         --Key Update Response\n         krr      [9]  CertReqMessages,        --Key Recovery Request\n         krp      [10] KeyRecRepContent,       --Key Recovery Response\n         rr       [11] RevReqContent,          --Revocation Request\n         rp       [12] RevRepContent,          --Revocation Response\n         ccr      [13] CertReqMessages,        --Cross-Cert. Request\n         ccp      [14] CertRepMessage,         --Cross-Cert. Response\n         ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.\n         cann     [16] CertAnnContent,         --Certificate Ann.\n         rann     [17] RevAnnContent,          --Revocation Ann.\n         crlann   [18] CRLAnnContent,          --CRL Announcement\n         pkiconf  [19] PKIConfirmContent,      --Confirmation\n         nested   [20] NestedMessageContent,   --Nested Message\n         genm     [21] GenMsgContent,          --General Message\n         genp     [22] GenRepContent,          --General Response\n         error    [23] ErrorMsgContent,        --Error Message\n         certConf [24] CertConfirmContent,     --Certificate confirm\n         pollReq  [25] PollReqContent,         --Polling request\n         pollRep  [26] PollRepContent          --Polling response\n\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType(\n            'ir', rfc2511.CertReqMessages().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)\n            )\n        ),\n        namedtype.NamedType(\n            'ip', CertRepMessage().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)\n            )\n        ),\n        namedtype.NamedType(\n            'cr', rfc2511.CertReqMessages().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)\n            )\n        ),\n        namedtype.NamedType(\n            'cp', CertRepMessage().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)\n            )\n        ),\n        namedtype.NamedType(\n            'p10cr', rfc2314.CertificationRequest().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4)\n            )\n        ),\n        namedtype.NamedType(\n            'popdecc', POPODecKeyChallContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5)\n            )\n        ),\n        namedtype.NamedType(\n            'popdecr', POPODecKeyRespContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6)\n            )\n        ),\n        namedtype.NamedType(\n            'kur', rfc2511.CertReqMessages().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 7)\n            )\n        ),\n        namedtype.NamedType(\n            'kup', CertRepMessage().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8)\n            )\n        ),\n        namedtype.NamedType(\n            'krr', rfc2511.CertReqMessages().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 9)\n            )\n        ),\n        namedtype.NamedType(\n            'krp', KeyRecRepContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 10)\n            )\n        ),\n        namedtype.NamedType(\n            'rr', RevReqContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 11)\n            )\n        ),\n        namedtype.NamedType(\n            'rp', RevRepContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 12)\n            )\n        ),\n        namedtype.NamedType(\n            'ccr', rfc2511.CertReqMessages().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 13)\n            )\n        ),\n        namedtype.NamedType(\n            'ccp', CertRepMessage().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 14)\n            )\n        ),\n        namedtype.NamedType(\n            'ckuann', CAKeyUpdAnnContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 15)\n            )\n        ),\n        namedtype.NamedType(\n            'cann', CertAnnContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 16)\n            )\n        ),\n        namedtype.NamedType(\n            'rann', RevAnnContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 17)\n            )\n        ),\n        namedtype.NamedType(\n            'crlann', CRLAnnContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 18)\n            )\n        ),\n        namedtype.NamedType(\n            'pkiconf', PKIConfirmContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 19)\n            )\n        ),\n        namedtype.NamedType(\n            'nested', nestedMessageContent\n        ),\n        #        namedtype.NamedType('nested', NestedMessageContent().subtype(\n        #            explicitTag=tag.Tag(tag.tagClassContext,tag.tagFormatConstructed,20)\n        #            )\n        #        ),\n        namedtype.NamedType(\n            'genm', GenMsgContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 21)\n            )\n        ),\n        namedtype.NamedType(\n            'gen', GenRepContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 22)\n            )\n        ),\n        namedtype.NamedType(\n            'error', ErrorMsgContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 23)\n            )\n        ),\n        namedtype.NamedType(\n            'certConf', CertConfirmContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 24)\n            )\n        ),\n        namedtype.NamedType(\n            'pollReq', PollReqContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 25)\n            )\n        ),\n        namedtype.NamedType(\n            'pollRep', PollRepContent().subtype(\n                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 26)\n            )\n        )\n    )\n\n\nclass PKIHeader(univ.Sequence):\n    \"\"\"\n    PKIHeader ::= SEQUENCE {\n    pvno                INTEGER     { cmp1999(1), cmp2000(2) },\n    sender              GeneralName,\n    recipient           GeneralName,\n    messageTime     [0] GeneralizedTime         OPTIONAL,\n    protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,\n    senderKID       [2] KeyIdentifier           OPTIONAL,\n    recipKID        [3] KeyIdentifier           OPTIONAL,\n    transactionID   [4] OCTET STRING            OPTIONAL,\n    senderNonce     [5] OCTET STRING            OPTIONAL,\n    recipNonce      [6] OCTET STRING            OPTIONAL,\n    freeText        [7] PKIFreeText             OPTIONAL,\n    generalInfo     [8] SEQUENCE SIZE (1..MAX) OF\n                     InfoTypeAndValue     OPTIONAL\n    }\n\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType(\n            'pvno', univ.Integer(\n                namedValues=namedval.NamedValues(('cmp1999', 1), ('cmp2000', 2))\n            )\n        ),\n        namedtype.NamedType('sender', rfc2459.GeneralName()),\n        namedtype.NamedType('recipient', rfc2459.GeneralName()),\n        namedtype.OptionalNamedType('messageTime', useful.GeneralizedTime().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('protectionAlg', rfc2459.AlgorithmIdentifier().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('senderKID', rfc2459.KeyIdentifier().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('recipKID', rfc2459.KeyIdentifier().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.OptionalNamedType('transactionID', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n        namedtype.OptionalNamedType('senderNonce', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))),\n        namedtype.OptionalNamedType('recipNonce', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))),\n        namedtype.OptionalNamedType('freeText', PKIFreeText().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 7))),\n        namedtype.OptionalNamedType('generalInfo',\n                                    univ.SequenceOf(\n                                        componentType=InfoTypeAndValue().subtype(\n                                            sizeSpec=constraint.ValueSizeConstraint(1, MAX)\n                                        )\n                                    ).subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 8))\n        )\n    )\n\n\nclass ProtectedPart(univ.Sequence):\n    \"\"\"\n     ProtectedPart ::= SEQUENCE {\n         header    PKIHeader,\n         body      PKIBody\n     }\n    \"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('header', PKIHeader()),\n        namedtype.NamedType('infoValue', PKIBody())\n    )\n\n\nclass PKIMessage(univ.Sequence):\n    \"\"\"\n    PKIMessage ::= SEQUENCE {\n    header           PKIHeader,\n    body             PKIBody,\n    protection   [0] PKIProtection OPTIONAL,\n    extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate\n                  OPTIONAL\n     }\"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('header', PKIHeader()),\n        namedtype.NamedType('body', PKIBody()),\n        namedtype.OptionalNamedType('protection', PKIProtection().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('extraCerts',\n                                    univ.SequenceOf(\n                                        componentType=CMPCertificate()\n                                    ).subtype(\n                                        sizeSpec=constraint.ValueSizeConstraint(1, MAX),\n                                        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)\n                                    )\n                                    )\n    )\n\n\nclass PKIMessages(univ.SequenceOf):\n    \"\"\"\n    PKIMessages ::= SEQUENCE SIZE (1..MAX) OF PKIMessage\n    \"\"\"\n    componentType = PKIMessage()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\n# pyasn1 does not naturally handle recursive definitions, thus this hack:\n# NestedMessageContent ::= PKIMessages\nNestedMessageContent._componentType = PKIMessages()\nnestedMessageContent._componentType = PKIMessages()\n", "pyasn1_modules/rfc7508.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Securing Header Fields with S/MIME\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7508.txt\n# https://www.rfc-editor.org/errata/eid5875\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nimport string\n\nMAX = float('inf')\n\n\nclass Algorithm(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('canonAlgorithmSimple', 0),\n        ('canonAlgorithmRelaxed', 1)\n    )\n\n\nclass HeaderFieldStatus(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('duplicated', 0),\n        ('deleted', 1),\n        ('modified', 2)\n    )\n\n\nclass HeaderFieldName(char.VisibleString):\n    subtypeSpec = (\n        constraint.PermittedAlphabetConstraint(*string.printable) -\n        constraint.PermittedAlphabetConstraint(':')\n    )\n\n\nclass HeaderFieldValue(char.UTF8String):\n    pass\n\n\nclass HeaderField(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('field-Name', HeaderFieldName()),\n        namedtype.NamedType('field-Value', HeaderFieldValue()),\n        namedtype.DefaultedNamedType('field-Status',\n            HeaderFieldStatus().subtype(value='duplicated'))\n    )\n\n\nclass HeaderFields(univ.SequenceOf):\n    componentType = HeaderField()\n    subtypeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass SecureHeaderFields(univ.Set):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('canonAlgorithm', Algorithm()),\n        namedtype.NamedType('secHeaderFields', HeaderFields())\n    )\n\n\nid_aa = univ.ObjectIdentifier((1, 2, 840, 113549, 1, 9, 16, 2, ))\n\nid_aa_secureHeaderFieldsIdentifier = id_aa + (55, )\n\n\n\n# Map of Attribute Type OIDs to Attributes added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_secureHeaderFieldsIdentifier: SecureHeaderFields(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n", "pyasn1_modules/rfc3560.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# RSAES-OAEP Key Transport Algorithm in CMS\n#\n# Notice that all of the things needed in RFC 3560 are also defined\n# in RFC 4055.  So, they are all pulled from the RFC 4055 module into\n# this one so that people looking a RFC 3560 can easily find them.\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3560.txt\n#\n\nfrom pyasn1_modules import rfc4055\n\nid_sha1 = rfc4055.id_sha1\n\nid_sha256 = rfc4055.id_sha256\n\nid_sha384 = rfc4055.id_sha384\n\nid_sha512 = rfc4055.id_sha512\n\nid_mgf1 = rfc4055.id_mgf1\n\nrsaEncryption = rfc4055.rsaEncryption\n\nid_RSAES_OAEP = rfc4055.id_RSAES_OAEP\n\nid_pSpecified = rfc4055.id_pSpecified\n\nsha1Identifier = rfc4055.sha1Identifier\n\nsha256Identifier = rfc4055.sha256Identifier\n\nsha384Identifier = rfc4055.sha384Identifier\n\nsha512Identifier = rfc4055.sha512Identifier\n\nmgf1SHA1Identifier = rfc4055.mgf1SHA1Identifier\n\nmgf1SHA256Identifier = rfc4055.mgf1SHA256Identifier\n\nmgf1SHA384Identifier = rfc4055.mgf1SHA384Identifier\n\nmgf1SHA512Identifier = rfc4055.mgf1SHA512Identifier\n\npSpecifiedEmptyIdentifier = rfc4055.pSpecifiedEmptyIdentifier\n\n\nclass RSAES_OAEP_params(rfc4055.RSAES_OAEP_params):\n    pass\n\n\nrSAES_OAEP_Default_Params = RSAES_OAEP_params()\n\nrSAES_OAEP_Default_Identifier = rfc4055.rSAES_OAEP_Default_Identifier\n\nrSAES_OAEP_SHA256_Params = rfc4055.rSAES_OAEP_SHA256_Params\n\nrSAES_OAEP_SHA256_Identifier = rfc4055.rSAES_OAEP_SHA256_Identifier\n\nrSAES_OAEP_SHA384_Params = rfc4055.rSAES_OAEP_SHA384_Params\n\nrSAES_OAEP_SHA384_Identifier = rfc4055.rSAES_OAEP_SHA384_Identifier\n\nrSAES_OAEP_SHA512_Params = rfc4055.rSAES_OAEP_SHA512_Params\n\nrSAES_OAEP_SHA512_Identifier = rfc4055.rSAES_OAEP_SHA512_Identifier\n", "pyasn1_modules/rfc8619.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Algorithm Identifiers for HKDF\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8619.txt\n#\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# Object Identifiers\n\nid_alg_hkdf_with_sha256 = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.28')\n\n\nid_alg_hkdf_with_sha384 = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.29')\n\n\nid_alg_hkdf_with_sha512 = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.30')\n\n\n# Key Derivation Algorithm Identifiers\n\nkda_hkdf_with_sha256 = rfc5280.AlgorithmIdentifier()\nkda_hkdf_with_sha256['algorithm'] = id_alg_hkdf_with_sha256\n# kda_hkdf_with_sha256['parameters'] are absent\n\n\nkda_hkdf_with_sha384 = rfc5280.AlgorithmIdentifier()\nkda_hkdf_with_sha384['algorithm'] = id_alg_hkdf_with_sha384\n# kda_hkdf_with_sha384['parameters'] are absent\n\n\nkda_hkdf_with_sha512 = rfc5280.AlgorithmIdentifier()\nkda_hkdf_with_sha512['algorithm'] = id_alg_hkdf_with_sha512\n# kda_hkdf_with_sha512['parameters'] are absent\n", "pyasn1_modules/rfc6031.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CMS Symmetric Key Package Content Type\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6031.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc6019\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n    return univ.ObjectIdentifier(output)\n\n\nMAX = float('inf')\n\nid_pskc = univ.ObjectIdentifier('1.2.840.113549.1.9.16.12')\n\n\n# Symmetric Key Package Attributes\n\nid_pskc_manufacturer = _OID(id_pskc, 1)\n\nclass at_pskc_manufacturer(char.UTF8String):\n    pass\n\n\nid_pskc_serialNo = _OID(id_pskc, 2)\n\nclass at_pskc_serialNo(char.UTF8String):\n    pass\n\n\nid_pskc_model = _OID(id_pskc, 3)\n\nclass at_pskc_model(char.UTF8String):\n    pass\n\n\nid_pskc_issueNo = _OID(id_pskc, 4)\n\nclass at_pskc_issueNo(char.UTF8String):\n    pass\n\n\nid_pskc_deviceBinding = _OID(id_pskc, 5)\n\nclass at_pskc_deviceBinding(char.UTF8String):\n    pass\n\n\nid_pskc_deviceStartDate = _OID(id_pskc, 6)\n\nclass at_pskc_deviceStartDate(useful.GeneralizedTime):\n    pass\n\n\nid_pskc_deviceExpiryDate = _OID(id_pskc, 7)\n\nclass at_pskc_deviceExpiryDate(useful.GeneralizedTime):\n    pass\n\n\nid_pskc_moduleId = _OID(id_pskc, 8)\n\nclass at_pskc_moduleId(char.UTF8String):\n    pass\n\n\nid_pskc_deviceUserId = _OID(id_pskc, 26)\n\nclass at_pskc_deviceUserId(char.UTF8String):\n    pass\n\n\n# Symmetric Key Attributes\n\nid_pskc_keyId = _OID(id_pskc, 9)\n\nclass at_pskc_keyUserId(char.UTF8String):\n    pass\n\n\nid_pskc_algorithm = _OID(id_pskc, 10)\n\nclass at_pskc_algorithm(char.UTF8String):\n    pass\n\n\nid_pskc_issuer = _OID(id_pskc, 11)\n\nclass at_pskc_issuer(char.UTF8String):\n    pass\n\n\nid_pskc_keyProfileId = _OID(id_pskc, 12)\n\nclass at_pskc_keyProfileId(char.UTF8String):\n    pass\n\n\nid_pskc_keyReference = _OID(id_pskc, 13)\n\nclass at_pskc_keyReference(char.UTF8String):\n    pass\n\n\nid_pskc_friendlyName = _OID(id_pskc, 14)\n\nclass FriendlyName(univ.Sequence):\n    pass\n\nFriendlyName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('friendlyName', char.UTF8String()),\n    namedtype.OptionalNamedType('friendlyNameLangTag', char.UTF8String())\n)\n\nclass at_pskc_friendlyName(FriendlyName):\n    pass\n\n\nid_pskc_algorithmParameters = _OID(id_pskc, 15)\n\nclass Encoding(char.UTF8String):\n    pass\n\nEncoding.namedValues = namedval.NamedValues(\n    ('dec',   \"DECIMAL\"),\n    ('hex',   \"HEXADECIMAL\"),\n    ('alpha', \"ALPHANUMERIC\"),\n    ('b64',   \"BASE64\"),\n    ('bin',   \"BINARY\")\n)\n\nEncoding.subtypeSpec = constraint.SingleValueConstraint(\n    \"DECIMAL\", \"HEXADECIMAL\", \"ALPHANUMERIC\", \"BASE64\", \"BINARY\" )\n\nclass ChallengeFormat(univ.Sequence):\n    pass\n\nChallengeFormat.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('encoding', Encoding()),\n    namedtype.DefaultedNamedType('checkDigit',\n        univ.Boolean().subtype(value=0)),\n    namedtype.NamedType('min', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, MAX))),\n    namedtype.NamedType('max', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, MAX)))\n)\n\nclass ResponseFormat(univ.Sequence):\n    pass\n\nResponseFormat.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('encoding', Encoding()),\n    namedtype.NamedType('length', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, MAX))),\n    namedtype.DefaultedNamedType('checkDigit',\n        univ.Boolean().subtype(value=0))\n)\n\nclass PSKCAlgorithmParameters(univ.Choice):\n    pass\n\nPSKCAlgorithmParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('suite', char.UTF8String()),\n    namedtype.NamedType('challengeFormat', ChallengeFormat().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('responseFormat', ResponseFormat().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\nclass at_pskc_algorithmParameters(PSKCAlgorithmParameters):\n    pass\n\n\nid_pskc_counter = _OID(id_pskc, 16)\n\nclass at_pskc_counter(univ.Integer):\n    pass\n\nat_pskc_counter.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nid_pskc_time = _OID(id_pskc, 17)\n\nclass at_pskc_time(rfc6019.BinaryTime):\n    pass\n\n\nid_pskc_timeInterval = _OID(id_pskc, 18)\n\nclass at_pskc_timeInterval(univ.Integer):\n    pass\n\nat_pskc_timeInterval.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nid_pskc_timeDrift = _OID(id_pskc, 19)\n\nclass at_pskc_timeDrift(univ.Integer):\n    pass\n\nat_pskc_timeDrift.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nid_pskc_valueMAC = _OID(id_pskc, 20)\n\nclass ValueMac(univ.Sequence):\n    pass\n\nValueMac.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('macAlgorithm', char.UTF8String()),\n    namedtype.NamedType('mac', char.UTF8String())\n)\n\nclass at_pskc_valueMAC(ValueMac):\n    pass\n\n\nid_pskc_keyUserId = _OID(id_pskc, 27)\n\nclass at_pskc_keyId(char.UTF8String):\n    pass\n\n\nid_pskc_keyStartDate = _OID(id_pskc, 21)\n\nclass at_pskc_keyStartDate(useful.GeneralizedTime):\n    pass\n\n\nid_pskc_keyExpiryDate = _OID(id_pskc, 22)\n\nclass at_pskc_keyExpiryDate(useful.GeneralizedTime):\n    pass\n\n\nid_pskc_numberOfTransactions = _OID(id_pskc, 23)\n\nclass at_pskc_numberOfTransactions(univ.Integer):\n    pass\n    \nat_pskc_numberOfTransactions.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nid_pskc_keyUsages = _OID(id_pskc, 24)\n\nclass PSKCKeyUsage(char.UTF8String):\n    pass\n\nPSKCKeyUsage.namedValues = namedval.NamedValues(\n    ('otp',       \"OTP\"),\n    ('cr',        \"CR\"),\n    ('encrypt',   \"Encrypt\"),\n    ('integrity', \"Integrity\"),\n    ('verify',    \"Verify\"),\n    ('unlock',    \"Unlock\"),\n    ('decrypt',   \"Decrypt\"),\n    ('keywrap',   \"KeyWrap\"),\n    ('unwrap',    \"Unwrap\"),\n    ('derive',    \"Derive\"),\n    ('generate',  \"Generate\")\n)\n\nPSKCKeyUsage.subtypeSpec = constraint.SingleValueConstraint(\n    \"OTP\", \"CR\", \"Encrypt\", \"Integrity\", \"Verify\", \"Unlock\",\n    \"Decrypt\", \"KeyWrap\", \"Unwrap\", \"Derive\", \"Generate\" )\n\nclass PSKCKeyUsages(univ.SequenceOf):\n    pass\n\nPSKCKeyUsages.componentType = PSKCKeyUsage()\n\nclass at_pskc_keyUsage(PSKCKeyUsages):\n    pass\n\n\nid_pskc_pinPolicy = _OID(id_pskc, 25)\n\nclass PINUsageMode(char.UTF8String):\n    pass\n\nPINUsageMode.namedValues = namedval.NamedValues(\n    (\"local\",       \"Local\"),\n    (\"prepend\",     \"Prepend\"),\n    (\"append\",      \"Append\"),\n    (\"algorithmic\", \"Algorithmic\")\n)\n\nPINUsageMode.subtypeSpec = constraint.SingleValueConstraint(\n    \"Local\", \"Prepend\", \"Append\", \"Algorithmic\" )\n\nclass PINPolicy(univ.Sequence):\n    pass\n\nPINPolicy.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('pinKeyId', char.UTF8String().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('pinUsageMode', PINUsageMode().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('maxFailedAttempts', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, MAX)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('minLength', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, MAX)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.OptionalNamedType('maxLength', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, MAX)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n    namedtype.OptionalNamedType('pinEncoding', Encoding().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5)))\n)\n\nclass at_pskc_pinPolicy(PINPolicy):\n    pass\n\n\n# Map of Symmetric Key Package Attribute OIDs to Attributes\n\nsKeyPkgAttributesMap = {\n     id_pskc_manufacturer: at_pskc_manufacturer(),\n     id_pskc_serialNo: at_pskc_serialNo(),\n     id_pskc_model: at_pskc_model(),\n     id_pskc_issueNo: at_pskc_issueNo(),\n     id_pskc_deviceBinding: at_pskc_deviceBinding(),\n     id_pskc_deviceStartDate: at_pskc_deviceStartDate(),\n     id_pskc_deviceExpiryDate: at_pskc_deviceExpiryDate(),\n     id_pskc_moduleId: at_pskc_moduleId(),\n     id_pskc_deviceUserId: at_pskc_deviceUserId(),\n}\n\n\n# Map of Symmetric Key Attribute OIDs to Attributes\n\nsKeyAttributesMap = {\n     id_pskc_keyId: at_pskc_keyId(),\n     id_pskc_algorithm: at_pskc_algorithm(),\n     id_pskc_issuer: at_pskc_issuer(),\n     id_pskc_keyProfileId: at_pskc_keyProfileId(),\n     id_pskc_keyReference: at_pskc_keyReference(),\n     id_pskc_friendlyName: at_pskc_friendlyName(),\n     id_pskc_algorithmParameters: at_pskc_algorithmParameters(),\n     id_pskc_counter: at_pskc_counter(),\n     id_pskc_time: at_pskc_time(),\n     id_pskc_timeInterval: at_pskc_timeInterval(),\n     id_pskc_timeDrift: at_pskc_timeDrift(),\n     id_pskc_valueMAC: at_pskc_valueMAC(),\n     id_pskc_keyUserId: at_pskc_keyUserId(),\n     id_pskc_keyStartDate: at_pskc_keyStartDate(),\n     id_pskc_keyExpiryDate: at_pskc_keyExpiryDate(),\n     id_pskc_numberOfTransactions: at_pskc_numberOfTransactions(),\n     id_pskc_keyUsages: at_pskc_keyUsage(),\n     id_pskc_pinPolicy: at_pskc_pinPolicy(),\n}\n\n\n# This definition replaces Attribute() from rfc5652.py; it is the same except\n# that opentype is added with sKeyPkgAttributesMap and sKeyAttributesMap\n\nclass AttributeType(univ.ObjectIdentifier):\n    pass\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass SKeyAttribute(univ.Sequence):\n    pass\n\nSKeyAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', AttributeType()),\n    namedtype.NamedType('attrValues',\n        univ.SetOf(componentType=AttributeValue()),\n        openType=opentype.OpenType('attrType', sKeyAttributesMap)\n    )\n)\n\n\nclass SKeyPkgAttribute(univ.Sequence):\n    pass\n\nSKeyPkgAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', AttributeType()),\n    namedtype.NamedType('attrValues',\n        univ.SetOf(componentType=AttributeValue()),\n        openType=opentype.OpenType('attrType', sKeyPkgAttributesMap)\n    )\n)\n\n\n# Symmetric Key Package Content Type\n\nid_ct_KP_sKeyPackage = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.25')\n\n\nclass KeyPkgVersion(univ.Integer):\n    pass\n\nKeyPkgVersion.namedValues = namedval.NamedValues(\n    ('v1', 1)\n)\n\n\nclass OneSymmetricKey(univ.Sequence):\n    pass\n\nOneSymmetricKey.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('sKeyAttrs',\n        univ.SequenceOf(componentType=SKeyAttribute()).subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.OptionalNamedType('sKey', univ.OctetString())\n)\n\nOneSymmetricKey.sizeSpec = univ.Sequence.sizeSpec + constraint.ValueSizeConstraint(1, 2)\n\n\nclass SymmetricKeys(univ.SequenceOf):\n    pass\n\nSymmetricKeys.componentType = OneSymmetricKey()\nSymmetricKeys.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass SymmetricKeyPackage(univ.Sequence):\n    pass\n\nSymmetricKeyPackage.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', KeyPkgVersion().subtype(value='v1')),\n    namedtype.OptionalNamedType('sKeyPkgAttrs',\n        univ.SequenceOf(componentType=SKeyPkgAttribute()).subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, MAX),\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('sKeys', SymmetricKeys())\n)\n\n\n# Map of Content Type OIDs to Content Types are\n# added to the ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_KP_sKeyPackage: SymmetricKeyPackage(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc8702.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2020, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SHAKE One-way Hash Functions for CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8702.txt\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc8692\n\n\n# Imports fprm RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\n\n# Imports from RFC 8692\n\nid_shake128 = rfc8692.id_shake128\n\nmda_shake128 = rfc8692.mda_shake128\n\nid_shake256 = rfc8692.id_shake256\n\nmda_shake256 = rfc8692.mda_shake256\n\nid_RSASSA_PSS_SHAKE128 = rfc8692.id_RSASSA_PSS_SHAKE128\n\nsa_rSASSA_PSS_SHAKE128 = rfc8692.sa_rSASSA_PSS_SHAKE128\n\npk_rsaSSA_PSS_SHAKE128 = rfc8692.pk_rsaSSA_PSS_SHAKE128\n\nid_RSASSA_PSS_SHAKE256 = rfc8692.id_RSASSA_PSS_SHAKE256\n\nsa_rSASSA_PSS_SHAKE256 = rfc8692.sa_rSASSA_PSS_SHAKE256\n\npk_rsaSSA_PSS_SHAKE256 = rfc8692.pk_rsaSSA_PSS_SHAKE256\n\nid_ecdsa_with_shake128 = rfc8692.id_ecdsa_with_shake128\n\nsa_ecdsa_with_shake128 = rfc8692.sa_ecdsa_with_shake128\n\nid_ecdsa_with_shake256 = rfc8692.id_ecdsa_with_shake256\n\nsa_ecdsa_with_shake256 = rfc8692.sa_ecdsa_with_shake256\n\npk_ec = rfc8692.pk_ec\n\n\n# KMAC with SHAKE128\n\nid_KMACWithSHAKE128 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.19')\n\n\nclass KMACwithSHAKE128_params(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('kMACOutputLength',\n            univ.Integer().subtype(value=256)),\n        namedtype.DefaultedNamedType('customizationString',\n            univ.OctetString().subtype(value=''))\n    )\n\n\nmaca_KMACwithSHAKE128 = AlgorithmIdentifier()\nmaca_KMACwithSHAKE128['algorithm'] = id_KMACWithSHAKE128\nmaca_KMACwithSHAKE128['parameters'] = KMACwithSHAKE128_params()\n\n\n# KMAC with SHAKE256\n\nid_KMACWithSHAKE256 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.20')\n\n\nclass KMACwithSHAKE256_params(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('kMACOutputLength',\n            univ.Integer().subtype(value=512)),\n        namedtype.DefaultedNamedType('customizationString',\n            univ.OctetString().subtype(value=''))\n    )\n\n\nmaca_KMACwithSHAKE256 = AlgorithmIdentifier()\nmaca_KMACwithSHAKE256['algorithm'] = id_KMACWithSHAKE256\nmaca_KMACwithSHAKE256['parameters'] = KMACwithSHAKE256_params()\n\n\n# Update the Algorithm Identifier map in rfc5280.py\n\n_algorithmIdentifierMapUpdate = {\n    id_KMACWithSHAKE128: KMACwithSHAKE128_params(),\n    id_KMACWithSHAKE256: KMACwithSHAKE256_params(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc2631.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Diffie-Hellman Key Agreement\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc2631.txt\n# https://www.rfc-editor.org/errata/eid5897\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\n\nclass KeySpecificInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('algorithm', univ.ObjectIdentifier()),\n        namedtype.NamedType('counter', univ.OctetString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(4, 4)))\n    )\n\n\nclass OtherInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('keyInfo', KeySpecificInfo()),\n        namedtype.OptionalNamedType('partyAInfo', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('suppPubInfo', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n", "pyasn1_modules/rfc7914.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n#The scrypt Password-Based Key Derivation Function\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8520.txt\n# https://www.rfc-editor.org/errata/eid5871\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\nid_scrypt = univ.ObjectIdentifier('1.3.6.1.4.1.11591.4.11')\n\n\nclass Scrypt_params(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('salt',\n            univ.OctetString()),\n        namedtype.NamedType('costParameter',\n            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, MAX))),\n        namedtype.NamedType('blockSize',\n            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, MAX))),\n        namedtype.NamedType('parallelizationParameter',\n            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, MAX))),\n        namedtype.OptionalNamedType('keyLength',\n            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, MAX)))\n    )\n\n\n# Update the Algorithm Identifier map in rfc5280.py\n\n_algorithmIdentifierMapUpdate = {\n    id_scrypt: Scrypt_params(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc1157.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SNMPv1 message syntax\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc1157.txt\n#\n# Sample captures from:\n# http://wiki.wireshark.org/SampleCaptures/\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc1155\n\n\nclass Version(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('version-1', 0)\n    )\n    defaultValue = 0\n\n\nclass Community(univ.OctetString):\n    pass\n\n\nclass RequestID(univ.Integer):\n    pass\n\n\nclass ErrorStatus(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('noError', 0),\n        ('tooBig', 1),\n        ('noSuchName', 2),\n        ('badValue', 3),\n        ('readOnly', 4),\n        ('genErr', 5)\n    )\n\n\nclass ErrorIndex(univ.Integer):\n    pass\n\n\nclass VarBind(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('name', rfc1155.ObjectName()),\n        namedtype.NamedType('value', rfc1155.ObjectSyntax())\n    )\n\n\nclass VarBindList(univ.SequenceOf):\n    componentType = VarBind()\n\n\nclass _RequestBase(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('request-id', RequestID()),\n        namedtype.NamedType('error-status', ErrorStatus()),\n        namedtype.NamedType('error-index', ErrorIndex()),\n        namedtype.NamedType('variable-bindings', VarBindList())\n    )\n\n\nclass GetRequestPDU(_RequestBase):\n    tagSet = _RequestBase.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)\n    )\n\n\nclass GetNextRequestPDU(_RequestBase):\n    tagSet = _RequestBase.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)\n    )\n\n\nclass GetResponsePDU(_RequestBase):\n    tagSet = _RequestBase.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)\n    )\n\n\nclass SetRequestPDU(_RequestBase):\n    tagSet = _RequestBase.tagSet.tagImplicitly(\n        tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)\n    )\n\n\nclass TrapPDU(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('enterprise', univ.ObjectIdentifier()),\n        namedtype.NamedType('agent-addr', rfc1155.NetworkAddress()),\n        namedtype.NamedType('generic-trap', univ.Integer().clone(\n            namedValues=namedval.NamedValues(('coldStart', 0), ('warmStart', 1), ('linkDown', 2), ('linkUp', 3),\n                                             ('authenticationFailure', 4), ('egpNeighborLoss', 5),\n                                             ('enterpriseSpecific', 6)))),\n        namedtype.NamedType('specific-trap', univ.Integer()),\n        namedtype.NamedType('time-stamp', rfc1155.TimeTicks()),\n        namedtype.NamedType('variable-bindings', VarBindList())\n    )\n\n\nclass Pdus(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('get-request', GetRequestPDU()),\n        namedtype.NamedType('get-next-request', GetNextRequestPDU()),\n        namedtype.NamedType('get-response', GetResponsePDU()),\n        namedtype.NamedType('set-request', SetRequestPDU()),\n        namedtype.NamedType('trap', TrapPDU())\n    )\n\n\nclass Message(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('community', Community()),\n        namedtype.NamedType('data', Pdus())\n    )\n", "pyasn1_modules/rfc8708.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley\n#\n# Copyright (c) 2020, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# HSS/LMS Hash-based Signature Algorithm for CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8708.txt\n\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# Object Identifiers\n\nid_alg_hss_lms_hashsig = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.17')\n\nid_alg_mts_hashsig = id_alg_hss_lms_hashsig\n\n\n# Signature Algorithm Identifier\n\nsa_HSS_LMS_HashSig = rfc5280.AlgorithmIdentifier()\nsa_HSS_LMS_HashSig['algorithm'] = id_alg_hss_lms_hashsig\n# sa_HSS_LMS_HashSig['parameters'] is alway absent\n\n\n# Public Key\n\nclass HSS_LMS_HashSig_PublicKey(univ.OctetString):\n    pass\n\n\npk_HSS_LMS_HashSig = rfc5280.SubjectPublicKeyInfo()\npk_HSS_LMS_HashSig['algorithm'] = sa_HSS_LMS_HashSig\n# pk_HSS_LMS_HashSig['parameters'] CONTAINS a DER-encoded HSS_LMS_HashSig_PublicKey\n", "pyasn1_modules/rfc6019.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n# Modified by Russ Housley to add a map for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# BinaryTime: An Alternate Format for Representing Date and Time\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6019.txt\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\n# BinaryTime: Represent date and time as an integer \n\nclass BinaryTime(univ.Integer):\n    pass\n\nBinaryTime.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\n# CMS Attribute for representing signing time in BinaryTime\n\nid_aa_binarySigningTime = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.46')\n\nclass BinarySigningTime(BinaryTime):\n    pass\n\n\n# Map of Attribute Type OIDs to Attributes ia added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_binarySigningTime: BinarySigningTime(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc6487.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Profile for X.509 PKIX Resource Certificates\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6487.txt\n#\n\nfrom pyasn1.type import univ\n\nid_pkix = univ.ObjectIdentifier('1.3.6.1.5.5.7')\n\nid_ad = id_pkix + (48, )\n\nid_ad_rpkiManifest = id_ad + (10, )\nid_ad_signedObject = id_ad + (11, )\n", "pyasn1_modules/rfc5914.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Trust Anchor Format\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5914.txt\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nMAX = float('inf')\n\nCertificate = rfc5280.Certificate\n\nName = rfc5280.Name\n\nExtensions = rfc5280.Extensions\n\nSubjectPublicKeyInfo = rfc5280.SubjectPublicKeyInfo\n\nTBSCertificate = rfc5280.TBSCertificate\n\nCertificatePolicies = rfc5280.CertificatePolicies\n\nKeyIdentifier = rfc5280.KeyIdentifier\n\nNameConstraints = rfc5280.NameConstraints\n\n\nclass CertPolicyFlags(univ.BitString):\n    pass\n\nCertPolicyFlags.namedValues = namedval.NamedValues(\n    ('inhibitPolicyMapping', 0),\n    ('requireExplicitPolicy', 1),\n    ('inhibitAnyPolicy', 2)\n)\n\n\nclass CertPathControls(univ.Sequence):\n    pass\n\nCertPathControls.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('taName', Name()),\n    namedtype.OptionalNamedType('certificate', Certificate().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('policySet', CertificatePolicies().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('policyFlags', CertPolicyFlags().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('nameConstr', NameConstraints().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.OptionalNamedType('pathLenConstraint', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, MAX)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))\n)\n\n\nclass TrustAnchorTitle(char.UTF8String):\n    pass\n\nTrustAnchorTitle.subtypeSpec = constraint.ValueSizeConstraint(1, 64)\n\n\nclass TrustAnchorInfoVersion(univ.Integer):\n    pass\n\nTrustAnchorInfoVersion.namedValues = namedval.NamedValues(\n    ('v1', 1)\n)\n\n\nclass TrustAnchorInfo(univ.Sequence):\n    pass\n\nTrustAnchorInfo.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', TrustAnchorInfoVersion().subtype(value='v1')),\n    namedtype.NamedType('pubKey', SubjectPublicKeyInfo()),\n    namedtype.NamedType('keyId', KeyIdentifier()),\n    namedtype.OptionalNamedType('taTitle', TrustAnchorTitle()),\n    namedtype.OptionalNamedType('certPath', CertPathControls()),\n    namedtype.OptionalNamedType('exts', Extensions().subtype(explicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('taTitleLangTag', char.UTF8String().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\nclass TrustAnchorChoice(univ.Choice):\n    pass\n\nTrustAnchorChoice.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certificate', Certificate()),\n    namedtype.NamedType('tbsCert', TBSCertificate().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('taInfo', TrustAnchorInfo().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n)\n\n\nid_ct_trustAnchorList = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.34')\n\nclass TrustAnchorList(univ.SequenceOf):\n    pass\n\nTrustAnchorList.componentType = TrustAnchorChoice()\nTrustAnchorList.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n", "pyasn1_modules/rfc2985.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS#9: Selected Attribute Types (Version 2.0)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc2985.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc7292\nfrom pyasn1_modules import rfc5958\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5280\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nMAX = float('inf')\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nAttribute = rfc5280.Attribute\n\nEmailAddress = rfc5280.EmailAddress\n\nExtensions = rfc5280.Extensions\n\nTime = rfc5280.Time\n\nX520countryName = rfc5280.X520countryName\n\nX520SerialNumber = rfc5280.X520SerialNumber\n\n\n# Imports from RFC 5652\n\nContentInfo = rfc5652.ContentInfo\n\nContentType = rfc5652.ContentType\n\nCountersignature = rfc5652.Countersignature\n\nMessageDigest = rfc5652.MessageDigest\n\nSignerInfo = rfc5652.SignerInfo\n\nSigningTime = rfc5652.SigningTime\n\n\n# Imports from RFC 5958\n\nEncryptedPrivateKeyInfo = rfc5958.EncryptedPrivateKeyInfo\n\n\n# Imports from RFC 7292\n\nPFX = rfc7292.PFX\n\n\n# TODO:\n# Need a place to import PKCS15Token; it does not yet appear in an RFC\n\n\n# SingleAttribute is the same as Attribute in RFC 5280, except that the\n# attrValues SET must have one and only one member\n\nclass AttributeType(univ.ObjectIdentifier):\n    pass\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass AttributeValues(univ.SetOf):\n    pass\n\nAttributeValues.componentType = AttributeValue()\n\n\nclass SingleAttributeValues(univ.SetOf):\n    pass\n\nSingleAttributeValues.componentType = AttributeValue()\n\n\nclass SingleAttribute(univ.Sequence):\n    pass\n\nSingleAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', AttributeType()),\n    namedtype.NamedType('values',\n        AttributeValues().subtype(sizeSpec=constraint.ValueSizeConstraint(1, 1)),\n        openType=opentype.OpenType('type', rfc5280.certificateAttributesMap)\n    )\n)\n\n\n# CMSAttribute is the same as Attribute in RFC 5652, and CMSSingleAttribute\n# is the companion where the attrValues SET must have one and only one member\n\nCMSAttribute = rfc5652.Attribute\n\n\nclass CMSSingleAttribute(univ.Sequence):\n    pass\n\nCMSSingleAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', AttributeType()),\n    namedtype.NamedType('attrValues',\n        AttributeValues().subtype(sizeSpec=constraint.ValueSizeConstraint(1, 1)),\n        openType=opentype.OpenType('attrType', rfc5652.cmsAttributesMap)\n    )\n)\n\n\n# DirectoryString is the same as RFC 5280, except the length is limited to 255\n\nclass DirectoryString(univ.Choice):\n    pass\n\nDirectoryString.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255)))\n)\n\n\n# PKCS9String is DirectoryString with an additional choice of IA5String,\n# and the SIZE is limited to 255\n\nclass PKCS9String(univ.Choice):\n    pass\n\nPKCS9String.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('ia5String', char.IA5String().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('directoryString', DirectoryString())\n)\n\n\n# Upper Bounds\n\npkcs_9_ub_pkcs9String = univ.Integer(255)\n\npkcs_9_ub_challengePassword = univ.Integer(pkcs_9_ub_pkcs9String)\n\npkcs_9_ub_emailAddress = univ.Integer(pkcs_9_ub_pkcs9String)\n\npkcs_9_ub_friendlyName = univ.Integer(pkcs_9_ub_pkcs9String)\n\npkcs_9_ub_match = univ.Integer(pkcs_9_ub_pkcs9String)\n\npkcs_9_ub_signingDescription = univ.Integer(pkcs_9_ub_pkcs9String)\n\npkcs_9_ub_unstructuredAddress = univ.Integer(pkcs_9_ub_pkcs9String)\n\npkcs_9_ub_unstructuredName = univ.Integer(pkcs_9_ub_pkcs9String)\n\n\nub_name = univ.Integer(32768)\n\npkcs_9_ub_placeOfBirth = univ.Integer(ub_name)\n\npkcs_9_ub_pseudonym = univ.Integer(ub_name)\n\n\n# Object Identifier Arcs\n\nietf_at = _OID(1, 3, 6, 1, 5, 5, 7, 9)\n\nid_at = _OID(2, 5, 4)\n\npkcs_9 = _OID(1, 2, 840, 113549, 1, 9)\n\npkcs_9_mo = _OID(pkcs_9, 0)\n\nsmime = _OID(pkcs_9, 16)\n\ncertTypes = _OID(pkcs_9, 22)\n\ncrlTypes = _OID(pkcs_9, 23)\n\npkcs_9_oc = _OID(pkcs_9, 24)\n\npkcs_9_at = _OID(pkcs_9, 25)\n\npkcs_9_sx = _OID(pkcs_9, 26)\n\npkcs_9_mr = _OID(pkcs_9, 27)\n\n\n# Object Identifiers for Syntaxes for use with LDAP-accessible directories\n\npkcs_9_sx_pkcs9String = _OID(pkcs_9_sx, 1)\n\npkcs_9_sx_signingTime = _OID(pkcs_9_sx, 2)\n\n\n# Object Identifiers for object classes\n\npkcs_9_oc_pkcsEntity = _OID(pkcs_9_oc, 1)\n\npkcs_9_oc_naturalPerson = _OID(pkcs_9_oc, 2)\n\n\n# Object Identifiers for matching rules\n\npkcs_9_mr_caseIgnoreMatch = _OID(pkcs_9_mr, 1)\n\npkcs_9_mr_signingTimeMatch = _OID(pkcs_9_mr, 2)\n\n\n# PKCS #7 PDU\n\npkcs_9_at_pkcs7PDU = _OID(pkcs_9_at, 5)\n\npKCS7PDU = Attribute()\npKCS7PDU['type'] = pkcs_9_at_pkcs7PDU\npKCS7PDU['values'][0] = ContentInfo()\n\n\n# PKCS #12 token\n\npkcs_9_at_userPKCS12 = _OID(2, 16, 840, 1, 113730, 3, 1, 216)\n\nuserPKCS12 = Attribute()\nuserPKCS12['type'] = pkcs_9_at_userPKCS12\nuserPKCS12['values'][0] = PFX()\n\n\n# PKCS #15 token\n\npkcs_9_at_pkcs15Token = _OID(pkcs_9_at, 1)\n\n# TODO: Once PKCS15Token can be imported, this can be included\n# \n# pKCS15Token = Attribute()\n# userPKCS12['type'] = pkcs_9_at_pkcs15Token\n# userPKCS12['values'][0] = PKCS15Token()\n\n\n# PKCS #8 encrypted private key information\n\npkcs_9_at_encryptedPrivateKeyInfo = _OID(pkcs_9_at, 2)\n\nencryptedPrivateKeyInfo = Attribute()\nencryptedPrivateKeyInfo['type'] = pkcs_9_at_encryptedPrivateKeyInfo\nencryptedPrivateKeyInfo['values'][0] = EncryptedPrivateKeyInfo()\n\n\n# Electronic-mail address\n\npkcs_9_at_emailAddress = rfc5280.id_emailAddress\n\nemailAddress = Attribute()\nemailAddress['type'] = pkcs_9_at_emailAddress\nemailAddress['values'][0] = EmailAddress()\n\n\n# Unstructured name\n\npkcs_9_at_unstructuredName = _OID(pkcs_9, 2)\n\nunstructuredName = Attribute()\nunstructuredName['type'] = pkcs_9_at_unstructuredName\nunstructuredName['values'][0] = PKCS9String()\n\n\n# Unstructured address\n\npkcs_9_at_unstructuredAddress = _OID(pkcs_9, 8)\n\nunstructuredAddress = Attribute()\nunstructuredAddress['type'] = pkcs_9_at_unstructuredAddress\nunstructuredAddress['values'][0] = DirectoryString()\n\n\n# Date of birth\n\npkcs_9_at_dateOfBirth = _OID(ietf_at, 1)\n\ndateOfBirth = SingleAttribute()\ndateOfBirth['type'] = pkcs_9_at_dateOfBirth\ndateOfBirth['values'][0] = useful.GeneralizedTime()\n\n\n# Place of birth\n\npkcs_9_at_placeOfBirth = _OID(ietf_at, 2)\n\nplaceOfBirth = SingleAttribute()\nplaceOfBirth['type'] = pkcs_9_at_placeOfBirth\nplaceOfBirth['values'][0] = DirectoryString()\n\n\n# Gender\n\nclass GenderString(char.PrintableString):\n    pass\n\nGenderString.subtypeSpec = constraint.ValueSizeConstraint(1, 1)\nGenderString.subtypeSpec = constraint.SingleValueConstraint(\"M\", \"F\", \"m\", \"f\")\n\n\npkcs_9_at_gender = _OID(ietf_at, 3)\n\ngender = SingleAttribute()\ngender['type'] = pkcs_9_at_gender\ngender['values'][0] = GenderString()\n\n\n# Country of citizenship\n\npkcs_9_at_countryOfCitizenship = _OID(ietf_at, 4)\n\ncountryOfCitizenship = Attribute()\ncountryOfCitizenship['type'] = pkcs_9_at_countryOfCitizenship\ncountryOfCitizenship['values'][0] = X520countryName()\n\n\n#  Country of residence\n\npkcs_9_at_countryOfResidence = _OID(ietf_at, 5)\n\ncountryOfResidence = Attribute()\ncountryOfResidence['type'] = pkcs_9_at_countryOfResidence\ncountryOfResidence['values'][0] = X520countryName()\n\n\n# Pseudonym\n\nid_at_pseudonym = _OID(2, 5, 4, 65)\n\npseudonym = Attribute()\npseudonym['type'] = id_at_pseudonym\npseudonym['values'][0] = DirectoryString()\n\n\n# Serial number\n\nid_at_serialNumber = rfc5280.id_at_serialNumber\n\nserialNumber = Attribute()\nserialNumber['type'] = id_at_serialNumber\nserialNumber['values'][0] = X520SerialNumber()\n\n\n# Content type\n\npkcs_9_at_contentType = rfc5652.id_contentType\n\ncontentType = CMSSingleAttribute()\ncontentType['attrType'] = pkcs_9_at_contentType\ncontentType['attrValues'][0] = ContentType()\n\n\n# Message digest\n\npkcs_9_at_messageDigest = rfc5652.id_messageDigest\n\nmessageDigest = CMSSingleAttribute()\nmessageDigest['attrType'] = pkcs_9_at_messageDigest\nmessageDigest['attrValues'][0] = MessageDigest()\n\n\n# Signing time\n\npkcs_9_at_signingTime = rfc5652.id_signingTime\n\nsigningTime = CMSSingleAttribute()\nsigningTime['attrType'] = pkcs_9_at_signingTime\nsigningTime['attrValues'][0] = SigningTime()\n\n\n# Random nonce\n\nclass RandomNonce(univ.OctetString):\n    pass\n\nRandomNonce.subtypeSpec = constraint.ValueSizeConstraint(4, MAX)\n\n\npkcs_9_at_randomNonce = _OID(pkcs_9_at, 3)\n\nrandomNonce = CMSSingleAttribute()\nrandomNonce['attrType'] = pkcs_9_at_randomNonce\nrandomNonce['attrValues'][0] = RandomNonce()\n\n\n# Sequence number\n\nclass SequenceNumber(univ.Integer):\n    pass\n\nSequenceNumber.subtypeSpec = constraint.ValueRangeConstraint(1, MAX)\n\n\npkcs_9_at_sequenceNumber = _OID(pkcs_9_at, 4)\n\nsequenceNumber = CMSSingleAttribute()\nsequenceNumber['attrType'] = pkcs_9_at_sequenceNumber\nsequenceNumber['attrValues'][0] = SequenceNumber()\n\n\n# Countersignature\n\npkcs_9_at_counterSignature = rfc5652.id_countersignature\n\ncounterSignature = CMSAttribute()\ncounterSignature['attrType'] = pkcs_9_at_counterSignature\ncounterSignature['attrValues'][0] = Countersignature()\n\n\n# Challenge password\n\npkcs_9_at_challengePassword = _OID(pkcs_9, 7)\n\nchallengePassword = SingleAttribute()\nchallengePassword['type'] = pkcs_9_at_challengePassword\nchallengePassword['values'][0] = DirectoryString()\n\n\n# Extension request\n\nclass ExtensionRequest(Extensions):\n    pass\n\n\npkcs_9_at_extensionRequest = _OID(pkcs_9, 14)\n\nextensionRequest = SingleAttribute()\nextensionRequest['type'] = pkcs_9_at_extensionRequest\nextensionRequest['values'][0] = ExtensionRequest()\n\n\n# Extended-certificate attributes (deprecated)\n\nclass AttributeSet(univ.SetOf):\n    pass\n\nAttributeSet.componentType = Attribute()\n\n\npkcs_9_at_extendedCertificateAttributes = _OID(pkcs_9, 9)\n\nextendedCertificateAttributes = SingleAttribute()\nextendedCertificateAttributes['type'] = pkcs_9_at_extendedCertificateAttributes\nextendedCertificateAttributes['values'][0] = AttributeSet()\n\n\n# Friendly name\n\nclass FriendlyName(char.BMPString):\n    pass\n\nFriendlyName.subtypeSpec = constraint.ValueSizeConstraint(1, pkcs_9_ub_friendlyName)\n\n\npkcs_9_at_friendlyName = _OID(pkcs_9, 20)\n\nfriendlyName = SingleAttribute()\nfriendlyName['type'] = pkcs_9_at_friendlyName\nfriendlyName['values'][0] = FriendlyName()\n\n\n# Local key identifier\n\npkcs_9_at_localKeyId = _OID(pkcs_9, 21)\n\nlocalKeyId = SingleAttribute()\nlocalKeyId['type'] = pkcs_9_at_localKeyId\nlocalKeyId['values'][0] = univ.OctetString()\n\n\n# Signing description\n\npkcs_9_at_signingDescription = _OID(pkcs_9, 13)\n\nsigningDescription = CMSSingleAttribute()\nsigningDescription['attrType'] = pkcs_9_at_signingDescription\nsigningDescription['attrValues'][0] = DirectoryString()\n\n\n# S/MIME capabilities\n\nclass SMIMECapability(AlgorithmIdentifier):\n    pass\n\n\nclass SMIMECapabilities(univ.SequenceOf):\n    pass\n\nSMIMECapabilities.componentType = SMIMECapability()\n\n\npkcs_9_at_smimeCapabilities = _OID(pkcs_9, 15)\n\nsmimeCapabilities = CMSSingleAttribute()\nsmimeCapabilities['attrType'] = pkcs_9_at_smimeCapabilities\nsmimeCapabilities['attrValues'][0] = SMIMECapabilities()\n\n\n# Certificate Attribute Map\n\n_certificateAttributesMapUpdate = {\n    # Attribute types for use with the \"pkcsEntity\" object class\n    pkcs_9_at_pkcs7PDU: ContentInfo(),\n    pkcs_9_at_userPKCS12: PFX(),\n    # TODO: Once PKCS15Token can be imported, this can be included\n    # pkcs_9_at_pkcs15Token: PKCS15Token(),\n    pkcs_9_at_encryptedPrivateKeyInfo: EncryptedPrivateKeyInfo(),\n    # Attribute types for use with the \"naturalPerson\" object class\n    pkcs_9_at_emailAddress: EmailAddress(),\n    pkcs_9_at_unstructuredName: PKCS9String(),\n    pkcs_9_at_unstructuredAddress: DirectoryString(),\n    pkcs_9_at_dateOfBirth: useful.GeneralizedTime(),\n    pkcs_9_at_placeOfBirth: DirectoryString(),\n    pkcs_9_at_gender: GenderString(),\n    pkcs_9_at_countryOfCitizenship: X520countryName(),\n    pkcs_9_at_countryOfResidence: X520countryName(),\n    id_at_pseudonym: DirectoryString(),\n    id_at_serialNumber: X520SerialNumber(),\n    # Attribute types for use with PKCS #10 certificate requests\n    pkcs_9_at_challengePassword: DirectoryString(),\n    pkcs_9_at_extensionRequest: ExtensionRequest(),\n    pkcs_9_at_extendedCertificateAttributes: AttributeSet(),\n}\n\nrfc5280.certificateAttributesMap.update(_certificateAttributesMapUpdate)\n\n\n# CMS Attribute Map\n\n# Note: pkcs_9_at_smimeCapabilities is not included in the map because\n#       the definition in RFC 5751 is preferred, which produces the same\n#       encoding, but it allows different parameters for SMIMECapability\n#       and AlgorithmIdentifier.\n\n_cmsAttributesMapUpdate = {\n    # Attribute types for use in PKCS #7 data (a.k.a. CMS)\n    pkcs_9_at_contentType: ContentType(),\n    pkcs_9_at_messageDigest: MessageDigest(),\n    pkcs_9_at_signingTime: SigningTime(),\n    pkcs_9_at_randomNonce: RandomNonce(),\n    pkcs_9_at_sequenceNumber: SequenceNumber(),\n    pkcs_9_at_counterSignature: Countersignature(),\n    # Attributes for use in PKCS #12 \"PFX\" PDUs or PKCS #15 tokens\n    pkcs_9_at_friendlyName: FriendlyName(),\n    pkcs_9_at_localKeyId: univ.OctetString(),\n    pkcs_9_at_signingDescription: DirectoryString(),\n    # pkcs_9_at_smimeCapabilities: SMIMECapabilities(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc5752.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Multiple Signatures in Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5752.txt\n# https://www.rfc-editor.org/errata/eid4444\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5035\nfrom pyasn1_modules import rfc5652\n\n\nclass SignAttrsHash(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('algID', rfc5652.DigestAlgorithmIdentifier()),\n        namedtype.NamedType('hash', univ.OctetString())\n    )\n\n\nclass MultipleSignatures(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('bodyHashAlg', rfc5652.DigestAlgorithmIdentifier()),\n        namedtype.NamedType('signAlg', rfc5652.SignatureAlgorithmIdentifier()),\n        namedtype.NamedType('signAttrsHash', SignAttrsHash()),\n        namedtype.OptionalNamedType('cert', rfc5035.ESSCertIDv2())\n    )\n\n\nid_aa_multipleSignatures = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.51')\n\n\n# Map of Attribute Type OIDs to Attributes added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_multipleSignatures: MultipleSignatures(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc8017.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS #1: RSA Cryptography Specifications Version 2.2\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8017.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc2437\nfrom pyasn1_modules import rfc3447\nfrom pyasn1_modules import rfc4055\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# Import Algorithm Identifier from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nclass DigestAlgorithm(AlgorithmIdentifier):\n    pass\n\nclass HashAlgorithm(AlgorithmIdentifier):\n    pass\n\nclass MaskGenAlgorithm(AlgorithmIdentifier):\n    pass\n\nclass PSourceAlgorithm(AlgorithmIdentifier):\n    pass\n\n\n# Object identifiers from NIST SHA2\n\nhashAlgs = univ.ObjectIdentifier('2.16.840.1.101.3.4.2')\nid_sha256 = rfc4055.id_sha256\nid_sha384 = rfc4055.id_sha384\nid_sha512 = rfc4055.id_sha512\nid_sha224 = rfc4055.id_sha224\nid_sha512_224 = hashAlgs + (5, )\nid_sha512_256 = hashAlgs + (6, )\n\n\n# Basic object identifiers\n\npkcs_1 = univ.ObjectIdentifier('1.2.840.113549.1.1')\nrsaEncryption = rfc2437.rsaEncryption\nid_RSAES_OAEP = rfc2437.id_RSAES_OAEP\nid_pSpecified = rfc2437.id_pSpecified\nid_RSASSA_PSS = rfc4055.id_RSASSA_PSS\nmd2WithRSAEncryption = rfc2437.md2WithRSAEncryption\nmd5WithRSAEncryption = rfc2437.md5WithRSAEncryption\nsha1WithRSAEncryption = rfc2437.sha1WithRSAEncryption\nsha224WithRSAEncryption = rfc4055.sha224WithRSAEncryption\nsha256WithRSAEncryption = rfc4055.sha256WithRSAEncryption\nsha384WithRSAEncryption = rfc4055.sha384WithRSAEncryption\nsha512WithRSAEncryption = rfc4055.sha512WithRSAEncryption\nsha512_224WithRSAEncryption = pkcs_1 + (15, )\nsha512_256WithRSAEncryption = pkcs_1 + (16, )\nid_sha1 = rfc2437.id_sha1\nid_md2 = univ.ObjectIdentifier('1.2.840.113549.2.2')\nid_md5 = univ.ObjectIdentifier('1.2.840.113549.2.5')\nid_mgf1 = rfc2437.id_mgf1\n\n\n# Default parameter values\n\nsha1 = rfc4055.sha1Identifier\nSHA1Parameters = univ.Null(\"\")\n\nmgf1SHA1 = rfc4055.mgf1SHA1Identifier\n\nclass EncodingParameters(univ.OctetString):\n    subtypeSpec = constraint.ValueSizeConstraint(0, MAX)\n\npSpecifiedEmpty = rfc4055.pSpecifiedEmptyIdentifier\n\nemptyString = EncodingParameters(value='')\n\n\n# Main structures\n\nclass Version(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('two-prime', 0),\n        ('multi', 1)\n    )\n\nclass TrailerField(univ.Integer):\n    namedValues = namedval.NamedValues(\n       ('trailerFieldBC', 1)\n    )\n\nRSAPublicKey = rfc2437.RSAPublicKey\n\nOtherPrimeInfo = rfc3447.OtherPrimeInfo\nOtherPrimeInfos = rfc3447.OtherPrimeInfos\nRSAPrivateKey = rfc3447.RSAPrivateKey\n\nRSAES_OAEP_params = rfc4055.RSAES_OAEP_params\nrSAES_OAEP_Default_Identifier = rfc4055.rSAES_OAEP_Default_Identifier\n\nRSASSA_PSS_params = rfc4055.RSASSA_PSS_params\nrSASSA_PSS_Default_Identifier = rfc4055.rSASSA_PSS_Default_Identifier\n\n\n# Syntax for the EMSA-PKCS1-v1_5 hash identifier\n\nclass DigestInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('digestAlgorithm', DigestAlgorithm()),\n        namedtype.NamedType('digest', univ.OctetString())\n    )\n\n\n# Update the Algorithm Identifier map\n\n_algorithmIdentifierMapUpdate = {\n    id_sha1: univ.Null(),\n    id_sha224: univ.Null(),\n    id_sha256: univ.Null(),\n    id_sha384: univ.Null(),\n    id_sha512: univ.Null(),\n    id_sha512_224: univ.Null(),\n    id_sha512_256: univ.Null(),\n    id_mgf1: AlgorithmIdentifier(),\n    id_pSpecified: univ.OctetString(),\n    id_RSAES_OAEP: RSAES_OAEP_params(),\n    id_RSASSA_PSS: RSASSA_PSS_params(),\n    md2WithRSAEncryption: univ.Null(),\n    md5WithRSAEncryption: univ.Null(),\n    sha1WithRSAEncryption: univ.Null(),\n    sha224WithRSAEncryption: univ.Null(),\n    sha256WithRSAEncryption: univ.Null(),\n    sha384WithRSAEncryption: univ.Null(),\n    sha512WithRSAEncryption: univ.Null(),\n    sha512_224WithRSAEncryption: univ.Null(),\n    sha512_256WithRSAEncryption: univ.Null(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc3281.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# An Internet Attribute Certificate Profile for Authorization\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc3281.txt\n#\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc3280\n\nMAX = float('inf')\n\n\ndef _buildOid(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nclass ObjectDigestInfo(univ.Sequence):\n    pass\n\n\nObjectDigestInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('digestedObjectType', univ.Enumerated(\n        namedValues=namedval.NamedValues(('publicKey', 0), ('publicKeyCert', 1), ('otherObjectTypes', 2)))),\n    namedtype.OptionalNamedType('otherObjectTypeID', univ.ObjectIdentifier()),\n    namedtype.NamedType('digestAlgorithm', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('objectDigest', univ.BitString())\n)\n\n\nclass IssuerSerial(univ.Sequence):\n    pass\n\n\nIssuerSerial.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuer', rfc3280.GeneralNames()),\n    namedtype.NamedType('serial', rfc3280.CertificateSerialNumber()),\n    namedtype.OptionalNamedType('issuerUID', rfc3280.UniqueIdentifier())\n)\n\n\nclass TargetCert(univ.Sequence):\n    pass\n\n\nTargetCert.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('targetCertificate', IssuerSerial()),\n    namedtype.OptionalNamedType('targetName', rfc3280.GeneralName()),\n    namedtype.OptionalNamedType('certDigestInfo', ObjectDigestInfo())\n)\n\n\nclass Target(univ.Choice):\n    pass\n\n\nTarget.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('targetName', rfc3280.GeneralName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('targetGroup', rfc3280.GeneralName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('targetCert',\n                        TargetCert().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n)\n\n\nclass Targets(univ.SequenceOf):\n    pass\n\n\nTargets.componentType = Target()\n\n\nclass ProxyInfo(univ.SequenceOf):\n    pass\n\n\nProxyInfo.componentType = Targets()\n\nid_at_role = _buildOid(rfc3280.id_at, 72)\n\nid_pe_aaControls = _buildOid(rfc3280.id_pe, 6)\n\nid_ce_targetInformation = _buildOid(rfc3280.id_ce, 55)\n\nid_pe_ac_auditIdentity = _buildOid(rfc3280.id_pe, 4)\n\n\nclass ClassList(univ.BitString):\n    pass\n\n\nClassList.namedValues = namedval.NamedValues(\n    ('unmarked', 0),\n    ('unclassified', 1),\n    ('restricted', 2),\n    ('confidential', 3),\n    ('secret', 4),\n    ('topSecret', 5)\n)\n\n\nclass SecurityCategory(univ.Sequence):\n    pass\n\n\nSecurityCategory.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', univ.ObjectIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('value', univ.Any().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass Clearance(univ.Sequence):\n    pass\n\n\nClearance.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('policyId', univ.ObjectIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.DefaultedNamedType('classList',\n                                 ClassList().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n                                                                         tag.tagFormatSimple, 1)).subtype(\n                                     value=\"unclassified\")),\n    namedtype.OptionalNamedType('securityCategories', univ.SetOf(componentType=SecurityCategory()).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\nclass AttCertVersion(univ.Integer):\n    pass\n\n\nAttCertVersion.namedValues = namedval.NamedValues(\n    ('v2', 1)\n)\n\nid_aca = _buildOid(rfc3280.id_pkix, 10)\n\nid_at_clearance = _buildOid(2, 5, 1, 5, 55)\n\n\nclass AttrSpec(univ.SequenceOf):\n    pass\n\n\nAttrSpec.componentType = univ.ObjectIdentifier()\n\n\nclass AAControls(univ.Sequence):\n    pass\n\n\nAAControls.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('pathLenConstraint',\n                                univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, MAX))),\n    namedtype.OptionalNamedType('permittedAttrs',\n                                AttrSpec().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('excludedAttrs',\n                                AttrSpec().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.DefaultedNamedType('permitUnSpecified', univ.Boolean().subtype(value=1))\n)\n\n\nclass AttCertValidityPeriod(univ.Sequence):\n    pass\n\n\nAttCertValidityPeriod.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('notBeforeTime', useful.GeneralizedTime()),\n    namedtype.NamedType('notAfterTime', useful.GeneralizedTime())\n)\n\n\nid_aca_authenticationInfo = _buildOid(id_aca, 1)\n\n\nclass V2Form(univ.Sequence):\n    pass\n\n\nV2Form.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('issuerName', rfc3280.GeneralNames()),\n    namedtype.OptionalNamedType('baseCertificateID', IssuerSerial().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('objectDigestInfo', ObjectDigestInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass AttCertIssuer(univ.Choice):\n    pass\n\n\nAttCertIssuer.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('v1Form', rfc3280.GeneralNames()),\n    namedtype.NamedType('v2Form',\n                        V2Form().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n)\n\n\nclass Holder(univ.Sequence):\n    pass\n\n\nHolder.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('baseCertificateID', IssuerSerial().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('entityName', rfc3280.GeneralNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('objectDigestInfo', ObjectDigestInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n)\n\n\nclass AttributeCertificateInfo(univ.Sequence):\n    pass\n\n\nAttributeCertificateInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', AttCertVersion()),\n    namedtype.NamedType('holder', Holder()),\n    namedtype.NamedType('issuer', AttCertIssuer()),\n    namedtype.NamedType('signature', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('serialNumber', rfc3280.CertificateSerialNumber()),\n    namedtype.NamedType('attrCertValidityPeriod', AttCertValidityPeriod()),\n    namedtype.NamedType('attributes', univ.SequenceOf(componentType=rfc3280.Attribute())),\n    namedtype.OptionalNamedType('issuerUniqueID', rfc3280.UniqueIdentifier()),\n    namedtype.OptionalNamedType('extensions', rfc3280.Extensions())\n)\n\n\nclass AttributeCertificate(univ.Sequence):\n    pass\n\n\nAttributeCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('acinfo', AttributeCertificateInfo()),\n    namedtype.NamedType('signatureAlgorithm', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('signatureValue', univ.BitString())\n)\n\nid_mod = _buildOid(rfc3280.id_pkix, 0)\n\nid_mod_attribute_cert = _buildOid(id_mod, 12)\n\nid_aca_accessIdentity = _buildOid(id_aca, 2)\n\n\nclass RoleSyntax(univ.Sequence):\n    pass\n\n\nRoleSyntax.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('roleAuthority', rfc3280.GeneralNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('roleName',\n                        rfc3280.GeneralName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\nid_aca_chargingIdentity = _buildOid(id_aca, 3)\n\n\nclass ACClearAttrs(univ.Sequence):\n    pass\n\n\nACClearAttrs.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('acIssuer', rfc3280.GeneralName()),\n    namedtype.NamedType('acSerial', univ.Integer()),\n    namedtype.NamedType('attrs', univ.SequenceOf(componentType=rfc3280.Attribute()))\n)\n\nid_aca_group = _buildOid(id_aca, 4)\n\nid_pe_ac_proxying = _buildOid(rfc3280.id_pe, 10)\n\n\nclass SvceAuthInfo(univ.Sequence):\n    pass\n\n\nSvceAuthInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('service', rfc3280.GeneralName()),\n    namedtype.NamedType('ident', rfc3280.GeneralName()),\n    namedtype.OptionalNamedType('authInfo', univ.OctetString())\n)\n\n\nclass IetfAttrSyntax(univ.Sequence):\n    pass\n\n\nIetfAttrSyntax.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType(\n        'policyAuthority', rfc3280.GeneralNames().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))\n    ),\n    namedtype.NamedType(\n        'values', univ.SequenceOf(\n            componentType=univ.Choice(\n                componentType=namedtype.NamedTypes(\n                    namedtype.NamedType('octets', univ.OctetString()),\n                    namedtype.NamedType('oid', univ.ObjectIdentifier()),\n                    namedtype.NamedType('string', char.UTF8String())\n                )\n            )\n        )\n    )\n)\n\nid_aca_encAttrs = _buildOid(id_aca, 6)\n", "pyasn1_modules/rfc3447.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS#1 syntax\n#\n# ASN.1 source from:\n# ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.asn\n#\n# Sample captures could be obtained with \"openssl genrsa\" command\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedval\n\nfrom pyasn1_modules.rfc2437 import *\n\n\nclass OtherPrimeInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('prime', univ.Integer()),\n        namedtype.NamedType('exponent', univ.Integer()),\n        namedtype.NamedType('coefficient', univ.Integer())\n    )\n\n\nclass OtherPrimeInfos(univ.SequenceOf):\n    componentType = OtherPrimeInfo()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass RSAPrivateKey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', univ.Integer(namedValues=namedval.NamedValues(('two-prime', 0), ('multi', 1)))),\n        namedtype.NamedType('modulus', univ.Integer()),\n        namedtype.NamedType('publicExponent', univ.Integer()),\n        namedtype.NamedType('privateExponent', univ.Integer()),\n        namedtype.NamedType('prime1', univ.Integer()),\n        namedtype.NamedType('prime2', univ.Integer()),\n        namedtype.NamedType('exponent1', univ.Integer()),\n        namedtype.NamedType('exponent2', univ.Integer()),\n        namedtype.NamedType('coefficient', univ.Integer()),\n        namedtype.OptionalNamedType('otherPrimeInfos', OtherPrimeInfos())\n    )\n", "pyasn1_modules/rfc2459.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Updated by Russ Housley to resolve the TODO regarding the Certificate\n#   Policies Certificate Extension.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# X.509 message syntax\n#\n# ASN.1 source from:\n# http://www.trl.ibm.com/projects/xml/xss4j/data/asn1/grammars/x509.asn\n# http://www.ietf.org/rfc/rfc2459.txt\n#\n# Sample captures from:\n# http://wiki.wireshark.org/SampleCaptures/\n#\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nMAX = float('inf')\n\n#\n# PKIX1Explicit88\n#\n\n# Upper Bounds\nub_name = univ.Integer(32768)\nub_common_name = univ.Integer(64)\nub_locality_name = univ.Integer(128)\nub_state_name = univ.Integer(128)\nub_organization_name = univ.Integer(64)\nub_organizational_unit_name = univ.Integer(64)\nub_title = univ.Integer(64)\nub_match = univ.Integer(128)\nub_emailaddress_length = univ.Integer(128)\nub_common_name_length = univ.Integer(64)\nub_country_name_alpha_length = univ.Integer(2)\nub_country_name_numeric_length = univ.Integer(3)\nub_domain_defined_attributes = univ.Integer(4)\nub_domain_defined_attribute_type_length = univ.Integer(8)\nub_domain_defined_attribute_value_length = univ.Integer(128)\nub_domain_name_length = univ.Integer(16)\nub_extension_attributes = univ.Integer(256)\nub_e163_4_number_length = univ.Integer(15)\nub_e163_4_sub_address_length = univ.Integer(40)\nub_generation_qualifier_length = univ.Integer(3)\nub_given_name_length = univ.Integer(16)\nub_initials_length = univ.Integer(5)\nub_integer_options = univ.Integer(256)\nub_numeric_user_id_length = univ.Integer(32)\nub_organization_name_length = univ.Integer(64)\nub_organizational_unit_name_length = univ.Integer(32)\nub_organizational_units = univ.Integer(4)\nub_pds_name_length = univ.Integer(16)\nub_pds_parameter_length = univ.Integer(30)\nub_pds_physical_address_lines = univ.Integer(6)\nub_postal_code_length = univ.Integer(16)\nub_surname_length = univ.Integer(40)\nub_terminal_id_length = univ.Integer(24)\nub_unformatted_address_length = univ.Integer(180)\nub_x121_address_length = univ.Integer(16)\n\n\nclass UniversalString(char.UniversalString):\n    pass\n\n\nclass BMPString(char.BMPString):\n    pass\n\n\nclass UTF8String(char.UTF8String):\n    pass\n\n\nid_pkix = univ.ObjectIdentifier('1.3.6.1.5.5.7')\nid_pe = univ.ObjectIdentifier('1.3.6.1.5.5.7.1')\nid_qt = univ.ObjectIdentifier('1.3.6.1.5.5.7.2')\nid_kp = univ.ObjectIdentifier('1.3.6.1.5.5.7.3')\nid_ad = univ.ObjectIdentifier('1.3.6.1.5.5.7.48')\n\nid_qt_cps = univ.ObjectIdentifier('1.3.6.1.5.5.7.2.1')\nid_qt_unotice = univ.ObjectIdentifier('1.3.6.1.5.5.7.2.2')\n\nid_ad_ocsp = univ.ObjectIdentifier('1.3.6.1.5.5.7.48.1')\nid_ad_caIssuers = univ.ObjectIdentifier('1.3.6.1.5.5.7.48.2')\n\n\n\n\nid_at = univ.ObjectIdentifier('2.5.4')\nid_at_name = univ.ObjectIdentifier('2.5.4.41')\n# preserve misspelled variable for compatibility\nid_at_sutname = id_at_surname = univ.ObjectIdentifier('2.5.4.4')\nid_at_givenName = univ.ObjectIdentifier('2.5.4.42')\nid_at_initials = univ.ObjectIdentifier('2.5.4.43')\nid_at_generationQualifier = univ.ObjectIdentifier('2.5.4.44')\n\n\nclass X520name(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString',\n                            char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n        namedtype.NamedType('printableString',\n                            char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n        namedtype.NamedType('universalString',\n                            char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n        namedtype.NamedType('utf8String',\n                            char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n        namedtype.NamedType('bmpString',\n                            char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name)))\n    )\n\n\nid_at_commonName = univ.ObjectIdentifier('2.5.4.3')\n\n\nclass X520CommonName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n        namedtype.NamedType('printableString', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n        namedtype.NamedType('universalString', char.UniversalString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n        namedtype.NamedType('utf8String',\n                            char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n        namedtype.NamedType('bmpString',\n                            char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name)))\n    )\n\n\nid_at_localityName = univ.ObjectIdentifier('2.5.4.7')\n\n\nclass X520LocalityName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n        namedtype.NamedType('printableString', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n        namedtype.NamedType('universalString', char.UniversalString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n        namedtype.NamedType('utf8String',\n                            char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n        namedtype.NamedType('bmpString',\n                            char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name)))\n    )\n\n\nid_at_stateOrProvinceName = univ.ObjectIdentifier('2.5.4.8')\n\n\nclass X520StateOrProvinceName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString',\n                            char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n        namedtype.NamedType('printableString', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n        namedtype.NamedType('universalString', char.UniversalString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n        namedtype.NamedType('utf8String',\n                            char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n        namedtype.NamedType('bmpString',\n                            char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name)))\n    )\n\n\nid_at_organizationName = univ.ObjectIdentifier('2.5.4.10')\n\n\nclass X520OrganizationName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n        namedtype.NamedType('printableString', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n        namedtype.NamedType('universalString', char.UniversalString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n        namedtype.NamedType('utf8String', char.UTF8String().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n        namedtype.NamedType('bmpString', char.BMPString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name)))\n    )\n\n\nid_at_organizationalUnitName = univ.ObjectIdentifier('2.5.4.11')\n\n\nclass X520OrganizationalUnitName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n        namedtype.NamedType('printableString', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n        namedtype.NamedType('universalString', char.UniversalString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n        namedtype.NamedType('utf8String', char.UTF8String().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n        namedtype.NamedType('bmpString', char.BMPString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name)))\n    )\n\n\nid_at_title = univ.ObjectIdentifier('2.5.4.12')\n\n\nclass X520Title(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString',\n                            char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n        namedtype.NamedType('printableString',\n                            char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n        namedtype.NamedType('universalString',\n                            char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n        namedtype.NamedType('utf8String',\n                            char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n        namedtype.NamedType('bmpString',\n                            char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title)))\n    )\n\n\nid_at_dnQualifier = univ.ObjectIdentifier('2.5.4.46')\n\n\nclass X520dnQualifier(char.PrintableString):\n    pass\n\n\nid_at_countryName = univ.ObjectIdentifier('2.5.4.6')\n\n\nclass X520countryName(char.PrintableString):\n    subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(2, 2)\n\n\npkcs_9 = univ.ObjectIdentifier('1.2.840.113549.1.9')\n\nemailAddress = univ.ObjectIdentifier('1.2.840.113549.1.9.1')\n\n\nclass Pkcs9email(char.IA5String):\n    subtypeSpec = char.IA5String.subtypeSpec + constraint.ValueSizeConstraint(1, ub_emailaddress_length)\n\n\n# ----\n\nclass DSAPrivateKey(univ.Sequence):\n    \"\"\"PKIX compliant DSA private key structure\"\"\"\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', univ.Integer(namedValues=namedval.NamedValues(('v1', 0)))),\n        namedtype.NamedType('p', univ.Integer()),\n        namedtype.NamedType('q', univ.Integer()),\n        namedtype.NamedType('g', univ.Integer()),\n        namedtype.NamedType('public', univ.Integer()),\n        namedtype.NamedType('private', univ.Integer())\n    )\n\n\n# ----\n\n\nclass DirectoryString(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('teletexString',\n                            char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n        namedtype.NamedType('printableString',\n                            char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n        namedtype.NamedType('universalString',\n                            char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n        namedtype.NamedType('utf8String',\n                            char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n        namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n        namedtype.NamedType('ia5String', char.IA5String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n        # hm, this should not be here!? XXX\n    )\n\n\n# certificate and CRL specific structures begin here\n\nclass AlgorithmIdentifier(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('algorithm', univ.ObjectIdentifier()),\n        namedtype.OptionalNamedType('parameters', univ.Any())\n    )\n\n\n\n# Algorithm OIDs and parameter structures\n\npkcs_1 = univ.ObjectIdentifier('1.2.840.113549.1.1')\nrsaEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.1')\nmd2WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.2')\nmd5WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.4')\nsha1WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.5')\nid_dsa_with_sha1 = univ.ObjectIdentifier('1.2.840.10040.4.3')\n\n\nclass Dss_Sig_Value(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('r', univ.Integer()),\n        namedtype.NamedType('s', univ.Integer())\n    )\n\n\ndhpublicnumber = univ.ObjectIdentifier('1.2.840.10046.2.1')\n\n\nclass ValidationParms(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('seed', univ.BitString()),\n        namedtype.NamedType('pgenCounter', univ.Integer())\n    )\n\n\nclass DomainParameters(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('p', univ.Integer()),\n        namedtype.NamedType('g', univ.Integer()),\n        namedtype.NamedType('q', univ.Integer()),\n        namedtype.NamedType('j', univ.Integer()),\n        namedtype.OptionalNamedType('validationParms', ValidationParms())\n    )\n\n\nid_dsa = univ.ObjectIdentifier('1.2.840.10040.4.1')\n\n\nclass Dss_Parms(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('p', univ.Integer()),\n        namedtype.NamedType('q', univ.Integer()),\n        namedtype.NamedType('g', univ.Integer())\n    )\n\n\n# x400 address syntax starts here\n\nteletex_domain_defined_attributes = univ.Integer(6)\n\n\nclass TeletexDomainDefinedAttribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),\n        namedtype.NamedType('value', char.TeletexString())\n    )\n\n\nclass TeletexDomainDefinedAttributes(univ.SequenceOf):\n    componentType = TeletexDomainDefinedAttribute()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)\n\n\nterminal_type = univ.Integer(23)\n\n\nclass TerminalType(univ.Integer):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(0, ub_integer_options)\n    namedValues = namedval.NamedValues(\n        ('telex', 3),\n        ('teletelex', 4),\n        ('g3-facsimile', 5),\n        ('g4-facsimile', 6),\n        ('ia5-terminal', 7),\n        ('videotex', 8)\n    )\n\n\nclass PresentationAddress(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('pSelector', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('sSelector', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('tSelector', univ.OctetString().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('nAddresses', univ.SetOf(componentType=univ.OctetString()).subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3),\n            subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    )\n\n\nextended_network_address = univ.Integer(22)\n\n\nclass E163_4_address(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('number', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_number_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('sub-address', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_sub_address_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass ExtendedNetworkAddress(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('e163-4-address', E163_4_address()),\n        namedtype.NamedType('psap-address', PresentationAddress().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass PDSParameter(univ.Set):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('printable-string', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length))),\n        namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)))\n    )\n\n\nlocal_postal_attributes = univ.Integer(21)\n\n\nclass LocalPostalAttributes(PDSParameter):\n    pass\n\n\nclass UniquePostalName(PDSParameter):\n    pass\n\n\nunique_postal_name = univ.Integer(20)\n\nposte_restante_address = univ.Integer(19)\n\n\nclass PosteRestanteAddress(PDSParameter):\n    pass\n\n\npost_office_box_address = univ.Integer(18)\n\n\nclass PostOfficeBoxAddress(PDSParameter):\n    pass\n\n\nstreet_address = univ.Integer(17)\n\n\nclass StreetAddress(PDSParameter):\n    pass\n\n\nclass UnformattedPostalAddress(univ.Set):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('printable-address', univ.SequenceOf(componentType=char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)).subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_physical_address_lines)))),\n        namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_unformatted_address_length)))\n    )\n\n\nphysical_delivery_office_name = univ.Integer(10)\n\n\nclass PhysicalDeliveryOfficeName(PDSParameter):\n    pass\n\n\nphysical_delivery_office_number = univ.Integer(11)\n\n\nclass PhysicalDeliveryOfficeNumber(PDSParameter):\n    pass\n\n\nextension_OR_address_components = univ.Integer(12)\n\n\nclass ExtensionORAddressComponents(PDSParameter):\n    pass\n\n\nphysical_delivery_personal_name = univ.Integer(13)\n\n\nclass PhysicalDeliveryPersonalName(PDSParameter):\n    pass\n\n\nphysical_delivery_organization_name = univ.Integer(14)\n\n\nclass PhysicalDeliveryOrganizationName(PDSParameter):\n    pass\n\n\nextension_physical_delivery_address_components = univ.Integer(15)\n\n\nclass ExtensionPhysicalDeliveryAddressComponents(PDSParameter):\n    pass\n\n\nunformatted_postal_address = univ.Integer(16)\n\npostal_code = univ.Integer(9)\n\n\nclass PostalCode(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('numeric-code', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length))),\n        namedtype.NamedType('printable-code', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length)))\n    )\n\n\nclass PhysicalDeliveryCountryName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length,\n                                                       ub_country_name_numeric_length))),\n        namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))\n    )\n\n\nclass PDSName(char.PrintableString):\n    subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_pds_name_length)\n\n\nphysical_delivery_country_name = univ.Integer(8)\n\n\nclass TeletexOrganizationalUnitName(char.TeletexString):\n    subtypeSpec = char.TeletexString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)\n\n\npds_name = univ.Integer(7)\n\nteletex_organizational_unit_names = univ.Integer(5)\n\n\nclass TeletexOrganizationalUnitNames(univ.SequenceOf):\n    componentType = TeletexOrganizationalUnitName()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_organizational_units)\n\n\nteletex_personal_name = univ.Integer(4)\n\n\nclass TeletexPersonalName(univ.Set):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('surname', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('given-name', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('initials', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('generation-qualifier', char.TeletexString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n    )\n\n\nteletex_organization_name = univ.Integer(3)\n\n\nclass TeletexOrganizationName(char.TeletexString):\n    subtypeSpec = char.TeletexString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organization_name_length)\n\n\nteletex_common_name = univ.Integer(2)\n\n\nclass TeletexCommonName(char.TeletexString):\n    subtypeSpec = char.TeletexString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_common_name_length)\n\n\nclass CommonName(char.PrintableString):\n    subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_common_name_length)\n\n\ncommon_name = univ.Integer(1)\n\n\nclass ExtensionAttribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('extension-attribute-type', univ.Integer().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(0, ub_extension_attributes),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('extension-attribute-value',\n                            univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass ExtensionAttributes(univ.SetOf):\n    componentType = ExtensionAttribute()\n    sizeSpec = univ.SetOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_extension_attributes)\n\n\nclass BuiltInDomainDefinedAttribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),\n        namedtype.NamedType('value', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_value_length)))\n    )\n\n\nclass BuiltInDomainDefinedAttributes(univ.SequenceOf):\n    componentType = BuiltInDomainDefinedAttribute()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)\n\n\nclass OrganizationalUnitName(char.PrintableString):\n    subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)\n\n\nclass OrganizationalUnitNames(univ.SequenceOf):\n    componentType = OrganizationalUnitName()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_organizational_units)\n\n\nclass PersonalName(univ.Set):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('surname', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('given-name', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('initials', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('generation-qualifier', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length),\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n    )\n\n\nclass NumericUserIdentifier(char.NumericString):\n    subtypeSpec = char.NumericString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_numeric_user_id_length)\n\n\nclass OrganizationName(char.PrintableString):\n    subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organization_name_length)\n\n\nclass PrivateDomainName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('numeric', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length))),\n        namedtype.NamedType('printable', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length)))\n    )\n\n\nclass TerminalIdentifier(char.PrintableString):\n    subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_terminal_id_length)\n\n\nclass X121Address(char.NumericString):\n    subtypeSpec = char.NumericString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_x121_address_length)\n\n\nclass NetworkAddress(X121Address):\n    pass\n\n\nclass AdministrationDomainName(univ.Choice):\n    tagSet = univ.Choice.tagSet.tagExplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('numeric', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length))),\n        namedtype.NamedType('printable', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length)))\n    )\n\n\nclass CountryName(univ.Choice):\n    tagSet = univ.Choice.tagSet.tagExplicitly(\n        tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1)\n    )\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length,\n                                                       ub_country_name_numeric_length))),\n        namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))\n    )\n\n\nclass BuiltInStandardAttributes(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('country-name', CountryName()),\n        namedtype.OptionalNamedType('administration-domain-name', AdministrationDomainName()),\n        namedtype.OptionalNamedType('network-address', NetworkAddress().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('terminal-identifier', TerminalIdentifier().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('private-domain-name', PrivateDomainName().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('organization-name', OrganizationName().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.OptionalNamedType('numeric-user-identifier', NumericUserIdentifier().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n        namedtype.OptionalNamedType('personal-name', PersonalName().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))),\n        namedtype.OptionalNamedType('organizational-unit-names', OrganizationalUnitNames().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6)))\n    )\n\n\nclass ORAddress(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('built-in-standard-attributes', BuiltInStandardAttributes()),\n        namedtype.OptionalNamedType('built-in-domain-defined-attributes', BuiltInDomainDefinedAttributes()),\n        namedtype.OptionalNamedType('extension-attributes', ExtensionAttributes())\n    )\n\n\n#\n# PKIX1Implicit88\n#\n\nid_ce_invalidityDate = univ.ObjectIdentifier('2.5.29.24')\n\n\nclass InvalidityDate(useful.GeneralizedTime):\n    pass\n\n\nid_holdinstruction_none = univ.ObjectIdentifier('2.2.840.10040.2.1')\nid_holdinstruction_callissuer = univ.ObjectIdentifier('2.2.840.10040.2.2')\nid_holdinstruction_reject = univ.ObjectIdentifier('2.2.840.10040.2.3')\n\nholdInstruction = univ.ObjectIdentifier('2.2.840.10040.2')\n\nid_ce_holdInstructionCode = univ.ObjectIdentifier('2.5.29.23')\n\n\nclass HoldInstructionCode(univ.ObjectIdentifier):\n    pass\n\n\nid_ce_cRLReasons = univ.ObjectIdentifier('2.5.29.21')\n\n\nclass CRLReason(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('unspecified', 0),\n        ('keyCompromise', 1),\n        ('cACompromise', 2),\n        ('affiliationChanged', 3),\n        ('superseded', 4),\n        ('cessationOfOperation', 5),\n        ('certificateHold', 6),\n        ('removeFromCRL', 8)\n    )\n\n\nid_ce_cRLNumber = univ.ObjectIdentifier('2.5.29.20')\n\n\nclass CRLNumber(univ.Integer):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(0, MAX)\n\n\nclass BaseCRLNumber(CRLNumber):\n    pass\n\n\nid_kp_serverAuth = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.1')\nid_kp_clientAuth = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.2')\nid_kp_codeSigning = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.3')\nid_kp_emailProtection = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.4')\nid_kp_ipsecEndSystem = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.5')\nid_kp_ipsecTunnel = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.6')\nid_kp_ipsecUser = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.7')\nid_kp_timeStamping = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.8')\nid_pe_authorityInfoAccess = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.1')\nid_ce_extKeyUsage = univ.ObjectIdentifier('2.5.29.37')\n\n\nclass KeyPurposeId(univ.ObjectIdentifier):\n    pass\n\n\nclass ExtKeyUsageSyntax(univ.SequenceOf):\n    componentType = KeyPurposeId()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass ReasonFlags(univ.BitString):\n    namedValues = namedval.NamedValues(\n        ('unused', 0),\n        ('keyCompromise', 1),\n        ('cACompromise', 2),\n        ('affiliationChanged', 3),\n        ('superseded', 4),\n        ('cessationOfOperation', 5),\n        ('certificateHold', 6)\n    )\n\n\nclass SkipCerts(univ.Integer):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(0, MAX)\n\n\nid_ce_policyConstraints = univ.ObjectIdentifier('2.5.29.36')\n\n\nclass PolicyConstraints(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('requireExplicitPolicy', SkipCerts().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('inhibitPolicyMapping', SkipCerts().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nid_ce_basicConstraints = univ.ObjectIdentifier('2.5.29.19')\n\n\nclass BasicConstraints(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('cA', univ.Boolean(False)),\n        namedtype.OptionalNamedType('pathLenConstraint',\n                                    univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, MAX)))\n    )\n\n\nid_ce_subjectDirectoryAttributes = univ.ObjectIdentifier('2.5.29.9')\n\n\nclass EDIPartyName(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('nameAssigner', DirectoryString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('partyName',\n                            DirectoryString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\n\nid_ce_deltaCRLIndicator = univ.ObjectIdentifier('2.5.29.27')\n\n\n\nclass BaseDistance(univ.Integer):\n    subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(0, MAX)\n\n\nid_ce_cRLDistributionPoints = univ.ObjectIdentifier('2.5.29.31')\n\n\nid_ce_issuingDistributionPoint = univ.ObjectIdentifier('2.5.29.28')\n\n\n\n\nid_ce_nameConstraints = univ.ObjectIdentifier('2.5.29.30')\n\n\nclass DisplayText(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('visibleString',\n                            char.VisibleString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n        namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n        namedtype.NamedType('utf8String', char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200)))\n    )\n\n\nclass NoticeReference(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('organization', DisplayText()),\n        namedtype.NamedType('noticeNumbers', univ.SequenceOf(componentType=univ.Integer()))\n    )\n\n\nclass UserNotice(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('noticeRef', NoticeReference()),\n        namedtype.OptionalNamedType('explicitText', DisplayText())\n    )\n\n\nclass CPSuri(char.IA5String):\n    pass\n\n\nclass PolicyQualifierId(univ.ObjectIdentifier):\n    subtypeSpec = univ.ObjectIdentifier.subtypeSpec + constraint.SingleValueConstraint(id_qt_cps, id_qt_unotice)\n\n\nclass CertPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass PolicyQualifierInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('policyQualifierId', PolicyQualifierId()),\n        namedtype.NamedType('qualifier', univ.Any())\n    )\n\n\nid_ce_certificatePolicies = univ.ObjectIdentifier('2.5.29.32')\n\n\nclass PolicyInformation(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('policyIdentifier', CertPolicyId()),\n        namedtype.OptionalNamedType('policyQualifiers', univ.SequenceOf(componentType=PolicyQualifierInfo()).subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\nclass CertificatePolicies(univ.SequenceOf):\n    componentType = PolicyInformation()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nid_ce_policyMappings = univ.ObjectIdentifier('2.5.29.33')\n\n\nclass PolicyMapping(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('issuerDomainPolicy', CertPolicyId()),\n        namedtype.NamedType('subjectDomainPolicy', CertPolicyId())\n    )\n\n\nclass PolicyMappings(univ.SequenceOf):\n    componentType = PolicyMapping()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nid_ce_privateKeyUsagePeriod = univ.ObjectIdentifier('2.5.29.16')\n\n\nclass PrivateKeyUsagePeriod(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('notBefore', useful.GeneralizedTime().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('notAfter', useful.GeneralizedTime().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nid_ce_keyUsage = univ.ObjectIdentifier('2.5.29.15')\n\n\nclass KeyUsage(univ.BitString):\n    namedValues = namedval.NamedValues(\n        ('digitalSignature', 0),\n        ('nonRepudiation', 1),\n        ('keyEncipherment', 2),\n        ('dataEncipherment', 3),\n        ('keyAgreement', 4),\n        ('keyCertSign', 5),\n        ('cRLSign', 6),\n        ('encipherOnly', 7),\n        ('decipherOnly', 8)\n    )\n\n\nid_ce = univ.ObjectIdentifier('2.5.29')\n\nid_ce_authorityKeyIdentifier = univ.ObjectIdentifier('2.5.29.35')\n\n\nclass KeyIdentifier(univ.OctetString):\n    pass\n\n\nid_ce_subjectKeyIdentifier = univ.ObjectIdentifier('2.5.29.14')\n\n\nclass SubjectKeyIdentifier(KeyIdentifier):\n    pass\n\n\nid_ce_certificateIssuer = univ.ObjectIdentifier('2.5.29.29')\n\n\nid_ce_subjectAltName = univ.ObjectIdentifier('2.5.29.17')\n\n\nid_ce_issuerAltName = univ.ObjectIdentifier('2.5.29.18')\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass AttributeType(univ.ObjectIdentifier):\n    pass\n\ncertificateAttributesMap = {}\n\n\nclass AttributeTypeAndValue(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeType()),\n        namedtype.NamedType('value', AttributeValue(),\n                            openType=opentype.OpenType('type', certificateAttributesMap))\n    )\n\n\nclass Attribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeType()),\n        namedtype.NamedType('vals', univ.SetOf(componentType=AttributeValue()))\n    )\n\n\nclass SubjectDirectoryAttributes(univ.SequenceOf):\n    componentType = Attribute()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass RelativeDistinguishedName(univ.SetOf):\n    componentType = AttributeTypeAndValue()\n\n\nclass RDNSequence(univ.SequenceOf):\n    componentType = RelativeDistinguishedName()\n\n\nclass Name(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('', RDNSequence())\n    )\n\nclass CertificateSerialNumber(univ.Integer):\n    pass\n\n\nclass AnotherName(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type-id', univ.ObjectIdentifier()),\n        namedtype.NamedType('value',\n                            univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass GeneralName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('otherName',\n                            AnotherName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('rfc822Name',\n                            char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('dNSName',\n                            char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.NamedType('x400Address',\n                            ORAddress().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.NamedType('directoryName',\n                            Name().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n        namedtype.NamedType('ediPartyName',\n                            EDIPartyName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))),\n        namedtype.NamedType('uniformResourceIdentifier',\n                            char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))),\n        namedtype.NamedType('iPAddress', univ.OctetString().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n        namedtype.NamedType('registeredID', univ.ObjectIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 8)))\n    )\n\n\nclass GeneralNames(univ.SequenceOf):\n    componentType = GeneralName()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass AccessDescription(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('accessMethod', univ.ObjectIdentifier()),\n        namedtype.NamedType('accessLocation', GeneralName())\n    )\n\n\nclass AuthorityInfoAccessSyntax(univ.SequenceOf):\n    componentType = AccessDescription()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass AuthorityKeyIdentifier(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('keyIdentifier', KeyIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('authorityCertIssuer', GeneralNames().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('authorityCertSerialNumber', CertificateSerialNumber().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass DistributionPointName(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('fullName', GeneralNames().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('nameRelativeToCRLIssuer', RelativeDistinguishedName().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass DistributionPoint(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('reasons', ReasonFlags().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('cRLIssuer', GeneralNames().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n    )\n\n\nclass CRLDistPointsSyntax(univ.SequenceOf):\n    componentType = DistributionPoint()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass IssuingDistributionPoint(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('onlyContainsUserCerts', univ.Boolean(False).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('onlyContainsCACerts', univ.Boolean(False).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('onlySomeReasons', ReasonFlags().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.NamedType('indirectCRL', univ.Boolean(False).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))\n    )\n\n\nclass GeneralSubtree(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('base', GeneralName()),\n        namedtype.DefaultedNamedType('minimum', BaseDistance(0).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('maximum', BaseDistance().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass GeneralSubtrees(univ.SequenceOf):\n    componentType = GeneralSubtree()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass NameConstraints(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('permittedSubtrees', GeneralSubtrees().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('excludedSubtrees', GeneralSubtrees().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass CertificateIssuer(GeneralNames):\n    pass\n\n\nclass SubjectAltName(GeneralNames):\n    pass\n\n\nclass IssuerAltName(GeneralNames):\n    pass\n\n\ncertificateExtensionsMap = {}\n\n\nclass Extension(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('extnID', univ.ObjectIdentifier()),\n        namedtype.DefaultedNamedType('critical', univ.Boolean('False')),\n        namedtype.NamedType('extnValue', univ.OctetString(),\n                            openType=opentype.OpenType('extnID', certificateExtensionsMap))\n    )\n\n\nclass Extensions(univ.SequenceOf):\n    componentType = Extension()\n    sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)\n\n\nclass SubjectPublicKeyInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('algorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('subjectPublicKey', univ.BitString())\n    )\n\n\nclass UniqueIdentifier(univ.BitString):\n    pass\n\n\nclass Time(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('utcTime', useful.UTCTime()),\n        namedtype.NamedType('generalTime', useful.GeneralizedTime())\n    )\n\n\nclass Validity(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('notBefore', Time()),\n        namedtype.NamedType('notAfter', Time())\n    )\n\n\nclass Version(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('v1', 0), ('v2', 1), ('v3', 2)\n    )\n\n\nclass TBSCertificate(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('version', Version('v1').subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('serialNumber', CertificateSerialNumber()),\n        namedtype.NamedType('signature', AlgorithmIdentifier()),\n        namedtype.NamedType('issuer', Name()),\n        namedtype.NamedType('validity', Validity()),\n        namedtype.NamedType('subject', Name()),\n        namedtype.NamedType('subjectPublicKeyInfo', SubjectPublicKeyInfo()),\n        namedtype.OptionalNamedType('issuerUniqueID', UniqueIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('subjectUniqueID', UniqueIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('extensions', Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n    )\n\n\nclass Certificate(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('tbsCertificate', TBSCertificate()),\n        namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('signatureValue', univ.BitString())\n    )\n\n# CRL structures\n\nclass RevokedCertificate(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('userCertificate', CertificateSerialNumber()),\n        namedtype.NamedType('revocationDate', Time()),\n        namedtype.OptionalNamedType('crlEntryExtensions', Extensions())\n    )\n\n\nclass TBSCertList(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('version', Version()),\n        namedtype.NamedType('signature', AlgorithmIdentifier()),\n        namedtype.NamedType('issuer', Name()),\n        namedtype.NamedType('thisUpdate', Time()),\n        namedtype.OptionalNamedType('nextUpdate', Time()),\n        namedtype.OptionalNamedType('revokedCertificates', univ.SequenceOf(componentType=RevokedCertificate())),\n        namedtype.OptionalNamedType('crlExtensions', Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n\n\nclass CertificateList(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('tbsCertList', TBSCertList()),\n        namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('signature', univ.BitString())\n    )\n\n# map of AttributeType -> AttributeValue\n\n_certificateAttributesMapUpdate = {\n    id_at_name: X520name(),\n    id_at_surname: X520name(),\n    id_at_givenName: X520name(),\n    id_at_initials: X520name(),\n    id_at_generationQualifier: X520name(),\n    id_at_commonName: X520CommonName(),\n    id_at_localityName: X520LocalityName(),\n    id_at_stateOrProvinceName: X520StateOrProvinceName(),\n    id_at_organizationName: X520OrganizationName(),\n    id_at_organizationalUnitName: X520OrganizationalUnitName(),\n    id_at_title: X520Title(),\n    id_at_dnQualifier: X520dnQualifier(),\n    id_at_countryName: X520countryName(),\n    emailAddress: Pkcs9email(),\n}\n\ncertificateAttributesMap.update(_certificateAttributesMapUpdate)\n\n\n# map of Certificate Extension OIDs to Extensions\n\n_certificateExtensionsMapUpdate = {\n    id_ce_authorityKeyIdentifier: AuthorityKeyIdentifier(),\n    id_ce_subjectKeyIdentifier: SubjectKeyIdentifier(),\n    id_ce_keyUsage: KeyUsage(),\n    id_ce_privateKeyUsagePeriod: PrivateKeyUsagePeriod(),\n    id_ce_certificatePolicies: CertificatePolicies(),\n    id_ce_policyMappings: PolicyMappings(),\n    id_ce_subjectAltName: SubjectAltName(),\n    id_ce_issuerAltName: IssuerAltName(),\n    id_ce_subjectDirectoryAttributes: SubjectDirectoryAttributes(),\n    id_ce_basicConstraints: BasicConstraints(),\n    id_ce_nameConstraints: NameConstraints(),\n    id_ce_policyConstraints: PolicyConstraints(),\n    id_ce_extKeyUsage: ExtKeyUsageSyntax(),\n    id_ce_cRLDistributionPoints: CRLDistPointsSyntax(),\n    id_pe_authorityInfoAccess: AuthorityInfoAccessSyntax(),\n    id_ce_cRLNumber: univ.Integer(),\n    id_ce_deltaCRLIndicator: BaseCRLNumber(),\n    id_ce_issuingDistributionPoint: IssuingDistributionPoint(),\n    id_ce_cRLReasons: CRLReason(),\n    id_ce_holdInstructionCode: univ.ObjectIdentifier(),\n    id_ce_invalidityDate: useful.GeneralizedTime(),\n    id_ce_certificateIssuer: GeneralNames(),\n}\n\ncertificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n\n", "pyasn1_modules/rfc5639.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Elliptic Curve Cryptography Brainpool Standard Curves\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5639.txt\n\n\nfrom pyasn1.type import univ\n\n\necStdCurvesAndGeneration = univ.ObjectIdentifier((1, 3, 36, 3, 3, 2, 8,))\n\nellipticCurve = ecStdCurvesAndGeneration + (1,)\n\nversionOne = ellipticCurve + (1,)\n\nbrainpoolP160r1 = versionOne + (1,)\n\nbrainpoolP160t1 = versionOne + (2,)\n\nbrainpoolP192r1 = versionOne + (3,)\n\nbrainpoolP192t1 = versionOne + (4,)\n\nbrainpoolP224r1 = versionOne + (5,)\n\nbrainpoolP224t1 = versionOne + (6,)\n\nbrainpoolP256r1 = versionOne + (7,)\n\nbrainpoolP256t1 = versionOne + (8,)\n\nbrainpoolP320r1 = versionOne + (9,)\n\nbrainpoolP320t1 = versionOne + (10,)\n\nbrainpoolP384r1 = versionOne + (11,)\n\nbrainpoolP384t1 = versionOne + (12,)\n\nbrainpoolP512r1 = versionOne + (13,)\n\nbrainpoolP512t1 = versionOne + (14,)\n", "pyasn1_modules/rfc8358.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Digital Signatures on Internet-Draft Documents\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8358.txt\n#\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\n\nid_ct = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1')\n\nid_ct_asciiTextWithCRLF = id_ct + (27, )\n\nid_ct_epub = id_ct + (39, )\n\nid_ct_htmlWithCRLF = id_ct + (38, )\n\nid_ct_pdf = id_ct + (29, )\n\nid_ct_postscript = id_ct + (30, )\n\nid_ct_utf8TextWithCRLF = id_ct + (37, )\n\nid_ct_xml = id_ct + (28, )\n\n\n# Map of Content Type OIDs to Content Types is added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_asciiTextWithCRLF: univ.OctetString(),\n    id_ct_epub: univ.OctetString(),\n    id_ct_htmlWithCRLF: univ.OctetString(),\n    id_ct_pdf: univ.OctetString(),\n    id_ct_postscript: univ.OctetString(),\n    id_ct_utf8TextWithCRLF: univ.OctetString(),\n    id_ct_xml: univ.OctetString(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc8419.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Edwards-Curve Digital Signature Algorithm (EdDSA) Signatures in the CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8419.txt\n# https://www.rfc-editor.org/errata/eid5869\n\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nclass ShakeOutputLen(univ.Integer):\n    pass\n\n\nid_Ed25519 = univ.ObjectIdentifier('1.3.101.112')\n\nsigAlg_Ed25519 = rfc5280.AlgorithmIdentifier()\nsigAlg_Ed25519['algorithm'] = id_Ed25519\n# sigAlg_Ed25519['parameters'] is absent\n\n\nid_Ed448 = univ.ObjectIdentifier('1.3.101.113')\n\nsigAlg_Ed448 = rfc5280.AlgorithmIdentifier()\nsigAlg_Ed448['algorithm'] = id_Ed448\n# sigAlg_Ed448['parameters'] is absent\n\n\nhashAlgs = univ.ObjectIdentifier('2.16.840.1.101.3.4.2')\n\nid_sha512 = hashAlgs + (3, )\n\nhashAlg_SHA_512 = rfc5280.AlgorithmIdentifier()\nhashAlg_SHA_512['algorithm'] = id_sha512\n# hashAlg_SHA_512['parameters'] is absent\n\n\nid_shake256 = hashAlgs + (12, )\n\nhashAlg_SHAKE256 = rfc5280.AlgorithmIdentifier()\nhashAlg_SHAKE256['algorithm'] = id_shake256\n# hashAlg_SHAKE256['parameters']is absent\n\n\nid_shake256_len = hashAlgs + (18, )\n\nhashAlg_SHAKE256_LEN  = rfc5280.AlgorithmIdentifier()\nhashAlg_SHAKE256_LEN['algorithm'] = id_shake256_len\nhashAlg_SHAKE256_LEN['parameters'] = ShakeOutputLen()\n\n\n# Map of Algorithm Identifier OIDs to Parameters added to the\n# ones in rfc5280.py.  Do not add OIDs with absent paramaters.\n\n_algorithmIdentifierMapUpdate = {\n    id_shake256_len: ShakeOutputLen(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc7191.py": "# This file is being contributed to of pyasn1-modules software.\n#\n# Created by Russ Housley without assistance from the asn1ate tool.\n# Modified by Russ Housley to add support for opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CMS Key Package Receipt and Error Content Types\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7191.txt\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\nDistinguishedName = rfc5280.DistinguishedName\n\n\n# SingleAttribute is the same as Attribute in RFC 5652, except that the\n# attrValues SET must have one and only one member\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass AttributeValues(univ.SetOf):\n    pass\n\nAttributeValues.componentType = AttributeValue()\nAttributeValues.sizeSpec = univ.Set.sizeSpec + constraint.ValueSizeConstraint(1, 1)\n\n\nclass SingleAttribute(univ.Sequence):\n    pass\n\nSingleAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', univ.ObjectIdentifier()),\n    namedtype.NamedType('attrValues', AttributeValues(),\n        openType=opentype.OpenType('attrType', rfc5652.cmsAttributesMap)\n    )\n)\n\n\n# SIR Entity Name\n\nclass SIREntityNameType(univ.ObjectIdentifier):\n    pass\n\n\nclass SIREntityNameValue(univ.Any):\n    pass\n\n\nclass SIREntityName(univ.Sequence):\n    pass\n\nSIREntityName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('sirenType', SIREntityNameType()),\n    namedtype.NamedType('sirenValue', univ.OctetString())\n    # CONTAINING the DER-encoded SIREntityNameValue\n)\n\n\nclass SIREntityNames(univ.SequenceOf):\n    pass\n\nSIREntityNames.componentType = SIREntityName()\nSIREntityNames.sizeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nid_dn = univ.ObjectIdentifier('2.16.840.1.101.2.1.16.0')\n\n\nclass siren_dn(SIREntityName):\n    def __init__(self):\n        SIREntityName.__init__(self)\n        self['sirenType'] = id_dn\n\n\n# Key Package Error CMS Content Type\n\nclass EnumeratedErrorCode(univ.Enumerated):\n    pass\n\n# Error codes with values <= 33 are aligned with RFC 5934\nEnumeratedErrorCode.namedValues = namedval.NamedValues(\n    ('decodeFailure', 1),\n    ('badContentInfo', 2),\n    ('badSignedData', 3),\n    ('badEncapContent', 4),\n    ('badCertificate', 5),\n    ('badSignerInfo', 6),\n    ('badSignedAttrs', 7),\n    ('badUnsignedAttrs', 8),\n    ('missingContent', 9),\n    ('noTrustAnchor', 10),\n    ('notAuthorized', 11),\n    ('badDigestAlgorithm', 12),\n    ('badSignatureAlgorithm', 13),\n    ('unsupportedKeySize', 14),\n    ('unsupportedParameters', 15),\n    ('signatureFailure', 16),\n    ('insufficientMemory', 17),\n    ('incorrectTarget', 23),\n    ('missingSignature', 29),\n    ('resourcesBusy', 30),\n    ('versionNumberMismatch', 31),\n    ('revokedCertificate', 33),\n    ('ambiguousDecrypt', 60),\n    ('noDecryptKey', 61),\n    ('badEncryptedData', 62),\n    ('badEnvelopedData', 63),\n    ('badAuthenticatedData', 64),\n    ('badAuthEnvelopedData', 65),\n    ('badKeyAgreeRecipientInfo', 66),\n    ('badKEKRecipientInfo', 67),\n    ('badEncryptContent', 68),\n    ('badEncryptAlgorithm', 69),\n    ('missingCiphertext', 70),\n    ('decryptFailure', 71),\n    ('badMACAlgorithm', 72),\n    ('badAuthAttrs', 73),\n    ('badUnauthAttrs', 74),\n    ('invalidMAC', 75),\n    ('mismatchedDigestAlg', 76),\n    ('missingCertificate', 77),\n    ('tooManySigners', 78),\n    ('missingSignedAttributes', 79),\n    ('derEncodingNotUsed', 80),\n    ('missingContentHints', 81),\n    ('invalidAttributeLocation', 82),\n    ('badMessageDigest', 83),\n    ('badKeyPackage', 84),\n    ('badAttributes', 85),\n    ('attributeComparisonFailure', 86),\n    ('unsupportedSymmetricKeyPackage', 87),\n    ('unsupportedAsymmetricKeyPackage', 88),\n    ('constraintViolation', 89),\n    ('ambiguousDefaultValue', 90),\n    ('noMatchingRecipientInfo', 91),\n    ('unsupportedKeyWrapAlgorithm', 92),\n    ('badKeyTransRecipientInfo', 93),\n    ('other', 127)\n)\n\n\nclass ErrorCodeChoice(univ.Choice):\n    pass\n\nErrorCodeChoice.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('enum', EnumeratedErrorCode()),\n    namedtype.NamedType('oid', univ.ObjectIdentifier())\n)\n\n\nclass KeyPkgID(univ.OctetString):\n    pass\n\n\nclass KeyPkgIdentifier(univ.Choice):\n    pass\n\nKeyPkgIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pkgID', KeyPkgID()),\n    namedtype.NamedType('attribute', SingleAttribute())\n)\n\n\nclass KeyPkgVersion(univ.Integer):\n    pass\n\n\nKeyPkgVersion.namedValues = namedval.NamedValues(\n    ('v1', 1),\n    ('v2', 2)\n)\n\nKeyPkgVersion.subtypeSpec = constraint.ValueRangeConstraint(1, 65535)\n\n\nid_ct_KP_keyPackageError = univ.ObjectIdentifier('2.16.840.1.101.2.1.2.78.6')\n\nclass KeyPackageError(univ.Sequence):\n    pass\n\nKeyPackageError.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', KeyPkgVersion().subtype(value='v2')),\n    namedtype.OptionalNamedType('errorOf', KeyPkgIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('errorBy', SIREntityName()),\n    namedtype.NamedType('errorCode', ErrorCodeChoice())\n)\n\n\n# Key Package Receipt CMS Content Type\n\nid_ct_KP_keyPackageReceipt = univ.ObjectIdentifier('2.16.840.1.101.2.1.2.78.3')\n\nclass KeyPackageReceipt(univ.Sequence):\n    pass\n\nKeyPackageReceipt.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', KeyPkgVersion().subtype(value='v2')),\n    namedtype.NamedType('receiptOf', KeyPkgIdentifier()),\n    namedtype.NamedType('receivedBy', SIREntityName())\n)\n\n\n# Key Package Receipt Request Attribute\n\nclass KeyPkgReceiptReq(univ.Sequence):\n    pass\n\nKeyPkgReceiptReq.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('encryptReceipt', univ.Boolean().subtype(value=0)),\n    namedtype.OptionalNamedType('receiptsFrom', SIREntityNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('receiptsTo', SIREntityNames())\n)\n\n\nid_aa_KP_keyPkgIdAndReceiptReq = univ.ObjectIdentifier('2.16.840.1.101.2.1.5.65')\n\nclass KeyPkgIdentifierAndReceiptReq(univ.Sequence):\n    pass\n\nKeyPkgIdentifierAndReceiptReq.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pkgID', KeyPkgID()),\n    namedtype.OptionalNamedType('receiptReq', KeyPkgReceiptReq())\n)\n\n\n# Map of Attribute Type OIDs to Attributes are added to\n# the ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_KP_keyPkgIdAndReceiptReq: KeyPkgIdentifierAndReceiptReq(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n\n# Map of CMC Content Type OIDs to CMC Content Types are added to\n# the ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_KP_keyPackageError: KeyPackageError(),\n    id_ct_KP_keyPackageReceipt: KeyPackageReceipt(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc5280.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Updated by Russ Housley for ORAddress Extension Attribute opentype support.\n# Updated by Russ Housley for AlgorithmIdentifier opentype support.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Internet X.509 Public Key Infrastructure Certificate and Certificate\n# Revocation List (CRL) Profile\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5280.txt\n#\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nMAX = float('inf')\n\n\ndef _buildOid(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nub_e163_4_sub_address_length = univ.Integer(40)\n\nub_e163_4_number_length = univ.Integer(15)\n\nunformatted_postal_address = univ.Integer(16)\n\n\nclass TerminalType(univ.Integer):\n    pass\n\n\nTerminalType.namedValues = namedval.NamedValues(\n    ('telex', 3),\n    ('teletex', 4),\n    ('g3-facsimile', 5),\n    ('g4-facsimile', 6),\n    ('ia5-terminal', 7),\n    ('videotex', 8)\n)\n\n\nclass Extension(univ.Sequence):\n    pass\n\n\nExtension.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('extnID', univ.ObjectIdentifier()),\n    namedtype.DefaultedNamedType('critical', univ.Boolean().subtype(value=0)),\n    namedtype.NamedType('extnValue', univ.OctetString())\n)\n\n\nclass Extensions(univ.SequenceOf):\n    pass\n\n\nExtensions.componentType = Extension()\nExtensions.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nphysical_delivery_personal_name = univ.Integer(13)\n\nub_unformatted_address_length = univ.Integer(180)\n\nub_pds_parameter_length = univ.Integer(30)\n\nub_pds_physical_address_lines = univ.Integer(6)\n\n\nclass UnformattedPostalAddress(univ.Set):\n    pass\n\n\nUnformattedPostalAddress.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('printable-address', univ.SequenceOf(componentType=char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)))),\n    namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_unformatted_address_length)))\n)\n\nub_organization_name = univ.Integer(64)\n\n\nclass X520OrganizationName(univ.Choice):\n    pass\n\n\nX520OrganizationName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name)))\n)\n\nub_x121_address_length = univ.Integer(16)\n\npds_name = univ.Integer(7)\n\nid_pkix = _buildOid(1, 3, 6, 1, 5, 5, 7)\n\nid_kp = _buildOid(id_pkix, 3)\n\nub_postal_code_length = univ.Integer(16)\n\n\nclass PostalCode(univ.Choice):\n    pass\n\n\nPostalCode.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('numeric-code', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length))),\n    namedtype.NamedType('printable-code', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length)))\n)\n\nub_generation_qualifier_length = univ.Integer(3)\n\nunique_postal_name = univ.Integer(20)\n\n\nclass DomainComponent(char.IA5String):\n    pass\n\n\nub_domain_defined_attribute_value_length = univ.Integer(128)\n\nub_match = univ.Integer(128)\n\nid_at = _buildOid(2, 5, 4)\n\n\nclass AttributeType(univ.ObjectIdentifier):\n    pass\n\n\nid_at_organizationalUnitName = _buildOid(id_at, 11)\n\nterminal_type = univ.Integer(23)\n\n\nclass PDSParameter(univ.Set):\n    pass\n\n\nPDSParameter.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('printable-string', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length))),\n    namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)))\n)\n\n\nclass PhysicalDeliveryPersonalName(PDSParameter):\n    pass\n\n\nub_surname_length = univ.Integer(40)\n\nid_ad = _buildOid(id_pkix, 48)\n\nub_domain_defined_attribute_type_length = univ.Integer(8)\n\n\nclass TeletexDomainDefinedAttribute(univ.Sequence):\n    pass\n\n\nTeletexDomainDefinedAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),\n    namedtype.NamedType('value', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_value_length)))\n)\n\nub_domain_defined_attributes = univ.Integer(4)\n\n\nclass TeletexDomainDefinedAttributes(univ.SequenceOf):\n    pass\n\n\nTeletexDomainDefinedAttributes.componentType = TeletexDomainDefinedAttribute()\nTeletexDomainDefinedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)\n\nextended_network_address = univ.Integer(22)\n\nub_locality_name = univ.Integer(128)\n\n\nclass X520LocalityName(univ.Choice):\n    pass\n\n\nX520LocalityName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name)))\n)\n\nteletex_organization_name = univ.Integer(3)\n\nub_given_name_length = univ.Integer(16)\n\nub_initials_length = univ.Integer(5)\n\n\nclass PersonalName(univ.Set):\n    pass\n\n\nPersonalName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('surname', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('given-name', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('initials', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('generation-qualifier', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\nub_organizational_unit_name_length = univ.Integer(32)\n\n\nclass OrganizationalUnitName(char.PrintableString):\n    pass\n\n\nOrganizationalUnitName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)\n\nid_at_generationQualifier = _buildOid(id_at, 44)\n\n\nclass Version(univ.Integer):\n    pass\n\n\nVersion.namedValues = namedval.NamedValues(\n    ('v1', 0),\n    ('v2', 1),\n    ('v3', 2)\n)\n\n\nclass CertificateSerialNumber(univ.Integer):\n    pass\n\n\nalgorithmIdentifierMap = {}\n\n\nclass AlgorithmIdentifier(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('algorithm', univ.ObjectIdentifier()),\n        namedtype.OptionalNamedType('parameters', univ.Any(),\n            openType=opentype.OpenType('algorithm', algorithmIdentifierMap)\n        )\n    )\n\n\nclass Time(univ.Choice):\n    pass\n\n\nTime.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('utcTime', useful.UTCTime()),\n    namedtype.NamedType('generalTime', useful.GeneralizedTime())\n)\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\ncertificateAttributesMap = {}\n\n\nclass AttributeTypeAndValue(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeType()),\n        namedtype.NamedType(\n            'value', AttributeValue(),\n            openType=opentype.OpenType('type', certificateAttributesMap)\n        )\n    )\n\n\nclass RelativeDistinguishedName(univ.SetOf):\n    pass\n\n\nRelativeDistinguishedName.componentType = AttributeTypeAndValue()\nRelativeDistinguishedName.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass RDNSequence(univ.SequenceOf):\n    pass\n\n\nRDNSequence.componentType = RelativeDistinguishedName()\n\n\nclass Name(univ.Choice):\n    pass\n\n\nName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('rdnSequence', RDNSequence())\n)\n\n\nclass TBSCertList(univ.Sequence):\n    pass\n\n\nTBSCertList.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('version', Version()),\n    namedtype.NamedType('signature', AlgorithmIdentifier()),\n    namedtype.NamedType('issuer', Name()),\n    namedtype.NamedType('thisUpdate', Time()),\n    namedtype.OptionalNamedType('nextUpdate', Time()),\n    namedtype.OptionalNamedType(\n        'revokedCertificates', univ.SequenceOf(\n            componentType=univ.Sequence(\n                componentType=namedtype.NamedTypes(\n                    namedtype.NamedType('userCertificate', CertificateSerialNumber()),\n                    namedtype.NamedType('revocationDate', Time()),\n                    namedtype.OptionalNamedType('crlEntryExtensions', Extensions())\n                )\n            )\n        )\n    ),\n    namedtype.OptionalNamedType(\n        'crlExtensions', Extensions().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass CertificateList(univ.Sequence):\n    pass\n\n\nCertificateList.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tbsCertList', TBSCertList()),\n    namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\n\nclass PhysicalDeliveryOfficeName(PDSParameter):\n    pass\n\n\nub_extension_attributes = univ.Integer(256)\n\ncertificateExtensionsMap = {\n}\n\noraddressExtensionAttributeMap = {\n}\n\n\nclass ExtensionAttribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType(\n            'extension-attribute-type',\n            univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, ub_extension_attributes)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType(\n            'extension-attribute-value',\n            univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)),\n            openType=opentype.OpenType('extension-attribute-type', oraddressExtensionAttributeMap))\n    )\n\nid_qt = _buildOid(id_pkix, 2)\n\nid_qt_cps = _buildOid(id_qt, 1)\n\nid_at_stateOrProvinceName = _buildOid(id_at, 8)\n\nid_at_title = _buildOid(id_at, 12)\n\nid_at_serialNumber = _buildOid(id_at, 5)\n\n\nclass X520dnQualifier(char.PrintableString):\n    pass\n\n\nclass PosteRestanteAddress(PDSParameter):\n    pass\n\n\nposte_restante_address = univ.Integer(19)\n\n\nclass UniqueIdentifier(univ.BitString):\n    pass\n\n\nclass Validity(univ.Sequence):\n    pass\n\n\nValidity.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('notBefore', Time()),\n    namedtype.NamedType('notAfter', Time())\n)\n\n\nclass SubjectPublicKeyInfo(univ.Sequence):\n    pass\n\n\nSubjectPublicKeyInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('subjectPublicKey', univ.BitString())\n)\n\n\nclass TBSCertificate(univ.Sequence):\n    pass\n\n\nTBSCertificate.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n                                 Version().subtype(explicitTag=tag.Tag(tag.tagClassContext,\n                                                                       tag.tagFormatSimple, 0)).subtype(value=\"v1\")),\n    namedtype.NamedType('serialNumber', CertificateSerialNumber()),\n    namedtype.NamedType('signature', AlgorithmIdentifier()),\n    namedtype.NamedType('issuer', Name()),\n    namedtype.NamedType('validity', Validity()),\n    namedtype.NamedType('subject', Name()),\n    namedtype.NamedType('subjectPublicKeyInfo', SubjectPublicKeyInfo()),\n    namedtype.OptionalNamedType('issuerUniqueID', UniqueIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('subjectUniqueID', UniqueIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('extensions',\n                                Extensions().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\nphysical_delivery_office_name = univ.Integer(10)\n\nub_name = univ.Integer(32768)\n\n\nclass X520name(univ.Choice):\n    pass\n\n\nX520name.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name)))\n)\n\nid_at_dnQualifier = _buildOid(id_at, 46)\n\nub_serial_number = univ.Integer(64)\n\nub_pseudonym = univ.Integer(128)\n\npkcs_9 = _buildOid(1, 2, 840, 113549, 1, 9)\n\n\nclass X121Address(char.NumericString):\n    pass\n\n\nX121Address.subtypeSpec = constraint.ValueSizeConstraint(1, ub_x121_address_length)\n\n\nclass NetworkAddress(X121Address):\n    pass\n\n\nub_integer_options = univ.Integer(256)\n\nid_at_commonName = _buildOid(id_at, 3)\n\nub_organization_name_length = univ.Integer(64)\n\nid_ad_ocsp = _buildOid(id_ad, 1)\n\nub_country_name_numeric_length = univ.Integer(3)\n\nub_country_name_alpha_length = univ.Integer(2)\n\n\nclass PhysicalDeliveryCountryName(univ.Choice):\n    pass\n\n\nPhysicalDeliveryCountryName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length, ub_country_name_numeric_length))),\n    namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))\n)\n\nid_emailAddress = _buildOid(pkcs_9, 1)\n\ncommon_name = univ.Integer(1)\n\n\nclass X520Pseudonym(univ.Choice):\n    pass\n\n\nX520Pseudonym.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym)))\n)\n\nub_domain_name_length = univ.Integer(16)\n\n\nclass AdministrationDomainName(univ.Choice):\n    pass\n\n\nAdministrationDomainName.tagSet = univ.Choice.tagSet.tagExplicitly(\n    tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2))\nAdministrationDomainName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('numeric', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length))),\n    namedtype.NamedType('printable', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length)))\n)\n\n\nclass PresentationAddress(univ.Sequence):\n    pass\n\n\nPresentationAddress.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('pSelector', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('sSelector', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('tSelector', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('nAddresses', univ.SetOf(componentType=univ.OctetString()).subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\n\nclass ExtendedNetworkAddress(univ.Choice):\n    pass\n\n\nExtendedNetworkAddress.componentType = namedtype.NamedTypes(\n    namedtype.NamedType(\n        'e163-4-address', univ.Sequence(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType('number', char.NumericString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_number_length)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n                namedtype.OptionalNamedType('sub-address', char.NumericString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_sub_address_length)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n            )\n        )\n    ),\n    namedtype.NamedType('psap-address', PresentationAddress().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n)\n\n\nclass TeletexOrganizationName(char.TeletexString):\n    pass\n\n\nTeletexOrganizationName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organization_name_length)\n\nub_terminal_id_length = univ.Integer(24)\n\n\nclass TerminalIdentifier(char.PrintableString):\n    pass\n\n\nTerminalIdentifier.subtypeSpec = constraint.ValueSizeConstraint(1, ub_terminal_id_length)\n\nid_ad_caIssuers = _buildOid(id_ad, 2)\n\nid_at_countryName = _buildOid(id_at, 6)\n\n\nclass StreetAddress(PDSParameter):\n    pass\n\n\npostal_code = univ.Integer(9)\n\nid_at_givenName = _buildOid(id_at, 42)\n\nub_title = univ.Integer(64)\n\n\nclass ExtensionAttributes(univ.SetOf):\n    pass\n\n\nExtensionAttributes.componentType = ExtensionAttribute()\nExtensionAttributes.sizeSpec = constraint.ValueSizeConstraint(1, ub_extension_attributes)\n\nub_emailaddress_length = univ.Integer(255)\n\nid_ad_caRepository = _buildOid(id_ad, 5)\n\n\nclass ExtensionORAddressComponents(PDSParameter):\n    pass\n\n\nub_organizational_unit_name = univ.Integer(64)\n\n\nclass X520OrganizationalUnitName(univ.Choice):\n    pass\n\n\nX520OrganizationalUnitName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name)))\n)\n\n\nclass LocalPostalAttributes(PDSParameter):\n    pass\n\n\nteletex_organizational_unit_names = univ.Integer(5)\n\n\nclass X520Title(univ.Choice):\n    pass\n\n\nX520Title.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title)))\n)\n\nid_at_localityName = _buildOid(id_at, 7)\n\nid_at_initials = _buildOid(id_at, 43)\n\nub_state_name = univ.Integer(128)\n\n\nclass X520StateOrProvinceName(univ.Choice):\n    pass\n\n\nX520StateOrProvinceName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name)))\n)\n\nphysical_delivery_organization_name = univ.Integer(14)\n\nid_at_surname = _buildOid(id_at, 4)\n\n\nclass X520countryName(char.PrintableString):\n    pass\n\n\nX520countryName.subtypeSpec = constraint.ValueSizeConstraint(2, 2)\n\nphysical_delivery_office_number = univ.Integer(11)\n\nid_qt_unotice = _buildOid(id_qt, 2)\n\n\nclass X520SerialNumber(char.PrintableString):\n    pass\n\n\nX520SerialNumber.subtypeSpec = constraint.ValueSizeConstraint(1, ub_serial_number)\n\n\nclass Attribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeType()),\n        namedtype.NamedType('values',\n                            univ.SetOf(componentType=AttributeValue()),\n                            openType=opentype.OpenType('type', certificateAttributesMap))\n    )\n\nub_common_name = univ.Integer(64)\n\nid_pe = _buildOid(id_pkix, 1)\n\n\nclass ExtensionPhysicalDeliveryAddressComponents(PDSParameter):\n    pass\n\n\nclass EmailAddress(char.IA5String):\n    pass\n\n\nEmailAddress.subtypeSpec = constraint.ValueSizeConstraint(1, ub_emailaddress_length)\n\nid_at_organizationName = _buildOid(id_at, 10)\n\npost_office_box_address = univ.Integer(18)\n\n\nclass BuiltInDomainDefinedAttribute(univ.Sequence):\n    pass\n\n\nBuiltInDomainDefinedAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),\n    namedtype.NamedType('value', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_value_length)))\n)\n\n\nclass BuiltInDomainDefinedAttributes(univ.SequenceOf):\n    pass\n\n\nBuiltInDomainDefinedAttributes.componentType = BuiltInDomainDefinedAttribute()\nBuiltInDomainDefinedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)\n\nid_at_pseudonym = _buildOid(id_at, 65)\n\nid_domainComponent = _buildOid(0, 9, 2342, 19200300, 100, 1, 25)\n\n\nclass X520CommonName(univ.Choice):\n    pass\n\n\nX520CommonName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name)))\n)\n\nextension_OR_address_components = univ.Integer(12)\n\nub_organizational_units = univ.Integer(4)\n\nteletex_personal_name = univ.Integer(4)\n\nub_numeric_user_id_length = univ.Integer(32)\n\nub_common_name_length = univ.Integer(64)\n\n\nclass TeletexCommonName(char.TeletexString):\n    pass\n\n\nTeletexCommonName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_common_name_length)\n\n\nclass PhysicalDeliveryOrganizationName(PDSParameter):\n    pass\n\n\nextension_physical_delivery_address_components = univ.Integer(15)\n\n\nclass NumericUserIdentifier(char.NumericString):\n    pass\n\n\nNumericUserIdentifier.subtypeSpec = constraint.ValueSizeConstraint(1, ub_numeric_user_id_length)\n\n\nclass CountryName(univ.Choice):\n    pass\n\n\nCountryName.tagSet = univ.Choice.tagSet.tagExplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1))\nCountryName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length, ub_country_name_numeric_length))),\n    namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))\n)\n\n\nclass OrganizationName(char.PrintableString):\n    pass\n\n\nOrganizationName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organization_name_length)\n\n\nclass OrganizationalUnitNames(univ.SequenceOf):\n    pass\n\n\nOrganizationalUnitNames.componentType = OrganizationalUnitName()\nOrganizationalUnitNames.sizeSpec = constraint.ValueSizeConstraint(1, ub_organizational_units)\n\n\nclass PrivateDomainName(univ.Choice):\n    pass\n\n\nPrivateDomainName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('numeric', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length))),\n    namedtype.NamedType('printable', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length)))\n)\n\n\nclass BuiltInStandardAttributes(univ.Sequence):\n    pass\n\n\nBuiltInStandardAttributes.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('country-name', CountryName()),\n    namedtype.OptionalNamedType('administration-domain-name', AdministrationDomainName()),\n    namedtype.OptionalNamedType('network-address', NetworkAddress().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('terminal-identifier', TerminalIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('private-domain-name', PrivateDomainName().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n    namedtype.OptionalNamedType('organization-name', OrganizationName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.OptionalNamedType('numeric-user-identifier', NumericUserIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n    namedtype.OptionalNamedType('personal-name', PersonalName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n    namedtype.OptionalNamedType('organizational-unit-names', OrganizationalUnitNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6)))\n)\n\n\nclass ORAddress(univ.Sequence):\n    pass\n\n\nORAddress.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('built-in-standard-attributes', BuiltInStandardAttributes()),\n    namedtype.OptionalNamedType('built-in-domain-defined-attributes', BuiltInDomainDefinedAttributes()),\n    namedtype.OptionalNamedType('extension-attributes', ExtensionAttributes())\n)\n\n\nclass DistinguishedName(RDNSequence):\n    pass\n\n\nid_ad_timeStamping = _buildOid(id_ad, 3)\n\n\nclass PhysicalDeliveryOfficeNumber(PDSParameter):\n    pass\n\n\nteletex_domain_defined_attributes = univ.Integer(6)\n\n\nclass UniquePostalName(PDSParameter):\n    pass\n\n\nphysical_delivery_country_name = univ.Integer(8)\n\nub_pds_name_length = univ.Integer(16)\n\n\nclass PDSName(char.PrintableString):\n    pass\n\n\nPDSName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_pds_name_length)\n\n\nclass TeletexPersonalName(univ.Set):\n    pass\n\n\nTeletexPersonalName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('surname', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('given-name', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('initials', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('generation-qualifier', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\nstreet_address = univ.Integer(17)\n\n\nclass PostOfficeBoxAddress(PDSParameter):\n    pass\n\n\nlocal_postal_attributes = univ.Integer(21)\n\n\nclass DirectoryString(univ.Choice):\n    pass\n\n\nDirectoryString.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\nteletex_common_name = univ.Integer(2)\n\n\nclass CommonName(char.PrintableString):\n    pass\n\n\nCommonName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_common_name_length)\n\n\nclass Certificate(univ.Sequence):\n    pass\n\n\nCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tbsCertificate', TBSCertificate()),\n    namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\n\nclass TeletexOrganizationalUnitName(char.TeletexString):\n    pass\n\n\nTeletexOrganizationalUnitName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)\n\nid_at_name = _buildOid(id_at, 41)\n\n\nclass TeletexOrganizationalUnitNames(univ.SequenceOf):\n    pass\n\n\nTeletexOrganizationalUnitNames.componentType = TeletexOrganizationalUnitName()\nTeletexOrganizationalUnitNames.sizeSpec = constraint.ValueSizeConstraint(1, ub_organizational_units)\n\nid_ce = _buildOid(2, 5, 29)\n\nid_ce_issuerAltName = _buildOid(id_ce, 18)\n\n\nclass SkipCerts(univ.Integer):\n    pass\n\n\nSkipCerts.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass CRLReason(univ.Enumerated):\n    pass\n\n\nCRLReason.namedValues = namedval.NamedValues(\n    ('unspecified', 0),\n    ('keyCompromise', 1),\n    ('cACompromise', 2),\n    ('affiliationChanged', 3),\n    ('superseded', 4),\n    ('cessationOfOperation', 5),\n    ('certificateHold', 6),\n    ('removeFromCRL', 8),\n    ('privilegeWithdrawn', 9),\n    ('aACompromise', 10)\n)\n\n\nclass PrivateKeyUsagePeriod(univ.Sequence):\n    pass\n\n\nPrivateKeyUsagePeriod.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('notBefore', useful.GeneralizedTime().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('notAfter', useful.GeneralizedTime().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nanotherNameMap = {\n\n}\n\n\nclass AnotherName(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type-id', univ.ObjectIdentifier()),\n        namedtype.NamedType(\n            'value',\n            univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)),\n            openType=opentype.OpenType('type-id', anotherNameMap)\n        )\n    )\n\n\nclass EDIPartyName(univ.Sequence):\n    pass\n\n\nEDIPartyName.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('nameAssigner', DirectoryString().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('partyName', DirectoryString().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass GeneralName(univ.Choice):\n    pass\n\n\nGeneralName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('otherName',\n                        AnotherName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('rfc822Name',\n                        char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('dNSName',\n                        char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('x400Address',\n                        ORAddress().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.NamedType('directoryName',\n                        Name().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n    namedtype.NamedType('ediPartyName',\n                        EDIPartyName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n    namedtype.NamedType('uniformResourceIdentifier',\n                        char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))),\n    namedtype.NamedType('iPAddress',\n                        univ.OctetString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n    namedtype.NamedType('registeredID', univ.ObjectIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 8)))\n)\n\n\nclass BaseDistance(univ.Integer):\n    pass\n\n\nBaseDistance.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass GeneralSubtree(univ.Sequence):\n    pass\n\n\nGeneralSubtree.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('base', GeneralName()),\n    namedtype.DefaultedNamedType('minimum', BaseDistance().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)).subtype(value=0)),\n    namedtype.OptionalNamedType('maximum', BaseDistance().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass GeneralNames(univ.SequenceOf):\n    pass\n\n\nGeneralNames.componentType = GeneralName()\nGeneralNames.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass DistributionPointName(univ.Choice):\n    pass\n\n\nDistributionPointName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('fullName',\n                        GeneralNames().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('nameRelativeToCRLIssuer', RelativeDistinguishedName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass ReasonFlags(univ.BitString):\n    pass\n\n\nReasonFlags.namedValues = namedval.NamedValues(\n    ('unused', 0),\n    ('keyCompromise', 1),\n    ('cACompromise', 2),\n    ('affiliationChanged', 3),\n    ('superseded', 4),\n    ('cessationOfOperation', 5),\n    ('certificateHold', 6),\n    ('privilegeWithdrawn', 7),\n    ('aACompromise', 8)\n)\n\n\nclass IssuingDistributionPoint(univ.Sequence):\n    pass\n\n\nIssuingDistributionPoint.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.DefaultedNamedType('onlyContainsUserCerts', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)).subtype(value=0)),\n    namedtype.DefaultedNamedType('onlyContainsCACerts', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)).subtype(value=0)),\n    namedtype.OptionalNamedType('onlySomeReasons', ReasonFlags().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.DefaultedNamedType('indirectCRL', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)).subtype(value=0)),\n    namedtype.DefaultedNamedType('onlyContainsAttributeCerts', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5)).subtype(value=0))\n)\n\nid_ce_certificatePolicies = _buildOid(id_ce, 32)\n\nid_kp_emailProtection = _buildOid(id_kp, 4)\n\n\nclass AccessDescription(univ.Sequence):\n    pass\n\n\nAccessDescription.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('accessMethod', univ.ObjectIdentifier()),\n    namedtype.NamedType('accessLocation', GeneralName())\n)\n\n\nclass IssuerAltName(GeneralNames):\n    pass\n\n\nid_ce_cRLDistributionPoints = _buildOid(id_ce, 31)\n\nholdInstruction = _buildOid(2, 2, 840, 10040, 2)\n\nid_holdinstruction_callissuer = _buildOid(holdInstruction, 2)\n\nid_ce_subjectDirectoryAttributes = _buildOid(id_ce, 9)\n\nid_ce_issuingDistributionPoint = _buildOid(id_ce, 28)\n\n\nclass DistributionPoint(univ.Sequence):\n    pass\n\n\nDistributionPoint.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('reasons', ReasonFlags().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('cRLIssuer', GeneralNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\nclass CRLDistributionPoints(univ.SequenceOf):\n    pass\n\n\nCRLDistributionPoints.componentType = DistributionPoint()\nCRLDistributionPoints.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass GeneralSubtrees(univ.SequenceOf):\n    pass\n\n\nGeneralSubtrees.componentType = GeneralSubtree()\nGeneralSubtrees.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass NameConstraints(univ.Sequence):\n    pass\n\n\nNameConstraints.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('permittedSubtrees', GeneralSubtrees().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('excludedSubtrees', GeneralSubtrees().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass SubjectDirectoryAttributes(univ.SequenceOf):\n    pass\n\n\nSubjectDirectoryAttributes.componentType = Attribute()\nSubjectDirectoryAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_kp_OCSPSigning = _buildOid(id_kp, 9)\n\nid_kp_timeStamping = _buildOid(id_kp, 8)\n\n\nclass DisplayText(univ.Choice):\n    pass\n\n\nDisplayText.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('ia5String', char.IA5String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n    namedtype.NamedType('visibleString',\n                        char.VisibleString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200)))\n)\n\n\nclass NoticeReference(univ.Sequence):\n    pass\n\n\nNoticeReference.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('organization', DisplayText()),\n    namedtype.NamedType('noticeNumbers', univ.SequenceOf(componentType=univ.Integer()))\n)\n\n\nclass UserNotice(univ.Sequence):\n    pass\n\n\nUserNotice.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('noticeRef', NoticeReference()),\n    namedtype.OptionalNamedType('explicitText', DisplayText())\n)\n\n\nclass PolicyQualifierId(univ.ObjectIdentifier):\n    pass\n\n\npolicyQualifierInfoMap = {\n\n}\n\n\nclass PolicyQualifierInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('policyQualifierId', PolicyQualifierId()),\n        namedtype.NamedType(\n            'qualifier', univ.Any(),\n            openType=opentype.OpenType('policyQualifierId', policyQualifierInfoMap)\n        )\n    )\n\n\nclass CertPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass PolicyInformation(univ.Sequence):\n    pass\n\n\nPolicyInformation.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('policyIdentifier', CertPolicyId()),\n    namedtype.OptionalNamedType('policyQualifiers', univ.SequenceOf(componentType=PolicyQualifierInfo()))\n)\n\n\nclass CertificatePolicies(univ.SequenceOf):\n    pass\n\n\nCertificatePolicies.componentType = PolicyInformation()\nCertificatePolicies.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass SubjectAltName(GeneralNames):\n    pass\n\n\nid_ce_basicConstraints = _buildOid(id_ce, 19)\n\nid_ce_authorityKeyIdentifier = _buildOid(id_ce, 35)\n\nid_kp_codeSigning = _buildOid(id_kp, 3)\n\n\nclass BasicConstraints(univ.Sequence):\n    pass\n\n\nBasicConstraints.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('cA', univ.Boolean().subtype(value=0)),\n    namedtype.OptionalNamedType('pathLenConstraint',\n                                univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, MAX)))\n)\n\nid_ce_certificateIssuer = _buildOid(id_ce, 29)\n\n\nclass PolicyMappings(univ.SequenceOf):\n    pass\n\n\nPolicyMappings.componentType = univ.Sequence(\n    componentType=namedtype.NamedTypes(\n        namedtype.NamedType('issuerDomainPolicy', CertPolicyId()),\n        namedtype.NamedType('subjectDomainPolicy', CertPolicyId())\n    )\n)\n\nPolicyMappings.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass InhibitAnyPolicy(SkipCerts):\n    pass\n\n\nanyPolicy = _buildOid(id_ce_certificatePolicies, 0)\n\n\nclass CRLNumber(univ.Integer):\n    pass\n\n\nCRLNumber.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass BaseCRLNumber(CRLNumber):\n    pass\n\n\nid_ce_nameConstraints = _buildOid(id_ce, 30)\n\nid_kp_serverAuth = _buildOid(id_kp, 1)\n\nid_ce_freshestCRL = _buildOid(id_ce, 46)\n\nid_ce_cRLReasons = _buildOid(id_ce, 21)\n\nid_ce_extKeyUsage = _buildOid(id_ce, 37)\n\n\nclass KeyIdentifier(univ.OctetString):\n    pass\n\n\nclass AuthorityKeyIdentifier(univ.Sequence):\n    pass\n\n\nAuthorityKeyIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('keyIdentifier', KeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('authorityCertIssuer', GeneralNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('authorityCertSerialNumber', CertificateSerialNumber().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\nclass FreshestCRL(CRLDistributionPoints):\n    pass\n\n\nid_ce_policyConstraints = _buildOid(id_ce, 36)\n\nid_pe_authorityInfoAccess = _buildOid(id_pe, 1)\n\n\nclass AuthorityInfoAccessSyntax(univ.SequenceOf):\n    pass\n\n\nAuthorityInfoAccessSyntax.componentType = AccessDescription()\nAuthorityInfoAccessSyntax.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_holdinstruction_none = _buildOid(holdInstruction, 1)\n\n\nclass CPSuri(char.IA5String):\n    pass\n\n\nid_pe_subjectInfoAccess = _buildOid(id_pe, 11)\n\n\nclass SubjectKeyIdentifier(KeyIdentifier):\n    pass\n\n\nid_ce_subjectAltName = _buildOid(id_ce, 17)\n\n\nclass KeyPurposeId(univ.ObjectIdentifier):\n    pass\n\n\nclass ExtKeyUsageSyntax(univ.SequenceOf):\n    pass\n\n\nExtKeyUsageSyntax.componentType = KeyPurposeId()\nExtKeyUsageSyntax.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass HoldInstructionCode(univ.ObjectIdentifier):\n    pass\n\n\nid_ce_deltaCRLIndicator = _buildOid(id_ce, 27)\n\nid_ce_keyUsage = _buildOid(id_ce, 15)\n\nid_ce_holdInstructionCode = _buildOid(id_ce, 23)\n\n\nclass SubjectInfoAccessSyntax(univ.SequenceOf):\n    pass\n\n\nSubjectInfoAccessSyntax.componentType = AccessDescription()\nSubjectInfoAccessSyntax.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass InvalidityDate(useful.GeneralizedTime):\n    pass\n\n\nclass KeyUsage(univ.BitString):\n    pass\n\n\nKeyUsage.namedValues = namedval.NamedValues(\n    ('digitalSignature', 0),\n    ('nonRepudiation', 1),\n    ('keyEncipherment', 2),\n    ('dataEncipherment', 3),\n    ('keyAgreement', 4),\n    ('keyCertSign', 5),\n    ('cRLSign', 6),\n    ('encipherOnly', 7),\n    ('decipherOnly', 8)\n)\n\nid_ce_invalidityDate = _buildOid(id_ce, 24)\n\nid_ce_policyMappings = _buildOid(id_ce, 33)\n\nanyExtendedKeyUsage = _buildOid(id_ce_extKeyUsage, 0)\n\nid_ce_privateKeyUsagePeriod = _buildOid(id_ce, 16)\n\nid_ce_cRLNumber = _buildOid(id_ce, 20)\n\n\nclass CertificateIssuer(GeneralNames):\n    pass\n\n\nid_holdinstruction_reject = _buildOid(holdInstruction, 3)\n\n\nclass PolicyConstraints(univ.Sequence):\n    pass\n\n\nPolicyConstraints.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('requireExplicitPolicy',\n                                SkipCerts().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('inhibitPolicyMapping',\n                                SkipCerts().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\nid_kp_clientAuth = _buildOid(id_kp, 2)\n\nid_ce_subjectKeyIdentifier = _buildOid(id_ce, 14)\n\nid_ce_inhibitAnyPolicy = _buildOid(id_ce, 54)\n\n# map of ORAddress ExtensionAttribute type to ExtensionAttribute value\n\n_oraddressExtensionAttributeMapUpdate = {\n    common_name: CommonName(),\n    teletex_common_name: TeletexCommonName(),\n    teletex_organization_name: TeletexOrganizationName(),\n    teletex_personal_name: TeletexPersonalName(),\n    teletex_organizational_unit_names: TeletexOrganizationalUnitNames(),\n    pds_name: PDSName(),\n    physical_delivery_country_name: PhysicalDeliveryCountryName(),\n    postal_code: PostalCode(),\n    physical_delivery_office_name: PhysicalDeliveryOfficeName(),\n    physical_delivery_office_number: PhysicalDeliveryOfficeNumber(),\n    extension_OR_address_components: ExtensionORAddressComponents(),\n    physical_delivery_personal_name: PhysicalDeliveryPersonalName(),\n    physical_delivery_organization_name: PhysicalDeliveryOrganizationName(),\n    extension_physical_delivery_address_components: ExtensionPhysicalDeliveryAddressComponents(),\n    unformatted_postal_address: UnformattedPostalAddress(),\n    street_address: StreetAddress(),\n    post_office_box_address: PostOfficeBoxAddress(),\n    poste_restante_address: PosteRestanteAddress(),\n    unique_postal_name: UniquePostalName(),\n    local_postal_attributes: LocalPostalAttributes(),\n    extended_network_address: ExtendedNetworkAddress(),\n    terminal_type: TerminalType(),\n    teletex_domain_defined_attributes: TeletexDomainDefinedAttributes(),\n}\n\noraddressExtensionAttributeMap.update(_oraddressExtensionAttributeMapUpdate)\n\n\n# map of AttributeType -> AttributeValue\n\n_certificateAttributesMapUpdate = {\n    id_at_name: X520name(),\n    id_at_surname: X520name(),\n    id_at_givenName: X520name(),\n    id_at_initials: X520name(),\n    id_at_generationQualifier: X520name(),\n    id_at_commonName: X520CommonName(),\n    id_at_localityName: X520LocalityName(),\n    id_at_stateOrProvinceName: X520StateOrProvinceName(),\n    id_at_organizationName: X520OrganizationName(),\n    id_at_organizationalUnitName: X520OrganizationalUnitName(),\n    id_at_title: X520Title(),\n    id_at_dnQualifier: X520dnQualifier(),\n    id_at_countryName: X520countryName(),\n    id_at_serialNumber: X520SerialNumber(),\n    id_at_pseudonym: X520Pseudonym(),\n    id_domainComponent: DomainComponent(),\n    id_emailAddress: EmailAddress(),\n}\n\ncertificateAttributesMap.update(_certificateAttributesMapUpdate)\n\n\n# map of Certificate Extension OIDs to Extensions\n\n_certificateExtensionsMap = {\n    id_ce_authorityKeyIdentifier: AuthorityKeyIdentifier(),\n    id_ce_subjectKeyIdentifier: SubjectKeyIdentifier(),\n    id_ce_keyUsage: KeyUsage(),\n    id_ce_privateKeyUsagePeriod: PrivateKeyUsagePeriod(),\n    id_ce_certificatePolicies: CertificatePolicies(),\n    id_ce_policyMappings: PolicyMappings(),\n    id_ce_subjectAltName: SubjectAltName(),\n    id_ce_issuerAltName: IssuerAltName(),\n    id_ce_subjectDirectoryAttributes: SubjectDirectoryAttributes(),\n    id_ce_basicConstraints: BasicConstraints(),\n    id_ce_nameConstraints: NameConstraints(),\n    id_ce_policyConstraints: PolicyConstraints(),\n    id_ce_extKeyUsage: ExtKeyUsageSyntax(),\n    id_ce_cRLDistributionPoints: CRLDistributionPoints(),\n    id_pe_authorityInfoAccess: AuthorityInfoAccessSyntax(),\n    id_ce_cRLNumber: univ.Integer(),\n    id_ce_deltaCRLIndicator: BaseCRLNumber(),\n    id_ce_issuingDistributionPoint: IssuingDistributionPoint(),\n    id_ce_cRLReasons: CRLReason(),\n    id_ce_holdInstructionCode: univ.ObjectIdentifier(),\n    id_ce_invalidityDate: useful.GeneralizedTime(),\n    id_ce_certificateIssuer: GeneralNames(),\n}\n\ncertificateExtensionsMap.update(_certificateExtensionsMap)\n", "pyasn1_modules/rfc5753.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Elliptic Curve Cryptography (ECC) Algorithms in the CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5753.txt\n#\n\nfrom pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5480\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5751\nfrom pyasn1_modules import rfc8018\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\n\n# Imports from RFC 5652\n\nOriginatorPublicKey = rfc5652.OriginatorPublicKey\n\nUserKeyingMaterial = rfc5652.UserKeyingMaterial\n\n\n# Imports from RFC 5480\n\nECDSA_Sig_Value = rfc5480.ECDSA_Sig_Value\n\nECParameters = rfc5480.ECParameters\n\nECPoint = rfc5480.ECPoint\n\nid_ecPublicKey = rfc5480.id_ecPublicKey\n\n\n# Imports from RFC 8018\n\nid_hmacWithSHA224 = rfc8018.id_hmacWithSHA224\n\nid_hmacWithSHA256 = rfc8018.id_hmacWithSHA256\n\nid_hmacWithSHA384 = rfc8018.id_hmacWithSHA384\n\nid_hmacWithSHA512 = rfc8018.id_hmacWithSHA512\n\n\n# Object Identifier arcs\n\nx9_63_scheme = univ.ObjectIdentifier('1.3.133.16.840.63.0')\n\nsecg_scheme = univ.ObjectIdentifier('1.3.132.1')\n\n\n# Object Identifiers for the algorithms\n\ndhSinglePass_cofactorDH_sha1kdf_scheme = x9_63_scheme + (3, )\n\ndhSinglePass_cofactorDH_sha224kdf_scheme = secg_scheme + (14, 0, )\n\ndhSinglePass_cofactorDH_sha256kdf_scheme = secg_scheme + (14, 1, )\n\ndhSinglePass_cofactorDH_sha384kdf_scheme = secg_scheme + (14, 2, )\n\ndhSinglePass_cofactorDH_sha512kdf_scheme = secg_scheme + (14, 3, )\n\ndhSinglePass_stdDH_sha1kdf_scheme = x9_63_scheme + (2, )\n\ndhSinglePass_stdDH_sha224kdf_scheme = secg_scheme + (11, 0, )\n\ndhSinglePass_stdDH_sha256kdf_scheme = secg_scheme + (11, 1, )\n\ndhSinglePass_stdDH_sha384kdf_scheme = secg_scheme + (11, 2, )\n\ndhSinglePass_stdDH_sha512kdf_scheme = secg_scheme + (11, 3, )\n\nmqvSinglePass_sha1kdf_scheme = x9_63_scheme + (16, )\n\nmqvSinglePass_sha224kdf_scheme = secg_scheme + (15, 0, )\n\nmqvSinglePass_sha256kdf_scheme = secg_scheme + (15, 1, )\n\nmqvSinglePass_sha384kdf_scheme = secg_scheme + (15, 2, )\n\nmqvSinglePass_sha512kdf_scheme = secg_scheme + (15, 3, )\n\n\n# Structures for parameters and key derivation\n\nclass IV(univ.OctetString):\n    # Exactly 8 octets\n    pass\n\n\nclass CBCParameter(IV):\n    pass\n\n\nclass KeyWrapAlgorithm(AlgorithmIdentifier):\n    pass\n\n\nclass ECC_CMS_SharedInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('keyInfo', KeyWrapAlgorithm()),\n        namedtype.OptionalNamedType('entityUInfo',\n            univ.OctetString().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('suppPubInfo',\n            univ.OctetString().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass MQVuserKeyingMaterial(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('ephemeralPublicKey', OriginatorPublicKey()),\n        namedtype.OptionalNamedType('addedukm',\n            UserKeyingMaterial().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\n# Update the Algorithm Identifier map in rfc5280.py and\n# Update the SMIMECapabilities Attribute Map in rfc5751.py\n\n_algorithmIdentifierMapUpdate = {\n    dhSinglePass_stdDH_sha1kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_stdDH_sha224kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_stdDH_sha256kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_stdDH_sha384kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_stdDH_sha512kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_cofactorDH_sha1kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_cofactorDH_sha224kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_cofactorDH_sha256kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_cofactorDH_sha384kdf_scheme: KeyWrapAlgorithm(),\n    dhSinglePass_cofactorDH_sha512kdf_scheme: KeyWrapAlgorithm(),\n    mqvSinglePass_sha1kdf_scheme: KeyWrapAlgorithm(),\n    mqvSinglePass_sha224kdf_scheme: KeyWrapAlgorithm(),\n    mqvSinglePass_sha256kdf_scheme: KeyWrapAlgorithm(),\n    mqvSinglePass_sha384kdf_scheme: KeyWrapAlgorithm(),\n    mqvSinglePass_sha512kdf_scheme: KeyWrapAlgorithm(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n\nrfc5751.smimeCapabilityMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc2315.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS#7 message syntax\n#\n# ASN.1 source from:\n# https://opensource.apple.com/source/Security/Security-55179.1/libsecurity_asn1/asn1/pkcs7.asn.auto.html\n#\n# Sample captures from:\n# openssl crl2pkcs7 -nocrl -certfile cert1.cer -out outfile.p7b\n#\nfrom pyasn1_modules.rfc2459 import *\n\n\nclass Attribute(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type', AttributeType()),\n        namedtype.NamedType('values', univ.SetOf(componentType=AttributeValue()))\n    )\n\n\nclass AttributeValueAssertion(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('attributeType', AttributeType()),\n        namedtype.NamedType('attributeValue', AttributeValue(),\n                            openType=opentype.OpenType('type', certificateAttributesMap))\n    )\n\n\npkcs_7 = univ.ObjectIdentifier('1.2.840.113549.1.7')\ndata = univ.ObjectIdentifier('1.2.840.113549.1.7.1')\nsignedData = univ.ObjectIdentifier('1.2.840.113549.1.7.2')\nenvelopedData = univ.ObjectIdentifier('1.2.840.113549.1.7.3')\nsignedAndEnvelopedData = univ.ObjectIdentifier('1.2.840.113549.1.7.4')\ndigestedData = univ.ObjectIdentifier('1.2.840.113549.1.7.5')\nencryptedData = univ.ObjectIdentifier('1.2.840.113549.1.7.6')\n\n\nclass ContentType(univ.ObjectIdentifier):\n    pass\n\n\nclass ContentEncryptionAlgorithmIdentifier(AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedContent(univ.OctetString):\n    pass\n\n\ncontentTypeMap = {}\n\n\nclass EncryptedContentInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('contentType', ContentType()),\n        namedtype.NamedType('contentEncryptionAlgorithm', ContentEncryptionAlgorithmIdentifier()),\n        namedtype.OptionalNamedType(\n            'encryptedContent', EncryptedContent().subtype(\n                implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)\n            ),\n            openType=opentype.OpenType('contentType', contentTypeMap)\n        )\n    )\n\n\nclass Version(univ.Integer):  # overrides x509.Version\n    pass\n\n\nclass EncryptedData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('encryptedContentInfo', EncryptedContentInfo())\n    )\n\n\nclass DigestAlgorithmIdentifier(AlgorithmIdentifier):\n    pass\n\n\nclass DigestAlgorithmIdentifiers(univ.SetOf):\n    componentType = DigestAlgorithmIdentifier()\n\n\nclass Digest(univ.OctetString):\n    pass\n\n\nclass ContentInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('contentType', ContentType()),\n        namedtype.OptionalNamedType(\n            'content',\n            univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)),\n            openType=opentype.OpenType('contentType', contentTypeMap)\n        )\n    )\n\n\nclass DigestedData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n        namedtype.NamedType('contentInfo', ContentInfo()),\n        namedtype.NamedType('digest', Digest())\n    )\n\n\nclass IssuerAndSerialNumber(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('issuer', Name()),\n        namedtype.NamedType('serialNumber', CertificateSerialNumber())\n    )\n\n\nclass KeyEncryptionAlgorithmIdentifier(AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedKey(univ.OctetString):\n    pass\n\n\nclass RecipientInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n        namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n        namedtype.NamedType('encryptedKey', EncryptedKey())\n    )\n\n\nclass RecipientInfos(univ.SetOf):\n    componentType = RecipientInfo()\n\n\nclass Attributes(univ.SetOf):\n    componentType = Attribute()\n\n\nclass ExtendedCertificateInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('certificate', Certificate()),\n        namedtype.NamedType('attributes', Attributes())\n    )\n\n\nclass SignatureAlgorithmIdentifier(AlgorithmIdentifier):\n    pass\n\n\nclass Signature(univ.BitString):\n    pass\n\n\nclass ExtendedCertificate(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('extendedCertificateInfo', ExtendedCertificateInfo()),\n        namedtype.NamedType('signatureAlgorithm', SignatureAlgorithmIdentifier()),\n        namedtype.NamedType('signature', Signature())\n    )\n\n\nclass ExtendedCertificateOrCertificate(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certificate', Certificate()),\n        namedtype.NamedType('extendedCertificate', ExtendedCertificate().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n\n\nclass ExtendedCertificatesAndCertificates(univ.SetOf):\n    componentType = ExtendedCertificateOrCertificate()\n\n\nclass SerialNumber(univ.Integer):\n    pass\n\n\nclass CRLEntry(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('userCertificate', SerialNumber()),\n        namedtype.NamedType('revocationDate', useful.UTCTime())\n    )\n\n\nclass TBSCertificateRevocationList(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signature', AlgorithmIdentifier()),\n        namedtype.NamedType('issuer', Name()),\n        namedtype.NamedType('lastUpdate', useful.UTCTime()),\n        namedtype.NamedType('nextUpdate', useful.UTCTime()),\n        namedtype.OptionalNamedType('revokedCertificates', univ.SequenceOf(componentType=CRLEntry()))\n    )\n\n\nclass CertificateRevocationList(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('tbsCertificateRevocationList', TBSCertificateRevocationList()),\n        namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('signature', univ.BitString())\n    )\n\n\nclass CertificateRevocationLists(univ.SetOf):\n    componentType = CertificateRevocationList()\n\n\nclass DigestEncryptionAlgorithmIdentifier(AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedDigest(univ.OctetString):\n    pass\n\n\nclass SignerInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n        namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n        namedtype.OptionalNamedType('authenticatedAttributes', Attributes().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('digestEncryptionAlgorithm', DigestEncryptionAlgorithmIdentifier()),\n        namedtype.NamedType('encryptedDigest', EncryptedDigest()),\n        namedtype.OptionalNamedType('unauthenticatedAttributes', Attributes().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass SignerInfos(univ.SetOf):\n    componentType = SignerInfo()\n\n\nclass SignedAndEnvelopedData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('recipientInfos', RecipientInfos()),\n        namedtype.NamedType('digestAlgorithms', DigestAlgorithmIdentifiers()),\n        namedtype.NamedType('encryptedContentInfo', EncryptedContentInfo()),\n        namedtype.OptionalNamedType('certificates', ExtendedCertificatesAndCertificates().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('crls', CertificateRevocationLists().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.NamedType('signerInfos', SignerInfos())\n    )\n\n\nclass EnvelopedData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('recipientInfos', RecipientInfos()),\n        namedtype.NamedType('encryptedContentInfo', EncryptedContentInfo())\n    )\n\n\nclass DigestInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n        namedtype.NamedType('digest', Digest())\n    )\n\n\nclass SignedData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.OptionalNamedType('digestAlgorithms', DigestAlgorithmIdentifiers()),\n        namedtype.NamedType('contentInfo', ContentInfo()),\n        namedtype.OptionalNamedType('certificates', ExtendedCertificatesAndCertificates().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('crls', CertificateRevocationLists().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('signerInfos', SignerInfos())\n    )\n\n\nclass Data(univ.OctetString):\n    pass\n\n_contentTypeMapUpdate = {\n    data: Data(),\n    signedData: SignedData(),\n    envelopedData: EnvelopedData(),\n    signedAndEnvelopedData: SignedAndEnvelopedData(),\n    digestedData: DigestedData(),\n    encryptedData: EncryptedData()\n}\n\ncontentTypeMap.update(_contentTypeMapUpdate)\n", "pyasn1_modules/rfc5755.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# An Internet Attribute Certificate Profile for Authorization\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5755.txt\n# https://www.rfc-editor.org/rfc/rfc5912.txt (see Section 13)\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n# Map for Security Category type to value\n\nsecurityCategoryMap = { }\n\n\n# Imports from RFC 5652\n\nContentInfo = rfc5652.ContentInfo\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nAttribute = rfc5280.Attribute\n\nAuthorityInfoAccessSyntax = rfc5280.AuthorityInfoAccessSyntax\n\nAuthorityKeyIdentifier = rfc5280.AuthorityKeyIdentifier\n\nCertificateSerialNumber = rfc5280.CertificateSerialNumber\n\nCRLDistributionPoints = rfc5280.CRLDistributionPoints\n\nExtensions = rfc5280.Extensions\n\nExtension = rfc5280.Extension\n\nGeneralNames = rfc5280.GeneralNames\n\nGeneralName = rfc5280.GeneralName\n\nUniqueIdentifier = rfc5280.UniqueIdentifier\n\n\n# Object Identifier arcs\n\nid_pkix = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, ))\n\nid_pe = id_pkix + (1, )\n\nid_kp = id_pkix + (3, )\n\nid_aca = id_pkix + (10, )\n\nid_ad = id_pkix + (48, )\n\nid_at = univ.ObjectIdentifier((2, 5, 4, ))\n\nid_ce = univ.ObjectIdentifier((2, 5, 29, ))\n\n\n# Attribute Certificate\n\nclass AttCertVersion(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('v2', 1)\n    )\n\n\nclass IssuerSerial(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('issuer', GeneralNames()),\n        namedtype.NamedType('serial', CertificateSerialNumber()),\n        namedtype.OptionalNamedType('issuerUID', UniqueIdentifier())\n    )\n\n\nclass ObjectDigestInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('digestedObjectType',\n            univ.Enumerated(namedValues=namedval.NamedValues(\n                ('publicKey', 0),\n                ('publicKeyCert', 1),\n                ('otherObjectTypes', 2)))),\n        namedtype.OptionalNamedType('otherObjectTypeID',\n            univ.ObjectIdentifier()),\n        namedtype.NamedType('digestAlgorithm',\n            AlgorithmIdentifier()),\n        namedtype.NamedType('objectDigest',\n            univ.BitString())\n    )\n\n\nclass Holder(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('baseCertificateID',\n            IssuerSerial().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('entityName',\n            GeneralNames().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('objectDigestInfo',\n            ObjectDigestInfo().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2)))\n)\n\n\nclass V2Form(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('issuerName',\n            GeneralNames()),\n        namedtype.OptionalNamedType('baseCertificateID',\n            IssuerSerial().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('objectDigestInfo',\n            ObjectDigestInfo().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\nclass AttCertIssuer(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('v1Form', GeneralNames()),\n        namedtype.NamedType('v2Form', V2Form().subtype(implicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n\n\nclass AttCertValidityPeriod(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('notBeforeTime', useful.GeneralizedTime()),\n        namedtype.NamedType('notAfterTime', useful.GeneralizedTime())\n    )\n\n\nclass AttributeCertificateInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version',\n            AttCertVersion()),\n        namedtype.NamedType('holder',\n            Holder()),\n        namedtype.NamedType('issuer',\n            AttCertIssuer()),\n        namedtype.NamedType('signature',\n            AlgorithmIdentifier()),\n        namedtype.NamedType('serialNumber',\n            CertificateSerialNumber()),\n        namedtype.NamedType('attrCertValidityPeriod',\n            AttCertValidityPeriod()),\n        namedtype.NamedType('attributes',\n            univ.SequenceOf(componentType=Attribute())),\n        namedtype.OptionalNamedType('issuerUniqueID',\n            UniqueIdentifier()),\n        namedtype.OptionalNamedType('extensions',\n            Extensions())\n    )\n\n\nclass AttributeCertificate(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('acinfo', AttributeCertificateInfo()),\n        namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('signatureValue', univ.BitString())\n    )\n\n\n# Attribute Certificate Extensions\n\nid_pe_ac_auditIdentity = id_pe + (4, )\n\nid_ce_noRevAvail = id_ce + (56, )\n\nid_ce_targetInformation = id_ce + (55, )\n\n\nclass TargetCert(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('targetCertificate', IssuerSerial()),\n        namedtype.OptionalNamedType('targetName', GeneralName()),\n        namedtype.OptionalNamedType('certDigestInfo', ObjectDigestInfo())\n    )\n\n\nclass Target(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('targetName',\n            GeneralName().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('targetGroup',\n            GeneralName().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('targetCert',\n            TargetCert().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2)))\n    )\n\n\nclass Targets(univ.SequenceOf):\n    componentType = Target()\n\n\nid_pe_ac_proxying = id_pe + (10, )\n\n\nclass ProxyInfo(univ.SequenceOf):\n    componentType = Targets()\n\n\nid_pe_aaControls = id_pe + (6, )\n\n\nclass AttrSpec(univ.SequenceOf):\n    componentType = univ.ObjectIdentifier()\n\n\nclass AAControls(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('pathLenConstraint',\n            univ.Integer().subtype(\n                subtypeSpec=constraint.ValueRangeConstraint(0, MAX))),\n        namedtype.OptionalNamedType('permittedAttrs',\n            AttrSpec().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('excludedAttrs',\n            AttrSpec().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.DefaultedNamedType('permitUnSpecified',\n            univ.Boolean().subtype(value=1))\n    )\n\n\n# Attribute Certificate Attributes\n\nid_aca_authenticationInfo = id_aca + (1, )\n\n\nid_aca_accessIdentity = id_aca + (2, )\n\n\nclass SvceAuthInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('service', GeneralName()),\n        namedtype.NamedType('ident', GeneralName()),\n        namedtype.OptionalNamedType('authInfo', univ.OctetString())\n    )\n\n\nid_aca_chargingIdentity = id_aca + (3, )\n\n\nid_aca_group = id_aca + (4, )\n\n\nclass IetfAttrSyntax(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('policyAuthority',\n            GeneralNames().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('values', univ.SequenceOf(\n            componentType=univ.Choice(componentType=namedtype.NamedTypes(\n                namedtype.NamedType('octets', univ.OctetString()),\n                namedtype.NamedType('oid', univ.ObjectIdentifier()),\n                namedtype.NamedType('string', char.UTF8String())\n            ))\n        ))\n    )\n\n\nid_at_role = id_at + (72,)\n\n\nclass RoleSyntax(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('roleAuthority',\n            GeneralNames().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('roleName',\n            GeneralName().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass ClassList(univ.BitString):\n    namedValues = namedval.NamedValues(\n        ('unmarked', 0),\n        ('unclassified', 1),\n        ('restricted', 2),\n        ('confidential', 3),\n        ('secret', 4),\n        ('topSecret', 5)\n    )\n\n\nclass SecurityCategory(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('type',\n            univ.ObjectIdentifier().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('value',\n            univ.Any().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)),\n            openType=opentype.OpenType('type', securityCategoryMap))\n    )\n\n\nid_at_clearance = univ.ObjectIdentifier((2, 5, 4, 55, ))\n\n\nclass Clearance(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('policyId',\n            univ.ObjectIdentifier()),\n        namedtype.DefaultedNamedType('classList',\n            ClassList().subtype(value='unclassified')),\n        namedtype.OptionalNamedType('securityCategories',\n            univ.SetOf(componentType=SecurityCategory()))\n    )\n\n\nid_at_clearance_rfc3281 = univ.ObjectIdentifier((2, 5, 1, 5, 55, ))\n\n\nclass Clearance_rfc3281(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('policyId',\n            univ.ObjectIdentifier().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.DefaultedNamedType('classList',\n            ClassList().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)).subtype(\n                    value='unclassified')),\n        namedtype.OptionalNamedType('securityCategories',\n            univ.SetOf(componentType=SecurityCategory()).subtype(\n                implicitTag=tag.Tag(\n                    tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nid_aca_encAttrs = id_aca + (6, )\n\n\nclass ACClearAttrs(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('acIssuer', GeneralName()),\n        namedtype.NamedType('acSerial', univ.Integer()),\n        namedtype.NamedType('attrs', univ.SequenceOf(componentType=Attribute()))\n    )\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_ac_auditIdentity: univ.OctetString(),\n    id_ce_noRevAvail: univ.Null(),\n    id_ce_targetInformation: Targets(),\n    id_pe_ac_proxying: ProxyInfo(),\n    id_pe_aaControls: AAControls(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n\n\n# Map of AttributeType OIDs to AttributeValue added to the\n# ones that are in rfc5280.py\n\n_certificateAttributesMapUpdate = {\n    id_aca_authenticationInfo: SvceAuthInfo(),\n    id_aca_accessIdentity: SvceAuthInfo(),\n    id_aca_chargingIdentity: IetfAttrSyntax(),\n    id_aca_group: IetfAttrSyntax(),\n    id_at_role: RoleSyntax(),\n    id_at_clearance: Clearance(),\n    id_at_clearance_rfc3281: Clearance_rfc3281(),\n    id_aca_encAttrs: ContentInfo(),\n}\n\nrfc5280.certificateAttributesMap.update(_certificateAttributesMapUpdate)\n", "pyasn1_modules/rfc5934.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Trust Anchor Format\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5934.txt\n\nfrom pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful\n\nfrom pyasn1_modules import rfc2985\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5914\n\nMAX = float('inf')\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n    return univ.ObjectIdentifier(output)\n\n\n# Imports from RFC 2985\n\nSingleAttribute = rfc2985.SingleAttribute\n\n\n# Imports from RFC5914\n\nCertPathControls = rfc5914.CertPathControls\n\nTrustAnchorChoice = rfc5914.TrustAnchorChoice\n\nTrustAnchorTitle = rfc5914.TrustAnchorTitle\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nAnotherName = rfc5280.AnotherName\n\nAttribute = rfc5280.Attribute\n\nCertificate = rfc5280.Certificate\n\nCertificateSerialNumber = rfc5280.CertificateSerialNumber\n\nExtension = rfc5280.Extension\n\nExtensions = rfc5280.Extensions\n\nKeyIdentifier = rfc5280.KeyIdentifier\n\nName = rfc5280.Name\n\nSubjectPublicKeyInfo = rfc5280.SubjectPublicKeyInfo\n\nTBSCertificate = rfc5280.TBSCertificate\n\nValidity = rfc5280.Validity\n\n\n# Object Identifier Arc for TAMP Message Content Types\n\nid_tamp = univ.ObjectIdentifier('2.16.840.1.101.2.1.2.77')\n\n\n# TAMP Status Query Message\n\nid_ct_TAMP_statusQuery = _OID(id_tamp, 1)\n\n\nclass TAMPVersion(univ.Integer):\n    pass\n\nTAMPVersion.namedValues = namedval.NamedValues(\n    ('v1', 1),\n    ('v2', 2)\n)\n\n\nclass TerseOrVerbose(univ.Enumerated):\n    pass\n\nTerseOrVerbose.namedValues = namedval.NamedValues(\n    ('terse', 1),\n    ('verbose', 2)\n)\n\n\nclass HardwareSerialEntry(univ.Choice):\n    pass\n\nHardwareSerialEntry.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('all', univ.Null()),\n    namedtype.NamedType('single', univ.OctetString()),\n    namedtype.NamedType('block', univ.Sequence(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('low', univ.OctetString()),\n        namedtype.NamedType('high', univ.OctetString())\n    ))\n    )\n)\n\n\nclass HardwareModules(univ.Sequence):\n    pass\n\nHardwareModules.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hwType', univ.ObjectIdentifier()),\n    namedtype.NamedType('hwSerialEntries', univ.SequenceOf(\n        componentType=HardwareSerialEntry()).subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\nclass HardwareModuleIdentifierList(univ.SequenceOf):\n    pass\n\nHardwareModuleIdentifierList.componentType = HardwareModules()\nHardwareModuleIdentifierList.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass Community(univ.ObjectIdentifier):\n    pass\n\n\nclass CommunityIdentifierList(univ.SequenceOf):\n    pass\n\nCommunityIdentifierList.componentType = Community()\nCommunityIdentifierList.subtypeSpec=constraint.ValueSizeConstraint(0, MAX)\n\n\nclass TargetIdentifier(univ.Choice):\n    pass\n\nTargetIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hwModules', HardwareModuleIdentifierList().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('communities', CommunityIdentifierList().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('allModules', univ.Null().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.NamedType('uri', char.IA5String().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n    namedtype.NamedType('otherName', AnotherName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5)))\n)\n\n\nclass SeqNumber(univ.Integer):\n    pass\n\nSeqNumber.subtypeSpec = constraint.ValueRangeConstraint(0, 9223372036854775807)\n\n\nclass TAMPMsgRef(univ.Sequence):\n    pass\n\nTAMPMsgRef.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('target', TargetIdentifier()),\n    namedtype.NamedType('seqNum', SeqNumber())\n)\n\n\nclass TAMPStatusQuery(univ.Sequence):\n    pass\n\nTAMPStatusQuery.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', TAMPVersion().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.DefaultedNamedType('terse', TerseOrVerbose().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 1)).subtype(value='verbose')),\n    namedtype.NamedType('query', TAMPMsgRef())\n)\n\n\ntamp_status_query = rfc5652.ContentInfo()\ntamp_status_query['contentType'] = id_ct_TAMP_statusQuery\ntamp_status_query['content'] = TAMPStatusQuery()\n\n\n# TAMP Status Response Message\n\nid_ct_TAMP_statusResponse = _OID(id_tamp, 2)\n\n\nclass KeyIdentifiers(univ.SequenceOf):\n    pass\n\nKeyIdentifiers.componentType = KeyIdentifier()\nKeyIdentifiers.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass TrustAnchorChoiceList(univ.SequenceOf):\n    pass\n\nTrustAnchorChoiceList.componentType = TrustAnchorChoice()\nTrustAnchorChoiceList.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass TAMPSequenceNumber(univ.Sequence):\n    pass\n\nTAMPSequenceNumber.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyId', KeyIdentifier()),\n    namedtype.NamedType('seqNumber', SeqNumber())\n)\n\n\nclass TAMPSequenceNumbers(univ.SequenceOf):\n    pass\n\nTAMPSequenceNumbers.componentType = TAMPSequenceNumber()\nTAMPSequenceNumbers.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass TerseStatusResponse(univ.Sequence):\n    pass\n\nTerseStatusResponse.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('taKeyIds', KeyIdentifiers()),\n    namedtype.OptionalNamedType('communities', CommunityIdentifierList())\n)\n\n\nclass VerboseStatusResponse(univ.Sequence):\n    pass\n\nVerboseStatusResponse.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('taInfo', TrustAnchorChoiceList()),\n    namedtype.OptionalNamedType('continPubKeyDecryptAlg',\n        AlgorithmIdentifier().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('communities',\n        CommunityIdentifierList().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('tampSeqNumbers',\n        TAMPSequenceNumbers().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\nclass StatusResponse(univ.Choice):\n    pass\n\nStatusResponse.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('terseResponse', TerseStatusResponse().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('verboseResponse', VerboseStatusResponse().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass TAMPStatusResponse(univ.Sequence):\n    pass\n\nTAMPStatusResponse.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', TAMPVersion().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.NamedType('query', TAMPMsgRef()),\n    namedtype.NamedType('response', StatusResponse()),\n    namedtype.DefaultedNamedType('usesApex', univ.Boolean().subtype(value=1))\n)\n\n\ntamp_status_response = rfc5652.ContentInfo()\ntamp_status_response['contentType'] = id_ct_TAMP_statusResponse\ntamp_status_response['content'] = TAMPStatusResponse()\n\n\n# Trust Anchor Update Message\n\nid_ct_TAMP_update = _OID(id_tamp, 3)\n\n\nclass TBSCertificateChangeInfo(univ.Sequence):\n    pass\n\nTBSCertificateChangeInfo.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('serialNumber', CertificateSerialNumber()),\n    namedtype.OptionalNamedType('signature', AlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('issuer', Name().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('validity', Validity().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('subject', Name().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.NamedType('subjectPublicKeyInfo', SubjectPublicKeyInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n    namedtype.OptionalNamedType('exts', Extensions().subtype(explicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 5)))\n)\n\n\nclass TrustAnchorChangeInfo(univ.Sequence):\n    pass\n\nTrustAnchorChangeInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pubKey', SubjectPublicKeyInfo()),\n    namedtype.OptionalNamedType('keyId', KeyIdentifier()),\n    namedtype.OptionalNamedType('taTitle', TrustAnchorTitle()),\n    namedtype.OptionalNamedType('certPath', CertPathControls()),\n    namedtype.OptionalNamedType('exts', Extensions().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass TrustAnchorChangeInfoChoice(univ.Choice):\n    pass\n\nTrustAnchorChangeInfoChoice.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tbsCertChange', TBSCertificateChangeInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('taChange', TrustAnchorChangeInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass TrustAnchorUpdate(univ.Choice):\n    pass\n\nTrustAnchorUpdate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('add', TrustAnchorChoice().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('remove', SubjectPublicKeyInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('change', TrustAnchorChangeInfoChoice().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)))\n)\n\n\nclass TAMPUpdate(univ.Sequence):\n    pass\n\nTAMPUpdate.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.DefaultedNamedType('terse',\n        TerseOrVerbose().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 1)).subtype(value='verbose')),\n    namedtype.NamedType('msgRef', TAMPMsgRef()),\n    namedtype.NamedType('updates',\n        univ.SequenceOf(componentType=TrustAnchorUpdate()).subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.OptionalNamedType('tampSeqNumbers',\n        TAMPSequenceNumbers().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\ntamp_update = rfc5652.ContentInfo()\ntamp_update['contentType'] = id_ct_TAMP_update\ntamp_update['content'] = TAMPUpdate()\n\n\n# Trust Anchor Update Confirm Message\n\nid_ct_TAMP_updateConfirm = _OID(id_tamp, 4)\n\n\nclass StatusCode(univ.Enumerated):\n    pass\n\nStatusCode.namedValues = namedval.NamedValues(\n    ('success', 0),\n    ('decodeFailure', 1),\n    ('badContentInfo', 2),\n    ('badSignedData', 3),\n    ('badEncapContent', 4),\n    ('badCertificate', 5),\n    ('badSignerInfo', 6),\n    ('badSignedAttrs', 7),\n    ('badUnsignedAttrs', 8),\n    ('missingContent', 9),\n    ('noTrustAnchor', 10),\n    ('notAuthorized', 11),\n    ('badDigestAlgorithm', 12),\n    ('badSignatureAlgorithm', 13),\n    ('unsupportedKeySize', 14),\n    ('unsupportedParameters', 15),\n    ('signatureFailure', 16),\n    ('insufficientMemory', 17),\n    ('unsupportedTAMPMsgType', 18),\n    ('apexTAMPAnchor', 19),\n    ('improperTAAddition', 20),\n    ('seqNumFailure', 21),\n    ('contingencyPublicKeyDecrypt', 22),\n    ('incorrectTarget', 23),\n    ('communityUpdateFailed', 24),\n    ('trustAnchorNotFound', 25),\n    ('unsupportedTAAlgorithm', 26),\n    ('unsupportedTAKeySize', 27),\n    ('unsupportedContinPubKeyDecryptAlg', 28),\n    ('missingSignature', 29),\n    ('resourcesBusy', 30),\n    ('versionNumberMismatch', 31),\n    ('missingPolicySet', 32),\n    ('revokedCertificate', 33),\n    ('unsupportedTrustAnchorFormat', 34),\n    ('improperTAChange', 35),\n    ('malformed', 36),\n    ('cmsError', 37),\n    ('unsupportedTargetIdentifier', 38),\n    ('other', 127)\n)\n\n\nclass StatusCodeList(univ.SequenceOf):\n    pass\n\nStatusCodeList.componentType = StatusCode()\nStatusCodeList.subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass TerseUpdateConfirm(StatusCodeList):\n    pass\n\n\nclass VerboseUpdateConfirm(univ.Sequence):\n    pass\n\nVerboseUpdateConfirm.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('status', StatusCodeList()),\n    namedtype.NamedType('taInfo', TrustAnchorChoiceList()),\n    namedtype.OptionalNamedType('tampSeqNumbers', TAMPSequenceNumbers()),\n    namedtype.DefaultedNamedType('usesApex', univ.Boolean().subtype(value=1))\n)\n\n\nclass UpdateConfirm(univ.Choice):\n    pass\n\nUpdateConfirm.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('terseConfirm', TerseUpdateConfirm().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('verboseConfirm', VerboseUpdateConfirm().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass TAMPUpdateConfirm(univ.Sequence):\n    pass\n\nTAMPUpdateConfirm.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', TAMPVersion().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.NamedType('update', TAMPMsgRef()),\n    namedtype.NamedType('confirm', UpdateConfirm())\n)\n\n\ntamp_update_confirm = rfc5652.ContentInfo()\ntamp_update_confirm['contentType'] = id_ct_TAMP_updateConfirm\ntamp_update_confirm['content'] = TAMPUpdateConfirm()\n\n\n# Apex Trust Anchor Update Message\n\nid_ct_TAMP_apexUpdate = _OID(id_tamp, 5)\n\n\nclass TAMPApexUpdate(univ.Sequence):\n    pass\n\nTAMPApexUpdate.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.DefaultedNamedType('terse',\n        TerseOrVerbose().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 1)).subtype(value='verbose')),\n    namedtype.NamedType('msgRef', TAMPMsgRef()),\n    namedtype.NamedType('clearTrustAnchors', univ.Boolean()),\n    namedtype.NamedType('clearCommunities', univ.Boolean()),\n    namedtype.OptionalNamedType('seqNumber', SeqNumber()),\n    namedtype.NamedType('apexTA', TrustAnchorChoice())\n)\n\n\ntamp_apex_update = rfc5652.ContentInfo()\ntamp_apex_update['contentType'] = id_ct_TAMP_apexUpdate\ntamp_apex_update['content'] = TAMPApexUpdate()\n\n\n# Apex Trust Anchor Update Confirm Message\n\nid_ct_TAMP_apexUpdateConfirm = _OID(id_tamp, 6)\n\n\nclass TerseApexUpdateConfirm(StatusCode):\n    pass\n\n\nclass VerboseApexUpdateConfirm(univ.Sequence):\n    pass\n\nVerboseApexUpdateConfirm.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('status', StatusCode()),\n    namedtype.NamedType('taInfo', TrustAnchorChoiceList()),\n    namedtype.OptionalNamedType('communities',\n        CommunityIdentifierList().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('tampSeqNumbers',\n        TAMPSequenceNumbers().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 1)))\n)\n\n\nclass ApexUpdateConfirm(univ.Choice):\n    pass\n\nApexUpdateConfirm.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('terseApexConfirm',\n        TerseApexUpdateConfirm().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0))),\n    namedtype.NamedType('verboseApexConfirm',\n        VerboseApexUpdateConfirm().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatConstructed, 1)))\n)\n\n\nclass TAMPApexUpdateConfirm(univ.Sequence):\n    pass\n\nTAMPApexUpdateConfirm.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.NamedType('apexReplace', TAMPMsgRef()),\n    namedtype.NamedType('apexConfirm', ApexUpdateConfirm())\n)\n\n\ntamp_apex_update_confirm = rfc5652.ContentInfo()\ntamp_apex_update_confirm['contentType'] = id_ct_TAMP_apexUpdateConfirm\ntamp_apex_update_confirm['content'] = TAMPApexUpdateConfirm()\n\n\n# Community Update Message\n\nid_ct_TAMP_communityUpdate = _OID(id_tamp, 7)\n\n\nclass CommunityUpdates(univ.Sequence):\n    pass\n\nCommunityUpdates.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('remove',\n        CommunityIdentifierList().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('add',\n        CommunityIdentifierList().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 2)))\n)\n\n\nclass TAMPCommunityUpdate(univ.Sequence):\n    pass\n\nTAMPCommunityUpdate.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.DefaultedNamedType('terse',\n        TerseOrVerbose().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 1)).subtype(value='verbose')),\n    namedtype.NamedType('msgRef', TAMPMsgRef()),\n    namedtype.NamedType('updates', CommunityUpdates())\n)\n\n\ntamp_community_update = rfc5652.ContentInfo()\ntamp_community_update['contentType'] = id_ct_TAMP_communityUpdate\ntamp_community_update['content'] = TAMPCommunityUpdate()\n\n\n# Community Update Confirm Message\n\nid_ct_TAMP_communityUpdateConfirm = _OID(id_tamp, 8)\n\n\nclass TerseCommunityConfirm(StatusCode):\n    pass\n\n\nclass VerboseCommunityConfirm(univ.Sequence):\n    pass\n\nVerboseCommunityConfirm.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('status', StatusCode()),\n    namedtype.OptionalNamedType('communities', CommunityIdentifierList())\n)\n\n\nclass CommunityConfirm(univ.Choice):\n    pass\n\nCommunityConfirm.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('terseCommConfirm',\n        TerseCommunityConfirm().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0))),\n    namedtype.NamedType('verboseCommConfirm',\n        VerboseCommunityConfirm().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatConstructed, 1)))\n)\n\n\nclass TAMPCommunityUpdateConfirm(univ.Sequence):\n    pass\n\nTAMPCommunityUpdateConfirm.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.NamedType('update', TAMPMsgRef()),\n    namedtype.NamedType('commConfirm', CommunityConfirm())\n)\n\n\ntamp_community_update_confirm = rfc5652.ContentInfo()\ntamp_community_update_confirm['contentType'] = id_ct_TAMP_communityUpdateConfirm\ntamp_community_update_confirm['content'] = TAMPCommunityUpdateConfirm()\n\n\n# Sequence Number Adjust Message\n\nid_ct_TAMP_seqNumAdjust = _OID(id_tamp, 10)\n\n\n\nclass SequenceNumberAdjust(univ.Sequence):\n    pass\n\nSequenceNumberAdjust.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.NamedType('msgRef', TAMPMsgRef())\n)\n\n\ntamp_sequence_number_adjust = rfc5652.ContentInfo()\ntamp_sequence_number_adjust['contentType'] = id_ct_TAMP_seqNumAdjust\ntamp_sequence_number_adjust['content'] = SequenceNumberAdjust()\n\n\n# Sequence Number Adjust Confirm Message\n\nid_ct_TAMP_seqNumAdjustConfirm = _OID(id_tamp, 11)\n\n\nclass SequenceNumberAdjustConfirm(univ.Sequence):\n    pass\n\nSequenceNumberAdjustConfirm.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.NamedType('adjust', TAMPMsgRef()),\n    namedtype.NamedType('status', StatusCode())\n)\n\n\ntamp_sequence_number_adjust_confirm = rfc5652.ContentInfo()\ntamp_sequence_number_adjust_confirm['contentType'] = id_ct_TAMP_seqNumAdjustConfirm\ntamp_sequence_number_adjust_confirm['content'] = SequenceNumberAdjustConfirm()\n\n\n# TAMP Error Message\n\nid_ct_TAMP_error = _OID(id_tamp, 9)\n\n\nclass TAMPError(univ.Sequence):\n    pass\n\nTAMPError.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n        TAMPVersion().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n        tag.tagFormatSimple, 0)).subtype(value='v2')),\n    namedtype.NamedType('msgType', univ.ObjectIdentifier()),\n    namedtype.NamedType('status', StatusCode()),\n    namedtype.OptionalNamedType('msgRef', TAMPMsgRef())\n)\n\n\ntamp_error = rfc5652.ContentInfo()\ntamp_error['contentType'] = id_ct_TAMP_error\ntamp_error['content'] = TAMPError()\n\n\n# Object Identifier Arc for Attributes\n\nid_attributes = univ.ObjectIdentifier('2.16.840.1.101.2.1.5')\n\n\n# contingency-public-key-decrypt-key unsigned attribute\n\nid_aa_TAMP_contingencyPublicKeyDecryptKey = _OID(id_attributes, 63)\n\n\nclass PlaintextSymmetricKey(univ.OctetString):\n    pass\n\n\ncontingency_public_key_decrypt_key = Attribute()\ncontingency_public_key_decrypt_key['type'] = id_aa_TAMP_contingencyPublicKeyDecryptKey\ncontingency_public_key_decrypt_key['values'][0] = PlaintextSymmetricKey()\n\n\n# id-pe-wrappedApexContinKey extension\n\nid_pe_wrappedApexContinKey =univ.ObjectIdentifier('1.3.6.1.5.5.7.1.20')\n\n\nclass ApexContingencyKey(univ.Sequence):\n    pass\n\nApexContingencyKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('wrapAlgorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('wrappedContinPubKey', univ.OctetString())\n)\n\n\nwrappedApexContinKey = Extension()\nwrappedApexContinKey['extnID'] = id_pe_wrappedApexContinKey\nwrappedApexContinKey['critical'] = 0\nwrappedApexContinKey['extnValue'] = univ.OctetString()\n\n\n# Add to the map of CMS Content Type OIDs to Content Types in\n# rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_TAMP_statusQuery: TAMPStatusQuery(),\n    id_ct_TAMP_statusResponse: TAMPStatusResponse(),\n    id_ct_TAMP_update: TAMPUpdate(),\n    id_ct_TAMP_updateConfirm: TAMPUpdateConfirm(),\n    id_ct_TAMP_apexUpdate: TAMPApexUpdate(),\n    id_ct_TAMP_apexUpdateConfirm: TAMPApexUpdateConfirm(),\n    id_ct_TAMP_communityUpdate: TAMPCommunityUpdate(),\n    id_ct_TAMP_communityUpdateConfirm: TAMPCommunityUpdateConfirm(),\n    id_ct_TAMP_seqNumAdjust: SequenceNumberAdjust(),\n    id_ct_TAMP_seqNumAdjustConfirm: SequenceNumberAdjustConfirm(),\n    id_ct_TAMP_error: TAMPError(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n\n\n# Add to the map of CMS Attribute OIDs to Attribute Values in\n# rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_TAMP_contingencyPublicKeyDecryptKey: PlaintextSymmetricKey(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n\n# Add to the map of Certificate Extension OIDs to Extensions in\n# rfc5280.py\n\n_certificateExtensionsMap = {\n    id_pe_wrappedApexContinKey: ApexContingencyKey(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMap)\n", "pyasn1_modules/rfc6032.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CMS Encrypted Key Package Content Type\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6032.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5083\n\n\n# Content Decryption Key Identifier attribute\n\nid_aa_KP_contentDecryptKeyID = univ.ObjectIdentifier('2.16.840.1.101.2.1.5.66')\n\nclass ContentDecryptKeyID(univ.OctetString):\n    pass\n\naa_content_decrypt_key_identifier = rfc5652.Attribute()\naa_content_decrypt_key_identifier['attrType'] = id_aa_KP_contentDecryptKeyID\naa_content_decrypt_key_identifier['attrValues'][0] = ContentDecryptKeyID()\n\n\n# Encrypted Key Package Content Type\n\nid_ct_KP_encryptedKeyPkg = univ.ObjectIdentifier('2.16.840.1.101.2.1.2.78.2')\n\nclass EncryptedKeyPackage(univ.Choice):\n    pass\n\nEncryptedKeyPackage.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('encrypted', rfc5652.EncryptedData()),\n    namedtype.NamedType('enveloped', rfc5652.EnvelopedData().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('authEnveloped', rfc5083.AuthEnvelopedData().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\n# Map of Attribute Type OIDs to Attributes are\n# added to the ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_KP_contentDecryptKeyID: ContentDecryptKeyID(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n\n# Map of Content Type OIDs to Content Types are\n# added to the ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_KP_encryptedKeyPkg: EncryptedKeyPackage(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc4476.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Attribute Certificate Policies Extension\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4476.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# Imports from RFC 5280\n\nPolicyQualifierId = rfc5280.PolicyQualifierId\n\nPolicyQualifierInfo = rfc5280.PolicyQualifierInfo\n\nUserNotice = rfc5280.UserNotice\n\nid_pkix = rfc5280.id_pkix\n\n\n# Object Identifiers\n\nid_pe = id_pkix + (1,)\n\nid_pe_acPolicies = id_pe + (15,)\n\nid_qt = id_pkix + (2,)\n\nid_qt_acps = id_qt + (4,)\n\nid_qt_acunotice = id_qt + (5,)\n\n\n# Attribute Certificate Policies Extension\n\nclass ACUserNotice(UserNotice):\n    pass\n\n\nclass ACPSuri(char.IA5String):\n    pass\n\n\nclass AcPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass PolicyInformation(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('policyIdentifier', AcPolicyId()),\n        namedtype.OptionalNamedType('policyQualifiers',\n            univ.SequenceOf(componentType=PolicyQualifierInfo()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n    )\n\n\nclass AcPoliciesSyntax(univ.SequenceOf):\n    componentType = PolicyInformation()\n    subtypeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\n# Update the policy qualifier map in rfc5280.py\n\n_policyQualifierInfoMapUpdate = {\n    id_qt_acps: ACPSuri(),\n    id_qt_acunotice: UserNotice(),\n}\n\nrfc5280.policyQualifierInfoMap.update(_policyQualifierInfoMapUpdate)\n\n\n# Update the certificate extension map in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_acPolicies: AcPoliciesSyntax(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc8103.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from the asn1ate tool.\n# Auto-generated by asn1ate v.0.6.0 from rfc8103.asn.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# ChaCha20Poly1305 algorithm fo use with the Authenticated-Enveloped-Data\n# protecting content type for the Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8103.txt\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nclass AEADChaCha20Poly1305Nonce(univ.OctetString):\n    pass\n\n\nAEADChaCha20Poly1305Nonce.subtypeSpec = constraint.ValueSizeConstraint(12, 12)\n\nid_alg_AEADChaCha20Poly1305 = _OID(1, 2, 840, 113549, 1, 9, 16, 3, 18)\n", "pyasn1_modules/rfc4043.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Internet X.509 Public Key Infrastructure Permanent Identifier\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4043.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nid_pkix = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, ))\n\nid_on = id_pkix + (8, )\n\nid_on_permanentIdentifier = id_on + (3, )\n\n\nclass PermanentIdentifier(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('identifierValue', char.UTF8String()),\n        namedtype.OptionalNamedType('assigner', univ.ObjectIdentifier())\n    )\n\n\n# Map of Other Name OIDs to Other Name is added to the\n# ones that are in rfc5280.py\n\n_anotherNameMapUpdate = {\n    id_on_permanentIdentifier: PermanentIdentifier(),\n}\n\nrfc5280.anotherNameMap.update(_anotherNameMapUpdate)\n", "pyasn1_modules/rfc8769.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2020, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CBOR Content for CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8769.txt\n#\n\nfrom pyasn1.type import univ\n\n\nid_ct_cbor = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.44')\n\n\nid_ct_cborSequence = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.45')\n", "pyasn1_modules/rfc5990.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Use of the RSA-KEM Key Transport Algorithm in the CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5990.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n    return univ.ObjectIdentifier(output)\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\n\n# Useful types and definitions\n\nclass NullParms(univ.Null):\n    pass\n\n\n# Object identifier arcs\n\nis18033_2 = _OID(1, 0, 18033, 2)\n\nnistAlgorithm = _OID(2, 16, 840, 1, 101, 3, 4)\n\npkcs_1 = _OID(1, 2, 840, 113549, 1, 1)\n\nx9_44 = _OID(1, 3, 133, 16, 840, 9, 44)\n\nx9_44_components = _OID(x9_44, 1)\n\n\n# Types for algorithm identifiers\n\nclass Camellia_KeyWrappingScheme(AlgorithmIdentifier):\n    pass\n\nclass DataEncapsulationMechanism(AlgorithmIdentifier):\n    pass\n\nclass KDF2_HashFunction(AlgorithmIdentifier):\n    pass\n\nclass KDF3_HashFunction(AlgorithmIdentifier):\n    pass\n\nclass KeyDerivationFunction(AlgorithmIdentifier):\n    pass\n\nclass KeyEncapsulationMechanism(AlgorithmIdentifier):\n    pass\n\nclass X9_SymmetricKeyWrappingScheme(AlgorithmIdentifier):\n    pass\n\n\n# RSA-KEM Key Transport Algorithm\n\nid_rsa_kem = _OID(1, 2, 840, 113549, 1, 9, 16, 3, 14)\n\n\nclass GenericHybridParameters(univ.Sequence):\n    pass\n\nGenericHybridParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('kem', KeyEncapsulationMechanism()),\n    namedtype.NamedType('dem', DataEncapsulationMechanism())\n)\n\n\nrsa_kem = AlgorithmIdentifier()\nrsa_kem['algorithm'] = id_rsa_kem\nrsa_kem['parameters'] = GenericHybridParameters()\n\n\n# KEM-RSA Key Encapsulation Mechanism\n\nid_kem_rsa = _OID(is18033_2, 2, 4)\n\n\nclass KeyLength(univ.Integer):\n    pass\n\nKeyLength.subtypeSpec = constraint.ValueRangeConstraint(1, MAX)\n\n\nclass RsaKemParameters(univ.Sequence):\n    pass\n\nRsaKemParameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyDerivationFunction', KeyDerivationFunction()),\n    namedtype.NamedType('keyLength', KeyLength())\n)\n\n\nkem_rsa = AlgorithmIdentifier()\nkem_rsa['algorithm'] = id_kem_rsa\nkem_rsa['parameters'] = RsaKemParameters()\n\n\n# Key Derivation Functions\n\nid_kdf_kdf2 = _OID(x9_44_components, 1)\n\nid_kdf_kdf3 = _OID(x9_44_components, 2)\n\n\nkdf2 = AlgorithmIdentifier()\nkdf2['algorithm'] = id_kdf_kdf2\nkdf2['parameters'] = KDF2_HashFunction()\n\nkdf3 = AlgorithmIdentifier()\nkdf3['algorithm'] = id_kdf_kdf3\nkdf3['parameters'] = KDF3_HashFunction()\n\n\n# Hash Functions\n\nid_sha1 = _OID(1, 3, 14, 3, 2, 26)\n\nid_sha224 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 4)\n\nid_sha256 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 1)\n\nid_sha384 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 2)\n\nid_sha512 = _OID(2, 16, 840, 1, 101, 3, 4, 2, 3)\n\n\nsha1 = AlgorithmIdentifier()\nsha1['algorithm'] = id_sha1\nsha1['parameters'] = univ.Null(\"\")\n\nsha224 = AlgorithmIdentifier()\nsha224['algorithm'] = id_sha224\nsha224['parameters'] = univ.Null(\"\")\n\nsha256 = AlgorithmIdentifier()\nsha256['algorithm'] = id_sha256\nsha256['parameters'] = univ.Null(\"\")\n\nsha384 = AlgorithmIdentifier()\nsha384['algorithm'] = id_sha384\nsha384['parameters'] = univ.Null(\"\")\n\nsha512 = AlgorithmIdentifier()\nsha512['algorithm'] = id_sha512\nsha512['parameters'] = univ.Null(\"\")\n\n\n# Symmetric Key-Wrapping Schemes\n\nid_aes128_Wrap = _OID(nistAlgorithm, 1, 5)\n\nid_aes192_Wrap = _OID(nistAlgorithm, 1, 25)\n\nid_aes256_Wrap = _OID(nistAlgorithm, 1, 45)\n\nid_alg_CMS3DESwrap = _OID(1, 2, 840, 113549, 1, 9, 16, 3, 6)\n\nid_camellia128_Wrap = _OID(1, 2, 392, 200011, 61, 1, 1, 3, 2)\n\nid_camellia192_Wrap = _OID(1, 2, 392, 200011, 61, 1, 1, 3, 3)\n\nid_camellia256_Wrap = _OID(1, 2, 392, 200011, 61, 1, 1, 3, 4)\n\n\naes128_Wrap = AlgorithmIdentifier()\naes128_Wrap['algorithm'] = id_aes128_Wrap\n# aes128_Wrap['parameters'] are absent\n\naes192_Wrap = AlgorithmIdentifier()\naes192_Wrap['algorithm'] = id_aes128_Wrap\n# aes192_Wrap['parameters'] are absent\n\naes256_Wrap = AlgorithmIdentifier()\naes256_Wrap['algorithm'] = id_sha256\n# aes256_Wrap['parameters'] are absent\n\ntdes_Wrap = AlgorithmIdentifier()\ntdes_Wrap['algorithm'] = id_alg_CMS3DESwrap\ntdes_Wrap['parameters'] = univ.Null(\"\")\n\ncamellia128_Wrap = AlgorithmIdentifier()\ncamellia128_Wrap['algorithm'] = id_camellia128_Wrap\n# camellia128_Wrap['parameters'] are absent\n\ncamellia192_Wrap = AlgorithmIdentifier()\ncamellia192_Wrap['algorithm'] = id_camellia192_Wrap\n# camellia192_Wrap['parameters'] are absent\n\ncamellia256_Wrap = AlgorithmIdentifier()\ncamellia256_Wrap['algorithm'] = id_camellia256_Wrap\n# camellia256_Wrap['parameters'] are absent\n\n\n# Update the Algorithm Identifier map in rfc5280.py.\n# Note that the ones that must not have parameters are not added to the map.\n\n_algorithmIdentifierMapUpdate = {\n    id_rsa_kem: GenericHybridParameters(),\n    id_kem_rsa: RsaKemParameters(),\n    id_kdf_kdf2: KDF2_HashFunction(),\n    id_kdf_kdf3: KDF3_HashFunction(),\n    id_sha1: univ.Null(),\n    id_sha224: univ.Null(),\n    id_sha256: univ.Null(),\n    id_sha384: univ.Null(),\n    id_sha512: univ.Null(),\n    id_alg_CMS3DESwrap: univ.Null(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc7894.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Alternative Challenge Password Attributes for EST\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7894.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc6402\nfrom pyasn1_modules import rfc7191\n\n\n# SingleAttribute is the same as Attribute in RFC 5652, except that the\n# attrValues SET must have one and only one member\n\nAttribute = rfc7191.SingleAttribute\n\n\n# DirectoryString is the same as RFC 5280, except the length is limited to 255\n\nclass DirectoryString(univ.Choice):\n    pass\n\nDirectoryString.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, 255)))\n)\n\n\n# OTP Challenge Attribute\n\nid_aa_otpChallenge = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.56')\n\nub_aa_otpChallenge = univ.Integer(255)\n\notpChallenge = Attribute()\notpChallenge['attrType'] = id_aa_otpChallenge\notpChallenge['attrValues'][0] = DirectoryString()\n\n\n# Revocation Challenge Attribute\n\nid_aa_revocationChallenge = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.57')\n\nub_aa_revocationChallenge = univ.Integer(255)\n\nrevocationChallenge = Attribute()\nrevocationChallenge['attrType'] = id_aa_revocationChallenge\nrevocationChallenge['attrValues'][0] = DirectoryString()\n\n\n#  EST Identity Linking Attribute\n\nid_aa_estIdentityLinking = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.58')\n\nub_aa_est_identity_linking = univ.Integer(255)\n\nestIdentityLinking = Attribute()\nestIdentityLinking['attrType'] = id_aa_estIdentityLinking\nestIdentityLinking['attrValues'][0] = DirectoryString()\n\n\n# Map of Attribute Type OIDs to Attributes added to the\n# ones that are in rfc6402.py\n\n_cmcControlAttributesMapUpdate = {\n    id_aa_otpChallenge: DirectoryString(),\n    id_aa_revocationChallenge: DirectoryString(),\n    id_aa_estIdentityLinking: DirectoryString(),\n}\n\nrfc6402.cmcControlAttributesMap.update(_cmcControlAttributesMapUpdate)\n", "pyasn1_modules/pem.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\nimport base64\n\nstSpam, stHam, stDump = 0, 1, 2\n\n\n# The markers parameters is in form ('start1', 'stop1'), ('start2', 'stop2')...\n# Return is (marker-index, substrate)\ndef readPemBlocksFromFile(fileObj, *markers):\n    startMarkers = dict(map(lambda x: (x[1], x[0]),\n                            enumerate(map(lambda y: y[0], markers))))\n    stopMarkers = dict(map(lambda x: (x[1], x[0]),\n                           enumerate(map(lambda y: y[1], markers))))\n    idx = -1\n    substrate = ''\n    certLines = []\n    state = stSpam\n    while True:\n        certLine = fileObj.readline()\n        if not certLine:\n            break\n        certLine = certLine.strip()\n        if state == stSpam:\n            if certLine in startMarkers:\n                certLines = []\n                idx = startMarkers[certLine]\n                state = stHam\n                continue\n        if state == stHam:\n            if certLine in stopMarkers and stopMarkers[certLine] == idx:\n                state = stDump\n            else:\n                certLines.append(certLine)\n        if state == stDump:\n            substrate = ''.encode().join([base64.b64decode(x.encode()) for x in certLines])\n            break\n    return idx, substrate\n\n\n# Backward compatibility routine\ndef readPemFromFile(fileObj,\n                    startMarker='-----BEGIN CERTIFICATE-----',\n                    endMarker='-----END CERTIFICATE-----'):\n    idx, substrate = readPemBlocksFromFile(fileObj, (startMarker, endMarker))\n    return substrate\n\n\ndef readBase64fromText(text):\n    return base64.b64decode(text.encode())\n\n\ndef readBase64FromFile(fileObj):\n    return readBase64fromText(fileObj.read())\n", "pyasn1_modules/rfc8418.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Elliptic Curve Diffie-Hellman (ECDH) Key Agreement Algorithm\n#   with X25519 and X448\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8418.txt\n\nfrom pyasn1.type import univ\nfrom pyasn1_modules import rfc5280\n\n\nclass KeyEncryptionAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass KeyWrapAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\ndhSinglePass_stdDH_sha256kdf_scheme = univ.ObjectIdentifier('1.3.133.16.840.63.0.11.1')\n\ndhSinglePass_stdDH_sha384kdf_scheme = univ.ObjectIdentifier('1.3.133.16.840.63.0.11.2')\n\ndhSinglePass_stdDH_sha512kdf_scheme = univ.ObjectIdentifier('1.3.133.16.840.63.0.11.3')\n\ndhSinglePass_stdDH_hkdf_sha256_scheme = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.19')\n\ndhSinglePass_stdDH_hkdf_sha384_scheme = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.20')\n\ndhSinglePass_stdDH_hkdf_sha512_scheme = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.21')\n", "pyasn1_modules/rfc2634.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add a map for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Enhanced Security Services for S/MIME\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc2634.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedval\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc5652\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\nContentType = rfc5652.ContentType\n\nIssuerAndSerialNumber = rfc5652.IssuerAndSerialNumber\n\nSubjectKeyIdentifier = rfc5652.SubjectKeyIdentifier\n\nPolicyInformation = rfc5280.PolicyInformation\n\nGeneralNames = rfc5280.GeneralNames\n\nCertificateSerialNumber = rfc5280.CertificateSerialNumber\n\n\n# Signing Certificate Attribute\n# Warning: It is better to use SigningCertificateV2 from RFC 5035\n\nid_aa_signingCertificate = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.12')\n\nclass Hash(univ.OctetString):\n    pass  # SHA-1 hash of entire certificate; RFC 5035 supports other hash algorithms\n\n\nclass IssuerSerial(univ.Sequence):\n    pass\n\nIssuerSerial.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuer', GeneralNames()),\n    namedtype.NamedType('serialNumber', CertificateSerialNumber())\n)\n\n\nclass ESSCertID(univ.Sequence):\n    pass\n\nESSCertID.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certHash', Hash()),\n    namedtype.OptionalNamedType('issuerSerial', IssuerSerial())\n)\n\n\nclass SigningCertificate(univ.Sequence):\n    pass\n\nSigningCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certs', univ.SequenceOf(\n        componentType=ESSCertID())),\n    namedtype.OptionalNamedType('policies', univ.SequenceOf(\n        componentType=PolicyInformation()))\n)\n\n\n# Mail List Expansion History Attribute\n\nid_aa_mlExpandHistory = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.3')\n\nub_ml_expansion_history = univ.Integer(64)\n\n\nclass EntityIdentifier(univ.Choice):\n    pass\n\nEntityIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier())\n)\n\n\nclass MLReceiptPolicy(univ.Choice):\n    pass\n\nMLReceiptPolicy.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('none', univ.Null().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('insteadOf', univ.SequenceOf(\n        componentType=GeneralNames()).subtype(\n        sizeSpec=constraint.ValueSizeConstraint(1, MAX)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('inAdditionTo', univ.SequenceOf(\n        componentType=GeneralNames()).subtype(\n        sizeSpec=constraint.ValueSizeConstraint(1, MAX)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\nclass MLData(univ.Sequence):\n    pass\n\nMLData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('mailListIdentifier', EntityIdentifier()),\n    namedtype.NamedType('expansionTime', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('mlReceiptPolicy', MLReceiptPolicy())\n)\n\nclass MLExpansionHistory(univ.SequenceOf):\n    pass\n\nMLExpansionHistory.componentType = MLData()\nMLExpansionHistory.sizeSpec = constraint.ValueSizeConstraint(1, ub_ml_expansion_history)\n\n\n# ESS Security Label Attribute\n\nid_aa_securityLabel = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.2')\n\nub_privacy_mark_length = univ.Integer(128)\n\nub_security_categories = univ.Integer(64)\n\nub_integer_options = univ.Integer(256)\n\n\nclass ESSPrivacyMark(univ.Choice):\n    pass\n\nESSPrivacyMark.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_privacy_mark_length))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\nclass SecurityClassification(univ.Integer):\n    pass\n\nSecurityClassification.subtypeSpec=constraint.ValueRangeConstraint(0, ub_integer_options)\n\nSecurityClassification.namedValues = namedval.NamedValues(\n    ('unmarked', 0),\n    ('unclassified', 1),\n    ('restricted', 2),\n    ('confidential', 3),\n    ('secret', 4),\n    ('top-secret', 5)\n)\n\n\nclass SecurityPolicyIdentifier(univ.ObjectIdentifier):\n    pass\n\n\nclass SecurityCategory(univ.Sequence):\n    pass\n\nSecurityCategory.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', univ.ObjectIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('value', univ.Any().subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass SecurityCategories(univ.SetOf):\n    pass\n\nSecurityCategories.componentType = SecurityCategory()\nSecurityCategories.sizeSpec = constraint.ValueSizeConstraint(1, ub_security_categories)\n\n\nclass ESSSecurityLabel(univ.Set):\n    pass\n\nESSSecurityLabel.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('security-policy-identifier', SecurityPolicyIdentifier()),\n    namedtype.OptionalNamedType('security-classification', SecurityClassification()),\n    namedtype.OptionalNamedType('privacy-mark', ESSPrivacyMark()),\n    namedtype.OptionalNamedType('security-categories', SecurityCategories())\n)\n\n\n# Equivalent Labels Attribute\n\nid_aa_equivalentLabels = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.9')\n\nclass EquivalentLabels(univ.SequenceOf):\n    pass\n\nEquivalentLabels.componentType = ESSSecurityLabel()\n\n\n# Content Identifier Attribute\n\nid_aa_contentIdentifier = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.7')\n\nclass ContentIdentifier(univ.OctetString):\n    pass\n\n\n# Content Reference Attribute\n\nid_aa_contentReference = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.10')\n\nclass ContentReference(univ.Sequence):\n    pass\n\nContentReference.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('contentType', ContentType()),\n    namedtype.NamedType('signedContentIdentifier', ContentIdentifier()),\n    namedtype.NamedType('originatorSignatureValue', univ.OctetString())\n)\n\n\n# Message Signature Digest Attribute\n\nid_aa_msgSigDigest = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.5')\n\nclass MsgSigDigest(univ.OctetString):\n    pass\n\n\n# Content Hints Attribute\n\nid_aa_contentHint = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.4')\n\nclass ContentHints(univ.Sequence):\n    pass\n\nContentHints.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('contentDescription', char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('contentType', ContentType())\n)\n\n\n# Receipt Request Attribute\n\nclass AllOrFirstTier(univ.Integer):\n    pass\n\nAllOrFirstTier.namedValues = namedval.NamedValues(\n    ('allReceipts', 0),\n    ('firstTierRecipients', 1)\n)\n\n\nclass ReceiptsFrom(univ.Choice):\n    pass\n\nReceiptsFrom.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('allOrFirstTier', AllOrFirstTier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('receiptList', univ.SequenceOf(\n        componentType=GeneralNames()).subtype(implicitTag=tag.Tag(\n        tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nid_aa_receiptRequest = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.1')\n\nub_receiptsTo = univ.Integer(16)\n\nclass ReceiptRequest(univ.Sequence):\n    pass\n\nReceiptRequest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('signedContentIdentifier', ContentIdentifier()),\n    namedtype.NamedType('receiptsFrom', ReceiptsFrom()),\n    namedtype.NamedType('receiptsTo', univ.SequenceOf(componentType=GeneralNames()).subtype(sizeSpec=constraint.ValueSizeConstraint(1, ub_receiptsTo)))\n)\n\n# Receipt Content Type\n\nclass ESSVersion(univ.Integer):\n    pass\n\nESSVersion.namedValues = namedval.NamedValues(\n    ('v1', 1)\n)\n\n\nid_ct_receipt = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.1')\n\nclass Receipt(univ.Sequence):\n    pass\n\nReceipt.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', ESSVersion()),\n    namedtype.NamedType('contentType', ContentType()),\n    namedtype.NamedType('signedContentIdentifier', ContentIdentifier()),\n    namedtype.NamedType('originatorSignatureValue', univ.OctetString())\n)\n\n\n# Map of Attribute Type to the Attribute structure is added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_signingCertificate: SigningCertificate(),\n    id_aa_mlExpandHistory: MLExpansionHistory(),\n    id_aa_securityLabel: ESSSecurityLabel(),\n    id_aa_equivalentLabels: EquivalentLabels(),\n    id_aa_contentIdentifier: ContentIdentifier(),\n    id_aa_contentReference: ContentReference(),\n    id_aa_msgSigDigest: MsgSigDigest(),\n    id_aa_contentHint: ContentHints(),\n    id_aa_receiptRequest: ReceiptRequest(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n\n# Map of Content Type OIDs to Content Types is added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_receipt: Receipt(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc3820.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Diffie-Hellman Key Agreement\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3820.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n\nclass ProxyCertPathLengthConstraint(univ.Integer):\n    pass\n\n\nclass ProxyPolicy(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('policyLanguage', univ.ObjectIdentifier()),\n        namedtype.OptionalNamedType('policy', univ.OctetString())\n    )\n\n\nclass ProxyCertInfoExtension(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('pCPathLenConstraint',\n            ProxyCertPathLengthConstraint()),\n        namedtype.NamedType('proxyPolicy', ProxyPolicy())\n    )\n\n\nid_pkix = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, ))\n\n\nid_pe = id_pkix + (1, )\n\nid_pe_proxyCertInfo = id_pe + (14, )\n\n\nid_ppl = id_pkix + (21, )\n\nid_ppl_anyLanguage = id_ppl + (0, )\n\nid_ppl_inheritAll = id_ppl + (1, )\n\nid_ppl_independent = id_ppl + (2, )\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_proxyCertInfo: ProxyCertInfoExtension(),\t\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc4334.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Certificate Extensions and Attributes Supporting Authentication\n#   in PPP and Wireless LAN Networks\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4334.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# OID Arcs\n\nid_pe = univ.ObjectIdentifier('1.3.6.1.5.5.7.1')\n\nid_kp = univ.ObjectIdentifier('1.3.6.1.5.5.7.3')\n\nid_aca = univ.ObjectIdentifier('1.3.6.1.5.5.7.10')\n\n\n# Extended Key Usage Values\n\nid_kp_eapOverPPP = id_kp + (13, )\n\nid_kp_eapOverLAN = id_kp + (14, )\n\n\n# Wireless LAN SSID Extension\n\nid_pe_wlanSSID = id_pe + (13, )\n\nclass SSID(univ.OctetString):\n    constraint.ValueSizeConstraint(1, 32)\n\n\nclass SSIDList(univ.SequenceOf):\n    componentType = SSID()\n    subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\n# Wireless LAN SSID Attribute Certificate Attribute\n\nid_aca_wlanSSID = id_aca + (7, )\n\n\n# Map of Certificate Extension OIDs to Extensions\n# To be added to the ones that are in rfc5280.py\n\n_certificateExtensionsMap = {\n    id_pe_wlanSSID: SSIDList(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMap)\n\n\n# Map of AttributeType OIDs to AttributeValue added to the\n# ones that are in rfc5280.py\n\n_certificateAttributesMapUpdate = {\n    id_aca_wlanSSID: SSIDList(),\n}\n\nrfc5280.certificateAttributesMap.update(_certificateAttributesMapUpdate)\n", "pyasn1_modules/rfc2560.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# OCSP request/response syntax\n#\n# Derived from a minimal OCSP library (RFC2560) code written by\n# Bud P. Bruegger <bud@ancitel.it>\n# Copyright: Ancitel, S.p.a,  Rome, Italy\n# License: BSD\n#\n\n#\n# current limitations:\n# * request and response works only for a single certificate\n# * only some values are parsed out of the response\n# * the request does't set a nonce nor signature\n# * there is no signature validation of the response\n# * dates are left as strings in GeneralizedTime format -- datetime.datetime\n# would be nicer\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc2459\n\n\n# Start of OCSP module definitions\n\n# This should be in directory Authentication Framework (X.509) module\n\nclass CRLReason(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('unspecified', 0),\n        ('keyCompromise', 1),\n        ('cACompromise', 2),\n        ('affiliationChanged', 3),\n        ('superseded', 4),\n        ('cessationOfOperation', 5),\n        ('certificateHold', 6),\n        ('removeFromCRL', 8),\n        ('privilegeWithdrawn', 9),\n        ('aACompromise', 10)\n    )\n\n\n# end of directory Authentication Framework (X.509) module\n\n# This should be in PKIX Certificate Extensions module\n\nclass GeneralName(univ.OctetString):\n    pass\n\n\n# end of PKIX Certificate Extensions module\n\nid_kp_OCSPSigning = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 3, 9))\nid_pkix_ocsp = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1))\nid_pkix_ocsp_basic = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1, 1))\nid_pkix_ocsp_nonce = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1, 2))\nid_pkix_ocsp_crl = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1, 3))\nid_pkix_ocsp_response = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1, 4))\nid_pkix_ocsp_nocheck = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1, 5))\nid_pkix_ocsp_archive_cutoff = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1, 6))\nid_pkix_ocsp_service_locator = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 48, 1, 7))\n\n\nclass AcceptableResponses(univ.SequenceOf):\n    componentType = univ.ObjectIdentifier()\n\n\nclass ArchiveCutoff(useful.GeneralizedTime):\n    pass\n\n\nclass UnknownInfo(univ.Null):\n    pass\n\n\nclass RevokedInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('revocationTime', useful.GeneralizedTime()),\n        namedtype.OptionalNamedType('revocationReason', CRLReason().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass CertID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('hashAlgorithm', rfc2459.AlgorithmIdentifier()),\n        namedtype.NamedType('issuerNameHash', univ.OctetString()),\n        namedtype.NamedType('issuerKeyHash', univ.OctetString()),\n        namedtype.NamedType('serialNumber', rfc2459.CertificateSerialNumber())\n    )\n\n\nclass CertStatus(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('good',\n                            univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('revoked',\n                            RevokedInfo().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('unknown',\n                            UnknownInfo().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass SingleResponse(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certID', CertID()),\n        namedtype.NamedType('certStatus', CertStatus()),\n        namedtype.NamedType('thisUpdate', useful.GeneralizedTime()),\n        namedtype.OptionalNamedType('nextUpdate', useful.GeneralizedTime().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('singleExtensions', rfc2459.Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass KeyHash(univ.OctetString):\n    pass\n\n\nclass ResponderID(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('byName',\n                            rfc2459.Name().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('byKey',\n                            KeyHash().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass Version(univ.Integer):\n    namedValues = namedval.NamedValues(('v1', 0))\n\n\nclass ResponseData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('version', Version('v1').subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('responderID', ResponderID()),\n        namedtype.NamedType('producedAt', useful.GeneralizedTime()),\n        namedtype.NamedType('responses', univ.SequenceOf(componentType=SingleResponse())),\n        namedtype.OptionalNamedType('responseExtensions', rfc2459.Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass BasicOCSPResponse(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('tbsResponseData', ResponseData()),\n        namedtype.NamedType('signatureAlgorithm', rfc2459.AlgorithmIdentifier()),\n        namedtype.NamedType('signature', univ.BitString()),\n        namedtype.OptionalNamedType('certs', univ.SequenceOf(componentType=rfc2459.Certificate()).subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass ResponseBytes(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('responseType', univ.ObjectIdentifier()),\n        namedtype.NamedType('response', univ.OctetString())\n    )\n\n\nclass OCSPResponseStatus(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('successful', 0),\n        ('malformedRequest', 1),\n        ('internalError', 2),\n        ('tryLater', 3),\n        ('undefinedStatus', 4),  # should never occur\n        ('sigRequired', 5),\n        ('unauthorized', 6)\n    )\n\n\nclass OCSPResponse(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('responseStatus', OCSPResponseStatus()),\n        namedtype.OptionalNamedType('responseBytes', ResponseBytes().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass Request(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('reqCert', CertID()),\n        namedtype.OptionalNamedType('singleRequestExtensions', rfc2459.Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass Signature(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signatureAlgorithm', rfc2459.AlgorithmIdentifier()),\n        namedtype.NamedType('signature', univ.BitString()),\n        namedtype.OptionalNamedType('certs', univ.SequenceOf(componentType=rfc2459.Certificate()).subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass TBSRequest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('version', Version('v1').subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('requestorName', GeneralName().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('requestList', univ.SequenceOf(componentType=Request())),\n        namedtype.OptionalNamedType('requestExtensions', rfc2459.Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass OCSPRequest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('tbsRequest', TBSRequest()),\n        namedtype.OptionalNamedType('optionalSignature', Signature().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n", "pyasn1_modules/rfc2437.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS#1 syntax\n#\n# ASN.1 source from:\n# ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2.asn\n#\n# Sample captures could be obtained with \"openssl genrsa\" command\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules.rfc2459 import AlgorithmIdentifier\n\npkcs_1 = univ.ObjectIdentifier('1.2.840.113549.1.1')\nrsaEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.1')\nmd2WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.2')\nmd4WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.3')\nmd5WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.4')\nsha1WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.5')\nrsaOAEPEncryptionSET = univ.ObjectIdentifier('1.2.840.113549.1.1.6')\nid_RSAES_OAEP = univ.ObjectIdentifier('1.2.840.113549.1.1.7')\nid_mgf1 = univ.ObjectIdentifier('1.2.840.113549.1.1.8')\nid_pSpecified = univ.ObjectIdentifier('1.2.840.113549.1.1.9')\nid_sha1 = univ.ObjectIdentifier('1.3.14.3.2.26')\n\nMAX = float('inf')\n\n\nclass Version(univ.Integer):\n    pass\n\n\nclass RSAPrivateKey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', Version()),\n        namedtype.NamedType('modulus', univ.Integer()),\n        namedtype.NamedType('publicExponent', univ.Integer()),\n        namedtype.NamedType('privateExponent', univ.Integer()),\n        namedtype.NamedType('prime1', univ.Integer()),\n        namedtype.NamedType('prime2', univ.Integer()),\n        namedtype.NamedType('exponent1', univ.Integer()),\n        namedtype.NamedType('exponent2', univ.Integer()),\n        namedtype.NamedType('coefficient', univ.Integer())\n    )\n\n\nclass RSAPublicKey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('modulus', univ.Integer()),\n        namedtype.NamedType('publicExponent', univ.Integer())\n    )\n\n\n# XXX defaults not set\nclass RSAES_OAEP_params(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('hashFunc', AlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('maskGenFunc', AlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.NamedType('pSourceFunc', AlgorithmIdentifier().subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))\n    )\n", "pyasn1_modules/rfc5915.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Elliptic Curve Private Key\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5915.txt\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5480\n\n\nclass ECPrivateKey(univ.Sequence):\n    pass\n\nECPrivateKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', univ.Integer(\n        namedValues=namedval.NamedValues(('ecPrivkeyVer1', 1)))),\n    namedtype.NamedType('privateKey', univ.OctetString()),\n    namedtype.OptionalNamedType('parameters', rfc5480.ECParameters().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('publicKey', univ.BitString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n", "pyasn1_modules/rfc6960.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Online Certificate Status Protocol (OCSP)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6960.txt\n#\n\nfrom pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful\n\nfrom pyasn1_modules import rfc2560\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\nAuthorityInfoAccessSyntax = rfc5280.AuthorityInfoAccessSyntax\nCertificate = rfc5280.Certificate\nCertificateSerialNumber = rfc5280.CertificateSerialNumber\nCRLReason = rfc5280.CRLReason\nExtensions = rfc5280.Extensions\nGeneralName = rfc5280.GeneralName\nName = rfc5280.Name\n\nid_kp = rfc5280.id_kp\n\nid_ad_ocsp = rfc5280.id_ad_ocsp\n\n\n# Imports from the original OCSP module in RFC 2560\n\nAcceptableResponses = rfc2560.AcceptableResponses\nArchiveCutoff = rfc2560.ArchiveCutoff\nCertStatus = rfc2560.CertStatus\nKeyHash = rfc2560.KeyHash\nOCSPResponse = rfc2560.OCSPResponse\nOCSPResponseStatus = rfc2560.OCSPResponseStatus\nResponseBytes = rfc2560.ResponseBytes\nRevokedInfo = rfc2560.RevokedInfo\nUnknownInfo = rfc2560.UnknownInfo\nVersion = rfc2560.Version\n\nid_kp_OCSPSigning = rfc2560.id_kp_OCSPSigning\n\nid_pkix_ocsp = rfc2560.id_pkix_ocsp\nid_pkix_ocsp_archive_cutoff = rfc2560.id_pkix_ocsp_archive_cutoff\nid_pkix_ocsp_basic = rfc2560.id_pkix_ocsp_basic\nid_pkix_ocsp_crl = rfc2560.id_pkix_ocsp_crl\nid_pkix_ocsp_nocheck = rfc2560.id_pkix_ocsp_nocheck\nid_pkix_ocsp_nonce = rfc2560.id_pkix_ocsp_nonce\nid_pkix_ocsp_response = rfc2560.id_pkix_ocsp_response\nid_pkix_ocsp_service_locator = rfc2560.id_pkix_ocsp_service_locator\n\n\n# Additional object identifiers\n\nid_pkix_ocsp_pref_sig_algs = id_pkix_ocsp + (8, )\nid_pkix_ocsp_extended_revoke = id_pkix_ocsp + (9, )\n\n\n# Updated structures (mostly to improve openTypes support)\n\nclass CertID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('hashAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('issuerNameHash', univ.OctetString()),\n        namedtype.NamedType('issuerKeyHash', univ.OctetString()),\n        namedtype.NamedType('serialNumber', CertificateSerialNumber())\n    )\n\n\nclass SingleResponse(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certID', CertID()),\n        namedtype.NamedType('certStatus', CertStatus()),\n        namedtype.NamedType('thisUpdate', useful.GeneralizedTime()),\n        namedtype.OptionalNamedType('nextUpdate', useful.GeneralizedTime().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('singleExtensions', Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass ResponderID(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('byName', Name().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('byKey', KeyHash().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass ResponseData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('version', Version('v1').subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('responderID', ResponderID()),\n        namedtype.NamedType('producedAt', useful.GeneralizedTime()),\n        namedtype.NamedType('responses', univ.SequenceOf(\n            componentType=SingleResponse())),\n        namedtype.OptionalNamedType('responseExtensions', Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass BasicOCSPResponse(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('tbsResponseData', ResponseData()),\n        namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('signature', univ.BitString()),\n        namedtype.OptionalNamedType('certs', univ.SequenceOf(\n            componentType=Certificate()).subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass Request(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('reqCert', CertID()),\n        namedtype.OptionalNamedType('singleRequestExtensions', Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass Signature(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('signature', univ.BitString()),\n        namedtype.OptionalNamedType('certs', univ.SequenceOf(\n            componentType=Certificate()).subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\nclass TBSRequest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('version', Version('v1').subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('requestorName', GeneralName().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.NamedType('requestList', univ.SequenceOf(\n            componentType=Request())),\n        namedtype.OptionalNamedType('requestExtensions', Extensions().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass OCSPRequest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('tbsRequest', TBSRequest()),\n        namedtype.OptionalNamedType('optionalSignature', Signature().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n    )\n\n\n# Previously omitted structure\n\nclass ServiceLocator(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('issuer', Name()),\n        namedtype.NamedType('locator', AuthorityInfoAccessSyntax())\n    )\n\n\n# Additional structures\n\nclass CrlID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('crlUrl', char.IA5String().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('crlNum', univ.Integer().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('crlTime', useful.GeneralizedTime().subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass PreferredSignatureAlgorithm(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('sigIdentifier', AlgorithmIdentifier()),\n        namedtype.OptionalNamedType('certIdentifier', AlgorithmIdentifier())\n    )\n\n\nclass PreferredSignatureAlgorithms(univ.SequenceOf):\n    componentType = PreferredSignatureAlgorithm()\n\n\n\n# Response Type OID to Response Map\n\nocspResponseMap = {\n    id_pkix_ocsp_basic: BasicOCSPResponse(),\n}\n\n\n# Map of Extension OIDs to Extensions added to the ones\n# that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    # Certificate Extension\n    id_pkix_ocsp_nocheck: univ.Null(\"\"),\n    # OCSP Request Extensions\n    id_pkix_ocsp_nonce: univ.OctetString(),\n    id_pkix_ocsp_response: AcceptableResponses(),\n    id_pkix_ocsp_service_locator: ServiceLocator(),\n    id_pkix_ocsp_pref_sig_algs: PreferredSignatureAlgorithms(),\n    # OCSP Response Extensions\n    id_pkix_ocsp_crl: CrlID(),\n    id_pkix_ocsp_archive_cutoff: ArchiveCutoff(),\n    id_pkix_ocsp_extended_revoke: univ.Null(\"\"),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc5940.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add map for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Additional CMS Revocation Information Choices\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5940.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc2560\nfrom pyasn1_modules import rfc5652\n\n\n# RevocationInfoChoice for OCSP response:\n# The OID is included in otherRevInfoFormat, and\n# signed OCSPResponse is included in otherRevInfo\n\nid_ri_ocsp_response = univ.ObjectIdentifier('1.3.6.1.5.5.7.16.2')\n\nOCSPResponse = rfc2560.OCSPResponse\n\n\n# RevocationInfoChoice for SCVP request/response:\n# The OID is included in otherRevInfoFormat, and\n# SCVPReqRes is included in otherRevInfo\n\nid_ri_scvp = univ.ObjectIdentifier('1.3.6.1.5.5.7.16.4')\n\nContentInfo = rfc5652.ContentInfo\n\nclass SCVPReqRes(univ.Sequence):\n    pass\n\nSCVPReqRes.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('request',\n        ContentInfo().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('response', ContentInfo())\n)\n\n\n# Map of Revocation Info Format OIDs to Revocation Info Format\n# is added to the ones that are in rfc5652.py\n\n_otherRevInfoFormatMapUpdate = {\n     id_ri_ocsp_response: OCSPResponse(),\n     id_ri_scvp: SCVPReqRes(),\n}\n\nrfc5652.otherRevInfoFormatMap.update(_otherRevInfoFormatMapUpdate)\n", "pyasn1_modules/rfc5697.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Other Certificates Extension\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5697.txt\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc4055\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nCertificateSerialNumber = rfc5280.CertificateSerialNumber\n\nGeneralNames = rfc5280.GeneralNames\n\n\n# Imports from RFC 4055\n\nid_sha1 = rfc4055.id_sha1\n\n\n# Imports from RFC 5055\n# These are defined here because a module for RFC 5055 does not exist yet\n\nclass SCVPIssuerSerial(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('issuer', GeneralNames()),\n        namedtype.NamedType('serialNumber', CertificateSerialNumber())\n    )\n\n\nsha1_alg_id = AlgorithmIdentifier()\nsha1_alg_id['algorithm'] = id_sha1\n\n\nclass SCVPCertID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('certHash', univ.OctetString()),\n        namedtype.NamedType('issuerSerial', SCVPIssuerSerial()),\n        namedtype.DefaultedNamedType('hashAlgorithm', sha1_alg_id)\n    )\n\n\n# Other Certificates Extension\n\nid_pe_otherCerts = univ.ObjectIdentifier((1, 3, 6, 1, 5, 5, 7, 1, 19,))\n\nclass OtherCertificates(univ.SequenceOf):\n    componentType = SCVPCertID()\n\n\n# Update of certificate extension map in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_otherCerts: OtherCertificates(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc8692.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Algorithm Identifiers for RSASSA-PSS and ECDSA using SHAKEs\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8692.txt\n#\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc4055\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5480\n\n\n# SHAKE128 One-Way Hash Function\n\nid_shake128 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.11')\n\nmda_shake128 = rfc5280.AlgorithmIdentifier()\nmda_shake128['algorithm'] = id_shake128\n# mda_shake128['parameters'] is absent\n\n\n# SHAKE256 One-Way Hash Function\n\nid_shake256 = univ.ObjectIdentifier('2.16.840.1.101.3.4.2.12')\n\nmda_shake256 = rfc5280.AlgorithmIdentifier()\nmda_shake256['algorithm'] = id_shake256\n# mda_shake256['parameters'] is absent\n\n\n# RSA PSS with SHAKE128\n\nid_RSASSA_PSS_SHAKE128 = univ.ObjectIdentifier('1.3.6.1.5.5.7.6.30')\n\nsa_rSASSA_PSS_SHAKE128 = rfc5280.AlgorithmIdentifier()\nsa_rSASSA_PSS_SHAKE128['algorithm'] = id_RSASSA_PSS_SHAKE128\n# sa_rSASSA_PSS_SHAKE128['parameters'] is absent\n\npk_rsaSSA_PSS_SHAKE128 = rfc4055.RSAPublicKey()\n\n\n# RSA PSS with SHAKE256\n\nid_RSASSA_PSS_SHAKE256 = univ.ObjectIdentifier('1.3.6.1.5.5.7.6.31')\n\nsa_rSASSA_PSS_SHAKE256 = rfc5280.AlgorithmIdentifier()\nsa_rSASSA_PSS_SHAKE256['algorithm'] = id_RSASSA_PSS_SHAKE256\n# sa_rSASSA_PSS_SHAKE256['parameters'] is absent\n\npk_rsaSSA_PSS_SHAKE256 = rfc4055.RSAPublicKey()\n\n\n# ECDSA with SHAKE128\n\nid_ecdsa_with_shake128 = univ.ObjectIdentifier('1.3.6.1.5.5.7.6.32')\n\nsa_ecdsa_with_shake128 = rfc5280.AlgorithmIdentifier()\nsa_ecdsa_with_shake128['algorithm'] = id_ecdsa_with_shake128\n# sa_ecdsa_with_shake128['parameters'] is absent\n\npk_ec = rfc5480.ECPoint()\n\n\n# ECDSA with SHAKE128\n\nid_ecdsa_with_shake256 = univ.ObjectIdentifier('1.3.6.1.5.5.7.6.33')\n\nsa_ecdsa_with_shake256 = rfc5280.AlgorithmIdentifier()\nsa_ecdsa_with_shake256['algorithm'] = id_ecdsa_with_shake256\n# sa_ecdsa_with_shake256['parameters'] is absent\n", "pyasn1_modules/rfc8398.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with some assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Internationalized Email Addresses in X.509 Certificates\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8398.txt\n# https://www.rfc-editor.org/errata/eid5418\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# SmtpUTF8Mailbox contains Mailbox as specified in Section 3.3 of RFC 6531\n\nid_pkix = rfc5280.id_pkix\n\nid_on = id_pkix + (8, )\n\nid_on_SmtpUTF8Mailbox = id_on + (9, )\n\n\nclass SmtpUTF8Mailbox(char.UTF8String):\n    pass\n\nSmtpUTF8Mailbox.subtypeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\non_SmtpUTF8Mailbox = rfc5280.AnotherName()\non_SmtpUTF8Mailbox['type-id'] = id_on_SmtpUTF8Mailbox\non_SmtpUTF8Mailbox['value'] = SmtpUTF8Mailbox()\n\n\n# Map of Other Name OIDs to Other Name is added to the\n# ones that are in rfc5280.py\n\n_anotherNameMapUpdate = {\n    id_on_SmtpUTF8Mailbox: SmtpUTF8Mailbox(),\n}\n\nrfc5280.anotherNameMap.update(_anotherNameMapUpdate)\n", "pyasn1_modules/rfc2986.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Joel Johnson with asn1ate tool.\n# Modified by Russ Housley to add support for opentypes by importing\n#   definitions from rfc5280 so that the same maps are used.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS #10: Certification Request Syntax Specification\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc2986.txt\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\nAttributeType = rfc5280.AttributeType\n\nAttributeValue = rfc5280.AttributeValue\n\nAttributeTypeAndValue = rfc5280.AttributeTypeAndValue\n\nAttribute = rfc5280.Attribute\n\nRelativeDistinguishedName = rfc5280.RelativeDistinguishedName\n\nRDNSequence = rfc5280.RDNSequence\n\nName = rfc5280.Name\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nSubjectPublicKeyInfo = rfc5280.SubjectPublicKeyInfo\n\n\nclass Attributes(univ.SetOf):\n    pass\n\n\nAttributes.componentType = Attribute()\n\n\nclass CertificationRequestInfo(univ.Sequence):\n    pass\n\n\nCertificationRequestInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', univ.Integer()),\n    namedtype.NamedType('subject', Name()),\n    namedtype.NamedType('subjectPKInfo', SubjectPublicKeyInfo()),\n    namedtype.NamedType('attributes',\n                        Attributes().subtype(implicitTag=tag.Tag(\n                            tag.tagClassContext, tag.tagFormatSimple, 0))\n    )\n)\n\n\nclass CertificationRequest(univ.Sequence):\n    pass\n\n\nCertificationRequest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certificationRequestInfo', CertificationRequestInfo()),\n    namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n", "pyasn1_modules/rfc4108.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add items from the verified errata.\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CMS Firmware Wrapper\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4108.txt\n# https://www.rfc-editor.org/errata_search.php?rfc=4108\n#\n\n\nfrom pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\nclass HardwareSerialEntry(univ.Choice):\n    pass\n\nHardwareSerialEntry.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('all', univ.Null()),\n    namedtype.NamedType('single', univ.OctetString()),\n    namedtype.NamedType('block', univ.Sequence(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('low', univ.OctetString()),\n        namedtype.NamedType('high', univ.OctetString())\n    ))\n    )\n)\n\n\nclass HardwareModules(univ.Sequence):\n    pass\n\nHardwareModules.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hwType', univ.ObjectIdentifier()),\n    namedtype.NamedType('hwSerialEntries', univ.SequenceOf(componentType=HardwareSerialEntry()))\n)\n\n\nclass CommunityIdentifier(univ.Choice):\n    pass\n\nCommunityIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('communityOID', univ.ObjectIdentifier()),\n    namedtype.NamedType('hwModuleList', HardwareModules())\n)\n\n\n\nclass PreferredPackageIdentifier(univ.Sequence):\n    pass\n\nPreferredPackageIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('fwPkgID', univ.ObjectIdentifier()),\n    namedtype.NamedType('verNum', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, MAX)))\n)\n\n\nclass PreferredOrLegacyPackageIdentifier(univ.Choice):\n    pass\n\nPreferredOrLegacyPackageIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('preferred', PreferredPackageIdentifier()),\n    namedtype.NamedType('legacy', univ.OctetString())\n)\n\n\nclass CurrentFWConfig(univ.Sequence):\n    pass\n\nCurrentFWConfig.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('fwPkgType', univ.Integer()),\n    namedtype.NamedType('fwPkgName', PreferredOrLegacyPackageIdentifier())\n)\n\n\nclass PreferredOrLegacyStalePackageIdentifier(univ.Choice):\n    pass\n\nPreferredOrLegacyStalePackageIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('preferredStaleVerNum', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, MAX))),\n    namedtype.NamedType('legacyStaleVersion', univ.OctetString())\n)\n\n\nclass FirmwarePackageLoadErrorCode(univ.Enumerated):\n    pass\n\nFirmwarePackageLoadErrorCode.namedValues = namedval.NamedValues(\n    ('decodeFailure', 1),\n    ('badContentInfo', 2),\n    ('badSignedData', 3),\n    ('badEncapContent', 4),\n    ('badCertificate', 5),\n    ('badSignerInfo', 6),\n    ('badSignedAttrs', 7),\n    ('badUnsignedAttrs', 8),\n    ('missingContent', 9),\n    ('noTrustAnchor', 10),\n    ('notAuthorized', 11),\n    ('badDigestAlgorithm', 12),\n    ('badSignatureAlgorithm', 13),\n    ('unsupportedKeySize', 14),\n    ('signatureFailure', 15),\n    ('contentTypeMismatch', 16),\n    ('badEncryptedData', 17),\n    ('unprotectedAttrsPresent', 18),\n    ('badEncryptContent', 19),\n    ('badEncryptAlgorithm', 20),\n    ('missingCiphertext', 21),\n    ('noDecryptKey', 22),\n    ('decryptFailure', 23),\n    ('badCompressAlgorithm', 24),\n    ('missingCompressedContent', 25),\n    ('decompressFailure', 26),\n    ('wrongHardware', 27),\n    ('stalePackage', 28),\n    ('notInCommunity', 29),\n    ('unsupportedPackageType', 30),\n    ('missingDependency', 31),\n    ('wrongDependencyVersion', 32),\n    ('insufficientMemory', 33),\n    ('badFirmware', 34),\n    ('unsupportedParameters', 35),\n    ('breaksDependency', 36),\n    ('otherError', 99)\n)\n\n\nclass VendorLoadErrorCode(univ.Integer):\n    pass\n\n\n# Wrapped Firmware Key Unsigned Attribute and Object Identifier\n\nid_aa_wrappedFirmwareKey = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.39')\n\nclass WrappedFirmwareKey(rfc5652.EnvelopedData):\n    pass\n\n\n# Firmware Package Information Signed Attribute and Object Identifier\n\nid_aa_firmwarePackageInfo = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.42')\n\nclass FirmwarePackageInfo(univ.Sequence):\n    pass\n\nFirmwarePackageInfo.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('fwPkgType', univ.Integer()),\n    namedtype.OptionalNamedType('dependencies', univ.SequenceOf(componentType=PreferredOrLegacyPackageIdentifier()))\n)\n\nFirmwarePackageInfo.sizeSpec = univ.Sequence.sizeSpec + constraint.ValueSizeConstraint(1, 2)\n\n\n# Community Identifiers Signed Attribute and Object Identifier\n\nid_aa_communityIdentifiers = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.40')\n\nclass CommunityIdentifiers(univ.SequenceOf):\n    pass\n\nCommunityIdentifiers.componentType = CommunityIdentifier()\n\n\n# Implemented Compression Algorithms Signed Attribute and Object Identifier\n\nid_aa_implCompressAlgs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.43')\n\nclass ImplementedCompressAlgorithms(univ.SequenceOf):\n    pass\n\nImplementedCompressAlgorithms.componentType = univ.ObjectIdentifier()\n\n\n# Implemented Cryptographic Algorithms Signed Attribute and Object Identifier\n\nid_aa_implCryptoAlgs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.38')\n\nclass ImplementedCryptoAlgorithms(univ.SequenceOf):\n    pass\n\nImplementedCryptoAlgorithms.componentType = univ.ObjectIdentifier()\n\n\n# Decrypt Key Identifier Signed Attribute and Object Identifier\n\nid_aa_decryptKeyID = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.37')\n\nclass DecryptKeyIdentifier(univ.OctetString):\n    pass\n\n\n# Target Hardware Identifier Signed Attribute and Object Identifier\n\nid_aa_targetHardwareIDs = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.36')\n\nclass TargetHardwareIdentifiers(univ.SequenceOf):\n    pass\n\nTargetHardwareIdentifiers.componentType = univ.ObjectIdentifier()\n\n\n# Firmware Package Identifier Signed Attribute and Object Identifier\n\nid_aa_firmwarePackageID = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.35')\n\nclass FirmwarePackageIdentifier(univ.Sequence):\n    pass\n\nFirmwarePackageIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('name', PreferredOrLegacyPackageIdentifier()),\n    namedtype.OptionalNamedType('stale', PreferredOrLegacyStalePackageIdentifier())\n)\n\n\n# Firmware Package Message Digest Signed Attribute and Object Identifier\n\nid_aa_fwPkgMessageDigest = univ.ObjectIdentifier('1.2.840.113549.1.9.16.2.41')\n\nclass FirmwarePackageMessageDigest(univ.Sequence):\n    pass\n\nFirmwarePackageMessageDigest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algorithm', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('msgDigest', univ.OctetString())\n)\n\n\n# Firmware Package Load Error Report Content Type and Object Identifier\n\nclass FWErrorVersion(univ.Integer):\n    pass\n\nFWErrorVersion.namedValues = namedval.NamedValues(\n    ('v1', 1)\n)\n\n\nid_ct_firmwareLoadError = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.18')\n\nclass FirmwarePackageLoadError(univ.Sequence):\n    pass\n\nFirmwarePackageLoadError.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', FWErrorVersion().subtype(value='v1')),\n    namedtype.NamedType('hwType', univ.ObjectIdentifier()),\n    namedtype.NamedType('hwSerialNum', univ.OctetString()),\n    namedtype.NamedType('errorCode', FirmwarePackageLoadErrorCode()),\n    namedtype.OptionalNamedType('vendorErrorCode', VendorLoadErrorCode()),\n    namedtype.OptionalNamedType('fwPkgName', PreferredOrLegacyPackageIdentifier()),\n    namedtype.OptionalNamedType('config', univ.SequenceOf(componentType=CurrentFWConfig()).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\n# Firmware Package Load Receipt Content Type and Object Identifier\n\nclass FWReceiptVersion(univ.Integer):\n    pass\n\nFWReceiptVersion.namedValues = namedval.NamedValues(\n    ('v1', 1)\n)\n\n\nid_ct_firmwareLoadReceipt = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.17')\n\nclass FirmwarePackageLoadReceipt(univ.Sequence):\n    pass\n\nFirmwarePackageLoadReceipt.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', FWReceiptVersion().subtype(value='v1')),\n    namedtype.NamedType('hwType', univ.ObjectIdentifier()),\n    namedtype.NamedType('hwSerialNum', univ.OctetString()),\n    namedtype.NamedType('fwPkgName', PreferredOrLegacyPackageIdentifier()),\n    namedtype.OptionalNamedType('trustAnchorKeyID', univ.OctetString()),\n    namedtype.OptionalNamedType('decryptKeyID', univ.OctetString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\n# Firmware Package Content Type and Object Identifier\n\nid_ct_firmwarePackage = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.16')\n\nclass FirmwarePkgData(univ.OctetString):\n    pass\n\n\n# Other Name syntax for Hardware Module Name\n\nid_on_hardwareModuleName = univ.ObjectIdentifier('1.3.6.1.5.5.7.8.4')\n\nclass HardwareModuleName(univ.Sequence):\n    pass\n\nHardwareModuleName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hwType', univ.ObjectIdentifier()),\n    namedtype.NamedType('hwSerialNum', univ.OctetString())\n)\n\n\n# Map of Attribute Type OIDs to Attributes is added to the\n# ones that are in rfc5652.py\n\n_cmsAttributesMapUpdate = {\n    id_aa_wrappedFirmwareKey: WrappedFirmwareKey(),\n    id_aa_firmwarePackageInfo: FirmwarePackageInfo(),\n    id_aa_communityIdentifiers: CommunityIdentifiers(),\n    id_aa_implCompressAlgs: ImplementedCompressAlgorithms(),\n    id_aa_implCryptoAlgs: ImplementedCryptoAlgorithms(),\n    id_aa_decryptKeyID: DecryptKeyIdentifier(),\n    id_aa_targetHardwareIDs: TargetHardwareIdentifiers(),\n    id_aa_firmwarePackageID: FirmwarePackageIdentifier(),\n    id_aa_fwPkgMessageDigest: FirmwarePackageMessageDigest(),\n}\n\nrfc5652.cmsAttributesMap.update(_cmsAttributesMapUpdate)\n\n\n# Map of Content Type OIDs to Content Types is added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_firmwareLoadError: FirmwarePackageLoadError(),\n    id_ct_firmwareLoadReceipt: FirmwarePackageLoadReceipt(),\n    id_ct_firmwarePackage: FirmwarePkgData(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n\n\n# Map of Other Name OIDs to Other Name is added to the\n# ones that are in rfc5280.py\n\n_anotherNameMapUpdate = {\n    id_on_hardwareModuleName: HardwareModuleName(),\n}\n\nrfc5280.anotherNameMap.update(_anotherNameMapUpdate)\n", "pyasn1_modules/rfc4211.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Internet X.509 Public Key Infrastructure Certificate Request\n# Message Format (CRMF)\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc4211.txt\n#\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc3280\nfrom pyasn1_modules import rfc3852\n\nMAX = float('inf')\n\n\ndef _buildOid(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nid_pkix = _buildOid(1, 3, 6, 1, 5, 5, 7)\n\nid_pkip = _buildOid(id_pkix, 5)\n\nid_regCtrl = _buildOid(id_pkip, 1)\n\n\nclass SinglePubInfo(univ.Sequence):\n    pass\n\n\nSinglePubInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('pubMethod', univ.Integer(\n        namedValues=namedval.NamedValues(('dontCare', 0), ('x500', 1), ('web', 2), ('ldap', 3)))),\n    namedtype.OptionalNamedType('pubLocation', rfc3280.GeneralName())\n)\n\n\nclass UTF8Pairs(char.UTF8String):\n    pass\n\n\nclass PKMACValue(univ.Sequence):\n    pass\n\n\nPKMACValue.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algId', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('value', univ.BitString())\n)\n\n\nclass POPOSigningKeyInput(univ.Sequence):\n    pass\n\n\nPOPOSigningKeyInput.componentType = namedtype.NamedTypes(\n    namedtype.NamedType(\n        'authInfo', univ.Choice(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType(\n                    'sender', rfc3280.GeneralName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))\n                ),\n                namedtype.NamedType(\n                    'publicKeyMAC', PKMACValue()\n                )\n            )\n        )\n    ),\n    namedtype.NamedType('publicKey', rfc3280.SubjectPublicKeyInfo())\n)\n\n\nclass POPOSigningKey(univ.Sequence):\n    pass\n\n\nPOPOSigningKey.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('poposkInput', POPOSigningKeyInput().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('algorithmIdentifier', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\n\nclass Attributes(univ.SetOf):\n    pass\n\n\nAttributes.componentType = rfc3280.Attribute()\n\n\nclass PrivateKeyInfo(univ.Sequence):\n    pass\n\n\nPrivateKeyInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', univ.Integer()),\n    namedtype.NamedType('privateKeyAlgorithm', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('privateKey', univ.OctetString()),\n    namedtype.OptionalNamedType('attributes',\n                                Attributes().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass EncryptedValue(univ.Sequence):\n    pass\n\n\nEncryptedValue.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('intendedAlg', rfc3280.AlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('symmAlg', rfc3280.AlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('encSymmKey', univ.BitString().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('keyAlg', rfc3280.AlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.OptionalNamedType('valueHint', univ.OctetString().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n    namedtype.NamedType('encValue', univ.BitString())\n)\n\n\nclass EncryptedKey(univ.Choice):\n    pass\n\n\nEncryptedKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('encryptedValue', EncryptedValue()),\n    namedtype.NamedType('envelopedData', rfc3852.EnvelopedData().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass KeyGenParameters(univ.OctetString):\n    pass\n\n\nclass PKIArchiveOptions(univ.Choice):\n    pass\n\n\nPKIArchiveOptions.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('encryptedPrivKey',\n                        EncryptedKey().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('keyGenParameters',\n                        KeyGenParameters().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('archiveRemGenPrivKey',\n                        univ.Boolean().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\nid_regCtrl_authenticator = _buildOid(id_regCtrl, 2)\n\nid_regInfo = _buildOid(id_pkip, 2)\n\nid_regInfo_certReq = _buildOid(id_regInfo, 2)\n\n\nclass ProtocolEncrKey(rfc3280.SubjectPublicKeyInfo):\n    pass\n\n\nclass Authenticator(char.UTF8String):\n    pass\n\n\nclass SubsequentMessage(univ.Integer):\n    pass\n\n\nSubsequentMessage.namedValues = namedval.NamedValues(\n    ('encrCert', 0),\n    ('challengeResp', 1)\n)\n\n\nclass AttributeTypeAndValue(univ.Sequence):\n    pass\n\n\nAttributeTypeAndValue.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', univ.ObjectIdentifier()),\n    namedtype.NamedType('value', univ.Any())\n)\n\n\nclass POPOPrivKey(univ.Choice):\n    pass\n\n\nPOPOPrivKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('thisMessage',\n                        univ.BitString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('subsequentMessage',\n                        SubsequentMessage().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('dhMAC',\n                        univ.BitString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('agreeMAC',\n                        PKMACValue().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n    namedtype.NamedType('encryptedKey', rfc3852.EnvelopedData().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))\n)\n\n\nclass ProofOfPossession(univ.Choice):\n    pass\n\n\nProofOfPossession.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('raVerified',\n                        univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('signature', POPOSigningKey().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n    namedtype.NamedType('keyEncipherment',\n                        POPOPrivKey().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n    namedtype.NamedType('keyAgreement',\n                        POPOPrivKey().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)))\n)\n\n\nclass OptionalValidity(univ.Sequence):\n    pass\n\n\nOptionalValidity.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('notBefore', rfc3280.Time().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('notAfter', rfc3280.Time().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass CertTemplate(univ.Sequence):\n    pass\n\n\nCertTemplate.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('version', rfc3280.Version().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('serialNumber', univ.Integer().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('signingAlg', rfc3280.AlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('issuer', rfc3280.Name().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n    namedtype.OptionalNamedType('validity', OptionalValidity().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n    namedtype.OptionalNamedType('subject', rfc3280.Name().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n    namedtype.OptionalNamedType('publicKey', rfc3280.SubjectPublicKeyInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))),\n    namedtype.OptionalNamedType('issuerUID', rfc3280.UniqueIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n    namedtype.OptionalNamedType('subjectUID', rfc3280.UniqueIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 8))),\n    namedtype.OptionalNamedType('extensions', rfc3280.Extensions().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 9)))\n)\n\n\nclass Controls(univ.SequenceOf):\n    pass\n\n\nControls.componentType = AttributeTypeAndValue()\nControls.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass CertRequest(univ.Sequence):\n    pass\n\n\nCertRequest.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certReqId', univ.Integer()),\n    namedtype.NamedType('certTemplate', CertTemplate()),\n    namedtype.OptionalNamedType('controls', Controls())\n)\n\n\nclass CertReqMsg(univ.Sequence):\n    pass\n\n\nCertReqMsg.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certReq', CertRequest()),\n    namedtype.OptionalNamedType('popo', ProofOfPossession()),\n    namedtype.OptionalNamedType('regInfo', univ.SequenceOf(componentType=AttributeTypeAndValue()))\n)\n\n\nclass CertReqMessages(univ.SequenceOf):\n    pass\n\n\nCertReqMessages.componentType = CertReqMsg()\nCertReqMessages.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass CertReq(CertRequest):\n    pass\n\n\nid_regCtrl_pkiPublicationInfo = _buildOid(id_regCtrl, 3)\n\n\nclass CertId(univ.Sequence):\n    pass\n\n\nCertId.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuer', rfc3280.GeneralName()),\n    namedtype.NamedType('serialNumber', univ.Integer())\n)\n\n\nclass OldCertId(CertId):\n    pass\n\n\nclass PKIPublicationInfo(univ.Sequence):\n    pass\n\n\nPKIPublicationInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('action',\n                        univ.Integer(namedValues=namedval.NamedValues(('dontPublish', 0), ('pleasePublish', 1)))),\n    namedtype.OptionalNamedType('pubInfos', univ.SequenceOf(componentType=SinglePubInfo()))\n)\n\n\nclass EncKeyWithID(univ.Sequence):\n    pass\n\n\nEncKeyWithID.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('privateKey', PrivateKeyInfo()),\n    namedtype.OptionalNamedType(\n        'identifier', univ.Choice(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType('string', char.UTF8String()),\n                namedtype.NamedType('generalName', rfc3280.GeneralName())\n            )\n        )\n    )\n)\n\nid_regCtrl_protocolEncrKey = _buildOid(id_regCtrl, 6)\n\nid_regCtrl_oldCertID = _buildOid(id_regCtrl, 5)\n\nid_smime = _buildOid(1, 2, 840, 113549, 1, 9, 16)\n\n\nclass PBMParameter(univ.Sequence):\n    pass\n\n\nPBMParameter.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('salt', univ.OctetString()),\n    namedtype.NamedType('owf', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('iterationCount', univ.Integer()),\n    namedtype.NamedType('mac', rfc3280.AlgorithmIdentifier())\n)\n\nid_regCtrl_regToken = _buildOid(id_regCtrl, 1)\n\nid_regCtrl_pkiArchiveOptions = _buildOid(id_regCtrl, 4)\n\nid_regInfo_utf8Pairs = _buildOid(id_regInfo, 1)\n\nid_ct = _buildOid(id_smime, 1)\n\nid_ct_encKeyWithID = _buildOid(id_ct, 21)\n\n\nclass RegToken(char.UTF8String):\n    pass\n", "pyasn1_modules/rfc3274.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add a map for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# CMS Compressed Data Content Type\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3274.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\n\nclass CompressionAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\n# The CMS Compressed Data Content Type\n\nid_ct_compressedData = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.9')\n\nclass CompressedData(univ.Sequence):\n    pass\n\nCompressedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', rfc5652.CMSVersion()), # Always set to 0\n    namedtype.NamedType('compressionAlgorithm', CompressionAlgorithmIdentifier()),\n    namedtype.NamedType('encapContentInfo', rfc5652.EncapsulatedContentInfo())\n)\n\n\n# Algorithm identifier for the zLib Compression Algorithm\n# This includes cpa_zlibCompress as defined in RFC 6268,\n# from https://www.rfc-editor.org/rfc/rfc6268.txt\n\nid_alg_zlibCompress = univ.ObjectIdentifier('1.2.840.113549.1.9.16.3.8')\n\ncpa_zlibCompress = rfc5280.AlgorithmIdentifier()\ncpa_zlibCompress['algorithm'] = id_alg_zlibCompress\n# cpa_zlibCompress['parameters'] are absent\n\n\n# Map of Content Type OIDs to Content Types is added to thr\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_compressedData: CompressedData(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc3709.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Logotypes in X.509 Certificates\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3709.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc6170\n\nMAX = float('inf')\n\n\nclass HashAlgAndValue(univ.Sequence):\n    pass\n\nHashAlgAndValue.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hashAlg', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('hashValue', univ.OctetString())\n)\n\n\nclass LogotypeDetails(univ.Sequence):\n    pass\n\nLogotypeDetails.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('mediaType', char.IA5String()),\n    namedtype.NamedType('logotypeHash', univ.SequenceOf(\n        componentType=HashAlgAndValue()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('logotypeURI', univ.SequenceOf(\n        componentType=char.IA5String()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\nclass LogotypeAudioInfo(univ.Sequence):\n    pass\n\nLogotypeAudioInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('fileSize', univ.Integer()),\n    namedtype.NamedType('playTime', univ.Integer()),\n    namedtype.NamedType('channels', univ.Integer()),\n    namedtype.OptionalNamedType('sampleRate', univ.Integer().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.OptionalNamedType('language', char.IA5String().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))\n)\n\n\nclass LogotypeAudio(univ.Sequence):\n    pass\n\nLogotypeAudio.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('audioDetails', LogotypeDetails()),\n    namedtype.OptionalNamedType('audioInfo', LogotypeAudioInfo())\n)\n\n\nclass LogotypeImageType(univ.Integer):\n    pass\n\nLogotypeImageType.namedValues = namedval.NamedValues(\n    ('grayScale', 0),\n    ('color', 1)\n)\n\n\nclass LogotypeImageResolution(univ.Choice):\n    pass\n\nLogotypeImageResolution.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('numBits',\n        univ.Integer().subtype(implicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('tableSize',\n        univ.Integer().subtype(implicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\nclass LogotypeImageInfo(univ.Sequence):\n    pass\n\nLogotypeImageInfo.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('type', LogotypeImageType().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatSimple, 0)).subtype(value='color')),\n    namedtype.NamedType('fileSize', univ.Integer()),\n    namedtype.NamedType('xSize', univ.Integer()),\n    namedtype.NamedType('ySize', univ.Integer()),\n    namedtype.OptionalNamedType('resolution', LogotypeImageResolution()),\n    namedtype.OptionalNamedType('language', char.IA5String().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))\n)\n\n\nclass LogotypeImage(univ.Sequence):\n    pass\n\nLogotypeImage.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('imageDetails', LogotypeDetails()),\n    namedtype.OptionalNamedType('imageInfo', LogotypeImageInfo())\n)\n\n\nclass LogotypeData(univ.Sequence):\n    pass\n\nLogotypeData.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('image', univ.SequenceOf(\n        componentType=LogotypeImage())),\n    namedtype.OptionalNamedType('audio', univ.SequenceOf(\n        componentType=LogotypeAudio()).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatSimple, 1)))\n)\n\n\nclass LogotypeReference(univ.Sequence):\n    pass\n\nLogotypeReference.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('refStructHash', univ.SequenceOf(\n        componentType=HashAlgAndValue()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('refStructURI', univ.SequenceOf(\n        componentType=char.IA5String()).subtype(\n            sizeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\nclass LogotypeInfo(univ.Choice):\n    pass\n\nLogotypeInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('direct',\n        LogotypeData().subtype(implicitTag=tag.Tag(tag.tagClassContext,\n            tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('indirect', LogotypeReference().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext,\n             tag.tagFormatConstructed, 1)))\n)\n\n# Other logotype type and associated object identifiers\n\nid_logo_background = univ.ObjectIdentifier('1.3.6.1.5.5.7.20.2')\n\nid_logo_loyalty = univ.ObjectIdentifier('1.3.6.1.5.5.7.20.1')\n\nid_logo_certImage = rfc6170.id_logo_certImage\n\n\nclass OtherLogotypeInfo(univ.Sequence):\n    pass\n\nOtherLogotypeInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('logotypeType', univ.ObjectIdentifier()),\n    namedtype.NamedType('info', LogotypeInfo())\n)\n\n\n# Logotype Certificate Extension\n\nid_pe_logotype = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.12')\n\n\nclass LogotypeExtn(univ.Sequence):\n    pass\n\nLogotypeExtn.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('communityLogos', univ.SequenceOf(\n        componentType=LogotypeInfo()).subtype(\n            explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('issuerLogo', LogotypeInfo().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n    namedtype.OptionalNamedType('subjectLogo', LogotypeInfo().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n    namedtype.OptionalNamedType('otherLogos', univ.SequenceOf(\n        componentType=OtherLogotypeInfo()).subtype(explicitTag=tag.Tag(\n            tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_logotype: LogotypeExtn(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc5916.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Device Owner Attribute\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5916.txt\n#\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# Device Owner Attribute\n\nid_deviceOwner = univ.ObjectIdentifier((2, 16, 840, 1, 101, 2, 1, 5, 69))\n\nat_deviceOwner = rfc5280.Attribute()\nat_deviceOwner['type'] = id_deviceOwner\nat_deviceOwner['values'][0] = univ.ObjectIdentifier()\n\n\n# Add to the map of Attribute Type OIDs to Attributes in rfc5280.py.\n\n_certificateAttributesMapUpdate = {\n    id_deviceOwner: univ.ObjectIdentifier(),\n}\n\nrfc5280.certificateAttributesMap.update(_certificateAttributesMapUpdate)\n", "pyasn1_modules/rfc5652.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Modified by Russ Housley to add support for opentypes.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc5652.txt\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc3281\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\ndef _buildOid(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\ncmsContentTypesMap = { }\n\ncmsAttributesMap = { }\n\notherKeyAttributesMap = { }\n\notherCertFormatMap = { }\n\notherRevInfoFormatMap = { }\n\notherRecipientInfoMap = { }\n\n\nclass AttCertVersionV1(univ.Integer):\n    pass\n\n\nAttCertVersionV1.namedValues = namedval.NamedValues(\n    ('v1', 0)\n)\n\n\nclass AttributeCertificateInfoV1(univ.Sequence):\n    pass\n\n\nAttributeCertificateInfoV1.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', AttCertVersionV1().subtype(value=\"v1\")),\n    namedtype.NamedType(\n        'subject', univ.Choice(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType('baseCertificateID', rfc3281.IssuerSerial().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n                namedtype.NamedType('subjectName', rfc5280.GeneralNames().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n            )\n        )\n    ),\n    namedtype.NamedType('issuer', rfc5280.GeneralNames()),\n    namedtype.NamedType('signature', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('serialNumber', rfc5280.CertificateSerialNumber()),\n    namedtype.NamedType('attCertValidityPeriod', rfc3281.AttCertValidityPeriod()),\n    namedtype.NamedType('attributes', univ.SequenceOf(componentType=rfc5280.Attribute())),\n    namedtype.OptionalNamedType('issuerUniqueID', rfc5280.UniqueIdentifier()),\n    namedtype.OptionalNamedType('extensions', rfc5280.Extensions())\n)\n\n\nclass AttributeCertificateV1(univ.Sequence):\n    pass\n\n\nAttributeCertificateV1.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('acInfo', AttributeCertificateInfoV1()),\n    namedtype.NamedType('signatureAlgorithm', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass Attribute(univ.Sequence):\n    pass\n\n\nAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', univ.ObjectIdentifier()),\n    namedtype.NamedType('attrValues', univ.SetOf(componentType=AttributeValue()),\n        openType=opentype.OpenType('attrType', cmsAttributesMap)\n    )\n)\n\n\nclass SignedAttributes(univ.SetOf):\n    pass\n\n\nSignedAttributes.componentType = Attribute()\nSignedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass AttributeCertificateV2(rfc3281.AttributeCertificate):\n    pass\n\n\nclass OtherKeyAttribute(univ.Sequence):\n    pass\n\n\nOtherKeyAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyAttrId', univ.ObjectIdentifier()),\n    namedtype.OptionalNamedType('keyAttr', univ.Any(),\n        openType=opentype.OpenType('keyAttrId', otherKeyAttributesMap)\n    )\n)\n\n\nclass UnauthAttributes(univ.SetOf):\n    pass\n\n\nUnauthAttributes.componentType = Attribute()\nUnauthAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_encryptedData = _buildOid(1, 2, 840, 113549, 1, 7, 6)\n\n\nclass SignatureValue(univ.OctetString):\n    pass\n\n\nclass IssuerAndSerialNumber(univ.Sequence):\n    pass\n\n\nIssuerAndSerialNumber.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuer', rfc5280.Name()),\n    namedtype.NamedType('serialNumber', rfc5280.CertificateSerialNumber())\n)\n\n\nclass SubjectKeyIdentifier(univ.OctetString):\n    pass\n\n\nclass RecipientKeyIdentifier(univ.Sequence):\n    pass\n\n\nRecipientKeyIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier()),\n    namedtype.OptionalNamedType('date', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('other', OtherKeyAttribute())\n)\n\n\nclass KeyAgreeRecipientIdentifier(univ.Choice):\n    pass\n\n\nKeyAgreeRecipientIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('rKeyId', RecipientKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n)\n\n\nclass EncryptedKey(univ.OctetString):\n    pass\n\n\nclass RecipientEncryptedKey(univ.Sequence):\n    pass\n\n\nRecipientEncryptedKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('rid', KeyAgreeRecipientIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass RecipientEncryptedKeys(univ.SequenceOf):\n    pass\n\n\nRecipientEncryptedKeys.componentType = RecipientEncryptedKey()\n\n\nclass MessageAuthenticationCode(univ.OctetString):\n    pass\n\n\nclass CMSVersion(univ.Integer):\n    pass\n\n\nCMSVersion.namedValues = namedval.NamedValues(\n    ('v0', 0),\n    ('v1', 1),\n    ('v2', 2),\n    ('v3', 3),\n    ('v4', 4),\n    ('v5', 5)\n)\n\n\nclass OtherCertificateFormat(univ.Sequence):\n    pass\n\n\nOtherCertificateFormat.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('otherCertFormat', univ.ObjectIdentifier()),\n    namedtype.NamedType('otherCert', univ.Any(),\n        openType=opentype.OpenType('otherCertFormat', otherCertFormatMap)\n    )\n)\n\n\nclass ExtendedCertificateInfo(univ.Sequence):\n    pass\n\n\nExtendedCertificateInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('certificate', rfc5280.Certificate()),\n    namedtype.NamedType('attributes', UnauthAttributes())\n)\n\n\nclass Signature(univ.BitString):\n    pass\n\n\nclass SignatureAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass ExtendedCertificate(univ.Sequence):\n    pass\n\n\nExtendedCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('extendedCertificateInfo', ExtendedCertificateInfo()),\n    namedtype.NamedType('signatureAlgorithm', SignatureAlgorithmIdentifier()),\n    namedtype.NamedType('signature', Signature())\n)\n\n\nclass CertificateChoices(univ.Choice):\n    pass\n\n\nCertificateChoices.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certificate', rfc5280.Certificate()),\n    namedtype.NamedType('extendedCertificate', ExtendedCertificate().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('v1AttrCert', AttributeCertificateV1().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('v2AttrCert', AttributeCertificateV2().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('other', OtherCertificateFormat().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)))\n)\n\n\nclass CertificateSet(univ.SetOf):\n    pass\n\n\nCertificateSet.componentType = CertificateChoices()\n\n\nclass OtherRevocationInfoFormat(univ.Sequence):\n    pass\n\n\nOtherRevocationInfoFormat.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('otherRevInfoFormat', univ.ObjectIdentifier()),\n    namedtype.NamedType('otherRevInfo', univ.Any(),\n        openType=opentype.OpenType('otherRevInfoFormat', otherRevInfoFormatMap)\n    )\n)\n\n\nclass RevocationInfoChoice(univ.Choice):\n    pass\n\n\nRevocationInfoChoice.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('crl', rfc5280.CertificateList()),\n    namedtype.NamedType('other', OtherRevocationInfoFormat().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass RevocationInfoChoices(univ.SetOf):\n    pass\n\n\nRevocationInfoChoices.componentType = RevocationInfoChoice()\n\n\nclass OriginatorInfo(univ.Sequence):\n    pass\n\n\nOriginatorInfo.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('certs', CertificateSet().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('crls', RevocationInfoChoices().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass ContentType(univ.ObjectIdentifier):\n    pass\n\n\nclass EncryptedContent(univ.OctetString):\n    pass\n\n\nclass ContentEncryptionAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedContentInfo(univ.Sequence):\n    pass\n\n\nEncryptedContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('contentType', ContentType()),\n    namedtype.NamedType('contentEncryptionAlgorithm', ContentEncryptionAlgorithmIdentifier()),\n    namedtype.OptionalNamedType('encryptedContent', EncryptedContent().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass UnprotectedAttributes(univ.SetOf):\n    pass\n\n\nUnprotectedAttributes.componentType = Attribute()\nUnprotectedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass KeyEncryptionAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass KEKIdentifier(univ.Sequence):\n    pass\n\n\nKEKIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyIdentifier', univ.OctetString()),\n    namedtype.OptionalNamedType('date', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('other', OtherKeyAttribute())\n)\n\n\nclass KEKRecipientInfo(univ.Sequence):\n    pass\n\n\nKEKRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('kekid', KEKIdentifier()),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass KeyDerivationAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass PasswordRecipientInfo(univ.Sequence):\n    pass\n\n\nPasswordRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.OptionalNamedType('keyDerivationAlgorithm', KeyDerivationAlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass RecipientIdentifier(univ.Choice):\n    pass\n\n\nRecipientIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass KeyTransRecipientInfo(univ.Sequence):\n    pass\n\n\nKeyTransRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('rid', RecipientIdentifier()),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass UserKeyingMaterial(univ.OctetString):\n    pass\n\n\nclass OriginatorPublicKey(univ.Sequence):\n    pass\n\n\nOriginatorPublicKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algorithm', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('publicKey', univ.BitString())\n)\n\n\nclass OriginatorIdentifierOrKey(univ.Choice):\n    pass\n\n\nOriginatorIdentifierOrKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('originatorKey', OriginatorPublicKey().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass KeyAgreeRecipientInfo(univ.Sequence):\n    pass\n\n\nKeyAgreeRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('originator', OriginatorIdentifierOrKey().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('ukm', UserKeyingMaterial().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('recipientEncryptedKeys', RecipientEncryptedKeys())\n)\n\n\nclass OtherRecipientInfo(univ.Sequence):\n    pass\n\n\nOtherRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('oriType', univ.ObjectIdentifier()),\n    namedtype.NamedType('oriValue', univ.Any(),\n        openType=opentype.OpenType('oriType', otherRecipientInfoMap)\n    )\n)\n\n\nclass RecipientInfo(univ.Choice):\n    pass\n\n\nRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('ktri', KeyTransRecipientInfo()),\n    namedtype.NamedType('kari', KeyAgreeRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n    namedtype.NamedType('kekri', KEKRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n    namedtype.NamedType('pwri', PasswordRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n    namedtype.NamedType('ori', OtherRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4)))\n)\n\n\nclass RecipientInfos(univ.SetOf):\n    pass\n\n\nRecipientInfos.componentType = RecipientInfo()\nRecipientInfos.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass EnvelopedData(univ.Sequence):\n    pass\n\n\nEnvelopedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.OptionalNamedType('originatorInfo', OriginatorInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('recipientInfos', RecipientInfos()),\n    namedtype.NamedType('encryptedContentInfo', EncryptedContentInfo()),\n    namedtype.OptionalNamedType('unprotectedAttrs', UnprotectedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass DigestAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nid_ct_contentInfo = _buildOid(1, 2, 840, 113549, 1, 9, 16, 1, 6)\n\nid_digestedData = _buildOid(1, 2, 840, 113549, 1, 7, 5)\n\n\nclass EncryptedData(univ.Sequence):\n    pass\n\n\nEncryptedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('encryptedContentInfo', EncryptedContentInfo()),\n    namedtype.OptionalNamedType('unprotectedAttrs', UnprotectedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\nid_messageDigest = _buildOid(1, 2, 840, 113549, 1, 9, 4)\n\nid_signedData = _buildOid(1, 2, 840, 113549, 1, 7, 2)\n\n\nclass MessageAuthenticationCodeAlgorithm(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass UnsignedAttributes(univ.SetOf):\n    pass\n\n\nUnsignedAttributes.componentType = Attribute()\nUnsignedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass SignerIdentifier(univ.Choice):\n    pass\n\n\nSignerIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass SignerInfo(univ.Sequence):\n    pass\n\n\nSignerInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('sid', SignerIdentifier()),\n    namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n    namedtype.OptionalNamedType('signedAttrs', SignedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('signatureAlgorithm', SignatureAlgorithmIdentifier()),\n    namedtype.NamedType('signature', SignatureValue()),\n    namedtype.OptionalNamedType('unsignedAttrs', UnsignedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass SignerInfos(univ.SetOf):\n    pass\n\n\nSignerInfos.componentType = SignerInfo()\n\n\nclass Countersignature(SignerInfo):\n    pass\n\n\nclass ContentInfo(univ.Sequence):\n    pass\n\n\nContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('contentType', ContentType()),\n    namedtype.NamedType('content', univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)),\n        openType=opentype.OpenType('contentType', cmsContentTypesMap)\n    )\n)\n\n\nclass EncapsulatedContentInfo(univ.Sequence):\n    pass\n\n\nEncapsulatedContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('eContentType', ContentType()),\n    namedtype.OptionalNamedType('eContent', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\nid_countersignature = _buildOid(1, 2, 840, 113549, 1, 9, 6)\n\nid_data = _buildOid(1, 2, 840, 113549, 1, 7, 1)\n\n\nclass MessageDigest(univ.OctetString):\n    pass\n\n\nclass AuthAttributes(univ.SetOf):\n    pass\n\n\nAuthAttributes.componentType = Attribute()\nAuthAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass Time(univ.Choice):\n    pass\n\n\nTime.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('utcTime', useful.UTCTime()),\n    namedtype.NamedType('generalTime', useful.GeneralizedTime())\n)\n\n\nclass AuthenticatedData(univ.Sequence):\n    pass\n\n\nAuthenticatedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.OptionalNamedType('originatorInfo', OriginatorInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('recipientInfos', RecipientInfos()),\n    namedtype.NamedType('macAlgorithm', MessageAuthenticationCodeAlgorithm()),\n    namedtype.OptionalNamedType('digestAlgorithm', DigestAlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('encapContentInfo', EncapsulatedContentInfo()),\n    namedtype.OptionalNamedType('authAttrs', AuthAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('mac', MessageAuthenticationCode()),\n    namedtype.OptionalNamedType('unauthAttrs', UnauthAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\nid_contentType = _buildOid(1, 2, 840, 113549, 1, 9, 3)\n\n\nclass ExtendedCertificateOrCertificate(univ.Choice):\n    pass\n\n\nExtendedCertificateOrCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certificate', rfc5280.Certificate()),\n    namedtype.NamedType('extendedCertificate', ExtendedCertificate().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n)\n\n\nclass Digest(univ.OctetString):\n    pass\n\n\nclass DigestedData(univ.Sequence):\n    pass\n\n\nDigestedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n    namedtype.NamedType('encapContentInfo', EncapsulatedContentInfo()),\n    namedtype.NamedType('digest', Digest())\n)\n\nid_envelopedData = _buildOid(1, 2, 840, 113549, 1, 7, 3)\n\n\nclass DigestAlgorithmIdentifiers(univ.SetOf):\n    pass\n\n\nDigestAlgorithmIdentifiers.componentType = DigestAlgorithmIdentifier()\n\n\nclass SignedData(univ.Sequence):\n    pass\n\n\nSignedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('digestAlgorithms', DigestAlgorithmIdentifiers()),\n    namedtype.NamedType('encapContentInfo', EncapsulatedContentInfo()),\n    namedtype.OptionalNamedType('certificates', CertificateSet().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('crls', RevocationInfoChoices().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('signerInfos', SignerInfos())\n)\n\nid_signingTime = _buildOid(1, 2, 840, 113549, 1, 9, 5)\n\n\nclass SigningTime(Time):\n    pass\n\n\nid_ct_authData = _buildOid(1, 2, 840, 113549, 1, 9, 16, 1, 2)\n\n\n# CMS Content Type Map\n\n_cmsContentTypesMapUpdate = {\n    id_ct_contentInfo: ContentInfo(),\n    id_data: univ.OctetString(),\n    id_signedData: SignedData(),\n    id_envelopedData: EnvelopedData(),\n    id_digestedData: DigestedData(),\n    id_encryptedData: EncryptedData(),\n    id_ct_authData: AuthenticatedData(),\n}\n\ncmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n\n\n# CMS Attribute Map\n\n_cmsAttributesMapUpdate = {\n    id_contentType: ContentType(),\n    id_messageDigest: MessageDigest(),\n    id_signingTime: SigningTime(),\n    id_countersignature: Countersignature(),\n}\n\ncmsAttributesMap.update(_cmsAttributesMapUpdate)\n", "pyasn1_modules/rfc3565.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Use of the Advanced Encryption Standard (AES) Encryption\n#   Algorithm in the Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3565.txt\n\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nclass AlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass AES_IV(univ.OctetString):\n    pass\n\nAES_IV.subtypeSpec = constraint.ValueSizeConstraint(16, 16)\n\n\nid_aes128_CBC = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.2')\n\nid_aes192_CBC = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.22')\n\nid_aes256_CBC = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.42')\n\n\nid_aes128_wrap = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.5')\n\nid_aes192_wrap = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.25')\n\nid_aes256_wrap = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.45')\n\n\n# Update the Algorithm Identifier map\n\n_algorithmIdentifierMapUpdate = {\n    id_aes128_CBC: AES_IV(),\n    id_aes192_CBC: AES_IV(),\n    id_aes256_CBC: AES_IV(),\n    id_aes128_wrap: univ.Null(),\n    id_aes192_wrap: univ.Null(),\n    id_aes256_wrap: univ.Null(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc7773.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with some assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Authentication Context Certificate Extension\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7773.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# Authentication Context Extension\n\ne_legnamnden = univ.ObjectIdentifier('1.2.752.201')\n\nid_eleg_ce = e_legnamnden + (5, )\n\nid_ce_authContext = id_eleg_ce + (1, )\n\n\nclass AuthenticationContext(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('contextType', char.UTF8String()),\n        namedtype.OptionalNamedType('contextInfo', char.UTF8String())\n    )\n\nclass AuthenticationContexts(univ.SequenceOf):\n    componentType = AuthenticationContext()\n    subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_ce_authContext: AuthenticationContexts(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc5083.py": "# This file is being contributed to of pyasn1-modules software.\n#\n# Created by Russ Housley without assistance from the asn1ate tool.\n# Modified by Russ Housley to add a map for use with opentypes and\n#   simplify the code for the object identifier assignment.\n#\n# Copyright (c) 2018, 2019 Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n#  Authenticated-Enveloped-Data for the Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5083.txt\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\n# CMS Authenticated-Enveloped-Data Content Type\n\nid_ct_authEnvelopedData = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.23')\n\nclass AuthEnvelopedData(univ.Sequence):\n    pass\n\nAuthEnvelopedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', rfc5652.CMSVersion()),\n    namedtype.OptionalNamedType('originatorInfo', rfc5652.OriginatorInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('recipientInfos', rfc5652.RecipientInfos()),\n    namedtype.NamedType('authEncryptedContentInfo', rfc5652.EncryptedContentInfo()),\n    namedtype.OptionalNamedType('authAttrs', rfc5652.AuthAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('mac', rfc5652.MessageAuthenticationCode()),\n    namedtype.OptionalNamedType('unauthAttrs', rfc5652.UnauthAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\n\n# Map of Content Type OIDs to Content Types is added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_authEnvelopedData: AuthEnvelopedData(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc6486.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# RPKI Manifests\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6486.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import useful\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5652\n\nMAX = float('inf')\n\n\nid_smime = univ.ObjectIdentifier('1.2.840.113549.1.9.16')\n\nid_ct = id_smime + (1, )\n\nid_ct_rpkiManifest = id_ct + (26, )\n\n\nclass FileAndHash(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('file', char.IA5String()),\n        namedtype.NamedType('hash', univ.BitString())\n    )\n\n\nclass Manifest(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.DefaultedNamedType('version',\n            univ.Integer().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0)).subtype(value=0)),\n        namedtype.NamedType('manifestNumber',\n            univ.Integer().subtype(\n                subtypeSpec=constraint.ValueRangeConstraint(0, MAX))),\n        namedtype.NamedType('thisUpdate',\n            useful.GeneralizedTime()),\n        namedtype.NamedType('nextUpdate',\n            useful.GeneralizedTime()),\n        namedtype.NamedType('fileHashAlg',\n            univ.ObjectIdentifier()),\n        namedtype.NamedType('fileList',\n            univ.SequenceOf(componentType=FileAndHash()).subtype(\n                subtypeSpec=constraint.ValueSizeConstraint(0, MAX)))\n    )\n\n\n# Map of Content Type OIDs to Content Types added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_rpkiManifest: Manifest(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/__init__.py": "# http://www.python.org/dev/peps/pep-0396/\n__version__ = '0.4.0'\n", "pyasn1_modules/rfc4010.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SEED Encryption Algorithm in CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4010.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5751\n\n\nid_seedCBC = univ.ObjectIdentifier('1.2.410.200004.1.4')\n\n\nid_npki_app_cmsSeed_wrap = univ.ObjectIdentifier('1.2.410.200004.7.1.1.1')\n\n\nclass SeedIV(univ.OctetString):\n    subtypeSpec = constraint.ValueSizeConstraint(16, 16)\n\n\nclass SeedCBCParameter(SeedIV):\n    pass\n\n\nclass SeedSMimeCapability(univ.Null):\n    pass\n\n\n# Update the Algorithm Identifier map in rfc5280.py.\n\n_algorithmIdentifierMapUpdate = {\n    id_seedCBC: SeedCBCParameter(),\n    id_npki_app_cmsSeed_wrap: univ.Null(\"\"),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n\n\n# Update the SMIMECapabilities Attribute map in rfc5751.py\n\n_smimeCapabilityMapUpdate = {\n    id_seedCBC: SeedSMimeCapability(),\n    id_npki_app_cmsSeed_wrap: SeedSMimeCapability(),\n\n}\n\nrfc5751.smimeCapabilityMap.update(_smimeCapabilityMapUpdate)\n", "pyasn1_modules/rfc6170.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Certificate Image in the Internet X.509 Public Key Infrastructure\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6170.txt\n#\n\nfrom pyasn1.type import univ\n\nid_logo_certImage = univ.ObjectIdentifier('1.3.6.1.5.5.7.20.3')\n", "pyasn1_modules/rfc4491.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Using the GOST R 34.10-94, GOST R 34.10-2001, and GOST R 34.11-94\n#   Algorithms with Certificates and CRLs\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4491.txt\n#\n\nfrom pyasn1_modules import rfc4357\n\n\n# Signature Algorithm GOST R 34.10-94\n\nid_GostR3411_94_with_GostR3410_94 = rfc4357.id_GostR3411_94_with_GostR3410_94\n\n\n# Signature Algorithm GOST R 34.10-2001\n\nid_GostR3411_94_with_GostR3410_2001 = rfc4357.id_GostR3411_94_with_GostR3410_2001\n\n\n# GOST R 34.10-94 Keys\n\nid_GostR3410_94 = rfc4357.id_GostR3410_94\n\nGostR3410_2001_PublicKey = rfc4357.GostR3410_2001_PublicKey\n\nGostR3410_2001_PublicKeyParameters = rfc4357.GostR3410_2001_PublicKeyParameters\n\n\n# GOST R 34.10-2001 Keys\n\nid_GostR3410_2001 = rfc4357.id_GostR3410_2001\n\nGostR3410_94_PublicKey = rfc4357.GostR3410_94_PublicKey\n\nGostR3410_94_PublicKeyParameters = rfc4357.GostR3410_94_PublicKeyParameters\n", "pyasn1_modules/rfc8209.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# BGPsec Router PKI Profile\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8209.txt\n#\n\nfrom pyasn1.type import univ\n\n\nid_kp = univ.ObjectIdentifier('1.3.6.1.5.5.7.3')\n\nid_kp_bgpsec_router = id_kp + (30, )\n", "pyasn1_modules/rfc1901.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# SNMPv2c message syntax\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc1901.txt\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import univ\n\n\nclass Message(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', univ.Integer(namedValues=namedval.NamedValues(('version-2c', 1)))),\n        namedtype.NamedType('community', univ.OctetString()),\n        namedtype.NamedType('data', univ.Any())\n    )\n", "pyasn1_modules/rfc4490.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Using the GOST 28147-89, GOST R 34.11-94, GOST R 34.10-94, and\n#   GOST R 34.10-2001 Algorithms with the CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4490.txt\n#\n\n\nfrom pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful\n\nfrom pyasn1_modules import rfc4357\nfrom pyasn1_modules import rfc5280\n\n\n# Imports from RFC 4357\n\nid_CryptoPro_algorithms = rfc4357.id_CryptoPro_algorithms\n\nid_GostR3410_94 = rfc4357.id_GostR3410_94\n\nid_GostR3410_2001 = rfc4357.id_GostR3410_2001\n\nGost28147_89_ParamSet = rfc4357.Gost28147_89_ParamSet\n\nGost28147_89_EncryptedKey = rfc4357.Gost28147_89_EncryptedKey\n\nGostR3410_94_PublicKeyParameters = rfc4357.GostR3410_94_PublicKeyParameters\n\nGostR3410_2001_PublicKeyParameters = rfc4357.GostR3410_2001_PublicKeyParameters\n\n\n# Imports from RFC 5280\n\nSubjectPublicKeyInfo = rfc5280.SubjectPublicKeyInfo\n\n\n# CMS/PKCS#7 key agreement algorithms & parameters\n\nclass Gost28147_89_KeyWrapParameters(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('encryptionParamSet', Gost28147_89_ParamSet()),\n        namedtype.OptionalNamedType('ukm', univ.OctetString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(8, 8)))\n    )\n\n\nid_Gost28147_89_CryptoPro_KeyWrap = id_CryptoPro_algorithms + (13, 1, )\n\n\nid_Gost28147_89_None_KeyWrap = id_CryptoPro_algorithms + (13, 0, )\n\n\nid_GostR3410_2001_CryptoPro_ESDH = id_CryptoPro_algorithms + (96, )\n\n\nid_GostR3410_94_CryptoPro_ESDH = id_CryptoPro_algorithms + (97, )\n\n\n# CMS/PKCS#7 key transport algorithms & parameters\n\nid_GostR3410_2001_KeyTransportSMIMECapability = id_GostR3410_2001\n\n\nid_GostR3410_94_KeyTransportSMIMECapability = id_GostR3410_94\n\n\nclass GostR3410_TransportParameters(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('encryptionParamSet', Gost28147_89_ParamSet()),\n        namedtype.OptionalNamedType('ephemeralPublicKey', \n            SubjectPublicKeyInfo().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.NamedType('ukm', univ.OctetString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(8, 8)))\n    )\n\nclass GostR3410_KeyTransport(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('sessionEncryptedKey', Gost28147_89_EncryptedKey()),\n        namedtype.OptionalNamedType('transportParameters',\n            GostR3410_TransportParameters().subtype(implicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n\n\n# GOST R 34.10-94 signature algorithm & parameters\n\nclass GostR3410_94_Signature(univ.OctetString):\n    subtypeSpec = constraint.ValueSizeConstraint(64, 64)\n\n\n# GOST R 34.10-2001 signature algorithms and parameters\n\nclass GostR3410_2001_Signature(univ.OctetString):\n    subtypeSpec = constraint.ValueSizeConstraint(64, 64)\n\n\n# Update the Algorithm Identifier map in rfc5280.py\n\n_algorithmIdentifierMapUpdate = {\n    id_Gost28147_89_CryptoPro_KeyWrap: Gost28147_89_KeyWrapParameters(),\n    id_Gost28147_89_None_KeyWrap: Gost28147_89_KeyWrapParameters(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc3125.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Electronic Signature Policies\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3125.txt\n# https://www.rfc-editor.org/errata/eid5901\n# https://www.rfc-editor.org/errata/eid5902\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import useful\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nAttribute = rfc5280.Attribute\n\nAttributeType = rfc5280.AttributeType\n\nAttributeTypeAndValue = rfc5280.AttributeTypeAndValue\n\nAttributeValue = rfc5280.AttributeValue\n\nCertificate = rfc5280.Certificate\n\nCertificateList = rfc5280.CertificateList\n\nDirectoryString = rfc5280.DirectoryString\n\nGeneralName = rfc5280.GeneralName\n\nGeneralNames = rfc5280.GeneralNames\n\nName = rfc5280.Name\n\nPolicyInformation = rfc5280.PolicyInformation\n\n\n# Electronic Signature Policies\n\nclass CertPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass AcceptablePolicySet(univ.SequenceOf):\n    componentType = CertPolicyId()\n\n\nclass SignPolExtn(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('extnID', univ.ObjectIdentifier()),\n        namedtype.NamedType('extnValue', univ.OctetString())\n    )\n\n\nclass SignPolExtensions(univ.SequenceOf):\n    componentType = SignPolExtn()\n\n\nclass AlgAndLength(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('algID', univ.ObjectIdentifier()),\n        namedtype.OptionalNamedType('minKeyLength', univ.Integer()),\n        namedtype.OptionalNamedType('other', SignPolExtensions())\n    )\n\n\nclass AlgorithmConstraints(univ.SequenceOf):\n    componentType = AlgAndLength()\n\n\nclass AlgorithmConstraintSet(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('signerAlgorithmConstraints',\n            AlgorithmConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('eeCertAlgorithmConstraints',\n            AlgorithmConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('caCertAlgorithmConstraints',\n            AlgorithmConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 2))),\n        namedtype.OptionalNamedType('aaCertAlgorithmConstraints',\n            AlgorithmConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 3))),\n        namedtype.OptionalNamedType('tsaCertAlgorithmConstraints',\n            AlgorithmConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 4)))\n    )\n\n\nclass AttributeValueConstraints(univ.SequenceOf):\n    componentType = AttributeTypeAndValue()\n\n\nclass AttributeTypeConstraints(univ.SequenceOf):\n    componentType = AttributeType()\n\n\nclass AttributeConstraints(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('attributeTypeConstarints',\n            AttributeTypeConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('attributeValueConstarints',\n            AttributeValueConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass HowCertAttribute(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('claimedAttribute', 0),\n        ('certifiedAttribtes', 1),\n        ('either', 2)\n    )\n\n\nclass SkipCerts(univ.Integer):\n    subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass PolicyConstraints(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('requireExplicitPolicy',\n            SkipCerts().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('inhibitPolicyMapping',\n            SkipCerts().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass BaseDistance(univ.Integer):\n    subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass GeneralSubtree(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('base', GeneralName()),\n        namedtype.DefaultedNamedType('minimum',\n            BaseDistance().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0)).subtype(\n                    value=0)),\n        namedtype.OptionalNamedType('maximum',\n            BaseDistance().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass GeneralSubtrees(univ.SequenceOf):\n    componentType = GeneralSubtree()\n    subtypeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass NameConstraints(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('permittedSubtrees',\n            GeneralSubtrees().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('excludedSubtrees',\n            GeneralSubtrees().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass PathLenConstraint(univ.Integer):\n    subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass CertificateTrustPoint(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('trustpoint', Certificate()),\n        namedtype.OptionalNamedType('pathLenConstraint',\n            PathLenConstraint().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('acceptablePolicySet',\n            AcceptablePolicySet().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1))),\n        namedtype.OptionalNamedType('nameConstraints',\n            NameConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.OptionalNamedType('policyConstraints',\n            PolicyConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 3)))\n    )\n\n\nclass CertificateTrustTrees(univ.SequenceOf):\n    componentType = CertificateTrustPoint()\n\n\nclass EnuRevReq(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('clrCheck', 0),\n        ('ocspCheck', 1),\n        ('bothCheck', 2),\n        ('eitherCheck', 3),\n        ('noCheck', 4),\n        ('other', 5)\n    )\n\n\nclass RevReq(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('enuRevReq', EnuRevReq()),\n        namedtype.OptionalNamedType('exRevReq', SignPolExtensions())\n    )\n\n\nclass CertRevReq(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('endCertRevReq', RevReq()),\n        namedtype.NamedType('caCerts',\n            RevReq().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0)))\n    )\n\n\nclass AttributeTrustCondition(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('attributeMandated', univ.Boolean()),\n        namedtype.NamedType('howCertAttribute', HowCertAttribute()),\n        namedtype.OptionalNamedType('attrCertificateTrustTrees',\n            CertificateTrustTrees().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('attrRevReq',\n            CertRevReq().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('attributeConstraints',\n            AttributeConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2)))\n    )\n\n\nclass CMSAttrs(univ.SequenceOf):\n    componentType = univ.ObjectIdentifier()\n\n\nclass CertInfoReq(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('none', 0),\n        ('signerOnly', 1),\n        ('fullPath', 2)\n    )\n\n\nclass CertRefReq(univ.Enumerated):\n    namedValues = namedval.NamedValues(\n        ('signerOnly', 1),\n        ('fullPath', 2)\n    )\n\n\nclass DeltaTime(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('deltaSeconds', univ.Integer()),\n        namedtype.NamedType('deltaMinutes', univ.Integer()),\n        namedtype.NamedType('deltaHours', univ.Integer()),\n        namedtype.NamedType('deltaDays', univ.Integer())\n    )\n\n\nclass TimestampTrustCondition(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('ttsCertificateTrustTrees',\n            CertificateTrustTrees().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('ttsRevReq',\n            CertRevReq().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('ttsNameConstraints',\n            NameConstraints().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.OptionalNamedType('cautionPeriod',\n            DeltaTime().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.OptionalNamedType('signatureTimestampDelay',\n            DeltaTime().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 4)))\n    )\n\n\nclass SignerRules(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('externalSignedData', univ.Boolean()),\n        namedtype.NamedType('mandatedSignedAttr', CMSAttrs()),\n        namedtype.NamedType('mandatedUnsignedAttr', CMSAttrs()),\n        namedtype.DefaultedNamedType('mandatedCertificateRef',\n            CertRefReq().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0)).subtype(\n                    value='signerOnly')),\n        namedtype.DefaultedNamedType('mandatedCertificateInfo',\n            CertInfoReq().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)).subtype(\n                    value='none')),\n        namedtype.OptionalNamedType('signPolExtensions',\n            SignPolExtensions().subtype(explicitTag=tag.Tag(\n                 tag.tagClassContext, tag.tagFormatSimple, 2)))\n    )\n\n\nclass MandatedUnsignedAttr(CMSAttrs):\n    pass\n\n\nclass VerifierRules(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('mandatedUnsignedAttr', MandatedUnsignedAttr()),\n        namedtype.OptionalNamedType('signPolExtensions', SignPolExtensions())\n    )\n\n\nclass SignerAndVerifierRules(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signerRules', SignerRules()),\n        namedtype.NamedType('verifierRules', VerifierRules())\n    )\n\n\nclass SigningCertTrustCondition(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signerTrustTrees', CertificateTrustTrees()),\n        namedtype.NamedType('signerRevReq', CertRevReq())\n    )\n\n\nclass CommitmentTypeIdentifier(univ.ObjectIdentifier):\n    pass\n\n\nclass FieldOfApplication(DirectoryString):\n    pass\n\n\nclass CommitmentType(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('identifier', CommitmentTypeIdentifier()),\n        namedtype.OptionalNamedType('fieldOfApplication',\n            FieldOfApplication().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('semantics',\n            DirectoryString().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 1)))\n    )\n\n\nclass SelectedCommitmentTypes(univ.SequenceOf):\n    componentType = univ.Choice(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('empty', univ.Null()),\n        namedtype.NamedType('recognizedCommitmentType', CommitmentType())\n    ))\n\n\nclass CommitmentRule(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('selCommitmentTypes', SelectedCommitmentTypes()),\n        namedtype.OptionalNamedType('signerAndVeriferRules',\n            SignerAndVerifierRules().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('signingCertTrustCondition',\n            SigningCertTrustCondition().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('timeStampTrustCondition',\n            TimestampTrustCondition().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.OptionalNamedType('attributeTrustCondition',\n            AttributeTrustCondition().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.OptionalNamedType('algorithmConstraintSet',\n            AlgorithmConstraintSet().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 4))),\n        namedtype.OptionalNamedType('signPolExtensions',\n            SignPolExtensions().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 5)))\n    )\n\n\nclass CommitmentRules(univ.SequenceOf):\n    componentType = CommitmentRule()\n\n\nclass CommonRules(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('signerAndVeriferRules',\n            SignerAndVerifierRules().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.OptionalNamedType('signingCertTrustCondition',\n            SigningCertTrustCondition().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 1))),\n        namedtype.OptionalNamedType('timeStampTrustCondition',\n            TimestampTrustCondition().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 2))),\n        namedtype.OptionalNamedType('attributeTrustCondition',\n            AttributeTrustCondition().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 3))),\n        namedtype.OptionalNamedType('algorithmConstraintSet',\n            AlgorithmConstraintSet().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 4))),\n        namedtype.OptionalNamedType('signPolExtensions',\n            SignPolExtensions().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatSimple, 5)))\n    )\n\n\nclass PolicyIssuerName(GeneralNames):\n    pass\n\n\nclass SignPolicyHash(univ.OctetString):\n    pass\n\n\nclass SignPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass SigningPeriod(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('notBefore', useful.GeneralizedTime()),\n        namedtype.OptionalNamedType('notAfter', useful.GeneralizedTime())\n    )\n\n\nclass SignatureValidationPolicy(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signingPeriod', SigningPeriod()),\n        namedtype.NamedType('commonRules', CommonRules()),\n        namedtype.NamedType('commitmentRules', CommitmentRules()),\n        namedtype.OptionalNamedType('signPolExtensions', SignPolExtensions())\n    )\n\n\nclass SignPolicyInfo(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signPolicyIdentifier', SignPolicyId()),\n        namedtype.NamedType('dateOfIssue', useful.GeneralizedTime()),\n        namedtype.NamedType('policyIssuerName', PolicyIssuerName()),\n        namedtype.NamedType('fieldOfApplication', FieldOfApplication()),\n        namedtype.NamedType('signatureValidationPolicy', SignatureValidationPolicy()),\n        namedtype.OptionalNamedType('signPolExtensions', SignPolExtensions())\n    )\n\n\nclass SignaturePolicy(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('signPolicyHashAlg', AlgorithmIdentifier()),\n        namedtype.NamedType('signPolicyInfo', SignPolicyInfo()),\n        namedtype.OptionalNamedType('signPolicyHash', SignPolicyHash())\n    )\n\n\n", "pyasn1_modules/rfc3279.py": "#\n# This file is part of pyasn1-modules.\n#\n# Copyright (c) 2017, Danielle Madeley <danielle@madeley.id.au>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Algorithms and Identifiers for Internet X.509 Certificates and CRLs\n#\n# Derived from RFC 3279:\n# https://www.rfc-editor.org/rfc/rfc3279.txt\n#\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nmd2 = _OID(1, 2, 840, 113549, 2, 2)\nmd5 = _OID(1, 2, 840, 113549, 2, 5)\nid_sha1 = _OID(1, 3, 14, 3, 2, 26)\nid_dsa = _OID(1, 2, 840, 10040, 4, 1)\n\n\nclass DSAPublicKey(univ.Integer):\n    pass\n\n\nclass Dss_Parms(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('p', univ.Integer()),\n        namedtype.NamedType('q', univ.Integer()),\n        namedtype.NamedType('g', univ.Integer())\n    )\n\n\nid_dsa_with_sha1 = _OID(1, 2, 840, 10040, 4, 3)\n\n\nclass Dss_Sig_Value(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('r', univ.Integer()),\n        namedtype.NamedType('s', univ.Integer())\n    )\n\n\npkcs_1 = _OID(1, 2, 840, 113549, 1, 1)\nrsaEncryption = _OID(pkcs_1, 1)\nmd2WithRSAEncryption = _OID(pkcs_1, 2)\nmd5WithRSAEncryption = _OID(pkcs_1, 4)\nsha1WithRSAEncryption = _OID(pkcs_1, 5)\n\n\nclass RSAPublicKey(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('modulus', univ.Integer()),\n        namedtype.NamedType('publicExponent', univ.Integer())\n    )\n\n\ndhpublicnumber = _OID(1, 2, 840, 10046, 2, 1)\n\n\nclass DHPublicKey(univ.Integer):\n    pass\n\n\nclass ValidationParms(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('seed', univ.BitString()),\n        namedtype.NamedType('pgenCounter', univ.Integer())\n    )\n\n\nclass DomainParameters(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('p', univ.Integer()),\n        namedtype.NamedType('g', univ.Integer()),\n        namedtype.NamedType('q', univ.Integer()),\n        namedtype.OptionalNamedType('j', univ.Integer()),\n        namedtype.OptionalNamedType('validationParms', ValidationParms())\n    )\n\n\nid_keyExchangeAlgorithm = _OID(2, 16, 840, 1, 101, 2, 1, 1, 22)\n\n\nclass KEA_Parms_Id(univ.OctetString):\n    pass\n\n\nansi_X9_62 = _OID(1, 2, 840, 10045)\n\n\nclass FieldID(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('fieldType', univ.ObjectIdentifier()),\n        namedtype.NamedType('parameters', univ.Any())\n    )\n\n\nid_ecSigType = _OID(ansi_X9_62, 4)\necdsa_with_SHA1 = _OID(id_ecSigType, 1)\n\n\nclass ECDSA_Sig_Value(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('r', univ.Integer()),\n        namedtype.NamedType('s', univ.Integer())\n    )\n\n\nid_fieldType = _OID(ansi_X9_62, 1)\nprime_field = _OID(id_fieldType, 1)\n\n\nclass Prime_p(univ.Integer):\n    pass\n\n\ncharacteristic_two_field = _OID(id_fieldType, 2)\n\n\nclass Characteristic_two(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('m', univ.Integer()),\n        namedtype.NamedType('basis', univ.ObjectIdentifier()),\n        namedtype.NamedType('parameters', univ.Any())\n    )\n\n\nid_characteristic_two_basis = _OID(characteristic_two_field, 3)\ngnBasis = _OID(id_characteristic_two_basis, 1)\ntpBasis = _OID(id_characteristic_two_basis, 2)\n\n\nclass Trinomial(univ.Integer):\n    pass\n\n\nppBasis = _OID(id_characteristic_two_basis, 3)\n\n\nclass Pentanomial(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('k1', univ.Integer()),\n        namedtype.NamedType('k2', univ.Integer()),\n        namedtype.NamedType('k3', univ.Integer())\n    )\n\n\nclass FieldElement(univ.OctetString):\n    pass\n\n\nclass ECPoint(univ.OctetString):\n    pass\n\n\nclass Curve(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('a', FieldElement()),\n        namedtype.NamedType('b', FieldElement()),\n        namedtype.OptionalNamedType('seed', univ.BitString())\n    )\n\n\nclass ECPVer(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('ecpVer1', 1)\n    )\n\n\nclass ECParameters(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('version', ECPVer()),\n        namedtype.NamedType('fieldID', FieldID()),\n        namedtype.NamedType('curve', Curve()),\n        namedtype.NamedType('base', ECPoint()),\n        namedtype.NamedType('order', univ.Integer()),\n        namedtype.OptionalNamedType('cofactor', univ.Integer())\n    )\n\n\nclass EcpkParameters(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('ecParameters', ECParameters()),\n        namedtype.NamedType('namedCurve', univ.ObjectIdentifier()),\n        namedtype.NamedType('implicitlyCA', univ.Null())\n    )\n\n\nid_publicKeyType = _OID(ansi_X9_62, 2)\nid_ecPublicKey = _OID(id_publicKeyType, 1)\n\nellipticCurve = _OID(ansi_X9_62, 3)\n\nc_TwoCurve = _OID(ellipticCurve, 0)\nc2pnb163v1 = _OID(c_TwoCurve, 1)\nc2pnb163v2 = _OID(c_TwoCurve, 2)\nc2pnb163v3 = _OID(c_TwoCurve, 3)\nc2pnb176w1 = _OID(c_TwoCurve, 4)\nc2tnb191v1 = _OID(c_TwoCurve, 5)\nc2tnb191v2 = _OID(c_TwoCurve, 6)\nc2tnb191v3 = _OID(c_TwoCurve, 7)\nc2onb191v4 = _OID(c_TwoCurve, 8)\nc2onb191v5 = _OID(c_TwoCurve, 9)\nc2pnb208w1 = _OID(c_TwoCurve, 10)\nc2tnb239v1 = _OID(c_TwoCurve, 11)\nc2tnb239v2 = _OID(c_TwoCurve, 12)\nc2tnb239v3 = _OID(c_TwoCurve, 13)\nc2onb239v4 = _OID(c_TwoCurve, 14)\nc2onb239v5 = _OID(c_TwoCurve, 15)\nc2pnb272w1 = _OID(c_TwoCurve, 16)\nc2pnb304w1 = _OID(c_TwoCurve, 17)\nc2tnb359v1 = _OID(c_TwoCurve, 18)\nc2pnb368w1 = _OID(c_TwoCurve, 19)\nc2tnb431r1 = _OID(c_TwoCurve, 20)\n\nprimeCurve = _OID(ellipticCurve, 1)\nprime192v1 = _OID(primeCurve, 1)\nprime192v2 = _OID(primeCurve, 2)\nprime192v3 = _OID(primeCurve, 3)\nprime239v1 = _OID(primeCurve, 4)\nprime239v2 = _OID(primeCurve, 5)\nprime239v3 = _OID(primeCurve, 6)\nprime256v1 = _OID(primeCurve, 7)\n\n\n# Map of Algorithm Identifier OIDs to Parameters added to the\n# ones in rfc5280.py.  Do not add OIDs with absent paramaters.\n\n_algorithmIdentifierMapUpdate = {\n    md2: univ.Null(\"\"),\n    md5: univ.Null(\"\"),\n    id_sha1: univ.Null(\"\"),\n    id_dsa: Dss_Parms(),\n    rsaEncryption: univ.Null(\"\"),\n    md2WithRSAEncryption: univ.Null(\"\"),\n    md5WithRSAEncryption: univ.Null(\"\"),\n    sha1WithRSAEncryption: univ.Null(\"\"),\n    dhpublicnumber: DomainParameters(),\n    id_keyExchangeAlgorithm: KEA_Parms_Id(),\n    id_ecPublicKey: EcpkParameters(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc4683.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Subject Identification Method (SIM)\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc4683.txt\n# https://www.rfc-editor.org/errata/eid1047\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# Used to compute the PEPSI value\n\nclass HashContent(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('userPassword', char.UTF8String()),\n        namedtype.NamedType('authorityRandom', univ.OctetString()),\n        namedtype.NamedType('identifierType', univ.ObjectIdentifier()),\n        namedtype.NamedType('identifier', char.UTF8String())\n    )\n\n\n# Used to encode the PEPSI value as the SIM Other Name\n\nid_pkix = rfc5280.id_pkix\n\nid_on = id_pkix + (8,)\n\nid_on_SIM = id_on + (6,)\n\n\nclass SIM(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('hashAlg', rfc5280.AlgorithmIdentifier()),\n        namedtype.NamedType('authorityRandom', univ.OctetString()),\n        namedtype.NamedType('pEPSI', univ.OctetString())\n    )\n\n\n# Used to encrypt the PEPSI value during certificate request\n\nid_pkip = id_pkix + (5,)\n\nid_regEPEPSI = id_pkip + (3,)\n\n\nclass EncryptedPEPSI(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('identifierType', univ.ObjectIdentifier()),\n        namedtype.NamedType('identifier', char.UTF8String()),\n        namedtype.NamedType('sIM', SIM())\n    )\n\n\n# Update the map of Other Name OIDs to Other Names in rfc5280.py\n\n_anotherNameMapUpdate = {\n    id_on_SIM: SIM(),\n}\n\nrfc5280.anotherNameMap.update(_anotherNameMapUpdate)\n", "pyasn1_modules/rfc5649.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# AES Key Wrap with Padding\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc5649.txt\n\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nclass AlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nid_aes128_wrap = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.5')\n\nid_aes192_wrap = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.25')\n\nid_aes256_wrap = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.45')\n\n\nid_aes128_wrap_pad = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.8')\n\nid_aes192_wrap_pad = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.28')\n\nid_aes256_wrap_pad = univ.ObjectIdentifier('2.16.840.1.101.3.4.1.48')\n", "pyasn1_modules/rfc8520.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add maps for use with opentypes.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# X.509 Extensions for MUD URL and MUD Signer;\n# Object Identifier for CMS Content Type for a MUD file\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8520.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5652\n\n\n# X.509 Extension for MUD URL\n\nid_pe_mud_url = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.25')\n\nclass MUDURLSyntax(char.IA5String):\n    pass\n\n\n# X.509 Extension for MUD Signer\n\nid_pe_mudsigner = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.30')\n\nclass MUDsignerSyntax(rfc5280.Name):\n    pass\n\n\n# Object Identifier for CMS Content Type for a MUD file\n\nid_ct_mudtype = univ.ObjectIdentifier('1.2.840.113549.1.9.16.1.41')\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_pe_mud_url: MUDURLSyntax(),\n    id_pe_mudsigner: MUDsignerSyntax(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n\n\n# Map of Content Type OIDs to Content Types added to the\n# ones that are in rfc5652.py\n\n_cmsContentTypesMapUpdate = {\n    id_ct_mudtype: univ.OctetString(),\n}\n\nrfc5652.cmsContentTypesMap.update(_cmsContentTypesMapUpdate)\n", "pyasn1_modules/rfc8649.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# X.509 Certificate Extension for Hash Of Root Key\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8649.txt\n#\n\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\nid_ce_hashOfRootKey = univ.ObjectIdentifier('1.3.6.1.4.1.51483.2.1')\n\n\nclass HashedRootKey(univ.Sequence):\n    pass\n\nHashedRootKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('hashAlg', rfc5280.AlgorithmIdentifier()),\n    namedtype.NamedType('hashValue', univ.OctetString())\n)\n\n\n# Map of Certificate Extension OIDs to Extensions added to the\n# ones that are in rfc5280.py\n\n_certificateExtensionsMapUpdate = {\n    id_ce_hashOfRootKey: HashedRootKey(),\t\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMapUpdate)\n", "pyasn1_modules/rfc6664.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with some assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# S/MIME Capabilities for Public Key Definitions\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc6664.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5751\nfrom pyasn1_modules import rfc5480\nfrom pyasn1_modules import rfc4055\nfrom pyasn1_modules import rfc3279\n\nMAX = float('inf')\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\n\n# Imports from RFC 3279\n\ndhpublicnumber = rfc3279.dhpublicnumber\n\nDss_Parms = rfc3279.Dss_Parms\n\nid_dsa = rfc3279.id_dsa\n\nid_ecPublicKey = rfc3279.id_ecPublicKey\n\nrsaEncryption = rfc3279.rsaEncryption\n\n\n# Imports from RFC 4055\n\nid_mgf1 = rfc4055.id_mgf1\n\nid_RSAES_OAEP = rfc4055.id_RSAES_OAEP\n\nid_RSASSA_PSS = rfc4055.id_RSASSA_PSS\n\n\n# Imports from RFC 5480\n\nECParameters = rfc5480.ECParameters\n\nid_ecDH = rfc5480.id_ecDH\n\nid_ecMQV = rfc5480.id_ecMQV\n\n\n# RSA\n\nclass RSAKeySize(univ.Integer):\n    # suggested values are 1024, 2048, 3072, 4096, 7680, 8192, and 15360;\n    # however, the integer value is not limited to these suggestions\n    pass\n\n\nclass RSAKeyCapabilities(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('minKeySize', RSAKeySize()),\n        namedtype.OptionalNamedType('maxKeySize', RSAKeySize())\n    )\n\n\nclass RsaSsa_Pss_sig_caps(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('hashAlg', AlgorithmIdentifier()),\n        namedtype.OptionalNamedType('maskAlg', AlgorithmIdentifier()),\n        namedtype.DefaultedNamedType('trailerField', univ.Integer().subtype(value=1))\n    )\n\n\n# Diffie-Hellman and DSA\n\nclass DSAKeySize(univ.Integer):\n    subtypeSpec = constraint.SingleValueConstraint(1024, 2048, 3072, 7680, 15360)\n\n\nclass DSAKeyCapabilities(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('keySizes', univ.Sequence(componentType=namedtype.NamedTypes(\n            namedtype.NamedType('minKeySize',\n                DSAKeySize()),\n            namedtype.OptionalNamedType('maxKeySize',\n                DSAKeySize()),\n            namedtype.OptionalNamedType('maxSizeP',\n                univ.Integer().subtype(explicitTag=tag.Tag(\n                    tag.tagClassContext, tag.tagFormatSimple, 1))),\n            namedtype.OptionalNamedType('maxSizeQ',\n                univ.Integer().subtype(explicitTag=tag.Tag(\n                    tag.tagClassContext, tag.tagFormatSimple, 2))),\n            namedtype.OptionalNamedType('maxSizeG',\n                univ.Integer().subtype(explicitTag=tag.Tag(\n                    tag.tagClassContext, tag.tagFormatSimple, 3)))\n        )).subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n        namedtype.NamedType('keyParams',\n            Dss_Parms().subtype(explicitTag=tag.Tag(\n                tag.tagClassContext, tag.tagFormatConstructed, 1)))\n    )\n\n\n# Elliptic Curve\n\nclass EC_SMimeCaps(univ.SequenceOf):\n    componentType = ECParameters()\n    subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\n# Update the SMIMECapabilities Attribute Map in rfc5751.py\n#\n# The map can either include an entry for scap-sa-rsaSSA-PSS or \n# scap-pk-rsaSSA-PSS, but not both.  One is associated with the\n# public key and the other is associated with the signature\n# algorithm; however, they use the same OID.  If you need the\n# other one in your application, copy the map into a local dict,\n# adjust as needed, and pass the local dict to the decoder with\n# openTypes=your_local_map.\n\n_smimeCapabilityMapUpdate = {\n    rsaEncryption: RSAKeyCapabilities(),\n    id_RSASSA_PSS: RSAKeyCapabilities(),\n    # id_RSASSA_PSS: RsaSsa_Pss_sig_caps(),\n    id_RSAES_OAEP: RSAKeyCapabilities(),\n    id_dsa: DSAKeyCapabilities(),\n    dhpublicnumber: DSAKeyCapabilities(),\n    id_ecPublicKey: EC_SMimeCaps(),\n    id_ecDH: EC_SMimeCaps(),\n    id_ecMQV: EC_SMimeCaps(),\n    id_mgf1: AlgorithmIdentifier(),\n}\n\nrfc5751.smimeCapabilityMap.update(_smimeCapabilityMapUpdate)\n", "pyasn1_modules/rfc8410.py": "# This file is being contributed to pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Algorithm Identifiers for Ed25519, Ed448, X25519, and X448\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8410.txt\n\nfrom pyasn1.type import univ\nfrom pyasn1_modules import rfc3565\nfrom pyasn1_modules import rfc4055\nfrom pyasn1_modules import rfc5280\n\n\nclass SignatureAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass KeyEncryptionAlgorithmIdentifier(rfc5280.AlgorithmIdentifier):\n    pass\n\n\nclass CurvePrivateKey(univ.OctetString):\n    pass\n\n\nid_X25519 = univ.ObjectIdentifier('1.3.101.110')\n\nid_X448 = univ.ObjectIdentifier('1.3.101.111')\n\nid_Ed25519 = univ.ObjectIdentifier('1.3.101.112')\n\nid_Ed448 = univ.ObjectIdentifier('1.3.101.113')\n\nid_sha512 = rfc4055.id_sha512\n\nid_aes128_wrap = rfc3565.id_aes128_wrap\n\nid_aes256_wrap = rfc3565.id_aes256_wrap\n", "pyasn1_modules/rfc3739.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with assistance from asn1ate v.0.6.0.\n# Modified by Russ Housley to add WithComponentsConstraints to\n#   enforce the requirements that are indicated in comments.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Qualified Certificates\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3739.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import opentype\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\n\n# Initialize the qcStatement map\n\nqcStatementMap = { }\n\n\n# Imports from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\nAttributeType = rfc5280.AttributeType\n\nDirectoryString = rfc5280.DirectoryString\n\nGeneralName = rfc5280.GeneralName\n\nid_pkix = rfc5280.id_pkix\n\nid_pe = rfc5280.id_pe\n\n\n# Arc for QC personal data attributes\n\nid_pda = id_pkix + (9, )\n\n\n# Arc for QC statements\n\nid_qcs = id_pkix + (11, )\n\n\n# Personal data attributes\n\nid_pda_dateOfBirth = id_pda + (1, )\n\nclass DateOfBirth(useful.GeneralizedTime):\n    pass\n\n\nid_pda_placeOfBirth = id_pda + (2, )\n\nclass PlaceOfBirth(DirectoryString):\n    pass\n\n\nid_pda_gender = id_pda + (3, )\n\nclass Gender(char.PrintableString):\n    subtypeSpec = constraint.ConstraintsIntersection(\n        constraint.ValueSizeConstraint(1, 1),\n        constraint.SingleValueConstraint('M', 'F', 'm', 'f')\n    )\n\n\nid_pda_countryOfCitizenship = id_pda + (4, )\n\nclass CountryOfCitizenship(char.PrintableString):\n    subtypeSpec = constraint.ValueSizeConstraint(2, 2)\n    # ISO 3166 Country Code\n\n\nid_pda_countryOfResidence = id_pda + (5, )\n\nclass CountryOfResidence(char.PrintableString):\n    subtypeSpec = constraint.ValueSizeConstraint(2, 2)\n    # ISO 3166 Country Code\n\n\n# Biometric info certificate extension\n\nid_pe_biometricInfo = id_pe + (2, )\n\n\nclass PredefinedBiometricType(univ.Integer):\n    namedValues = namedval.NamedValues(\n        ('picture', 0),\n        ('handwritten-signature', 1)\n    )\n    subtypeSpec = constraint.SingleValueConstraint(0, 1)\n\n\nclass TypeOfBiometricData(univ.Choice):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('predefinedBiometricType', PredefinedBiometricType()),\n        namedtype.NamedType('biometricDataOid', univ.ObjectIdentifier())\n    )\n\n\nclass BiometricData(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('typeOfBiometricData', TypeOfBiometricData()),\n        namedtype.NamedType('hashAlgorithm', AlgorithmIdentifier()),\n        namedtype.NamedType('biometricDataHash', univ.OctetString()),\n        namedtype.OptionalNamedType('sourceDataUri', char.IA5String())\n    )\n\n\nclass BiometricSyntax(univ.SequenceOf):\n    componentType = BiometricData()\n\n\n# QC Statements certificate extension\n# NOTE: This extension does not allow to mix critical and\n# non-critical Qualified Certificate Statements. Either all\n# statements must be critical or all statements must be\n# non-critical.\n\nid_pe_qcStatements = id_pe + (3, )\n\n\nclass NameRegistrationAuthorities(univ.SequenceOf):\n    componentType = GeneralName()\n    subtypeSpec=constraint.ValueSizeConstraint(1, MAX)\n\n\nclass QCStatement(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('statementId', univ.ObjectIdentifier()),\n        namedtype.OptionalNamedType('statementInfo', univ.Any(),\n            openType=opentype.OpenType('statementId', qcStatementMap))\n    )\n\n\nclass QCStatements(univ.SequenceOf):\n    componentType = QCStatement()\n\n\nclass SemanticsInformation(univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.OptionalNamedType('semanticsIndentifier',\n            univ.ObjectIdentifier()),\n        namedtype.OptionalNamedType('nameRegistrationAuthorities',\n            NameRegistrationAuthorities())\n    )\n    subtypeSpec = constraint.ConstraintsUnion(\n        constraint.WithComponentsConstraint(\n            ('semanticsIndentifier', constraint.ComponentPresentConstraint())),\n        constraint.WithComponentsConstraint(\n            ('nameRegistrationAuthorities', constraint.ComponentPresentConstraint()))\n    )\n\n\nid_qcs = id_pkix + (11, )\n\n\nid_qcs_pkixQCSyntax_v1 = id_qcs + (1, )\n\n\nid_qcs_pkixQCSyntax_v2 = id_qcs + (2, )\n\n\n# Map of Certificate Extension OIDs to Extensions\n# To be added to the ones that are in rfc5280.py\n\n_certificateExtensionsMap = {\n     id_pe_biometricInfo: BiometricSyntax(),\n     id_pe_qcStatements: QCStatements(),\n}\n\nrfc5280.certificateExtensionsMap.update(_certificateExtensionsMap)\n\n\n# Map of AttributeType OIDs to AttributeValue added to the\n# ones that are in rfc5280.py\n\n_certificateAttributesMapUpdate = {\n    id_pda_dateOfBirth: DateOfBirth(),\n    id_pda_placeOfBirth: PlaceOfBirth(),\n    id_pda_gender: Gender(),\n    id_pda_countryOfCitizenship: CountryOfCitizenship(),\n    id_pda_countryOfResidence: CountryOfResidence(),\n}\n\nrfc5280.certificateAttributesMap.update(_certificateAttributesMapUpdate)\n\n", "pyasn1_modules/rfc7585.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley with some assistance from asn1ate v.0.6.0.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Network Access Identifier (NAI) Realm Name for Certificates\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc7585.txt\n#\n\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\n\n\n# NAI Realm Name for Certificates\n\nid_pkix = univ.ObjectIdentifier('1.3.6.1.5.5.7')\n\nid_on = id_pkix + (8, )\n\nid_on_naiRealm = id_on + (8, )\n\n\nub_naiRealm_length = univ.Integer(255)\n\n\nclass NAIRealm(char.UTF8String):\n    subtypeSpec = constraint.ValueSizeConstraint(1, ub_naiRealm_length)\n\n\nnaiRealm = rfc5280.AnotherName()\nnaiRealm['type-id'] = id_on_naiRealm\nnaiRealm['value'] = NAIRealm()\n\n\n# Map of Other Name OIDs to Other Name is added to the\n# ones that are in rfc5280.py\n\n_anotherNameMapUpdate = {\n    id_on_naiRealm: NAIRealm(),\n}\n\nrfc5280.anotherNameMap.update(_anotherNameMapUpdate)\n", "pyasn1_modules/rfc8018.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# PKCS #5: Password-Based Cryptography Specification, Version 2.1\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc8018.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc3565\nfrom pyasn1_modules import rfc5280\n\nMAX = float('inf')\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\n# Import from RFC 3565\n\nAES_IV = rfc3565.AES_IV\n\n\n# Import from RFC 5280\n\nAlgorithmIdentifier = rfc5280.AlgorithmIdentifier\n\n\n# Basic object identifiers\n\nnistAlgorithms = _OID(2, 16, 840, 1, 101, 3, 4)\n\naes = _OID(nistAlgorithms, 1)\n\noiw = _OID(1, 3, 14)\n\nrsadsi = _OID(1, 2, 840, 113549)\n\npkcs = _OID(rsadsi, 1)\n\ndigestAlgorithm = _OID(rsadsi, 2)\n\nencryptionAlgorithm = _OID(rsadsi, 3)\n\npkcs_5 = _OID(pkcs, 5)\n\n\n\n# HMAC object identifiers\n\nid_hmacWithSHA1 = _OID(digestAlgorithm, 7)\n\nid_hmacWithSHA224 = _OID(digestAlgorithm, 8)\n\nid_hmacWithSHA256 = _OID(digestAlgorithm, 9)\n\nid_hmacWithSHA384 = _OID(digestAlgorithm, 10)\n\nid_hmacWithSHA512 = _OID(digestAlgorithm, 11)\n\nid_hmacWithSHA512_224 = _OID(digestAlgorithm, 12)\n\nid_hmacWithSHA512_256 = _OID(digestAlgorithm, 13)\n\n\n# PBES1 object identifiers\n\npbeWithMD2AndDES_CBC = _OID(pkcs_5, 1)\n\npbeWithMD2AndRC2_CBC = _OID(pkcs_5, 4)\n\npbeWithMD5AndDES_CBC = _OID(pkcs_5, 3)\n\npbeWithMD5AndRC2_CBC = _OID(pkcs_5, 6)\n\npbeWithSHA1AndDES_CBC = _OID(pkcs_5, 10)\n\npbeWithSHA1AndRC2_CBC = _OID(pkcs_5, 11)\n\n\n# Supporting techniques object identifiers\n\ndesCBC = _OID(oiw, 3, 2, 7)\n\ndes_EDE3_CBC = _OID(encryptionAlgorithm, 7)\n\nrc2CBC = _OID(encryptionAlgorithm, 2)\n\nrc5_CBC_PAD = _OID(encryptionAlgorithm, 9)\n\naes128_CBC_PAD = _OID(aes, 2)\n\naes192_CBC_PAD = _OID(aes, 22)\n\naes256_CBC_PAD = _OID(aes, 42)\n\n\n# PBES1\n\nclass PBEParameter(univ.Sequence):\n    pass\n\nPBEParameter.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('salt', univ.OctetString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(8, 8))),\n    namedtype.NamedType('iterationCount', univ.Integer())\n)\n\n\n# PBES2\n\nid_PBES2 = _OID(pkcs_5, 13)\n\n\nclass PBES2_params(univ.Sequence):\n    pass\n\nPBES2_params.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyDerivationFunc', AlgorithmIdentifier()),\n    namedtype.NamedType('encryptionScheme', AlgorithmIdentifier())\n)\n\n\n# PBMAC1\n\nid_PBMAC1 = _OID(pkcs_5, 14)\n\n\nclass PBMAC1_params(univ.Sequence):\n    pass\n\nPBMAC1_params.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyDerivationFunc', AlgorithmIdentifier()),\n    namedtype.NamedType('messageAuthScheme', AlgorithmIdentifier())\n)\n\n\n# PBKDF2\n\nid_PBKDF2 = _OID(pkcs_5, 12)\n\n\nalgid_hmacWithSHA1 = AlgorithmIdentifier()\nalgid_hmacWithSHA1['algorithm'] = id_hmacWithSHA1\nalgid_hmacWithSHA1['parameters'] = univ.Null(\"\")\n\n\nclass PBKDF2_params(univ.Sequence):\n    pass\n\nPBKDF2_params.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('salt', univ.Choice(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('specified', univ.OctetString()),\n        namedtype.NamedType('otherSource', AlgorithmIdentifier())\n    ))),\n    namedtype.NamedType('iterationCount', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(1, MAX))),\n    namedtype.OptionalNamedType('keyLength', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(1, MAX))),\n    namedtype.DefaultedNamedType('prf', algid_hmacWithSHA1)\n)\n\n\n# RC2 CBC algorithm parameter\n\nclass RC2_CBC_Parameter(univ.Sequence):\n    pass\n\nRC2_CBC_Parameter.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('rc2ParameterVersion', univ.Integer()),\n    namedtype.NamedType('iv', univ.OctetString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(8, 8)))\n)\n\n\n# RC5 CBC algorithm parameter\n\nclass RC5_CBC_Parameters(univ.Sequence):\n    pass\n\nRC5_CBC_Parameters.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version',\n        univ.Integer(namedValues=namedval.NamedValues(('v1_0', 16))).subtype(\n            subtypeSpec=constraint.SingleValueConstraint(16))),\n    namedtype.NamedType('rounds',\n        univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(8, 127))),\n    namedtype.NamedType('blockSizeInBits',\n        univ.Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(64, 128))),\n    namedtype.OptionalNamedType('iv', univ.OctetString())\n)\n\n\n# Initialization Vector for AES: OCTET STRING (SIZE(16))\n\nclass AES_IV(univ.OctetString):\n    pass\n\nAES_IV.subtypeSpec = constraint.ValueSizeConstraint(16, 16)\n\n\n# Initialization Vector for DES: OCTET STRING (SIZE(8))\n\nclass DES_IV(univ.OctetString):\n    pass\n\nDES_IV.subtypeSpec = constraint.ValueSizeConstraint(8, 8)\n\n\n# Update the Algorithm Identifier map\n\n_algorithmIdentifierMapUpdate = {\n    # PBKDF2-PRFs\n    id_hmacWithSHA1: univ.Null(),\n    id_hmacWithSHA224: univ.Null(),\n    id_hmacWithSHA256: univ.Null(),\n    id_hmacWithSHA384: univ.Null(),\n    id_hmacWithSHA512: univ.Null(),\n    id_hmacWithSHA512_224: univ.Null(),\n    id_hmacWithSHA512_256: univ.Null(),\n    # PBES1Algorithms\n    pbeWithMD2AndDES_CBC: PBEParameter(),\n    pbeWithMD2AndRC2_CBC: PBEParameter(),\n    pbeWithMD5AndDES_CBC: PBEParameter(),\n    pbeWithMD5AndRC2_CBC: PBEParameter(),\n    pbeWithSHA1AndDES_CBC: PBEParameter(),\n    pbeWithSHA1AndRC2_CBC: PBEParameter(),\n    # PBES2Algorithms\n    id_PBES2: PBES2_params(),\n    # PBES2-KDFs\n    id_PBKDF2: PBKDF2_params(),\n    # PBMAC1Algorithms\n    id_PBMAC1: PBMAC1_params(),\n    # SupportingAlgorithms\n    desCBC: DES_IV(),\n    des_EDE3_CBC: DES_IV(),\n    rc2CBC: RC2_CBC_Parameter(),\n    rc5_CBC_PAD: RC5_CBC_Parameters(),\n    aes128_CBC_PAD: AES_IV(),\n    aes192_CBC_PAD: AES_IV(),\n    aes256_CBC_PAD: AES_IV(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n", "pyasn1_modules/rfc3852.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Cryptographic Message Syntax (CMS)\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc3852.txt\n#\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nfrom pyasn1_modules import rfc3280\nfrom pyasn1_modules import rfc3281\n\nMAX = float('inf')\n\n\ndef _buildOid(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass Attribute(univ.Sequence):\n    pass\n\n\nAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('attrType', univ.ObjectIdentifier()),\n    namedtype.NamedType('attrValues', univ.SetOf(componentType=AttributeValue()))\n)\n\n\nclass SignedAttributes(univ.SetOf):\n    pass\n\n\nSignedAttributes.componentType = Attribute()\nSignedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass OtherRevocationInfoFormat(univ.Sequence):\n    pass\n\n\nOtherRevocationInfoFormat.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('otherRevInfoFormat', univ.ObjectIdentifier()),\n    namedtype.NamedType('otherRevInfo', univ.Any())\n)\n\n\nclass RevocationInfoChoice(univ.Choice):\n    pass\n\n\nRevocationInfoChoice.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('crl', rfc3280.CertificateList()),\n    namedtype.NamedType('other', OtherRevocationInfoFormat().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass RevocationInfoChoices(univ.SetOf):\n    pass\n\n\nRevocationInfoChoices.componentType = RevocationInfoChoice()\n\n\nclass OtherKeyAttribute(univ.Sequence):\n    pass\n\n\nOtherKeyAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyAttrId', univ.ObjectIdentifier()),\n    namedtype.OptionalNamedType('keyAttr', univ.Any())\n)\n\nid_signedData = _buildOid(1, 2, 840, 113549, 1, 7, 2)\n\n\nclass KeyEncryptionAlgorithmIdentifier(rfc3280.AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedKey(univ.OctetString):\n    pass\n\n\nclass CMSVersion(univ.Integer):\n    pass\n\n\nCMSVersion.namedValues = namedval.NamedValues(\n    ('v0', 0),\n    ('v1', 1),\n    ('v2', 2),\n    ('v3', 3),\n    ('v4', 4),\n    ('v5', 5)\n)\n\n\nclass KEKIdentifier(univ.Sequence):\n    pass\n\n\nKEKIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('keyIdentifier', univ.OctetString()),\n    namedtype.OptionalNamedType('date', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('other', OtherKeyAttribute())\n)\n\n\nclass KEKRecipientInfo(univ.Sequence):\n    pass\n\n\nKEKRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('kekid', KEKIdentifier()),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass KeyDerivationAlgorithmIdentifier(rfc3280.AlgorithmIdentifier):\n    pass\n\n\nclass PasswordRecipientInfo(univ.Sequence):\n    pass\n\n\nPasswordRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.OptionalNamedType('keyDerivationAlgorithm', KeyDerivationAlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass OtherRecipientInfo(univ.Sequence):\n    pass\n\n\nOtherRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('oriType', univ.ObjectIdentifier()),\n    namedtype.NamedType('oriValue', univ.Any())\n)\n\n\nclass IssuerAndSerialNumber(univ.Sequence):\n    pass\n\n\nIssuerAndSerialNumber.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuer', rfc3280.Name()),\n    namedtype.NamedType('serialNumber', rfc3280.CertificateSerialNumber())\n)\n\n\nclass SubjectKeyIdentifier(univ.OctetString):\n    pass\n\n\nclass RecipientKeyIdentifier(univ.Sequence):\n    pass\n\n\nRecipientKeyIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier()),\n    namedtype.OptionalNamedType('date', useful.GeneralizedTime()),\n    namedtype.OptionalNamedType('other', OtherKeyAttribute())\n)\n\n\nclass KeyAgreeRecipientIdentifier(univ.Choice):\n    pass\n\n\nKeyAgreeRecipientIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('rKeyId', RecipientKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n)\n\n\nclass RecipientEncryptedKey(univ.Sequence):\n    pass\n\n\nRecipientEncryptedKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('rid', KeyAgreeRecipientIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass RecipientEncryptedKeys(univ.SequenceOf):\n    pass\n\n\nRecipientEncryptedKeys.componentType = RecipientEncryptedKey()\n\n\nclass UserKeyingMaterial(univ.OctetString):\n    pass\n\n\nclass OriginatorPublicKey(univ.Sequence):\n    pass\n\n\nOriginatorPublicKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algorithm', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('publicKey', univ.BitString())\n)\n\n\nclass OriginatorIdentifierOrKey(univ.Choice):\n    pass\n\n\nOriginatorIdentifierOrKey.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('originatorKey', OriginatorPublicKey().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))\n)\n\n\nclass KeyAgreeRecipientInfo(univ.Sequence):\n    pass\n\n\nKeyAgreeRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('originator', OriginatorIdentifierOrKey().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('ukm', UserKeyingMaterial().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('recipientEncryptedKeys', RecipientEncryptedKeys())\n)\n\n\nclass RecipientIdentifier(univ.Choice):\n    pass\n\n\nRecipientIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass KeyTransRecipientInfo(univ.Sequence):\n    pass\n\n\nKeyTransRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('rid', RecipientIdentifier()),\n    namedtype.NamedType('keyEncryptionAlgorithm', KeyEncryptionAlgorithmIdentifier()),\n    namedtype.NamedType('encryptedKey', EncryptedKey())\n)\n\n\nclass RecipientInfo(univ.Choice):\n    pass\n\n\nRecipientInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('ktri', KeyTransRecipientInfo()),\n    namedtype.NamedType('kari', KeyAgreeRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),\n    namedtype.NamedType('kekri', KEKRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n    namedtype.NamedType('pwri', PasswordRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),\n    namedtype.NamedType('ori', OtherRecipientInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4)))\n)\n\n\nclass RecipientInfos(univ.SetOf):\n    pass\n\n\nRecipientInfos.componentType = RecipientInfo()\nRecipientInfos.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass DigestAlgorithmIdentifier(rfc3280.AlgorithmIdentifier):\n    pass\n\n\nclass Signature(univ.BitString):\n    pass\n\n\nclass SignerIdentifier(univ.Choice):\n    pass\n\n\nSignerIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('issuerAndSerialNumber', IssuerAndSerialNumber()),\n    namedtype.NamedType('subjectKeyIdentifier', SubjectKeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass UnprotectedAttributes(univ.SetOf):\n    pass\n\n\nUnprotectedAttributes.componentType = Attribute()\nUnprotectedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass ContentType(univ.ObjectIdentifier):\n    pass\n\n\nclass EncryptedContent(univ.OctetString):\n    pass\n\n\nclass ContentEncryptionAlgorithmIdentifier(rfc3280.AlgorithmIdentifier):\n    pass\n\n\nclass EncryptedContentInfo(univ.Sequence):\n    pass\n\n\nEncryptedContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('contentType', ContentType()),\n    namedtype.NamedType('contentEncryptionAlgorithm', ContentEncryptionAlgorithmIdentifier()),\n    namedtype.OptionalNamedType('encryptedContent', EncryptedContent().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass EncryptedData(univ.Sequence):\n    pass\n\n\nEncryptedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('encryptedContentInfo', EncryptedContentInfo()),\n    namedtype.OptionalNamedType('unprotectedAttrs', UnprotectedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\nid_contentType = _buildOid(1, 2, 840, 113549, 1, 9, 3)\n\nid_data = _buildOid(1, 2, 840, 113549, 1, 7, 1)\n\nid_messageDigest = _buildOid(1, 2, 840, 113549, 1, 9, 4)\n\n\nclass DigestAlgorithmIdentifiers(univ.SetOf):\n    pass\n\n\nDigestAlgorithmIdentifiers.componentType = DigestAlgorithmIdentifier()\n\n\nclass EncapsulatedContentInfo(univ.Sequence):\n    pass\n\n\nEncapsulatedContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('eContentType', ContentType()),\n    namedtype.OptionalNamedType('eContent', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass Digest(univ.OctetString):\n    pass\n\n\nclass DigestedData(univ.Sequence):\n    pass\n\n\nDigestedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n    namedtype.NamedType('encapContentInfo', EncapsulatedContentInfo()),\n    namedtype.NamedType('digest', Digest())\n)\n\n\nclass ContentInfo(univ.Sequence):\n    pass\n\n\nContentInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('contentType', ContentType()),\n    namedtype.NamedType('content', univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass UnauthAttributes(univ.SetOf):\n    pass\n\n\nUnauthAttributes.componentType = Attribute()\nUnauthAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass ExtendedCertificateInfo(univ.Sequence):\n    pass\n\n\nExtendedCertificateInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('certificate', rfc3280.Certificate()),\n    namedtype.NamedType('attributes', UnauthAttributes())\n)\n\n\nclass SignatureAlgorithmIdentifier(rfc3280.AlgorithmIdentifier):\n    pass\n\n\nclass ExtendedCertificate(univ.Sequence):\n    pass\n\n\nExtendedCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('extendedCertificateInfo', ExtendedCertificateInfo()),\n    namedtype.NamedType('signatureAlgorithm', SignatureAlgorithmIdentifier()),\n    namedtype.NamedType('signature', Signature())\n)\n\n\nclass OtherCertificateFormat(univ.Sequence):\n    pass\n\n\nOtherCertificateFormat.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('otherCertFormat', univ.ObjectIdentifier()),\n    namedtype.NamedType('otherCert', univ.Any())\n)\n\n\nclass AttributeCertificateV2(rfc3281.AttributeCertificate):\n    pass\n\n\nclass AttCertVersionV1(univ.Integer):\n    pass\n\n\nAttCertVersionV1.namedValues = namedval.NamedValues(\n    ('v1', 0)\n)\n\n\nclass AttributeCertificateInfoV1(univ.Sequence):\n    pass\n\n\nAttributeCertificateInfoV1.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version', AttCertVersionV1().subtype(value=\"v1\")),\n    namedtype.NamedType(\n        'subject', univ.Choice(\n            componentType=namedtype.NamedTypes(\n                namedtype.NamedType('baseCertificateID', rfc3281.IssuerSerial().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n                namedtype.NamedType('subjectName', rfc3280.GeneralNames().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n            )\n        )\n    ),\n    namedtype.NamedType('issuer', rfc3280.GeneralNames()),\n    namedtype.NamedType('signature', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('serialNumber', rfc3280.CertificateSerialNumber()),\n    namedtype.NamedType('attCertValidityPeriod', rfc3281.AttCertValidityPeriod()),\n    namedtype.NamedType('attributes', univ.SequenceOf(componentType=rfc3280.Attribute())),\n    namedtype.OptionalNamedType('issuerUniqueID', rfc3280.UniqueIdentifier()),\n    namedtype.OptionalNamedType('extensions', rfc3280.Extensions())\n)\n\n\nclass AttributeCertificateV1(univ.Sequence):\n    pass\n\n\nAttributeCertificateV1.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('acInfo', AttributeCertificateInfoV1()),\n    namedtype.NamedType('signatureAlgorithm', rfc3280.AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\n\nclass CertificateChoices(univ.Choice):\n    pass\n\n\nCertificateChoices.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certificate', rfc3280.Certificate()),\n    namedtype.NamedType('extendedCertificate', ExtendedCertificate().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('v1AttrCert', AttributeCertificateV1().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('v2AttrCert', AttributeCertificateV2().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('other', OtherCertificateFormat().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3)))\n)\n\n\nclass CertificateSet(univ.SetOf):\n    pass\n\n\nCertificateSet.componentType = CertificateChoices()\n\n\nclass MessageAuthenticationCode(univ.OctetString):\n    pass\n\n\nclass UnsignedAttributes(univ.SetOf):\n    pass\n\n\nUnsignedAttributes.componentType = Attribute()\nUnsignedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass SignatureValue(univ.OctetString):\n    pass\n\n\nclass SignerInfo(univ.Sequence):\n    pass\n\n\nSignerInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('sid', SignerIdentifier()),\n    namedtype.NamedType('digestAlgorithm', DigestAlgorithmIdentifier()),\n    namedtype.OptionalNamedType('signedAttrs', SignedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('signatureAlgorithm', SignatureAlgorithmIdentifier()),\n    namedtype.NamedType('signature', SignatureValue()),\n    namedtype.OptionalNamedType('unsignedAttrs', UnsignedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass SignerInfos(univ.SetOf):\n    pass\n\n\nSignerInfos.componentType = SignerInfo()\n\n\nclass SignedData(univ.Sequence):\n    pass\n\n\nSignedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.NamedType('digestAlgorithms', DigestAlgorithmIdentifiers()),\n    namedtype.NamedType('encapContentInfo', EncapsulatedContentInfo()),\n    namedtype.OptionalNamedType('certificates', CertificateSet().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('crls', RevocationInfoChoices().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('signerInfos', SignerInfos())\n)\n\n\nclass MessageAuthenticationCodeAlgorithm(rfc3280.AlgorithmIdentifier):\n    pass\n\n\nclass MessageDigest(univ.OctetString):\n    pass\n\n\nclass Time(univ.Choice):\n    pass\n\n\nTime.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('utcTime', useful.UTCTime()),\n    namedtype.NamedType('generalTime', useful.GeneralizedTime())\n)\n\n\nclass OriginatorInfo(univ.Sequence):\n    pass\n\n\nOriginatorInfo.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('certs', CertificateSet().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('crls', RevocationInfoChoices().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass AuthAttributes(univ.SetOf):\n    pass\n\n\nAuthAttributes.componentType = Attribute()\nAuthAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass AuthenticatedData(univ.Sequence):\n    pass\n\n\nAuthenticatedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.OptionalNamedType('originatorInfo', OriginatorInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('recipientInfos', RecipientInfos()),\n    namedtype.NamedType('macAlgorithm', MessageAuthenticationCodeAlgorithm()),\n    namedtype.OptionalNamedType('digestAlgorithm', DigestAlgorithmIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('encapContentInfo', EncapsulatedContentInfo()),\n    namedtype.OptionalNamedType('authAttrs', AuthAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('mac', MessageAuthenticationCode()),\n    namedtype.OptionalNamedType('unauthAttrs', UnauthAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\nid_ct_contentInfo = _buildOid(1, 2, 840, 113549, 1, 9, 16, 1, 6)\n\nid_envelopedData = _buildOid(1, 2, 840, 113549, 1, 7, 3)\n\n\nclass EnvelopedData(univ.Sequence):\n    pass\n\n\nEnvelopedData.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('version', CMSVersion()),\n    namedtype.OptionalNamedType('originatorInfo', OriginatorInfo().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('recipientInfos', RecipientInfos()),\n    namedtype.NamedType('encryptedContentInfo', EncryptedContentInfo()),\n    namedtype.OptionalNamedType('unprotectedAttrs', UnprotectedAttributes().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass Countersignature(SignerInfo):\n    pass\n\n\nid_digestedData = _buildOid(1, 2, 840, 113549, 1, 7, 5)\n\nid_signingTime = _buildOid(1, 2, 840, 113549, 1, 9, 5)\n\n\nclass ExtendedCertificateOrCertificate(univ.Choice):\n    pass\n\n\nExtendedCertificateOrCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('certificate', rfc3280.Certificate()),\n    namedtype.NamedType('extendedCertificate', ExtendedCertificate().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n)\n\nid_encryptedData = _buildOid(1, 2, 840, 113549, 1, 7, 6)\n\nid_ct_authData = _buildOid(1, 2, 840, 113549, 1, 9, 16, 1, 2)\n\n\nclass SigningTime(Time):\n    pass\n\n\nid_countersignature = _buildOid(1, 2, 840, 113549, 1, 9, 6)\n", "pyasn1_modules/rfc3657.py": "#\n# This file is part of pyasn1-modules software.\n#\n# Created by Russ Housley.\n#\n# Copyright (c) 2019, Vigil Security, LLC\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Camellia Algorithm in CMS\n#\n# ASN.1 source from:\n# https://www.rfc-editor.org/rfc/rfc3657.txt\n#\n\nfrom pyasn1.type import constraint\nfrom pyasn1.type import univ\n\nfrom pyasn1_modules import rfc5280\nfrom pyasn1_modules import rfc5751\n\n\nid_camellia128_cbc = univ.ObjectIdentifier('1.2.392.200011.61.1.1.1.2')\n\nid_camellia192_cbc = univ.ObjectIdentifier('1.2.392.200011.61.1.1.1.3')\n\nid_camellia256_cbc = univ.ObjectIdentifier('1.2.392.200011.61.1.1.1.4')\n\nid_camellia128_wrap = univ.ObjectIdentifier('1.2.392.200011.61.1.1.3.2')\n\nid_camellia192_wrap = univ.ObjectIdentifier('1.2.392.200011.61.1.1.3.3')\n\nid_camellia256_wrap = univ.ObjectIdentifier('1.2.392.200011.61.1.1.3.4')\n\n\n\nclass Camellia_IV(univ.OctetString):\n    subtypeSpec = constraint.ValueSizeConstraint(16, 16)\n\n\nclass CamelliaSMimeCapability(univ.Null):\n    pass\n\n\n# Update the Algorithm Identifier map in rfc5280.py.\n\n_algorithmIdentifierMapUpdate = {\n    id_camellia128_cbc: Camellia_IV(),\n    id_camellia192_cbc: Camellia_IV(),\n    id_camellia256_cbc: Camellia_IV(),\n}\n\nrfc5280.algorithmIdentifierMap.update(_algorithmIdentifierMapUpdate)\n\n\n# Update the SMIMECapabilities Attribute map in rfc5751.py\n\n_smimeCapabilityMapUpdate = {\n    id_camellia128_cbc: CamelliaSMimeCapability(),\n    id_camellia192_cbc: CamelliaSMimeCapability(),\n    id_camellia256_cbc: CamelliaSMimeCapability(),\n    id_camellia128_wrap: CamelliaSMimeCapability(),\n    id_camellia192_wrap: CamelliaSMimeCapability(),\n    id_camellia256_wrap: CamelliaSMimeCapability(),\n}\n\nrfc5751.smimeCapabilityMap.update(_smimeCapabilityMapUpdate)\n", "pyasn1_modules/rfc3280.py": "# coding: utf-8\n#\n# This file is part of pyasn1-modules software.\n#\n# Created by Stanis\u0142aw Pitucha with asn1ate tool.\n# Copyright (c) 2005-2020, Ilya Etingof <etingof@gmail.com>\n# License: http://snmplabs.com/pyasn1/license.html\n#\n# Internet X.509 Public Key Infrastructure Certificate and Certificate\n# Revocation List (CRL) Profile\n#\n# ASN.1 source from:\n# http://www.ietf.org/rfc/rfc3280.txt\n#\nfrom pyasn1.type import char\nfrom pyasn1.type import constraint\nfrom pyasn1.type import namedtype\nfrom pyasn1.type import namedval\nfrom pyasn1.type import tag\nfrom pyasn1.type import univ\nfrom pyasn1.type import useful\n\nMAX = float('inf')\n\n\ndef _OID(*components):\n    output = []\n    for x in tuple(components):\n        if isinstance(x, univ.ObjectIdentifier):\n            output.extend(list(x))\n        else:\n            output.append(int(x))\n\n    return univ.ObjectIdentifier(output)\n\n\nunformatted_postal_address = univ.Integer(16)\n\nub_organizational_units = univ.Integer(4)\n\nub_organizational_unit_name_length = univ.Integer(32)\n\n\nclass OrganizationalUnitName(char.PrintableString):\n    pass\n\n\nOrganizationalUnitName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)\n\n\nclass OrganizationalUnitNames(univ.SequenceOf):\n    pass\n\n\nOrganizationalUnitNames.componentType = OrganizationalUnitName()\nOrganizationalUnitNames.sizeSpec = constraint.ValueSizeConstraint(1, ub_organizational_units)\n\n\nclass AttributeType(univ.ObjectIdentifier):\n    pass\n\n\nid_at = _OID(2, 5, 4)\n\nid_at_name = _OID(id_at, 41)\n\nub_pds_parameter_length = univ.Integer(30)\n\n\nclass PDSParameter(univ.Set):\n    pass\n\n\nPDSParameter.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('printable-string', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length))),\n    namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)))\n)\n\n\nclass PhysicalDeliveryOrganizationName(PDSParameter):\n    pass\n\n\nub_organization_name_length = univ.Integer(64)\n\nub_domain_defined_attribute_type_length = univ.Integer(8)\n\nub_domain_defined_attribute_value_length = univ.Integer(128)\n\n\nclass TeletexDomainDefinedAttribute(univ.Sequence):\n    pass\n\n\nTeletexDomainDefinedAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),\n    namedtype.NamedType('value', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_value_length)))\n)\n\nid_pkix = _OID(1, 3, 6, 1, 5, 5, 7)\n\nid_qt = _OID(id_pkix, 2)\n\n\nclass PresentationAddress(univ.Sequence):\n    pass\n\n\nPresentationAddress.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('pSelector', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('sSelector', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('tSelector', univ.OctetString().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('nAddresses', univ.SetOf(componentType=univ.OctetString()).subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\n\nclass AlgorithmIdentifier(univ.Sequence):\n    pass\n\n\nAlgorithmIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algorithm', univ.ObjectIdentifier()),\n    namedtype.OptionalNamedType('parameters', univ.Any())\n)\n\n\nclass UniqueIdentifier(univ.BitString):\n    pass\n\n\nclass Extension(univ.Sequence):\n    pass\n\n\nExtension.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('extnID', univ.ObjectIdentifier()),\n    namedtype.DefaultedNamedType('critical', univ.Boolean().subtype(value=0)),\n    namedtype.NamedType('extnValue', univ.OctetString())\n)\n\n\nclass Extensions(univ.SequenceOf):\n    pass\n\n\nExtensions.componentType = Extension()\nExtensions.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass CertificateSerialNumber(univ.Integer):\n    pass\n\n\nclass SubjectPublicKeyInfo(univ.Sequence):\n    pass\n\n\nSubjectPublicKeyInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('algorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('subjectPublicKey', univ.BitString())\n)\n\n\nclass Time(univ.Choice):\n    pass\n\n\nTime.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('utcTime', useful.UTCTime()),\n    namedtype.NamedType('generalTime', useful.GeneralizedTime())\n)\n\n\nclass Validity(univ.Sequence):\n    pass\n\n\nValidity.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('notBefore', Time()),\n    namedtype.NamedType('notAfter', Time())\n)\n\n\nclass Version(univ.Integer):\n    pass\n\n\nVersion.namedValues = namedval.NamedValues(\n    ('v1', 0),\n    ('v2', 1),\n    ('v3', 2)\n)\n\n\nclass AttributeValue(univ.Any):\n    pass\n\n\nclass AttributeTypeAndValue(univ.Sequence):\n    pass\n\n\nAttributeTypeAndValue.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', AttributeType()),\n    namedtype.NamedType('value', AttributeValue())\n)\n\n\nclass RelativeDistinguishedName(univ.SetOf):\n    pass\n\n\nRelativeDistinguishedName.componentType = AttributeTypeAndValue()\nRelativeDistinguishedName.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass RDNSequence(univ.SequenceOf):\n    pass\n\n\nRDNSequence.componentType = RelativeDistinguishedName()\n\n\nclass Name(univ.Choice):\n    pass\n\n\nName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('rdnSequence', RDNSequence())\n)\n\n\nclass TBSCertificate(univ.Sequence):\n    pass\n\n\nTBSCertificate.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('version',\n                                 Version().subtype(explicitTag=tag.Tag(tag.tagClassContext,\n                                                                       tag.tagFormatSimple, 0)).subtype(value=\"v1\")),\n    namedtype.NamedType('serialNumber', CertificateSerialNumber()),\n    namedtype.NamedType('signature', AlgorithmIdentifier()),\n    namedtype.NamedType('issuer', Name()),\n    namedtype.NamedType('validity', Validity()),\n    namedtype.NamedType('subject', Name()),\n    namedtype.NamedType('subjectPublicKeyInfo', SubjectPublicKeyInfo()),\n    namedtype.OptionalNamedType('issuerUniqueID', UniqueIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('subjectUniqueID', UniqueIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('extensions',\n                                Extensions().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\n\nclass Certificate(univ.Sequence):\n    pass\n\n\nCertificate.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tbsCertificate', TBSCertificate()),\n    namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\nub_surname_length = univ.Integer(40)\n\n\nclass TeletexOrganizationName(char.TeletexString):\n    pass\n\n\nTeletexOrganizationName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organization_name_length)\n\nub_e163_4_sub_address_length = univ.Integer(40)\n\nteletex_common_name = univ.Integer(2)\n\nub_country_name_alpha_length = univ.Integer(2)\n\nub_country_name_numeric_length = univ.Integer(3)\n\n\nclass CountryName(univ.Choice):\n    pass\n\n\nCountryName.tagSet = univ.Choice.tagSet.tagExplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1))\nCountryName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length, ub_country_name_numeric_length))),\n    namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))\n)\n\nextension_OR_address_components = univ.Integer(12)\n\nid_at_dnQualifier = _OID(id_at, 46)\n\nub_e163_4_number_length = univ.Integer(15)\n\n\nclass ExtendedNetworkAddress(univ.Choice):\n    pass\n\n\nExtendedNetworkAddress.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('e163-4-address', univ.Sequence(componentType=namedtype.NamedTypes(\n        namedtype.NamedType('number', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_number_length)).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n        namedtype.OptionalNamedType('sub-address', char.NumericString().subtype(\n            subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_sub_address_length)).subtype(\n            implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n    ))\n                        ),\n    namedtype.NamedType('psap-address', PresentationAddress().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))\n)\n\nterminal_type = univ.Integer(23)\n\nid_domainComponent = _OID(0, 9, 2342, 19200300, 100, 1, 25)\n\nub_state_name = univ.Integer(128)\n\n\nclass X520StateOrProvinceName(univ.Choice):\n    pass\n\n\nX520StateOrProvinceName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name)))\n)\n\nub_organization_name = univ.Integer(64)\n\n\nclass X520OrganizationName(univ.Choice):\n    pass\n\n\nX520OrganizationName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name)))\n)\n\nub_emailaddress_length = univ.Integer(128)\n\n\nclass ExtensionPhysicalDeliveryAddressComponents(PDSParameter):\n    pass\n\n\nid_at_surname = _OID(id_at, 4)\n\nub_common_name_length = univ.Integer(64)\n\nid_ad = _OID(id_pkix, 48)\n\nub_numeric_user_id_length = univ.Integer(32)\n\n\nclass NumericUserIdentifier(char.NumericString):\n    pass\n\n\nNumericUserIdentifier.subtypeSpec = constraint.ValueSizeConstraint(1, ub_numeric_user_id_length)\n\n\nclass OrganizationName(char.PrintableString):\n    pass\n\n\nOrganizationName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organization_name_length)\n\nub_domain_name_length = univ.Integer(16)\n\n\nclass AdministrationDomainName(univ.Choice):\n    pass\n\n\nAdministrationDomainName.tagSet = univ.Choice.tagSet.tagExplicitly(\n    tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2))\nAdministrationDomainName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('numeric', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length))),\n    namedtype.NamedType('printable', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length)))\n)\n\n\nclass PrivateDomainName(univ.Choice):\n    pass\n\n\nPrivateDomainName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('numeric', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length))),\n    namedtype.NamedType('printable', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length)))\n)\n\nub_generation_qualifier_length = univ.Integer(3)\n\nub_given_name_length = univ.Integer(16)\n\nub_initials_length = univ.Integer(5)\n\n\nclass PersonalName(univ.Set):\n    pass\n\n\nPersonalName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('surname', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('given-name', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('initials', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('generation-qualifier', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\nub_terminal_id_length = univ.Integer(24)\n\n\nclass TerminalIdentifier(char.PrintableString):\n    pass\n\n\nTerminalIdentifier.subtypeSpec = constraint.ValueSizeConstraint(1, ub_terminal_id_length)\n\nub_x121_address_length = univ.Integer(16)\n\n\nclass X121Address(char.NumericString):\n    pass\n\n\nX121Address.subtypeSpec = constraint.ValueSizeConstraint(1, ub_x121_address_length)\n\n\nclass NetworkAddress(X121Address):\n    pass\n\n\nclass BuiltInStandardAttributes(univ.Sequence):\n    pass\n\n\nBuiltInStandardAttributes.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('country-name', CountryName()),\n    namedtype.OptionalNamedType('administration-domain-name', AdministrationDomainName()),\n    namedtype.OptionalNamedType('network-address', NetworkAddress().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('terminal-identifier', TerminalIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('private-domain-name', PrivateDomainName().subtype(\n        explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),\n    namedtype.OptionalNamedType('organization-name', OrganizationName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.OptionalNamedType('numeric-user-identifier', NumericUserIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),\n    namedtype.OptionalNamedType('personal-name', PersonalName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n    namedtype.OptionalNamedType('organizational-unit-names', OrganizationalUnitNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6)))\n)\n\nub_domain_defined_attributes = univ.Integer(4)\n\n\nclass BuiltInDomainDefinedAttribute(univ.Sequence):\n    pass\n\n\nBuiltInDomainDefinedAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),\n    namedtype.NamedType('value', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_value_length)))\n)\n\n\nclass BuiltInDomainDefinedAttributes(univ.SequenceOf):\n    pass\n\n\nBuiltInDomainDefinedAttributes.componentType = BuiltInDomainDefinedAttribute()\nBuiltInDomainDefinedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)\n\nub_extension_attributes = univ.Integer(256)\n\n\nclass ExtensionAttribute(univ.Sequence):\n    pass\n\n\nExtensionAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('extension-attribute-type', univ.Integer().subtype(\n        subtypeSpec=constraint.ValueRangeConstraint(0, ub_extension_attributes)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('extension-attribute-value',\n                        univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass ExtensionAttributes(univ.SetOf):\n    pass\n\n\nExtensionAttributes.componentType = ExtensionAttribute()\nExtensionAttributes.sizeSpec = constraint.ValueSizeConstraint(1, ub_extension_attributes)\n\n\nclass ORAddress(univ.Sequence):\n    pass\n\n\nORAddress.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('built-in-standard-attributes', BuiltInStandardAttributes()),\n    namedtype.OptionalNamedType('built-in-domain-defined-attributes', BuiltInDomainDefinedAttributes()),\n    namedtype.OptionalNamedType('extension-attributes', ExtensionAttributes())\n)\n\nid_pe = _OID(id_pkix, 1)\n\nub_title = univ.Integer(64)\n\n\nclass X520Title(univ.Choice):\n    pass\n\n\nX520Title.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title)))\n)\n\nid_at_organizationalUnitName = _OID(id_at, 11)\n\n\nclass EmailAddress(char.IA5String):\n    pass\n\n\nEmailAddress.subtypeSpec = constraint.ValueSizeConstraint(1, ub_emailaddress_length)\n\nphysical_delivery_country_name = univ.Integer(8)\n\nid_at_givenName = _OID(id_at, 42)\n\n\nclass TeletexCommonName(char.TeletexString):\n    pass\n\n\nTeletexCommonName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_common_name_length)\n\nid_qt_cps = _OID(id_qt, 1)\n\n\nclass LocalPostalAttributes(PDSParameter):\n    pass\n\n\nclass StreetAddress(PDSParameter):\n    pass\n\n\nid_kp = _OID(id_pkix, 3)\n\n\nclass DirectoryString(univ.Choice):\n    pass\n\n\nDirectoryString.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))\n)\n\n\nclass DomainComponent(char.IA5String):\n    pass\n\n\nid_at_initials = _OID(id_at, 43)\n\nid_qt_unotice = _OID(id_qt, 2)\n\nub_pds_name_length = univ.Integer(16)\n\n\nclass PDSName(char.PrintableString):\n    pass\n\n\nPDSName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_pds_name_length)\n\n\nclass PosteRestanteAddress(PDSParameter):\n    pass\n\n\nclass DistinguishedName(RDNSequence):\n    pass\n\n\nclass CommonName(char.PrintableString):\n    pass\n\n\nCommonName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_common_name_length)\n\nub_serial_number = univ.Integer(64)\n\n\nclass X520SerialNumber(char.PrintableString):\n    pass\n\n\nX520SerialNumber.subtypeSpec = constraint.ValueSizeConstraint(1, ub_serial_number)\n\nid_at_generationQualifier = _OID(id_at, 44)\n\nub_organizational_unit_name = univ.Integer(64)\n\nid_ad_ocsp = _OID(id_ad, 1)\n\n\nclass TeletexOrganizationalUnitName(char.TeletexString):\n    pass\n\n\nTeletexOrganizationalUnitName.subtypeSpec = constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)\n\n\nclass TeletexPersonalName(univ.Set):\n    pass\n\n\nTeletexPersonalName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('surname', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('given-name', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('initials', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.OptionalNamedType('generation-qualifier', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length)).subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))\n)\n\n\nclass TeletexDomainDefinedAttributes(univ.SequenceOf):\n    pass\n\n\nTeletexDomainDefinedAttributes.componentType = TeletexDomainDefinedAttribute()\nTeletexDomainDefinedAttributes.sizeSpec = constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)\n\n\nclass TBSCertList(univ.Sequence):\n    pass\n\n\nTBSCertList.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('version', Version()),\n    namedtype.NamedType('signature', AlgorithmIdentifier()),\n    namedtype.NamedType('issuer', Name()),\n    namedtype.NamedType('thisUpdate', Time()),\n    namedtype.OptionalNamedType('nextUpdate', Time()),\n    namedtype.OptionalNamedType('revokedCertificates',\n                                univ.SequenceOf(componentType=univ.Sequence(componentType=namedtype.NamedTypes(\n                                    namedtype.NamedType('userCertificate', CertificateSerialNumber()),\n                                    namedtype.NamedType('revocationDate', Time()),\n                                    namedtype.OptionalNamedType('crlEntryExtensions', Extensions())\n                                ))\n                                )),\n    namedtype.OptionalNamedType('crlExtensions',\n                                Extensions().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\nlocal_postal_attributes = univ.Integer(21)\n\npkcs_9 = _OID(1, 2, 840, 113549, 1, 9)\n\n\nclass PhysicalDeliveryCountryName(univ.Choice):\n    pass\n\n\nPhysicalDeliveryCountryName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length, ub_country_name_numeric_length))),\n    namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))\n)\n\nub_name = univ.Integer(32768)\n\n\nclass X520name(univ.Choice):\n    pass\n\n\nX520name.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name)))\n)\n\nid_emailAddress = _OID(pkcs_9, 1)\n\n\nclass TerminalType(univ.Integer):\n    pass\n\n\nTerminalType.namedValues = namedval.NamedValues(\n    ('telex', 3),\n    ('teletex', 4),\n    ('g3-facsimile', 5),\n    ('g4-facsimile', 6),\n    ('ia5-terminal', 7),\n    ('videotex', 8)\n)\n\n\nclass X520OrganizationalUnitName(univ.Choice):\n    pass\n\n\nX520OrganizationalUnitName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name)))\n)\n\nid_at_commonName = _OID(id_at, 3)\n\npds_name = univ.Integer(7)\n\npost_office_box_address = univ.Integer(18)\n\nub_locality_name = univ.Integer(128)\n\n\nclass X520LocalityName(univ.Choice):\n    pass\n\n\nX520LocalityName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('printableString', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('universalString', char.UniversalString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name)))\n)\n\nid_ad_timeStamping = _OID(id_ad, 3)\n\nid_at_countryName = _OID(id_at, 6)\n\nphysical_delivery_personal_name = univ.Integer(13)\n\nteletex_personal_name = univ.Integer(4)\n\nteletex_organizational_unit_names = univ.Integer(5)\n\n\nclass PhysicalDeliveryPersonalName(PDSParameter):\n    pass\n\n\nub_postal_code_length = univ.Integer(16)\n\n\nclass PostalCode(univ.Choice):\n    pass\n\n\nPostalCode.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('numeric-code', char.NumericString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length))),\n    namedtype.NamedType('printable-code', char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length)))\n)\n\n\nclass X520countryName(char.PrintableString):\n    pass\n\n\nX520countryName.subtypeSpec = constraint.ValueSizeConstraint(2, 2)\n\npostal_code = univ.Integer(9)\n\nid_ad_caRepository = _OID(id_ad, 5)\n\nextension_physical_delivery_address_components = univ.Integer(15)\n\n\nclass PostOfficeBoxAddress(PDSParameter):\n    pass\n\n\nclass PhysicalDeliveryOfficeName(PDSParameter):\n    pass\n\n\nid_at_title = _OID(id_at, 12)\n\nid_at_serialNumber = _OID(id_at, 5)\n\nid_ad_caIssuers = _OID(id_ad, 2)\n\nub_integer_options = univ.Integer(256)\n\n\nclass CertificateList(univ.Sequence):\n    pass\n\n\nCertificateList.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('tbsCertList', TBSCertList()),\n    namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),\n    namedtype.NamedType('signature', univ.BitString())\n)\n\n\nclass PhysicalDeliveryOfficeNumber(PDSParameter):\n    pass\n\n\nclass TeletexOrganizationalUnitNames(univ.SequenceOf):\n    pass\n\n\nTeletexOrganizationalUnitNames.componentType = TeletexOrganizationalUnitName()\nTeletexOrganizationalUnitNames.sizeSpec = constraint.ValueSizeConstraint(1, ub_organizational_units)\n\nphysical_delivery_office_name = univ.Integer(10)\n\nub_common_name = univ.Integer(64)\n\n\nclass ExtensionORAddressComponents(PDSParameter):\n    pass\n\n\nub_pseudonym = univ.Integer(128)\n\nposte_restante_address = univ.Integer(19)\n\nid_at_organizationName = _OID(id_at, 10)\n\nphysical_delivery_office_number = univ.Integer(11)\n\nid_at_pseudonym = _OID(id_at, 65)\n\n\nclass X520CommonName(univ.Choice):\n    pass\n\n\nX520CommonName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name)))\n)\n\nphysical_delivery_organization_name = univ.Integer(14)\n\n\nclass X520dnQualifier(char.PrintableString):\n    pass\n\n\nid_at_stateOrProvinceName = _OID(id_at, 8)\n\ncommon_name = univ.Integer(1)\n\nid_at_localityName = _OID(id_at, 7)\n\nub_match = univ.Integer(128)\n\nub_unformatted_address_length = univ.Integer(180)\n\n\nclass Attribute(univ.Sequence):\n    pass\n\n\nAttribute.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type', AttributeType()),\n    namedtype.NamedType('values', univ.SetOf(componentType=AttributeValue()))\n)\n\nextended_network_address = univ.Integer(22)\n\nunique_postal_name = univ.Integer(20)\n\nub_pds_physical_address_lines = univ.Integer(6)\n\n\nclass UnformattedPostalAddress(univ.Set):\n    pass\n\n\nUnformattedPostalAddress.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('printable-address', univ.SequenceOf(componentType=char.PrintableString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)))),\n    namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(\n        subtypeSpec=constraint.ValueSizeConstraint(1, ub_unformatted_address_length)))\n)\n\n\nclass UniquePostalName(PDSParameter):\n    pass\n\n\nclass X520Pseudonym(univ.Choice):\n    pass\n\n\nX520Pseudonym.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('teletexString',\n                        char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('printableString',\n                        char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('universalString',\n                        char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('utf8String',\n                        char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym))),\n    namedtype.NamedType('bmpString',\n                        char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_pseudonym)))\n)\n\nteletex_organization_name = univ.Integer(3)\n\nteletex_domain_defined_attributes = univ.Integer(6)\n\nstreet_address = univ.Integer(17)\n\nid_kp_OCSPSigning = _OID(id_kp, 9)\n\nid_ce = _OID(2, 5, 29)\n\nid_ce_certificatePolicies = _OID(id_ce, 32)\n\n\nclass EDIPartyName(univ.Sequence):\n    pass\n\n\nEDIPartyName.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('nameAssigner', DirectoryString().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('partyName',\n                        DirectoryString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass AnotherName(univ.Sequence):\n    pass\n\n\nAnotherName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('type-id', univ.ObjectIdentifier()),\n    namedtype.NamedType('value', univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))\n)\n\n\nclass GeneralName(univ.Choice):\n    pass\n\n\nGeneralName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('otherName',\n                        AnotherName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.NamedType('rfc822Name',\n                        char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.NamedType('dNSName',\n                        char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),\n    namedtype.NamedType('x400Address',\n                        ORAddress().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.NamedType('directoryName',\n                        Name().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),\n    namedtype.NamedType('ediPartyName',\n                        EDIPartyName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),\n    namedtype.NamedType('uniformResourceIdentifier',\n                        char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))),\n    namedtype.NamedType('iPAddress',\n                        univ.OctetString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),\n    namedtype.NamedType('registeredID', univ.ObjectIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 8)))\n)\n\n\nclass GeneralNames(univ.SequenceOf):\n    pass\n\n\nGeneralNames.componentType = GeneralName()\nGeneralNames.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass IssuerAltName(GeneralNames):\n    pass\n\n\nid_ce_cRLDistributionPoints = _OID(id_ce, 31)\n\n\nclass CertPolicyId(univ.ObjectIdentifier):\n    pass\n\n\nclass PolicyMappings(univ.SequenceOf):\n    pass\n\n\nPolicyMappings.componentType = univ.Sequence(componentType=namedtype.NamedTypes(\n    namedtype.NamedType('issuerDomainPolicy', CertPolicyId()),\n    namedtype.NamedType('subjectDomainPolicy', CertPolicyId())\n))\n\nPolicyMappings.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass PolicyQualifierId(univ.ObjectIdentifier):\n    pass\n\n\nholdInstruction = _OID(2, 2, 840, 10040, 2)\n\nid_ce_subjectDirectoryAttributes = _OID(id_ce, 9)\n\nid_holdinstruction_callissuer = _OID(holdInstruction, 2)\n\n\nclass SubjectDirectoryAttributes(univ.SequenceOf):\n    pass\n\n\nSubjectDirectoryAttributes.componentType = Attribute()\nSubjectDirectoryAttributes.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nanyPolicy = _OID(id_ce_certificatePolicies, 0)\n\nid_ce_subjectAltName = _OID(id_ce, 17)\n\nid_kp_emailProtection = _OID(id_kp, 4)\n\n\nclass ReasonFlags(univ.BitString):\n    pass\n\n\nReasonFlags.namedValues = namedval.NamedValues(\n    ('unused', 0),\n    ('keyCompromise', 1),\n    ('cACompromise', 2),\n    ('affiliationChanged', 3),\n    ('superseded', 4),\n    ('cessationOfOperation', 5),\n    ('certificateHold', 6),\n    ('privilegeWithdrawn', 7),\n    ('aACompromise', 8)\n)\n\n\nclass DistributionPointName(univ.Choice):\n    pass\n\n\nDistributionPointName.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('fullName',\n                        GeneralNames().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.NamedType('nameRelativeToCRLIssuer', RelativeDistinguishedName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass DistributionPoint(univ.Sequence):\n    pass\n\n\nDistributionPoint.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.OptionalNamedType('reasons', ReasonFlags().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('cRLIssuer', GeneralNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\nid_ce_keyUsage = _OID(id_ce, 15)\n\n\nclass PolicyQualifierInfo(univ.Sequence):\n    pass\n\n\nPolicyQualifierInfo.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('policyQualifierId', PolicyQualifierId()),\n    namedtype.NamedType('qualifier', univ.Any())\n)\n\n\nclass PolicyInformation(univ.Sequence):\n    pass\n\n\nPolicyInformation.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('policyIdentifier', CertPolicyId()),\n    namedtype.OptionalNamedType('policyQualifiers', univ.SequenceOf(componentType=PolicyQualifierInfo()))\n)\n\n\nclass CertificatePolicies(univ.SequenceOf):\n    pass\n\n\nCertificatePolicies.componentType = PolicyInformation()\nCertificatePolicies.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_ce_basicConstraints = _OID(id_ce, 19)\n\n\nclass HoldInstructionCode(univ.ObjectIdentifier):\n    pass\n\n\nclass KeyPurposeId(univ.ObjectIdentifier):\n    pass\n\n\nclass ExtKeyUsageSyntax(univ.SequenceOf):\n    pass\n\n\nExtKeyUsageSyntax.componentType = KeyPurposeId()\nExtKeyUsageSyntax.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass SubjectAltName(GeneralNames):\n    pass\n\n\nclass BasicConstraints(univ.Sequence):\n    pass\n\n\nBasicConstraints.componentType = namedtype.NamedTypes(\n    namedtype.DefaultedNamedType('cA', univ.Boolean().subtype(value=0)),\n    namedtype.OptionalNamedType('pathLenConstraint',\n                                univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, MAX)))\n)\n\n\nclass SkipCerts(univ.Integer):\n    pass\n\n\nSkipCerts.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass InhibitAnyPolicy(SkipCerts):\n    pass\n\n\nclass CRLNumber(univ.Integer):\n    pass\n\n\nCRLNumber.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass BaseCRLNumber(CRLNumber):\n    pass\n\n\nclass KeyIdentifier(univ.OctetString):\n    pass\n\n\nclass AuthorityKeyIdentifier(univ.Sequence):\n    pass\n\n\nAuthorityKeyIdentifier.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('keyIdentifier', KeyIdentifier().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('authorityCertIssuer', GeneralNames().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),\n    namedtype.OptionalNamedType('authorityCertSerialNumber', CertificateSerialNumber().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))\n)\n\nid_ce_nameConstraints = _OID(id_ce, 30)\n\nid_kp_serverAuth = _OID(id_kp, 1)\n\nid_ce_freshestCRL = _OID(id_ce, 46)\n\nid_ce_cRLReasons = _OID(id_ce, 21)\n\n\nclass CRLDistributionPoints(univ.SequenceOf):\n    pass\n\n\nCRLDistributionPoints.componentType = DistributionPoint()\nCRLDistributionPoints.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass FreshestCRL(CRLDistributionPoints):\n    pass\n\n\nid_ce_inhibitAnyPolicy = _OID(id_ce, 54)\n\n\nclass CRLReason(univ.Enumerated):\n    pass\n\n\nCRLReason.namedValues = namedval.NamedValues(\n    ('unspecified', 0),\n    ('keyCompromise', 1),\n    ('cACompromise', 2),\n    ('affiliationChanged', 3),\n    ('superseded', 4),\n    ('cessationOfOperation', 5),\n    ('certificateHold', 6),\n    ('removeFromCRL', 8),\n    ('privilegeWithdrawn', 9),\n    ('aACompromise', 10)\n)\n\n\nclass BaseDistance(univ.Integer):\n    pass\n\n\nBaseDistance.subtypeSpec = constraint.ValueRangeConstraint(0, MAX)\n\n\nclass GeneralSubtree(univ.Sequence):\n    pass\n\n\nGeneralSubtree.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('base', GeneralName()),\n    namedtype.DefaultedNamedType('minimum', BaseDistance().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)).subtype(value=0)),\n    namedtype.OptionalNamedType('maximum', BaseDistance().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass GeneralSubtrees(univ.SequenceOf):\n    pass\n\n\nGeneralSubtrees.componentType = GeneralSubtree()\nGeneralSubtrees.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass NameConstraints(univ.Sequence):\n    pass\n\n\nNameConstraints.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('permittedSubtrees', GeneralSubtrees().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('excludedSubtrees', GeneralSubtrees().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\nid_pe_authorityInfoAccess = _OID(id_pe, 1)\n\nid_pe_subjectInfoAccess = _OID(id_pe, 11)\n\nid_ce_certificateIssuer = _OID(id_ce, 29)\n\nid_ce_invalidityDate = _OID(id_ce, 24)\n\n\nclass DirectoryString(univ.Choice):\n    pass\n\n\nDirectoryString.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('any', univ.Any())\n)\n\nid_ce_authorityKeyIdentifier = _OID(id_ce, 35)\n\n\nclass AccessDescription(univ.Sequence):\n    pass\n\n\nAccessDescription.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('accessMethod', univ.ObjectIdentifier()),\n    namedtype.NamedType('accessLocation', GeneralName())\n)\n\n\nclass AuthorityInfoAccessSyntax(univ.SequenceOf):\n    pass\n\n\nAuthorityInfoAccessSyntax.componentType = AccessDescription()\nAuthorityInfoAccessSyntax.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\nid_ce_issuingDistributionPoint = _OID(id_ce, 28)\n\n\nclass CPSuri(char.IA5String):\n    pass\n\n\nclass DisplayText(univ.Choice):\n    pass\n\n\nDisplayText.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('ia5String', char.IA5String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n    namedtype.NamedType('visibleString',\n                        char.VisibleString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n    namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),\n    namedtype.NamedType('utf8String', char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200)))\n)\n\n\nclass NoticeReference(univ.Sequence):\n    pass\n\n\nNoticeReference.componentType = namedtype.NamedTypes(\n    namedtype.NamedType('organization', DisplayText()),\n    namedtype.NamedType('noticeNumbers', univ.SequenceOf(componentType=univ.Integer()))\n)\n\n\nclass UserNotice(univ.Sequence):\n    pass\n\n\nUserNotice.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('noticeRef', NoticeReference()),\n    namedtype.OptionalNamedType('explicitText', DisplayText())\n)\n\n\nclass PrivateKeyUsagePeriod(univ.Sequence):\n    pass\n\n\nPrivateKeyUsagePeriod.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('notBefore', useful.GeneralizedTime().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('notAfter', useful.GeneralizedTime().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\nid_ce_subjectKeyIdentifier = _OID(id_ce, 14)\n\n\nclass CertificateIssuer(GeneralNames):\n    pass\n\n\nclass InvalidityDate(useful.GeneralizedTime):\n    pass\n\n\nclass SubjectInfoAccessSyntax(univ.SequenceOf):\n    pass\n\n\nSubjectInfoAccessSyntax.componentType = AccessDescription()\nSubjectInfoAccessSyntax.sizeSpec = constraint.ValueSizeConstraint(1, MAX)\n\n\nclass KeyUsage(univ.BitString):\n    pass\n\n\nKeyUsage.namedValues = namedval.NamedValues(\n    ('digitalSignature', 0),\n    ('nonRepudiation', 1),\n    ('keyEncipherment', 2),\n    ('dataEncipherment', 3),\n    ('keyAgreement', 4),\n    ('keyCertSign', 5),\n    ('cRLSign', 6),\n    ('encipherOnly', 7),\n    ('decipherOnly', 8)\n)\n\nid_ce_extKeyUsage = _OID(id_ce, 37)\n\nanyExtendedKeyUsage = _OID(id_ce_extKeyUsage, 0)\n\nid_ce_privateKeyUsagePeriod = _OID(id_ce, 16)\n\nid_ce_policyMappings = _OID(id_ce, 33)\n\nid_ce_cRLNumber = _OID(id_ce, 20)\n\nid_ce_policyConstraints = _OID(id_ce, 36)\n\nid_holdinstruction_none = _OID(holdInstruction, 1)\n\nid_holdinstruction_reject = _OID(holdInstruction, 3)\n\nid_kp_timeStamping = _OID(id_kp, 8)\n\n\nclass PolicyConstraints(univ.Sequence):\n    pass\n\n\nPolicyConstraints.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('requireExplicitPolicy',\n                                SkipCerts().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),\n    namedtype.OptionalNamedType('inhibitPolicyMapping',\n                                SkipCerts().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))\n)\n\n\nclass SubjectKeyIdentifier(KeyIdentifier):\n    pass\n\n\nid_kp_clientAuth = _OID(id_kp, 2)\n\nid_ce_deltaCRLIndicator = _OID(id_ce, 27)\n\nid_ce_issuerAltName = _OID(id_ce, 18)\n\nid_kp_codeSigning = _OID(id_kp, 3)\n\nid_ce_holdInstructionCode = _OID(id_ce, 23)\n\n\nclass IssuingDistributionPoint(univ.Sequence):\n    pass\n\n\nIssuingDistributionPoint.componentType = namedtype.NamedTypes(\n    namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),\n    namedtype.DefaultedNamedType('onlyContainsUserCerts', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)).subtype(value=0)),\n    namedtype.DefaultedNamedType('onlyContainsCACerts', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)).subtype(value=0)),\n    namedtype.OptionalNamedType('onlySomeReasons', ReasonFlags().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),\n    namedtype.DefaultedNamedType('indirectCRL', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)).subtype(value=0)),\n    namedtype.DefaultedNamedType('onlyContainsAttributeCerts', univ.Boolean().subtype(\n        implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5)).subtype(value=0))\n)\n"}