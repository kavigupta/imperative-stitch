{"extra/get_issues.py": "from __future__ import annotations\n\nimport json\nfrom pathlib import Path\nimport sys\n\nimport requests\n\n\nissues_url = \"https://api.github.com/repos/pytest-dev/pytest/issues\"\n\n\ndef get_issues():\n    issues = []\n    url = issues_url\n    while 1:\n        get_data = {\"state\": \"all\"}\n        r = requests.get(url, params=get_data)\n        data = r.json()\n        if r.status_code == 403:\n            # API request limit exceeded\n            print(data[\"message\"])\n            sys.exit(1)\n        issues.extend(data)\n\n        # Look for next page\n        links = requests.utils.parse_header_links(r.headers[\"Link\"])\n        another_page = False\n        for link in links:\n            if link[\"rel\"] == \"next\":\n                url = link[\"url\"]\n                another_page = True\n        if not another_page:\n            return issues\n\n\ndef main(args):\n    cachefile = Path(args.cache)\n    if not cachefile.exists() or args.refresh:\n        issues = get_issues()\n        cachefile.write_text(json.dumps(issues), \"utf-8\")\n    else:\n        issues = json.loads(cachefile.read_text(\"utf-8\"))\n\n    open_issues = [x for x in issues if x[\"state\"] == \"open\"]\n\n    open_issues.sort(key=lambda x: x[\"number\"])\n    report(open_issues)\n\n\ndef _get_kind(issue):\n    labels = [label[\"name\"] for label in issue[\"labels\"]]\n    for key in (\"bug\", \"enhancement\", \"proposal\"):\n        if key in labels:\n            return key\n    return \"issue\"\n\n\ndef report(issues):\n    for issue in issues:\n        title = issue[\"title\"]\n        # body = issue[\"body\"]\n        kind = _get_kind(issue)\n        status = issue[\"state\"]\n        number = issue[\"number\"]\n        link = f\"https://github.com/pytest-dev/pytest/issues/{number}/\"\n        print(\"----\")\n        print(status, kind, link)\n        print(title)\n        # print()\n        # lines = body.split(\"\\n\")\n        # print(\"\\n\".join(lines[:3]))\n        # if len(lines) > 3 or len(body) > 240:\n        #    print(\"...\")\n    print(f\"\\n\\nFound {len(issues)} open issues\")\n\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser(\"process bitbucket issues\")\n    parser.add_argument(\n        \"--refresh\", action=\"store_true\", help=\"invalidate cache, refresh issues\"\n    )\n    parser.add_argument(\n        \"--cache\", action=\"store\", default=\"issues.json\", help=\"cache file\"\n    )\n    args = parser.parse_args()\n    main(args)\n", "bench/skip.py": "from __future__ import annotations\n\nimport pytest\n\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")\n", "bench/unit_test.py": "from __future__ import annotations\n\nfrom unittest import TestCase  # noqa: F401\n\n\nfor i in range(15000):\n    exec(\n        f\"\"\"\nclass Test{i}(TestCase):\n    @classmethod\n    def setUpClass(cls): pass\n    def test_1(self): pass\n    def test_2(self): pass\n    def test_3(self): pass\n\"\"\"\n    )\n", "bench/bench_argcomplete.py": "# 10000 iterations, just for relative comparison\n#                      2.7.5     3.3.2\n# FilesCompleter       75.1109   69.2116\n# FastFilesCompleter    0.7383    1.0760\nfrom __future__ import annotations\n\nimport timeit\n\n\nimports = [\n    \"from argcomplete.completers import FilesCompleter as completer\",\n    \"from _pytest._argcomplete import FastFilesCompleter as completer\",\n]\n\ncount = 1000  # only a few seconds\nsetup = \"%s\\nfc = completer()\"\nrun = 'fc(\"/d\")'\n\n\nif __name__ == \"__main__\":\n    print(timeit.timeit(run, setup=setup % imports[0], number=count))\n    print(timeit.timeit(run, setup=setup % imports[1], number=count))\n", "bench/manyparam.py": "from __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass\n", "bench/bench.py": "from __future__ import annotations\n\nimport sys\n\n\nif __name__ == \"__main__\":\n    import cProfile\n    import pstats\n\n    import pytest  # noqa: F401\n\n    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n    cProfile.run(f\"pytest.cmdline.main({script!r})\", \"prof\")\n    p = pstats.Stats(\"prof\")\n    p.strip_dirs()\n    p.sort_stats(\"cumulative\")\n    print(p.print_stats(500))\n", "bench/empty.py": "from __future__ import annotations\n\n\nfor i in range(1000):\n    exec(\"def test_func_%d(): pass\" % i)\n", "bench/xunit.py": "from __future__ import annotations\n\n\nfor i in range(5000):\n    exec(\n        f\"\"\"\nclass Test{i}:\n    @classmethod\n    def setup_class(cls): pass\n    def test_1(self): pass\n    def test_2(self): pass\n    def test_3(self): pass\n\"\"\"\n    )\n", "doc/en/conf.py": "#\n# pytest documentation build configuration file, created by\n# sphinx-quickstart on Fri Oct  8 17:54:28 2010.\n#\n# This file is execfile()d with the current directory set to its containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The full version, including alpha/beta/rc tags.\n# The short X.Y version.\nfrom __future__ import annotations\n\nimport os\nfrom pathlib import Path\nimport shutil\nfrom textwrap import dedent\nfrom typing import TYPE_CHECKING\n\nfrom _pytest import __version__ as full_version\n\n\nversion = full_version.split(\"+\")[0]\n\nif TYPE_CHECKING:\n    import sphinx.application\n\n\nPROJECT_ROOT_DIR = Path(__file__).parents[2].resolve()\nIS_RELEASE_ON_RTD = (\n    os.getenv(\"READTHEDOCS\", \"False\") == \"True\"\n    and os.environ[\"READTHEDOCS_VERSION_TYPE\"] == \"tag\"\n)\nif IS_RELEASE_ON_RTD:\n    tags: set[str]\n    # pylint: disable-next=used-before-assignment\n    tags.add(\"is_release\")  # noqa: F821\n\nrelease = \".\".join(version.split(\".\")[:2])\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n# sys.path.insert(0, os.path.abspath('.'))\n\nautodoc_member_order = \"bysource\"\nautodoc_typehints = \"description\"\nautodoc_typehints_description_target = \"documented\"\ntodo_include_todos = 1\n\nlatex_engine = \"lualatex\"\n\nlatex_elements = {\n    \"preamble\": dedent(\n        r\"\"\"\n        \\directlua{\n            luaotfload.add_fallback(\"fallbacks\", {\n                \"Noto Serif CJK SC:style=Regular;\",\n                \"Symbola:Style=Regular;\"\n            })\n        }\n\n        \\setmainfont{FreeSerif}[RawFeature={fallback=fallbacks}]\n        \"\"\"\n    )\n}\n\n# -- General configuration -----------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n# needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\nextensions = [\n    \"pygments_pytest\",\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.extlinks\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinx.ext.todo\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx_removed_in\",\n    \"sphinxcontrib_trio\",\n    \"sphinxcontrib.towncrier.ext\",  # provides `towncrier-draft-entries` directive\n    \"sphinx_issues\",  # implements `:issue:`, `:pr:` and other GH-related roles\n]\n\n# Building PDF docs on readthedocs requires inkscape for svg to pdf\n# conversion. The relevant plugin is not useful for normal HTML builds, but\n# it still raises warnings and fails CI if inkscape is not available. So\n# only use the plugin if inkscape is actually available.\nif shutil.which(\"inkscape\"):\n    extensions.append(\"sphinxcontrib.inkscapeconverter\")\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"_templates\"]\n\n# The suffix of source filenames.\nsource_suffix = \".rst\"\n\n# The encoding of source files.\n# source_encoding = 'utf-8-sig'\n\n# The master toctree document.\nmaster_doc = \"contents\"\n\n# General information about the project.\nproject = \"pytest\"\ncopyright = \"2015, holger krekel and pytest-dev team\"\n\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n# language = None\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n# today = ''\n# Else, today_fmt is used as the format for a strftime call.\n# today_fmt = '%B %d, %Y'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = [\n    \"_build\",\n    \"naming20.rst\",\n    \"test/*\",\n    \"old_*\",\n    \"*attic*\",\n    \"*/attic*\",\n    \"funcargs.rst\",\n    \"setup.rst\",\n    \"example/remoteinterp.rst\",\n]\n\n\n# The reST default role (used for this markup: `text`) to use for all documents.\ndefault_role = \"literal\"\n\n# If true, '()' will be appended to :func: etc. cross-reference text.\n# add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\nadd_module_names = False\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n# show_authors = False\n\n# A list of ignored prefixes for module index sorting.\n# modindex_common_prefix = []\n\n# A list of regular expressions that match URIs that should not be checked when\n# doing a linkcheck.\nlinkcheck_ignore = [\n    \"https://blogs.msdn.microsoft.com/bharry/2017/06/28/testing-in-a-cloud-delivery-cadence/\",\n    \"http://pythontesting.net/framework/pytest-introduction/\",\n    r\"https://github.com/pytest-dev/pytest/issues/\\d+\",\n    r\"https://github.com/pytest-dev/pytest/pull/\\d+\",\n]\n\n# The number of worker threads to use when checking links (default=5).\nlinkcheck_workers = 5\n\n\nextlinks = {\n    \"bpo\": (\"https://bugs.python.org/issue%s\", \"bpo-%s\"),\n}\n\n\nnitpicky = True\nnitpick_ignore = [\n    # TODO (fix in pluggy?)\n    (\"py:class\", \"HookCaller\"),\n    (\"py:class\", \"HookspecMarker\"),\n    (\"py:exc\", \"PluginValidationError\"),\n    # Might want to expose/TODO (https://github.com/pytest-dev/pytest/issues/7469)\n    (\"py:class\", \"ExceptionRepr\"),\n    (\"py:class\", \"Exit\"),\n    (\"py:class\", \"SubRequest\"),\n    (\"py:class\", \"SubRequest\"),\n    (\"py:class\", \"TerminalReporter\"),\n    (\"py:class\", \"_pytest._code.code.TerminalRepr\"),\n    (\"py:class\", \"TerminalRepr\"),\n    (\"py:class\", \"_pytest.fixtures.FixtureFunctionMarker\"),\n    (\"py:class\", \"_pytest.logging.LogCaptureHandler\"),\n    (\"py:class\", \"_pytest.mark.structures.ParameterSet\"),\n    # Intentionally undocumented/private\n    (\"py:class\", \"_pytest._code.code.Traceback\"),\n    (\"py:class\", \"_pytest._py.path.LocalPath\"),\n    (\"py:class\", \"_pytest.capture.CaptureResult\"),\n    (\"py:class\", \"_pytest.compat.NotSetType\"),\n    (\"py:class\", \"_pytest.python.PyCollector\"),\n    (\"py:class\", \"_pytest.python.PyobjMixin\"),\n    (\"py:class\", \"_pytest.python_api.RaisesContext\"),\n    (\"py:class\", \"_pytest.recwarn.WarningsChecker\"),\n    (\"py:class\", \"_pytest.reports.BaseReport\"),\n    # Undocumented third parties\n    (\"py:class\", \"_tracing.TagTracerSub\"),\n    (\"py:class\", \"warnings.WarningMessage\"),\n    # Undocumented type aliases\n    (\"py:class\", \"LEGACY_PATH\"),\n    (\"py:class\", \"_PluggyPlugin\"),\n    # TypeVars\n    (\"py:class\", \"_pytest._code.code.E\"),\n    (\"py:class\", \"E\"),  # due to delayed annotation\n    (\"py:class\", \"_pytest.fixtures.FixtureFunction\"),\n    (\"py:class\", \"_pytest.nodes._NodeType\"),\n    (\"py:class\", \"_NodeType\"),  # due to delayed annotation\n    (\"py:class\", \"_pytest.python_api.E\"),\n    (\"py:class\", \"_pytest.recwarn.T\"),\n    (\"py:class\", \"_pytest.runner.TResult\"),\n    (\"py:obj\", \"_pytest.fixtures.FixtureValue\"),\n    (\"py:obj\", \"_pytest.stash.T\"),\n    (\"py:class\", \"_ScopeName\"),\n]\n\n\n# -- Options for HTML output ---------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = \"furo\"\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n# html_theme_options = {\"index_logo\": None}\n\n# Add any paths that contain custom themes here, relative to this directory.\n# html_theme_path = []\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\nhtml_title = \"pytest documentation\"\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = f\"pytest-{release}\"\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\nhtml_logo = \"img/pytest_logo_curves.svg\"\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\nhtml_favicon = \"img/favicon.png\"\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n# html_static_path = ['_static']\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n# html_last_updated_fmt = '%b %d, %Y'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n# html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n# html_sidebars = {}\n# html_sidebars = {'index': 'indexsidebar.html'}\n\nhtml_sidebars = {\n    \"index\": [\n        \"sidebar/brand.html\",\n        \"sidebar/search.html\",\n        \"sidebar/scroll-start.html\",\n        \"sidebarintro.html\",\n        \"globaltoc.html\",\n        \"links.html\",\n        \"sidebar/scroll-end.html\",\n        \"style.html\",\n    ],\n    \"**\": [\n        \"sidebar/brand.html\",\n        \"sidebar/search.html\",\n        \"sidebar/scroll-start.html\",\n        \"globaltoc.html\",\n        \"relations.html\",\n        \"links.html\",\n        \"sidebar/scroll-end.html\",\n        \"style.html\",\n    ],\n}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n# html_additional_pages = {}\n# html_additional_pages = {'index': 'index.html'}\n\n\n# If false, no module index is generated.\nhtml_domain_indices = True\n\n# If false, no index is generated.\nhtml_use_index = False\n\n# If true, the index is split into individual pages for each letter.\n# html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\nhtml_show_sourcelink = False\n\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n# html_show_sphinx = True\n\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n# html_show_copyright = True\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n# html_use_opensearch = ''\n\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n# html_file_suffix = None\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \"pytestdoc\"\n\n# The base URL which points to the root of the HTML documentation. It is used\n# to indicate the location of document using the canonical link relation (#12363).\nhtml_baseurl = \"https://docs.pytest.org/en/stable/\"\n\n# -- Options for LaTeX output --------------------------------------------------\n\n# The paper size ('letter' or 'a4').\n# latex_paper_size = 'letter'\n\n# The font size ('10pt', '11pt' or '12pt').\n# latex_font_size = '10pt'\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n    (\n        \"contents\",\n        \"pytest.tex\",\n        \"pytest Documentation\",\n        \"holger krekel, trainer and consultant, https://merlinux.eu/\",\n        \"manual\",\n    )\n]\n\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n# latex_use_parts = False\n\n# If true, show page references after internal links.\n# latex_show_pagerefs = False\n\n# If true, show URL addresses after external links.\n# latex_show_urls = False\n\n# Additional stuff for the LaTeX preamble.\n# latex_preamble = ''\n\n# Documents to append as an appendix to all manuals.\n# latex_appendices = []\n\n# If false, no module index is generated.\nlatex_domain_indices = False\n\n# -- Options for manual page output --------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (\"how-to/usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)\n]\n\n\n# -- Options for Epub output ---------------------------------------------------\n\n# Bibliographic Dublin Core info.\nepub_title = \"pytest\"\nepub_author = \"holger krekel at merlinux eu\"\nepub_publisher = \"holger krekel at merlinux eu\"\nepub_copyright = \"2013, holger krekel et alii\"\n\n# The language of the text. It defaults to the language option\n# or en if the language is not set.\n# epub_language = ''\n\n# The scheme of the identifier. Typical schemes are ISBN or URL.\n# epub_scheme = ''\n\n# The unique identifier of the text. This can be an ISBN number\n# or the project homepage.\n# epub_identifier = ''\n\n# A unique identification for the text.\n# epub_uid = ''\n\n# HTML files that should be inserted before the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n# epub_pre_files = []\n\n# HTML files that should be inserted after the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n# epub_post_files = []\n\n# A list of files that should not be packed into the epub file.\n# epub_exclude_files = []\n\n# The depth of the table of contents in toc.ncx.\n# epub_tocdepth = 3\n\n# Allow duplicate toc entries.\n# epub_tocdup = True\n\n\n# -- Options for texinfo output ------------------------------------------------\n\ntexinfo_documents = [\n    (\n        master_doc,\n        \"pytest\",\n        \"pytest Documentation\",\n        (\n            \"Holger Krekel@*Benjamin Peterson@*Ronny Pfannschmidt@*\"\n            \"Floris Bruynooghe@*others\"\n        ),\n        \"pytest\",\n        \"simple powerful testing with Python\",\n        \"Programming\",\n        1,\n    )\n]\n\n# -- Options for towncrier_draft extension -----------------------------------\n\ntowncrier_draft_autoversion_mode = \"draft\"  # or: 'sphinx-version', 'sphinx-release'\ntowncrier_draft_include_empty = True\ntowncrier_draft_working_directory = PROJECT_ROOT_DIR\ntowncrier_draft_config_path = \"pyproject.toml\"  # relative to cwd\n\n\n# -- Options for sphinx_issues extension -----------------------------------\n\nissues_github_path = \"pytest-dev/pytest\"\n\n\nintersphinx_mapping = {\n    \"pluggy\": (\"https://pluggy.readthedocs.io/en/stable\", None),\n    \"python\": (\"https://docs.python.org/3\", None),\n    \"numpy\": (\"https://numpy.org/doc/stable\", None),\n    \"pip\": (\"https://pip.pypa.io/en/stable\", None),\n    \"tox\": (\"https://tox.wiki/en/stable\", None),\n    \"virtualenv\": (\"https://virtualenv.pypa.io/en/stable\", None),\n    \"setuptools\": (\"https://setuptools.pypa.io/en/stable\", None),\n    \"packaging\": (\"https://packaging.python.org/en/latest\", None),\n}\n\n\ndef setup(app: sphinx.application.Sphinx) -> None:\n    app.add_crossref_type(\n        \"fixture\",\n        \"fixture\",\n        objname=\"built-in fixture\",\n        indextemplate=\"pair: %s; fixture\",\n    )\n\n    app.add_object_type(\n        \"confval\",\n        \"confval\",\n        objname=\"configuration value\",\n        indextemplate=\"pair: %s; configuration value\",\n    )\n\n    app.add_object_type(\n        \"globalvar\",\n        \"globalvar\",\n        objname=\"global variable interpreted by pytest\",\n        indextemplate=\"pair: %s; global variable interpreted by pytest\",\n    )\n\n    app.add_crossref_type(\n        directivename=\"hook\",\n        rolename=\"hook\",\n        objname=\"pytest hook\",\n        indextemplate=\"pair: %s; hook\",\n    )\n\n    # legacypath.py monkey-patches pytest.Testdir in. Import the file so\n    # that autodoc can discover references to it.\n    import _pytest.legacypath  # noqa: F401\n", "doc/en/conftest.py": "from __future__ import annotations\n\n\ncollect_ignore = [\"conf.py\"]\n", "doc/en/example/xfail_demo.py": "from __future__ import annotations\n\nimport pytest\n\n\nxfail = pytest.mark.xfail\n\n\n@xfail\ndef test_hello():\n    assert 0\n\n\n@xfail(run=False)\ndef test_hello2():\n    assert 0\n\n\n@xfail(\"hasattr(os, 'sep')\")\ndef test_hello3():\n    assert 0\n\n\n@xfail(reason=\"bug 110\")\ndef test_hello4():\n    assert 0\n\n\n@xfail('pytest.__version__[0] != \"17\"')\ndef test_hello5():\n    assert 0\n\n\ndef test_hello6():\n    pytest.xfail(\"reason\")\n\n\n@xfail(raises=IndexError)\ndef test_hello7():\n    x = []\n    x[1] = 1\n", "doc/en/example/pythoncollection.py": "# run this with $ pytest --collect-only test_collectonly.py\n#\nfrom __future__ import annotations\n\n\ndef test_function():\n    pass\n\n\nclass TestClass:\n    def test_method(self):\n        pass\n\n    def test_anothermethod(self):\n        pass\n", "doc/en/example/multipython.py": "\"\"\"Module containing a parametrized tests testing cross-python serialization\nvia the pickle module.\"\"\"\n\nfrom __future__ import annotations\n\nimport shutil\nimport subprocess\nimport textwrap\n\nimport pytest\n\n\npythonlist = [\"python3.9\", \"python3.10\", \"python3.11\"]\n\n\n@pytest.fixture(params=pythonlist)\ndef python1(request, tmp_path):\n    picklefile = tmp_path / \"data.pickle\"\n    return Python(request.param, picklefile)\n\n\n@pytest.fixture(params=pythonlist)\ndef python2(request, python1):\n    return Python(request.param, python1.picklefile)\n\n\nclass Python:\n    def __init__(self, version, picklefile):\n        self.pythonpath = shutil.which(version)\n        if not self.pythonpath:\n            pytest.skip(f\"{version!r} not found\")\n        self.picklefile = picklefile\n\n    def dumps(self, obj):\n        dumpfile = self.picklefile.with_name(\"dump.py\")\n        dumpfile.write_text(\n            textwrap.dedent(\n                rf\"\"\"\n                import pickle\n                f = open({str(self.picklefile)!r}, 'wb')\n                s = pickle.dump({obj!r}, f, protocol=2)\n                f.close()\n                \"\"\"\n            )\n        )\n        subprocess.run((self.pythonpath, str(dumpfile)), check=True)\n\n    def load_and_is_true(self, expression):\n        loadfile = self.picklefile.with_name(\"load.py\")\n        loadfile.write_text(\n            textwrap.dedent(\n                rf\"\"\"\n                import pickle\n                f = open({str(self.picklefile)!r}, 'rb')\n                obj = pickle.load(f)\n                f.close()\n                res = eval({expression!r})\n                if not res:\n                    raise SystemExit(1)\n                \"\"\"\n            )\n        )\n        print(loadfile)\n        subprocess.run((self.pythonpath, str(loadfile)), check=True)\n\n\n@pytest.mark.parametrize(\"obj\", [42, {}, {1: 3}])\ndef test_basic_objects(python1, python2, obj):\n    python1.dumps(obj)\n    python2.load_and_is_true(f\"obj == {obj}\")\n", "doc/en/example/conftest.py": "from __future__ import annotations\n\n\ncollect_ignore = [\"nonpython\", \"customdirectory\"]\n", "doc/en/example/nonpython/conftest.py": "# content of conftest.py\nfrom __future__ import annotations\n\nimport pytest\n\n\ndef pytest_collect_file(parent, file_path):\n    if file_path.suffix == \".yaml\" and file_path.name.startswith(\"test\"):\n        return YamlFile.from_parent(parent, path=file_path)\n\n\nclass YamlFile(pytest.File):\n    def collect(self):\n        # We need a yaml parser, e.g. PyYAML.\n        import yaml\n\n        raw = yaml.safe_load(self.path.open(encoding=\"utf-8\"))\n        for name, spec in sorted(raw.items()):\n            yield YamlItem.from_parent(self, name=name, spec=spec)\n\n\nclass YamlItem(pytest.Item):\n    def __init__(self, *, spec, **kwargs):\n        super().__init__(**kwargs)\n        self.spec = spec\n\n    def runtest(self):\n        for name, value in sorted(self.spec.items()):\n            # Some custom test execution (dumb example follows).\n            if name != value:\n                raise YamlException(self, name, value)\n\n    def repr_failure(self, excinfo):\n        \"\"\"Called when self.runtest() raises an exception.\"\"\"\n        if isinstance(excinfo.value, YamlException):\n            return \"\\n\".join(\n                [\n                    \"usecase execution failed\",\n                    \"   spec failed: {1!r}: {2!r}\".format(*excinfo.value.args),\n                    \"   no further details known at this point.\",\n                ]\n            )\n        return super().repr_failure(excinfo)\n\n    def reportinfo(self):\n        return self.path, 0, f\"usecase: {self.name}\"\n\n\nclass YamlException(Exception):\n    \"\"\"Custom exception for error reporting.\"\"\"\n", "doc/en/example/nonpython/__init__.py": "", "doc/en/example/customdirectory/conftest.py": "# content of conftest.py\nfrom __future__ import annotations\n\nimport json\n\nimport pytest\n\n\nclass ManifestDirectory(pytest.Directory):\n    def collect(self):\n        # The standard pytest behavior is to loop over all `test_*.py` files and\n        # call `pytest_collect_file` on each file. This collector instead reads\n        # the `manifest.json` file and only calls `pytest_collect_file` for the\n        # files defined there.\n        manifest_path = self.path / \"manifest.json\"\n        manifest = json.loads(manifest_path.read_text(encoding=\"utf-8\"))\n        ihook = self.ihook\n        for file in manifest[\"files\"]:\n            yield from ihook.pytest_collect_file(\n                file_path=self.path / file, parent=self\n            )\n\n\n@pytest.hookimpl\ndef pytest_collect_directory(path, parent):\n    # Use our custom collector for directories containing a `manifest.json` file.\n    if path.joinpath(\"manifest.json\").is_file():\n        return ManifestDirectory.from_parent(parent=parent, path=path)\n    # Otherwise fallback to the standard behavior.\n    return None\n", "doc/en/example/customdirectory/tests/test_third.py": "# content of test_third.py\nfrom __future__ import annotations\n\n\ndef test_3():\n    pass\n", "doc/en/example/customdirectory/tests/test_second.py": "# content of test_second.py\nfrom __future__ import annotations\n\n\ndef test_2():\n    pass\n", "doc/en/example/customdirectory/tests/test_first.py": "# content of test_first.py\nfrom __future__ import annotations\n\n\ndef test_1():\n    pass\n", "doc/en/example/assertion/test_failures.py": "from __future__ import annotations\n\nimport os.path\nimport shutil\n\n\nfailure_demo = os.path.join(os.path.dirname(__file__), \"failure_demo.py\")\npytest_plugins = (\"pytester\",)\n\n\ndef test_failure_demo_fails_properly(pytester):\n    target = pytester.path.joinpath(os.path.basename(failure_demo))\n    shutil.copy(failure_demo, target)\n    result = pytester.runpytest(target, syspathinsert=True)\n    result.stdout.fnmatch_lines([\"*44 failed*\"])\n    assert result.ret != 0\n", "doc/en/example/assertion/test_setup_flow_example.py": "from __future__ import annotations\n\n\ndef setup_module(module):\n    module.TestStateFullThing.classcount = 0\n\n\nclass TestStateFullThing:\n    def setup_class(cls):\n        cls.classcount += 1\n\n    def teardown_class(cls):\n        cls.classcount -= 1\n\n    def setup_method(self, method):\n        self.id = eval(method.__name__[5:])\n\n    def test_42(self):\n        assert self.classcount == 1\n        assert self.id == 42\n\n    def test_23(self):\n        assert self.classcount == 1\n        assert self.id == 23\n\n\ndef teardown_module(module):\n    assert module.TestStateFullThing.classcount == 0\n\n\n\"\"\" For this example the control flow happens as follows::\n    import test_setup_flow_example\n    setup_module(test_setup_flow_example)\n       setup_class(TestStateFullThing)\n           instance = TestStateFullThing()\n           setup_method(instance, instance.test_42)\n              instance.test_42()\n           setup_method(instance, instance.test_23)\n              instance.test_23()\n       teardown_class(TestStateFullThing)\n    teardown_module(test_setup_flow_example)\n\nNote that ``setup_class(TestStateFullThing)`` is called and not\n``TestStateFullThing.setup_class()`` which would require you\nto insert ``setup_class = classmethod(setup_class)`` to make\nyour setup function callable.\n\"\"\"\n", "doc/en/example/assertion/failure_demo.py": "from __future__ import annotations\n\nimport pytest\nfrom pytest import raises\n\n\ndef otherfunc(a, b):\n    assert a == b\n\n\ndef somefunc(x, y):\n    otherfunc(x, y)\n\n\ndef otherfunc_multi(a, b):\n    assert a == b\n\n\n@pytest.mark.parametrize(\"param1, param2\", [(3, 6)])\ndef test_generative(param1, param2):\n    assert param1 * 2 < param2\n\n\nclass TestFailing:\n    def test_simple(self):\n        def f():\n            return 42\n\n        def g():\n            return 43\n\n        assert f() == g()\n\n    def test_simple_multiline(self):\n        otherfunc_multi(42, 6 * 9)\n\n    def test_not(self):\n        def f():\n            return 42\n\n        assert not f()\n\n\nclass TestSpecialisedExplanations:\n    def test_eq_text(self):\n        assert \"spam\" == \"eggs\"\n\n    def test_eq_similar_text(self):\n        assert \"foo 1 bar\" == \"foo 2 bar\"\n\n    def test_eq_multiline_text(self):\n        assert \"foo\\nspam\\nbar\" == \"foo\\neggs\\nbar\"\n\n    def test_eq_long_text(self):\n        a = \"1\" * 100 + \"a\" + \"2\" * 100\n        b = \"1\" * 100 + \"b\" + \"2\" * 100\n        assert a == b\n\n    def test_eq_long_text_multiline(self):\n        a = \"1\\n\" * 100 + \"a\" + \"2\\n\" * 100\n        b = \"1\\n\" * 100 + \"b\" + \"2\\n\" * 100\n        assert a == b\n\n    def test_eq_list(self):\n        assert [0, 1, 2] == [0, 1, 3]\n\n    def test_eq_list_long(self):\n        a = [0] * 100 + [1] + [3] * 100\n        b = [0] * 100 + [2] + [3] * 100\n        assert a == b\n\n    def test_eq_dict(self):\n        assert {\"a\": 0, \"b\": 1, \"c\": 0} == {\"a\": 0, \"b\": 2, \"d\": 0}\n\n    def test_eq_set(self):\n        assert {0, 10, 11, 12} == {0, 20, 21}\n\n    def test_eq_longer_list(self):\n        assert [1, 2] == [1, 2, 3]\n\n    def test_in_list(self):\n        assert 1 in [0, 2, 3, 4, 5]\n\n    def test_not_in_text_multiline(self):\n        text = \"some multiline\\ntext\\nwhich\\nincludes foo\\nand a\\ntail\"\n        assert \"foo\" not in text\n\n    def test_not_in_text_single(self):\n        text = \"single foo line\"\n        assert \"foo\" not in text\n\n    def test_not_in_text_single_long(self):\n        text = \"head \" * 50 + \"foo \" + \"tail \" * 20\n        assert \"foo\" not in text\n\n    def test_not_in_text_single_long_term(self):\n        text = \"head \" * 50 + \"f\" * 70 + \"tail \" * 20\n        assert \"f\" * 70 not in text\n\n    def test_eq_dataclass(self):\n        from dataclasses import dataclass\n\n        @dataclass\n        class Foo:\n            a: int\n            b: str\n\n        left = Foo(1, \"b\")\n        right = Foo(1, \"c\")\n        assert left == right\n\n    def test_eq_attrs(self):\n        import attr\n\n        @attr.s\n        class Foo:\n            a = attr.ib()\n            b = attr.ib()\n\n        left = Foo(1, \"b\")\n        right = Foo(1, \"c\")\n        assert left == right\n\n\ndef test_attribute():\n    class Foo:\n        b = 1\n\n    i = Foo()\n    assert i.b == 2\n\n\ndef test_attribute_instance():\n    class Foo:\n        b = 1\n\n    assert Foo().b == 2\n\n\ndef test_attribute_failure():\n    class Foo:\n        def _get_b(self):\n            raise Exception(\"Failed to get attrib\")\n\n        b = property(_get_b)\n\n    i = Foo()\n    assert i.b == 2\n\n\ndef test_attribute_multiple():\n    class Foo:\n        b = 1\n\n    class Bar:\n        b = 2\n\n    assert Foo().b == Bar().b\n\n\ndef globf(x):\n    return x + 1\n\n\nclass TestRaises:\n    def test_raises(self):\n        s = \"qwe\"\n        raises(TypeError, int, s)\n\n    def test_raises_doesnt(self):\n        raises(OSError, int, \"3\")\n\n    def test_raise(self):\n        raise ValueError(\"demo error\")\n\n    def test_tupleerror(self):\n        a, b = [1]  # noqa: F841\n\n    def test_reinterpret_fails_with_print_for_the_fun_of_it(self):\n        items = [1, 2, 3]\n        print(f\"items is {items!r}\")\n        a, b = items.pop()\n\n    def test_some_error(self):\n        if namenotexi:  # noqa: F821\n            pass\n\n    def func1(self):\n        assert 41 == 42\n\n\n# thanks to Matthew Scott for this test\ndef test_dynamic_compile_shows_nicely():\n    import importlib.util\n    import sys\n\n    src = \"def foo():\\n assert 1 == 0\\n\"\n    name = \"abc-123\"\n    spec = importlib.util.spec_from_loader(name, loader=None)\n    module = importlib.util.module_from_spec(spec)\n    code = compile(src, name, \"exec\")\n    exec(code, module.__dict__)\n    sys.modules[name] = module\n    module.foo()\n\n\nclass TestMoreErrors:\n    def test_complex_error(self):\n        def f():\n            return 44\n\n        def g():\n            return 43\n\n        somefunc(f(), g())\n\n    def test_z1_unpack_error(self):\n        items = []\n        a, b = items\n\n    def test_z2_type_error(self):\n        items = 3\n        a, b = items\n\n    def test_startswith(self):\n        s = \"123\"\n        g = \"456\"\n        assert s.startswith(g)\n\n    def test_startswith_nested(self):\n        def f():\n            return \"123\"\n\n        def g():\n            return \"456\"\n\n        assert f().startswith(g())\n\n    def test_global_func(self):\n        assert isinstance(globf(42), float)\n\n    def test_instance(self):\n        self.x = 6 * 7\n        assert self.x != 42\n\n    def test_compare(self):\n        assert globf(10) < 5\n\n    def test_try_finally(self):\n        x = 1\n        try:\n            assert x == 0\n        finally:\n            x = 0\n\n\nclass TestCustomAssertMsg:\n    def test_single_line(self):\n        class A:\n            a = 1\n\n        b = 2\n        assert A.a == b, \"A.a appears not to be b\"\n\n    def test_multiline(self):\n        class A:\n            a = 1\n\n        b = 2\n        assert (\n            A.a == b\n        ), \"A.a appears not to be b\\nor does not appear to be b\\none of those\"\n\n    def test_custom_repr(self):\n        class JSON:\n            a = 1\n\n            def __repr__(self):\n                return \"This is JSON\\n{\\n  'foo': 'bar'\\n}\"\n\n        a = JSON()\n        b = 2\n        assert a.a == b, a\n", "doc/en/example/assertion/global_testmodule_config/test_hello_world.py": "from __future__ import annotations\n\n\nhello = \"world\"\n\n\ndef test_func():\n    pass\n", "doc/en/example/assertion/global_testmodule_config/conftest.py": "from __future__ import annotations\n\nimport os.path\n\nimport pytest\n\n\nmydir = os.path.dirname(__file__)\n\n\ndef pytest_runtest_setup(item):\n    if isinstance(item, pytest.Function):\n        if not item.fspath.relto(mydir):\n            return\n        mod = item.getparent(pytest.Module).obj\n        if hasattr(mod, \"hello\"):\n            print(f\"mod.hello {mod.hello!r}\")\n", "doc/en/example/fixtures/test_fixtures_order_autouse_multiple_scopes.py": "from __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture(scope=\"class\")\ndef order():\n    return []\n\n\n@pytest.fixture(scope=\"class\", autouse=True)\ndef c1(order):\n    order.append(\"c1\")\n\n\n@pytest.fixture(scope=\"class\")\ndef c2(order):\n    order.append(\"c2\")\n\n\n@pytest.fixture(scope=\"class\")\ndef c3(order, c1):\n    order.append(\"c3\")\n\n\nclass TestClassWithC1Request:\n    def test_order(self, order, c1, c3):\n        assert order == [\"c1\", \"c3\"]\n\n\nclass TestClassWithoutC1Request:\n    def test_order(self, order, c2):\n        assert order == [\"c1\", \"c2\"]\n", "doc/en/example/fixtures/test_fixtures_order_scope.py": "from __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture(scope=\"session\")\ndef order():\n    return []\n\n\n@pytest.fixture\ndef func(order):\n    order.append(\"function\")\n\n\n@pytest.fixture(scope=\"class\")\ndef cls(order):\n    order.append(\"class\")\n\n\n@pytest.fixture(scope=\"module\")\ndef mod(order):\n    order.append(\"module\")\n\n\n@pytest.fixture(scope=\"package\")\ndef pack(order):\n    order.append(\"package\")\n\n\n@pytest.fixture(scope=\"session\")\ndef sess(order):\n    order.append(\"session\")\n\n\nclass TestClass:\n    def test_order(self, func, cls, mod, pack, sess, order):\n        assert order == [\"session\", \"package\", \"module\", \"class\", \"function\"]\n", "doc/en/example/fixtures/test_fixtures_order_autouse.py": "from __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef order():\n    return []\n\n\n@pytest.fixture\ndef a(order):\n    order.append(\"a\")\n\n\n@pytest.fixture\ndef b(a, order):\n    order.append(\"b\")\n\n\n@pytest.fixture(autouse=True)\ndef c(b, order):\n    order.append(\"c\")\n\n\n@pytest.fixture\ndef d(b, order):\n    order.append(\"d\")\n\n\n@pytest.fixture\ndef e(d, order):\n    order.append(\"e\")\n\n\n@pytest.fixture\ndef f(e, order):\n    order.append(\"f\")\n\n\n@pytest.fixture\ndef g(f, c, order):\n    order.append(\"g\")\n\n\ndef test_order_and_g(g, order):\n    assert order == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n", "doc/en/example/fixtures/test_fixtures_order_autouse_temp_effects.py": "from __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef order():\n    return []\n\n\n@pytest.fixture\ndef c1(order):\n    order.append(\"c1\")\n\n\n@pytest.fixture\ndef c2(order):\n    order.append(\"c2\")\n\n\nclass TestClassWithAutouse:\n    @pytest.fixture(autouse=True)\n    def c3(self, order, c2):\n        order.append(\"c3\")\n\n    def test_req(self, order, c1):\n        assert order == [\"c2\", \"c3\", \"c1\"]\n\n    def test_no_req(self, order):\n        assert order == [\"c2\", \"c3\"]\n\n\nclass TestClassWithoutAutouse:\n    def test_req(self, order, c1):\n        assert order == [\"c1\"]\n\n    def test_no_req(self, order):\n        assert order == []\n", "doc/en/example/fixtures/test_fixtures_order_dependencies.py": "from __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef order():\n    return []\n\n\n@pytest.fixture\ndef a(order):\n    order.append(\"a\")\n\n\n@pytest.fixture\ndef b(a, order):\n    order.append(\"b\")\n\n\n@pytest.fixture\ndef c(b, order):\n    order.append(\"c\")\n\n\n@pytest.fixture\ndef d(c, b, order):\n    order.append(\"d\")\n\n\n@pytest.fixture\ndef e(d, b, order):\n    order.append(\"e\")\n\n\n@pytest.fixture\ndef f(e, order):\n    order.append(\"f\")\n\n\n@pytest.fixture\ndef g(f, c, order):\n    order.append(\"g\")\n\n\ndef test_order(g, order):\n    assert order == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n", "doc/en/example/fixtures/test_fixtures_request_different_scope.py": "from __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef order():\n    return []\n\n\n@pytest.fixture\ndef outer(order, inner):\n    order.append(\"outer\")\n\n\nclass TestOne:\n    @pytest.fixture\n    def inner(self, order):\n        order.append(\"one\")\n\n    def test_order(self, order, outer):\n        assert order == [\"one\", \"outer\"]\n\n\nclass TestTwo:\n    @pytest.fixture\n    def inner(self, order):\n        order.append(\"two\")\n\n    def test_order(self, order, outer):\n        assert order == [\"two\", \"outer\"]\n", "scripts/release.py": "# mypy: disallow-untyped-defs\n\"\"\"Invoke development tasks.\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport os\nfrom pathlib import Path\nfrom subprocess import call\nfrom subprocess import check_call\nfrom subprocess import check_output\n\nfrom colorama import Fore\nfrom colorama import init\n\n\ndef announce(version: str, template_name: str, doc_version: str) -> None:\n    \"\"\"Generates a new release announcement entry in the docs.\"\"\"\n    # Get our list of authors\n    stdout = check_output([\"git\", \"describe\", \"--abbrev=0\", \"--tags\"], encoding=\"UTF-8\")\n    last_version = stdout.strip()\n\n    stdout = check_output(\n        [\"git\", \"log\", f\"{last_version}..HEAD\", \"--format=%aN\"], encoding=\"UTF-8\"\n    )\n\n    contributors = {\n        name\n        for name in stdout.splitlines()\n        if not name.endswith(\"[bot]\") and name != \"pytest bot\"\n    }\n\n    template_text = (\n        Path(__file__).parent.joinpath(template_name).read_text(encoding=\"UTF-8\")\n    )\n\n    contributors_text = \"\\n\".join(f\"* {name}\" for name in sorted(contributors)) + \"\\n\"\n    text = template_text.format(\n        version=version, contributors=contributors_text, doc_version=doc_version\n    )\n\n    target = Path(__file__).parent.joinpath(f\"../doc/en/announce/release-{version}.rst\")\n    target.write_text(text, encoding=\"UTF-8\")\n    print(f\"{Fore.CYAN}[generate.announce] {Fore.RESET}Generated {target.name}\")\n\n    # Update index with the new release entry\n    index_path = Path(__file__).parent.joinpath(\"../doc/en/announce/index.rst\")\n    lines = index_path.read_text(encoding=\"UTF-8\").splitlines()\n    indent = \"   \"\n    for index, line in enumerate(lines):\n        if line.startswith(f\"{indent}release-\"):\n            new_line = indent + target.stem\n            if line != new_line:\n                lines.insert(index, new_line)\n                index_path.write_text(\"\\n\".join(lines) + \"\\n\", encoding=\"UTF-8\")\n                print(\n                    f\"{Fore.CYAN}[generate.announce] {Fore.RESET}Updated {index_path.name}\"\n                )\n            else:\n                print(\n                    f\"{Fore.CYAN}[generate.announce] {Fore.RESET}Skip {index_path.name} (already contains release)\"\n                )\n            break\n\n    check_call([\"git\", \"add\", str(target)])\n\n\ndef regen(version: str) -> None:\n    \"\"\"Call regendoc tool to update examples and pytest output in the docs.\"\"\"\n    print(f\"{Fore.CYAN}[generate.regen] {Fore.RESET}Updating docs\")\n    check_call(\n        [\"tox\", \"-e\", \"regen\"],\n        env={**os.environ, \"SETUPTOOLS_SCM_PRETEND_VERSION_FOR_PYTEST\": version},\n    )\n\n\ndef fix_formatting() -> None:\n    \"\"\"Runs pre-commit in all files to ensure they are formatted correctly\"\"\"\n    print(\n        f\"{Fore.CYAN}[generate.fix linting] {Fore.RESET}Fixing formatting using pre-commit\"\n    )\n    call([\"pre-commit\", \"run\", \"--all-files\"])\n\n\ndef check_links() -> None:\n    \"\"\"Runs sphinx-build to check links\"\"\"\n    print(f\"{Fore.CYAN}[generate.check_links] {Fore.RESET}Checking links\")\n    check_call([\"tox\", \"-e\", \"docs-checklinks\"])\n\n\ndef pre_release(\n    version: str, template_name: str, doc_version: str, *, skip_check_links: bool\n) -> None:\n    \"\"\"Generates new docs, release announcements and creates a local tag.\"\"\"\n    announce(version, template_name, doc_version)\n    regen(version)\n    changelog(version, write_out=True)\n    fix_formatting()\n    if not skip_check_links:\n        check_links()\n\n    msg = f\"Prepare release version {version}\"\n    check_call([\"git\", \"commit\", \"-a\", \"-m\", msg])\n\n    print()\n    print(f\"{Fore.CYAN}[generate.pre_release] {Fore.GREEN}All done!\")\n    print()\n    print(\"Please push your branch and open a PR.\")\n\n\ndef changelog(version: str, write_out: bool = False) -> None:\n    addopts = [] if write_out else [\"--draft\"]\n    check_call([\"towncrier\", \"--yes\", \"--version\", version, *addopts])\n\n\ndef main() -> None:\n    init(autoreset=True)\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"version\", help=\"Release version\")\n    parser.add_argument(\n        \"template_name\", help=\"Name of template file to use for release announcement\"\n    )\n    parser.add_argument(\n        \"doc_version\", help=\"For prereleases, the version to link to in the docs\"\n    )\n    parser.add_argument(\"--skip-check-links\", action=\"store_true\", default=False)\n    options = parser.parse_args()\n    pre_release(\n        options.version,\n        options.template_name,\n        options.doc_version,\n        skip_check_links=options.skip_check_links,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n", "scripts/update-plugin-list.py": "# mypy: disallow-untyped-defs\nfrom __future__ import annotations\n\nimport datetime\nimport pathlib\nimport re\nfrom textwrap import dedent\nfrom textwrap import indent\nfrom typing import Any\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import TypedDict\n\nimport packaging.version\nimport platformdirs\nfrom requests_cache import CachedResponse\nfrom requests_cache import CachedSession\nfrom requests_cache import OriginalResponse\nfrom requests_cache import SQLiteCache\nimport tabulate\nfrom tqdm import tqdm\nimport wcwidth\n\n\nFILE_HEAD = r\"\"\"\n.. Note this file is autogenerated by scripts/update-plugin-list.py - usually weekly via github action\n\n.. _plugin-list:\n\nPytest Plugin List\n==================\n\nBelow is an automated compilation of ``pytest``` plugins available on `PyPI <https://pypi.org>`_.\nIt includes PyPI projects whose names begin with ``pytest-`` or ``pytest_`` and a handful of manually selected projects.\nPackages classified as inactive are excluded.\n\nFor detailed insights into how this list is generated,\nplease refer to `the update script <https://github.com/pytest-dev/pytest/blob/main/scripts/update-plugin-list.py>`_.\n\n.. warning::\n\n   Please be aware that this list is not a curated collection of projects\n   and does not undergo a systematic review process.\n   It serves purely as an informational resource to aid in the discovery of ``pytest`` plugins.\n\n   Do not presume any endorsement from the ``pytest`` project or its developers,\n   and always conduct your own quality assessment before incorporating any of these plugins into your own projects.\n\n\n.. The following conditional uses a different format for this list when\n   creating a PDF, because otherwise the table gets far too wide for the\n   page.\n\n\"\"\"\nDEVELOPMENT_STATUS_CLASSIFIERS = (\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n)\nADDITIONAL_PROJECTS = {  # set of additional projects to consider as plugins\n    \"logassert\",\n    \"logot\",\n    \"nuts\",\n    \"flask_fixture\",\n}\n\n\ndef escape_rst(text: str) -> str:\n    \"\"\"Rudimentary attempt to escape special RST characters to appear as\n    plain text.\"\"\"\n    text = (\n        text.replace(\"*\", \"\\\\*\")\n        .replace(\"<\", \"\\\\<\")\n        .replace(\">\", \"\\\\>\")\n        .replace(\"`\", \"\\\\`\")\n    )\n    text = re.sub(r\"_\\b\", \"\", text)\n    return text\n\n\ndef project_response_with_refresh(\n    session: CachedSession, name: str, last_serial: int\n) -> OriginalResponse | CachedResponse:\n    \"\"\"Get a http cached pypi project\n\n    force refresh in case of last serial mismatch\n    \"\"\"\n    response = session.get(f\"https://pypi.org/pypi/{name}/json\")\n    if int(response.headers.get(\"X-PyPI-Last-Serial\", -1)) != last_serial:\n        response = session.get(f\"https://pypi.org/pypi/{name}/json\", refresh=True)\n    return response\n\n\ndef get_session() -> CachedSession:\n    \"\"\"Configures the requests-cache session\"\"\"\n    cache_path = platformdirs.user_cache_path(\"pytest-plugin-list\")\n    cache_path.mkdir(exist_ok=True, parents=True)\n    cache_file = cache_path.joinpath(\"http_cache.sqlite3\")\n    return CachedSession(backend=SQLiteCache(cache_file))\n\n\ndef pytest_plugin_projects_from_pypi(session: CachedSession) -> dict[str, int]:\n    response = session.get(\n        \"https://pypi.org/simple\",\n        headers={\"Accept\": \"application/vnd.pypi.simple.v1+json\"},\n        refresh=True,\n    )\n    return {\n        name: p[\"_last-serial\"]\n        for p in response.json()[\"projects\"]\n        if (\n            (name := p[\"name\"]).startswith((\"pytest-\", \"pytest_\"))\n            or name in ADDITIONAL_PROJECTS\n        )\n    }\n\n\nclass PluginInfo(TypedDict):\n    \"\"\"Relevant information about a plugin to generate the summary.\"\"\"\n\n    name: str\n    summary: str\n    last_release: str\n    status: str\n    requires: str\n\n\ndef iter_plugins() -> Iterator[PluginInfo]:\n    session = get_session()\n    name_2_serial = pytest_plugin_projects_from_pypi(session)\n\n    for name, last_serial in tqdm(name_2_serial.items(), smoothing=0):\n        response = project_response_with_refresh(session, name, last_serial)\n        if response.status_code == 404:\n            # Some packages, like pytest-azurepipelines42, are included in https://pypi.org/simple\n            # but return 404 on the JSON API. Skip.\n            continue\n        response.raise_for_status()\n        info = response.json()[\"info\"]\n        if \"Development Status :: 7 - Inactive\" in info[\"classifiers\"]:\n            continue\n        for classifier in DEVELOPMENT_STATUS_CLASSIFIERS:\n            if classifier in info[\"classifiers\"]:\n                status = classifier[22:]\n                break\n        else:\n            status = \"N/A\"\n        requires = \"N/A\"\n        if info[\"requires_dist\"]:\n            for requirement in info[\"requires_dist\"]:\n                if re.match(r\"pytest(?![-.\\w])\", requirement):\n                    requires = requirement\n                    break\n\n        def version_sort_key(version_string: str) -> Any:\n            \"\"\"\n            Return the sort key for the given version string\n            returned by the API.\n            \"\"\"\n            try:\n                return packaging.version.parse(version_string)\n            except packaging.version.InvalidVersion:\n                # Use a hard-coded pre-release version.\n                return packaging.version.Version(\"0.0.0alpha\")\n\n        releases = response.json()[\"releases\"]\n        for release in sorted(releases, key=version_sort_key, reverse=True):\n            if releases[release]:\n                release_date = datetime.date.fromisoformat(\n                    releases[release][-1][\"upload_time_iso_8601\"].split(\"T\")[0]\n                )\n                last_release = release_date.strftime(\"%b %d, %Y\")\n                break\n        name = f':pypi:`{info[\"name\"]}`'\n        summary = \"\"\n        if info[\"summary\"]:\n            summary = escape_rst(info[\"summary\"].replace(\"\\n\", \"\"))\n        yield {\n            \"name\": name,\n            \"summary\": summary.strip(),\n            \"last_release\": last_release,\n            \"status\": status,\n            \"requires\": requires,\n        }\n\n\ndef plugin_definitions(plugins: Iterable[PluginInfo]) -> Iterator[str]:\n    \"\"\"Return RST for the plugin list that fits better on a vertical page.\"\"\"\n    for plugin in plugins:\n        yield dedent(\n            f\"\"\"\n            {plugin['name']}\n               *last release*: {plugin[\"last_release\"]},\n               *status*: {plugin[\"status\"]},\n               *requires*: {plugin[\"requires\"]}\n\n               {plugin[\"summary\"]}\n            \"\"\"\n        )\n\n\ndef main() -> None:\n    plugins = [*iter_plugins()]\n\n    reference_dir = pathlib.Path(\"doc\", \"en\", \"reference\")\n\n    plugin_list = reference_dir / \"plugin_list.rst\"\n    with plugin_list.open(\"w\", encoding=\"UTF-8\") as f:\n        f.write(FILE_HEAD)\n        f.write(f\"This list contains {len(plugins)} plugins.\\n\\n\")\n        f.write(\".. only:: not latex\\n\\n\")\n\n        _ = wcwidth  # reference library that must exist for tabulate to work\n        plugin_table = tabulate.tabulate(plugins, headers=\"keys\", tablefmt=\"rst\")\n        f.write(indent(plugin_table, \"   \"))\n        f.write(\"\\n\\n\")\n\n        f.write(\".. only:: latex\\n\\n\")\n        f.write(indent(\"\".join(plugin_definitions(plugins)), \"  \"))\n\n\nif __name__ == \"__main__\":\n    main()\n", "scripts/prepare-release-pr.py": "# mypy: disallow-untyped-defs\n\"\"\"\nThis script is part of the pytest release process which is triggered manually in the Actions\ntab of the repository.\n\nThe user will need to enter the base branch to start the release from (for example\n``6.1.x`` or ``main``) and if it should be a major release.\n\nThe appropriate version will be obtained based on the given branch automatically.\n\nAfter that, it will create a release using the `release` tox environment, and push a new PR.\n\n**Token**: currently the token from the GitHub Actions is used, pushed with\n`pytest bot <pytestbot@gmail.com>` commit author.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nfrom pathlib import Path\nimport re\nfrom subprocess import check_call\nfrom subprocess import check_output\nfrom subprocess import run\n\nfrom colorama import Fore\nfrom colorama import init\nfrom github3.repos import Repository\n\n\nclass InvalidFeatureRelease(Exception):\n    pass\n\n\nSLUG = \"pytest-dev/pytest\"\n\nPR_BODY = \"\"\"\\\nCreated by the [prepare release pr]\\\n(https://github.com/pytest-dev/pytest/actions/workflows/prepare-release-pr.yml) workflow.\n\nOnce all builds pass and it has been **approved** by one or more maintainers, start the \\\n[deploy](https://github.com/pytest-dev/pytest/actions/workflows/deploy.yml) workflow, using these parameters:\n\n* `Use workflow from`: `release-{version}`.\n* `Release version`: `{version}`.\n\nOr execute on the command line:\n\n```console\ngh workflow run deploy.yml -r release-{version} -f version={version}\n```\n\nAfter the workflow has been approved by a core maintainer, the package will be uploaded to PyPI automatically.\n\"\"\"\n\n\ndef login(token: str) -> Repository:\n    import github3\n\n    github = github3.login(token=token)\n    owner, repo = SLUG.split(\"/\")\n    return github.repository(owner, repo)\n\n\ndef prepare_release_pr(\n    base_branch: str, is_major: bool, token: str, prerelease: str\n) -> None:\n    print()\n    print(f\"Processing release for branch {Fore.CYAN}{base_branch}\")\n\n    check_call([\"git\", \"checkout\", f\"origin/{base_branch}\"])\n\n    changelog = Path(\"changelog\")\n\n    features = list(changelog.glob(\"*.feature.rst\"))\n    breaking = list(changelog.glob(\"*.breaking.rst\"))\n    is_feature_release = bool(features or breaking)\n\n    try:\n        version = find_next_version(\n            base_branch, is_major, is_feature_release, prerelease\n        )\n    except InvalidFeatureRelease as e:\n        print(f\"{Fore.RED}{e}\")\n        raise SystemExit(1) from None\n\n    print(f\"Version: {Fore.CYAN}{version}\")\n\n    release_branch = f\"release-{version}\"\n\n    run(\n        [\"git\", \"config\", \"user.name\", \"pytest bot\"],\n        check=True,\n    )\n    run(\n        [\"git\", \"config\", \"user.email\", \"pytestbot@gmail.com\"],\n        check=True,\n    )\n\n    run(\n        [\"git\", \"checkout\", \"-b\", release_branch, f\"origin/{base_branch}\"],\n        check=True,\n    )\n\n    print(f\"Branch {Fore.CYAN}{release_branch}{Fore.RESET} created.\")\n\n    if is_major:\n        template_name = \"release.major.rst\"\n    elif prerelease:\n        template_name = \"release.pre.rst\"\n    elif is_feature_release:\n        template_name = \"release.minor.rst\"\n    else:\n        template_name = \"release.patch.rst\"\n\n    # important to use tox here because we have changed branches, so dependencies\n    # might have changed as well\n    cmdline = [\n        \"tox\",\n        \"-e\",\n        \"release\",\n        \"--\",\n        version,\n        template_name,\n        release_branch,  # doc_version\n        \"--skip-check-links\",\n    ]\n    print(\"Running\", \" \".join(cmdline))\n    run(\n        cmdline,\n        check=True,\n    )\n\n    oauth_url = f\"https://{token}:x-oauth-basic@github.com/{SLUG}.git\"\n    run(\n        [\"git\", \"push\", oauth_url, f\"HEAD:{release_branch}\", \"--force\"],\n        check=True,\n    )\n    print(f\"Branch {Fore.CYAN}{release_branch}{Fore.RESET} pushed.\")\n\n    body = PR_BODY.format(version=version)\n    repo = login(token)\n    pr = repo.create_pull(\n        f\"Prepare release {version}\",\n        base=base_branch,\n        head=release_branch,\n        body=body,\n    )\n    print(f\"Pull request {Fore.CYAN}{pr.url}{Fore.RESET} created.\")\n\n\ndef find_next_version(\n    base_branch: str, is_major: bool, is_feature_release: bool, prerelease: str\n) -> str:\n    output = check_output([\"git\", \"tag\"], encoding=\"UTF-8\")\n    valid_versions = []\n    for v in output.splitlines():\n        m = re.match(r\"\\d.\\d.\\d+$\", v.strip())\n        if m:\n            valid_versions.append(tuple(int(x) for x in v.split(\".\")))\n\n    valid_versions.sort()\n    last_version = valid_versions[-1]\n\n    if is_major:\n        return f\"{last_version[0]+1}.0.0{prerelease}\"\n    elif is_feature_release:\n        return f\"{last_version[0]}.{last_version[1] + 1}.0{prerelease}\"\n    else:\n        return f\"{last_version[0]}.{last_version[1]}.{last_version[2] + 1}{prerelease}\"\n\n\ndef main() -> None:\n    init(autoreset=True)\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"base_branch\")\n    parser.add_argument(\"token\")\n    parser.add_argument(\"--major\", action=\"store_true\", default=False)\n    parser.add_argument(\"--prerelease\", default=\"\")\n    options = parser.parse_args()\n    prepare_release_pr(\n        base_branch=options.base_branch,\n        is_major=options.major,\n        token=options.token,\n        prerelease=options.prerelease,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n", "scripts/generate-gh-release-notes.py": "# mypy: disallow-untyped-defs\n\"\"\"\nScript used to generate a Markdown file containing only the changelog entries of a specific pytest release, which\nis then published as a GitHub Release during deploy (see workflows/deploy.yml).\n\nThe script requires ``pandoc`` to be previously installed in the system -- we need to convert from RST (the format of\nour CHANGELOG) into Markdown (which is required by GitHub Releases).\n\nRequires Python3.6+.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nimport re\nimport sys\nfrom typing import Sequence\n\nimport pypandoc\n\n\ndef extract_changelog_entries_for(version: str) -> str:\n    p = Path(__file__).parent.parent / \"doc/en/changelog.rst\"\n    changelog_lines = p.read_text(encoding=\"UTF-8\").splitlines()\n\n    title_regex = re.compile(r\"pytest (\\d\\.\\d+\\.\\d+\\w*) \\(\\d{4}-\\d{2}-\\d{2}\\)\")\n    consuming_version = False\n    version_lines = []\n    for line in changelog_lines:\n        m = title_regex.match(line)\n        if m:\n            # Found the version we want: start to consume lines until we find the next version title.\n            if m.group(1) == version:\n                consuming_version = True\n            # Found a new version title while parsing the version we want: break out.\n            elif consuming_version:\n                break\n        if consuming_version:\n            version_lines.append(line)\n\n    return \"\\n\".join(version_lines)\n\n\ndef convert_rst_to_md(text: str) -> str:\n    result = pypandoc.convert_text(\n        text, \"md\", format=\"rst\", extra_args=[\"--wrap=preserve\"]\n    )\n    assert isinstance(result, str), repr(result)\n    return result\n\n\ndef main(argv: Sequence[str]) -> int:\n    if len(argv) != 3:\n        print(\"Usage: generate-gh-release-notes VERSION FILE\")\n        return 2\n\n    version, filename = argv[1:3]\n    print(f\"Generating GitHub release notes for version {version}\")\n    rst_body = extract_changelog_entries_for(version)\n    md_body = convert_rst_to_md(rst_body)\n    Path(filename).write_text(md_body, encoding=\"UTF-8\")\n    print()\n    print(f\"Done: {filename}\")\n    print()\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main(sys.argv))\n", "testing/test_cacheprovider.py": "from __future__ import annotations\n\nfrom enum import auto\nfrom enum import Enum\nimport os\nfrom pathlib import Path\nimport shutil\nfrom typing import Any\nfrom typing import Generator\nfrom typing import Sequence\n\nfrom _pytest.compat import assert_never\nfrom _pytest.config import ExitCode\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nfrom _pytest.tmpdir import TempPathFactory\nimport pytest\n\n\npytest_plugins = (\"pytester\",)\n\n\nclass TestNewAPI:\n    def test_config_cache_mkdir(self, pytester: Pytester) -> None:\n        pytester.makeini(\"[pytest]\")\n        config = pytester.parseconfigure()\n        assert config.cache is not None\n        with pytest.raises(ValueError):\n            config.cache.mkdir(\"key/name\")\n\n        p = config.cache.mkdir(\"name\")\n        assert p.is_dir()\n\n    def test_cache_dir_permissions(self, pytester: Pytester) -> None:\n        \"\"\"The .pytest_cache directory should have world-readable permissions\n        (depending on umask).\n\n        Regression test for #12308.\n        \"\"\"\n        pytester.makeini(\"[pytest]\")\n        config = pytester.parseconfigure()\n        assert config.cache is not None\n        p = config.cache.mkdir(\"name\")\n        assert p.is_dir()\n        # Instead of messing with umask, make sure .pytest_cache has the same\n        # permissions as the default that `mkdir` gives `p`.\n        assert (p.parent.stat().st_mode & 0o777) == (p.stat().st_mode & 0o777)\n\n    def test_config_cache_dataerror(self, pytester: Pytester) -> None:\n        pytester.makeini(\"[pytest]\")\n        config = pytester.parseconfigure()\n        assert config.cache is not None\n        cache = config.cache\n        pytest.raises(TypeError, lambda: cache.set(\"key/name\", cache))\n        config.cache.set(\"key/name\", 0)\n        config.cache._getvaluepath(\"key/name\").write_bytes(b\"123invalid\")\n        val = config.cache.get(\"key/name\", -2)\n        assert val == -2\n\n    @pytest.mark.filterwarnings(\"ignore:could not create cache path\")\n    def test_cache_writefail_cachefile_silent(self, pytester: Pytester) -> None:\n        pytester.makeini(\"[pytest]\")\n        pytester.path.joinpath(\".pytest_cache\").write_text(\n            \"gone wrong\", encoding=\"utf-8\"\n        )\n        config = pytester.parseconfigure()\n        cache = config.cache\n        assert cache is not None\n        cache.set(\"test/broken\", [])\n\n    @pytest.fixture\n    def unwritable_cache_dir(self, pytester: Pytester) -> Generator[Path, None, None]:\n        cache_dir = pytester.path.joinpath(\".pytest_cache\")\n        cache_dir.mkdir()\n        mode = cache_dir.stat().st_mode\n        cache_dir.chmod(0)\n        if os.access(cache_dir, os.W_OK):\n            pytest.skip(\"Failed to make cache dir unwritable\")\n\n        yield cache_dir\n        cache_dir.chmod(mode)\n\n    @pytest.mark.filterwarnings(\n        \"ignore:could not create cache path:pytest.PytestWarning\"\n    )\n    def test_cache_writefail_permissions(\n        self, unwritable_cache_dir: Path, pytester: Pytester\n    ) -> None:\n        pytester.makeini(\"[pytest]\")\n        config = pytester.parseconfigure()\n        cache = config.cache\n        assert cache is not None\n        cache.set(\"test/broken\", [])\n\n    @pytest.mark.filterwarnings(\"default\")\n    def test_cache_failure_warns(\n        self,\n        pytester: Pytester,\n        monkeypatch: MonkeyPatch,\n        unwritable_cache_dir: Path,\n    ) -> None:\n        monkeypatch.setenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", \"1\")\n\n        pytester.makepyfile(\"def test_error(): raise Exception\")\n        result = pytester.runpytest()\n        assert result.ret == 1\n        # warnings from nodeids, lastfailed, and stepwise\n        result.stdout.fnmatch_lines(\n            [\n                # Validate location/stacklevel of warning from cacheprovider.\n                \"*= warnings summary =*\",\n                \"*/cacheprovider.py:*\",\n                \"  */cacheprovider.py:*: PytestCacheWarning: could not create cache path \"\n                f\"{unwritable_cache_dir}/v/cache/nodeids: *\",\n                '    config.cache.set(\"cache/nodeids\", sorted(self.cached_nodeids))',\n                \"*1 failed, 3 warnings in*\",\n            ]\n        )\n\n    def test_config_cache(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_configure(config):\n                # see that we get cache information early on\n                assert hasattr(config, \"cache\")\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_session(pytestconfig):\n                assert hasattr(pytestconfig, \"cache\")\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_cachefuncarg(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_cachefuncarg(cache):\n                val = cache.get(\"some/thing\", None)\n                assert val is None\n                cache.set(\"some/thing\", [1])\n                pytest.raises(TypeError, lambda: cache.get(\"some/thing\"))\n                val = cache.get(\"some/thing\", [])\n                assert val == [1]\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_custom_rel_cache_dir(self, pytester: Pytester) -> None:\n        rel_cache_dir = os.path.join(\"custom_cache_dir\", \"subdir\")\n        pytester.makeini(\n            f\"\"\"\n            [pytest]\n            cache_dir = {rel_cache_dir}\n        \"\"\"\n        )\n        pytester.makepyfile(test_errored=\"def test_error():\\n    assert False\")\n        pytester.runpytest()\n        assert pytester.path.joinpath(rel_cache_dir).is_dir()\n\n    def test_custom_abs_cache_dir(\n        self, pytester: Pytester, tmp_path_factory: TempPathFactory\n    ) -> None:\n        tmp = tmp_path_factory.mktemp(\"tmp\")\n        abs_cache_dir = tmp / \"custom_cache_dir\"\n        pytester.makeini(\n            f\"\"\"\n            [pytest]\n            cache_dir = {abs_cache_dir}\n        \"\"\"\n        )\n        pytester.makepyfile(test_errored=\"def test_error():\\n    assert False\")\n        pytester.runpytest()\n        assert abs_cache_dir.is_dir()\n\n    def test_custom_cache_dir_with_env_var(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.setenv(\"env_var\", \"custom_cache_dir\")\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            cache_dir = {cache_dir}\n        \"\"\".format(cache_dir=\"$env_var\")\n        )\n        pytester.makepyfile(test_errored=\"def test_error():\\n    assert False\")\n        pytester.runpytest()\n        assert pytester.path.joinpath(\"custom_cache_dir\").is_dir()\n\n\n@pytest.mark.parametrize(\"env\", ((), (\"TOX_ENV_DIR\", \"mydir/tox-env\")))\ndef test_cache_reportheader(\n    env: Sequence[str], pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    pytester.makepyfile(\"\"\"def test_foo(): pass\"\"\")\n    if env:\n        monkeypatch.setenv(*env)\n        expected = os.path.join(env[1], \".pytest_cache\")\n    else:\n        monkeypatch.delenv(\"TOX_ENV_DIR\", raising=False)\n        expected = \".pytest_cache\"\n    result = pytester.runpytest(\"-v\")\n    result.stdout.fnmatch_lines([f\"cachedir: {expected}\"])\n\n\ndef test_cache_reportheader_external_abspath(\n    pytester: Pytester, tmp_path_factory: TempPathFactory\n) -> None:\n    external_cache = tmp_path_factory.mktemp(\n        \"test_cache_reportheader_external_abspath_abs\"\n    )\n\n    pytester.makepyfile(\"def test_hello(): pass\")\n    pytester.makeini(\n        f\"\"\"\n    [pytest]\n    cache_dir = {external_cache}\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-v\")\n    result.stdout.fnmatch_lines([f\"cachedir: {external_cache}\"])\n\n\ndef test_cache_show(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--cache-show\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*cache is empty*\"])\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_configure(config):\n            config.cache.set(\"my/name\", [1,2,3])\n            config.cache.set(\"my/hello\", \"world\")\n            config.cache.set(\"other/some\", {1:2})\n            dp = config.cache.mkdir(\"mydb\")\n            dp.joinpath(\"hello\").touch()\n            dp.joinpath(\"world\").touch()\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 5  # no tests executed\n\n    result = pytester.runpytest(\"--cache-show\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*cachedir:*\",\n            \"*- cache values for '[*]' -*\",\n            \"cache/nodeids contains:\",\n            \"my/name contains:\",\n            \"  [1, 2, 3]\",\n            \"other/some contains:\",\n            \"  {*'1': 2}\",\n            \"*- cache directories for '[*]' -*\",\n            \"*mydb/hello*length 0*\",\n            \"*mydb/world*length 0*\",\n        ]\n    )\n    assert result.ret == 0\n\n    result = pytester.runpytest(\"--cache-show\", \"*/hello\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*cachedir:*\",\n            \"*- cache values for '[*]/hello' -*\",\n            \"my/hello contains:\",\n            \"  *'world'\",\n            \"*- cache directories for '[*]/hello' -*\",\n            \"d/mydb/hello*length 0*\",\n        ]\n    )\n    stdout = result.stdout.str()\n    assert \"other/some\" not in stdout\n    assert \"d/mydb/world\" not in stdout\n    assert result.ret == 0\n\n\nclass TestLastFailed:\n    def test_lastfailed_usecase(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.setattr(\"sys.dont_write_bytecode\", True)\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_1(): assert 0\n            def test_2(): assert 0\n            def test_3(): assert 1\n            \"\"\"\n        )\n        result = pytester.runpytest(str(p))\n        result.stdout.fnmatch_lines([\"*2 failed*\"])\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_1(): assert 1\n            def test_2(): assert 1\n            def test_3(): assert 0\n            \"\"\"\n        )\n        result = pytester.runpytest(str(p), \"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 3 items / 1 deselected / 2 selected\",\n                \"run-last-failure: rerun previous 2 failures\",\n                \"*= 2 passed, 1 deselected in *\",\n            ]\n        )\n        result = pytester.runpytest(str(p), \"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 3 items\",\n                \"run-last-failure: no previously failed tests, not deselecting items.\",\n                \"*1 failed*2 passed*\",\n            ]\n        )\n        pytester.path.joinpath(\".pytest_cache\", \".git\").mkdir(parents=True)\n        result = pytester.runpytest(str(p), \"--lf\", \"--cache-clear\")\n        result.stdout.fnmatch_lines([\"*1 failed*2 passed*\"])\n        assert pytester.path.joinpath(\".pytest_cache\", \"README.md\").is_file()\n        assert pytester.path.joinpath(\".pytest_cache\", \".git\").is_dir()\n\n        # Run this again to make sure clear-cache is robust\n        if os.path.isdir(\".pytest_cache\"):\n            shutil.rmtree(\".pytest_cache\")\n        result = pytester.runpytest(\"--lf\", \"--cache-clear\")\n        result.stdout.fnmatch_lines([\"*1 failed*2 passed*\"])\n\n    def test_failedfirst_order(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_a=\"def test_always_passes(): pass\",\n            test_b=\"def test_always_fails(): assert 0\",\n        )\n        result = pytester.runpytest()\n        # Test order will be collection order; alphabetical\n        result.stdout.fnmatch_lines([\"test_a.py*\", \"test_b.py*\"])\n        result = pytester.runpytest(\"--ff\")\n        # Test order will be failing tests first\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: rerun previous 1 failure first\",\n                \"test_b.py*\",\n                \"test_a.py*\",\n            ]\n        )\n\n    def test_lastfailed_failedfirst_order(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_a=\"def test_always_passes(): assert 1\",\n            test_b=\"def test_always_fails(): assert 0\",\n        )\n        result = pytester.runpytest()\n        # Test order will be collection order; alphabetical\n        result.stdout.fnmatch_lines([\"test_a.py*\", \"test_b.py*\"])\n        result = pytester.runpytest(\"--lf\", \"--ff\")\n        # Test order will be failing tests first\n        result.stdout.fnmatch_lines([\"test_b.py*\"])\n        result.stdout.no_fnmatch_line(\"*test_a.py*\")\n\n    def test_lastfailed_difference_invocations(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.setattr(\"sys.dont_write_bytecode\", True)\n        pytester.makepyfile(\n            test_a=\"\"\"\n                def test_a1(): assert 0\n                def test_a2(): assert 1\n            \"\"\",\n            test_b=\"def test_b1(): assert 0\",\n        )\n        p = pytester.path.joinpath(\"test_a.py\")\n        p2 = pytester.path.joinpath(\"test_b.py\")\n\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 failed*\"])\n        result = pytester.runpytest(\"--lf\", p2)\n        result.stdout.fnmatch_lines([\"*1 failed*\"])\n\n        pytester.makepyfile(test_b=\"def test_b1(): assert 1\")\n        result = pytester.runpytest(\"--lf\", p2)\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result = pytester.runpytest(\"--lf\", p)\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items / 1 deselected / 1 selected\",\n                \"run-last-failure: rerun previous 1 failure\",\n                \"*= 1 failed, 1 deselected in *\",\n            ]\n        )\n\n    def test_lastfailed_usecase_splice(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.setattr(\"sys.dont_write_bytecode\", True)\n        pytester.makepyfile(\n            \"def test_1(): assert 0\", test_something=\"def test_2(): assert 0\"\n        )\n        p2 = pytester.path.joinpath(\"test_something.py\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 failed*\"])\n        result = pytester.runpytest(\"--lf\", p2)\n        result.stdout.fnmatch_lines([\"*1 failed*\"])\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines([\"*2 failed*\"])\n\n    def test_lastfailed_xpass(self, pytester: Pytester) -> None:\n        pytester.inline_runsource(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_hello():\n                assert 1\n        \"\"\"\n        )\n        config = pytester.parseconfigure()\n        assert config.cache is not None\n        lastfailed = config.cache.get(\"cache/lastfailed\", -1)\n        assert lastfailed == -1\n\n    def test_non_serializable_parametrize(self, pytester: Pytester) -> None:\n        \"\"\"Test that failed parametrized tests with unmarshable parameters\n        don't break pytest-cache.\n        \"\"\"\n        pytester.makepyfile(\n            r\"\"\"\n            import pytest\n\n            @pytest.mark.parametrize('val', [\n                b'\\xac\\x10\\x02G',\n            ])\n            def test_fail(val):\n                assert False\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 failed in*\"])\n\n    @pytest.mark.parametrize(\"parent\", (\"directory\", \"package\"))\n    def test_terminal_report_lastfailed(self, pytester: Pytester, parent: str) -> None:\n        if parent == \"package\":\n            pytester.makepyfile(\n                __init__=\"\",\n            )\n\n        test_a = pytester.makepyfile(\n            test_a=\"\"\"\n            def test_a1(): pass\n            def test_a2(): pass\n        \"\"\"\n        )\n        test_b = pytester.makepyfile(\n            test_b=\"\"\"\n            def test_b1(): assert 0\n            def test_b2(): assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 4 items\", \"*2 failed, 2 passed in*\"])\n\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: rerun previous 2 failures (skipped 1 file)\",\n                \"*2 failed in*\",\n            ]\n        )\n\n        result = pytester.runpytest(test_a, \"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: 2 known failures not in selected tests\",\n                \"*2 passed in*\",\n            ]\n        )\n\n        result = pytester.runpytest(test_b, \"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: rerun previous 2 failures\",\n                \"*2 failed in*\",\n            ]\n        )\n\n        result = pytester.runpytest(\"test_b.py::test_b1\", \"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: rerun previous 1 failure\",\n                \"*1 failed in*\",\n            ]\n        )\n\n    def test_terminal_report_failedfirst(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_a=\"\"\"\n            def test_a1(): assert 0\n            def test_a2(): pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 2 items\", \"*1 failed, 1 passed in*\"])\n\n        result = pytester.runpytest(\"--ff\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: rerun previous 1 failure first\",\n                \"*1 failed, 1 passed in*\",\n            ]\n        )\n\n    def test_lastfailed_collectfailure(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        pytester.makepyfile(\n            test_maybe=\"\"\"\n            import os\n            env = os.environ\n            if '1' == env['FAILIMPORT']:\n                raise ImportError('fail')\n            def test_hello():\n                assert '0' == env['FAILTEST']\n        \"\"\"\n        )\n\n        def rlf(fail_import: int, fail_run: int) -> Any:\n            monkeypatch.setenv(\"FAILIMPORT\", str(fail_import))\n            monkeypatch.setenv(\"FAILTEST\", str(fail_run))\n\n            pytester.runpytest(\"-q\")\n            config = pytester.parseconfigure()\n            assert config.cache is not None\n            lastfailed = config.cache.get(\"cache/lastfailed\", -1)\n            return lastfailed\n\n        lastfailed = rlf(fail_import=0, fail_run=0)\n        assert lastfailed == -1\n\n        lastfailed = rlf(fail_import=1, fail_run=0)\n        assert list(lastfailed) == [\"test_maybe.py\"]\n\n        lastfailed = rlf(fail_import=0, fail_run=1)\n        assert list(lastfailed) == [\"test_maybe.py::test_hello\"]\n\n    def test_lastfailed_failure_subset(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        pytester.makepyfile(\n            test_maybe=\"\"\"\n            import os\n            env = os.environ\n            if '1' == env['FAILIMPORT']:\n                raise ImportError('fail')\n            def test_hello():\n                assert '0' == env['FAILTEST']\n        \"\"\"\n        )\n\n        pytester.makepyfile(\n            test_maybe2=\"\"\"\n            import os\n            env = os.environ\n            if '1' == env['FAILIMPORT']:\n                raise ImportError('fail')\n\n            def test_hello():\n                assert '0' == env['FAILTEST']\n\n            def test_pass():\n                pass\n        \"\"\"\n        )\n\n        def rlf(\n            fail_import: int, fail_run: int, args: Sequence[str] = ()\n        ) -> tuple[Any, Any]:\n            monkeypatch.setenv(\"FAILIMPORT\", str(fail_import))\n            monkeypatch.setenv(\"FAILTEST\", str(fail_run))\n\n            result = pytester.runpytest(\"-q\", \"--lf\", *args)\n            config = pytester.parseconfigure()\n            assert config.cache is not None\n            lastfailed = config.cache.get(\"cache/lastfailed\", -1)\n            return result, lastfailed\n\n        result, lastfailed = rlf(fail_import=0, fail_run=0)\n        assert lastfailed == -1\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n\n        result, lastfailed = rlf(fail_import=1, fail_run=0)\n        assert sorted(list(lastfailed)) == [\"test_maybe.py\", \"test_maybe2.py\"]\n\n        result, lastfailed = rlf(fail_import=0, fail_run=0, args=(\"test_maybe2.py\",))\n        assert list(lastfailed) == [\"test_maybe.py\"]\n\n        # edge case of test selection - even if we remember failures\n        # from other tests we still need to run all tests if no test\n        # matches the failures\n        result, lastfailed = rlf(fail_import=0, fail_run=0, args=(\"test_maybe2.py\",))\n        assert list(lastfailed) == [\"test_maybe.py\"]\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    def test_lastfailed_creates_cache_when_needed(self, pytester: Pytester) -> None:\n        # Issue #1342\n        pytester.makepyfile(test_empty=\"\")\n        pytester.runpytest(\"-q\", \"--lf\")\n        assert not os.path.exists(\".pytest_cache/v/cache/lastfailed\")\n\n        pytester.makepyfile(test_successful=\"def test_success():\\n    assert True\")\n        pytester.runpytest(\"-q\", \"--lf\")\n        assert not os.path.exists(\".pytest_cache/v/cache/lastfailed\")\n\n        pytester.makepyfile(test_errored=\"def test_error():\\n    assert False\")\n        pytester.runpytest(\"-q\", \"--lf\")\n        assert os.path.exists(\".pytest_cache/v/cache/lastfailed\")\n\n    def test_xfail_not_considered_failure(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test(): assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 xfailed*\"])\n        assert self.get_cached_last_failed(pytester) == []\n\n    def test_xfail_strict_considered_failure(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(strict=True)\n            def test(): pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 failed*\"])\n        assert self.get_cached_last_failed(pytester) == [\n            \"test_xfail_strict_considered_failure.py::test\"\n        ]\n\n    @pytest.mark.parametrize(\"mark\", [\"mark.xfail\", \"mark.skip\"])\n    def test_failed_changed_to_xfail_or_skip(\n        self, pytester: Pytester, mark: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test(): assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert self.get_cached_last_failed(pytester) == [\n            \"test_failed_changed_to_xfail_or_skip.py::test\"\n        ]\n        assert result.ret == 1\n\n        pytester.makepyfile(\n            f\"\"\"\n            import pytest\n            @pytest.{mark}\n            def test(): assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n        assert self.get_cached_last_failed(pytester) == []\n        assert result.ret == 0\n\n    @pytest.mark.parametrize(\"quiet\", [True, False])\n    @pytest.mark.parametrize(\"opt\", [\"--ff\", \"--lf\"])\n    def test_lf_and_ff_prints_no_needless_message(\n        self, quiet: bool, opt: str, pytester: Pytester\n    ) -> None:\n        # Issue 3853\n        pytester.makepyfile(\"def test(): assert 0\")\n        args = [opt]\n        if quiet:\n            args.append(\"-q\")\n        result = pytester.runpytest(*args)\n        result.stdout.no_fnmatch_line(\"*run all*\")\n\n        result = pytester.runpytest(*args)\n        if quiet:\n            result.stdout.no_fnmatch_line(\"*run all*\")\n        else:\n            assert \"rerun previous\" in result.stdout.str()\n\n    def get_cached_last_failed(self, pytester: Pytester) -> list[str]:\n        config = pytester.parseconfigure()\n        assert config.cache is not None\n        return sorted(config.cache.get(\"cache/lastfailed\", {}))\n\n    def test_cache_cumulative(self, pytester: Pytester) -> None:\n        \"\"\"Test workflow where user fixes errors gradually file by file using --lf.\"\"\"\n        # 1. initial run\n        test_bar = pytester.makepyfile(\n            test_bar=\"\"\"\n            def test_bar_1(): pass\n            def test_bar_2(): assert 0\n        \"\"\"\n        )\n        test_foo = pytester.makepyfile(\n            test_foo=\"\"\"\n            def test_foo_3(): pass\n            def test_foo_4(): assert 0\n        \"\"\"\n        )\n        pytester.runpytest()\n        assert self.get_cached_last_failed(pytester) == [\n            \"test_bar.py::test_bar_2\",\n            \"test_foo.py::test_foo_4\",\n        ]\n\n        # 2. fix test_bar_2, run only test_bar.py\n        pytester.makepyfile(\n            test_bar=\"\"\"\n            def test_bar_1(): pass\n            def test_bar_2(): pass\n        \"\"\"\n        )\n        result = pytester.runpytest(test_bar)\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n        # ensure cache does not forget that test_foo_4 failed once before\n        assert self.get_cached_last_failed(pytester) == [\"test_foo.py::test_foo_4\"]\n\n        result = pytester.runpytest(\"--last-failed\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: rerun previous 1 failure (skipped 1 file)\",\n                \"*= 1 failed in *\",\n            ]\n        )\n        assert self.get_cached_last_failed(pytester) == [\"test_foo.py::test_foo_4\"]\n\n        # 3. fix test_foo_4, run only test_foo.py\n        test_foo = pytester.makepyfile(\n            test_foo=\"\"\"\n            def test_foo_3(): pass\n            def test_foo_4(): pass\n        \"\"\"\n        )\n        result = pytester.runpytest(test_foo, \"--last-failed\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items / 1 deselected / 1 selected\",\n                \"run-last-failure: rerun previous 1 failure\",\n                \"*= 1 passed, 1 deselected in *\",\n            ]\n        )\n        assert self.get_cached_last_failed(pytester) == []\n\n        result = pytester.runpytest(\"--last-failed\")\n        result.stdout.fnmatch_lines([\"*4 passed*\"])\n        assert self.get_cached_last_failed(pytester) == []\n\n    def test_lastfailed_no_failures_behavior_all_passed(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_1(): pass\n            def test_2(): pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n        result = pytester.runpytest(\"--lf\", \"--lfnf\", \"all\")\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n        # Ensure the list passed to pytest_deselected is a copy,\n        # and not a reference which is cleared right after.\n        pytester.makeconftest(\n            \"\"\"\n            deselected = []\n\n            def pytest_deselected(items):\n                global deselected\n                deselected = items\n\n            def pytest_sessionfinish():\n                print(\"\\\\ndeselected={}\".format(len(deselected)))\n        \"\"\"\n        )\n\n        result = pytester.runpytest(\"--lf\", \"--lfnf\", \"none\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items / 2 deselected / 0 selected\",\n                \"run-last-failure: no previously failed tests, deselecting all items.\",\n                \"deselected=2\",\n                \"* 2 deselected in *\",\n            ]\n        )\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n    def test_lastfailed_no_failures_behavior_empty_cache(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_1(): pass\n            def test_2(): assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--lf\", \"--cache-clear\")\n        result.stdout.fnmatch_lines([\"*1 failed*1 passed*\"])\n        result = pytester.runpytest(\"--lf\", \"--cache-clear\", \"--lfnf\", \"all\")\n        result.stdout.fnmatch_lines([\"*1 failed*1 passed*\"])\n        result = pytester.runpytest(\"--lf\", \"--cache-clear\", \"--lfnf\", \"none\")\n        result.stdout.fnmatch_lines([\"*2 desel*\"])\n\n    def test_lastfailed_skip_collection(self, pytester: Pytester) -> None:\n        \"\"\"\n        Test --lf behavior regarding skipping collection of files that are not marked as\n        failed in the cache (#5172).\n        \"\"\"\n        pytester.makepyfile(\n            **{\n                \"pkg1/test_1.py\": \"\"\"\n                import pytest\n\n                @pytest.mark.parametrize('i', range(3))\n                def test_1(i): pass\n            \"\"\",\n                \"pkg2/test_2.py\": \"\"\"\n                import pytest\n\n                @pytest.mark.parametrize('i', range(5))\n                def test_1(i):\n                    assert i not in (1, 3)\n            \"\"\",\n            }\n        )\n        # first run: collects 8 items (test_1: 3, test_2: 5)\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 8 items\", \"*2 failed*6 passed*\"])\n        # second run: collects only 5 items from test_2, because all tests from test_1 have passed\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: rerun previous 2 failures (skipped 1 file)\",\n                \"*= 2 failed in *\",\n            ]\n        )\n\n        # add another file and check if message is correct when skipping more than 1 file\n        pytester.makepyfile(\n            **{\n                \"pkg1/test_3.py\": \"\"\"\n                def test_3(): pass\n            \"\"\"\n            }\n        )\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: rerun previous 2 failures (skipped 2 files)\",\n                \"*= 2 failed in *\",\n            ]\n        )\n\n    def test_lastfailed_skip_collection_with_nesting(self, pytester: Pytester) -> None:\n        \"\"\"Check that file skipping works even when the file with failures is\n        nested at a different level of the collection tree.\"\"\"\n        pytester.makepyfile(\n            **{\n                \"test_1.py\": \"\"\"\n                    def test_1(): pass\n                \"\"\",\n                \"pkg/__init__.py\": \"\",\n                \"pkg/test_2.py\": \"\"\"\n                    def test_2(): assert False\n                \"\"\",\n            }\n        )\n        # first run\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 2 items\", \"*1 failed*1 passed*\"])\n        # second run - test_1.py is skipped.\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: rerun previous 1 failure (skipped 1 file)\",\n                \"*= 1 failed in *\",\n            ]\n        )\n\n    def test_lastfailed_with_known_failures_not_being_selected(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            **{\n                \"pkg1/test_1.py\": \"\"\"def test_1(): assert 0\"\"\",\n                \"pkg1/test_2.py\": \"\"\"def test_2(): pass\"\"\",\n            }\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 2 items\", \"* 1 failed, 1 passed in *\"])\n\n        Path(\"pkg1/test_1.py\").unlink()\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: 1 known failures not in selected tests\",\n                \"* 1 passed in *\",\n            ]\n        )\n\n        # Recreate file with known failure.\n        pytester.makepyfile(**{\"pkg1/test_1.py\": \"\"\"def test_1(): assert 0\"\"\"})\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: rerun previous 1 failure (skipped 1 file)\",\n                \"* 1 failed in *\",\n            ]\n        )\n\n        # Remove/rename test: collects the file again.\n        pytester.makepyfile(**{\"pkg1/test_1.py\": \"\"\"def test_renamed(): assert 0\"\"\"})\n        result = pytester.runpytest(\"--lf\", \"-rf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items\",\n                \"run-last-failure: 1 known failures not in selected tests\",\n                \"pkg1/test_1.py F *\",\n                \"pkg1/test_2.py . *\",\n                \"FAILED pkg1/test_1.py::test_renamed - assert 0\",\n                \"* 1 failed, 1 passed in *\",\n            ]\n        )\n\n        result = pytester.runpytest(\"--lf\", \"--co\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: rerun previous 1 failure (skipped 1 file)\",\n                \"\",\n                \"<Dir *>\",\n                \"  <Dir pkg1>\",\n                \"    <Module test_1.py>\",\n                \"      <Function test_renamed>\",\n            ]\n        )\n\n    def test_lastfailed_args_with_deselected(self, pytester: Pytester) -> None:\n        \"\"\"Test regression with --lf running into NoMatch error.\n\n        This was caused by it not collecting (non-failed) nodes given as\n        arguments.\n        \"\"\"\n        pytester.makepyfile(\n            **{\n                \"pkg1/test_1.py\": \"\"\"\n                    def test_pass(): pass\n                    def test_fail(): assert 0\n                \"\"\",\n            }\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 2 items\", \"* 1 failed, 1 passed in *\"])\n        assert result.ret == 1\n\n        result = pytester.runpytest(\"pkg1/test_1.py::test_pass\", \"--lf\", \"--co\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\n                \"*collected 1 item\",\n                \"run-last-failure: 1 known failures not in selected tests\",\n                \"\",\n                \"<Dir *>\",\n                \"  <Dir pkg1>\",\n                \"    <Module test_1.py>\",\n                \"      <Function test_pass>\",\n            ],\n            consecutive=True,\n        )\n\n        result = pytester.runpytest(\n            \"pkg1/test_1.py::test_pass\", \"pkg1/test_1.py::test_fail\", \"--lf\", \"--co\"\n        )\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 2 items / 1 deselected / 1 selected\",\n                \"run-last-failure: rerun previous 1 failure\",\n                \"\",\n                \"<Dir *>\",\n                \"  <Dir pkg1>\",\n                \"    <Module test_1.py>\",\n                \"      <Function test_fail>\",\n                \"*= 1/2 tests collected (1 deselected) in *\",\n            ],\n        )\n\n    def test_lastfailed_with_class_items(self, pytester: Pytester) -> None:\n        \"\"\"Test regression with --lf deselecting whole classes.\"\"\"\n        pytester.makepyfile(\n            **{\n                \"pkg1/test_1.py\": \"\"\"\n                    class TestFoo:\n                        def test_pass(self): pass\n                        def test_fail(self): assert 0\n\n                    def test_other(): assert 0\n                \"\"\",\n            }\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 3 items\", \"* 2 failed, 1 passed in *\"])\n        assert result.ret == 1\n\n        result = pytester.runpytest(\"--lf\", \"--co\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 3 items / 1 deselected / 2 selected\",\n                \"run-last-failure: rerun previous 2 failures\",\n                \"\",\n                \"<Dir *>\",\n                \"  <Dir pkg1>\",\n                \"    <Module test_1.py>\",\n                \"      <Class TestFoo>\",\n                \"        <Function test_fail>\",\n                \"      <Function test_other>\",\n                \"\",\n                \"*= 2/3 tests collected (1 deselected) in *\",\n            ],\n            consecutive=True,\n        )\n\n    def test_lastfailed_with_all_filtered(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            **{\n                \"pkg1/test_1.py\": \"\"\"\n                    def test_fail(): assert 0\n                    def test_pass(): pass\n                \"\"\",\n            }\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 2 items\", \"* 1 failed, 1 passed in *\"])\n        assert result.ret == 1\n\n        # Remove known failure.\n        pytester.makepyfile(\n            **{\n                \"pkg1/test_1.py\": \"\"\"\n                    def test_pass(): pass\n                \"\"\",\n            }\n        )\n        result = pytester.runpytest(\"--lf\", \"--co\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: 1 known failures not in selected tests\",\n                \"\",\n                \"<Dir *>\",\n                \"  <Dir pkg1>\",\n                \"    <Module test_1.py>\",\n                \"      <Function test_pass>\",\n                \"\",\n                \"*= 1 test collected in*\",\n            ],\n            consecutive=True,\n        )\n        assert result.ret == 0\n\n    def test_packages(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #7758.\n\n        The particular issue here was that Package nodes were included in the\n        filtering, being themselves Modules for the __init__.py, even if they\n        had failed Modules in them.\n\n        The tests includes a test in an __init__.py file just to make sure the\n        fix doesn't somehow regress that, it is not critical for the issue.\n        \"\"\"\n        pytester.makepyfile(\n            **{\n                \"__init__.py\": \"\",\n                \"a/__init__.py\": \"def test_a_init(): assert False\",\n                \"a/test_one.py\": \"def test_1(): assert False\",\n                \"b/__init__.py\": \"\",\n                \"b/test_two.py\": \"def test_2(): assert False\",\n            },\n        )\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            python_files = *.py\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.assert_outcomes(failed=3)\n        result = pytester.runpytest(\"--lf\")\n        result.assert_outcomes(failed=3)\n\n    def test_non_python_file_skipped(\n        self,\n        pytester: Pytester,\n        dummy_yaml_custom_test: None,\n    ) -> None:\n        pytester.makepyfile(\n            **{\n                \"test_bad.py\": \"\"\"def test_bad(): assert False\"\"\",\n            },\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 2 items\", \"* 1 failed, 1 passed in *\"])\n\n        result = pytester.runpytest(\"--lf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"run-last-failure: rerun previous 1 failure (skipped 1 file)\",\n                \"* 1 failed in *\",\n            ]\n        )\n\n\nclass TestNewFirst:\n    def test_newfirst_usecase(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            **{\n                \"test_1/test_1.py\": \"\"\"\n                def test_1(): assert 1\n            \"\"\",\n                \"test_2/test_2.py\": \"\"\"\n                def test_1(): assert 1\n            \"\"\",\n            }\n        )\n\n        p1 = pytester.path.joinpath(\"test_1/test_1.py\")\n        os.utime(p1, ns=(p1.stat().st_atime_ns, int(1e9)))\n\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            [\"*test_1/test_1.py::test_1 PASSED*\", \"*test_2/test_2.py::test_1 PASSED*\"]\n        )\n\n        result = pytester.runpytest(\"-v\", \"--nf\")\n        result.stdout.fnmatch_lines(\n            [\"*test_2/test_2.py::test_1 PASSED*\", \"*test_1/test_1.py::test_1 PASSED*\"]\n        )\n\n        p1.write_text(\n            \"def test_1(): assert 1\\ndef test_2(): assert 1\\n\", encoding=\"utf-8\"\n        )\n        os.utime(p1, ns=(p1.stat().st_atime_ns, int(1e9)))\n\n        result = pytester.runpytest(\"--nf\", \"--collect-only\", \"-q\")\n        result.stdout.fnmatch_lines(\n            [\n                \"test_1/test_1.py::test_2\",\n                \"test_2/test_2.py::test_1\",\n                \"test_1/test_1.py::test_1\",\n            ]\n        )\n\n        # Newest first with (plugin) pytest_collection_modifyitems hook.\n        pytester.makepyfile(\n            myplugin=\"\"\"\n            def pytest_collection_modifyitems(items):\n                items[:] = sorted(items, key=lambda item: item.nodeid)\n                print(\"new_items:\", [x.nodeid for x in items])\n            \"\"\"\n        )\n        pytester.syspathinsert()\n        result = pytester.runpytest(\"--nf\", \"-p\", \"myplugin\", \"--collect-only\", \"-q\")\n        result.stdout.fnmatch_lines(\n            [\n                \"new_items: *test_1.py*test_1.py*test_2.py*\",\n                \"test_1/test_1.py::test_2\",\n                \"test_2/test_2.py::test_1\",\n                \"test_1/test_1.py::test_1\",\n            ]\n        )\n\n    def test_newfirst_parametrize(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            **{\n                \"test_1/test_1.py\": \"\"\"\n                import pytest\n                @pytest.mark.parametrize('num', [1, 2])\n                def test_1(num): assert num\n            \"\"\",\n                \"test_2/test_2.py\": \"\"\"\n                import pytest\n                @pytest.mark.parametrize('num', [1, 2])\n                def test_1(num): assert num\n            \"\"\",\n            }\n        )\n\n        p1 = pytester.path.joinpath(\"test_1/test_1.py\")\n        os.utime(p1, ns=(p1.stat().st_atime_ns, int(1e9)))\n\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_1/test_1.py::test_1[1*\",\n                \"*test_1/test_1.py::test_1[2*\",\n                \"*test_2/test_2.py::test_1[1*\",\n                \"*test_2/test_2.py::test_1[2*\",\n            ]\n        )\n\n        result = pytester.runpytest(\"-v\", \"--nf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_2/test_2.py::test_1[1*\",\n                \"*test_2/test_2.py::test_1[2*\",\n                \"*test_1/test_1.py::test_1[1*\",\n                \"*test_1/test_1.py::test_1[2*\",\n            ]\n        )\n\n        p1.write_text(\n            \"import pytest\\n\"\n            \"@pytest.mark.parametrize('num', [1, 2, 3])\\n\"\n            \"def test_1(num): assert num\\n\",\n            encoding=\"utf-8\",\n        )\n        os.utime(p1, ns=(p1.stat().st_atime_ns, int(1e9)))\n\n        # Running only a subset does not forget about existing ones.\n        result = pytester.runpytest(\"-v\", \"--nf\", \"test_2/test_2.py\")\n        result.stdout.fnmatch_lines(\n            [\"*test_2/test_2.py::test_1[1*\", \"*test_2/test_2.py::test_1[2*\"]\n        )\n\n        result = pytester.runpytest(\"-v\", \"--nf\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_1/test_1.py::test_1[3*\",\n                \"*test_2/test_2.py::test_1[1*\",\n                \"*test_2/test_2.py::test_1[2*\",\n                \"*test_1/test_1.py::test_1[1*\",\n                \"*test_1/test_1.py::test_1[2*\",\n            ]\n        )\n\n\nclass TestReadme:\n    def check_readme(self, pytester: Pytester) -> bool:\n        config = pytester.parseconfigure()\n        assert config.cache is not None\n        readme = config.cache._cachedir.joinpath(\"README.md\")\n        return readme.is_file()\n\n    def test_readme_passed(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\"def test_always_passes(): pass\")\n        pytester.runpytest()\n        assert self.check_readme(pytester) is True\n\n    def test_readme_failed(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\"def test_always_fails(): assert 0\")\n        pytester.runpytest()\n        assert self.check_readme(pytester) is True\n\n\nclass Action(Enum):\n    \"\"\"Action to perform on the cache directory.\"\"\"\n\n    MKDIR = auto()\n    SET = auto()\n\n\n@pytest.mark.parametrize(\"action\", list(Action))\ndef test_gitignore(\n    pytester: Pytester,\n    action: Action,\n) -> None:\n    \"\"\"Ensure we automatically create .gitignore file in the pytest_cache directory (#3286).\"\"\"\n    from _pytest.cacheprovider import Cache\n\n    config = pytester.parseconfig()\n    cache = Cache.for_config(config, _ispytest=True)\n    if action == Action.MKDIR:\n        cache.mkdir(\"foo\")\n    elif action == Action.SET:\n        cache.set(\"foo\", \"bar\")\n    else:\n        assert_never(action)\n    msg = \"# Created by pytest automatically.\\n*\\n\"\n    gitignore_path = cache._cachedir.joinpath(\".gitignore\")\n    assert gitignore_path.read_text(encoding=\"UTF-8\") == msg\n\n    # Does not overwrite existing/custom one.\n    gitignore_path.write_text(\"custom\", encoding=\"utf-8\")\n    if action == Action.MKDIR:\n        cache.mkdir(\"something\")\n    elif action == Action.SET:\n        cache.set(\"something\", \"else\")\n    else:\n        assert_never(action)\n    assert gitignore_path.read_text(encoding=\"UTF-8\") == \"custom\"\n\n\ndef test_preserve_keys_order(pytester: Pytester) -> None:\n    \"\"\"Ensure keys order is preserved when saving dicts (#9205).\"\"\"\n    from _pytest.cacheprovider import Cache\n\n    config = pytester.parseconfig()\n    cache = Cache.for_config(config, _ispytest=True)\n    cache.set(\"foo\", {\"z\": 1, \"b\": 2, \"a\": 3, \"d\": 10})\n    read_back = cache.get(\"foo\", None)\n    assert list(read_back.items()) == [(\"z\", 1), (\"b\", 2), (\"a\", 3), (\"d\", 10)]\n\n\ndef test_does_not_create_boilerplate_in_existing_dirs(pytester: Pytester) -> None:\n    from _pytest.cacheprovider import Cache\n\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        cache_dir = .\n        \"\"\"\n    )\n    config = pytester.parseconfig()\n    cache = Cache.for_config(config, _ispytest=True)\n    cache.set(\"foo\", \"bar\")\n\n    assert os.path.isdir(\"v\")  # cache contents\n    assert not os.path.exists(\".gitignore\")\n    assert not os.path.exists(\"README.md\")\n\n\ndef test_cachedir_tag(pytester: Pytester) -> None:\n    \"\"\"Ensure we automatically create CACHEDIR.TAG file in the pytest_cache directory (#4278).\"\"\"\n    from _pytest.cacheprovider import Cache\n    from _pytest.cacheprovider import CACHEDIR_TAG_CONTENT\n\n    config = pytester.parseconfig()\n    cache = Cache.for_config(config, _ispytest=True)\n    cache.set(\"foo\", \"bar\")\n    cachedir_tag_path = cache._cachedir.joinpath(\"CACHEDIR.TAG\")\n    assert cachedir_tag_path.read_bytes() == CACHEDIR_TAG_CONTENT\n\n\ndef test_clioption_with_cacheshow_and_help(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--cache-show\", \"--help\")\n    assert result.ret == 0\n", "testing/test_assertrewrite.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport ast\nimport errno\nfrom functools import partial\nimport glob\nimport importlib\nimport marshal\nimport os\nfrom pathlib import Path\nimport py_compile\nimport re\nimport stat\nimport sys\nimport textwrap\nfrom typing import cast\nfrom typing import Generator\nfrom typing import Mapping\nfrom unittest import mock\nimport zipfile\n\nimport _pytest._code\nfrom _pytest._io.saferepr import DEFAULT_REPR_MAX_SIZE\nfrom _pytest.assertion import util\nfrom _pytest.assertion.rewrite import _get_assertion_exprs\nfrom _pytest.assertion.rewrite import _get_maxsize_for_saferepr\nfrom _pytest.assertion.rewrite import _saferepr\nfrom _pytest.assertion.rewrite import AssertionRewritingHook\nfrom _pytest.assertion.rewrite import get_cache_dir\nfrom _pytest.assertion.rewrite import PYC_TAIL\nfrom _pytest.assertion.rewrite import PYTEST_TAG\nfrom _pytest.assertion.rewrite import rewrite_asserts\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.pathlib import make_numbered_dir\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef rewrite(src: str) -> ast.Module:\n    tree = ast.parse(src)\n    rewrite_asserts(tree, src.encode())\n    return tree\n\n\ndef getmsg(\n    f, extra_ns: Mapping[str, object] | None = None, *, must_pass: bool = False\n) -> str | None:\n    \"\"\"Rewrite the assertions in f, run it, and get the failure message.\"\"\"\n    src = \"\\n\".join(_pytest._code.Code.from_function(f).source().lines)\n    mod = rewrite(src)\n    code = compile(mod, \"<test>\", \"exec\")\n    ns: dict[str, object] = {}\n    if extra_ns is not None:\n        ns.update(extra_ns)\n    exec(code, ns)\n    func = ns[f.__name__]\n    try:\n        func()  # type: ignore[operator]\n    except AssertionError:\n        if must_pass:\n            pytest.fail(\"shouldn't have raised\")\n        s = str(sys.exc_info()[1])\n        if not s.startswith(\"assert\"):\n            return \"AssertionError: \" + s\n        return s\n    else:\n        if not must_pass:\n            pytest.fail(\"function didn't raise at all\")\n        return None\n\n\nclass TestAssertionRewrite:\n    def test_place_initial_imports(self) -> None:\n        s = \"\"\"'Doc string'\\nother = stuff\"\"\"\n        m = rewrite(s)\n        assert isinstance(m.body[0], ast.Expr)\n        for imp in m.body[1:3]:\n            assert isinstance(imp, ast.Import)\n            assert imp.lineno == 2\n            assert imp.col_offset == 0\n        assert isinstance(m.body[3], ast.Assign)\n        s = \"\"\"from __future__ import division\\nother_stuff\"\"\"\n        m = rewrite(s)\n        assert isinstance(m.body[0], ast.ImportFrom)\n        for imp in m.body[1:3]:\n            assert isinstance(imp, ast.Import)\n            assert imp.lineno == 2\n            assert imp.col_offset == 0\n        assert isinstance(m.body[3], ast.Expr)\n        s = \"\"\"'doc string'\\nfrom __future__ import division\"\"\"\n        m = rewrite(s)\n        assert isinstance(m.body[0], ast.Expr)\n        assert isinstance(m.body[1], ast.ImportFrom)\n        for imp in m.body[2:4]:\n            assert isinstance(imp, ast.Import)\n            assert imp.lineno == 2\n            assert imp.col_offset == 0\n        s = \"\"\"'doc string'\\nfrom __future__ import division\\nother\"\"\"\n        m = rewrite(s)\n        assert isinstance(m.body[0], ast.Expr)\n        assert isinstance(m.body[1], ast.ImportFrom)\n        for imp in m.body[2:4]:\n            assert isinstance(imp, ast.Import)\n            assert imp.lineno == 3\n            assert imp.col_offset == 0\n        assert isinstance(m.body[4], ast.Expr)\n        s = \"\"\"from . import relative\\nother_stuff\"\"\"\n        m = rewrite(s)\n        for imp in m.body[:2]:\n            assert isinstance(imp, ast.Import)\n            assert imp.lineno == 1\n            assert imp.col_offset == 0\n        assert isinstance(m.body[3], ast.Expr)\n\n    def test_location_is_set(self) -> None:\n        s = textwrap.dedent(\n            \"\"\"\n\n        assert False, (\n\n            \"Ouch\"\n          )\n\n        \"\"\"\n        )\n        m = rewrite(s)\n        for node in m.body:\n            if isinstance(node, ast.Import):\n                continue\n            for n in [node, *ast.iter_child_nodes(node)]:\n                assert isinstance(n, (ast.stmt, ast.expr))\n                assert n.lineno == 3\n                assert n.col_offset == 0\n                assert n.end_lineno == 6\n                assert n.end_col_offset == 3\n\n    def test_dont_rewrite(self) -> None:\n        s = \"\"\"'PYTEST_DONT_REWRITE'\\nassert 14\"\"\"\n        m = rewrite(s)\n        assert len(m.body) == 2\n        assert isinstance(m.body[1], ast.Assert)\n        assert m.body[1].msg is None\n\n    def test_dont_rewrite_plugin(self, pytester: Pytester) -> None:\n        contents = {\n            \"conftest.py\": \"pytest_plugins = 'plugin'; import plugin\",\n            \"plugin.py\": \"'PYTEST_DONT_REWRITE'\",\n            \"test_foo.py\": \"def test_foo(): pass\",\n        }\n        pytester.makepyfile(**contents)\n        result = pytester.runpytest_subprocess()\n        assert \"warning\" not in \"\".join(result.outlines)\n\n    def test_rewrites_plugin_as_a_package(self, pytester: Pytester) -> None:\n        pkgdir = pytester.mkpydir(\"plugin\")\n        pkgdir.joinpath(\"__init__.py\").write_text(\n            \"import pytest\\n\"\n            \"@pytest.fixture\\n\"\n            \"def special_asserter():\\n\"\n            \"    def special_assert(x, y):\\n\"\n            \"        assert x == y\\n\"\n            \"    return special_assert\\n\",\n            encoding=\"utf-8\",\n        )\n        pytester.makeconftest('pytest_plugins = [\"plugin\"]')\n        pytester.makepyfile(\"def test(special_asserter): special_asserter(1, 2)\\n\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*assert 1 == 2*\"])\n\n    def test_honors_pep_235(self, pytester: Pytester, monkeypatch) -> None:\n        # note: couldn't make it fail on macos with a single `sys.path` entry\n        # note: these modules are named `test_*` to trigger rewriting\n        pytester.makepyfile(test_y=\"x = 1\")\n        xdir = pytester.mkdir(\"x\")\n        pytester.mkpydir(str(xdir.joinpath(\"test_Y\")))\n        xdir.joinpath(\"test_Y\").joinpath(\"__init__.py\").write_text(\n            \"x = 2\", encoding=\"utf-8\"\n        )\n        pytester.makepyfile(\n            \"import test_y\\n\"\n            \"import test_Y\\n\"\n            \"def test():\\n\"\n            \"    assert test_y.x == 1\\n\"\n            \"    assert test_Y.x == 2\\n\"\n        )\n        monkeypatch.syspath_prepend(str(xdir))\n        pytester.runpytest().assert_outcomes(passed=1)\n\n    def test_name(self, request) -> None:\n        def f1() -> None:\n            assert False\n\n        assert getmsg(f1) == \"assert False\"\n\n        def f2() -> None:\n            f = False\n            assert f\n\n        assert getmsg(f2) == \"assert False\"\n\n        def f3() -> None:\n            assert a_global  # type: ignore[name-defined] # noqa: F821\n\n        assert getmsg(f3, {\"a_global\": False}) == \"assert False\"\n\n        def f4() -> None:\n            assert sys == 42  # type: ignore[comparison-overlap]\n\n        msg = getmsg(f4, {\"sys\": sys})\n        assert msg == \"assert sys == 42\"\n\n        def f5() -> None:\n            assert cls == 42  # type: ignore[name-defined]  # noqa: F821\n\n        class X:\n            pass\n\n        msg = getmsg(f5, {\"cls\": X})\n        assert msg is not None\n        lines = msg.splitlines()\n        assert lines == [\"assert cls == 42\"]\n\n    def test_assertrepr_compare_same_width(self, request) -> None:\n        \"\"\"Should use same width/truncation with same initial width.\"\"\"\n\n        def f() -> None:\n            assert \"1234567890\" * 5 + \"A\" == \"1234567890\" * 5 + \"B\"\n\n        msg = getmsg(f)\n        assert msg is not None\n        line = msg.splitlines()[0]\n        if request.config.getoption(\"verbose\") > 1:\n            assert line == (\n                \"assert '12345678901234567890123456789012345678901234567890A' \"\n                \"== '12345678901234567890123456789012345678901234567890B'\"\n            )\n        else:\n            assert line == (\n                \"assert '123456789012...901234567890A' \"\n                \"== '123456789012...901234567890B'\"\n            )\n\n    def test_dont_rewrite_if_hasattr_fails(self, request) -> None:\n        class Y:\n            \"\"\"A class whose getattr fails, but not with `AttributeError`.\"\"\"\n\n            def __getattr__(self, attribute_name):\n                raise KeyError()\n\n            def __repr__(self) -> str:\n                return \"Y\"\n\n            def __init__(self) -> None:\n                self.foo = 3\n\n        def f() -> None:\n            assert cls().foo == 2  # type: ignore[name-defined] # noqa: F821\n\n        # XXX: looks like the \"where\" should also be there in verbose mode?!\n        msg = getmsg(f, {\"cls\": Y})\n        assert msg is not None\n        lines = msg.splitlines()\n        assert lines == [\n            \"assert 3 == 2\",\n            \" +  where 3 = Y.foo\",\n            \" +    where Y = cls()\",\n        ]\n\n    def test_assert_already_has_message(self) -> None:\n        def f():\n            assert False, \"something bad!\"\n\n        assert getmsg(f) == \"AssertionError: something bad!\\nassert False\"\n\n    def test_assertion_message(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 2, \"The failure message\"\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines(\n            [\"*AssertionError*The failure message*\", \"*assert 1 == 2*\"]\n        )\n\n    def test_assertion_message_multiline(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 2, \"A multiline\\\\nfailure message\"\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines(\n            [\"*AssertionError*A multiline*\", \"*failure message*\", \"*assert 1 == 2*\"]\n        )\n\n    def test_assertion_message_tuple(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 2, (1, 2)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([f\"*AssertionError*{(1, 2)!r}*\", \"*assert 1 == 2*\"])\n\n    def test_assertion_message_expr(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 2, 1 + 2\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*AssertionError*3*\", \"*assert 1 == 2*\"])\n\n    def test_assertion_message_escape(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 2, 'To be escaped: %'\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines(\n            [\"*AssertionError: To be escaped: %\", \"*assert 1 == 2\"]\n        )\n\n    def test_assertion_messages_bytes(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\"def test_bytes_assertion():\\n    assert False, b'ohai!'\\n\")\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*AssertionError: b'ohai!'\", \"*assert False\"])\n\n    def test_boolop(self) -> None:\n        def f1() -> None:\n            f = g = False\n            assert f and g\n\n        assert getmsg(f1) == \"assert (False)\"\n\n        def f2() -> None:\n            f = True\n            g = False\n            assert f and g\n\n        assert getmsg(f2) == \"assert (True and False)\"\n\n        def f3() -> None:\n            f = False\n            g = True\n            assert f and g\n\n        assert getmsg(f3) == \"assert (False)\"\n\n        def f4() -> None:\n            f = g = False\n            assert f or g\n\n        assert getmsg(f4) == \"assert (False or False)\"\n\n        def f5() -> None:\n            f = g = False\n            assert not f and not g\n\n        getmsg(f5, must_pass=True)\n\n        def x() -> bool:\n            return False\n\n        def f6() -> None:\n            assert x() and x()\n\n        assert (\n            getmsg(f6, {\"x\": x})\n            == \"\"\"assert (False)\n +  where False = x()\"\"\"\n        )\n\n        def f7() -> None:\n            assert False or x()\n\n        assert (\n            getmsg(f7, {\"x\": x})\n            == \"\"\"assert (False or False)\n +  where False = x()\"\"\"\n        )\n\n        def f8() -> None:\n            assert 1 in {} and 2 in {}\n\n        assert getmsg(f8) == \"assert (1 in {})\"\n\n        def f9() -> None:\n            x = 1\n            y = 2\n            assert x in {1: None} and y in {}\n\n        assert getmsg(f9) == \"assert (1 in {1: None} and 2 in {})\"\n\n        def f10() -> None:\n            f = True\n            g = False\n            assert f or g\n\n        getmsg(f10, must_pass=True)\n\n        def f11() -> None:\n            f = g = h = lambda: True\n            assert f() and g() and h()\n\n        getmsg(f11, must_pass=True)\n\n    def test_short_circuit_evaluation(self) -> None:\n        def f1() -> None:\n            assert True or explode  # type: ignore[name-defined,unreachable] # noqa: F821\n\n        getmsg(f1, must_pass=True)\n\n        def f2() -> None:\n            x = 1\n            assert x == 1 or x == 2  # noqa: PLR1714\n\n        getmsg(f2, must_pass=True)\n\n    def test_unary_op(self) -> None:\n        def f1() -> None:\n            x = True\n            assert not x\n\n        assert getmsg(f1) == \"assert not True\"\n\n        def f2() -> None:\n            x = 0\n            assert ~x + 1\n\n        assert getmsg(f2) == \"assert (~0 + 1)\"\n\n        def f3() -> None:\n            x = 3\n            assert -x + x\n\n        assert getmsg(f3) == \"assert (-3 + 3)\"\n\n        def f4() -> None:\n            x = 0\n            assert +x + x\n\n        assert getmsg(f4) == \"assert (+0 + 0)\"\n\n    def test_binary_op(self) -> None:\n        def f1() -> None:\n            x = 1\n            y = -1\n            assert x + y\n\n        assert getmsg(f1) == \"assert (1 + -1)\"\n\n        def f2() -> None:\n            assert not 5 % 4\n\n        assert getmsg(f2) == \"assert not (5 % 4)\"\n\n    def test_boolop_percent(self) -> None:\n        def f1() -> None:\n            assert 3 % 2 and False\n\n        assert getmsg(f1) == \"assert ((3 % 2) and False)\"\n\n        def f2() -> None:\n            assert False or 4 % 2\n\n        assert getmsg(f2) == \"assert (False or (4 % 2))\"\n\n    def test_at_operator_issue1290(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            class Matrix(object):\n                def __init__(self, num):\n                    self.num = num\n                def __matmul__(self, other):\n                    return self.num * other.num\n\n            def test_multmat_operator():\n                assert Matrix(2) @ Matrix(3) == 6\"\"\"\n        )\n        pytester.runpytest().assert_outcomes(passed=1)\n\n    def test_starred_with_side_effect(self, pytester: Pytester) -> None:\n        \"\"\"See #4412\"\"\"\n        pytester.makepyfile(\n            \"\"\"\\\n            def test():\n                f = lambda x: x\n                x = iter([1, 2, 3])\n                assert 2 * next(x) == f(*[next(x)])\n            \"\"\"\n        )\n        pytester.runpytest().assert_outcomes(passed=1)\n\n    def test_call(self) -> None:\n        def g(a=42, *args, **kwargs) -> bool:\n            return False\n\n        ns = {\"g\": g}\n\n        def f1() -> None:\n            assert g()\n\n        assert (\n            getmsg(f1, ns)\n            == \"\"\"assert False\n +  where False = g()\"\"\"\n        )\n\n        def f2() -> None:\n            assert g(1)\n\n        assert (\n            getmsg(f2, ns)\n            == \"\"\"assert False\n +  where False = g(1)\"\"\"\n        )\n\n        def f3() -> None:\n            assert g(1, 2)\n\n        assert (\n            getmsg(f3, ns)\n            == \"\"\"assert False\n +  where False = g(1, 2)\"\"\"\n        )\n\n        def f4() -> None:\n            assert g(1, g=42)\n\n        assert (\n            getmsg(f4, ns)\n            == \"\"\"assert False\n +  where False = g(1, g=42)\"\"\"\n        )\n\n        def f5() -> None:\n            assert g(1, 3, g=23)\n\n        assert (\n            getmsg(f5, ns)\n            == \"\"\"assert False\n +  where False = g(1, 3, g=23)\"\"\"\n        )\n\n        def f6() -> None:\n            seq = [1, 2, 3]\n            assert g(*seq)\n\n        assert (\n            getmsg(f6, ns)\n            == \"\"\"assert False\n +  where False = g(*[1, 2, 3])\"\"\"\n        )\n\n        def f7() -> None:\n            x = \"a\"\n            assert g(**{x: 2})\n\n        assert (\n            getmsg(f7, ns)\n            == \"\"\"assert False\n +  where False = g(**{'a': 2})\"\"\"\n        )\n\n    def test_attribute(self) -> None:\n        class X:\n            g = 3\n\n        ns = {\"x\": X}\n\n        def f1() -> None:\n            assert not x.g  # type: ignore[name-defined] # noqa: F821\n\n        assert (\n            getmsg(f1, ns)\n            == \"\"\"assert not 3\n +  where 3 = x.g\"\"\"\n        )\n\n        def f2() -> None:\n            x.a = False  # type: ignore[name-defined] # noqa: F821\n            assert x.a  # type: ignore[name-defined] # noqa: F821\n\n        assert (\n            getmsg(f2, ns)\n            == \"\"\"assert False\n +  where False = x.a\"\"\"\n        )\n\n    def test_comparisons(self) -> None:\n        def f1() -> None:\n            a, b = range(2)\n            assert b < a\n\n        assert getmsg(f1) == \"\"\"assert 1 < 0\"\"\"\n\n        def f2() -> None:\n            a, b, c = range(3)\n            assert a > b > c\n\n        assert getmsg(f2) == \"\"\"assert 0 > 1\"\"\"\n\n        def f3() -> None:\n            a, b, c = range(3)\n            assert a < b > c\n\n        assert getmsg(f3) == \"\"\"assert 1 > 2\"\"\"\n\n        def f4() -> None:\n            a, b, c = range(3)\n            assert a < b <= c\n\n        getmsg(f4, must_pass=True)\n\n        def f5() -> None:\n            a, b, c = range(3)\n            assert a < b\n            assert b < c\n\n        getmsg(f5, must_pass=True)\n\n    def test_len(self, request) -> None:\n        def f():\n            values = list(range(10))\n            assert len(values) == 11\n\n        msg = getmsg(f)\n        assert msg == \"assert 10 == 11\\n +  where 10 = len([0, 1, 2, 3, 4, 5, ...])\"\n\n    def test_custom_reprcompare(self, monkeypatch) -> None:\n        def my_reprcompare1(op, left, right) -> str:\n            return \"42\"\n\n        monkeypatch.setattr(util, \"_reprcompare\", my_reprcompare1)\n\n        def f1() -> None:\n            assert 42 < 3\n\n        assert getmsg(f1) == \"assert 42\"\n\n        def my_reprcompare2(op, left, right) -> str:\n            return f\"{left} {op} {right}\"\n\n        monkeypatch.setattr(util, \"_reprcompare\", my_reprcompare2)\n\n        def f2() -> None:\n            assert 1 < 3 < 5 <= 4 < 7\n\n        assert getmsg(f2) == \"assert 5 <= 4\"\n\n    def test_assert_raising__bool__in_comparison(self) -> None:\n        def f() -> None:\n            class A:\n                def __bool__(self):\n                    raise ValueError(42)\n\n                def __lt__(self, other):\n                    return A()\n\n                def __repr__(self):\n                    return \"<MY42 object>\"\n\n            def myany(x) -> bool:\n                return False\n\n            assert myany(A() < 0)\n\n        msg = getmsg(f)\n        assert msg is not None\n        assert \"<MY42 object> < 0\" in msg\n\n    def test_assert_handling_raise_in__iter__(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            class A:\n                def __iter__(self):\n                    raise ValueError()\n\n                def __eq__(self, o: object) -> bool:\n                    return self is o\n\n                def __repr__(self):\n                    return \"<A object>\"\n\n            assert A() == A()\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*E*assert <A object> == <A object>\"])\n\n    def test_formatchar(self) -> None:\n        def f() -> None:\n            assert \"%test\" == \"test\"  # type: ignore[comparison-overlap]\n\n        msg = getmsg(f)\n        assert msg is not None\n        assert msg.startswith(\"assert '%test' == 'test'\")\n\n    def test_custom_repr(self, request) -> None:\n        def f() -> None:\n            class Foo:\n                a = 1\n\n                def __repr__(self):\n                    return \"\\n{ \\n~ \\n}\"\n\n            f = Foo()\n            assert 0 == f.a\n\n        msg = getmsg(f)\n        assert msg is not None\n        lines = util._format_lines([msg])\n        assert lines == [\"assert 0 == 1\\n +  where 1 = \\\\n{ \\\\n~ \\\\n}.a\"]\n\n    def test_custom_repr_non_ascii(self) -> None:\n        def f() -> None:\n            class A:\n                name = \"\u00e4\"\n\n                def __repr__(self):\n                    return self.name.encode(\"UTF-8\")  # only legal in python2\n\n            a = A()\n            assert not a.name\n\n        msg = getmsg(f)\n        assert msg is not None\n        assert \"UnicodeDecodeError\" not in msg\n        assert \"UnicodeEncodeError\" not in msg\n\n\nclass TestRewriteOnImport:\n    def test_pycache_is_a_file(self, pytester: Pytester) -> None:\n        pytester.path.joinpath(\"__pycache__\").write_text(\"Hello\", encoding=\"utf-8\")\n        pytester.makepyfile(\n            \"\"\"\n            def test_rewritten():\n                assert \"@py_builtins\" in globals()\"\"\"\n        )\n        assert pytester.runpytest().ret == 0\n\n    def test_pycache_is_readonly(self, pytester: Pytester) -> None:\n        cache = pytester.mkdir(\"__pycache__\")\n        old_mode = cache.stat().st_mode\n        cache.chmod(old_mode ^ stat.S_IWRITE)\n        pytester.makepyfile(\n            \"\"\"\n            def test_rewritten():\n                assert \"@py_builtins\" in globals()\"\"\"\n        )\n        try:\n            assert pytester.runpytest().ret == 0\n        finally:\n            cache.chmod(old_mode)\n\n    def test_zipfile(self, pytester: Pytester) -> None:\n        z = pytester.path.joinpath(\"myzip.zip\")\n        z_fn = str(z)\n        f = zipfile.ZipFile(z_fn, \"w\")\n        try:\n            f.writestr(\"test_gum/__init__.py\", \"\")\n            f.writestr(\"test_gum/test_lizard.py\", \"\")\n        finally:\n            f.close()\n        z.chmod(256)\n        pytester.makepyfile(\n            f\"\"\"\n            import sys\n            sys.path.append({z_fn!r})\n            import test_gum.test_lizard\"\"\"\n        )\n        assert pytester.runpytest().ret == ExitCode.NO_TESTS_COLLECTED\n\n    @pytest.mark.skipif(\n        sys.version_info < (3, 9),\n        reason=\"importlib.resources.files was introduced in 3.9\",\n    )\n    def test_load_resource_via_files_with_rewrite(self, pytester: Pytester) -> None:\n        example = pytester.path.joinpath(\"demo\") / \"example\"\n        init = pytester.path.joinpath(\"demo\") / \"__init__.py\"\n        pytester.makepyfile(\n            **{\n                \"demo/__init__.py\": \"\"\"\n                from importlib.resources import files\n\n                def load():\n                    return files(__name__)\n                \"\"\",\n                \"test_load\": f\"\"\"\n                pytest_plugins = [\"demo\"]\n\n                def test_load():\n                    from demo import load\n                    found = {{str(i) for i in load().iterdir() if i.name != \"__pycache__\"}}\n                    assert found == {{{str(example)!r}, {str(init)!r}}}\n                \"\"\",\n            }\n        )\n        example.mkdir()\n\n        assert pytester.runpytest(\"-vv\").ret == ExitCode.OK\n\n    def test_readonly(self, pytester: Pytester) -> None:\n        sub = pytester.mkdir(\"testing\")\n        sub.joinpath(\"test_readonly.py\").write_bytes(\n            b\"\"\"\ndef test_rewritten():\n    assert \"@py_builtins\" in globals()\n            \"\"\",\n        )\n        old_mode = sub.stat().st_mode\n        sub.chmod(320)\n        try:\n            assert pytester.runpytest().ret == 0\n        finally:\n            sub.chmod(old_mode)\n\n    def test_dont_write_bytecode(self, pytester: Pytester, monkeypatch) -> None:\n        monkeypatch.delenv(\"PYTHONPYCACHEPREFIX\", raising=False)\n\n        pytester.makepyfile(\n            \"\"\"\n            import os\n            def test_no_bytecode():\n                assert \"__pycache__\" in __cached__\n                assert not os.path.exists(__cached__)\n                assert not os.path.exists(os.path.dirname(__cached__))\"\"\"\n        )\n        monkeypatch.setenv(\"PYTHONDONTWRITEBYTECODE\", \"1\")\n        assert pytester.runpytest_subprocess().ret == 0\n\n    def test_orphaned_pyc_file(self, pytester: Pytester, monkeypatch) -> None:\n        monkeypatch.delenv(\"PYTHONPYCACHEPREFIX\", raising=False)\n        monkeypatch.setattr(sys, \"pycache_prefix\", None, raising=False)\n\n        pytester.makepyfile(\n            \"\"\"\n            import orphan\n            def test_it():\n                assert orphan.value == 17\n            \"\"\"\n        )\n        pytester.makepyfile(\n            orphan=\"\"\"\n            value = 17\n            \"\"\"\n        )\n        py_compile.compile(\"orphan.py\")\n        os.remove(\"orphan.py\")\n\n        # Python 3 puts the .pyc files in a __pycache__ directory, and will\n        # not import from there without source.  It will import a .pyc from\n        # the source location though.\n        if not os.path.exists(\"orphan.pyc\"):\n            pycs = glob.glob(\"__pycache__/orphan.*.pyc\")\n            assert len(pycs) == 1\n            os.rename(pycs[0], \"orphan.pyc\")\n\n        assert pytester.runpytest().ret == 0\n\n    def test_cached_pyc_includes_pytest_version(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        \"\"\"Avoid stale caches (#1671)\"\"\"\n        monkeypatch.delenv(\"PYTHONDONTWRITEBYTECODE\", raising=False)\n        monkeypatch.delenv(\"PYTHONPYCACHEPREFIX\", raising=False)\n        pytester.makepyfile(\n            test_foo=\"\"\"\n            def test_foo():\n                assert True\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        assert result.ret == 0\n        found_names = glob.glob(f\"__pycache__/*-pytest-{pytest.__version__}.pyc\")\n        assert found_names, \"pyc with expected tag not found in names: {}\".format(\n            glob.glob(\"__pycache__/*.pyc\")\n        )\n\n    @pytest.mark.skipif('\"__pypy__\" in sys.modules')\n    def test_pyc_vs_pyo(\n        self,\n        pytester: Pytester,\n        monkeypatch: pytest.MonkeyPatch,\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_optimized():\n                \"hello\"\n                assert test_optimized.__doc__ is None\"\"\"\n        )\n        p = make_numbered_dir(root=Path(pytester.path), prefix=\"runpytest-\")\n        tmp = f\"--basetemp={p}\"\n        with monkeypatch.context() as mp:\n            mp.setenv(\"PYTHONOPTIMIZE\", \"2\")\n            mp.delenv(\"PYTHONDONTWRITEBYTECODE\", raising=False)\n            mp.delenv(\"PYTHONPYCACHEPREFIX\", raising=False)\n            assert pytester.runpytest_subprocess(tmp).ret == 0\n            tagged = \"test_pyc_vs_pyo.\" + PYTEST_TAG\n            assert tagged + \".pyo\" in os.listdir(\"__pycache__\")\n        monkeypatch.delenv(\"PYTHONDONTWRITEBYTECODE\", raising=False)\n        monkeypatch.delenv(\"PYTHONPYCACHEPREFIX\", raising=False)\n        assert pytester.runpytest_subprocess(tmp).ret == 1\n        assert tagged + \".pyc\" in os.listdir(\"__pycache__\")\n\n    def test_package(self, pytester: Pytester) -> None:\n        pkg = pytester.path.joinpath(\"pkg\")\n        pkg.mkdir()\n        pkg.joinpath(\"__init__.py\")\n        pkg.joinpath(\"test_blah.py\").write_text(\n            \"\"\"\ndef test_rewritten():\n    assert \"@py_builtins\" in globals()\"\"\",\n            encoding=\"utf-8\",\n        )\n        assert pytester.runpytest().ret == 0\n\n    def test_translate_newlines(self, pytester: Pytester) -> None:\n        content = \"def test_rewritten():\\r\\n assert '@py_builtins' in globals()\"\n        b = content.encode(\"utf-8\")\n        pytester.path.joinpath(\"test_newlines.py\").write_bytes(b)\n        assert pytester.runpytest().ret == 0\n\n    def test_package_without__init__py(self, pytester: Pytester) -> None:\n        pkg = pytester.mkdir(\"a_package_without_init_py\")\n        pkg.joinpath(\"module.py\").touch()\n        pytester.makepyfile(\"import a_package_without_init_py.module\")\n        assert pytester.runpytest().ret == ExitCode.NO_TESTS_COLLECTED\n\n    def test_rewrite_warning(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            pytest.register_assert_rewrite(\"_pytest\")\n        \"\"\"\n        )\n        # needs to be a subprocess because pytester explicitly disables this warning\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines([\"*Module already imported*: _pytest\"])\n\n    def test_rewrite_module_imported_from_conftest(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import test_rewrite_module_imported\n        \"\"\"\n        )\n        pytester.makepyfile(\n            test_rewrite_module_imported=\"\"\"\n            def test_rewritten():\n                assert \"@py_builtins\" in globals()\n        \"\"\"\n        )\n        assert pytester.runpytest_subprocess().ret == 0\n\n    def test_remember_rewritten_modules(\n        self, pytestconfig, pytester: Pytester, monkeypatch\n    ) -> None:\n        \"\"\"`AssertionRewriteHook` should remember rewritten modules so it\n        doesn't give false positives (#2005).\"\"\"\n        monkeypatch.syspath_prepend(pytester.path)\n        pytester.makepyfile(test_remember_rewritten_modules=\"\")\n        warnings = []\n        hook = AssertionRewritingHook(pytestconfig)\n        monkeypatch.setattr(\n            hook, \"_warn_already_imported\", lambda code, msg: warnings.append(msg)\n        )\n        spec = hook.find_spec(\"test_remember_rewritten_modules\")\n        assert spec is not None\n        module = importlib.util.module_from_spec(spec)\n        hook.exec_module(module)\n        hook.mark_rewrite(\"test_remember_rewritten_modules\")\n        hook.mark_rewrite(\"test_remember_rewritten_modules\")\n        assert warnings == []\n\n    def test_rewrite_warning_using_pytest_plugins(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            **{\n                \"conftest.py\": \"pytest_plugins = ['core', 'gui', 'sci']\",\n                \"core.py\": \"\",\n                \"gui.py\": \"pytest_plugins = ['core', 'sci']\",\n                \"sci.py\": \"pytest_plugins = ['core']\",\n                \"test_rewrite_warning_pytest_plugins.py\": \"def test(): pass\",\n            }\n        )\n        pytester.chdir()\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines([\"*= 1 passed in *=*\"])\n        result.stdout.no_fnmatch_line(\"*pytest-warning summary*\")\n\n    def test_rewrite_warning_using_pytest_plugins_env_var(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        monkeypatch.setenv(\"PYTEST_PLUGINS\", \"plugin\")\n        pytester.makepyfile(\n            **{\n                \"plugin.py\": \"\",\n                \"test_rewrite_warning_using_pytest_plugins_env_var.py\": \"\"\"\n                import plugin\n                pytest_plugins = ['plugin']\n                def test():\n                    pass\n            \"\"\",\n            }\n        )\n        pytester.chdir()\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines([\"*= 1 passed in *=*\"])\n        result.stdout.no_fnmatch_line(\"*pytest-warning summary*\")\n\n\nclass TestAssertionRewriteHookDetails:\n    def test_sys_meta_path_munged(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_meta_path():\n                import sys; sys.meta_path = []\"\"\"\n        )\n        assert pytester.runpytest().ret == 0\n\n    def test_write_pyc(self, pytester: Pytester, tmp_path) -> None:\n        from _pytest.assertion import AssertionState\n        from _pytest.assertion.rewrite import _write_pyc\n\n        config = pytester.parseconfig()\n        state = AssertionState(config, \"rewrite\")\n        tmp_path.joinpath(\"source.py\").touch()\n        source_path = str(tmp_path)\n        pycpath = tmp_path.joinpath(\"pyc\")\n        co = compile(\"1\", \"f.py\", \"single\")\n        assert _write_pyc(state, co, os.stat(source_path), pycpath)\n\n        with mock.patch.object(os, \"replace\", side_effect=OSError):\n            assert not _write_pyc(state, co, os.stat(source_path), pycpath)\n\n    def test_resources_provider_for_loader(self, pytester: Pytester) -> None:\n        \"\"\"\n        Attempts to load resources from a package should succeed normally,\n        even when the AssertionRewriteHook is used to load the modules.\n\n        See #366 for details.\n        \"\"\"\n        pytest.importorskip(\"pkg_resources\")\n\n        pytester.mkpydir(\"testpkg\")\n        contents = {\n            \"testpkg/test_pkg\": \"\"\"\n                import pkg_resources\n\n                import pytest\n                from _pytest.assertion.rewrite import AssertionRewritingHook\n\n                def test_load_resource():\n                    assert isinstance(__loader__, AssertionRewritingHook)\n                    res = pkg_resources.resource_string(__name__, 'resource.txt')\n                    res = res.decode('ascii')\n                    assert res == 'Load me please.'\n                \"\"\"\n        }\n        pytester.makepyfile(**contents)\n        pytester.maketxtfile(**{\"testpkg/resource\": \"Load me please.\"})\n\n        result = pytester.runpytest_subprocess()\n        result.assert_outcomes(passed=1)\n\n    def test_read_pyc(self, tmp_path: Path) -> None:\n        \"\"\"\n        Ensure that the `_read_pyc` can properly deal with corrupted pyc files.\n        In those circumstances it should just give up instead of generating\n        an exception that is propagated to the caller.\n        \"\"\"\n        import py_compile\n\n        from _pytest.assertion.rewrite import _read_pyc\n\n        source = tmp_path / \"source.py\"\n        pyc = Path(str(source) + \"c\")\n\n        source.write_text(\"def test(): pass\", encoding=\"utf-8\")\n        py_compile.compile(str(source), str(pyc))\n\n        contents = pyc.read_bytes()\n        strip_bytes = 20  # header is around 16 bytes, strip a little more\n        assert len(contents) > strip_bytes\n        pyc.write_bytes(contents[:strip_bytes])\n\n        assert _read_pyc(source, pyc) is None  # no error\n\n    def test_read_pyc_success(self, tmp_path: Path, pytester: Pytester) -> None:\n        \"\"\"\n        Ensure that the _rewrite_test() -> _write_pyc() produces a pyc file\n        that can be properly read with _read_pyc()\n        \"\"\"\n        from _pytest.assertion import AssertionState\n        from _pytest.assertion.rewrite import _read_pyc\n        from _pytest.assertion.rewrite import _rewrite_test\n        from _pytest.assertion.rewrite import _write_pyc\n\n        config = pytester.parseconfig()\n        state = AssertionState(config, \"rewrite\")\n\n        fn = tmp_path / \"source.py\"\n        pyc = Path(str(fn) + \"c\")\n\n        fn.write_text(\"def test(): assert True\", encoding=\"utf-8\")\n\n        source_stat, co = _rewrite_test(fn, config)\n        _write_pyc(state, co, source_stat, pyc)\n        assert _read_pyc(fn, pyc, state.trace) is not None\n\n    def test_read_pyc_more_invalid(self, tmp_path: Path) -> None:\n        from _pytest.assertion.rewrite import _read_pyc\n\n        source = tmp_path / \"source.py\"\n        pyc = tmp_path / \"source.pyc\"\n\n        source_bytes = b\"def test(): pass\\n\"\n        source.write_bytes(source_bytes)\n\n        magic = importlib.util.MAGIC_NUMBER\n\n        flags = b\"\\x00\\x00\\x00\\x00\"\n\n        mtime = b\"\\x58\\x3c\\xb0\\x5f\"\n        mtime_int = int.from_bytes(mtime, \"little\")\n        os.utime(source, (mtime_int, mtime_int))\n\n        size = len(source_bytes).to_bytes(4, \"little\")\n\n        code = marshal.dumps(compile(source_bytes, str(source), \"exec\"))\n\n        # Good header.\n        pyc.write_bytes(magic + flags + mtime + size + code)\n        assert _read_pyc(source, pyc, print) is not None\n\n        # Too short.\n        pyc.write_bytes(magic + flags + mtime)\n        assert _read_pyc(source, pyc, print) is None\n\n        # Bad magic.\n        pyc.write_bytes(b\"\\x12\\x34\\x56\\x78\" + flags + mtime + size + code)\n        assert _read_pyc(source, pyc, print) is None\n\n        # Unsupported flags.\n        pyc.write_bytes(magic + b\"\\x00\\xff\\x00\\x00\" + mtime + size + code)\n        assert _read_pyc(source, pyc, print) is None\n\n        # Bad mtime.\n        pyc.write_bytes(magic + flags + b\"\\x58\\x3d\\xb0\\x5f\" + size + code)\n        assert _read_pyc(source, pyc, print) is None\n\n        # Bad size.\n        pyc.write_bytes(magic + flags + mtime + b\"\\x99\\x00\\x00\\x00\" + code)\n        assert _read_pyc(source, pyc, print) is None\n\n    def test_reload_is_same_and_reloads(self, pytester: Pytester) -> None:\n        \"\"\"Reloading a (collected) module after change picks up the change.\"\"\"\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            python_files = *.py\n            \"\"\"\n        )\n        pytester.makepyfile(\n            file=\"\"\"\n            def reloaded():\n                return False\n\n            def rewrite_self():\n                with open(__file__, 'w', encoding='utf-8') as self:\n                    self.write('def reloaded(): return True')\n            \"\"\",\n            test_fun=\"\"\"\n            import sys\n            from importlib import reload\n\n            def test_loader():\n                import file\n                assert not file.reloaded()\n                file.rewrite_self()\n                assert sys.modules[\"file\"] is reload(file)\n                assert file.reloaded()\n            \"\"\",\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 1 passed*\"])\n\n    def test_get_data_support(self, pytester: Pytester) -> None:\n        \"\"\"Implement optional PEP302 api (#808).\"\"\"\n        path = pytester.mkpydir(\"foo\")\n        path.joinpath(\"test_foo.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                class Test(object):\n                    def test_foo(self):\n                        import pkgutil\n                        data = pkgutil.get_data('foo.test_foo', 'data.txt')\n                        assert data == b'Hey'\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        path.joinpath(\"data.txt\").write_text(\"Hey\", encoding=\"utf-8\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_issue731(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n    class LongReprWithBraces(object):\n        def __repr__(self):\n           return 'LongReprWithBraces({' + ('a' * 80) + '}' + ('a' * 120) + ')'\n\n        def some_method(self):\n            return False\n\n    def test_long_repr():\n        obj = LongReprWithBraces()\n        assert obj.some_method()\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.no_fnmatch_line(\"*unbalanced braces*\")\n\n\nclass TestIssue925:\n    def test_simple_case(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n        def test_ternary_display():\n            assert (False == False) == False\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*E*assert (False == False) == False\"])\n\n    def test_long_case(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n        def test_ternary_display():\n             assert False == (False == True) == True\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*E*assert (False == True) == True\"])\n\n    def test_many_brackets(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_ternary_display():\n                 assert True == ((False == True) == True)\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*E*assert True == ((False == True) == True)\"])\n\n\nclass TestIssue2121:\n    def test_rewrite_python_files_contain_subdirs(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            **{\n                \"tests/file.py\": \"\"\"\n                def test_simple_failure():\n                    assert 1 + 1 == 3\n                \"\"\"\n            }\n        )\n        pytester.makeini(\n            \"\"\"\n                [pytest]\n                python_files = tests/**.py\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*E*assert (1 + 1) == 3\"])\n\n\nclass TestIssue10743:\n    def test_assertion_walrus_operator(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def my_func(before, after):\n                return before == after\n\n            def change_value(value):\n                return value.lower()\n\n            def test_walrus_conversion():\n                a = \"Hello\"\n                assert not my_func(a, a := change_value(a))\n                assert a == \"hello\"\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_dont_rewrite(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            'PYTEST_DONT_REWRITE'\n            def my_func(before, after):\n                return before == after\n\n            def change_value(value):\n                return value.lower()\n\n            def test_walrus_conversion_dont_rewrite():\n                a = \"Hello\"\n                assert not my_func(a, a := change_value(a))\n                assert a == \"hello\"\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_inline_walrus_operator(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def my_func(before, after):\n                return before == after\n\n            def test_walrus_conversion_inline():\n                a = \"Hello\"\n                assert not my_func(a, a := a.lower())\n                assert a == \"hello\"\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_inline_walrus_operator_reverse(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def my_func(before, after):\n                return before == after\n\n            def test_walrus_conversion_reverse():\n                a = \"Hello\"\n                assert my_func(a := a.lower(), a)\n                assert a == 'hello'\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_no_variable_name_conflict(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_walrus_conversion_no_conflict():\n                a = \"Hello\"\n                assert a == (b := a.lower())\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*AssertionError: assert 'Hello' == 'hello'\"])\n\n    def test_assertion_walrus_operator_true_assertion_and_changes_variable_value(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_walrus_conversion_succeed():\n                a = \"Hello\"\n                assert a != (a := a.lower())\n                assert a == 'hello'\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_fail_assertion(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_walrus_conversion_fails():\n                a = \"Hello\"\n                assert a == (a := a.lower())\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*AssertionError: assert 'Hello' == 'hello'\"])\n\n    def test_assertion_walrus_operator_boolean_composite(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_walrus_operator_change_boolean_value():\n                a = True\n                assert a and True and ((a := False) is False) and (a is False) and ((a := None) is None)\n                assert a is None\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_compare_boolean_fails(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_walrus_operator_change_boolean_value():\n                a = True\n                assert not (a and ((a := False) is False))\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*assert not (True and False is False)\"])\n\n    def test_assertion_walrus_operator_boolean_none_fails(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_walrus_operator_change_boolean_value():\n                a = True\n                assert not (a and ((a := None) is None))\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*assert not (True and None is None)\"])\n\n    def test_assertion_walrus_operator_value_changes_cleared_after_each_test(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_walrus_operator_change_value():\n                a = True\n                assert (a := None) is None\n\n            def test_walrus_operator_not_override_value():\n                a = True\n                assert a is True\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n\nclass TestIssue11028:\n    def test_assertion_walrus_operator_in_operand(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_in_string():\n              assert (obj := \"foo\") in obj\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_in_operand_json_dumps(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import json\n\n            def test_json_encoder():\n                assert (obj := \"foo\") in json.dumps(obj)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_equals_operand_function(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def f(a):\n                return a\n\n            def test_call_other_function_arg():\n              assert (obj := \"foo\") == f(obj)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_equals_operand_function_keyword_arg(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def f(a='test'):\n                return a\n\n            def test_call_other_function_k_arg():\n              assert (obj := \"foo\") == f(a=obj)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_equals_operand_function_arg_as_function(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def f(a='test'):\n                return a\n\n            def test_function_of_function():\n              assert (obj := \"foo\") == f(f(obj))\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_assertion_walrus_operator_gt_operand_function(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def add_one(a):\n                return a + 1\n\n            def test_gt():\n              assert (obj := 4) > add_one(obj)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*assert 4 > 5\", \"*where 5 = add_one(4)\"])\n\n\nclass TestIssue11239:\n    def test_assertion_walrus_different_test_cases(self, pytester: Pytester) -> None:\n        \"\"\"Regression for (#11239)\n\n        Walrus operator rewriting would leak to separate test cases if they used the same variables.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                state = {\"x\": 2}.get(\"x\")\n                assert state is not None\n\n            def test_2():\n                db = {\"x\": 2}\n                assert (state := db.get(\"x\")) is not None\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n\n@pytest.mark.skipif(\n    sys.maxsize <= (2**31 - 1), reason=\"Causes OverflowError on 32bit systems\"\n)\n@pytest.mark.parametrize(\"offset\", [-1, +1])\ndef test_source_mtime_long_long(pytester: Pytester, offset) -> None:\n    \"\"\"Support modification dates after 2038 in rewritten files (#4903).\n\n    pytest would crash with:\n\n            fp.write(struct.pack(\"<ll\", mtime, size))\n        E   struct.error: argument out of range\n    \"\"\"\n    p = pytester.makepyfile(\n        \"\"\"\n        def test(): pass\n    \"\"\"\n    )\n    # use unsigned long timestamp which overflows signed long,\n    # which was the cause of the bug\n    # +1 offset also tests masking of 0xFFFFFFFF\n    timestamp = 2**32 + offset\n    os.utime(str(p), (timestamp, timestamp))\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\ndef test_rewrite_infinite_recursion(\n    pytester: Pytester, pytestconfig, monkeypatch\n) -> None:\n    \"\"\"Fix infinite recursion when writing pyc files: if an import happens to be triggered when writing the pyc\n    file, this would cause another call to the hook, which would trigger another pyc writing, which could\n    trigger another import, and so on. (#3506)\"\"\"\n    from _pytest.assertion import rewrite as rewritemod\n\n    pytester.syspathinsert()\n    pytester.makepyfile(test_foo=\"def test_foo(): pass\")\n    pytester.makepyfile(test_bar=\"def test_bar(): pass\")\n\n    original_write_pyc = rewritemod._write_pyc\n\n    write_pyc_called = []\n\n    def spy_write_pyc(*args, **kwargs):\n        # make a note that we have called _write_pyc\n        write_pyc_called.append(True)\n        # try to import a module at this point: we should not try to rewrite this module\n        assert hook.find_spec(\"test_bar\") is None\n        return original_write_pyc(*args, **kwargs)\n\n    monkeypatch.setattr(rewritemod, \"_write_pyc\", spy_write_pyc)\n    monkeypatch.setattr(sys, \"dont_write_bytecode\", False)\n\n    hook = AssertionRewritingHook(pytestconfig)\n    spec = hook.find_spec(\"test_foo\")\n    assert spec is not None\n    module = importlib.util.module_from_spec(spec)\n    hook.exec_module(module)\n    assert len(write_pyc_called) == 1\n\n\nclass TestEarlyRewriteBailout:\n    @pytest.fixture\n    def hook(\n        self, pytestconfig, monkeypatch, pytester: Pytester\n    ) -> Generator[AssertionRewritingHook, None, None]:\n        \"\"\"Returns a patched AssertionRewritingHook instance so we can configure its initial paths and track\n        if PathFinder.find_spec has been called.\n        \"\"\"\n        import importlib.machinery\n\n        self.find_spec_calls: list[str] = []\n        self.initial_paths: set[Path] = set()\n\n        class StubSession:\n            _initialpaths = self.initial_paths\n\n            def isinitpath(self, p):\n                return p in self._initialpaths\n\n        def spy_find_spec(name, path):\n            self.find_spec_calls.append(name)\n            return importlib.machinery.PathFinder.find_spec(name, path)\n\n        hook = AssertionRewritingHook(pytestconfig)\n        # use default patterns, otherwise we inherit pytest's testing config\n        with mock.patch.object(hook, \"fnpats\", [\"test_*.py\", \"*_test.py\"]):\n            monkeypatch.setattr(hook, \"_find_spec\", spy_find_spec)\n            hook.set_session(StubSession())  # type: ignore[arg-type]\n            pytester.syspathinsert()\n            yield hook\n\n    def test_basic(self, pytester: Pytester, hook: AssertionRewritingHook) -> None:\n        \"\"\"\n        Ensure we avoid calling PathFinder.find_spec when we know for sure a certain\n        module will not be rewritten to optimize assertion rewriting (#3918).\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def fix(): return 1\n        \"\"\"\n        )\n        pytester.makepyfile(test_foo=\"def test_foo(): pass\")\n        pytester.makepyfile(bar=\"def bar(): pass\")\n        foobar_path = pytester.makepyfile(foobar=\"def foobar(): pass\")\n        self.initial_paths.add(foobar_path)\n\n        # conftest files should always be rewritten\n        assert hook.find_spec(\"conftest\") is not None\n        assert self.find_spec_calls == [\"conftest\"]\n\n        # files matching \"python_files\" mask should always be rewritten\n        assert hook.find_spec(\"test_foo\") is not None\n        assert self.find_spec_calls == [\"conftest\", \"test_foo\"]\n\n        # file does not match \"python_files\": early bailout\n        assert hook.find_spec(\"bar\") is None\n        assert self.find_spec_calls == [\"conftest\", \"test_foo\"]\n\n        # file is an initial path (passed on the command-line): should be rewritten\n        assert hook.find_spec(\"foobar\") is not None\n        assert self.find_spec_calls == [\"conftest\", \"test_foo\", \"foobar\"]\n\n    def test_pattern_contains_subdirectories(\n        self, pytester: Pytester, hook: AssertionRewritingHook\n    ) -> None:\n        \"\"\"If one of the python_files patterns contain subdirectories (\"tests/**.py\") we can't bailout early\n        because we need to match with the full path, which can only be found by calling PathFinder.find_spec\n        \"\"\"\n        pytester.makepyfile(\n            **{\n                \"tests/file.py\": \"\"\"\\\n                    def test_simple_failure():\n                        assert 1 + 1 == 3\n                \"\"\"\n            }\n        )\n        pytester.syspathinsert(\"tests\")\n        with mock.patch.object(hook, \"fnpats\", [\"tests/**.py\"]):\n            assert hook.find_spec(\"file\") is not None\n            assert self.find_spec_calls == [\"file\"]\n\n    @pytest.mark.skipif(\n        sys.platform.startswith(\"win32\"), reason=\"cannot remove cwd on Windows\"\n    )\n    @pytest.mark.skipif(\n        sys.platform.startswith(\"sunos5\"), reason=\"cannot remove cwd on Solaris\"\n    )\n    def test_cwd_changed(self, pytester: Pytester, monkeypatch) -> None:\n        # Setup conditions for py's fspath trying to import pathlib on py34\n        # always (previously triggered via xdist only).\n        # Ref: https://github.com/pytest-dev/py/pull/207\n        monkeypatch.syspath_prepend(\"\")\n        monkeypatch.delitem(sys.modules, \"pathlib\", raising=False)\n\n        pytester.makepyfile(\n            **{\n                \"test_setup_nonexisting_cwd.py\": \"\"\"\\\n                    import os\n                    import tempfile\n\n                    with tempfile.TemporaryDirectory() as newpath:\n                        os.chdir(newpath)\n                \"\"\",\n                \"test_test.py\": \"\"\"\\\n                    def test():\n                        pass\n                \"\"\",\n            }\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n\nclass TestAssertionPass:\n    def test_option_default(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        assert config.getini(\"enable_assertion_pass_hook\") is False\n\n    @pytest.fixture\n    def flag_on(self, pytester: Pytester):\n        pytester.makeini(\"[pytest]\\nenable_assertion_pass_hook = True\\n\")\n\n    @pytest.fixture\n    def hook_on(self, pytester: Pytester):\n        pytester.makeconftest(\n            \"\"\"\\\n            def pytest_assertion_pass(item, lineno, orig, expl):\n                raise Exception(\"Assertion Passed: {} {} at line {}\".format(orig, expl, lineno))\n            \"\"\"\n        )\n\n    def test_hook_call(self, pytester: Pytester, flag_on, hook_on) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            def test_simple():\n                a=1\n                b=2\n                c=3\n                d=0\n\n                assert a+b == c+d\n\n            # cover failing assertions with a message\n            def test_fails():\n                assert False, \"assert with message\"\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            \"*Assertion Passed: a+b == c+d (1 + 2) == (3 + 0) at line 7*\"\n        )\n\n    def test_hook_call_with_parens(self, pytester: Pytester, flag_on, hook_on) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            def f(): return 1\n            def test():\n                assert f()\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\"*Assertion Passed: f() 1\")\n\n    def test_hook_not_called_without_hookimpl(\n        self, pytester: Pytester, monkeypatch, flag_on\n    ) -> None:\n        \"\"\"Assertion pass should not be called (and hence formatting should\n        not occur) if there is no hook declared for pytest_assertion_pass\"\"\"\n\n        def raise_on_assertionpass(*_, **__):\n            raise Exception(\"Assertion passed called when it shouldn't!\")\n\n        monkeypatch.setattr(\n            _pytest.assertion.rewrite, \"_call_assertion_pass\", raise_on_assertionpass\n        )\n\n        pytester.makepyfile(\n            \"\"\"\\\n            def test_simple():\n                a=1\n                b=2\n                c=3\n                d=0\n\n                assert a+b == c+d\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.assert_outcomes(passed=1)\n\n    def test_hook_not_called_without_cmd_option(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        \"\"\"Assertion pass should not be called (and hence formatting should\n        not occur) if there is no hook declared for pytest_assertion_pass\"\"\"\n\n        def raise_on_assertionpass(*_, **__):\n            raise Exception(\"Assertion passed called when it shouldn't!\")\n\n        monkeypatch.setattr(\n            _pytest.assertion.rewrite, \"_call_assertion_pass\", raise_on_assertionpass\n        )\n\n        pytester.makeconftest(\n            \"\"\"\\\n            def pytest_assertion_pass(item, lineno, orig, expl):\n                raise Exception(\"Assertion Passed: {} {} at line {}\".format(orig, expl, lineno))\n            \"\"\"\n        )\n\n        pytester.makepyfile(\n            \"\"\"\\\n            def test_simple():\n                a=1\n                b=2\n                c=3\n                d=0\n\n                assert a+b == c+d\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.assert_outcomes(passed=1)\n\n\n# fmt: off\n@pytest.mark.parametrize(\n    (\"src\", \"expected\"),\n    (\n        pytest.param(b\"\", {}, id=\"trivial\"),\n        pytest.param(\n            b\"def x(): assert 1\\n\",\n            {1: \"1\"},\n            id=\"assert statement not on own line\",\n        ),\n        pytest.param(\n            b\"def x():\\n\"\n            b\"    assert 1\\n\"\n            b\"    assert 1+2\\n\",\n            {2: \"1\", 3: \"1+2\"},\n            id=\"multiple assertions\",\n        ),\n        pytest.param(\n            # changes in encoding cause the byte offsets to be different\n            \"# -*- coding: latin1\\n\"\n            \"def \u00c0\u00c0\u00c0\u00c0\u00c0(): assert 1\\n\".encode(\"latin1\"),\n            {2: \"1\"},\n            id=\"latin1 encoded on first line\\n\",\n        ),\n        pytest.param(\n            # using the default utf-8 encoding\n            \"def \u00c0\u00c0\u00c0\u00c0\u00c0(): assert 1\\n\".encode(),\n            {1: \"1\"},\n            id=\"utf-8 encoded on first line\",\n        ),\n        pytest.param(\n            b\"def x():\\n\"\n            b\"    assert (\\n\"\n            b\"        1 + 2  # comment\\n\"\n            b\"    )\\n\",\n            {2: \"(\\n        1 + 2  # comment\\n    )\"},\n            id=\"multi-line assertion\",\n        ),\n        pytest.param(\n            b\"def x():\\n\"\n            b\"    assert y == [\\n\"\n            b\"        1, 2, 3\\n\"\n            b\"    ]\\n\",\n            {2: \"y == [\\n        1, 2, 3\\n    ]\"},\n            id=\"multi line assert with list continuation\",\n        ),\n        pytest.param(\n            b\"def x():\\n\"\n            b\"    assert 1 + \\\\\\n\"\n            b\"        2\\n\",\n            {2: \"1 + \\\\\\n        2\"},\n            id=\"backslash continuation\",\n        ),\n        pytest.param(\n            b\"def x():\\n\"\n            b\"    assert x, y\\n\",\n            {2: \"x\"},\n            id=\"assertion with message\",\n        ),\n        pytest.param(\n            b\"def x():\\n\"\n            b\"    assert (\\n\"\n            b\"        f(1, 2, 3)\\n\"\n            b\"    ),  'f did not work!'\\n\",\n            {2: \"(\\n        f(1, 2, 3)\\n    )\"},\n            id=\"assertion with message, test spanning multiple lines\",\n        ),\n        pytest.param(\n            b\"def x():\\n\"\n            b\"    assert \\\\\\n\"\n            b\"        x\\\\\\n\"\n            b\"        , 'failure message'\\n\",\n            {2: \"x\"},\n            id=\"escaped newlines plus message\",\n        ),\n        pytest.param(\n            b\"def x(): assert 5\",\n            {1: \"5\"},\n            id=\"no newline at end of file\",\n        ),\n    ),\n)\n# fmt: on\ndef test_get_assertion_exprs(src, expected) -> None:\n    assert _get_assertion_exprs(src) == expected\n\n\ndef test_try_makedirs(monkeypatch, tmp_path: Path) -> None:\n    from _pytest.assertion.rewrite import try_makedirs\n\n    p = tmp_path / \"foo\"\n\n    # create\n    assert try_makedirs(p)\n    assert p.is_dir()\n\n    # already exist\n    assert try_makedirs(p)\n\n    # monkeypatch to simulate all error situations\n    def fake_mkdir(p, exist_ok=False, *, exc):\n        assert isinstance(p, Path)\n        raise exc\n\n    monkeypatch.setattr(os, \"makedirs\", partial(fake_mkdir, exc=FileNotFoundError()))\n    assert not try_makedirs(p)\n\n    monkeypatch.setattr(os, \"makedirs\", partial(fake_mkdir, exc=NotADirectoryError()))\n    assert not try_makedirs(p)\n\n    monkeypatch.setattr(os, \"makedirs\", partial(fake_mkdir, exc=PermissionError()))\n    assert not try_makedirs(p)\n\n    err = OSError()\n    err.errno = errno.EROFS\n    monkeypatch.setattr(os, \"makedirs\", partial(fake_mkdir, exc=err))\n    assert not try_makedirs(p)\n\n    err = OSError()\n    err.errno = errno.ENOSYS\n    monkeypatch.setattr(os, \"makedirs\", partial(fake_mkdir, exc=err))\n    assert not try_makedirs(p)\n\n    # unhandled OSError should raise\n    err = OSError()\n    err.errno = errno.ECHILD\n    monkeypatch.setattr(os, \"makedirs\", partial(fake_mkdir, exc=err))\n    with pytest.raises(OSError) as exc_info:\n        try_makedirs(p)\n    assert exc_info.value.errno == errno.ECHILD\n\n\nclass TestPyCacheDir:\n    @pytest.mark.parametrize(\n        \"prefix, source, expected\",\n        [\n            (\"c:/tmp/pycs\", \"d:/projects/src/foo.py\", \"c:/tmp/pycs/projects/src\"),\n            (None, \"d:/projects/src/foo.py\", \"d:/projects/src/__pycache__\"),\n            (\"/tmp/pycs\", \"/home/projects/src/foo.py\", \"/tmp/pycs/home/projects/src\"),\n            (None, \"/home/projects/src/foo.py\", \"/home/projects/src/__pycache__\"),\n        ],\n    )\n    def test_get_cache_dir(self, monkeypatch, prefix, source, expected) -> None:\n        monkeypatch.delenv(\"PYTHONPYCACHEPREFIX\", raising=False)\n        monkeypatch.setattr(sys, \"pycache_prefix\", prefix, raising=False)\n\n        assert get_cache_dir(Path(source)) == Path(expected)\n\n    @pytest.mark.skipif(\n        sys.version_info[:2] == (3, 9) and sys.platform.startswith(\"win\"),\n        reason=\"#9298\",\n    )\n    def test_sys_pycache_prefix_integration(\n        self, tmp_path, monkeypatch, pytester: Pytester\n    ) -> None:\n        \"\"\"Integration test for sys.pycache_prefix (#4730).\"\"\"\n        pycache_prefix = tmp_path / \"my/pycs\"\n        monkeypatch.setattr(sys, \"pycache_prefix\", str(pycache_prefix))\n        monkeypatch.setattr(sys, \"dont_write_bytecode\", False)\n\n        pytester.makepyfile(\n            **{\n                \"src/test_foo.py\": \"\"\"\n                import bar\n                def test_foo():\n                    pass\n            \"\"\",\n                \"src/bar/__init__.py\": \"\",\n            }\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n        test_foo = pytester.path.joinpath(\"src/test_foo.py\")\n        bar_init = pytester.path.joinpath(\"src/bar/__init__.py\")\n        assert test_foo.is_file()\n        assert bar_init.is_file()\n\n        # test file: rewritten, custom pytest cache tag\n        test_foo_pyc = get_cache_dir(test_foo) / (\"test_foo\" + PYC_TAIL)\n        assert test_foo_pyc.is_file()\n\n        # normal file: not touched by pytest, normal cache tag\n        bar_init_pyc = (\n            get_cache_dir(bar_init) / f\"__init__.{sys.implementation.cache_tag}.pyc\"\n        )\n        assert bar_init_pyc.is_file()\n\n\nclass TestReprSizeVerbosity:\n    \"\"\"\n    Check that verbosity also controls the string length threshold to shorten it using\n    ellipsis.\n    \"\"\"\n\n    @pytest.mark.parametrize(\n        \"verbose, expected_size\",\n        [\n            (0, DEFAULT_REPR_MAX_SIZE),\n            (1, DEFAULT_REPR_MAX_SIZE * 10),\n            (2, None),\n            (3, None),\n        ],\n    )\n    def test_get_maxsize_for_saferepr(self, verbose: int, expected_size) -> None:\n        class FakeConfig:\n            def get_verbosity(self, verbosity_type: str | None = None) -> int:\n                return verbose\n\n        config = FakeConfig()\n        assert _get_maxsize_for_saferepr(cast(Config, config)) == expected_size\n\n    def test_get_maxsize_for_saferepr_no_config(self) -> None:\n        assert _get_maxsize_for_saferepr(None) == DEFAULT_REPR_MAX_SIZE\n\n    def create_test_file(self, pytester: Pytester, size: int) -> None:\n        pytester.makepyfile(\n            f\"\"\"\n            def test_very_long_string():\n                text = \"x\" * {size}\n                assert \"hello world\" in text\n            \"\"\"\n        )\n\n    def test_default_verbosity(self, pytester: Pytester) -> None:\n        self.create_test_file(pytester, DEFAULT_REPR_MAX_SIZE)\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*xxx...xxx*\"])\n\n    def test_increased_verbosity(self, pytester: Pytester) -> None:\n        self.create_test_file(pytester, DEFAULT_REPR_MAX_SIZE)\n        result = pytester.runpytest(\"-v\")\n        result.stdout.no_fnmatch_line(\"*xxx...xxx*\")\n\n    def test_max_increased_verbosity(self, pytester: Pytester) -> None:\n        self.create_test_file(pytester, DEFAULT_REPR_MAX_SIZE * 10)\n        result = pytester.runpytest(\"-vv\")\n        result.stdout.no_fnmatch_line(\"*xxx...xxx*\")\n\n\nclass TestIssue11140:\n    def test_constant_not_picked_as_module_docstring(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            0\n\n            def test_foo():\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n\nclass TestSafereprUnbounded:\n    class Help:\n        def bound_method(self):  # pragma: no cover\n            pass\n\n    def test_saferepr_bound_method(self):\n        \"\"\"saferepr() of a bound method should show only the method name\"\"\"\n        assert _saferepr(self.Help().bound_method) == \"bound_method\"\n\n    def test_saferepr_unbounded(self):\n        \"\"\"saferepr() of an unbound method should still show the full information\"\"\"\n        obj = self.Help()\n        # using id() to fetch memory address fails on different platforms\n        pattern = re.compile(\n            rf\"<{Path(__file__).stem}.{self.__class__.__name__}.Help object at 0x[0-9a-fA-F]*>\",\n        )\n        assert pattern.match(_saferepr(obj))\n        assert (\n            _saferepr(self.Help)\n            == f\"<class '{Path(__file__).stem}.{self.__class__.__name__}.Help'>\"\n        )\n", "testing/test_mark_expression.py": "from __future__ import annotations\n\nfrom typing import Callable\nfrom typing import cast\n\nfrom _pytest.mark import MarkMatcher\nfrom _pytest.mark.expression import Expression\nfrom _pytest.mark.expression import MatcherCall\nfrom _pytest.mark.expression import ParseError\nimport pytest\n\n\ndef evaluate(input: str, matcher: Callable[[str], bool]) -> bool:\n    return Expression.compile(input).evaluate(cast(MatcherCall, matcher))\n\n\ndef test_empty_is_false() -> None:\n    assert not evaluate(\"\", lambda ident: False)\n    assert not evaluate(\"\", lambda ident: True)\n    assert not evaluate(\"   \", lambda ident: False)\n    assert not evaluate(\"\\t\", lambda ident: False)\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected\"),\n    (\n        (\"true\", True),\n        (\"true\", True),\n        (\"false\", False),\n        (\"not true\", False),\n        (\"not false\", True),\n        (\"not not true\", True),\n        (\"not not false\", False),\n        (\"true and true\", True),\n        (\"true and false\", False),\n        (\"false and true\", False),\n        (\"true and true and true\", True),\n        (\"true and true and false\", False),\n        (\"true and true and not true\", False),\n        (\"false or false\", False),\n        (\"false or true\", True),\n        (\"true or true\", True),\n        (\"true or true or false\", True),\n        (\"true and true or false\", True),\n        (\"not true or true\", True),\n        (\"(not true) or true\", True),\n        (\"not (true or true)\", False),\n        (\"true and true or false and false\", True),\n        (\"true and (true or false) and false\", False),\n        (\"true and (true or (not (not false))) and false\", False),\n    ),\n)\ndef test_basic(expr: str, expected: bool) -> None:\n    matcher = {\"true\": True, \"false\": False}.__getitem__\n    assert evaluate(expr, matcher) is expected\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected\"),\n    (\n        (\"               true           \", True),\n        (\"               ((((((true))))))           \", True),\n        (\"     (         ((\\t  (((true)))))  \\t   \\t)\", True),\n        (\"(     true     and   (((false))))\", False),\n        (\"not not not not true\", True),\n        (\"not not not not not true\", False),\n    ),\n)\ndef test_syntax_oddities(expr: str, expected: bool) -> None:\n    matcher = {\"true\": True, \"false\": False}.__getitem__\n    assert evaluate(expr, matcher) is expected\n\n\ndef test_backslash_not_treated_specially() -> None:\n    r\"\"\"When generating nodeids, if the source name contains special characters\n    like a newline, they are escaped into two characters like \\n. Therefore, a\n    user will never need to insert a literal newline, only \\n (two chars). So\n    mark expressions themselves do not support escaping, instead they treat\n    backslashes as regular identifier characters.\"\"\"\n    matcher = {r\"\\nfoo\\n\"}.__contains__\n\n    assert evaluate(r\"\\nfoo\\n\", matcher)\n    assert not evaluate(r\"foo\", matcher)\n    with pytest.raises(ParseError):\n        evaluate(\"\\nfoo\\n\", matcher)\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"column\", \"message\"),\n    (\n        (\"(\", 2, \"expected not OR left parenthesis OR identifier; got end of input\"),\n        (\n            \" (\",\n            3,\n            \"expected not OR left parenthesis OR identifier; got end of input\",\n        ),\n        (\n            \")\",\n            1,\n            \"expected not OR left parenthesis OR identifier; got right parenthesis\",\n        ),\n        (\n            \") \",\n            1,\n            \"expected not OR left parenthesis OR identifier; got right parenthesis\",\n        ),\n        (\n            \"not\",\n            4,\n            \"expected not OR left parenthesis OR identifier; got end of input\",\n        ),\n        (\n            \"not not\",\n            8,\n            \"expected not OR left parenthesis OR identifier; got end of input\",\n        ),\n        (\n            \"(not)\",\n            5,\n            \"expected not OR left parenthesis OR identifier; got right parenthesis\",\n        ),\n        (\"and\", 1, \"expected not OR left parenthesis OR identifier; got and\"),\n        (\n            \"ident and\",\n            10,\n            \"expected not OR left parenthesis OR identifier; got end of input\",\n        ),\n        (\n            \"ident and or\",\n            11,\n            \"expected not OR left parenthesis OR identifier; got or\",\n        ),\n        (\"ident ident\", 7, \"expected end of input; got identifier\"),\n    ),\n)\ndef test_syntax_errors(expr: str, column: int, message: str) -> None:\n    with pytest.raises(ParseError) as excinfo:\n        evaluate(expr, lambda ident: True)\n    assert excinfo.value.column == column\n    assert excinfo.value.message == message\n\n\n@pytest.mark.parametrize(\n    \"ident\",\n    (\n        \".\",\n        \"...\",\n        \":::\",\n        \"a:::c\",\n        \"a+-b\",\n        r\"\\nhe\\\\l\\lo\\n\\t\\rbye\",\n        \"a/b\",\n        \"\u05d0\u05d1\u05d2\u05d3\",\n        \"aa\u05d0\u05d1\u05d2\u05d3cc\",\n        \"a[bcd]\",\n        \"1234\",\n        \"1234abcd\",\n        \"1234and\",\n        \"1234or\",\n        \"1234not\",\n        \"notandor\",\n        \"not_and_or\",\n        \"not[and]or\",\n        \"1234+5678\",\n        \"123.232\",\n        \"True\",\n        \"False\",\n        \"None\",\n        \"if\",\n        \"else\",\n        \"while\",\n    ),\n)\ndef test_valid_idents(ident: str) -> None:\n    assert evaluate(ident, {ident: True}.__getitem__)\n\n\n@pytest.mark.parametrize(\n    \"ident\",\n    (\n        \"^\",\n        \"*\",\n        \"=\",\n        \"&\",\n        \"%\",\n        \"$\",\n        \"#\",\n        \"@\",\n        \"!\",\n        \"~\",\n        \"{\",\n        \"}\",\n        '\"',\n        \"'\",\n        \"|\",\n        \";\",\n        \"\u2190\",\n    ),\n)\ndef test_invalid_idents(ident: str) -> None:\n    with pytest.raises(ParseError):\n        evaluate(ident, lambda ident: True)\n\n\n@pytest.mark.parametrize(\n    \"expr, expected_error_msg\",\n    (\n        (\"mark(True=False)\", \"unexpected reserved python keyword `True`\"),\n        (\"mark(def=False)\", \"unexpected reserved python keyword `def`\"),\n        (\"mark(class=False)\", \"unexpected reserved python keyword `class`\"),\n        (\"mark(if=False)\", \"unexpected reserved python keyword `if`\"),\n        (\"mark(else=False)\", \"unexpected reserved python keyword `else`\"),\n        (\"mark(valid=False, def=1)\", \"unexpected reserved python keyword `def`\"),\n        (\"mark(1)\", \"not a valid python identifier 1\"),\n        (\"mark(var:=False\", \"not a valid python identifier var:\"),\n        (\"mark(1=2)\", \"not a valid python identifier 1\"),\n        (\"mark(/=2)\", \"not a valid python identifier /\"),\n        (\"mark(var==\", \"expected identifier; got =\"),\n        (\"mark(var)\", \"expected =; got right parenthesis\"),\n        (\"mark(var=none)\", 'unexpected character/s \"none\"'),\n        (\"mark(var=1.1)\", 'unexpected character/s \"1.1\"'),\n        (\"mark(var=')\", \"\"\"closing quote \"'\" is missing\"\"\"),\n        ('mark(var=\")', 'closing quote \"\"\" is missing'),\n        (\"\"\"mark(var=\"')\"\"\", 'closing quote \"\"\" is missing'),\n        (\"\"\"mark(var='\")\"\"\", \"\"\"closing quote \"'\" is missing\"\"\"),\n        (\n            r\"mark(var='\\hugo')\",\n            r'escaping with \"\\\\\" not supported in marker expression',\n        ),\n        (\"mark(empty_list=[])\", r'unexpected character/s \"\\[\\]\"'),\n    ),\n)\ndef test_invalid_kwarg_name_or_value(  # TODO: move to `test_syntax_errors` ?\n    expr: str, expected_error_msg: str, mark_matcher: MarkMatcher\n) -> None:\n    with pytest.raises(ParseError, match=expected_error_msg):\n        assert evaluate(expr, mark_matcher)\n\n\n@pytest.fixture(scope=\"session\")\ndef mark_matcher() -> MarkMatcher:\n    markers = [\n        pytest.mark.number_mark(a=1, b=2, c=3, d=999_999).mark,\n        pytest.mark.builtin_matchers_mark(x=True, y=False, z=None).mark,\n        pytest.mark.str_mark(\n            m=\"M\", space=\"with space\", empty=\"\", aa\u05d0\u05d1\u05d2\u05d3cc=\"aa\u05d0\u05d1\u05d2\u05d3cc\", \u05d0\u05d1\u05d2\u05d3=\"\u05d0\u05d1\u05d2\u05d3\"\n        ).mark,\n    ]\n\n    return MarkMatcher.from_markers(markers)\n\n\n@pytest.mark.parametrize(\n    \"expr, expected\",\n    (\n        # happy cases\n        (\"number_mark(a=1)\", True),\n        (\"number_mark(b=2)\", True),\n        (\"number_mark(a=1,b=2)\", True),\n        (\"number_mark(a=1,     b=2)\", True),\n        (\"number_mark(d=999999)\", True),\n        (\"number_mark(a   =   1,b= 2,     c = 3)\", True),\n        # sad cases\n        (\"number_mark(a=6)\", False),\n        (\"number_mark(b=6)\", False),\n        (\"number_mark(a=1,b=6)\", False),\n        (\"number_mark(a=6,b=2)\", False),\n        (\"number_mark(a   =   1,b= 2,     c = 6)\", False),\n        (\"number_mark(a='1')\", False),\n    ),\n)\ndef test_keyword_expressions_with_numbers(\n    expr: str, expected: bool, mark_matcher: MarkMatcher\n) -> None:\n    assert evaluate(expr, mark_matcher) is expected\n\n\n@pytest.mark.parametrize(\n    \"expr, expected\",\n    (\n        (\"builtin_matchers_mark(x=True)\", True),\n        (\"builtin_matchers_mark(x=False)\", False),\n        (\"builtin_matchers_mark(y=True)\", False),\n        (\"builtin_matchers_mark(y=False)\", True),\n        (\"builtin_matchers_mark(z=None)\", True),\n        (\"builtin_matchers_mark(z=False)\", False),\n        (\"builtin_matchers_mark(z=True)\", False),\n        (\"builtin_matchers_mark(z=0)\", False),\n        (\"builtin_matchers_mark(z=1)\", False),\n    ),\n)\ndef test_builtin_matchers_keyword_expressions(  # TODO: naming when decided\n    expr: str, expected: bool, mark_matcher: MarkMatcher\n) -> None:\n    assert evaluate(expr, mark_matcher) is expected\n\n\n@pytest.mark.parametrize(\n    \"expr, expected\",\n    (\n        (\"str_mark(m='M')\", True),\n        ('str_mark(m=\"M\")', True),\n        (\"str_mark(aa\u05d0\u05d1\u05d2\u05d3cc='aa\u05d0\u05d1\u05d2\u05d3cc')\", True),\n        (\"str_mark(\u05d0\u05d1\u05d2\u05d3='\u05d0\u05d1\u05d2\u05d3')\", True),\n        (\"str_mark(space='with space')\", True),\n        (\"str_mark(empty='')\", True),\n        ('str_mark(empty=\"\")', True),\n        (\"str_mark(m='wrong')\", False),\n        (\"str_mark(aa\u05d0\u05d1\u05d2\u05d3cc='wrong')\", False),\n        (\"str_mark(\u05d0\u05d1\u05d2\u05d3='wrong')\", False),\n        (\"str_mark(m='')\", False),\n        ('str_mark(m=\"\")', False),\n    ),\n)\ndef test_str_keyword_expressions(\n    expr: str, expected: bool, mark_matcher: MarkMatcher\n) -> None:\n    assert evaluate(expr, mark_matcher) is expected\n", "testing/test_faulthandler.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport io\nimport sys\n\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef test_enabled(pytester: Pytester) -> None:\n    \"\"\"Test single crashing test displays a traceback.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n    import faulthandler\n    def test_crash():\n        faulthandler._sigabrt()\n    \"\"\"\n    )\n    result = pytester.runpytest_subprocess()\n    result.stderr.fnmatch_lines([\"*Fatal Python error*\"])\n    assert result.ret != 0\n\n\ndef setup_crashing_test(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import faulthandler\n        import atexit\n        def test_ok():\n            atexit.register(faulthandler._sigabrt)\n        \"\"\"\n    )\n\n\ndef test_crash_during_shutdown_captured(pytester: Pytester) -> None:\n    \"\"\"\n    Re-enable faulthandler if pytest encountered it enabled during configure.\n    We should be able to then see crashes during interpreter shutdown.\n    \"\"\"\n    setup_crashing_test(pytester)\n    args = (sys.executable, \"-Xfaulthandler\", \"-mpytest\")\n    result = pytester.run(*args)\n    result.stderr.fnmatch_lines([\"*Fatal Python error*\"])\n    assert result.ret != 0\n\n\ndef test_crash_during_shutdown_not_captured(pytester: Pytester) -> None:\n    \"\"\"\n    Check that pytest leaves faulthandler disabled if it was not enabled during configure.\n    This prevents us from seeing crashes during interpreter shutdown (see #8260).\n    \"\"\"\n    setup_crashing_test(pytester)\n    args = (sys.executable, \"-mpytest\")\n    result = pytester.run(*args)\n    result.stderr.no_fnmatch_line(\"*Fatal Python error*\")\n    assert result.ret != 0\n\n\ndef test_disabled(pytester: Pytester) -> None:\n    \"\"\"Test option to disable fault handler in the command line.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n    import faulthandler\n    def test_disabled():\n        assert not faulthandler.is_enabled()\n    \"\"\"\n    )\n    result = pytester.runpytest_subprocess(\"-p\", \"no:faulthandler\")\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n    assert result.ret == 0\n\n\n@pytest.mark.parametrize(\n    \"enabled\",\n    [\n        pytest.param(\n            True, marks=pytest.mark.skip(reason=\"sometimes crashes on CI (#7022)\")\n        ),\n        False,\n    ],\n)\ndef test_timeout(pytester: Pytester, enabled: bool) -> None:\n    \"\"\"Test option to dump tracebacks after a certain timeout.\n\n    If faulthandler is disabled, no traceback will be dumped.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n    import os, time\n    def test_timeout():\n        time.sleep(1 if \"CI\" in os.environ else 0.1)\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        faulthandler_timeout = 0.01\n        \"\"\"\n    )\n    args = [\"-p\", \"no:faulthandler\"] if not enabled else []\n\n    result = pytester.runpytest_subprocess(*args)\n    tb_output = \"most recent call first\"\n    if enabled:\n        result.stderr.fnmatch_lines([f\"*{tb_output}*\"])\n    else:\n        assert tb_output not in result.stderr.str()\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n    assert result.ret == 0\n\n\n@pytest.mark.parametrize(\"hook_name\", [\"pytest_enter_pdb\", \"pytest_exception_interact\"])\ndef test_cancel_timeout_on_hook(monkeypatch, hook_name) -> None:\n    \"\"\"Make sure that we are cancelling any scheduled traceback dumping due\n    to timeout before entering pdb (pytest-dev/pytest-faulthandler#12) or any\n    other interactive exception (pytest-dev/pytest-faulthandler#14).\"\"\"\n    import faulthandler\n\n    from _pytest import faulthandler as faulthandler_plugin\n\n    called = []\n\n    monkeypatch.setattr(\n        faulthandler, \"cancel_dump_traceback_later\", lambda: called.append(1)\n    )\n\n    # call our hook explicitly, we can trust that pytest will call the hook\n    # for us at the appropriate moment\n    hook_func = getattr(faulthandler_plugin, hook_name)\n    hook_func()\n    assert called == [1]\n\n\ndef test_already_initialized_crash(pytester: Pytester) -> None:\n    \"\"\"Even if faulthandler is already initialized, we still dump tracebacks on crashes (#8258).\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        def test():\n            import faulthandler\n            faulthandler._sigabrt()\n    \"\"\"\n    )\n    result = pytester.run(\n        sys.executable,\n        \"-X\",\n        \"faulthandler\",\n        \"-mpytest\",\n        pytester.path,\n    )\n    result.stderr.fnmatch_lines([\"*Fatal Python error*\"])\n    assert result.ret != 0\n\n\ndef test_get_stderr_fileno_invalid_fd() -> None:\n    \"\"\"Test for faulthandler being able to handle invalid file descriptors for stderr (#8249).\"\"\"\n    from _pytest.faulthandler import get_stderr_fileno\n\n    class StdErrWrapper(io.StringIO):\n        \"\"\"\n        Mimic ``twisted.logger.LoggingFile`` to simulate returning an invalid file descriptor.\n\n        https://github.com/twisted/twisted/blob/twisted-20.3.0/src/twisted/logger/_io.py#L132-L139\n        \"\"\"\n\n        def fileno(self):\n            return -1\n\n    wrapper = StdErrWrapper()\n\n    with pytest.MonkeyPatch.context() as mp:\n        mp.setattr(\"sys.stderr\", wrapper)\n\n        # Even when the stderr wrapper signals an invalid file descriptor,\n        # ``_get_stderr_fileno()`` should return the real one.\n        assert get_stderr_fileno() == 2\n", "testing/test_unraisableexception.py": "from __future__ import annotations\n\nimport sys\n\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nPYPY = hasattr(sys, \"pypy_version_info\")\n\n\n@pytest.mark.skipif(PYPY, reason=\"garbage-collection differences make this flaky\")\n@pytest.mark.filterwarnings(\"default::pytest.PytestUnraisableExceptionWarning\")\ndef test_unraisable(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=\"\"\"\n        class BrokenDel:\n            def __del__(self):\n                raise ValueError(\"del is broken\")\n\n        def test_it():\n            obj = BrokenDel()\n            del obj\n\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n    assert result.parseoutcomes() == {\"passed\": 2, \"warnings\": 1}\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"test_it.py::test_it\",\n            \"  * PytestUnraisableExceptionWarning: Exception ignored in: <function BrokenDel.__del__ at *>\",\n            \"  \",\n            \"  Traceback (most recent call last):\",\n            \"  ValueError: del is broken\",\n            \"  \",\n            \"    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\",\n        ]\n    )\n\n\n@pytest.mark.skipif(PYPY, reason=\"garbage-collection differences make this flaky\")\n@pytest.mark.filterwarnings(\"default::pytest.PytestUnraisableExceptionWarning\")\ndef test_unraisable_in_setup(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=\"\"\"\n        import pytest\n\n        class BrokenDel:\n            def __del__(self):\n                raise ValueError(\"del is broken\")\n\n        @pytest.fixture\n        def broken_del():\n            obj = BrokenDel()\n            del obj\n\n        def test_it(broken_del): pass\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n    assert result.parseoutcomes() == {\"passed\": 2, \"warnings\": 1}\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"test_it.py::test_it\",\n            \"  * PytestUnraisableExceptionWarning: Exception ignored in: <function BrokenDel.__del__ at *>\",\n            \"  \",\n            \"  Traceback (most recent call last):\",\n            \"  ValueError: del is broken\",\n            \"  \",\n            \"    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\",\n        ]\n    )\n\n\n@pytest.mark.skipif(PYPY, reason=\"garbage-collection differences make this flaky\")\n@pytest.mark.filterwarnings(\"default::pytest.PytestUnraisableExceptionWarning\")\ndef test_unraisable_in_teardown(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=\"\"\"\n        import pytest\n\n        class BrokenDel:\n            def __del__(self):\n                raise ValueError(\"del is broken\")\n\n        @pytest.fixture\n        def broken_del():\n            yield\n            obj = BrokenDel()\n            del obj\n\n        def test_it(broken_del): pass\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n    assert result.parseoutcomes() == {\"passed\": 2, \"warnings\": 1}\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"test_it.py::test_it\",\n            \"  * PytestUnraisableExceptionWarning: Exception ignored in: <function BrokenDel.__del__ at *>\",\n            \"  \",\n            \"  Traceback (most recent call last):\",\n            \"  ValueError: del is broken\",\n            \"  \",\n            \"    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\",\n        ]\n    )\n\n\n@pytest.mark.filterwarnings(\"error::pytest.PytestUnraisableExceptionWarning\")\ndef test_unraisable_warning_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=f\"\"\"\n        class BrokenDel:\n            def __del__(self) -> None:\n                raise ValueError(\"del is broken\")\n\n        def test_it() -> None:\n            obj = BrokenDel()\n            del obj\n            {\"import gc; gc.collect()\" * PYPY}\n\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == pytest.ExitCode.TESTS_FAILED\n    assert result.parseoutcomes() == {\"passed\": 1, \"failed\": 1}\n", "testing/test_python_path.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport sys\nfrom textwrap import dedent\nfrom typing import Generator\n\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.fixture()\ndef file_structure(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_foo=\"\"\"\n        from foo import foo\n\n        def test_foo():\n            assert foo() == 1\n        \"\"\"\n    )\n\n    pytester.makepyfile(\n        test_bar=\"\"\"\n        from bar import bar\n\n        def test_bar():\n            assert bar() == 2\n        \"\"\"\n    )\n\n    foo_py = pytester.mkdir(\"sub\") / \"foo.py\"\n    content = dedent(\n        \"\"\"\n        def foo():\n            return 1\n        \"\"\"\n    )\n    foo_py.write_text(content, encoding=\"utf-8\")\n\n    bar_py = pytester.mkdir(\"sub2\") / \"bar.py\"\n    content = dedent(\n        \"\"\"\n        def bar():\n            return 2\n        \"\"\"\n    )\n    bar_py.write_text(content, encoding=\"utf-8\")\n\n\ndef test_one_dir(pytester: Pytester, file_structure) -> None:\n    pytester.makefile(\".ini\", pytest=\"[pytest]\\npythonpath=sub\\n\")\n    result = pytester.runpytest(\"test_foo.py\")\n    assert result.ret == 0\n    result.assert_outcomes(passed=1)\n\n\ndef test_two_dirs(pytester: Pytester, file_structure) -> None:\n    pytester.makefile(\".ini\", pytest=\"[pytest]\\npythonpath=sub sub2\\n\")\n    result = pytester.runpytest(\"test_foo.py\", \"test_bar.py\")\n    assert result.ret == 0\n    result.assert_outcomes(passed=2)\n\n\ndef test_module_not_found(pytester: Pytester, file_structure) -> None:\n    \"\"\"Without the pythonpath setting, the module should not be found.\"\"\"\n    pytester.makefile(\".ini\", pytest=\"[pytest]\\n\")\n    result = pytester.runpytest(\"test_foo.py\")\n    assert result.ret == pytest.ExitCode.INTERRUPTED\n    result.assert_outcomes(errors=1)\n    expected_error = \"E   ModuleNotFoundError: No module named 'foo'\"\n    result.stdout.fnmatch_lines([expected_error])\n\n\ndef test_no_ini(pytester: Pytester, file_structure) -> None:\n    \"\"\"If no ini file, test should error.\"\"\"\n    result = pytester.runpytest(\"test_foo.py\")\n    assert result.ret == pytest.ExitCode.INTERRUPTED\n    result.assert_outcomes(errors=1)\n    expected_error = \"E   ModuleNotFoundError: No module named 'foo'\"\n    result.stdout.fnmatch_lines([expected_error])\n\n\ndef test_clean_up(pytester: Pytester) -> None:\n    \"\"\"Test that the plugin cleans up after itself.\"\"\"\n    # This is tough to test behaviorally because the cleanup really runs last.\n    # So the test make several implementation assumptions:\n    # - Cleanup is done in pytest_unconfigure().\n    # - Not a hook wrapper.\n    # So we can add a hook wrapper ourselves to test what it does.\n    pytester.makefile(\".ini\", pytest=\"[pytest]\\npythonpath=I_SHALL_BE_REMOVED\\n\")\n    pytester.makepyfile(test_foo=\"\"\"def test_foo(): pass\"\"\")\n\n    before: list[str] | None = None\n    after: list[str] | None = None\n\n    class Plugin:\n        @pytest.hookimpl(wrapper=True, tryfirst=True)\n        def pytest_unconfigure(self) -> Generator[None, None, None]:\n            nonlocal before, after\n            before = sys.path.copy()\n            try:\n                return (yield)\n            finally:\n                after = sys.path.copy()\n\n    result = pytester.runpytest_inprocess(plugins=[Plugin()])\n    assert result.ret == 0\n\n    assert before is not None\n    assert after is not None\n    assert any(\"I_SHALL_BE_REMOVED\" in entry for entry in before)\n    assert not any(\"I_SHALL_BE_REMOVED\" in entry for entry in after)\n", "testing/test_doctest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport inspect\nfrom pathlib import Path\nimport sys\nimport textwrap\nfrom typing import Callable\n\nfrom _pytest.doctest import _get_checker\nfrom _pytest.doctest import _is_main_py\nfrom _pytest.doctest import _is_mocked\nfrom _pytest.doctest import _is_setup_py\nfrom _pytest.doctest import _patch_unwrap_mock_aware\nfrom _pytest.doctest import DoctestItem\nfrom _pytest.doctest import DoctestModule\nfrom _pytest.doctest import DoctestTextfile\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nclass TestDoctests:\n    def test_collect_testtextfile(self, pytester: Pytester):\n        w = pytester.maketxtfile(whatever=\"\")\n        checkfile = pytester.maketxtfile(\n            test_something=\"\"\"\n            alskdjalsdk\n            >>> i = 5\n            >>> i-1\n            4\n        \"\"\"\n        )\n\n        for x in (pytester.path, checkfile):\n            # print \"checking that %s returns custom items\" % (x,)\n            items, reprec = pytester.inline_genitems(x)\n            assert len(items) == 1\n            assert isinstance(items[0], DoctestItem)\n            assert isinstance(items[0].parent, DoctestTextfile)\n        # Empty file has no items.\n        items, reprec = pytester.inline_genitems(w)\n        assert len(items) == 0\n\n    def test_collect_module_empty(self, pytester: Pytester):\n        path = pytester.makepyfile(whatever=\"#\")\n        for p in (path, pytester.path):\n            items, reprec = pytester.inline_genitems(p, \"--doctest-modules\")\n            assert len(items) == 0\n\n    def test_collect_module_single_modulelevel_doctest(self, pytester: Pytester):\n        path = pytester.makepyfile(whatever='\"\"\">>> pass\"\"\"')\n        for p in (path, pytester.path):\n            items, reprec = pytester.inline_genitems(p, \"--doctest-modules\")\n            assert len(items) == 1\n            assert isinstance(items[0], DoctestItem)\n            assert isinstance(items[0].parent, DoctestModule)\n\n    def test_collect_module_two_doctest_one_modulelevel(self, pytester: Pytester):\n        path = pytester.makepyfile(\n            whatever=\"\"\"\n            '>>> x = None'\n            def my_func():\n                \">>> magic = 42 \"\n        \"\"\"\n        )\n        for p in (path, pytester.path):\n            items, reprec = pytester.inline_genitems(p, \"--doctest-modules\")\n            assert len(items) == 2\n            assert isinstance(items[0], DoctestItem)\n            assert isinstance(items[1], DoctestItem)\n            assert isinstance(items[0].parent, DoctestModule)\n            assert items[0].parent is items[1].parent\n\n    @pytest.mark.parametrize(\"filename\", [\"__init__\", \"whatever\"])\n    def test_collect_module_two_doctest_no_modulelevel(\n        self,\n        pytester: Pytester,\n        filename: str,\n    ) -> None:\n        path = pytester.makepyfile(\n            **{\n                filename: \"\"\"\n            '# Empty'\n            def my_func():\n                \">>> magic = 42 \"\n            def useless():\n                '''\n                # This is a function\n                # >>> # it doesn't have any doctest\n                '''\n            def another():\n                '''\n                # This is another function\n                >>> import os # this one does have a doctest\n                '''\n            \"\"\",\n            },\n        )\n        for p in (path, pytester.path):\n            items, reprec = pytester.inline_genitems(p, \"--doctest-modules\")\n            assert len(items) == 2\n            assert isinstance(items[0], DoctestItem)\n            assert isinstance(items[1], DoctestItem)\n            assert isinstance(items[0].parent, DoctestModule)\n            assert items[0].parent is items[1].parent\n\n    def test_simple_doctestfile(self, pytester: Pytester):\n        p = pytester.maketxtfile(\n            test_doc=\"\"\"\n            >>> x = 1\n            >>> x == 1\n            False\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p)\n        reprec.assertoutcome(failed=1)\n\n    def test_importmode(self, pytester: Pytester):\n        pytester.makepyfile(\n            **{\n                \"src/namespacepkg/innerpkg/__init__.py\": \"\",\n                \"src/namespacepkg/innerpkg/a.py\": \"\"\"\n                  def some_func():\n                    return 42\n                \"\"\",\n                \"src/namespacepkg/innerpkg/b.py\": \"\"\"\n                  from namespacepkg.innerpkg.a import some_func\n                  def my_func():\n                    '''\n                    >>> my_func()\n                    42\n                    '''\n                    return some_func()\n                \"\"\",\n            }\n        )\n        # For 'namespacepkg' to be considered a namespace package, its containing directory\n        # needs to be reachable from sys.path:\n        # https://packaging.python.org/en/latest/guides/packaging-namespace-packages\n        pytester.syspathinsert(pytester.path / \"src\")\n        reprec = pytester.inline_run(\"--doctest-modules\", \"--import-mode=importlib\")\n        reprec.assertoutcome(passed=1)\n\n    def test_new_pattern(self, pytester: Pytester):\n        p = pytester.maketxtfile(\n            xdoc=\"\"\"\n            >>> x = 1\n            >>> x == 1\n            False\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-glob=x*.txt\")\n        reprec.assertoutcome(failed=1)\n\n    def test_multiple_patterns(self, pytester: Pytester):\n        \"\"\"Test support for multiple --doctest-glob arguments (#1255).\"\"\"\n        pytester.maketxtfile(\n            xdoc=\"\"\"\n            >>> 1\n            1\n        \"\"\"\n        )\n        pytester.makefile(\n            \".foo\",\n            test=\"\"\"\n            >>> 1\n            1\n        \"\"\",\n        )\n        pytester.maketxtfile(\n            test_normal=\"\"\"\n            >>> 1\n            1\n        \"\"\"\n        )\n        expected = {\"xdoc.txt\", \"test.foo\", \"test_normal.txt\"}\n        assert {x.name for x in pytester.path.iterdir()} == expected\n        args = [\"--doctest-glob=xdoc*.txt\", \"--doctest-glob=*.foo\"]\n        result = pytester.runpytest(*args)\n        result.stdout.fnmatch_lines([\"*test.foo *\", \"*xdoc.txt *\", \"*2 passed*\"])\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*test_normal.txt *\", \"*1 passed*\"])\n\n    @pytest.mark.parametrize(\n        \"   test_string,    encoding\",\n        [(\"foo\", \"ascii\"), (\"\u00f6\u00e4\u00fc\", \"latin1\"), (\"\u00f6\u00e4\u00fc\", \"utf-8\")],\n    )\n    def test_encoding(self, pytester, test_string, encoding):\n        \"\"\"Test support for doctest_encoding ini option.\"\"\"\n        pytester.makeini(\n            f\"\"\"\n            [pytest]\n            doctest_encoding={encoding}\n        \"\"\"\n        )\n        doctest = f\"\"\"\n            >>> \"{test_string}\"\n            {test_string!r}\n        \"\"\"\n        fn = pytester.path / \"test_encoding.txt\"\n        fn.write_text(doctest, encoding=encoding)\n\n        result = pytester.runpytest()\n\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_doctest_unexpected_exception(self, pytester: Pytester):\n        pytester.maketxtfile(\n            \"\"\"\n            >>> i = 0\n            >>> 0 / i\n            2\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\n                \"test_doctest_unexpected_exception.txt F *\",\n                \"\",\n                \"*= FAILURES =*\",\n                \"*_ [[]doctest[]] test_doctest_unexpected_exception.txt _*\",\n                \"001 >>> i = 0\",\n                \"002 >>> 0 / i\",\n                \"UNEXPECTED EXCEPTION: ZeroDivisionError*\",\n                \"Traceback (most recent call last):\",\n                '  File \"*/doctest.py\", line *, in __run',\n                \"    *\",\n                *((\" *^^^^*\", \" *\", \" *\") if sys.version_info >= (3, 13) else ()),\n                '  File \"<doctest test_doctest_unexpected_exception.txt[1]>\", line 1, in <module>',\n                \"ZeroDivisionError: division by zero\",\n                \"*/test_doctest_unexpected_exception.txt:2: UnexpectedException\",\n            ],\n            consecutive=True,\n        )\n\n    def test_doctest_outcomes(self, pytester: Pytester):\n        pytester.maketxtfile(\n            test_skip=\"\"\"\n            >>> 1\n            1\n            >>> import pytest\n            >>> pytest.skip(\"\")\n            >>> 2\n            3\n            \"\"\",\n            test_xfail=\"\"\"\n            >>> import pytest\n            >>> pytest.xfail(\"xfail_reason\")\n            >>> foo\n            bar\n            \"\"\",\n            test_importorskip=\"\"\"\n            >>> import pytest\n            >>> pytest.importorskip(\"doesnotexist\")\n            >>> foo\n            bar\n            \"\"\",\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 3 items\",\n                \"\",\n                \"test_importorskip.txt s *\",\n                \"test_skip.txt s *\",\n                \"test_xfail.txt x *\",\n                \"\",\n                \"*= 2 skipped, 1 xfailed in *\",\n            ]\n        )\n\n    def test_docstring_partial_context_around_error(self, pytester: Pytester):\n        \"\"\"Test that we show some context before the actual line of a failing\n        doctest.\n        \"\"\"\n        pytester.makepyfile(\n            '''\n            def foo():\n                \"\"\"\n                text-line-1\n                text-line-2\n                text-line-3\n                text-line-4\n                text-line-5\n                text-line-6\n                text-line-7\n                text-line-8\n                text-line-9\n                text-line-10\n                text-line-11\n                >>> 1 + 1\n                3\n\n                text-line-after\n                \"\"\"\n        '''\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*docstring_partial_context_around_error*\",\n                \"005*text-line-3\",\n                \"006*text-line-4\",\n                \"013*text-line-11\",\n                \"014*>>> 1 + 1\",\n                \"Expected:\",\n                \"    3\",\n                \"Got:\",\n                \"    2\",\n            ]\n        )\n        # lines below should be trimmed out\n        result.stdout.no_fnmatch_line(\"*text-line-2*\")\n        result.stdout.no_fnmatch_line(\"*text-line-after*\")\n\n    def test_docstring_full_context_around_error(self, pytester: Pytester):\n        \"\"\"Test that we show the whole context before the actual line of a failing\n        doctest, provided that the context is up to 10 lines long.\n        \"\"\"\n        pytester.makepyfile(\n            '''\n            def foo():\n                \"\"\"\n                text-line-1\n                text-line-2\n\n                >>> 1 + 1\n                3\n                \"\"\"\n        '''\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*docstring_full_context_around_error*\",\n                \"003*text-line-1\",\n                \"004*text-line-2\",\n                \"006*>>> 1 + 1\",\n                \"Expected:\",\n                \"    3\",\n                \"Got:\",\n                \"    2\",\n            ]\n        )\n\n    def test_doctest_linedata_missing(self, pytester: Pytester):\n        pytester.path.joinpath(\"hello.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                class Fun(object):\n                    @property\n                    def test(self):\n                        '''\n                        >>> a = 1\n                        >>> 1/0\n                        '''\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\"*hello*\", \"006*>>> 1/0*\", \"*UNEXPECTED*ZeroDivision*\", \"*1 failed*\"]\n        )\n\n    def test_doctest_linedata_on_property(self, pytester: Pytester):\n        pytester.makepyfile(\n            \"\"\"\n            class Sample(object):\n                @property\n                def some_property(self):\n                    '''\n                    >>> Sample().some_property\n                    'another thing'\n                    '''\n                    return 'something'\n            \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*= FAILURES =*\",\n                \"*_ [[]doctest[]] test_doctest_linedata_on_property.Sample.some_property _*\",\n                \"004 \",\n                \"005 *>>> Sample().some_property\",\n                \"Expected:\",\n                \"    'another thing'\",\n                \"Got:\",\n                \"    'something'\",\n                \"\",\n                \"*/test_doctest_linedata_on_property.py:5: DocTestFailure\",\n                \"*= 1 failed in *\",\n            ]\n        )\n\n    def test_doctest_no_linedata_on_overridden_property(self, pytester: Pytester):\n        pytester.makepyfile(\n            \"\"\"\n            class Sample(object):\n                @property\n                def some_property(self):\n                    '''\n                    >>> Sample().some_property\n                    'another thing'\n                    '''\n                    return 'something'\n                some_property = property(some_property.__get__, None, None, some_property.__doc__)\n            \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*= FAILURES =*\",\n                \"*_ [[]doctest[]] test_doctest_no_linedata_on_overridden_property.Sample.some_property _*\",\n                \"EXAMPLE LOCATION UNKNOWN, not showing all tests of that example\",\n                \"[?][?][?] >>> Sample().some_property\",\n                \"Expected:\",\n                \"    'another thing'\",\n                \"Got:\",\n                \"    'something'\",\n                \"\",\n                \"*/test_doctest_no_linedata_on_overridden_property.py:None: DocTestFailure\",\n                \"*= 1 failed in *\",\n            ]\n        )\n\n    def test_doctest_unex_importerror_only_txt(self, pytester: Pytester):\n        pytester.maketxtfile(\n            \"\"\"\n            >>> import asdalsdkjaslkdjasd\n            >>>\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        # doctest is never executed because of error during hello.py collection\n        result.stdout.fnmatch_lines(\n            [\n                \"*>>> import asdals*\",\n                \"*UNEXPECTED*ModuleNotFoundError*\",\n                \"ModuleNotFoundError: No module named *asdal*\",\n            ]\n        )\n\n    def test_doctest_unex_importerror_with_module(self, pytester: Pytester):\n        pytester.path.joinpath(\"hello.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import asdalsdkjaslkdjasd\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        pytester.maketxtfile(\n            \"\"\"\n            >>> import hello\n            >>>\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        # doctest is never executed because of error during hello.py collection\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR collecting hello.py*\",\n                \"*ModuleNotFoundError: No module named *asdals*\",\n                \"*Interrupted: 1 error during collection*\",\n            ]\n        )\n\n    def test_doctestmodule(self, pytester: Pytester):\n        p = pytester.makepyfile(\n            \"\"\"\n            '''\n                >>> x = 1\n                >>> x == 1\n                False\n\n            '''\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\")\n        reprec.assertoutcome(failed=1)\n\n    def test_doctest_cached_property(self, pytester: Pytester):\n        p = pytester.makepyfile(\n            \"\"\"\n            import functools\n\n            class Foo:\n                @functools.cached_property\n                def foo(self):\n                    '''\n                    >>> assert False, \"Tacos!\"\n                    '''\n                    ...\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"--doctest-modules\")\n        result.assert_outcomes(failed=1)\n        assert \"Tacos!\" in result.stdout.str()\n\n    def test_doctestmodule_external_and_issue116(self, pytester: Pytester):\n        p = pytester.mkpydir(\"hello\")\n        p.joinpath(\"__init__.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def somefunc():\n                    '''\n                        >>> i = 0\n                        >>> i + 1\n                        2\n                    '''\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        result = pytester.runpytest(p, \"--doctest-modules\")\n        result.stdout.fnmatch_lines(\n            [\n                \"003 *>>> i = 0\",\n                \"004 *>>> i + 1\",\n                \"*Expected:\",\n                \"*    2\",\n                \"*Got:\",\n                \"*    1\",\n                \"*:4: DocTestFailure\",\n            ]\n        )\n\n    def test_txtfile_failing(self, pytester: Pytester):\n        p = pytester.maketxtfile(\n            \"\"\"\n            >>> i = 0\n            >>> i + 1\n            2\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-s\")\n        result.stdout.fnmatch_lines(\n            [\n                \"001 >>> i = 0\",\n                \"002 >>> i + 1\",\n                \"Expected:\",\n                \"    2\",\n                \"Got:\",\n                \"    1\",\n                \"*test_txtfile_failing.txt:2: DocTestFailure\",\n            ]\n        )\n\n    def test_txtfile_with_fixtures(self, pytester: Pytester):\n        p = pytester.maketxtfile(\n            \"\"\"\n            >>> p = getfixture('tmp_path')\n            >>> p.is_dir()\n            True\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p)\n        reprec.assertoutcome(passed=1)\n\n    def test_txtfile_with_usefixtures_in_ini(self, pytester: Pytester):\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            usefixtures = myfixture\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def myfixture(monkeypatch):\n                monkeypatch.setenv(\"HELLO\", \"WORLD\")\n        \"\"\"\n        )\n\n        p = pytester.maketxtfile(\n            \"\"\"\n            >>> import os\n            >>> os.environ[\"HELLO\"]\n            'WORLD'\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p)\n        reprec.assertoutcome(passed=1)\n\n    def test_doctestmodule_with_fixtures(self, pytester: Pytester):\n        p = pytester.makepyfile(\n            \"\"\"\n            '''\n                >>> p = getfixture('tmp_path')\n                >>> p.is_dir()\n                True\n            '''\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\")\n        reprec.assertoutcome(passed=1)\n\n    def test_doctestmodule_three_tests(self, pytester: Pytester):\n        p = pytester.makepyfile(\n            \"\"\"\n            '''\n            >>> p = getfixture('tmp_path')\n            >>> p.is_dir()\n            True\n            '''\n            def my_func():\n                '''\n                >>> magic = 42\n                >>> magic - 42\n                0\n                '''\n            def useless():\n                pass\n            def another():\n                '''\n                >>> import os\n                >>> os is os\n                True\n                '''\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\")\n        reprec.assertoutcome(passed=3)\n\n    def test_doctestmodule_two_tests_one_fail(self, pytester: Pytester):\n        p = pytester.makepyfile(\n            \"\"\"\n            class MyClass(object):\n                def bad_meth(self):\n                    '''\n                    >>> magic = 42\n                    >>> magic\n                    0\n                    '''\n                def nice_meth(self):\n                    '''\n                    >>> magic = 42\n                    >>> magic - 42\n                    0\n                    '''\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\")\n        reprec.assertoutcome(failed=1, passed=1)\n\n    def test_ignored_whitespace(self, pytester: Pytester):\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            doctest_optionflags = ELLIPSIS NORMALIZE_WHITESPACE\n        \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            class MyClass(object):\n                '''\n                >>> a = \"foo    \"\n                >>> print(a)\n                foo\n                '''\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\")\n        reprec.assertoutcome(passed=1)\n\n    def test_non_ignored_whitespace(self, pytester: Pytester):\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            doctest_optionflags = ELLIPSIS\n        \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            class MyClass(object):\n                '''\n                >>> a = \"foo    \"\n                >>> print(a)\n                foo\n                '''\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\")\n        reprec.assertoutcome(failed=1, passed=0)\n\n    def test_ignored_whitespace_glob(self, pytester: Pytester):\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            doctest_optionflags = ELLIPSIS NORMALIZE_WHITESPACE\n        \"\"\"\n        )\n        p = pytester.maketxtfile(\n            xdoc=\"\"\"\n            >>> a = \"foo    \"\n            >>> print(a)\n            foo\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-glob=x*.txt\")\n        reprec.assertoutcome(passed=1)\n\n    def test_non_ignored_whitespace_glob(self, pytester: Pytester):\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            doctest_optionflags = ELLIPSIS\n        \"\"\"\n        )\n        p = pytester.maketxtfile(\n            xdoc=\"\"\"\n            >>> a = \"foo    \"\n            >>> print(a)\n            foo\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-glob=x*.txt\")\n        reprec.assertoutcome(failed=1, passed=0)\n\n    def test_contains_unicode(self, pytester: Pytester):\n        \"\"\"Fix internal error with docstrings containing non-ascii characters.\"\"\"\n        pytester.makepyfile(\n            '''\\\n            def foo():\n                \"\"\"\n                >>> name = '\u0441' # not letter 'c' but instead Cyrillic 's'.\n                'anything'\n                \"\"\"\n            '''  # noqa: RUF001\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines([\"Got nothing\", \"* 1 failed in*\"])\n\n    def test_ignore_import_errors_on_doctest(self, pytester: Pytester):\n        p = pytester.makepyfile(\n            \"\"\"\n            import asdf\n\n            def add_one(x):\n                '''\n                >>> add_one(1)\n                2\n                '''\n                return x + 1\n        \"\"\"\n        )\n\n        reprec = pytester.inline_run(\n            p, \"--doctest-modules\", \"--doctest-ignore-import-errors\"\n        )\n        reprec.assertoutcome(skipped=1, failed=1, passed=0)\n\n    def test_junit_report_for_doctest(self, pytester: Pytester):\n        \"\"\"#713: Fix --junit-xml option when used with --doctest-modules.\"\"\"\n        p = pytester.makepyfile(\n            \"\"\"\n            def foo():\n                '''\n                >>> 1 + 1\n                3\n                '''\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\", \"--junit-xml=junit.xml\")\n        reprec.assertoutcome(failed=1)\n\n    def test_unicode_doctest(self, pytester: Pytester):\n        \"\"\"\n        Test case for issue 2434: DecodeError on Python 2 when doctest contains non-ascii\n        characters.\n        \"\"\"\n        p = pytester.maketxtfile(\n            test_unicode_doctest=\"\"\"\n            .. doctest::\n\n                >>> print(\"Hi\\\\n\\\\nBy\u00e9\")\n                Hi\n                ...\n                By\u00e9\n                >>> 1 / 0  # By\u00e9\n                1\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\"*UNEXPECTED EXCEPTION: ZeroDivisionError*\", \"*1 failed*\"]\n        )\n\n    def test_unicode_doctest_module(self, pytester: Pytester):\n        \"\"\"\n        Test case for issue 2434: DecodeError on Python 2 when doctest docstring\n        contains non-ascii characters.\n        \"\"\"\n        p = pytester.makepyfile(\n            test_unicode_doctest_module=\"\"\"\n            def fix_bad_unicode(text):\n                '''\n                    >>> print(fix_bad_unicode('\u00c3\u00banico'))\n                    \u00fanico\n                '''\n                return \"\u00fanico\"\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"--doctest-modules\")\n        result.stdout.fnmatch_lines([\"* 1 passed *\"])\n\n    def test_print_unicode_value(self, pytester: Pytester):\n        \"\"\"\n        Test case for issue 3583: Printing Unicode in doctest under Python 2.7\n        doesn't work\n        \"\"\"\n        p = pytester.maketxtfile(\n            test_print_unicode_value=r\"\"\"\n            Here is a doctest::\n\n                >>> print('\\xE5\\xE9\\xEE\\xF8\\xFC')\n                \u00e5\u00e9\u00ee\u00f8\u00fc\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"* 1 passed *\"])\n\n    def test_reportinfo(self, pytester: Pytester):\n        \"\"\"Make sure that DoctestItem.reportinfo() returns lineno.\"\"\"\n        p = pytester.makepyfile(\n            test_reportinfo=\"\"\"\n            def foo(x):\n                '''\n                    >>> foo('a')\n                    'b'\n                '''\n                return 'c'\n        \"\"\"\n        )\n        items, reprec = pytester.inline_genitems(p, \"--doctest-modules\")\n        reportinfo = items[0].reportinfo()\n        assert reportinfo[1] == 1\n\n    def test_valid_setup_py(self, pytester: Pytester):\n        \"\"\"\n        Test to make sure that pytest ignores valid setup.py files when ran\n        with --doctest-modules\n        \"\"\"\n        p = pytester.makepyfile(\n            setup=\"\"\"\n            if __name__ == '__main__':\n                from setuptools import setup, find_packages\n                setup(name='sample',\n                      version='0.0',\n                      description='description',\n                      packages=find_packages()\n                )\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"--doctest-modules\")\n        result.stdout.fnmatch_lines([\"*collected 0 items*\"])\n\n    def test_main_py_does_not_cause_import_errors(self, pytester: Pytester):\n        p = pytester.copy_example(\"doctest/main_py\")\n        result = pytester.runpytest(p, \"--doctest-modules\")\n        result.stdout.fnmatch_lines([\"*collected 2 items*\", \"*1 failed, 1 passed*\"])\n\n    def test_invalid_setup_py(self, pytester: Pytester):\n        \"\"\"\n        Test to make sure that pytest reads setup.py files that are not used\n        for python packages when ran with --doctest-modules\n        \"\"\"\n        p = pytester.makepyfile(\n            setup=\"\"\"\n            def test_foo():\n                return 'bar'\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"--doctest-modules\")\n        result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n\n    def test_setup_module(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #12011 - setup_module not executed when running\n        with `--doctest-modules`.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            CONSTANT = 0\n\n            def setup_module():\n                global CONSTANT\n                CONSTANT = 1\n\n            def test():\n                assert CONSTANT == 1\n            \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        assert result.ret == 0\n        result.assert_outcomes(passed=1)\n\n\nclass TestLiterals:\n    @pytest.mark.parametrize(\"config_mode\", [\"ini\", \"comment\"])\n    def test_allow_unicode(self, pytester, config_mode):\n        \"\"\"Test that doctests which output unicode work in all python versions\n        tested by pytest when the ALLOW_UNICODE option is used (either in\n        the ini file or by an inline comment).\n        \"\"\"\n        if config_mode == \"ini\":\n            pytester.makeini(\n                \"\"\"\n            [pytest]\n            doctest_optionflags = ALLOW_UNICODE\n            \"\"\"\n            )\n            comment = \"\"\n        else:\n            comment = \"#doctest: +ALLOW_UNICODE\"\n\n        pytester.maketxtfile(\n            test_doc=f\"\"\"\n            >>> b'12'.decode('ascii') {comment}\n            '12'\n        \"\"\"\n        )\n        pytester.makepyfile(\n            foo=f\"\"\"\n            def foo():\n              '''\n              >>> b'12'.decode('ascii') {comment}\n              '12'\n              '''\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--doctest-modules\")\n        reprec.assertoutcome(passed=2)\n\n    @pytest.mark.parametrize(\"config_mode\", [\"ini\", \"comment\"])\n    def test_allow_bytes(self, pytester, config_mode):\n        \"\"\"Test that doctests which output bytes work in all python versions\n        tested by pytest when the ALLOW_BYTES option is used (either in\n        the ini file or by an inline comment)(#1287).\n        \"\"\"\n        if config_mode == \"ini\":\n            pytester.makeini(\n                \"\"\"\n            [pytest]\n            doctest_optionflags = ALLOW_BYTES\n            \"\"\"\n            )\n            comment = \"\"\n        else:\n            comment = \"#doctest: +ALLOW_BYTES\"\n\n        pytester.maketxtfile(\n            test_doc=f\"\"\"\n            >>> b'foo'  {comment}\n            'foo'\n        \"\"\"\n        )\n        pytester.makepyfile(\n            foo=f\"\"\"\n            def foo():\n              '''\n              >>> b'foo'  {comment}\n              'foo'\n              '''\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--doctest-modules\")\n        reprec.assertoutcome(passed=2)\n\n    def test_unicode_string(self, pytester: Pytester):\n        \"\"\"Test that doctests which output unicode fail in Python 2 when\n        the ALLOW_UNICODE option is not used. The same test should pass\n        in Python 3.\n        \"\"\"\n        pytester.maketxtfile(\n            test_doc=\"\"\"\n            >>> b'12'.decode('ascii')\n            '12'\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_bytes_literal(self, pytester: Pytester):\n        \"\"\"Test that doctests which output bytes fail in Python 3 when\n        the ALLOW_BYTES option is not used. (#1287).\n        \"\"\"\n        pytester.maketxtfile(\n            test_doc=\"\"\"\n            >>> b'foo'\n            'foo'\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(failed=1)\n\n    def test_number_re(self) -> None:\n        _number_re = _get_checker()._number_re  # type: ignore\n        for s in [\n            \"1.\",\n            \"+1.\",\n            \"-1.\",\n            \".1\",\n            \"+.1\",\n            \"-.1\",\n            \"0.1\",\n            \"+0.1\",\n            \"-0.1\",\n            \"1e5\",\n            \"+1e5\",\n            \"1e+5\",\n            \"+1e+5\",\n            \"1e-5\",\n            \"+1e-5\",\n            \"-1e-5\",\n            \"1.2e3\",\n            \"-1.2e-3\",\n        ]:\n            print(s)\n            m = _number_re.match(s)\n            assert m is not None\n            assert float(m.group()) == pytest.approx(float(s))\n        for s in [\"1\", \"abc\"]:\n            print(s)\n            assert _number_re.match(s) is None\n\n    @pytest.mark.parametrize(\"config_mode\", [\"ini\", \"comment\"])\n    def test_number_precision(self, pytester, config_mode):\n        \"\"\"Test the NUMBER option.\"\"\"\n        if config_mode == \"ini\":\n            pytester.makeini(\n                \"\"\"\n                [pytest]\n                doctest_optionflags = NUMBER\n                \"\"\"\n            )\n            comment = \"\"\n        else:\n            comment = \"#doctest: +NUMBER\"\n\n        pytester.maketxtfile(\n            test_doc=f\"\"\"\n\n            Scalars:\n\n            >>> import math\n            >>> math.pi {comment}\n            3.141592653589793\n            >>> math.pi {comment}\n            3.1416\n            >>> math.pi {comment}\n            3.14\n            >>> -math.pi {comment}\n            -3.14\n            >>> math.pi {comment}\n            3.\n            >>> 3. {comment}\n            3.0\n            >>> 3. {comment}\n            3.\n            >>> 3. {comment}\n            3.01\n            >>> 3. {comment}\n            2.99\n            >>> .299 {comment}\n            .3\n            >>> .301 {comment}\n            .3\n            >>> 951. {comment}\n            1e3\n            >>> 1049. {comment}\n            1e3\n            >>> -1049. {comment}\n            -1e3\n            >>> 1e3 {comment}\n            1e3\n            >>> 1e3 {comment}\n            1000.\n\n            Lists:\n\n            >>> [3.1415, 0.097, 13.1, 7, 8.22222e5, 0.598e-2] {comment}\n            [3.14, 0.1, 13., 7, 8.22e5, 6.0e-3]\n            >>> [[0.333, 0.667], [0.999, 1.333]] {comment}\n            [[0.33, 0.667], [0.999, 1.333]]\n            >>> [[[0.101]]] {comment}\n            [[[0.1]]]\n\n            Doesn't barf on non-numbers:\n\n            >>> 'abc' {comment}\n            'abc'\n            >>> None {comment}\n            \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    @pytest.mark.parametrize(\n        \"expression,output\",\n        [\n            # ints shouldn't match floats:\n            (\"3.0\", \"3\"),\n            (\"3e0\", \"3\"),\n            (\"1e3\", \"1000\"),\n            (\"3\", \"3.0\"),\n            # Rounding:\n            (\"3.1\", \"3.0\"),\n            (\"3.1\", \"3.2\"),\n            (\"3.1\", \"4.0\"),\n            (\"8.22e5\", \"810000.0\"),\n            # Only the actual output is rounded up, not the expected output:\n            (\"3.0\", \"2.98\"),\n            (\"1e3\", \"999\"),\n            # The current implementation doesn't understand that numbers inside\n            # strings shouldn't be treated as numbers:\n            pytest.param(\"'3.1416'\", \"'3.14'\", marks=pytest.mark.xfail),\n        ],\n    )\n    def test_number_non_matches(self, pytester, expression, output):\n        pytester.maketxtfile(\n            test_doc=f\"\"\"\n            >>> {expression} #doctest: +NUMBER\n            {output}\n            \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=0, failed=1)\n\n    def test_number_and_allow_unicode(self, pytester: Pytester):\n        pytester.maketxtfile(\n            test_doc=\"\"\"\n            >>> from collections import namedtuple\n            >>> T = namedtuple('T', 'a b c')\n            >>> T(a=0.2330000001, b=u'str', c=b'bytes') # doctest: +ALLOW_UNICODE, +ALLOW_BYTES, +NUMBER\n            T(a=0.233, b=u'str', c='bytes')\n            \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n\nclass TestDoctestSkips:\n    \"\"\"\n    If all examples in a doctest are skipped due to the SKIP option, then\n    the tests should be SKIPPED rather than PASSED. (#957)\n    \"\"\"\n\n    @pytest.fixture(params=[\"text\", \"module\"])\n    def makedoctest(self, pytester, request):\n        def makeit(doctest):\n            mode = request.param\n            if mode == \"text\":\n                pytester.maketxtfile(doctest)\n            else:\n                assert mode == \"module\"\n                pytester.makepyfile(f'\"\"\"\\n{doctest}\"\"\"')\n\n        return makeit\n\n    def test_one_skipped(self, pytester, makedoctest):\n        makedoctest(\n            \"\"\"\n            >>> 1 + 1  # doctest: +SKIP\n            2\n            >>> 2 + 2\n            4\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--doctest-modules\")\n        reprec.assertoutcome(passed=1)\n\n    def test_one_skipped_failed(self, pytester, makedoctest):\n        makedoctest(\n            \"\"\"\n            >>> 1 + 1  # doctest: +SKIP\n            2\n            >>> 2 + 2\n            200\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--doctest-modules\")\n        reprec.assertoutcome(failed=1)\n\n    def test_all_skipped(self, pytester, makedoctest):\n        makedoctest(\n            \"\"\"\n            >>> 1 + 1  # doctest: +SKIP\n            2\n            >>> 2 + 2  # doctest: +SKIP\n            200\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--doctest-modules\")\n        reprec.assertoutcome(skipped=1)\n\n    def test_vacuous_all_skipped(self, pytester, makedoctest):\n        makedoctest(\"\")\n        reprec = pytester.inline_run(\"--doctest-modules\")\n        reprec.assertoutcome(passed=0, skipped=0)\n\n    def test_continue_on_failure(self, pytester: Pytester):\n        pytester.maketxtfile(\n            test_something=\"\"\"\n            >>> i = 5\n            >>> def foo():\n            ...     raise ValueError('error1')\n            >>> foo()\n            >>> i\n            >>> i + 2\n            7\n            >>> i + 1\n        \"\"\"\n        )\n        result = pytester.runpytest(\n            \"--doctest-modules\", \"--doctest-continue-on-failure\"\n        )\n        result.assert_outcomes(passed=0, failed=1)\n        # The lines that contains the failure are 4, 5, and 8.  The first one\n        # is a stack trace and the other two are mismatches.\n        result.stdout.fnmatch_lines(\n            [\"*4: UnexpectedException*\", \"*5: DocTestFailure*\", \"*8: DocTestFailure*\"]\n        )\n\n    def test_skipping_wrapped_test(self, pytester):\n        \"\"\"\n        Issue 8796: INTERNALERROR raised when skipping a decorated DocTest\n        through pytest_collection_modifyitems.\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            from _pytest.doctest import DoctestItem\n\n            def pytest_collection_modifyitems(config, items):\n                skip_marker = pytest.mark.skip()\n\n                for item in items:\n                    if isinstance(item, DoctestItem):\n                        item.add_marker(skip_marker)\n            \"\"\"\n        )\n\n        pytester.makepyfile(\n            \"\"\"\n            from contextlib import contextmanager\n\n            @contextmanager\n            def my_config_context():\n                '''\n                >>> import os\n                '''\n            \"\"\"\n        )\n\n        result = pytester.runpytest(\"--doctest-modules\")\n        assert \"INTERNALERROR\" not in result.stdout.str()\n        result.assert_outcomes(skipped=1)\n\n\nclass TestDoctestAutoUseFixtures:\n    SCOPES = [\"module\", \"session\", \"class\", \"function\"]\n\n    def test_doctest_module_session_fixture(self, pytester: Pytester):\n        \"\"\"Test that session fixtures are initialized for doctest modules (#768).\"\"\"\n        # session fixture which changes some global data, which will\n        # be accessed by doctests in a module\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            import sys\n\n            @pytest.fixture(autouse=True, scope='session')\n            def myfixture():\n                assert not hasattr(sys, 'pytest_session_data')\n                sys.pytest_session_data = 1\n                yield\n                del sys.pytest_session_data\n        \"\"\"\n        )\n        pytester.makepyfile(\n            foo=\"\"\"\n            import sys\n\n            def foo():\n              '''\n              >>> assert sys.pytest_session_data == 1\n              '''\n\n            def bar():\n              '''\n              >>> assert sys.pytest_session_data == 1\n              '''\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    @pytest.mark.parametrize(\"scope\", SCOPES)\n    @pytest.mark.parametrize(\"enable_doctest\", [True, False])\n    def test_fixture_scopes(self, pytester, scope, enable_doctest):\n        \"\"\"Test that auto-use fixtures work properly with doctest modules.\n        See #1057 and #1100.\n        \"\"\"\n        pytester.makeconftest(\n            f\"\"\"\n            import pytest\n\n            @pytest.fixture(autouse=True, scope=\"{scope}\")\n            def auto(request):\n                return 99\n        \"\"\"\n        )\n        pytester.makepyfile(\n            test_1='''\n            def test_foo():\n                \"\"\"\n                >>> getfixture('auto') + 1\n                100\n                \"\"\"\n            def test_bar():\n                assert 1\n        '''\n        )\n        params = (\"--doctest-modules\",) if enable_doctest else ()\n        passes = 3 if enable_doctest else 2\n        result = pytester.runpytest(*params)\n        result.stdout.fnmatch_lines([\"*=== %d passed in *\" % passes])\n\n    @pytest.mark.parametrize(\"scope\", SCOPES)\n    @pytest.mark.parametrize(\"autouse\", [True, False])\n    @pytest.mark.parametrize(\"use_fixture_in_doctest\", [True, False])\n    def test_fixture_module_doctest_scopes(\n        self, pytester, scope, autouse, use_fixture_in_doctest\n    ):\n        \"\"\"Test that auto-use fixtures work properly with doctest files.\n        See #1057 and #1100.\n        \"\"\"\n        pytester.makeconftest(\n            f\"\"\"\n            import pytest\n\n            @pytest.fixture(autouse={autouse}, scope=\"{scope}\")\n            def auto(request):\n                return 99\n        \"\"\"\n        )\n        if use_fixture_in_doctest:\n            pytester.maketxtfile(\n                test_doc=\"\"\"\n                >>> getfixture('auto')\n                99\n            \"\"\"\n            )\n        else:\n            pytester.maketxtfile(\n                test_doc=\"\"\"\n                >>> 1 + 1\n                2\n            \"\"\"\n            )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.stdout.no_fnmatch_line(\"*FAILURES*\")\n        result.stdout.fnmatch_lines([\"*=== 1 passed in *\"])\n\n    @pytest.mark.parametrize(\"scope\", SCOPES)\n    def test_auto_use_request_attributes(self, pytester, scope):\n        \"\"\"Check that all attributes of a request in an autouse fixture\n        behave as expected when requested for a doctest item.\n        \"\"\"\n        pytester.makeconftest(\n            f\"\"\"\n            import pytest\n\n            @pytest.fixture(autouse=True, scope=\"{scope}\")\n            def auto(request):\n                if \"{scope}\" == 'module':\n                    assert request.module is None\n                if \"{scope}\" == 'class':\n                    assert request.cls is None\n                if \"{scope}\" == 'function':\n                    assert request.function is None\n                return 99\n        \"\"\"\n        )\n        pytester.maketxtfile(\n            test_doc=\"\"\"\n            >>> 1 + 1\n            2\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        str(result.stdout.no_fnmatch_line(\"*FAILURES*\"))\n        result.stdout.fnmatch_lines([\"*=== 1 passed in *\"])\n\n    @pytest.mark.parametrize(\"scope\", [*SCOPES, \"package\"])\n    def test_auto_use_defined_in_same_module(\n        self, pytester: Pytester, scope: str\n    ) -> None:\n        \"\"\"Autouse fixtures defined in the same module as the doctest get picked\n        up properly.\n\n        Regression test for #11929.\n        \"\"\"\n        pytester.makepyfile(\n            f\"\"\"\n            import pytest\n\n            AUTO = \"the fixture did not run\"\n\n            @pytest.fixture(autouse=True, scope=\"{scope}\")\n            def auto(request):\n                global AUTO\n                AUTO = \"the fixture ran\"\n\n            def my_doctest():\n                '''My doctest.\n\n                >>> my_doctest()\n                'the fixture ran'\n                '''\n                return AUTO\n            \"\"\"\n        )\n        result = pytester.runpytest(\"--doctest-modules\")\n        result.assert_outcomes(passed=1)\n\n\nclass TestDoctestNamespaceFixture:\n    SCOPES = [\"module\", \"session\", \"class\", \"function\"]\n\n    @pytest.mark.parametrize(\"scope\", SCOPES)\n    def test_namespace_doctestfile(self, pytester, scope):\n        \"\"\"\n        Check that inserting something into the namespace works in a\n        simple text file doctest\n        \"\"\"\n        pytester.makeconftest(\n            f\"\"\"\n            import pytest\n            import contextlib\n\n            @pytest.fixture(autouse=True, scope=\"{scope}\")\n            def add_contextlib(doctest_namespace):\n                doctest_namespace['cl'] = contextlib\n        \"\"\"\n        )\n        p = pytester.maketxtfile(\n            \"\"\"\n            >>> print(cl.__name__)\n            contextlib\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p)\n        reprec.assertoutcome(passed=1)\n\n    @pytest.mark.parametrize(\"scope\", SCOPES)\n    def test_namespace_pyfile(self, pytester, scope):\n        \"\"\"\n        Check that inserting something into the namespace works in a\n        simple Python file docstring doctest\n        \"\"\"\n        pytester.makeconftest(\n            f\"\"\"\n            import pytest\n            import contextlib\n\n            @pytest.fixture(autouse=True, scope=\"{scope}\")\n            def add_contextlib(doctest_namespace):\n                doctest_namespace['cl'] = contextlib\n        \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            def foo():\n                '''\n                >>> print(cl.__name__)\n                contextlib\n                '''\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p, \"--doctest-modules\")\n        reprec.assertoutcome(passed=1)\n\n\nclass TestDoctestReportingOption:\n    def _run_doctest_report(self, pytester, format):\n        pytester.makepyfile(\n            \"\"\"\n            def foo():\n                '''\n                >>> foo()\n                   a  b\n                0  1  4\n                1  2  4\n                2  3  6\n                '''\n                print('   a  b\\\\n'\n                      '0  1  4\\\\n'\n                      '1  2  5\\\\n'\n                      '2  3  6')\n            \"\"\"\n        )\n        return pytester.runpytest(\"--doctest-modules\", \"--doctest-report\", format)\n\n    @pytest.mark.parametrize(\"format\", [\"udiff\", \"UDIFF\", \"uDiFf\"])\n    def test_doctest_report_udiff(self, pytester, format):\n        result = self._run_doctest_report(pytester, format)\n        result.stdout.fnmatch_lines(\n            [\"     0  1  4\", \"    -1  2  4\", \"    +1  2  5\", \"     2  3  6\"]\n        )\n\n    def test_doctest_report_cdiff(self, pytester: Pytester):\n        result = self._run_doctest_report(pytester, \"cdiff\")\n        result.stdout.fnmatch_lines(\n            [\n                \"         a  b\",\n                \"      0  1  4\",\n                \"    ! 1  2  4\",\n                \"      2  3  6\",\n                \"    --- 1,4 ----\",\n                \"         a  b\",\n                \"      0  1  4\",\n                \"    ! 1  2  5\",\n                \"      2  3  6\",\n            ]\n        )\n\n    def test_doctest_report_ndiff(self, pytester: Pytester):\n        result = self._run_doctest_report(pytester, \"ndiff\")\n        result.stdout.fnmatch_lines(\n            [\n                \"         a  b\",\n                \"      0  1  4\",\n                \"    - 1  2  4\",\n                \"    ?       ^\",\n                \"    + 1  2  5\",\n                \"    ?       ^\",\n                \"      2  3  6\",\n            ]\n        )\n\n    @pytest.mark.parametrize(\"format\", [\"none\", \"only_first_failure\"])\n    def test_doctest_report_none_or_only_first_failure(self, pytester, format):\n        result = self._run_doctest_report(pytester, format)\n        result.stdout.fnmatch_lines(\n            [\n                \"Expected:\",\n                \"       a  b\",\n                \"    0  1  4\",\n                \"    1  2  4\",\n                \"    2  3  6\",\n                \"Got:\",\n                \"       a  b\",\n                \"    0  1  4\",\n                \"    1  2  5\",\n                \"    2  3  6\",\n            ]\n        )\n\n    def test_doctest_report_invalid(self, pytester: Pytester):\n        result = self._run_doctest_report(pytester, \"obviously_invalid_format\")\n        result.stderr.fnmatch_lines(\n            [\n                \"*error: argument --doctest-report: invalid choice: 'obviously_invalid_format' (choose from*\"\n            ]\n        )\n\n\n@pytest.mark.parametrize(\"mock_module\", [\"mock\", \"unittest.mock\"])\ndef test_doctest_mock_objects_dont_recurse_missbehaved(mock_module, pytester: Pytester):\n    pytest.importorskip(mock_module)\n    pytester.makepyfile(\n        f\"\"\"\n        from {mock_module} import call\n        class Example(object):\n            '''\n            >>> 1 + 1\n            2\n            '''\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--doctest-modules\")\n    result.stdout.fnmatch_lines([\"* 1 passed *\"])\n\n\nclass Broken:\n    def __getattr__(self, _):\n        raise KeyError(\"This should be an AttributeError\")\n\n\n@pytest.mark.parametrize(  # pragma: no branch (lambdas are not called)\n    \"stop\", [None, _is_mocked, lambda f: None, lambda f: False, lambda f: True]\n)\ndef test_warning_on_unwrap_of_broken_object(\n    stop: Callable[[object], object] | None,\n) -> None:\n    bad_instance = Broken()\n    assert inspect.unwrap.__module__ == \"inspect\"\n    with _patch_unwrap_mock_aware():\n        assert inspect.unwrap.__module__ != \"inspect\"\n        with pytest.warns(\n            pytest.PytestWarning, match=\"^Got KeyError.* when unwrapping\"\n        ):\n            with pytest.raises(KeyError):\n                inspect.unwrap(bad_instance, stop=stop)  # type: ignore[arg-type]\n    assert inspect.unwrap.__module__ == \"inspect\"\n\n\ndef test_is_setup_py_not_named_setup_py(tmp_path: Path) -> None:\n    not_setup_py = tmp_path.joinpath(\"not_setup.py\")\n    not_setup_py.write_text(\n        'from setuptools import setup; setup(name=\"foo\")', encoding=\"utf-8\"\n    )\n    assert not _is_setup_py(not_setup_py)\n\n\n@pytest.mark.parametrize(\"mod\", (\"setuptools\", \"distutils.core\"))\ndef test_is_setup_py_is_a_setup_py(tmp_path: Path, mod: str) -> None:\n    setup_py = tmp_path.joinpath(\"setup.py\")\n    setup_py.write_text(f'from {mod} import setup; setup(name=\"foo\")', \"utf-8\")\n    assert _is_setup_py(setup_py)\n\n\n@pytest.mark.parametrize(\"mod\", (\"setuptools\", \"distutils.core\"))\ndef test_is_setup_py_different_encoding(tmp_path: Path, mod: str) -> None:\n    setup_py = tmp_path.joinpath(\"setup.py\")\n    contents = (\n        \"# -*- coding: cp1252 -*-\\n\"\n        f'from {mod} import setup; setup(name=\"foo\", description=\"\u20ac\")\\n'\n    )\n    setup_py.write_bytes(contents.encode(\"cp1252\"))\n    assert _is_setup_py(setup_py)\n\n\n@pytest.mark.parametrize(\n    \"name, expected\", [(\"__main__.py\", True), (\"__init__.py\", False)]\n)\ndef test_is_main_py(tmp_path: Path, name: str, expected: bool) -> None:\n    dunder_main = tmp_path.joinpath(name)\n    assert _is_main_py(dunder_main) == expected\n", "testing/test_runner.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom functools import partial\nimport inspect\nimport os\nfrom pathlib import Path\nimport sys\nimport types\nimport warnings\n\nfrom _pytest import outcomes\nfrom _pytest import reports\nfrom _pytest import runner\nfrom _pytest._code import ExceptionInfo\nfrom _pytest._code.code import ExceptionChainRepr\nfrom _pytest.config import ExitCode\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.outcomes import OutcomeException\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nif sys.version_info < (3, 11):\n    from exceptiongroup import ExceptionGroup\n\n\nclass TestSetupState:\n    def test_setup(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\"def test_func(): pass\")\n        ss = item.session._setupstate\n        values = [1]\n        ss.setup(item)\n        ss.addfinalizer(values.pop, item)\n        assert values\n        ss.teardown_exact(None)\n        assert not values\n\n    def test_teardown_exact_stack_empty(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\"def test_func(): pass\")\n        ss = item.session._setupstate\n        ss.setup(item)\n        ss.teardown_exact(None)\n        ss.teardown_exact(None)\n        ss.teardown_exact(None)\n\n    def test_setup_fails_and_failure_is_cached(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            def setup_module(mod):\n                raise ValueError(42)\n            def test_func(): pass\n        \"\"\"\n        )\n        ss = item.session._setupstate\n        with pytest.raises(ValueError):\n            ss.setup(item)\n        with pytest.raises(ValueError):\n            ss.setup(item)\n\n    def test_teardown_multiple_one_fails(self, pytester: Pytester) -> None:\n        r = []\n\n        def fin1():\n            r.append(\"fin1\")\n\n        def fin2():\n            raise Exception(\"oops\")\n\n        def fin3():\n            r.append(\"fin3\")\n\n        item = pytester.getitem(\"def test_func(): pass\")\n        ss = item.session._setupstate\n        ss.setup(item)\n        ss.addfinalizer(fin1, item)\n        ss.addfinalizer(fin2, item)\n        ss.addfinalizer(fin3, item)\n        with pytest.raises(Exception) as err:\n            ss.teardown_exact(None)\n        assert err.value.args == (\"oops\",)\n        assert r == [\"fin3\", \"fin1\"]\n\n    def test_teardown_multiple_fail(self, pytester: Pytester) -> None:\n        def fin1():\n            raise Exception(\"oops1\")\n\n        def fin2():\n            raise Exception(\"oops2\")\n\n        item = pytester.getitem(\"def test_func(): pass\")\n        ss = item.session._setupstate\n        ss.setup(item)\n        ss.addfinalizer(fin1, item)\n        ss.addfinalizer(fin2, item)\n        with pytest.raises(ExceptionGroup) as err:\n            ss.teardown_exact(None)\n\n        # Note that finalizers are run LIFO, but because FIFO is more intuitive for\n        # users we reverse the order of messages, and see the error from fin1 first.\n        err1, err2 = err.value.exceptions\n        assert err1.args == (\"oops1\",)\n        assert err2.args == (\"oops2\",)\n\n    def test_teardown_multiple_scopes_one_fails(self, pytester: Pytester) -> None:\n        module_teardown = []\n\n        def fin_func():\n            raise Exception(\"oops1\")\n\n        def fin_module():\n            module_teardown.append(\"fin_module\")\n\n        item = pytester.getitem(\"def test_func(): pass\")\n        mod = item.listchain()[-2]\n        ss = item.session._setupstate\n        ss.setup(item)\n        ss.addfinalizer(fin_module, mod)\n        ss.addfinalizer(fin_func, item)\n        with pytest.raises(Exception, match=\"oops1\"):\n            ss.teardown_exact(None)\n        assert module_teardown == [\"fin_module\"]\n\n    def test_teardown_multiple_scopes_several_fail(self, pytester) -> None:\n        def raiser(exc):\n            raise exc\n\n        item = pytester.getitem(\"def test_func(): pass\")\n        mod = item.listchain()[-2]\n        ss = item.session._setupstate\n        ss.setup(item)\n        ss.addfinalizer(partial(raiser, KeyError(\"from module scope\")), mod)\n        ss.addfinalizer(partial(raiser, TypeError(\"from function scope 1\")), item)\n        ss.addfinalizer(partial(raiser, ValueError(\"from function scope 2\")), item)\n\n        with pytest.raises(ExceptionGroup, match=\"errors during test teardown\") as e:\n            ss.teardown_exact(None)\n        mod, func = e.value.exceptions\n        assert isinstance(mod, KeyError)\n        assert isinstance(func.exceptions[0], TypeError)  # type: ignore\n        assert isinstance(func.exceptions[1], ValueError)  # type: ignore\n\n    def test_cached_exception_doesnt_get_longer(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #12204 (the \"BTW\" case).\"\"\"\n        pytester.makepyfile(test=\"\")\n        # If the collector.setup() raises, all collected items error with this\n        # exception.\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            class MyItem(pytest.Item):\n                def runtest(self) -> None: pass\n\n            class MyBadCollector(pytest.Collector):\n                def collect(self):\n                    return [\n                        MyItem.from_parent(self, name=\"one\"),\n                        MyItem.from_parent(self, name=\"two\"),\n                        MyItem.from_parent(self, name=\"three\"),\n                    ]\n\n                def setup(self):\n                    1 / 0\n\n            def pytest_collect_file(file_path, parent):\n                if file_path.name == \"test.py\":\n                    return MyBadCollector.from_parent(parent, name='bad')\n            \"\"\"\n        )\n\n        result = pytester.runpytest_inprocess(\"--tb=native\")\n        assert result.ret == ExitCode.TESTS_FAILED\n        failures = result.reprec.getfailures()  # type: ignore[attr-defined]\n        assert len(failures) == 3\n        lines1 = failures[1].longrepr.reprtraceback.reprentries[0].lines\n        lines2 = failures[2].longrepr.reprtraceback.reprentries[0].lines\n        assert len(lines1) == len(lines2)\n\n\nclass BaseFunctionalTests:\n    def test_passfunction(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            def test_func():\n                pass\n        \"\"\"\n        )\n        rep = reports[1]\n        assert rep.passed\n        assert not rep.failed\n        assert rep.outcome == \"passed\"\n        assert not rep.longrepr\n\n    def test_failfunction(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            def test_func():\n                assert 0\n        \"\"\"\n        )\n        rep = reports[1]\n        assert not rep.passed\n        assert not rep.skipped\n        assert rep.failed\n        assert rep.when == \"call\"\n        assert rep.outcome == \"failed\"\n        # assert isinstance(rep.longrepr, ReprExceptionInfo)\n\n    def test_skipfunction(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            def test_func():\n                pytest.skip(\"hello\")\n        \"\"\"\n        )\n        rep = reports[1]\n        assert not rep.failed\n        assert not rep.passed\n        assert rep.skipped\n        assert rep.outcome == \"skipped\"\n        # assert rep.skipped.when == \"call\"\n        # assert rep.skipped.when == \"call\"\n        # assert rep.skipped == \"%sreason == \"hello\"\n        # assert rep.skipped.location.lineno == 3\n        # assert rep.skipped.location.path\n        # assert not rep.skipped.failurerepr\n\n    def test_skip_in_setup_function(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            def setup_function(func):\n                pytest.skip(\"hello\")\n            def test_func():\n                pass\n        \"\"\"\n        )\n        print(reports)\n        rep = reports[0]\n        assert not rep.failed\n        assert not rep.passed\n        assert rep.skipped\n        # assert rep.skipped.reason == \"hello\"\n        # assert rep.skipped.location.lineno == 3\n        # assert rep.skipped.location.lineno == 3\n        assert len(reports) == 2\n        assert reports[1].passed  # teardown\n\n    def test_failure_in_setup_function(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            def setup_function(func):\n                raise ValueError(42)\n            def test_func():\n                pass\n        \"\"\"\n        )\n        rep = reports[0]\n        assert not rep.skipped\n        assert not rep.passed\n        assert rep.failed\n        assert rep.when == \"setup\"\n        assert len(reports) == 2\n\n    def test_failure_in_teardown_function(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            def teardown_function(func):\n                raise ValueError(42)\n            def test_func():\n                pass\n        \"\"\"\n        )\n        print(reports)\n        assert len(reports) == 3\n        rep = reports[2]\n        assert not rep.skipped\n        assert not rep.passed\n        assert rep.failed\n        assert rep.when == \"teardown\"\n        # assert rep.longrepr.reprcrash.lineno == 3\n        # assert rep.longrepr.reprtraceback.reprentries\n\n    def test_custom_failure_repr(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            conftest=\"\"\"\n            import pytest\n            class Function(pytest.Function):\n                def repr_failure(self, excinfo):\n                    return \"hello\"\n        \"\"\"\n        )\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            def test_func():\n                assert 0\n        \"\"\"\n        )\n        rep = reports[1]\n        assert not rep.skipped\n        assert not rep.passed\n        assert rep.failed\n        # assert rep.outcome.when == \"call\"\n        # assert rep.failed.where.lineno == 3\n        # assert rep.failed.where.path.basename == \"test_func.py\"\n        # assert rep.failed.failurerepr == \"hello\"\n\n    def test_teardown_final_returncode(self, pytester: Pytester) -> None:\n        rec = pytester.inline_runsource(\n            \"\"\"\n            def test_func():\n                pass\n            def teardown_function(func):\n                raise ValueError(42)\n        \"\"\"\n        )\n        assert rec.ret == 1\n\n    def test_logstart_logfinish_hooks(self, pytester: Pytester) -> None:\n        rec = pytester.inline_runsource(\n            \"\"\"\n            import pytest\n            def test_func():\n                pass\n        \"\"\"\n        )\n        reps = rec.getcalls(\"pytest_runtest_logstart pytest_runtest_logfinish\")\n        assert [x._name for x in reps] == [\n            \"pytest_runtest_logstart\",\n            \"pytest_runtest_logfinish\",\n        ]\n        for rep in reps:\n            assert rep.nodeid == \"test_logstart_logfinish_hooks.py::test_func\"\n            assert rep.location == (\"test_logstart_logfinish_hooks.py\", 1, \"test_func\")\n\n    def test_exact_teardown_issue90(self, pytester: Pytester) -> None:\n        rec = pytester.inline_runsource(\n            \"\"\"\n            import pytest\n\n            class TestClass(object):\n                def test_method(self):\n                    pass\n                def teardown_class(cls):\n                    raise Exception()\n\n            def test_func():\n                import sys\n                # on python2 exc_info is kept till a function exits\n                # so we would end up calling test functions while\n                # sys.exc_info would return the indexerror\n                # from guessing the lastitem\n                excinfo = sys.exc_info()\n                import traceback\n                assert excinfo[0] is None, \\\n                       traceback.format_exception(*excinfo)\n            def teardown_function(func):\n                raise ValueError(42)\n        \"\"\"\n        )\n        reps = rec.getreports(\"pytest_runtest_logreport\")\n        print(reps)\n        for i in range(2):\n            assert reps[i].nodeid.endswith(\"test_method\")\n            assert reps[i].passed\n        assert reps[2].when == \"teardown\"\n        assert reps[2].failed\n        assert len(reps) == 6\n        for i in range(3, 5):\n            assert reps[i].nodeid.endswith(\"test_func\")\n            assert reps[i].passed\n        assert reps[5].when == \"teardown\"\n        assert reps[5].nodeid.endswith(\"test_func\")\n        assert reps[5].failed\n\n    def test_exact_teardown_issue1206(self, pytester: Pytester) -> None:\n        \"\"\"Issue shadowing error with wrong number of arguments on teardown_method.\"\"\"\n        rec = pytester.inline_runsource(\n            \"\"\"\n            import pytest\n\n            class TestClass(object):\n                def teardown_method(self, x, y, z):\n                    pass\n\n                def test_method(self):\n                    assert True\n        \"\"\"\n        )\n        reps = rec.getreports(\"pytest_runtest_logreport\")\n        print(reps)\n        assert len(reps) == 3\n        #\n        assert reps[0].nodeid.endswith(\"test_method\")\n        assert reps[0].passed\n        assert reps[0].when == \"setup\"\n        #\n        assert reps[1].nodeid.endswith(\"test_method\")\n        assert reps[1].passed\n        assert reps[1].when == \"call\"\n        #\n        assert reps[2].nodeid.endswith(\"test_method\")\n        assert reps[2].failed\n        assert reps[2].when == \"teardown\"\n        longrepr = reps[2].longrepr\n        assert isinstance(longrepr, ExceptionChainRepr)\n        assert longrepr.reprcrash\n        assert longrepr.reprcrash.message in (\n            \"TypeError: teardown_method() missing 2 required positional arguments: 'y' and 'z'\",\n            # Python >= 3.10\n            \"TypeError: TestClass.teardown_method() missing 2 required positional arguments: 'y' and 'z'\",\n        )\n\n    def test_failure_in_setup_function_ignores_custom_repr(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            conftest=\"\"\"\n            import pytest\n            class Function(pytest.Function):\n                def repr_failure(self, excinfo):\n                    assert 0\n        \"\"\"\n        )\n        reports = pytester.runitem(\n            \"\"\"\n            def setup_function(func):\n                raise ValueError(42)\n            def test_func():\n                pass\n        \"\"\"\n        )\n        assert len(reports) == 2\n        rep = reports[0]\n        print(rep)\n        assert not rep.skipped\n        assert not rep.passed\n        assert rep.failed\n        # assert rep.outcome.when == \"setup\"\n        # assert rep.outcome.where.lineno == 3\n        # assert rep.outcome.where.path.basename == \"test_func.py\"\n        # assert isinstance(rep.failed.failurerepr, PythonFailureRepr)\n\n    def test_systemexit_does_not_bail_out(self, pytester: Pytester) -> None:\n        try:\n            reports = pytester.runitem(\n                \"\"\"\n                def test_func():\n                    raise SystemExit(42)\n            \"\"\"\n            )\n        except SystemExit:\n            assert False, \"runner did not catch SystemExit\"\n        rep = reports[1]\n        assert rep.failed\n        assert rep.when == \"call\"\n\n    def test_exit_propagates(self, pytester: Pytester) -> None:\n        try:\n            pytester.runitem(\n                \"\"\"\n                import pytest\n                def test_func():\n                    raise pytest.exit.Exception()\n            \"\"\"\n            )\n        except pytest.exit.Exception:\n            pass\n        else:\n            assert False, \"did not raise\"\n\n\nclass TestExecutionNonForked(BaseFunctionalTests):\n    def getrunner(self):\n        def f(item):\n            return runner.runtestprotocol(item, log=False)\n\n        return f\n\n    def test_keyboardinterrupt_propagates(self, pytester: Pytester) -> None:\n        try:\n            pytester.runitem(\n                \"\"\"\n                def test_func():\n                    raise KeyboardInterrupt(\"fake\")\n            \"\"\"\n            )\n        except KeyboardInterrupt:\n            pass\n        else:\n            assert False, \"did not raise\"\n\n\nclass TestSessionReports:\n    def test_collect_result(self, pytester: Pytester) -> None:\n        col = pytester.getmodulecol(\n            \"\"\"\n            def test_func1():\n                pass\n            class TestClass(object):\n                pass\n        \"\"\"\n        )\n        rep = runner.collect_one_node(col)\n        assert not rep.failed\n        assert not rep.skipped\n        assert rep.passed\n        locinfo = rep.location\n        assert locinfo is not None\n        assert locinfo[0] == col.path.name\n        assert not locinfo[1]\n        assert locinfo[2] == col.path.name\n        res = rep.result\n        assert len(res) == 2\n        assert res[0].name == \"test_func1\"\n        assert res[1].name == \"TestClass\"\n\n\nreporttypes: list[type[reports.BaseReport]] = [\n    reports.BaseReport,\n    reports.TestReport,\n    reports.CollectReport,\n]\n\n\n@pytest.mark.parametrize(\n    \"reporttype\", reporttypes, ids=[x.__name__ for x in reporttypes]\n)\ndef test_report_extra_parameters(reporttype: type[reports.BaseReport]) -> None:\n    args = list(inspect.signature(reporttype.__init__).parameters.keys())[1:]\n    basekw: dict[str, list[object]] = dict.fromkeys(args, [])\n    report = reporttype(newthing=1, **basekw)\n    assert report.newthing == 1\n\n\ndef test_callinfo() -> None:\n    ci = runner.CallInfo.from_call(lambda: 0, \"collect\")\n    assert ci.when == \"collect\"\n    assert ci.result == 0\n    assert \"result\" in repr(ci)\n    assert repr(ci) == \"<CallInfo when='collect' result: 0>\"\n    assert str(ci) == \"<CallInfo when='collect' result: 0>\"\n\n    ci2 = runner.CallInfo.from_call(lambda: 0 / 0, \"collect\")\n    assert ci2.when == \"collect\"\n    assert not hasattr(ci2, \"result\")\n    assert repr(ci2) == f\"<CallInfo when='collect' excinfo={ci2.excinfo!r}>\"\n    assert str(ci2) == repr(ci2)\n    assert ci2.excinfo\n\n    # Newlines are escaped.\n    def raise_assertion():\n        assert 0, \"assert_msg\"\n\n    ci3 = runner.CallInfo.from_call(raise_assertion, \"call\")\n    assert repr(ci3) == f\"<CallInfo when='call' excinfo={ci3.excinfo!r}>\"\n    assert \"\\n\" not in repr(ci3)\n\n\n# design question: do we want general hooks in python files?\n# then something like the following functional tests makes sense\n\n\n@pytest.mark.xfail\ndef test_runtest_in_module_ordering(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def pytest_runtest_setup(item): # runs after class-level!\n            item.function.mylist.append(\"module\")\n        class TestClass(object):\n            def pytest_runtest_setup(self, item):\n                assert not hasattr(item.function, 'mylist')\n                item.function.mylist = ['class']\n            @pytest.fixture\n            def mylist(self, request):\n                return request.function.mylist\n            @pytest.hookimpl(wrapper=True)\n            def pytest_runtest_call(self, item):\n                try:\n                    yield\n                except ValueError:\n                    pass\n            def test_hello1(self, mylist):\n                assert mylist == ['class', 'module'], mylist\n                raise ValueError()\n            def test_hello2(self, mylist):\n                assert mylist == ['class', 'module'], mylist\n        def pytest_runtest_teardown(item):\n            del item.function.mylist\n    \"\"\"\n    )\n    result = pytester.runpytest(p1)\n    result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n\ndef test_outcomeexception_exceptionattributes() -> None:\n    outcome = outcomes.OutcomeException(\"test\")\n    assert outcome.args[0] == outcome.msg\n\n\ndef test_outcomeexception_passes_except_Exception() -> None:\n    with pytest.raises(outcomes.OutcomeException):\n        try:\n            raise outcomes.OutcomeException(\"test\")\n        except Exception as e:\n            raise NotImplementedError from e\n\n\ndef test_pytest_exit() -> None:\n    with pytest.raises(pytest.exit.Exception) as excinfo:\n        pytest.exit(\"hello\")\n    assert excinfo.errisinstance(pytest.exit.Exception)\n\n\ndef test_pytest_fail() -> None:\n    with pytest.raises(pytest.fail.Exception) as excinfo:\n        pytest.fail(\"hello\")\n    s = excinfo.exconly(tryshort=True)\n    assert s.startswith(\"Failed\")\n\n\ndef test_pytest_exit_msg(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n    import pytest\n\n    def pytest_configure(config):\n        pytest.exit('oh noes')\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stderr.fnmatch_lines([\"Exit: oh noes\"])\n\n\ndef _strip_resource_warnings(lines):\n    # Assert no output on stderr, except for unreliable ResourceWarnings.\n    # (https://github.com/pytest-dev/pytest/issues/5088)\n    return [\n        x\n        for x in lines\n        if not x.startswith((\"Exception ignored in:\", \"ResourceWarning\"))\n    ]\n\n\ndef test_pytest_exit_returncode(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\\\n        import pytest\n        def test_foo():\n            pytest.exit(\"some exit msg\", 99)\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*! *Exit: some exit msg !*\"])\n\n    assert _strip_resource_warnings(result.stderr.lines) == []\n    assert result.ret == 99\n\n    # It prints to stderr also in case of exit during pytest_sessionstart.\n    pytester.makeconftest(\n        \"\"\"\\\n        import pytest\n\n        def pytest_sessionstart():\n            pytest.exit(\"during_sessionstart\", 98)\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*! *Exit: during_sessionstart !*\"])\n    assert _strip_resource_warnings(result.stderr.lines) == [\n        \"Exit: during_sessionstart\"\n    ]\n    assert result.ret == 98\n\n\ndef test_pytest_fail_notrace_runtest(pytester: Pytester) -> None:\n    \"\"\"Test pytest.fail(..., pytrace=False) does not show tracebacks during test run.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def test_hello():\n            pytest.fail(\"hello\", pytrace=False)\n        def teardown_function(function):\n            pytest.fail(\"world\", pytrace=False)\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"world\", \"hello\"])\n    result.stdout.no_fnmatch_line(\"*def teardown_function*\")\n\n\ndef test_pytest_fail_notrace_collection(pytester: Pytester) -> None:\n    \"\"\"Test pytest.fail(..., pytrace=False) does not show tracebacks during collection.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def some_internal_function():\n            pytest.fail(\"hello\", pytrace=False)\n        some_internal_function()\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"hello\"])\n    result.stdout.no_fnmatch_line(\"*def some_internal_function()*\")\n\n\ndef test_pytest_fail_notrace_non_ascii(pytester: Pytester) -> None:\n    \"\"\"Fix pytest.fail with pytrace=False with non-ascii characters (#1178).\n\n    This tests with native and unicode strings containing non-ascii chars.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\\\n        import pytest\n\n        def test_hello():\n            pytest.fail('oh oh: \u263a', pytrace=False)\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*test_hello*\", \"oh oh: \u263a\"])\n    result.stdout.no_fnmatch_line(\"*def test_hello*\")\n\n\ndef test_pytest_no_tests_collected_exit_status(pytester: Pytester) -> None:\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*collected 0 items*\"])\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n    pytester.makepyfile(\n        test_foo=\"\"\"\n        def test_foo():\n            assert 1\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n    assert result.ret == ExitCode.OK\n\n    result = pytester.runpytest(\"-k nonmatch\")\n    result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n    result.stdout.fnmatch_lines([\"*1 deselected*\"])\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_exception_printing_skip() -> None:\n    assert pytest.skip.Exception == pytest.skip.Exception\n    try:\n        pytest.skip(\"hello\")\n    except pytest.skip.Exception:\n        excinfo = ExceptionInfo.from_current()\n        s = excinfo.exconly(tryshort=True)\n        assert s.startswith(\"Skipped\")\n\n\ndef test_importorskip(monkeypatch) -> None:\n    importorskip = pytest.importorskip\n\n    def f():\n        importorskip(\"asdlkj\")\n\n    try:\n        sysmod = importorskip(\"sys\")\n        assert sysmod is sys\n        # path = pytest.importorskip(\"os.path\")\n        # assert path == os.path\n        excinfo = pytest.raises(pytest.skip.Exception, f)\n        assert excinfo is not None\n        excrepr = excinfo.getrepr()\n        assert excrepr is not None\n        assert excrepr.reprcrash is not None\n        path = Path(excrepr.reprcrash.path)\n        # check that importorskip reports the actual call\n        # in this test the test_runner.py file\n        assert path.stem == \"test_runner\"\n        pytest.raises(SyntaxError, pytest.importorskip, \"x y z\")\n        pytest.raises(SyntaxError, pytest.importorskip, \"x=y\")\n        mod = types.ModuleType(\"hello123\")\n        mod.__version__ = \"1.3\"  # type: ignore\n        monkeypatch.setitem(sys.modules, \"hello123\", mod)\n        with pytest.raises(pytest.skip.Exception):\n            pytest.importorskip(\"hello123\", minversion=\"1.3.1\")\n        mod2 = pytest.importorskip(\"hello123\", minversion=\"1.3\")\n        assert mod2 == mod\n    except pytest.skip.Exception:  # pragma: no cover\n        assert False, f\"spurious skip: {ExceptionInfo.from_current()}\"\n\n\ndef test_importorskip_imports_last_module_part() -> None:\n    ospath = pytest.importorskip(\"os.path\")\n    assert os.path == ospath\n\n\nclass TestImportOrSkipExcType:\n    \"\"\"Tests for #11523.\"\"\"\n\n    def test_no_warning(self) -> None:\n        # An attempt on a module which does not exist will raise ModuleNotFoundError, so it will\n        # be skipped normally and no warning will be issued.\n        with warnings.catch_warnings(record=True) as captured:\n            warnings.simplefilter(\"always\")\n\n            with pytest.raises(pytest.skip.Exception):\n                pytest.importorskip(\"TestImportOrSkipExcType_test_no_warning\")\n\n        assert captured == []\n\n    def test_import_error_with_warning(self, pytester: Pytester) -> None:\n        # Create a module which exists and can be imported, however it raises\n        # ImportError due to some other problem. In this case we will issue a warning\n        # about the future behavior change.\n        fn = pytester.makepyfile(\"raise ImportError('some specific problem')\")\n        pytester.syspathinsert()\n\n        with warnings.catch_warnings(record=True) as captured:\n            warnings.simplefilter(\"always\")\n\n            with pytest.raises(pytest.skip.Exception):\n                pytest.importorskip(fn.stem)\n\n        [warning] = captured\n        assert warning.category is pytest.PytestDeprecationWarning\n\n    def test_import_error_suppress_warning(self, pytester: Pytester) -> None:\n        # Same as test_import_error_with_warning, but we can suppress the warning\n        # by passing ImportError as exc_type.\n        fn = pytester.makepyfile(\"raise ImportError('some specific problem')\")\n        pytester.syspathinsert()\n\n        with warnings.catch_warnings(record=True) as captured:\n            warnings.simplefilter(\"always\")\n\n            with pytest.raises(pytest.skip.Exception):\n                pytest.importorskip(fn.stem, exc_type=ImportError)\n\n        assert captured == []\n\n    def test_warning_integration(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_foo():\n                pytest.importorskip(\"warning_integration_module\")\n            \"\"\"\n        )\n        pytester.makepyfile(\n            warning_integration_module=\"\"\"\n                raise ImportError(\"required library foobar not compiled properly\")\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*Module 'warning_integration_module' was found, but when imported by pytest it raised:\",\n                \"*      ImportError('required library foobar not compiled properly')\",\n                \"*1 skipped, 1 warning*\",\n            ]\n        )\n\n\ndef test_importorskip_dev_module(monkeypatch) -> None:\n    try:\n        mod = types.ModuleType(\"mockmodule\")\n        mod.__version__ = \"0.13.0.dev-43290\"  # type: ignore\n        monkeypatch.setitem(sys.modules, \"mockmodule\", mod)\n        mod2 = pytest.importorskip(\"mockmodule\", minversion=\"0.12.0\")\n        assert mod2 == mod\n        with pytest.raises(pytest.skip.Exception):\n            pytest.importorskip(\"mockmodule1\", minversion=\"0.14.0\")\n    except pytest.skip.Exception:  # pragma: no cover\n        assert False, f\"spurious skip: {ExceptionInfo.from_current()}\"\n\n\ndef test_importorskip_module_level(pytester: Pytester) -> None:\n    \"\"\"`importorskip` must be able to skip entire modules when used at module level.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        foobarbaz = pytest.importorskip(\"foobarbaz\")\n\n        def test_foo():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*collected 0 items / 1 skipped*\"])\n\n\ndef test_importorskip_custom_reason(pytester: Pytester) -> None:\n    \"\"\"Make sure custom reasons are used.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        foobarbaz = pytest.importorskip(\"foobarbaz2\", reason=\"just because\")\n\n        def test_foo():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-ra\")\n    result.stdout.fnmatch_lines([\"*just because*\"])\n    result.stdout.fnmatch_lines([\"*collected 0 items / 1 skipped*\"])\n\n\ndef test_pytest_cmdline_main(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def test_hello():\n            assert 1\n        if __name__ == '__main__':\n           pytest.cmdline.main([__file__])\n    \"\"\"\n    )\n    import subprocess\n\n    popen = subprocess.Popen([sys.executable, str(p)], stdout=subprocess.PIPE)\n    popen.communicate()\n    ret = popen.wait()\n    assert ret == 0\n\n\ndef test_unicode_in_longrepr(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\\\n        import pytest\n        @pytest.hookimpl(wrapper=True)\n        def pytest_runtest_makereport():\n            rep = yield\n            if rep.when == \"call\":\n                rep.longrepr = '\u00e4'\n            return rep\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        def test_out():\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 1\n    assert \"UnicodeEncodeError\" not in result.stderr.str()\n\n\ndef test_failure_in_setup(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def setup_module():\n            0/0\n        def test_func():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--tb=line\")\n    result.stdout.no_fnmatch_line(\"*def setup_module*\")\n\n\ndef test_makereport_getsource(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_foo():\n            if False: pass\n            else: assert False\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR*\")\n    result.stdout.fnmatch_lines([\"*else: assert False*\"])\n\n\ndef test_makereport_getsource_dynamic_code(\n    pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    \"\"\"Test that exception in dynamically generated code doesn't break getting the source line.\"\"\"\n    import inspect\n\n    original_findsource = inspect.findsource\n\n    def findsource(obj):\n        # Can be triggered by dynamically created functions\n        if obj.__name__ == \"foo\":\n            raise IndexError()\n        return original_findsource(obj)\n\n    monkeypatch.setattr(inspect, \"findsource\", findsource)\n\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def foo(missing):\n            pass\n\n        def test_fix(foo):\n            assert False\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-vv\")\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR*\")\n    result.stdout.fnmatch_lines([\"*test_fix*\", \"*fixture*'missing'*not found*\"])\n\n\ndef test_store_except_info_on_error() -> None:\n    \"\"\"Test that upon test failure, the exception info is stored on\n    sys.last_traceback and friends.\"\"\"\n\n    # Simulate item that might raise a specific exception, depending on `raise_error` class var\n    class ItemMightRaise:\n        nodeid = \"item_that_raises\"\n        raise_error = True\n\n        def runtest(self):\n            if self.raise_error:\n                raise IndexError(\"TEST\")\n\n    try:\n        runner.pytest_runtest_call(ItemMightRaise())  # type: ignore[arg-type]\n    except IndexError:\n        pass\n    # Check that exception info is stored on sys\n    assert sys.last_type is IndexError\n    assert isinstance(sys.last_value, IndexError)\n    if sys.version_info >= (3, 12, 0):\n        assert isinstance(sys.last_exc, IndexError)\n\n    assert sys.last_value.args[0] == \"TEST\"\n    assert sys.last_traceback\n\n    # The next run should clear the exception info stored by the previous run\n    ItemMightRaise.raise_error = False\n    runner.pytest_runtest_call(ItemMightRaise())  # type: ignore[arg-type]\n    assert not hasattr(sys, \"last_type\")\n    assert not hasattr(sys, \"last_value\")\n    if sys.version_info >= (3, 12, 0):\n        assert not hasattr(sys, \"last_exc\")\n    assert not hasattr(sys, \"last_traceback\")\n\n\ndef test_current_test_env_var(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    pytest_current_test_vars: list[tuple[str, str]] = []\n    monkeypatch.setattr(\n        sys, \"pytest_current_test_vars\", pytest_current_test_vars, raising=False\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import sys\n        import os\n\n        @pytest.fixture\n        def fix():\n            sys.pytest_current_test_vars.append(('setup', os.environ['PYTEST_CURRENT_TEST']))\n            yield\n            sys.pytest_current_test_vars.append(('teardown', os.environ['PYTEST_CURRENT_TEST']))\n\n        def test(fix):\n            sys.pytest_current_test_vars.append(('call', os.environ['PYTEST_CURRENT_TEST']))\n    \"\"\"\n    )\n    result = pytester.runpytest_inprocess()\n    assert result.ret == 0\n    test_id = \"test_current_test_env_var.py::test\"\n    assert pytest_current_test_vars == [\n        (\"setup\", test_id + \" (setup)\"),\n        (\"call\", test_id + \" (call)\"),\n        (\"teardown\", test_id + \" (teardown)\"),\n    ]\n    assert \"PYTEST_CURRENT_TEST\" not in os.environ\n\n\nclass TestReportContents:\n    \"\"\"Test user-level API of ``TestReport`` objects.\"\"\"\n\n    def getrunner(self):\n        return lambda item: runner.runtestprotocol(item, log=False)\n\n    def test_longreprtext_pass(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            def test_func():\n                pass\n        \"\"\"\n        )\n        rep = reports[1]\n        assert rep.longreprtext == \"\"\n\n    def test_longreprtext_skip(self, pytester: Pytester) -> None:\n        \"\"\"TestReport.longreprtext can handle non-str ``longrepr`` attributes (#7559)\"\"\"\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            def test_func():\n                pytest.skip()\n            \"\"\"\n        )\n        _, call_rep, _ = reports\n        assert isinstance(call_rep.longrepr, tuple)\n        assert \"Skipped\" in call_rep.longreprtext\n\n    def test_longreprtext_collect_skip(self, pytester: Pytester) -> None:\n        \"\"\"CollectReport.longreprtext can handle non-str ``longrepr`` attributes (#7559)\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            pytest.skip(allow_module_level=True)\n            \"\"\"\n        )\n        rec = pytester.inline_run()\n        calls = rec.getcalls(\"pytest_collectreport\")\n        _, call, _ = calls\n        assert isinstance(call.report.longrepr, tuple)\n        assert \"Skipped\" in call.report.longreprtext\n\n    def test_longreprtext_failure(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            def test_func():\n                x = 1\n                assert x == 4\n        \"\"\"\n        )\n        rep = reports[1]\n        assert \"assert 1 == 4\" in rep.longreprtext\n\n    def test_captured_text(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            import sys\n\n            @pytest.fixture\n            def fix():\n                sys.stdout.write('setup: stdout\\\\n')\n                sys.stderr.write('setup: stderr\\\\n')\n                yield\n                sys.stdout.write('teardown: stdout\\\\n')\n                sys.stderr.write('teardown: stderr\\\\n')\n                assert 0\n\n            def test_func(fix):\n                sys.stdout.write('call: stdout\\\\n')\n                sys.stderr.write('call: stderr\\\\n')\n                assert 0\n        \"\"\"\n        )\n        setup, call, teardown = reports\n        assert setup.capstdout == \"setup: stdout\\n\"\n        assert call.capstdout == \"setup: stdout\\ncall: stdout\\n\"\n        assert teardown.capstdout == \"setup: stdout\\ncall: stdout\\nteardown: stdout\\n\"\n\n        assert setup.capstderr == \"setup: stderr\\n\"\n        assert call.capstderr == \"setup: stderr\\ncall: stderr\\n\"\n        assert teardown.capstderr == \"setup: stderr\\ncall: stderr\\nteardown: stderr\\n\"\n\n    def test_no_captured_text(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            def test_func():\n                pass\n        \"\"\"\n        )\n        rep = reports[1]\n        assert rep.capstdout == \"\"\n        assert rep.capstderr == \"\"\n\n    def test_longrepr_type(self, pytester: Pytester) -> None:\n        reports = pytester.runitem(\n            \"\"\"\n            import pytest\n            def test_func():\n                pytest.fail(pytrace=False)\n        \"\"\"\n        )\n        rep = reports[1]\n        assert isinstance(rep.longrepr, ExceptionChainRepr)\n\n\ndef test_outcome_exception_bad_msg() -> None:\n    \"\"\"Check that OutcomeExceptions validate their input to prevent confusing errors (#5578)\"\"\"\n\n    def func() -> None:\n        raise NotImplementedError()\n\n    expected = (\n        \"OutcomeException expected string as 'msg' parameter, got 'function' instead.\\n\"\n        \"Perhaps you meant to use a mark?\"\n    )\n    with pytest.raises(TypeError) as excinfo:\n        OutcomeException(func)  # type: ignore\n    assert str(excinfo.value) == expected\n\n\ndef test_pytest_version_env_var(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setenv(\"PYTEST_VERSION\", \"old version\")\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import os\n\n\n        def test():\n            assert os.environ.get(\"PYTEST_VERSION\") == pytest.__version__\n    \"\"\"\n    )\n    result = pytester.runpytest_inprocess()\n    assert result.ret == ExitCode.OK\n    assert os.environ[\"PYTEST_VERSION\"] == \"old version\"\n\n\ndef test_teardown_session_failed(pytester: Pytester) -> None:\n    \"\"\"Test that higher-scoped fixture teardowns run in the context of the last\n    item after the test session bails early due to --maxfail.\n\n    Regression test for #11706.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture(scope=\"module\")\n        def baz():\n            yield\n            pytest.fail(\"This is a failing teardown\")\n\n        def test_foo(baz):\n            pytest.fail(\"This is a failing test\")\n\n        def test_bar(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--maxfail=1\")\n    result.assert_outcomes(failed=1, errors=1)\n\n\ndef test_teardown_session_stopped(pytester: Pytester) -> None:\n    \"\"\"Test that higher-scoped fixture teardowns run in the context of the last\n    item after the test session bails early due to --stepwise.\n\n    Regression test for #11706.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture(scope=\"module\")\n        def baz():\n            yield\n            pytest.fail(\"This is a failing teardown\")\n\n        def test_foo(baz):\n            pytest.fail(\"This is a failing test\")\n\n        def test_bar(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--stepwise\")\n    result.assert_outcomes(failed=1, errors=1)\n", "testing/acceptance_test.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport dataclasses\nimport importlib.metadata\nimport os\nfrom pathlib import Path\nimport subprocess\nimport sys\nimport types\n\nfrom _pytest.config import ExitCode\nfrom _pytest.pathlib import symlink_or_skip\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef prepend_pythonpath(*dirs) -> str:\n    cur = os.getenv(\"PYTHONPATH\")\n    if cur:\n        dirs += (cur,)\n    return os.pathsep.join(str(p) for p in dirs)\n\n\nclass TestGeneralUsage:\n    def test_config_error(self, pytester: Pytester) -> None:\n        pytester.copy_example(\"conftest_usageerror/conftest.py\")\n        result = pytester.runpytest(pytester.path)\n        assert result.ret == ExitCode.USAGE_ERROR\n        result.stderr.fnmatch_lines([\"*ERROR: hello\"])\n        result.stdout.fnmatch_lines([\"*pytest_unconfigure_called\"])\n\n    def test_root_conftest_syntax_error(self, pytester: Pytester) -> None:\n        pytester.makepyfile(conftest=\"raise SyntaxError\\n\")\n        result = pytester.runpytest()\n        result.stderr.fnmatch_lines([\"*raise SyntaxError*\"])\n        assert result.ret != 0\n\n    def test_early_hook_error_issue38_1(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_sessionstart():\n                0 / 0\n        \"\"\"\n        )\n        result = pytester.runpytest(pytester.path)\n        assert result.ret != 0\n        # tracestyle is native by default for hook failures\n        result.stdout.fnmatch_lines(\n            [\"*INTERNALERROR*File*conftest.py*line 2*\", \"*0 / 0*\"]\n        )\n        result = pytester.runpytest(pytester.path, \"--fulltrace\")\n        assert result.ret != 0\n        # tracestyle is native by default for hook failures\n        result.stdout.fnmatch_lines(\n            [\"*INTERNALERROR*def pytest_sessionstart():*\", \"*INTERNALERROR*0 / 0*\"]\n        )\n\n    def test_early_hook_configure_error_issue38(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_configure():\n                0 / 0\n        \"\"\"\n        )\n        result = pytester.runpytest(pytester.path)\n        assert result.ret != 0\n        # here we get it on stderr\n        result.stderr.fnmatch_lines(\n            [\"*INTERNALERROR*File*conftest.py*line 2*\", \"*0 / 0*\"]\n        )\n\n    def test_file_not_found(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"asd\")\n        assert result.ret != 0\n        result.stderr.fnmatch_lines([\"ERROR: file or directory not found: asd\"])\n\n    def test_file_not_found_unconfigure_issue143(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_configure():\n                print(\"---configure\")\n            def pytest_unconfigure():\n                print(\"---unconfigure\")\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\", \"asd\")\n        assert result.ret == ExitCode.USAGE_ERROR\n        result.stderr.fnmatch_lines([\"ERROR: file or directory not found: asd\"])\n        result.stdout.fnmatch_lines([\"*---configure\", \"*---unconfigure\"])\n\n    def test_config_preparse_plugin_option(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            pytest_xyz=\"\"\"\n            def pytest_addoption(parser):\n                parser.addoption(\"--xyz\", dest=\"xyz\", action=\"store\")\n        \"\"\"\n        )\n        pytester.makepyfile(\n            test_one=\"\"\"\n            def test_option(pytestconfig):\n                assert pytestconfig.option.xyz == \"123\"\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-p\", \"pytest_xyz\", \"--xyz=123\", syspathinsert=True)\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    @pytest.mark.parametrize(\"load_cov_early\", [True, False])\n    def test_early_load_setuptools_name(\n        self, pytester: Pytester, monkeypatch, load_cov_early\n    ) -> None:\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\")\n\n        pytester.makepyfile(mytestplugin1_module=\"\")\n        pytester.makepyfile(mytestplugin2_module=\"\")\n        pytester.makepyfile(mycov_module=\"\")\n        pytester.syspathinsert()\n\n        loaded = []\n\n        @dataclasses.dataclass\n        class DummyEntryPoint:\n            name: str\n            module: str\n            group: str = \"pytest11\"\n\n            def load(self):\n                __import__(self.module)\n                loaded.append(self.name)\n                return sys.modules[self.module]\n\n        entry_points = [\n            DummyEntryPoint(\"myplugin1\", \"mytestplugin1_module\"),\n            DummyEntryPoint(\"myplugin2\", \"mytestplugin2_module\"),\n            DummyEntryPoint(\"mycov\", \"mycov_module\"),\n        ]\n\n        @dataclasses.dataclass\n        class DummyDist:\n            entry_points: object\n            files: object = ()\n\n        def my_dists():\n            return (DummyDist(entry_points),)\n\n        monkeypatch.setattr(importlib.metadata, \"distributions\", my_dists)\n        params = (\"-p\", \"mycov\") if load_cov_early else ()\n        pytester.runpytest_inprocess(*params)\n        if load_cov_early:\n            assert loaded == [\"mycov\", \"myplugin1\", \"myplugin2\"]\n        else:\n            assert loaded == [\"myplugin1\", \"myplugin2\", \"mycov\"]\n\n    @pytest.mark.parametrize(\"import_mode\", [\"prepend\", \"append\", \"importlib\"])\n    def test_assertion_rewrite(self, pytester: Pytester, import_mode) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_this():\n                x = 0\n                assert x\n        \"\"\"\n        )\n        result = pytester.runpytest(p, f\"--import-mode={import_mode}\")\n        result.stdout.fnmatch_lines([\">       assert x\", \"E       assert 0\"])\n        assert result.ret == 1\n\n    def test_nested_import_error(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n                import import_fails\n                def test_this():\n                    assert import_fails.a == 1\n        \"\"\"\n        )\n        pytester.makepyfile(import_fails=\"import does_not_work\")\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\n                \"ImportError while importing test module*\",\n                \"*No module named *does_not_work*\",\n            ]\n        )\n        assert result.ret == 2\n\n    def test_not_collectable_arguments(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"\")\n        p2 = pytester.makefile(\".pyc\", \"123\")\n        result = pytester.runpytest(p1, p2)\n        assert result.ret == ExitCode.USAGE_ERROR\n        result.stderr.fnmatch_lines(\n            [\n                f\"ERROR: not found: {p2}\",\n                \"(no match in any of *)\",\n                \"\",\n            ]\n        )\n\n    @pytest.mark.filterwarnings(\"default\")\n    def test_better_reporting_on_conftest_load_failure(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Show a user-friendly traceback on conftest import failures (#486, #3332)\"\"\"\n        pytester.makepyfile(\"\")\n        conftest = pytester.makeconftest(\n            \"\"\"\n            def foo():\n                import qwerty\n            foo()\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--help\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *--version*\n            *warning*conftest.py*\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.stdout.lines == []\n        assert result.stderr.lines == [\n            f\"ImportError while loading conftest '{conftest}'.\",\n            \"conftest.py:3: in <module>\",\n            \"    foo()\",\n            \"conftest.py:2: in foo\",\n            \"    import qwerty\",\n            \"E   ModuleNotFoundError: No module named 'qwerty'\",\n        ]\n\n    def test_early_skip(self, pytester: Pytester) -> None:\n        pytester.mkdir(\"xyz\")\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_collect_file():\n                pytest.skip(\"early\")\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stdout.fnmatch_lines([\"*1 skip*\"])\n\n    def test_issue88_initial_file_multinodes(self, pytester: Pytester) -> None:\n        pytester.copy_example(\"issue88_initial_file_multinodes\")\n        p = pytester.makepyfile(\"def test_hello(): pass\")\n        result = pytester.runpytest(p, \"--collect-only\")\n        result.stdout.fnmatch_lines([\"*MyFile*test_issue88*\", \"*Module*test_issue88*\"])\n\n    def test_issue93_initialnode_importing_capturing(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import sys\n            print(\"should not be seen\")\n            sys.stderr.write(\"stder42\\\\n\")\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stdout.no_fnmatch_line(\"*should not be seen*\")\n        assert \"stderr42\" not in result.stderr.str()\n\n    def test_conftest_printing_shows_if_error(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            print(\"should be seen\")\n            assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        assert \"should be seen\" in result.stdout.str()\n\n    def test_issue109_sibling_conftests_not_loaded(self, pytester: Pytester) -> None:\n        sub1 = pytester.mkdir(\"sub1\")\n        sub2 = pytester.mkdir(\"sub2\")\n        sub1.joinpath(\"conftest.py\").write_text(\"assert 0\", encoding=\"utf-8\")\n        result = pytester.runpytest(sub2)\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        sub2.joinpath(\"__init__.py\").touch()\n        p = sub2.joinpath(\"test_hello.py\")\n        p.touch()\n        result = pytester.runpytest(p)\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result = pytester.runpytest(sub1)\n        assert result.ret == ExitCode.USAGE_ERROR\n\n    def test_directory_skipped(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_ignore_collect():\n                pytest.skip(\"intentional\")\n        \"\"\"\n        )\n        pytester.makepyfile(\"def test_hello(): pass\")\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stdout.fnmatch_lines([\"*1 skipped*\"])\n\n    def test_multiple_items_per_collector_byid(self, pytester: Pytester) -> None:\n        c = pytester.makeconftest(\n            \"\"\"\n            import pytest\n            class MyItem(pytest.Item):\n                def runtest(self):\n                    pass\n            class MyCollector(pytest.File):\n                def collect(self):\n                    return [MyItem.from_parent(name=\"xyz\", parent=self)]\n            def pytest_collect_file(file_path, parent):\n                if file_path.name.startswith(\"conftest\"):\n                    return MyCollector.from_parent(path=file_path, parent=parent)\n        \"\"\"\n        )\n        result = pytester.runpytest(c.name + \"::\" + \"xyz\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 pass*\"])\n\n    def test_skip_on_generated_funcarg_id(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize('x', [3], ids=['hello-123'])\n            def pytest_runtest_setup(item):\n                print(item.keywords)\n                if 'hello-123' in item.keywords:\n                    pytest.skip(\"hello\")\n                assert 0\n        \"\"\"\n        )\n        p = pytester.makepyfile(\"\"\"def test_func(x): pass\"\"\")\n        res = pytester.runpytest(p)\n        assert res.ret == 0\n        res.stdout.fnmatch_lines([\"*1 skipped*\"])\n\n    def test_direct_addressing_selects(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize('i', [1, 2], ids=[\"1\", \"2\"])\n            def test_func(i):\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest(p.name + \"::\" + \"test_func[1]\")\n        assert res.ret == 0\n        res.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_direct_addressing_selects_duplicates(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"a\", [1, 2, 10, 11, 2, 1, 12, 11])\n            def test_func(a):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.assert_outcomes(failed=0, passed=8)\n\n    def test_direct_addressing_selects_duplicates_1(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"a\", [1, 2, 10, 11, 2, 1, 12, 1_1,2_1])\n            def test_func(a):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.assert_outcomes(failed=0, passed=9)\n\n    def test_direct_addressing_selects_duplicates_2(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"a\", [\"a\",\"b\",\"c\",\"a\",\"a1\"])\n            def test_func(a):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.assert_outcomes(failed=0, passed=5)\n\n    def test_direct_addressing_notfound(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_func():\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest(p.name + \"::\" + \"test_notfound\")\n        assert res.ret\n        res.stderr.fnmatch_lines([\"*ERROR*not found*\"])\n\n    def test_docstring_on_hookspec(self) -> None:\n        from _pytest import hookspec\n\n        for name, value in vars(hookspec).items():\n            if name.startswith(\"pytest_\"):\n                assert value.__doc__, f\"no docstring for {name}\"\n\n    def test_initialization_error_issue49(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_configure():\n                x\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 3  # internal error\n        result.stderr.fnmatch_lines([\"INTERNAL*pytest_configure*\", \"INTERNAL*x*\"])\n        assert \"sessionstarttime\" not in result.stderr.str()\n\n    @pytest.mark.parametrize(\"lookfor\", [\"test_fun.py::test_a\"])\n    def test_issue134_report_error_when_collecting_member(\n        self, pytester: Pytester, lookfor\n    ) -> None:\n        pytester.makepyfile(\n            test_fun=\"\"\"\n            def test_a():\n                pass\n            def\"\"\"\n        )\n        result = pytester.runpytest(lookfor)\n        result.stdout.fnmatch_lines([\"*SyntaxError*\"])\n        if \"::\" in lookfor:\n            result.stderr.fnmatch_lines([\"*ERROR*\"])\n            assert result.ret == 4  # usage error only if item not found\n\n    def test_report_all_failed_collections_initargs(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            from _pytest.config import ExitCode\n\n            def pytest_sessionfinish(exitstatus):\n                assert exitstatus == ExitCode.USAGE_ERROR\n                print(\"pytest_sessionfinish_called\")\n            \"\"\"\n        )\n        pytester.makepyfile(test_a=\"def\", test_b=\"def\")\n        result = pytester.runpytest(\"test_a.py::a\", \"test_b.py::b\")\n        result.stderr.fnmatch_lines([\"*ERROR*test_a.py::a*\", \"*ERROR*test_b.py::b*\"])\n        result.stdout.fnmatch_lines([\"pytest_sessionfinish_called\"])\n        assert result.ret == ExitCode.USAGE_ERROR\n\n    def test_namespace_import_doesnt_confuse_import_hook(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Ref #383.\n\n        Python 3.3's namespace package messed with our import hooks.\n        Importing a module that didn't exist, even if the ImportError was\n        gracefully handled, would make our test crash.\n        \"\"\"\n        pytester.mkdir(\"not_a_package\")\n        p = pytester.makepyfile(\n            \"\"\"\n            try:\n                from not_a_package import doesnt_exist\n            except ImportError:\n                # We handle the import error gracefully here\n                pass\n\n            def test_whatever():\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest(p.name)\n        assert res.ret == 0\n\n    def test_unknown_option(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--qwlkej\")\n        result.stderr.fnmatch_lines(\n            \"\"\"\n            *unrecognized*\n        \"\"\"\n        )\n\n    def test_getsourcelines_error_issue553(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        monkeypatch.setattr(\"inspect.getsourcelines\", None)\n        p = pytester.makepyfile(\n            \"\"\"\n            def raise_error(obj):\n                raise OSError('source code not available')\n\n            import inspect\n            inspect.getsourcelines = raise_error\n\n            def test_foo(invalid_fixture):\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest(p)\n        res.stdout.fnmatch_lines(\n            [\"*source code not available*\", \"E*fixture 'invalid_fixture' not found\"]\n        )\n\n    def test_plugins_given_as_strings(\n        self, pytester: Pytester, monkeypatch, _sys_snapshot\n    ) -> None:\n        \"\"\"Test that str values passed to main() as `plugins` arg are\n        interpreted as module names to be imported and registered (#855).\"\"\"\n        with pytest.raises(ImportError) as excinfo:\n            pytest.main([str(pytester.path)], plugins=[\"invalid.module\"])\n        assert \"invalid\" in str(excinfo.value)\n\n        p = pytester.path.joinpath(\"test_test_plugins_given_as_strings.py\")\n        p.write_text(\"def test_foo(): pass\", encoding=\"utf-8\")\n        mod = types.ModuleType(\"myplugin\")\n        monkeypatch.setitem(sys.modules, \"myplugin\", mod)\n        assert pytest.main(args=[str(pytester.path)], plugins=[\"myplugin\"]) == 0\n\n    def test_parametrized_with_bytes_regex(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import re\n            import pytest\n            @pytest.mark.parametrize('r', [re.compile(b'foo')])\n            def test_stuff(r):\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest(p)\n        res.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_parametrized_with_null_bytes(self, pytester: Pytester) -> None:\n        \"\"\"Test parametrization with values that contain null bytes and unicode characters (#2644, #2957)\"\"\"\n        p = pytester.makepyfile(\n            \"\"\"\\\n            import pytest\n\n            @pytest.mark.parametrize(\"data\", [b\"\\\\x00\", \"\\\\x00\", 'a\u00e7\u00e3o'])\n            def test_foo(data):\n                assert data\n            \"\"\"\n        )\n        res = pytester.runpytest(p)\n        res.assert_outcomes(passed=3)\n\n    # Warning ignore because of:\n    # https://github.com/python/cpython/issues/85308\n    # Can be removed once Python<3.12 support is dropped.\n    @pytest.mark.filterwarnings(\"ignore:'encoding' argument not specified\")\n    def test_command_line_args_from_file(\n        self, pytester: Pytester, tmp_path: Path\n    ) -> None:\n        pytester.makepyfile(\n            test_file=\"\"\"\n            import pytest\n\n            class TestClass:\n                @pytest.mark.parametrize(\"a\", [\"x\",\"y\"])\n                def test_func(self, a):\n                    pass\n            \"\"\"\n        )\n        tests = [\n            \"test_file.py::TestClass::test_func[x]\",\n            \"test_file.py::TestClass::test_func[y]\",\n            \"-q\",\n        ]\n        args_file = pytester.maketxtfile(tests=\"\\n\".join(tests))\n        result = pytester.runpytest(f\"@{args_file}\")\n        result.assert_outcomes(failed=0, passed=2)\n\n\nclass TestInvocationVariants:\n    def test_earlyinit(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            assert hasattr(pytest, 'mark')\n        \"\"\"\n        )\n        result = pytester.runpython(p)\n        assert result.ret == 0\n\n    def test_pydoc(self, pytester: Pytester) -> None:\n        result = pytester.runpython_c(\"import pytest;help(pytest)\")\n        assert result.ret == 0\n        s = result.stdout.str()\n        assert \"MarkGenerator\" in s\n\n    def test_import_star_pytest(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            from pytest import *\n            #Item\n            #File\n            main\n            skip\n            xfail\n        \"\"\"\n        )\n        result = pytester.runpython(p)\n        assert result.ret == 0\n\n    def test_double_pytestcmdline(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            run=\"\"\"\n            import pytest\n            pytest.main()\n            pytest.main()\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_hello():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpython(p)\n        result.stdout.fnmatch_lines([\"*1 passed*\", \"*1 passed*\"])\n\n    def test_python_minus_m_invocation_ok(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"def test_hello(): pass\")\n        res = pytester.run(sys.executable, \"-m\", \"pytest\", str(p1))\n        assert res.ret == 0\n\n    def test_python_minus_m_invocation_fail(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"def test_fail(): 0/0\")\n        res = pytester.run(sys.executable, \"-m\", \"pytest\", str(p1))\n        assert res.ret == 1\n\n    def test_python_pytest_package(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"def test_pass(): pass\")\n        res = pytester.run(sys.executable, \"-m\", \"pytest\", str(p1))\n        assert res.ret == 0\n        res.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_invoke_with_invalid_type(self) -> None:\n        with pytest.raises(\n            TypeError, match=\"expected to be a list of strings, got: '-h'\"\n        ):\n            pytest.main(\"-h\")  # type: ignore[arg-type]\n\n    def test_invoke_with_path(self, pytester: Pytester, capsys) -> None:\n        retcode = pytest.main([str(pytester.path)])\n        assert retcode == ExitCode.NO_TESTS_COLLECTED\n        out, err = capsys.readouterr()\n\n    def test_invoke_plugin_api(self, capsys) -> None:\n        class MyPlugin:\n            def pytest_addoption(self, parser):\n                parser.addoption(\"--myopt\")\n\n        pytest.main([\"-h\"], plugins=[MyPlugin()])\n        out, err = capsys.readouterr()\n        assert \"--myopt\" in out\n\n    def test_pyargs_importerror(self, pytester: Pytester, monkeypatch) -> None:\n        monkeypatch.delenv(\"PYTHONDONTWRITEBYTECODE\", False)\n        path = pytester.mkpydir(\"tpkg\")\n        path.joinpath(\"test_hello.py\").write_text(\"raise ImportError\", encoding=\"utf-8\")\n\n        result = pytester.runpytest(\"--pyargs\", \"tpkg.test_hello\", syspathinsert=True)\n        assert result.ret != 0\n\n        result.stdout.fnmatch_lines([\"collected*0*items*/*1*error\"])\n\n    def test_pyargs_only_imported_once(self, pytester: Pytester) -> None:\n        pkg = pytester.mkpydir(\"foo\")\n        pkg.joinpath(\"test_foo.py\").write_text(\n            \"print('hello from test_foo')\\ndef test(): pass\", encoding=\"utf-8\"\n        )\n        pkg.joinpath(\"conftest.py\").write_text(\n            \"def pytest_configure(config): print('configuring')\", encoding=\"utf-8\"\n        )\n\n        result = pytester.runpytest(\n            \"--pyargs\", \"foo.test_foo\", \"-s\", syspathinsert=True\n        )\n        # should only import once\n        assert result.outlines.count(\"hello from test_foo\") == 1\n        # should only configure once\n        assert result.outlines.count(\"configuring\") == 1\n\n    def test_pyargs_filename_looks_like_module(self, pytester: Pytester) -> None:\n        pytester.path.joinpath(\"conftest.py\").touch()\n        pytester.path.joinpath(\"t.py\").write_text(\"def test(): pass\", encoding=\"utf-8\")\n        result = pytester.runpytest(\"--pyargs\", \"t.py\")\n        assert result.ret == ExitCode.OK\n\n    def test_cmdline_python_package(self, pytester: Pytester, monkeypatch) -> None:\n        import warnings\n\n        monkeypatch.delenv(\"PYTHONDONTWRITEBYTECODE\", False)\n        path = pytester.mkpydir(\"tpkg\")\n        path.joinpath(\"test_hello.py\").write_text(\n            \"def test_hello(): pass\", encoding=\"utf-8\"\n        )\n        path.joinpath(\"test_world.py\").write_text(\n            \"def test_world(): pass\", encoding=\"utf-8\"\n        )\n        result = pytester.runpytest(\"--pyargs\", \"tpkg\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n        result = pytester.runpytest(\"--pyargs\", \"tpkg.test_hello\", syspathinsert=True)\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n        empty_package = pytester.mkpydir(\"empty_package\")\n        monkeypatch.setenv(\"PYTHONPATH\", str(empty_package), prepend=os.pathsep)\n        # the path which is not a package raises a warning on pypy;\n        # no idea why only pypy and not normal python warn about it here\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", ImportWarning)\n            result = pytester.runpytest(\"--pyargs\", \".\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n        monkeypatch.setenv(\"PYTHONPATH\", str(pytester), prepend=os.pathsep)\n        result = pytester.runpytest(\"--pyargs\", \"tpkg.test_missing\", syspathinsert=True)\n        assert result.ret != 0\n        result.stderr.fnmatch_lines([\"*not*found*test_missing*\"])\n\n    def test_cmdline_python_namespace_package(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        \"\"\"Test --pyargs option with namespace packages (#1567).\n\n        Ref: https://packaging.python.org/guides/packaging-namespace-packages/\n        \"\"\"\n        monkeypatch.delenv(\"PYTHONDONTWRITEBYTECODE\", raising=False)\n\n        search_path = []\n        for dirname in \"hello\", \"world\":\n            d = pytester.mkdir(dirname)\n            search_path.append(d)\n            ns = d.joinpath(\"ns_pkg\")\n            ns.mkdir()\n            ns.joinpath(\"__init__.py\").write_text(\n                \"__import__('pkg_resources').declare_namespace(__name__)\",\n                encoding=\"utf-8\",\n            )\n            lib = ns.joinpath(dirname)\n            lib.mkdir()\n            lib.joinpath(\"__init__.py\").touch()\n            lib.joinpath(f\"test_{dirname}.py\").write_text(\n                f\"def test_{dirname}(): pass\\ndef test_other():pass\",\n                encoding=\"utf-8\",\n            )\n\n        # The structure of the test directory is now:\n        # .\n        # \u251c\u2500\u2500 hello\n        # \u2502   \u2514\u2500\u2500 ns_pkg\n        # \u2502       \u251c\u2500\u2500 __init__.py\n        # \u2502       \u2514\u2500\u2500 hello\n        # \u2502           \u251c\u2500\u2500 __init__.py\n        # \u2502           \u2514\u2500\u2500 test_hello.py\n        # \u2514\u2500\u2500 world\n        #     \u2514\u2500\u2500 ns_pkg\n        #         \u251c\u2500\u2500 __init__.py\n        #         \u2514\u2500\u2500 world\n        #             \u251c\u2500\u2500 __init__.py\n        #             \u2514\u2500\u2500 test_world.py\n\n        # NOTE: the different/reversed ordering is intentional here.\n        monkeypatch.setenv(\"PYTHONPATH\", prepend_pythonpath(*search_path))\n        for p in search_path:\n            monkeypatch.syspath_prepend(p)\n\n        # mixed module and filenames:\n        monkeypatch.chdir(\"world\")\n\n        # pgk_resources.declare_namespace has been deprecated in favor of implicit namespace packages.\n        # pgk_resources has been deprecated entirely.\n        # While we could change the test to use implicit namespace packages, seems better\n        # to still ensure the old declaration via declare_namespace still works.\n        ignore_w = (\n            r\"-Wignore:Deprecated call to `pkg_resources.declare_namespace\",\n            r\"-Wignore:pkg_resources is deprecated\",\n        )\n        result = pytester.runpytest(\n            \"--pyargs\", \"-v\", \"ns_pkg.hello\", \"ns_pkg/world\", *ignore_w\n        )\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\n                \"test_hello.py::test_hello*PASSED*\",\n                \"test_hello.py::test_other*PASSED*\",\n                \"ns_pkg/world/test_world.py::test_world*PASSED*\",\n                \"ns_pkg/world/test_world.py::test_other*PASSED*\",\n                \"*4 passed in*\",\n            ]\n        )\n\n        # specify tests within a module\n        pytester.chdir()\n        result = pytester.runpytest(\n            \"--pyargs\", \"-v\", \"ns_pkg.world.test_world::test_other\"\n        )\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\"*test_world.py::test_other*PASSED*\", \"*1 passed*\"]\n        )\n\n    def test_invoke_test_and_doctestmodules(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(str(p) + \"::test\", \"--doctest-modules\")\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_cmdline_python_package_symlink(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        \"\"\"\n        --pyargs with packages with path containing symlink can have conftest.py in\n        their package (#2985)\n        \"\"\"\n        monkeypatch.delenv(\"PYTHONDONTWRITEBYTECODE\", raising=False)\n\n        dirname = \"lib\"\n        d = pytester.mkdir(dirname)\n        foo = d.joinpath(\"foo\")\n        foo.mkdir()\n        foo.joinpath(\"__init__.py\").touch()\n        lib = foo.joinpath(\"bar\")\n        lib.mkdir()\n        lib.joinpath(\"__init__.py\").touch()\n        lib.joinpath(\"test_bar.py\").write_text(\n            \"def test_bar(): pass\\ndef test_other(a_fixture):pass\", encoding=\"utf-8\"\n        )\n        lib.joinpath(\"conftest.py\").write_text(\n            \"import pytest\\n@pytest.fixture\\ndef a_fixture():pass\", encoding=\"utf-8\"\n        )\n\n        d_local = pytester.mkdir(\"symlink_root\")\n        symlink_location = d_local / \"lib\"\n        symlink_or_skip(d, symlink_location, target_is_directory=True)\n\n        # The structure of the test directory is now:\n        # .\n        # \u251c\u2500\u2500 symlink_root\n        # \u2502   \u2514\u2500\u2500 lib -> ../lib\n        # \u2514\u2500\u2500 lib\n        #     \u2514\u2500\u2500 foo\n        #         \u251c\u2500\u2500 __init__.py\n        #         \u2514\u2500\u2500 bar\n        #             \u251c\u2500\u2500 __init__.py\n        #             \u251c\u2500\u2500 conftest.py\n        #             \u2514\u2500\u2500 test_bar.py\n\n        # NOTE: the different/reversed ordering is intentional here.\n        search_path = [\"lib\", os.path.join(\"symlink_root\", \"lib\")]\n        monkeypatch.setenv(\"PYTHONPATH\", prepend_pythonpath(*search_path))\n        for p in search_path:\n            monkeypatch.syspath_prepend(p)\n\n        # module picked up in symlink-ed directory:\n        # It picks up symlink_root/lib/foo/bar (symlink) via sys.path.\n        result = pytester.runpytest(\"--pyargs\", \"-v\", \"foo.bar\")\n        pytester.chdir()\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\n                \"symlink_root/lib/foo/bar/test_bar.py::test_bar PASSED*\",\n                \"symlink_root/lib/foo/bar/test_bar.py::test_other PASSED*\",\n                \"*2 passed*\",\n            ]\n        )\n\n    def test_cmdline_python_package_not_exists(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--pyargs\", \"tpkgwhatv\")\n        assert result.ret\n        result.stderr.fnmatch_lines([\"ERROR*module*or*package*not*found*\"])\n\n    @pytest.mark.xfail(reason=\"decide: feature or bug\")\n    def test_noclass_discovery_if_not_testcase(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            import unittest\n            class TestHello(object):\n                def test_hello(self):\n                    assert self.attr\n\n            class RealTest(unittest.TestCase, TestHello):\n                attr = 42\n        \"\"\"\n        )\n        reprec = pytester.inline_run(testpath)\n        reprec.assertoutcome(passed=1)\n\n    def test_doctest_id(self, pytester: Pytester) -> None:\n        pytester.makefile(\n            \".txt\",\n            \"\"\"\n            >>> x=3\n            >>> x\n            4\n        \"\"\",\n        )\n        testid = \"test_doctest_id.txt::test_doctest_id.txt\"\n        expected_lines = [\n            \"*= FAILURES =*\",\n            \"*_ ?doctest? test_doctest_id.txt _*\",\n            \"FAILED test_doctest_id.txt::test_doctest_id.txt\",\n            \"*= 1 failed in*\",\n        ]\n        result = pytester.runpytest(testid, \"-rf\", \"--tb=short\")\n        result.stdout.fnmatch_lines(expected_lines)\n\n        # Ensure that re-running it will still handle it as\n        # doctest.DocTestFailure, which was not the case before when\n        # re-importing doctest, but not creating a new RUNNER_CLASS.\n        result = pytester.runpytest(testid, \"-rf\", \"--tb=short\")\n        result.stdout.fnmatch_lines(expected_lines)\n\n    def test_core_backward_compatibility(self) -> None:\n        \"\"\"Test backward compatibility for get_plugin_manager function. See #787.\"\"\"\n        import _pytest.config\n\n        assert (\n            type(_pytest.config.get_plugin_manager())\n            is _pytest.config.PytestPluginManager\n        )\n\n    def test_has_plugin(self, request) -> None:\n        \"\"\"Test hasplugin function of the plugin manager (#932).\"\"\"\n        assert request.config.pluginmanager.hasplugin(\"python\")\n\n\nclass TestDurations:\n    source = \"\"\"\n        from _pytest import timing\n        def test_something():\n            pass\n        def test_2():\n            timing.sleep(0.010)\n        def test_1():\n            timing.sleep(0.002)\n        def test_3():\n            timing.sleep(0.020)\n    \"\"\"\n\n    def test_calls(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        result = pytester.runpytest_inprocess(\"--durations=10\")\n        assert result.ret == 0\n\n        result.stdout.fnmatch_lines_random(\n            [\"*durations*\", \"*call*test_3*\", \"*call*test_2*\"]\n        )\n\n        result.stdout.fnmatch_lines(\n            [\"(8 durations < 0.005s hidden.  Use -vv to show these durations.)\"]\n        )\n\n    def test_calls_show_2(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        result = pytester.runpytest_inprocess(\"--durations=2\")\n        assert result.ret == 0\n\n        lines = result.stdout.get_lines_after(\"*slowest*durations*\")\n        assert \"4 passed\" in lines[2]\n\n    def test_calls_showall(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        result = pytester.runpytest_inprocess(\"--durations=0\")\n        assert result.ret == 0\n\n        tested = \"3\"\n        for x in tested:\n            for y in (\"call\",):  # 'setup', 'call', 'teardown':\n                for line in result.stdout.lines:\n                    if (f\"test_{x}\") in line and y in line:\n                        break\n                else:\n                    raise AssertionError(f\"not found {x} {y}\")\n\n    def test_calls_showall_verbose(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        result = pytester.runpytest_inprocess(\"--durations=0\", \"-vv\")\n        assert result.ret == 0\n\n        for x in \"123\":\n            for y in (\"call\",):  # 'setup', 'call', 'teardown':\n                for line in result.stdout.lines:\n                    if (f\"test_{x}\") in line and y in line:\n                        break\n                else:\n                    raise AssertionError(f\"not found {x} {y}\")\n\n    def test_with_deselected(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        result = pytester.runpytest_inprocess(\"--durations=2\", \"-k test_3\")\n        assert result.ret == 0\n\n        result.stdout.fnmatch_lines([\"*durations*\", \"*call*test_3*\"])\n\n    def test_with_failing_collection(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        pytester.makepyfile(test_collecterror=\"\"\"xyz\"\"\")\n        result = pytester.runpytest_inprocess(\"--durations=2\", \"-k test_1\")\n        assert result.ret == 2\n\n        result.stdout.fnmatch_lines([\"*Interrupted: 1 error during collection*\"])\n        # Collection errors abort test execution, therefore no duration is\n        # output\n        result.stdout.no_fnmatch_line(\"*duration*\")\n\n    def test_with_not(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        result = pytester.runpytest_inprocess(\"-k not 1\")\n        assert result.ret == 0\n\n\nclass TestDurationsWithFixture:\n    source = \"\"\"\n        import pytest\n        from _pytest import timing\n\n        @pytest.fixture\n        def setup_fixt():\n            timing.sleep(2)\n\n        def test_1(setup_fixt):\n            timing.sleep(5)\n    \"\"\"\n\n    def test_setup_function(self, pytester: Pytester, mock_timing) -> None:\n        pytester.makepyfile(self.source)\n        result = pytester.runpytest_inprocess(\"--durations=10\")\n        assert result.ret == 0\n\n        result.stdout.fnmatch_lines_random(\n            \"\"\"\n            *durations*\n            5.00s call *test_1*\n            2.00s setup *test_1*\n        \"\"\"\n        )\n\n\ndef test_zipimport_hook(pytester: Pytester) -> None:\n    \"\"\"Test package loader is being used correctly (see #1837).\"\"\"\n    zipapp = pytest.importorskip(\"zipapp\")\n    pytester.path.joinpath(\"app\").mkdir()\n    pytester.makepyfile(\n        **{\n            \"app/foo.py\": \"\"\"\n            import pytest\n            def main():\n                pytest.main(['--pyargs', 'foo'])\n        \"\"\"\n        }\n    )\n    target = pytester.path.joinpath(\"foo.zip\")\n    zipapp.create_archive(\n        str(pytester.path.joinpath(\"app\")), str(target), main=\"foo:main\"\n    )\n    result = pytester.runpython(target)\n    assert result.ret == 0\n    result.stderr.fnmatch_lines([\"*not found*foo*\"])\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR>*\")\n\n\ndef test_import_plugin_unicode_name(pytester: Pytester) -> None:\n    pytester.makepyfile(myplugin=\"\")\n    pytester.makepyfile(\"def test(): pass\")\n    pytester.makeconftest(\"pytest_plugins = ['myplugin']\")\n    r = pytester.runpytest()\n    assert r.ret == 0\n\n\ndef test_pytest_plugins_as_module(pytester: Pytester) -> None:\n    \"\"\"Do not raise an error if pytest_plugins attribute is a module (#3899)\"\"\"\n    pytester.makepyfile(\n        **{\n            \"__init__.py\": \"\",\n            \"pytest_plugins.py\": \"\",\n            \"conftest.py\": \"from . import pytest_plugins\",\n            \"test_foo.py\": \"def test(): pass\",\n        }\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n\ndef test_deferred_hook_checking(pytester: Pytester) -> None:\n    \"\"\"Check hooks as late as possible (#1821).\"\"\"\n    pytester.syspathinsert()\n    pytester.makepyfile(\n        **{\n            \"plugin.py\": \"\"\"\n        class Hooks(object):\n            def pytest_my_hook(self, config):\n                pass\n\n        def pytest_configure(config):\n            config.pluginmanager.add_hookspecs(Hooks)\n        \"\"\",\n            \"conftest.py\": \"\"\"\n            pytest_plugins = ['plugin']\n            def pytest_my_hook(config):\n                return 40\n        \"\"\",\n            \"test_foo.py\": \"\"\"\n            def test(request):\n                assert request.config.hook.pytest_my_hook(config=request.config) == [40]\n        \"\"\",\n        }\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"* 1 passed *\"])\n\n\ndef test_fixture_values_leak(pytester: Pytester) -> None:\n    \"\"\"Ensure that fixture objects are properly destroyed by the garbage collector at the end of their expected\n    life-times (#2981).\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import dataclasses\n        import gc\n        import pytest\n        import weakref\n\n        @dataclasses.dataclass\n        class SomeObj:\n            name: str\n\n        fix_of_test1_ref = None\n        session_ref = None\n\n        @pytest.fixture(scope='session')\n        def session_fix():\n            global session_ref\n            obj = SomeObj(name='session-fixture')\n            session_ref = weakref.ref(obj)\n            return obj\n\n        @pytest.fixture\n        def fix(session_fix):\n            global fix_of_test1_ref\n            obj = SomeObj(name='local-fixture')\n            fix_of_test1_ref = weakref.ref(obj)\n            return obj\n\n        def test1(fix):\n            assert fix_of_test1_ref() is fix\n\n        def test2():\n            gc.collect()\n            # fixture \"fix\" created during test1 must have been destroyed by now\n            assert fix_of_test1_ref() is None\n    \"\"\"\n    )\n    # Running on subprocess does not activate the HookRecorder\n    # which holds itself a reference to objects in case of the\n    # pytest_assert_reprcompare hook\n    result = pytester.runpytest_subprocess()\n    result.stdout.fnmatch_lines([\"* 2 passed *\"])\n\n\ndef test_fixture_order_respects_scope(pytester: Pytester) -> None:\n    \"\"\"Ensure that fixtures are created according to scope order (#2405).\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        data = {}\n\n        @pytest.fixture(scope='module')\n        def clean_data():\n            data.clear()\n\n        @pytest.fixture(autouse=True)\n        def add_data():\n            data.update(value=True)\n\n        @pytest.mark.usefixtures('clean_data')\n        def test_value():\n            assert data.get('value')\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\ndef test_frame_leak_on_failing_test(pytester: Pytester) -> None:\n    \"\"\"Pytest would leak garbage referencing the frames of tests that failed\n    that could never be reclaimed (#2798).\n\n    Unfortunately it was not possible to remove the actual circles because most of them\n    are made of traceback objects which cannot be weakly referenced. Those objects at least\n    can be eventually claimed by the garbage collector.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import gc\n        import weakref\n\n        class Obj:\n            pass\n\n        ref = None\n\n        def test1():\n            obj = Obj()\n            global ref\n            ref = weakref.ref(obj)\n            assert 0\n\n        def test2():\n            gc.collect()\n            assert ref() is None\n    \"\"\"\n    )\n    result = pytester.runpytest_subprocess()\n    result.stdout.fnmatch_lines([\"*1 failed, 1 passed in*\"])\n\n\ndef test_fixture_mock_integration(pytester: Pytester) -> None:\n    \"\"\"Test that decorators applied to fixture are left working (#3774)\"\"\"\n    p = pytester.copy_example(\"acceptance/fixture_mock_integration.py\")\n    result = pytester.runpytest(p)\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_usage_error_code(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"-unknown-option-\")\n    assert result.ret == ExitCode.USAGE_ERROR\n\n\ndef test_warn_on_async_function(pytester: Pytester) -> None:\n    # In the below we .close() the coroutine only to avoid\n    # \"RuntimeWarning: coroutine 'test_2' was never awaited\"\n    # which messes with other tests.\n    pytester.makepyfile(\n        test_async=\"\"\"\n        async def test_1():\n            pass\n        async def test_2():\n            pass\n        def test_3():\n            coro = test_2()\n            coro.close()\n            return coro\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-Wdefault\")\n    result.stdout.fnmatch_lines(\n        [\n            \"test_async.py::test_1\",\n            \"test_async.py::test_2\",\n            \"test_async.py::test_3\",\n            \"*async def functions are not natively supported*\",\n            \"*3 skipped, 3 warnings in*\",\n        ]\n    )\n    # ensure our warning message appears only once\n    assert (\n        result.stdout.str().count(\"async def functions are not natively supported\") == 1\n    )\n\n\ndef test_warn_on_async_gen_function(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_async=\"\"\"\n        async def test_1():\n            yield\n        async def test_2():\n            yield\n        def test_3():\n            return test_2()\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-Wdefault\")\n    result.stdout.fnmatch_lines(\n        [\n            \"test_async.py::test_1\",\n            \"test_async.py::test_2\",\n            \"test_async.py::test_3\",\n            \"*async def functions are not natively supported*\",\n            \"*3 skipped, 3 warnings in*\",\n        ]\n    )\n    # ensure our warning message appears only once\n    assert (\n        result.stdout.str().count(\"async def functions are not natively supported\") == 1\n    )\n\n\ndef test_pdb_can_be_rewritten(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        **{\n            \"conftest.py\": \"\"\"\n                import pytest\n                pytest.register_assert_rewrite(\"pdb\")\n                \"\"\",\n            \"__init__.py\": \"\",\n            \"pdb.py\": \"\"\"\n                def check():\n                    assert 1 == 2\n                \"\"\",\n            \"test_pdb.py\": \"\"\"\n                def test():\n                    import pdb\n                    assert pdb.check()\n                \"\"\",\n        }\n    )\n    # Disable debugging plugin itself to avoid:\n    # > INTERNALERROR> AttributeError: module 'pdb' has no attribute 'set_trace'\n    result = pytester.runpytest_subprocess(\"-p\", \"no:debugging\", \"-vv\")\n    result.stdout.fnmatch_lines(\n        [\n            \"    def check():\",\n            \">       assert 1 == 2\",\n            \"E       assert 1 == 2\",\n            \"\",\n            \"pdb.py:2: AssertionError\",\n            \"*= 1 failed in *\",\n        ]\n    )\n    assert result.ret == 1\n\n\ndef test_tee_stdio_captures_and_live_prints(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import sys\n        def test_simple():\n            print (\"@this is stdout@\")\n            print (\"@this is stderr@\", file=sys.stderr)\n    \"\"\"\n    )\n    result = pytester.runpytest_subprocess(\n        testpath,\n        \"--capture=tee-sys\",\n        \"--junitxml=output.xml\",\n        \"-o\",\n        \"junit_logging=all\",\n    )\n\n    # ensure stdout/stderr were 'live printed'\n    result.stdout.fnmatch_lines([\"*@this is stdout@*\"])\n    result.stderr.fnmatch_lines([\"*@this is stderr@*\"])\n\n    # now ensure the output is in the junitxml\n    fullXml = pytester.path.joinpath(\"output.xml\").read_text(encoding=\"utf-8\")\n    assert \"@this is stdout@\\n\" in fullXml\n    assert \"@this is stderr@\\n\" in fullXml\n\n\n@pytest.mark.skipif(\n    sys.platform == \"win32\",\n    reason=\"Windows raises `OSError: [Errno 22] Invalid argument` instead\",\n)\ndef test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n    \"\"\"Ensure that the broken pipe error message is suppressed.\n\n    In some Python versions, it reaches sys.unraisablehook, in others\n    a BrokenPipeError exception is propagated, but either way it prints\n    to stderr on shutdown, so checking nothing is printed is enough.\n    \"\"\"\n    popen = pytester.popen((*pytester._getpytestargs(), \"--help\"))\n    popen.stdout.close()\n    ret = popen.wait()\n    assert popen.stderr.read() == b\"\"\n    assert ret == 1\n\n    # Cleanup.\n    popen.stderr.close()\n\n\ndef test_function_return_non_none_warning(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_stuff():\n            return \"something\"\n    \"\"\"\n    )\n    res = pytester.runpytest()\n    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n\n\ndef test_doctest_and_normal_imports_with_importlib(pytester: Pytester) -> None:\n    \"\"\"\n    Regression test for #10811: previously import_path with ImportMode.importlib would\n    not return a module if already in sys.modules, resulting in modules being imported\n    multiple times, which causes problems with modules that have import side effects.\n    \"\"\"\n    # Uses the exact reproducer form #10811, given it is very minimal\n    # and illustrates the problem well.\n    pytester.makepyfile(\n        **{\n            \"pmxbot/commands.py\": \"from . import logging\",\n            \"pmxbot/logging.py\": \"\",\n            \"tests/__init__.py\": \"\",\n            \"tests/test_commands.py\": \"\"\"\n                import importlib\n                from pmxbot import logging\n\n                class TestCommands:\n                    def test_boo(self):\n                        assert importlib.import_module('pmxbot.logging') is logging\n                \"\"\",\n        }\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        addopts=\n            --doctest-modules\n            --import-mode importlib\n        \"\"\"\n    )\n    result = pytester.runpytest_subprocess()\n    result.stdout.fnmatch_lines(\"*1 passed*\")\n\n\n@pytest.mark.skip(reason=\"Test is not isolated\")\ndef test_issue_9765(pytester: Pytester) -> None:\n    \"\"\"Reproducer for issue #9765 on Windows\n\n    https://github.com/pytest-dev/pytest/issues/9765\n    \"\"\"\n    pytester.makepyprojecttoml(\n        \"\"\"\n        [tool.pytest.ini_options]\n        addopts = \"-p my_package.plugin.my_plugin\"\n        \"\"\"\n    )\n    pytester.makepyfile(\n        **{\n            \"setup.py\": (\n                \"\"\"\n                from setuptools import setup\n\n                if __name__ == '__main__':\n                    setup(name='my_package', packages=['my_package', 'my_package.plugin'])\n                \"\"\"\n            ),\n            \"my_package/__init__.py\": \"\",\n            \"my_package/conftest.py\": \"\",\n            \"my_package/test_foo.py\": \"def test(): pass\",\n            \"my_package/plugin/__init__.py\": \"\",\n            \"my_package/plugin/my_plugin.py\": (\n                \"\"\"\n                import pytest\n\n                def pytest_configure(config):\n\n                    class SimplePlugin:\n                        @pytest.fixture(params=[1, 2, 3])\n                        def my_fixture(self, request):\n                            yield request.param\n\n                    config.pluginmanager.register(SimplePlugin())\n                \"\"\"\n            ),\n        }\n    )\n\n    subprocess.run(\n        [sys.executable, \"-Im\", \"pip\", \"install\", \"-e\", \".\"],\n        check=True,\n    )\n    try:\n        # We are using subprocess.run rather than pytester.run on purpose.\n        # pytester.run is adding the current directory to PYTHONPATH which avoids\n        # the bug. We also use pytest rather than python -m pytest for the same\n        # PYTHONPATH reason.\n        subprocess.run(\n            [\"pytest\", \"my_package\"],\n            capture_output=True,\n            check=True,\n            encoding=\"utf-8\",\n            text=True,\n        )\n    except subprocess.CalledProcessError as exc:\n        raise AssertionError(\n            f\"pytest command failed:\\n{exc.stdout=!s}\\n{exc.stderr=!s}\"\n        ) from exc\n", "testing/test_collection.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nfrom pathlib import Path\nimport pprint\nimport shutil\nimport sys\nimport tempfile\nimport textwrap\n\nfrom _pytest.assertion.util import running_on_ci\nfrom _pytest.config import ExitCode\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.main import _in_venv\nfrom _pytest.main import Session\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Item\nfrom _pytest.pathlib import symlink_or_skip\nfrom _pytest.pytester import HookRecorder\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef ensure_file(file_path: Path) -> Path:\n    \"\"\"Ensure that file exists\"\"\"\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n    file_path.touch(exist_ok=True)\n    return file_path\n\n\nclass TestCollector:\n    def test_collect_versus_item(self) -> None:\n        from pytest import Collector\n        from pytest import Item\n\n        assert not issubclass(Collector, Item)\n        assert not issubclass(Item, Collector)\n\n    def test_check_equality(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            def test_pass(): pass\n            def test_fail(): assert 0\n        \"\"\"\n        )\n        fn1 = pytester.collect_by_name(modcol, \"test_pass\")\n        assert isinstance(fn1, pytest.Function)\n        fn2 = pytester.collect_by_name(modcol, \"test_pass\")\n        assert isinstance(fn2, pytest.Function)\n\n        assert fn1 == fn2\n        assert fn1 != modcol\n        assert hash(fn1) == hash(fn2)\n\n        fn3 = pytester.collect_by_name(modcol, \"test_fail\")\n        assert isinstance(fn3, pytest.Function)\n        assert not (fn1 == fn3)\n        assert fn1 != fn3\n\n        for fn in fn1, fn2, fn3:\n            assert isinstance(fn, pytest.Function)\n            assert fn != 3  # type: ignore[comparison-overlap]\n            assert fn != modcol\n            assert fn != [1, 2, 3]  # type: ignore[comparison-overlap]\n            assert [1, 2, 3] != fn  # type: ignore[comparison-overlap]\n            assert modcol != fn\n\n        assert pytester.collect_by_name(modcol, \"doesnotexist\") is None\n\n    def test_getparent_and_accessors(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            class TestClass:\n                 def test_foo(self):\n                     pass\n        \"\"\"\n        )\n        cls = pytester.collect_by_name(modcol, \"TestClass\")\n        assert isinstance(cls, pytest.Class)\n        fn = pytester.collect_by_name(cls, \"test_foo\")\n        assert isinstance(fn, pytest.Function)\n\n        assert fn.getparent(pytest.Module) is modcol\n        assert modcol.module is not None\n        assert modcol.cls is None\n        assert modcol.instance is None\n\n        assert fn.getparent(pytest.Class) is cls\n        assert cls.module is not None\n        assert cls.cls is not None\n        assert cls.instance is None\n\n        assert fn.getparent(pytest.Function) is fn\n        assert fn.module is not None\n        assert fn.cls is not None\n        assert fn.instance is not None\n        assert fn.function is not None\n\n    def test_getcustomfile_roundtrip(self, pytester: Pytester) -> None:\n        hello = pytester.makefile(\".xxx\", hello=\"world\")\n        pytester.makepyfile(\n            conftest=\"\"\"\n            import pytest\n            class CustomFile(pytest.File):\n                def collect(self):\n                    return []\n            def pytest_collect_file(file_path, parent):\n                if file_path.suffix == \".xxx\":\n                    return CustomFile.from_parent(path=file_path, parent=parent)\n        \"\"\"\n        )\n        node = pytester.getpathnode(hello)\n        assert isinstance(node, pytest.File)\n        assert node.name == \"hello.xxx\"\n        nodes = node.session.perform_collect([node.nodeid], genitems=False)\n        assert len(nodes) == 1\n        assert isinstance(nodes[0], pytest.File)\n\n    def test_can_skip_class_with_test_attr(self, pytester: Pytester) -> None:\n        \"\"\"Assure test class is skipped when using `__test__=False` (See #2007).\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            class TestFoo(object):\n                __test__ = False\n                def __init__(self):\n                    pass\n                def test_foo():\n                    assert True\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 0 items\", \"*no tests ran in*\"])\n\n\nclass TestCollectFS:\n    def test_ignored_certain_directories(self, pytester: Pytester) -> None:\n        tmp_path = pytester.path\n        ensure_file(tmp_path / \"build\" / \"test_notfound.py\")\n        ensure_file(tmp_path / \"dist\" / \"test_notfound.py\")\n        ensure_file(tmp_path / \"_darcs\" / \"test_notfound.py\")\n        ensure_file(tmp_path / \"CVS\" / \"test_notfound.py\")\n        ensure_file(tmp_path / \"{arch}\" / \"test_notfound.py\")\n        ensure_file(tmp_path / \".whatever\" / \"test_notfound.py\")\n        ensure_file(tmp_path / \".bzr\" / \"test_notfound.py\")\n        ensure_file(tmp_path / \"normal\" / \"test_found.py\")\n        for x in tmp_path.rglob(\"test_*.py\"):\n            x.write_text(\"def test_hello(): pass\", encoding=\"utf-8\")\n\n        result = pytester.runpytest(\"--collect-only\")\n        s = result.stdout.str()\n        assert \"test_notfound\" not in s\n        assert \"test_found\" in s\n\n    @pytest.mark.parametrize(\n        \"fname\",\n        (\n            \"activate\",\n            \"activate.csh\",\n            \"activate.fish\",\n            \"Activate\",\n            \"Activate.bat\",\n            \"Activate.ps1\",\n        ),\n    )\n    def test_ignored_virtualenvs(self, pytester: Pytester, fname: str) -> None:\n        bindir = \"Scripts\" if sys.platform.startswith(\"win\") else \"bin\"\n        ensure_file(pytester.path / \"virtual\" / bindir / fname)\n        testfile = ensure_file(pytester.path / \"virtual\" / \"test_invenv.py\")\n        testfile.write_text(\"def test_hello(): pass\", encoding=\"utf-8\")\n\n        # by default, ignore tests inside a virtualenv\n        result = pytester.runpytest()\n        result.stdout.no_fnmatch_line(\"*test_invenv*\")\n        # allow test collection if user insists\n        result = pytester.runpytest(\"--collect-in-virtualenv\")\n        assert \"test_invenv\" in result.stdout.str()\n        # allow test collection if user directly passes in the directory\n        result = pytester.runpytest(\"virtual\")\n        assert \"test_invenv\" in result.stdout.str()\n\n    @pytest.mark.parametrize(\n        \"fname\",\n        (\n            \"activate\",\n            \"activate.csh\",\n            \"activate.fish\",\n            \"Activate\",\n            \"Activate.bat\",\n            \"Activate.ps1\",\n        ),\n    )\n    def test_ignored_virtualenvs_norecursedirs_precedence(\n        self, pytester: Pytester, fname: str\n    ) -> None:\n        bindir = \"Scripts\" if sys.platform.startswith(\"win\") else \"bin\"\n        # norecursedirs takes priority\n        ensure_file(pytester.path / \".virtual\" / bindir / fname)\n        testfile = ensure_file(pytester.path / \".virtual\" / \"test_invenv.py\")\n        testfile.write_text(\"def test_hello(): pass\", encoding=\"utf-8\")\n        result = pytester.runpytest(\"--collect-in-virtualenv\")\n        result.stdout.no_fnmatch_line(\"*test_invenv*\")\n        # ...unless the virtualenv is explicitly given on the CLI\n        result = pytester.runpytest(\"--collect-in-virtualenv\", \".virtual\")\n        assert \"test_invenv\" in result.stdout.str()\n\n    @pytest.mark.parametrize(\n        \"fname\",\n        (\n            \"activate\",\n            \"activate.csh\",\n            \"activate.fish\",\n            \"Activate\",\n            \"Activate.bat\",\n            \"Activate.ps1\",\n        ),\n    )\n    def test__in_venv(self, pytester: Pytester, fname: str) -> None:\n        \"\"\"Directly test the virtual env detection function\"\"\"\n        bindir = \"Scripts\" if sys.platform.startswith(\"win\") else \"bin\"\n        # no bin/activate, not a virtualenv\n        base_path = pytester.mkdir(\"venv\")\n        assert _in_venv(base_path) is False\n        # with bin/activate, totally a virtualenv\n        bin_path = base_path.joinpath(bindir)\n        bin_path.mkdir()\n        bin_path.joinpath(fname).touch()\n        assert _in_venv(base_path) is True\n\n    def test_custom_norecursedirs(self, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            norecursedirs = mydir xyz*\n        \"\"\"\n        )\n        tmp_path = pytester.path\n        ensure_file(tmp_path / \"mydir\" / \"test_hello.py\").write_text(\n            \"def test_1(): pass\", encoding=\"utf-8\"\n        )\n        ensure_file(tmp_path / \"xyz123\" / \"test_2.py\").write_text(\n            \"def test_2(): 0/0\", encoding=\"utf-8\"\n        )\n        ensure_file(tmp_path / \"xy\" / \"test_ok.py\").write_text(\n            \"def test_3(): pass\", encoding=\"utf-8\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(passed=1)\n        rec = pytester.inline_run(\"xyz123/test_2.py\")\n        rec.assertoutcome(failed=1)\n\n    def test_testpaths_ini(self, pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            testpaths = */tests\n        \"\"\"\n        )\n        tmp_path = pytester.path\n        ensure_file(tmp_path / \"a\" / \"test_1.py\").write_text(\n            \"def test_a(): pass\", encoding=\"utf-8\"\n        )\n        ensure_file(tmp_path / \"b\" / \"tests\" / \"test_2.py\").write_text(\n            \"def test_b(): pass\", encoding=\"utf-8\"\n        )\n        ensure_file(tmp_path / \"c\" / \"tests\" / \"test_3.py\").write_text(\n            \"def test_c(): pass\", encoding=\"utf-8\"\n        )\n\n        # executing from rootdir only tests from `testpaths` directories\n        # are collected\n        items, reprec = pytester.inline_genitems(\"-v\")\n        assert [x.name for x in items] == [\"test_b\", \"test_c\"]\n\n        # check that explicitly passing directories in the command-line\n        # collects the tests\n        for dirname in (\"a\", \"b\", \"c\"):\n            items, reprec = pytester.inline_genitems(tmp_path.joinpath(dirname))\n            assert [x.name for x in items] == [f\"test_{dirname}\"]\n\n        # changing cwd to each subdirectory and running pytest without\n        # arguments collects the tests in that directory normally\n        for dirname in (\"a\", \"b\", \"c\"):\n            monkeypatch.chdir(pytester.path.joinpath(dirname))\n            items, reprec = pytester.inline_genitems()\n            assert [x.name for x in items] == [f\"test_{dirname}\"]\n\n    def test_missing_permissions_on_unselected_directory_doesnt_crash(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Regression test for #12120.\"\"\"\n        test = pytester.makepyfile(test=\"def test(): pass\")\n        bad = pytester.mkdir(\"bad\")\n        try:\n            bad.chmod(0)\n\n            result = pytester.runpytest(test)\n        finally:\n            bad.chmod(750)\n            bad.rmdir()\n\n        assert result.ret == ExitCode.OK\n        result.assert_outcomes(passed=1)\n\n\nclass TestCollectPluginHookRelay:\n    def test_pytest_collect_file(self, pytester: Pytester) -> None:\n        wascalled = []\n\n        class Plugin:\n            def pytest_collect_file(self, file_path: Path) -> None:\n                if not file_path.name.startswith(\".\"):\n                    # Ignore hidden files, e.g. .testmondata.\n                    wascalled.append(file_path)\n\n        pytester.makefile(\".abc\", \"xyz\")\n        pytest.main(pytester.path, plugins=[Plugin()])\n        assert len(wascalled) == 1\n        assert wascalled[0].suffix == \".abc\"\n\n\nclass TestPrunetraceback:\n    def test_custom_repr_failure(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import not_exists\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_collect_file(file_path, parent):\n                return MyFile.from_parent(path=file_path, parent=parent)\n            class MyError(Exception):\n                pass\n            class MyFile(pytest.File):\n                def collect(self):\n                    raise MyError()\n                def repr_failure(self, excinfo):\n                    if isinstance(excinfo.value, MyError):\n                        return \"hello world\"\n                    return pytest.File.repr_failure(self, excinfo)\n        \"\"\"\n        )\n\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"*ERROR collecting*\", \"*hello world*\"])\n\n    @pytest.mark.xfail(reason=\"other mechanism for adding to reporting needed\")\n    def test_collect_report_postprocessing(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import not_exists\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.hookimpl(wrapper=True)\n            def pytest_make_collect_report():\n                rep = yield\n                rep.headerlines += [\"header1\"]\n                return rep\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"*ERROR collecting*\", \"*header1*\"])\n\n    def test_collection_error_traceback_is_clean(self, pytester: Pytester) -> None:\n        \"\"\"When a collection error occurs, the report traceback doesn't contain\n        internal pytest stack entries.\n\n        Issue #11710.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            raise Exception(\"LOUSY\")\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR collecting*\",\n                \"test_*.py:1: in <module>\",\n                '    raise Exception(\"LOUSY\")',\n                \"E   Exception: LOUSY\",\n                \"*= short test summary info =*\",\n            ],\n            consecutive=True,\n        )\n\n\nclass TestCustomConftests:\n    def test_ignore_collect_path(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_ignore_collect(collection_path, config):\n                return collection_path.name.startswith(\"x\") or collection_path.name == \"test_one.py\"\n        \"\"\"\n        )\n        sub = pytester.mkdir(\"xy123\")\n        ensure_file(sub / \"test_hello.py\").write_text(\"syntax error\", encoding=\"utf-8\")\n        sub.joinpath(\"conftest.py\").write_text(\"syntax error\", encoding=\"utf-8\")\n        pytester.makepyfile(\"def test_hello(): pass\")\n        pytester.makepyfile(test_one=\"syntax error\")\n        result = pytester.runpytest(\"--fulltrace\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_ignore_collect_not_called_on_argument(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_ignore_collect(collection_path, config):\n                return True\n        \"\"\"\n        )\n        p = pytester.makepyfile(\"def test_hello(): pass\")\n        result = pytester.runpytest(p)\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stdout.fnmatch_lines([\"*collected 0 items*\"])\n\n    def test_collectignore_exclude_on_option(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            from pathlib import Path\n\n            class MyPathLike:\n                def __init__(self, path):\n                    self.path = path\n                def __fspath__(self):\n                    return \"path\"\n\n            collect_ignore = [MyPathLike('hello'), 'test_world.py', Path('bye')]\n\n            def pytest_addoption(parser):\n                parser.addoption(\"--XX\", action=\"store_true\", default=False)\n\n            def pytest_configure(config):\n                if config.getvalue(\"XX\"):\n                    collect_ignore[:] = []\n        \"\"\"\n        )\n        pytester.mkdir(\"hello\")\n        pytester.makepyfile(test_world=\"def test_hello(): pass\")\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stdout.no_fnmatch_line(\"*passed*\")\n        result = pytester.runpytest(\"--XX\")\n        assert result.ret == 0\n        assert \"passed\" in result.stdout.str()\n\n    def test_collectignoreglob_exclude_on_option(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            collect_ignore_glob = ['*w*l[dt]*']\n            def pytest_addoption(parser):\n                parser.addoption(\"--XX\", action=\"store_true\", default=False)\n            def pytest_configure(config):\n                if config.getvalue(\"XX\"):\n                    collect_ignore_glob[:] = []\n        \"\"\"\n        )\n        pytester.makepyfile(test_world=\"def test_hello(): pass\")\n        pytester.makepyfile(test_welt=\"def test_hallo(): pass\")\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stdout.fnmatch_lines([\"*collected 0 items*\"])\n        result = pytester.runpytest(\"--XX\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    def test_pytest_fs_collect_hooks_are_seen(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            class MyModule(pytest.Module):\n                pass\n            def pytest_collect_file(file_path, parent):\n                if file_path.suffix == \".py\":\n                    return MyModule.from_parent(path=file_path, parent=parent)\n        \"\"\"\n        )\n        pytester.mkdir(\"sub\")\n        pytester.makepyfile(\"def test_x(): pass\")\n        result = pytester.runpytest(\"--co\")\n        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n\n    def test_pytest_collect_file_from_sister_dir(self, pytester: Pytester) -> None:\n        sub1 = pytester.mkpydir(\"sub1\")\n        sub2 = pytester.mkpydir(\"sub2\")\n        conf1 = pytester.makeconftest(\n            \"\"\"\n            import pytest\n            class MyModule1(pytest.Module):\n                pass\n            def pytest_collect_file(file_path, parent):\n                if file_path.suffix == \".py\":\n                    return MyModule1.from_parent(path=file_path, parent=parent)\n        \"\"\"\n        )\n        conf1.replace(sub1.joinpath(conf1.name))\n        conf2 = pytester.makeconftest(\n            \"\"\"\n            import pytest\n            class MyModule2(pytest.Module):\n                pass\n            def pytest_collect_file(file_path, parent):\n                if file_path.suffix == \".py\":\n                    return MyModule2.from_parent(path=file_path, parent=parent)\n        \"\"\"\n        )\n        conf2.replace(sub2.joinpath(conf2.name))\n        p = pytester.makepyfile(\"def test_x(): pass\")\n        shutil.copy(p, sub1.joinpath(p.name))\n        shutil.copy(p, sub2.joinpath(p.name))\n        result = pytester.runpytest(\"--co\")\n        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n\n\nclass TestSession:\n    def test_collect_topdir(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\"def test_func(): pass\")\n        id = \"::\".join([p.name, \"test_func\"])\n        # XXX migrate to collectonly? (see below)\n        config = pytester.parseconfig(id)\n        topdir = pytester.path\n        rcol = Session.from_config(config)\n        assert topdir == rcol.path\n        # rootid = rcol.nodeid\n        # root2 = rcol.perform_collect([rcol.nodeid], genitems=False)[0]\n        # assert root2 == rcol, rootid\n        colitems = rcol.perform_collect([rcol.nodeid], genitems=False)\n        assert len(colitems) == 1\n        assert colitems[0].path == topdir\n\n    def get_reported_items(self, hookrec: HookRecorder) -> list[Item]:\n        \"\"\"Return pytest.Item instances reported by the pytest_collectreport hook\"\"\"\n        calls = hookrec.getcalls(\"pytest_collectreport\")\n        return [\n            x\n            for call in calls\n            for x in call.report.result\n            if isinstance(x, pytest.Item)\n        ]\n\n    def test_collect_protocol_single_function(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\"def test_func(): pass\")\n        id = \"::\".join([p.name, \"test_func\"])\n        items, hookrec = pytester.inline_genitems(id)\n        (item,) = items\n        assert item.name == \"test_func\"\n        newid = item.nodeid\n        assert newid == id\n        pprint.pprint(hookrec.calls)\n        topdir = pytester.path  # noqa: F841\n        hookrec.assert_contains(\n            [\n                (\"pytest_collectstart\", \"collector.path == topdir\"),\n                (\"pytest_make_collect_report\", \"collector.path == topdir\"),\n                (\"pytest_collectstart\", \"collector.path == p\"),\n                (\"pytest_make_collect_report\", \"collector.path == p\"),\n                (\"pytest_pycollect_makeitem\", \"name == 'test_func'\"),\n                (\"pytest_collectreport\", \"report.result[0].name == 'test_func'\"),\n            ]\n        )\n        # ensure we are reporting the collection of the single test item (#2464)\n        assert [x.name for x in self.get_reported_items(hookrec)] == [\"test_func\"]\n\n    def test_collect_protocol_method(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def test_method(self):\n                    pass\n        \"\"\"\n        )\n        normid = p.name + \"::TestClass::test_method\"\n        for id in [p.name, p.name + \"::TestClass\", normid]:\n            items, hookrec = pytester.inline_genitems(id)\n            assert len(items) == 1\n            assert items[0].name == \"test_method\"\n            newid = items[0].nodeid\n            assert newid == normid\n            # ensure we are reporting the collection of the single test item (#2464)\n            assert [x.name for x in self.get_reported_items(hookrec)] == [\"test_method\"]\n\n    def test_collect_custom_nodes_multi_id(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\"def test_func(): pass\")\n        pytester.makeconftest(\n            f\"\"\"\n            import pytest\n            class SpecialItem(pytest.Item):\n                def runtest(self):\n                    return # ok\n            class SpecialFile(pytest.File):\n                def collect(self):\n                    return [SpecialItem.from_parent(name=\"check\", parent=self)]\n            def pytest_collect_file(file_path, parent):\n                if file_path.name == {p.name!r}:\n                    return SpecialFile.from_parent(path=file_path, parent=parent)\n        \"\"\"\n        )\n        id = p.name\n\n        items, hookrec = pytester.inline_genitems(id)\n        pprint.pprint(hookrec.calls)\n        assert len(items) == 2\n        hookrec.assert_contains(\n            [\n                (\"pytest_collectstart\", \"collector.path == collector.session.path\"),\n                (\n                    \"pytest_collectstart\",\n                    \"collector.__class__.__name__ == 'SpecialFile'\",\n                ),\n                (\"pytest_collectstart\", \"collector.__class__.__name__ == 'Module'\"),\n                (\"pytest_pycollect_makeitem\", \"name == 'test_func'\"),\n                (\"pytest_collectreport\", \"report.nodeid.startswith(p.name)\"),\n            ]\n        )\n        assert len(self.get_reported_items(hookrec)) == 2\n\n    def test_collect_subdir_event_ordering(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\"def test_func(): pass\")\n        aaa = pytester.mkpydir(\"aaa\")\n        test_aaa = aaa.joinpath(\"test_aaa.py\")\n        p.replace(test_aaa)\n\n        items, hookrec = pytester.inline_genitems()\n        assert len(items) == 1\n        pprint.pprint(hookrec.calls)\n        hookrec.assert_contains(\n            [\n                (\"pytest_collectstart\", \"collector.path == test_aaa\"),\n                (\"pytest_pycollect_makeitem\", \"name == 'test_func'\"),\n                (\"pytest_collectreport\", \"report.nodeid.startswith('aaa/test_aaa.py')\"),\n            ]\n        )\n\n    def test_collect_two_commandline_args(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\"def test_func(): pass\")\n        aaa = pytester.mkpydir(\"aaa\")\n        bbb = pytester.mkpydir(\"bbb\")\n        test_aaa = aaa.joinpath(\"test_aaa.py\")\n        shutil.copy(p, test_aaa)\n        test_bbb = bbb.joinpath(\"test_bbb.py\")\n        p.replace(test_bbb)\n\n        id = \".\"\n\n        items, hookrec = pytester.inline_genitems(id)\n        assert len(items) == 2\n        pprint.pprint(hookrec.calls)\n        hookrec.assert_contains(\n            [\n                (\"pytest_collectstart\", \"collector.path == test_aaa\"),\n                (\"pytest_pycollect_makeitem\", \"name == 'test_func'\"),\n                (\"pytest_collectreport\", \"report.nodeid == 'aaa/test_aaa.py'\"),\n                (\"pytest_collectstart\", \"collector.path == test_bbb\"),\n                (\"pytest_pycollect_makeitem\", \"name == 'test_func'\"),\n                (\"pytest_collectreport\", \"report.nodeid == 'bbb/test_bbb.py'\"),\n            ]\n        )\n\n    def test_serialization_byid(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\"def test_func(): pass\")\n        items, hookrec = pytester.inline_genitems()\n        assert len(items) == 1\n        (item,) = items\n        items2, hookrec = pytester.inline_genitems(item.nodeid)\n        (item2,) = items2\n        assert item2.name == item.name\n        assert item2.path == item.path\n\n    def test_find_byid_without_instance_parents(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def test_method(self):\n                    pass\n        \"\"\"\n        )\n        arg = p.name + \"::TestClass::test_method\"\n        items, hookrec = pytester.inline_genitems(arg)\n        assert len(items) == 1\n        (item,) = items\n        assert item.nodeid.endswith(\"TestClass::test_method\")\n        # ensure we are reporting the collection of the single test item (#2464)\n        assert [x.name for x in self.get_reported_items(hookrec)] == [\"test_method\"]\n\n    def test_collect_parametrized_order(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize('i', [0, 1, 2])\n            def test_param(i): ...\n            \"\"\"\n        )\n        items, hookrec = pytester.inline_genitems(f\"{p}::test_param\")\n        assert len(items) == 3\n        assert [item.nodeid for item in items] == [\n            \"test_collect_parametrized_order.py::test_param[0]\",\n            \"test_collect_parametrized_order.py::test_param[1]\",\n            \"test_collect_parametrized_order.py::test_param[2]\",\n        ]\n\n\nclass Test_getinitialnodes:\n    def test_global_file(self, pytester: Pytester) -> None:\n        tmp_path = pytester.path\n        x = ensure_file(tmp_path / \"x.py\")\n        config = pytester.parseconfigure(x)\n        col = pytester.getnode(config, x)\n        assert isinstance(col, pytest.Module)\n        assert col.name == \"x.py\"\n        assert col.parent is not None\n        assert col.parent.parent is not None\n        assert col.parent.parent.parent is None\n        for parent in col.listchain():\n            assert parent.config is config\n\n    def test_pkgfile(self, pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n        \"\"\"Verify nesting when a module is within a package.\n        The parent chain should match: Module<x.py> -> Package<subdir> -> Session.\n            Session's parent should always be None.\n        \"\"\"\n        tmp_path = pytester.path\n        subdir = tmp_path.joinpath(\"subdir\")\n        x = ensure_file(subdir / \"x.py\")\n        ensure_file(subdir / \"__init__.py\")\n        with monkeypatch.context() as mp:\n            mp.chdir(subdir)\n            config = pytester.parseconfigure(x)\n        col = pytester.getnode(config, x)\n        assert col is not None\n        assert col.name == \"x.py\"\n        assert isinstance(col, pytest.Module)\n        assert isinstance(col.parent, pytest.Package)\n        assert isinstance(col.parent.parent, pytest.Session)\n        # session is batman (has no parents)\n        assert col.parent.parent.parent is None\n        for parent in col.listchain():\n            assert parent.config is config\n\n\nclass Test_genitems:\n    def test_check_collect_hashes(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                pass\n\n            def test_2():\n                pass\n        \"\"\"\n        )\n        shutil.copy(p, p.parent / (p.stem + \"2\" + \".py\"))\n        items, reprec = pytester.inline_genitems(p.parent)\n        assert len(items) == 4\n        for numi, i in enumerate(items):\n            for numj, j in enumerate(items):\n                if numj != numi:\n                    assert hash(i) != hash(j)\n                    assert i != j\n\n    def test_example_items1(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def testone():\n                pass\n\n            class TestX(object):\n                def testmethod_one(self):\n                    pass\n\n            class TestY(TestX):\n                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n                def testmethod_two(self, arg0):\n                    pass\n        \"\"\"\n        )\n        items, reprec = pytester.inline_genitems(p)\n        assert len(items) == 4\n        assert items[0].name == \"testone\"\n        assert items[1].name == \"testmethod_one\"\n        assert items[2].name == \"testmethod_one\"\n        assert items[3].name == \"testmethod_two[.[]\"\n\n        # let's also test getmodpath here\n        assert items[0].getmodpath() == \"testone\"  # type: ignore[attr-defined]\n        assert items[1].getmodpath() == \"TestX.testmethod_one\"  # type: ignore[attr-defined]\n        assert items[2].getmodpath() == \"TestY.testmethod_one\"  # type: ignore[attr-defined]\n        # PR #6202: Fix incorrect result of getmodpath method. (Resolves issue #6189)\n        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"  # type: ignore[attr-defined]\n\n        s = items[0].getmodpath(stopatmodule=False)  # type: ignore[attr-defined]\n        assert s.endswith(\"test_example_items1.testone\")\n        print(s)\n\n    def test_classmethod_is_discovered(self, pytester: Pytester) -> None:\n        \"\"\"Test that classmethods are discovered\"\"\"\n        p = pytester.makepyfile(\n            \"\"\"\n            class TestCase:\n                @classmethod\n                def test_classmethod(cls) -> None:\n                    pass\n            \"\"\"\n        )\n        items, reprec = pytester.inline_genitems(p)\n        ids = [x.getmodpath() for x in items]  # type: ignore[attr-defined]\n        assert ids == [\"TestCase.test_classmethod\"]\n\n    def test_class_and_functions_discovery_using_glob(self, pytester: Pytester) -> None:\n        \"\"\"Test that Python_classes and Python_functions config options work\n        as prefixes and glob-like patterns (#600).\"\"\"\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            python_classes = *Suite Test\n            python_functions = *_test test\n        \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            class MyTestSuite(object):\n                def x_test(self):\n                    pass\n\n            class TestCase(object):\n                def test_y(self):\n                    pass\n        \"\"\"\n        )\n        items, reprec = pytester.inline_genitems(p)\n        ids = [x.getmodpath() for x in items]  # type: ignore[attr-defined]\n        assert ids == [\"MyTestSuite.x_test\", \"TestCase.test_y\"]\n\n\ndef test_matchnodes_two_collections_same_file(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        def pytest_configure(config):\n            config.pluginmanager.register(Plugin2())\n\n        class Plugin2(object):\n            def pytest_collect_file(self, file_path, parent):\n                if file_path.suffix == \".abc\":\n                    return MyFile2.from_parent(path=file_path, parent=parent)\n\n        def pytest_collect_file(file_path, parent):\n            if file_path.suffix == \".abc\":\n                return MyFile1.from_parent(path=file_path, parent=parent)\n\n        class MyFile1(pytest.File):\n            def collect(self):\n                yield Item1.from_parent(name=\"item1\", parent=self)\n\n        class MyFile2(pytest.File):\n            def collect(self):\n                yield Item2.from_parent(name=\"item2\", parent=self)\n\n        class Item1(pytest.Item):\n            def runtest(self):\n                pass\n\n        class Item2(pytest.Item):\n            def runtest(self):\n                pass\n    \"\"\"\n    )\n    p = pytester.makefile(\".abc\", \"\")\n    result = pytester.runpytest()\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*2 passed*\"])\n    res = pytester.runpytest(f\"{p.name}::item2\")\n    res.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\nclass TestNodeKeywords:\n    def test_no_under(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            def test_pass(): pass\n            def test_fail(): assert 0\n        \"\"\"\n        )\n        values = list(modcol.keywords)\n        assert modcol.name in values\n        for x in values:\n            assert not x.startswith(\"_\")\n        assert modcol.name in repr(modcol.keywords)\n\n    def test_issue345(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_should_not_be_selected():\n                assert False, 'I should not have been selected to run'\n\n            def test___repr__():\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-k repr\")\n        reprec.assertoutcome(passed=1, failed=0)\n\n    def test_keyword_matching_is_case_insensitive_by_default(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Check that selection via -k EXPRESSION is case-insensitive.\n\n        Since markers are also added to the node keywords, they too can\n        be matched without having to think about case sensitivity.\n\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def test_sPeCiFiCToPiC_1():\n                assert True\n\n            class TestSpecificTopic_2:\n                def test(self):\n                    assert True\n\n            @pytest.mark.sPeCiFiCToPic_3\n            def test():\n                assert True\n\n            @pytest.mark.sPeCiFiCToPic_4\n            class Test:\n                def test(self):\n                    assert True\n\n            def test_failing_5():\n                assert False, \"This should not match\"\n\n        \"\"\"\n        )\n        num_matching_tests = 4\n        for expression in (\"specifictopic\", \"SPECIFICTOPIC\", \"SpecificTopic\"):\n            reprec = pytester.inline_run(\"-k \" + expression)\n            reprec.assertoutcome(passed=num_matching_tests, failed=0)\n\n    def test_duplicates_handled_correctly(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            pytestmark = pytest.mark.kw\n            class TestClass:\n                pytestmark = pytest.mark.kw\n                def test_method(self): pass\n                test_method.kw = 'method'\n        \"\"\",\n            \"test_method\",\n        )\n        assert item.parent is not None and item.parent.parent is not None\n        item.parent.parent.keywords[\"kw\"] = \"class\"\n\n        assert item.keywords[\"kw\"] == \"method\"\n        assert len(item.keywords) == len(set(item.keywords))\n\n    def test_unpacked_marks_added_to_keywords(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            pytestmark = pytest.mark.foo\n            class TestClass:\n                pytestmark = pytest.mark.bar\n                def test_method(self): pass\n                test_method.pytestmark = pytest.mark.baz\n        \"\"\",\n            \"test_method\",\n        )\n        assert isinstance(item, pytest.Function)\n        cls = item.getparent(pytest.Class)\n        assert cls is not None\n        mod = item.getparent(pytest.Module)\n        assert mod is not None\n\n        assert item.keywords[\"foo\"] == pytest.mark.foo.mark\n        assert item.keywords[\"bar\"] == pytest.mark.bar.mark\n        assert item.keywords[\"baz\"] == pytest.mark.baz.mark\n\n        assert cls.keywords[\"foo\"] == pytest.mark.foo.mark\n        assert cls.keywords[\"bar\"] == pytest.mark.bar.mark\n        assert \"baz\" not in cls.keywords\n\n        assert mod.keywords[\"foo\"] == pytest.mark.foo.mark\n        assert \"bar\" not in mod.keywords\n        assert \"baz\" not in mod.keywords\n\n\nclass TestCollectDirectoryHook:\n    def test_custom_directory_example(self, pytester: Pytester) -> None:\n        \"\"\"Verify the example from the customdirectory.rst doc.\"\"\"\n        pytester.copy_example(\"customdirectory\")\n\n        reprec = pytester.inline_run()\n\n        reprec.assertoutcome(passed=2, failed=0)\n        calls = reprec.getcalls(\"pytest_collect_directory\")\n        assert len(calls) == 2\n        assert calls[0].path == pytester.path\n        assert isinstance(calls[0].parent, pytest.Session)\n        assert calls[1].path == pytester.path / \"tests\"\n        assert isinstance(calls[1].parent, pytest.Dir)\n\n    def test_directory_ignored_if_none(self, pytester: Pytester) -> None:\n        \"\"\"If the (entire) hook returns None, it's OK, the directory is ignored.\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.hookimpl(wrapper=True)\n            def pytest_collect_directory():\n                yield\n                return None\n            \"\"\",\n        )\n        pytester.makepyfile(\n            **{\n                \"tests/test_it.py\": \"\"\"\n                    import pytest\n\n                    def test_it(): pass\n                \"\"\",\n            },\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=0, failed=0)\n\n\nCOLLECTION_ERROR_PY_FILES = dict(\n    test_01_failure=\"\"\"\n        def test_1():\n            assert False\n        \"\"\",\n    test_02_import_error=\"\"\"\n        import asdfasdfasdf\n        def test_2():\n            assert True\n        \"\"\",\n    test_03_import_error=\"\"\"\n        import asdfasdfasdf\n        def test_3():\n            assert True\n    \"\"\",\n    test_04_success=\"\"\"\n        def test_4():\n            assert True\n    \"\"\",\n)\n\n\ndef test_exit_on_collection_error(pytester: Pytester) -> None:\n    \"\"\"Verify that all collection errors are collected and no tests executed\"\"\"\n    pytester.makepyfile(**COLLECTION_ERROR_PY_FILES)\n\n    res = pytester.runpytest()\n    assert res.ret == 2\n\n    res.stdout.fnmatch_lines(\n        [\n            \"collected 2 items / 2 errors\",\n            \"*ERROR collecting test_02_import_error.py*\",\n            \"*No module named *asdfa*\",\n            \"*ERROR collecting test_03_import_error.py*\",\n            \"*No module named *asdfa*\",\n        ]\n    )\n\n\ndef test_exit_on_collection_with_maxfail_smaller_than_n_errors(\n    pytester: Pytester,\n) -> None:\n    \"\"\"\n    Verify collection is aborted once maxfail errors are encountered ignoring\n    further modules which would cause more collection errors.\n    \"\"\"\n    pytester.makepyfile(**COLLECTION_ERROR_PY_FILES)\n\n    res = pytester.runpytest(\"--maxfail=1\")\n    assert res.ret == 1\n    res.stdout.fnmatch_lines(\n        [\n            \"collected 1 item / 1 error\",\n            \"*ERROR collecting test_02_import_error.py*\",\n            \"*No module named *asdfa*\",\n            \"*! stopping after 1 failures !*\",\n            \"*= 1 error in *\",\n        ]\n    )\n    res.stdout.no_fnmatch_line(\"*test_03*\")\n\n\ndef test_exit_on_collection_with_maxfail_bigger_than_n_errors(\n    pytester: Pytester,\n) -> None:\n    \"\"\"\n    Verify the test run aborts due to collection errors even if maxfail count of\n    errors was not reached.\n    \"\"\"\n    pytester.makepyfile(**COLLECTION_ERROR_PY_FILES)\n\n    res = pytester.runpytest(\"--maxfail=4\")\n    assert res.ret == 2\n    res.stdout.fnmatch_lines(\n        [\n            \"collected 2 items / 2 errors\",\n            \"*ERROR collecting test_02_import_error.py*\",\n            \"*No module named *asdfa*\",\n            \"*ERROR collecting test_03_import_error.py*\",\n            \"*No module named *asdfa*\",\n            \"*! Interrupted: 2 errors during collection !*\",\n            \"*= 2 errors in *\",\n        ]\n    )\n\n\ndef test_continue_on_collection_errors(pytester: Pytester) -> None:\n    \"\"\"\n    Verify tests are executed even when collection errors occur when the\n    --continue-on-collection-errors flag is set\n    \"\"\"\n    pytester.makepyfile(**COLLECTION_ERROR_PY_FILES)\n\n    res = pytester.runpytest(\"--continue-on-collection-errors\")\n    assert res.ret == 1\n\n    res.stdout.fnmatch_lines(\n        [\"collected 2 items / 2 errors\", \"*1 failed, 1 passed, 2 errors*\"]\n    )\n\n\ndef test_continue_on_collection_errors_maxfail(pytester: Pytester) -> None:\n    \"\"\"\n    Verify tests are executed even when collection errors occur and that maxfail\n    is honoured (including the collection error count).\n    4 tests: 2 collection errors + 1 failure + 1 success\n    test_4 is never executed because the test run is with --maxfail=3 which\n    means it is interrupted after the 2 collection errors + 1 failure.\n    \"\"\"\n    pytester.makepyfile(**COLLECTION_ERROR_PY_FILES)\n\n    res = pytester.runpytest(\"--continue-on-collection-errors\", \"--maxfail=3\")\n    assert res.ret == 1\n\n    res.stdout.fnmatch_lines([\"collected 2 items / 2 errors\", \"*1 failed, 2 errors*\"])\n\n\ndef test_fixture_scope_sibling_conftests(pytester: Pytester) -> None:\n    \"\"\"Regression test case for https://github.com/pytest-dev/pytest/issues/2836\"\"\"\n    foo_path = pytester.mkdir(\"foo\")\n    foo_path.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            @pytest.fixture\n            def fix():\n                return 1\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    foo_path.joinpath(\"test_foo.py\").write_text(\n        \"def test_foo(fix): assert fix == 1\", encoding=\"utf-8\"\n    )\n\n    # Tests in `food/` should not see the conftest fixture from `foo/`\n    food_path = pytester.mkpydir(\"food\")\n    food_path.joinpath(\"test_food.py\").write_text(\n        \"def test_food(fix): assert fix == 1\", encoding=\"utf-8\"\n    )\n\n    res = pytester.runpytest()\n    assert res.ret == 1\n\n    res.stdout.fnmatch_lines(\n        [\n            \"*ERROR at setup of test_food*\",\n            \"E*fixture 'fix' not found\",\n            \"*1 passed, 1 error*\",\n        ]\n    )\n\n\ndef test_collect_init_tests(pytester: Pytester) -> None:\n    \"\"\"Check that we collect files from __init__.py files when they patch the 'python_files' (#3773)\"\"\"\n    p = pytester.copy_example(\"collect/collect_init_tests\")\n    result = pytester.runpytest(p, \"--collect-only\")\n    result.stdout.fnmatch_lines(\n        [\n            \"collected 2 items\",\n            \"<Dir *>\",\n            \"  <Package tests>\",\n            \"    <Module __init__.py>\",\n            \"      <Function test_init>\",\n            \"    <Module test_foo.py>\",\n            \"      <Function test_foo>\",\n        ]\n    )\n    result = pytester.runpytest(\"./tests\", \"--collect-only\")\n    result.stdout.fnmatch_lines(\n        [\n            \"collected 2 items\",\n            \"<Dir *>\",\n            \"  <Package tests>\",\n            \"    <Module __init__.py>\",\n            \"      <Function test_init>\",\n            \"    <Module test_foo.py>\",\n            \"      <Function test_foo>\",\n        ]\n    )\n    # Ignores duplicates with \".\" and pkginit (#4310).\n    result = pytester.runpytest(\"./tests\", \".\", \"--collect-only\")\n    result.stdout.fnmatch_lines(\n        [\n            \"collected 2 items\",\n            \"<Dir *>\",\n            \"  <Package tests>\",\n            \"    <Module __init__.py>\",\n            \"      <Function test_init>\",\n            \"    <Module test_foo.py>\",\n            \"      <Function test_foo>\",\n        ]\n    )\n    # Same as before, but different order.\n    result = pytester.runpytest(\".\", \"tests\", \"--collect-only\")\n    result.stdout.fnmatch_lines(\n        [\n            \"collected 2 items\",\n            \"<Dir *>\",\n            \"  <Package tests>\",\n            \"    <Module __init__.py>\",\n            \"      <Function test_init>\",\n            \"    <Module test_foo.py>\",\n            \"      <Function test_foo>\",\n        ]\n    )\n    result = pytester.runpytest(\"./tests/test_foo.py\", \"--collect-only\")\n    result.stdout.fnmatch_lines(\n        [\n            \"<Dir *>\",\n            \"  <Package tests>\",\n            \"    <Module test_foo.py>\",\n            \"      <Function test_foo>\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*test_init*\")\n    result = pytester.runpytest(\"./tests/__init__.py\", \"--collect-only\")\n    result.stdout.fnmatch_lines(\n        [\n            \"<Dir *>\",\n            \"  <Package tests>\",\n            \"    <Module __init__.py>\",\n            \"      <Function test_init>\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*test_foo*\")\n\n\ndef test_collect_invalid_signature_message(pytester: Pytester) -> None:\n    \"\"\"Check that we issue a proper message when we can't determine the signature of a test\n    function (#4026).\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        class TestCase:\n            @pytest.fixture\n            def fix():\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\"Could not determine arguments of *.fix *: invalid method signature\"]\n    )\n\n\ndef test_collect_handles_raising_on_dunder_class(pytester: Pytester) -> None:\n    \"\"\"Handle proxy classes like Django's LazySettings that might raise on\n    ``isinstance`` (#4266).\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        class ImproperlyConfigured(Exception):\n            pass\n\n        class RaisesOnGetAttr(object):\n            def raises(self):\n                raise ImproperlyConfigured\n\n            __class__ = property(raises)\n\n        raises = RaisesOnGetAttr()\n\n\n        def test_1():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*1 passed in*\"])\n    assert result.ret == 0\n\n\ndef test_collect_with_chdir_during_import(pytester: Pytester) -> None:\n    subdir = pytester.mkdir(\"sub\")\n    pytester.path.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            f\"\"\"\n            import os\n            os.chdir({str(subdir)!r})\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    pytester.makepyfile(\n        f\"\"\"\n        def test_1():\n            import os\n            assert os.getcwd() == {str(subdir)!r}\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*1 passed in*\"])\n    assert result.ret == 0\n\n    # Handles relative testpaths.\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        testpaths = .\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--collect-only\")\n    result.stdout.fnmatch_lines([\"collected 1 item\"])\n\n\ndef test_collect_pyargs_with_testpaths(\n    pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    testmod = pytester.mkdir(\"testmod\")\n    # NOTE: __init__.py is not collected since it does not match python_files.\n    testmod.joinpath(\"__init__.py\").write_text(\n        \"def test_func(): pass\", encoding=\"utf-8\"\n    )\n    testmod.joinpath(\"test_file.py\").write_text(\n        \"def test_func(): pass\", encoding=\"utf-8\"\n    )\n\n    root = pytester.mkdir(\"root\")\n    root.joinpath(\"pytest.ini\").write_text(\n        textwrap.dedent(\n            \"\"\"\n        [pytest]\n        addopts = --pyargs\n        testpaths = testmod\n    \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    monkeypatch.setenv(\"PYTHONPATH\", str(pytester.path), prepend=os.pathsep)\n    with monkeypatch.context() as mp:\n        mp.chdir(root)\n        result = pytester.runpytest_subprocess()\n    result.stdout.fnmatch_lines([\"*1 passed in*\"])\n\n\ndef test_initial_conftests_with_testpaths(pytester: Pytester) -> None:\n    \"\"\"The testpaths ini option should load conftests in those paths as 'initial' (#10987).\"\"\"\n    p = pytester.mkdir(\"some_path\")\n    p.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\n            def pytest_sessionstart(session):\n                raise Exception(\"pytest_sessionstart hook successfully run\")\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        testpaths = some_path\n        \"\"\"\n    )\n\n    # No command line args - falls back to testpaths.\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.INTERNAL_ERROR\n    result.stdout.fnmatch_lines(\n        \"INTERNALERROR* Exception: pytest_sessionstart hook successfully run\"\n    )\n\n    # No fallback.\n    result = pytester.runpytest(\".\")\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_large_option_breaks_initial_conftests(pytester: Pytester) -> None:\n    \"\"\"Long option values do not break initial conftests handling (#10169).\"\"\"\n    option_value = \"x\" * 1024 * 1000\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_addoption(parser):\n            parser.addoption(\"--xx\", default=None)\n        \"\"\"\n    )\n    pytester.makepyfile(\n        f\"\"\"\n        def test_foo(request):\n            assert request.config.getoption(\"xx\") == {option_value!r}\n        \"\"\"\n    )\n    result = pytester.runpytest(f\"--xx={option_value}\")\n    assert result.ret == 0\n\n\ndef test_collect_symlink_file_arg(pytester: Pytester) -> None:\n    \"\"\"Collect a direct symlink works even if it does not match python_files (#4325).\"\"\"\n    real = pytester.makepyfile(\n        real=\"\"\"\n        def test_nodeid(request):\n            assert request.node.nodeid == \"symlink.py::test_nodeid\"\n        \"\"\"\n    )\n    symlink = pytester.path.joinpath(\"symlink.py\")\n    symlink_or_skip(real, symlink)\n    result = pytester.runpytest(\"-v\", symlink)\n    result.stdout.fnmatch_lines([\"symlink.py::test_nodeid PASSED*\", \"*1 passed in*\"])\n    assert result.ret == 0\n\n\ndef test_collect_symlink_out_of_tree(pytester: Pytester) -> None:\n    \"\"\"Test collection of symlink via out-of-tree rootdir.\"\"\"\n    sub = pytester.mkdir(\"sub\")\n    real = sub.joinpath(\"test_real.py\")\n    real.write_text(\n        textwrap.dedent(\n            \"\"\"\n        def test_nodeid(request):\n            # Should not contain sub/ prefix.\n            assert request.node.nodeid == \"test_real.py::test_nodeid\"\n        \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n\n    out_of_tree = pytester.mkdir(\"out_of_tree\")\n    symlink_to_sub = out_of_tree.joinpath(\"symlink_to_sub\")\n    symlink_or_skip(sub, symlink_to_sub)\n    os.chdir(sub)\n    result = pytester.runpytest(\"-vs\", f\"--rootdir={sub}\", symlink_to_sub)\n    result.stdout.fnmatch_lines(\n        [\n            # Should not contain \"sub/\"!\n            \"test_real.py::test_nodeid PASSED\"\n        ]\n    )\n    assert result.ret == 0\n\n\ndef test_collect_symlink_dir(pytester: Pytester) -> None:\n    \"\"\"A symlinked directory is collected.\"\"\"\n    dir = pytester.mkdir(\"dir\")\n    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n    symlink_or_skip(pytester.path.joinpath(\"symlink_dir\"), dir)\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=2)\n\n\ndef test_collectignore_via_conftest(pytester: Pytester) -> None:\n    \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n    tests = pytester.mkpydir(\"tests\")\n    tests.joinpath(\"conftest.py\").write_text(\n        \"collect_ignore = ['ignore_me']\", encoding=\"utf-8\"\n    )\n\n    ignore_me = tests.joinpath(\"ignore_me\")\n    ignore_me.mkdir()\n    ignore_me.joinpath(\"__init__.py\").touch()\n    ignore_me.joinpath(\"conftest.py\").write_text(\n        \"assert 0, 'should_not_be_called'\", encoding=\"utf-8\"\n    )\n\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_collect_pkg_init_and_file_in_args(pytester: Pytester) -> None:\n    subdir = pytester.mkdir(\"sub\")\n    init = subdir.joinpath(\"__init__.py\")\n    init.write_text(\"def test_init(): pass\", encoding=\"utf-8\")\n    p = subdir.joinpath(\"test_file.py\")\n    p.write_text(\"def test_file(): pass\", encoding=\"utf-8\")\n\n    # Just the package directory, the __init__.py module is filtered out.\n    result = pytester.runpytest(\"-v\", subdir)\n    result.stdout.fnmatch_lines(\n        [\n            \"sub/test_file.py::test_file PASSED*\",\n            \"*1 passed in*\",\n        ]\n    )\n\n    # But it's included if specified directly.\n    result = pytester.runpytest(\"-v\", init, p)\n    result.stdout.fnmatch_lines(\n        [\n            \"sub/__init__.py::test_init PASSED*\",\n            \"sub/test_file.py::test_file PASSED*\",\n            \"*2 passed in*\",\n        ]\n    )\n\n    # Or if the pattern allows it.\n    result = pytester.runpytest(\"-v\", \"-o\", \"python_files=*.py\", subdir)\n    result.stdout.fnmatch_lines(\n        [\n            \"sub/__init__.py::test_init PASSED*\",\n            \"sub/test_file.py::test_file PASSED*\",\n            \"*2 passed in*\",\n        ]\n    )\n\n\ndef test_collect_pkg_init_only(pytester: Pytester) -> None:\n    subdir = pytester.mkdir(\"sub\")\n    init = subdir.joinpath(\"__init__.py\")\n    init.write_text(\"def test_init(): pass\", encoding=\"utf-8\")\n\n    result = pytester.runpytest(subdir)\n    result.stdout.fnmatch_lines([\"*no tests ran in*\"])\n\n    result = pytester.runpytest(\"-v\", init)\n    result.stdout.fnmatch_lines([\"sub/__init__.py::test_init PASSED*\", \"*1 passed in*\"])\n\n    result = pytester.runpytest(\"-v\", \"-o\", \"python_files=*.py\", subdir)\n    result.stdout.fnmatch_lines([\"sub/__init__.py::test_init PASSED*\", \"*1 passed in*\"])\n\n\n@pytest.mark.parametrize(\"use_pkg\", (True, False))\ndef test_collect_sub_with_symlinks(use_pkg: bool, pytester: Pytester) -> None:\n    \"\"\"Collection works with symlinked files and broken symlinks\"\"\"\n    sub = pytester.mkdir(\"sub\")\n    if use_pkg:\n        sub.joinpath(\"__init__.py\").touch()\n    sub.joinpath(\"test_file.py\").write_text(\"def test_file(): pass\", encoding=\"utf-8\")\n\n    # Create a broken symlink.\n    symlink_or_skip(\"test_doesnotexist.py\", sub.joinpath(\"test_broken.py\"))\n\n    # Symlink that gets collected.\n    symlink_or_skip(\"test_file.py\", sub.joinpath(\"test_symlink.py\"))\n\n    result = pytester.runpytest(\"-v\", str(sub))\n    result.stdout.fnmatch_lines(\n        [\n            \"sub/test_file.py::test_file PASSED*\",\n            \"sub/test_symlink.py::test_file PASSED*\",\n            \"*2 passed in*\",\n        ]\n    )\n\n\ndef test_collector_respects_tbstyle(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\"assert 0\")\n    result = pytester.runpytest(p1, \"--tb=native\")\n    assert result.ret == ExitCode.INTERRUPTED\n    result.stdout.fnmatch_lines(\n        [\n            \"*_ ERROR collecting test_collector_respects_tbstyle.py _*\",\n            \"Traceback (most recent call last):\",\n            '  File \"*/test_collector_respects_tbstyle.py\", line 1, in <module>',\n            \"    assert 0\",\n            \"AssertionError: assert 0\",\n            \"*! Interrupted: 1 error during collection !*\",\n            \"*= 1 error in *\",\n        ]\n    )\n\n\ndef test_does_not_eagerly_collect_packages(pytester: Pytester) -> None:\n    pytester.makepyfile(\"def test(): pass\")\n    pydir = pytester.mkpydir(\"foopkg\")\n    pydir.joinpath(\"__init__.py\").write_text(\"assert False\", encoding=\"utf-8\")\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.OK\n\n\ndef test_does_not_put_src_on_path(pytester: Pytester) -> None:\n    # `src` is not on sys.path so it should not be importable\n    ensure_file(pytester.path / \"src/nope/__init__.py\")\n    pytester.makepyfile(\n        \"import pytest\\n\"\n        \"def test():\\n\"\n        \"    with pytest.raises(ImportError):\\n\"\n        \"        import nope\\n\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.OK\n\n\ndef test_fscollector_from_parent(pytester: Pytester, request: FixtureRequest) -> None:\n    \"\"\"Ensure File.from_parent can forward custom arguments to the constructor.\n\n    Context: https://github.com/pytest-dev/pytest-cpp/pull/47\n    \"\"\"\n\n    class MyCollector(pytest.File):\n        def __init__(self, *k, x, **kw):\n            super().__init__(*k, **kw)\n            self.x = x\n\n        def collect(self):\n            raise NotImplementedError()\n\n    collector = MyCollector.from_parent(\n        parent=request.session, path=pytester.path / \"foo\", x=10\n    )\n    assert collector.x == 10\n\n\ndef test_class_from_parent(request: FixtureRequest) -> None:\n    \"\"\"Ensure Class.from_parent can forward custom arguments to the constructor.\"\"\"\n\n    class MyCollector(pytest.Class):\n        def __init__(self, name, parent, x):\n            super().__init__(name, parent)\n            self.x = x\n\n        @classmethod\n        def from_parent(cls, parent, *, name, x):\n            return super().from_parent(parent=parent, name=name, x=x)\n\n    collector = MyCollector.from_parent(parent=request.session, name=\"foo\", x=10)\n    assert collector.x == 10\n\n\nclass TestImportModeImportlib:\n    def test_collect_duplicate_names(self, pytester: Pytester) -> None:\n        \"\"\"--import-mode=importlib can import modules with same names that are not in packages.\"\"\"\n        pytester.makepyfile(\n            **{\n                \"tests_a/test_foo.py\": \"def test_foo1(): pass\",\n                \"tests_b/test_foo.py\": \"def test_foo2(): pass\",\n            }\n        )\n        result = pytester.runpytest(\"-v\", \"--import-mode=importlib\")\n        result.stdout.fnmatch_lines(\n            [\n                \"tests_a/test_foo.py::test_foo1 *\",\n                \"tests_b/test_foo.py::test_foo2 *\",\n                \"* 2 passed in *\",\n            ]\n        )\n\n    def test_conftest(self, pytester: Pytester) -> None:\n        \"\"\"Directory containing conftest modules are not put in sys.path as a side-effect of\n        importing them.\"\"\"\n        tests_dir = pytester.path.joinpath(\"tests\")\n        pytester.makepyfile(\n            **{\n                \"tests/conftest.py\": \"\",\n                \"tests/test_foo.py\": f\"\"\"\n                import sys\n                def test_check():\n                    assert r\"{tests_dir}\" not in sys.path\n                \"\"\",\n            }\n        )\n        result = pytester.runpytest(\"-v\", \"--import-mode=importlib\")\n        result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n    def setup_conftest_and_foo(self, pytester: Pytester) -> None:\n        \"\"\"Setup a tests folder to be used to test if modules in that folder can be imported\n        due to side-effects of --import-mode or not.\"\"\"\n        pytester.makepyfile(\n            **{\n                \"tests/conftest.py\": \"\",\n                \"tests/foo.py\": \"\"\"\n                    def foo(): return 42\n                \"\"\",\n                \"tests/test_foo.py\": \"\"\"\n                    def test_check():\n                        from foo import foo\n                        assert foo() == 42\n                \"\"\",\n            }\n        )\n\n    def test_modules_importable_as_side_effect(self, pytester: Pytester) -> None:\n        \"\"\"In import-modes `prepend` and `append`, we are able to import modules from folders\n        containing conftest.py files due to the side effect of changing sys.path.\"\"\"\n        self.setup_conftest_and_foo(pytester)\n        result = pytester.runpytest(\"-v\", \"--import-mode=prepend\")\n        result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n    def test_modules_not_importable_as_side_effect(self, pytester: Pytester) -> None:\n        \"\"\"In import-mode `importlib`, modules in folders containing conftest.py are not\n        importable, as don't change sys.path or sys.modules as side effect of importing\n        the conftest.py file.\n        \"\"\"\n        self.setup_conftest_and_foo(pytester)\n        result = pytester.runpytest(\"-v\", \"--import-mode=importlib\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*ModuleNotFoundError: No module named 'foo'\",\n                \"tests?test_foo.py:2: ModuleNotFoundError\",\n                \"* 1 failed in *\",\n            ]\n        )\n\n    def test_using_python_path(self, pytester: Pytester) -> None:\n        \"\"\"\n        Dummy modules created by insert_missing_modules should not get in\n        the way of modules that could be imported via python path (#9645).\n        \"\"\"\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            pythonpath = .\n            addopts = --import-mode importlib\n            \"\"\"\n        )\n        pytester.makepyfile(\n            **{\n                \"tests/__init__.py\": \"\",\n                \"tests/conftest.py\": \"\",\n                \"tests/subpath/__init__.py\": \"\",\n                \"tests/subpath/helper.py\": \"\",\n                \"tests/subpath/test_something.py\": \"\"\"\n                import tests.subpath.helper\n\n                def test_something():\n                    assert True\n                \"\"\",\n            }\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\"*1 passed in*\")\n\n\ndef test_does_not_crash_on_error_from_decorated_function(pytester: Pytester) -> None:\n    \"\"\"Regression test for an issue around bad exception formatting due to\n    assertion rewriting mangling lineno's (#4984).\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        @pytest.fixture\n        def a(): return 4\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    # Not INTERNAL_ERROR\n    assert result.ret == ExitCode.INTERRUPTED\n\n\ndef test_does_not_crash_on_recursive_symlink(pytester: Pytester) -> None:\n    \"\"\"Regression test for an issue around recursive symlinks (#7951).\"\"\"\n    symlink_or_skip(\"recursive\", pytester.path.joinpath(\"recursive\"))\n    pytester.makepyfile(\n        \"\"\"\n        def test_foo(): assert True\n        \"\"\"\n    )\n    result = pytester.runpytest()\n\n    assert result.ret == ExitCode.OK\n    assert result.parseoutcomes() == {\"passed\": 1}\n\n\n@pytest.mark.skipif(not sys.platform.startswith(\"win\"), reason=\"Windows only\")\ndef test_collect_short_file_windows(pytester: Pytester) -> None:\n    \"\"\"Reproducer for #11895: short paths not collected on Windows.\"\"\"\n    short_path = tempfile.mkdtemp()\n    if \"~\" not in short_path:  # pragma: no cover\n        if running_on_ci():\n            # On CI, we are expecting that under the current GitHub actions configuration,\n            # tempfile.mkdtemp() is producing short paths, so we want to fail to prevent\n            # this from silently changing without us noticing.\n            pytest.fail(\n                f\"tempfile.mkdtemp() failed to produce a short path on CI: {short_path}\"\n            )\n        else:\n            # We want to skip failing this test locally in this situation because\n            # depending on the local configuration tempfile.mkdtemp() might not produce a short path:\n            # For example, user might have configured %TEMP% exactly to avoid generating short paths.\n            pytest.skip(\n                f\"tempfile.mkdtemp() failed to produce a short path: {short_path}, skipping\"\n            )\n\n    test_file = Path(short_path).joinpath(\"test_collect_short_file_windows.py\")\n    test_file.write_text(\"def test(): pass\", encoding=\"UTF-8\")\n    result = pytester.runpytest(short_path)\n    assert result.parseoutcomes() == {\"passed\": 1}\n\n\ndef test_pyargs_collection_tree(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    \"\"\"When using `--pyargs`, the collection tree of a pyargs collection\n    argument should only include parents in the import path, not up to confcutdir.\n\n    Regression test for #11904.\n    \"\"\"\n    site_packages = pytester.path / \"venv/lib/site-packages\"\n    site_packages.mkdir(parents=True)\n    monkeypatch.syspath_prepend(site_packages)\n    pytester.makepyfile(\n        **{\n            \"venv/lib/site-packages/pkg/__init__.py\": \"\",\n            \"venv/lib/site-packages/pkg/sub/__init__.py\": \"\",\n            \"venv/lib/site-packages/pkg/sub/test_it.py\": \"def test(): pass\",\n        }\n    )\n\n    result = pytester.runpytest(\"--pyargs\", \"--collect-only\", \"pkg.sub.test_it\")\n    assert result.ret == ExitCode.OK\n    result.stdout.fnmatch_lines(\n        [\n            \"<Package venv/lib/site-packages/pkg>\",\n            \"  <Package sub>\",\n            \"    <Module test_it.py>\",\n            \"      <Function test>\",\n        ],\n        consecutive=True,\n    )\n\n    # Now with an unrelated rootdir with unrelated files.\n    monkeypatch.chdir(tempfile.gettempdir())\n\n    result = pytester.runpytest(\"--pyargs\", \"--collect-only\", \"pkg.sub.test_it\")\n    assert result.ret == ExitCode.OK\n    result.stdout.fnmatch_lines(\n        [\n            \"<Package *pkg>\",\n            \"  <Package sub>\",\n            \"    <Module test_it.py>\",\n            \"      <Function test>\",\n        ],\n        consecutive=True,\n    )\n\n\ndef test_do_not_collect_symlink_siblings(\n    pytester: Pytester, tmp_path: Path, request: pytest.FixtureRequest\n) -> None:\n    \"\"\"\n    Regression test for #12039: Do not collect from directories that are symlinks to other directories in the same path.\n\n    The check for short paths under Windows via os.path.samefile, introduced in #11936, also finds the symlinked\n    directory created by tmp_path/tmpdir.\n    \"\"\"\n    # Use tmp_path because it creates a symlink with the name \"current\" next to the directory it creates.\n    symlink_path = tmp_path.parent / (tmp_path.name[:-1] + \"current\")\n    assert symlink_path.is_symlink() is True\n\n    # Create test file.\n    tmp_path.joinpath(\"test_foo.py\").write_text(\"def test(): pass\", encoding=\"UTF-8\")\n\n    # Ensure we collect it only once if we pass the tmp_path.\n    result = pytester.runpytest(tmp_path, \"-sv\")\n    result.assert_outcomes(passed=1)\n\n    # Ensure we collect it only once if we pass the symlinked directory.\n    result = pytester.runpytest(symlink_path, \"-sv\")\n    result.assert_outcomes(passed=1)\n\n\n@pytest.mark.parametrize(\n    \"exception_class, msg\",\n    [\n        (KeyboardInterrupt, \"*!!! KeyboardInterrupt !!!*\"),\n        (SystemExit, \"INTERNALERROR> SystemExit\"),\n    ],\n)\ndef test_respect_system_exceptions(\n    pytester: Pytester,\n    exception_class: type[BaseException],\n    msg: str,\n):\n    head = \"Before exception\"\n    tail = \"After exception\"\n    ensure_file(pytester.path / \"test_eggs.py\").write_text(\n        f\"print('{head}')\", encoding=\"UTF-8\"\n    )\n    ensure_file(pytester.path / \"test_ham.py\").write_text(\n        f\"raise {exception_class.__name__}()\", encoding=\"UTF-8\"\n    )\n    ensure_file(pytester.path / \"test_spam.py\").write_text(\n        f\"print('{tail}')\", encoding=\"UTF-8\"\n    )\n\n    result = pytester.runpytest_subprocess(\"-s\")\n    result.stdout.fnmatch_lines([f\"*{head}*\"])\n    result.stdout.fnmatch_lines([msg])\n    result.stdout.no_fnmatch_line(f\"*{tail}*\")\n", "testing/test_mark.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nimport sys\nfrom unittest import mock\n\nfrom _pytest.config import ExitCode\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark.structures import EMPTY_PARAMETERSET_OPTION\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Node\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nclass TestMark:\n    @pytest.mark.parametrize(\"attr\", [\"mark\", \"param\"])\n    def test_pytest_exists_in_namespace_all(self, attr: str) -> None:\n        module = sys.modules[\"pytest\"]\n        assert attr in module.__all__\n\n    def test_pytest_mark_notcallable(self) -> None:\n        mark = MarkGenerator(_ispytest=True)\n        with pytest.raises(TypeError):\n            mark()  # type: ignore[operator]\n\n    def test_mark_with_param(self):\n        def some_function(abc):\n            pass\n\n        class SomeClass:\n            pass\n\n        assert pytest.mark.foo(some_function) is some_function\n        marked_with_args = pytest.mark.foo.with_args(some_function)\n        assert marked_with_args is not some_function\n\n        assert pytest.mark.foo(SomeClass) is SomeClass\n        assert pytest.mark.foo.with_args(SomeClass) is not SomeClass  # type: ignore[comparison-overlap]\n\n    def test_pytest_mark_name_starts_with_underscore(self) -> None:\n        mark = MarkGenerator(_ispytest=True)\n        with pytest.raises(AttributeError):\n            _ = mark._some_name\n\n\ndef test_marked_class_run_twice(pytester: Pytester) -> None:\n    \"\"\"Test fails file is run twice that contains marked class.\n    See issue#683.\n    \"\"\"\n    py_file = pytester.makepyfile(\n        \"\"\"\n    import pytest\n    @pytest.mark.parametrize('abc', [1, 2, 3])\n    class Test1(object):\n        def test_1(self, abc):\n            assert abc in [1, 2, 3]\n    \"\"\"\n    )\n    file_name = os.path.basename(py_file)\n    rec = pytester.inline_run(file_name, file_name)\n    rec.assertoutcome(passed=6)\n\n\ndef test_ini_markers(pytester: Pytester) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        markers =\n            a1: this is a webtest marker\n            a2: this is a smoke marker\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        def test_markers(pytestconfig):\n            markers = pytestconfig.getini(\"markers\")\n            print(markers)\n            assert len(markers) >= 2\n            assert markers[0].startswith(\"a1:\")\n            assert markers[1].startswith(\"a2:\")\n    \"\"\"\n    )\n    rec = pytester.inline_run()\n    rec.assertoutcome(passed=1)\n\n\ndef test_markers_option(pytester: Pytester) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        markers =\n            a1: this is a webtest marker\n            a1some: another marker\n            nodescription\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--markers\")\n    result.stdout.fnmatch_lines(\n        [\"*a1*this is a webtest*\", \"*a1some*another marker\", \"*nodescription*\"]\n    )\n\n\ndef test_ini_markers_whitespace(pytester: Pytester) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        markers =\n            a1 : this is a whitespace marker\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.a1\n        def test_markers():\n            assert True\n    \"\"\"\n    )\n    rec = pytester.inline_run(\"--strict-markers\", \"-m\", \"a1\")\n    rec.assertoutcome(passed=1)\n\n\ndef test_marker_without_description(pytester: Pytester) -> None:\n    pytester.makefile(\n        \".cfg\",\n        setup=\"\"\"\n        [tool:pytest]\n        markers=slow\n    \"\"\",\n    )\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        pytest.mark.xfail('FAIL')\n    \"\"\"\n    )\n    ftdir = pytester.mkdir(\"ft1_dummy\")\n    pytester.path.joinpath(\"conftest.py\").replace(ftdir.joinpath(\"conftest.py\"))\n    rec = pytester.runpytest(\"--strict-markers\")\n    rec.assert_outcomes()\n\n\ndef test_markers_option_with_plugin_in_current_dir(pytester: Pytester) -> None:\n    pytester.makeconftest('pytest_plugins = \"flip_flop\"')\n    pytester.makepyfile(\n        flip_flop=\"\"\"\\\n        def pytest_configure(config):\n            config.addinivalue_line(\"markers\", \"flip:flop\")\n\n        def pytest_generate_tests(metafunc):\n            try:\n                mark = metafunc.function.flipper\n            except AttributeError:\n                return\n            metafunc.parametrize(\"x\", (10, 20))\"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\\\n        import pytest\n        @pytest.mark.flipper\n        def test_example(x):\n            assert x\"\"\"\n    )\n\n    result = pytester.runpytest(\"--markers\")\n    result.stdout.fnmatch_lines([\"*flip*flop*\"])\n\n\ndef test_mark_on_pseudo_function(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.r(lambda x: 0/0)\n        def test_hello():\n            pass\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\n@pytest.mark.parametrize(\"option_name\", [\"--strict-markers\", \"--strict\"])\ndef test_strict_prohibits_unregistered_markers(\n    pytester: Pytester, option_name: str\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.unregisteredmark\n        def test_hello():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(option_name)\n    assert result.ret != 0\n    result.stdout.fnmatch_lines(\n        [\"'unregisteredmark' not found in `markers` configuration option\"]\n    )\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected_passed\"),\n    [\n        (\"xyz\", [\"test_one\"]),\n        (\"(((  xyz))  )\", [\"test_one\"]),\n        (\"not not xyz\", [\"test_one\"]),\n        (\"xyz and xyz2\", []),\n        (\"xyz2\", [\"test_two\"]),\n        (\"xyz or xyz2\", [\"test_one\", \"test_two\"]),\n    ],\n)\ndef test_mark_option(\n    expr: str, expected_passed: list[str | None], pytester: Pytester\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.xyz\n        def test_one():\n            pass\n        @pytest.mark.xyz2\n        def test_two():\n            pass\n    \"\"\"\n    )\n    rec = pytester.inline_run(\"-m\", expr)\n    passed, skipped, fail = rec.listoutcomes()\n    passed_str = [x.nodeid.split(\"::\")[-1] for x in passed]\n    assert passed_str == expected_passed\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected_passed\"),\n    [  # TODO: improve/sort out\n        (\"car(color='red')\", [\"test_one\"]),\n        (\"car(color='red') or car(color='blue')\", [\"test_one\", \"test_two\"]),\n        (\"car and not car(temp=5)\", [\"test_one\", \"test_three\"]),\n        (\"car(temp=4)\", [\"test_one\"]),\n        (\"car(temp=4) or car(temp=5)\", [\"test_one\", \"test_two\"]),\n        (\"car(temp=4) and car(temp=5)\", []),\n        (\"car(temp=-5)\", [\"test_three\"]),\n        (\"car(ac=True)\", [\"test_one\"]),\n        (\"car(ac=False)\", [\"test_two\"]),\n        (\"car(ac=None)\", [\"test_three\"]),  # test NOT_NONE_SENTINEL\n    ],\n    ids=str,\n)\ndef test_mark_option_with_kwargs(\n    expr: str, expected_passed: list[str | None], pytester: Pytester\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.car\n        @pytest.mark.car(ac=True)\n        @pytest.mark.car(temp=4)\n        @pytest.mark.car(color=\"red\")\n        def test_one():\n            pass\n        @pytest.mark.car\n        @pytest.mark.car(ac=False)\n        @pytest.mark.car(temp=5)\n        @pytest.mark.car(color=\"blue\")\n        def test_two():\n            pass\n        @pytest.mark.car\n        @pytest.mark.car(ac=None)\n        @pytest.mark.car(temp=-5)\n        def test_three():\n            pass\n\n    \"\"\"\n    )\n    rec = pytester.inline_run(\"-m\", expr)\n    passed, skipped, fail = rec.listoutcomes()\n    passed_str = [x.nodeid.split(\"::\")[-1] for x in passed]\n    assert passed_str == expected_passed\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected_passed\"),\n    [(\"interface\", [\"test_interface\"]), (\"not interface\", [\"test_nointer\"])],\n)\ndef test_mark_option_custom(\n    expr: str, expected_passed: list[str], pytester: Pytester\n) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        def pytest_collection_modifyitems(items):\n            for item in items:\n                if \"interface\" in item.nodeid:\n                    item.add_marker(pytest.mark.interface)\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        def test_interface():\n            pass\n        def test_nointer():\n            pass\n    \"\"\"\n    )\n    rec = pytester.inline_run(\"-m\", expr)\n    passed, skipped, fail = rec.listoutcomes()\n    passed_str = [x.nodeid.split(\"::\")[-1] for x in passed]\n    assert passed_str == expected_passed\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected_passed\"),\n    [\n        (\"interface\", [\"test_interface\"]),\n        (\"not interface\", [\"test_nointer\", \"test_pass\", \"test_1\", \"test_2\"]),\n        (\"pass\", [\"test_pass\"]),\n        (\"not pass\", [\"test_interface\", \"test_nointer\", \"test_1\", \"test_2\"]),\n        (\"not not not (pass)\", [\"test_interface\", \"test_nointer\", \"test_1\", \"test_2\"]),\n        (\"1 or 2\", [\"test_1\", \"test_2\"]),\n        (\"not (1 or 2)\", [\"test_interface\", \"test_nointer\", \"test_pass\"]),\n    ],\n)\ndef test_keyword_option_custom(\n    expr: str, expected_passed: list[str], pytester: Pytester\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_interface():\n            pass\n        def test_nointer():\n            pass\n        def test_pass():\n            pass\n        def test_1():\n            pass\n        def test_2():\n            pass\n    \"\"\"\n    )\n    rec = pytester.inline_run(\"-k\", expr)\n    passed, skipped, fail = rec.listoutcomes()\n    passed_str = [x.nodeid.split(\"::\")[-1] for x in passed]\n    assert passed_str == expected_passed\n\n\ndef test_keyword_option_considers_mark(pytester: Pytester) -> None:\n    pytester.copy_example(\"marks/marks_considered_keywords\")\n    rec = pytester.inline_run(\"-k\", \"foo\")\n    passed = rec.listoutcomes()[0]\n    assert len(passed) == 1\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected_passed\"),\n    [\n        (\"None\", [\"test_func[None]\"]),\n        (\"[1.3]\", [\"test_func[1.3]\"]),\n        (\"2-3\", [\"test_func[2-3]\"]),\n    ],\n)\ndef test_keyword_option_parametrize(\n    expr: str, expected_passed: list[str], pytester: Pytester\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.parametrize(\"arg\", [None, 1.3, \"2-3\"])\n        def test_func(arg):\n            pass\n    \"\"\"\n    )\n    rec = pytester.inline_run(\"-k\", expr)\n    passed, skipped, fail = rec.listoutcomes()\n    passed_str = [x.nodeid.split(\"::\")[-1] for x in passed]\n    assert passed_str == expected_passed\n\n\ndef test_parametrize_with_module(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.parametrize(\"arg\", [pytest,])\n        def test_func(arg):\n            pass\n    \"\"\"\n    )\n    rec = pytester.inline_run()\n    passed, skipped, fail = rec.listoutcomes()\n    expected_id = \"test_func[\" + pytest.__name__ + \"]\"\n    assert passed[0].nodeid.split(\"::\")[-1] == expected_id\n\n\n@pytest.mark.parametrize(\n    (\"expr\", \"expected_error\"),\n    [\n        (\n            \"foo or\",\n            \"at column 7: expected not OR left parenthesis OR identifier; got end of input\",\n        ),\n        (\n            \"foo or or\",\n            \"at column 8: expected not OR left parenthesis OR identifier; got or\",\n        ),\n        (\n            \"(foo\",\n            \"at column 5: expected right parenthesis; got end of input\",\n        ),\n        (\n            \"foo bar\",\n            \"at column 5: expected end of input; got identifier\",\n        ),\n        (\n            \"or or\",\n            \"at column 1: expected not OR left parenthesis OR identifier; got or\",\n        ),\n        (\n            \"not or\",\n            \"at column 5: expected not OR left parenthesis OR identifier; got or\",\n        ),\n        (\n            \"nonexistent_mark(non_supported='kwarg')\",\n            \"Keyword expressions do not support call parameters\",\n        ),\n    ],\n)\ndef test_keyword_option_wrong_arguments(\n    expr: str, expected_error: str, pytester: Pytester, capsys\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n            def test_func(arg):\n                pass\n        \"\"\"\n    )\n    pytester.inline_run(\"-k\", expr)\n    err = capsys.readouterr().err\n    assert expected_error in err\n\n\ndef test_parametrized_collected_from_command_line(pytester: Pytester) -> None:\n    \"\"\"Parametrized test not collected if test named specified in command\n    line issue#649.\"\"\"\n    py_file = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.parametrize(\"arg\", [None, 1.3, \"2-3\"])\n        def test_func(arg):\n            pass\n    \"\"\"\n    )\n    file_name = os.path.basename(py_file)\n    rec = pytester.inline_run(file_name + \"::\" + \"test_func\")\n    rec.assertoutcome(passed=3)\n\n\ndef test_parametrized_collect_with_wrong_args(pytester: Pytester) -> None:\n    \"\"\"Test collect parametrized func with wrong number of args.\"\"\"\n    py_file = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.parametrize('foo, bar', [(1, 2, 3)])\n        def test_func(foo, bar):\n            pass\n    \"\"\"\n    )\n\n    result = pytester.runpytest(py_file)\n    result.stdout.fnmatch_lines(\n        [\n            'test_parametrized_collect_with_wrong_args.py::test_func: in \"parametrize\" the number of names (2):',\n            \"  ['foo', 'bar']\",\n            \"must be equal to the number of values (3):\",\n            \"  (1, 2, 3)\",\n        ]\n    )\n\n\ndef test_parametrized_with_kwargs(pytester: Pytester) -> None:\n    \"\"\"Test collect parametrized func with wrong number of args.\"\"\"\n    py_file = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture(params=[1,2])\n        def a(request):\n            return request.param\n\n        @pytest.mark.parametrize(argnames='b', argvalues=[1, 2])\n        def test_func(a, b):\n            pass\n    \"\"\"\n    )\n\n    result = pytester.runpytest(py_file)\n    assert result.ret == 0\n\n\ndef test_parametrize_iterator(pytester: Pytester) -> None:\n    \"\"\"`parametrize` should work with generators (#5354).\"\"\"\n    py_file = pytester.makepyfile(\n        \"\"\"\\\n        import pytest\n\n        def gen():\n            yield 1\n            yield 2\n            yield 3\n\n        @pytest.mark.parametrize('a', gen())\n        def test(a):\n            assert a >= 1\n        \"\"\"\n    )\n    result = pytester.runpytest(py_file)\n    assert result.ret == 0\n    # should not skip any tests\n    result.stdout.fnmatch_lines([\"*3 passed*\"])\n\n\nclass TestFunctional:\n    def test_merging_markers_deep(self, pytester: Pytester) -> None:\n        # issue 199 - propagate markers into nested classes\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            class TestA(object):\n                pytestmark = pytest.mark.a\n                def test_b(self):\n                    assert True\n                class TestC(object):\n                    # this one didn't get marked\n                    def test_d(self):\n                        assert True\n        \"\"\"\n        )\n        items, rec = pytester.inline_genitems(p)\n        for item in items:\n            print(item, item.keywords)\n            assert [x for x in item.iter_markers() if x.name == \"a\"]\n\n    def test_mark_decorator_subclass_does_not_propagate_to_base(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.a\n            class Base(object): pass\n\n            @pytest.mark.b\n            class Test1(Base):\n                def test_foo(self): pass\n\n            class Test2(Base):\n                def test_bar(self): pass\n        \"\"\"\n        )\n        items, rec = pytester.inline_genitems(p)\n        self.assert_markers(items, test_foo=(\"a\", \"b\"), test_bar=(\"a\",))\n\n    def test_mark_should_not_pass_to_siebling_class(self, pytester: Pytester) -> None:\n        \"\"\"#568\"\"\"\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            class TestBase(object):\n                def test_foo(self):\n                    pass\n\n            @pytest.mark.b\n            class TestSub(TestBase):\n                pass\n\n\n            class TestOtherSub(TestBase):\n                pass\n\n        \"\"\"\n        )\n        items, rec = pytester.inline_genitems(p)\n        base_item, sub_item, sub_item_other = items\n        print(items, [x.nodeid for x in items])\n        # new api segregates\n        assert not list(base_item.iter_markers(name=\"b\"))\n        assert not list(sub_item_other.iter_markers(name=\"b\"))\n        assert list(sub_item.iter_markers(name=\"b\"))\n\n    def test_mark_decorator_baseclasses_merged(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.a\n            class Base(object): pass\n\n            @pytest.mark.b\n            class Base2(Base): pass\n\n            @pytest.mark.c\n            class Test1(Base2):\n                def test_foo(self): pass\n\n            class Test2(Base2):\n                @pytest.mark.d\n                def test_bar(self): pass\n        \"\"\"\n        )\n        items, rec = pytester.inline_genitems(p)\n        self.assert_markers(items, test_foo=(\"a\", \"b\", \"c\"), test_bar=(\"a\", \"b\", \"d\"))\n\n    def test_mark_closest(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.c(location=\"class\")\n            class Test:\n                @pytest.mark.c(location=\"function\")\n                def test_has_own(self):\n                    pass\n\n                def test_has_inherited(self):\n                    pass\n\n        \"\"\"\n        )\n        items, rec = pytester.inline_genitems(p)\n        has_own, has_inherited = items\n        has_own_marker = has_own.get_closest_marker(\"c\")\n        has_inherited_marker = has_inherited.get_closest_marker(\"c\")\n        assert has_own_marker is not None\n        assert has_inherited_marker is not None\n        assert has_own_marker.kwargs == {\"location\": \"function\"}\n        assert has_inherited_marker.kwargs == {\"location\": \"class\"}\n        assert has_own.get_closest_marker(\"missing\") is None\n\n    def test_mark_with_wrong_marker(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\n                import pytest\n                class pytestmark(object):\n                    pass\n                def test_func():\n                    pass\n        \"\"\"\n        )\n        values = reprec.getfailedcollections()\n        assert len(values) == 1\n        assert \"TypeError\" in str(values[0].longrepr)\n\n    def test_mark_dynamically_in_funcarg(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def arg(request):\n                request.applymarker(pytest.mark.hello)\n            def pytest_terminal_summary(terminalreporter):\n                values = terminalreporter.stats['passed']\n                terminalreporter._tw.line(\"keyword: %s\" % values[0].keywords)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_func(arg):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"keyword: *hello*\"])\n\n    def test_no_marker_match_on_unmarked_names(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.shouldmatch\n            def test_marked():\n                assert 1\n\n            def test_unmarked():\n                assert 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-m\", \"test_unmarked\", p)\n        passed, skipped, failed = reprec.listoutcomes()\n        assert len(passed) + len(skipped) + len(failed) == 0\n        dlist = reprec.getcalls(\"pytest_deselected\")\n        deselected_tests = dlist[0].items\n        assert len(deselected_tests) == 2\n\n    def test_keywords_at_node_level(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"session\", autouse=True)\n            def some(request):\n                request.keywords[\"hello\"] = 42\n                assert \"world\" not in request.keywords\n\n            @pytest.fixture(scope=\"function\", autouse=True)\n            def funcsetup(request):\n                assert \"world\" in request.keywords\n                assert \"hello\" in  request.keywords\n\n            @pytest.mark.world\n            def test_function():\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_keyword_added_for_session(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_collection_modifyitems(session):\n                session.add_marker(\"mark1\")\n                session.add_marker(pytest.mark.mark2)\n                session.add_marker(pytest.mark.mark3)\n                pytest.raises(ValueError, lambda:\n                        session.add_marker(10))\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_some(request):\n                assert \"mark1\" in request.keywords\n                assert \"mark2\" in request.keywords\n                assert \"mark3\" in request.keywords\n                assert 10 not in request.keywords\n                marker = request.node.get_closest_marker(\"mark1\")\n                assert marker.name == \"mark1\"\n                assert marker.args == ()\n                assert marker.kwargs == {}\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-m\", \"mark1\")\n        reprec.assertoutcome(passed=1)\n\n    def assert_markers(self, items, **expected) -> None:\n        \"\"\"Assert that given items have expected marker names applied to them.\n        expected should be a dict of (item name -> seq of expected marker names).\n\n        Note: this could be moved to ``pytester`` if proven to be useful\n        to other modules.\n        \"\"\"\n        items = {x.name: x for x in items}\n        for name, expected_markers in expected.items():\n            markers = {m.name for m in items[name].iter_markers()}\n            assert markers == set(expected_markers)\n\n    @pytest.mark.filterwarnings(\"ignore\")\n    def test_mark_from_parameters(self, pytester: Pytester) -> None:\n        \"\"\"#1540\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            pytestmark = pytest.mark.skipif(True, reason='skip all')\n\n            # skipifs inside fixture params\n            params = [pytest.mark.skipif(False, reason='dont skip')('parameter')]\n\n\n            @pytest.fixture(params=params)\n            def parameter(request):\n                return request.param\n\n\n            def test_1(parameter):\n                assert True\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(skipped=1)\n\n    def test_reevaluate_dynamic_expr(self, pytester: Pytester) -> None:\n        \"\"\"#7360\"\"\"\n        py_file1 = pytester.makepyfile(\n            test_reevaluate_dynamic_expr1=\"\"\"\n            import pytest\n\n            skip = True\n\n            @pytest.mark.skipif(\"skip\")\n            def test_should_skip():\n                assert True\n        \"\"\"\n        )\n        py_file2 = pytester.makepyfile(\n            test_reevaluate_dynamic_expr2=\"\"\"\n            import pytest\n\n            skip = False\n\n            @pytest.mark.skipif(\"skip\")\n            def test_should_not_skip():\n                assert True\n        \"\"\"\n        )\n\n        file_name1 = os.path.basename(py_file1)\n        file_name2 = os.path.basename(py_file2)\n        reprec = pytester.inline_run(file_name1, file_name2)\n        reprec.assertoutcome(passed=1, skipped=1)\n\n\nclass TestKeywordSelection:\n    def test_select_simple(self, pytester: Pytester) -> None:\n        file_test = pytester.makepyfile(\n            \"\"\"\n            def test_one():\n                assert 0\n            class TestClass(object):\n                def test_method_one(self):\n                    assert 42 == 43\n        \"\"\"\n        )\n\n        def check(keyword, name):\n            reprec = pytester.inline_run(\"-s\", \"-k\", keyword, file_test)\n            passed, skipped, failed = reprec.listoutcomes()\n            assert len(failed) == 1\n            assert failed[0].nodeid.split(\"::\")[-1] == name\n            assert len(reprec.getcalls(\"pytest_deselected\")) == 1\n\n        for keyword in [\"test_one\", \"est_on\"]:\n            check(keyword, \"test_one\")\n        check(\"TestClass and test\", \"test_method_one\")\n\n    @pytest.mark.parametrize(\n        \"keyword\",\n        [\n            \"xxx\",\n            \"xxx and test_2\",\n            \"TestClass\",\n            \"xxx and not test_1\",\n            \"TestClass and test_2\",\n            \"xxx and TestClass and test_2\",\n        ],\n    )\n    def test_select_extra_keywords(self, pytester: Pytester, keyword) -> None:\n        p = pytester.makepyfile(\n            test_select=\"\"\"\n            def test_1():\n                pass\n            class TestClass(object):\n                def test_2(self):\n                    pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            conftest=\"\"\"\n            import pytest\n            @pytest.hookimpl(wrapper=True)\n            def pytest_pycollect_makeitem(name):\n                item = yield\n                if name == \"TestClass\":\n                    item.extra_keyword_matches.add(\"xxx\")\n                return item\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p.parent, \"-s\", \"-k\", keyword)\n        print(\"keyword\", repr(keyword))\n        passed, skipped, failed = reprec.listoutcomes()\n        assert len(passed) == 1\n        assert passed[0].nodeid.endswith(\"test_2\")\n        dlist = reprec.getcalls(\"pytest_deselected\")\n        assert len(dlist) == 1\n        assert dlist[0].items[0].name == \"test_1\"\n\n    def test_keyword_extra(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n           def test_one():\n               assert 0\n           test_one.mykeyword = True\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-k\", \"mykeyword\", p)\n        passed, skipped, failed = reprec.countoutcomes()\n        assert failed == 1\n\n    @pytest.mark.xfail\n    def test_keyword_extra_dash(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n           def test_one():\n               assert 0\n           test_one.mykeyword = True\n        \"\"\"\n        )\n        # with argparse the argument to an option cannot\n        # start with '-'\n        reprec = pytester.inline_run(\"-k\", \"-mykeyword\", p)\n        passed, skipped, failed = reprec.countoutcomes()\n        assert passed + skipped + failed == 0\n\n    @pytest.mark.parametrize(\n        \"keyword\",\n        [\"__\", \"+\", \"..\"],\n    )\n    def test_no_magic_values(self, pytester: Pytester, keyword: str) -> None:\n        \"\"\"Make sure the tests do not match on magic values,\n        no double underscored values, like '__dict__' and '+'.\n        \"\"\"\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_one(): assert 1\n        \"\"\"\n        )\n\n        reprec = pytester.inline_run(\"-k\", keyword, p)\n        passed, skipped, failed = reprec.countoutcomes()\n        dlist = reprec.getcalls(\"pytest_deselected\")\n        assert passed + skipped + failed == 0\n        deselected_tests = dlist[0].items\n        assert len(deselected_tests) == 1\n\n    def test_no_match_directories_outside_the_suite(\n        self,\n        pytester: Pytester,\n        monkeypatch: pytest.MonkeyPatch,\n    ) -> None:\n        \"\"\"`-k` should not match against directories containing the test suite (#7040).\"\"\"\n        pytester.makefile(\n            **{\n                \"suite/pytest\": \"\"\"[pytest]\"\"\",\n            },\n            ext=\".ini\",\n        )\n        pytester.makepyfile(\n            **{\n                \"suite/ddd/tests/__init__.py\": \"\",\n                \"suite/ddd/tests/test_foo.py\": \"\"\"\n                def test_aaa(): pass\n                def test_ddd(): pass\n            \"\"\",\n            }\n        )\n        monkeypatch.chdir(pytester.path / \"suite\")\n\n        def get_collected_names(*args: str) -> list[str]:\n            _, rec = pytester.inline_genitems(*args)\n            calls = rec.getcalls(\"pytest_collection_finish\")\n            assert len(calls) == 1\n            return [x.name for x in calls[0].session.items]\n\n        # sanity check: collect both tests in normal runs\n        assert get_collected_names() == [\"test_aaa\", \"test_ddd\"]\n\n        # do not collect anything based on names outside the collection tree\n        assert get_collected_names(\"-k\", pytester._name) == []\n\n\nclass TestMarkDecorator:\n    @pytest.mark.parametrize(\n        \"lhs, rhs, expected\",\n        [\n            (pytest.mark.foo(), pytest.mark.foo(), True),\n            (pytest.mark.foo(), pytest.mark.bar(), False),\n            (pytest.mark.foo(), \"bar\", False),\n            (\"foo\", pytest.mark.bar(), False),\n        ],\n    )\n    def test__eq__(self, lhs, rhs, expected) -> None:\n        assert (lhs == rhs) == expected\n\n    def test_aliases(self) -> None:\n        md = pytest.mark.foo(1, \"2\", three=3)\n        assert md.name == \"foo\"\n        assert md.args == (1, \"2\")\n        assert md.kwargs == {\"three\": 3}\n\n\n@pytest.mark.parametrize(\"mark\", [None, \"\", \"skip\", \"xfail\"])\ndef test_parameterset_for_parametrize_marks(\n    pytester: Pytester, mark: str | None\n) -> None:\n    if mark is not None:\n        pytester.makeini(\n            f\"\"\"\n        [pytest]\n        {EMPTY_PARAMETERSET_OPTION}={mark}\n        \"\"\"\n        )\n\n    config = pytester.parseconfig()\n    from _pytest.mark import get_empty_parameterset_mark\n    from _pytest.mark import pytest_configure\n\n    pytest_configure(config)\n    result_mark = get_empty_parameterset_mark(config, [\"a\"], all)\n    if mark in (None, \"\"):\n        # normalize to the requested name\n        mark = \"skip\"\n    assert result_mark.name == mark\n    assert result_mark.kwargs[\"reason\"].startswith(\"got empty parameter set \")\n    if mark == \"xfail\":\n        assert result_mark.kwargs.get(\"run\") is False\n\n\ndef test_parameterset_for_fail_at_collect(pytester: Pytester) -> None:\n    pytester.makeini(\n        f\"\"\"\n    [pytest]\n    {EMPTY_PARAMETERSET_OPTION}=fail_at_collect\n    \"\"\"\n    )\n\n    config = pytester.parseconfig()\n    from _pytest.mark import get_empty_parameterset_mark\n    from _pytest.mark import pytest_configure\n\n    pytest_configure(config)\n\n    with pytest.raises(\n        Collector.CollectError,\n        match=r\"Empty parameter set in 'pytest_configure' at line \\d\\d+\",\n    ):\n        get_empty_parameterset_mark(config, [\"a\"], pytest_configure)\n\n    p1 = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.parametrize(\"empty\", [])\n        def test():\n            pass\n        \"\"\"\n    )\n    result = pytester.runpytest(str(p1))\n    result.stdout.fnmatch_lines(\n        [\n            \"collected 0 items / 1 error\",\n            \"* ERROR collecting test_parameterset_for_fail_at_collect.py *\",\n            \"Empty parameter set in 'test' at line 3\",\n            \"*= 1 error in *\",\n        ]\n    )\n    assert result.ret == ExitCode.INTERRUPTED\n\n\ndef test_parameterset_for_parametrize_bad_markname(pytester: Pytester) -> None:\n    with pytest.raises(pytest.UsageError):\n        test_parameterset_for_parametrize_marks(pytester, \"bad\")\n\n\ndef test_mark_expressions_no_smear(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        class BaseTests(object):\n            def test_something(self):\n                pass\n\n        @pytest.mark.FOO\n        class TestFooClass(BaseTests):\n            pass\n\n        @pytest.mark.BAR\n        class TestBarClass(BaseTests):\n            pass\n    \"\"\"\n    )\n\n    reprec = pytester.inline_run(\"-m\", \"FOO\")\n    passed, skipped, failed = reprec.countoutcomes()\n    dlist = reprec.getcalls(\"pytest_deselected\")\n    assert passed == 1\n    assert skipped == failed == 0\n    deselected_tests = dlist[0].items\n    assert len(deselected_tests) == 1\n\n    # todo: fixed\n    # keywords smear - expected behaviour\n    # reprec_keywords = pytester.inline_run(\"-k\", \"FOO\")\n    # passed_k, skipped_k, failed_k = reprec_keywords.countoutcomes()\n    # assert passed_k == 2\n    # assert skipped_k == failed_k == 0\n\n\ndef test_addmarker_order(pytester) -> None:\n    session = mock.Mock()\n    session.own_markers = []\n    session.parent = None\n    session.nodeid = \"\"\n    session.path = pytester.path\n    node = Node.from_parent(session, name=\"Test\")\n    node.add_marker(\"foo\")\n    node.add_marker(\"bar\")\n    node.add_marker(\"baz\", append=False)\n    extracted = [x.name for x in node.iter_markers()]\n    assert extracted == [\"baz\", \"foo\", \"bar\"]\n\n\n@pytest.mark.filterwarnings(\"ignore\")\ndef test_markers_from_parametrize(pytester: Pytester) -> None:\n    \"\"\"#3605\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        first_custom_mark = pytest.mark.custom_marker\n        custom_mark = pytest.mark.custom_mark\n        @pytest.fixture(autouse=True)\n        def trigger(request):\n            custom_mark = list(request.node.iter_markers('custom_mark'))\n            print(\"Custom mark %s\" % custom_mark)\n\n        @custom_mark(\"custom mark non parametrized\")\n        def test_custom_mark_non_parametrized():\n            print(\"Hey from test\")\n\n        @pytest.mark.parametrize(\n            \"obj_type\",\n            [\n                first_custom_mark(\"first custom mark\")(\"template\"),\n                pytest.param( # Think this should be recommended way?\n                    \"disk\",\n                    marks=custom_mark('custom mark1')\n                ),\n                custom_mark(\"custom mark2\")(\"vm\"),  # Tried also this\n            ]\n        )\n        def test_custom_mark_parametrized(obj_type):\n            print(\"obj_type is:\", obj_type)\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=4)\n\n\ndef test_pytest_param_id_requires_string() -> None:\n    with pytest.raises(TypeError) as excinfo:\n        pytest.param(id=True)  # type: ignore[arg-type]\n    (msg,) = excinfo.value.args\n    assert msg == \"Expected id to be a string, got <class 'bool'>: True\"\n\n\n@pytest.mark.parametrize(\"s\", (None, \"hello world\"))\ndef test_pytest_param_id_allows_none_or_string(s) -> None:\n    assert pytest.param(id=s)\n\n\n@pytest.mark.parametrize(\"expr\", (\"NOT internal_err\", \"NOT (internal_err)\", \"bogus=\"))\ndef test_marker_expr_eval_failure_handling(pytester: Pytester, expr) -> None:\n    foo = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.internal_err\n        def test_foo():\n            pass\n        \"\"\"\n    )\n    expected = f\"ERROR: Wrong expression passed to '-m': {expr}: *\"\n    result = pytester.runpytest(foo, \"-m\", expr)\n    result.stderr.fnmatch_lines([expected])\n    assert result.ret == ExitCode.USAGE_ERROR\n\n\ndef test_mark_mro() -> None:\n    xfail = pytest.mark.xfail\n\n    @xfail(\"a\")\n    class A:\n        pass\n\n    @xfail(\"b\")\n    class B:\n        pass\n\n    @xfail(\"c\")\n    class C(A, B):\n        pass\n\n    from _pytest.mark.structures import get_unpacked_marks\n\n    all_marks = get_unpacked_marks(C)\n\n    assert all_marks == [xfail(\"b\").mark, xfail(\"a\").mark, xfail(\"c\").mark]\n\n    assert get_unpacked_marks(C, consider_mro=False) == [xfail(\"c\").mark]\n\n\n# @pytest.mark.issue(\"https://github.com/pytest-dev/pytest/issues/10447\")\ndef test_mark_fixture_order_mro(pytester: Pytester):\n    \"\"\"This ensures we walk marks of the mro starting with the base classes\n    the action at a distance fixtures are taken as minimal example from a real project\n\n    \"\"\"\n    foo = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def add_attr1(request):\n            request.instance.attr1 = object()\n\n\n        @pytest.fixture\n        def add_attr2(request):\n            request.instance.attr2 = request.instance.attr1\n\n\n        @pytest.mark.usefixtures('add_attr1')\n        class Parent:\n            pass\n\n\n        @pytest.mark.usefixtures('add_attr2')\n        class TestThings(Parent):\n            def test_attrs(self):\n                assert self.attr1 == self.attr2\n        \"\"\"\n    )\n    result = pytester.runpytest(foo)\n    result.assert_outcomes(passed=1)\n", "testing/test_meta.py": "\"\"\"Test importing of all internal packages and modules.\n\nThis ensures all internal packages can be imported without needing the pytest\nnamespace being set, which is critical for the initialization of xdist.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport pkgutil\nimport subprocess\nimport sys\n\nimport _pytest\nimport pytest\n\n\ndef _modules() -> list[str]:\n    pytest_pkg: str = _pytest.__path__  # type: ignore\n    return sorted(\n        n\n        for _, n, _ in pkgutil.walk_packages(pytest_pkg, prefix=_pytest.__name__ + \".\")\n    )\n\n\n@pytest.mark.slow\n@pytest.mark.parametrize(\"module\", _modules())\ndef test_no_warnings(module: str) -> None:\n    # fmt: off\n    subprocess.check_call((\n        sys.executable,\n        \"-W\", \"error\",\n        \"-c\", f\"__import__({module!r})\",\n    ))\n    # fmt: on\n", "testing/test_helpconfig.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom _pytest.config import ExitCode\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef test_version_verbose(pytester: Pytester, pytestconfig, monkeypatch) -> None:\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\")\n    result = pytester.runpytest(\"--version\", \"--version\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([f\"*pytest*{pytest.__version__}*imported from*\"])\n    if pytestconfig.pluginmanager.list_plugin_distinfo():\n        result.stdout.fnmatch_lines([\"*registered third-party plugins:\", \"*at*\"])\n\n\ndef test_version_less_verbose(pytester: Pytester, pytestconfig, monkeypatch) -> None:\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\")\n    result = pytester.runpytest(\"--version\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([f\"pytest {pytest.__version__}\"])\n\n\ndef test_versions():\n    \"\"\"Regression check for the public version attributes in pytest.\"\"\"\n    assert isinstance(pytest.__version__, str)\n    assert isinstance(pytest.version_tuple, tuple)\n\n\ndef test_help(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--help\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines(\n        \"\"\"\n          -m MARKEXPR           Only run tests matching given mark expression. For\n                                example: -m 'mark1 and not mark2'.\n        Reporting:\n          --durations=N *\n          -V, --version         Display pytest version and information about plugins.\n                                When given twice, also display information about\n                                plugins.\n        *setup.cfg*\n        *minversion*\n        *to see*markers*pytest --markers*\n        *to see*fixtures*pytest --fixtures*\n    \"\"\"\n    )\n\n\ndef test_none_help_param_raises_exception(pytester: Pytester) -> None:\n    \"\"\"Test that a None help param raises a TypeError.\"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_addoption(parser):\n            parser.addini(\"test_ini\", None, default=True, type=\"bool\")\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--help\")\n    result.stderr.fnmatch_lines(\n        [\"*TypeError: help argument cannot be None for test_ini*\"]\n    )\n\n\ndef test_empty_help_param(pytester: Pytester) -> None:\n    \"\"\"Test that an empty help param is displayed correctly.\"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_addoption(parser):\n            parser.addini(\"test_ini\", \"\", default=True, type=\"bool\")\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--help\")\n    assert result.ret == 0\n    lines = [\n        \"  required_plugins (args):\",\n        \"                        Plugins that must be present for pytest to run*\",\n        \"  test_ini (bool):*\",\n        \"Environment variables:\",\n    ]\n    result.stdout.fnmatch_lines(lines, consecutive=True)\n\n\ndef test_hookvalidation_unknown(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_hello(xyz):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret != 0\n    result.stdout.fnmatch_lines([\"*unknown hook*pytest_hello*\"])\n\n\ndef test_hookvalidation_optional(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        @pytest.hookimpl(optionalhook=True)\n        def pytest_hello(xyz):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_traceconfig(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--traceconfig\")\n    result.stdout.fnmatch_lines([\"*using*pytest*\", \"*active plugins*\"])\n\n\ndef test_debug(pytester: Pytester) -> None:\n    result = pytester.runpytest_subprocess(\"--debug\")\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n    p = pytester.path.joinpath(\"pytestdebug.log\")\n    assert \"pytest_sessionstart\" in p.read_text(\"utf-8\")\n\n\ndef test_PYTEST_DEBUG(pytester: Pytester, monkeypatch) -> None:\n    monkeypatch.setenv(\"PYTEST_DEBUG\", \"1\")\n    result = pytester.runpytest_subprocess()\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n    result.stderr.fnmatch_lines(\n        [\"*pytest_plugin_registered*\", \"*manager*PluginManager*\"]\n    )\n", "testing/test_warnings.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nimport sys\nimport warnings\n\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nWARNINGS_SUMMARY_HEADER = \"warnings summary\"\n\n\n@pytest.fixture\ndef pyfile_with_warnings(pytester: Pytester, request: FixtureRequest) -> str:\n    \"\"\"Create a test file which calls a function in a module which generates warnings.\"\"\"\n    pytester.syspathinsert()\n    module_name = request.function.__name__[len(\"test_\") :] + \"_module\"\n    test_file = pytester.makepyfile(\n        f\"\"\"\n        import {module_name}\n        def test_func():\n            assert {module_name}.foo() == 1\n        \"\"\",\n        **{\n            module_name: \"\"\"\n            import warnings\n            def foo():\n                warnings.warn(UserWarning(\"user warning\"))\n                warnings.warn(RuntimeWarning(\"runtime warning\"))\n                return 1\n            \"\"\",\n        },\n    )\n    return str(test_file)\n\n\n@pytest.mark.filterwarnings(\"default::UserWarning\", \"default::RuntimeWarning\")\ndef test_normal_flow(pytester: Pytester, pyfile_with_warnings) -> None:\n    \"\"\"Check that the warnings section is displayed.\"\"\"\n    result = pytester.runpytest(pyfile_with_warnings)\n    result.stdout.fnmatch_lines(\n        [\n            f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n            \"test_normal_flow.py::test_func\",\n            \"*normal_flow_module.py:3: UserWarning: user warning\",\n            '*  warnings.warn(UserWarning(\"user warning\"))',\n            \"*normal_flow_module.py:4: RuntimeWarning: runtime warning\",\n            '*  warnings.warn(RuntimeWarning(\"runtime warning\"))',\n            \"* 1 passed, 2 warnings*\",\n        ]\n    )\n\n\n@pytest.mark.filterwarnings(\"always::UserWarning\")\ndef test_setup_teardown_warnings(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n        import pytest\n\n        @pytest.fixture\n        def fix():\n            warnings.warn(UserWarning(\"warning during setup\"))\n            yield\n            warnings.warn(UserWarning(\"warning during teardown\"))\n\n        def test_func(fix):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n            \"*test_setup_teardown_warnings.py:6: UserWarning: warning during setup\",\n            '*warnings.warn(UserWarning(\"warning during setup\"))',\n            \"*test_setup_teardown_warnings.py:8: UserWarning: warning during teardown\",\n            '*warnings.warn(UserWarning(\"warning during teardown\"))',\n            \"* 1 passed, 2 warnings*\",\n        ]\n    )\n\n\n@pytest.mark.parametrize(\"method\", [\"cmdline\", \"ini\"])\ndef test_as_errors(pytester: Pytester, pyfile_with_warnings, method) -> None:\n    args = (\"-W\", \"error\") if method == \"cmdline\" else ()\n    if method == \"ini\":\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            filterwarnings=error\n            \"\"\"\n        )\n    # Use a subprocess, since changing logging level affects other threads\n    # (xdist).\n    result = pytester.runpytest_subprocess(*args, pyfile_with_warnings)\n    result.stdout.fnmatch_lines(\n        [\n            \"E       UserWarning: user warning\",\n            \"as_errors_module.py:3: UserWarning\",\n            \"* 1 failed in *\",\n        ]\n    )\n\n\n@pytest.mark.parametrize(\"method\", [\"cmdline\", \"ini\"])\ndef test_ignore(pytester: Pytester, pyfile_with_warnings, method) -> None:\n    args = (\"-W\", \"ignore\") if method == \"cmdline\" else ()\n    if method == \"ini\":\n        pytester.makeini(\n            \"\"\"\n        [pytest]\n        filterwarnings= ignore\n        \"\"\"\n        )\n\n    result = pytester.runpytest(*args, pyfile_with_warnings)\n    result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n    assert WARNINGS_SUMMARY_HEADER not in result.stdout.str()\n\n\n@pytest.mark.filterwarnings(\"always::UserWarning\")\ndef test_unicode(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n        import pytest\n\n\n        @pytest.fixture\n        def fix():\n            warnings.warn(\"\u6d4b\u8bd5\")\n            yield\n\n        def test_func(fix):\n            pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n            \"*test_unicode.py:7: UserWarning: \\u6d4b\\u8bd5*\",\n            \"* 1 passed, 1 warning*\",\n        ]\n    )\n\n\ndef test_works_with_filterwarnings(pytester: Pytester) -> None:\n    \"\"\"Ensure our warnings capture does not mess with pre-installed filters (#2430).\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n\n        class MyWarning(Warning):\n            pass\n\n        warnings.filterwarnings(\"error\", category=MyWarning)\n\n        class TestWarnings(object):\n            def test_my_warning(self):\n                try:\n                    warnings.warn(MyWarning(\"warn!\"))\n                    assert False\n                except MyWarning:\n                    assert True\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*== 1 passed in *\"])\n\n\n@pytest.mark.parametrize(\"default_config\", [\"ini\", \"cmdline\"])\ndef test_filterwarnings_mark(pytester: Pytester, default_config) -> None:\n    \"\"\"Test ``filterwarnings`` mark works and takes precedence over command\n    line and ini options.\"\"\"\n    if default_config == \"ini\":\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            filterwarnings = always::RuntimeWarning\n        \"\"\"\n        )\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n        import pytest\n\n        @pytest.mark.filterwarnings('ignore::RuntimeWarning')\n        def test_ignore_runtime_warning():\n            warnings.warn(RuntimeWarning())\n\n        @pytest.mark.filterwarnings('error')\n        def test_warning_error():\n            warnings.warn(RuntimeWarning())\n\n        def test_show_warning():\n            warnings.warn(RuntimeWarning())\n    \"\"\"\n    )\n    result = pytester.runpytest(\n        \"-W always::RuntimeWarning\" if default_config == \"cmdline\" else \"\"\n    )\n    result.stdout.fnmatch_lines([\"*= 1 failed, 2 passed, 1 warning in *\"])\n\n\ndef test_non_string_warning_argument(pytester: Pytester) -> None:\n    \"\"\"Non-str argument passed to warning breaks pytest (#2956)\"\"\"\n    pytester.makepyfile(\n        \"\"\"\\\n        import warnings\n        import pytest\n\n        def test():\n            warnings.warn(UserWarning(1, 'foo'))\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-W\", \"always::UserWarning\")\n    result.stdout.fnmatch_lines([\"*= 1 passed, 1 warning in *\"])\n\n\ndef test_filterwarnings_mark_registration(pytester: Pytester) -> None:\n    \"\"\"Ensure filterwarnings mark is registered\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.filterwarnings('error')\n        def test_func():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--strict-markers\")\n    assert result.ret == 0\n\n\n@pytest.mark.filterwarnings(\"always::UserWarning\")\ndef test_warning_recorded_hook(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_configure(config):\n            config.issue_config_time_warning(UserWarning(\"config warning\"), stacklevel=2)\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest, warnings\n\n        warnings.warn(UserWarning(\"collect warning\"))\n\n        @pytest.fixture\n        def fix():\n            warnings.warn(UserWarning(\"setup warning\"))\n            yield 1\n            warnings.warn(UserWarning(\"teardown warning\"))\n\n        def test_func(fix):\n            warnings.warn(UserWarning(\"call warning\"))\n            assert fix == 1\n        \"\"\"\n    )\n\n    collected = []\n\n    class WarningCollector:\n        def pytest_warning_recorded(self, warning_message, when, nodeid, location):\n            collected.append((str(warning_message.message), when, nodeid, location))\n\n    result = pytester.runpytest(plugins=[WarningCollector()])\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    expected = [\n        (\"config warning\", \"config\", \"\"),\n        (\"collect warning\", \"collect\", \"\"),\n        (\"setup warning\", \"runtest\", \"test_warning_recorded_hook.py::test_func\"),\n        (\"call warning\", \"runtest\", \"test_warning_recorded_hook.py::test_func\"),\n        (\"teardown warning\", \"runtest\", \"test_warning_recorded_hook.py::test_func\"),\n    ]\n    assert len(collected) == len(expected)  # python < 3.10 zip(strict=True)\n    for collected_result, expected_result in zip(collected, expected):\n        assert collected_result[0] == expected_result[0], str(collected)\n        assert collected_result[1] == expected_result[1], str(collected)\n        assert collected_result[2] == expected_result[2], str(collected)\n\n        # NOTE: collected_result[3] is location, which differs based on the platform you are on\n        #       thus, the best we can do here is assert the types of the parameters match what we expect\n        #       and not try and preload it in the expected array\n        if collected_result[3] is not None:\n            assert type(collected_result[3][0]) is str, str(collected)\n            assert type(collected_result[3][1]) is int, str(collected)\n            assert type(collected_result[3][2]) is str, str(collected)\n        else:\n            assert collected_result[3] is None, str(collected)\n\n\n@pytest.mark.filterwarnings(\"always::UserWarning\")\ndef test_collection_warnings(pytester: Pytester) -> None:\n    \"\"\"Check that we also capture warnings issued during test collection (#3251).\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n\n        warnings.warn(UserWarning(\"collection warning\"))\n\n        def test_foo():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n            \"  *collection_warnings.py:3: UserWarning: collection warning\",\n            '    warnings.warn(UserWarning(\"collection warning\"))',\n            \"* 1 passed, 1 warning*\",\n        ]\n    )\n\n\n@pytest.mark.filterwarnings(\"always::UserWarning\")\ndef test_mark_regex_escape(pytester: Pytester) -> None:\n    \"\"\"@pytest.mark.filterwarnings should not try to escape regex characters (#3936)\"\"\"\n    pytester.makepyfile(\n        r\"\"\"\n        import pytest, warnings\n\n        @pytest.mark.filterwarnings(r\"ignore:some \\(warning\\)\")\n        def test_foo():\n            warnings.warn(UserWarning(\"some (warning)\"))\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert WARNINGS_SUMMARY_HEADER not in result.stdout.str()\n\n\n@pytest.mark.filterwarnings(\"default::pytest.PytestWarning\")\n@pytest.mark.parametrize(\"ignore_pytest_warnings\", [\"no\", \"ini\", \"cmdline\"])\ndef test_hide_pytest_internal_warnings(\n    pytester: Pytester, ignore_pytest_warnings\n) -> None:\n    \"\"\"Make sure we can ignore internal pytest warnings using a warnings filter.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import warnings\n\n        warnings.warn(pytest.PytestWarning(\"some internal warning\"))\n\n        def test_bar():\n            pass\n    \"\"\"\n    )\n    if ignore_pytest_warnings == \"ini\":\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            filterwarnings = ignore::pytest.PytestWarning\n        \"\"\"\n        )\n    args = (\n        [\"-W\", \"ignore::pytest.PytestWarning\"]\n        if ignore_pytest_warnings == \"cmdline\"\n        else []\n    )\n    result = pytester.runpytest(*args)\n    if ignore_pytest_warnings != \"no\":\n        assert WARNINGS_SUMMARY_HEADER not in result.stdout.str()\n    else:\n        result.stdout.fnmatch_lines(\n            [\n                f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n                \"*test_hide_pytest_internal_warnings.py:4: PytestWarning: some internal warning\",\n                \"* 1 passed, 1 warning *\",\n            ]\n        )\n\n\n@pytest.mark.parametrize(\"ignore_on_cmdline\", [True, False])\ndef test_option_precedence_cmdline_over_ini(\n    pytester: Pytester, ignore_on_cmdline\n) -> None:\n    \"\"\"Filters defined in the command-line should take precedence over filters in ini files (#3946).\"\"\"\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        filterwarnings = error::UserWarning\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n        def test():\n            warnings.warn(UserWarning('hello'))\n    \"\"\"\n    )\n    args = [\"-W\", \"ignore\"] if ignore_on_cmdline else []\n    result = pytester.runpytest(*args)\n    if ignore_on_cmdline:\n        result.stdout.fnmatch_lines([\"* 1 passed in*\"])\n    else:\n        result.stdout.fnmatch_lines([\"* 1 failed in*\"])\n\n\ndef test_option_precedence_mark(pytester: Pytester) -> None:\n    \"\"\"Filters defined by marks should always take precedence (#3946).\"\"\"\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        filterwarnings = ignore\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest, warnings\n        @pytest.mark.filterwarnings('error')\n        def test():\n            warnings.warn(UserWarning('hello'))\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-W\", \"ignore\")\n    result.stdout.fnmatch_lines([\"* 1 failed in*\"])\n\n\nclass TestDeprecationWarningsByDefault:\n    \"\"\"\n    Note: all pytest runs are executed in a subprocess so we don't inherit warning filters\n    from pytest's own test suite\n    \"\"\"\n\n    def create_file(self, pytester: Pytester, mark=\"\") -> None:\n        pytester.makepyfile(\n            f\"\"\"\n            import pytest, warnings\n\n            warnings.warn(DeprecationWarning(\"collection\"))\n\n            {mark}\n            def test_foo():\n                warnings.warn(PendingDeprecationWarning(\"test run\"))\n        \"\"\"\n        )\n\n    @pytest.mark.parametrize(\"customize_filters\", [True, False])\n    def test_shown_by_default(self, pytester: Pytester, customize_filters) -> None:\n        \"\"\"Show deprecation warnings by default, even if user has customized the warnings filters (#4013).\"\"\"\n        self.create_file(pytester)\n        if customize_filters:\n            pytester.makeini(\n                \"\"\"\n                [pytest]\n                filterwarnings =\n                    once::UserWarning\n            \"\"\"\n            )\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines(\n            [\n                f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n                \"*test_shown_by_default.py:3: DeprecationWarning: collection\",\n                \"*test_shown_by_default.py:7: PendingDeprecationWarning: test run\",\n                \"* 1 passed, 2 warnings*\",\n            ]\n        )\n\n    def test_hidden_by_ini(self, pytester: Pytester) -> None:\n        self.create_file(pytester)\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            filterwarnings =\n                ignore::DeprecationWarning\n                ignore::PendingDeprecationWarning\n        \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        assert WARNINGS_SUMMARY_HEADER not in result.stdout.str()\n\n    def test_hidden_by_mark(self, pytester: Pytester) -> None:\n        \"\"\"Should hide the deprecation warning from the function, but the warning during collection should\n        be displayed normally.\n        \"\"\"\n        self.create_file(\n            pytester,\n            mark='@pytest.mark.filterwarnings(\"ignore::PendingDeprecationWarning\")',\n        )\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines(\n            [\n                f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n                \"*test_hidden_by_mark.py:3: DeprecationWarning: collection\",\n                \"* 1 passed, 1 warning*\",\n            ]\n        )\n\n    def test_hidden_by_cmdline(self, pytester: Pytester) -> None:\n        self.create_file(pytester)\n        result = pytester.runpytest_subprocess(\n            \"-W\",\n            \"ignore::DeprecationWarning\",\n            \"-W\",\n            \"ignore::PendingDeprecationWarning\",\n        )\n        assert WARNINGS_SUMMARY_HEADER not in result.stdout.str()\n\n    def test_hidden_by_system(self, pytester: Pytester, monkeypatch) -> None:\n        self.create_file(pytester)\n        monkeypatch.setenv(\"PYTHONWARNINGS\", \"once::UserWarning\")\n        result = pytester.runpytest_subprocess()\n        assert WARNINGS_SUMMARY_HEADER not in result.stdout.str()\n\n\n@pytest.mark.skip(\"not relevant until pytest 9.0\")\n@pytest.mark.parametrize(\"change_default\", [None, \"ini\", \"cmdline\"])\ndef test_removed_in_x_warning_as_error(pytester: Pytester, change_default) -> None:\n    \"\"\"This ensures that PytestRemovedInXWarnings raised by pytest are turned into errors.\n\n    This test should be enabled as part of each major release, and skipped again afterwards\n    to ensure our deprecations are turning into warnings as expected.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import warnings, pytest\n        def test():\n            warnings.warn(pytest.PytestRemovedIn9Warning(\"some warning\"))\n    \"\"\"\n    )\n    if change_default == \"ini\":\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            filterwarnings =\n                ignore::pytest.PytestRemovedIn9Warning\n        \"\"\"\n        )\n\n    args = (\n        (\"-Wignore::pytest.PytestRemovedIn9Warning\",)\n        if change_default == \"cmdline\"\n        else ()\n    )\n    result = pytester.runpytest(*args)\n    if change_default is None:\n        result.stdout.fnmatch_lines([\"* 1 failed in *\"])\n    else:\n        assert change_default in (\"ini\", \"cmdline\")\n        result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n\nclass TestAssertionWarnings:\n    @staticmethod\n    def assert_result_warns(result, msg) -> None:\n        result.stdout.fnmatch_lines([f\"*PytestAssertRewriteWarning: {msg}*\"])\n\n    def test_tuple_warning(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            def test_foo():\n                assert (1,2)\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        self.assert_result_warns(\n            result, \"assertion is always true, perhaps remove parentheses?\"\n        )\n\n\ndef test_warnings_checker_twice() -> None:\n    \"\"\"Issue #4617\"\"\"\n    expectation = pytest.warns(UserWarning)\n    with expectation:\n        warnings.warn(\"Message A\", UserWarning)\n    with expectation:\n        warnings.warn(\"Message B\", UserWarning)\n\n\n@pytest.mark.filterwarnings(\"always::UserWarning\")\ndef test_group_warnings_by_message(pytester: Pytester) -> None:\n    pytester.copy_example(\"warnings/test_group_warnings_by_message.py\")\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n            \"test_group_warnings_by_message.py::test_foo[[]0[]]\",\n            \"test_group_warnings_by_message.py::test_foo[[]1[]]\",\n            \"test_group_warnings_by_message.py::test_foo[[]2[]]\",\n            \"test_group_warnings_by_message.py::test_foo[[]3[]]\",\n            \"test_group_warnings_by_message.py::test_foo[[]4[]]\",\n            \"test_group_warnings_by_message.py::test_foo_1\",\n            \"  */test_group_warnings_by_message.py:*: UserWarning: foo\",\n            \"    warnings.warn(UserWarning(msg))\",\n            \"\",\n            \"test_group_warnings_by_message.py::test_bar[[]0[]]\",\n            \"test_group_warnings_by_message.py::test_bar[[]1[]]\",\n            \"test_group_warnings_by_message.py::test_bar[[]2[]]\",\n            \"test_group_warnings_by_message.py::test_bar[[]3[]]\",\n            \"test_group_warnings_by_message.py::test_bar[[]4[]]\",\n            \"  */test_group_warnings_by_message.py:*: UserWarning: bar\",\n            \"    warnings.warn(UserWarning(msg))\",\n            \"\",\n            \"-- Docs: *\",\n            \"*= 11 passed, 11 warnings *\",\n        ],\n        consecutive=True,\n    )\n\n\n@pytest.mark.filterwarnings(\"always::UserWarning\")\ndef test_group_warnings_by_message_summary(pytester: Pytester) -> None:\n    pytester.copy_example(\"warnings/test_group_warnings_by_message_summary\")\n    pytester.syspathinsert()\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"*== {WARNINGS_SUMMARY_HEADER} ==*\",\n            \"test_1.py: 21 warnings\",\n            \"test_2.py: 1 warning\",\n            \"  */test_1.py:10: UserWarning: foo\",\n            \"    warnings.warn(UserWarning(msg))\",\n            \"\",\n            \"test_1.py: 20 warnings\",\n            \"  */test_1.py:10: UserWarning: bar\",\n            \"    warnings.warn(UserWarning(msg))\",\n            \"\",\n            \"-- Docs: *\",\n            \"*= 42 passed, 42 warnings *\",\n        ],\n        consecutive=True,\n    )\n\n\ndef test_pytest_configure_warning(pytester: Pytester, recwarn) -> None:\n    \"\"\"Issue 5115.\"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_configure():\n            import warnings\n\n            warnings.warn(\"from pytest_configure\")\n        \"\"\"\n    )\n\n    result = pytester.runpytest()\n    assert result.ret == 5\n    assert \"INTERNALERROR\" not in result.stderr.str()\n    warning = recwarn.pop()\n    assert str(warning.message) == \"from pytest_configure\"\n\n\nclass TestStackLevel:\n    @pytest.fixture\n    def capwarn(self, pytester: Pytester):\n        class CapturedWarnings:\n            captured: list[\n                tuple[warnings.WarningMessage, tuple[str, int, str] | None]\n            ] = []\n\n            @classmethod\n            def pytest_warning_recorded(cls, warning_message, when, nodeid, location):\n                cls.captured.append((warning_message, location))\n\n        pytester.plugins = [CapturedWarnings()]\n\n        return CapturedWarnings\n\n    def test_issue4445_rewrite(self, pytester: Pytester, capwarn) -> None:\n        \"\"\"#4445: Make sure the warning points to a reasonable location\n        See origin of _issue_warning_captured at: _pytest.assertion.rewrite.py:241\n        \"\"\"\n        pytester.makepyfile(some_mod=\"\")\n        conftest = pytester.makeconftest(\n            \"\"\"\n                import some_mod\n                import pytest\n\n                pytest.register_assert_rewrite(\"some_mod\")\n            \"\"\"\n        )\n        pytester.parseconfig()\n\n        # with stacklevel=5 the warning originates from register_assert_rewrite\n        # function in the created conftest.py\n        assert len(capwarn.captured) == 1\n        warning, location = capwarn.captured.pop()\n        file, lineno, func = location\n\n        assert \"Module already imported\" in str(warning.message)\n        assert file == str(conftest)\n        assert func == \"<module>\"  # the above conftest.py\n        assert lineno == 4\n\n    def test_issue4445_preparse(self, pytester: Pytester, capwarn) -> None:\n        \"\"\"#4445: Make sure the warning points to a reasonable location\n        See origin of _issue_warning_captured at: _pytest.config.__init__.py:910\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import nothing\n            \"\"\"\n        )\n        pytester.parseconfig(\"--help\")\n\n        # with stacklevel=2 the warning should originate from config._preparse and is\n        # thrown by an erroneous conftest.py\n        assert len(capwarn.captured) == 1\n        warning, location = capwarn.captured.pop()\n        file, _, func = location\n\n        assert \"could not load initial conftests\" in str(warning.message)\n        assert f\"config{os.sep}__init__.py\" in file\n        assert func == \"_preparse\"\n\n    @pytest.mark.filterwarnings(\"default\")\n    def test_conftest_warning_captured(self, pytester: Pytester) -> None:\n        \"\"\"Warnings raised during importing of conftest.py files is captured (#2891).\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import warnings\n            warnings.warn(UserWarning(\"my custom warning\"))\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\"conftest.py:2\", \"*UserWarning: my custom warning*\"]\n        )\n\n    def test_issue4445_import_plugin(self, pytester: Pytester, capwarn) -> None:\n        \"\"\"#4445: Make sure the warning points to a reasonable location\"\"\"\n        pytester.makepyfile(\n            some_plugin=\"\"\"\n            import pytest\n            pytest.skip(\"thing\", allow_module_level=True)\n            \"\"\"\n        )\n        pytester.syspathinsert()\n        pytester.parseconfig(\"-p\", \"some_plugin\")\n\n        # with stacklevel=2 the warning should originate from\n        # config.PytestPluginManager.import_plugin is thrown by a skipped plugin\n\n        assert len(capwarn.captured) == 1\n        warning, location = capwarn.captured.pop()\n        file, _, func = location\n\n        assert \"skipped plugin 'some_plugin': thing\" in str(warning.message)\n        assert f\"config{os.sep}__init__.py\" in file\n        assert func == \"_warn_about_skipped_plugins\"\n\n    def test_issue4445_issue5928_mark_generator(self, pytester: Pytester) -> None:\n        \"\"\"#4445 and #5928: Make sure the warning from an unknown mark points to\n        the test file where this mark is used.\n        \"\"\"\n        testfile = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.unknown\n            def test_it():\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        # with stacklevel=2 the warning should originate from the above created test file\n        result.stdout.fnmatch_lines_random(\n            [\n                f\"*{testfile}:3*\",\n                \"*Unknown pytest.mark.unknown*\",\n            ]\n        )\n\n\ndef test_warning_on_testpaths_not_found(pytester: Pytester) -> None:\n    # Check for warning when testpaths set, but not found by glob\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        testpaths = absent\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\"*ConfigWarning: No files were found in testpaths*\", \"*1 warning*\"]\n    )\n\n\ndef test_resource_warning(pytester: Pytester, monkeypatch: pytest.MonkeyPatch) -> None:\n    # Some platforms (notably PyPy) don't have tracemalloc.\n    # We choose to explicitly not skip this in case tracemalloc is not\n    # available, using `importorskip(\"tracemalloc\")` for example,\n    # because we want to ensure the same code path does not break in those platforms.\n    try:\n        import tracemalloc  # noqa: F401\n\n        has_tracemalloc = True\n    except ImportError:\n        has_tracemalloc = False\n\n    # Explicitly disable PYTHONTRACEMALLOC in case pytest's test suite is running\n    # with it enabled.\n    monkeypatch.delenv(\"PYTHONTRACEMALLOC\", raising=False)\n\n    pytester.makepyfile(\n        \"\"\"\n        def open_file(p):\n            f = p.open(\"r\", encoding=\"utf-8\")\n            assert p.read_text() == \"hello\"\n\n        def test_resource_warning(tmp_path):\n            p = tmp_path.joinpath(\"foo.txt\")\n            p.write_text(\"hello\", encoding=\"utf-8\")\n            open_file(p)\n        \"\"\"\n    )\n    result = pytester.run(sys.executable, \"-Xdev\", \"-m\", \"pytest\")\n    expected_extra = (\n        [\n            \"*ResourceWarning* unclosed file*\",\n            \"*Enable tracemalloc to get traceback where the object was allocated*\",\n            \"*See https* for more info.\",\n        ]\n        if has_tracemalloc\n        else []\n    )\n    result.stdout.fnmatch_lines([*expected_extra, \"*1 passed*\"])\n\n    monkeypatch.setenv(\"PYTHONTRACEMALLOC\", \"20\")\n\n    result = pytester.run(sys.executable, \"-Xdev\", \"-m\", \"pytest\")\n    expected_extra = (\n        [\n            \"*ResourceWarning* unclosed file*\",\n            \"*Object allocated at*\",\n        ]\n        if has_tracemalloc\n        else []\n    )\n    result.stdout.fnmatch_lines([*expected_extra, \"*1 passed*\"])\n", "testing/test_error_diffs.py": "\"\"\"\nTests and examples for correct \"+/-\" usage in error diffs.\n\nSee https://github.com/pytest-dev/pytest/issues/3333 for details.\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nTESTCASES = [\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   [1, 4, 3]\n            expected = [1, 2, 3]\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       assert [1, 4, 3] == [1, 2, 3]\n        E         At index 1 diff: 4 != 2\n        E         Full diff:\n        E           [\n        E               1,\n        E         -     2,\n        E         ?     ^\n        E         +     4,\n        E         ?     ^\n        E               3,\n        E           ]\n        \"\"\",\n        id=\"Compare lists, one item differs\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   [1, 2, 3]\n            expected = [1, 2]\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       assert [1, 2, 3] == [1, 2]\n        E         Left contains one more item: 3\n        E         Full diff:\n        E           [\n        E               1,\n        E               2,\n        E         +     3,\n        E           ]\n        \"\"\",\n        id=\"Compare lists, one extra item\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   [1, 3]\n            expected = [1, 2, 3]\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       assert [1, 3] == [1, 2, 3]\n        E         At index 1 diff: 3 != 2\n        E         Right contains one more item: 3\n        E         Full diff:\n        E           [\n        E               1,\n        E         -     2,\n        E               3,\n        E           ]\n        \"\"\",\n        id=\"Compare lists, one item missing\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   (1, 4, 3)\n            expected = (1, 2, 3)\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       assert (1, 4, 3) == (1, 2, 3)\n        E         At index 1 diff: 4 != 2\n        E         Full diff:\n        E           (\n        E               1,\n        E         -     2,\n        E         ?     ^\n        E         +     4,\n        E         ?     ^\n        E               3,\n        E           )\n        \"\"\",\n        id=\"Compare tuples\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   {1, 3, 4}\n            expected = {1, 2, 3}\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       assert {1, 3, 4} == {1, 2, 3}\n        E         Extra items in the left set:\n        E         4\n        E         Extra items in the right set:\n        E         2\n        E         Full diff:\n        E           {\n        E               1,\n        E         -     2,\n        E               3,\n        E         +     4,\n        E           }\n        \"\"\",\n        id=\"Compare sets\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   {1: 'spam', 3: 'eggs'}\n            expected = {1: 'spam', 2: 'eggs'}\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       AssertionError: assert {1: 'spam', 3: 'eggs'} == {1: 'spam', 2: 'eggs'}\n        E         Common items:\n        E         {1: 'spam'}\n        E         Left contains 1 more item:\n        E         {3: 'eggs'}\n        E         Right contains 1 more item:\n        E         {2: 'eggs'}\n        E         Full diff:\n        E           {\n        E               1: 'spam',\n        E         -     2: 'eggs',\n        E         ?     ^\n        E         +     3: 'eggs',\n        E         ?     ^\n        E           }\n        \"\"\",\n        id=\"Compare dicts with differing keys\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   {1: 'spam', 2: 'eggs'}\n            expected = {1: 'spam', 2: 'bacon'}\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       AssertionError: assert {1: 'spam', 2: 'eggs'} == {1: 'spam', 2: 'bacon'}\n        E         Common items:\n        E         {1: 'spam'}\n        E         Differing items:\n        E         {2: 'eggs'} != {2: 'bacon'}\n        E         Full diff:\n        E           {\n        E               1: 'spam',\n        E         -     2: 'bacon',\n        E         +     2: 'eggs',\n        E           }\n        \"\"\",\n        id=\"Compare dicts with differing values\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   {1: 'spam', 2: 'eggs'}\n            expected = {1: 'spam', 3: 'bacon'}\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       AssertionError: assert {1: 'spam', 2: 'eggs'} == {1: 'spam', 3: 'bacon'}\n        E         Common items:\n        E         {1: 'spam'}\n        E         Left contains 1 more item:\n        E         {2: 'eggs'}\n        E         Right contains 1 more item:\n        E         {3: 'bacon'}\n        E         Full diff:\n        E           {\n        E               1: 'spam',\n        E         -     3: 'bacon',\n        E         +     2: 'eggs',\n        E           }\n        \"\"\",\n        id=\"Compare dicts with differing items\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   \"spmaeggs\"\n            expected = \"spameggs\"\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       AssertionError: assert 'spmaeggs' == 'spameggs'\n        E         - spameggs\n        E         ?    -\n        E         + spmaeggs\n        E         ?   +\n        \"\"\",\n        id=\"Compare strings\",\n    ),\n    pytest.param(\n        \"\"\"\n        def test_this():\n            result =   \"spam bacon eggs\"\n            assert \"bacon\" not in result\n        \"\"\",\n        \"\"\"\n        >       assert \"bacon\" not in result\n        E       AssertionError: assert 'bacon' not in 'spam bacon eggs'\n        E         'bacon' is contained here:\n        E           spam bacon eggs\n        E         ?      +++++\n        \"\"\",\n        id='Test \"not in\" string',\n    ),\n    pytest.param(\n        \"\"\"\n        from dataclasses import dataclass\n\n        @dataclass\n        class A:\n            a: int\n            b: str\n\n        def test_this():\n            result =   A(1, 'spam')\n            expected = A(2, 'spam')\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       AssertionError: assert A(a=1, b='spam') == A(a=2, b='spam')\n        E         Matching attributes:\n        E         ['b']\n        E         Differing attributes:\n        E         ['a']\n        E         Drill down into differing attribute a:\n        E           a: 1 != 2\n        \"\"\",\n        id=\"Compare data classes\",\n    ),\n    pytest.param(\n        \"\"\"\n        import attr\n\n        @attr.s(auto_attribs=True)\n        class A:\n            a: int\n            b: str\n\n        def test_this():\n            result =   A(1, 'spam')\n            expected = A(1, 'eggs')\n            assert result == expected\n        \"\"\",\n        \"\"\"\n        >       assert result == expected\n        E       AssertionError: assert A(a=1, b='spam') == A(a=1, b='eggs')\n        E         Matching attributes:\n        E         ['a']\n        E         Differing attributes:\n        E         ['b']\n        E         Drill down into differing attribute b:\n        E           b: 'spam' != 'eggs'\n        E           - eggs\n        E           + spam\n        \"\"\",\n        id=\"Compare attrs classes\",\n    ),\n]\n\n\n@pytest.mark.parametrize(\"code, expected\", TESTCASES)\ndef test_error_diff(code: str, expected: str, pytester: Pytester) -> None:\n    expected_lines = [line.lstrip() for line in expected.splitlines()]\n    p = pytester.makepyfile(code)\n    result = pytester.runpytest(p, \"-vv\")\n    result.stdout.fnmatch_lines(expected_lines)\n    assert result.ret == 1\n", "testing/test_config.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport dataclasses\nimport importlib.metadata\nimport os\nfrom pathlib import Path\nimport re\nimport sys\nimport textwrap\nfrom typing import Any\nfrom typing import Sequence\n\nimport _pytest._code\nfrom _pytest.config import _get_plugin_specs_as_list\nfrom _pytest.config import _iter_rewritable_modules\nfrom _pytest.config import _strtobool\nfrom _pytest.config import Config\nfrom _pytest.config import ConftestImportFailure\nfrom _pytest.config import ExitCode\nfrom _pytest.config import parse_warning_filter\nfrom _pytest.config.argparsing import get_ini_default_for_type\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.config.exceptions import UsageError\nfrom _pytest.config.findpaths import determine_setup\nfrom _pytest.config.findpaths import get_common_ancestor\nfrom _pytest.config.findpaths import locate_config\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nclass TestParseIni:\n    @pytest.mark.parametrize(\n        \"section, filename\", [(\"pytest\", \"pytest.ini\"), (\"tool:pytest\", \"setup.cfg\")]\n    )\n    def test_getcfg_and_config(\n        self,\n        pytester: Pytester,\n        tmp_path: Path,\n        section: str,\n        filename: str,\n        monkeypatch: MonkeyPatch,\n    ) -> None:\n        sub = tmp_path / \"sub\"\n        sub.mkdir()\n        monkeypatch.chdir(sub)\n        (tmp_path / filename).write_text(\n            textwrap.dedent(\n                f\"\"\"\\\n                [{section}]\n                name = value\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        _, _, cfg = locate_config(Path.cwd(), [sub])\n        assert cfg[\"name\"] == \"value\"\n        config = pytester.parseconfigure(str(sub))\n        assert config.inicfg[\"name\"] == \"value\"\n\n    def test_setupcfg_uses_toolpytest_with_pytest(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"def test(): pass\")\n        pytester.makefile(\n            \".cfg\",\n            setup=f\"\"\"\n                [tool:pytest]\n                testpaths={p1.name}\n                [pytest]\n                testpaths=ignored\n        \"\"\",\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"configfile: setup.cfg\", \"* 1 passed in *\"])\n        assert result.ret == 0\n\n    def test_append_parse_args(\n        self, pytester: Pytester, tmp_path: Path, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.setenv(\"PYTEST_ADDOPTS\", '--color no -rs --tb=\"short\"')\n        tmp_path.joinpath(\"pytest.ini\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                [pytest]\n                addopts = --verbose\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        config = pytester.parseconfig(tmp_path)\n        assert config.option.color == \"no\"\n        assert config.option.reportchars == \"s\"\n        assert config.option.tbstyle == \"short\"\n        assert config.option.verbose\n\n    def test_tox_ini_wrong_version(self, pytester: Pytester) -> None:\n        pytester.makefile(\n            \".ini\",\n            tox=\"\"\"\n            [pytest]\n            minversion=999.0\n        \"\"\",\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        result.stderr.fnmatch_lines(\n            [\"*tox.ini: 'minversion' requires pytest-999.0, actual pytest-*\"]\n        )\n\n    @pytest.mark.parametrize(\n        \"section, name\",\n        [\n            (\"tool:pytest\", \"setup.cfg\"),\n            (\"pytest\", \"tox.ini\"),\n            (\"pytest\", \"pytest.ini\"),\n            (\"pytest\", \".pytest.ini\"),\n        ],\n    )\n    def test_ini_names(self, pytester: Pytester, name, section) -> None:\n        pytester.path.joinpath(name).write_text(\n            textwrap.dedent(\n                f\"\"\"\n            [{section}]\n            minversion = 3.36\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        config = pytester.parseconfig()\n        assert config.getini(\"minversion\") == \"3.36\"\n\n    def test_pyproject_toml(self, pytester: Pytester) -> None:\n        pyproject_toml = pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            minversion = \"1.0\"\n        \"\"\"\n        )\n        config = pytester.parseconfig()\n        assert config.inipath == pyproject_toml\n        assert config.getini(\"minversion\") == \"1.0\"\n\n    def test_empty_pyproject_toml(self, pytester: Pytester) -> None:\n        \"\"\"An empty pyproject.toml is considered as config if no other option is found.\"\"\"\n        pyproject_toml = pytester.makepyprojecttoml(\"\")\n        config = pytester.parseconfig()\n        assert config.inipath == pyproject_toml\n\n    def test_empty_pyproject_toml_found_many(self, pytester: Pytester) -> None:\n        \"\"\"\n        In case we find multiple pyproject.toml files in our search, without a [tool.pytest.ini_options]\n        table and without finding other candidates, the closest to where we started wins.\n        \"\"\"\n        pytester.makefile(\n            \".toml\",\n            **{\n                \"pyproject\": \"\",\n                \"foo/pyproject\": \"\",\n                \"foo/bar/pyproject\": \"\",\n            },\n        )\n        config = pytester.parseconfig(pytester.path / \"foo/bar\")\n        assert config.inipath == pytester.path / \"foo/bar/pyproject.toml\"\n\n    def test_pytest_ini_trumps_pyproject_toml(self, pytester: Pytester) -> None:\n        \"\"\"A pytest.ini always take precedence over a pyproject.toml file.\"\"\"\n        pytester.makepyprojecttoml(\"[tool.pytest.ini_options]\")\n        pytest_ini = pytester.makefile(\".ini\", pytest=\"\")\n        config = pytester.parseconfig()\n        assert config.inipath == pytest_ini\n\n    def test_toxini_before_lower_pytestini(self, pytester: Pytester) -> None:\n        sub = pytester.mkdir(\"sub\")\n        sub.joinpath(\"tox.ini\").write_text(\n            textwrap.dedent(\n                \"\"\"\n            [pytest]\n            minversion = 2.0\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        pytester.path.joinpath(\"pytest.ini\").write_text(\n            textwrap.dedent(\n                \"\"\"\n            [pytest]\n            minversion = 1.5\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        config = pytester.parseconfigure(sub)\n        assert config.getini(\"minversion\") == \"2.0\"\n\n    def test_ini_parse_error(self, pytester: Pytester) -> None:\n        pytester.path.joinpath(\"pytest.ini\").write_text(\n            \"addopts = -x\", encoding=\"utf-8\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        result.stderr.fnmatch_lines(\"ERROR: *pytest.ini:1: no section header defined\")\n\n    def test_toml_parse_error(self, pytester: Pytester) -> None:\n        pytester.makepyprojecttoml(\n            \"\"\"\n            \\\\\"\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        result.stderr.fnmatch_lines(\"ERROR: *pyproject.toml: Invalid statement*\")\n\n    def test_confcutdir_default_without_configfile(self, pytester: Pytester) -> None:\n        # If --confcutdir is not specified, and there is no configfile, default\n        # to the rootpath.\n        sub = pytester.mkdir(\"sub\")\n        os.chdir(sub)\n        config = pytester.parseconfigure()\n        assert config.pluginmanager._confcutdir == sub\n\n    def test_confcutdir_default_with_configfile(self, pytester: Pytester) -> None:\n        # If --confcutdir is not specified, and there is a configfile, default\n        # to the configfile's directory.\n        pytester.makeini(\"[pytest]\")\n        sub = pytester.mkdir(\"sub\")\n        os.chdir(sub)\n        config = pytester.parseconfigure()\n        assert config.pluginmanager._confcutdir == pytester.path\n\n    @pytest.mark.xfail(reason=\"probably not needed\")\n    def test_confcutdir(self, pytester: Pytester) -> None:\n        sub = pytester.mkdir(\"sub\")\n        os.chdir(sub)\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            addopts = --qwe\n        \"\"\"\n        )\n        result = pytester.inline_run(\"--confcutdir=.\")\n        assert result.ret == 0\n\n    @pytest.mark.parametrize(\n        \"ini_file_text, invalid_keys, warning_output, exception_text\",\n        [\n            pytest.param(\n                \"\"\"\n                [pytest]\n                unknown_ini = value1\n                another_unknown_ini = value2\n                \"\"\",\n                [\"unknown_ini\", \"another_unknown_ini\"],\n                [\n                    \"=*= warnings summary =*=\",\n                    \"*PytestConfigWarning:*Unknown config option: another_unknown_ini\",\n                    \"*PytestConfigWarning:*Unknown config option: unknown_ini\",\n                ],\n                \"Unknown config option: another_unknown_ini\",\n                id=\"2-unknowns\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                unknown_ini = value1\n                minversion = 5.0.0\n                \"\"\",\n                [\"unknown_ini\"],\n                [\n                    \"=*= warnings summary =*=\",\n                    \"*PytestConfigWarning:*Unknown config option: unknown_ini\",\n                ],\n                \"Unknown config option: unknown_ini\",\n                id=\"1-unknown\",\n            ),\n            pytest.param(\n                \"\"\"\n                [some_other_header]\n                unknown_ini = value1\n                [pytest]\n                minversion = 5.0.0\n                \"\"\",\n                [],\n                [],\n                \"\",\n                id=\"unknown-in-other-header\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                minversion = 5.0.0\n                \"\"\",\n                [],\n                [],\n                \"\",\n                id=\"no-unknowns\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                conftest_ini_key = 1\n                \"\"\",\n                [],\n                [],\n                \"\",\n                id=\"1-known\",\n            ),\n        ],\n    )\n    @pytest.mark.filterwarnings(\"default\")\n    def test_invalid_config_options(\n        self,\n        pytester: Pytester,\n        ini_file_text,\n        invalid_keys,\n        warning_output,\n        exception_text,\n    ) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"conftest_ini_key\", \"\")\n            \"\"\"\n        )\n        pytester.makepyfile(\"def test(): pass\")\n        pytester.makeini(ini_file_text)\n\n        config = pytester.parseconfig()\n        assert sorted(config._get_unknown_ini_keys()) == sorted(invalid_keys)\n\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(warning_output)\n\n        result = pytester.runpytest(\"--strict-config\")\n        if exception_text:\n            result.stderr.fnmatch_lines(\"ERROR: \" + exception_text)\n            assert result.ret == pytest.ExitCode.USAGE_ERROR\n        else:\n            result.stderr.no_fnmatch_line(exception_text)\n            assert result.ret == pytest.ExitCode.OK\n\n    @pytest.mark.filterwarnings(\"default\")\n    def test_silence_unknown_key_warning(self, pytester: Pytester) -> None:\n        \"\"\"Unknown config key warnings can be silenced using filterwarnings (#7620)\"\"\"\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            filterwarnings =\n                ignore:Unknown config option:pytest.PytestConfigWarning\n            foobar=1\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.no_fnmatch_line(\"*PytestConfigWarning*\")\n\n    @pytest.mark.filterwarnings(\"default::pytest.PytestConfigWarning\")\n    def test_disable_warnings_plugin_disables_config_warnings(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Disabling 'warnings' plugin also disables config time warnings\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_configure(config):\n                config.issue_config_time_warning(\n                    pytest.PytestConfigWarning(\"custom config warning\"),\n                    stacklevel=2,\n                )\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-pno:warnings\")\n        result.stdout.no_fnmatch_line(\"*PytestConfigWarning*\")\n\n    @pytest.mark.parametrize(\n        \"ini_file_text, plugin_version, exception_text\",\n        [\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = a z\n                \"\"\",\n                \"1.5\",\n                \"Missing required plugins: a, z\",\n                id=\"2-missing\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = a z myplugin\n                \"\"\",\n                \"1.5\",\n                \"Missing required plugins: a, z\",\n                id=\"2-missing-1-ok\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = myplugin\n                \"\"\",\n                \"1.5\",\n                None,\n                id=\"1-ok\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = myplugin==1.5\n                \"\"\",\n                \"1.5\",\n                None,\n                id=\"1-ok-pin-exact\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = myplugin>1.0,<2.0\n                \"\"\",\n                \"1.5\",\n                None,\n                id=\"1-ok-pin-loose\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = myplugin\n                \"\"\",\n                \"1.5a1\",\n                None,\n                id=\"1-ok-prerelease\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = myplugin==1.6\n                \"\"\",\n                \"1.5\",\n                \"Missing required plugins: myplugin==1.6\",\n                id=\"missing-version\",\n            ),\n            pytest.param(\n                \"\"\"\n                [pytest]\n                required_plugins = myplugin==1.6 other==1.0\n                \"\"\",\n                \"1.5\",\n                \"Missing required plugins: myplugin==1.6, other==1.0\",\n                id=\"missing-versions\",\n            ),\n            pytest.param(\n                \"\"\"\n                [some_other_header]\n                required_plugins = won't be triggered\n                [pytest]\n                \"\"\",\n                \"1.5\",\n                None,\n                id=\"invalid-header\",\n            ),\n        ],\n    )\n    def test_missing_required_plugins(\n        self,\n        pytester: Pytester,\n        monkeypatch: MonkeyPatch,\n        ini_file_text: str,\n        plugin_version: str,\n        exception_text: str,\n    ) -> None:\n        \"\"\"Check 'required_plugins' option with various settings.\n\n        This test installs a mock \"myplugin-1.5\" which is used in the parametrized test cases.\n        \"\"\"\n\n        @dataclasses.dataclass\n        class DummyEntryPoint:\n            name: str\n            module: str\n            group: str = \"pytest11\"\n\n            def load(self):\n                __import__(self.module)\n                return sys.modules[self.module]\n\n        entry_points = [\n            DummyEntryPoint(\"myplugin1\", \"myplugin1_module\"),\n        ]\n\n        @dataclasses.dataclass\n        class DummyDist:\n            entry_points: object\n            files: object = ()\n            version: str = plugin_version\n\n            @property\n            def metadata(self):\n                return {\"name\": \"myplugin\"}\n\n        def my_dists():\n            return [DummyDist(entry_points)]\n\n        pytester.makepyfile(myplugin1_module=\"# my plugin module\")\n        pytester.syspathinsert()\n\n        monkeypatch.setattr(importlib.metadata, \"distributions\", my_dists)\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n\n        pytester.makeini(ini_file_text)\n\n        if exception_text:\n            with pytest.raises(pytest.UsageError, match=exception_text):\n                pytester.parseconfig()\n        else:\n            pytester.parseconfig()\n\n    def test_early_config_cmdline(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        \"\"\"early_config contains options registered by third-party plugins.\n\n        This is a regression involving pytest-cov (and possibly others) introduced in #7700.\n        \"\"\"\n        pytester.makepyfile(\n            myplugin=\"\"\"\n            def pytest_addoption(parser):\n                parser.addoption('--foo', default=None, dest='foo')\n\n            def pytest_load_initial_conftests(early_config, parser, args):\n                assert early_config.known_args_namespace.foo == \"1\"\n            \"\"\"\n        )\n        monkeypatch.setenv(\"PYTEST_PLUGINS\", \"myplugin\")\n        pytester.syspathinsert()\n        result = pytester.runpytest(\"--foo=1\")\n        result.stdout.fnmatch_lines(\"* no tests ran in *\")\n\n    def test_args_source_args(self, pytester: Pytester):\n        config = pytester.parseconfig(\"--\", \"test_filename.py\")\n        assert config.args_source == Config.ArgsSource.ARGS\n\n    def test_args_source_invocation_dir(self, pytester: Pytester):\n        config = pytester.parseconfig()\n        assert config.args_source == Config.ArgsSource.INVOCATION_DIR\n\n    def test_args_source_testpaths(self, pytester: Pytester):\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            testpaths=*\n        \"\"\"\n        )\n        config = pytester.parseconfig()\n        assert config.args_source == Config.ArgsSource.TESTPATHS\n\n\nclass TestConfigCmdlineParsing:\n    def test_parsing_again_fails(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        pytest.raises(AssertionError, lambda: config.parse([]))\n\n    def test_explicitly_specified_config_file_is_loaded(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"custom\", \"\")\n        \"\"\"\n        )\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            custom = 0\n        \"\"\"\n        )\n        pytester.makefile(\n            \".ini\",\n            custom=\"\"\"\n            [pytest]\n            custom = 1\n        \"\"\",\n        )\n        config = pytester.parseconfig(\"-c\", \"custom.ini\")\n        assert config.getini(\"custom\") == \"1\"\n        config = pytester.parseconfig(\"--config-file\", \"custom.ini\")\n        assert config.getini(\"custom\") == \"1\"\n\n        pytester.makefile(\n            \".cfg\",\n            custom_tool_pytest_section=\"\"\"\n            [tool:pytest]\n            custom = 1\n        \"\"\",\n        )\n        config = pytester.parseconfig(\"-c\", \"custom_tool_pytest_section.cfg\")\n        assert config.getini(\"custom\") == \"1\"\n        config = pytester.parseconfig(\"--config-file\", \"custom_tool_pytest_section.cfg\")\n        assert config.getini(\"custom\") == \"1\"\n\n        pytester.makefile(\n            \".toml\",\n            custom=\"\"\"\n                [tool.pytest.ini_options]\n                custom = 1\n                value = [\n                ]  # this is here on purpose, as it makes this an invalid '.ini' file\n            \"\"\",\n        )\n        config = pytester.parseconfig(\"-c\", \"custom.toml\")\n        assert config.getini(\"custom\") == \"1\"\n        config = pytester.parseconfig(\"--config-file\", \"custom.toml\")\n        assert config.getini(\"custom\") == \"1\"\n\n    def test_absolute_win32_path(self, pytester: Pytester) -> None:\n        temp_ini_file = pytester.makefile(\n            \".ini\",\n            custom=\"\"\"\n            [pytest]\n            addopts = --version\n        \"\"\",\n        )\n        from os.path import normpath\n\n        temp_ini_file_norm = normpath(str(temp_ini_file))\n        ret = pytest.main([\"-c\", temp_ini_file_norm])\n        assert ret == ExitCode.OK\n        ret = pytest.main([\"--config-file\", temp_ini_file_norm])\n        assert ret == ExitCode.OK\n\n\nclass TestConfigAPI:\n    def test_config_trace(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        values: list[str] = []\n        config.trace.root.setwriter(values.append)\n        config.trace(\"hello\")\n        assert len(values) == 1\n        assert values[0] == \"hello [config]\\n\"\n\n    def test_config_getoption(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addoption(\"--hello\", \"-X\", dest=\"hello\")\n        \"\"\"\n        )\n        config = pytester.parseconfig(\"--hello=this\")\n        for x in (\"hello\", \"--hello\", \"-X\"):\n            assert config.getoption(x) == \"this\"\n        pytest.raises(ValueError, config.getoption, \"qweqwe\")\n\n    def test_config_getoption_unicode(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addoption('--hello', type=str)\n        \"\"\"\n        )\n        config = pytester.parseconfig(\"--hello=this\")\n        assert config.getoption(\"hello\") == \"this\"\n\n    def test_config_getvalueorskip(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        pytest.raises(pytest.skip.Exception, config.getvalueorskip, \"hello\")\n        verbose = config.getvalueorskip(\"verbose\")\n        assert verbose == config.option.verbose\n\n    def test_config_getvalueorskip_None(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addoption(\"--hello\")\n        \"\"\"\n        )\n        config = pytester.parseconfig()\n        with pytest.raises(pytest.skip.Exception):\n            config.getvalueorskip(\"hello\")\n\n    def test_getoption(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        with pytest.raises(ValueError):\n            config.getvalue(\"x\")\n        assert config.getoption(\"x\", 1) == 1\n\n    def test_getconftest_pathlist(self, pytester: Pytester, tmp_path: Path) -> None:\n        somepath = tmp_path.joinpath(\"x\", \"y\", \"z\")\n        p = tmp_path.joinpath(\"conftest.py\")\n        p.write_text(f\"mylist = {['.', str(somepath)]}\", encoding=\"utf-8\")\n        config = pytester.parseconfigure(p)\n        assert config._getconftest_pathlist(\"notexist\", path=tmp_path) is None\n        assert config._getconftest_pathlist(\"mylist\", path=tmp_path) == [\n            tmp_path,\n            somepath,\n        ]\n\n    @pytest.mark.parametrize(\"maybe_type\", [\"not passed\", \"None\", '\"string\"'])\n    def test_addini(self, pytester: Pytester, maybe_type: str) -> None:\n        if maybe_type == \"not passed\":\n            type_string = \"\"\n        else:\n            type_string = f\", {maybe_type}\"\n\n        pytester.makeconftest(\n            f\"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"myname\", \"my new ini value\"{type_string})\n        \"\"\"\n        )\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            myname=hello\n        \"\"\"\n        )\n        config = pytester.parseconfig()\n        val = config.getini(\"myname\")\n        assert val == \"hello\"\n        pytest.raises(ValueError, config.getini, \"other\")\n\n    @pytest.mark.parametrize(\"config_type\", [\"ini\", \"pyproject\"])\n    def test_addini_paths(self, pytester: Pytester, config_type: str) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"paths\", \"my new ini value\", type=\"paths\")\n                parser.addini(\"abc\", \"abc value\")\n        \"\"\"\n        )\n        if config_type == \"ini\":\n            inipath = pytester.makeini(\n                \"\"\"\n                [pytest]\n                paths=hello world/sub.py\n            \"\"\"\n            )\n        elif config_type == \"pyproject\":\n            inipath = pytester.makepyprojecttoml(\n                \"\"\"\n                [tool.pytest.ini_options]\n                paths=[\"hello\", \"world/sub.py\"]\n            \"\"\"\n            )\n        config = pytester.parseconfig()\n        values = config.getini(\"paths\")\n        assert len(values) == 2\n        assert values[0] == inipath.parent.joinpath(\"hello\")\n        assert values[1] == inipath.parent.joinpath(\"world/sub.py\")\n        pytest.raises(ValueError, config.getini, \"other\")\n\n    def make_conftest_for_args(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"args\", \"new args\", type=\"args\")\n                parser.addini(\"a2\", \"\", \"args\", default=\"1 2 3\".split())\n        \"\"\"\n        )\n\n    def test_addini_args_ini_files(self, pytester: Pytester) -> None:\n        self.make_conftest_for_args(pytester)\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            args=123 \"123 hello\" \"this\"\n            \"\"\"\n        )\n        self.check_config_args(pytester)\n\n    def test_addini_args_pyproject_toml(self, pytester: Pytester) -> None:\n        self.make_conftest_for_args(pytester)\n        pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            args = [\"123\", \"123 hello\", \"this\"]\n            \"\"\"\n        )\n        self.check_config_args(pytester)\n\n    def check_config_args(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        values = config.getini(\"args\")\n        assert values == [\"123\", \"123 hello\", \"this\"]\n        values = config.getini(\"a2\")\n        assert values == list(\"123\")\n\n    def make_conftest_for_linelist(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"xy\", \"\", type=\"linelist\")\n                parser.addini(\"a2\", \"\", \"linelist\")\n        \"\"\"\n        )\n\n    def test_addini_linelist_ini_files(self, pytester: Pytester) -> None:\n        self.make_conftest_for_linelist(pytester)\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            xy= 123 345\n                second line\n        \"\"\"\n        )\n        self.check_config_linelist(pytester)\n\n    def test_addini_linelist_pprojecttoml(self, pytester: Pytester) -> None:\n        self.make_conftest_for_linelist(pytester)\n        pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            xy = [\"123 345\", \"second line\"]\n        \"\"\"\n        )\n        self.check_config_linelist(pytester)\n\n    def check_config_linelist(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        values = config.getini(\"xy\")\n        assert len(values) == 2\n        assert values == [\"123 345\", \"second line\"]\n        values = config.getini(\"a2\")\n        assert values == []\n\n    @pytest.mark.parametrize(\n        \"str_val, bool_val\", [(\"True\", True), (\"no\", False), (\"no-ini\", True)]\n    )\n    def test_addini_bool(\n        self, pytester: Pytester, str_val: str, bool_val: bool\n    ) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"strip\", \"\", type=\"bool\", default=True)\n        \"\"\"\n        )\n        if str_val != \"no-ini\":\n            pytester.makeini(\n                f\"\"\"\n                [pytest]\n                strip={str_val}\n            \"\"\"\n            )\n        config = pytester.parseconfig()\n        assert config.getini(\"strip\") is bool_val\n\n    def test_addinivalue_line_existing(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"xy\", \"\", type=\"linelist\")\n        \"\"\"\n        )\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            xy= 123\n        \"\"\"\n        )\n        config = pytester.parseconfig()\n        values = config.getini(\"xy\")\n        assert len(values) == 1\n        assert values == [\"123\"]\n        config.addinivalue_line(\"xy\", \"456\")\n        values = config.getini(\"xy\")\n        assert len(values) == 2\n        assert values == [\"123\", \"456\"]\n\n    def test_addinivalue_line_new(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"xy\", \"\", type=\"linelist\")\n        \"\"\"\n        )\n        config = pytester.parseconfig()\n        assert not config.getini(\"xy\")\n        config.addinivalue_line(\"xy\", \"456\")\n        values = config.getini(\"xy\")\n        assert len(values) == 1\n        assert values == [\"456\"]\n        config.addinivalue_line(\"xy\", \"123\")\n        values = config.getini(\"xy\")\n        assert len(values) == 2\n        assert values == [\"456\", \"123\"]\n\n    def test_addini_default_values(self, pytester: Pytester) -> None:\n        \"\"\"Tests the default values for configuration based on\n        config type\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"linelist1\", \"\", type=\"linelist\")\n                parser.addini(\"paths1\", \"\", type=\"paths\")\n                parser.addini(\"pathlist1\", \"\", type=\"pathlist\")\n                parser.addini(\"args1\", \"\", type=\"args\")\n                parser.addini(\"bool1\", \"\", type=\"bool\")\n                parser.addini(\"string1\", \"\", type=\"string\")\n                parser.addini(\"none_1\", \"\", type=\"linelist\", default=None)\n                parser.addini(\"none_2\", \"\", default=None)\n                parser.addini(\"no_type\", \"\")\n        \"\"\"\n        )\n\n        config = pytester.parseconfig()\n        # default for linelist, paths, pathlist and args is []\n        value = config.getini(\"linelist1\")\n        assert value == []\n        value = config.getini(\"paths1\")\n        assert value == []\n        value = config.getini(\"pathlist1\")\n        assert value == []\n        value = config.getini(\"args1\")\n        assert value == []\n        # default for bool is False\n        value = config.getini(\"bool1\")\n        assert value is False\n        # default for string is \"\"\n        value = config.getini(\"string1\")\n        assert value == \"\"\n        # should return None if None is explicity set as default value\n        # irrespective of the type argument\n        value = config.getini(\"none_1\")\n        assert value is None\n        value = config.getini(\"none_2\")\n        assert value is None\n        # in case no type is provided and no default set\n        # treat it as string and default value will be \"\"\n        value = config.getini(\"no_type\")\n        assert value == \"\"\n\n    @pytest.mark.parametrize(\n        \"type, expected\",\n        [\n            pytest.param(None, \"\", id=\"None\"),\n            pytest.param(\"string\", \"\", id=\"string\"),\n            pytest.param(\"paths\", [], id=\"paths\"),\n            pytest.param(\"pathlist\", [], id=\"pathlist\"),\n            pytest.param(\"args\", [], id=\"args\"),\n            pytest.param(\"linelist\", [], id=\"linelist\"),\n            pytest.param(\"bool\", False, id=\"bool\"),\n        ],\n    )\n    def test_get_ini_default_for_type(self, type: Any, expected: Any) -> None:\n        assert get_ini_default_for_type(type) == expected\n\n    def test_confcutdir_check_isdir(self, pytester: Pytester) -> None:\n        \"\"\"Give an error if --confcutdir is not a valid directory (#2078)\"\"\"\n        exp_match = r\"^--confcutdir must be a directory, given: \"\n        with pytest.raises(pytest.UsageError, match=exp_match):\n            pytester.parseconfig(\"--confcutdir\", pytester.path.joinpath(\"file\"))\n        with pytest.raises(pytest.UsageError, match=exp_match):\n            pytester.parseconfig(\"--confcutdir\", pytester.path.joinpath(\"nonexistent\"))\n\n        p = pytester.mkdir(\"dir\")\n        config = pytester.parseconfig(\"--confcutdir\", p)\n        assert config.getoption(\"confcutdir\") == str(p)\n\n    @pytest.mark.parametrize(\n        \"names, expected\",\n        [\n            # dist-info based distributions root are files as will be put in PYTHONPATH\n            ([\"bar.py\"], [\"bar\"]),\n            ([\"foo/bar.py\"], [\"bar\"]),\n            ([\"foo/bar.pyc\"], []),\n            ([\"foo/__init__.py\"], [\"foo\"]),\n            ([\"bar/__init__.py\", \"xz.py\"], [\"bar\", \"xz\"]),\n            ([\"setup.py\"], []),\n            # egg based distributions root contain the files from the dist root\n            ([\"src/bar/__init__.py\"], [\"bar\"]),\n            ([\"src/bar/__init__.py\", \"setup.py\"], [\"bar\"]),\n            ([\"source/python/bar/__init__.py\", \"setup.py\"], [\"bar\"]),\n            # editable installation finder modules\n            ([\"__editable___xyz_finder.py\"], []),\n            ([\"bar/__init__.py\", \"__editable___xyz_finder.py\"], [\"bar\"]),\n        ],\n    )\n    def test_iter_rewritable_modules(self, names, expected) -> None:\n        assert list(_iter_rewritable_modules(names)) == expected\n\n\nclass TestConfigFromdictargs:\n    def test_basic_behavior(self, _sys_snapshot) -> None:\n        option_dict = {\"verbose\": 444, \"foo\": \"bar\", \"capture\": \"no\"}\n        args = [\"a\", \"b\"]\n\n        config = Config.fromdictargs(option_dict, args)\n        with pytest.raises(AssertionError):\n            config.parse([\"should refuse to parse again\"])\n        assert config.option.verbose == 444\n        assert config.option.foo == \"bar\"\n        assert config.option.capture == \"no\"\n        assert config.args == args\n\n    def test_invocation_params_args(self, _sys_snapshot) -> None:\n        \"\"\"Show that fromdictargs can handle args in their \"orig\" format\"\"\"\n        option_dict: dict[str, object] = {}\n        args = [\"-vvvv\", \"-s\", \"a\", \"b\"]\n\n        config = Config.fromdictargs(option_dict, args)\n        assert config.args == [\"a\", \"b\"]\n        assert config.invocation_params.args == tuple(args)\n        assert config.option.verbose == 4\n        assert config.option.capture == \"no\"\n\n    def test_inifilename(self, tmp_path: Path) -> None:\n        d1 = tmp_path.joinpath(\"foo\")\n        d1.mkdir()\n        p1 = d1.joinpath(\"bar.ini\")\n        p1.touch()\n        p1.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                [pytest]\n                name = value\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        inifilename = \"../../foo/bar.ini\"\n        option_dict = {\"inifilename\": inifilename, \"capture\": \"no\"}\n\n        cwd = tmp_path.joinpath(\"a/b\")\n        cwd.mkdir(parents=True)\n        p2 = cwd.joinpath(\"pytest.ini\")\n        p2.touch()\n        p2.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                [pytest]\n                name = wrong-value\n                should_not_be_set = true\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        with MonkeyPatch.context() as mp:\n            mp.chdir(cwd)\n            config = Config.fromdictargs(option_dict, ())\n            inipath = absolutepath(inifilename)\n\n        assert config.args == [str(cwd)]\n        assert config.option.inifilename == inifilename\n        assert config.option.capture == \"no\"\n\n        # this indicates this is the file used for getting configuration values\n        assert config.inipath == inipath\n        assert config.inicfg.get(\"name\") == \"value\"\n        assert config.inicfg.get(\"should_not_be_set\") is None\n\n\ndef test_options_on_small_file_do_not_blow_up(pytester: Pytester) -> None:\n    def runfiletest(opts: Sequence[str]) -> None:\n        reprec = pytester.inline_run(*opts)\n        passed, skipped, failed = reprec.countoutcomes()\n        assert failed == 2\n        assert skipped == passed == 0\n\n    path = str(\n        pytester.makepyfile(\n            \"\"\"\n        def test_f1(): assert 0\n        def test_f2(): assert 0\n    \"\"\"\n        )\n    )\n\n    runfiletest([path])\n    runfiletest([\"-l\", path])\n    runfiletest([\"-s\", path])\n    runfiletest([\"--tb=no\", path])\n    runfiletest([\"--tb=short\", path])\n    runfiletest([\"--tb=long\", path])\n    runfiletest([\"--fulltrace\", path])\n    runfiletest([\"--traceconfig\", path])\n    runfiletest([\"-v\", path])\n    runfiletest([\"-v\", \"-v\", path])\n\n\ndef test_preparse_ordering_with_setuptools(\n    pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n\n    class EntryPoint:\n        name = \"mytestplugin\"\n        group = \"pytest11\"\n\n        def load(self):\n            class PseudoPlugin:\n                x = 42\n\n            return PseudoPlugin()\n\n    class Dist:\n        files = ()\n        metadata = {\"name\": \"foo\"}\n        entry_points = (EntryPoint(),)\n\n    def my_dists():\n        return (Dist,)\n\n    monkeypatch.setattr(importlib.metadata, \"distributions\", my_dists)\n    pytester.makeconftest(\n        \"\"\"\n        pytest_plugins = \"mytestplugin\",\n    \"\"\"\n    )\n    monkeypatch.setenv(\"PYTEST_PLUGINS\", \"mytestplugin\")\n    config = pytester.parseconfig()\n    plugin = config.pluginmanager.getplugin(\"mytestplugin\")\n    assert plugin.x == 42\n\n\ndef test_setuptools_importerror_issue1479(\n    pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n\n    class DummyEntryPoint:\n        name = \"mytestplugin\"\n        group = \"pytest11\"\n\n        def load(self):\n            raise ImportError(\"Don't hide me!\")\n\n    class Distribution:\n        version = \"1.0\"\n        files = (\"foo.txt\",)\n        metadata = {\"name\": \"foo\"}\n        entry_points = (DummyEntryPoint(),)\n\n    def distributions():\n        return (Distribution(),)\n\n    monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n    with pytest.raises(ImportError):\n        pytester.parseconfig()\n\n\ndef test_importlib_metadata_broken_distribution(\n    pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    \"\"\"Integration test for broken distributions with 'files' metadata being None (#5389)\"\"\"\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n\n    class DummyEntryPoint:\n        name = \"mytestplugin\"\n        group = \"pytest11\"\n\n        def load(self):\n            return object()\n\n    class Distribution:\n        version = \"1.0\"\n        files = None\n        metadata = {\"name\": \"foo\"}\n        entry_points = (DummyEntryPoint(),)\n\n    def distributions():\n        return (Distribution(),)\n\n    monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n    pytester.parseconfig()\n\n\n@pytest.mark.parametrize(\"block_it\", [True, False])\ndef test_plugin_preparse_prevents_setuptools_loading(\n    pytester: Pytester, monkeypatch: MonkeyPatch, block_it: bool\n) -> None:\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n\n    plugin_module_placeholder = object()\n\n    class DummyEntryPoint:\n        name = \"mytestplugin\"\n        group = \"pytest11\"\n\n        def load(self):\n            return plugin_module_placeholder\n\n    class Distribution:\n        version = \"1.0\"\n        files = (\"foo.txt\",)\n        metadata = {\"name\": \"foo\"}\n        entry_points = (DummyEntryPoint(),)\n\n    def distributions():\n        return (Distribution(),)\n\n    monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n    args = (\"-p\", \"no:mytestplugin\") if block_it else ()\n    config = pytester.parseconfig(*args)\n    config.pluginmanager.import_plugin(\"mytestplugin\")\n    if block_it:\n        assert \"mytestplugin\" not in sys.modules\n        assert config.pluginmanager.get_plugin(\"mytestplugin\") is None\n    else:\n        assert (\n            config.pluginmanager.get_plugin(\"mytestplugin\") is plugin_module_placeholder\n        )\n\n\n@pytest.mark.parametrize(\n    \"parse_args,should_load\", [((\"-p\", \"mytestplugin\"), True), ((), False)]\n)\ndef test_disable_plugin_autoload(\n    pytester: Pytester,\n    monkeypatch: MonkeyPatch,\n    parse_args: tuple[str, str] | tuple[()],\n    should_load: bool,\n) -> None:\n    class DummyEntryPoint:\n        project_name = name = \"mytestplugin\"\n        group = \"pytest11\"\n        version = \"1.0\"\n\n        def load(self):\n            return sys.modules[self.name]\n\n    class Distribution:\n        metadata = {\"name\": \"foo\"}\n        entry_points = (DummyEntryPoint(),)\n        files = ()\n\n    class PseudoPlugin:\n        x = 42\n\n        attrs_used = []\n\n        def __getattr__(self, name):\n            assert name == \"__loader__\"\n            self.attrs_used.append(name)\n            return object()\n\n    def distributions():\n        return (Distribution(),)\n\n    monkeypatch.setenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", \"1\")\n    monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n    monkeypatch.setitem(sys.modules, \"mytestplugin\", PseudoPlugin())\n    config = pytester.parseconfig(*parse_args)\n    has_loaded = config.pluginmanager.get_plugin(\"mytestplugin\") is not None\n    assert has_loaded == should_load\n    if should_load:\n        assert PseudoPlugin.attrs_used == [\"__loader__\"]\n    else:\n        assert PseudoPlugin.attrs_used == []\n\n\ndef test_plugin_loading_order(pytester: Pytester) -> None:\n    \"\"\"Test order of plugin loading with `-p`.\"\"\"\n    p1 = pytester.makepyfile(\n        \"\"\"\n        def test_terminal_plugin(request):\n            import myplugin\n            assert myplugin.terminal_plugin == [False, True]\n        \"\"\",\n        myplugin=\"\"\"\n            terminal_plugin = []\n\n            def pytest_configure(config):\n                terminal_plugin.append(bool(config.pluginmanager.get_plugin(\"terminalreporter\")))\n\n            def pytest_sessionstart(session):\n                config = session.config\n                terminal_plugin.append(bool(config.pluginmanager.get_plugin(\"terminalreporter\")))\n            \"\"\",\n    )\n    pytester.syspathinsert()\n    result = pytester.runpytest(\"-p\", \"myplugin\", str(p1))\n    assert result.ret == 0\n\n\ndef test_invalid_options_show_extra_information(pytester: Pytester) -> None:\n    \"\"\"Display extra information when pytest exits due to unrecognized\n    options in the command-line.\"\"\"\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        addopts = --invalid-option\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stderr.fnmatch_lines(\n        [\n            \"*error: unrecognized arguments: --invalid-option*\",\n            \"*  inifile: {}*\".format(pytester.path.joinpath(\"tox.ini\")),\n            f\"*  rootdir: {pytester.path}*\",\n        ]\n    )\n\n\n@pytest.mark.parametrize(\n    \"args\",\n    [\n        [\"dir1\", \"dir2\", \"-v\"],\n        [\"dir1\", \"-v\", \"dir2\"],\n        [\"dir2\", \"-v\", \"dir1\"],\n        [\"-v\", \"dir2\", \"dir1\"],\n    ],\n)\ndef test_consider_args_after_options_for_rootdir(\n    pytester: Pytester, args: list[str]\n) -> None:\n    \"\"\"\n    Consider all arguments in the command-line for rootdir\n    discovery, even if they happen to occur after an option. #949\n    \"\"\"\n    # replace \"dir1\" and \"dir2\" from \"args\" into their real directory\n    root = pytester.mkdir(\"myroot\")\n    d1 = root.joinpath(\"dir1\")\n    d1.mkdir()\n    d2 = root.joinpath(\"dir2\")\n    d2.mkdir()\n    for i, arg in enumerate(args):\n        if arg == \"dir1\":\n            args[i] = str(d1)\n        elif arg == \"dir2\":\n            args[i] = str(d2)\n    with MonkeyPatch.context() as mp:\n        mp.chdir(root)\n        result = pytester.runpytest(*args)\n    result.stdout.fnmatch_lines([\"*rootdir: *myroot\"])\n\n\ndef test_toolongargs_issue224(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"-m\", \"hello\" * 500)\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_config_in_subdirectory_colon_command_line_issue2148(\n    pytester: Pytester,\n) -> None:\n    conftest_source = \"\"\"\n        def pytest_addoption(parser):\n            parser.addini('foo', 'foo')\n    \"\"\"\n\n    pytester.makefile(\n        \".ini\",\n        **{\"pytest\": \"[pytest]\\nfoo = root\", \"subdir/pytest\": \"[pytest]\\nfoo = subdir\"},\n    )\n\n    pytester.makepyfile(\n        **{\n            \"conftest\": conftest_source,\n            \"subdir/conftest\": conftest_source,\n            \"subdir/test_foo\": \"\"\"\\\n            def test_foo(pytestconfig):\n                assert pytestconfig.getini('foo') == 'subdir'\n            \"\"\",\n        }\n    )\n\n    result = pytester.runpytest(\"subdir/test_foo.py::test_foo\")\n    assert result.ret == 0\n\n\ndef test_notify_exception(pytester: Pytester, capfd) -> None:\n    config = pytester.parseconfig()\n    with pytest.raises(ValueError) as excinfo:\n        raise ValueError(1)\n    config.notify_exception(excinfo, config.option)\n    _, err = capfd.readouterr()\n    assert \"ValueError\" in err\n\n    class A:\n        def pytest_internalerror(self):\n            return True\n\n    config.pluginmanager.register(A())\n    config.notify_exception(excinfo, config.option)\n    _, err = capfd.readouterr()\n    assert not err\n\n    config = pytester.parseconfig(\"-p\", \"no:terminal\")\n    with pytest.raises(ValueError) as excinfo:\n        raise ValueError(1)\n    config.notify_exception(excinfo, config.option)\n    _, err = capfd.readouterr()\n    assert \"ValueError\" in err\n\n\ndef test_no_terminal_discovery_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\"raise TypeError('oops!')\")\n    result = pytester.runpytest(\"-p\", \"no:terminal\", \"--collect-only\")\n    assert result.ret == ExitCode.INTERRUPTED\n\n\ndef test_load_initial_conftest_last_ordering(_config_for_test):\n    pm = _config_for_test.pluginmanager\n\n    class My:\n        def pytest_load_initial_conftests(self):\n            pass\n\n    m = My()\n    pm.register(m)\n    hc = pm.hook.pytest_load_initial_conftests\n    hookimpls = [\n        (\n            hookimpl.function.__module__,\n            \"wrapper\" if (hookimpl.wrapper or hookimpl.hookwrapper) else \"nonwrapper\",\n        )\n        for hookimpl in hc.get_hookimpls()\n    ]\n    assert hookimpls == [\n        (\"_pytest.config\", \"nonwrapper\"),\n        (m.__module__, \"nonwrapper\"),\n        (\"_pytest.legacypath\", \"nonwrapper\"),\n        (\"_pytest.python_path\", \"nonwrapper\"),\n        (\"_pytest.capture\", \"wrapper\"),\n        (\"_pytest.warnings\", \"wrapper\"),\n    ]\n\n\ndef test_get_plugin_specs_as_list() -> None:\n    def exp_match(val: object) -> str:\n        return (\n            f\"Plugins may be specified as a sequence or a ','-separated string \"\n            f\"of plugin names. Got: {re.escape(repr(val))}\"\n        )\n\n    with pytest.raises(pytest.UsageError, match=exp_match({\"foo\"})):\n        _get_plugin_specs_as_list({\"foo\"})  # type: ignore[arg-type]\n    with pytest.raises(pytest.UsageError, match=exp_match({})):\n        _get_plugin_specs_as_list(dict())  # type: ignore[arg-type]\n\n    assert _get_plugin_specs_as_list(None) == []\n    assert _get_plugin_specs_as_list(\"\") == []\n    assert _get_plugin_specs_as_list(\"foo\") == [\"foo\"]\n    assert _get_plugin_specs_as_list(\"foo,bar\") == [\"foo\", \"bar\"]\n    assert _get_plugin_specs_as_list([\"foo\", \"bar\"]) == [\"foo\", \"bar\"]\n    assert _get_plugin_specs_as_list((\"foo\", \"bar\")) == [\"foo\", \"bar\"]\n\n\ndef test_collect_pytest_prefix_bug_integration(pytester: Pytester) -> None:\n    \"\"\"Integration test for issue #3775\"\"\"\n    p = pytester.copy_example(\"config/collect_pytest_prefix\")\n    result = pytester.runpytest(p)\n    result.stdout.fnmatch_lines([\"* 1 passed *\"])\n\n\ndef test_collect_pytest_prefix_bug(pytestconfig):\n    \"\"\"Ensure we collect only actual functions from conftest files (#3775)\"\"\"\n\n    class Dummy:\n        class pytest_something:\n            pass\n\n    pm = pytestconfig.pluginmanager\n    assert pm.parse_hookimpl_opts(Dummy(), \"pytest_something\") is None\n\n\nclass TestRootdir:\n    def test_simple_noini(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n        assert get_common_ancestor(Path.cwd(), [tmp_path]) == tmp_path\n        a = tmp_path / \"a\"\n        a.mkdir()\n        assert get_common_ancestor(Path.cwd(), [a, tmp_path]) == tmp_path\n        assert get_common_ancestor(Path.cwd(), [tmp_path, a]) == tmp_path\n        monkeypatch.chdir(tmp_path)\n        assert get_common_ancestor(Path.cwd(), []) == tmp_path\n        no_path = tmp_path / \"does-not-exist\"\n        assert get_common_ancestor(Path.cwd(), [no_path]) == tmp_path\n        assert get_common_ancestor(Path.cwd(), [no_path / \"a\"]) == tmp_path\n\n    @pytest.mark.parametrize(\n        \"name, contents\",\n        [\n            pytest.param(\"pytest.ini\", \"[pytest]\\nx=10\", id=\"pytest.ini\"),\n            pytest.param(\n                \"pyproject.toml\", \"[tool.pytest.ini_options]\\nx=10\", id=\"pyproject.toml\"\n            ),\n            pytest.param(\"tox.ini\", \"[pytest]\\nx=10\", id=\"tox.ini\"),\n            pytest.param(\"setup.cfg\", \"[tool:pytest]\\nx=10\", id=\"setup.cfg\"),\n        ],\n    )\n    def test_with_ini(self, tmp_path: Path, name: str, contents: str) -> None:\n        inipath = tmp_path / name\n        inipath.write_text(contents, encoding=\"utf-8\")\n\n        a = tmp_path / \"a\"\n        a.mkdir()\n        b = a / \"b\"\n        b.mkdir()\n        for args in ([str(tmp_path)], [str(a)], [str(b)]):\n            rootpath, parsed_inipath, _ = determine_setup(\n                inifile=None,\n                args=args,\n                rootdir_cmd_arg=None,\n                invocation_dir=Path.cwd(),\n            )\n            assert rootpath == tmp_path\n            assert parsed_inipath == inipath\n        rootpath, parsed_inipath, ini_config = determine_setup(\n            inifile=None,\n            args=[str(b), str(a)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert parsed_inipath == inipath\n        assert ini_config == {\"x\": \"10\"}\n\n    @pytest.mark.parametrize(\"name\", [\"setup.cfg\", \"tox.ini\"])\n    def test_pytestini_overrides_empty_other(self, tmp_path: Path, name: str) -> None:\n        inipath = tmp_path / \"pytest.ini\"\n        inipath.touch()\n        a = tmp_path / \"a\"\n        a.mkdir()\n        (a / name).touch()\n        rootpath, parsed_inipath, _ = determine_setup(\n            inifile=None,\n            args=[str(a)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert parsed_inipath == inipath\n\n    def test_setuppy_fallback(self, tmp_path: Path) -> None:\n        a = tmp_path / \"a\"\n        a.mkdir()\n        (a / \"setup.cfg\").touch()\n        (tmp_path / \"setup.py\").touch()\n        rootpath, inipath, inicfg = determine_setup(\n            inifile=None,\n            args=[str(a)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert inipath is None\n        assert inicfg == {}\n\n    def test_nothing(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n        monkeypatch.chdir(tmp_path)\n        rootpath, inipath, inicfg = determine_setup(\n            inifile=None,\n            args=[str(tmp_path)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert inipath is None\n        assert inicfg == {}\n\n    @pytest.mark.parametrize(\n        \"name, contents\",\n        [\n            # pytest.param(\"pytest.ini\", \"[pytest]\\nx=10\", id=\"pytest.ini\"),\n            pytest.param(\n                \"pyproject.toml\", \"[tool.pytest.ini_options]\\nx=10\", id=\"pyproject.toml\"\n            ),\n            # pytest.param(\"tox.ini\", \"[pytest]\\nx=10\", id=\"tox.ini\"),\n            # pytest.param(\"setup.cfg\", \"[tool:pytest]\\nx=10\", id=\"setup.cfg\"),\n        ],\n    )\n    def test_with_specific_inifile(\n        self, tmp_path: Path, name: str, contents: str\n    ) -> None:\n        p = tmp_path / name\n        p.touch()\n        p.write_text(contents, encoding=\"utf-8\")\n        rootpath, inipath, ini_config = determine_setup(\n            inifile=str(p),\n            args=[str(tmp_path)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert inipath == p\n        assert ini_config == {\"x\": \"10\"}\n\n    def test_explicit_config_file_sets_rootdir(\n        self, tmp_path: Path, monkeypatch: pytest.MonkeyPatch\n    ) -> None:\n        tests_dir = tmp_path / \"tests\"\n        tests_dir.mkdir()\n\n        monkeypatch.chdir(tmp_path)\n\n        # No config file is explicitly given: rootdir is determined to be cwd.\n        rootpath, found_inipath, *_ = determine_setup(\n            inifile=None,\n            args=[str(tests_dir)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert found_inipath is None\n\n        # Config file is explicitly given: rootdir is determined to be inifile's directory.\n        inipath = tmp_path / \"pytest.ini\"\n        inipath.touch()\n        rootpath, found_inipath, *_ = determine_setup(\n            inifile=str(inipath),\n            args=[str(tests_dir)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert found_inipath == inipath\n\n    def test_with_arg_outside_cwd_without_inifile(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.chdir(tmp_path)\n        a = tmp_path / \"a\"\n        a.mkdir()\n        b = tmp_path / \"b\"\n        b.mkdir()\n        rootpath, inifile, _ = determine_setup(\n            inifile=None,\n            args=[str(a), str(b)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert inifile is None\n\n    def test_with_arg_outside_cwd_with_inifile(self, tmp_path: Path) -> None:\n        a = tmp_path / \"a\"\n        a.mkdir()\n        b = tmp_path / \"b\"\n        b.mkdir()\n        inipath = a / \"pytest.ini\"\n        inipath.touch()\n        rootpath, parsed_inipath, _ = determine_setup(\n            inifile=None,\n            args=[str(a), str(b)],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == a\n        assert inipath == parsed_inipath\n\n    @pytest.mark.parametrize(\"dirs\", ([], [\"does-not-exist\"], [\"a/does-not-exist\"]))\n    def test_with_non_dir_arg(\n        self, dirs: Sequence[str], tmp_path: Path, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.chdir(tmp_path)\n        rootpath, inipath, _ = determine_setup(\n            inifile=None,\n            args=dirs,\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert inipath is None\n\n    def test_with_existing_file_in_subdir(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch\n    ) -> None:\n        a = tmp_path / \"a\"\n        a.mkdir()\n        (a / \"exists\").touch()\n        monkeypatch.chdir(tmp_path)\n        rootpath, inipath, _ = determine_setup(\n            inifile=None,\n            args=[\"a/exist\"],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n        assert rootpath == tmp_path\n        assert inipath is None\n\n    def test_with_config_also_in_parent_directory(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch\n    ) -> None:\n        \"\"\"Regression test for #7807.\"\"\"\n        (tmp_path / \"setup.cfg\").write_text(\"[tool:pytest]\\n\", \"utf-8\")\n        (tmp_path / \"myproject\").mkdir()\n        (tmp_path / \"myproject\" / \"setup.cfg\").write_text(\"[tool:pytest]\\n\", \"utf-8\")\n        (tmp_path / \"myproject\" / \"tests\").mkdir()\n        monkeypatch.chdir(tmp_path / \"myproject\")\n\n        rootpath, inipath, _ = determine_setup(\n            inifile=None,\n            args=[\"tests/\"],\n            rootdir_cmd_arg=None,\n            invocation_dir=Path.cwd(),\n        )\n\n        assert rootpath == tmp_path / \"myproject\"\n        assert inipath == tmp_path / \"myproject\" / \"setup.cfg\"\n\n\nclass TestOverrideIniArgs:\n    @pytest.mark.parametrize(\"name\", \"setup.cfg tox.ini pytest.ini\".split())\n    def test_override_ini_names(self, pytester: Pytester, name: str) -> None:\n        section = \"[pytest]\" if name != \"setup.cfg\" else \"[tool:pytest]\"\n        pytester.path.joinpath(name).write_text(\n            textwrap.dedent(\n                f\"\"\"\n            {section}\n            custom = 1.0\"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"custom\", \"\")\"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_pass(pytestconfig):\n                ini_val = pytestconfig.getini(\"custom\")\n                print('\\\\ncustom_option:%s\\\\n' % ini_val)\"\"\"\n        )\n\n        result = pytester.runpytest(\"--override-ini\", \"custom=2.0\", \"-s\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"custom_option:2.0\"])\n\n        result = pytester.runpytest(\n            \"--override-ini\", \"custom=2.0\", \"--override-ini=custom=3.0\", \"-s\"\n        )\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"custom_option:3.0\"])\n\n    def test_override_ini_paths(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addini(\"paths\", \"my new ini value\", type=\"paths\")\"\"\"\n        )\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            paths=blah.py\"\"\"\n        )\n        pytester.makepyfile(\n            r\"\"\"\n            def test_overridden(pytestconfig):\n                config_paths = pytestconfig.getini(\"paths\")\n                print(config_paths)\n                for cpf in config_paths:\n                    print('\\nuser_path:%s' % cpf.name)\n            \"\"\"\n        )\n        result = pytester.runpytest(\n            \"--override-ini\", \"paths=foo/bar1.py foo/bar2.py\", \"-s\"\n        )\n        result.stdout.fnmatch_lines([\"user_path:bar1.py\", \"user_path:bar2.py\"])\n\n    def test_override_multiple_and_default(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_addoption(parser):\n                addini = parser.addini\n                addini(\"custom_option_1\", \"\", default=\"o1\")\n                addini(\"custom_option_2\", \"\", default=\"o2\")\n                addini(\"custom_option_3\", \"\", default=False, type=\"bool\")\n                addini(\"custom_option_4\", \"\", default=True, type=\"bool\")\"\"\"\n        )\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            custom_option_1=custom_option_1\n            custom_option_2=custom_option_2\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_multiple_options(pytestconfig):\n                prefix = \"custom_option\"\n                for x in range(1, 5):\n                    ini_value=pytestconfig.getini(\"%s_%d\" % (prefix, x))\n                    print('\\\\nini%d:%s' % (x, ini_value))\n        \"\"\"\n        )\n        result = pytester.runpytest(\n            \"--override-ini\",\n            \"custom_option_1=fulldir=/tmp/user1\",\n            \"-o\",\n            \"custom_option_2=url=/tmp/user2?a=b&d=e\",\n            \"-o\",\n            \"custom_option_3=True\",\n            \"-o\",\n            \"custom_option_4=no\",\n            \"-s\",\n        )\n        result.stdout.fnmatch_lines(\n            [\n                \"ini1:fulldir=/tmp/user1\",\n                \"ini2:url=/tmp/user2?a=b&d=e\",\n                \"ini3:True\",\n                \"ini4:False\",\n            ]\n        )\n\n    def test_override_ini_usage_error_bad_style(self, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            xdist_strict=False\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--override-ini\", \"xdist_strict\", \"True\")\n        result.stderr.fnmatch_lines(\n            [\n                \"ERROR: -o/--override-ini expects option=value style (got: 'xdist_strict').\",\n            ]\n        )\n\n    @pytest.mark.parametrize(\"with_ini\", [True, False])\n    def test_override_ini_handled_asap(\n        self, pytester: Pytester, with_ini: bool\n    ) -> None:\n        \"\"\"-o should be handled as soon as possible and always override what's in ini files (#2238)\"\"\"\n        if with_ini:\n            pytester.makeini(\n                \"\"\"\n                [pytest]\n                python_files=test_*.py\n            \"\"\"\n            )\n        pytester.makepyfile(\n            unittest_ini_handle=\"\"\"\n            def test():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--override-ini\", \"python_files=unittest_*.py\")\n        result.stdout.fnmatch_lines([\"*1 passed in*\"])\n\n    def test_addopts_before_initini(\n        self, monkeypatch: MonkeyPatch, _config_for_test, _sys_snapshot\n    ) -> None:\n        cache_dir = \".custom_cache\"\n        monkeypatch.setenv(\"PYTEST_ADDOPTS\", f\"-o cache_dir={cache_dir}\")\n        config = _config_for_test\n        config._preparse([], addopts=True)\n        assert config._override_ini == [f\"cache_dir={cache_dir}\"]\n\n    def test_addopts_from_env_not_concatenated(\n        self, monkeypatch: MonkeyPatch, _config_for_test\n    ) -> None:\n        \"\"\"PYTEST_ADDOPTS should not take values from normal args (#4265).\"\"\"\n        monkeypatch.setenv(\"PYTEST_ADDOPTS\", \"-o\")\n        config = _config_for_test\n        with pytest.raises(UsageError) as excinfo:\n            config._preparse([\"cache_dir=ignored\"], addopts=True)\n        assert (\n            \"error: argument -o/--override-ini: expected one argument (via PYTEST_ADDOPTS)\"\n            in excinfo.value.args[0]\n        )\n\n    def test_addopts_from_ini_not_concatenated(self, pytester: Pytester) -> None:\n        \"\"\"`addopts` from ini should not take values from normal args (#4265).\"\"\"\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            addopts=-o\n        \"\"\"\n        )\n        result = pytester.runpytest(\"cache_dir=ignored\")\n        result.stderr.fnmatch_lines(\n            [\n                f\"{pytester._request.config._parser.optparser.prog}: error: \"\n                f\"argument -o/--override-ini: expected one argument (via addopts config)\"\n            ]\n        )\n        assert result.ret == _pytest.config.ExitCode.USAGE_ERROR\n\n    def test_override_ini_does_not_contain_paths(\n        self, _config_for_test, _sys_snapshot\n    ) -> None:\n        \"\"\"Check that -o no longer swallows all options after it (#3103)\"\"\"\n        config = _config_for_test\n        config._preparse([\"-o\", \"cache_dir=/cache\", \"/some/test/path\"])\n        assert config._override_ini == [\"cache_dir=/cache\"]\n\n    def test_multiple_override_ini_options(self, pytester: Pytester) -> None:\n        \"\"\"Ensure a file path following a '-o' option does not generate an error (#3103)\"\"\"\n        pytester.makepyfile(\n            **{\n                \"conftest.py\": \"\"\"\n                def pytest_addoption(parser):\n                    parser.addini('foo', default=None, help='some option')\n                    parser.addini('bar', default=None, help='some option')\n            \"\"\",\n                \"test_foo.py\": \"\"\"\n                def test(pytestconfig):\n                    assert pytestconfig.getini('foo') == '1'\n                    assert pytestconfig.getini('bar') == '0'\n            \"\"\",\n                \"test_bar.py\": \"\"\"\n                def test():\n                    assert False\n            \"\"\",\n            }\n        )\n        result = pytester.runpytest(\"-o\", \"foo=1\", \"-o\", \"bar=0\", \"test_foo.py\")\n        assert \"ERROR:\" not in result.stderr.str()\n        result.stdout.fnmatch_lines([\"collected 1 item\", \"*= 1 passed in *=\"])\n\n    def test_override_ini_without_config_file(self, pytester: Pytester) -> None:\n        pytester.makepyfile(**{\"src/override_ini_without_config_file.py\": \"\"})\n        pytester.makepyfile(\n            **{\n                \"tests/test_override_ini_without_config_file.py\": (\n                    \"import override_ini_without_config_file\\ndef test(): pass\"\n                ),\n            }\n        )\n        result = pytester.runpytest(\"--override-ini\", \"pythonpath=src\")\n        assert result.parseoutcomes() == {\"passed\": 1}\n\n\ndef test_help_via_addopts(pytester: Pytester) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        addopts = --unknown-option-should-allow-for-help --help\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n    result.stdout.fnmatch_lines(\n        [\n            \"usage: *\",\n            \"positional arguments:\",\n            # Displays full/default help.\n            \"to see available markers type: pytest --markers\",\n        ]\n    )\n\n\ndef test_help_and_version_after_argument_error(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def validate(arg):\n            raise argparse.ArgumentTypeError(\"argerror\")\n\n        def pytest_addoption(parser):\n            group = parser.getgroup('cov')\n            group.addoption(\n                \"--invalid-option-should-allow-for-help\",\n                type=validate,\n            )\n        \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        addopts = --invalid-option-should-allow-for-help\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--help\")\n    result.stdout.fnmatch_lines(\n        [\n            \"usage: *\",\n            \"positional arguments:\",\n            \"NOTE: displaying only minimal help due to UsageError.\",\n        ]\n    )\n    result.stderr.fnmatch_lines(\n        [\n            \"ERROR: usage: *\",\n            f\"{pytester._request.config._parser.optparser.prog}: error: \"\n            f\"argument --invalid-option-should-allow-for-help: expected one argument\",\n        ]\n    )\n    # Does not display full/default help.\n    assert \"to see available markers type: pytest --markers\" not in result.stdout.lines\n    assert result.ret == ExitCode.USAGE_ERROR\n\n    result = pytester.runpytest(\"--version\")\n    result.stdout.fnmatch_lines([f\"pytest {pytest.__version__}\"])\n    assert result.ret == ExitCode.USAGE_ERROR\n\n\ndef test_help_formatter_uses_py_get_terminal_width(monkeypatch: MonkeyPatch) -> None:\n    from _pytest.config.argparsing import DropShorterLongHelpFormatter\n\n    monkeypatch.setenv(\"COLUMNS\", \"90\")\n    formatter = DropShorterLongHelpFormatter(\"prog\")\n    assert formatter._width == 90\n\n    monkeypatch.setattr(\"_pytest._io.get_terminal_width\", lambda: 160)\n    formatter = DropShorterLongHelpFormatter(\"prog\")\n    assert formatter._width == 160\n\n    formatter = DropShorterLongHelpFormatter(\"prog\", width=42)\n    assert formatter._width == 42\n\n\ndef test_config_does_not_load_blocked_plugin_from_args(pytester: Pytester) -> None:\n    \"\"\"This tests that pytest's config setup handles \"-p no:X\".\"\"\"\n    p = pytester.makepyfile(\"def test(capfd): pass\")\n    result = pytester.runpytest(str(p), \"-pno:capture\")\n    result.stdout.fnmatch_lines([\"E       fixture 'capfd' not found\"])\n    assert result.ret == ExitCode.TESTS_FAILED\n\n    result = pytester.runpytest(str(p), \"-pno:capture\", \"-s\")\n    result.stderr.fnmatch_lines([\"*: error: unrecognized arguments: -s\"])\n    assert result.ret == ExitCode.USAGE_ERROR\n\n    result = pytester.runpytest(str(p), \"-p no:capture\", \"-s\")\n    result.stderr.fnmatch_lines([\"*: error: unrecognized arguments: -s\"])\n    assert result.ret == ExitCode.USAGE_ERROR\n\n\ndef test_invocation_args(pytester: Pytester) -> None:\n    \"\"\"Ensure that Config.invocation_* arguments are correctly defined\"\"\"\n\n    class DummyPlugin:\n        pass\n\n    p = pytester.makepyfile(\"def test(): pass\")\n    plugin = DummyPlugin()\n    rec = pytester.inline_run(p, \"-v\", plugins=[plugin])\n    calls = rec.getcalls(\"pytest_runtest_protocol\")\n    assert len(calls) == 1\n    call = calls[0]\n    config = call.item.config\n\n    assert config.invocation_params.args == (str(p), \"-v\")\n    assert config.invocation_params.dir == pytester.path\n\n    plugins = config.invocation_params.plugins\n    assert len(plugins) == 2\n    assert plugins[0] is plugin\n    assert type(plugins[1]).__name__ == \"Collect\"  # installed by pytester.inline_run()\n\n    # args cannot be None\n    with pytest.raises(TypeError):\n        Config.InvocationParams(args=None, plugins=None, dir=Path())  # type: ignore[arg-type]\n\n\n@pytest.mark.parametrize(\n    \"plugin\",\n    [\n        x\n        for x in _pytest.config.default_plugins\n        if x not in _pytest.config.essential_plugins\n    ],\n)\ndef test_config_blocked_default_plugins(pytester: Pytester, plugin: str) -> None:\n    p = pytester.makepyfile(\"def test(): pass\")\n    result = pytester.runpytest(str(p), f\"-pno:{plugin}\")\n\n    if plugin == \"python\":\n        assert result.ret == ExitCode.USAGE_ERROR\n        result.stderr.fnmatch_lines(\n            [\n                \"ERROR: not found: */test_config_blocked_default_plugins.py\",\n                \"(no match in any of *<Dir *>*\",\n            ]\n        )\n        return\n\n    assert result.ret == ExitCode.OK\n    if plugin != \"terminal\":\n        result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n    p = pytester.makepyfile(\"def test(): assert 0\")\n    result = pytester.runpytest(str(p), f\"-pno:{plugin}\")\n    assert result.ret == ExitCode.TESTS_FAILED\n    if plugin != \"terminal\":\n        result.stdout.fnmatch_lines([\"* 1 failed in *\"])\n    else:\n        assert result.stdout.lines == []\n\n\nclass TestSetupCfg:\n    def test_pytest_setup_cfg_unsupported(self, pytester: Pytester) -> None:\n        pytester.makefile(\n            \".cfg\",\n            setup=\"\"\"\n            [pytest]\n            addopts = --verbose\n        \"\"\",\n        )\n        with pytest.raises(pytest.fail.Exception):\n            pytester.runpytest()\n\n    def test_pytest_custom_cfg_unsupported(self, pytester: Pytester) -> None:\n        pytester.makefile(\n            \".cfg\",\n            custom=\"\"\"\n            [pytest]\n            addopts = --verbose\n        \"\"\",\n        )\n        with pytest.raises(pytest.fail.Exception):\n            pytester.runpytest(\"-c\", \"custom.cfg\")\n\n        with pytest.raises(pytest.fail.Exception):\n            pytester.runpytest(\"--config-file\", \"custom.cfg\")\n\n\nclass TestPytestPluginsVariable:\n    def test_pytest_plugins_in_non_top_level_conftest_unsupported(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            **{\n                \"subdirectory/conftest.py\": \"\"\"\n            pytest_plugins=['capture']\n        \"\"\"\n            }\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_func():\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest()\n        assert res.ret == 2\n        msg = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n        res.stdout.fnmatch_lines([f\"*{msg}*\", f\"*subdirectory{os.sep}conftest.py*\"])\n\n    @pytest.mark.parametrize(\"use_pyargs\", [True, False])\n    def test_pytest_plugins_in_non_top_level_conftest_unsupported_pyargs(\n        self, pytester: Pytester, use_pyargs: bool\n    ) -> None:\n        \"\"\"When using --pyargs, do not emit the warning about non-top-level conftest warnings (#4039, #4044)\"\"\"\n        files = {\n            \"src/pkg/__init__.py\": \"\",\n            \"src/pkg/conftest.py\": \"\",\n            \"src/pkg/test_root.py\": \"def test(): pass\",\n            \"src/pkg/sub/__init__.py\": \"\",\n            \"src/pkg/sub/conftest.py\": \"pytest_plugins=['capture']\",\n            \"src/pkg/sub/test_bar.py\": \"def test(): pass\",\n        }\n        pytester.makepyfile(**files)\n        pytester.syspathinsert(pytester.path.joinpath(\"src\"))\n\n        args = (\"--pyargs\", \"pkg\") if use_pyargs else ()\n        res = pytester.runpytest(*args)\n        assert res.ret == (0 if use_pyargs else 2)\n        msg = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n        if use_pyargs:\n            assert msg not in res.stdout.str()\n        else:\n            res.stdout.fnmatch_lines([f\"*{msg}*\"])\n\n    def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_top_level_conftest(\n        self, pytester: Pytester\n    ) -> None:\n        subdirectory = pytester.path.joinpath(\"subdirectory\")\n        subdirectory.mkdir()\n        pytester.makeconftest(\n            \"\"\"\n            pytest_plugins=['capture']\n        \"\"\"\n        )\n        pytester.path.joinpath(\"conftest.py\").rename(\n            subdirectory.joinpath(\"conftest.py\")\n        )\n\n        pytester.makepyfile(\n            \"\"\"\n            def test_func():\n                pass\n        \"\"\"\n        )\n\n        res = pytester.runpytest_subprocess()\n        assert res.ret == 2\n        msg = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n        res.stdout.fnmatch_lines([f\"*{msg}*\", f\"*subdirectory{os.sep}conftest.py*\"])\n\n    def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_false_positives(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"def test_func(): pass\",\n            **{\n                \"subdirectory/conftest\": \"pass\",\n                \"conftest\": \"\"\"\n                    import warnings\n                    warnings.filterwarnings('always', category=DeprecationWarning)\n                    pytest_plugins=['capture']\n                    \"\"\",\n            },\n        )\n        res = pytester.runpytest_subprocess()\n        assert res.ret == 0\n        msg = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n        assert msg not in res.stdout.str()\n\n\ndef test_conftest_import_error_repr(tmp_path: Path) -> None:\n    \"\"\"`ConftestImportFailure` should use a short error message and readable\n    path to the failed conftest.py file.\"\"\"\n    path = tmp_path.joinpath(\"foo/conftest.py\")\n    with pytest.raises(\n        ConftestImportFailure,\n        match=re.escape(f\"RuntimeError: some error (from {path})\"),\n    ):\n        try:\n            raise RuntimeError(\"some error\")\n        except Exception as exc:\n            raise ConftestImportFailure(path, cause=exc) from exc\n\n\ndef test_strtobool() -> None:\n    assert _strtobool(\"YES\")\n    assert not _strtobool(\"NO\")\n    with pytest.raises(ValueError):\n        _strtobool(\"unknown\")\n\n\n@pytest.mark.parametrize(\n    \"arg, escape, expected\",\n    [\n        (\"ignore\", False, (\"ignore\", \"\", Warning, \"\", 0)),\n        (\n            \"ignore::DeprecationWarning\",\n            False,\n            (\"ignore\", \"\", DeprecationWarning, \"\", 0),\n        ),\n        (\n            \"ignore:some msg:DeprecationWarning\",\n            False,\n            (\"ignore\", \"some msg\", DeprecationWarning, \"\", 0),\n        ),\n        (\n            \"ignore::DeprecationWarning:mod\",\n            False,\n            (\"ignore\", \"\", DeprecationWarning, \"mod\", 0),\n        ),\n        (\n            \"ignore::DeprecationWarning:mod:42\",\n            False,\n            (\"ignore\", \"\", DeprecationWarning, \"mod\", 42),\n        ),\n        (\"error:some\\\\msg:::\", True, (\"error\", \"some\\\\\\\\msg\", Warning, \"\", 0)),\n        (\"error:::mod\\\\foo:\", True, (\"error\", \"\", Warning, \"mod\\\\\\\\foo\\\\Z\", 0)),\n    ],\n)\ndef test_parse_warning_filter(\n    arg: str, escape: bool, expected: tuple[str, str, type[Warning], str, int]\n) -> None:\n    assert parse_warning_filter(arg, escape=escape) == expected\n\n\n@pytest.mark.parametrize(\n    \"arg\",\n    [\n        # Too much parts.\n        \":\" * 5,\n        # Invalid action.\n        \"FOO::\",\n        # ImportError when importing the warning class.\n        \"::test_parse_warning_filter_failure.NonExistentClass::\",\n        # Class is not a Warning subclass.\n        \"::list::\",\n        # Negative line number.\n        \"::::-1\",\n        # Not a line number.\n        \"::::not-a-number\",\n    ],\n)\ndef test_parse_warning_filter_failure(arg: str) -> None:\n    with pytest.raises(pytest.UsageError):\n        parse_warning_filter(arg, escape=True)\n\n\nclass TestDebugOptions:\n    def test_without_debug_does_not_write_log(self, pytester: Pytester) -> None:\n        result = pytester.runpytest()\n        result.stderr.no_fnmatch_line(\n            \"*writing pytest debug information to*pytestdebug.log\"\n        )\n        result.stderr.no_fnmatch_line(\n            \"*wrote pytest debug information to*pytestdebug.log\"\n        )\n        assert not [f.name for f in pytester.path.glob(\"**/*.log\")]\n\n    def test_with_only_debug_writes_pytestdebug_log(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--debug\")\n        result.stderr.fnmatch_lines(\n            [\n                \"*writing pytest debug information to*pytestdebug.log\",\n                \"*wrote pytest debug information to*pytestdebug.log\",\n            ]\n        )\n        assert \"pytestdebug.log\" in [f.name for f in pytester.path.glob(\"**/*.log\")]\n\n    def test_multiple_custom_debug_logs(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--debug\", \"bar.log\")\n        result.stderr.fnmatch_lines(\n            [\n                \"*writing pytest debug information to*bar.log\",\n                \"*wrote pytest debug information to*bar.log\",\n            ]\n        )\n        result = pytester.runpytest(\"--debug\", \"foo.log\")\n        result.stderr.fnmatch_lines(\n            [\n                \"*writing pytest debug information to*foo.log\",\n                \"*wrote pytest debug information to*foo.log\",\n            ]\n        )\n\n        assert {\"bar.log\", \"foo.log\"} == {\n            f.name for f in pytester.path.glob(\"**/*.log\")\n        }\n\n    def test_debug_help(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"-h\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*Store internal tracing debug information in this log*\",\n                \"*file. This file is opened with 'w' and truncated as a*\",\n                \"*Default: pytestdebug.log.\",\n            ]\n        )\n\n\nclass TestVerbosity:\n    SOME_OUTPUT_TYPE = Config.VERBOSITY_ASSERTIONS\n    SOME_OUTPUT_VERBOSITY_LEVEL = 5\n\n    class VerbosityIni:\n        def pytest_addoption(self, parser: Parser) -> None:\n            Config._add_verbosity_ini(\n                parser, TestVerbosity.SOME_OUTPUT_TYPE, help=\"some help text\"\n            )\n\n    def test_level_matches_verbose_when_not_specified(\n        self, pytester: Pytester, tmp_path: Path\n    ) -> None:\n        tmp_path.joinpath(\"pytest.ini\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                [pytest]\n                addopts = --verbose\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        pytester.plugins = [TestVerbosity.VerbosityIni()]\n\n        config = pytester.parseconfig(tmp_path)\n\n        assert (\n            config.get_verbosity(TestVerbosity.SOME_OUTPUT_TYPE)\n            == config.option.verbose\n        )\n\n    def test_level_matches_verbose_when_not_known_type(\n        self, pytester: Pytester, tmp_path: Path\n    ) -> None:\n        tmp_path.joinpath(\"pytest.ini\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                [pytest]\n                addopts = --verbose\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        pytester.plugins = [TestVerbosity.VerbosityIni()]\n\n        config = pytester.parseconfig(tmp_path)\n\n        assert config.get_verbosity(\"some fake verbosity type\") == config.option.verbose\n\n    def test_level_matches_specified_override(\n        self, pytester: Pytester, tmp_path: Path\n    ) -> None:\n        setting_name = f\"verbosity_{TestVerbosity.SOME_OUTPUT_TYPE}\"\n        tmp_path.joinpath(\"pytest.ini\").write_text(\n            textwrap.dedent(\n                f\"\"\"\\\n                [pytest]\n                addopts = --verbose\n                {setting_name} = {TestVerbosity.SOME_OUTPUT_VERBOSITY_LEVEL}\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        pytester.plugins = [TestVerbosity.VerbosityIni()]\n\n        config = pytester.parseconfig(tmp_path)\n\n        assert (\n            config.get_verbosity(TestVerbosity.SOME_OUTPUT_TYPE)\n            == TestVerbosity.SOME_OUTPUT_VERBOSITY_LEVEL\n        )\n", "testing/test_conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nfrom pathlib import Path\nimport textwrap\nfrom typing import cast\nfrom typing import Generator\nfrom typing import List\nfrom typing import Sequence\n\nfrom _pytest.config import ExitCode\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pathlib import symlink_or_skip\nfrom _pytest.pytester import Pytester\nfrom _pytest.tmpdir import TempPathFactory\nimport pytest\n\n\ndef ConftestWithSetinitial(path) -> PytestPluginManager:\n    conftest = PytestPluginManager()\n    conftest_setinitial(conftest, [path])\n    return conftest\n\n\ndef conftest_setinitial(\n    conftest: PytestPluginManager,\n    args: Sequence[str | Path],\n    confcutdir: Path | None = None,\n) -> None:\n    conftest._set_initial_conftests(\n        args=args,\n        pyargs=False,\n        noconftest=False,\n        rootpath=Path(args[0]),\n        confcutdir=confcutdir,\n        invocation_dir=Path.cwd(),\n        importmode=\"prepend\",\n        consider_namespace_packages=False,\n    )\n\n\n@pytest.mark.usefixtures(\"_sys_snapshot\")\nclass TestConftestValueAccessGlobal:\n    @pytest.fixture(scope=\"module\", params=[\"global\", \"inpackage\"])\n    def basedir(\n        self, request, tmp_path_factory: TempPathFactory\n    ) -> Generator[Path, None, None]:\n        tmp_path = tmp_path_factory.mktemp(\"basedir\", numbered=True)\n        tmp_path.joinpath(\"adir/b\").mkdir(parents=True)\n        tmp_path.joinpath(\"adir/conftest.py\").write_text(\n            \"a=1 ; Directory = 3\", encoding=\"utf-8\"\n        )\n        tmp_path.joinpath(\"adir/b/conftest.py\").write_text(\n            \"b=2 ; a = 1.5\", encoding=\"utf-8\"\n        )\n        if request.param == \"inpackage\":\n            tmp_path.joinpath(\"adir/__init__.py\").touch()\n            tmp_path.joinpath(\"adir/b/__init__.py\").touch()\n\n        yield tmp_path\n\n    def test_basic_init(self, basedir: Path) -> None:\n        conftest = PytestPluginManager()\n        p = basedir / \"adir\"\n        conftest._loadconftestmodules(\n            p, importmode=\"prepend\", rootpath=basedir, consider_namespace_packages=False\n        )\n        assert conftest._rget_with_confmod(\"a\", p)[1] == 1\n\n    def test_immediate_initialization_and_incremental_are_the_same(\n        self, basedir: Path\n    ) -> None:\n        conftest = PytestPluginManager()\n        assert not len(conftest._dirpath2confmods)\n        conftest._loadconftestmodules(\n            basedir,\n            importmode=\"prepend\",\n            rootpath=basedir,\n            consider_namespace_packages=False,\n        )\n        snap1 = len(conftest._dirpath2confmods)\n        assert snap1 == 1\n        conftest._loadconftestmodules(\n            basedir / \"adir\",\n            importmode=\"prepend\",\n            rootpath=basedir,\n            consider_namespace_packages=False,\n        )\n        assert len(conftest._dirpath2confmods) == snap1 + 1\n        conftest._loadconftestmodules(\n            basedir / \"b\",\n            importmode=\"prepend\",\n            rootpath=basedir,\n            consider_namespace_packages=False,\n        )\n        assert len(conftest._dirpath2confmods) == snap1 + 2\n\n    def test_value_access_not_existing(self, basedir: Path) -> None:\n        conftest = ConftestWithSetinitial(basedir)\n        with pytest.raises(KeyError):\n            conftest._rget_with_confmod(\"a\", basedir)\n\n    def test_value_access_by_path(self, basedir: Path) -> None:\n        conftest = ConftestWithSetinitial(basedir)\n        adir = basedir / \"adir\"\n        conftest._loadconftestmodules(\n            adir,\n            importmode=\"prepend\",\n            rootpath=basedir,\n            consider_namespace_packages=False,\n        )\n        assert conftest._rget_with_confmod(\"a\", adir)[1] == 1\n        conftest._loadconftestmodules(\n            adir / \"b\",\n            importmode=\"prepend\",\n            rootpath=basedir,\n            consider_namespace_packages=False,\n        )\n        assert conftest._rget_with_confmod(\"a\", adir / \"b\")[1] == 1.5\n\n    def test_value_access_with_confmod(self, basedir: Path) -> None:\n        startdir = basedir / \"adir\" / \"b\"\n        startdir.joinpath(\"xx\").mkdir()\n        conftest = ConftestWithSetinitial(startdir)\n        mod, value = conftest._rget_with_confmod(\"a\", startdir)\n        assert value == 1.5\n        assert mod.__file__ is not None\n        path = Path(mod.__file__)\n        assert path.parent == basedir / \"adir\" / \"b\"\n        assert path.stem == \"conftest\"\n\n\ndef test_conftest_in_nonpkg_with_init(tmp_path: Path, _sys_snapshot) -> None:\n    tmp_path.joinpath(\"adir-1.0/b\").mkdir(parents=True)\n    tmp_path.joinpath(\"adir-1.0/conftest.py\").write_text(\n        \"a=1 ; Directory = 3\", encoding=\"utf-8\"\n    )\n    tmp_path.joinpath(\"adir-1.0/b/conftest.py\").write_text(\n        \"b=2 ; a = 1.5\", encoding=\"utf-8\"\n    )\n    tmp_path.joinpath(\"adir-1.0/b/__init__.py\").touch()\n    tmp_path.joinpath(\"adir-1.0/__init__.py\").touch()\n    ConftestWithSetinitial(tmp_path.joinpath(\"adir-1.0\", \"b\"))\n\n\ndef test_doubledash_considered(pytester: Pytester) -> None:\n    conf = pytester.mkdir(\"--option\")\n    conf.joinpath(\"conftest.py\").touch()\n    conftest = PytestPluginManager()\n    conftest_setinitial(conftest, [conf.name, conf.name])\n    values = conftest._getconftestmodules(conf)\n    assert len(values) == 1\n\n\ndef test_issue151_load_all_conftests(pytester: Pytester) -> None:\n    names = \"code proj src\".split()\n    for name in names:\n        p = pytester.mkdir(name)\n        p.joinpath(\"conftest.py\").touch()\n\n    pm = PytestPluginManager()\n    conftest_setinitial(pm, names)\n    assert len(set(pm.get_plugins()) - {pm}) == len(names)\n\n\ndef test_conftest_global_import(pytester: Pytester) -> None:\n    pytester.makeconftest(\"x=3\")\n    p = pytester.makepyfile(\n        \"\"\"\n        from pathlib import Path\n        import pytest\n        from _pytest.config import PytestPluginManager\n        conf = PytestPluginManager()\n        mod = conf._importconftest(\n            Path(\"conftest.py\"),\n            importmode=\"prepend\",\n            rootpath=Path.cwd(),\n            consider_namespace_packages=False,\n        )\n        assert mod.x == 3\n        import conftest\n        assert conftest is mod, (conftest, mod)\n        sub = Path(\"sub\")\n        sub.mkdir()\n        subconf = sub / \"conftest.py\"\n        subconf.write_text(\"y=4\", encoding=\"utf-8\")\n        mod2 = conf._importconftest(\n            subconf,\n            importmode=\"prepend\",\n            rootpath=Path.cwd(),\n            consider_namespace_packages=False,\n        )\n        assert mod != mod2\n        assert mod2.y == 4\n        import conftest\n        assert conftest is mod2, (conftest, mod)\n    \"\"\"\n    )\n    res = pytester.runpython(p)\n    assert res.ret == 0\n\n\ndef test_conftestcutdir(pytester: Pytester) -> None:\n    conf = pytester.makeconftest(\"\")\n    p = pytester.mkdir(\"x\")\n    conftest = PytestPluginManager()\n    conftest_setinitial(conftest, [pytester.path], confcutdir=p)\n    conftest._loadconftestmodules(\n        p,\n        importmode=\"prepend\",\n        rootpath=pytester.path,\n        consider_namespace_packages=False,\n    )\n    values = conftest._getconftestmodules(p)\n    assert len(values) == 0\n    conftest._loadconftestmodules(\n        conf.parent,\n        importmode=\"prepend\",\n        rootpath=pytester.path,\n        consider_namespace_packages=False,\n    )\n    values = conftest._getconftestmodules(conf.parent)\n    assert len(values) == 0\n    assert not conftest.has_plugin(str(conf))\n    # but we can still import a conftest directly\n    conftest._importconftest(\n        conf,\n        importmode=\"prepend\",\n        rootpath=pytester.path,\n        consider_namespace_packages=False,\n    )\n    values = conftest._getconftestmodules(conf.parent)\n    assert values[0].__file__ is not None\n    assert values[0].__file__.startswith(str(conf))\n    # and all sub paths get updated properly\n    values = conftest._getconftestmodules(p)\n    assert len(values) == 1\n    assert values[0].__file__ is not None\n    assert values[0].__file__.startswith(str(conf))\n\n\ndef test_conftestcutdir_inplace_considered(pytester: Pytester) -> None:\n    conf = pytester.makeconftest(\"\")\n    conftest = PytestPluginManager()\n    conftest_setinitial(conftest, [conf.parent], confcutdir=conf.parent)\n    values = conftest._getconftestmodules(conf.parent)\n    assert len(values) == 1\n    assert values[0].__file__ is not None\n    assert values[0].__file__.startswith(str(conf))\n\n\n@pytest.mark.parametrize(\"name\", \"test tests whatever .dotdir\".split())\ndef test_setinitial_conftest_subdirs(pytester: Pytester, name: str) -> None:\n    sub = pytester.mkdir(name)\n    subconftest = sub.joinpath(\"conftest.py\")\n    subconftest.touch()\n    pm = PytestPluginManager()\n    conftest_setinitial(pm, [sub.parent], confcutdir=pytester.path)\n    key = subconftest.resolve()\n    if name not in (\"whatever\", \".dotdir\"):\n        assert pm.has_plugin(str(key))\n        assert len(set(pm.get_plugins()) - {pm}) == 1\n    else:\n        assert not pm.has_plugin(str(key))\n        assert len(set(pm.get_plugins()) - {pm}) == 0\n\n\ndef test_conftest_confcutdir(pytester: Pytester) -> None:\n    pytester.makeconftest(\"assert 0\")\n    x = pytester.mkdir(\"x\")\n    x.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            def pytest_addoption(parser):\n                parser.addoption(\"--xyz\", action=\"store_true\")\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    result = pytester.runpytest(\"-h\", f\"--confcutdir={x}\", x)\n    result.stdout.fnmatch_lines([\"*--xyz*\"])\n    result.stdout.no_fnmatch_line(\"*warning: could not load initial*\")\n\n\ndef test_installed_conftest_is_picked_up(pytester: Pytester, tmp_path: Path) -> None:\n    \"\"\"When using `--pyargs` to run tests in an installed packages (located e.g.\n    in a site-packages in the PYTHONPATH), conftest files in there are picked\n    up.\n\n    Regression test for #9767.\n    \"\"\"\n    # pytester dir - the source tree.\n    # tmp_path - the simulated site-packages dir (not in source tree).\n\n    pytester.syspathinsert(tmp_path)\n    pytester.makepyprojecttoml(\"[tool.pytest.ini_options]\")\n    tmp_path.joinpath(\"foo\").mkdir()\n    tmp_path.joinpath(\"foo\", \"__init__.py\").touch()\n    tmp_path.joinpath(\"foo\", \"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            @pytest.fixture\n            def fix(): return None\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    tmp_path.joinpath(\"foo\", \"test_it.py\").write_text(\n        \"def test_it(fix): pass\", encoding=\"utf-8\"\n    )\n    result = pytester.runpytest(\"--pyargs\", \"foo\")\n    assert result.ret == 0\n\n\ndef test_conftest_symlink(pytester: Pytester) -> None:\n    \"\"\"`conftest.py` discovery follows normal path resolution and does not resolve symlinks.\"\"\"\n    # Structure:\n    # /real\n    # /real/conftest.py\n    # /real/app\n    # /real/app/tests\n    # /real/app/tests/test_foo.py\n\n    # Links:\n    # /symlinktests -> /real/app/tests (running at symlinktests should fail)\n    # /symlink -> /real (running at /symlink should work)\n\n    real = pytester.mkdir(\"real\")\n    realtests = real.joinpath(\"app/tests\")\n    realtests.mkdir(parents=True)\n    symlink_or_skip(realtests, pytester.path.joinpath(\"symlinktests\"))\n    symlink_or_skip(real, pytester.path.joinpath(\"symlink\"))\n    pytester.makepyfile(\n        **{\n            \"real/app/tests/test_foo.py\": \"def test1(fixture): pass\",\n            \"real/conftest.py\": textwrap.dedent(\n                \"\"\"\n                import pytest\n\n                print(\"conftest_loaded\")\n\n                @pytest.fixture\n                def fixture():\n                    print(\"fixture_used\")\n                \"\"\"\n            ),\n        }\n    )\n\n    # Should fail because conftest cannot be found from the link structure.\n    result = pytester.runpytest(\"-vs\", \"symlinktests\")\n    result.stdout.fnmatch_lines([\"*fixture 'fixture' not found*\"])\n    assert result.ret == ExitCode.TESTS_FAILED\n\n    # Should not cause \"ValueError: Plugin already registered\" (#4174).\n    result = pytester.runpytest(\"-vs\", \"symlink\")\n    assert result.ret == ExitCode.OK\n\n\ndef test_conftest_symlink_files(pytester: Pytester) -> None:\n    \"\"\"Symlinked conftest.py are found when pytest is executed in a directory with symlinked\n    files.\"\"\"\n    real = pytester.mkdir(\"real\")\n    source = {\n        \"app/test_foo.py\": \"def test1(fixture): pass\",\n        \"app/__init__.py\": \"\",\n        \"app/conftest.py\": textwrap.dedent(\n            \"\"\"\n            import pytest\n\n            print(\"conftest_loaded\")\n\n            @pytest.fixture\n            def fixture():\n                print(\"fixture_used\")\n            \"\"\"\n        ),\n    }\n    pytester.makepyfile(**{f\"real/{k}\": v for k, v in source.items()})\n\n    # Create a build directory that contains symlinks to actual files\n    # but doesn't symlink actual directories.\n    build = pytester.mkdir(\"build\")\n    build.joinpath(\"app\").mkdir()\n    for f in source:\n        symlink_or_skip(real.joinpath(f), build.joinpath(f))\n    os.chdir(build)\n    result = pytester.runpytest(\"-vs\", \"app/test_foo.py\")\n    result.stdout.fnmatch_lines([\"*conftest_loaded*\", \"PASSED\"])\n    assert result.ret == ExitCode.OK\n\n\n@pytest.mark.skipif(\n    os.path.normcase(\"x\") != os.path.normcase(\"X\"),\n    reason=\"only relevant for case-insensitive file systems\",\n)\ndef test_conftest_badcase(pytester: Pytester) -> None:\n    \"\"\"Check conftest.py loading when directory casing is wrong (#5792).\"\"\"\n    pytester.path.joinpath(\"JenkinsRoot/test\").mkdir(parents=True)\n    source = {\"setup.py\": \"\", \"test/__init__.py\": \"\", \"test/conftest.py\": \"\"}\n    pytester.makepyfile(**{f\"JenkinsRoot/{k}\": v for k, v in source.items()})\n\n    os.chdir(pytester.path.joinpath(\"jenkinsroot/test\"))\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_conftest_uppercase(pytester: Pytester) -> None:\n    \"\"\"Check conftest.py whose qualified name contains uppercase characters (#5819)\"\"\"\n    source = {\"__init__.py\": \"\", \"Foo/conftest.py\": \"\", \"Foo/__init__.py\": \"\"}\n    pytester.makepyfile(**source)\n\n    os.chdir(pytester.path)\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_no_conftest(pytester: Pytester) -> None:\n    pytester.makeconftest(\"assert 0\")\n    result = pytester.runpytest(\"--noconftest\")\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.USAGE_ERROR\n\n\ndef test_conftest_existing_junitxml(pytester: Pytester) -> None:\n    x = pytester.mkdir(\"tests\")\n    x.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            def pytest_addoption(parser):\n                parser.addoption(\"--xyz\", action=\"store_true\")\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    pytester.makefile(ext=\".xml\", junit=\"\")  # Writes junit.xml\n    result = pytester.runpytest(\"-h\", \"--junitxml\", \"junit.xml\")\n    result.stdout.fnmatch_lines([\"*--xyz*\"])\n\n\ndef test_conftest_import_order(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    ct1 = pytester.makeconftest(\"\")\n    sub = pytester.mkdir(\"sub\")\n    ct2 = sub / \"conftest.py\"\n    ct2.write_text(\"\", encoding=\"utf-8\")\n\n    def impct(p, importmode, root, consider_namespace_packages):\n        return p\n\n    conftest = PytestPluginManager()\n    conftest._confcutdir = pytester.path\n    monkeypatch.setattr(conftest, \"_importconftest\", impct)\n    conftest._loadconftestmodules(\n        sub,\n        importmode=\"prepend\",\n        rootpath=pytester.path,\n        consider_namespace_packages=False,\n    )\n    mods = cast(List[Path], conftest._getconftestmodules(sub))\n    expected = [ct1, ct2]\n    assert mods == expected\n\n\ndef test_fixture_dependency(pytester: Pytester) -> None:\n    pytester.makeconftest(\"\")\n    pytester.path.joinpath(\"__init__.py\").touch()\n    sub = pytester.mkdir(\"sub\")\n    sub.joinpath(\"__init__.py\").touch()\n    sub.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n\n            @pytest.fixture\n            def not_needed():\n                assert False, \"Should not be called!\"\n\n            @pytest.fixture\n            def foo():\n                assert False, \"Should not be called!\"\n\n            @pytest.fixture\n            def bar(foo):\n                return 'bar'\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    subsub = sub.joinpath(\"subsub\")\n    subsub.mkdir()\n    subsub.joinpath(\"__init__.py\").touch()\n    subsub.joinpath(\"test_bar.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n\n            @pytest.fixture\n            def bar():\n                return 'sub bar'\n\n            def test_event_fixture(bar):\n                assert bar == 'sub bar'\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    result = pytester.runpytest(\"sub\")\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_conftest_found_with_double_dash(pytester: Pytester) -> None:\n    sub = pytester.mkdir(\"sub\")\n    sub.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            def pytest_addoption(parser):\n                parser.addoption(\"--hello-world\", action=\"store_true\")\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    p = sub.joinpath(\"test_hello.py\")\n    p.write_text(\"def test_hello(): pass\", encoding=\"utf-8\")\n    result = pytester.runpytest(str(p) + \"::test_hello\", \"-h\")\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *--hello-world*\n    \"\"\"\n    )\n\n\nclass TestConftestVisibility:\n    def _setup_tree(self, pytester: Pytester) -> dict[str, Path]:  # for issue616\n        # example mostly taken from:\n        # https://mail.python.org/pipermail/pytest-dev/2014-September/002617.html\n        runner = pytester.mkdir(\"empty\")\n        package = pytester.mkdir(\"package\")\n\n        package.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.fixture\n                def fxtr():\n                    return \"from-package\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        package.joinpath(\"test_pkgroot.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def test_pkgroot(fxtr):\n                    assert fxtr == \"from-package\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        swc = package.joinpath(\"swc\")\n        swc.mkdir()\n        swc.joinpath(\"__init__.py\").touch()\n        swc.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.fixture\n                def fxtr():\n                    return \"from-swc\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        swc.joinpath(\"test_with_conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def test_with_conftest(fxtr):\n                    assert fxtr == \"from-swc\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        snc = package.joinpath(\"snc\")\n        snc.mkdir()\n        snc.joinpath(\"__init__.py\").touch()\n        snc.joinpath(\"test_no_conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def test_no_conftest(fxtr):\n                    assert fxtr == \"from-package\"   # No local conftest.py, so should\n                                                    # use value from parent dir's\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        print(\"created directory structure:\")\n        for x in pytester.path.glob(\"**/\"):\n            print(\"   \" + str(x.relative_to(pytester.path)))\n\n        return {\"runner\": runner, \"package\": package, \"swc\": swc, \"snc\": snc}\n\n    # N.B.: \"swc\" stands for \"subdir with conftest.py\"\n    #       \"snc\" stands for \"subdir no [i.e. without] conftest.py\"\n    @pytest.mark.parametrize(\n        \"chdir,testarg,expect_ntests_passed\",\n        [\n            # Effective target: package/..\n            (\"runner\", \"..\", 3),\n            (\"package\", \"..\", 3),\n            (\"swc\", \"../..\", 3),\n            (\"snc\", \"../..\", 3),\n            # Effective target: package\n            (\"runner\", \"../package\", 3),\n            (\"package\", \".\", 3),\n            (\"swc\", \"..\", 3),\n            (\"snc\", \"..\", 3),\n            # Effective target: package/swc\n            (\"runner\", \"../package/swc\", 1),\n            (\"package\", \"./swc\", 1),\n            (\"swc\", \".\", 1),\n            (\"snc\", \"../swc\", 1),\n            # Effective target: package/snc\n            (\"runner\", \"../package/snc\", 1),\n            (\"package\", \"./snc\", 1),\n            (\"swc\", \"../snc\", 1),\n            (\"snc\", \".\", 1),\n        ],\n    )\n    def test_parsefactories_relative_node_ids(\n        self, pytester: Pytester, chdir: str, testarg: str, expect_ntests_passed: int\n    ) -> None:\n        \"\"\"#616\"\"\"\n        dirs = self._setup_tree(pytester)\n        print(f\"pytest run in cwd: {dirs[chdir].relative_to(pytester.path)}\")\n        print(f\"pytestarg        : {testarg}\")\n        print(f\"expected pass    : {expect_ntests_passed}\")\n        os.chdir(dirs[chdir])\n        reprec = pytester.inline_run(\n            testarg,\n            \"-q\",\n            \"--traceconfig\",\n            \"--confcutdir\",\n            pytester.path,\n        )\n        reprec.assertoutcome(passed=expect_ntests_passed)\n\n\n@pytest.mark.parametrize(\n    \"confcutdir,passed,error\", [(\".\", 2, 0), (\"src\", 1, 1), (None, 1, 1)]\n)\ndef test_search_conftest_up_to_inifile(\n    pytester: Pytester, confcutdir: str, passed: int, error: int\n) -> None:\n    \"\"\"Test that conftest files are detected only up to an ini file, unless\n    an explicit --confcutdir option is given.\n    \"\"\"\n    root = pytester.path\n    src = root.joinpath(\"src\")\n    src.mkdir()\n    src.joinpath(\"pytest.ini\").write_text(\"[pytest]\", encoding=\"utf-8\")\n    src.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            @pytest.fixture\n            def fix1(): pass\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    src.joinpath(\"test_foo.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            def test_1(fix1):\n                pass\n            def test_2(out_of_reach):\n                pass\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    root.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            @pytest.fixture\n            def out_of_reach(): pass\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n\n    args = [str(src)]\n    if confcutdir:\n        args = [f\"--confcutdir={root.joinpath(confcutdir)}\"]\n    result = pytester.runpytest(*args)\n    match = \"\"\n    if passed:\n        match += \"*%d passed*\" % passed\n    if error:\n        match += \"*%d error*\" % error\n    result.stdout.fnmatch_lines(match)\n\n\ndef test_issue1073_conftest_special_objects(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\\\n        class DontTouchMe(object):\n            def __getattr__(self, x):\n                raise Exception('cant touch me')\n\n        x = DontTouchMe()\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\\\n        def test_some():\n            pass\n        \"\"\"\n    )\n    res = pytester.runpytest()\n    assert res.ret == 0\n\n\ndef test_conftest_exception_handling(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\\\n        raise ValueError()\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\\\n        def test_some():\n            pass\n        \"\"\"\n    )\n    res = pytester.runpytest()\n    assert res.ret == 4\n    assert \"raise ValueError()\" in [line.strip() for line in res.errlines]\n\n\ndef test_hook_proxy(pytester: Pytester) -> None:\n    \"\"\"Session's gethookproxy() would cache conftests incorrectly (#2016).\n    It was decided to remove the cache altogether.\n    \"\"\"\n    pytester.makepyfile(\n        **{\n            \"root/demo-0/test_foo1.py\": \"def test1(): pass\",\n            \"root/demo-a/test_foo2.py\": \"def test1(): pass\",\n            \"root/demo-a/conftest.py\": \"\"\"\\\n            def pytest_ignore_collect(collection_path, config):\n                return True\n            \"\"\",\n            \"root/demo-b/test_foo3.py\": \"def test1(): pass\",\n            \"root/demo-c/test_foo4.py\": \"def test1(): pass\",\n        }\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\"*test_foo1.py*\", \"*test_foo3.py*\", \"*test_foo4.py*\", \"*3 passed*\"]\n    )\n\n\ndef test_required_option_help(pytester: Pytester) -> None:\n    pytester.makeconftest(\"assert 0\")\n    x = pytester.mkdir(\"x\")\n    x.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            def pytest_addoption(parser):\n                parser.addoption(\"--xyz\", action=\"store_true\", required=True)\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    result = pytester.runpytest(\"-h\", x)\n    result.stdout.no_fnmatch_line(\"*argument --xyz is required*\")\n    assert \"general:\" in result.stdout.str()\n", "testing/test_capture.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport contextlib\nimport io\nfrom io import UnsupportedOperation\nimport os\nimport subprocess\nimport sys\nimport textwrap\nfrom typing import BinaryIO\nfrom typing import cast\nfrom typing import Generator\nfrom typing import TextIO\n\nfrom _pytest import capture\nfrom _pytest.capture import _get_multicapture\nfrom _pytest.capture import CaptureFixture\nfrom _pytest.capture import CaptureManager\nfrom _pytest.capture import CaptureResult\nfrom _pytest.capture import MultiCapture\nfrom _pytest.config import ExitCode\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n# note: py.io capture tests where copied from\n# pylib 1.4.20.dev2 (rev 13d9af95547e)\n\n\ndef StdCaptureFD(\n    out: bool = True, err: bool = True, in_: bool = True\n) -> MultiCapture[str]:\n    return capture.MultiCapture(\n        in_=capture.FDCapture(0) if in_ else None,\n        out=capture.FDCapture(1) if out else None,\n        err=capture.FDCapture(2) if err else None,\n    )\n\n\ndef StdCapture(\n    out: bool = True, err: bool = True, in_: bool = True\n) -> MultiCapture[str]:\n    return capture.MultiCapture(\n        in_=capture.SysCapture(0) if in_ else None,\n        out=capture.SysCapture(1) if out else None,\n        err=capture.SysCapture(2) if err else None,\n    )\n\n\ndef TeeStdCapture(\n    out: bool = True, err: bool = True, in_: bool = True\n) -> MultiCapture[str]:\n    return capture.MultiCapture(\n        in_=capture.SysCapture(0, tee=True) if in_ else None,\n        out=capture.SysCapture(1, tee=True) if out else None,\n        err=capture.SysCapture(2, tee=True) if err else None,\n    )\n\n\nclass TestCaptureManager:\n    @pytest.mark.parametrize(\"method\", [\"no\", \"sys\", \"fd\"])\n    def test_capturing_basic_api(self, method) -> None:\n        capouter = StdCaptureFD()\n        old = sys.stdout, sys.stderr, sys.stdin\n        try:\n            capman = CaptureManager(method)\n            capman.start_global_capturing()\n            capman.suspend_global_capture()\n            outerr = capman.read_global_capture()\n            assert outerr == (\"\", \"\")\n            capman.suspend_global_capture()\n            outerr = capman.read_global_capture()\n            assert outerr == (\"\", \"\")\n            print(\"hello\")\n            capman.suspend_global_capture()\n            out, err = capman.read_global_capture()\n            if method == \"no\":\n                assert old == (sys.stdout, sys.stderr, sys.stdin)\n            else:\n                assert not out\n            capman.resume_global_capture()\n            print(\"hello\")\n            capman.suspend_global_capture()\n            out, err = capman.read_global_capture()\n            if method != \"no\":\n                assert out == \"hello\\n\"\n            capman.stop_global_capturing()\n        finally:\n            capouter.stop_capturing()\n\n    def test_init_capturing(self):\n        capouter = StdCaptureFD()\n        try:\n            capman = CaptureManager(\"fd\")\n            capman.start_global_capturing()\n            pytest.raises(AssertionError, capman.start_global_capturing)\n            capman.stop_global_capturing()\n        finally:\n            capouter.stop_capturing()\n\n\n@pytest.mark.parametrize(\"method\", [\"fd\", \"sys\"])\ndef test_capturing_unicode(pytester: Pytester, method: str) -> None:\n    obj = \"'b\\u00f6y'\"\n    pytester.makepyfile(\n        f\"\"\"\\\n        # taken from issue 227 from nosetests\n        def test_unicode():\n            import sys\n            print(sys.stdout)\n            print({obj})\n        \"\"\"\n    )\n    result = pytester.runpytest(f\"--capture={method}\")\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\n@pytest.mark.parametrize(\"method\", [\"fd\", \"sys\"])\ndef test_capturing_bytes_in_utf8_encoding(pytester: Pytester, method: str) -> None:\n    pytester.makepyfile(\n        \"\"\"\\\n        def test_unicode():\n            print('b\\\\u00f6y')\n        \"\"\"\n    )\n    result = pytester.runpytest(f\"--capture={method}\")\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_collect_capturing(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import sys\n\n        print(\"collect %s failure\" % 13)\n        sys.stderr.write(\"collect %s_stderr failure\" % 13)\n        import xyz42123\n    \"\"\"\n    )\n    result = pytester.runpytest(p)\n    result.stdout.fnmatch_lines(\n        [\n            \"*Captured stdout*\",\n            \"collect 13 failure\",\n            \"*Captured stderr*\",\n            \"collect 13_stderr failure\",\n        ]\n    )\n\n\nclass TestPerTestCapturing:\n    def test_capture_and_fixtures(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def setup_module(mod):\n                print(\"setup module\")\n            def setup_function(function):\n                print(\"setup \" + function.__name__)\n            def test_func1():\n                print(\"in func1\")\n                assert 0\n            def test_func2():\n                print(\"in func2\")\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\n                \"setup module*\",\n                \"setup test_func1*\",\n                \"in func1*\",\n                \"setup test_func2*\",\n                \"in func2*\",\n            ]\n        )\n\n    @pytest.mark.xfail(reason=\"unimplemented feature\")\n    def test_capture_scope_cache(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import sys\n            def setup_module(func):\n                print(\"module-setup\")\n            def setup_function(func):\n                print(\"function-setup\")\n            def test_func():\n                print(\"in function\")\n                assert 0\n            def teardown_function(func):\n                print(\"in teardown\")\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_func():*\",\n                \"*Captured stdout during setup*\",\n                \"module-setup*\",\n                \"function-setup*\",\n                \"*Captured stdout*\",\n                \"in teardown*\",\n            ]\n        )\n\n    def test_no_carry_over(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_func1():\n                print(\"in func1\")\n            def test_func2():\n                print(\"in func2\")\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        s = result.stdout.str()\n        assert \"in func1\" not in s\n        assert \"in func2\" in s\n\n    def test_teardown_capturing(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def setup_function(function):\n                print(\"setup func1\")\n            def teardown_function(function):\n                print(\"teardown func1\")\n                assert 0\n            def test_func1():\n                print(\"in func1\")\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\n                \"*teardown_function*\",\n                \"*Captured stdout*\",\n                \"setup func1*\",\n                \"in func1*\",\n                \"teardown func1*\",\n                # \"*1 fixture failure*\"\n            ]\n        )\n\n    def test_teardown_capturing_final(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def teardown_module(mod):\n                print(\"teardown module\")\n                assert 0\n            def test_func():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\n                \"*def teardown_module(mod):*\",\n                \"*Captured stdout*\",\n                \"*teardown module*\",\n                \"*1 error*\",\n            ]\n        )\n\n    def test_capturing_outerr(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\\\n            import sys\n            def test_capturing():\n                print(42)\n                sys.stderr.write(str(23))\n            def test_capturing_error():\n                print(1)\n                sys.stderr.write(str(2))\n                raise ValueError\n            \"\"\"\n        )\n        result = pytester.runpytest(p1)\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_capturing_outerr.py .F*\",\n                \"====* FAILURES *====\",\n                \"____*____\",\n                \"*test_capturing_outerr.py:8: ValueError\",\n                \"*--- Captured stdout *call*\",\n                \"1\",\n                \"*--- Captured stderr *call*\",\n                \"2\",\n            ]\n        )\n\n\nclass TestLoggingInteraction:\n    def test_logging_stream_ownership(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\\\n            def test_logging():\n                import logging\n                import pytest\n                stream = capture.CaptureIO()\n                logging.basicConfig(stream=stream)\n                stream.close() # to free memory/release resources\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess(p)\n        assert result.stderr.str().find(\"atexit\") == -1\n\n    def test_logging_and_immediate_setupteardown(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\\\n            import logging\n            def setup_function(function):\n                logging.warning(\"hello1\")\n\n            def test_logging():\n                logging.warning(\"hello2\")\n                assert 0\n\n            def teardown_function(function):\n                logging.warning(\"hello3\")\n                assert 0\n            \"\"\"\n        )\n        for optargs in ((\"--capture=sys\",), (\"--capture=fd\",)):\n            print(optargs)\n            result = pytester.runpytest_subprocess(p, *optargs)\n            s = result.stdout.str()\n            result.stdout.fnmatch_lines(\n                [\"*WARN*hello3\", \"*WARN*hello1\", \"*WARN*hello2\"]  # errors show first!\n            )\n            # verify proper termination\n            assert \"closed\" not in s\n\n    def test_logging_and_crossscope_fixtures(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\\\n            import logging\n            def setup_module(function):\n                logging.warning(\"hello1\")\n\n            def test_logging():\n                logging.warning(\"hello2\")\n                assert 0\n\n            def teardown_module(function):\n                logging.warning(\"hello3\")\n                assert 0\n            \"\"\"\n        )\n        for optargs in ((\"--capture=sys\",), (\"--capture=fd\",)):\n            print(optargs)\n            result = pytester.runpytest_subprocess(p, *optargs)\n            s = result.stdout.str()\n            result.stdout.fnmatch_lines(\n                [\"*WARN*hello3\", \"*WARN*hello1\", \"*WARN*hello2\"]  # errors come first\n            )\n            # verify proper termination\n            assert \"closed\" not in s\n\n    def test_conftestlogging_is_shown(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\\\n                import logging\n                logging.basicConfig()\n                logging.warning(\"hello435\")\n            \"\"\"\n        )\n        # make sure that logging is still captured in tests\n        result = pytester.runpytest_subprocess(\"-s\", \"-p\", \"no:capturelog\")\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stderr.fnmatch_lines([\"WARNING*hello435*\"])\n        assert \"operation on closed file\" not in result.stderr.str()\n\n    def test_conftestlogging_and_test_logging(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\\\n                import logging\n                logging.basicConfig()\n            \"\"\"\n        )\n        # make sure that logging is still captured in tests\n        p = pytester.makepyfile(\n            \"\"\"\\\n            def test_hello():\n                import logging\n                logging.warning(\"hello433\")\n                assert 0\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess(p, \"-p\", \"no:capturelog\")\n        assert result.ret != 0\n        result.stdout.fnmatch_lines([\"WARNING*hello433*\"])\n        assert \"something\" not in result.stderr.str()\n        assert \"operation on closed file\" not in result.stderr.str()\n\n    def test_logging_after_cap_stopped(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\\\n                import pytest\n                import logging\n\n                log = logging.getLogger(__name__)\n\n                @pytest.fixture\n                def log_on_teardown():\n                    yield\n                    log.warning('Logging on teardown')\n            \"\"\"\n        )\n        # make sure that logging is still captured in tests\n        p = pytester.makepyfile(\n            \"\"\"\\\n            def test_hello(log_on_teardown):\n                import logging\n                logging.warning(\"hello433\")\n                assert 1\n                raise KeyboardInterrupt()\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess(p, \"--log-cli-level\", \"info\")\n        assert result.ret != 0\n        result.stdout.fnmatch_lines(\n            [\"*WARNING*hello433*\", \"*WARNING*Logging on teardown*\"]\n        )\n        assert (\n            \"AttributeError: 'NoneType' object has no attribute 'resume_capturing'\"\n            not in result.stderr.str()\n        )\n\n\nclass TestCaptureFixture:\n    @pytest.mark.parametrize(\"opt\", [[], [\"-s\"]])\n    def test_std_functional(self, pytester: Pytester, opt) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\\\n            def test_hello(capsys):\n                print(42)\n                out, err = capsys.readouterr()\n                assert out.startswith(\"42\")\n            \"\"\",\n            *opt,\n        )\n        reprec.assertoutcome(passed=1)\n\n    def test_capsyscapfd(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\\\n            def test_one(capsys, capfd):\n                pass\n            def test_two(capfd, capsys):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR*setup*test_one*\",\n                \"E*capfd*capsys*same*time*\",\n                \"*ERROR*setup*test_two*\",\n                \"E*capsys*capfd*same*time*\",\n                \"*2 errors*\",\n            ]\n        )\n\n    def test_capturing_getfixturevalue(self, pytester: Pytester) -> None:\n        \"\"\"Test that asking for \"capfd\" and \"capsys\" using request.getfixturevalue\n        in the same test is an error.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\\\n            def test_one(capsys, request):\n                request.getfixturevalue(\"capfd\")\n            def test_two(capfd, request):\n                request.getfixturevalue(\"capsys\")\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_one*\",\n                \"E * cannot use capfd and capsys at the same time\",\n                \"*test_two*\",\n                \"E * cannot use capsys and capfd at the same time\",\n                \"*2 failed in*\",\n            ]\n        )\n\n    def test_capsyscapfdbinary(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\\\n            def test_one(capsys, capfdbinary):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\"*ERROR*setup*test_one*\", \"E*capfdbinary*capsys*same*time*\", \"*1 error*\"]\n        )\n\n    @pytest.mark.parametrize(\"method\", [\"sys\", \"fd\"])\n    def test_capture_is_represented_on_failure_issue128(\n        self, pytester: Pytester, method\n    ) -> None:\n        p = pytester.makepyfile(\n            f\"\"\"\\\n            def test_hello(cap{method}):\n                print(\"xxx42xxx\")\n                assert 0\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"xxx42xxx\"])\n\n    def test_stdfd_functional(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\\\n            def test_hello(capfd):\n                import os\n                os.write(1, b\"42\")\n                out, err = capfd.readouterr()\n                assert out.startswith(\"42\")\n                capfd.close()\n            \"\"\"\n        )\n        reprec.assertoutcome(passed=1)\n\n    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n    def test_cafd_preserves_newlines(self, capfd, nl) -> None:\n        print(\"test\", end=nl)\n        out, err = capfd.readouterr()\n        assert out.endswith(nl)\n\n    def test_capfdbinary(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\\\n            def test_hello(capfdbinary):\n                import os\n                # some likely un-decodable bytes\n                os.write(1, b'\\\\xfe\\\\x98\\\\x20')\n                out, err = capfdbinary.readouterr()\n                assert out == b'\\\\xfe\\\\x98\\\\x20'\n                assert err == b''\n            \"\"\"\n        )\n        reprec.assertoutcome(passed=1)\n\n    def test_capsysbinary(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            r\"\"\"\n            def test_hello(capsysbinary):\n                import sys\n\n                sys.stdout.buffer.write(b'hello')\n\n                # Some likely un-decodable bytes.\n                sys.stdout.buffer.write(b'\\xfe\\x98\\x20')\n\n                sys.stdout.buffer.flush()\n\n                # Ensure writing in text mode still works and is captured.\n                # https://github.com/pytest-dev/pytest/issues/6871\n                print(\"world\", flush=True)\n\n                out, err = capsysbinary.readouterr()\n                assert out == b'hello\\xfe\\x98\\x20world\\n'\n                assert err == b''\n\n                print(\"stdout after\")\n                print(\"stderr after\", file=sys.stderr)\n            \"\"\"\n        )\n        result = pytester.runpytest(str(p1), \"-rA\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*- Captured stdout call -*\",\n                \"stdout after\",\n                \"*- Captured stderr call -*\",\n                \"stderr after\",\n                \"*= 1 passed in *\",\n            ]\n        )\n\n    def test_partial_setup_failure(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\\\n            def test_hello(capsys, missingarg):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"*test_partial_setup_failure*\", \"*1 error*\"])\n\n    def test_keyboardinterrupt_disables_capturing(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\\\n            def test_hello(capfd):\n                import os\n                os.write(1, b'42')\n                raise KeyboardInterrupt()\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess(p)\n        result.stdout.fnmatch_lines([\"*KeyboardInterrupt*\"])\n        assert result.ret == 2\n\n    def test_capture_and_logging(self, pytester: Pytester) -> None:\n        \"\"\"#14\"\"\"\n        p = pytester.makepyfile(\n            \"\"\"\\\n            import logging\n            def test_log(capsys):\n                logging.error('x')\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess(p)\n        assert \"closed\" not in result.stderr.str()\n\n    @pytest.mark.parametrize(\"fixture\", [\"capsys\", \"capfd\"])\n    @pytest.mark.parametrize(\"no_capture\", [True, False])\n    def test_disabled_capture_fixture(\n        self, pytester: Pytester, fixture: str, no_capture: bool\n    ) -> None:\n        pytester.makepyfile(\n            f\"\"\"\\\n            def test_disabled({fixture}):\n                print('captured before')\n                with {fixture}.disabled():\n                    print('while capture is disabled')\n                print('captured after')\n                assert {fixture}.readouterr() == ('captured before\\\\ncaptured after\\\\n', '')\n\n            def test_normal():\n                print('test_normal executed')\n        \"\"\"\n        )\n        args = (\"-s\",) if no_capture else ()\n        result = pytester.runpytest_subprocess(*args)\n        result.stdout.fnmatch_lines([\"*while capture is disabled*\", \"*= 2 passed in *\"])\n        result.stdout.no_fnmatch_line(\"*captured before*\")\n        result.stdout.no_fnmatch_line(\"*captured after*\")\n        if no_capture:\n            assert \"test_normal executed\" in result.stdout.str()\n        else:\n            result.stdout.no_fnmatch_line(\"*test_normal executed*\")\n\n    def test_disabled_capture_fixture_twice(self, pytester: Pytester) -> None:\n        \"\"\"Test that an inner disabled() exit doesn't undo an outer disabled().\n\n        Issue #7148.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test_disabled(capfd):\n                print('captured before')\n                with capfd.disabled():\n                    print('while capture is disabled 1')\n                    with capfd.disabled():\n                        print('while capture is disabled 2')\n                    print('while capture is disabled 1 after')\n                print('captured after')\n                assert capfd.readouterr() == ('captured before\\\\ncaptured after\\\\n', '')\n        \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines(\n            [\n                \"*while capture is disabled 1\",\n                \"*while capture is disabled 2\",\n                \"*while capture is disabled 1 after\",\n            ],\n            consecutive=True,\n        )\n\n    @pytest.mark.parametrize(\"fixture\", [\"capsys\", \"capfd\"])\n    def test_fixture_use_by_other_fixtures(self, pytester: Pytester, fixture) -> None:\n        \"\"\"Ensure that capsys and capfd can be used by other fixtures during\n        setup and teardown.\"\"\"\n        pytester.makepyfile(\n            f\"\"\"\\\n            import sys\n            import pytest\n\n            @pytest.fixture\n            def captured_print({fixture}):\n                print('stdout contents begin')\n                print('stderr contents begin', file=sys.stderr)\n                out, err = {fixture}.readouterr()\n\n                yield out, err\n\n                print('stdout contents end')\n                print('stderr contents end', file=sys.stderr)\n                out, err = {fixture}.readouterr()\n                assert out == 'stdout contents end\\\\n'\n                assert err == 'stderr contents end\\\\n'\n\n            def test_captured_print(captured_print):\n                out, err = captured_print\n                assert out == 'stdout contents begin\\\\n'\n                assert err == 'stderr contents begin\\\\n'\n        \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result.stdout.no_fnmatch_line(\"*stdout contents begin*\")\n        result.stdout.no_fnmatch_line(\"*stderr contents begin*\")\n\n    @pytest.mark.parametrize(\"cap\", [\"capsys\", \"capfd\"])\n    def test_fixture_use_by_other_fixtures_teardown(\n        self, pytester: Pytester, cap\n    ) -> None:\n        \"\"\"Ensure we can access setup and teardown buffers from teardown when using capsys/capfd (##3033)\"\"\"\n        pytester.makepyfile(\n            f\"\"\"\\\n            import sys\n            import pytest\n            import os\n\n            @pytest.fixture()\n            def fix({cap}):\n                print(\"setup out\")\n                sys.stderr.write(\"setup err\\\\n\")\n                yield\n                out, err = {cap}.readouterr()\n                assert out == 'setup out\\\\ncall out\\\\n'\n                assert err == 'setup err\\\\ncall err\\\\n'\n\n            def test_a(fix):\n                print(\"call out\")\n                sys.stderr.write(\"call err\\\\n\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n\ndef test_setup_failure_does_not_kill_capturing(pytester: Pytester) -> None:\n    sub1 = pytester.mkpydir(\"sub1\")\n    sub1.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            def pytest_runtest_setup(item):\n                raise ValueError(42)\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    sub1.joinpath(\"test_mod.py\").write_text(\"def test_func1(): pass\", encoding=\"utf-8\")\n    result = pytester.runpytest(pytester.path, \"--traceconfig\")\n    result.stdout.fnmatch_lines([\"*ValueError(42)*\", \"*1 error*\"])\n\n\ndef test_capture_conftest_runtest_setup(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_runtest_setup():\n            print(\"hello19\")\n    \"\"\"\n    )\n    pytester.makepyfile(\"def test_func(): pass\")\n    result = pytester.runpytest()\n    assert result.ret == 0\n    result.stdout.no_fnmatch_line(\"*hello19*\")\n\n\ndef test_capture_badoutput_issue412(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import os\n\n        def test_func():\n            omg = bytearray([1,129,1])\n            os.write(1, omg)\n            assert 0\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--capture=fd\")\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *def test_func*\n        *assert 0*\n        *Captured*\n        *1 failed*\n    \"\"\"\n    )\n\n\ndef test_capture_early_option_parsing(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_runtest_setup():\n            print(\"hello19\")\n    \"\"\"\n    )\n    pytester.makepyfile(\"def test_func(): pass\")\n    result = pytester.runpytest(\"-vs\")\n    assert result.ret == 0\n    assert \"hello19\" in result.stdout.str()\n\n\ndef test_capture_binary_output(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        r\"\"\"\n        import pytest\n\n        def test_a():\n            import sys\n            import subprocess\n            subprocess.call([sys.executable, __file__])\n\n        def test_foo():\n            import os;os.write(1, b'\\xc3')\n\n        if __name__ == '__main__':\n            test_foo()\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--assert=plain\")\n    result.assert_outcomes(passed=2)\n\n\ndef test_error_during_readouterr(pytester: Pytester) -> None:\n    \"\"\"Make sure we suspend capturing if errors occur during readouterr\"\"\"\n    pytester.makepyfile(\n        pytest_xyz=\"\"\"\n        from _pytest.capture import FDCapture\n\n        def bad_snap(self):\n            raise Exception('boom')\n\n        assert FDCapture.snap\n        FDCapture.snap = bad_snap\n    \"\"\"\n    )\n    result = pytester.runpytest_subprocess(\"-p\", \"pytest_xyz\", \"--version\")\n    result.stderr.fnmatch_lines(\n        [\"*in bad_snap\", \"    raise Exception('boom')\", \"Exception: boom\"]\n    )\n\n\nclass TestCaptureIO:\n    def test_text(self) -> None:\n        f = capture.CaptureIO()\n        f.write(\"hello\")\n        s = f.getvalue()\n        assert s == \"hello\"\n        f.close()\n\n    def test_unicode_and_str_mixture(self) -> None:\n        f = capture.CaptureIO()\n        f.write(\"\\u00f6\")\n        pytest.raises(TypeError, f.write, b\"hello\")\n\n    def test_write_bytes_to_buffer(self) -> None:\n        \"\"\"In python3, stdout / stderr are text io wrappers (exposing a buffer\n        property of the underlying bytestream).  See issue #1407\n        \"\"\"\n        f = capture.CaptureIO()\n        f.buffer.write(b\"foo\\r\\n\")\n        assert f.getvalue() == \"foo\\r\\n\"\n\n\nclass TestTeeCaptureIO(TestCaptureIO):\n    def test_text(self) -> None:\n        sio = io.StringIO()\n        f = capture.TeeCaptureIO(sio)\n        f.write(\"hello\")\n        s1 = f.getvalue()\n        assert s1 == \"hello\"\n        s2 = sio.getvalue()\n        assert s2 == s1\n        f.close()\n        sio.close()\n\n    def test_unicode_and_str_mixture(self) -> None:\n        sio = io.StringIO()\n        f = capture.TeeCaptureIO(sio)\n        f.write(\"\\u00f6\")\n        pytest.raises(TypeError, f.write, b\"hello\")\n\n\ndef test_dontreadfrominput() -> None:\n    from _pytest.capture import DontReadFromInput\n\n    f = DontReadFromInput()\n    assert f.buffer is f  # type: ignore[comparison-overlap]\n    assert not f.isatty()\n    pytest.raises(OSError, f.read)\n    pytest.raises(OSError, f.readlines)\n    iter_f = iter(f)\n    pytest.raises(OSError, next, iter_f)\n    pytest.raises(UnsupportedOperation, f.fileno)\n    pytest.raises(UnsupportedOperation, f.flush)\n    assert not f.readable()\n    pytest.raises(UnsupportedOperation, f.seek, 0)\n    assert not f.seekable()\n    pytest.raises(UnsupportedOperation, f.tell)\n    pytest.raises(UnsupportedOperation, f.truncate, 0)\n    pytest.raises(UnsupportedOperation, f.write, b\"\")\n    pytest.raises(UnsupportedOperation, f.writelines, [])\n    assert not f.writable()\n    assert isinstance(f.encoding, str)\n    f.close()  # just for completeness\n    with f:\n        pass\n\n\ndef test_captureresult() -> None:\n    cr = CaptureResult(\"out\", \"err\")\n    assert len(cr) == 2\n    assert cr.out == \"out\"\n    assert cr.err == \"err\"\n    out, err = cr\n    assert out == \"out\"\n    assert err == \"err\"\n    assert cr[0] == \"out\"\n    assert cr[1] == \"err\"\n    assert cr == cr\n    assert cr == CaptureResult(\"out\", \"err\")\n    assert cr != CaptureResult(\"wrong\", \"err\")\n    assert cr == (\"out\", \"err\")\n    assert cr != (\"out\", \"wrong\")\n    assert hash(cr) == hash(CaptureResult(\"out\", \"err\"))\n    assert hash(cr) == hash((\"out\", \"err\"))\n    assert hash(cr) != hash((\"out\", \"wrong\"))\n    assert cr < (\"z\",)\n    assert cr < (\"z\", \"b\")\n    assert cr < (\"z\", \"b\", \"c\")\n    assert cr.count(\"err\") == 1\n    assert cr.count(\"wrong\") == 0\n    assert cr.index(\"err\") == 1\n    with pytest.raises(ValueError):\n        assert cr.index(\"wrong\") == 0\n    assert next(iter(cr)) == \"out\"\n    assert cr._replace(err=\"replaced\") == (\"out\", \"replaced\")\n\n\n@pytest.fixture\ndef tmpfile(pytester: Pytester) -> Generator[BinaryIO, None, None]:\n    f = pytester.makepyfile(\"\").open(\"wb+\")\n    yield f\n    if not f.closed:\n        f.close()\n\n\n@contextlib.contextmanager\ndef lsof_check():\n    pid = os.getpid()\n    try:\n        out = subprocess.check_output((\"lsof\", \"-p\", str(pid))).decode()\n    except (OSError, subprocess.CalledProcessError, UnicodeDecodeError) as exc:\n        # about UnicodeDecodeError, see note on pytester\n        pytest.skip(f\"could not run 'lsof' ({exc!r})\")\n    yield\n    out2 = subprocess.check_output((\"lsof\", \"-p\", str(pid))).decode()\n    len1 = len([x for x in out.split(\"\\n\") if \"REG\" in x])\n    len2 = len([x for x in out2.split(\"\\n\") if \"REG\" in x])\n    assert len2 < len1 + 3, out2\n\n\nclass TestFDCapture:\n    def test_simple(self, tmpfile: BinaryIO) -> None:\n        fd = tmpfile.fileno()\n        cap = capture.FDCapture(fd)\n        data = b\"hello\"\n        os.write(fd, data)\n        pytest.raises(AssertionError, cap.snap)\n        cap.done()\n        cap = capture.FDCapture(fd)\n        cap.start()\n        os.write(fd, data)\n        s = cap.snap()\n        cap.done()\n        assert s == \"hello\"\n\n    def test_simple_many(self, tmpfile: BinaryIO) -> None:\n        for i in range(10):\n            self.test_simple(tmpfile)\n\n    def test_simple_many_check_open_files(self, pytester: Pytester) -> None:\n        with lsof_check():\n            with pytester.makepyfile(\"\").open(\"wb+\") as tmpfile:\n                self.test_simple_many(tmpfile)\n\n    def test_simple_fail_second_start(self, tmpfile: BinaryIO) -> None:\n        fd = tmpfile.fileno()\n        cap = capture.FDCapture(fd)\n        cap.done()\n        pytest.raises(AssertionError, cap.start)\n\n    def test_stderr(self) -> None:\n        cap = capture.FDCapture(2)\n        cap.start()\n        print(\"hello\", file=sys.stderr)\n        s = cap.snap()\n        cap.done()\n        assert s == \"hello\\n\"\n\n    def test_stdin(self) -> None:\n        cap = capture.FDCapture(0)\n        cap.start()\n        x = os.read(0, 100).strip()\n        cap.done()\n        assert x == b\"\"\n\n    def test_writeorg(self, tmpfile: BinaryIO) -> None:\n        data1, data2 = b\"foo\", b\"bar\"\n        cap = capture.FDCapture(tmpfile.fileno())\n        cap.start()\n        tmpfile.write(data1)\n        tmpfile.flush()\n        cap.writeorg(data2.decode(\"ascii\"))\n        scap = cap.snap()\n        cap.done()\n        assert scap == data1.decode(\"ascii\")\n        with open(tmpfile.name, \"rb\") as stmp_file:\n            stmp = stmp_file.read()\n            assert stmp == data2\n\n    def test_simple_resume_suspend(self) -> None:\n        with saved_fd(1):\n            cap = capture.FDCapture(1)\n            cap.start()\n            data = b\"hello\"\n            os.write(1, data)\n            sys.stdout.write(\"whatever\")\n            s = cap.snap()\n            assert s == \"hellowhatever\"\n            cap.suspend()\n            os.write(1, b\"world\")\n            sys.stdout.write(\"qlwkej\")\n            assert not cap.snap()\n            cap.resume()\n            os.write(1, b\"but now\")\n            sys.stdout.write(\" yes\\n\")\n            s = cap.snap()\n            assert s == \"but now yes\\n\"\n            cap.suspend()\n            cap.done()\n            pytest.raises(AssertionError, cap.suspend)\n\n            assert repr(cap) == (\n                f\"<FDCapture 1 oldfd={cap.targetfd_save} _state='done' tmpfile={cap.tmpfile!r}>\"\n            )\n            # Should not crash with missing \"_old\".\n            assert isinstance(cap.syscapture, capture.SysCapture)\n            assert repr(cap.syscapture) == (\n                f\"<SysCapture stdout _old=<UNSET> _state='done' tmpfile={cap.syscapture.tmpfile!r}>\"\n            )\n\n    def test_capfd_sys_stdout_mode(self, capfd) -> None:\n        assert \"b\" not in sys.stdout.mode\n\n\n@contextlib.contextmanager\ndef saved_fd(fd):\n    new_fd = os.dup(fd)\n    try:\n        yield\n    finally:\n        os.dup2(new_fd, fd)\n        os.close(new_fd)\n\n\nclass TestStdCapture:\n    captureclass = staticmethod(StdCapture)\n\n    @contextlib.contextmanager\n    def getcapture(self, **kw):\n        cap = self.__class__.captureclass(**kw)\n        cap.start_capturing()\n        try:\n            yield cap\n        finally:\n            cap.stop_capturing()\n\n    def test_capturing_done_simple(self) -> None:\n        with self.getcapture() as cap:\n            sys.stdout.write(\"hello\")\n            sys.stderr.write(\"world\")\n            out, err = cap.readouterr()\n        assert out == \"hello\"\n        assert err == \"world\"\n\n    def test_capturing_reset_simple(self) -> None:\n        with self.getcapture() as cap:\n            print(\"hello world\")\n            sys.stderr.write(\"hello error\\n\")\n            out, err = cap.readouterr()\n        assert out == \"hello world\\n\"\n        assert err == \"hello error\\n\"\n\n    def test_capturing_readouterr(self) -> None:\n        with self.getcapture() as cap:\n            print(\"hello world\")\n            sys.stderr.write(\"hello error\\n\")\n            out, err = cap.readouterr()\n            assert out == \"hello world\\n\"\n            assert err == \"hello error\\n\"\n            sys.stderr.write(\"error2\")\n            out, err = cap.readouterr()\n        assert err == \"error2\"\n\n    def test_capture_results_accessible_by_attribute(self) -> None:\n        with self.getcapture() as cap:\n            sys.stdout.write(\"hello\")\n            sys.stderr.write(\"world\")\n            capture_result = cap.readouterr()\n        assert capture_result.out == \"hello\"\n        assert capture_result.err == \"world\"\n\n    def test_capturing_readouterr_unicode(self) -> None:\n        with self.getcapture() as cap:\n            print(\"hx\u0105\u0107\")\n            out, err = cap.readouterr()\n        assert out == \"hx\u0105\u0107\\n\"\n\n    def test_reset_twice_error(self) -> None:\n        with self.getcapture() as cap:\n            print(\"hello\")\n            out, err = cap.readouterr()\n        pytest.raises(ValueError, cap.stop_capturing)\n        assert out == \"hello\\n\"\n        assert not err\n\n    def test_capturing_modify_sysouterr_in_between(self) -> None:\n        oldout = sys.stdout\n        olderr = sys.stderr\n        with self.getcapture() as cap:\n            sys.stdout.write(\"hello\")\n            sys.stderr.write(\"world\")\n            sys.stdout = capture.CaptureIO()\n            sys.stderr = capture.CaptureIO()\n            print(\"not seen\")\n            sys.stderr.write(\"not seen\\n\")\n            out, err = cap.readouterr()\n        assert out == \"hello\"\n        assert err == \"world\"\n        assert sys.stdout == oldout\n        assert sys.stderr == olderr\n\n    def test_capturing_error_recursive(self) -> None:\n        with self.getcapture() as cap1:\n            print(\"cap1\")\n            with self.getcapture() as cap2:\n                print(\"cap2\")\n                out2, err2 = cap2.readouterr()\n                out1, err1 = cap1.readouterr()\n        assert out1 == \"cap1\\n\"\n        assert out2 == \"cap2\\n\"\n\n    def test_just_out_capture(self) -> None:\n        with self.getcapture(out=True, err=False) as cap:\n            sys.stdout.write(\"hello\")\n            sys.stderr.write(\"world\")\n            out, err = cap.readouterr()\n        assert out == \"hello\"\n        assert not err\n\n    def test_just_err_capture(self) -> None:\n        with self.getcapture(out=False, err=True) as cap:\n            sys.stdout.write(\"hello\")\n            sys.stderr.write(\"world\")\n            out, err = cap.readouterr()\n        assert err == \"world\"\n        assert not out\n\n    def test_stdin_restored(self) -> None:\n        old = sys.stdin\n        with self.getcapture(in_=True):\n            newstdin = sys.stdin\n        assert newstdin != sys.stdin\n        assert sys.stdin is old\n\n    def test_stdin_nulled_by_default(self) -> None:\n        print(\"XXX this test may well hang instead of crashing\")\n        print(\"XXX which indicates an error in the underlying capturing\")\n        print(\"XXX mechanisms\")\n        with self.getcapture():\n            pytest.raises(OSError, sys.stdin.read)\n\n\nclass TestTeeStdCapture(TestStdCapture):\n    captureclass = staticmethod(TeeStdCapture)\n\n    def test_capturing_error_recursive(self) -> None:\n        r\"\"\"For TeeStdCapture since we passthrough stderr/stdout, cap1\n        should get all output, while cap2 should only get \"cap2\\n\".\"\"\"\n        with self.getcapture() as cap1:\n            print(\"cap1\")\n            with self.getcapture() as cap2:\n                print(\"cap2\")\n                out2, err2 = cap2.readouterr()\n                out1, err1 = cap1.readouterr()\n        assert out1 == \"cap1\\ncap2\\n\"\n        assert out2 == \"cap2\\n\"\n\n\nclass TestStdCaptureFD(TestStdCapture):\n    captureclass = staticmethod(StdCaptureFD)\n\n    def test_simple_only_fd(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            import os\n            def test_x():\n                os.write(1, b\"hello\\\\n\")\n                assert 0\n            \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *test_x*\n            *assert 0*\n            *Captured stdout*\n        \"\"\"\n        )\n\n    def test_intermingling(self):\n        with self.getcapture() as cap:\n            os.write(1, b\"1\")\n            sys.stdout.write(str(2))\n            sys.stdout.flush()\n            os.write(1, b\"3\")\n            os.write(2, b\"a\")\n            sys.stderr.write(\"b\")\n            sys.stderr.flush()\n            os.write(2, b\"c\")\n            out, err = cap.readouterr()\n        assert out == \"123\"\n        assert err == \"abc\"\n\n    def test_many(self, capfd):\n        with lsof_check():\n            for i in range(10):\n                cap = StdCaptureFD()\n                cap.start_capturing()\n                cap.stop_capturing()\n\n\nclass TestStdCaptureFDinvalidFD:\n    def test_stdcapture_fd_invalid_fd(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import os\n            from fnmatch import fnmatch\n            from _pytest import capture\n\n            def StdCaptureFD(out=True, err=True, in_=True):\n                return capture.MultiCapture(\n                    in_=capture.FDCapture(0) if in_ else None,\n                    out=capture.FDCapture(1) if out else None,\n                    err=capture.FDCapture(2) if err else None,\n                )\n\n            def test_stdout():\n                os.close(1)\n                cap = StdCaptureFD(out=True, err=False, in_=False)\n                assert fnmatch(repr(cap.out), \"<FDCapture 1 oldfd=* _state='initialized' tmpfile=*>\")\n                cap.start_capturing()\n                os.write(1, b\"stdout\")\n                assert cap.readouterr() == (\"stdout\", \"\")\n                cap.stop_capturing()\n\n            def test_stderr():\n                os.close(2)\n                cap = StdCaptureFD(out=False, err=True, in_=False)\n                assert fnmatch(repr(cap.err), \"<FDCapture 2 oldfd=* _state='initialized' tmpfile=*>\")\n                cap.start_capturing()\n                os.write(2, b\"stderr\")\n                assert cap.readouterr() == (\"\", \"stderr\")\n                cap.stop_capturing()\n\n            def test_stdin():\n                os.close(0)\n                cap = StdCaptureFD(out=False, err=False, in_=True)\n                assert fnmatch(repr(cap.in_), \"<FDCapture 0 oldfd=* _state='initialized' tmpfile=*>\")\n                cap.stop_capturing()\n        \"\"\"\n        )\n        result = pytester.runpytest_subprocess(\"--capture=fd\")\n        assert result.ret == 0\n        assert result.parseoutcomes()[\"passed\"] == 3\n\n    def test_fdcapture_invalid_fd_with_fd_reuse(self, pytester: Pytester) -> None:\n        with saved_fd(1):\n            os.close(1)\n            cap = capture.FDCaptureBinary(1)\n            cap.start()\n            os.write(1, b\"started\")\n            cap.suspend()\n            os.write(1, b\" suspended\")\n            cap.resume()\n            os.write(1, b\" resumed\")\n            assert cap.snap() == b\"started resumed\"\n            cap.done()\n            with pytest.raises(OSError):\n                os.write(1, b\"done\")\n\n    def test_fdcapture_invalid_fd_without_fd_reuse(self, pytester: Pytester) -> None:\n        with saved_fd(1), saved_fd(2):\n            os.close(1)\n            os.close(2)\n            cap = capture.FDCaptureBinary(2)\n            cap.start()\n            os.write(2, b\"started\")\n            cap.suspend()\n            os.write(2, b\" suspended\")\n            cap.resume()\n            os.write(2, b\" resumed\")\n            assert cap.snap() == b\"started resumed\"\n            cap.done()\n            with pytest.raises(OSError):\n                os.write(2, b\"done\")\n\n\ndef test_capture_not_started_but_reset() -> None:\n    capsys = StdCapture()\n    capsys.stop_capturing()\n\n\ndef test_using_capsys_fixture_works_with_sys_stdout_encoding(\n    capsys: CaptureFixture[str],\n) -> None:\n    test_text = \"test text\"\n\n    print(test_text.encode(sys.stdout.encoding, \"replace\"))\n    (out, err) = capsys.readouterr()\n    assert out\n    assert err == \"\"\n\n\ndef test_capsys_results_accessible_by_attribute(capsys: CaptureFixture[str]) -> None:\n    sys.stdout.write(\"spam\")\n    sys.stderr.write(\"eggs\")\n    capture_result = capsys.readouterr()\n    assert capture_result.out == \"spam\"\n    assert capture_result.err == \"eggs\"\n\n\ndef test_fdcapture_tmpfile_remains_the_same() -> None:\n    cap = StdCaptureFD(out=False, err=True)\n    assert isinstance(cap.err, capture.FDCapture)\n    try:\n        cap.start_capturing()\n        capfile = cap.err.tmpfile\n        cap.readouterr()\n    finally:\n        cap.stop_capturing()\n    capfile2 = cap.err.tmpfile\n    assert capfile2 == capfile\n\n\ndef test_close_and_capture_again(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import os\n        def test_close():\n            os.close(1)\n        def test_capture_again():\n            os.write(1, b\"hello\\\\n\")\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest_subprocess()\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *test_capture_again*\n        *assert 0*\n        *stdout*\n        *hello*\n    \"\"\"\n    )\n\n\n@pytest.mark.parametrize(\n    \"method\", [\"SysCapture(2)\", \"SysCapture(2, tee=True)\", \"FDCapture(2)\"]\n)\ndef test_capturing_and_logging_fundamentals(pytester: Pytester, method: str) -> None:\n    # here we check a fundamental feature\n    p = pytester.makepyfile(\n        f\"\"\"\n        import sys, os, logging\n        from _pytest import capture\n        cap = capture.MultiCapture(\n            in_=None,\n            out=None,\n            err=capture.{method},\n        )\n        cap.start_capturing()\n\n        logging.warning(\"hello1\")\n        outerr = cap.readouterr()\n        print(\"suspend, captured %s\" %(outerr,))\n        logging.warning(\"hello2\")\n\n        cap.pop_outerr_to_orig()\n        logging.warning(\"hello3\")\n\n        outerr = cap.readouterr()\n        print(\"suspend2, captured %s\" % (outerr,))\n    \"\"\"\n    )\n    result = pytester.runpython(p)\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        suspend, captured*hello1*\n        suspend2, captured*WARNING:root:hello3*\n    \"\"\"\n    )\n    result.stderr.fnmatch_lines(\n        \"\"\"\n        WARNING:root:hello2\n    \"\"\"\n    )\n    assert \"atexit\" not in result.stderr.str()\n\n\ndef test_error_attribute_issue555(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import sys\n        def test_capattr():\n            assert sys.stdout.errors == \"replace\"\n            assert sys.stderr.errors == \"replace\"\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\n@pytest.mark.skipif(\n    not sys.platform.startswith(\"win\"),\n    reason=\"only on windows\",\n)\ndef test_windowsconsoleio_workaround_non_standard_streams() -> None:\n    \"\"\"\n    Ensure _windowsconsoleio_workaround function works with objects that\n    do not implement the full ``io``-based stream protocol, for example execnet channels (#2666).\n    \"\"\"\n    from _pytest.capture import _windowsconsoleio_workaround\n\n    class DummyStream:\n        def write(self, s):\n            pass\n\n    stream = cast(TextIO, DummyStream())\n    _windowsconsoleio_workaround(stream)\n\n\ndef test_dontreadfrominput_has_encoding(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import sys\n        def test_capattr():\n            # should not raise AttributeError\n            assert sys.stdout.encoding\n            assert sys.stderr.encoding\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\ndef test_crash_on_closing_tmpfile_py27(\n    pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import threading\n        import sys\n\n        printing = threading.Event()\n\n        def spam():\n            f = sys.stderr\n            print('SPAMBEFORE', end='', file=f)\n            printing.set()\n\n            while True:\n                try:\n                    f.flush()\n                except (OSError, ValueError):\n                    break\n\n        def test_spam_in_thread():\n            t = threading.Thread(target=spam)\n            t.daemon = True\n            t.start()\n\n            printing.wait()\n    \"\"\"\n    )\n    # Do not consider plugins like hypothesis, which might output to stderr.\n    monkeypatch.setenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", \"1\")\n    result = pytester.runpytest_subprocess(str(p))\n    assert result.ret == 0\n    assert result.stderr.str() == \"\"\n    result.stdout.no_fnmatch_line(\"*OSError*\")\n\n\ndef test_global_capture_with_live_logging(pytester: Pytester) -> None:\n    # Issue 3819\n    # capture should work with live cli logging\n\n    # Teardown report seems to have the capture for the whole process (setup, capture, teardown)\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_runtest_logreport(report):\n            if \"test_global\" in report.nodeid:\n                if report.when == \"teardown\":\n                    with open(\"caplog\", \"w\", encoding=\"utf-8\") as f:\n                        f.write(report.caplog)\n                    with open(\"capstdout\", \"w\", encoding=\"utf-8\") as f:\n                        f.write(report.capstdout)\n        \"\"\"\n    )\n\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n        import sys\n        import pytest\n\n        logger = logging.getLogger(__name__)\n\n        @pytest.fixture\n        def fix1():\n            print(\"fix setup\")\n            logging.info(\"fix setup\")\n            yield\n            logging.info(\"fix teardown\")\n            print(\"fix teardown\")\n\n        def test_global(fix1):\n            print(\"begin test\")\n            logging.info(\"something in test\")\n            print(\"end test\")\n        \"\"\"\n    )\n    result = pytester.runpytest_subprocess(\"--log-cli-level=INFO\")\n    assert result.ret == 0\n\n    with open(\"caplog\", encoding=\"utf-8\") as f:\n        caplog = f.read()\n\n    assert \"fix setup\" in caplog\n    assert \"something in test\" in caplog\n    assert \"fix teardown\" in caplog\n\n    with open(\"capstdout\", encoding=\"utf-8\") as f:\n        capstdout = f.read()\n\n    assert \"fix setup\" in capstdout\n    assert \"begin test\" in capstdout\n    assert \"end test\" in capstdout\n    assert \"fix teardown\" in capstdout\n\n\n@pytest.mark.parametrize(\"capture_fixture\", [\"capsys\", \"capfd\"])\ndef test_capture_with_live_logging(\n    pytester: Pytester, capture_fixture: CaptureFixture[str]\n) -> None:\n    # Issue 3819\n    # capture should work with live cli logging\n\n    pytester.makepyfile(\n        f\"\"\"\n        import logging\n        import sys\n\n        logger = logging.getLogger(__name__)\n\n        def test_capture({capture_fixture}):\n            print(\"hello\")\n            sys.stderr.write(\"world\\\\n\")\n            captured = {capture_fixture}.readouterr()\n            assert captured.out == \"hello\\\\n\"\n            assert captured.err == \"world\\\\n\"\n\n            logging.info(\"something\")\n            print(\"next\")\n            logging.info(\"something\")\n\n            captured = {capture_fixture}.readouterr()\n            assert captured.out == \"next\\\\n\"\n        \"\"\"\n    )\n\n    result = pytester.runpytest_subprocess(\"--log-cli-level=INFO\")\n    assert result.ret == 0\n\n\ndef test_typeerror_encodedfile_write(pytester: Pytester) -> None:\n    \"\"\"It should behave the same with and without output capturing (#4861).\"\"\"\n    p = pytester.makepyfile(\n        \"\"\"\n        def test_fails():\n            import sys\n            sys.stdout.write(b\"foo\")\n    \"\"\"\n    )\n    result_without_capture = pytester.runpytest(\"-s\", str(p))\n    result_with_capture = pytester.runpytest(str(p))\n\n    assert result_with_capture.ret == result_without_capture.ret\n    out = result_with_capture.stdout.str()\n    assert (\"TypeError: write() argument must be str, not bytes\" in out) or (\n        \"TypeError: unicode argument expected, got 'bytes'\" in out\n    )\n\n\ndef test_stderr_write_returns_len(capsys: CaptureFixture[str]) -> None:\n    \"\"\"Write on Encoded files, namely captured stderr, should return number of characters written.\"\"\"\n    assert sys.stderr.write(\"Foo\") == 3\n\n\ndef test_encodedfile_writelines(tmpfile: BinaryIO) -> None:\n    ef = capture.EncodedFile(tmpfile, encoding=\"utf-8\")\n    with pytest.raises(TypeError):\n        ef.writelines([b\"line1\", b\"line2\"])  # type: ignore[list-item]\n    assert ef.writelines([\"line3\", \"line4\"]) is None  # type: ignore[func-returns-value]\n    ef.flush()\n    tmpfile.seek(0)\n    assert tmpfile.read() == b\"line3line4\"\n    tmpfile.close()\n    with pytest.raises(ValueError):\n        ef.read()\n\n\ndef test__get_multicapture() -> None:\n    assert isinstance(_get_multicapture(\"no\"), MultiCapture)\n    pytest.raises(ValueError, _get_multicapture, \"unknown\").match(\n        r\"^unknown capturing method: 'unknown'\"\n    )\n\n\ndef test_logging_while_collecting(pytester: Pytester) -> None:\n    \"\"\"Issue #6240: Calls to logging.xxx() during collection causes all logging calls to be duplicated to stderr\"\"\"\n    p = pytester.makepyfile(\n        \"\"\"\\\n        import logging\n\n        logging.warning(\"during collection\")\n\n        def test_logging():\n            logging.warning(\"during call\")\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest_subprocess(p)\n    assert result.ret == ExitCode.TESTS_FAILED\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_*.py F*\",\n            \"====* FAILURES *====\",\n            \"____*____\",\n            \"*--- Captured log call*\",\n            \"WARNING * during call\",\n            \"*1 failed*\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*Captured stderr call*\")\n    result.stdout.no_fnmatch_line(\"*during collection*\")\n", "testing/test_monkeypatch.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nfrom pathlib import Path\nimport re\nimport sys\nimport textwrap\nfrom typing import Generator\n\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.fixture\ndef mp() -> Generator[MonkeyPatch, None, None]:\n    cwd = os.getcwd()\n    sys_path = list(sys.path)\n    yield MonkeyPatch()\n    sys.path[:] = sys_path\n    os.chdir(cwd)\n\n\ndef test_setattr() -> None:\n    class A:\n        x = 1\n\n    monkeypatch = MonkeyPatch()\n    pytest.raises(AttributeError, monkeypatch.setattr, A, \"notexists\", 2)\n    monkeypatch.setattr(A, \"y\", 2, raising=False)\n    assert A.y == 2  # type: ignore\n    monkeypatch.undo()\n    assert not hasattr(A, \"y\")\n\n    monkeypatch = MonkeyPatch()\n    monkeypatch.setattr(A, \"x\", 2)\n    assert A.x == 2\n    monkeypatch.setattr(A, \"x\", 3)\n    assert A.x == 3\n    monkeypatch.undo()\n    assert A.x == 1\n\n    A.x = 5\n    monkeypatch.undo()  # double-undo makes no modification\n    assert A.x == 5\n\n    with pytest.raises(TypeError):\n        monkeypatch.setattr(A, \"y\")  # type: ignore[call-overload]\n\n\nclass TestSetattrWithImportPath:\n    def test_string_expression(self, monkeypatch: MonkeyPatch) -> None:\n        with monkeypatch.context() as mp:\n            mp.setattr(\"os.path.abspath\", lambda x: \"hello2\")\n            assert os.path.abspath(\"123\") == \"hello2\"\n\n    def test_string_expression_class(self, monkeypatch: MonkeyPatch) -> None:\n        with monkeypatch.context() as mp:\n            mp.setattr(\"_pytest.config.Config\", 42)\n            import _pytest\n\n            assert _pytest.config.Config == 42  # type: ignore\n\n    def test_unicode_string(self, monkeypatch: MonkeyPatch) -> None:\n        with monkeypatch.context() as mp:\n            mp.setattr(\"_pytest.config.Config\", 42)\n            import _pytest\n\n            assert _pytest.config.Config == 42  # type: ignore\n            mp.delattr(\"_pytest.config.Config\")\n\n    def test_wrong_target(self, monkeypatch: MonkeyPatch) -> None:\n        with pytest.raises(TypeError):\n            monkeypatch.setattr(None, None)  # type: ignore[call-overload]\n\n    def test_unknown_import(self, monkeypatch: MonkeyPatch) -> None:\n        with pytest.raises(ImportError):\n            monkeypatch.setattr(\"unkn123.classx\", None)\n\n    def test_unknown_attr(self, monkeypatch: MonkeyPatch) -> None:\n        with pytest.raises(AttributeError):\n            monkeypatch.setattr(\"os.path.qweqwe\", None)\n\n    def test_unknown_attr_non_raising(self, monkeypatch: MonkeyPatch) -> None:\n        # https://github.com/pytest-dev/pytest/issues/746\n        with monkeypatch.context() as mp:\n            mp.setattr(\"os.path.qweqwe\", 42, raising=False)\n            assert os.path.qweqwe == 42  # type: ignore\n\n    def test_delattr(self, monkeypatch: MonkeyPatch) -> None:\n        with monkeypatch.context() as mp:\n            mp.delattr(\"os.path.abspath\")\n            assert not hasattr(os.path, \"abspath\")\n            mp.undo()\n            assert os.path.abspath  # type:ignore[truthy-function]\n\n\ndef test_delattr() -> None:\n    class A:\n        x = 1\n\n    monkeypatch = MonkeyPatch()\n    monkeypatch.delattr(A, \"x\")\n    assert not hasattr(A, \"x\")\n    monkeypatch.undo()\n    assert A.x == 1\n\n    monkeypatch = MonkeyPatch()\n    monkeypatch.delattr(A, \"x\")\n    pytest.raises(AttributeError, monkeypatch.delattr, A, \"y\")\n    monkeypatch.delattr(A, \"y\", raising=False)\n    monkeypatch.setattr(A, \"x\", 5, raising=False)\n    assert A.x == 5\n    monkeypatch.undo()\n    assert A.x == 1\n\n\ndef test_setitem() -> None:\n    d = {\"x\": 1}\n    monkeypatch = MonkeyPatch()\n    monkeypatch.setitem(d, \"x\", 2)\n    monkeypatch.setitem(d, \"y\", 1700)\n    monkeypatch.setitem(d, \"y\", 1700)\n    assert d[\"x\"] == 2\n    assert d[\"y\"] == 1700\n    monkeypatch.setitem(d, \"x\", 3)\n    assert d[\"x\"] == 3\n    monkeypatch.undo()\n    assert d[\"x\"] == 1\n    assert \"y\" not in d\n    d[\"x\"] = 5\n    monkeypatch.undo()\n    assert d[\"x\"] == 5\n\n\ndef test_setitem_deleted_meanwhile() -> None:\n    d: dict[str, object] = {}\n    monkeypatch = MonkeyPatch()\n    monkeypatch.setitem(d, \"x\", 2)\n    del d[\"x\"]\n    monkeypatch.undo()\n    assert not d\n\n\n@pytest.mark.parametrize(\"before\", [True, False])\ndef test_setenv_deleted_meanwhile(before: bool) -> None:\n    key = \"qwpeoip123\"\n    if before:\n        os.environ[key] = \"world\"\n    monkeypatch = MonkeyPatch()\n    monkeypatch.setenv(key, \"hello\")\n    del os.environ[key]\n    monkeypatch.undo()\n    if before:\n        assert os.environ[key] == \"world\"\n        del os.environ[key]\n    else:\n        assert key not in os.environ\n\n\ndef test_delitem() -> None:\n    d: dict[str, object] = {\"x\": 1}\n    monkeypatch = MonkeyPatch()\n    monkeypatch.delitem(d, \"x\")\n    assert \"x\" not in d\n    monkeypatch.delitem(d, \"y\", raising=False)\n    pytest.raises(KeyError, monkeypatch.delitem, d, \"y\")\n    assert not d\n    monkeypatch.setitem(d, \"y\", 1700)\n    assert d[\"y\"] == 1700\n    d[\"hello\"] = \"world\"\n    monkeypatch.setitem(d, \"x\", 1500)\n    assert d[\"x\"] == 1500\n    monkeypatch.undo()\n    assert d == {\"hello\": \"world\", \"x\": 1}\n\n\ndef test_setenv() -> None:\n    monkeypatch = MonkeyPatch()\n    with pytest.warns(pytest.PytestWarning):\n        monkeypatch.setenv(\"XYZ123\", 2)  # type: ignore[arg-type]\n    import os\n\n    assert os.environ[\"XYZ123\"] == \"2\"\n    monkeypatch.undo()\n    assert \"XYZ123\" not in os.environ\n\n\ndef test_delenv() -> None:\n    name = \"xyz1234\"\n    assert name not in os.environ\n    monkeypatch = MonkeyPatch()\n    pytest.raises(KeyError, monkeypatch.delenv, name, raising=True)\n    monkeypatch.delenv(name, raising=False)\n    monkeypatch.undo()\n    os.environ[name] = \"1\"\n    try:\n        monkeypatch = MonkeyPatch()\n        monkeypatch.delenv(name)\n        assert name not in os.environ\n        monkeypatch.setenv(name, \"3\")\n        assert os.environ[name] == \"3\"\n        monkeypatch.undo()\n        assert os.environ[name] == \"1\"\n    finally:\n        if name in os.environ:\n            del os.environ[name]\n\n\nclass TestEnvironWarnings:\n    \"\"\"\n    os.environ keys and values should be native strings, otherwise it will cause problems with other modules (notably\n    subprocess). On Python 2 os.environ accepts anything without complaining, while Python 3 does the right thing\n    and raises an error.\n    \"\"\"\n\n    VAR_NAME = \"PYTEST_INTERNAL_MY_VAR\"\n\n    def test_setenv_non_str_warning(self, monkeypatch: MonkeyPatch) -> None:\n        value = 2\n        msg = (\n            \"Value of environment variable PYTEST_INTERNAL_MY_VAR type should be str, \"\n            \"but got 2 (type: int); converted to str implicitly\"\n        )\n        with pytest.warns(pytest.PytestWarning, match=re.escape(msg)):\n            monkeypatch.setenv(str(self.VAR_NAME), value)  # type: ignore[arg-type]\n\n\ndef test_setenv_prepend() -> None:\n    import os\n\n    monkeypatch = MonkeyPatch()\n    monkeypatch.setenv(\"XYZ123\", \"2\", prepend=\"-\")\n    monkeypatch.setenv(\"XYZ123\", \"3\", prepend=\"-\")\n    assert os.environ[\"XYZ123\"] == \"3-2\"\n    monkeypatch.undo()\n    assert \"XYZ123\" not in os.environ\n\n\ndef test_monkeypatch_plugin(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        def test_method(monkeypatch):\n            assert monkeypatch.__class__.__name__ == \"MonkeyPatch\"\n    \"\"\"\n    )\n    res = reprec.countoutcomes()\n    assert tuple(res) == (1, 0, 0), res\n\n\ndef test_syspath_prepend(mp: MonkeyPatch) -> None:\n    old = list(sys.path)\n    mp.syspath_prepend(\"world\")\n    mp.syspath_prepend(\"hello\")\n    assert sys.path[0] == \"hello\"\n    assert sys.path[1] == \"world\"\n    mp.undo()\n    assert sys.path == old\n    mp.undo()\n    assert sys.path == old\n\n\ndef test_syspath_prepend_double_undo(mp: MonkeyPatch) -> None:\n    old_syspath = sys.path[:]\n    try:\n        mp.syspath_prepend(\"hello world\")\n        mp.undo()\n        sys.path.append(\"more hello world\")\n        mp.undo()\n        assert sys.path[-1] == \"more hello world\"\n    finally:\n        sys.path[:] = old_syspath\n\n\ndef test_chdir_with_path_local(mp: MonkeyPatch, tmp_path: Path) -> None:\n    mp.chdir(tmp_path)\n    assert os.getcwd() == str(tmp_path)\n\n\ndef test_chdir_with_str(mp: MonkeyPatch, tmp_path: Path) -> None:\n    mp.chdir(str(tmp_path))\n    assert os.getcwd() == str(tmp_path)\n\n\ndef test_chdir_undo(mp: MonkeyPatch, tmp_path: Path) -> None:\n    cwd = os.getcwd()\n    mp.chdir(tmp_path)\n    mp.undo()\n    assert os.getcwd() == cwd\n\n\ndef test_chdir_double_undo(mp: MonkeyPatch, tmp_path: Path) -> None:\n    mp.chdir(str(tmp_path))\n    mp.undo()\n    os.chdir(tmp_path)\n    mp.undo()\n    assert os.getcwd() == str(tmp_path)\n\n\ndef test_issue185_time_breaks(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import time\n        def test_m(monkeypatch):\n            def f():\n                raise Exception\n            monkeypatch.setattr(time, \"time\", f)\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *1 passed*\n    \"\"\"\n    )\n\n\ndef test_importerror(pytester: Pytester) -> None:\n    p = pytester.mkpydir(\"package\")\n    p.joinpath(\"a.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n        import doesnotexist\n\n        x = 1\n    \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    pytester.path.joinpath(\"test_importerror.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n        def test_importerror(monkeypatch):\n            monkeypatch.setattr('package.a.x', 2)\n    \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *import error in package.a: No module named 'doesnotexist'*\n    \"\"\"\n    )\n\n\nclass Sample:\n    @staticmethod\n    def hello() -> bool:\n        return True\n\n\nclass SampleInherit(Sample):\n    pass\n\n\n@pytest.mark.parametrize(\n    \"Sample\",\n    [Sample, SampleInherit],\n    ids=[\"new\", \"new-inherit\"],\n)\ndef test_issue156_undo_staticmethod(Sample: type[Sample]) -> None:\n    monkeypatch = MonkeyPatch()\n\n    monkeypatch.setattr(Sample, \"hello\", None)\n    assert Sample.hello is None\n\n    monkeypatch.undo()  # type: ignore[unreachable]\n    assert Sample.hello()\n\n\ndef test_undo_class_descriptors_delattr() -> None:\n    class SampleParent:\n        @classmethod\n        def hello(_cls):\n            pass\n\n        @staticmethod\n        def world():\n            pass\n\n    class SampleChild(SampleParent):\n        pass\n\n    monkeypatch = MonkeyPatch()\n\n    original_hello = SampleChild.hello\n    original_world = SampleChild.world\n    monkeypatch.delattr(SampleParent, \"hello\")\n    monkeypatch.delattr(SampleParent, \"world\")\n    assert getattr(SampleParent, \"hello\", None) is None\n    assert getattr(SampleParent, \"world\", None) is None\n\n    monkeypatch.undo()\n    assert original_hello == SampleChild.hello\n    assert original_world == SampleChild.world\n\n\ndef test_issue1338_name_resolving() -> None:\n    pytest.importorskip(\"requests\")\n    monkeypatch = MonkeyPatch()\n    try:\n        monkeypatch.delattr(\"requests.sessions.Session.request\")\n    finally:\n        monkeypatch.undo()\n\n\ndef test_context() -> None:\n    monkeypatch = MonkeyPatch()\n\n    import functools\n    import inspect\n\n    with monkeypatch.context() as m:\n        m.setattr(functools, \"partial\", 3)\n        assert not inspect.isclass(functools.partial)\n    assert inspect.isclass(functools.partial)\n\n\ndef test_context_classmethod() -> None:\n    class A:\n        x = 1\n\n    with MonkeyPatch.context() as m:\n        m.setattr(A, \"x\", 2)\n        assert A.x == 2\n    assert A.x == 1\n\n\n@pytest.mark.filterwarnings(r\"ignore:.*\\bpkg_resources\\b:DeprecationWarning\")\ndef test_syspath_prepend_with_namespace_packages(\n    pytester: Pytester, monkeypatch: MonkeyPatch\n) -> None:\n    for dirname in \"hello\", \"world\":\n        d = pytester.mkdir(dirname)\n        ns = d.joinpath(\"ns_pkg\")\n        ns.mkdir()\n        ns.joinpath(\"__init__.py\").write_text(\n            \"__import__('pkg_resources').declare_namespace(__name__)\", encoding=\"utf-8\"\n        )\n        lib = ns.joinpath(dirname)\n        lib.mkdir()\n        lib.joinpath(\"__init__.py\").write_text(\n            f\"def check(): return {dirname!r}\", encoding=\"utf-8\"\n        )\n\n    monkeypatch.syspath_prepend(\"hello\")\n    import ns_pkg.hello\n\n    assert ns_pkg.hello.check() == \"hello\"\n\n    with pytest.raises(ImportError):\n        import ns_pkg.world\n\n    # Prepending should call fixup_namespace_packages.\n    monkeypatch.syspath_prepend(\"world\")\n    import ns_pkg.world\n\n    assert ns_pkg.world.check() == \"world\"\n\n    # Should invalidate caches via importlib.invalidate_caches.\n    modules_tmpdir = pytester.mkdir(\"modules_tmpdir\")\n    monkeypatch.syspath_prepend(str(modules_tmpdir))\n    modules_tmpdir.joinpath(\"main_app.py\").write_text(\"app = True\", encoding=\"utf-8\")\n    from main_app import app  # noqa: F401\n", "testing/test_terminal.py": "# mypy: allow-untyped-defs\n\"\"\"Terminal reporting of the full testing process.\"\"\"\n\nfrom __future__ import annotations\n\nfrom io import StringIO\nimport os\nfrom pathlib import Path\nimport sys\nimport textwrap\nfrom types import SimpleNamespace\nfrom typing import cast\nfrom typing import NamedTuple\n\nimport pluggy\n\nfrom _pytest._io.wcwidth import wcswidth\nimport _pytest.config\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nfrom _pytest.reports import BaseReport\nfrom _pytest.reports import CollectReport\nfrom _pytest.reports import TestReport\nimport _pytest.terminal\nfrom _pytest.terminal import _folded_skips\nfrom _pytest.terminal import _format_trimmed\nfrom _pytest.terminal import _get_line_with_reprcrash_message\nfrom _pytest.terminal import _get_raw_skip_reason\nfrom _pytest.terminal import _plugin_nameversions\nfrom _pytest.terminal import getreportopt\nfrom _pytest.terminal import TerminalReporter\nimport pytest\n\n\nclass DistInfo(NamedTuple):\n    project_name: str\n    version: int\n\n\nTRANS_FNMATCH = str.maketrans({\"[\": \"[[]\", \"]\": \"[]]\"})\n\n\nclass Option:\n    def __init__(self, verbosity=0):\n        self.verbosity = verbosity\n\n    @property\n    def args(self):\n        values = []\n        values.append(\"--verbosity=%d\" % self.verbosity)\n        return values\n\n\n@pytest.fixture(\n    params=[Option(verbosity=0), Option(verbosity=1), Option(verbosity=-1)],\n    ids=[\"default\", \"verbose\", \"quiet\"],\n)\ndef option(request):\n    return request.param\n\n\n@pytest.mark.parametrize(\n    \"input,expected\",\n    [\n        ([DistInfo(project_name=\"test\", version=1)], [\"test-1\"]),\n        ([DistInfo(project_name=\"pytest-test\", version=1)], [\"test-1\"]),\n        (\n            [\n                DistInfo(project_name=\"test\", version=1),\n                DistInfo(project_name=\"test\", version=1),\n            ],\n            [\"test-1\"],\n        ),\n    ],\n    ids=[\"normal\", \"prefix-strip\", \"deduplicate\"],\n)\ndef test_plugin_nameversion(input, expected):\n    pluginlist = [(None, x) for x in input]\n    result = _plugin_nameversions(pluginlist)\n    assert result == expected\n\n\nclass TestTerminal:\n    def test_pass_skip_fail(self, pytester: Pytester, option) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_ok():\n                pass\n            def test_skip():\n                pytest.skip(\"xx\")\n            def test_func():\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(*option.args)\n        if option.verbosity > 0:\n            result.stdout.fnmatch_lines(\n                [\n                    \"*test_pass_skip_fail.py::test_ok PASS*\",\n                    \"*test_pass_skip_fail.py::test_skip SKIP*\",\n                    \"*test_pass_skip_fail.py::test_func FAIL*\",\n                ]\n            )\n        elif option.verbosity == 0:\n            result.stdout.fnmatch_lines([\"*test_pass_skip_fail.py .sF*\"])\n        else:\n            result.stdout.fnmatch_lines([\".sF*\"])\n        result.stdout.fnmatch_lines(\n            [\"    def test_func():\", \">       assert 0\", \"E       assert 0\"]\n        )\n\n    def test_internalerror(self, pytester: Pytester, linecomp) -> None:\n        modcol = pytester.getmodulecol(\"def test_one(): pass\")\n        rep = TerminalReporter(modcol.config, file=linecomp.stringio)\n        with pytest.raises(ValueError) as excinfo:\n            raise ValueError(\"hello\")\n        rep.pytest_internalerror(excinfo.getrepr())\n        linecomp.assert_contains_lines([\"INTERNALERROR> *ValueError*hello*\"])\n\n    def test_writeline(self, pytester: Pytester, linecomp) -> None:\n        modcol = pytester.getmodulecol(\"def test_one(): pass\")\n        rep = TerminalReporter(modcol.config, file=linecomp.stringio)\n        rep.write_fspath_result(modcol.nodeid, \".\")\n        rep.write_line(\"hello world\")\n        lines = linecomp.stringio.getvalue().split(\"\\n\")\n        assert not lines[0]\n        assert lines[1].endswith(modcol.name + \" .\")\n        assert lines[2] == \"hello world\"\n\n    def test_show_runtest_logstart(self, pytester: Pytester, linecomp) -> None:\n        item = pytester.getitem(\"def test_func(): pass\")\n        tr = TerminalReporter(item.config, file=linecomp.stringio)\n        item.config.pluginmanager.register(tr)\n        location = item.reportinfo()\n        tr.config.hook.pytest_runtest_logstart(\n            nodeid=item.nodeid, location=location, fspath=str(item.path)\n        )\n        linecomp.assert_contains_lines([\"*test_show_runtest_logstart.py*\"])\n\n    def test_runtest_location_shown_before_test_starts(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                import time\n                time.sleep(20)\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(\"\")\n        child.expect(\".*test_runtest_location.*py\")\n        child.sendeof()\n        child.kill(15)\n\n    def test_report_collect_after_half_a_second(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        \"\"\"Test for \"collecting\" being updated after 0.5s\"\"\"\n        pytester.makepyfile(\n            **{\n                \"test1.py\": \"\"\"\n                import _pytest.terminal\n\n                _pytest.terminal.REPORT_COLLECTING_RESOLUTION = 0\n\n                def test_1():\n                    pass\n                    \"\"\",\n                \"test2.py\": \"def test_2(): pass\",\n            }\n        )\n        # Explicitly test colored output.\n        monkeypatch.setenv(\"PY_COLORS\", \"1\")\n\n        child = pytester.spawn_pytest(\"-v test1.py test2.py\")\n        child.expect(r\"collecting \\.\\.\\.\")\n        child.expect(r\"collecting 1 item\")\n        child.expect(r\"collecting 2 items\")\n        child.expect(r\"collected 2 items\")\n        rest = child.read().decode(\"utf8\")\n        assert \"= \\x1b[32m\\x1b[1m2 passed\\x1b[0m\\x1b[32m in\" in rest\n\n    def test_itemreport_subclasses_show_subclassed_file(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            **{\n                \"tests/test_p1\": \"\"\"\n            class BaseTests(object):\n                fail = False\n\n                def test_p1(self):\n                    if self.fail: assert 0\n                \"\"\",\n                \"tests/test_p2\": \"\"\"\n            from test_p1 import BaseTests\n\n            class TestMore(BaseTests): pass\n                \"\"\",\n                \"tests/test_p3.py\": \"\"\"\n            from test_p1 import BaseTests\n\n            BaseTests.fail = True\n\n            class TestMore(BaseTests): pass\n        \"\"\",\n            }\n        )\n        result = pytester.runpytest(\"tests/test_p2.py\", \"--rootdir=tests\")\n        result.stdout.fnmatch_lines([\"tests/test_p2.py .*\", \"=* 1 passed in *\"])\n\n        result = pytester.runpytest(\"-vv\", \"-rA\", \"tests/test_p2.py\", \"--rootdir=tests\")\n        result.stdout.fnmatch_lines(\n            [\n                \"tests/test_p2.py::TestMore::test_p1 <- test_p1.py PASSED *\",\n                \"*= short test summary info =*\",\n                \"PASSED tests/test_p2.py::TestMore::test_p1\",\n            ]\n        )\n        result = pytester.runpytest(\"-vv\", \"-rA\", \"tests/test_p3.py\", \"--rootdir=tests\")\n        result.stdout.fnmatch_lines(\n            [\n                \"tests/test_p3.py::TestMore::test_p1 <- test_p1.py FAILED *\",\n                \"*_ TestMore.test_p1 _*\",\n                \"    def test_p1(self):\",\n                \">       if self.fail: assert 0\",\n                \"E       assert 0\",\n                \"\",\n                \"tests/test_p1.py:5: AssertionError\",\n                \"*= short test summary info =*\",\n                \"FAILED tests/test_p3.py::TestMore::test_p1 - assert 0\",\n                \"*= 1 failed in *\",\n            ]\n        )\n\n    def test_itemreport_directclasses_not_shown_as_subclasses(\n        self, pytester: Pytester\n    ) -> None:\n        a = pytester.mkpydir(\"a123\")\n        a.joinpath(\"test_hello123.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                class TestClass(object):\n                    def test_method(self):\n                        pass\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        result = pytester.runpytest(\"-vv\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*a123/test_hello123.py*PASS*\"])\n        result.stdout.no_fnmatch_line(\"* <- *\")\n\n    @pytest.mark.parametrize(\"fulltrace\", (\"\", \"--fulltrace\"))\n    def test_keyboard_interrupt(self, pytester: Pytester, fulltrace) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foobar():\n                assert 0\n            def test_spamegg():\n                import py; pytest.skip('skip me please!')\n            def test_interrupt_me():\n                raise KeyboardInterrupt   # simulating the user\n        \"\"\"\n        )\n\n        result = pytester.runpytest(fulltrace, no_reraise_ctrlc=True)\n        result.stdout.fnmatch_lines(\n            [\n                \"    def test_foobar():\",\n                \">       assert 0\",\n                \"E       assert 0\",\n                \"*_keyboard_interrupt.py:6: KeyboardInterrupt*\",\n            ]\n        )\n        if fulltrace:\n            result.stdout.fnmatch_lines(\n                [\"*raise KeyboardInterrupt   # simulating the user*\"]\n            )\n        else:\n            result.stdout.fnmatch_lines(\n                [\"(to show a full traceback on KeyboardInterrupt use --full-trace)\"]\n            )\n        result.stdout.fnmatch_lines([\"*KeyboardInterrupt*\"])\n\n    def test_keyboard_in_sessionstart(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_sessionstart():\n                raise KeyboardInterrupt\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_foobar():\n                pass\n        \"\"\"\n        )\n\n        result = pytester.runpytest(no_reraise_ctrlc=True)\n        assert result.ret == 2\n        result.stdout.fnmatch_lines([\"*KeyboardInterrupt*\"])\n\n    def test_collect_single_item(self, pytester: Pytester) -> None:\n        \"\"\"Use singular 'item' when reporting a single test item\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test_foobar():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"collected 1 item\"])\n\n    def test_rewrite(self, pytester: Pytester, monkeypatch) -> None:\n        config = pytester.parseconfig()\n        f = StringIO()\n        monkeypatch.setattr(f, \"isatty\", lambda *args: True)\n        tr = TerminalReporter(config, f)\n        tr._tw.fullwidth = 10\n        tr.write(\"hello\")\n        tr.rewrite(\"hey\", erase=True)\n        assert f.getvalue() == \"hello\" + \"\\r\" + \"hey\" + (6 * \" \")\n\n    def test_report_teststatus_explicit_markup(\n        self, monkeypatch: MonkeyPatch, pytester: Pytester, color_mapping\n    ) -> None:\n        \"\"\"Test that TerminalReporter handles markup explicitly provided by\n        a pytest_report_teststatus hook.\"\"\"\n        monkeypatch.setenv(\"PY_COLORS\", \"1\")\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_report_teststatus(report):\n                return 'foo', 'F', ('FOO', {'red': True})\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_foobar():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            color_mapping.format_for_fnmatch([\"*{red}FOO{reset}*\"])\n        )\n\n    def test_verbose_skip_reason(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.skip(reason=\"123\")\n            def test_1():\n                pass\n\n            @pytest.mark.xfail(reason=\"456\")\n            def test_2():\n                pass\n\n            @pytest.mark.xfail(reason=\"789\")\n            def test_3():\n                assert False\n\n            @pytest.mark.xfail(reason=\"\")\n            def test_4():\n                assert False\n\n            @pytest.mark.skip\n            def test_5():\n                pass\n\n            @pytest.mark.xfail\n            def test_6():\n                pass\n\n            def test_7():\n                pytest.skip()\n\n            def test_8():\n                pytest.skip(\"888 is great\")\n\n            def test_9():\n                pytest.xfail()\n\n            def test_10():\n                pytest.xfail(\"It's \ud83d\udd59 o'clock\")\n\n            @pytest.mark.skip(\n                reason=\"1 cannot do foobar because baz is missing due to I don't know what\"\n            )\n            def test_long_skip():\n                pass\n\n            @pytest.mark.xfail(\n                reason=\"2 cannot do foobar because baz is missing due to I don't know what\"\n            )\n            def test_long_xfail():\n                print(1 / 0)\n        \"\"\"\n        )\n\n        common_output = [\n            \"test_verbose_skip_reason.py::test_1 SKIPPED (123) *\",\n            \"test_verbose_skip_reason.py::test_2 XPASS (456) *\",\n            \"test_verbose_skip_reason.py::test_3 XFAIL (789) *\",\n            \"test_verbose_skip_reason.py::test_4 XFAIL  *\",\n            \"test_verbose_skip_reason.py::test_5 SKIPPED (unconditional skip) *\",\n            \"test_verbose_skip_reason.py::test_6 XPASS  *\",\n            \"test_verbose_skip_reason.py::test_7 SKIPPED  *\",\n            \"test_verbose_skip_reason.py::test_8 SKIPPED (888 is great) *\",\n            \"test_verbose_skip_reason.py::test_9 XFAIL  *\",\n            \"test_verbose_skip_reason.py::test_10 XFAIL (It's \ud83d\udd59 o'clock) *\",\n        ]\n\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            [\n                *common_output,\n                \"test_verbose_skip_reason.py::test_long_skip SKIPPED (1 cannot *...) *\",\n                \"test_verbose_skip_reason.py::test_long_xfail XFAIL (2 cannot *...) *\",\n            ]\n        )\n\n        result = pytester.runpytest(\"-vv\")\n        result.stdout.fnmatch_lines(\n            [\n                *common_output,\n                \"test_verbose_skip_reason.py::test_long_skip SKIPPED\"\n                \" (1 cannot do foobar\",\n                \"because baz is missing due to I don't know what) *\",\n                \"test_verbose_skip_reason.py::test_long_xfail XFAIL\"\n                \" (2 cannot do foobar\",\n                \"because baz is missing due to I don't know what) *\",\n            ]\n        )\n\n\nclass TestCollectonly:\n    def test_collectonly_basic(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_func():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines(\n            [\n                \"<Dir test_collectonly_basic0>\",\n                \"  <Module test_collectonly_basic.py>\",\n                \"    <Function test_func>\",\n            ]\n        )\n\n    def test_collectonly_skipped_module(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            pytest.skip(\"hello\")\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\", \"-rs\")\n        result.stdout.fnmatch_lines([\"*ERROR collecting*\"])\n\n    def test_collectonly_displays_test_description(\n        self, pytester: Pytester, dummy_yaml_custom_test\n    ) -> None:\n        \"\"\"Used dummy_yaml_custom_test for an Item without ``obj``.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test_with_description():\n                '''  This test has a description.\n\n                  more1.\n                    more2.'''\n            \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\", \"--verbose\")\n        result.stdout.fnmatch_lines(\n            [\n                \"<Dir test_collectonly_displays_test_description0>\",\n                \"  <YamlFile test1.yaml>\",\n                \"    <YamlItem test1.yaml>\",\n                \"  <Module test_collectonly_displays_test_description.py>\",\n                \"    <Function test_with_description>\",\n                \"      This test has a description.\",\n                \"      \",\n                \"      more1.\",\n                \"        more2.\",\n            ],\n            consecutive=True,\n        )\n\n    def test_collectonly_failed_module(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\"\"\"raise ValueError(0)\"\"\")\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*raise ValueError*\", \"*1 error*\"])\n\n    def test_collectonly_fatal(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_collectstart(collector):\n                assert 0, \"urgs\"\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*INTERNAL*args*\"])\n        assert result.ret == 3\n\n    def test_collectonly_simple(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_func1():\n                pass\n            class TestClass(object):\n                def test_method(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\", p)\n        # assert stderr.startswith(\"inserting into sys.path\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\n                \"*<Module *.py>\",\n                \"* <Function test_func1>\",\n                \"* <Class TestClass>\",\n                \"*   <Function test_method>\",\n            ]\n        )\n\n    def test_collectonly_error(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\"import Errlkjqweqwe\")\n        result = pytester.runpytest(\"--collect-only\", p)\n        assert result.ret == 2\n        result.stdout.fnmatch_lines(\n            textwrap.dedent(\n                \"\"\"\\\n                *ERROR*\n                *ImportError*\n                *No module named *Errlk*\n                *1 error*\n                \"\"\"\n            ).strip()\n        )\n\n    def test_collectonly_missing_path(self, pytester: Pytester) -> None:\n        \"\"\"Issue 115: failure in parseargs will cause session not to\n        have the items attribute.\"\"\"\n        result = pytester.runpytest(\"--collect-only\", \"uhm_missing_path\")\n        assert result.ret == 4\n        result.stderr.fnmatch_lines(\n            [\"*ERROR: file or directory not found: uhm_missing_path\"]\n        )\n\n    def test_collectonly_quiet(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\"def test_foo(): pass\")\n        result = pytester.runpytest(\"--collect-only\", \"-q\")\n        result.stdout.fnmatch_lines([\"*test_foo*\"])\n\n    def test_collectonly_more_quiet(self, pytester: Pytester) -> None:\n        pytester.makepyfile(test_fun=\"def test_foo(): pass\")\n        result = pytester.runpytest(\"--collect-only\", \"-qq\")\n        result.stdout.fnmatch_lines([\"*test_fun.py: 1*\"])\n\n    def test_collect_only_summary_status(self, pytester: Pytester) -> None:\n        \"\"\"Custom status depending on test selection using -k or -m. #7701.\"\"\"\n        pytester.makepyfile(\n            test_collect_foo=\"\"\"\n            def test_foo(): pass\n            \"\"\",\n            test_collect_bar=\"\"\"\n            def test_foobar(): pass\n            def test_bar(): pass\n            \"\"\",\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines(\"*== 3 tests collected in * ==*\")\n\n        result = pytester.runpytest(\"--collect-only\", \"test_collect_foo.py\")\n        result.stdout.fnmatch_lines(\"*== 1 test collected in * ==*\")\n\n        result = pytester.runpytest(\"--collect-only\", \"-k\", \"foo\")\n        result.stdout.fnmatch_lines(\"*== 2/3 tests collected (1 deselected) in * ==*\")\n\n        result = pytester.runpytest(\"--collect-only\", \"-k\", \"test_bar\")\n        result.stdout.fnmatch_lines(\"*== 1/3 tests collected (2 deselected) in * ==*\")\n\n        result = pytester.runpytest(\"--collect-only\", \"-k\", \"invalid\")\n        result.stdout.fnmatch_lines(\"*== no tests collected (3 deselected) in * ==*\")\n\n        pytester.mkdir(\"no_tests_here\")\n        result = pytester.runpytest(\"--collect-only\", \"no_tests_here\")\n        result.stdout.fnmatch_lines(\"*== no tests collected in * ==*\")\n\n        pytester.makepyfile(\n            test_contains_error=\"\"\"\n            raise RuntimeError\n            \"\"\",\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines(\"*== 3 tests collected, 1 error in * ==*\")\n        result = pytester.runpytest(\"--collect-only\", \"-k\", \"foo\")\n        result.stdout.fnmatch_lines(\n            \"*== 2/3 tests collected (1 deselected), 1 error in * ==*\"\n        )\n\n\nclass TestFixtureReporting:\n    def test_setup_fixture_error(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def setup_function(function):\n                print(\"setup func\")\n                assert 0\n            def test_nada():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR at setup of test_nada*\",\n                \"*setup_function(function):*\",\n                \"*setup func*\",\n                \"*assert 0*\",\n                \"*1 error*\",\n            ]\n        )\n        assert result.ret != 0\n\n    def test_teardown_fixture_error(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_nada():\n                pass\n            def teardown_function(function):\n                print(\"teardown func\")\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR at teardown*\",\n                \"*teardown_function(function):*\",\n                \"*assert 0*\",\n                \"*Captured stdout*\",\n                \"*teardown func*\",\n                \"*1 passed*1 error*\",\n            ]\n        )\n\n    def test_teardown_fixture_error_and_test_failure(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_fail():\n                assert 0, \"failingfunc\"\n\n            def teardown_function(function):\n                print(\"teardown func\")\n                assert False\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR at teardown of test_fail*\",\n                \"*teardown_function(function):*\",\n                \"*assert False*\",\n                \"*Captured stdout*\",\n                \"*teardown func*\",\n                \"*test_fail*\",\n                \"*def test_fail():\",\n                \"*failingfunc*\",\n                \"*1 failed*1 error*\",\n            ]\n        )\n\n    def test_setup_teardown_output_and_test_failure(self, pytester: Pytester) -> None:\n        \"\"\"Test for issue #442.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def setup_function(function):\n                print(\"setup func\")\n\n            def test_fail():\n                assert 0, \"failingfunc\"\n\n            def teardown_function(function):\n                print(\"teardown func\")\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_fail*\",\n                \"*def test_fail():\",\n                \"*failingfunc*\",\n                \"*Captured stdout setup*\",\n                \"*setup func*\",\n                \"*Captured stdout teardown*\",\n                \"*teardown func*\",\n                \"*1 failed*\",\n            ]\n        )\n\n\nclass TestTerminalFunctional:\n    def test_deselected(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n                def test_one():\n                    pass\n                def test_two():\n                    pass\n                def test_three():\n                    pass\n           \"\"\"\n        )\n        result = pytester.runpytest(\"-k\", \"test_t\", testpath)\n        result.stdout.fnmatch_lines(\n            [\"collected 3 items / 1 deselected / 2 selected\", \"*test_deselected.py ..*\"]\n        )\n        assert result.ret == 0\n\n    def test_deselected_with_hook_wrapper(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.hookimpl(wrapper=True)\n            def pytest_collection_modifyitems(config, items):\n                yield\n                deselected = items.pop()\n                config.hook.pytest_deselected(items=[deselected])\n            \"\"\"\n        )\n        testpath = pytester.makepyfile(\n            \"\"\"\n                def test_one():\n                    pass\n                def test_two():\n                    pass\n                def test_three():\n                    pass\n           \"\"\"\n        )\n        result = pytester.runpytest(testpath)\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 3 items / 1 deselected / 2 selected\",\n                \"*= 2 passed, 1 deselected in*\",\n            ]\n        )\n        assert result.ret == 0\n\n    def test_show_deselected_items_using_markexpr_before_test_execution(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            test_show_deselected=\"\"\"\n            import pytest\n\n            @pytest.mark.foo\n            def test_foobar():\n                pass\n\n            @pytest.mark.bar\n            def test_bar():\n                pass\n\n            def test_pass():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-m\", \"not foo\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 3 items / 1 deselected / 2 selected\",\n                \"*test_show_deselected.py ..*\",\n                \"*= 2 passed, 1 deselected in * =*\",\n            ]\n        )\n        result.stdout.no_fnmatch_line(\"*= 1 deselected =*\")\n        assert result.ret == 0\n\n    def test_selected_count_with_error(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_selected_count_3=\"\"\"\n                def test_one():\n                    pass\n                def test_two():\n                    pass\n                def test_three():\n                    pass\n            \"\"\",\n            test_selected_count_error=\"\"\"\n                5/0\n                def test_foo():\n                    pass\n                def test_bar():\n                    pass\n            \"\"\",\n        )\n        result = pytester.runpytest(\"-k\", \"test_t\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 3 items / 1 error / 1 deselected / 2 selected\",\n                \"* ERROR collecting test_selected_count_error.py *\",\n            ]\n        )\n        assert result.ret == ExitCode.INTERRUPTED\n\n    def test_no_skip_summary_if_failure(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_ok():\n                pass\n            def test_fail():\n                assert 0\n            def test_skip():\n                pytest.skip(\"dontshow\")\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.stdout.str().find(\"skip test summary\") == -1\n        assert result.ret == 1\n\n    def test_passes(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_passes():\n                pass\n            class TestClass(object):\n                def test_method(self):\n                    pass\n        \"\"\"\n        )\n        old = p1.parent\n        pytester.chdir()\n        try:\n            result = pytester.runpytest()\n        finally:\n            os.chdir(old)\n        result.stdout.fnmatch_lines([\"test_passes.py ..*\", \"* 2 pass*\"])\n        assert result.ret == 0\n\n    def test_header_trailer_info(\n        self, monkeypatch: MonkeyPatch, pytester: Pytester, request\n    ) -> None:\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\")\n        pytester.makepyfile(\n            \"\"\"\n            def test_passes():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        verinfo = \".\".join(map(str, sys.version_info[:3]))\n        result.stdout.fnmatch_lines(\n            [\n                \"*===== test session starts ====*\",\n                f\"platform {sys.platform} -- Python {verinfo}*pytest-{pytest.__version__}**pluggy-{pluggy.__version__}\",\n                \"*test_header_trailer_info.py .*\",\n                \"=* 1 passed*in *.[0-9][0-9]s *=\",\n            ]\n        )\n        if request.config.pluginmanager.list_plugin_distinfo():\n            result.stdout.fnmatch_lines([\"plugins: *\"])\n\n    def test_no_header_trailer_info(\n        self, monkeypatch: MonkeyPatch, pytester: Pytester, request\n    ) -> None:\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\")\n        pytester.makepyfile(\n            \"\"\"\n            def test_passes():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--no-header\")\n        verinfo = \".\".join(map(str, sys.version_info[:3]))\n        result.stdout.no_fnmatch_line(\n            f\"platform {sys.platform} -- Python {verinfo}*pytest-{pytest.__version__}**pluggy-{pluggy.__version__}\"\n        )\n        if request.config.pluginmanager.list_plugin_distinfo():\n            result.stdout.no_fnmatch_line(\"plugins: *\")\n\n    def test_header(self, pytester: Pytester) -> None:\n        pytester.path.joinpath(\"tests\").mkdir()\n        pytester.path.joinpath(\"gui\").mkdir()\n\n        # no ini file\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"rootdir: *test_header0\"])\n\n        # with configfile\n        pytester.makeini(\"\"\"[pytest]\"\"\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"rootdir: *test_header0\", \"configfile: tox.ini\"])\n\n        # with testpaths option, and not passing anything in the command-line\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            testpaths = tests gui\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\"rootdir: *test_header0\", \"configfile: tox.ini\", \"testpaths: tests, gui\"]\n        )\n\n        # with testpaths option, passing directory in command-line: do not show testpaths then\n        result = pytester.runpytest(\"tests\")\n        result.stdout.fnmatch_lines([\"rootdir: *test_header0\", \"configfile: tox.ini\"])\n\n    def test_header_absolute_testpath(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        \"\"\"Regression test for #7814.\"\"\"\n        tests = pytester.path.joinpath(\"tests\")\n        tests.mkdir()\n        pytester.makepyprojecttoml(\n            f\"\"\"\n            [tool.pytest.ini_options]\n            testpaths = ['{tests}']\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"rootdir: *absolute_testpath0\",\n                \"configfile: pyproject.toml\",\n                f\"testpaths: {tests}\",\n            ]\n        )\n\n    def test_no_header(self, pytester: Pytester) -> None:\n        pytester.path.joinpath(\"tests\").mkdir()\n        pytester.path.joinpath(\"gui\").mkdir()\n\n        # with testpaths option, and not passing anything in the command-line\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            testpaths = tests gui\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--no-header\")\n        result.stdout.no_fnmatch_line(\n            \"rootdir: *test_header0, inifile: tox.ini, testpaths: tests, gui\"\n        )\n\n        # with testpaths option, passing directory in command-line: do not show testpaths then\n        result = pytester.runpytest(\"tests\", \"--no-header\")\n        result.stdout.no_fnmatch_line(\"rootdir: *test_header0, inifile: tox.ini\")\n\n    def test_no_summary(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_no_summary():\n                assert false\n        \"\"\"\n        )\n        result = pytester.runpytest(p1, \"--no-summary\")\n        result.stdout.no_fnmatch_line(\"*= FAILURES =*\")\n\n    def test_showlocals(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_showlocals():\n                x = 3\n                y = \"x\" * 5000\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p1, \"-l\")\n        result.stdout.fnmatch_lines(\n            [\n                # \"_ _ * Locals *\",\n                \"x* = 3\",\n                \"y* = 'xxxxxx*\",\n            ]\n        )\n\n    def test_noshowlocals_addopts_override(self, pytester: Pytester) -> None:\n        pytester.makeini(\"[pytest]\\naddopts=--showlocals\")\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_noshowlocals():\n                x = 3\n                y = \"x\" * 5000\n                assert 0\n        \"\"\"\n        )\n\n        # Override global --showlocals for py.test via arg\n        result = pytester.runpytest(p1, \"--no-showlocals\")\n        result.stdout.no_fnmatch_line(\"x* = 3\")\n        result.stdout.no_fnmatch_line(\"y* = 'xxxxxx*\")\n\n    def test_showlocals_short(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_showlocals_short():\n                x = 3\n                y = \"xxxx\"\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p1, \"-l\", \"--tb=short\")\n        result.stdout.fnmatch_lines(\n            [\n                \"test_showlocals_short.py:*\",\n                \"    assert 0\",\n                \"E   assert 0\",\n                \"        x          = 3\",\n                \"        y          = 'xxxx'\",\n            ]\n        )\n\n    @pytest.fixture\n    def verbose_testfile(self, pytester: Pytester) -> Path:\n        return pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_fail():\n                raise ValueError()\n            def test_pass():\n                pass\n            class TestClass(object):\n                def test_skip(self):\n                    pytest.skip(\"hello\")\n            def test_gen():\n                def check(x):\n                    assert x == 1\n                yield check, 0\n        \"\"\"\n        )\n\n    def test_verbose_reporting(self, verbose_testfile, pytester: Pytester) -> None:\n        result = pytester.runpytest(\n            verbose_testfile, \"-v\", \"-Walways::pytest.PytestWarning\"\n        )\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_verbose_reporting.py::test_fail *FAIL*\",\n                \"*test_verbose_reporting.py::test_pass *PASS*\",\n                \"*test_verbose_reporting.py::TestClass::test_skip *SKIP*\",\n                \"*test_verbose_reporting.py::test_gen *XFAIL*\",\n            ]\n        )\n        assert result.ret == 1\n\n    def test_verbose_reporting_xdist(\n        self,\n        verbose_testfile,\n        monkeypatch: MonkeyPatch,\n        pytester: Pytester,\n        pytestconfig,\n    ) -> None:\n        if not pytestconfig.pluginmanager.get_plugin(\"xdist\"):\n            pytest.skip(\"xdist plugin not installed\")\n\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\")\n        result = pytester.runpytest(\n            verbose_testfile, \"-v\", \"-n 1\", \"-Walways::pytest.PytestWarning\"\n        )\n        result.stdout.fnmatch_lines(\n            [\"*FAIL*test_verbose_reporting_xdist.py::test_fail*\"]\n        )\n        assert result.ret == 1\n\n    def test_quiet_reporting(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"def test_pass(): pass\")\n        result = pytester.runpytest(p1, \"-q\")\n        s = result.stdout.str()\n        assert \"test session starts\" not in s\n        assert p1.name not in s\n        assert \"===\" not in s\n        assert \"passed\" in s\n\n    def test_more_quiet_reporting(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"def test_pass(): pass\")\n        result = pytester.runpytest(p1, \"-qq\")\n        s = result.stdout.str()\n        assert \"test session starts\" not in s\n        assert p1.name not in s\n        assert \"===\" not in s\n        assert \"passed\" not in s\n\n    @pytest.mark.parametrize(\n        \"params\", [(), (\"--collect-only\",)], ids=[\"no-params\", \"collect-only\"]\n    )\n    def test_report_collectionfinish_hook(self, pytester: Pytester, params) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_report_collectionfinish(config, start_path, items):\n                return [f'hello from hook: {len(items)} items']\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('i', range(3))\n            def test(i):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(*params)\n        result.stdout.fnmatch_lines([\"collected 3 items\", \"hello from hook: 3 items\"])\n\n    def test_summary_f_alias(self, pytester: Pytester) -> None:\n        \"\"\"Test that 'f' and 'F' report chars are aliases and don't show up twice in the summary (#6334)\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test():\n                assert False\n            \"\"\"\n        )\n        result = pytester.runpytest(\"-rfF\")\n        expected = \"FAILED test_summary_f_alias.py::test - assert False\"\n        result.stdout.fnmatch_lines([expected])\n        assert result.stdout.lines.count(expected) == 1\n\n    def test_summary_s_alias(self, pytester: Pytester) -> None:\n        \"\"\"Test that 's' and 'S' report chars are aliases and don't show up twice in the summary\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.skip\n            def test():\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest(\"-rsS\")\n        expected = \"SKIPPED [1] test_summary_s_alias.py:3: unconditional skip\"\n        result.stdout.fnmatch_lines([expected])\n        assert result.stdout.lines.count(expected) == 1\n\n\n@pytest.mark.parametrize(\n    (\"use_ci\", \"expected_message\"),\n    (\n        (True, f\"- AssertionError: {'this_failed'*100}\"),\n        (False, \"- AssertionError: this_failedt...\"),\n    ),\n    ids=(\"on CI\", \"not on CI\"),\n)\ndef test_fail_extra_reporting(\n    pytester: Pytester, monkeypatch, use_ci: bool, expected_message: str\n) -> None:\n    if use_ci:\n        monkeypatch.setenv(\"CI\", \"true\")\n    else:\n        monkeypatch.delenv(\"CI\", raising=False)\n    monkeypatch.setenv(\"COLUMNS\", \"80\")\n    pytester.makepyfile(\"def test_this(): assert 0, 'this_failed' * 100\")\n    result = pytester.runpytest(\"-rN\")\n    result.stdout.no_fnmatch_line(\"*short test summary*\")\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"*test summary*\",\n            f\"FAILED test_fail_extra_reporting.py::test_this {expected_message}\",\n        ]\n    )\n\n\ndef test_fail_reporting_on_pass(pytester: Pytester) -> None:\n    pytester.makepyfile(\"def test_this(): assert 1\")\n    result = pytester.runpytest(\"-rf\")\n    result.stdout.no_fnmatch_line(\"*short test summary*\")\n\n\ndef test_pass_extra_reporting(pytester: Pytester) -> None:\n    pytester.makepyfile(\"def test_this(): assert 1\")\n    result = pytester.runpytest()\n    result.stdout.no_fnmatch_line(\"*short test summary*\")\n    result = pytester.runpytest(\"-rp\")\n    result.stdout.fnmatch_lines([\"*test summary*\", \"PASS*test_pass_extra_reporting*\"])\n\n\ndef test_pass_reporting_on_fail(pytester: Pytester) -> None:\n    pytester.makepyfile(\"def test_this(): assert 0\")\n    result = pytester.runpytest(\"-rp\")\n    result.stdout.no_fnmatch_line(\"*short test summary*\")\n\n\ndef test_pass_output_reporting(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def setup_module():\n            print(\"setup_module\")\n\n        def teardown_module():\n            print(\"teardown_module\")\n\n        def test_pass_has_output():\n            print(\"Four score and seven years ago...\")\n\n        def test_pass_no_output():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    s = result.stdout.str()\n    assert \"test_pass_has_output\" not in s\n    assert \"Four score and seven years ago...\" not in s\n    assert \"test_pass_no_output\" not in s\n    result = pytester.runpytest(\"-rPp\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*= PASSES =*\",\n            \"*_ test_pass_has_output _*\",\n            \"*- Captured stdout setup -*\",\n            \"setup_module\",\n            \"*- Captured stdout call -*\",\n            \"Four score and seven years ago...\",\n            \"*- Captured stdout teardown -*\",\n            \"teardown_module\",\n            \"*= short test summary info =*\",\n            \"PASSED test_pass_output_reporting.py::test_pass_has_output\",\n            \"PASSED test_pass_output_reporting.py::test_pass_no_output\",\n            \"*= 2 passed in *\",\n        ]\n    )\n\n\ndef test_color_yes(pytester: Pytester, color_mapping) -> None:\n    p1 = pytester.makepyfile(\n        \"\"\"\n        def fail():\n            assert 0\n\n        def test_this():\n            fail()\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--color=yes\", str(p1))\n    result.stdout.fnmatch_lines(\n        color_mapping.format_for_fnmatch(\n            [\n                \"{bold}=*= test session starts =*={reset}\",\n                \"collected 1 item\",\n                \"\",\n                \"test_color_yes.py {red}F{reset}{red} * [100%]{reset}\",\n                \"\",\n                \"=*= FAILURES =*=\",\n                \"{red}{bold}_*_ test_this _*_{reset}\",\n                \"\",\n                \"    {reset}{kw}def{hl-reset} {function}test_this{hl-reset}():{endline}\",\n                \">       fail(){endline}\",\n                \"\",\n                \"{bold}{red}test_color_yes.py{reset}:5: \",\n                \"_ _ * _ _*\",\n                \"\",\n                \"    {reset}{kw}def{hl-reset} {function}fail{hl-reset}():{endline}\",\n                \">       {kw}assert{hl-reset} {number}0{hl-reset}{endline}\",\n                \"{bold}{red}E       assert 0{reset}\",\n                \"\",\n                \"{bold}{red}test_color_yes.py{reset}:2: AssertionError\",\n                \"{red}=*= {red}{bold}1 failed{reset}{red} in *s{reset}{red} =*={reset}\",\n            ]\n        )\n    )\n    result = pytester.runpytest(\"--color=yes\", \"--tb=short\", str(p1))\n    result.stdout.fnmatch_lines(\n        color_mapping.format_for_fnmatch(\n            [\n                \"{bold}=*= test session starts =*={reset}\",\n                \"collected 1 item\",\n                \"\",\n                \"test_color_yes.py {red}F{reset}{red} * [100%]{reset}\",\n                \"\",\n                \"=*= FAILURES =*=\",\n                \"{red}{bold}_*_ test_this _*_{reset}\",\n                \"{bold}{red}test_color_yes.py{reset}:5: in test_this\",\n                \"    {reset}fail(){endline}\",\n                \"{bold}{red}test_color_yes.py{reset}:2: in fail\",\n                \"    {reset}{kw}assert{hl-reset} {number}0{hl-reset}{endline}\",\n                \"{bold}{red}E   assert 0{reset}\",\n                \"{red}=*= {red}{bold}1 failed{reset}{red} in *s{reset}{red} =*={reset}\",\n            ]\n        )\n    )\n\n\ndef test_color_no(pytester: Pytester) -> None:\n    pytester.makepyfile(\"def test_this(): assert 1\")\n    result = pytester.runpytest(\"--color=no\")\n    assert \"test session starts\" in result.stdout.str()\n    result.stdout.no_fnmatch_line(\"*\\x1b[1m*\")\n\n\n@pytest.mark.parametrize(\"verbose\", [True, False])\ndef test_color_yes_collection_on_non_atty(pytester: Pytester, verbose) -> None:\n    \"\"\"#1397: Skip collect progress report when working on non-terminals.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.parametrize('i', range(10))\n        def test_this(i):\n            assert 1\n    \"\"\"\n    )\n    args = [\"--color=yes\"]\n    if verbose:\n        args.append(\"-vv\")\n    result = pytester.runpytest(*args)\n    assert \"test session starts\" in result.stdout.str()\n    assert \"\\x1b[1m\" in result.stdout.str()\n    result.stdout.no_fnmatch_line(\"*collecting 10 items*\")\n    if verbose:\n        assert \"collecting ...\" in result.stdout.str()\n    assert \"collected 10 items\" in result.stdout.str()\n\n\ndef test_getreportopt() -> None:\n    from _pytest.terminal import _REPORTCHARS_DEFAULT\n\n    class FakeConfig:\n        class Option:\n            reportchars = _REPORTCHARS_DEFAULT\n            disable_warnings = False\n\n        option = Option()\n\n    config = cast(Config, FakeConfig())\n\n    assert _REPORTCHARS_DEFAULT == \"fE\"\n\n    # Default.\n    assert getreportopt(config) == \"wfE\"\n\n    config.option.reportchars = \"sf\"\n    assert getreportopt(config) == \"wsf\"\n\n    config.option.reportchars = \"sfxw\"\n    assert getreportopt(config) == \"sfxw\"\n\n    config.option.reportchars = \"a\"\n    assert getreportopt(config) == \"wsxXEf\"\n\n    config.option.reportchars = \"N\"\n    assert getreportopt(config) == \"w\"\n\n    config.option.reportchars = \"NwfE\"\n    assert getreportopt(config) == \"wfE\"\n\n    config.option.reportchars = \"NfENx\"\n    assert getreportopt(config) == \"wx\"\n\n    # Now with --disable-warnings.\n    config.option.disable_warnings = True\n    config.option.reportchars = \"a\"\n    assert getreportopt(config) == \"sxXEf\"\n\n    config.option.reportchars = \"sfx\"\n    assert getreportopt(config) == \"sfx\"\n\n    config.option.reportchars = \"sfxw\"\n    assert getreportopt(config) == \"sfx\"\n\n    config.option.reportchars = \"a\"\n    assert getreportopt(config) == \"sxXEf\"\n\n    config.option.reportchars = \"A\"\n    assert getreportopt(config) == \"PpsxXEf\"\n\n    config.option.reportchars = \"AN\"\n    assert getreportopt(config) == \"\"\n\n    config.option.reportchars = \"NwfE\"\n    assert getreportopt(config) == \"fE\"\n\n\ndef test_terminalreporter_reportopt_addopts(pytester: Pytester) -> None:\n    pytester.makeini(\"[pytest]\\naddopts=-rs\")\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def tr(request):\n            tr = request.config.pluginmanager.getplugin(\"terminalreporter\")\n            return tr\n        def test_opt(tr):\n            assert tr.hasopt('skipped')\n            assert not tr.hasopt('qwe')\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_tbstyle_short(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def arg(request):\n            return 42\n        def test_opt(arg):\n            x = 0\n            assert x\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--tb=short\")\n    s = result.stdout.str()\n    assert \"arg = 42\" not in s\n    assert \"x = 0\" not in s\n    result.stdout.fnmatch_lines([f\"*{p.name}:8*\", \"    assert x\", \"E   assert*\"])\n    result = pytester.runpytest()\n    s = result.stdout.str()\n    assert \"x = 0\" in s\n    assert \"assert x\" in s\n\n\ndef test_traceconfig(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--traceconfig\")\n    result.stdout.fnmatch_lines([\"*active plugins*\"])\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\nclass TestGenericReporting:\n    \"\"\"Test class which can be subclassed with a different option provider to\n    run e.g. distributed tests.\"\"\"\n\n    def test_collect_fail(self, pytester: Pytester, option) -> None:\n        pytester.makepyfile(\"import xyz\\n\")\n        result = pytester.runpytest(*option.args)\n        result.stdout.fnmatch_lines(\n            [\"ImportError while importing*\", \"*No module named *xyz*\", \"*1 error*\"]\n        )\n\n    def test_maxfailures(self, pytester: Pytester, option) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                assert 0\n            def test_2():\n                assert 0\n            def test_3():\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--maxfail=2\", *option.args)\n        result.stdout.fnmatch_lines(\n            [\n                \"*def test_1():*\",\n                \"*def test_2():*\",\n                \"*! stopping after 2 failures !*\",\n                \"*2 failed*\",\n            ]\n        )\n\n    def test_maxfailures_with_interrupted(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test(request):\n                request.session.shouldstop = \"session_interrupted\"\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--maxfail=1\", \"-ra\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*= short test summary info =*\",\n                \"FAILED *\",\n                \"*! stopping after 1 failures !*\",\n                \"*! session_interrupted !*\",\n                \"*= 1 failed in*\",\n            ]\n        )\n\n    def test_tb_option(self, pytester: Pytester, option) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def g():\n                raise IndexError\n            def test_func():\n                print(6*7)\n                g()  # --calling--\n        \"\"\"\n        )\n        for tbopt in [\"long\", \"short\", \"no\"]:\n            print(f\"testing --tb={tbopt}...\")\n            result = pytester.runpytest(\"-rN\", f\"--tb={tbopt}\")\n            s = result.stdout.str()\n            if tbopt == \"long\":\n                assert \"print(6*7)\" in s\n            else:\n                assert \"print(6*7)\" not in s\n            if tbopt != \"no\":\n                assert \"--calling--\" in s\n                assert \"IndexError\" in s\n            else:\n                assert \"FAILURES\" not in s\n                assert \"--calling--\" not in s\n                assert \"IndexError\" not in s\n\n    def test_tb_crashline(self, pytester: Pytester, option) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def g():\n                raise IndexError\n            def test_func1():\n                print(6*7)\n                g()  # --calling--\n            def test_func2():\n                assert 0, \"hello\"\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--tb=line\")\n        bn = p.name\n        result.stdout.fnmatch_lines(\n            [f\"*{bn}:3: IndexError*\", f\"*{bn}:8: AssertionError: hello*\"]\n        )\n        s = result.stdout.str()\n        assert \"def test_func2\" not in s\n\n    def test_tb_crashline_pytrace_false(self, pytester: Pytester, option) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_func1():\n                pytest.fail('test_func1', pytrace=False)\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--tb=line\")\n        result.stdout.str()\n        bn = p.name\n        result.stdout.fnmatch_lines([f\"*{bn}:3: Failed: test_func1\"])\n\n    def test_pytest_report_header(self, pytester: Pytester, option) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_sessionstart(session):\n                session.config._somevalue = 42\n            def pytest_report_header(config):\n                return \"hello: %s\" % config._somevalue\n        \"\"\"\n        )\n        pytester.mkdir(\"a\").joinpath(\"conftest.py\").write_text(\n            \"\"\"\ndef pytest_report_header(config, start_path):\n    return [\"line1\", str(start_path)]\n\"\"\",\n            encoding=\"utf-8\",\n        )\n        result = pytester.runpytest(\"a\")\n        result.stdout.fnmatch_lines([\"*hello: 42*\", \"line1\", str(pytester.path)])\n\n    def test_show_capture(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            import logging\n            def test_one():\n                sys.stdout.write('!This is stdout!')\n                sys.stderr.write('!This is stderr!')\n                logging.warning('!This is a warning log msg!')\n                assert False, 'Something failed'\n        \"\"\"\n        )\n\n        result = pytester.runpytest(\"--tb=short\")\n        result.stdout.fnmatch_lines(\n            [\n                \"!This is stdout!\",\n                \"!This is stderr!\",\n                \"*WARNING*!This is a warning log msg!\",\n            ]\n        )\n\n        result = pytester.runpytest(\"--show-capture=all\", \"--tb=short\")\n        result.stdout.fnmatch_lines(\n            [\n                \"!This is stdout!\",\n                \"!This is stderr!\",\n                \"*WARNING*!This is a warning log msg!\",\n            ]\n        )\n\n        stdout = pytester.runpytest(\"--show-capture=stdout\", \"--tb=short\").stdout.str()\n        assert \"!This is stderr!\" not in stdout\n        assert \"!This is stdout!\" in stdout\n        assert \"!This is a warning log msg!\" not in stdout\n\n        stdout = pytester.runpytest(\"--show-capture=stderr\", \"--tb=short\").stdout.str()\n        assert \"!This is stdout!\" not in stdout\n        assert \"!This is stderr!\" in stdout\n        assert \"!This is a warning log msg!\" not in stdout\n\n        stdout = pytester.runpytest(\"--show-capture=log\", \"--tb=short\").stdout.str()\n        assert \"!This is stdout!\" not in stdout\n        assert \"!This is stderr!\" not in stdout\n        assert \"!This is a warning log msg!\" in stdout\n\n        stdout = pytester.runpytest(\"--show-capture=no\", \"--tb=short\").stdout.str()\n        assert \"!This is stdout!\" not in stdout\n        assert \"!This is stderr!\" not in stdout\n        assert \"!This is a warning log msg!\" not in stdout\n\n    def test_show_capture_with_teardown_logs(self, pytester: Pytester) -> None:\n        \"\"\"Ensure that the capturing of teardown logs honor --show-capture setting\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n            import pytest\n\n            @pytest.fixture(scope=\"function\", autouse=\"True\")\n            def hook_each_test(request):\n                yield\n                sys.stdout.write(\"!stdout!\")\n                sys.stderr.write(\"!stderr!\")\n                logging.warning(\"!log!\")\n\n            def test_func():\n                assert False\n        \"\"\"\n        )\n\n        result = pytester.runpytest(\"--show-capture=stdout\", \"--tb=short\").stdout.str()\n        assert \"!stdout!\" in result\n        assert \"!stderr!\" not in result\n        assert \"!log!\" not in result\n\n        result = pytester.runpytest(\"--show-capture=stderr\", \"--tb=short\").stdout.str()\n        assert \"!stdout!\" not in result\n        assert \"!stderr!\" in result\n        assert \"!log!\" not in result\n\n        result = pytester.runpytest(\"--show-capture=log\", \"--tb=short\").stdout.str()\n        assert \"!stdout!\" not in result\n        assert \"!stderr!\" not in result\n        assert \"!log!\" in result\n\n        result = pytester.runpytest(\"--show-capture=no\", \"--tb=short\").stdout.str()\n        assert \"!stdout!\" not in result\n        assert \"!stderr!\" not in result\n        assert \"!log!\" not in result\n\n\n@pytest.mark.xfail(\"not hasattr(os, 'dup')\")\ndef test_fdopen_kept_alive_issue124(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import os, sys\n        k = []\n        def test_open_file_and_keep_alive(capfd):\n            stdout = os.fdopen(1, 'w', buffering=1, encoding='utf-8')\n            k.append(stdout)\n\n        def test_close_kept_alive_file():\n            stdout = k.pop()\n            stdout.close()\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n\ndef test_tbstyle_native_setup_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture\n        def setup_error_fixture():\n            raise Exception(\"error in exception\")\n\n        def test_error_fixture(setup_error_fixture):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--tb=native\")\n    result.stdout.fnmatch_lines(\n        ['*File *test_tbstyle_native_setup_error.py\", line *, in setup_error_fixture*']\n    )\n\n\ndef test_terminal_summary(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_terminal_summary(terminalreporter, exitstatus):\n            w = terminalreporter\n            w.section(\"hello\")\n            w.line(\"world\")\n            w.line(\"exitstatus: {0}\".format(exitstatus))\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *==== hello ====*\n        world\n        exitstatus: 5\n    \"\"\"\n    )\n\n\n@pytest.mark.filterwarnings(\"default::UserWarning\")\ndef test_terminal_summary_warnings_are_displayed(pytester: Pytester) -> None:\n    \"\"\"Test that warnings emitted during pytest_terminal_summary are displayed.\n    (#1305).\n    \"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        import warnings\n        def pytest_terminal_summary(terminalreporter):\n            warnings.warn(UserWarning('internal warning'))\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        def test_failure():\n            import warnings\n            warnings.warn(\"warning_from_\" + \"test\")\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-ra\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"*warning_from_test*\",\n            \"*= short test summary info =*\",\n            \"*= warnings summary (final) =*\",\n            \"*conftest.py:3:*internal warning\",\n            \"*== 1 failed, 2 warnings in *\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*None*\")\n    stdout = result.stdout.str()\n    assert stdout.count(\"warning_from_test\") == 1\n    assert stdout.count(\"=== warnings summary \") == 2\n\n\n@pytest.mark.filterwarnings(\"default::UserWarning\")\ndef test_terminal_summary_warnings_header_once(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_failure():\n            import warnings\n            warnings.warn(\"warning_from_\" + \"test\")\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-ra\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"*warning_from_test*\",\n            \"*= short test summary info =*\",\n            \"*== 1 failed, 1 warning in *\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*None*\")\n    stdout = result.stdout.str()\n    assert stdout.count(\"warning_from_test\") == 1\n    assert stdout.count(\"=== warnings summary \") == 1\n\n\n@pytest.mark.filterwarnings(\"default\")\ndef test_terminal_no_summary_warnings_header_once(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_failure():\n            import warnings\n            warnings.warn(\"warning_from_\" + \"test\")\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--no-summary\")\n    result.stdout.no_fnmatch_line(\"*= warnings summary =*\")\n    result.stdout.no_fnmatch_line(\"*= short test summary info =*\")\n\n\n@pytest.fixture(scope=\"session\")\ndef tr() -> TerminalReporter:\n    config = _pytest.config._prepareconfig([])\n    return TerminalReporter(config)\n\n\n@pytest.mark.parametrize(\n    \"exp_color, exp_line, stats_arg\",\n    [\n        # The method under test only cares about the length of each\n        # dict value, not the actual contents, so tuples of anything\n        # suffice\n        # Important statuses -- the highest priority of these always wins\n        (\"red\", [(\"1 failed\", {\"bold\": True, \"red\": True})], {\"failed\": [1]}),\n        (\n            \"red\",\n            [\n                (\"1 failed\", {\"bold\": True, \"red\": True}),\n                (\"1 passed\", {\"bold\": False, \"green\": True}),\n            ],\n            {\"failed\": [1], \"passed\": [1]},\n        ),\n        (\"red\", [(\"1 error\", {\"bold\": True, \"red\": True})], {\"error\": [1]}),\n        (\"red\", [(\"2 errors\", {\"bold\": True, \"red\": True})], {\"error\": [1, 2]}),\n        (\n            \"red\",\n            [\n                (\"1 passed\", {\"bold\": False, \"green\": True}),\n                (\"1 error\", {\"bold\": True, \"red\": True}),\n            ],\n            {\"error\": [1], \"passed\": [1]},\n        ),\n        # (a status that's not known to the code)\n        (\"yellow\", [(\"1 weird\", {\"bold\": True, \"yellow\": True})], {\"weird\": [1]}),\n        (\n            \"yellow\",\n            [\n                (\"1 passed\", {\"bold\": False, \"green\": True}),\n                (\"1 weird\", {\"bold\": True, \"yellow\": True}),\n            ],\n            {\"weird\": [1], \"passed\": [1]},\n        ),\n        (\"yellow\", [(\"1 warning\", {\"bold\": True, \"yellow\": True})], {\"warnings\": [1]}),\n        (\n            \"yellow\",\n            [\n                (\"1 passed\", {\"bold\": False, \"green\": True}),\n                (\"1 warning\", {\"bold\": True, \"yellow\": True}),\n            ],\n            {\"warnings\": [1], \"passed\": [1]},\n        ),\n        (\n            \"green\",\n            [(\"5 passed\", {\"bold\": True, \"green\": True})],\n            {\"passed\": [1, 2, 3, 4, 5]},\n        ),\n        # \"Boring\" statuses.  These have no effect on the color of the summary\n        # line.  Thus, if *every* test has a boring status, the summary line stays\n        # at its default color, i.e. yellow, to warn the user that the test run\n        # produced no useful information\n        (\"yellow\", [(\"1 skipped\", {\"bold\": True, \"yellow\": True})], {\"skipped\": [1]}),\n        (\n            \"green\",\n            [\n                (\"1 passed\", {\"bold\": True, \"green\": True}),\n                (\"1 skipped\", {\"bold\": False, \"yellow\": True}),\n            ],\n            {\"skipped\": [1], \"passed\": [1]},\n        ),\n        (\n            \"yellow\",\n            [(\"1 deselected\", {\"bold\": True, \"yellow\": True})],\n            {\"deselected\": [1]},\n        ),\n        (\n            \"green\",\n            [\n                (\"1 passed\", {\"bold\": True, \"green\": True}),\n                (\"1 deselected\", {\"bold\": False, \"yellow\": True}),\n            ],\n            {\"deselected\": [1], \"passed\": [1]},\n        ),\n        (\"yellow\", [(\"1 xfailed\", {\"bold\": True, \"yellow\": True})], {\"xfailed\": [1]}),\n        (\n            \"green\",\n            [\n                (\"1 passed\", {\"bold\": True, \"green\": True}),\n                (\"1 xfailed\", {\"bold\": False, \"yellow\": True}),\n            ],\n            {\"xfailed\": [1], \"passed\": [1]},\n        ),\n        (\"yellow\", [(\"1 xpassed\", {\"bold\": True, \"yellow\": True})], {\"xpassed\": [1]}),\n        (\n            \"yellow\",\n            [\n                (\"1 passed\", {\"bold\": False, \"green\": True}),\n                (\"1 xpassed\", {\"bold\": True, \"yellow\": True}),\n            ],\n            {\"xpassed\": [1], \"passed\": [1]},\n        ),\n        # Likewise if no tests were found at all\n        (\"yellow\", [(\"no tests ran\", {\"yellow\": True})], {}),\n        # Test the empty-key special case\n        (\"yellow\", [(\"no tests ran\", {\"yellow\": True})], {\"\": [1]}),\n        (\n            \"green\",\n            [(\"1 passed\", {\"bold\": True, \"green\": True})],\n            {\"\": [1], \"passed\": [1]},\n        ),\n        # A couple more complex combinations\n        (\n            \"red\",\n            [\n                (\"1 failed\", {\"bold\": True, \"red\": True}),\n                (\"2 passed\", {\"bold\": False, \"green\": True}),\n                (\"3 xfailed\", {\"bold\": False, \"yellow\": True}),\n            ],\n            {\"passed\": [1, 2], \"failed\": [1], \"xfailed\": [1, 2, 3]},\n        ),\n        (\n            \"green\",\n            [\n                (\"1 passed\", {\"bold\": True, \"green\": True}),\n                (\"2 skipped\", {\"bold\": False, \"yellow\": True}),\n                (\"3 deselected\", {\"bold\": False, \"yellow\": True}),\n                (\"2 xfailed\", {\"bold\": False, \"yellow\": True}),\n            ],\n            {\n                \"passed\": [1],\n                \"skipped\": [1, 2],\n                \"deselected\": [1, 2, 3],\n                \"xfailed\": [1, 2],\n            },\n        ),\n    ],\n)\ndef test_summary_stats(\n    tr: TerminalReporter,\n    exp_line: list[tuple[str, dict[str, bool]]],\n    exp_color: str,\n    stats_arg: dict[str, list[object]],\n) -> None:\n    tr.stats = stats_arg\n\n    # Fake \"_is_last_item\" to be True.\n    class fake_session:\n        testscollected = 0\n\n    tr._session = fake_session  # type: ignore[assignment]\n    assert tr._is_last_item\n\n    # Reset cache.\n    tr._main_color = None\n\n    print(f\"Based on stats: {stats_arg}\")\n    print(f'Expect summary: \"{exp_line}\"; with color \"{exp_color}\"')\n    (line, color) = tr.build_summary_stats_line()\n    print(f'Actually got:   \"{line}\"; with color \"{color}\"')\n    assert line == exp_line\n    assert color == exp_color\n\n\ndef test_skip_counting_towards_summary(tr):\n    class DummyReport(BaseReport):\n        count_towards_summary = True\n\n    r1 = DummyReport()\n    r2 = DummyReport()\n    tr.stats = {\"failed\": (r1, r2)}\n    tr._main_color = None\n    res = tr.build_summary_stats_line()\n    assert res == ([(\"2 failed\", {\"bold\": True, \"red\": True})], \"red\")\n\n    r1.count_towards_summary = False\n    tr.stats = {\"failed\": (r1, r2)}\n    tr._main_color = None\n    res = tr.build_summary_stats_line()\n    assert res == ([(\"1 failed\", {\"bold\": True, \"red\": True})], \"red\")\n\n\nclass TestClassicOutputStyle:\n    \"\"\"Ensure classic output style works as expected (#3883)\"\"\"\n\n    @pytest.fixture\n    def test_files(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            **{\n                \"test_one.py\": \"def test_one(): pass\",\n                \"test_two.py\": \"def test_two(): assert 0\",\n                \"sub/test_three.py\": \"\"\"\n                    def test_three_1(): pass\n                    def test_three_2(): assert 0\n                    def test_three_3(): pass\n                \"\"\",\n            }\n        )\n\n    def test_normal_verbosity(self, pytester: Pytester, test_files) -> None:\n        result = pytester.runpytest(\"-o\", \"console_output_style=classic\")\n        result.stdout.fnmatch_lines(\n            [\n                f\"sub{os.sep}test_three.py .F.\",\n                \"test_one.py .\",\n                \"test_two.py F\",\n                \"*2 failed, 3 passed in*\",\n            ]\n        )\n\n    def test_verbose(self, pytester: Pytester, test_files) -> None:\n        result = pytester.runpytest(\"-o\", \"console_output_style=classic\", \"-v\")\n        result.stdout.fnmatch_lines(\n            [\n                f\"sub{os.sep}test_three.py::test_three_1 PASSED\",\n                f\"sub{os.sep}test_three.py::test_three_2 FAILED\",\n                f\"sub{os.sep}test_three.py::test_three_3 PASSED\",\n                \"test_one.py::test_one PASSED\",\n                \"test_two.py::test_two FAILED\",\n                \"*2 failed, 3 passed in*\",\n            ]\n        )\n\n    def test_quiet(self, pytester: Pytester, test_files) -> None:\n        result = pytester.runpytest(\"-o\", \"console_output_style=classic\", \"-q\")\n        result.stdout.fnmatch_lines([\".F..F\", \"*2 failed, 3 passed in*\"])\n\n\nclass TestProgressOutputStyle:\n    @pytest.fixture\n    def many_tests_files(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_bar=\"\"\"\n                import pytest\n                @pytest.mark.parametrize('i', range(10))\n                def test_bar(i): pass\n            \"\"\",\n            test_foo=\"\"\"\n                import pytest\n                @pytest.mark.parametrize('i', range(5))\n                def test_foo(i): pass\n            \"\"\",\n            test_foobar=\"\"\"\n                import pytest\n                @pytest.mark.parametrize('i', range(5))\n                def test_foobar(i): pass\n            \"\"\",\n        )\n\n    def test_zero_tests_collected(self, pytester: Pytester) -> None:\n        \"\"\"Some plugins (testmon for example) might issue pytest_runtest_logreport without any tests being\n        actually collected (#2971).\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n        def pytest_collection_modifyitems(items, config):\n            from _pytest.runner import CollectReport\n            for node_id in ('nodeid1', 'nodeid2'):\n                rep = CollectReport(node_id, 'passed', None, None)\n                rep.when = 'passed'\n                rep.duration = 0.1\n                config.hook.pytest_runtest_logreport(report=rep)\n        \"\"\"\n        )\n        output = pytester.runpytest()\n        output.stdout.no_fnmatch_line(\"*ZeroDivisionError*\")\n        output.stdout.fnmatch_lines([\"=* 2 passed in *=\"])\n\n    def test_normal(self, many_tests_files, pytester: Pytester) -> None:\n        output = pytester.runpytest()\n        output.stdout.re_match_lines(\n            [\n                r\"test_bar.py \\.{10} \\s+ \\[ 50%\\]\",\n                r\"test_foo.py \\.{5} \\s+ \\[ 75%\\]\",\n                r\"test_foobar.py \\.{5} \\s+ \\[100%\\]\",\n            ]\n        )\n\n    def test_colored_progress(\n        self, pytester: Pytester, monkeypatch, color_mapping\n    ) -> None:\n        monkeypatch.setenv(\"PY_COLORS\", \"1\")\n        pytester.makepyfile(\n            test_axfail=\"\"\"\n                import pytest\n                @pytest.mark.xfail\n                def test_axfail(): assert 0\n            \"\"\",\n            test_bar=\"\"\"\n                import pytest\n                @pytest.mark.parametrize('i', range(10))\n                def test_bar(i): pass\n            \"\"\",\n            test_foo=\"\"\"\n                import pytest\n                import warnings\n                @pytest.mark.parametrize('i', range(5))\n                def test_foo(i):\n                    warnings.warn(DeprecationWarning(\"collection\"))\n                    pass\n            \"\"\",\n            test_foobar=\"\"\"\n                import pytest\n                @pytest.mark.parametrize('i', range(5))\n                def test_foobar(i): raise ValueError()\n            \"\"\",\n        )\n        result = pytester.runpytest()\n        result.stdout.re_match_lines(\n            color_mapping.format_for_rematch(\n                [\n                    r\"test_axfail.py {yellow}x{reset}{green} \\s+ \\[  4%\\]{reset}\",\n                    r\"test_bar.py ({green}\\.{reset}){{10}}{green} \\s+ \\[ 52%\\]{reset}\",\n                    r\"test_foo.py ({green}\\.{reset}){{5}}{yellow} \\s+ \\[ 76%\\]{reset}\",\n                    r\"test_foobar.py ({red}F{reset}){{5}}{red} \\s+ \\[100%\\]{reset}\",\n                ]\n            )\n        )\n\n        # Only xfail should have yellow progress indicator.\n        result = pytester.runpytest(\"test_axfail.py\")\n        result.stdout.re_match_lines(\n            color_mapping.format_for_rematch(\n                [\n                    r\"test_axfail.py {yellow}x{reset}{yellow} \\s+ \\[100%\\]{reset}\",\n                    r\"^{yellow}=+ ({yellow}{bold}|{bold}{yellow})1 xfailed{reset}{yellow} in \",\n                ]\n            )\n        )\n\n    def test_count(self, many_tests_files, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style = count\n        \"\"\"\n        )\n        output = pytester.runpytest()\n        output.stdout.re_match_lines(\n            [\n                r\"test_bar.py \\.{10} \\s+ \\[10/20\\]\",\n                r\"test_foo.py \\.{5} \\s+ \\[15/20\\]\",\n                r\"test_foobar.py \\.{5} \\s+ \\[20/20\\]\",\n            ]\n        )\n\n    def test_verbose(self, many_tests_files, pytester: Pytester) -> None:\n        output = pytester.runpytest(\"-v\")\n        output.stdout.re_match_lines(\n            [\n                r\"test_bar.py::test_bar\\[0\\] PASSED \\s+ \\[  5%\\]\",\n                r\"test_foo.py::test_foo\\[4\\] PASSED \\s+ \\[ 75%\\]\",\n                r\"test_foobar.py::test_foobar\\[4\\] PASSED \\s+ \\[100%\\]\",\n            ]\n        )\n\n    def test_verbose_count(self, many_tests_files, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style = count\n        \"\"\"\n        )\n        output = pytester.runpytest(\"-v\")\n        output.stdout.re_match_lines(\n            [\n                r\"test_bar.py::test_bar\\[0\\] PASSED \\s+ \\[ 1/20\\]\",\n                r\"test_foo.py::test_foo\\[4\\] PASSED \\s+ \\[15/20\\]\",\n                r\"test_foobar.py::test_foobar\\[4\\] PASSED \\s+ \\[20/20\\]\",\n            ]\n        )\n\n    def test_xdist_normal(\n        self, many_tests_files, pytester: Pytester, monkeypatch\n    ) -> None:\n        pytest.importorskip(\"xdist\")\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n        output = pytester.runpytest(\"-n2\")\n        output.stdout.re_match_lines([r\"\\.{20} \\s+ \\[100%\\]\"])\n\n    def test_xdist_normal_count(\n        self, many_tests_files, pytester: Pytester, monkeypatch\n    ) -> None:\n        pytest.importorskip(\"xdist\")\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style = count\n        \"\"\"\n        )\n        output = pytester.runpytest(\"-n2\")\n        output.stdout.re_match_lines([r\"\\.{20} \\s+ \\[20/20\\]\"])\n\n    def test_xdist_verbose(\n        self, many_tests_files, pytester: Pytester, monkeypatch\n    ) -> None:\n        pytest.importorskip(\"xdist\")\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n        output = pytester.runpytest(\"-n2\", \"-v\")\n        output.stdout.re_match_lines_random(\n            [\n                r\"\\[gw\\d\\] \\[\\s*\\d+%\\] PASSED test_bar.py::test_bar\\[1\\]\",\n                r\"\\[gw\\d\\] \\[\\s*\\d+%\\] PASSED test_foo.py::test_foo\\[1\\]\",\n                r\"\\[gw\\d\\] \\[\\s*\\d+%\\] PASSED test_foobar.py::test_foobar\\[1\\]\",\n            ]\n        )\n        output.stdout.fnmatch_lines_random(\n            [\n                line.translate(TRANS_FNMATCH)\n                for line in [\n                    \"test_bar.py::test_bar[0] \",\n                    \"test_foo.py::test_foo[0] \",\n                    \"test_foobar.py::test_foobar[0] \",\n                    \"[gw?] [  5%] PASSED test_*[?] \",\n                    \"[gw?] [ 10%] PASSED test_*[?] \",\n                    \"[gw?] [ 55%] PASSED test_*[?] \",\n                    \"[gw?] [ 60%] PASSED test_*[?] \",\n                    \"[gw?] [ 95%] PASSED test_*[?] \",\n                    \"[gw?] [100%] PASSED test_*[?] \",\n                ]\n            ]\n        )\n\n    def test_capture_no(self, many_tests_files, pytester: Pytester) -> None:\n        output = pytester.runpytest(\"-s\")\n        output.stdout.re_match_lines(\n            [r\"test_bar.py \\.{10}\", r\"test_foo.py \\.{5}\", r\"test_foobar.py \\.{5}\"]\n        )\n\n        output = pytester.runpytest(\"--capture=no\")\n        output.stdout.no_fnmatch_line(\"*%]*\")\n\n    def test_capture_no_progress_enabled(\n        self, many_tests_files, pytester: Pytester\n    ) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style = progress-even-when-capture-no\n        \"\"\"\n        )\n        output = pytester.runpytest(\"-s\")\n        output.stdout.re_match_lines(\n            [\n                r\"test_bar.py \\.{10} \\s+ \\[ 50%\\]\",\n                r\"test_foo.py \\.{5} \\s+ \\[ 75%\\]\",\n                r\"test_foobar.py \\.{5} \\s+ \\[100%\\]\",\n            ]\n        )\n\n\nclass TestProgressWithTeardown:\n    \"\"\"Ensure we show the correct percentages for tests that fail during teardown (#3088)\"\"\"\n\n    @pytest.fixture\n    def contest_with_teardown_fixture(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def fail_teardown():\n                yield\n                assert False\n        \"\"\"\n        )\n\n    @pytest.fixture\n    def many_files(self, pytester: Pytester, contest_with_teardown_fixture) -> None:\n        pytester.makepyfile(\n            test_bar=\"\"\"\n                import pytest\n                @pytest.mark.parametrize('i', range(5))\n                def test_bar(fail_teardown, i):\n                    pass\n            \"\"\",\n            test_foo=\"\"\"\n                import pytest\n                @pytest.mark.parametrize('i', range(15))\n                def test_foo(fail_teardown, i):\n                    pass\n            \"\"\",\n        )\n\n    def test_teardown_simple(\n        self, pytester: Pytester, contest_with_teardown_fixture\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo(fail_teardown):\n                pass\n        \"\"\"\n        )\n        output = pytester.runpytest()\n        output.stdout.re_match_lines([r\"test_teardown_simple.py \\.E\\s+\\[100%\\]\"])\n\n    def test_teardown_with_test_also_failing(\n        self, pytester: Pytester, contest_with_teardown_fixture\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo(fail_teardown):\n                assert 0\n        \"\"\"\n        )\n        output = pytester.runpytest(\"-rfE\")\n        output.stdout.re_match_lines(\n            [\n                r\"test_teardown_with_test_also_failing.py FE\\s+\\[100%\\]\",\n                \"FAILED test_teardown_with_test_also_failing.py::test_foo - assert 0\",\n                \"ERROR test_teardown_with_test_also_failing.py::test_foo - assert False\",\n            ]\n        )\n\n    def test_teardown_many(self, pytester: Pytester, many_files) -> None:\n        output = pytester.runpytest()\n        output.stdout.re_match_lines(\n            [r\"test_bar.py (\\.E){5}\\s+\\[ 25%\\]\", r\"test_foo.py (\\.E){15}\\s+\\[100%\\]\"]\n        )\n\n    def test_teardown_many_verbose(\n        self, pytester: Pytester, many_files, color_mapping\n    ) -> None:\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            color_mapping.format_for_fnmatch(\n                [\n                    \"test_bar.py::test_bar[0] PASSED  * [  5%]\",\n                    \"test_bar.py::test_bar[0] ERROR   * [  5%]\",\n                    \"test_bar.py::test_bar[4] PASSED  * [ 25%]\",\n                    \"test_foo.py::test_foo[14] PASSED * [100%]\",\n                    \"test_foo.py::test_foo[14] ERROR  * [100%]\",\n                    \"=* 20 passed, 20 errors in *\",\n                ]\n            )\n        )\n\n    def test_xdist_normal(self, many_files, pytester: Pytester, monkeypatch) -> None:\n        pytest.importorskip(\"xdist\")\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n        output = pytester.runpytest(\"-n2\")\n        output.stdout.re_match_lines([r\"[\\.E]{40} \\s+ \\[100%\\]\"])\n\n\ndef test_skip_reasons_folding() -> None:\n    path = \"xyz\"\n    lineno = 3\n    message = \"justso\"\n    longrepr = (path, lineno, message)\n\n    class X:\n        pass\n\n    ev1 = cast(CollectReport, X())\n    ev1.when = \"execute\"\n    ev1.skipped = True  # type: ignore[misc]\n    ev1.longrepr = longrepr\n\n    ev2 = cast(CollectReport, X())\n    ev2.when = \"execute\"\n    ev2.longrepr = longrepr\n    ev2.skipped = True  # type: ignore[misc]\n\n    # ev3 might be a collection report\n    ev3 = cast(CollectReport, X())\n    ev3.when = \"collect\"\n    ev3.longrepr = longrepr\n    ev3.skipped = True  # type: ignore[misc]\n\n    values = _folded_skips(Path.cwd(), [ev1, ev2, ev3])\n    assert len(values) == 1\n    num, fspath, lineno_, reason = values[0]\n    assert num == 3\n    assert fspath == path\n    assert lineno_ == lineno\n    assert reason == message\n\n\ndef test_line_with_reprcrash(monkeypatch: MonkeyPatch) -> None:\n    mocked_verbose_word = \"FAILED\"\n\n    mocked_pos = \"some::nodeid\"\n\n    def mock_get_pos(*args):\n        return mocked_pos\n\n    monkeypatch.setattr(_pytest.terminal, \"_get_node_id_with_markup\", mock_get_pos)\n\n    class Namespace:\n        def __init__(self, **kwargs):\n            self.__dict__.update(kwargs)\n\n    class config:\n        def __init__(self):\n            self.option = Namespace(verbose=0)\n\n    class rep:\n        def _get_verbose_word(self, *args):\n            return mocked_verbose_word\n\n        class longrepr:\n            class reprcrash:\n                pass\n\n    def check(msg, width, expected):\n        class DummyTerminalWriter:\n            fullwidth = width\n\n            def markup(self, word: str, **markup: str):\n                return word\n\n        __tracebackhide__ = True\n        if msg:\n            rep.longrepr.reprcrash.message = msg  # type: ignore\n        actual = _get_line_with_reprcrash_message(\n            config(),  # type: ignore[arg-type]\n            rep(),  # type: ignore[arg-type]\n            DummyTerminalWriter(),  # type: ignore[arg-type]\n            {},\n        )\n\n        assert actual == expected\n        if actual != f\"{mocked_verbose_word} {mocked_pos}\":\n            assert len(actual) <= width\n            assert wcswidth(actual) <= width\n\n    # AttributeError with message\n    check(None, 80, \"FAILED some::nodeid\")\n\n    check(\"msg\", 80, \"FAILED some::nodeid - msg\")\n    check(\"msg\", 3, \"FAILED some::nodeid\")\n\n    check(\"msg\", 24, \"FAILED some::nodeid\")\n    check(\"msg\", 25, \"FAILED some::nodeid - msg\")\n\n    check(\"some longer msg\", 24, \"FAILED some::nodeid\")\n    check(\"some longer msg\", 25, \"FAILED some::nodeid - ...\")\n    check(\"some longer msg\", 26, \"FAILED some::nodeid - s...\")\n\n    check(\"some\\nmessage\", 25, \"FAILED some::nodeid - ...\")\n    check(\"some\\nmessage\", 26, \"FAILED some::nodeid - some\")\n    check(\"some\\nmessage\", 80, \"FAILED some::nodeid - some\")\n\n    # Test unicode safety.\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 25, \"FAILED some::nodeid - ...\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 26, \"FAILED some::nodeid - ...\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 27, \"FAILED some::nodeid - \ud83c\ude50...\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 28, \"FAILED some::nodeid - \ud83c\ude50...\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 29, \"FAILED some::nodeid - \ud83c\ude50\ud83c\ude50...\")\n\n    # NOTE: constructed, not sure if this is supported.\n    mocked_pos = \"nodeid::\ud83c\ude50::withunicode\"\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 29, \"FAILED nodeid::\ud83c\ude50::withunicode\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 40, \"FAILED nodeid::\ud83c\ude50::withunicode - \ud83c\ude50\ud83c\ude50...\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 41, \"FAILED nodeid::\ud83c\ude50::withunicode - \ud83c\ude50\ud83c\ude50...\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 42, \"FAILED nodeid::\ud83c\ude50::withunicode - \ud83c\ude50\ud83c\ude50\ud83c\ude50...\")\n    check(\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\\n2nd line\", 80, \"FAILED nodeid::\ud83c\ude50::withunicode - \ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\ud83c\ude50\")\n\n\ndef test_short_summary_with_verbose(\n    monkeypatch: MonkeyPatch, pytester: Pytester\n) -> None:\n    \"\"\"With -vv do not truncate the summary info (#11777).\"\"\"\n    # On CI we also do not truncate the summary info, monkeypatch it to ensure we\n    # are testing against the -vv flag on CI.\n    monkeypatch.setattr(_pytest.terminal, \"running_on_ci\", lambda: False)\n\n    string_length = 200\n    pytester.makepyfile(\n        f\"\"\"\n        def test():\n            s1 = \"A\" * {string_length}\n            s2 = \"B\" * {string_length}\n            assert s1 == s2\n        \"\"\"\n    )\n\n    # No -vv, summary info should be truncated.\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"*short test summary info*\",\n            \"* assert 'AAA...\",\n        ],\n    )\n\n    # No truncation with -vv.\n    result = pytester.runpytest(\"-vv\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*short test summary info*\",\n            f\"*{'A' * string_length}*{'B' * string_length}'\",\n        ]\n    )\n\n\n@pytest.mark.parametrize(\n    \"seconds, expected\",\n    [\n        (10.0, \"10.00s\"),\n        (10.34, \"10.34s\"),\n        (59.99, \"59.99s\"),\n        (60.55, \"60.55s (0:01:00)\"),\n        (123.55, \"123.55s (0:02:03)\"),\n        (60 * 60 + 0.5, \"3600.50s (1:00:00)\"),\n    ],\n)\ndef test_format_session_duration(seconds, expected):\n    from _pytest.terminal import format_session_duration\n\n    assert format_session_duration(seconds) == expected\n\n\ndef test_collecterror(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\"raise SyntaxError()\")\n    result = pytester.runpytest(\"-ra\", str(p1))\n    result.stdout.fnmatch_lines(\n        [\n            \"collected 0 items / 1 error\",\n            \"*= ERRORS =*\",\n            \"*_ ERROR collecting test_collecterror.py _*\",\n            \"E   SyntaxError: *\",\n            \"*= short test summary info =*\",\n            \"ERROR test_collecterror.py\",\n            \"*! Interrupted: 1 error during collection !*\",\n            \"*= 1 error in *\",\n        ]\n    )\n\n\ndef test_no_summary_collecterror(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\"raise SyntaxError()\")\n    result = pytester.runpytest(\"-ra\", \"--no-summary\", str(p1))\n    result.stdout.no_fnmatch_line(\"*= ERRORS =*\")\n\n\ndef test_via_exec(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\"exec('def test_via_exec(): pass')\")\n    result = pytester.runpytest(str(p1), \"-vv\")\n    result.stdout.fnmatch_lines(\n        [\"test_via_exec.py::test_via_exec <- <string> PASSED*\", \"*= 1 passed in *\"]\n    )\n\n\nclass TestCodeHighlight:\n    def test_code_highlight_simple(self, pytester: Pytester, color_mapping) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 10\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--color=yes\")\n        result.stdout.fnmatch_lines(\n            color_mapping.format_for_fnmatch(\n                [\n                    \"    {reset}{kw}def{hl-reset} {function}test_foo{hl-reset}():{endline}\",\n                    \">       {kw}assert{hl-reset} {number}1{hl-reset} == {number}10{hl-reset}{endline}\",\n                    \"{bold}{red}E       assert 1 == 10{reset}\",\n                ]\n            )\n        )\n\n    def test_code_highlight_continuation(\n        self, pytester: Pytester, color_mapping\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                print('''\n                '''); assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--color=yes\")\n\n        result.stdout.fnmatch_lines(\n            color_mapping.format_for_fnmatch(\n                [\n                    \"    {reset}{kw}def{hl-reset} {function}test_foo{hl-reset}():{endline}\",\n                    \"        {print}print{hl-reset}({str}'''{hl-reset}{str}{hl-reset}\",\n                    \">   {str}    {hl-reset}{str}'''{hl-reset}); {kw}assert{hl-reset} {number}0{hl-reset}{endline}\",\n                    \"{bold}{red}E       assert 0{reset}\",\n                ]\n            )\n        )\n\n    def test_code_highlight_custom_theme(\n        self, pytester: Pytester, color_mapping, monkeypatch: MonkeyPatch\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 10\n        \"\"\"\n        )\n        monkeypatch.setenv(\"PYTEST_THEME\", \"solarized-dark\")\n        monkeypatch.setenv(\"PYTEST_THEME_MODE\", \"dark\")\n        result = pytester.runpytest(\"--color=yes\")\n        result.stdout.fnmatch_lines(\n            color_mapping.format_for_fnmatch(\n                [\n                    \"    {reset}{kw}def{hl-reset} {function}test_foo{hl-reset}():{endline}\",\n                    \">       {kw}assert{hl-reset} {number}1{hl-reset} == {number}10{hl-reset}{endline}\",\n                    \"{bold}{red}E       assert 1 == 10{reset}\",\n                ]\n            )\n        )\n\n    def test_code_highlight_invalid_theme(\n        self, pytester: Pytester, color_mapping, monkeypatch: MonkeyPatch\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 10\n        \"\"\"\n        )\n        monkeypatch.setenv(\"PYTEST_THEME\", \"invalid\")\n        result = pytester.runpytest_subprocess(\"--color=yes\")\n        result.stderr.fnmatch_lines(\n            \"ERROR: PYTEST_THEME environment variable has an invalid value: 'invalid'. \"\n            \"Hint: See available pygments styles with `pygmentize -L styles`.\"\n        )\n\n    def test_code_highlight_invalid_theme_mode(\n        self, pytester: Pytester, color_mapping, monkeypatch: MonkeyPatch\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert 1 == 10\n        \"\"\"\n        )\n        monkeypatch.setenv(\"PYTEST_THEME_MODE\", \"invalid\")\n        result = pytester.runpytest_subprocess(\"--color=yes\")\n        result.stderr.fnmatch_lines(\n            \"ERROR: PYTEST_THEME_MODE environment variable has an invalid value: 'invalid'. \"\n            \"The allowed values are 'dark' (default) and 'light'.\"\n        )\n\n\ndef test_raw_skip_reason_skipped() -> None:\n    report = SimpleNamespace()\n    report.skipped = True\n    report.longrepr = (\"xyz\", 3, \"Skipped: Just so\")\n\n    reason = _get_raw_skip_reason(cast(TestReport, report))\n    assert reason == \"Just so\"\n\n\ndef test_raw_skip_reason_xfail() -> None:\n    report = SimpleNamespace()\n    report.wasxfail = \"reason: To everything there is a season\"\n\n    reason = _get_raw_skip_reason(cast(TestReport, report))\n    assert reason == \"To everything there is a season\"\n\n\ndef test_format_trimmed() -> None:\n    msg = \"unconditional skip\"\n\n    assert _format_trimmed(\" ({}) \", msg, len(msg) + 4) == \" (unconditional skip) \"\n    assert _format_trimmed(\" ({}) \", msg, len(msg) + 3) == \" (unconditional ...) \"\n\n\nclass TestFineGrainedTestCase:\n    DEFAULT_FILE_CONTENTS = \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"i\", range(4))\n            def test_ok(i):\n                '''\n                some docstring\n                '''\n                pass\n\n            def test_fail():\n                assert False\n            \"\"\"\n    LONG_SKIP_FILE_CONTENTS = \"\"\"\n            import pytest\n\n            @pytest.mark.skip(\n              \"some long skip reason that will not fit on a single line with other content that goes\"\n              \" on and on and on and on and on\"\n            )\n            def test_skip():\n                pass\n            \"\"\"\n\n    @pytest.mark.parametrize(\"verbosity\", [1, 2])\n    def test_execute_positive(self, verbosity, pytester: Pytester) -> None:\n        # expected: one test case per line (with file name), word describing result\n        p = TestFineGrainedTestCase._initialize_files(pytester, verbosity=verbosity)\n        result = pytester.runpytest(p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 5 items\",\n                \"\",\n                f\"{p.name}::test_ok[0] PASSED                              [ 20%]\",\n                f\"{p.name}::test_ok[1] PASSED                              [ 40%]\",\n                f\"{p.name}::test_ok[2] PASSED                              [ 60%]\",\n                f\"{p.name}::test_ok[3] PASSED                              [ 80%]\",\n                f\"{p.name}::test_fail FAILED                               [100%]\",\n            ],\n            consecutive=True,\n        )\n\n    def test_execute_0_global_1(self, pytester: Pytester) -> None:\n        # expected: one file name per line, single character describing result\n        p = TestFineGrainedTestCase._initialize_files(pytester, verbosity=0)\n        result = pytester.runpytest(\"-v\", p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collecting ... collected 5 items\",\n                \"\",\n                f\"{p.name} ....F                                         [100%]\",\n            ],\n            consecutive=True,\n        )\n\n    @pytest.mark.parametrize(\"verbosity\", [-1, -2])\n    def test_execute_negative(self, verbosity, pytester: Pytester) -> None:\n        # expected: single character describing result\n        p = TestFineGrainedTestCase._initialize_files(pytester, verbosity=verbosity)\n        result = pytester.runpytest(p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 5 items\",\n                \"....F                                                                    [100%]\",\n            ],\n            consecutive=True,\n        )\n\n    def test_execute_skipped_positive_2(self, pytester: Pytester) -> None:\n        # expected: one test case per line (with file name), word describing result, full reason\n        p = TestFineGrainedTestCase._initialize_files(\n            pytester,\n            verbosity=2,\n            file_contents=TestFineGrainedTestCase.LONG_SKIP_FILE_CONTENTS,\n        )\n        result = pytester.runpytest(p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"\",\n                f\"{p.name}::test_skip SKIPPED (some long skip\",\n                \"reason that will not fit on a single line with other content that goes\",\n                \"on and on and on and on and on)                                          [100%]\",\n            ],\n            consecutive=True,\n        )\n\n    def test_execute_skipped_positive_1(self, pytester: Pytester) -> None:\n        # expected: one test case per line (with file name), word describing result, reason truncated\n        p = TestFineGrainedTestCase._initialize_files(\n            pytester,\n            verbosity=1,\n            file_contents=TestFineGrainedTestCase.LONG_SKIP_FILE_CONTENTS,\n        )\n        result = pytester.runpytest(p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"\",\n                f\"{p.name}::test_skip SKIPPED (some long ski...) [100%]\",\n            ],\n            consecutive=True,\n        )\n\n    def test_execute_skipped__0_global_1(self, pytester: Pytester) -> None:\n        # expected: one file name per line, single character describing result (no reason)\n        p = TestFineGrainedTestCase._initialize_files(\n            pytester,\n            verbosity=0,\n            file_contents=TestFineGrainedTestCase.LONG_SKIP_FILE_CONTENTS,\n        )\n        result = pytester.runpytest(\"-v\", p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collecting ... collected 1 item\",\n                \"\",\n                f\"{p.name} s                                    [100%]\",\n            ],\n            consecutive=True,\n        )\n\n    @pytest.mark.parametrize(\"verbosity\", [-1, -2])\n    def test_execute_skipped_negative(self, verbosity, pytester: Pytester) -> None:\n        # expected: single character describing result (no reason)\n        p = TestFineGrainedTestCase._initialize_files(\n            pytester,\n            verbosity=verbosity,\n            file_contents=TestFineGrainedTestCase.LONG_SKIP_FILE_CONTENTS,\n        )\n        result = pytester.runpytest(p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 1 item\",\n                \"s                                                                        [100%]\",\n            ],\n            consecutive=True,\n        )\n\n    @pytest.mark.parametrize(\"verbosity\", [1, 2])\n    def test__collect_only_positive(self, verbosity, pytester: Pytester) -> None:\n        p = TestFineGrainedTestCase._initialize_files(pytester, verbosity=verbosity)\n        result = pytester.runpytest(\"--collect-only\", p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 5 items\",\n                \"\",\n                f\"<Dir {p.parent.name}>\",\n                f\"  <Module {p.name}>\",\n                \"    <Function test_ok[0]>\",\n                \"      some docstring\",\n                \"    <Function test_ok[1]>\",\n                \"      some docstring\",\n                \"    <Function test_ok[2]>\",\n                \"      some docstring\",\n                \"    <Function test_ok[3]>\",\n                \"      some docstring\",\n                \"    <Function test_fail>\",\n            ],\n            consecutive=True,\n        )\n\n    def test_collect_only_0_global_1(self, pytester: Pytester) -> None:\n        p = TestFineGrainedTestCase._initialize_files(pytester, verbosity=0)\n        result = pytester.runpytest(\"-v\", \"--collect-only\", p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collecting ... collected 5 items\",\n                \"\",\n                f\"<Dir {p.parent.name}>\",\n                f\"  <Module {p.name}>\",\n                \"    <Function test_ok[0]>\",\n                \"    <Function test_ok[1]>\",\n                \"    <Function test_ok[2]>\",\n                \"    <Function test_ok[3]>\",\n                \"    <Function test_fail>\",\n            ],\n            consecutive=True,\n        )\n\n    def test_collect_only_negative_1(self, pytester: Pytester) -> None:\n        p = TestFineGrainedTestCase._initialize_files(pytester, verbosity=-1)\n        result = pytester.runpytest(\"--collect-only\", p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 5 items\",\n                \"\",\n                f\"{p.name}::test_ok[0]\",\n                f\"{p.name}::test_ok[1]\",\n                f\"{p.name}::test_ok[2]\",\n                f\"{p.name}::test_ok[3]\",\n                f\"{p.name}::test_fail\",\n            ],\n            consecutive=True,\n        )\n\n    def test_collect_only_negative_2(self, pytester: Pytester) -> None:\n        p = TestFineGrainedTestCase._initialize_files(pytester, verbosity=-2)\n        result = pytester.runpytest(\"--collect-only\", p)\n\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 5 items\",\n                \"\",\n                f\"{p.name}: 5\",\n            ],\n            consecutive=True,\n        )\n\n    @staticmethod\n    def _initialize_files(\n        pytester: Pytester, verbosity: int, file_contents: str = DEFAULT_FILE_CONTENTS\n    ) -> Path:\n        p = pytester.makepyfile(file_contents)\n        pytester.makeini(\n            f\"\"\"\n            [pytest]\n            verbosity_test_cases = {verbosity}\n            \"\"\"\n        )\n        return p\n\n\ndef test_summary_xfail_reason(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.xfail\n        def test_xfail():\n            assert False\n\n        @pytest.mark.xfail(reason=\"foo\")\n        def test_xfail_reason():\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-rx\")\n    expect1 = \"XFAIL test_summary_xfail_reason.py::test_xfail\"\n    expect2 = \"XFAIL test_summary_xfail_reason.py::test_xfail_reason - foo\"\n    result.stdout.fnmatch_lines([expect1, expect2])\n    assert result.stdout.lines.count(expect1) == 1\n    assert result.stdout.lines.count(expect2) == 1\n\n\n@pytest.fixture()\ndef xfail_testfile(pytester: Pytester) -> Path:\n    return pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        def test_fail():\n            a, b = 1, 2\n            assert a == b\n\n        @pytest.mark.xfail\n        def test_xfail():\n            c, d = 3, 4\n            assert c == d\n        \"\"\"\n    )\n\n\ndef test_xfail_tb_default(xfail_testfile, pytester: Pytester) -> None:\n    result = pytester.runpytest(xfail_testfile)\n\n    # test_fail, show traceback\n    result.stdout.fnmatch_lines(\n        [\n            \"*= FAILURES =*\",\n            \"*_ test_fail _*\",\n            \"*def test_fail():*\",\n            \"*        a, b = 1, 2*\",\n            \"*>       assert a == b*\",\n            \"*E       assert 1 == 2*\",\n        ]\n    )\n\n    # test_xfail, don't show traceback\n    result.stdout.no_fnmatch_line(\"*= XFAILURES =*\")\n\n\ndef test_xfail_tb_true(xfail_testfile, pytester: Pytester) -> None:\n    result = pytester.runpytest(xfail_testfile, \"--xfail-tb\")\n\n    # both test_fail and test_xfail, show traceback\n    result.stdout.fnmatch_lines(\n        [\n            \"*= FAILURES =*\",\n            \"*_ test_fail _*\",\n            \"*def test_fail():*\",\n            \"*        a, b = 1, 2*\",\n            \"*>       assert a == b*\",\n            \"*E       assert 1 == 2*\",\n            \"*= XFAILURES =*\",\n            \"*_ test_xfail _*\",\n            \"*def test_xfail():*\",\n            \"*        c, d = 3, 4*\",\n            \"*>       assert c == d*\",\n            \"*E       assert 3 == 4*\",\n            \"*short test summary info*\",\n        ]\n    )\n\n\ndef test_xfail_tb_line(xfail_testfile, pytester: Pytester) -> None:\n    result = pytester.runpytest(xfail_testfile, \"--xfail-tb\", \"--tb=line\")\n\n    # both test_fail and test_xfail, show line\n    result.stdout.fnmatch_lines(\n        [\n            \"*= FAILURES =*\",\n            \"*test_xfail_tb_line.py:5: assert 1 == 2\",\n            \"*= XFAILURES =*\",\n            \"*test_xfail_tb_line.py:10: assert 3 == 4\",\n            \"*short test summary info*\",\n        ]\n    )\n\n\ndef test_summary_xpass_reason(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.xfail\n        def test_pass():\n            ...\n\n        @pytest.mark.xfail(reason=\"foo\")\n        def test_reason():\n            ...\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-rX\")\n    expect1 = \"XPASS test_summary_xpass_reason.py::test_pass\"\n    expect2 = \"XPASS test_summary_xpass_reason.py::test_reason - foo\"\n    result.stdout.fnmatch_lines([expect1, expect2])\n    assert result.stdout.lines.count(expect1) == 1\n    assert result.stdout.lines.count(expect2) == 1\n\n\ndef test_xpass_output(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.xfail\n        def test_pass():\n            print('hi there')\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-rX\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*= XPASSES =*\",\n            \"*_ test_pass _*\",\n            \"*- Captured stdout call -*\",\n            \"*= short test summary info =*\",\n            \"XPASS test_xpass_output.py::test_pass*\",\n            \"*= 1 xpassed in * =*\",\n        ]\n    )\n", "testing/test_pytester.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nimport subprocess\nimport sys\nimport time\nfrom types import ModuleType\n\nfrom _pytest.config import ExitCode\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.monkeypatch import MonkeyPatch\nimport _pytest.pytester as pytester_mod\nfrom _pytest.pytester import HookRecorder\nfrom _pytest.pytester import LineMatcher\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import SysModulesSnapshot\nfrom _pytest.pytester import SysPathsSnapshot\nimport pytest\n\n\ndef test_make_hook_recorder(pytester: Pytester) -> None:\n    item = pytester.getitem(\"def test_func(): pass\")\n    recorder = pytester.make_hook_recorder(item.config.pluginmanager)\n    assert not recorder.getfailures()\n\n    # (The silly condition is to fool mypy that the code below this is reachable)\n    if 1 + 1 == 2:\n        pytest.xfail(\"internal reportrecorder tests need refactoring\")\n\n    class rep:\n        excinfo = None\n        passed = False\n        failed = True\n        skipped = False\n        when = \"call\"\n\n    recorder.hook.pytest_runtest_logreport(report=rep)  # type: ignore[attr-defined]\n    failures = recorder.getfailures()\n    assert failures == [rep]  # type: ignore[comparison-overlap]\n    failures = recorder.getfailures()\n    assert failures == [rep]  # type: ignore[comparison-overlap]\n\n    class rep2:\n        excinfo = None\n        passed = False\n        failed = False\n        skipped = True\n        when = \"call\"\n\n    rep2.passed = False\n    rep2.skipped = True\n    recorder.hook.pytest_runtest_logreport(report=rep2)  # type: ignore[attr-defined]\n\n    modcol = pytester.getmodulecol(\"\")\n    rep3 = modcol.config.hook.pytest_make_collect_report(collector=modcol)\n    rep3.passed = False\n    rep3.failed = True\n    rep3.skipped = False\n    recorder.hook.pytest_collectreport(report=rep3)  # type: ignore[attr-defined]\n\n    passed, skipped, failed = recorder.listoutcomes()\n    assert not passed and skipped and failed\n\n    numpassed, numskipped, numfailed = recorder.countoutcomes()\n    assert numpassed == 0\n    assert numskipped == 1\n    assert numfailed == 1\n    assert len(recorder.getfailedcollections()) == 1\n\n    recorder.unregister()  # type: ignore[attr-defined]\n    recorder.clear()\n    recorder.hook.pytest_runtest_logreport(report=rep3)  # type: ignore[attr-defined]\n    pytest.raises(ValueError, recorder.getfailures)\n\n\ndef test_parseconfig(pytester: Pytester) -> None:\n    config1 = pytester.parseconfig()\n    config2 = pytester.parseconfig()\n    assert config2 is not config1\n\n\ndef test_pytester_runs_with_plugin(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        pytest_plugins = \"pytester\"\n        def test_hello(pytester):\n            assert 1\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=1)\n\n\ndef test_pytester_with_doctest(pytester: Pytester) -> None:\n    \"\"\"Check that pytester can be used within doctests.\n\n    It used to use `request.function`, which is `None` with doctests.\"\"\"\n    pytester.makepyfile(\n        **{\n            \"sub/t-doctest.py\": \"\"\"\n        '''\n        >>> import os\n        >>> pytester = getfixture(\"pytester\")\n        >>> str(pytester.makepyfile(\"content\")).replace(os.sep, '/')\n        '.../basetemp/sub.t-doctest0/sub.py'\n        '''\n    \"\"\",\n            \"sub/__init__.py\": \"\",\n        }\n    )\n    result = pytester.runpytest(\n        \"-p\", \"pytester\", \"--doctest-modules\", \"sub/t-doctest.py\"\n    )\n    assert result.ret == 0\n\n\ndef test_runresult_assertion_on_xfail(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        pytest_plugins = \"pytester\"\n\n        @pytest.mark.xfail\n        def test_potato():\n            assert False\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(xfailed=1)\n    assert result.ret == 0\n\n\ndef test_runresult_assertion_on_xpassed(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        pytest_plugins = \"pytester\"\n\n        @pytest.mark.xfail\n        def test_potato():\n            assert True\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(xpassed=1)\n    assert result.ret == 0\n\n\ndef test_xpassed_with_strict_is_considered_a_failure(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        pytest_plugins = \"pytester\"\n\n        @pytest.mark.xfail(strict=True)\n        def test_potato():\n            assert True\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(failed=1)\n    assert result.ret != 0\n\n\ndef make_holder():\n    class apiclass:\n        def pytest_xyz(self, arg):\n            \"\"\"X\"\"\"\n\n        def pytest_xyz_noarg(self):\n            \"\"\"X\"\"\"\n\n    apimod = type(os)(\"api\")\n\n    def pytest_xyz(arg):\n        \"\"\"X\"\"\"\n\n    def pytest_xyz_noarg():\n        \"\"\"X\"\"\"\n\n    apimod.pytest_xyz = pytest_xyz  # type: ignore\n    apimod.pytest_xyz_noarg = pytest_xyz_noarg  # type: ignore\n    return apiclass, apimod\n\n\n@pytest.mark.parametrize(\"holder\", make_holder())\ndef test_hookrecorder_basic(holder) -> None:\n    pm = PytestPluginManager()\n    pm.add_hookspecs(holder)\n    rec = HookRecorder(pm, _ispytest=True)\n    pm.hook.pytest_xyz(arg=123)\n    call = rec.popcall(\"pytest_xyz\")\n    assert call.arg == 123\n    assert call._name == \"pytest_xyz\"\n    pytest.raises(pytest.fail.Exception, rec.popcall, \"abc\")\n    pm.hook.pytest_xyz_noarg()\n    call = rec.popcall(\"pytest_xyz_noarg\")\n    assert call._name == \"pytest_xyz_noarg\"\n\n\ndef test_makepyfile_unicode(pytester: Pytester) -> None:\n    pytester.makepyfile(chr(0xFFFD))\n\n\ndef test_makepyfile_utf8(pytester: Pytester) -> None:\n    \"\"\"Ensure makepyfile accepts utf-8 bytes as input (#2738)\"\"\"\n    utf8_contents = \"\"\"\n        def setup_function(function):\n            mixed_encoding = 'S\u00e3o Paulo'\n    \"\"\".encode()\n    p = pytester.makepyfile(utf8_contents)\n    assert \"mixed_encoding = 'S\u00e3o Paulo'\".encode() in p.read_bytes()\n\n\nclass TestInlineRunModulesCleanup:\n    def test_inline_run_test_module_not_cleaned_up(self, pytester: Pytester) -> None:\n        test_mod = pytester.makepyfile(\"def test_foo(): assert True\")\n        result = pytester.inline_run(str(test_mod))\n        assert result.ret == ExitCode.OK\n        # rewrite module, now test should fail if module was re-imported\n        test_mod.write_text(\"def test_foo(): assert False\", encoding=\"utf-8\")\n        result2 = pytester.inline_run(str(test_mod))\n        assert result2.ret == ExitCode.TESTS_FAILED\n\n    def spy_factory(self):\n        class SysModulesSnapshotSpy:\n            instances: list[SysModulesSnapshotSpy] = []\n\n            def __init__(self, preserve=None) -> None:\n                SysModulesSnapshotSpy.instances.append(self)\n                self._spy_restore_count = 0\n                self._spy_preserve = preserve\n                self.__snapshot = SysModulesSnapshot(preserve=preserve)\n\n            def restore(self):\n                self._spy_restore_count += 1\n                return self.__snapshot.restore()\n\n        return SysModulesSnapshotSpy\n\n    def test_inline_run_taking_and_restoring_a_sys_modules_snapshot(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        spy_factory = self.spy_factory()\n        monkeypatch.setattr(pytester_mod, \"SysModulesSnapshot\", spy_factory)\n        pytester.syspathinsert()\n        original = dict(sys.modules)\n        pytester.makepyfile(import1=\"# you son of a silly person\")\n        pytester.makepyfile(import2=\"# my hovercraft is full of eels\")\n        test_mod = pytester.makepyfile(\n            \"\"\"\n            import import1\n            def test_foo(): import import2\"\"\"\n        )\n        pytester.inline_run(str(test_mod))\n        assert len(spy_factory.instances) == 1\n        spy = spy_factory.instances[0]\n        assert spy._spy_restore_count == 1\n        assert sys.modules == original\n        assert all(sys.modules[x] is original[x] for x in sys.modules)\n\n    def test_inline_run_sys_modules_snapshot_restore_preserving_modules(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        spy_factory = self.spy_factory()\n        monkeypatch.setattr(pytester_mod, \"SysModulesSnapshot\", spy_factory)\n        test_mod = pytester.makepyfile(\"def test_foo(): pass\")\n        pytester.inline_run(str(test_mod))\n        spy = spy_factory.instances[0]\n        assert not spy._spy_preserve(\"black_knight\")\n        assert spy._spy_preserve(\"zope\")\n        assert spy._spy_preserve(\"zope.interface\")\n        assert spy._spy_preserve(\"zopelicious\")\n\n    def test_external_test_module_imports_not_cleaned_up(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.syspathinsert()\n        pytester.makepyfile(imported=\"data = 'you son of a silly person'\")\n        import imported\n\n        test_mod = pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                import imported\n                imported.data = 42\"\"\"\n        )\n        pytester.inline_run(str(test_mod))\n        assert imported.data == 42\n\n\ndef test_assert_outcomes_after_pytest_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\"def test_foo(): assert True\")\n\n    result = pytester.runpytest(\"--unexpected-argument\")\n    with pytest.raises(ValueError, match=\"Pytest terminal summary report not found\"):\n        result.assert_outcomes(passed=0)\n\n\nclass TestSysModulesSnapshot:\n    key = \"my-test-module\"\n\n    def test_remove_added(self) -> None:\n        original = dict(sys.modules)\n        assert self.key not in sys.modules\n        snapshot = SysModulesSnapshot()\n        sys.modules[self.key] = ModuleType(\"something\")\n        assert self.key in sys.modules\n        snapshot.restore()\n        assert sys.modules == original\n\n    def test_add_removed(self, monkeypatch: MonkeyPatch) -> None:\n        assert self.key not in sys.modules\n        monkeypatch.setitem(sys.modules, self.key, ModuleType(\"something\"))\n        assert self.key in sys.modules\n        original = dict(sys.modules)\n        snapshot = SysModulesSnapshot()\n        del sys.modules[self.key]\n        assert self.key not in sys.modules\n        snapshot.restore()\n        assert sys.modules == original\n\n    def test_restore_reloaded(self, monkeypatch: MonkeyPatch) -> None:\n        assert self.key not in sys.modules\n        monkeypatch.setitem(sys.modules, self.key, ModuleType(\"something\"))\n        assert self.key in sys.modules\n        original = dict(sys.modules)\n        snapshot = SysModulesSnapshot()\n        sys.modules[self.key] = ModuleType(\"something else\")\n        snapshot.restore()\n        assert sys.modules == original\n\n    def test_preserve_modules(self, monkeypatch: MonkeyPatch) -> None:\n        key = [self.key + str(i) for i in range(3)]\n        assert not any(k in sys.modules for k in key)\n        for i, k in enumerate(key):\n            mod = ModuleType(\"something\" + str(i))\n            monkeypatch.setitem(sys.modules, k, mod)\n        original = dict(sys.modules)\n\n        def preserve(name):\n            return name in (key[0], key[1], \"some-other-key\")\n\n        snapshot = SysModulesSnapshot(preserve=preserve)\n        sys.modules[key[0]] = original[key[0]] = ModuleType(\"something else0\")\n        sys.modules[key[1]] = original[key[1]] = ModuleType(\"something else1\")\n        sys.modules[key[2]] = ModuleType(\"something else2\")\n        snapshot.restore()\n        assert sys.modules == original\n\n    def test_preserve_container(self, monkeypatch: MonkeyPatch) -> None:\n        original = dict(sys.modules)\n        assert self.key not in original\n        replacement = dict(sys.modules)\n        replacement[self.key] = ModuleType(\"life of brian\")\n        snapshot = SysModulesSnapshot()\n        monkeypatch.setattr(sys, \"modules\", replacement)\n        snapshot.restore()\n        assert sys.modules is replacement\n        assert sys.modules == original\n\n\n@pytest.mark.parametrize(\"path_type\", (\"path\", \"meta_path\"))\nclass TestSysPathsSnapshot:\n    other_path = {\"path\": \"meta_path\", \"meta_path\": \"path\"}\n\n    @staticmethod\n    def path(n: int) -> str:\n        return \"my-dirty-little-secret-\" + str(n)\n\n    def test_restore(self, monkeypatch: MonkeyPatch, path_type) -> None:\n        other_path_type = self.other_path[path_type]\n        for i in range(10):\n            assert self.path(i) not in getattr(sys, path_type)\n        sys_path = [self.path(i) for i in range(6)]\n        monkeypatch.setattr(sys, path_type, sys_path)\n        original = list(sys_path)\n        original_other = list(getattr(sys, other_path_type))\n        snapshot = SysPathsSnapshot()\n        transformation = {\"source\": (0, 1, 2, 3, 4, 5), \"target\": (6, 2, 9, 7, 5, 8)}\n        assert sys_path == [self.path(x) for x in transformation[\"source\"]]\n        sys_path[1] = self.path(6)\n        sys_path[3] = self.path(7)\n        sys_path.append(self.path(8))\n        del sys_path[4]\n        sys_path[3:3] = [self.path(9)]\n        del sys_path[0]\n        assert sys_path == [self.path(x) for x in transformation[\"target\"]]\n        snapshot.restore()\n        assert getattr(sys, path_type) is sys_path\n        assert getattr(sys, path_type) == original\n        assert getattr(sys, other_path_type) == original_other\n\n    def test_preserve_container(self, monkeypatch: MonkeyPatch, path_type) -> None:\n        other_path_type = self.other_path[path_type]\n        original_data = list(getattr(sys, path_type))\n        original_other = getattr(sys, other_path_type)\n        original_other_data = list(original_other)\n        new: list[object] = []\n        snapshot = SysPathsSnapshot()\n        monkeypatch.setattr(sys, path_type, new)\n        snapshot.restore()\n        assert getattr(sys, path_type) is new\n        assert getattr(sys, path_type) == original_data\n        assert getattr(sys, other_path_type) is original_other\n        assert getattr(sys, other_path_type) == original_other_data\n\n\ndef test_pytester_subprocess(pytester: Pytester) -> None:\n    testfile = pytester.makepyfile(\"def test_one(): pass\")\n    assert pytester.runpytest_subprocess(testfile).ret == 0\n\n\ndef test_pytester_subprocess_via_runpytest_arg(pytester: Pytester) -> None:\n    testfile = pytester.makepyfile(\n        \"\"\"\n        def test_pytester_subprocess(pytester):\n            import os\n            testfile = pytester.makepyfile(\n                \\\"\"\"\n                import os\n                def test_one():\n                    assert {} != os.getpid()\n                \\\"\"\".format(os.getpid())\n            )\n            assert pytester.runpytest(testfile).ret == 0\n        \"\"\"\n    )\n    result = pytester.runpytest_inprocess(\n        \"-p\", \"pytester\", \"--runpytest\", \"subprocess\", testfile\n    )\n    assert result.ret == 0\n\n\ndef test_unicode_args(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"-k\", \"\u05d0\u05d1\u05d2\")\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_pytester_run_no_timeout(pytester: Pytester) -> None:\n    testfile = pytester.makepyfile(\"def test_no_timeout(): pass\")\n    assert pytester.runpytest_subprocess(testfile).ret == ExitCode.OK\n\n\ndef test_pytester_run_with_timeout(pytester: Pytester) -> None:\n    testfile = pytester.makepyfile(\"def test_no_timeout(): pass\")\n\n    timeout = 120\n\n    start = time.time()\n    result = pytester.runpytest_subprocess(testfile, timeout=timeout)\n    end = time.time()\n    duration = end - start\n\n    assert result.ret == ExitCode.OK\n    assert duration < timeout\n\n\ndef test_pytester_run_timeout_expires(pytester: Pytester) -> None:\n    testfile = pytester.makepyfile(\n        \"\"\"\n        import time\n\n        def test_timeout():\n            time.sleep(10)\"\"\"\n    )\n    with pytest.raises(pytester.TimeoutExpired):\n        pytester.runpytest_subprocess(testfile, timeout=1)\n\n\ndef test_linematcher_with_nonlist() -> None:\n    \"\"\"Test LineMatcher with regard to passing in a set (accidentally).\"\"\"\n    from _pytest._code.source import Source\n\n    lm = LineMatcher([])\n    with pytest.raises(TypeError, match=\"invalid type for lines2: set\"):\n        lm.fnmatch_lines(set())  # type: ignore[arg-type]\n    with pytest.raises(TypeError, match=\"invalid type for lines2: dict\"):\n        lm.fnmatch_lines({})  # type: ignore[arg-type]\n    with pytest.raises(TypeError, match=\"invalid type for lines2: set\"):\n        lm.re_match_lines(set())  # type: ignore[arg-type]\n    with pytest.raises(TypeError, match=\"invalid type for lines2: dict\"):\n        lm.re_match_lines({})  # type: ignore[arg-type]\n    with pytest.raises(TypeError, match=\"invalid type for lines2: Source\"):\n        lm.fnmatch_lines(Source())  # type: ignore[arg-type]\n    lm.fnmatch_lines([])\n    lm.fnmatch_lines(())\n    lm.fnmatch_lines(\"\")\n    assert lm._getlines({}) == {}  # type: ignore[arg-type,comparison-overlap]\n    assert lm._getlines(set()) == set()  # type: ignore[arg-type,comparison-overlap]\n    assert lm._getlines(Source()) == []\n    assert lm._getlines(Source(\"pass\\npass\")) == [\"pass\", \"pass\"]\n\n\ndef test_linematcher_match_failure() -> None:\n    lm = LineMatcher([\"foo\", \"foo\", \"bar\"])\n    with pytest.raises(pytest.fail.Exception) as e:\n        lm.fnmatch_lines([\"foo\", \"f*\", \"baz\"])\n    assert e.value.msg is not None\n    assert e.value.msg.splitlines() == [\n        \"exact match: 'foo'\",\n        \"fnmatch: 'f*'\",\n        \"   with: 'foo'\",\n        \"nomatch: 'baz'\",\n        \"    and: 'bar'\",\n        \"remains unmatched: 'baz'\",\n    ]\n\n    lm = LineMatcher([\"foo\", \"foo\", \"bar\"])\n    with pytest.raises(pytest.fail.Exception) as e:\n        lm.re_match_lines([\"foo\", \"^f.*\", \"baz\"])\n    assert e.value.msg is not None\n    assert e.value.msg.splitlines() == [\n        \"exact match: 'foo'\",\n        \"re.match: '^f.*'\",\n        \"    with: 'foo'\",\n        \" nomatch: 'baz'\",\n        \"     and: 'bar'\",\n        \"remains unmatched: 'baz'\",\n    ]\n\n\ndef test_linematcher_consecutive() -> None:\n    lm = LineMatcher([\"1\", \"\", \"2\"])\n    with pytest.raises(pytest.fail.Exception) as excinfo:\n        lm.fnmatch_lines([\"1\", \"2\"], consecutive=True)\n    assert str(excinfo.value).splitlines() == [\n        \"exact match: '1'\",\n        \"no consecutive match: '2'\",\n        \"   with: ''\",\n    ]\n\n    lm.re_match_lines([\"1\", r\"\\d?\", \"2\"], consecutive=True)\n    with pytest.raises(pytest.fail.Exception) as excinfo:\n        lm.re_match_lines([\"1\", r\"\\d\", \"2\"], consecutive=True)\n    assert str(excinfo.value).splitlines() == [\n        \"exact match: '1'\",\n        r\"no consecutive match: '\\\\d'\",\n        \"    with: ''\",\n    ]\n\n\n@pytest.mark.parametrize(\"function\", [\"no_fnmatch_line\", \"no_re_match_line\"])\ndef test_linematcher_no_matching(function: str) -> None:\n    if function == \"no_fnmatch_line\":\n        good_pattern = \"*.py OK*\"\n        bad_pattern = \"*X.py OK*\"\n    else:\n        assert function == \"no_re_match_line\"\n        good_pattern = r\".*py OK\"\n        bad_pattern = r\".*Xpy OK\"\n\n    lm = LineMatcher(\n        [\n            \"cachedir: .pytest_cache\",\n            \"collecting ... collected 1 item\",\n            \"\",\n            \"show_fixtures_per_test.py OK\",\n            \"=== elapsed 1s ===\",\n        ]\n    )\n\n    # check the function twice to ensure we don't accumulate the internal buffer\n    for i in range(2):\n        with pytest.raises(pytest.fail.Exception) as e:\n            func = getattr(lm, function)\n            func(good_pattern)\n        obtained = str(e.value).splitlines()\n        if function == \"no_fnmatch_line\":\n            assert obtained == [\n                f\"nomatch: '{good_pattern}'\",\n                \"    and: 'cachedir: .pytest_cache'\",\n                \"    and: 'collecting ... collected 1 item'\",\n                \"    and: ''\",\n                f\"fnmatch: '{good_pattern}'\",\n                \"   with: 'show_fixtures_per_test.py OK'\",\n            ]\n        else:\n            assert obtained == [\n                f\" nomatch: '{good_pattern}'\",\n                \"     and: 'cachedir: .pytest_cache'\",\n                \"     and: 'collecting ... collected 1 item'\",\n                \"     and: ''\",\n                f\"re.match: '{good_pattern}'\",\n                \"    with: 'show_fixtures_per_test.py OK'\",\n            ]\n\n    func = getattr(lm, function)\n    func(bad_pattern)  # bad pattern does not match any line: passes\n\n\ndef test_linematcher_no_matching_after_match() -> None:\n    lm = LineMatcher([\"1\", \"2\", \"3\"])\n    lm.fnmatch_lines([\"1\", \"3\"])\n    with pytest.raises(pytest.fail.Exception) as e:\n        lm.no_fnmatch_line(\"*\")\n    assert str(e.value).splitlines() == [\"fnmatch: '*'\", \"   with: '1'\"]\n\n\ndef test_linematcher_string_api() -> None:\n    lm = LineMatcher([\"foo\", \"bar\"])\n    assert str(lm) == \"foo\\nbar\"\n\n\ndef test_pytest_addopts_before_pytester(request, monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setenv(\"PYTEST_ADDOPTS\", \"--orig-unused\")\n    _: Pytester = request.getfixturevalue(\"pytester\")\n    assert \"PYTEST_ADDOPTS\" not in os.environ\n\n\ndef test_run_stdin(pytester: Pytester) -> None:\n    with pytest.raises(pytester.TimeoutExpired):\n        pytester.run(\n            sys.executable,\n            \"-c\",\n            \"import sys, time; time.sleep(1); print(sys.stdin.read())\",\n            stdin=subprocess.PIPE,\n            timeout=0.1,\n        )\n\n    with pytest.raises(pytester.TimeoutExpired):\n        result = pytester.run(\n            sys.executable,\n            \"-c\",\n            \"import sys, time; time.sleep(1); print(sys.stdin.read())\",\n            stdin=b\"input\\n2ndline\",\n            timeout=0.1,\n        )\n\n    result = pytester.run(\n        sys.executable,\n        \"-c\",\n        \"import sys; print(sys.stdin.read())\",\n        stdin=b\"input\\n2ndline\",\n    )\n    assert result.stdout.lines == [\"input\", \"2ndline\"]\n    assert result.stderr.str() == \"\"\n    assert result.ret == 0\n\n\ndef test_popen_stdin_pipe(pytester: Pytester) -> None:\n    proc = pytester.popen(\n        [sys.executable, \"-c\", \"import sys; print(sys.stdin.read())\"],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n    )\n    stdin = b\"input\\n2ndline\"\n    stdout, stderr = proc.communicate(input=stdin)\n    assert stdout.decode(\"utf8\").splitlines() == [\"input\", \"2ndline\"]\n    assert stderr == b\"\"\n    assert proc.returncode == 0\n\n\ndef test_popen_stdin_bytes(pytester: Pytester) -> None:\n    proc = pytester.popen(\n        [sys.executable, \"-c\", \"import sys; print(sys.stdin.read())\"],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=b\"input\\n2ndline\",\n    )\n    stdout, stderr = proc.communicate()\n    assert stdout.decode(\"utf8\").splitlines() == [\"input\", \"2ndline\"]\n    assert stderr == b\"\"\n    assert proc.returncode == 0\n\n\ndef test_popen_default_stdin_stderr_and_stdin_None(pytester: Pytester) -> None:\n    # stdout, stderr default to pipes,\n    # stdin can be None to not close the pipe, avoiding\n    # \"ValueError: flush of closed file\" with `communicate()`.\n    #\n    # Wraps the test to make it not hang when run with \"-s\".\n    p1 = pytester.makepyfile(\n        '''\n        import sys\n\n        def test_inner(pytester):\n            p1 = pytester.makepyfile(\n                \"\"\"\n                import sys\n                print(sys.stdin.read())  # empty\n                print('stdout')\n                sys.stderr.write('stderr')\n                \"\"\"\n            )\n            proc = pytester.popen([sys.executable, str(p1)], stdin=None)\n            stdout, stderr = proc.communicate(b\"ignored\")\n            assert stdout.splitlines() == [b\"\", b\"stdout\"]\n            assert stderr.splitlines() == [b\"stderr\"]\n            assert proc.returncode == 0\n        '''\n    )\n    result = pytester.runpytest(\"-p\", \"pytester\", str(p1))\n    assert result.ret == 0\n\n\ndef test_spawn_uses_tmphome(pytester: Pytester) -> None:\n    tmphome = str(pytester.path)\n    assert os.environ.get(\"HOME\") == tmphome\n\n    pytester._monkeypatch.setenv(\"CUSTOMENV\", \"42\")\n\n    p1 = pytester.makepyfile(\n        f\"\"\"\n        import os\n\n        def test():\n            assert os.environ[\"HOME\"] == {tmphome!r}\n            assert os.environ[\"CUSTOMENV\"] == \"42\"\n        \"\"\"\n    )\n    child = pytester.spawn_pytest(str(p1))\n    out = child.read()\n    assert child.wait() == 0, out.decode(\"utf8\")\n\n\ndef test_run_result_repr() -> None:\n    outlines = [\"some\", \"normal\", \"output\"]\n    errlines = [\"some\", \"nasty\", \"errors\", \"happened\"]\n\n    # known exit code\n    r = pytester_mod.RunResult(1, outlines, errlines, duration=0.5)\n    assert repr(r) == (\n        f\"<RunResult ret={pytest.ExitCode.TESTS_FAILED!s} len(stdout.lines)=3\"\n        \" len(stderr.lines)=4 duration=0.50s>\"\n    )\n\n    # unknown exit code: just the number\n    r = pytester_mod.RunResult(99, outlines, errlines, duration=0.5)\n    assert (\n        repr(r) == \"<RunResult ret=99 len(stdout.lines)=3\"\n        \" len(stderr.lines)=4 duration=0.50s>\"\n    )\n\n\ndef test_pytester_outcomes_with_multiple_errors(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def bad_fixture():\n            raise Exception(\"bad\")\n\n        def test_error1(bad_fixture):\n            pass\n\n        def test_error2(bad_fixture):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(str(p1))\n    result.assert_outcomes(errors=2)\n\n    assert result.parseoutcomes() == {\"errors\": 2}\n\n\ndef test_parse_summary_line_always_plural() -> None:\n    \"\"\"Parsing summaries always returns plural nouns (#6505)\"\"\"\n    lines = [\n        \"some output 1\",\n        \"some output 2\",\n        \"======= 1 failed, 1 passed, 1 warning, 1 error in 0.13s ====\",\n        \"done.\",\n    ]\n    assert pytester_mod.RunResult.parse_summary_nouns(lines) == {\n        \"errors\": 1,\n        \"failed\": 1,\n        \"passed\": 1,\n        \"warnings\": 1,\n    }\n\n    lines = [\n        \"some output 1\",\n        \"some output 2\",\n        \"======= 1 failed, 1 passed, 2 warnings, 2 errors in 0.13s ====\",\n        \"done.\",\n    ]\n    assert pytester_mod.RunResult.parse_summary_nouns(lines) == {\n        \"errors\": 2,\n        \"failed\": 1,\n        \"passed\": 1,\n        \"warnings\": 2,\n    }\n\n\ndef test_makefile_joins_absolute_path(pytester: Pytester) -> None:\n    absfile = pytester.path / \"absfile\"\n    p1 = pytester.makepyfile(**{str(absfile): \"\"})\n    assert str(p1) == str(pytester.path / \"absfile.py\")\n\n\ndef test_pytester_makefile_dot_prefixes_extension_with_warning(\n    pytester: Pytester,\n) -> None:\n    with pytest.raises(\n        ValueError,\n        match=\"pytester.makefile expects a file extension, try .foo.bar instead of foo.bar\",\n    ):\n        pytester.makefile(\"foo.bar\", \"\")\n\n\n@pytest.mark.filterwarnings(\"default\")\ndef test_pytester_assert_outcomes_warnings(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n\n        def test_with_warning():\n            warnings.warn(UserWarning(\"some custom warning\"))\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=1, warnings=1)\n    # If warnings is not passed, it is not checked at all.\n    result.assert_outcomes(passed=1)\n\n\ndef test_pytester_outcomes_deselected(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_one():\n            pass\n\n        def test_two():\n            pass\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-k\", \"test_one\")\n    result.assert_outcomes(passed=1, deselected=1)\n    # If deselected is not passed, it is not checked at all.\n    result.assert_outcomes(passed=1)\n", "testing/test_stash.py": "from __future__ import annotations\n\nfrom _pytest.stash import Stash\nfrom _pytest.stash import StashKey\nimport pytest\n\n\ndef test_stash() -> None:\n    stash = Stash()\n\n    assert len(stash) == 0\n    assert not stash\n\n    key1 = StashKey[str]()\n    key2 = StashKey[int]()\n\n    # Basic functionality - single key.\n    assert key1 not in stash\n    stash[key1] = \"hello\"\n    assert key1 in stash\n    assert stash[key1] == \"hello\"\n    assert stash.get(key1, None) == \"hello\"\n    stash[key1] = \"world\"\n    assert stash[key1] == \"world\"\n    # Has correct type (no mypy error).\n    stash[key1] + \"string\"\n    assert len(stash) == 1\n    assert stash\n\n    # No interaction with another key.\n    assert key2 not in stash\n    assert stash.get(key2, None) is None\n    with pytest.raises(KeyError):\n        stash[key2]\n    with pytest.raises(KeyError):\n        del stash[key2]\n    stash[key2] = 1\n    assert stash[key2] == 1\n    # Has correct type (no mypy error).\n    stash[key2] + 20\n    del stash[key1]\n    with pytest.raises(KeyError):\n        del stash[key1]\n    with pytest.raises(KeyError):\n        stash[key1]\n\n    # setdefault\n    stash[key1] = \"existing\"\n    assert stash.setdefault(key1, \"default\") == \"existing\"\n    assert stash[key1] == \"existing\"\n    key_setdefault = StashKey[bytes]()\n    assert stash.setdefault(key_setdefault, b\"default\") == b\"default\"\n    assert stash[key_setdefault] == b\"default\"\n    assert len(stash) == 3\n    assert stash\n\n    # Can't accidentally add attributes to stash object itself.\n    with pytest.raises(AttributeError):\n        stash.foo = \"nope\"  # type: ignore[attr-defined]\n\n    # No interaction with another stash.\n    stash2 = Stash()\n    key3 = StashKey[int]()\n    assert key2 not in stash2\n    stash2[key2] = 100\n    stash2[key3] = 200\n    assert stash2[key2] + stash2[key3] == 300\n    assert stash[key2] == 1\n    assert key3 not in stash\n", "testing/typing_checks.py": "# mypy: allow-untyped-defs\n\"\"\"File for checking typing issues.\n\nThis file is not executed, it is only checked by mypy to ensure that\nnone of the code triggers any mypy errors.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport contextlib\nfrom typing import Optional\n\nfrom typing_extensions import assert_type\n\nimport pytest\nfrom pytest import MonkeyPatch\n\n\n# Issue #7488.\n@pytest.mark.xfail(raises=RuntimeError)\ndef check_mark_xfail_raises() -> None:\n    pass\n\n\n# Issue #7494.\n@pytest.fixture(params=[(0, 0), (1, 1)], ids=lambda x: str(x[0]))\ndef check_fixture_ids_callable() -> None:\n    pass\n\n\n# Issue #7494.\n@pytest.mark.parametrize(\"func\", [str, int], ids=lambda x: str(x.__name__))\ndef check_parametrize_ids_callable(func) -> None:\n    pass\n\n\n# Issue #10999.\ndef check_monkeypatch_typeddict(monkeypatch: MonkeyPatch) -> None:\n    from typing import TypedDict\n\n    class Foo(TypedDict):\n        x: int\n        y: float\n\n    a: Foo = {\"x\": 1, \"y\": 3.14}\n    monkeypatch.setitem(a, \"x\", 2)\n    monkeypatch.delitem(a, \"y\")\n\n\ndef check_raises_is_a_context_manager(val: bool) -> None:\n    with pytest.raises(RuntimeError) if val else contextlib.nullcontext() as excinfo:\n        pass\n    assert_type(excinfo, Optional[pytest.ExceptionInfo[RuntimeError]])\n", "testing/test_unittest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport sys\n\nfrom _pytest.config import ExitCode\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef test_simple_unittest(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            def testpassing(self):\n                self.assertEqual('foo', 'foo')\n            def test_failing(self):\n                self.assertEqual('foo', 'bar')\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    assert reprec.matchreport(\"testpassing\").passed\n    assert reprec.matchreport(\"test_failing\").failed\n\n\ndef test_runTest_method(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCaseWithRunTest(unittest.TestCase):\n            def runTest(self):\n                self.assertEqual('foo', 'foo')\n        class MyTestCaseWithoutRunTest(unittest.TestCase):\n            def runTest(self):\n                self.assertEqual('foo', 'foo')\n            def test_something(self):\n                pass\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-v\")\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *MyTestCaseWithRunTest::runTest*\n        *MyTestCaseWithoutRunTest::test_something*\n        *2 passed*\n    \"\"\"\n    )\n\n\ndef test_isclasscheck_issue53(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class _E(object):\n            def __getattr__(self, tag):\n                pass\n        E = _E()\n    \"\"\"\n    )\n    result = pytester.runpytest(testpath)\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_setup(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            def setUp(self):\n                self.foo = 1\n            def setup_method(self, method):\n                self.foo2 = 1\n            def test_both(self):\n                self.assertEqual(1, self.foo)\n                assert self.foo2 == 1\n            def teardown_method(self, method):\n                assert 0, \"42\"\n\n    \"\"\"\n    )\n    reprec = pytester.inline_run(\"-s\", testpath)\n    assert reprec.matchreport(\"test_both\", when=\"call\").passed\n    rep = reprec.matchreport(\"test_both\", when=\"teardown\")\n    assert rep.failed and \"42\" in str(rep.longrepr)\n\n\ndef test_setUpModule(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        values = []\n\n        def setUpModule():\n            values.append(1)\n\n        def tearDownModule():\n            del values[0]\n\n        def test_hello():\n            assert values == [1]\n\n        def test_world():\n            assert values == [1]\n        \"\"\"\n    )\n    result = pytester.runpytest(testpath)\n    result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n\ndef test_setUpModule_failing_no_teardown(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        values = []\n\n        def setUpModule():\n            0/0\n\n        def tearDownModule():\n            values.append(1)\n\n        def test_hello():\n            pass\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    reprec.assertoutcome(passed=0, failed=1)\n    call = reprec.getcalls(\"pytest_runtest_setup\")[0]\n    assert not call.item.module.values\n\n\ndef test_new_instances(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            def test_func1(self):\n                self.x = 2\n            def test_func2(self):\n                assert not hasattr(self, 'x')\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    reprec.assertoutcome(passed=2)\n\n\ndef test_function_item_obj_is_instance(pytester: Pytester) -> None:\n    \"\"\"item.obj should be a bound method on unittest.TestCase function items (#5390).\"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_runtest_makereport(item, call):\n            if call.when == 'call':\n                class_ = item.parent.obj\n                assert isinstance(item.obj.__self__, class_)\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n\n        class Test(unittest.TestCase):\n            def test_foo(self):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest_inprocess()\n    result.stdout.fnmatch_lines([\"* 1 passed in*\"])\n\n\ndef test_teardown(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            values = []\n            def test_one(self):\n                pass\n            def tearDown(self):\n                self.values.append(None)\n        class Second(unittest.TestCase):\n            def test_check(self):\n                self.assertEqual(MyTestCase.values, [None])\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    passed, skipped, failed = reprec.countoutcomes()\n    assert failed == 0, failed\n    assert passed == 2\n    assert passed + skipped + failed == 2\n\n\ndef test_teardown_issue1649(pytester: Pytester) -> None:\n    \"\"\"\n    Are TestCase objects cleaned up? Often unittest TestCase objects set\n    attributes that are large and expensive during test run or setUp.\n\n    The TestCase will not be cleaned up if the test fails, because it\n    would then exist in the stackframe.\n\n    Regression test for #1649 (see also #12367).\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        import gc\n\n        class TestCaseObjectsShouldBeCleanedUp(unittest.TestCase):\n            def test_expensive(self):\n                self.an_expensive_obj = object()\n\n            def test_is_it_still_alive(self):\n                gc.collect()\n                for obj in gc.get_objects():\n                    if type(obj).__name__ == \"TestCaseObjectsShouldBeCleanedUp\":\n                        assert not hasattr(obj, \"an_expensive_obj\")\n                        break\n                else:\n                    assert False, \"Could not find TestCaseObjectsShouldBeCleanedUp instance\"\n        \"\"\"\n    )\n\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.OK\n\n\ndef test_unittest_skip_issue148(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n\n        @unittest.skip(\"hello\")\n        class MyTestCase(unittest.TestCase):\n            @classmethod\n            def setUpClass(self):\n                xxx\n            def test_one(self):\n                pass\n            @classmethod\n            def tearDownClass(self):\n                xxx\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    reprec.assertoutcome(skipped=1)\n\n\ndef test_method_and_teardown_failing_reporting(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class TC(unittest.TestCase):\n            def tearDown(self):\n                assert 0, \"down1\"\n            def test_method(self):\n                assert False, \"down2\"\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-s\")\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        [\n            \"*tearDown*\",\n            \"*assert 0*\",\n            \"*test_method*\",\n            \"*assert False*\",\n            \"*1 failed*1 error*\",\n        ]\n    )\n\n\ndef test_setup_failure_is_shown(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        import pytest\n        class TC(unittest.TestCase):\n            def setUp(self):\n                assert 0, \"down1\"\n            def test_method(self):\n                print(\"never42\")\n                xyz\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-s\")\n    assert result.ret == 1\n    result.stdout.fnmatch_lines([\"*setUp*\", \"*assert 0*down1*\", \"*1 failed*\"])\n    result.stdout.no_fnmatch_line(\"*never42*\")\n\n\ndef test_setup_setUpClass(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        import pytest\n        class MyTestCase(unittest.TestCase):\n            x = 0\n            @classmethod\n            def setUpClass(cls):\n                cls.x += 1\n            def test_func1(self):\n                assert self.x == 1\n            def test_func2(self):\n                assert self.x == 1\n            @classmethod\n            def tearDownClass(cls):\n                cls.x -= 1\n        def test_torn_down():\n            assert MyTestCase.x == 0\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    reprec.assertoutcome(passed=3)\n\n\ndef test_fixtures_setup_setUpClass_issue8394(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            @classmethod\n            def setUpClass(cls):\n                pass\n            def test_func1(self):\n                pass\n            @classmethod\n            def tearDownClass(cls):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--fixtures\")\n    assert result.ret == 0\n    result.stdout.no_fnmatch_line(\"*no docstring available*\")\n\n    result = pytester.runpytest(\"--fixtures\", \"-v\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*no docstring available*\"])\n\n\ndef test_setup_class(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        import pytest\n        class MyTestCase(unittest.TestCase):\n            x = 0\n            def setup_class(cls):\n                cls.x += 1\n            def test_func1(self):\n                assert self.x == 1\n            def test_func2(self):\n                assert self.x == 1\n            def teardown_class(cls):\n                cls.x -= 1\n        def test_torn_down():\n            assert MyTestCase.x == 0\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    reprec.assertoutcome(passed=3)\n\n\n@pytest.mark.parametrize(\"type\", [\"Error\", \"Failure\"])\ndef test_testcase_adderrorandfailure_defers(pytester: Pytester, type: str) -> None:\n    pytester.makepyfile(\n        f\"\"\"\n        from unittest import TestCase\n        import pytest\n        class MyTestCase(TestCase):\n            def run(self, result):\n                excinfo = pytest.raises(ZeroDivisionError, lambda: 0/0)\n                try:\n                    result.add{type}(self, excinfo._excinfo)\n                except KeyboardInterrupt:\n                    raise\n                except:\n                    pytest.fail(\"add{type} should not raise\")\n            def test_hello(self):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.no_fnmatch_line(\"*should not raise*\")\n\n\n@pytest.mark.parametrize(\"type\", [\"Error\", \"Failure\"])\ndef test_testcase_custom_exception_info(pytester: Pytester, type: str) -> None:\n    pytester.makepyfile(\n        f\"\"\"\n        from typing import Generic, TypeVar\n        from unittest import TestCase\n        import pytest, _pytest._code\n\n        class MyTestCase(TestCase):\n            def run(self, result):\n                excinfo = pytest.raises(ZeroDivisionError, lambda: 0/0)\n                # We fake an incompatible exception info.\n                class FakeExceptionInfo(Generic[TypeVar(\"E\")]):\n                    def __init__(self, *args, **kwargs):\n                        mp.undo()\n                        raise TypeError()\n                    @classmethod\n                    def from_current(cls):\n                        return cls()\n                    @classmethod\n                    def from_exc_info(cls, *args, **kwargs):\n                        return cls()\n                mp = pytest.MonkeyPatch()\n                mp.setattr(_pytest._code, 'ExceptionInfo', FakeExceptionInfo)\n                try:\n                    excinfo = excinfo._excinfo\n                    result.add{type}(self, excinfo)\n                finally:\n                    mp.undo()\n\n            def test_hello(self):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"NOTE: Incompatible Exception Representation*\",\n            \"*ZeroDivisionError*\",\n            \"*1 failed*\",\n        ]\n    )\n\n\ndef test_testcase_totally_incompatible_exception_info(pytester: Pytester) -> None:\n    import _pytest.unittest\n\n    (item,) = pytester.getitems(\n        \"\"\"\n        from unittest import TestCase\n        class MyTestCase(TestCase):\n            def test_hello(self):\n                pass\n    \"\"\"\n    )\n    assert isinstance(item, _pytest.unittest.TestCaseFunction)\n    item.addError(None, 42)  # type: ignore[arg-type]\n    excinfo = item._excinfo\n    assert excinfo is not None\n    assert \"ERROR: Unknown Incompatible\" in str(excinfo.pop(0).getrepr())\n\n\ndef test_module_level_pytestmark(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        import pytest\n        pytestmark = pytest.mark.xfail\n        class MyTestCase(unittest.TestCase):\n            def test_func1(self):\n                assert 0\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath, \"-s\")\n    reprec.assertoutcome(skipped=1)\n\n\nclass TestTrialUnittest:\n    def setup_class(cls):\n        cls.ut = pytest.importorskip(\"twisted.trial.unittest\")\n        # on windows trial uses a socket for a reactor and apparently doesn't close it properly\n        # https://twistedmatrix.com/trac/ticket/9227\n        cls.ignore_unclosed_socket_warning = (\"-W\", \"always\")\n\n    def test_trial_testcase_runtest_not_collected(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            from twisted.trial.unittest import TestCase\n\n            class TC(TestCase):\n                def test_hello(self):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(*self.ignore_unclosed_socket_warning)\n        reprec.assertoutcome(passed=1)\n        pytester.makepyfile(\n            \"\"\"\n            from twisted.trial.unittest import TestCase\n\n            class TC(TestCase):\n                def runTest(self):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(*self.ignore_unclosed_socket_warning)\n        reprec.assertoutcome(passed=1)\n\n    def test_trial_exceptions_with_skips(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            from twisted.trial import unittest\n            import pytest\n            class TC(unittest.TestCase):\n                def test_hello(self):\n                    pytest.skip(\"skip_in_method\")\n                @pytest.mark.skipif(\"sys.version_info != 1\")\n                def test_hello2(self):\n                    pass\n                @pytest.mark.xfail(reason=\"iwanto\")\n                def test_hello3(self):\n                    assert 0\n                def test_hello4(self):\n                    pytest.xfail(\"i2wanto\")\n                def test_trial_skip(self):\n                    pass\n                test_trial_skip.skip = \"trialselfskip\"\n\n                def test_trial_todo(self):\n                    assert 0\n                test_trial_todo.todo = \"mytodo\"\n\n                def test_trial_todo_success(self):\n                    pass\n                test_trial_todo_success.todo = \"mytodo\"\n\n            class TC2(unittest.TestCase):\n                def setup_class(cls):\n                    pytest.skip(\"skip_in_setup_class\")\n                def test_method(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rxs\", *self.ignore_unclosed_socket_warning)\n        result.stdout.fnmatch_lines_random(\n            [\n                \"*XFAIL*test_trial_todo*\",\n                \"*trialselfskip*\",\n                \"*skip_in_setup_class*\",\n                \"*iwanto*\",\n                \"*i2wanto*\",\n                \"*sys.version_info*\",\n                \"*skip_in_method*\",\n                \"*1 failed*4 skipped*3 xfailed*\",\n            ]\n        )\n        assert result.ret == 1\n\n    def test_trial_error(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            from twisted.trial.unittest import TestCase\n            from twisted.internet.defer import Deferred\n            from twisted.internet import reactor\n\n            class TC(TestCase):\n                def test_one(self):\n                    crash\n\n                def test_two(self):\n                    def f(_):\n                        crash\n\n                    d = Deferred()\n                    d.addCallback(f)\n                    reactor.callLater(0.3, d.callback, None)\n                    return d\n\n                def test_three(self):\n                    def f():\n                        pass # will never get called\n                    reactor.callLater(0.3, f)\n                # will crash at teardown\n\n                def test_four(self):\n                    def f(_):\n                        reactor.callLater(0.3, f)\n                        crash\n\n                    d = Deferred()\n                    d.addCallback(f)\n                    reactor.callLater(0.3, d.callback, None)\n                    return d\n                # will crash both at test time and at teardown\n        \"\"\"\n        )\n        result = pytester.runpytest(\n            \"-vv\", \"-oconsole_output_style=classic\", \"-W\", \"ignore::DeprecationWarning\"\n        )\n        result.stdout.fnmatch_lines(\n            [\n                \"test_trial_error.py::TC::test_four FAILED\",\n                \"test_trial_error.py::TC::test_four ERROR\",\n                \"test_trial_error.py::TC::test_one FAILED\",\n                \"test_trial_error.py::TC::test_three FAILED\",\n                \"test_trial_error.py::TC::test_two FAILED\",\n                \"*ERRORS*\",\n                \"*_ ERROR at teardown of TC.test_four _*\",\n                \"*DelayedCalls*\",\n                \"*= FAILURES =*\",\n                \"*_ TC.test_four _*\",\n                \"*NameError*crash*\",\n                \"*_ TC.test_one _*\",\n                \"*NameError*crash*\",\n                \"*_ TC.test_three _*\",\n                \"*DelayedCalls*\",\n                \"*_ TC.test_two _*\",\n                \"*NameError*crash*\",\n                \"*= 4 failed, 1 error in *\",\n            ]\n        )\n\n    def test_trial_pdb(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            from twisted.trial import unittest\n            import pytest\n            class TC(unittest.TestCase):\n                def test_hello(self):\n                    assert 0, \"hellopdb\"\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p))\n        child.expect(\"hellopdb\")\n        child.sendeof()\n\n    def test_trial_testcase_skip_property(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            from twisted.trial import unittest\n            class MyTestCase(unittest.TestCase):\n                skip = 'dont run'\n                def test_func(self):\n                    pass\n            \"\"\"\n        )\n        reprec = pytester.inline_run(testpath, \"-s\")\n        reprec.assertoutcome(skipped=1)\n\n    def test_trial_testfunction_skip_property(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            from twisted.trial import unittest\n            class MyTestCase(unittest.TestCase):\n                def test_func(self):\n                    pass\n                test_func.skip = 'dont run'\n            \"\"\"\n        )\n        reprec = pytester.inline_run(testpath, \"-s\")\n        reprec.assertoutcome(skipped=1)\n\n    def test_trial_testcase_todo_property(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            from twisted.trial import unittest\n            class MyTestCase(unittest.TestCase):\n                todo = 'dont run'\n                def test_func(self):\n                    assert 0\n            \"\"\"\n        )\n        reprec = pytester.inline_run(testpath, \"-s\")\n        reprec.assertoutcome(skipped=1)\n\n    def test_trial_testfunction_todo_property(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            from twisted.trial import unittest\n            class MyTestCase(unittest.TestCase):\n                def test_func(self):\n                    assert 0\n                test_func.todo = 'dont run'\n            \"\"\"\n        )\n        reprec = pytester.inline_run(\n            testpath, \"-s\", *self.ignore_unclosed_socket_warning\n        )\n        reprec.assertoutcome(skipped=1)\n\n\ndef test_djangolike_testcase(pytester: Pytester) -> None:\n    # contributed from Morten Breekevold\n    pytester.makepyfile(\n        \"\"\"\n        from unittest import TestCase, main\n\n        class DjangoLikeTestCase(TestCase):\n\n            def setUp(self):\n                print(\"setUp()\")\n\n            def test_presetup_has_been_run(self):\n                print(\"test_thing()\")\n                self.assertTrue(hasattr(self, 'was_presetup'))\n\n            def tearDown(self):\n                print(\"tearDown()\")\n\n            def __call__(self, result=None):\n                try:\n                    self._pre_setup()\n                except (KeyboardInterrupt, SystemExit):\n                    raise\n                except Exception:\n                    import sys\n                    result.addError(self, sys.exc_info())\n                    return\n                super(DjangoLikeTestCase, self).__call__(result)\n                try:\n                    self._post_teardown()\n                except (KeyboardInterrupt, SystemExit):\n                    raise\n                except Exception:\n                    import sys\n                    result.addError(self, sys.exc_info())\n                    return\n\n            def _pre_setup(self):\n                print(\"_pre_setup()\")\n                self.was_presetup = True\n\n            def _post_teardown(self):\n                print(\"_post_teardown()\")\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-s\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines(\n        [\n            \"*_pre_setup()*\",\n            \"*setUp()*\",\n            \"*test_thing()*\",\n            \"*tearDown()*\",\n            \"*_post_teardown()*\",\n        ]\n    )\n\n\ndef test_unittest_not_shown_in_traceback(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class t(unittest.TestCase):\n            def test_hello(self):\n                x = 3\n                self.assertEqual(x, 4)\n    \"\"\"\n    )\n    res = pytester.runpytest()\n    res.stdout.no_fnmatch_line(\"*failUnlessEqual*\")\n\n\ndef test_unorderable_types(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class TestJoinEmpty(unittest.TestCase):\n            pass\n\n        def make_test():\n            class Test(unittest.TestCase):\n                pass\n            Test.__name__ = \"TestFoo\"\n            return Test\n        TestFoo = make_test()\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.no_fnmatch_line(\"*TypeError*\")\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_unittest_typerror_traceback(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class TestJoinEmpty(unittest.TestCase):\n            def test_hello(self, arg1):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert \"TypeError\" in result.stdout.str()\n    assert result.ret == 1\n\n\n@pytest.mark.parametrize(\"runner\", [\"pytest\", \"unittest\"])\ndef test_unittest_expected_failure_for_failing_test_is_xfail(\n    pytester: Pytester, runner\n) -> None:\n    script = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            @unittest.expectedFailure\n            def test_failing_test_is_xfail(self):\n                assert False\n        if __name__ == '__main__':\n            unittest.main()\n    \"\"\"\n    )\n    if runner == \"pytest\":\n        result = pytester.runpytest(\"-rxX\")\n        result.stdout.fnmatch_lines(\n            [\"*XFAIL*MyTestCase*test_failing_test_is_xfail*\", \"*1 xfailed*\"]\n        )\n    else:\n        result = pytester.runpython(script)\n        result.stderr.fnmatch_lines([\"*1 test in*\", \"*OK*(expected failures=1)*\"])\n    assert result.ret == 0\n\n\n@pytest.mark.parametrize(\"runner\", [\"pytest\", \"unittest\"])\ndef test_unittest_expected_failure_for_passing_test_is_fail(\n    pytester: Pytester,\n    runner: str,\n) -> None:\n    script = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            @unittest.expectedFailure\n            def test_passing_test_is_fail(self):\n                assert True\n        if __name__ == '__main__':\n            unittest.main()\n    \"\"\"\n    )\n\n    if runner == \"pytest\":\n        result = pytester.runpytest(\"-rxX\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*MyTestCase*test_passing_test_is_fail*\",\n                \"Unexpected success\",\n                \"*1 failed*\",\n            ]\n        )\n    else:\n        result = pytester.runpython(script)\n        result.stderr.fnmatch_lines([\"*1 test in*\", \"*(unexpected successes=1)*\"])\n\n    assert result.ret == 1\n\n\n@pytest.mark.parametrize(\"stmt\", [\"return\", \"yield\"])\ndef test_unittest_setup_interaction(pytester: Pytester, stmt: str) -> None:\n    pytester.makepyfile(\n        f\"\"\"\n        import unittest\n        import pytest\n        class MyTestCase(unittest.TestCase):\n            @pytest.fixture(scope=\"class\", autouse=True)\n            def perclass(self, request):\n                request.cls.hello = \"world\"\n                {stmt}\n            @pytest.fixture(scope=\"function\", autouse=True)\n            def perfunction(self, request):\n                request.instance.funcname = request.function.__name__\n                {stmt}\n\n            def test_method1(self):\n                assert self.funcname == \"test_method1\"\n                assert self.hello == \"world\"\n\n            def test_method2(self):\n                assert self.funcname == \"test_method2\"\n\n            def test_classattr(self):\n                assert self.__class__.hello == \"world\"\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*3 passed*\"])\n\n\ndef test_non_unittest_no_setupclass_support(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        class TestFoo(object):\n            x = 0\n\n            @classmethod\n            def setUpClass(cls):\n                cls.x = 1\n\n            def test_method1(self):\n                assert self.x == 0\n\n            @classmethod\n            def tearDownClass(cls):\n                cls.x = 1\n\n        def test_not_torn_down():\n            assert TestFoo.x == 0\n\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    reprec.assertoutcome(passed=2)\n\n\ndef test_no_teardown_if_setupclass_failed(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            x = 0\n\n            @classmethod\n            def setUpClass(cls):\n                cls.x = 1\n                assert False\n\n            def test_func1(self):\n                cls.x = 10\n\n            @classmethod\n            def tearDownClass(cls):\n                cls.x = 100\n\n        def test_notTornDown():\n            assert MyTestCase.x == 1\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    reprec.assertoutcome(passed=1, failed=1)\n\n\ndef test_cleanup_functions(pytester: Pytester) -> None:\n    \"\"\"Ensure functions added with addCleanup are always called after each test ends (#6947)\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n\n        cleanups = []\n\n        class Test(unittest.TestCase):\n\n            def test_func_1(self):\n                self.addCleanup(cleanups.append, \"test_func_1\")\n\n            def test_func_2(self):\n                self.addCleanup(cleanups.append, \"test_func_2\")\n                assert 0\n\n            def test_func_3_check_cleanups(self):\n                assert cleanups == [\"test_func_1\", \"test_func_2\"]\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-v\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*::test_func_1 PASSED *\",\n            \"*::test_func_2 FAILED *\",\n            \"*::test_func_3_check_cleanups PASSED *\",\n        ]\n    )\n\n\ndef test_issue333_result_clearing(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        @pytest.hookimpl(wrapper=True)\n        def pytest_runtest_call(item):\n            yield\n            assert 0\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class TestIt(unittest.TestCase):\n            def test_func(self):\n                0/0\n    \"\"\"\n    )\n\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(failed=1)\n\n\ndef test_unittest_raise_skip_issue748(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_foo=\"\"\"\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            def test_one(self):\n                raise unittest.SkipTest('skipping due to reasons')\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-v\", \"-rs\")\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *SKIP*[1]*test_foo.py*skipping due to reasons*\n        *1 skipped*\n    \"\"\"\n    )\n\n\ndef test_unittest_skip_issue1169(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_foo=\"\"\"\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            @unittest.skip(\"skipping due to reasons\")\n            def test_skip(self):\n                 self.fail()\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-v\", \"-rs\")\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *SKIP*[1]*skipping due to reasons*\n        *1 skipped*\n    \"\"\"\n    )\n\n\ndef test_class_method_containing_test_issue1558(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_foo=\"\"\"\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            def test_should_run(self):\n                pass\n            def test_should_not_run(self):\n                pass\n            test_should_not_run.__test__ = False\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\n@pytest.mark.parametrize(\"base\", [\"builtins.object\", \"unittest.TestCase\"])\ndef test_usefixtures_marker_on_unittest(base, pytester: Pytester) -> None:\n    \"\"\"#3498\"\"\"\n    module = base.rsplit(\".\", 1)[0]\n    pytest.importorskip(module)\n    pytester.makepyfile(\n        conftest=\"\"\"\n        import pytest\n\n        @pytest.fixture(scope='function')\n        def fixture1(request, monkeypatch):\n            monkeypatch.setattr(request.instance, 'fixture1', True )\n\n\n        @pytest.fixture(scope='function')\n        def fixture2(request, monkeypatch):\n            monkeypatch.setattr(request.instance, 'fixture2', True )\n\n        def node_and_marks(item):\n            print(item.nodeid)\n            for mark in item.iter_markers():\n                print(\"  \", mark)\n\n        @pytest.fixture(autouse=True)\n        def my_marks(request):\n            node_and_marks(request.node)\n\n        def pytest_collection_modifyitems(items):\n            for item in items:\n               node_and_marks(item)\n\n        \"\"\"\n    )\n\n    pytester.makepyfile(\n        f\"\"\"\n        import pytest\n        import {module}\n\n        class Tests({base}):\n            fixture1 = False\n            fixture2 = False\n\n            @pytest.mark.usefixtures(\"fixture1\")\n            def test_one(self):\n                assert self.fixture1\n                assert not self.fixture2\n\n            @pytest.mark.usefixtures(\"fixture1\", \"fixture2\")\n            def test_two(self):\n                assert self.fixture1\n                assert self.fixture2\n\n\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"-s\")\n    result.assert_outcomes(passed=2)\n\n\ndef test_testcase_handles_init_exceptions(pytester: Pytester) -> None:\n    \"\"\"\n    Regression test to make sure exceptions in the __init__ method are bubbled up correctly.\n    See https://github.com/pytest-dev/pytest/issues/3788\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        from unittest import TestCase\n        import pytest\n        class MyTestCase(TestCase):\n            def __init__(self, *args, **kwargs):\n                raise Exception(\"should raise this exception\")\n            def test_hello(self):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert \"should raise this exception\" in result.stdout.str()\n    result.stdout.no_fnmatch_line(\"*ERROR at teardown of MyTestCase.test_hello*\")\n\n\ndef test_error_message_with_parametrized_fixtures(pytester: Pytester) -> None:\n    pytester.copy_example(\"unittest/test_parametrized_fixture_error_message.py\")\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_two does not support fixtures*\",\n            \"*TestSomethingElse::test_two\",\n            \"*Function type: TestCaseFunction\",\n        ]\n    )\n\n\n@pytest.mark.parametrize(\n    \"test_name, expected_outcome\",\n    [\n        (\"test_setup_skip.py\", \"1 skipped\"),\n        (\"test_setup_skip_class.py\", \"1 skipped\"),\n        (\"test_setup_skip_module.py\", \"1 error\"),\n    ],\n)\ndef test_setup_inheritance_skipping(\n    pytester: Pytester, test_name, expected_outcome\n) -> None:\n    \"\"\"Issue #4700\"\"\"\n    pytester.copy_example(f\"unittest/{test_name}\")\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([f\"* {expected_outcome} in *\"])\n\n\ndef test_BdbQuit(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_foo=\"\"\"\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            def test_bdbquit(self):\n                import bdb\n                raise bdb.BdbQuit()\n\n            def test_should_not_run(self):\n                pass\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(failed=1, passed=1)\n\n\ndef test_exit_outcome(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_foo=\"\"\"\n        import pytest\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            def test_exit_outcome(self):\n                pytest.exit(\"pytest_exit called\")\n\n            def test_should_not_run(self):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*Exit: pytest_exit called*\", \"*= no tests ran in *\"])\n\n\ndef test_trace(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    calls = []\n\n    def check_call(*args, **kwargs):\n        calls.append((args, kwargs))\n        assert args == (\"runcall\",)\n\n        class _pdb:\n            def runcall(*args, **kwargs):\n                calls.append((args, kwargs))\n\n        return _pdb\n\n    monkeypatch.setattr(\"_pytest.debugging.pytestPDB._init_pdb\", check_call)\n\n    p1 = pytester.makepyfile(\n        \"\"\"\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            def test(self):\n                self.assertEqual('foo', 'foo')\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--trace\", str(p1))\n    assert len(calls) == 2\n    assert result.ret == 0\n\n\ndef test_pdb_teardown_called(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    \"\"\"Ensure tearDown() is always called when --pdb is given in the command-line.\n\n    We delay the normal tearDown() calls when --pdb is given, so this ensures we are calling\n    tearDown() eventually to avoid memory leaks when using --pdb.\n    \"\"\"\n    teardowns: list[str] = []\n    monkeypatch.setattr(\n        pytest, \"test_pdb_teardown_called_teardowns\", teardowns, raising=False\n    )\n\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n        import pytest\n\n        class MyTestCase(unittest.TestCase):\n\n            def tearDown(self):\n                pytest.test_pdb_teardown_called_teardowns.append(self.id())\n\n            def test_1(self):\n                pass\n            def test_2(self):\n                pass\n    \"\"\"\n    )\n    result = pytester.runpytest_inprocess(\"--pdb\")\n    result.stdout.fnmatch_lines(\"* 2 passed in *\")\n    assert teardowns == [\n        \"test_pdb_teardown_called.MyTestCase.test_1\",\n        \"test_pdb_teardown_called.MyTestCase.test_2\",\n    ]\n\n\n@pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\ndef test_pdb_teardown_skipped_for_functions(\n    pytester: Pytester, monkeypatch: MonkeyPatch, mark: str\n) -> None:\n    \"\"\"\n    With --pdb, setUp and tearDown should not be called for tests skipped\n    via a decorator (#7215).\n    \"\"\"\n    tracked: list[str] = []\n    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n\n    pytester.makepyfile(\n        f\"\"\"\n        import unittest\n        import pytest\n\n        class MyTestCase(unittest.TestCase):\n\n            def setUp(self):\n                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n\n            def tearDown(self):\n                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n\n            {mark}(\"skipped for reasons\")\n            def test_1(self):\n                pass\n\n    \"\"\"\n    )\n    result = pytester.runpytest_inprocess(\"--pdb\")\n    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n    assert tracked == []\n\n\n@pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\ndef test_pdb_teardown_skipped_for_classes(\n    pytester: Pytester, monkeypatch: MonkeyPatch, mark: str\n) -> None:\n    \"\"\"\n    With --pdb, setUp and tearDown should not be called for tests skipped\n    via a decorator on the class (#10060).\n    \"\"\"\n    tracked: list[str] = []\n    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n\n    pytester.makepyfile(\n        f\"\"\"\n        import unittest\n        import pytest\n\n        {mark}(\"skipped for reasons\")\n        class MyTestCase(unittest.TestCase):\n\n            def setUp(self):\n                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n\n            def tearDown(self):\n                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n\n            def test_1(self):\n                pass\n\n    \"\"\"\n    )\n    result = pytester.runpytest_inprocess(\"--pdb\")\n    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n    assert tracked == []\n\n\ndef test_async_support(pytester: Pytester) -> None:\n    pytest.importorskip(\"unittest.async_case\")\n\n    pytester.copy_example(\"unittest/test_unittest_asyncio.py\")\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(failed=1, passed=2)\n\n\ndef test_asynctest_support(pytester: Pytester) -> None:\n    \"\"\"Check asynctest support (#7110)\"\"\"\n    pytest.importorskip(\"asynctest\")\n\n    pytester.copy_example(\"unittest/test_unittest_asynctest.py\")\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(failed=1, passed=2)\n\n\ndef test_plain_unittest_does_not_support_async(pytester: Pytester) -> None:\n    \"\"\"Async functions in plain unittest.TestCase subclasses are not supported without plugins.\n\n    This test exists here to avoid introducing this support by accident, leading users\n    to expect that it works, rather than doing so intentionally as a feature.\n\n    See https://github.com/pytest-dev/pytest-asyncio/issues/180 for more context.\n    \"\"\"\n    pytester.copy_example(\"unittest/test_unittest_plain_async.py\")\n    result = pytester.runpytest_subprocess()\n    if hasattr(sys, \"pypy_version_info\"):\n        # in PyPy we can't reliable get the warning about the coroutine not being awaited,\n        # because it depends on the coroutine being garbage collected; given that\n        # we are running in a subprocess, that's difficult to enforce\n        expected_lines = [\"*1 passed*\"]\n    else:\n        expected_lines = [\n            \"*RuntimeWarning: coroutine * was never awaited\",\n            \"*1 passed*\",\n        ]\n    result.stdout.fnmatch_lines(expected_lines)\n\n\ndef test_do_class_cleanups_on_success(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            values = []\n            @classmethod\n            def setUpClass(cls):\n                def cleanup():\n                    cls.values.append(1)\n                cls.addClassCleanup(cleanup)\n            def test_one(self):\n                pass\n            def test_two(self):\n                pass\n        def test_cleanup_called_exactly_once():\n            assert MyTestCase.values == [1]\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    passed, skipped, failed = reprec.countoutcomes()\n    assert failed == 0\n    assert passed == 3\n\n\ndef test_do_class_cleanups_on_setupclass_failure(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            values = []\n            @classmethod\n            def setUpClass(cls):\n                def cleanup():\n                    cls.values.append(1)\n                cls.addClassCleanup(cleanup)\n                assert False\n            def test_one(self):\n                pass\n        def test_cleanup_called_exactly_once():\n            assert MyTestCase.values == [1]\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    passed, skipped, failed = reprec.countoutcomes()\n    assert failed == 1\n    assert passed == 1\n\n\ndef test_do_class_cleanups_on_teardownclass_failure(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            values = []\n            @classmethod\n            def setUpClass(cls):\n                def cleanup():\n                    cls.values.append(1)\n                cls.addClassCleanup(cleanup)\n            @classmethod\n            def tearDownClass(cls):\n                assert False\n            def test_one(self):\n                pass\n            def test_two(self):\n                pass\n        def test_cleanup_called_exactly_once():\n            assert MyTestCase.values == [1]\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    passed, skipped, failed = reprec.countoutcomes()\n    assert passed == 3\n\n\ndef test_do_cleanups_on_success(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            values = []\n            def setUp(self):\n                def cleanup():\n                    self.values.append(1)\n                self.addCleanup(cleanup)\n            def test_one(self):\n                pass\n            def test_two(self):\n                pass\n        def test_cleanup_called_the_right_number_of_times():\n            assert MyTestCase.values == [1, 1]\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    passed, skipped, failed = reprec.countoutcomes()\n    assert failed == 0\n    assert passed == 3\n\n\ndef test_do_cleanups_on_setup_failure(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            values = []\n            def setUp(self):\n                def cleanup():\n                    self.values.append(1)\n                self.addCleanup(cleanup)\n                assert False\n            def test_one(self):\n                pass\n            def test_two(self):\n                pass\n        def test_cleanup_called_the_right_number_of_times():\n            assert MyTestCase.values == [1, 1]\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    passed, skipped, failed = reprec.countoutcomes()\n    assert failed == 2\n    assert passed == 1\n\n\ndef test_do_cleanups_on_teardown_failure(pytester: Pytester) -> None:\n    testpath = pytester.makepyfile(\n        \"\"\"\n        import unittest\n        class MyTestCase(unittest.TestCase):\n            values = []\n            def setUp(self):\n                def cleanup():\n                    self.values.append(1)\n                self.addCleanup(cleanup)\n            def tearDown(self):\n                assert False\n            def test_one(self):\n                pass\n            def test_two(self):\n                pass\n        def test_cleanup_called_the_right_number_of_times():\n            assert MyTestCase.values == [1, 1]\n    \"\"\"\n    )\n    reprec = pytester.inline_run(testpath)\n    passed, skipped, failed = reprec.countoutcomes()\n    assert failed == 2\n    assert passed == 1\n\n\nclass TestClassCleanupErrors:\n    \"\"\"\n    Make sure to show exceptions raised during class cleanup function (those registered\n    via addClassCleanup()).\n\n    See #11728.\n    \"\"\"\n\n    def test_class_cleanups_failure_in_setup(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            import unittest\n            class MyTestCase(unittest.TestCase):\n                @classmethod\n                def setUpClass(cls):\n                    def cleanup(n):\n                        raise Exception(f\"fail {n}\")\n                    cls.addClassCleanup(cleanup, 2)\n                    cls.addClassCleanup(cleanup, 1)\n                    raise Exception(\"fail 0\")\n                def test(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\", testpath)\n        result.assert_outcomes(passed=0, errors=1)\n        result.stdout.fnmatch_lines(\n            [\n                \"*Unittest class cleanup errors *2 sub-exceptions*\",\n                \"*Exception: fail 1\",\n                \"*Exception: fail 2\",\n            ]\n        )\n        result.stdout.fnmatch_lines(\n            [\n                \"* ERROR at setup of MyTestCase.test *\",\n                \"E * Exception: fail 0\",\n            ]\n        )\n\n    def test_class_cleanups_failure_in_teardown(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            import unittest\n            class MyTestCase(unittest.TestCase):\n                @classmethod\n                def setUpClass(cls):\n                    def cleanup(n):\n                        raise Exception(f\"fail {n}\")\n                    cls.addClassCleanup(cleanup, 2)\n                    cls.addClassCleanup(cleanup, 1)\n                def test(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\", testpath)\n        result.assert_outcomes(passed=1, errors=1)\n        result.stdout.fnmatch_lines(\n            [\n                \"*Unittest class cleanup errors *2 sub-exceptions*\",\n                \"*Exception: fail 1\",\n                \"*Exception: fail 2\",\n            ]\n        )\n\n    def test_class_cleanup_1_failure_in_teardown(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            import unittest\n            class MyTestCase(unittest.TestCase):\n                @classmethod\n                def setUpClass(cls):\n                    def cleanup(n):\n                        raise Exception(f\"fail {n}\")\n                    cls.addClassCleanup(cleanup, 1)\n                def test(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\", testpath)\n        result.assert_outcomes(passed=1, errors=1)\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR at teardown of MyTestCase.test*\",\n                \"*Exception: fail 1\",\n            ]\n        )\n\n\ndef test_traceback_pruning(pytester: Pytester) -> None:\n    \"\"\"Regression test for #9610 - doesn't crash during traceback pruning.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n\n        class MyTestCase(unittest.TestCase):\n            def __init__(self, test_method):\n                unittest.TestCase.__init__(self, test_method)\n\n        class TestIt(MyTestCase):\n            @classmethod\n            def tearDownClass(cls) -> None:\n                assert False\n\n            def test_it(self):\n                pass\n        \"\"\"\n    )\n    reprec = pytester.inline_run()\n    passed, skipped, failed = reprec.countoutcomes()\n    assert passed == 1\n    assert failed == 1\n    assert reprec.ret == 1\n\n\ndef test_raising_unittest_skiptest_during_collection(\n    pytester: Pytester,\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import unittest\n\n        class TestIt(unittest.TestCase):\n            def test_it(self): pass\n            def test_it2(self): pass\n\n        raise unittest.SkipTest()\n\n        class TestIt2(unittest.TestCase):\n            def test_it(self): pass\n            def test_it2(self): pass\n        \"\"\"\n    )\n    reprec = pytester.inline_run()\n    passed, skipped, failed = reprec.countoutcomes()\n    assert passed == 0\n    # Unittest reports one fake test for a skipped module.\n    assert skipped == 1\n    assert failed == 0\n    assert reprec.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_abstract_testcase_is_not_collected(pytester: Pytester) -> None:\n    \"\"\"Regression test for #12275.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import abc\n        import unittest\n\n        class TestBase(unittest.TestCase, abc.ABC):\n            @abc.abstractmethod\n            def abstract1(self): pass\n\n            @abc.abstractmethod\n            def abstract2(self): pass\n\n            def test_it(self): pass\n\n        class TestPartial(TestBase):\n            def abstract1(self): pass\n\n        class TestConcrete(TestPartial):\n            def abstract2(self): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.OK\n    result.assert_outcomes(passed=1)\n", "testing/test_recwarn.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport sys\nimport warnings\n\nimport pytest\nfrom pytest import ExitCode\nfrom pytest import Pytester\nfrom pytest import WarningsRecorder\n\n\ndef test_recwarn_stacklevel(recwarn: WarningsRecorder) -> None:\n    warnings.warn(\"hello\")\n    warn = recwarn.pop()\n    assert warn.filename == __file__\n\n\ndef test_recwarn_functional(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import warnings\n        def test_method(recwarn):\n            warnings.warn(\"hello\")\n            warn = recwarn.pop()\n            assert isinstance(warn.message, UserWarning)\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\n@pytest.mark.filterwarnings(\"\")\ndef test_recwarn_captures_deprecation_warning(recwarn: WarningsRecorder) -> None:\n    \"\"\"\n    Check that recwarn can capture DeprecationWarning by default\n    without custom filterwarnings (see #8666).\n    \"\"\"\n    warnings.warn(DeprecationWarning(\"some deprecation\"))\n    assert len(recwarn) == 1\n    assert recwarn.pop(DeprecationWarning)\n\n\nclass TestSubclassWarningPop:\n    class ParentWarning(Warning):\n        pass\n\n    class ChildWarning(ParentWarning):\n        pass\n\n    class ChildOfChildWarning(ChildWarning):\n        pass\n\n    @staticmethod\n    def raise_warnings_from_list(_warnings: list[type[Warning]]):\n        for warn in _warnings:\n            warnings.warn(f\"Warning {warn().__repr__()}\", warn)\n\n    def test_pop_finds_exact_match(self):\n        with pytest.warns((self.ParentWarning, self.ChildWarning)) as record:\n            self.raise_warnings_from_list(\n                [self.ChildWarning, self.ParentWarning, self.ChildOfChildWarning]\n            )\n\n        assert len(record) == 3\n        _warn = record.pop(self.ParentWarning)\n        assert _warn.category is self.ParentWarning\n\n    def test_pop_raises_if_no_match(self):\n        with pytest.raises(AssertionError):\n            with pytest.warns(self.ParentWarning) as record:\n                self.raise_warnings_from_list([self.ParentWarning])\n            record.pop(self.ChildOfChildWarning)\n\n    def test_pop_finds_best_inexact_match(self):\n        with pytest.warns(self.ParentWarning) as record:\n            self.raise_warnings_from_list(\n                [self.ChildOfChildWarning, self.ChildWarning, self.ChildOfChildWarning]\n            )\n\n        _warn = record.pop(self.ParentWarning)\n        assert _warn.category is self.ChildWarning\n\n\nclass TestWarningsRecorderChecker:\n    def test_recording(self) -> None:\n        rec = WarningsRecorder(_ispytest=True)\n        with rec:\n            assert not rec.list\n            warnings.warn_explicit(\"hello\", UserWarning, \"xyz\", 13)\n            assert len(rec.list) == 1\n            warnings.warn(DeprecationWarning(\"hello\"))\n            assert len(rec.list) == 2\n            warn = rec.pop()\n            assert str(warn.message) == \"hello\"\n            values = rec.list\n            rec.clear()\n            assert len(rec.list) == 0\n            assert values is rec.list\n            pytest.raises(AssertionError, rec.pop)\n\n    def test_warn_stacklevel(self) -> None:\n        \"\"\"#4243\"\"\"\n        rec = WarningsRecorder(_ispytest=True)\n        with rec:\n            warnings.warn(\"test\", DeprecationWarning, 2)\n\n    def test_typechecking(self) -> None:\n        from _pytest.recwarn import WarningsChecker\n\n        with pytest.raises(TypeError):\n            WarningsChecker(5, _ispytest=True)  # type: ignore[arg-type]\n        with pytest.raises(TypeError):\n            WarningsChecker((\"hi\", RuntimeWarning), _ispytest=True)  # type: ignore[arg-type]\n        with pytest.raises(TypeError):\n            WarningsChecker([DeprecationWarning, RuntimeWarning], _ispytest=True)  # type: ignore[arg-type]\n\n    def test_invalid_enter_exit(self) -> None:\n        # wrap this test in WarningsRecorder to ensure warning state gets reset\n        with WarningsRecorder(_ispytest=True):\n            with pytest.raises(RuntimeError):\n                rec = WarningsRecorder(_ispytest=True)\n                rec.__exit__(None, None, None)  # can't exit before entering\n\n            with pytest.raises(RuntimeError):\n                rec = WarningsRecorder(_ispytest=True)\n                with rec:\n                    with rec:\n                        pass  # can't enter twice\n\n\nclass TestDeprecatedCall:\n    \"\"\"test pytest.deprecated_call()\"\"\"\n\n    def dep(self, i: int, j: int | None = None) -> int:\n        if i == 0:\n            warnings.warn(\"is deprecated\", DeprecationWarning, stacklevel=1)\n        return 42\n\n    def dep_explicit(self, i: int) -> None:\n        if i == 0:\n            warnings.warn_explicit(\n                \"dep_explicit\", category=DeprecationWarning, filename=\"hello\", lineno=3\n            )\n\n    def test_deprecated_call_raises(self) -> None:\n        with pytest.raises(pytest.fail.Exception, match=\"No warnings of type\"):\n            pytest.deprecated_call(self.dep, 3, 5)\n\n    def test_deprecated_call(self) -> None:\n        pytest.deprecated_call(self.dep, 0, 5)\n\n    def test_deprecated_call_ret(self) -> None:\n        ret = pytest.deprecated_call(self.dep, 0)\n        assert ret == 42\n\n    def test_deprecated_call_preserves(self) -> None:\n        # Type ignored because `onceregistry` and `filters` are not\n        # documented API.\n        onceregistry = warnings.onceregistry.copy()  # type: ignore\n        filters = warnings.filters[:]\n        warn = warnings.warn\n        warn_explicit = warnings.warn_explicit\n        self.test_deprecated_call_raises()\n        self.test_deprecated_call()\n        assert onceregistry == warnings.onceregistry  # type: ignore\n        assert filters == warnings.filters\n        assert warn is warnings.warn\n        assert warn_explicit is warnings.warn_explicit\n\n    def test_deprecated_explicit_call_raises(self) -> None:\n        with pytest.raises(pytest.fail.Exception):\n            pytest.deprecated_call(self.dep_explicit, 3)\n\n    def test_deprecated_explicit_call(self) -> None:\n        pytest.deprecated_call(self.dep_explicit, 0)\n        pytest.deprecated_call(self.dep_explicit, 0)\n\n    @pytest.mark.parametrize(\"mode\", [\"context_manager\", \"call\"])\n    def test_deprecated_call_no_warning(self, mode) -> None:\n        \"\"\"Ensure deprecated_call() raises the expected failure when its block/function does\n        not raise a deprecation warning.\n        \"\"\"\n\n        def f():\n            pass\n\n        msg = \"No warnings of type (.*DeprecationWarning.*, .*PendingDeprecationWarning.*)\"\n        with pytest.raises(pytest.fail.Exception, match=msg):\n            if mode == \"call\":\n                pytest.deprecated_call(f)\n            else:\n                with pytest.deprecated_call():\n                    f()\n\n    @pytest.mark.parametrize(\n        \"warning_type\", [PendingDeprecationWarning, DeprecationWarning, FutureWarning]\n    )\n    @pytest.mark.parametrize(\"mode\", [\"context_manager\", \"call\"])\n    @pytest.mark.parametrize(\"call_f_first\", [True, False])\n    @pytest.mark.filterwarnings(\"ignore\")\n    def test_deprecated_call_modes(self, warning_type, mode, call_f_first) -> None:\n        \"\"\"Ensure deprecated_call() captures a deprecation warning as expected inside its\n        block/function.\n        \"\"\"\n\n        def f():\n            warnings.warn(warning_type(\"hi\"))\n            return 10\n\n        # ensure deprecated_call() can capture the warning even if it has already been triggered\n        if call_f_first:\n            assert f() == 10\n        if mode == \"call\":\n            assert pytest.deprecated_call(f) == 10\n        else:\n            with pytest.deprecated_call():\n                assert f() == 10\n\n    def test_deprecated_call_specificity(self) -> None:\n        other_warnings = [\n            Warning,\n            UserWarning,\n            SyntaxWarning,\n            RuntimeWarning,\n            ImportWarning,\n            UnicodeWarning,\n        ]\n        for warning in other_warnings:\n\n            def f():\n                warnings.warn(warning(\"hi\"))  # noqa: B023\n\n            with pytest.warns(warning):\n                with pytest.raises(pytest.fail.Exception):\n                    pytest.deprecated_call(f)\n                with pytest.raises(pytest.fail.Exception):\n                    with pytest.deprecated_call():\n                        f()\n\n    def test_deprecated_call_supports_match(self) -> None:\n        with pytest.deprecated_call(match=r\"must be \\d+$\"):\n            warnings.warn(\"value must be 42\", DeprecationWarning)\n\n        with pytest.deprecated_call():\n            with pytest.raises(pytest.fail.Exception, match=\"DID NOT WARN\"):\n                with pytest.deprecated_call(match=r\"must be \\d+$\"):\n                    warnings.warn(\"this is not here\", DeprecationWarning)\n\n\nclass TestWarns:\n    def test_check_callable(self) -> None:\n        source = \"warnings.warn('w1', RuntimeWarning)\"\n        with pytest.raises(TypeError, match=r\".* must be callable\"):\n            pytest.warns(RuntimeWarning, source)  # type: ignore\n\n    def test_several_messages(self) -> None:\n        # different messages, b/c Python suppresses multiple identical warnings\n        pytest.warns(RuntimeWarning, lambda: warnings.warn(\"w1\", RuntimeWarning))\n        with pytest.warns(RuntimeWarning):\n            with pytest.raises(pytest.fail.Exception):\n                pytest.warns(UserWarning, lambda: warnings.warn(\"w2\", RuntimeWarning))\n        pytest.warns(RuntimeWarning, lambda: warnings.warn(\"w3\", RuntimeWarning))\n\n    def test_function(self) -> None:\n        pytest.warns(\n            SyntaxWarning, lambda msg: warnings.warn(msg, SyntaxWarning), \"syntax\"\n        )\n\n    def test_warning_tuple(self) -> None:\n        pytest.warns(\n            (RuntimeWarning, SyntaxWarning), lambda: warnings.warn(\"w1\", RuntimeWarning)\n        )\n        pytest.warns(\n            (RuntimeWarning, SyntaxWarning), lambda: warnings.warn(\"w2\", SyntaxWarning)\n        )\n        with pytest.warns():\n            pytest.raises(\n                pytest.fail.Exception,\n                lambda: pytest.warns(\n                    (RuntimeWarning, SyntaxWarning),\n                    lambda: warnings.warn(\"w3\", UserWarning),\n                ),\n            )\n\n    def test_as_contextmanager(self) -> None:\n        with pytest.warns(RuntimeWarning):\n            warnings.warn(\"runtime\", RuntimeWarning)\n\n        with pytest.warns(UserWarning):\n            warnings.warn(\"user\", UserWarning)\n\n        with pytest.warns():\n            with pytest.raises(pytest.fail.Exception) as excinfo:\n                with pytest.warns(RuntimeWarning):\n                    warnings.warn(\"user\", UserWarning)\n        excinfo.match(\n            r\"DID NOT WARN. No warnings of type \\(.+RuntimeWarning.+,\\) were emitted.\\n\"\n            r\" Emitted warnings: \\[UserWarning\\('user',?\\)\\].\"\n        )\n\n        with pytest.warns():\n            with pytest.raises(pytest.fail.Exception) as excinfo:\n                with pytest.warns(UserWarning):\n                    warnings.warn(\"runtime\", RuntimeWarning)\n        excinfo.match(\n            r\"DID NOT WARN. No warnings of type \\(.+UserWarning.+,\\) were emitted.\\n\"\n            r\" Emitted warnings: \\[RuntimeWarning\\('runtime',?\\)].\"\n        )\n\n        with pytest.raises(pytest.fail.Exception) as excinfo:\n            with pytest.warns(UserWarning):\n                pass\n        excinfo.match(\n            r\"DID NOT WARN. No warnings of type \\(.+UserWarning.+,\\) were emitted.\\n\"\n            r\" Emitted warnings: \\[\\].\"\n        )\n\n        warning_classes = (UserWarning, FutureWarning)\n        with pytest.warns():\n            with pytest.raises(pytest.fail.Exception) as excinfo:\n                with pytest.warns(warning_classes) as warninfo:\n                    warnings.warn(\"runtime\", RuntimeWarning)\n                    warnings.warn(\"import\", ImportWarning)\n\n        messages = [each.message for each in warninfo]\n        expected_str = (\n            f\"DID NOT WARN. No warnings of type {warning_classes} were emitted.\\n\"\n            f\" Emitted warnings: {messages}.\"\n        )\n\n        assert str(excinfo.value) == expected_str\n\n    def test_record(self) -> None:\n        with pytest.warns(UserWarning) as record:\n            warnings.warn(\"user\", UserWarning)\n\n        assert len(record) == 1\n        assert str(record[0].message) == \"user\"\n\n    def test_record_only(self) -> None:\n        with pytest.warns() as record:\n            warnings.warn(\"user\", UserWarning)\n            warnings.warn(\"runtime\", RuntimeWarning)\n\n        assert len(record) == 2\n        assert str(record[0].message) == \"user\"\n        assert str(record[1].message) == \"runtime\"\n\n    def test_record_only_none_type_error(self) -> None:\n        with pytest.raises(TypeError):\n            pytest.warns(None)  # type: ignore[call-overload]\n\n    def test_record_by_subclass(self) -> None:\n        with pytest.warns(Warning) as record:\n            warnings.warn(\"user\", UserWarning)\n            warnings.warn(\"runtime\", RuntimeWarning)\n\n        assert len(record) == 2\n        assert str(record[0].message) == \"user\"\n        assert str(record[1].message) == \"runtime\"\n\n        class MyUserWarning(UserWarning):\n            pass\n\n        class MyRuntimeWarning(RuntimeWarning):\n            pass\n\n        with pytest.warns((UserWarning, RuntimeWarning)) as record:\n            warnings.warn(\"user\", MyUserWarning)\n            warnings.warn(\"runtime\", MyRuntimeWarning)\n\n        assert len(record) == 2\n        assert str(record[0].message) == \"user\"\n        assert str(record[1].message) == \"runtime\"\n\n    def test_double_test(self, pytester: Pytester) -> None:\n        \"\"\"If a test is run again, the warning should still be raised\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            import warnings\n\n            @pytest.mark.parametrize('run', [1, 2])\n            def test(run):\n                with pytest.warns(RuntimeWarning):\n                    warnings.warn(\"runtime\", RuntimeWarning)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 passed in*\"])\n\n    def test_match_regex(self) -> None:\n        with pytest.warns(UserWarning, match=r\"must be \\d+$\"):\n            warnings.warn(\"value must be 42\", UserWarning)\n\n        with pytest.warns():\n            with pytest.raises(pytest.fail.Exception):\n                with pytest.warns(UserWarning, match=r\"must be \\d+$\"):\n                    warnings.warn(\"this is not here\", UserWarning)\n\n        with pytest.warns():\n            with pytest.raises(pytest.fail.Exception):\n                with pytest.warns(FutureWarning, match=r\"must be \\d+$\"):\n                    warnings.warn(\"value must be 42\", UserWarning)\n\n    def test_one_from_multiple_warns(self) -> None:\n        with pytest.warns():\n            with pytest.raises(pytest.fail.Exception, match=\"DID NOT WARN\"):\n                with pytest.warns(UserWarning, match=r\"aaa\"):\n                    with pytest.warns(UserWarning, match=r\"aaa\"):\n                        warnings.warn(\"cccccccccc\", UserWarning)\n                        warnings.warn(\"bbbbbbbbbb\", UserWarning)\n                        warnings.warn(\"aaaaaaaaaa\", UserWarning)\n\n    def test_none_of_multiple_warns(self) -> None:\n        with pytest.warns():\n            with pytest.raises(pytest.fail.Exception, match=\"DID NOT WARN\"):\n                with pytest.warns(UserWarning, match=r\"aaa\"):\n                    warnings.warn(\"bbbbbbbbbb\", UserWarning)\n                    warnings.warn(\"cccccccccc\", UserWarning)\n\n    @pytest.mark.filterwarnings(\"ignore\")\n    def test_can_capture_previously_warned(self) -> None:\n        def f() -> int:\n            warnings.warn(UserWarning(\"ohai\"))\n            return 10\n\n        assert f() == 10\n        assert pytest.warns(UserWarning, f) == 10\n        assert pytest.warns(UserWarning, f) == 10\n        assert pytest.warns(UserWarning, f) != \"10\"  # type: ignore[comparison-overlap]\n\n    def test_warns_context_manager_with_kwargs(self) -> None:\n        with pytest.raises(TypeError) as excinfo:\n            with pytest.warns(UserWarning, foo=\"bar\"):  # type: ignore\n                pass\n        assert \"Unexpected keyword arguments\" in str(excinfo.value)\n\n    def test_re_emit_single(self) -> None:\n        with pytest.warns(DeprecationWarning):\n            with pytest.warns(UserWarning):\n                warnings.warn(\"user warning\", UserWarning)\n                warnings.warn(\"some deprecation warning\", DeprecationWarning)\n\n    def test_re_emit_multiple(self) -> None:\n        with pytest.warns(UserWarning):\n            warnings.warn(\"first warning\", UserWarning)\n            warnings.warn(\"second warning\", UserWarning)\n\n    def test_re_emit_match_single(self) -> None:\n        with pytest.warns(DeprecationWarning):\n            with pytest.warns(UserWarning, match=\"user warning\"):\n                warnings.warn(\"user warning\", UserWarning)\n                warnings.warn(\"some deprecation warning\", DeprecationWarning)\n\n    def test_re_emit_match_multiple(self) -> None:\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # if anything is re-emitted\n            with pytest.warns(UserWarning, match=\"user warning\"):\n                warnings.warn(\"first user warning\", UserWarning)\n                warnings.warn(\"second user warning\", UserWarning)\n\n    def test_re_emit_non_match_single(self) -> None:\n        with pytest.warns(UserWarning, match=\"v2 warning\"):\n            with pytest.warns(UserWarning, match=\"v1 warning\"):\n                warnings.warn(\"v1 warning\", UserWarning)\n                warnings.warn(\"non-matching v2 warning\", UserWarning)\n\n    def test_catch_warning_within_raise(self) -> None:\n        # warns-in-raises works since https://github.com/pytest-dev/pytest/pull/11129\n        with pytest.raises(ValueError, match=\"some exception\"):\n            with pytest.warns(FutureWarning, match=\"some warning\"):\n                warnings.warn(\"some warning\", category=FutureWarning)\n                raise ValueError(\"some exception\")\n        # and raises-in-warns has always worked but we'll check for symmetry.\n        with pytest.warns(FutureWarning, match=\"some warning\"):\n            with pytest.raises(ValueError, match=\"some exception\"):\n                warnings.warn(\"some warning\", category=FutureWarning)\n                raise ValueError(\"some exception\")\n\n    def test_skip_within_warns(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #11907.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def test_it():\n                with pytest.warns(Warning):\n                    pytest.skip(\"this is OK\")\n            \"\"\",\n        )\n\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.OK\n        result.assert_outcomes(skipped=1)\n\n    def test_fail_within_warns(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #11907.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def test_it():\n                with pytest.warns(Warning):\n                    pytest.fail(\"BOOM\")\n            \"\"\",\n        )\n\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.TESTS_FAILED\n        result.assert_outcomes(failed=1)\n        assert \"DID NOT WARN\" not in str(result.stdout)\n\n    def test_exit_within_warns(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #11907.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def test_it():\n                with pytest.warns(Warning):\n                    pytest.exit()\n            \"\"\",\n        )\n\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.INTERRUPTED\n        result.assert_outcomes()\n\n    def test_keyboard_interrupt_within_warns(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #11907.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def test_it():\n                with pytest.warns(Warning):\n                    raise KeyboardInterrupt()\n            \"\"\",\n        )\n\n        result = pytester.runpytest_subprocess()\n        assert result.ret == ExitCode.INTERRUPTED\n        result.assert_outcomes()\n\n\ndef test_raise_type_error_on_invalid_warning() -> None:\n    \"\"\"Check pytest.warns validates warning messages are strings (#10865) or\n    Warning instances (#11959).\"\"\"\n    with pytest.raises(TypeError, match=\"Warning must be str or Warning\"):\n        with pytest.warns(UserWarning):\n            warnings.warn(1)  # type: ignore\n\n\n@pytest.mark.parametrize(\n    \"message\",\n    [\n        pytest.param(\"Warning\", id=\"str\"),\n        pytest.param(UserWarning(), id=\"UserWarning\"),\n        pytest.param(Warning(), id=\"Warning\"),\n    ],\n)\ndef test_no_raise_type_error_on_valid_warning(message: str | Warning) -> None:\n    \"\"\"Check pytest.warns validates warning messages are strings (#10865) or\n    Warning instances (#11959).\"\"\"\n    with pytest.warns(Warning):\n        warnings.warn(message)\n\n\n@pytest.mark.skipif(\n    hasattr(sys, \"pypy_version_info\"),\n    reason=\"Not for pypy\",\n)\ndef test_raise_type_error_on_invalid_warning_message_cpython() -> None:\n    # Check that we get the same behavior with the stdlib, at least if filtering\n    # (see https://github.com/python/cpython/issues/103577 for details)\n    with pytest.raises(TypeError):\n        with warnings.catch_warnings():\n            warnings.filterwarnings(\"ignore\", \"test\")\n            warnings.warn(1)  # type: ignore\n\n\ndef test_multiple_arg_custom_warning() -> None:\n    \"\"\"Test for issue #11906.\"\"\"\n\n    class CustomWarning(UserWarning):\n        def __init__(self, a, b):\n            pass\n\n    with pytest.warns(CustomWarning):\n        with pytest.raises(pytest.fail.Exception, match=\"DID NOT WARN\"):\n            with pytest.warns(CustomWarning, match=\"not gonna match\"):\n                a, b = 1, 2\n                warnings.warn(CustomWarning(a, b))\n", "testing/test_findpaths.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nfrom pathlib import Path\nfrom textwrap import dedent\n\nfrom _pytest.config import UsageError\nfrom _pytest.config.findpaths import get_common_ancestor\nfrom _pytest.config.findpaths import get_dirs_from_args\nfrom _pytest.config.findpaths import is_fs_root\nfrom _pytest.config.findpaths import load_config_dict_from_file\nimport pytest\n\n\nclass TestLoadConfigDictFromFile:\n    def test_empty_pytest_ini(self, tmp_path: Path) -> None:\n        \"\"\"pytest.ini files are always considered for configuration, even if empty\"\"\"\n        fn = tmp_path / \"pytest.ini\"\n        fn.write_text(\"\", encoding=\"utf-8\")\n        assert load_config_dict_from_file(fn) == {}\n\n    def test_pytest_ini(self, tmp_path: Path) -> None:\n        \"\"\"[pytest] section in pytest.ini files is read correctly\"\"\"\n        fn = tmp_path / \"pytest.ini\"\n        fn.write_text(\"[pytest]\\nx=1\", encoding=\"utf-8\")\n        assert load_config_dict_from_file(fn) == {\"x\": \"1\"}\n\n    def test_custom_ini(self, tmp_path: Path) -> None:\n        \"\"\"[pytest] section in any .ini file is read correctly\"\"\"\n        fn = tmp_path / \"custom.ini\"\n        fn.write_text(\"[pytest]\\nx=1\", encoding=\"utf-8\")\n        assert load_config_dict_from_file(fn) == {\"x\": \"1\"}\n\n    def test_custom_ini_without_section(self, tmp_path: Path) -> None:\n        \"\"\"Custom .ini files without [pytest] section are not considered for configuration\"\"\"\n        fn = tmp_path / \"custom.ini\"\n        fn.write_text(\"[custom]\", encoding=\"utf-8\")\n        assert load_config_dict_from_file(fn) is None\n\n    def test_custom_cfg_file(self, tmp_path: Path) -> None:\n        \"\"\"Custom .cfg files without [tool:pytest] section are not considered for configuration\"\"\"\n        fn = tmp_path / \"custom.cfg\"\n        fn.write_text(\"[custom]\", encoding=\"utf-8\")\n        assert load_config_dict_from_file(fn) is None\n\n    def test_valid_cfg_file(self, tmp_path: Path) -> None:\n        \"\"\"Custom .cfg files with [tool:pytest] section are read correctly\"\"\"\n        fn = tmp_path / \"custom.cfg\"\n        fn.write_text(\"[tool:pytest]\\nx=1\", encoding=\"utf-8\")\n        assert load_config_dict_from_file(fn) == {\"x\": \"1\"}\n\n    def test_unsupported_pytest_section_in_cfg_file(self, tmp_path: Path) -> None:\n        \"\"\".cfg files with [pytest] section are no longer supported and should fail to alert users\"\"\"\n        fn = tmp_path / \"custom.cfg\"\n        fn.write_text(\"[pytest]\", encoding=\"utf-8\")\n        with pytest.raises(pytest.fail.Exception):\n            load_config_dict_from_file(fn)\n\n    def test_invalid_toml_file(self, tmp_path: Path) -> None:\n        \"\"\"Invalid .toml files should raise `UsageError`.\"\"\"\n        fn = tmp_path / \"myconfig.toml\"\n        fn.write_text(\"]invalid toml[\", encoding=\"utf-8\")\n        with pytest.raises(UsageError):\n            load_config_dict_from_file(fn)\n\n    def test_custom_toml_file(self, tmp_path: Path) -> None:\n        \"\"\".toml files without [tool.pytest.ini_options] are not considered for configuration.\"\"\"\n        fn = tmp_path / \"myconfig.toml\"\n        fn.write_text(\n            dedent(\n                \"\"\"\n            [build_system]\n            x = 1\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        assert load_config_dict_from_file(fn) is None\n\n    def test_valid_toml_file(self, tmp_path: Path) -> None:\n        \"\"\".toml files with [tool.pytest.ini_options] are read correctly, including changing\n        data types to str/list for compatibility with other configuration options.\"\"\"\n        fn = tmp_path / \"myconfig.toml\"\n        fn.write_text(\n            dedent(\n                \"\"\"\n            [tool.pytest.ini_options]\n            x = 1\n            y = 20.0\n            values = [\"tests\", \"integration\"]\n            name = \"foo\"\n            heterogeneous_array = [1, \"str\"]\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        assert load_config_dict_from_file(fn) == {\n            \"x\": \"1\",\n            \"y\": \"20.0\",\n            \"values\": [\"tests\", \"integration\"],\n            \"name\": \"foo\",\n            \"heterogeneous_array\": [1, \"str\"],\n        }\n\n\nclass TestCommonAncestor:\n    def test_has_ancestor(self, tmp_path: Path) -> None:\n        fn1 = tmp_path / \"foo\" / \"bar\" / \"test_1.py\"\n        fn1.parent.mkdir(parents=True)\n        fn1.touch()\n        fn2 = tmp_path / \"foo\" / \"zaz\" / \"test_2.py\"\n        fn2.parent.mkdir(parents=True)\n        fn2.touch()\n        cwd = Path.cwd()\n        assert get_common_ancestor(cwd, [fn1, fn2]) == tmp_path / \"foo\"\n        assert get_common_ancestor(cwd, [fn1.parent, fn2]) == tmp_path / \"foo\"\n        assert get_common_ancestor(cwd, [fn1.parent, fn2.parent]) == tmp_path / \"foo\"\n        assert get_common_ancestor(cwd, [fn1, fn2.parent]) == tmp_path / \"foo\"\n\n    def test_single_dir(self, tmp_path: Path) -> None:\n        assert get_common_ancestor(Path.cwd(), [tmp_path]) == tmp_path\n\n    def test_single_file(self, tmp_path: Path) -> None:\n        fn = tmp_path / \"foo.py\"\n        fn.touch()\n        assert get_common_ancestor(Path.cwd(), [fn]) == tmp_path\n\n\ndef test_get_dirs_from_args(tmp_path):\n    \"\"\"get_dirs_from_args() skips over non-existing directories and files\"\"\"\n    fn = tmp_path / \"foo.py\"\n    fn.touch()\n    d = tmp_path / \"tests\"\n    d.mkdir()\n    option = \"--foobar=/foo.txt\"\n    # xdist uses options in this format for its rsync feature (#7638)\n    xdist_rsync_option = \"popen=c:/dest\"\n    assert get_dirs_from_args(\n        [str(fn), str(tmp_path / \"does_not_exist\"), str(d), option, xdist_rsync_option]\n    ) == [fn.parent, d]\n\n\n@pytest.mark.parametrize(\n    \"path, expected\",\n    [\n        pytest.param(\n            f\"e:{os.sep}\", True, marks=pytest.mark.skipif(\"sys.platform != 'win32'\")\n        ),\n        (f\"{os.sep}\", True),\n        (f\"e:{os.sep}projects\", False),\n        (f\"{os.sep}projects\", False),\n    ],\n)\ndef test_is_fs_root(path: Path, expected: bool) -> None:\n    assert is_fs_root(Path(path)) is expected\n", "testing/test_tmpdir.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport dataclasses\nimport os\nfrom pathlib import Path\nimport stat\nimport sys\nfrom typing import Callable\nfrom typing import cast\nimport warnings\n\nfrom _pytest import pathlib\nfrom _pytest.config import Config\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pathlib import cleanup_numbered_dir\nfrom _pytest.pathlib import create_cleanup_lock\nfrom _pytest.pathlib import make_numbered_dir\nfrom _pytest.pathlib import maybe_delete_a_numbered_dir\nfrom _pytest.pathlib import on_rm_rf_error\nfrom _pytest.pathlib import register_cleanup_lock_removal\nfrom _pytest.pathlib import rm_rf\nfrom _pytest.pytester import Pytester\nfrom _pytest.tmpdir import get_user\nfrom _pytest.tmpdir import TempPathFactory\nimport pytest\n\n\ndef test_tmp_path_fixture(pytester: Pytester) -> None:\n    p = pytester.copy_example(\"tmpdir/tmp_path_fixture.py\")\n    results = pytester.runpytest(p)\n    results.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\n@dataclasses.dataclass\nclass FakeConfig:\n    basetemp: str | Path\n\n    @property\n    def trace(self):\n        return self\n\n    def get(self, key):\n        return lambda *k: None\n\n    def getini(self, name):\n        if name == \"tmp_path_retention_count\":\n            return 3\n        elif name == \"tmp_path_retention_policy\":\n            return \"all\"\n        else:\n            assert False\n\n    @property\n    def option(self):\n        return self\n\n\nclass TestTmpPathHandler:\n    def test_mktemp(self, tmp_path: Path) -> None:\n        config = cast(Config, FakeConfig(tmp_path))\n        t = TempPathFactory.from_config(config, _ispytest=True)\n        tmp = t.mktemp(\"world\")\n        assert str(tmp.relative_to(t.getbasetemp())) == \"world0\"\n        tmp = t.mktemp(\"this\")\n        assert str(tmp.relative_to(t.getbasetemp())).startswith(\"this\")\n        tmp2 = t.mktemp(\"this\")\n        assert str(tmp2.relative_to(t.getbasetemp())).startswith(\"this\")\n        assert tmp2 != tmp\n\n    def test_tmppath_relative_basetemp_absolute(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch\n    ) -> None:\n        \"\"\"#4425\"\"\"\n        monkeypatch.chdir(tmp_path)\n        config = cast(Config, FakeConfig(\"hello\"))\n        t = TempPathFactory.from_config(config, _ispytest=True)\n        assert t.getbasetemp().resolve() == (tmp_path / \"hello\").resolve()\n\n\nclass TestConfigTmpPath:\n    def test_getbasetemp_custom_removes_old(self, pytester: Pytester) -> None:\n        mytemp = pytester.path.joinpath(\"xyz\")\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_1(tmp_path):\n                pass\n        \"\"\"\n        )\n        pytester.runpytest(p, f\"--basetemp={mytemp}\")\n        assert mytemp.exists()\n        mytemp.joinpath(\"hello\").touch()\n\n        pytester.runpytest(p, f\"--basetemp={mytemp}\")\n        assert mytemp.exists()\n        assert not mytemp.joinpath(\"hello\").exists()\n\n    def test_policy_failed_removes_only_passed_dir(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_1(tmp_path):\n                assert 0 == 0\n            def test_2(tmp_path):\n                assert 0 == 1\n        \"\"\"\n        )\n        pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            tmp_path_retention_policy = \"failed\"\n        \"\"\"\n        )\n\n        pytester.inline_run(p)\n        root = pytester._test_tmproot\n\n        for child in root.iterdir():\n            base_dir = list(\n                filter(lambda x: x.is_dir() and not x.is_symlink(), child.iterdir())\n            )\n            assert len(base_dir) == 1\n            test_dir = list(\n                filter(\n                    lambda x: x.is_dir() and not x.is_symlink(), base_dir[0].iterdir()\n                )\n            )\n            # Check only the failed one remains\n            assert len(test_dir) == 1\n            assert test_dir[0].name == \"test_20\"\n\n    def test_policy_failed_removes_basedir_when_all_passed(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def test_1(tmp_path):\n                assert 0 == 0\n        \"\"\"\n        )\n        pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            tmp_path_retention_policy = \"failed\"\n        \"\"\"\n        )\n\n        pytester.inline_run(p)\n        root = pytester._test_tmproot\n        for child in root.iterdir():\n            # This symlink will be deleted by cleanup_numbered_dir **after**\n            # the test finishes because it's triggered by atexit.\n            # So it has to be ignored here.\n            base_dir = filter(lambda x: not x.is_symlink(), child.iterdir())\n            # Check the base dir itself is gone\n            assert len(list(base_dir)) == 0\n\n    # issue #10502\n    def test_policy_failed_removes_dir_when_skipped_from_fixture(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def fixt(tmp_path):\n                pytest.skip()\n\n            def test_fixt(fixt):\n                pass\n        \"\"\"\n        )\n        pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            tmp_path_retention_policy = \"failed\"\n        \"\"\"\n        )\n\n        pytester.inline_run(p)\n\n        # Check if the whole directory is removed\n        root = pytester._test_tmproot\n        for child in root.iterdir():\n            base_dir = list(\n                filter(lambda x: x.is_dir() and not x.is_symlink(), child.iterdir())\n            )\n            assert len(base_dir) == 0\n\n    # issue #10502\n    def test_policy_all_keeps_dir_when_skipped_from_fixture(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def fixt(tmp_path):\n                pytest.skip()\n\n            def test_fixt(fixt):\n                pass\n        \"\"\"\n        )\n        pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            tmp_path_retention_policy = \"all\"\n        \"\"\"\n        )\n        pytester.inline_run(p)\n\n        # Check if the whole directory is kept\n        root = pytester._test_tmproot\n        for child in root.iterdir():\n            base_dir = list(\n                filter(lambda x: x.is_dir() and not x.is_symlink(), child.iterdir())\n            )\n            assert len(base_dir) == 1\n            test_dir = list(\n                filter(\n                    lambda x: x.is_dir() and not x.is_symlink(), base_dir[0].iterdir()\n                )\n            )\n            assert len(test_dir) == 1\n\n\ntestdata = [\n    (\"mypath\", True),\n    (\"/mypath1\", False),\n    (\"./mypath1\", True),\n    (\"../mypath3\", False),\n    (\"../../mypath4\", False),\n    (\"mypath5/..\", False),\n    (\"mypath6/../mypath6\", True),\n    (\"mypath7/../mypath7/..\", False),\n]\n\n\n@pytest.mark.parametrize(\"basename, is_ok\", testdata)\ndef test_mktemp(pytester: Pytester, basename: str, is_ok: bool) -> None:\n    mytemp = pytester.mkdir(\"mytemp\")\n    p = pytester.makepyfile(\n        f\"\"\"\n        def test_abs_path(tmp_path_factory):\n            tmp_path_factory.mktemp('{basename}', numbered=False)\n        \"\"\"\n    )\n\n    result = pytester.runpytest(p, f\"--basetemp={mytemp}\")\n    if is_ok:\n        assert result.ret == 0\n        assert mytemp.joinpath(basename).exists()\n    else:\n        assert result.ret == 1\n        result.stdout.fnmatch_lines(\"*ValueError*\")\n\n\ndef test_tmp_path_always_is_realpath(pytester: Pytester, monkeypatch) -> None:\n    # the reason why tmp_path should be a realpath is that\n    # when you cd to it and do \"os.getcwd()\" you will anyway\n    # get the realpath.  Using the symlinked path can thus\n    # easily result in path-inequality\n    # XXX if that proves to be a problem, consider using\n    # os.environ[\"PWD\"]\n    realtemp = pytester.mkdir(\"myrealtemp\")\n    linktemp = pytester.path.joinpath(\"symlinktemp\")\n    attempt_symlink_to(linktemp, str(realtemp))\n    monkeypatch.setenv(\"PYTEST_DEBUG_TEMPROOT\", str(linktemp))\n    pytester.makepyfile(\n        \"\"\"\n        def test_1(tmp_path):\n            assert tmp_path.resolve() == tmp_path\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\ndef test_tmp_path_too_long_on_parametrization(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.parametrize(\"arg\", [\"1\"*1000])\n        def test_some(arg, tmp_path):\n            tmp_path.joinpath(\"hello\").touch()\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\ndef test_tmp_path_factory(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture(scope='session')\n        def session_dir(tmp_path_factory):\n            return tmp_path_factory.mktemp('data', numbered=False)\n        def test_some(session_dir):\n            assert session_dir.is_dir()\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\ndef test_tmp_path_fallback_tox_env(pytester: Pytester, monkeypatch) -> None:\n    \"\"\"Test that tmp_path works even if environment variables required by getpass\n    module are missing (#1010).\n    \"\"\"\n    monkeypatch.delenv(\"USER\", raising=False)\n    monkeypatch.delenv(\"USERNAME\", raising=False)\n    pytester.makepyfile(\n        \"\"\"\n        def test_some(tmp_path):\n            assert tmp_path.is_dir()\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\n@pytest.fixture\ndef break_getuser(monkeypatch):\n    monkeypatch.setattr(\"os.getuid\", lambda: -1)\n    # taken from python 2.7/3.4\n    for envvar in (\"LOGNAME\", \"USER\", \"LNAME\", \"USERNAME\"):\n        monkeypatch.delenv(envvar, raising=False)\n\n\n@pytest.mark.usefixtures(\"break_getuser\")\n@pytest.mark.skipif(sys.platform.startswith(\"win\"), reason=\"no os.getuid on windows\")\ndef test_tmp_path_fallback_uid_not_found(pytester: Pytester) -> None:\n    \"\"\"Test that tmp_path works even if the current process's user id does not\n    correspond to a valid user.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        def test_some(tmp_path):\n            assert tmp_path.is_dir()\n    \"\"\"\n    )\n    reprec = pytester.inline_run()\n    reprec.assertoutcome(passed=1)\n\n\n@pytest.mark.usefixtures(\"break_getuser\")\n@pytest.mark.skipif(sys.platform.startswith(\"win\"), reason=\"no os.getuid on windows\")\ndef test_get_user_uid_not_found():\n    \"\"\"Test that get_user() function works even if the current process's\n    user id does not correspond to a valid user (e.g. running pytest in a\n    Docker container with 'docker run -u'.\n    \"\"\"\n    assert get_user() is None\n\n\n@pytest.mark.skipif(not sys.platform.startswith(\"win\"), reason=\"win only\")\ndef test_get_user(monkeypatch):\n    \"\"\"Test that get_user() function works even if environment variables\n    required by getpass module are missing from the environment on Windows\n    (#1010).\n    \"\"\"\n    monkeypatch.delenv(\"USER\", raising=False)\n    monkeypatch.delenv(\"USERNAME\", raising=False)\n    assert get_user() is None\n\n\nclass TestNumberedDir:\n    PREFIX = \"fun-\"\n\n    def test_make(self, tmp_path):\n        for i in range(10):\n            d = make_numbered_dir(root=tmp_path, prefix=self.PREFIX)\n            assert d.name.startswith(self.PREFIX)\n            assert d.name.endswith(str(i))\n\n        symlink = tmp_path.joinpath(self.PREFIX + \"current\")\n        if symlink.exists():\n            # unix\n            assert symlink.is_symlink()\n            assert symlink.resolve() == d.resolve()\n\n    def test_cleanup_lock_create(self, tmp_path):\n        d = tmp_path.joinpath(\"test\")\n        d.mkdir()\n        lockfile = create_cleanup_lock(d)\n        with pytest.raises(OSError, match=\"cannot create lockfile in .*\"):\n            create_cleanup_lock(d)\n\n        lockfile.unlink()\n\n    def test_lock_register_cleanup_removal(self, tmp_path: Path) -> None:\n        lock = create_cleanup_lock(tmp_path)\n\n        registry: list[Callable[..., None]] = []\n        register_cleanup_lock_removal(lock, register=registry.append)\n\n        (cleanup_func,) = registry\n\n        assert lock.is_file()\n\n        cleanup_func(original_pid=\"intentionally_different\")\n\n        assert lock.is_file()\n\n        cleanup_func()\n\n        assert not lock.exists()\n\n        cleanup_func()\n\n        assert not lock.exists()\n\n    def _do_cleanup(self, tmp_path: Path, keep: int = 2) -> None:\n        self.test_make(tmp_path)\n        cleanup_numbered_dir(\n            root=tmp_path,\n            prefix=self.PREFIX,\n            keep=keep,\n            consider_lock_dead_if_created_before=0,\n        )\n\n    def test_cleanup_keep(self, tmp_path):\n        self._do_cleanup(tmp_path)\n        a, b = (x for x in tmp_path.iterdir() if not x.is_symlink())\n        print(a, b)\n\n    def test_cleanup_keep_0(self, tmp_path: Path):\n        self._do_cleanup(tmp_path, 0)\n        dir_num = len(list(tmp_path.iterdir()))\n        assert dir_num == 0\n\n    def test_cleanup_locked(self, tmp_path):\n        p = make_numbered_dir(root=tmp_path, prefix=self.PREFIX)\n\n        create_cleanup_lock(p)\n\n        assert not pathlib.ensure_deletable(\n            p, consider_lock_dead_if_created_before=p.stat().st_mtime - 1\n        )\n        assert pathlib.ensure_deletable(\n            p, consider_lock_dead_if_created_before=p.stat().st_mtime + 1\n        )\n\n    def test_cleanup_ignores_symlink(self, tmp_path):\n        the_symlink = tmp_path / (self.PREFIX + \"current\")\n        attempt_symlink_to(the_symlink, tmp_path / (self.PREFIX + \"5\"))\n        self._do_cleanup(tmp_path)\n\n    def test_removal_accepts_lock(self, tmp_path):\n        folder = make_numbered_dir(root=tmp_path, prefix=self.PREFIX)\n        create_cleanup_lock(folder)\n        maybe_delete_a_numbered_dir(folder)\n        assert folder.is_dir()\n\n\nclass TestRmRf:\n    def test_rm_rf(self, tmp_path):\n        adir = tmp_path / \"adir\"\n        adir.mkdir()\n        rm_rf(adir)\n\n        assert not adir.exists()\n\n        adir.mkdir()\n        afile = adir / \"afile\"\n        afile.write_bytes(b\"aa\")\n\n        rm_rf(adir)\n        assert not adir.exists()\n\n    def test_rm_rf_with_read_only_file(self, tmp_path):\n        \"\"\"Ensure rm_rf can remove directories with read-only files in them (#5524)\"\"\"\n        fn = tmp_path / \"dir/foo.txt\"\n        fn.parent.mkdir()\n\n        fn.touch()\n\n        self.chmod_r(fn)\n\n        rm_rf(fn.parent)\n\n        assert not fn.parent.is_dir()\n\n    def chmod_r(self, path):\n        mode = os.stat(str(path)).st_mode\n        os.chmod(str(path), mode & ~stat.S_IWRITE)\n\n    def test_rm_rf_with_read_only_directory(self, tmp_path):\n        \"\"\"Ensure rm_rf can remove read-only directories (#5524)\"\"\"\n        adir = tmp_path / \"dir\"\n        adir.mkdir()\n\n        (adir / \"foo.txt\").touch()\n        self.chmod_r(adir)\n\n        rm_rf(adir)\n\n        assert not adir.is_dir()\n\n    def test_on_rm_rf_error(self, tmp_path: Path) -> None:\n        adir = tmp_path / \"dir\"\n        adir.mkdir()\n\n        fn = adir / \"foo.txt\"\n        fn.touch()\n        self.chmod_r(fn)\n\n        # unknown exception\n        with pytest.warns(pytest.PytestWarning):\n            exc_info1 = (RuntimeError, RuntimeError(), None)\n            on_rm_rf_error(os.unlink, str(fn), exc_info1, start_path=tmp_path)\n            assert fn.is_file()\n\n        # we ignore FileNotFoundError\n        exc_info2 = (FileNotFoundError, FileNotFoundError(), None)\n        assert not on_rm_rf_error(None, str(fn), exc_info2, start_path=tmp_path)\n\n        # unknown function\n        with pytest.warns(\n            pytest.PytestWarning,\n            match=r\"^\\(rm_rf\\) unknown function None when removing .*foo.txt:\\n<class 'PermissionError'>: \",\n        ):\n            exc_info3 = (PermissionError, PermissionError(), None)\n            on_rm_rf_error(None, str(fn), exc_info3, start_path=tmp_path)\n            assert fn.is_file()\n\n        # ignored function\n        with warnings.catch_warnings(record=True) as w:\n            exc_info4 = PermissionError()\n            on_rm_rf_error(os.open, str(fn), exc_info4, start_path=tmp_path)\n            assert fn.is_file()\n            assert not [x.message for x in w]\n\n        exc_info5 = PermissionError()\n        on_rm_rf_error(os.unlink, str(fn), exc_info5, start_path=tmp_path)\n        assert not fn.is_file()\n\n\ndef attempt_symlink_to(path, to_path):\n    \"\"\"Try to make a symlink from \"path\" to \"to_path\", skipping in case this platform\n    does not support it or we don't have sufficient privileges (common on Windows).\"\"\"\n    try:\n        Path(path).symlink_to(Path(to_path))\n    except OSError:\n        pytest.skip(\"could not create symbolic link\")\n\n\ndef test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n    \"\"\"Integration test for #5524\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import os\n        import stat\n\n        def test(tmp_path):\n            fn = tmp_path / 'foo.txt'\n            fn.write_text('hello', encoding='utf-8')\n            mode = os.stat(str(fn)).st_mode\n            os.chmod(str(fn), mode & ~stat.S_IREAD)\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--basetemp=tmp\")\n    assert result.ret == 0\n    # running a second time and ensure we don't crash\n    result = pytester.runpytest(\"--basetemp=tmp\")\n    assert result.ret == 0\n\n\ndef test_tmp_path_factory_handles_invalid_dir_characters(\n    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n) -> None:\n    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n    # _basetemp / _given_basetemp are cached / set in parallel runs, patch them\n    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n    p = tmp_path_factory.getbasetemp()\n    assert \"pytest-of-unknown\" in str(p)\n\n\n@pytest.mark.skipif(not hasattr(os, \"getuid\"), reason=\"checks unix permissions\")\ndef test_tmp_path_factory_create_directory_with_safe_permissions(\n    tmp_path: Path, monkeypatch: MonkeyPatch\n) -> None:\n    \"\"\"Verify that pytest creates directories under /tmp with private permissions.\"\"\"\n    # Use the test's tmp_path as the system temproot (/tmp).\n    monkeypatch.setenv(\"PYTEST_DEBUG_TEMPROOT\", str(tmp_path))\n    tmp_factory = TempPathFactory(None, 3, \"all\", lambda *args: None, _ispytest=True)\n    basetemp = tmp_factory.getbasetemp()\n\n    # No world-readable permissions.\n    assert (basetemp.stat().st_mode & 0o077) == 0\n    # Parent too (pytest-of-foo).\n    assert (basetemp.parent.stat().st_mode & 0o077) == 0\n\n\n@pytest.mark.skipif(not hasattr(os, \"getuid\"), reason=\"checks unix permissions\")\ndef test_tmp_path_factory_fixes_up_world_readable_permissions(\n    tmp_path: Path, monkeypatch: MonkeyPatch\n) -> None:\n    \"\"\"Verify that if a /tmp/pytest-of-foo directory already exists with\n    world-readable permissions, it is fixed.\n\n    pytest used to mkdir with such permissions, that's why we fix it up.\n    \"\"\"\n    # Use the test's tmp_path as the system temproot (/tmp).\n    monkeypatch.setenv(\"PYTEST_DEBUG_TEMPROOT\", str(tmp_path))\n    tmp_factory = TempPathFactory(None, 3, \"all\", lambda *args: None, _ispytest=True)\n    basetemp = tmp_factory.getbasetemp()\n\n    # Before - simulate bad perms.\n    os.chmod(basetemp.parent, 0o777)\n    assert (basetemp.parent.stat().st_mode & 0o077) != 0\n\n    tmp_factory = TempPathFactory(None, 3, \"all\", lambda *args: None, _ispytest=True)\n    basetemp = tmp_factory.getbasetemp()\n\n    # After - fixed.\n    assert (basetemp.parent.stat().st_mode & 0o077) == 0\n", "testing/test_pathlib.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport errno\nimport importlib.abc\nimport importlib.machinery\nimport os.path\nfrom pathlib import Path\nimport pickle\nimport shutil\nimport sys\nfrom textwrap import dedent\nfrom types import ModuleType\nfrom typing import Any\nfrom typing import Generator\nfrom typing import Iterator\nfrom typing import Sequence\nimport unittest.mock\n\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pathlib import bestrelpath\nfrom _pytest.pathlib import commonpath\nfrom _pytest.pathlib import compute_module_name\nfrom _pytest.pathlib import CouldNotResolvePathError\nfrom _pytest.pathlib import ensure_deletable\nfrom _pytest.pathlib import fnmatch_ex\nfrom _pytest.pathlib import get_extended_length_path_str\nfrom _pytest.pathlib import get_lock_path\nfrom _pytest.pathlib import import_path\nfrom _pytest.pathlib import ImportMode\nfrom _pytest.pathlib import ImportPathMismatchError\nfrom _pytest.pathlib import insert_missing_modules\nfrom _pytest.pathlib import is_importable\nfrom _pytest.pathlib import maybe_delete_a_numbered_dir\nfrom _pytest.pathlib import module_name_from_path\nfrom _pytest.pathlib import resolve_package_path\nfrom _pytest.pathlib import resolve_pkg_root_and_module_name\nfrom _pytest.pathlib import safe_exists\nfrom _pytest.pathlib import symlink_or_skip\nfrom _pytest.pathlib import visit\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import RunResult\nfrom _pytest.tmpdir import TempPathFactory\nimport pytest\n\n\n@pytest.fixture(autouse=True)\ndef autouse_pytester(pytester: Pytester) -> None:\n    \"\"\"\n    Fixture to make pytester() being autouse for all tests in this module.\n\n    pytester makes sure to restore sys.path to its previous state, and many tests in this module\n    import modules and change sys.path because of that, so common module names such as \"test\" or \"test.conftest\"\n    end up leaking to tests in other modules.\n\n    Note: we might consider extracting the sys.path restoration aspect into its own fixture, and apply it\n    to the entire test suite always.\n    \"\"\"\n\n\nclass TestFNMatcherPort:\n    \"\"\"Test our port of py.common.FNMatcher (fnmatch_ex).\"\"\"\n\n    if sys.platform == \"win32\":\n        drv1 = \"c:\"\n        drv2 = \"d:\"\n    else:\n        drv1 = \"/c\"\n        drv2 = \"/d\"\n\n    @pytest.mark.parametrize(\n        \"pattern, path\",\n        [\n            (\"*.py\", \"foo.py\"),\n            (\"*.py\", \"bar/foo.py\"),\n            (\"test_*.py\", \"foo/test_foo.py\"),\n            (\"tests/*.py\", \"tests/foo.py\"),\n            (f\"{drv1}/*.py\", f\"{drv1}/foo.py\"),\n            (f\"{drv1}/foo/*.py\", f\"{drv1}/foo/foo.py\"),\n            (\"tests/**/test*.py\", \"tests/foo/test_foo.py\"),\n            (\"tests/**/doc/test*.py\", \"tests/foo/bar/doc/test_foo.py\"),\n            (\"tests/**/doc/**/test*.py\", \"tests/foo/doc/bar/test_foo.py\"),\n        ],\n    )\n    def test_matching(self, pattern: str, path: str) -> None:\n        assert fnmatch_ex(pattern, path)\n\n    def test_matching_abspath(self) -> None:\n        abspath = os.path.abspath(os.path.join(\"tests/foo.py\"))\n        assert fnmatch_ex(\"tests/foo.py\", abspath)\n\n    @pytest.mark.parametrize(\n        \"pattern, path\",\n        [\n            (\"*.py\", \"foo.pyc\"),\n            (\"*.py\", \"foo/foo.pyc\"),\n            (\"tests/*.py\", \"foo/foo.py\"),\n            (f\"{drv1}/*.py\", f\"{drv2}/foo.py\"),\n            (f\"{drv1}/foo/*.py\", f\"{drv2}/foo/foo.py\"),\n            (\"tests/**/test*.py\", \"tests/foo.py\"),\n            (\"tests/**/test*.py\", \"foo/test_foo.py\"),\n            (\"tests/**/doc/test*.py\", \"tests/foo/bar/doc/foo.py\"),\n            (\"tests/**/doc/test*.py\", \"tests/foo/bar/test_foo.py\"),\n        ],\n    )\n    def test_not_matching(self, pattern: str, path: str) -> None:\n        assert not fnmatch_ex(pattern, path)\n\n\n@pytest.fixture(params=[True, False])\ndef ns_param(request: pytest.FixtureRequest) -> bool:\n    \"\"\"\n    Simple parametrized fixture for tests which call import_path() with consider_namespace_packages\n    using True and False.\n    \"\"\"\n    return bool(request.param)\n\n\nclass TestImportPath:\n    \"\"\"\n\n    Most of the tests here were copied from py lib's tests for \"py.local.path.pyimport\".\n\n    Having our own pyimport-like function is inline with removing py.path dependency in the future.\n    \"\"\"\n\n    @pytest.fixture(scope=\"session\")\n    def path1(self, tmp_path_factory: TempPathFactory) -> Generator[Path, None, None]:\n        path = tmp_path_factory.mktemp(\"path\")\n        self.setuptestfs(path)\n        yield path\n        assert path.joinpath(\"samplefile\").exists()\n\n    @pytest.fixture(autouse=True)\n    def preserve_sys(self):\n        with unittest.mock.patch.dict(sys.modules):\n            with unittest.mock.patch.object(sys, \"path\", list(sys.path)):\n                yield\n\n    def setuptestfs(self, path: Path) -> None:\n        # print \"setting up test fs for\", repr(path)\n        samplefile = path / \"samplefile\"\n        samplefile.write_text(\"samplefile\\n\", encoding=\"utf-8\")\n\n        execfile = path / \"execfile\"\n        execfile.write_text(\"x=42\", encoding=\"utf-8\")\n\n        execfilepy = path / \"execfile.py\"\n        execfilepy.write_text(\"x=42\", encoding=\"utf-8\")\n\n        d = {1: 2, \"hello\": \"world\", \"answer\": 42}\n        path.joinpath(\"samplepickle\").write_bytes(pickle.dumps(d, 1))\n\n        sampledir = path / \"sampledir\"\n        sampledir.mkdir()\n        sampledir.joinpath(\"otherfile\").touch()\n\n        otherdir = path / \"otherdir\"\n        otherdir.mkdir()\n        otherdir.joinpath(\"__init__.py\").touch()\n\n        module_a = otherdir / \"a.py\"\n        module_a.write_text(\"from .b import stuff as result\\n\", encoding=\"utf-8\")\n        module_b = otherdir / \"b.py\"\n        module_b.write_text('stuff=\"got it\"\\n', encoding=\"utf-8\")\n        module_c = otherdir / \"c.py\"\n        module_c.write_text(\n            dedent(\n                \"\"\"\n            import pluggy;\n            import otherdir.a\n            value = otherdir.a.result\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        module_d = otherdir / \"d.py\"\n        module_d.write_text(\n            dedent(\n                \"\"\"\n            import pluggy;\n            from otherdir import a\n            value2 = a.result\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n    def test_smoke_test(self, path1: Path, ns_param: bool) -> None:\n        obj = import_path(\n            path1 / \"execfile.py\", root=path1, consider_namespace_packages=ns_param\n        )\n        assert obj.x == 42\n        assert obj.__name__ == \"execfile\"\n\n    def test_import_path_missing_file(self, path1: Path, ns_param: bool) -> None:\n        with pytest.raises(ImportPathMismatchError):\n            import_path(\n                path1 / \"sampledir\", root=path1, consider_namespace_packages=ns_param\n            )\n\n    def test_renamed_dir_creates_mismatch(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch, ns_param: bool\n    ) -> None:\n        tmp_path.joinpath(\"a\").mkdir()\n        p = tmp_path.joinpath(\"a\", \"test_x123.py\")\n        p.touch()\n        import_path(p, root=tmp_path, consider_namespace_packages=ns_param)\n        tmp_path.joinpath(\"a\").rename(tmp_path.joinpath(\"b\"))\n        with pytest.raises(ImportPathMismatchError):\n            import_path(\n                tmp_path.joinpath(\"b\", \"test_x123.py\"),\n                root=tmp_path,\n                consider_namespace_packages=ns_param,\n            )\n\n        # Errors can be ignored.\n        monkeypatch.setenv(\"PY_IGNORE_IMPORTMISMATCH\", \"1\")\n        import_path(\n            tmp_path.joinpath(\"b\", \"test_x123.py\"),\n            root=tmp_path,\n            consider_namespace_packages=ns_param,\n        )\n\n        # PY_IGNORE_IMPORTMISMATCH=0 does not ignore error.\n        monkeypatch.setenv(\"PY_IGNORE_IMPORTMISMATCH\", \"0\")\n        with pytest.raises(ImportPathMismatchError):\n            import_path(\n                tmp_path.joinpath(\"b\", \"test_x123.py\"),\n                root=tmp_path,\n                consider_namespace_packages=ns_param,\n            )\n\n    def test_messy_name(self, tmp_path: Path, ns_param: bool) -> None:\n        # https://bitbucket.org/hpk42/py-trunk/issue/129\n        path = tmp_path / \"foo__init__.py\"\n        path.touch()\n        module = import_path(path, root=tmp_path, consider_namespace_packages=ns_param)\n        assert module.__name__ == \"foo__init__\"\n\n    def test_dir(self, tmp_path: Path, ns_param: bool) -> None:\n        p = tmp_path / \"hello_123\"\n        p.mkdir()\n        p_init = p / \"__init__.py\"\n        p_init.touch()\n        m = import_path(p, root=tmp_path, consider_namespace_packages=ns_param)\n        assert m.__name__ == \"hello_123\"\n        m = import_path(p_init, root=tmp_path, consider_namespace_packages=ns_param)\n        assert m.__name__ == \"hello_123\"\n\n    def test_a(self, path1: Path, ns_param: bool) -> None:\n        otherdir = path1 / \"otherdir\"\n        mod = import_path(\n            otherdir / \"a.py\", root=path1, consider_namespace_packages=ns_param\n        )\n        assert mod.result == \"got it\"\n        assert mod.__name__ == \"otherdir.a\"\n\n    def test_b(self, path1: Path, ns_param: bool) -> None:\n        otherdir = path1 / \"otherdir\"\n        mod = import_path(\n            otherdir / \"b.py\", root=path1, consider_namespace_packages=ns_param\n        )\n        assert mod.stuff == \"got it\"\n        assert mod.__name__ == \"otherdir.b\"\n\n    def test_c(self, path1: Path, ns_param: bool) -> None:\n        otherdir = path1 / \"otherdir\"\n        mod = import_path(\n            otherdir / \"c.py\", root=path1, consider_namespace_packages=ns_param\n        )\n        assert mod.value == \"got it\"\n\n    def test_d(self, path1: Path, ns_param: bool) -> None:\n        otherdir = path1 / \"otherdir\"\n        mod = import_path(\n            otherdir / \"d.py\", root=path1, consider_namespace_packages=ns_param\n        )\n        assert mod.value2 == \"got it\"\n\n    def test_import_after(self, tmp_path: Path, ns_param: bool) -> None:\n        tmp_path.joinpath(\"xxxpackage\").mkdir()\n        tmp_path.joinpath(\"xxxpackage\", \"__init__.py\").touch()\n        mod1path = tmp_path.joinpath(\"xxxpackage\", \"module1.py\")\n        mod1path.touch()\n        mod1 = import_path(\n            mod1path, root=tmp_path, consider_namespace_packages=ns_param\n        )\n        assert mod1.__name__ == \"xxxpackage.module1\"\n        from xxxpackage import module1\n\n        assert module1 is mod1\n\n    def test_check_filepath_consistency(\n        self, monkeypatch: MonkeyPatch, tmp_path: Path, ns_param: bool\n    ) -> None:\n        name = \"pointsback123\"\n        p = tmp_path.joinpath(name + \".py\")\n        p.touch()\n        with monkeypatch.context() as mp:\n            for ending in (\".pyc\", \".pyo\"):\n                mod = ModuleType(name)\n                pseudopath = tmp_path.joinpath(name + ending)\n                pseudopath.touch()\n                mod.__file__ = str(pseudopath)\n                mp.setitem(sys.modules, name, mod)\n                newmod = import_path(\n                    p, root=tmp_path, consider_namespace_packages=ns_param\n                )\n                assert mod == newmod\n        mod = ModuleType(name)\n        pseudopath = tmp_path.joinpath(name + \"123.py\")\n        pseudopath.touch()\n        mod.__file__ = str(pseudopath)\n        monkeypatch.setitem(sys.modules, name, mod)\n        with pytest.raises(ImportPathMismatchError) as excinfo:\n            import_path(p, root=tmp_path, consider_namespace_packages=ns_param)\n        modname, modfile, orig = excinfo.value.args\n        assert modname == name\n        assert modfile == str(pseudopath)\n        assert orig == p\n        assert issubclass(ImportPathMismatchError, ImportError)\n\n    def test_ensuresyspath_append(self, tmp_path: Path, ns_param: bool) -> None:\n        root1 = tmp_path / \"root1\"\n        root1.mkdir()\n        file1 = root1 / \"x123.py\"\n        file1.touch()\n        assert str(root1) not in sys.path\n        import_path(\n            file1, mode=\"append\", root=tmp_path, consider_namespace_packages=ns_param\n        )\n        assert str(root1) == sys.path[-1]\n        assert str(root1) not in sys.path[:-1]\n\n    def test_invalid_path(self, tmp_path: Path, ns_param: bool) -> None:\n        with pytest.raises(ImportError):\n            import_path(\n                tmp_path / \"invalid.py\",\n                root=tmp_path,\n                consider_namespace_packages=ns_param,\n            )\n\n    @pytest.fixture\n    def simple_module(\n        self, tmp_path: Path, request: pytest.FixtureRequest\n    ) -> Iterator[Path]:\n        name = f\"mymod_{request.node.name}\"\n        fn = tmp_path / f\"_src/tests/{name}.py\"\n        fn.parent.mkdir(parents=True)\n        fn.write_text(\"def foo(x): return 40 + x\", encoding=\"utf-8\")\n        module_name = module_name_from_path(fn, root=tmp_path)\n        yield fn\n        sys.modules.pop(module_name, None)\n\n    def test_importmode_importlib(\n        self,\n        simple_module: Path,\n        tmp_path: Path,\n        request: pytest.FixtureRequest,\n        ns_param: bool,\n    ) -> None:\n        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n        module = import_path(\n            simple_module,\n            mode=\"importlib\",\n            root=tmp_path,\n            consider_namespace_packages=ns_param,\n        )\n        assert module.foo(2) == 42\n        assert str(simple_module.parent) not in sys.path\n        assert module.__name__ in sys.modules\n        assert module.__name__ == f\"_src.tests.mymod_{request.node.name}\"\n        assert \"_src\" in sys.modules\n        assert \"_src.tests\" in sys.modules\n\n    def test_remembers_previous_imports(\n        self, simple_module: Path, tmp_path: Path, ns_param: bool\n    ) -> None:\n        \"\"\"`importlib` mode called remembers previous module (#10341, #10811).\"\"\"\n        module1 = import_path(\n            simple_module,\n            mode=\"importlib\",\n            root=tmp_path,\n            consider_namespace_packages=ns_param,\n        )\n        module2 = import_path(\n            simple_module,\n            mode=\"importlib\",\n            root=tmp_path,\n            consider_namespace_packages=ns_param,\n        )\n        assert module1 is module2\n\n    def test_no_meta_path_found(\n        self,\n        simple_module: Path,\n        monkeypatch: MonkeyPatch,\n        tmp_path: Path,\n        ns_param: bool,\n    ) -> None:\n        \"\"\"Even without any meta_path should still import module.\"\"\"\n        monkeypatch.setattr(sys, \"meta_path\", [])\n        module = import_path(\n            simple_module,\n            mode=\"importlib\",\n            root=tmp_path,\n            consider_namespace_packages=ns_param,\n        )\n        assert module.foo(2) == 42\n\n        # mode='importlib' fails if no spec is found to load the module\n        import importlib.util\n\n        # Force module to be re-imported.\n        del sys.modules[module.__name__]\n\n        monkeypatch.setattr(\n            importlib.util, \"spec_from_file_location\", lambda *args: None\n        )\n        with pytest.raises(ImportError):\n            import_path(\n                simple_module,\n                mode=\"importlib\",\n                root=tmp_path,\n                consider_namespace_packages=False,\n            )\n\n\ndef test_resolve_package_path(tmp_path: Path) -> None:\n    pkg = tmp_path / \"pkg1\"\n    pkg.mkdir()\n    (pkg / \"__init__.py\").touch()\n    (pkg / \"subdir\").mkdir()\n    (pkg / \"subdir/__init__.py\").touch()\n    assert resolve_package_path(pkg) == pkg\n    assert resolve_package_path(pkg / \"subdir/__init__.py\") == pkg\n\n\ndef test_package_unimportable(tmp_path: Path) -> None:\n    pkg = tmp_path / \"pkg1-1\"\n    pkg.mkdir()\n    pkg.joinpath(\"__init__.py\").touch()\n    subdir = pkg / \"subdir\"\n    subdir.mkdir()\n    (pkg / \"subdir/__init__.py\").touch()\n    assert resolve_package_path(subdir) == subdir\n    xyz = subdir / \"xyz.py\"\n    xyz.touch()\n    assert resolve_package_path(xyz) == subdir\n    assert not resolve_package_path(pkg)\n\n\ndef test_access_denied_during_cleanup(tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    \"\"\"Ensure that deleting a numbered dir does not fail because of OSErrors (#4262).\"\"\"\n    path = tmp_path / \"temp-1\"\n    path.mkdir()\n\n    def renamed_failed(*args):\n        raise OSError(\"access denied\")\n\n    monkeypatch.setattr(Path, \"rename\", renamed_failed)\n\n    lock_path = get_lock_path(path)\n    maybe_delete_a_numbered_dir(path)\n    assert not lock_path.is_file()\n\n\ndef test_long_path_during_cleanup(tmp_path: Path) -> None:\n    \"\"\"Ensure that deleting long path works (particularly on Windows (#6775)).\"\"\"\n    path = (tmp_path / (\"a\" * 250)).resolve()\n    if sys.platform == \"win32\":\n        # make sure that the full path is > 260 characters without any\n        # component being over 260 characters\n        assert len(str(path)) > 260\n        extended_path = \"\\\\\\\\?\\\\\" + str(path)\n    else:\n        extended_path = str(path)\n    os.mkdir(extended_path)\n    assert os.path.isdir(extended_path)\n    maybe_delete_a_numbered_dir(path)\n    assert not os.path.isdir(extended_path)\n\n\ndef test_get_extended_length_path_str() -> None:\n    assert get_extended_length_path_str(r\"c:\\foo\") == r\"\\\\?\\c:\\foo\"\n    assert get_extended_length_path_str(r\"\\\\share\\foo\") == r\"\\\\?\\UNC\\share\\foo\"\n    assert get_extended_length_path_str(r\"\\\\?\\UNC\\share\\foo\") == r\"\\\\?\\UNC\\share\\foo\"\n    assert get_extended_length_path_str(r\"\\\\?\\c:\\foo\") == r\"\\\\?\\c:\\foo\"\n\n\ndef test_suppress_error_removing_lock(tmp_path: Path) -> None:\n    \"\"\"ensure_deletable should be resilient if lock file cannot be removed (#5456, #7491)\"\"\"\n    path = tmp_path / \"dir\"\n    path.mkdir()\n    lock = get_lock_path(path)\n    lock.touch()\n    mtime = lock.stat().st_mtime\n\n    with unittest.mock.patch.object(Path, \"unlink\", side_effect=OSError) as m:\n        assert not ensure_deletable(\n            path, consider_lock_dead_if_created_before=mtime + 30\n        )\n        assert m.call_count == 1\n    assert lock.is_file()\n\n    with unittest.mock.patch.object(Path, \"is_file\", side_effect=OSError) as m:\n        assert not ensure_deletable(\n            path, consider_lock_dead_if_created_before=mtime + 30\n        )\n        assert m.call_count == 1\n    assert lock.is_file()\n\n    # check now that we can remove the lock file in normal circumstances\n    assert ensure_deletable(path, consider_lock_dead_if_created_before=mtime + 30)\n    assert not lock.is_file()\n\n\ndef test_bestrelpath() -> None:\n    curdir = Path(\"/foo/bar/baz/path\")\n    assert bestrelpath(curdir, curdir) == \".\"\n    assert bestrelpath(curdir, curdir / \"hello\" / \"world\") == \"hello\" + os.sep + \"world\"\n    assert bestrelpath(curdir, curdir.parent / \"sister\") == \"..\" + os.sep + \"sister\"\n    assert bestrelpath(curdir, curdir.parent) == \"..\"\n    assert bestrelpath(curdir, Path(\"hello\")) == \"hello\"\n\n\ndef test_commonpath() -> None:\n    path = Path(\"/foo/bar/baz/path\")\n    subpath = path / \"sampledir\"\n    assert commonpath(path, subpath) == path\n    assert commonpath(subpath, path) == path\n    assert commonpath(Path(str(path) + \"suffix\"), path) == path.parent\n    assert commonpath(path, path.parent.parent) == path.parent.parent\n\n\ndef test_visit_ignores_errors(tmp_path: Path) -> None:\n    symlink_or_skip(\"recursive\", tmp_path / \"recursive\")\n    tmp_path.joinpath(\"foo\").write_bytes(b\"\")\n    tmp_path.joinpath(\"bar\").write_bytes(b\"\")\n\n    assert [\n        entry.name for entry in visit(str(tmp_path), recurse=lambda entry: False)\n    ] == [\"bar\", \"foo\"]\n\n\n@pytest.mark.skipif(not sys.platform.startswith(\"win\"), reason=\"Windows only\")\ndef test_samefile_false_negatives(tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    \"\"\"\n    import_file() should not raise ImportPathMismatchError if the paths are exactly\n    equal on Windows. It seems directories mounted as UNC paths make os.path.samefile\n    return False, even when they are clearly equal.\n    \"\"\"\n    module_path = tmp_path.joinpath(\"my_module.py\")\n    module_path.write_text(\"def foo(): return 42\", encoding=\"utf-8\")\n    monkeypatch.syspath_prepend(tmp_path)\n\n    with monkeypatch.context() as mp:\n        # Forcibly make os.path.samefile() return False here to ensure we are comparing\n        # the paths too. Using a context to narrow the patch as much as possible given\n        # this is an important system function.\n        mp.setattr(os.path, \"samefile\", lambda x, y: False)\n        module = import_path(\n            module_path, root=tmp_path, consider_namespace_packages=False\n        )\n    assert getattr(module, \"foo\")() == 42\n\n\nclass TestImportLibMode:\n    def test_importmode_importlib_with_dataclass(\n        self, tmp_path: Path, ns_param: bool\n    ) -> None:\n        \"\"\"Ensure that importlib mode works with a module containing dataclasses (#7856).\"\"\"\n        fn = tmp_path.joinpath(\"_src/tests/test_dataclass.py\")\n        fn.parent.mkdir(parents=True)\n        fn.write_text(\n            dedent(\n                \"\"\"\n                from dataclasses import dataclass\n\n                @dataclass\n                class Data:\n                    value: str\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        module = import_path(\n            fn, mode=\"importlib\", root=tmp_path, consider_namespace_packages=ns_param\n        )\n        Data: Any = getattr(module, \"Data\")\n        data = Data(value=\"foo\")\n        assert data.value == \"foo\"\n        assert data.__module__ == \"_src.tests.test_dataclass\"\n\n        # Ensure we do not import the same module again (#11475).\n        module2 = import_path(\n            fn, mode=\"importlib\", root=tmp_path, consider_namespace_packages=ns_param\n        )\n        assert module is module2\n\n    def test_importmode_importlib_with_pickle(\n        self, tmp_path: Path, ns_param: bool\n    ) -> None:\n        \"\"\"Ensure that importlib mode works with pickle (#7859).\"\"\"\n        fn = tmp_path.joinpath(\"_src/tests/test_pickle.py\")\n        fn.parent.mkdir(parents=True)\n        fn.write_text(\n            dedent(\n                \"\"\"\n                import pickle\n\n                def _action():\n                    return 42\n\n                def round_trip():\n                    s = pickle.dumps(_action)\n                    return pickle.loads(s)\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        module = import_path(\n            fn, mode=\"importlib\", root=tmp_path, consider_namespace_packages=ns_param\n        )\n        round_trip = getattr(module, \"round_trip\")\n        action = round_trip()\n        assert action() == 42\n\n        # Ensure we do not import the same module again (#11475).\n        module2 = import_path(\n            fn, mode=\"importlib\", root=tmp_path, consider_namespace_packages=ns_param\n        )\n        assert module is module2\n\n    def test_importmode_importlib_with_pickle_separate_modules(\n        self, tmp_path: Path, ns_param: bool\n    ) -> None:\n        \"\"\"\n        Ensure that importlib mode works can load pickles that look similar but are\n        defined in separate modules.\n        \"\"\"\n        fn1 = tmp_path.joinpath(\"_src/m1/tests/test.py\")\n        fn1.parent.mkdir(parents=True)\n        fn1.write_text(\n            dedent(\n                \"\"\"\n                import dataclasses\n                import pickle\n\n                @dataclasses.dataclass\n                class Data:\n                    x: int = 42\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        fn2 = tmp_path.joinpath(\"_src/m2/tests/test.py\")\n        fn2.parent.mkdir(parents=True)\n        fn2.write_text(\n            dedent(\n                \"\"\"\n                import dataclasses\n                import pickle\n\n                @dataclasses.dataclass\n                class Data:\n                    x: str = \"\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        import pickle\n\n        def round_trip(obj):\n            s = pickle.dumps(obj)\n            return pickle.loads(s)\n\n        module = import_path(\n            fn1, mode=\"importlib\", root=tmp_path, consider_namespace_packages=ns_param\n        )\n        Data1 = getattr(module, \"Data\")\n\n        module = import_path(\n            fn2, mode=\"importlib\", root=tmp_path, consider_namespace_packages=ns_param\n        )\n        Data2 = getattr(module, \"Data\")\n\n        assert round_trip(Data1(20)) == Data1(20)\n        assert round_trip(Data2(\"hello\")) == Data2(\"hello\")\n        assert Data1.__module__ == \"_src.m1.tests.test\"\n        assert Data2.__module__ == \"_src.m2.tests.test\"\n\n    def test_module_name_from_path(self, tmp_path: Path) -> None:\n        result = module_name_from_path(tmp_path / \"src/tests/test_foo.py\", tmp_path)\n        assert result == \"src.tests.test_foo\"\n\n        # Path is not relative to root dir: use the full path to obtain the module name.\n        result = module_name_from_path(Path(\"/home/foo/test_foo.py\"), Path(\"/bar\"))\n        assert result == \"home.foo.test_foo\"\n\n        # Importing __init__.py files should return the package as module name.\n        result = module_name_from_path(tmp_path / \"src/app/__init__.py\", tmp_path)\n        assert result == \"src.app\"\n\n        # Unless __init__.py file is at the root, in which case we cannot have an empty module name.\n        result = module_name_from_path(tmp_path / \"__init__.py\", tmp_path)\n        assert result == \"__init__\"\n\n        # Modules which start with \".\" are considered relative and will not be imported\n        # unless part of a package, so we replace it with a \"_\" when generating the fake module name.\n        result = module_name_from_path(tmp_path / \".env/tests/test_foo.py\", tmp_path)\n        assert result == \"_env.tests.test_foo\"\n\n        # We want to avoid generating extra intermediate modules if some directory just happens\n        # to contain a \".\" in the name.\n        result = module_name_from_path(\n            tmp_path / \".env.310/tests/test_foo.py\", tmp_path\n        )\n        assert result == \"_env_310.tests.test_foo\"\n\n    def test_resolve_pkg_root_and_module_name(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch, pytester: Pytester\n    ) -> None:\n        # Create a directory structure first without __init__.py files.\n        (tmp_path / \"src/app/core\").mkdir(parents=True)\n        models_py = tmp_path / \"src/app/core/models.py\"\n        models_py.touch()\n\n        with pytest.raises(CouldNotResolvePathError):\n            _ = resolve_pkg_root_and_module_name(models_py)\n\n        # Create the __init__.py files, it should now resolve to a proper module name.\n        (tmp_path / \"src/app/__init__.py\").touch()\n        (tmp_path / \"src/app/core/__init__.py\").touch()\n        assert resolve_pkg_root_and_module_name(\n            models_py, consider_namespace_packages=True\n        ) == (\n            tmp_path / \"src\",\n            \"app.core.models\",\n        )\n\n        # If we add tmp_path to sys.path, src becomes a namespace package.\n        monkeypatch.syspath_prepend(tmp_path)\n        validate_namespace_package(pytester, [tmp_path], [\"src.app.core.models\"])\n\n        assert resolve_pkg_root_and_module_name(\n            models_py, consider_namespace_packages=True\n        ) == (\n            tmp_path,\n            \"src.app.core.models\",\n        )\n        assert resolve_pkg_root_and_module_name(\n            models_py, consider_namespace_packages=False\n        ) == (\n            tmp_path / \"src\",\n            \"app.core.models\",\n        )\n\n    def test_insert_missing_modules(\n        self, monkeypatch: MonkeyPatch, tmp_path: Path\n    ) -> None:\n        monkeypatch.chdir(tmp_path)\n        # Use 'xxx' and 'xxy' as parent names as they are unlikely to exist and\n        # don't end up being imported.\n        modules = {\"xxx.tests.foo\": ModuleType(\"xxx.tests.foo\")}\n        insert_missing_modules(modules, \"xxx.tests.foo\")\n        assert sorted(modules) == [\"xxx\", \"xxx.tests\", \"xxx.tests.foo\"]\n\n        mod = ModuleType(\"mod\", doc=\"My Module\")\n        modules = {\"xxy\": mod}\n        insert_missing_modules(modules, \"xxy\")\n        assert modules == {\"xxy\": mod}\n\n        modules = {}\n        insert_missing_modules(modules, \"\")\n        assert modules == {}\n\n    def test_parent_contains_child_module_attribute(\n        self, monkeypatch: MonkeyPatch, tmp_path: Path\n    ):\n        monkeypatch.chdir(tmp_path)\n        # Use 'xxx' and 'xxy' as parent names as they are unlikely to exist and\n        # don't end up being imported.\n        modules = {\"xxx.tests.foo\": ModuleType(\"xxx.tests.foo\")}\n        insert_missing_modules(modules, \"xxx.tests.foo\")\n        assert sorted(modules) == [\"xxx\", \"xxx.tests\", \"xxx.tests.foo\"]\n        assert modules[\"xxx\"].tests is modules[\"xxx.tests\"]\n        assert modules[\"xxx.tests\"].foo is modules[\"xxx.tests.foo\"]\n\n    def test_importlib_package(\n        self, monkeypatch: MonkeyPatch, tmp_path: Path, ns_param: bool\n    ):\n        \"\"\"\n        Importing a package using --importmode=importlib should not import the\n        package's __init__.py file more than once (#11306).\n        \"\"\"\n        monkeypatch.chdir(tmp_path)\n        monkeypatch.syspath_prepend(tmp_path)\n\n        package_name = \"importlib_import_package\"\n        tmp_path.joinpath(package_name).mkdir()\n        init = tmp_path.joinpath(f\"{package_name}/__init__.py\")\n        init.write_text(\n            dedent(\n                \"\"\"\n                from .singleton import Singleton\n\n                instance = Singleton()\n                \"\"\"\n            ),\n            encoding=\"ascii\",\n        )\n        singleton = tmp_path.joinpath(f\"{package_name}/singleton.py\")\n        singleton.write_text(\n            dedent(\n                \"\"\"\n                class Singleton:\n                    INSTANCES = []\n\n                    def __init__(self) -> None:\n                        self.INSTANCES.append(self)\n                        if len(self.INSTANCES) > 1:\n                            raise RuntimeError(\"Already initialized\")\n                \"\"\"\n            ),\n            encoding=\"ascii\",\n        )\n\n        mod = import_path(\n            init,\n            root=tmp_path,\n            mode=ImportMode.importlib,\n            consider_namespace_packages=ns_param,\n        )\n        assert len(mod.instance.INSTANCES) == 1\n        # Ensure we do not import the same module again (#11475).\n        mod2 = import_path(\n            init,\n            root=tmp_path,\n            mode=ImportMode.importlib,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod is mod2\n\n    def test_importlib_root_is_package(self, pytester: Pytester) -> None:\n        \"\"\"\n        Regression for importing a `__init__`.py file that is at the root\n        (#11417).\n        \"\"\"\n        pytester.makepyfile(__init__=\"\")\n        pytester.makepyfile(\n            \"\"\"\n            def test_my_test():\n                assert True\n            \"\"\"\n        )\n\n        result = pytester.runpytest(\"--import-mode=importlib\")\n        result.stdout.fnmatch_lines(\"* 1 passed *\")\n\n    def create_installed_doctests_and_tests_dir(\n        self, path: Path, monkeypatch: MonkeyPatch\n    ) -> tuple[Path, Path, Path]:\n        \"\"\"\n        Create a directory structure where the application code is installed in a virtual environment,\n        and the tests are in an outside \".tests\" directory.\n\n        Return the paths to the core module (installed in the virtualenv), and the test modules.\n        \"\"\"\n        app = path / \"src/app\"\n        app.mkdir(parents=True)\n        (app / \"__init__.py\").touch()\n        core_py = app / \"core.py\"\n        core_py.write_text(\n            dedent(\n                \"\"\"\n                def foo():\n                    '''\n                    >>> 1 + 1\n                    2\n                    '''\n                \"\"\"\n            ),\n            encoding=\"ascii\",\n        )\n\n        # Install it into a site-packages directory, and add it to sys.path, mimicking what\n        # happens when installing into a virtualenv.\n        site_packages = path / \".env/lib/site-packages\"\n        site_packages.mkdir(parents=True)\n        shutil.copytree(app, site_packages / \"app\")\n        assert (site_packages / \"app/core.py\").is_file()\n\n        monkeypatch.syspath_prepend(site_packages)\n\n        # Create the tests files, outside 'src' and the virtualenv.\n        # We use the same test name on purpose, but in different directories, to ensure\n        # this works as advertised.\n        conftest_path1 = path / \".tests/a/conftest.py\"\n        conftest_path1.parent.mkdir(parents=True)\n        conftest_path1.write_text(\n            dedent(\n                \"\"\"\n                import pytest\n                @pytest.fixture\n                def a_fix(): return \"a\"\n                \"\"\"\n            ),\n            encoding=\"ascii\",\n        )\n        test_path1 = path / \".tests/a/test_core.py\"\n        test_path1.write_text(\n            dedent(\n                \"\"\"\n                import app.core\n                def test(a_fix):\n                    assert a_fix == \"a\"\n                \"\"\",\n            ),\n            encoding=\"ascii\",\n        )\n\n        conftest_path2 = path / \".tests/b/conftest.py\"\n        conftest_path2.parent.mkdir(parents=True)\n        conftest_path2.write_text(\n            dedent(\n                \"\"\"\n                import pytest\n                @pytest.fixture\n                def b_fix(): return \"b\"\n                \"\"\"\n            ),\n            encoding=\"ascii\",\n        )\n\n        test_path2 = path / \".tests/b/test_core.py\"\n        test_path2.write_text(\n            dedent(\n                \"\"\"\n                import app.core\n                def test(b_fix):\n                    assert b_fix == \"b\"\n                \"\"\",\n            ),\n            encoding=\"ascii\",\n        )\n        return (site_packages / \"app/core.py\"), test_path1, test_path2\n\n    def test_import_using_normal_mechanism_first(\n        self, monkeypatch: MonkeyPatch, pytester: Pytester, ns_param: bool\n    ) -> None:\n        \"\"\"\n        Test import_path imports from the canonical location when possible first, only\n        falling back to its normal flow when the module being imported is not reachable via sys.path (#11475).\n        \"\"\"\n        core_py, test_path1, test_path2 = self.create_installed_doctests_and_tests_dir(\n            pytester.path, monkeypatch\n        )\n\n        # core_py is reached from sys.path, so should be imported normally.\n        mod = import_path(\n            core_py,\n            mode=\"importlib\",\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod.__name__ == \"app.core\"\n        assert mod.__file__ and Path(mod.__file__) == core_py\n\n        # Ensure we do not import the same module again (#11475).\n        mod2 = import_path(\n            core_py,\n            mode=\"importlib\",\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod is mod2\n\n        # tests are not reachable from sys.path, so they are imported as a standalone modules.\n        # Instead of '.tests.a.test_core', we import as \"_tests.a.test_core\" because\n        # importlib considers module names starting with '.' to be local imports.\n        mod = import_path(\n            test_path1,\n            mode=\"importlib\",\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod.__name__ == \"_tests.a.test_core\"\n\n        # Ensure we do not import the same module again (#11475).\n        mod2 = import_path(\n            test_path1,\n            mode=\"importlib\",\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod is mod2\n\n        mod = import_path(\n            test_path2,\n            mode=\"importlib\",\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod.__name__ == \"_tests.b.test_core\"\n\n        # Ensure we do not import the same module again (#11475).\n        mod2 = import_path(\n            test_path2,\n            mode=\"importlib\",\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod is mod2\n\n    def test_import_using_normal_mechanism_first_integration(\n        self, monkeypatch: MonkeyPatch, pytester: Pytester, ns_param: bool\n    ) -> None:\n        \"\"\"\n        Same test as above, but verify the behavior calling pytest.\n\n        We should not make this call in the same test as above, as the modules have already\n        been imported by separate import_path() calls.\n        \"\"\"\n        core_py, test_path1, test_path2 = self.create_installed_doctests_and_tests_dir(\n            pytester.path, monkeypatch\n        )\n        result = pytester.runpytest(\n            \"--import-mode=importlib\",\n            \"-o\",\n            f\"consider_namespace_packages={ns_param}\",\n            \"--doctest-modules\",\n            \"--pyargs\",\n            \"app\",\n            \"./.tests\",\n        )\n        result.stdout.fnmatch_lines(\n            [\n                f\"{core_py.relative_to(pytester.path)} . *\",\n                f\"{test_path1.relative_to(pytester.path)} . *\",\n                f\"{test_path2.relative_to(pytester.path)} . *\",\n                \"* 3 passed*\",\n            ]\n        )\n\n    def test_import_path_imports_correct_file(\n        self, pytester: Pytester, ns_param: bool\n    ) -> None:\n        \"\"\"\n        Import the module by the given path, even if other module with the same name\n        is reachable from sys.path.\n        \"\"\"\n        pytester.syspathinsert()\n        # Create a 'x.py' module reachable from sys.path that raises AssertionError\n        # if imported.\n        x_at_root = pytester.path / \"x.py\"\n        x_at_root.write_text(\"raise AssertionError('x at root')\", encoding=\"ascii\")\n\n        # Create another x.py module, but in some subdirectories to ensure it is not\n        # accessible from sys.path.\n        x_in_sub_folder = pytester.path / \"a/b/x.py\"\n        x_in_sub_folder.parent.mkdir(parents=True)\n        x_in_sub_folder.write_text(\"X = 'a/b/x'\", encoding=\"ascii\")\n\n        # Import our x.py module from the subdirectories.\n        # The 'x.py' module from sys.path was not imported for sure because\n        # otherwise we would get an AssertionError.\n        mod = import_path(\n            x_in_sub_folder,\n            mode=ImportMode.importlib,\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod.__file__ and Path(mod.__file__) == x_in_sub_folder\n        assert mod.X == \"a/b/x\"\n\n        mod2 = import_path(\n            x_in_sub_folder,\n            mode=ImportMode.importlib,\n            root=pytester.path,\n            consider_namespace_packages=ns_param,\n        )\n        assert mod is mod2\n\n        # Attempt to import root 'x.py'.\n        with pytest.raises(AssertionError, match=\"x at root\"):\n            _ = import_path(\n                x_at_root,\n                mode=ImportMode.importlib,\n                root=pytester.path,\n                consider_namespace_packages=ns_param,\n            )\n\n\ndef test_safe_exists(tmp_path: Path) -> None:\n    d = tmp_path.joinpath(\"some_dir\")\n    d.mkdir()\n    assert safe_exists(d) is True\n\n    f = tmp_path.joinpath(\"some_file\")\n    f.touch()\n    assert safe_exists(f) is True\n\n    # Use unittest.mock() as a context manager to have a very narrow\n    # patch lifetime.\n    p = tmp_path.joinpath(\"some long filename\" * 100)\n    with unittest.mock.patch.object(\n        Path,\n        \"exists\",\n        autospec=True,\n        side_effect=OSError(errno.ENAMETOOLONG, \"name too long\"),\n    ):\n        assert safe_exists(p) is False\n\n    with unittest.mock.patch.object(\n        Path,\n        \"exists\",\n        autospec=True,\n        side_effect=ValueError(\"name too long\"),\n    ):\n        assert safe_exists(p) is False\n\n\ndef test_import_sets_module_as_attribute(pytester: Pytester) -> None:\n    \"\"\"Unittest test for #12194.\"\"\"\n    pytester.path.joinpath(\"foo/bar/baz\").mkdir(parents=True)\n    pytester.path.joinpath(\"foo/__init__.py\").touch()\n    pytester.path.joinpath(\"foo/bar/__init__.py\").touch()\n    pytester.path.joinpath(\"foo/bar/baz/__init__.py\").touch()\n    pytester.syspathinsert()\n\n    # Import foo.bar.baz and ensure parent modules also ended up imported.\n    baz = import_path(\n        pytester.path.joinpath(\"foo/bar/baz/__init__.py\"),\n        mode=ImportMode.importlib,\n        root=pytester.path,\n        consider_namespace_packages=False,\n    )\n    assert baz.__name__ == \"foo.bar.baz\"\n    foo = sys.modules[\"foo\"]\n    assert foo.__name__ == \"foo\"\n    bar = sys.modules[\"foo.bar\"]\n    assert bar.__name__ == \"foo.bar\"\n\n    # Check parent modules have an attribute pointing to their children.\n    assert bar.baz is baz\n    assert foo.bar is bar\n\n    # Ensure we returned the \"foo.bar\" module cached in sys.modules.\n    bar_2 = import_path(\n        pytester.path.joinpath(\"foo/bar/__init__.py\"),\n        mode=ImportMode.importlib,\n        root=pytester.path,\n        consider_namespace_packages=False,\n    )\n    assert bar_2 is bar\n\n\ndef test_import_sets_module_as_attribute_without_init_files(pytester: Pytester) -> None:\n    \"\"\"Similar to test_import_sets_module_as_attribute, but without __init__.py files.\"\"\"\n    pytester.path.joinpath(\"foo/bar\").mkdir(parents=True)\n    pytester.path.joinpath(\"foo/bar/baz.py\").touch()\n    pytester.syspathinsert()\n\n    # Import foo.bar.baz and ensure parent modules also ended up imported.\n    baz = import_path(\n        pytester.path.joinpath(\"foo/bar/baz.py\"),\n        mode=ImportMode.importlib,\n        root=pytester.path,\n        consider_namespace_packages=False,\n    )\n    assert baz.__name__ == \"foo.bar.baz\"\n    foo = sys.modules[\"foo\"]\n    assert foo.__name__ == \"foo\"\n    bar = sys.modules[\"foo.bar\"]\n    assert bar.__name__ == \"foo.bar\"\n\n    # Check parent modules have an attribute pointing to their children.\n    assert bar.baz is baz\n    assert foo.bar is bar\n\n    # Ensure we returned the \"foo.bar.baz\" module cached in sys.modules.\n    baz_2 = import_path(\n        pytester.path.joinpath(\"foo/bar/baz.py\"),\n        mode=ImportMode.importlib,\n        root=pytester.path,\n        consider_namespace_packages=False,\n    )\n    assert baz_2 is baz\n\n\ndef test_import_sets_module_as_attribute_regression(pytester: Pytester) -> None:\n    \"\"\"Regression test for #12194.\"\"\"\n    pytester.path.joinpath(\"foo/bar/baz\").mkdir(parents=True)\n    pytester.path.joinpath(\"foo/__init__.py\").touch()\n    pytester.path.joinpath(\"foo/bar/__init__.py\").touch()\n    pytester.path.joinpath(\"foo/bar/baz/__init__.py\").touch()\n    f = pytester.makepyfile(\n        \"\"\"\n        import foo\n        from foo.bar import baz\n        foo.bar.baz\n\n        def test_foo() -> None:\n            pass\n        \"\"\"\n    )\n\n    pytester.syspathinsert()\n    result = pytester.runpython(f)\n    assert result.ret == 0\n\n    result = pytester.runpytest(\"--import-mode=importlib\", \"--doctest-modules\")\n    assert result.ret == 0\n\n\ndef test_import_submodule_not_namespace(pytester: Pytester) -> None:\n    \"\"\"\n    Regression test for importing a submodule 'foo.bar' while there is a 'bar' directory\n    reachable from sys.path -- ensuring the top-level module does not end up imported as a namespace\n    package.\n\n    #12194\n    https://github.com/pytest-dev/pytest/pull/12208#issuecomment-2056458432\n    \"\"\"\n    pytester.syspathinsert()\n    # Create package 'foo' with a submodule 'bar'.\n    pytester.path.joinpath(\"foo\").mkdir()\n    foo_path = pytester.path.joinpath(\"foo/__init__.py\")\n    foo_path.touch()\n    bar_path = pytester.path.joinpath(\"foo/bar.py\")\n    bar_path.touch()\n    # Create top-level directory in `sys.path` with the same name as that submodule.\n    pytester.path.joinpath(\"bar\").mkdir()\n\n    # Import `foo`, then `foo.bar`, and check they were imported from the correct location.\n    foo = import_path(\n        foo_path,\n        mode=ImportMode.importlib,\n        root=pytester.path,\n        consider_namespace_packages=False,\n    )\n    bar = import_path(\n        bar_path,\n        mode=ImportMode.importlib,\n        root=pytester.path,\n        consider_namespace_packages=False,\n    )\n    assert foo.__name__ == \"foo\"\n    assert bar.__name__ == \"foo.bar\"\n    assert foo.__file__ is not None\n    assert bar.__file__ is not None\n    assert Path(foo.__file__) == foo_path\n    assert Path(bar.__file__) == bar_path\n\n\nclass TestNamespacePackages:\n    \"\"\"Test import_path support when importing from properly namespace packages.\"\"\"\n\n    @pytest.fixture(autouse=True)\n    def setup_imports_tracking(self, monkeypatch: MonkeyPatch) -> None:\n        monkeypatch.setattr(sys, \"pytest_namespace_packages_test\", [], raising=False)\n\n    def setup_directories(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch | None, pytester: Pytester\n    ) -> tuple[Path, Path]:\n        # Use a code to guard against modules being imported more than once.\n        # This is a safeguard in case future changes break this invariant.\n        code = dedent(\n            \"\"\"\n            import sys\n            imported = getattr(sys, \"pytest_namespace_packages_test\", [])\n            assert __name__ not in imported, f\"{__name__} already imported\"\n            imported.append(__name__)\n            sys.pytest_namespace_packages_test = imported\n            \"\"\"\n        )\n\n        # Set up a namespace package \"com.company\", containing\n        # two subpackages, \"app\" and \"calc\".\n        (tmp_path / \"src/dist1/com/company/app/core\").mkdir(parents=True)\n        (tmp_path / \"src/dist1/com/company/app/__init__.py\").write_text(\n            code, encoding=\"UTF-8\"\n        )\n        (tmp_path / \"src/dist1/com/company/app/core/__init__.py\").write_text(\n            code, encoding=\"UTF-8\"\n        )\n        models_py = tmp_path / \"src/dist1/com/company/app/core/models.py\"\n        models_py.touch()\n\n        (tmp_path / \"src/dist2/com/company/calc/algo\").mkdir(parents=True)\n        (tmp_path / \"src/dist2/com/company/calc/__init__.py\").write_text(\n            code, encoding=\"UTF-8\"\n        )\n        (tmp_path / \"src/dist2/com/company/calc/algo/__init__.py\").write_text(\n            code, encoding=\"UTF-8\"\n        )\n        algorithms_py = tmp_path / \"src/dist2/com/company/calc/algo/algorithms.py\"\n        algorithms_py.write_text(code, encoding=\"UTF-8\")\n\n        r = validate_namespace_package(\n            pytester,\n            [tmp_path / \"src/dist1\", tmp_path / \"src/dist2\"],\n            [\"com.company.app.core.models\", \"com.company.calc.algo.algorithms\"],\n        )\n        assert r.ret == 0\n        if monkeypatch is not None:\n            monkeypatch.syspath_prepend(tmp_path / \"src/dist1\")\n            monkeypatch.syspath_prepend(tmp_path / \"src/dist2\")\n        return models_py, algorithms_py\n\n    @pytest.mark.parametrize(\"import_mode\", [\"prepend\", \"append\", \"importlib\"])\n    def test_resolve_pkg_root_and_module_name_ns_multiple_levels(\n        self,\n        tmp_path: Path,\n        monkeypatch: MonkeyPatch,\n        pytester: Pytester,\n        import_mode: str,\n    ) -> None:\n        models_py, algorithms_py = self.setup_directories(\n            tmp_path, monkeypatch, pytester\n        )\n\n        pkg_root, module_name = resolve_pkg_root_and_module_name(\n            models_py, consider_namespace_packages=True\n        )\n        assert (pkg_root, module_name) == (\n            tmp_path / \"src/dist1\",\n            \"com.company.app.core.models\",\n        )\n\n        mod = import_path(\n            models_py, mode=import_mode, root=tmp_path, consider_namespace_packages=True\n        )\n        assert mod.__name__ == \"com.company.app.core.models\"\n        assert mod.__file__ == str(models_py)\n\n        # Ensure we do not import the same module again (#11475).\n        mod2 = import_path(\n            models_py, mode=import_mode, root=tmp_path, consider_namespace_packages=True\n        )\n        assert mod is mod2\n\n        pkg_root, module_name = resolve_pkg_root_and_module_name(\n            algorithms_py, consider_namespace_packages=True\n        )\n        assert (pkg_root, module_name) == (\n            tmp_path / \"src/dist2\",\n            \"com.company.calc.algo.algorithms\",\n        )\n\n        mod = import_path(\n            algorithms_py,\n            mode=import_mode,\n            root=tmp_path,\n            consider_namespace_packages=True,\n        )\n        assert mod.__name__ == \"com.company.calc.algo.algorithms\"\n        assert mod.__file__ == str(algorithms_py)\n\n        # Ensure we do not import the same module again (#11475).\n        mod2 = import_path(\n            algorithms_py,\n            mode=import_mode,\n            root=tmp_path,\n            consider_namespace_packages=True,\n        )\n        assert mod is mod2\n\n    @pytest.mark.parametrize(\"import_mode\", [\"prepend\", \"append\", \"importlib\"])\n    def test_incorrect_namespace_package(\n        self,\n        tmp_path: Path,\n        monkeypatch: MonkeyPatch,\n        pytester: Pytester,\n        import_mode: str,\n    ) -> None:\n        models_py, algorithms_py = self.setup_directories(\n            tmp_path, monkeypatch, pytester\n        )\n        # Namespace packages must not have an __init__.py at its top-level\n        # directory; if it does, it is no longer a namespace package, and we fall back\n        # to importing just the part of the package containing the __init__.py files.\n        (tmp_path / \"src/dist1/com/__init__.py\").touch()\n\n        # Because of the __init__ file, 'com' is no longer a namespace package:\n        # 'com.company.app' is importable as a normal module.\n        # 'com.company.calc' is no longer importable because 'com' is not a namespace package anymore.\n        r = validate_namespace_package(\n            pytester,\n            [tmp_path / \"src/dist1\", tmp_path / \"src/dist2\"],\n            [\"com.company.app.core.models\", \"com.company.calc.algo.algorithms\"],\n        )\n        assert r.ret == 1\n        r.stderr.fnmatch_lines(\"*No module named 'com.company.calc*\")\n\n        pkg_root, module_name = resolve_pkg_root_and_module_name(\n            models_py, consider_namespace_packages=True\n        )\n        assert (pkg_root, module_name) == (\n            tmp_path / \"src/dist1\",\n            \"com.company.app.core.models\",\n        )\n\n        # dist2/com/company will contain a normal Python package.\n        pkg_root, module_name = resolve_pkg_root_and_module_name(\n            algorithms_py, consider_namespace_packages=True\n        )\n        assert (pkg_root, module_name) == (\n            tmp_path / \"src/dist2/com/company\",\n            \"calc.algo.algorithms\",\n        )\n\n    def test_detect_meta_path(\n        self,\n        tmp_path: Path,\n        monkeypatch: MonkeyPatch,\n        pytester: Pytester,\n    ) -> None:\n        \"\"\"\n        resolve_pkg_root_and_module_name() considers sys.meta_path when importing namespace packages.\n\n        Regression test for #12112.\n        \"\"\"\n\n        class CustomImporter(importlib.abc.MetaPathFinder):\n            \"\"\"\n            Imports the module name \"com\" as a namespace package.\n\n            This ensures our namespace detection considers sys.meta_path, which is important\n            to support all possible ways a module can be imported (for example editable installs).\n            \"\"\"\n\n            def find_spec(\n                self, name: str, path: Any = None, target: Any = None\n            ) -> importlib.machinery.ModuleSpec | None:\n                if name == \"com\":\n                    spec = importlib.machinery.ModuleSpec(\"com\", loader=None)\n                    spec.submodule_search_locations = [str(com_root_2), str(com_root_1)]\n                    return spec\n                return None\n\n        # Setup directories without configuring sys.path.\n        models_py, algorithms_py = self.setup_directories(\n            tmp_path, monkeypatch=None, pytester=pytester\n        )\n        com_root_1 = tmp_path / \"src/dist1/com\"\n        com_root_2 = tmp_path / \"src/dist2/com\"\n\n        # Because the namespace package is not setup correctly, we cannot resolve it as a namespace package.\n        pkg_root, module_name = resolve_pkg_root_and_module_name(\n            models_py, consider_namespace_packages=True\n        )\n        assert (pkg_root, module_name) == (\n            tmp_path / \"src/dist1/com/company\",\n            \"app.core.models\",\n        )\n\n        # Insert our custom importer, which will recognize the \"com\" directory as a namespace package.\n        new_meta_path = [CustomImporter(), *sys.meta_path]\n        monkeypatch.setattr(sys, \"meta_path\", new_meta_path)\n\n        # Now we should be able to resolve the path as namespace package.\n        pkg_root, module_name = resolve_pkg_root_and_module_name(\n            models_py, consider_namespace_packages=True\n        )\n        assert (pkg_root, module_name) == (\n            tmp_path / \"src/dist1\",\n            \"com.company.app.core.models\",\n        )\n\n    @pytest.mark.parametrize(\"insert\", [True, False])\n    def test_full_ns_packages_without_init_files(\n        self, pytester: Pytester, tmp_path: Path, monkeypatch: MonkeyPatch, insert: bool\n    ) -> None:\n        (tmp_path / \"src/dist1/ns/b/app/bar/test\").mkdir(parents=True)\n        (tmp_path / \"src/dist1/ns/b/app/bar/m.py\").touch()\n\n        if insert:\n            # The presence of this __init__.py is not a problem, ns.b.app is still part of the namespace package.\n            (tmp_path / \"src/dist1/ns/b/app/__init__.py\").touch()\n\n        (tmp_path / \"src/dist2/ns/a/core/foo/test\").mkdir(parents=True)\n        (tmp_path / \"src/dist2/ns/a/core/foo/m.py\").touch()\n\n        # Validate the namespace package by importing it in a Python subprocess.\n        r = validate_namespace_package(\n            pytester,\n            [tmp_path / \"src/dist1\", tmp_path / \"src/dist2\"],\n            [\"ns.b.app.bar.m\", \"ns.a.core.foo.m\"],\n        )\n        assert r.ret == 0\n        monkeypatch.syspath_prepend(tmp_path / \"src/dist1\")\n        monkeypatch.syspath_prepend(tmp_path / \"src/dist2\")\n\n        assert resolve_pkg_root_and_module_name(\n            tmp_path / \"src/dist1/ns/b/app/bar/m.py\", consider_namespace_packages=True\n        ) == (tmp_path / \"src/dist1\", \"ns.b.app.bar.m\")\n        assert resolve_pkg_root_and_module_name(\n            tmp_path / \"src/dist2/ns/a/core/foo/m.py\", consider_namespace_packages=True\n        ) == (tmp_path / \"src/dist2\", \"ns.a.core.foo.m\")\n\n\ndef test_is_importable(pytester: Pytester) -> None:\n    pytester.syspathinsert()\n\n    path = pytester.path / \"bar/foo.py\"\n    path.parent.mkdir()\n    path.touch()\n    assert is_importable(\"bar.foo\", path) is True\n\n    # Ensure that the module that can be imported points to the path we expect.\n    path = pytester.path / \"some/other/path/bar/foo.py\"\n    path.mkdir(parents=True, exist_ok=True)\n    assert is_importable(\"bar.foo\", path) is False\n\n    # Paths containing \".\" cannot be imported.\n    path = pytester.path / \"bar.x/__init__.py\"\n    path.parent.mkdir()\n    path.touch()\n    assert is_importable(\"bar.x\", path) is False\n\n    # Pass starting with \".\" denote relative imports and cannot be checked using is_importable.\n    path = pytester.path / \".bar.x/__init__.py\"\n    path.parent.mkdir()\n    path.touch()\n    assert is_importable(\".bar.x\", path) is False\n\n\ndef test_compute_module_name(tmp_path: Path) -> None:\n    assert compute_module_name(tmp_path, tmp_path) is None\n    assert compute_module_name(Path(), Path()) is None\n\n    assert compute_module_name(tmp_path, tmp_path / \"mod.py\") == \"mod\"\n    assert compute_module_name(tmp_path, tmp_path / \"src/app/bar\") == \"src.app.bar\"\n    assert compute_module_name(tmp_path, tmp_path / \"src/app/bar.py\") == \"src.app.bar\"\n    assert (\n        compute_module_name(tmp_path, tmp_path / \"src/app/bar/__init__.py\")\n        == \"src.app.bar\"\n    )\n\n\ndef validate_namespace_package(\n    pytester: Pytester, paths: Sequence[Path], modules: Sequence[str]\n) -> RunResult:\n    \"\"\"\n    Validate that a Python namespace package is set up correctly.\n\n    In a sub interpreter, add 'paths' to sys.path and attempt to import the given modules.\n\n    In this module many tests configure a set of files as a namespace package, this function\n    is used as sanity check that our files are configured correctly from the point of view of Python.\n    \"\"\"\n    lines = [\n        \"import sys\",\n        # Configure sys.path.\n        *[f\"sys.path.append(r{str(x)!r})\" for x in paths],\n        # Imports.\n        *[f\"import {x}\" for x in modules],\n    ]\n    return pytester.runpython_c(\"\\n\".join(lines))\n", "testing/test_reports.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom typing import Sequence\n\nfrom _pytest._code.code import ExceptionChainRepr\nfrom _pytest._code.code import ExceptionRepr\nfrom _pytest.config import Config\nfrom _pytest.pytester import Pytester\nfrom _pytest.python_api import approx\nfrom _pytest.reports import CollectReport\nfrom _pytest.reports import TestReport\nimport pytest\n\n\nclass TestReportSerialization:\n    def test_xdist_longrepr_to_str_issue_241(self, pytester: Pytester) -> None:\n        \"\"\"Regarding issue pytest-xdist#241.\n\n        This test came originally from test_remote.py in xdist (ca03269).\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test_a(): assert False\n            def test_b(): pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 6\n        test_a_call = reports[1]\n        assert test_a_call.when == \"call\"\n        assert test_a_call.outcome == \"failed\"\n        assert test_a_call._to_json()[\"longrepr\"][\"reprtraceback\"][\"style\"] == \"long\"\n        test_b_call = reports[4]\n        assert test_b_call.when == \"call\"\n        assert test_b_call.outcome == \"passed\"\n        assert test_b_call._to_json()[\"longrepr\"] is None\n\n    def test_xdist_report_longrepr_reprcrash_130(self, pytester: Pytester) -> None:\n        \"\"\"Regarding issue pytest-xdist#130\n\n        This test came originally from test_remote.py in xdist (ca03269).\n        \"\"\"\n        reprec = pytester.inline_runsource(\n            \"\"\"\n                    def test_fail():\n                        assert False, 'Expected Message'\n                \"\"\"\n        )\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 3\n        rep = reports[1]\n        added_section = (\"Failure Metadata\", \"metadata metadata\", \"*\")\n        assert isinstance(rep.longrepr, ExceptionRepr)\n        rep.longrepr.sections.append(added_section)\n        d = rep._to_json()\n        a = TestReport._from_json(d)\n        assert isinstance(a.longrepr, ExceptionRepr)\n        # Check assembled == rep\n        assert a.__dict__.keys() == rep.__dict__.keys()\n        for key in rep.__dict__.keys():\n            if key != \"longrepr\":\n                assert getattr(a, key) == getattr(rep, key)\n        assert rep.longrepr.reprcrash is not None\n        assert a.longrepr.reprcrash is not None\n        assert rep.longrepr.reprcrash.lineno == a.longrepr.reprcrash.lineno\n        assert rep.longrepr.reprcrash.message == a.longrepr.reprcrash.message\n        assert rep.longrepr.reprcrash.path == a.longrepr.reprcrash.path\n        assert rep.longrepr.reprtraceback.entrysep == a.longrepr.reprtraceback.entrysep\n        assert (\n            rep.longrepr.reprtraceback.extraline == a.longrepr.reprtraceback.extraline\n        )\n        assert rep.longrepr.reprtraceback.style == a.longrepr.reprtraceback.style\n        assert rep.longrepr.sections == a.longrepr.sections\n        # Missing section attribute PR171\n        assert added_section in a.longrepr.sections\n\n    def test_reprentries_serialization_170(self, pytester: Pytester) -> None:\n        \"\"\"Regarding issue pytest-xdist#170\n\n        This test came originally from test_remote.py in xdist (ca03269).\n        \"\"\"\n        from _pytest._code.code import ReprEntry\n\n        reprec = pytester.inline_runsource(\n            \"\"\"\n                            def test_repr_entry():\n                                x = 0\n                                assert x\n                        \"\"\",\n            \"--showlocals\",\n        )\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 3\n        rep = reports[1]\n        assert isinstance(rep.longrepr, ExceptionRepr)\n        d = rep._to_json()\n        a = TestReport._from_json(d)\n        assert isinstance(a.longrepr, ExceptionRepr)\n\n        rep_entries = rep.longrepr.reprtraceback.reprentries\n        a_entries = a.longrepr.reprtraceback.reprentries\n        assert len(rep_entries) == len(a_entries)  # python < 3.10 zip(strict=True)\n        for a_entry, rep_entry in zip(a_entries, rep_entries):\n            assert isinstance(rep_entry, ReprEntry)\n            assert rep_entry.reprfileloc is not None\n            assert rep_entry.reprfuncargs is not None\n            assert rep_entry.reprlocals is not None\n\n            assert isinstance(a_entry, ReprEntry)\n            assert a_entry.reprfileloc is not None\n            assert a_entry.reprfuncargs is not None\n            assert a_entry.reprlocals is not None\n\n            assert rep_entry.lines == a_entry.lines\n            assert rep_entry.reprfileloc.lineno == a_entry.reprfileloc.lineno\n            assert rep_entry.reprfileloc.message == a_entry.reprfileloc.message\n            assert rep_entry.reprfileloc.path == a_entry.reprfileloc.path\n            assert rep_entry.reprfuncargs.args == a_entry.reprfuncargs.args\n            assert rep_entry.reprlocals.lines == a_entry.reprlocals.lines\n            assert rep_entry.style == a_entry.style\n\n    def test_reprentries_serialization_196(self, pytester: Pytester) -> None:\n        \"\"\"Regarding issue pytest-xdist#196\n\n        This test came originally from test_remote.py in xdist (ca03269).\n        \"\"\"\n        from _pytest._code.code import ReprEntryNative\n\n        reprec = pytester.inline_runsource(\n            \"\"\"\n                            def test_repr_entry_native():\n                                x = 0\n                                assert x\n                        \"\"\",\n            \"--tb=native\",\n        )\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 3\n        rep = reports[1]\n        assert isinstance(rep.longrepr, ExceptionRepr)\n        d = rep._to_json()\n        a = TestReport._from_json(d)\n        assert isinstance(a.longrepr, ExceptionRepr)\n\n        rep_entries = rep.longrepr.reprtraceback.reprentries\n        a_entries = a.longrepr.reprtraceback.reprentries\n        assert len(rep_entries) == len(a_entries)  # python < 3.10 zip(strict=True)\n        for rep_entry, a_entry in zip(rep_entries, a_entries):\n            assert isinstance(rep_entry, ReprEntryNative)\n            assert rep_entry.lines == a_entry.lines\n\n    def test_itemreport_outcomes(self, pytester: Pytester) -> None:\n        # This test came originally from test_remote.py in xdist (ca03269).\n        reprec = pytester.inline_runsource(\n            \"\"\"\n            import pytest\n            def test_pass(): pass\n            def test_fail(): 0/0\n            @pytest.mark.skipif(\"True\")\n            def test_skip(): pass\n            def test_skip_imperative():\n                pytest.skip(\"hello\")\n            @pytest.mark.xfail(\"True\")\n            def test_xfail(): 0/0\n            def test_xfail_imperative():\n                pytest.xfail(\"hello\")\n        \"\"\"\n        )\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 17  # with setup/teardown \"passed\" reports\n        for rep in reports:\n            d = rep._to_json()\n            newrep = TestReport._from_json(d)\n            assert newrep.passed == rep.passed\n            assert newrep.failed == rep.failed\n            assert newrep.skipped == rep.skipped\n            if newrep.skipped and not hasattr(newrep, \"wasxfail\"):\n                assert isinstance(newrep.longrepr, tuple)\n                assert len(newrep.longrepr) == 3\n            assert newrep.outcome == rep.outcome\n            assert newrep.when == rep.when\n            assert newrep.keywords == rep.keywords\n            if rep.failed:\n                assert newrep.longreprtext == rep.longreprtext\n\n    def test_collectreport_passed(self, pytester: Pytester) -> None:\n        \"\"\"This test came originally from test_remote.py in xdist (ca03269).\"\"\"\n        reprec = pytester.inline_runsource(\"def test_func(): pass\")\n        reports = reprec.getreports(\"pytest_collectreport\")\n        for rep in reports:\n            d = rep._to_json()\n            newrep = CollectReport._from_json(d)\n            assert newrep.passed == rep.passed\n            assert newrep.failed == rep.failed\n            assert newrep.skipped == rep.skipped\n\n    def test_collectreport_fail(self, pytester: Pytester) -> None:\n        \"\"\"This test came originally from test_remote.py in xdist (ca03269).\"\"\"\n        reprec = pytester.inline_runsource(\"qwe abc\")\n        reports = reprec.getreports(\"pytest_collectreport\")\n        assert reports\n        for rep in reports:\n            d = rep._to_json()\n            newrep = CollectReport._from_json(d)\n            assert newrep.passed == rep.passed\n            assert newrep.failed == rep.failed\n            assert newrep.skipped == rep.skipped\n            if rep.failed:\n                assert newrep.longrepr == str(rep.longrepr)\n\n    def test_extended_report_deserialization(self, pytester: Pytester) -> None:\n        \"\"\"This test came originally from test_remote.py in xdist (ca03269).\"\"\"\n        reprec = pytester.inline_runsource(\"qwe abc\")\n        reports = reprec.getreports(\"pytest_collectreport\")\n        assert reports\n        for rep in reports:\n            rep.extra = True  # type: ignore[attr-defined]\n            d = rep._to_json()\n            newrep = CollectReport._from_json(d)\n            assert newrep.extra\n            assert newrep.passed == rep.passed\n            assert newrep.failed == rep.failed\n            assert newrep.skipped == rep.skipped\n            if rep.failed:\n                assert newrep.longrepr == str(rep.longrepr)\n\n    def test_paths_support(self, pytester: Pytester) -> None:\n        \"\"\"Report attributes which are path-like should become strings.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test_a():\n                assert False\n        \"\"\"\n        )\n\n        class MyPathLike:\n            def __init__(self, path: str) -> None:\n                self.path = path\n\n            def __fspath__(self) -> str:\n                return self.path\n\n        reprec = pytester.inline_run()\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 3\n        test_a_call = reports[1]\n        test_a_call.path1 = MyPathLike(str(pytester.path))  # type: ignore[attr-defined]\n        test_a_call.path2 = pytester.path  # type: ignore[attr-defined]\n        data = test_a_call._to_json()\n        assert data[\"path1\"] == str(pytester.path)\n        assert data[\"path2\"] == str(pytester.path)\n\n    def test_deserialization_failure(self, pytester: Pytester) -> None:\n        \"\"\"Check handling of failure during deserialization of report types.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            def test_a():\n                assert False\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 3\n        test_a_call = reports[1]\n        data = test_a_call._to_json()\n        entry = data[\"longrepr\"][\"reprtraceback\"][\"reprentries\"][0]\n        assert entry[\"type\"] == \"ReprEntry\"\n\n        entry[\"type\"] = \"Unknown\"\n        with pytest.raises(\n            RuntimeError, match=\"INTERNALERROR: Unknown entry type returned: Unknown\"\n        ):\n            TestReport._from_json(data)\n\n    @pytest.mark.parametrize(\"report_class\", [TestReport, CollectReport])\n    def test_chained_exceptions(\n        self, pytester: Pytester, tw_mock, report_class\n    ) -> None:\n        \"\"\"Check serialization/deserialization of report objects containing chained exceptions (#5786)\"\"\"\n        pytester.makepyfile(\n            f\"\"\"\n            def foo():\n                raise ValueError('value error')\n            def test_a():\n                try:\n                    foo()\n                except ValueError as e:\n                    raise RuntimeError('runtime error') from e\n            if {report_class is CollectReport}:\n                test_a()\n        \"\"\"\n        )\n\n        reprec = pytester.inline_run()\n        if report_class is TestReport:\n            reports: Sequence[TestReport] | Sequence[CollectReport] = reprec.getreports(\n                \"pytest_runtest_logreport\"\n            )\n            # we have 3 reports: setup/call/teardown\n            assert len(reports) == 3\n            # get the call report\n            report = reports[1]\n        else:\n            assert report_class is CollectReport\n            # three collection reports: session, test file, directory\n            reports = reprec.getreports(\"pytest_collectreport\")\n            assert len(reports) == 3\n            report = reports[1]\n\n        def check_longrepr(longrepr: ExceptionChainRepr) -> None:\n            \"\"\"Check the attributes of the given longrepr object according to the test file.\n\n            We can get away with testing both CollectReport and TestReport with this function because\n            the longrepr objects are very similar.\n            \"\"\"\n            assert isinstance(longrepr, ExceptionChainRepr)\n            assert longrepr.sections == [(\"title\", \"contents\", \"=\")]\n            assert len(longrepr.chain) == 2\n            entry1, entry2 = longrepr.chain\n            tb1, fileloc1, desc1 = entry1\n            tb2, fileloc2, desc2 = entry2\n\n            assert \"ValueError('value error')\" in str(tb1)\n            assert \"RuntimeError('runtime error')\" in str(tb2)\n\n            assert (\n                desc1\n                == \"The above exception was the direct cause of the following exception:\"\n            )\n            assert desc2 is None\n\n        assert report.failed\n        assert len(report.sections) == 0\n        assert isinstance(report.longrepr, ExceptionChainRepr)\n        report.longrepr.addsection(\"title\", \"contents\", \"=\")\n        check_longrepr(report.longrepr)\n\n        data = report._to_json()\n        loaded_report = report_class._from_json(data)\n\n        assert loaded_report.failed\n        check_longrepr(loaded_report.longrepr)\n\n        # make sure we don't blow up on ``toterminal`` call; we don't test the actual output because it is very\n        # brittle and hard to maintain, but we can assume it is correct because ``toterminal`` is already tested\n        # elsewhere and we do check the contents of the longrepr object after loading it.\n        loaded_report.longrepr.toterminal(tw_mock)\n\n    def test_chained_exceptions_no_reprcrash(self, pytester: Pytester, tw_mock) -> None:\n        \"\"\"Regression test for tracebacks without a reprcrash (#5971)\n\n        This happens notably on exceptions raised by multiprocess.pool: the exception transfer\n        from subprocess to main process creates an artificial exception, which ExceptionInfo\n        can't obtain the ReprFileLocation from.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            from concurrent.futures import ProcessPoolExecutor\n\n            def func():\n                raise ValueError('value error')\n\n            def test_a():\n                with ProcessPoolExecutor() as p:\n                    p.submit(func).result()\n        \"\"\"\n        )\n\n        pytester.syspathinsert()\n        reprec = pytester.inline_run()\n\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n\n        def check_longrepr(longrepr: object) -> None:\n            assert isinstance(longrepr, ExceptionChainRepr)\n            assert len(longrepr.chain) == 2\n            entry1, entry2 = longrepr.chain\n            tb1, fileloc1, desc1 = entry1\n            tb2, fileloc2, desc2 = entry2\n\n            assert \"RemoteTraceback\" in str(tb1)\n            assert \"ValueError: value error\" in str(tb2)\n\n            assert fileloc1 is None\n            assert fileloc2 is not None\n            assert fileloc2.message == \"ValueError: value error\"\n\n        # 3 reports: setup/call/teardown: get the call report\n        assert len(reports) == 3\n        report = reports[1]\n\n        assert report.failed\n        check_longrepr(report.longrepr)\n\n        data = report._to_json()\n        loaded_report = TestReport._from_json(data)\n\n        assert loaded_report.failed\n        check_longrepr(loaded_report.longrepr)\n\n        # for same reasons as previous test, ensure we don't blow up here\n        assert loaded_report.longrepr is not None\n        assert isinstance(loaded_report.longrepr, ExceptionChainRepr)\n        loaded_report.longrepr.toterminal(tw_mock)\n\n    def test_report_prevent_ConftestImportFailure_hiding_exception(\n        self, pytester: Pytester\n    ) -> None:\n        sub_dir = pytester.path.joinpath(\"ns\")\n        sub_dir.mkdir()\n        sub_dir.joinpath(\"conftest.py\").write_text(\"import unknown\", encoding=\"utf-8\")\n\n        result = pytester.runpytest_subprocess(\".\")\n        result.stdout.fnmatch_lines([\"E   *Error: No module named 'unknown'\"])\n        result.stdout.no_fnmatch_line(\"ERROR  - *ConftestImportFailure*\")\n\n    def test_report_timestamps_match_duration(self, pytester: Pytester, mock_timing):\n        reprec = pytester.inline_runsource(\n            \"\"\"\n            import pytest\n            from _pytest import timing\n            @pytest.fixture\n            def fixture_():\n                timing.sleep(5)\n                yield\n                timing.sleep(5)\n            def test_1(fixture_): timing.sleep(10)\n        \"\"\"\n        )\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 3\n        for report in reports:\n            data = report._to_json()\n            loaded_report = TestReport._from_json(data)\n            assert loaded_report.stop - loaded_report.start == approx(report.duration)\n\n\nclass TestHooks:\n    \"\"\"Test that the hooks are working correctly for plugins\"\"\"\n\n    def test_test_report(self, pytester: Pytester, pytestconfig: Config) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_a(): assert False\n            def test_b(): pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reports = reprec.getreports(\"pytest_runtest_logreport\")\n        assert len(reports) == 6\n        for rep in reports:\n            data = pytestconfig.hook.pytest_report_to_serializable(\n                config=pytestconfig, report=rep\n            )\n            assert data[\"$report_type\"] == \"TestReport\"\n            new_rep = pytestconfig.hook.pytest_report_from_serializable(\n                config=pytestconfig, data=data\n            )\n            assert new_rep.nodeid == rep.nodeid\n            assert new_rep.when == rep.when\n            assert new_rep.outcome == rep.outcome\n\n    def test_collect_report(self, pytester: Pytester, pytestconfig: Config) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_a(): assert False\n            def test_b(): pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reports = reprec.getreports(\"pytest_collectreport\")\n        assert len(reports) == 3\n        for rep in reports:\n            data = pytestconfig.hook.pytest_report_to_serializable(\n                config=pytestconfig, report=rep\n            )\n            assert data[\"$report_type\"] == \"CollectReport\"\n            new_rep = pytestconfig.hook.pytest_report_from_serializable(\n                config=pytestconfig, data=data\n            )\n            assert new_rep.nodeid == rep.nodeid\n            assert new_rep.when == \"collect\"\n            assert new_rep.outcome == rep.outcome\n\n    @pytest.mark.parametrize(\n        \"hook_name\", [\"pytest_runtest_logreport\", \"pytest_collectreport\"]\n    )\n    def test_invalid_report_types(\n        self, pytester: Pytester, pytestconfig: Config, hook_name: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_a(): pass\n            \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reports = reprec.getreports(hook_name)\n        assert reports\n        rep = reports[0]\n        data = pytestconfig.hook.pytest_report_to_serializable(\n            config=pytestconfig, report=rep\n        )\n        data[\"$report_type\"] = \"Unknown\"\n        with pytest.raises(AssertionError):\n            _ = pytestconfig.hook.pytest_report_from_serializable(\n                config=pytestconfig, data=data\n            )\n", "testing/test_link_resolve.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom contextlib import contextmanager\nimport os.path\nfrom pathlib import Path\nfrom string import ascii_lowercase\nimport subprocess\nimport sys\nimport textwrap\n\nfrom _pytest.pytester import Pytester\n\n\n@contextmanager\ndef subst_path_windows(filepath: Path):\n    for c in ascii_lowercase[7:]:  # Create a subst drive from H-Z.\n        c += \":\"\n        if not os.path.exists(c):\n            drive = c\n            break\n    else:\n        raise AssertionError(\"Unable to find suitable drive letter for subst.\")\n\n    directory = filepath.parent\n    basename = filepath.name\n\n    args = [\"subst\", drive, str(directory)]\n    subprocess.check_call(args)\n    assert os.path.exists(drive)\n    try:\n        filename = Path(drive, os.sep, basename)\n        yield filename\n    finally:\n        args = [\"subst\", \"/D\", drive]\n        subprocess.check_call(args)\n\n\n@contextmanager\ndef subst_path_linux(filepath: Path):\n    directory = filepath.parent\n    basename = filepath.name\n\n    target = directory / \"..\" / \"sub2\"\n    os.symlink(str(directory), str(target), target_is_directory=True)\n    try:\n        filename = target / basename\n        yield filename\n    finally:\n        # We don't need to unlink (it's all in the tempdir).\n        pass\n\n\ndef test_link_resolve(pytester: Pytester) -> None:\n    \"\"\"See: https://github.com/pytest-dev/pytest/issues/5965.\"\"\"\n    sub1 = pytester.mkpydir(\"sub1\")\n    p = sub1.joinpath(\"test_foo.py\")\n    p.write_text(\n        textwrap.dedent(\n            \"\"\"\n        import pytest\n        def test_foo():\n            raise AssertionError()\n        \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n\n    subst = subst_path_linux\n    if sys.platform == \"win32\":\n        subst = subst_path_windows\n\n    with subst(p) as subst_p:\n        result = pytester.runpytest(str(subst_p), \"-v\")\n        # i.e.: Make sure that the error is reported as a relative path, not as a\n        # resolved path.\n        # See: https://github.com/pytest-dev/pytest/issues/5965\n        stdout = result.stdout.str()\n        assert \"sub1/test_foo.py\" not in stdout\n\n        # i.e.: Expect drive on windows because we just have drive:filename, whereas\n        # we expect a relative path on Linux.\n        expect = f\"*{subst_p}*\" if sys.platform == \"win32\" else \"*sub2/test_foo.py*\"\n        result.stdout.fnmatch_lines([expect])\n", "testing/test_compat.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport enum\nfrom functools import cached_property\nfrom functools import partial\nfrom functools import wraps\nimport sys\nfrom typing import TYPE_CHECKING\n\nfrom _pytest.compat import _PytestWrapper\nfrom _pytest.compat import assert_never\nfrom _pytest.compat import get_real_func\nfrom _pytest.compat import is_generator\nfrom _pytest.compat import safe_getattr\nfrom _pytest.compat import safe_isclass\nfrom _pytest.outcomes import OutcomeException\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nif TYPE_CHECKING:\n    from typing_extensions import Literal\n\n\ndef test_is_generator() -> None:\n    def zap():\n        yield  # pragma: no cover\n\n    def foo():\n        pass  # pragma: no cover\n\n    assert is_generator(zap)\n    assert not is_generator(foo)\n\n\ndef test_real_func_loop_limit() -> None:\n    class Evil:\n        def __init__(self):\n            self.left = 1000\n\n        def __repr__(self):\n            return f\"<Evil left={self.left}>\"\n\n        def __getattr__(self, attr):\n            if not self.left:\n                raise RuntimeError(\"it's over\")  # pragma: no cover\n            self.left -= 1\n            return self\n\n    evil = Evil()\n\n    with pytest.raises(\n        ValueError,\n        match=(\n            \"could not find real function of <Evil left=800>\\n\"\n            \"stopped at <Evil left=800>\"\n        ),\n    ):\n        get_real_func(evil)\n\n\ndef test_get_real_func() -> None:\n    \"\"\"Check that get_real_func correctly unwraps decorators until reaching the real function\"\"\"\n\n    def decorator(f):\n        @wraps(f)\n        def inner():\n            pass  # pragma: no cover\n\n        return inner\n\n    def func():\n        pass  # pragma: no cover\n\n    wrapped_func = decorator(decorator(func))\n    assert get_real_func(wrapped_func) is func\n\n    wrapped_func2 = decorator(decorator(wrapped_func))\n    assert get_real_func(wrapped_func2) is func\n\n    # special case for __pytest_wrapped__ attribute: used to obtain the function up until the point\n    # a function was wrapped by pytest itself\n    wrapped_func2.__pytest_wrapped__ = _PytestWrapper(wrapped_func)\n    assert get_real_func(wrapped_func2) is wrapped_func\n\n\ndef test_get_real_func_partial() -> None:\n    \"\"\"Test get_real_func handles partial instances correctly\"\"\"\n\n    def foo(x):\n        return x\n\n    assert get_real_func(foo) is foo\n    assert get_real_func(partial(foo)) is foo\n\n\n@pytest.mark.skipif(sys.version_info >= (3, 11), reason=\"coroutine removed\")\ndef test_is_generator_asyncio(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        from _pytest.compat import is_generator\n        import asyncio\n        @asyncio.coroutine\n        def baz():\n            yield from [1,2,3]\n\n        def test_is_generator_asyncio():\n            assert not is_generator(baz)\n    \"\"\"\n    )\n    # avoid importing asyncio into pytest's own process,\n    # which in turn imports logging (#8)\n    result = pytester.runpytest_subprocess()\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_is_generator_async_syntax(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        from _pytest.compat import is_generator\n        def test_is_generator_py35():\n            async def foo():\n                await foo()\n\n            async def bar():\n                pass\n\n            assert not is_generator(foo)\n            assert not is_generator(bar)\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_is_generator_async_gen_syntax(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        from _pytest.compat import is_generator\n        def test_is_generator():\n            async def foo():\n                yield\n                await foo()\n\n            async def bar():\n                yield\n\n            assert not is_generator(foo)\n            assert not is_generator(bar)\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\nclass ErrorsHelper:\n    @property\n    def raise_baseexception(self):\n        raise BaseException(\"base exception should be raised\")\n\n    @property\n    def raise_exception(self):\n        raise Exception(\"exception should be caught\")\n\n    @property\n    def raise_fail_outcome(self):\n        pytest.fail(\"fail should be caught\")\n\n\ndef test_helper_failures() -> None:\n    helper = ErrorsHelper()\n    with pytest.raises(Exception):  # noqa: B017\n        _ = helper.raise_exception\n    with pytest.raises(OutcomeException):\n        _ = helper.raise_fail_outcome\n\n\ndef test_safe_getattr() -> None:\n    helper = ErrorsHelper()\n    assert safe_getattr(helper, \"raise_exception\", \"default\") == \"default\"\n    assert safe_getattr(helper, \"raise_fail_outcome\", \"default\") == \"default\"\n    with pytest.raises(BaseException):  # noqa: B017\n        assert safe_getattr(helper, \"raise_baseexception\", \"default\")\n\n\ndef test_safe_isclass() -> None:\n    assert safe_isclass(type) is True\n\n    class CrappyClass(Exception):\n        # Type ignored because it's bypassed intentionally.\n        @property  # type: ignore\n        def __class__(self):\n            assert False, \"Should be ignored\"\n\n    assert safe_isclass(CrappyClass()) is False\n\n\ndef test_cached_property() -> None:\n    ncalls = 0\n\n    class Class:\n        @cached_property\n        def prop(self) -> int:\n            nonlocal ncalls\n            ncalls += 1\n            return ncalls\n\n    c1 = Class()\n    assert ncalls == 0\n    assert c1.prop == 1\n    assert c1.prop == 1\n    c2 = Class()\n    assert ncalls == 1\n    assert c2.prop == 2\n    assert c1.prop == 1\n\n\ndef test_assert_never_union() -> None:\n    x: int | str = 10\n\n    if isinstance(x, int):\n        pass\n    else:\n        with pytest.raises(AssertionError):\n            assert_never(x)  # type: ignore[arg-type]\n\n    if isinstance(x, int):\n        pass\n    elif isinstance(x, str):\n        pass\n    else:\n        assert_never(x)\n\n\ndef test_assert_never_enum() -> None:\n    E = enum.Enum(\"E\", \"a b\")\n    x: E = E.a\n\n    if x is E.a:\n        pass\n    else:\n        with pytest.raises(AssertionError):\n            assert_never(x)  # type: ignore[arg-type]\n\n    if x is E.a:\n        pass\n    elif x is E.b:\n        pass\n    else:\n        assert_never(x)\n\n\ndef test_assert_never_literal() -> None:\n    x: Literal[\"a\", \"b\"] = \"a\"\n\n    if x == \"a\":\n        pass\n    else:\n        with pytest.raises(AssertionError):\n            assert_never(x)  # type: ignore[arg-type]\n\n    if x == \"a\":\n        pass\n    elif x == \"b\":\n        pass\n    else:\n        assert_never(x)\n", "testing/test_threadexception.py": "from __future__ import annotations\n\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.mark.filterwarnings(\"default::pytest.PytestUnhandledThreadExceptionWarning\")\ndef test_unhandled_thread_exception(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=\"\"\"\n        import threading\n\n        def test_it():\n            def oops():\n                raise ValueError(\"Oops\")\n\n            t = threading.Thread(target=oops, name=\"MyThread\")\n            t.start()\n            t.join()\n\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n    assert result.parseoutcomes() == {\"passed\": 2, \"warnings\": 1}\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"test_it.py::test_it\",\n            \"  * PytestUnhandledThreadExceptionWarning: Exception in thread MyThread\",\n            \"  \",\n            \"  Traceback (most recent call last):\",\n            \"  ValueError: Oops\",\n            \"  \",\n            \"    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))\",\n        ]\n    )\n\n\n@pytest.mark.filterwarnings(\"default::pytest.PytestUnhandledThreadExceptionWarning\")\ndef test_unhandled_thread_exception_in_setup(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=\"\"\"\n        import threading\n        import pytest\n\n        @pytest.fixture\n        def threadexc():\n            def oops():\n                raise ValueError(\"Oops\")\n            t = threading.Thread(target=oops, name=\"MyThread\")\n            t.start()\n            t.join()\n\n        def test_it(threadexc): pass\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n    assert result.parseoutcomes() == {\"passed\": 2, \"warnings\": 1}\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"test_it.py::test_it\",\n            \"  * PytestUnhandledThreadExceptionWarning: Exception in thread MyThread\",\n            \"  \",\n            \"  Traceback (most recent call last):\",\n            \"  ValueError: Oops\",\n            \"  \",\n            \"    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))\",\n        ]\n    )\n\n\n@pytest.mark.filterwarnings(\"default::pytest.PytestUnhandledThreadExceptionWarning\")\ndef test_unhandled_thread_exception_in_teardown(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=\"\"\"\n        import threading\n        import pytest\n\n        @pytest.fixture\n        def threadexc():\n            def oops():\n                raise ValueError(\"Oops\")\n            yield\n            t = threading.Thread(target=oops, name=\"MyThread\")\n            t.start()\n            t.join()\n\n        def test_it(threadexc): pass\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n    assert result.parseoutcomes() == {\"passed\": 2, \"warnings\": 1}\n    result.stdout.fnmatch_lines(\n        [\n            \"*= warnings summary =*\",\n            \"test_it.py::test_it\",\n            \"  * PytestUnhandledThreadExceptionWarning: Exception in thread MyThread\",\n            \"  \",\n            \"  Traceback (most recent call last):\",\n            \"  ValueError: Oops\",\n            \"  \",\n            \"    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))\",\n        ]\n    )\n\n\n@pytest.mark.filterwarnings(\"error::pytest.PytestUnhandledThreadExceptionWarning\")\ndef test_unhandled_thread_exception_warning_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_it=\"\"\"\n        import threading\n        import pytest\n\n        def test_it():\n            def oops():\n                raise ValueError(\"Oops\")\n            t = threading.Thread(target=oops, name=\"MyThread\")\n            t.start()\n            t.join()\n\n        def test_2(): pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == pytest.ExitCode.TESTS_FAILED\n    assert result.parseoutcomes() == {\"passed\": 1, \"failed\": 1}\n", "testing/test_setupplan.py": "from __future__ import annotations\n\nfrom _pytest.pytester import Pytester\n\n\ndef test_show_fixtures_and_test(\n    pytester: Pytester, dummy_yaml_custom_test: None\n) -> None:\n    \"\"\"Verify that fixtures are not executed.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture\n        def arg():\n            assert False\n        def test_arg(arg):\n            assert False\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--setup-plan\")\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\"*SETUP    F arg*\", \"*test_arg (fixtures used: arg)\", \"*TEARDOWN F arg*\"]\n    )\n\n\ndef test_show_multi_test_fixture_setup_and_teardown_correctly_simple(\n    pytester: Pytester,\n) -> None:\n    \"\"\"Verify that when a fixture lives for longer than a single test, --setup-plan\n    correctly displays the SETUP/TEARDOWN indicators the right number of times.\n\n    As reported in https://github.com/pytest-dev/pytest/issues/2049\n    --setup-plan was showing SETUP/TEARDOWN on every test, even when the fixture\n    should persist through multiple tests.\n\n    (Note that this bug never affected actual test execution, which used the\n    correct fixture lifetimes. It was purely a display bug for --setup-plan, and\n    did not affect the related --setup-show or --setup-only.)\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture(scope = 'class')\n        def fix():\n            return object()\n        class TestClass:\n            def test_one(self, fix):\n                assert False\n            def test_two(self, fix):\n                assert False\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--setup-plan\")\n    assert result.ret == 0\n\n    setup_fragment = \"SETUP    C fix\"\n    setup_count = 0\n\n    teardown_fragment = \"TEARDOWN C fix\"\n    teardown_count = 0\n\n    for line in result.stdout.lines:\n        if setup_fragment in line:\n            setup_count += 1\n        if teardown_fragment in line:\n            teardown_count += 1\n\n    # before the fix this tests, there would have been a setup/teardown\n    # message for each test, so the counts would each have been 2\n    assert setup_count == 1\n    assert teardown_count == 1\n\n\ndef test_show_multi_test_fixture_setup_and_teardown_same_as_setup_show(\n    pytester: Pytester,\n) -> None:\n    \"\"\"Verify that SETUP/TEARDOWN messages match what comes out of --setup-show.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture(scope = 'session')\n        def sess():\n            return True\n        @pytest.fixture(scope = 'module')\n        def mod():\n            return True\n        @pytest.fixture(scope = 'class')\n        def cls():\n            return True\n        @pytest.fixture(scope = 'function')\n        def func():\n            return True\n        def test_outside(sess, mod, cls, func):\n            assert True\n        class TestCls:\n            def test_one(self, sess, mod, cls, func):\n                assert True\n            def test_two(self, sess, mod, cls, func):\n                assert True\n    \"\"\"\n    )\n\n    plan_result = pytester.runpytest(\"--setup-plan\")\n    show_result = pytester.runpytest(\"--setup-show\")\n\n    # the number and text of these lines should be identical\n    plan_lines = [\n        line\n        for line in plan_result.stdout.lines\n        if \"SETUP\" in line or \"TEARDOWN\" in line\n    ]\n    show_lines = [\n        line\n        for line in show_result.stdout.lines\n        if \"SETUP\" in line or \"TEARDOWN\" in line\n    ]\n\n    assert plan_lines == show_lines\n", "testing/test_argcomplete.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom pathlib import Path\nimport subprocess\nimport sys\n\nfrom _pytest.monkeypatch import MonkeyPatch\nimport pytest\n\n\n# Test for _argcomplete but not specific for any application.\n\n\ndef equal_with_bash(prefix, ffc, fc, out=None):\n    res = ffc(prefix)\n    res_bash = set(fc(prefix))\n    retval = set(res) == res_bash\n    if out:\n        out.write(f\"equal_with_bash({prefix}) {retval} {res}\\n\")\n        if not retval:\n            out.write(\" python - bash: %s\\n\" % (set(res) - res_bash))\n            out.write(\" bash - python: %s\\n\" % (res_bash - set(res)))\n    return retval\n\n\n# Copied from argcomplete.completers as import from there.\n# Also pulls in argcomplete.__init__ which opens filedescriptor 9.\n# This gives an OSError at the end of testrun.\n\n\ndef _wrapcall(*args, **kargs):\n    try:\n        return subprocess.check_output(*args, **kargs).decode().splitlines()\n    except subprocess.CalledProcessError:\n        return []\n\n\nclass FilesCompleter:\n    \"\"\"File completer class, optionally takes a list of allowed extensions.\"\"\"\n\n    def __init__(self, allowednames=(), directories=True):\n        # Fix if someone passes in a string instead of a list\n        if type(allowednames) is str:\n            allowednames = [allowednames]\n\n        self.allowednames = [x.lstrip(\"*\").lstrip(\".\") for x in allowednames]\n        self.directories = directories\n\n    def __call__(self, prefix, **kwargs):\n        completion = []\n        if self.allowednames:\n            if self.directories:\n                files = _wrapcall([\"bash\", \"-c\", f\"compgen -A directory -- '{prefix}'\"])\n                completion += [f + \"/\" for f in files]\n            for x in self.allowednames:\n                completion += _wrapcall(\n                    [\"bash\", \"-c\", f\"compgen -A file -X '!*.{x}' -- '{prefix}'\"]\n                )\n        else:\n            completion += _wrapcall([\"bash\", \"-c\", f\"compgen -A file -- '{prefix}'\"])\n\n            anticomp = _wrapcall([\"bash\", \"-c\", f\"compgen -A directory -- '{prefix}'\"])\n\n            completion = list(set(completion) - set(anticomp))\n\n            if self.directories:\n                completion += [f + \"/\" for f in anticomp]\n        return completion\n\n\nclass TestArgComplete:\n    @pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\n    def test_compare_with_compgen(\n        self, tmp_path: Path, monkeypatch: MonkeyPatch\n    ) -> None:\n        from _pytest._argcomplete import FastFilesCompleter\n\n        ffc = FastFilesCompleter()\n        fc = FilesCompleter()\n\n        monkeypatch.chdir(tmp_path)\n\n        assert equal_with_bash(\"\", ffc, fc, out=sys.stdout)\n\n        tmp_path.cwd().joinpath(\"data\").touch()\n\n        for x in [\"d\", \"data\", \"doesnotexist\", \"\"]:\n            assert equal_with_bash(x, ffc, fc, out=sys.stdout)\n\n    @pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\n    def test_remove_dir_prefix(self):\n        \"\"\"This is not compatible with compgen but it is with bash itself: ls /usr/<TAB>.\"\"\"\n        from _pytest._argcomplete import FastFilesCompleter\n\n        ffc = FastFilesCompleter()\n        fc = FilesCompleter()\n        for x in \"/usr/\".split():\n            assert not equal_with_bash(x, ffc, fc, out=sys.stdout)\n", "testing/test_pastebin.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport email.message\nimport io\n\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nclass TestPasteCapture:\n    @pytest.fixture\n    def pastebinlist(self, monkeypatch, request) -> list[str | bytes]:\n        pastebinlist: list[str | bytes] = []\n        plugin = request.config.pluginmanager.getplugin(\"pastebin\")\n        monkeypatch.setattr(plugin, \"create_new_paste\", pastebinlist.append)\n        return pastebinlist\n\n    def test_failed(self, pytester: Pytester, pastebinlist) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_pass() -> None:\n                pass\n            def test_fail():\n                assert 0\n            def test_skip():\n                pytest.skip(\"\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run(testpath, \"--pastebin=failed\")\n        assert len(pastebinlist) == 1\n        s = pastebinlist[0]\n        assert s.find(\"def test_fail\") != -1\n        assert reprec.countoutcomes() == [1, 1, 1]\n\n    def test_all(self, pytester: Pytester, pastebinlist) -> None:\n        from _pytest.pytester import LineMatcher\n\n        testpath = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_pass():\n                pass\n            def test_fail():\n                assert 0\n            def test_skip():\n                pytest.skip(\"\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run(testpath, \"--pastebin=all\", \"-v\")\n        assert reprec.countoutcomes() == [1, 1, 1]\n        assert len(pastebinlist) == 1\n        contents = pastebinlist[0].decode(\"utf-8\")\n        matcher = LineMatcher(contents.splitlines())\n        matcher.fnmatch_lines(\n            [\n                \"*test_pass PASSED*\",\n                \"*test_fail FAILED*\",\n                \"*test_skip SKIPPED*\",\n                \"*== 1 failed, 1 passed, 1 skipped in *\",\n            ]\n        )\n\n    def test_non_ascii_paste_text(self, pytester: Pytester, pastebinlist) -> None:\n        \"\"\"Make sure that text which contains non-ascii characters is pasted\n        correctly. See #1219.\n        \"\"\"\n        pytester.makepyfile(\n            test_unicode=\"\"\"\\\n            def test():\n                assert '\u263a' == 1\n            \"\"\"\n        )\n        result = pytester.runpytest(\"--pastebin=all\")\n        expected_msg = \"*assert '\u263a' == 1*\"\n        result.stdout.fnmatch_lines(\n            [\n                expected_msg,\n                \"*== 1 failed in *\",\n                \"*Sending information to Paste Service*\",\n            ]\n        )\n        assert len(pastebinlist) == 1\n\n\nclass TestPaste:\n    @pytest.fixture\n    def pastebin(self, request):\n        return request.config.pluginmanager.getplugin(\"pastebin\")\n\n    @pytest.fixture\n    def mocked_urlopen_fail(self, monkeypatch: MonkeyPatch):\n        \"\"\"Monkeypatch the actual urlopen call to emulate a HTTP Error 400.\"\"\"\n        calls = []\n\n        import urllib.error\n        import urllib.request\n\n        def mocked(url, data):\n            calls.append((url, data))\n            raise urllib.error.HTTPError(\n                url, 400, \"Bad request\", email.message.Message(), io.BytesIO()\n            )\n\n        monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n        return calls\n\n    @pytest.fixture\n    def mocked_urlopen_invalid(self, monkeypatch: MonkeyPatch):\n        \"\"\"Monkeypatch the actual urlopen calls done by the internal plugin\n        function that connects to bpaste service, but return a url in an\n        unexpected format.\"\"\"\n        calls = []\n\n        def mocked(url, data):\n            calls.append((url, data))\n\n            class DummyFile:\n                def read(self):\n                    # part of html of a normal response\n                    return b'View <a href=\"/invalid/3c0c6750bd\">raw</a>.'\n\n            return DummyFile()\n\n        import urllib.request\n\n        monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n        return calls\n\n    @pytest.fixture\n    def mocked_urlopen(self, monkeypatch: MonkeyPatch):\n        \"\"\"Monkeypatch the actual urlopen calls done by the internal plugin\n        function that connects to bpaste service.\"\"\"\n        calls = []\n\n        def mocked(url, data):\n            calls.append((url, data))\n\n            class DummyFile:\n                def read(self):\n                    # part of html of a normal response\n                    return b'View <a href=\"/raw/3c0c6750bd\">raw</a>.'\n\n            return DummyFile()\n\n        import urllib.request\n\n        monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n        return calls\n\n    def test_pastebin_invalid_url(self, pastebin, mocked_urlopen_invalid) -> None:\n        result = pastebin.create_new_paste(b\"full-paste-contents\")\n        assert (\n            result\n            == \"bad response: invalid format ('View <a href=\\\"/invalid/3c0c6750bd\\\">raw</a>.')\"\n        )\n        assert len(mocked_urlopen_invalid) == 1\n\n    def test_pastebin_http_error(self, pastebin, mocked_urlopen_fail) -> None:\n        result = pastebin.create_new_paste(b\"full-paste-contents\")\n        assert result == \"bad response: HTTP Error 400: Bad request\"\n        assert len(mocked_urlopen_fail) == 1\n\n    def test_create_new_paste(self, pastebin, mocked_urlopen) -> None:\n        result = pastebin.create_new_paste(b\"full-paste-contents\")\n        assert result == \"https://bpa.st/show/3c0c6750bd\"\n        assert len(mocked_urlopen) == 1\n        url, data = mocked_urlopen[0]\n        assert type(data) is bytes\n        lexer = \"text\"\n        assert url == \"https://bpa.st\"\n        assert f\"lexer={lexer}\" in data.decode()\n        assert \"code=full-paste-contents\" in data.decode()\n        assert \"expiry=1week\" in data.decode()\n\n    def test_create_new_paste_failure(self, pastebin, monkeypatch: MonkeyPatch) -> None:\n        import io\n        import urllib.request\n\n        def response(url, data):\n            stream = io.BytesIO(b\"something bad occurred\")\n            return stream\n\n        monkeypatch.setattr(urllib.request, \"urlopen\", response)\n        result = pastebin.create_new_paste(b\"full-paste-contents\")\n        assert result == \"bad response: invalid format ('something bad occurred')\"\n", "testing/test_nodes.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom pathlib import Path\nimport re\nfrom typing import cast\nimport warnings\n\nfrom _pytest import nodes\nfrom _pytest.compat import legacy_path\nfrom _pytest.outcomes import OutcomeException\nfrom _pytest.pytester import Pytester\nfrom _pytest.warning_types import PytestWarning\nimport pytest\n\n\ndef test_node_from_parent_disallowed_arguments() -> None:\n    with pytest.raises(TypeError, match=\"session is\"):\n        nodes.Node.from_parent(None, session=None)  # type: ignore[arg-type]\n    with pytest.raises(TypeError, match=\"config is\"):\n        nodes.Node.from_parent(None, config=None)  # type: ignore[arg-type]\n\n\ndef test_node_direct_construction_deprecated() -> None:\n    with pytest.raises(\n        OutcomeException,\n        match=(\n            \"Direct construction of _pytest.nodes.Node has been deprecated, please \"\n            \"use _pytest.nodes.Node.from_parent.\\nSee \"\n            \"https://docs.pytest.org/en/stable/deprecations.html#node-construction-changed-to-node-from-parent\"\n            \" for more details.\"\n        ),\n    ):\n        nodes.Node(None, session=None)  # type: ignore[arg-type]\n\n\ndef test_subclassing_both_item_and_collector_deprecated(\n    request, tmp_path: Path\n) -> None:\n    \"\"\"\n    Verifies we warn on diamond inheritance as well as correctly managing legacy\n    inheritance constructors with missing args as found in plugins.\n    \"\"\"\n    # We do not expect any warnings messages to issued during class definition.\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"error\")\n\n        class SoWrong(nodes.Item, nodes.File):\n            def __init__(self, fspath, parent):\n                \"\"\"Legacy ctor with legacy call # don't wana see\"\"\"\n                super().__init__(fspath, parent)\n\n            def collect(self):\n                raise NotImplementedError()\n\n            def runtest(self):\n                raise NotImplementedError()\n\n    with pytest.warns(PytestWarning) as rec:\n        SoWrong.from_parent(\n            request.session, fspath=legacy_path(tmp_path / \"broken.txt\")\n        )\n    messages = [str(x.message) for x in rec]\n    assert any(\n        re.search(\".*SoWrong.* not using a cooperative constructor.*\", x)\n        for x in messages\n    )\n    assert any(\n        re.search(\"(?m)SoWrong .* should not be a collector\", x) for x in messages\n    )\n\n\n@pytest.mark.parametrize(\n    \"warn_type, msg\", [(DeprecationWarning, \"deprecated\"), (PytestWarning, \"pytest\")]\n)\ndef test_node_warn_is_no_longer_only_pytest_warnings(\n    pytester: Pytester, warn_type: type[Warning], msg: str\n) -> None:\n    items = pytester.getitems(\n        \"\"\"\n        def test():\n            pass\n    \"\"\"\n    )\n    with pytest.warns(warn_type, match=msg):\n        items[0].warn(warn_type(msg))\n\n\ndef test_node_warning_enforces_warning_types(pytester: Pytester) -> None:\n    items = pytester.getitems(\n        \"\"\"\n        def test():\n            pass\n    \"\"\"\n    )\n    with pytest.raises(\n        ValueError, match=\"warning must be an instance of Warning or subclass\"\n    ):\n        items[0].warn(Exception(\"ok\"))  # type: ignore[arg-type]\n\n\ndef test__check_initialpaths_for_relpath() -> None:\n    \"\"\"Ensure that it handles dirs, and does not always use dirname.\"\"\"\n    cwd = Path.cwd()\n\n    class FakeSession1:\n        _initialpaths = frozenset({cwd})\n\n    session = cast(pytest.Session, FakeSession1)\n\n    assert nodes._check_initialpaths_for_relpath(session, cwd) == \"\"\n\n    sub = cwd / \"file\"\n\n    class FakeSession2:\n        _initialpaths = frozenset({cwd})\n\n    session = cast(pytest.Session, FakeSession2)\n\n    assert nodes._check_initialpaths_for_relpath(session, sub) == \"file\"\n\n    outside = Path(\"/outside-this-does-not-exist\")\n    assert nodes._check_initialpaths_for_relpath(session, outside) is None\n\n\ndef test_failure_with_changed_cwd(pytester: Pytester) -> None:\n    \"\"\"\n    Test failure lines should use absolute paths if cwd has changed since\n    invocation, so the path is correct (#6428).\n    \"\"\"\n    p = pytester.makepyfile(\n        \"\"\"\n        import os\n        import pytest\n\n        @pytest.fixture\n        def private_dir():\n            out_dir = 'ddd'\n            os.mkdir(out_dir)\n            old_dir = os.getcwd()\n            os.chdir(out_dir)\n            yield out_dir\n            os.chdir(old_dir)\n\n        def test_show_wrong_path(private_dir):\n            assert False\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n", "testing/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport dataclasses\nimport re\nimport sys\nfrom typing import Generator\n\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nif sys.gettrace():\n\n    @pytest.fixture(autouse=True)\n    def restore_tracing():\n        \"\"\"Restore tracing function (when run with Coverage.py).\n\n        https://bugs.python.org/issue37011\n        \"\"\"\n        orig_trace = sys.gettrace()\n        yield\n        if sys.gettrace() != orig_trace:\n            sys.settrace(orig_trace)\n\n\n@pytest.fixture(autouse=True)\ndef set_column_width(monkeypatch: pytest.MonkeyPatch) -> None:\n    \"\"\"\n    Force terminal width to 80: some tests check the formatting of --help, which is sensible\n    to terminal width.\n    \"\"\"\n    monkeypatch.setenv(\"COLUMNS\", \"80\")\n\n\n@pytest.fixture(autouse=True)\ndef reset_colors(monkeypatch: pytest.MonkeyPatch) -> None:\n    \"\"\"\n    Reset all color-related variables to prevent them from affecting internal pytest output\n    in tests that depend on it.\n    \"\"\"\n    monkeypatch.delenv(\"PY_COLORS\", raising=False)\n    monkeypatch.delenv(\"NO_COLOR\", raising=False)\n    monkeypatch.delenv(\"FORCE_COLOR\", raising=False)\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_collection_modifyitems(items) -> Generator[None, None, None]:\n    \"\"\"Prefer faster tests.\n\n    Use a hook wrapper to do this in the beginning, so e.g. --ff still works\n    correctly.\n    \"\"\"\n    fast_items = []\n    slow_items = []\n    slowest_items = []\n    neutral_items = []\n\n    spawn_names = {\"spawn_pytest\", \"spawn\"}\n\n    for item in items:\n        try:\n            fixtures = item.fixturenames\n        except AttributeError:\n            # doctest at least\n            # (https://github.com/pytest-dev/pytest/issues/5070)\n            neutral_items.append(item)\n        else:\n            if \"pytester\" in fixtures:\n                co_names = item.function.__code__.co_names\n                if spawn_names.intersection(co_names):\n                    item.add_marker(pytest.mark.uses_pexpect)\n                    slowest_items.append(item)\n                elif \"runpytest_subprocess\" in co_names:\n                    slowest_items.append(item)\n                else:\n                    slow_items.append(item)\n                item.add_marker(pytest.mark.slow)\n            else:\n                marker = item.get_closest_marker(\"slow\")\n                if marker:\n                    slowest_items.append(item)\n                else:\n                    fast_items.append(item)\n\n    items[:] = fast_items + neutral_items + slow_items + slowest_items\n\n    return (yield)\n\n\n@pytest.fixture\ndef tw_mock():\n    \"\"\"Returns a mock terminal writer\"\"\"\n\n    class TWMock:\n        WRITE = object()\n\n        def __init__(self):\n            self.lines = []\n            self.is_writing = False\n\n        def sep(self, sep, line=None):\n            self.lines.append((sep, line))\n\n        def write(self, msg, **kw):\n            self.lines.append((TWMock.WRITE, msg))\n\n        def _write_source(self, lines, indents=()):\n            if not indents:\n                indents = [\"\"] * len(lines)\n            for indent, line in zip(indents, lines):\n                self.line(indent + line)\n\n        def line(self, line, **kw):\n            self.lines.append(line)\n\n        def markup(self, text, **kw):\n            return text\n\n        def get_write_msg(self, idx):\n            flag, msg = self.lines[idx]\n            assert flag == TWMock.WRITE\n            return msg\n\n        fullwidth = 80\n\n    return TWMock()\n\n\n@pytest.fixture\ndef dummy_yaml_custom_test(pytester: Pytester) -> None:\n    \"\"\"Writes a conftest file that collects and executes a dummy yaml test.\n\n    Taken from the docs, but stripped down to the bare minimum, useful for\n    tests which needs custom items collected.\n    \"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n\n        def pytest_collect_file(parent, file_path):\n            if file_path.suffix == \".yaml\" and file_path.name.startswith(\"test\"):\n                return YamlFile.from_parent(path=file_path, parent=parent)\n\n        class YamlFile(pytest.File):\n            def collect(self):\n                yield YamlItem.from_parent(name=self.path.name, parent=self)\n\n        class YamlItem(pytest.Item):\n            def runtest(self):\n                pass\n    \"\"\"\n    )\n    pytester.makefile(\".yaml\", test1=\"\")\n\n\n@pytest.fixture\ndef pytester(pytester: Pytester, monkeypatch: MonkeyPatch) -> Pytester:\n    monkeypatch.setenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", \"1\")\n    return pytester\n\n\n@pytest.fixture(scope=\"session\")\ndef color_mapping():\n    \"\"\"Returns a utility class which can replace keys in strings in the form \"{NAME}\"\n    by their equivalent ASCII codes in the terminal.\n\n    Used by tests which check the actual colors output by pytest.\n    \"\"\"\n\n    class ColorMapping:\n        COLORS = {\n            \"red\": \"\\x1b[31m\",\n            \"green\": \"\\x1b[32m\",\n            \"yellow\": \"\\x1b[33m\",\n            \"light-gray\": \"\\x1b[90m\",\n            \"light-red\": \"\\x1b[91m\",\n            \"light-green\": \"\\x1b[92m\",\n            \"bold\": \"\\x1b[1m\",\n            \"reset\": \"\\x1b[0m\",\n            \"kw\": \"\\x1b[94m\",\n            \"hl-reset\": \"\\x1b[39;49;00m\",\n            \"function\": \"\\x1b[92m\",\n            \"number\": \"\\x1b[94m\",\n            \"str\": \"\\x1b[33m\",\n            \"print\": \"\\x1b[96m\",\n            \"endline\": \"\\x1b[90m\\x1b[39;49;00m\",\n        }\n        RE_COLORS = {k: re.escape(v) for k, v in COLORS.items()}\n        NO_COLORS = {k: \"\" for k in COLORS.keys()}\n\n        @classmethod\n        def format(cls, lines: list[str]) -> list[str]:\n            \"\"\"Straightforward replacement of color names to their ASCII codes.\"\"\"\n            return [line.format(**cls.COLORS) for line in lines]\n\n        @classmethod\n        def format_for_fnmatch(cls, lines: list[str]) -> list[str]:\n            \"\"\"Replace color names for use with LineMatcher.fnmatch_lines\"\"\"\n            return [line.format(**cls.COLORS).replace(\"[\", \"[[]\") for line in lines]\n\n        @classmethod\n        def format_for_rematch(cls, lines: list[str]) -> list[str]:\n            \"\"\"Replace color names for use with LineMatcher.re_match_lines\"\"\"\n            return [line.format(**cls.RE_COLORS) for line in lines]\n\n        @classmethod\n        def strip_colors(cls, lines: list[str]) -> list[str]:\n            \"\"\"Entirely remove every color code\"\"\"\n            return [line.format(**cls.NO_COLORS) for line in lines]\n\n    return ColorMapping\n\n\n@pytest.fixture\ndef mock_timing(monkeypatch: MonkeyPatch):\n    \"\"\"Mocks _pytest.timing with a known object that can be used to control timing in tests\n    deterministically.\n\n    pytest itself should always use functions from `_pytest.timing` instead of `time` directly.\n\n    This then allows us more control over time during testing, if testing code also\n    uses `_pytest.timing` functions.\n\n    Time is static, and only advances through `sleep` calls, thus tests might sleep over large\n    numbers and obtain accurate time() calls at the end, making tests reliable and instant.\n    \"\"\"\n\n    @dataclasses.dataclass\n    class MockTiming:\n        _current_time: float = 1590150050.0\n\n        def sleep(self, seconds: float) -> None:\n            self._current_time += seconds\n\n        def time(self) -> float:\n            return self._current_time\n\n        def patch(self) -> None:\n            from _pytest import timing\n\n            monkeypatch.setattr(timing, \"sleep\", self.sleep)\n            monkeypatch.setattr(timing, \"time\", self.time)\n            monkeypatch.setattr(timing, \"perf_counter\", self.time)\n\n    result = MockTiming()\n    result.patch()\n    return result\n", "testing/test_scope.py": "from __future__ import annotations\n\nimport re\n\nfrom _pytest.scope import Scope\nimport pytest\n\n\ndef test_ordering() -> None:\n    assert Scope.Session > Scope.Package\n    assert Scope.Package > Scope.Module\n    assert Scope.Module > Scope.Class\n    assert Scope.Class > Scope.Function\n\n\ndef test_next_lower() -> None:\n    assert Scope.Session.next_lower() is Scope.Package\n    assert Scope.Package.next_lower() is Scope.Module\n    assert Scope.Module.next_lower() is Scope.Class\n    assert Scope.Class.next_lower() is Scope.Function\n\n    with pytest.raises(ValueError, match=\"Function is the lower-most scope\"):\n        Scope.Function.next_lower()\n\n\ndef test_next_higher() -> None:\n    assert Scope.Function.next_higher() is Scope.Class\n    assert Scope.Class.next_higher() is Scope.Module\n    assert Scope.Module.next_higher() is Scope.Package\n    assert Scope.Package.next_higher() is Scope.Session\n\n    with pytest.raises(ValueError, match=\"Session is the upper-most scope\"):\n        Scope.Session.next_higher()\n\n\ndef test_from_user() -> None:\n    assert Scope.from_user(\"module\", \"for parametrize\", \"some::id\") is Scope.Module\n\n    expected_msg = \"for parametrize from some::id got an unexpected scope value 'foo'\"\n    with pytest.raises(pytest.fail.Exception, match=re.escape(expected_msg)):\n        Scope.from_user(\"foo\", \"for parametrize\", \"some::id\")  # type:ignore[arg-type]\n", "testing/test_entry_points.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport importlib.metadata\n\n\ndef test_pytest_entry_points_are_identical():\n    dist = importlib.metadata.distribution(\"pytest\")\n    entry_map = {ep.name: ep for ep in dist.entry_points}\n    assert entry_map[\"pytest\"].value == entry_map[\"py.test\"].value\n", "testing/test_runner_xunit.py": "# mypy: allow-untyped-defs\n\"\"\"Test correct setup/teardowns at module, class, and instance level.\"\"\"\n\nfrom __future__ import annotations\n\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef test_module_and_function_setup(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        modlevel = []\n        def setup_module(module):\n            assert not modlevel\n            module.modlevel.append(42)\n\n        def teardown_module(module):\n            modlevel.pop()\n\n        def setup_function(function):\n            function.answer = 17\n\n        def teardown_function(function):\n            del function.answer\n\n        def test_modlevel():\n            assert modlevel[0] == 42\n            assert test_modlevel.answer == 17\n\n        class TestFromClass(object):\n            def test_module(self):\n                assert modlevel[0] == 42\n                assert not hasattr(test_modlevel, 'answer')\n    \"\"\"\n    )\n    rep = reprec.matchreport(\"test_modlevel\")\n    assert rep.passed\n    rep = reprec.matchreport(\"test_module\")\n    assert rep.passed\n\n\ndef test_module_setup_failure_no_teardown(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        values = []\n        def setup_module(module):\n            values.append(1)\n            0/0\n\n        def test_nothing():\n            pass\n\n        def teardown_module(module):\n            values.append(2)\n    \"\"\"\n    )\n    reprec.assertoutcome(failed=1)\n    calls = reprec.getcalls(\"pytest_runtest_setup\")\n    assert calls[0].item.module.values == [1]\n\n\ndef test_setup_function_failure_no_teardown(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        modlevel = []\n        def setup_function(function):\n            modlevel.append(1)\n            0/0\n\n        def teardown_function(module):\n            modlevel.append(2)\n\n        def test_func():\n            pass\n    \"\"\"\n    )\n    calls = reprec.getcalls(\"pytest_runtest_setup\")\n    assert calls[0].item.module.modlevel == [1]\n\n\ndef test_class_setup(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        class TestSimpleClassSetup(object):\n            clslevel = []\n            def setup_class(cls):\n                cls.clslevel.append(23)\n\n            def teardown_class(cls):\n                cls.clslevel.pop()\n\n            def test_classlevel(self):\n                assert self.clslevel[0] == 23\n\n        class TestInheritedClassSetupStillWorks(TestSimpleClassSetup):\n            def test_classlevel_anothertime(self):\n                assert self.clslevel == [23]\n\n        def test_cleanup():\n            assert not TestSimpleClassSetup.clslevel\n            assert not TestInheritedClassSetupStillWorks.clslevel\n    \"\"\"\n    )\n    reprec.assertoutcome(passed=1 + 2 + 1)\n\n\ndef test_class_setup_failure_no_teardown(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        class TestSimpleClassSetup(object):\n            clslevel = []\n            def setup_class(cls):\n                0/0\n\n            def teardown_class(cls):\n                cls.clslevel.append(1)\n\n            def test_classlevel(self):\n                pass\n\n        def test_cleanup():\n            assert not TestSimpleClassSetup.clslevel\n    \"\"\"\n    )\n    reprec.assertoutcome(failed=1, passed=1)\n\n\ndef test_method_setup(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        class TestSetupMethod(object):\n            def setup_method(self, meth):\n                self.methsetup = meth\n            def teardown_method(self, meth):\n                del self.methsetup\n\n            def test_some(self):\n                assert self.methsetup == self.test_some\n\n            def test_other(self):\n                assert self.methsetup == self.test_other\n    \"\"\"\n    )\n    reprec.assertoutcome(passed=2)\n\n\ndef test_method_setup_failure_no_teardown(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        class TestMethodSetup(object):\n            clslevel = []\n            def setup_method(self, method):\n                self.clslevel.append(1)\n                0/0\n\n            def teardown_method(self, method):\n                self.clslevel.append(2)\n\n            def test_method(self):\n                pass\n\n        def test_cleanup():\n            assert TestMethodSetup.clslevel == [1]\n    \"\"\"\n    )\n    reprec.assertoutcome(failed=1, passed=1)\n\n\ndef test_method_setup_uses_fresh_instances(pytester: Pytester) -> None:\n    reprec = pytester.inline_runsource(\n        \"\"\"\n        class TestSelfState1(object):\n            memory = []\n            def test_hello(self):\n                self.memory.append(self)\n\n            def test_afterhello(self):\n                assert self != self.memory[0]\n    \"\"\"\n    )\n    reprec.assertoutcome(passed=2, failed=0)\n\n\ndef test_setup_that_skips_calledagain(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def setup_module(mod):\n            pytest.skip(\"x\")\n        def test_function1():\n            pass\n        def test_function2():\n            pass\n    \"\"\"\n    )\n    reprec = pytester.inline_run(p)\n    reprec.assertoutcome(skipped=2)\n\n\ndef test_setup_fails_again_on_all_tests(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def setup_module(mod):\n            raise ValueError(42)\n        def test_function1():\n            pass\n        def test_function2():\n            pass\n    \"\"\"\n    )\n    reprec = pytester.inline_run(p)\n    reprec.assertoutcome(failed=2)\n\n\ndef test_setup_funcarg_setup_when_outer_scope_fails(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def setup_module(mod):\n            raise ValueError(42)\n        @pytest.fixture\n        def hello(request):\n            raise ValueError(\"xyz43\")\n        def test_function1(hello):\n            pass\n        def test_function2(hello):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(p)\n    result.stdout.fnmatch_lines(\n        [\n            \"*function1*\",\n            \"*ValueError*42*\",\n            \"*function2*\",\n            \"*ValueError*42*\",\n            \"*2 errors*\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*xyz43*\")\n\n\n@pytest.mark.parametrize(\"arg\", [\"\", \"arg\"])\ndef test_setup_teardown_function_level_with_optional_argument(\n    pytester: Pytester,\n    monkeypatch,\n    arg: str,\n) -> None:\n    \"\"\"Parameter to setup/teardown xunit-style functions parameter is now optional (#1728).\"\"\"\n    import sys\n\n    trace_setups_teardowns: list[str] = []\n    monkeypatch.setattr(\n        sys, \"trace_setups_teardowns\", trace_setups_teardowns, raising=False\n    )\n    p = pytester.makepyfile(\n        f\"\"\"\n        import pytest\n        import sys\n\n        trace = sys.trace_setups_teardowns.append\n\n        def setup_module({arg}): trace('setup_module')\n        def teardown_module({arg}): trace('teardown_module')\n\n        def setup_function({arg}): trace('setup_function')\n        def teardown_function({arg}): trace('teardown_function')\n\n        def test_function_1(): pass\n        def test_function_2(): pass\n\n        class Test(object):\n            def setup_method(self, {arg}): trace('setup_method')\n            def teardown_method(self, {arg}): trace('teardown_method')\n\n            def test_method_1(self): pass\n            def test_method_2(self): pass\n    \"\"\"\n    )\n    result = pytester.inline_run(p)\n    result.assertoutcome(passed=4)\n\n    expected = [\n        \"setup_module\",\n        \"setup_function\",\n        \"teardown_function\",\n        \"setup_function\",\n        \"teardown_function\",\n        \"setup_method\",\n        \"teardown_method\",\n        \"setup_method\",\n        \"teardown_method\",\n        \"teardown_module\",\n    ]\n    assert trace_setups_teardowns == expected\n", "testing/test_warning_types.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport inspect\n\nfrom _pytest import warning_types\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"warning_class\",\n    [\n        w\n        for n, w in vars(warning_types).items()\n        if inspect.isclass(w) and issubclass(w, Warning)\n    ],\n)\ndef test_warning_types(warning_class: UserWarning) -> None:\n    \"\"\"Make sure all warnings declared in _pytest.warning_types are displayed as coming\n    from 'pytest' instead of the internal module (#5452).\n    \"\"\"\n    assert warning_class.__module__ == \"pytest\"\n\n\n@pytest.mark.filterwarnings(\"error::pytest.PytestWarning\")\ndef test_pytest_warnings_repr_integration_test(pytester: Pytester) -> None:\n    \"\"\"Small integration test to ensure our small hack of setting the __module__ attribute\n    of our warnings actually works (#5452).\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import warnings\n\n        def test():\n            warnings.warn(pytest.PytestWarning(\"some warning\"))\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"E       pytest.PytestWarning: some warning\"])\n\n\n@pytest.mark.filterwarnings(\"error\")\ndef test_warn_explicit_for_annotates_errors_with_location():\n    with pytest.raises(Warning, match=\"(?m)test\\n at .*python_api.py:\\\\d+\"):\n        warning_types.warn_explicit_for(\n            pytest.raises,  # type: ignore[arg-type]\n            warning_types.PytestWarning(\"test\"),\n        )\n", "testing/test_pluginmanager.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nimport shutil\nimport sys\nimport types\n\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.config.exceptions import UsageError\nfrom _pytest.main import Session\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pathlib import import_path\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.fixture\ndef pytestpm() -> PytestPluginManager:\n    return PytestPluginManager()\n\n\nclass TestPytestPluginInteractions:\n    def test_addhooks_conftestplugin(\n        self, pytester: Pytester, _config_for_test: Config\n    ) -> None:\n        pytester.makepyfile(\n            newhooks=\"\"\"\n            def pytest_myhook(xyz):\n                \"new hook\"\n        \"\"\"\n        )\n        conf = pytester.makeconftest(\n            \"\"\"\n            import newhooks\n            def pytest_addhooks(pluginmanager):\n                pluginmanager.add_hookspecs(newhooks)\n            def pytest_myhook(xyz):\n                return xyz + 1\n        \"\"\"\n        )\n        config = _config_for_test\n        pm = config.pluginmanager\n        pm.hook.pytest_addhooks.call_historic(\n            kwargs=dict(pluginmanager=config.pluginmanager)\n        )\n        config.pluginmanager._importconftest(\n            conf,\n            importmode=\"prepend\",\n            rootpath=pytester.path,\n            consider_namespace_packages=False,\n        )\n        # print(config.pluginmanager.get_plugins())\n        res = config.hook.pytest_myhook(xyz=10)\n        assert res == [11]\n\n    def test_addhooks_nohooks(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import sys\n            def pytest_addhooks(pluginmanager):\n                pluginmanager.add_hookspecs(sys)\n        \"\"\"\n        )\n        res = pytester.runpytest()\n        assert res.ret != 0\n        res.stderr.fnmatch_lines([\"*did not find*sys*\"])\n\n    def test_do_option_postinitialize(self, pytester: Pytester) -> None:\n        config = pytester.parseconfigure()\n        assert not hasattr(config.option, \"test123\")\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_addoption(parser):\n                parser.addoption('--test123', action=\"store_true\",\n                    default=True)\n        \"\"\"\n        )\n        config.pluginmanager._importconftest(\n            p,\n            importmode=\"prepend\",\n            rootpath=pytester.path,\n            consider_namespace_packages=False,\n        )\n        assert config.option.test123\n\n    def test_configure(self, pytester: Pytester) -> None:\n        config = pytester.parseconfig()\n        values = []\n\n        class A:\n            def pytest_configure(self):\n                values.append(self)\n\n        config.pluginmanager.register(A())\n        assert len(values) == 0\n        config._do_configure()\n        assert len(values) == 1\n        config.pluginmanager.register(A())  # leads to a configured() plugin\n        assert len(values) == 2\n        assert values[0] != values[1]\n\n        config._ensure_unconfigure()\n        config.pluginmanager.register(A())\n        assert len(values) == 2\n\n    @pytest.mark.skipif(\n        not sys.platform.startswith(\"win\"),\n        reason=\"requires a case-insensitive file system\",\n    )\n    def test_conftestpath_case_sensitivity(self, pytester: Pytester) -> None:\n        \"\"\"Unit test for issue #9765.\"\"\"\n        config = pytester.parseconfig()\n        pytester.makepyfile(**{\"tests/conftest.py\": \"\"})\n\n        conftest = pytester.path.joinpath(\"tests/conftest.py\")\n        conftest_upper_case = pytester.path.joinpath(\"TESTS/conftest.py\")\n\n        mod = config.pluginmanager._importconftest(\n            conftest,\n            importmode=\"prepend\",\n            rootpath=pytester.path,\n            consider_namespace_packages=False,\n        )\n        plugin = config.pluginmanager.get_plugin(str(conftest))\n        assert plugin is mod\n\n        mod_uppercase = config.pluginmanager._importconftest(\n            conftest_upper_case,\n            importmode=\"prepend\",\n            rootpath=pytester.path,\n            consider_namespace_packages=False,\n        )\n        plugin_uppercase = config.pluginmanager.get_plugin(str(conftest_upper_case))\n        assert plugin_uppercase is mod_uppercase\n\n        # No str(conftestpath) normalization so conftest should be imported\n        # twice and modules should be different objects\n        assert mod is not mod_uppercase\n\n    def test_hook_tracing(self, _config_for_test: Config) -> None:\n        pytestpm = _config_for_test.pluginmanager  # fully initialized with plugins\n        saveindent = []\n\n        class api1:\n            def pytest_plugin_registered(self):\n                saveindent.append(pytestpm.trace.root.indent)\n\n        class api2:\n            def pytest_plugin_registered(self):\n                saveindent.append(pytestpm.trace.root.indent)\n                raise ValueError()\n\n        values: list[str] = []\n        pytestpm.trace.root.setwriter(values.append)\n        undo = pytestpm.enable_tracing()\n        try:\n            indent = pytestpm.trace.root.indent\n            p = api1()\n            pytestpm.register(p)\n            assert pytestpm.trace.root.indent == indent\n            assert len(values) >= 2\n            assert \"pytest_plugin_registered\" in values[0]\n            assert \"finish\" in values[1]\n\n            values[:] = []\n            with pytest.raises(ValueError):\n                pytestpm.register(api2())\n            assert pytestpm.trace.root.indent == indent\n            assert saveindent[0] > indent\n        finally:\n            undo()\n\n    def test_hook_proxy(self, pytester: Pytester) -> None:\n        \"\"\"Test the gethookproxy function(#2016)\"\"\"\n        config = pytester.parseconfig()\n        session = Session.from_config(config)\n        pytester.makepyfile(**{\"tests/conftest.py\": \"\", \"tests/subdir/conftest.py\": \"\"})\n\n        conftest1 = pytester.path.joinpath(\"tests/conftest.py\")\n        conftest2 = pytester.path.joinpath(\"tests/subdir/conftest.py\")\n\n        config.pluginmanager._importconftest(\n            conftest1,\n            importmode=\"prepend\",\n            rootpath=pytester.path,\n            consider_namespace_packages=False,\n        )\n        ihook_a = session.gethookproxy(pytester.path / \"tests\")\n        assert ihook_a is not None\n        config.pluginmanager._importconftest(\n            conftest2,\n            importmode=\"prepend\",\n            rootpath=pytester.path,\n            consider_namespace_packages=False,\n        )\n        ihook_b = session.gethookproxy(pytester.path / \"tests\")\n        assert ihook_a is not ihook_b\n\n    def test_hook_with_addoption(self, pytester: Pytester) -> None:\n        \"\"\"Test that hooks can be used in a call to pytest_addoption\"\"\"\n        pytester.makepyfile(\n            newhooks=\"\"\"\n            import pytest\n            @pytest.hookspec(firstresult=True)\n            def pytest_default_value():\n                pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            myplugin=\"\"\"\n            import newhooks\n            def pytest_addhooks(pluginmanager):\n                pluginmanager.add_hookspecs(newhooks)\n            def pytest_addoption(parser, pluginmanager):\n                default_value = pluginmanager.hook.pytest_default_value()\n                parser.addoption(\"--config\", help=\"Config, defaults to %(default)s\", default=default_value)\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            pytest_plugins=(\"myplugin\",)\n            def pytest_default_value():\n                return \"default_value\"\n        \"\"\"\n        )\n        res = pytester.runpytest(\"--help\")\n        res.stdout.fnmatch_lines([\"*--config=CONFIG*default_value*\"])\n\n\ndef test_default_markers(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--markers\")\n    result.stdout.fnmatch_lines([\"*tryfirst*first*\", \"*trylast*last*\"])\n\n\ndef test_importplugin_error_message(\n    pytester: Pytester, pytestpm: PytestPluginManager\n) -> None:\n    \"\"\"Don't hide import errors when importing plugins and provide\n    an easy to debug message.\n\n    See #375 and #1998.\n    \"\"\"\n    pytester.syspathinsert(pytester.path)\n    pytester.makepyfile(\n        qwe=\"\"\"\\\n        def test_traceback():\n            raise ImportError('Not possible to import: \u263a')\n        test_traceback()\n        \"\"\"\n    )\n    with pytest.raises(ImportError) as excinfo:\n        pytestpm.import_plugin(\"qwe\")\n\n    assert str(excinfo.value).endswith(\n        'Error importing plugin \"qwe\": Not possible to import: \u263a'\n    )\n    assert \"in test_traceback\" in str(excinfo.traceback[-1])\n\n\nclass TestPytestPluginManager:\n    def test_register_imported_modules(self) -> None:\n        pm = PytestPluginManager()\n        mod = types.ModuleType(\"x.y.pytest_hello\")\n        pm.register(mod)\n        assert pm.is_registered(mod)\n        values = pm.get_plugins()\n        assert mod in values\n        pytest.raises(ValueError, pm.register, mod)\n        pytest.raises(ValueError, lambda: pm.register(mod))\n        # assert not pm.is_registered(mod2)\n        assert pm.get_plugins() == values\n\n    def test_canonical_import(self, monkeypatch):\n        mod = types.ModuleType(\"pytest_xyz\")\n        monkeypatch.setitem(sys.modules, \"pytest_xyz\", mod)\n        pm = PytestPluginManager()\n        pm.import_plugin(\"pytest_xyz\")\n        assert pm.get_plugin(\"pytest_xyz\") == mod\n        assert pm.is_registered(mod)\n\n    def test_consider_module(\n        self, pytester: Pytester, pytestpm: PytestPluginManager\n    ) -> None:\n        pytester.syspathinsert()\n        pytester.makepyfile(pytest_p1=\"#\")\n        pytester.makepyfile(pytest_p2=\"#\")\n        mod = types.ModuleType(\"temp\")\n        mod.__dict__[\"pytest_plugins\"] = [\"pytest_p1\", \"pytest_p2\"]\n        pytestpm.consider_module(mod)\n        p1 = pytestpm.get_plugin(\"pytest_p1\")\n        assert p1 is not None\n        assert p1.__name__ == \"pytest_p1\"\n        p2 = pytestpm.get_plugin(\"pytest_p2\")\n        assert p2 is not None\n        assert p2.__name__ == \"pytest_p2\"\n\n    def test_consider_module_import_module(\n        self, pytester: Pytester, _config_for_test: Config\n    ) -> None:\n        pytestpm = _config_for_test.pluginmanager\n        mod = types.ModuleType(\"x\")\n        mod.__dict__[\"pytest_plugins\"] = \"pytest_a\"\n        aplugin = pytester.makepyfile(pytest_a=\"#\")\n        reprec = pytester.make_hook_recorder(pytestpm)\n        pytester.syspathinsert(aplugin.parent)\n        pytestpm.consider_module(mod)\n        call = reprec.getcall(pytestpm.hook.pytest_plugin_registered.name)\n        assert call.plugin.__name__ == \"pytest_a\"\n\n        # check that it is not registered twice\n        pytestpm.consider_module(mod)\n        values = reprec.getcalls(\"pytest_plugin_registered\")\n        assert len(values) == 1\n\n    def test_consider_env_fails_to_import(\n        self, monkeypatch: MonkeyPatch, pytestpm: PytestPluginManager\n    ) -> None:\n        monkeypatch.setenv(\"PYTEST_PLUGINS\", \"nonexisting\", prepend=\",\")\n        with pytest.raises(ImportError):\n            pytestpm.consider_env()\n\n    @pytest.mark.filterwarnings(\"always\")\n    def test_plugin_skip(self, pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n        p = pytester.makepyfile(\n            skipping1=\"\"\"\n            import pytest\n            pytest.skip(\"hello\", allow_module_level=True)\n        \"\"\"\n        )\n        shutil.copy(p, p.with_name(\"skipping2.py\"))\n        monkeypatch.setenv(\"PYTEST_PLUGINS\", \"skipping2\")\n        result = pytester.runpytest(\"-p\", \"skipping1\", syspathinsert=True)\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n        result.stdout.fnmatch_lines(\n            [\"*skipped plugin*skipping1*hello*\", \"*skipped plugin*skipping2*hello*\"]\n        )\n\n    def test_consider_env_plugin_instantiation(\n        self,\n        pytester: Pytester,\n        monkeypatch: MonkeyPatch,\n        pytestpm: PytestPluginManager,\n    ) -> None:\n        pytester.syspathinsert()\n        pytester.makepyfile(xy123=\"#\")\n        monkeypatch.setitem(os.environ, \"PYTEST_PLUGINS\", \"xy123\")\n        l1 = len(pytestpm.get_plugins())\n        pytestpm.consider_env()\n        l2 = len(pytestpm.get_plugins())\n        assert l2 == l1 + 1\n        assert pytestpm.get_plugin(\"xy123\")\n        pytestpm.consider_env()\n        l3 = len(pytestpm.get_plugins())\n        assert l2 == l3\n\n    def test_pluginmanager_ENV_startup(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        pytester.makepyfile(pytest_x500=\"#\")\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_hello(pytestconfig):\n                plugin = pytestconfig.pluginmanager.get_plugin('pytest_x500')\n                assert plugin is not None\n        \"\"\"\n        )\n        monkeypatch.setenv(\"PYTEST_PLUGINS\", \"pytest_x500\", prepend=\",\")\n        result = pytester.runpytest(p, syspathinsert=True)\n        assert result.ret == 0\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_import_plugin_importname(\n        self, pytester: Pytester, pytestpm: PytestPluginManager\n    ) -> None:\n        pytest.raises(ImportError, pytestpm.import_plugin, \"qweqwex.y\")\n        pytest.raises(ImportError, pytestpm.import_plugin, \"pytest_qweqwx.y\")\n\n        pytester.syspathinsert()\n        pluginname = \"pytest_hello\"\n        pytester.makepyfile(**{pluginname: \"\"})\n        pytestpm.import_plugin(\"pytest_hello\")\n        len1 = len(pytestpm.get_plugins())\n        pytestpm.import_plugin(\"pytest_hello\")\n        len2 = len(pytestpm.get_plugins())\n        assert len1 == len2\n        plugin1 = pytestpm.get_plugin(\"pytest_hello\")\n        assert plugin1 is not None\n        assert plugin1.__name__.endswith(\"pytest_hello\")\n        plugin2 = pytestpm.get_plugin(\"pytest_hello\")\n        assert plugin2 is plugin1\n\n    def test_import_plugin_dotted_name(\n        self, pytester: Pytester, pytestpm: PytestPluginManager\n    ) -> None:\n        pytest.raises(ImportError, pytestpm.import_plugin, \"qweqwex.y\")\n        pytest.raises(ImportError, pytestpm.import_plugin, \"pytest_qweqwex.y\")\n\n        pytester.syspathinsert()\n        pytester.mkpydir(\"pkg\").joinpath(\"plug.py\").write_text(\"x=3\", encoding=\"utf-8\")\n        pluginname = \"pkg.plug\"\n        pytestpm.import_plugin(pluginname)\n        mod = pytestpm.get_plugin(\"pkg.plug\")\n        assert mod is not None\n        assert mod.x == 3\n\n    def test_consider_conftest_deps(\n        self,\n        pytester: Pytester,\n        pytestpm: PytestPluginManager,\n    ) -> None:\n        mod = import_path(\n            pytester.makepyfile(\"pytest_plugins='xyz'\"),\n            root=pytester.path,\n            consider_namespace_packages=False,\n        )\n        with pytest.raises(ImportError):\n            pytestpm.consider_conftest(mod, registration_name=\"unused\")\n\n\nclass TestPytestPluginManagerBootstrapping:\n    def test_preparse_args(self, pytestpm: PytestPluginManager) -> None:\n        pytest.raises(\n            ImportError, lambda: pytestpm.consider_preparse([\"xyz\", \"-p\", \"hello123\"])\n        )\n\n        # Handles -p without space (#3532).\n        with pytest.raises(ImportError) as excinfo:\n            pytestpm.consider_preparse([\"-phello123\"])\n        assert '\"hello123\"' in excinfo.value.args[0]\n        pytestpm.consider_preparse([\"-pno:hello123\"])\n\n        # Handles -p without following arg (when used without argparse).\n        pytestpm.consider_preparse([\"-p\"])\n\n        with pytest.raises(UsageError, match=\"^plugin main cannot be disabled$\"):\n            pytestpm.consider_preparse([\"-p\", \"no:main\"])\n\n    def test_plugin_prevent_register(self, pytestpm: PytestPluginManager) -> None:\n        pytestpm.consider_preparse([\"xyz\", \"-p\", \"no:abc\"])\n        l1 = pytestpm.get_plugins()\n        pytestpm.register(42, name=\"abc\")\n        l2 = pytestpm.get_plugins()\n        assert len(l2) == len(l1)\n        assert 42 not in l2\n\n    def test_plugin_prevent_register_unregistered_already_registered(\n        self, pytestpm: PytestPluginManager\n    ) -> None:\n        pytestpm.register(42, name=\"abc\")\n        l1 = pytestpm.get_plugins()\n        assert 42 in l1\n        pytestpm.consider_preparse([\"xyz\", \"-p\", \"no:abc\"])\n        l2 = pytestpm.get_plugins()\n        assert 42 not in l2\n\n    def test_plugin_prevent_register_stepwise_on_cacheprovider_unregister(\n        self, pytestpm: PytestPluginManager\n    ) -> None:\n        \"\"\"From PR #4304: The only way to unregister a module is documented at\n        the end of https://docs.pytest.org/en/stable/how-to/plugins.html.\n\n        When unregister cacheprovider, then unregister stepwise too.\n        \"\"\"\n        pytestpm.register(42, name=\"cacheprovider\")\n        pytestpm.register(43, name=\"stepwise\")\n        l1 = pytestpm.get_plugins()\n        assert 42 in l1\n        assert 43 in l1\n        pytestpm.consider_preparse([\"xyz\", \"-p\", \"no:cacheprovider\"])\n        l2 = pytestpm.get_plugins()\n        assert 42 not in l2\n        assert 43 not in l2\n\n    def test_blocked_plugin_can_be_used(self, pytestpm: PytestPluginManager) -> None:\n        pytestpm.consider_preparse([\"xyz\", \"-p\", \"no:abc\", \"-p\", \"abc\"])\n\n        assert pytestpm.has_plugin(\"abc\")\n        assert not pytestpm.is_blocked(\"abc\")\n        assert not pytestpm.is_blocked(\"pytest_abc\")\n", "testing/test_stepwise.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nfrom _pytest.cacheprovider import Cache\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nfrom _pytest.stepwise import STEPWISE_CACHE_DIR\nimport pytest\n\n\n@pytest.fixture\ndef stepwise_pytester(pytester: Pytester) -> Pytester:\n    # Rather than having to modify our testfile between tests, we introduce\n    # a flag for whether or not the second test should fail.\n    pytester.makeconftest(\n        \"\"\"\ndef pytest_addoption(parser):\n    group = parser.getgroup('general')\n    group.addoption('--fail', action='store_true', dest='fail')\n    group.addoption('--fail-last', action='store_true', dest='fail_last')\n\"\"\"\n    )\n\n    # Create a simple test suite.\n    pytester.makepyfile(\n        test_a=\"\"\"\ndef test_success_before_fail():\n    assert 1\n\ndef test_fail_on_flag(request):\n    assert not request.config.getvalue('fail')\n\ndef test_success_after_fail():\n    assert 1\n\ndef test_fail_last_on_flag(request):\n    assert not request.config.getvalue('fail_last')\n\ndef test_success_after_last_fail():\n    assert 1\n\"\"\"\n    )\n\n    pytester.makepyfile(\n        test_b=\"\"\"\ndef test_success():\n    assert 1\n\"\"\"\n    )\n\n    # customize cache directory so we don't use the tox's cache directory, which makes tests in this module flaky\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        cache_dir = .cache\n    \"\"\"\n    )\n\n    return pytester\n\n\n@pytest.fixture\ndef error_pytester(pytester: Pytester) -> Pytester:\n    pytester.makepyfile(\n        test_a=\"\"\"\ndef test_error(nonexisting_fixture):\n    assert 1\n\ndef test_success_after_fail():\n    assert 1\n\"\"\"\n    )\n\n    return pytester\n\n\n@pytest.fixture\ndef broken_pytester(pytester: Pytester) -> Pytester:\n    pytester.makepyfile(\n        working_testfile=\"def test_proper(): assert 1\", broken_testfile=\"foobar\"\n    )\n    return pytester\n\n\ndef _strip_resource_warnings(lines):\n    # Strip unreliable ResourceWarnings, so no-output assertions on stderr can work.\n    # (https://github.com/pytest-dev/pytest/issues/5088)\n    return [\n        x\n        for x in lines\n        if not x.startswith((\"Exception ignored in:\", \"ResourceWarning\"))\n    ]\n\n\ndef test_run_without_stepwise(stepwise_pytester: Pytester) -> None:\n    result = stepwise_pytester.runpytest(\"-v\", \"--strict-markers\", \"--fail\")\n    result.stdout.fnmatch_lines([\"*test_success_before_fail PASSED*\"])\n    result.stdout.fnmatch_lines([\"*test_fail_on_flag FAILED*\"])\n    result.stdout.fnmatch_lines([\"*test_success_after_fail PASSED*\"])\n\n\ndef test_stepwise_output_summary(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.parametrize(\"expected\", [True, True, True, True, False])\n        def test_data(expected):\n            assert expected\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-v\", \"--stepwise\")\n    result.stdout.fnmatch_lines([\"stepwise: no previously failed tests, not skipping.\"])\n    result = pytester.runpytest(\"-v\", \"--stepwise\")\n    result.stdout.fnmatch_lines(\n        [\"stepwise: skipping 4 already passed items.\", \"*1 failed, 4 deselected*\"]\n    )\n\n\ndef test_fail_and_continue_with_stepwise(stepwise_pytester: Pytester) -> None:\n    # Run the tests with a failing second test.\n    result = stepwise_pytester.runpytest(\n        \"-v\", \"--strict-markers\", \"--stepwise\", \"--fail\"\n    )\n    assert _strip_resource_warnings(result.stderr.lines) == []\n\n    stdout = result.stdout.str()\n    # Make sure we stop after first failing test.\n    assert \"test_success_before_fail PASSED\" in stdout\n    assert \"test_fail_on_flag FAILED\" in stdout\n    assert \"test_success_after_fail\" not in stdout\n\n    # \"Fix\" the test that failed in the last run and run it again.\n    result = stepwise_pytester.runpytest(\"-v\", \"--strict-markers\", \"--stepwise\")\n    assert _strip_resource_warnings(result.stderr.lines) == []\n\n    stdout = result.stdout.str()\n    # Make sure the latest failing test runs and then continues.\n    assert \"test_success_before_fail\" not in stdout\n    assert \"test_fail_on_flag PASSED\" in stdout\n    assert \"test_success_after_fail PASSED\" in stdout\n\n\n@pytest.mark.parametrize(\"stepwise_skip\", [\"--stepwise-skip\", \"--sw-skip\"])\ndef test_run_with_skip_option(stepwise_pytester: Pytester, stepwise_skip: str) -> None:\n    result = stepwise_pytester.runpytest(\n        \"-v\",\n        \"--strict-markers\",\n        \"--stepwise\",\n        stepwise_skip,\n        \"--fail\",\n        \"--fail-last\",\n    )\n    assert _strip_resource_warnings(result.stderr.lines) == []\n\n    stdout = result.stdout.str()\n    # Make sure first fail is ignore and second fail stops the test run.\n    assert \"test_fail_on_flag FAILED\" in stdout\n    assert \"test_success_after_fail PASSED\" in stdout\n    assert \"test_fail_last_on_flag FAILED\" in stdout\n    assert \"test_success_after_last_fail\" not in stdout\n\n\ndef test_fail_on_errors(error_pytester: Pytester) -> None:\n    result = error_pytester.runpytest(\"-v\", \"--strict-markers\", \"--stepwise\")\n\n    assert _strip_resource_warnings(result.stderr.lines) == []\n    stdout = result.stdout.str()\n\n    assert \"test_error ERROR\" in stdout\n    assert \"test_success_after_fail\" not in stdout\n\n\ndef test_change_testfile(stepwise_pytester: Pytester) -> None:\n    result = stepwise_pytester.runpytest(\n        \"-v\", \"--strict-markers\", \"--stepwise\", \"--fail\", \"test_a.py\"\n    )\n    assert _strip_resource_warnings(result.stderr.lines) == []\n\n    stdout = result.stdout.str()\n    assert \"test_fail_on_flag FAILED\" in stdout\n\n    # Make sure the second test run starts from the beginning, since the\n    # test to continue from does not exist in testfile_b.\n    result = stepwise_pytester.runpytest(\n        \"-v\", \"--strict-markers\", \"--stepwise\", \"test_b.py\"\n    )\n    assert _strip_resource_warnings(result.stderr.lines) == []\n\n    stdout = result.stdout.str()\n    assert \"test_success PASSED\" in stdout\n\n\n@pytest.mark.parametrize(\"broken_first\", [True, False])\ndef test_stop_on_collection_errors(\n    broken_pytester: Pytester, broken_first: bool\n) -> None:\n    \"\"\"Stop during collection errors. Broken test first or broken test last\n    actually surfaced a bug (#5444), so we test both situations.\"\"\"\n    files = [\"working_testfile.py\", \"broken_testfile.py\"]\n    if broken_first:\n        files.reverse()\n    result = broken_pytester.runpytest(\"-v\", \"--strict-markers\", \"--stepwise\", *files)\n    result.stdout.fnmatch_lines(\"*error during collection*\")\n\n\ndef test_xfail_handling(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    \"\"\"Ensure normal xfail is ignored, and strict xfail interrupts the session in sw mode\n\n    (#5547)\n    \"\"\"\n    monkeypatch.setattr(\"sys.dont_write_bytecode\", True)\n\n    contents = \"\"\"\n        import pytest\n        def test_a(): pass\n\n        @pytest.mark.xfail(strict={strict})\n        def test_b(): assert {assert_value}\n\n        def test_c(): pass\n        def test_d(): pass\n    \"\"\"\n    pytester.makepyfile(contents.format(assert_value=\"0\", strict=\"False\"))\n    result = pytester.runpytest(\"--sw\", \"-v\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*::test_a PASSED *\",\n            \"*::test_b XFAIL *\",\n            \"*::test_c PASSED *\",\n            \"*::test_d PASSED *\",\n            \"* 3 passed, 1 xfailed in *\",\n        ]\n    )\n\n    pytester.makepyfile(contents.format(assert_value=\"1\", strict=\"True\"))\n    result = pytester.runpytest(\"--sw\", \"-v\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*::test_a PASSED *\",\n            \"*::test_b FAILED *\",\n            \"* Interrupted*\",\n            \"* 1 failed, 1 passed in *\",\n        ]\n    )\n\n    pytester.makepyfile(contents.format(assert_value=\"0\", strict=\"True\"))\n    result = pytester.runpytest(\"--sw\", \"-v\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*::test_b XFAIL *\",\n            \"*::test_c PASSED *\",\n            \"*::test_d PASSED *\",\n            \"* 2 passed, 1 deselected, 1 xfailed in *\",\n        ]\n    )\n\n\ndef test_stepwise_skip_is_independent(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_one():\n            assert False\n\n        def test_two():\n            assert False\n\n        def test_three():\n            assert False\n\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--tb\", \"no\", \"--stepwise-skip\")\n    result.assert_outcomes(failed=2)\n    result.stdout.fnmatch_lines(\n        [\n            \"FAILED test_stepwise_skip_is_independent.py::test_one - assert False\",\n            \"FAILED test_stepwise_skip_is_independent.py::test_two - assert False\",\n            \"*Interrupted: Test failed, continuing from this test next run.*\",\n        ]\n    )\n\n\ndef test_sw_skip_help(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"-h\")\n    result.stdout.fnmatch_lines(\"*Implicitly enables --stepwise.\")\n\n\ndef test_stepwise_xdist_dont_store_lastfailed(pytester: Pytester) -> None:\n    pytester.makefile(\n        ext=\".ini\",\n        pytest=f\"[pytest]\\ncache_dir = {pytester.path}\\n\",\n    )\n\n    pytester.makepyfile(\n        conftest=\"\"\"\nimport pytest\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_configure(config) -> None:\n    config.workerinput = True\n\"\"\"\n    )\n    pytester.makepyfile(\n        test_one=\"\"\"\ndef test_one():\n    assert False\n\"\"\"\n    )\n    result = pytester.runpytest(\"--stepwise\")\n    assert result.ret == pytest.ExitCode.INTERRUPTED\n\n    stepwise_cache_file = (\n        pytester.path / Cache._CACHE_PREFIX_VALUES / STEPWISE_CACHE_DIR\n    )\n    assert not Path(stepwise_cache_file).exists()\n\n\ndef test_disabled_stepwise_xdist_dont_clear_cache(pytester: Pytester) -> None:\n    pytester.makefile(\n        ext=\".ini\",\n        pytest=f\"[pytest]\\ncache_dir = {pytester.path}\\n\",\n    )\n\n    stepwise_cache_file = (\n        pytester.path / Cache._CACHE_PREFIX_VALUES / STEPWISE_CACHE_DIR\n    )\n    stepwise_cache_dir = stepwise_cache_file.parent\n    stepwise_cache_dir.mkdir(exist_ok=True, parents=True)\n\n    stepwise_cache_file_relative = f\"{Cache._CACHE_PREFIX_VALUES}/{STEPWISE_CACHE_DIR}\"\n\n    expected_value = '\"test_one.py::test_one\"'\n    content = {f\"{stepwise_cache_file_relative}\": expected_value}\n\n    pytester.makefile(ext=\"\", **content)\n\n    pytester.makepyfile(\n        conftest=\"\"\"\nimport pytest\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_configure(config) -> None:\n    config.workerinput = True\n\"\"\"\n    )\n    pytester.makepyfile(\n        test_one=\"\"\"\ndef test_one():\n    assert True\n\"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n    assert Path(stepwise_cache_file).exists()\n    with stepwise_cache_file.open(encoding=\"utf-8\") as file_handle:\n        observed_value = file_handle.readlines()\n    assert [expected_value] == observed_value\n", "testing/test_main.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport argparse\nimport os\nfrom pathlib import Path\nimport re\n\nfrom _pytest.config import ExitCode\nfrom _pytest.config import UsageError\nfrom _pytest.main import CollectionArgument\nfrom _pytest.main import resolve_collection_argument\nfrom _pytest.main import validate_basetemp\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"ret_exc\",\n    (\n        pytest.param((None, ValueError)),\n        pytest.param((42, SystemExit)),\n        pytest.param((False, SystemExit)),\n    ),\n)\ndef test_wrap_session_notify_exception(ret_exc, pytester: Pytester) -> None:\n    returncode, exc = ret_exc\n    c1 = pytester.makeconftest(\n        f\"\"\"\n        import pytest\n\n        def pytest_sessionstart():\n            raise {exc.__name__}(\"boom\")\n\n        def pytest_internalerror(excrepr, excinfo):\n            returncode = {returncode!r}\n            if returncode is not False:\n                pytest.exit(\"exiting after %s...\" % excinfo.typename, returncode={returncode!r})\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    if returncode:\n        assert result.ret == returncode\n    else:\n        assert result.ret == ExitCode.INTERNAL_ERROR\n    assert result.stdout.lines[0] == \"INTERNALERROR> Traceback (most recent call last):\"\n\n    end_lines = result.stdout.lines[-3:]\n\n    if exc == SystemExit:\n        assert end_lines == [\n            f'INTERNALERROR>   File \"{c1}\", line 4, in pytest_sessionstart',\n            'INTERNALERROR>     raise SystemExit(\"boom\")',\n            \"INTERNALERROR> SystemExit: boom\",\n        ]\n    else:\n        assert end_lines == [\n            f'INTERNALERROR>   File \"{c1}\", line 4, in pytest_sessionstart',\n            'INTERNALERROR>     raise ValueError(\"boom\")',\n            \"INTERNALERROR> ValueError: boom\",\n        ]\n    if returncode is False:\n        assert result.stderr.lines == [\"mainloop: caught unexpected SystemExit!\"]\n    else:\n        assert result.stderr.lines == [f\"Exit: exiting after {exc.__name__}...\"]\n\n\n@pytest.mark.parametrize(\"returncode\", (None, 42))\ndef test_wrap_session_exit_sessionfinish(\n    returncode: int | None, pytester: Pytester\n) -> None:\n    pytester.makeconftest(\n        f\"\"\"\n        import pytest\n        def pytest_sessionfinish():\n            pytest.exit(reason=\"exit_pytest_sessionfinish\", returncode={returncode})\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    if returncode:\n        assert result.ret == returncode\n    else:\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n    assert result.stdout.lines[-1] == \"collected 0 items\"\n    assert result.stderr.lines == [\"Exit: exit_pytest_sessionfinish\"]\n\n\n@pytest.mark.parametrize(\"basetemp\", [\"foo\", \"foo/bar\"])\ndef test_validate_basetemp_ok(tmp_path, basetemp, monkeypatch):\n    monkeypatch.chdir(str(tmp_path))\n    validate_basetemp(tmp_path / basetemp)\n\n\n@pytest.mark.parametrize(\"basetemp\", [\"\", \".\", \"..\"])\ndef test_validate_basetemp_fails(tmp_path, basetemp, monkeypatch):\n    monkeypatch.chdir(str(tmp_path))\n    msg = \"basetemp must not be empty, the current working directory or any parent directory of it\"\n    with pytest.raises(argparse.ArgumentTypeError, match=msg):\n        if basetemp:\n            basetemp = tmp_path / basetemp\n        validate_basetemp(basetemp)\n\n\ndef test_validate_basetemp_integration(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--basetemp=.\")\n    result.stderr.fnmatch_lines(\"*basetemp must not be*\")\n\n\nclass TestResolveCollectionArgument:\n    @pytest.fixture\n    def invocation_path(self, pytester: Pytester) -> Path:\n        pytester.syspathinsert(pytester.path / \"src\")\n        pytester.chdir()\n\n        pkg = pytester.path.joinpath(\"src/pkg\")\n        pkg.mkdir(parents=True)\n        pkg.joinpath(\"__init__.py\").touch()\n        pkg.joinpath(\"test.py\").touch()\n        return pytester.path\n\n    def test_file(self, invocation_path: Path) -> None:\n        \"\"\"File and parts.\"\"\"\n        assert resolve_collection_argument(\n            invocation_path, \"src/pkg/test.py\"\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg/test.py\",\n            parts=[],\n            module_name=None,\n        )\n        assert resolve_collection_argument(\n            invocation_path, \"src/pkg/test.py::\"\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg/test.py\",\n            parts=[\"\"],\n            module_name=None,\n        )\n        assert resolve_collection_argument(\n            invocation_path, \"src/pkg/test.py::foo::bar\"\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg/test.py\",\n            parts=[\"foo\", \"bar\"],\n            module_name=None,\n        )\n        assert resolve_collection_argument(\n            invocation_path, \"src/pkg/test.py::foo::bar::\"\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg/test.py\",\n            parts=[\"foo\", \"bar\", \"\"],\n            module_name=None,\n        )\n\n    def test_dir(self, invocation_path: Path) -> None:\n        \"\"\"Directory and parts.\"\"\"\n        assert resolve_collection_argument(\n            invocation_path, \"src/pkg\"\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg\",\n            parts=[],\n            module_name=None,\n        )\n\n        with pytest.raises(\n            UsageError, match=r\"directory argument cannot contain :: selection parts\"\n        ):\n            resolve_collection_argument(invocation_path, \"src/pkg::\")\n\n        with pytest.raises(\n            UsageError, match=r\"directory argument cannot contain :: selection parts\"\n        ):\n            resolve_collection_argument(invocation_path, \"src/pkg::foo::bar\")\n\n    def test_pypath(self, invocation_path: Path) -> None:\n        \"\"\"Dotted name and parts.\"\"\"\n        assert resolve_collection_argument(\n            invocation_path, \"pkg.test\", as_pypath=True\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg/test.py\",\n            parts=[],\n            module_name=\"pkg.test\",\n        )\n        assert resolve_collection_argument(\n            invocation_path, \"pkg.test::foo::bar\", as_pypath=True\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg/test.py\",\n            parts=[\"foo\", \"bar\"],\n            module_name=\"pkg.test\",\n        )\n        assert resolve_collection_argument(\n            invocation_path, \"pkg\", as_pypath=True\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg\",\n            parts=[],\n            module_name=\"pkg\",\n        )\n\n        with pytest.raises(\n            UsageError, match=r\"package argument cannot contain :: selection parts\"\n        ):\n            resolve_collection_argument(\n                invocation_path, \"pkg::foo::bar\", as_pypath=True\n            )\n\n    def test_parametrized_name_with_colons(self, invocation_path: Path) -> None:\n        assert resolve_collection_argument(\n            invocation_path, \"src/pkg/test.py::test[a::b]\"\n        ) == CollectionArgument(\n            path=invocation_path / \"src/pkg/test.py\",\n            parts=[\"test[a::b]\"],\n            module_name=None,\n        )\n\n    def test_does_not_exist(self, invocation_path: Path) -> None:\n        \"\"\"Given a file/module that does not exist raises UsageError.\"\"\"\n        with pytest.raises(\n            UsageError, match=re.escape(\"file or directory not found: foobar\")\n        ):\n            resolve_collection_argument(invocation_path, \"foobar\")\n\n        with pytest.raises(\n            UsageError,\n            match=re.escape(\n                \"module or package not found: foobar (missing __init__.py?)\"\n            ),\n        ):\n            resolve_collection_argument(invocation_path, \"foobar\", as_pypath=True)\n\n    def test_absolute_paths_are_resolved_correctly(self, invocation_path: Path) -> None:\n        \"\"\"Absolute paths resolve back to absolute paths.\"\"\"\n        full_path = str(invocation_path / \"src\")\n        assert resolve_collection_argument(\n            invocation_path, full_path\n        ) == CollectionArgument(\n            path=Path(os.path.abspath(\"src\")),\n            parts=[],\n            module_name=None,\n        )\n\n        # ensure full paths given in the command-line without the drive letter resolve\n        # to the full path correctly (#7628)\n        drive, full_path_without_drive = os.path.splitdrive(full_path)\n        assert resolve_collection_argument(\n            invocation_path, full_path_without_drive\n        ) == CollectionArgument(\n            path=Path(os.path.abspath(\"src\")),\n            parts=[],\n            module_name=None,\n        )\n\n\ndef test_module_full_path_without_drive(pytester: Pytester) -> None:\n    \"\"\"Collect and run test using full path except for the drive letter (#7628).\n\n    Passing a full path without a drive letter would trigger a bug in legacy_path\n    where it would keep the full path without the drive letter around, instead of resolving\n    to the full path, resulting in fixtures node ids not matching against test node ids correctly.\n    \"\"\"\n    pytester.makepyfile(\n        **{\n            \"project/conftest.py\": \"\"\"\n                import pytest\n                @pytest.fixture\n                def fix(): return 1\n            \"\"\",\n        }\n    )\n\n    pytester.makepyfile(\n        **{\n            \"project/tests/dummy_test.py\": \"\"\"\n                def test(fix):\n                    assert fix == 1\n            \"\"\"\n        }\n    )\n    fn = pytester.path.joinpath(\"project/tests/dummy_test.py\")\n    assert fn.is_file()\n\n    drive, path = os.path.splitdrive(str(fn))\n\n    result = pytester.runpytest(path, \"-v\")\n    result.stdout.fnmatch_lines(\n        [\n            os.path.join(\"project\", \"tests\", \"dummy_test.py\") + \"::test PASSED *\",\n            \"* 1 passed in *\",\n        ]\n    )\n\n\ndef test_very_long_cmdline_arg(pytester: Pytester) -> None:\n    \"\"\"\n    Regression test for #11394.\n\n    Note: we could not manage to actually reproduce the error with this code, we suspect\n    GitHub runners are configured to support very long paths, however decided to leave\n    the test in place in case this ever regresses in the future.\n    \"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n\n        def pytest_addoption(parser):\n            parser.addoption(\"--long-list\", dest=\"long_list\", action=\"store\", default=\"all\", help=\"List of things\")\n\n        @pytest.fixture(scope=\"module\")\n        def specified_feeds(request):\n            list_string = request.config.getoption(\"--long-list\")\n            return list_string.split(',')\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        def test_foo(specified_feeds):\n            assert len(specified_feeds) == 100_000\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--long-list\", \",\".join([\"helloworld\"] * 100_000))\n    result.stdout.fnmatch_lines(\"* 1 passed *\")\n", "testing/test_assertion.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport sys\nimport textwrap\nfrom typing import Any\nfrom typing import MutableSequence\nfrom typing import NamedTuple\n\nimport attr\n\nfrom _pytest import outcomes\nimport _pytest.assertion as plugin\nfrom _pytest.assertion import truncate\nfrom _pytest.assertion import util\nfrom _pytest.config import Config as _Config\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\ndef mock_config(verbose: int = 0, assertion_override: int | None = None):\n    class TerminalWriter:\n        def _highlight(self, source, lexer=\"python\"):\n            return source\n\n    class Config:\n        def get_terminal_writer(self):\n            return TerminalWriter()\n\n        def get_verbosity(self, verbosity_type: str | None = None) -> int:\n            if verbosity_type is None:\n                return verbose\n            if verbosity_type == _Config.VERBOSITY_ASSERTIONS:\n                if assertion_override is not None:\n                    return assertion_override\n                return verbose\n\n            raise KeyError(f\"Not mocked out: {verbosity_type}\")\n\n    return Config()\n\n\nclass TestMockConfig:\n    SOME_VERBOSITY_LEVEL = 3\n    SOME_OTHER_VERBOSITY_LEVEL = 10\n\n    def test_verbose_exposes_value(self):\n        config = mock_config(verbose=TestMockConfig.SOME_VERBOSITY_LEVEL)\n\n        assert config.get_verbosity() == TestMockConfig.SOME_VERBOSITY_LEVEL\n\n    def test_get_assertion_override_not_set_verbose_value(self):\n        config = mock_config(verbose=TestMockConfig.SOME_VERBOSITY_LEVEL)\n\n        assert (\n            config.get_verbosity(_Config.VERBOSITY_ASSERTIONS)\n            == TestMockConfig.SOME_VERBOSITY_LEVEL\n        )\n\n    def test_get_assertion_override_set_custom_value(self):\n        config = mock_config(\n            verbose=TestMockConfig.SOME_VERBOSITY_LEVEL,\n            assertion_override=TestMockConfig.SOME_OTHER_VERBOSITY_LEVEL,\n        )\n\n        assert (\n            config.get_verbosity(_Config.VERBOSITY_ASSERTIONS)\n            == TestMockConfig.SOME_OTHER_VERBOSITY_LEVEL\n        )\n\n    def test_get_unsupported_type_error(self):\n        config = mock_config(verbose=TestMockConfig.SOME_VERBOSITY_LEVEL)\n\n        with pytest.raises(KeyError):\n            config.get_verbosity(\"--- NOT A VERBOSITY LEVEL ---\")\n\n\nclass TestImportHookInstallation:\n    @pytest.mark.parametrize(\"initial_conftest\", [True, False])\n    @pytest.mark.parametrize(\"mode\", [\"plain\", \"rewrite\"])\n    def test_conftest_assertion_rewrite(\n        self, pytester: Pytester, initial_conftest, mode\n    ) -> None:\n        \"\"\"Test that conftest files are using assertion rewrite on import (#1619).\"\"\"\n        pytester.mkdir(\"foo\")\n        pytester.mkdir(\"foo/tests\")\n        conftest_path = \"conftest.py\" if initial_conftest else \"foo/conftest.py\"\n        contents = {\n            conftest_path: \"\"\"\n                import pytest\n                @pytest.fixture\n                def check_first():\n                    def check(values, value):\n                        assert values.pop(0) == value\n                    return check\n            \"\"\",\n            \"foo/tests/test_foo.py\": \"\"\"\n                def test(check_first):\n                    check_first([10, 30], 30)\n            \"\"\",\n        }\n        pytester.makepyfile(**contents)\n        result = pytester.runpytest_subprocess(f\"--assert={mode}\")\n        if mode == \"plain\":\n            expected = \"E       AssertionError\"\n        elif mode == \"rewrite\":\n            expected = \"*assert 10 == 30*\"\n        else:\n            assert 0\n        result.stdout.fnmatch_lines([expected])\n\n    def test_rewrite_assertions_pytester_plugin(self, pytester: Pytester) -> None:\n        \"\"\"\n        Assertions in the pytester plugin must also benefit from assertion\n        rewriting (#1920).\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            pytest_plugins = ['pytester']\n            def test_dummy_failure(pytester):  # how meta!\n                pytester.makepyfile('def test(): assert 0')\n                r = pytester.inline_run()\n                r.assertoutcome(passed=1)\n        \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines(\n            [\n                \">       r.assertoutcome(passed=1)\",\n                \"E       AssertionError: ([[][]], [[][]], [[]<TestReport *>[]])*\",\n                \"E       assert {'failed': 1,... 'skipped': 0} == {'failed': 0,... 'skipped': 0}\",\n                \"E         Omitting 1 identical items, use -vv to show\",\n                \"E         Differing items:\",\n                \"E         Use -v to get more diff\",\n            ]\n        )\n        # XXX: unstable output.\n        result.stdout.fnmatch_lines_random(\n            [\n                \"E         {'failed': 1} != {'failed': 0}\",\n                \"E         {'passed': 0} != {'passed': 1}\",\n            ]\n        )\n\n    @pytest.mark.parametrize(\"mode\", [\"plain\", \"rewrite\"])\n    def test_pytest_plugins_rewrite(self, pytester: Pytester, mode) -> None:\n        contents = {\n            \"conftest.py\": \"\"\"\n                pytest_plugins = ['ham']\n            \"\"\",\n            \"ham.py\": \"\"\"\n                import pytest\n                @pytest.fixture\n                def check_first():\n                    def check(values, value):\n                        assert values.pop(0) == value\n                    return check\n            \"\"\",\n            \"test_foo.py\": \"\"\"\n                def test_foo(check_first):\n                    check_first([10, 30], 30)\n            \"\"\",\n        }\n        pytester.makepyfile(**contents)\n        result = pytester.runpytest_subprocess(f\"--assert={mode}\")\n        if mode == \"plain\":\n            expected = \"E       AssertionError\"\n        elif mode == \"rewrite\":\n            expected = \"*assert 10 == 30*\"\n        else:\n            assert 0\n        result.stdout.fnmatch_lines([expected])\n\n    @pytest.mark.parametrize(\"mode\", [\"str\", \"list\"])\n    def test_pytest_plugins_rewrite_module_names(\n        self, pytester: Pytester, mode\n    ) -> None:\n        \"\"\"Test that pluginmanager correct marks pytest_plugins variables\n        for assertion rewriting if they are defined as plain strings or\n        list of strings (#1888).\n        \"\"\"\n        plugins = '\"ham\"' if mode == \"str\" else '[\"ham\"]'\n        contents = {\n            \"conftest.py\": f\"\"\"\n                pytest_plugins = {plugins}\n            \"\"\",\n            \"ham.py\": \"\"\"\n                import pytest\n            \"\"\",\n            \"test_foo.py\": \"\"\"\n                def test_foo(pytestconfig):\n                    assert 'ham' in pytestconfig.pluginmanager.rewrite_hook._must_rewrite\n            \"\"\",\n        }\n        pytester.makepyfile(**contents)\n        result = pytester.runpytest_subprocess(\"--assert=rewrite\")\n        assert result.ret == 0\n\n    def test_pytest_plugins_rewrite_module_names_correctly(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test that we match files correctly when they are marked for rewriting (#2939).\"\"\"\n        contents = {\n            \"conftest.py\": \"\"\"\\\n                pytest_plugins = \"ham\"\n            \"\"\",\n            \"ham.py\": \"\",\n            \"hamster.py\": \"\",\n            \"test_foo.py\": \"\"\"\\\n                def test_foo(pytestconfig):\n                    assert pytestconfig.pluginmanager.rewrite_hook.find_spec('ham') is not None\n                    assert pytestconfig.pluginmanager.rewrite_hook.find_spec('hamster') is None\n            \"\"\",\n        }\n        pytester.makepyfile(**contents)\n        result = pytester.runpytest_subprocess(\"--assert=rewrite\")\n        assert result.ret == 0\n\n    @pytest.mark.parametrize(\"mode\", [\"plain\", \"rewrite\"])\n    def test_installed_plugin_rewrite(\n        self, pytester: Pytester, mode, monkeypatch\n    ) -> None:\n        monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n        # Make sure the hook is installed early enough so that plugins\n        # installed via distribution package are rewritten.\n        pytester.mkdir(\"hampkg\")\n        contents = {\n            \"hampkg/__init__.py\": \"\"\"\\\n                import pytest\n\n                @pytest.fixture\n                def check_first2():\n                    def check(values, value):\n                        assert values.pop(0) == value\n                    return check\n            \"\"\",\n            \"spamplugin.py\": \"\"\"\\\n            import pytest\n            from hampkg import check_first2\n\n            @pytest.fixture\n            def check_first():\n                def check(values, value):\n                    assert values.pop(0) == value\n                return check\n            \"\"\",\n            \"mainwrapper.py\": \"\"\"\\\n            import importlib.metadata\n            import pytest\n\n            class DummyEntryPoint(object):\n                name = 'spam'\n                module_name = 'spam.py'\n                group = 'pytest11'\n\n                def load(self):\n                    import spamplugin\n                    return spamplugin\n\n            class DummyDistInfo(object):\n                version = '1.0'\n                files = ('spamplugin.py', 'hampkg/__init__.py')\n                entry_points = (DummyEntryPoint(),)\n                metadata = {'name': 'foo'}\n\n            def distributions():\n                return (DummyDistInfo(),)\n\n            importlib.metadata.distributions = distributions\n            pytest.main()\n            \"\"\",\n            \"test_foo.py\": \"\"\"\\\n            def test(check_first):\n                check_first([10, 30], 30)\n\n            def test2(check_first2):\n                check_first([10, 30], 30)\n            \"\"\",\n        }\n        pytester.makepyfile(**contents)\n        result = pytester.run(\n            sys.executable, \"mainwrapper.py\", \"-s\", f\"--assert={mode}\"\n        )\n        if mode == \"plain\":\n            expected = \"E       AssertionError\"\n        elif mode == \"rewrite\":\n            expected = \"*assert 10 == 30*\"\n        else:\n            assert 0\n        result.stdout.fnmatch_lines([expected])\n\n    def test_rewrite_ast(self, pytester: Pytester) -> None:\n        pytester.mkdir(\"pkg\")\n        contents = {\n            \"pkg/__init__.py\": \"\"\"\n                import pytest\n                pytest.register_assert_rewrite('pkg.helper')\n            \"\"\",\n            \"pkg/helper.py\": \"\"\"\n                def tool():\n                    a, b = 2, 3\n                    assert a == b\n            \"\"\",\n            \"pkg/plugin.py\": \"\"\"\n                import pytest, pkg.helper\n                @pytest.fixture\n                def tool():\n                    return pkg.helper.tool\n            \"\"\",\n            \"pkg/other.py\": \"\"\"\n                values = [3, 2]\n                def tool():\n                    assert values.pop() == 3\n            \"\"\",\n            \"conftest.py\": \"\"\"\n                pytest_plugins = ['pkg.plugin']\n            \"\"\",\n            \"test_pkg.py\": \"\"\"\n                import pkg.other\n                def test_tool(tool):\n                    tool()\n                def test_other():\n                    pkg.other.tool()\n            \"\"\",\n        }\n        pytester.makepyfile(**contents)\n        result = pytester.runpytest_subprocess(\"--assert=rewrite\")\n        result.stdout.fnmatch_lines(\n            [\n                \">*assert a == b*\",\n                \"E*assert 2 == 3*\",\n                \">*assert values.pop() == 3*\",\n                \"E*AssertionError\",\n            ]\n        )\n\n    def test_register_assert_rewrite_checks_types(self) -> None:\n        with pytest.raises(TypeError):\n            pytest.register_assert_rewrite([\"pytest_tests_internal_non_existing\"])  # type: ignore\n        pytest.register_assert_rewrite(\n            \"pytest_tests_internal_non_existing\", \"pytest_tests_internal_non_existing2\"\n        )\n\n\nclass TestBinReprIntegration:\n    def test_pytest_assertrepr_compare_called(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            values = []\n            def pytest_assertrepr_compare(op, left, right):\n                values.append((op, left, right))\n\n            @pytest.fixture\n            def list(request):\n                return values\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_hello():\n                assert 0 == 1\n            def test_check(list):\n                assert list == [(\"==\", 0, 1)]\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines([\"*test_hello*FAIL*\", \"*test_check*PASS*\"])\n\n\ndef callop(op: str, left: Any, right: Any, verbose: int = 0) -> list[str] | None:\n    config = mock_config(verbose=verbose)\n    return plugin.pytest_assertrepr_compare(config, op, left, right)\n\n\ndef callequal(left: Any, right: Any, verbose: int = 0) -> list[str] | None:\n    return callop(\"==\", left, right, verbose)\n\n\nclass TestAssert_reprcompare:\n    def test_different_types(self) -> None:\n        assert callequal([0, 1], \"foo\") is None\n\n    def test_summary(self) -> None:\n        lines = callequal([0, 1], [0, 2])\n        assert lines is not None\n        summary = lines[0]\n        assert len(summary) < 65\n\n    def test_text_diff(self) -> None:\n        assert callequal(\"spam\", \"eggs\") == [\n            \"'spam' == 'eggs'\",\n            \"\",\n            \"- eggs\",\n            \"+ spam\",\n        ]\n\n    def test_text_skipping(self) -> None:\n        lines = callequal(\"a\" * 50 + \"spam\", \"a\" * 50 + \"eggs\")\n        assert lines is not None\n        assert \"Skipping\" in lines[2]\n        for line in lines:\n            assert \"a\" * 50 not in line\n\n    def test_text_skipping_verbose(self) -> None:\n        lines = callequal(\"a\" * 50 + \"spam\", \"a\" * 50 + \"eggs\", verbose=1)\n        assert lines is not None\n        assert \"- \" + \"a\" * 50 + \"eggs\" in lines\n        assert \"+ \" + \"a\" * 50 + \"spam\" in lines\n\n    def test_multiline_text_diff(self) -> None:\n        left = \"foo\\nspam\\nbar\"\n        right = \"foo\\neggs\\nbar\"\n        diff = callequal(left, right)\n        assert diff is not None\n        assert \"- eggs\" in diff\n        assert \"+ spam\" in diff\n\n    def test_bytes_diff_normal(self) -> None:\n        \"\"\"Check special handling for bytes diff (#5260)\"\"\"\n        diff = callequal(b\"spam\", b\"eggs\")\n\n        assert diff == [\n            \"b'spam' == b'eggs'\",\n            \"\",\n            \"At index 0 diff: b's' != b'e'\",\n            \"Use -v to get more diff\",\n        ]\n\n    def test_bytes_diff_verbose(self) -> None:\n        \"\"\"Check special handling for bytes diff (#5260)\"\"\"\n        diff = callequal(b\"spam\", b\"eggs\", verbose=1)\n        assert diff == [\n            \"b'spam' == b'eggs'\",\n            \"\",\n            \"At index 0 diff: b's' != b'e'\",\n            \"\",\n            \"Full diff:\",\n            \"- b'eggs'\",\n            \"+ b'spam'\",\n        ]\n\n    def test_list(self) -> None:\n        expl = callequal([0, 1], [0, 2])\n        assert expl is not None\n        assert len(expl) > 1\n\n    @pytest.mark.parametrize(\n        [\"left\", \"right\", \"expected\"],\n        [\n            pytest.param(\n                [0, 1],\n                [0, 2],\n                \"\"\"\n                Full diff:\n                  [\n                      0,\n                -     2,\n                ?     ^\n                +     1,\n                ?     ^\n                  ]\n                \"\"\",\n                id=\"lists\",\n            ),\n            pytest.param(\n                {0: 1},\n                {0: 2},\n                \"\"\"\n                Full diff:\n                  {\n                -     0: 2,\n                ?        ^\n                +     0: 1,\n                ?        ^\n                  }\n            \"\"\",\n                id=\"dicts\",\n            ),\n            pytest.param(\n                {0, 1},\n                {0, 2},\n                \"\"\"\n                Full diff:\n                  {\n                      0,\n                -     2,\n                ?     ^\n                +     1,\n                ?     ^\n                  }\n            \"\"\",\n                id=\"sets\",\n            ),\n        ],\n    )\n    def test_iterable_full_diff(self, left, right, expected) -> None:\n        \"\"\"Test the full diff assertion failure explanation.\n\n        When verbose is False, then just a -v notice to get the diff is rendered,\n        when verbose is True, then ndiff of the pprint is returned.\n        \"\"\"\n        expl = callequal(left, right, verbose=0)\n        assert expl is not None\n        assert expl[-1] == \"Use -v to get more diff\"\n        verbose_expl = callequal(left, right, verbose=1)\n        assert verbose_expl is not None\n        assert \"\\n\".join(verbose_expl).endswith(textwrap.dedent(expected).strip())\n\n    def test_iterable_quiet(self) -> None:\n        expl = callequal([1, 2], [10, 2], verbose=-1)\n        assert expl == [\n            \"[1, 2] == [10, 2]\",\n            \"\",\n            \"At index 0 diff: 1 != 10\",\n            \"Use -v to get more diff\",\n        ]\n\n    def test_iterable_full_diff_ci(\n        self, monkeypatch: MonkeyPatch, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            r\"\"\"\n            def test_full_diff():\n                left = [0, 1]\n                right = [0, 2]\n                assert left == right\n        \"\"\"\n        )\n        monkeypatch.setenv(\"CI\", \"true\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"E         Full diff:\"])\n\n        monkeypatch.delenv(\"CI\", raising=False)\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"E         Use -v to get more diff\"])\n\n    def test_list_different_lengths(self) -> None:\n        expl = callequal([0, 1], [0, 1, 2])\n        assert expl is not None\n        assert len(expl) > 1\n        expl = callequal([0, 1, 2], [0, 1])\n        assert expl is not None\n        assert len(expl) > 1\n\n    def test_list_wrap_for_multiple_lines(self) -> None:\n        long_d = \"d\" * 80\n        l1 = [\"a\", \"b\", \"c\"]\n        l2 = [\"a\", \"b\", \"c\", long_d]\n        diff = callequal(l1, l2, verbose=True)\n        assert diff == [\n            \"['a', 'b', 'c'] == ['a', 'b', 'c...dddddddddddd']\",\n            \"\",\n            \"Right contains one more item: '\" + long_d + \"'\",\n            \"\",\n            \"Full diff:\",\n            \"  [\",\n            \"      'a',\",\n            \"      'b',\",\n            \"      'c',\",\n            \"-     '\" + long_d + \"',\",\n            \"  ]\",\n        ]\n\n        diff = callequal(l2, l1, verbose=True)\n        assert diff == [\n            \"['a', 'b', 'c...dddddddddddd'] == ['a', 'b', 'c']\",\n            \"\",\n            \"Left contains one more item: '\" + long_d + \"'\",\n            \"\",\n            \"Full diff:\",\n            \"  [\",\n            \"      'a',\",\n            \"      'b',\",\n            \"      'c',\",\n            \"+     '\" + long_d + \"',\",\n            \"  ]\",\n        ]\n\n    def test_list_wrap_for_width_rewrap_same_length(self) -> None:\n        long_a = \"a\" * 30\n        long_b = \"b\" * 30\n        long_c = \"c\" * 30\n        l1 = [long_a, long_b, long_c]\n        l2 = [long_b, long_c, long_a]\n        diff = callequal(l1, l2, verbose=True)\n        assert diff == [\n            \"['aaaaaaaaaaa...cccccccccccc'] == ['bbbbbbbbbbb...aaaaaaaaaaaa']\",\n            \"\",\n            \"At index 0 diff: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' != 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\",\n            \"\",\n            \"Full diff:\",\n            \"  [\",\n            \"+     'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\",\n            \"      'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',\",\n            \"      'cccccccccccccccccccccccccccccc',\",\n            \"-     'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\",\n            \"  ]\",\n        ]\n\n    def test_list_dont_wrap_strings(self) -> None:\n        long_a = \"a\" * 10\n        l1 = [\"a\"] + [long_a for _ in range(7)]\n        l2 = [\"should not get wrapped\"]\n        diff = callequal(l1, l2, verbose=True)\n        assert diff == [\n            \"['a', 'aaaaaa...aaaaaaa', ...] == ['should not get wrapped']\",\n            \"\",\n            \"At index 0 diff: 'a' != 'should not get wrapped'\",\n            \"Left contains 7 more items, first extra item: 'aaaaaaaaaa'\",\n            \"\",\n            \"Full diff:\",\n            \"  [\",\n            \"-     'should not get wrapped',\",\n            \"+     'a',\",\n            \"+     'aaaaaaaaaa',\",\n            \"+     'aaaaaaaaaa',\",\n            \"+     'aaaaaaaaaa',\",\n            \"+     'aaaaaaaaaa',\",\n            \"+     'aaaaaaaaaa',\",\n            \"+     'aaaaaaaaaa',\",\n            \"+     'aaaaaaaaaa',\",\n            \"  ]\",\n        ]\n\n    def test_dict_wrap(self) -> None:\n        d1 = {\"common\": 1, \"env\": {\"env1\": 1, \"env2\": 2}}\n        d2 = {\"common\": 1, \"env\": {\"env1\": 1}}\n\n        diff = callequal(d1, d2, verbose=True)\n        assert diff == [\n            \"{'common': 1,...1, 'env2': 2}} == {'common': 1,...: {'env1': 1}}\",\n            \"\",\n            \"Omitting 1 identical items, use -vv to show\",\n            \"Differing items:\",\n            \"{'env': {'env1': 1, 'env2': 2}} != {'env': {'env1': 1}}\",\n            \"\",\n            \"Full diff:\",\n            \"  {\",\n            \"      'common': 1,\",\n            \"      'env': {\",\n            \"          'env1': 1,\",\n            \"+         'env2': 2,\",\n            \"      },\",\n            \"  }\",\n        ]\n\n        long_a = \"a\" * 80\n        sub = {\"long_a\": long_a, \"sub1\": {\"long_a\": \"substring that gets wrapped \" * 3}}\n        d1 = {\"env\": {\"sub\": sub}}\n        d2 = {\"env\": {\"sub\": sub}, \"new\": 1}\n        diff = callequal(d1, d2, verbose=True)\n        assert diff == [\n            \"{'env': {'sub... wrapped '}}}} == {'env': {'sub...}}}, 'new': 1}\",\n            \"\",\n            \"Omitting 1 identical items, use -vv to show\",\n            \"Right contains 1 more item:\",\n            \"{'new': 1}\",\n            \"\",\n            \"Full diff:\",\n            \"  {\",\n            \"      'env': {\",\n            \"          'sub': {\",\n            f\"              'long_a': '{long_a}',\",\n            \"              'sub1': {\",\n            \"                  'long_a': 'substring that gets wrapped substring that gets wrapped '\",\n            \"                  'substring that gets wrapped ',\",\n            \"              },\",\n            \"          },\",\n            \"      },\",\n            \"-     'new': 1,\",\n            \"  }\",\n        ]\n\n    def test_dict(self) -> None:\n        expl = callequal({\"a\": 0}, {\"a\": 1})\n        assert expl is not None\n        assert len(expl) > 1\n\n    def test_dict_omitting(self) -> None:\n        lines = callequal({\"a\": 0, \"b\": 1}, {\"a\": 1, \"b\": 1})\n        assert lines is not None\n        assert lines[2].startswith(\"Omitting 1 identical item\")\n        assert \"Common items\" not in lines\n        for line in lines[1:]:\n            assert \"b\" not in line\n\n    def test_dict_omitting_with_verbosity_1(self) -> None:\n        \"\"\"Ensure differing items are visible for verbosity=1 (#1512).\"\"\"\n        lines = callequal({\"a\": 0, \"b\": 1}, {\"a\": 1, \"b\": 1}, verbose=1)\n        assert lines is not None\n        assert lines[1] == \"\"\n        assert lines[2].startswith(\"Omitting 1 identical item\")\n        assert lines[3].startswith(\"Differing items\")\n        assert lines[4] == \"{'a': 0} != {'a': 1}\"\n        assert \"Common items\" not in lines\n\n    def test_dict_omitting_with_verbosity_2(self) -> None:\n        lines = callequal({\"a\": 0, \"b\": 1}, {\"a\": 1, \"b\": 1}, verbose=2)\n        assert lines is not None\n        assert lines[2].startswith(\"Common items:\")\n        assert \"Omitting\" not in lines[2]\n        assert lines[3] == \"{'b': 1}\"\n\n    def test_dict_different_items(self) -> None:\n        lines = callequal({\"a\": 0}, {\"b\": 1, \"c\": 2}, verbose=2)\n        assert lines == [\n            \"{'a': 0} == {'b': 1, 'c': 2}\",\n            \"\",\n            \"Left contains 1 more item:\",\n            \"{'a': 0}\",\n            \"Right contains 2 more items:\",\n            \"{'b': 1, 'c': 2}\",\n            \"\",\n            \"Full diff:\",\n            \"  {\",\n            \"-     'b': 1,\",\n            \"?      ^   ^\",\n            \"+     'a': 0,\",\n            \"?      ^   ^\",\n            \"-     'c': 2,\",\n            \"  }\",\n        ]\n        lines = callequal({\"b\": 1, \"c\": 2}, {\"a\": 0}, verbose=2)\n        assert lines == [\n            \"{'b': 1, 'c': 2} == {'a': 0}\",\n            \"\",\n            \"Left contains 2 more items:\",\n            \"{'b': 1, 'c': 2}\",\n            \"Right contains 1 more item:\",\n            \"{'a': 0}\",\n            \"\",\n            \"Full diff:\",\n            \"  {\",\n            \"-     'a': 0,\",\n            \"?      ^   ^\",\n            \"+     'b': 1,\",\n            \"?      ^   ^\",\n            \"+     'c': 2,\",\n            \"  }\",\n        ]\n\n    def test_sequence_different_items(self) -> None:\n        lines = callequal((1, 2), (3, 4, 5), verbose=2)\n        assert lines == [\n            \"(1, 2) == (3, 4, 5)\",\n            \"\",\n            \"At index 0 diff: 1 != 3\",\n            \"Right contains one more item: 5\",\n            \"\",\n            \"Full diff:\",\n            \"  (\",\n            \"-     3,\",\n            \"?     ^\",\n            \"+     1,\",\n            \"?     ^\",\n            \"-     4,\",\n            \"?     ^\",\n            \"+     2,\",\n            \"?     ^\",\n            \"-     5,\",\n            \"  )\",\n        ]\n        lines = callequal((1, 2, 3), (4,), verbose=2)\n        assert lines == [\n            \"(1, 2, 3) == (4,)\",\n            \"\",\n            \"At index 0 diff: 1 != 4\",\n            \"Left contains 2 more items, first extra item: 2\",\n            \"\",\n            \"Full diff:\",\n            \"  (\",\n            \"-     4,\",\n            \"?     ^\",\n            \"+     1,\",\n            \"?     ^\",\n            \"+     2,\",\n            \"+     3,\",\n            \"  )\",\n        ]\n        lines = callequal((1, 2, 3), (1, 20, 3), verbose=2)\n        assert lines == [\n            \"(1, 2, 3) == (1, 20, 3)\",\n            \"\",\n            \"At index 1 diff: 2 != 20\",\n            \"\",\n            \"Full diff:\",\n            \"  (\",\n            \"      1,\",\n            \"-     20,\",\n            \"?      -\",\n            \"+     2,\",\n            \"      3,\",\n            \"  )\",\n        ]\n\n    def test_set(self) -> None:\n        expl = callequal({0, 1}, {0, 2})\n        assert expl is not None\n        assert len(expl) > 1\n\n    def test_frozenzet(self) -> None:\n        expl = callequal(frozenset([0, 1]), {0, 2})\n        assert expl is not None\n        assert len(expl) > 1\n\n    def test_Sequence(self) -> None:\n        # Test comparing with a Sequence subclass.\n        class TestSequence(MutableSequence[int]):\n            def __init__(self, iterable):\n                self.elements = list(iterable)\n\n            def __getitem__(self, item):\n                return self.elements[item]\n\n            def __len__(self):\n                return len(self.elements)\n\n            def __setitem__(self, item, value):\n                pass\n\n            def __delitem__(self, item):\n                pass\n\n            def insert(self, item, index):\n                pass\n\n        expl = callequal(TestSequence([0, 1]), list([0, 2]))\n        assert expl is not None\n        assert len(expl) > 1\n\n    def test_list_tuples(self) -> None:\n        expl = callequal([], [(1, 2)])\n        assert expl is not None\n        assert len(expl) > 1\n        expl = callequal([(1, 2)], [])\n        assert expl is not None\n        assert len(expl) > 1\n\n    def test_list_bad_repr(self) -> None:\n        class A:\n            def __repr__(self):\n                raise ValueError(42)\n\n        expl = callequal([], [A()])\n        assert expl is not None\n        assert \"ValueError\" in \"\".join(expl)\n        expl = callequal({}, {\"1\": A()}, verbose=2)\n        assert expl is not None\n        assert expl[0].startswith(\"{} == <[ValueError\")\n        assert \"raised in repr\" in expl[0]\n        assert expl[2:] == [\n            \"(pytest_assertion plugin: representation of details failed:\"\n            f\" {__file__}:{A.__repr__.__code__.co_firstlineno + 1}: ValueError: 42.\",\n            \" Probably an object has a faulty __repr__.)\",\n        ]\n\n    def test_one_repr_empty(self) -> None:\n        \"\"\"The faulty empty string repr did trigger an unbound local error in _diff_text.\"\"\"\n\n        class A(str):\n            def __repr__(self):\n                return \"\"\n\n        expl = callequal(A(), \"\")\n        assert not expl\n\n    def test_repr_no_exc(self) -> None:\n        expl = callequal(\"foo\", \"bar\")\n        assert expl is not None\n        assert \"raised in repr()\" not in \" \".join(expl)\n\n    def test_unicode(self) -> None:\n        assert callequal(\"\u00a3\u20ac\", \"\u00a3\") == [\n            \"'\u00a3\u20ac' == '\u00a3'\",\n            \"\",\n            \"- \u00a3\",\n            \"+ \u00a3\u20ac\",\n        ]\n\n    def test_nonascii_text(self) -> None:\n        \"\"\"\n        :issue: 877\n        non ascii python2 str caused a UnicodeDecodeError\n        \"\"\"\n\n        class A(str):\n            def __repr__(self):\n                return \"\\xff\"\n\n        expl = callequal(A(), \"1\")\n        assert expl == [\"\u00ff == '1'\", \"\", \"- 1\"]\n\n    def test_format_nonascii_explanation(self) -> None:\n        assert util.format_explanation(\"\u03bb\")\n\n    def test_mojibake(self) -> None:\n        # issue 429\n        left = b\"e\"\n        right = b\"\\xc3\\xa9\"\n        expl = callequal(left, right)\n        assert expl is not None\n        for line in expl:\n            assert isinstance(line, str)\n        msg = \"\\n\".join(expl)\n        assert msg\n\n    def test_nfc_nfd_same_string(self) -> None:\n        # issue 3426\n        left = \"hyv\\xe4\"\n        right = \"hyva\\u0308\"\n        expl = callequal(left, right)\n        assert expl == [\n            r\"'hyv\\xe4' == 'hyva\\u0308'\",\n            \"\",\n            f\"- {right!s}\",\n            f\"+ {left!s}\",\n        ]\n\n        expl = callequal(left, right, verbose=2)\n        assert expl == [\n            r\"'hyv\\xe4' == 'hyva\\u0308'\",\n            \"\",\n            f\"- {right!s}\",\n            f\"+ {left!s}\",\n        ]\n\n\nclass TestAssert_reprcompare_dataclass:\n    def test_dataclasses(self, pytester: Pytester) -> None:\n        p = pytester.copy_example(\"dataclasses/test_compare_dataclasses.py\")\n        result = pytester.runpytest(p)\n        result.assert_outcomes(failed=1, passed=0)\n        result.stdout.fnmatch_lines(\n            [\n                \"E         Omitting 1 identical items, use -vv to show\",\n                \"E         Differing attributes:\",\n                \"E         ['field_b']\",\n                \"E         \",\n                \"E         Drill down into differing attribute field_b:\",\n                \"E           field_b: 'b' != 'c'\",\n                \"E           - c\",\n                \"E           + b\",\n            ],\n            consecutive=True,\n        )\n\n    def test_recursive_dataclasses(self, pytester: Pytester) -> None:\n        p = pytester.copy_example(\"dataclasses/test_compare_recursive_dataclasses.py\")\n        result = pytester.runpytest(p)\n        result.assert_outcomes(failed=1, passed=0)\n        result.stdout.fnmatch_lines(\n            [\n                \"E         Omitting 1 identical items, use -vv to show\",\n                \"E         Differing attributes:\",\n                \"E         ['g', 'h', 'j']\",\n                \"E         \",\n                \"E         Drill down into differing attribute g:\",\n                \"E           g: S(a=10, b='ten') != S(a=20, b='xxx')...\",\n                \"E         \",\n                \"E         ...Full output truncated (51 lines hidden), use '-vv' to show\",\n            ],\n            consecutive=True,\n        )\n\n    def test_recursive_dataclasses_verbose(self, pytester: Pytester) -> None:\n        p = pytester.copy_example(\"dataclasses/test_compare_recursive_dataclasses.py\")\n        result = pytester.runpytest(p, \"-vv\")\n        result.assert_outcomes(failed=1, passed=0)\n        result.stdout.fnmatch_lines(\n            [\n                \"E         Matching attributes:\",\n                \"E         ['i']\",\n                \"E         Differing attributes:\",\n                \"E         ['g', 'h', 'j']\",\n                \"E         \",\n                \"E         Drill down into differing attribute g:\",\n                \"E           g: S(a=10, b='ten') != S(a=20, b='xxx')\",\n                \"E           \",\n                \"E           Differing attributes:\",\n                \"E           ['a', 'b']\",\n                \"E           \",\n                \"E           Drill down into differing attribute a:\",\n                \"E             a: 10 != 20\",\n                \"E           \",\n                \"E           Drill down into differing attribute b:\",\n                \"E             b: 'ten' != 'xxx'\",\n                \"E             - xxx\",\n                \"E             + ten\",\n                \"E         \",\n                \"E         Drill down into differing attribute h:\",\n            ],\n            consecutive=True,\n        )\n\n    def test_dataclasses_verbose(self, pytester: Pytester) -> None:\n        p = pytester.copy_example(\"dataclasses/test_compare_dataclasses_verbose.py\")\n        result = pytester.runpytest(p, \"-vv\")\n        result.assert_outcomes(failed=1, passed=0)\n        result.stdout.fnmatch_lines(\n            [\n                \"*Matching attributes:*\",\n                \"*['field_a']*\",\n                \"*Differing attributes:*\",\n                \"*field_b: 'b' != 'c'*\",\n            ]\n        )\n\n    def test_dataclasses_with_attribute_comparison_off(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.copy_example(\n            \"dataclasses/test_compare_dataclasses_field_comparison_off.py\"\n        )\n        result = pytester.runpytest(p, \"-vv\")\n        result.assert_outcomes(failed=0, passed=1)\n\n    def test_comparing_two_different_data_classes(self, pytester: Pytester) -> None:\n        p = pytester.copy_example(\n            \"dataclasses/test_compare_two_different_dataclasses.py\"\n        )\n        result = pytester.runpytest(p, \"-vv\")\n        result.assert_outcomes(failed=0, passed=1)\n\n    def test_data_classes_with_custom_eq(self, pytester: Pytester) -> None:\n        p = pytester.copy_example(\n            \"dataclasses/test_compare_dataclasses_with_custom_eq.py\"\n        )\n        # issue 9362\n        result = pytester.runpytest(p, \"-vv\")\n        result.assert_outcomes(failed=1, passed=0)\n        result.stdout.no_re_match_line(\".*Differing attributes.*\")\n\n    def test_data_classes_with_initvar(self, pytester: Pytester) -> None:\n        p = pytester.copy_example(\"dataclasses/test_compare_initvar.py\")\n        # issue 9820\n        result = pytester.runpytest(p, \"-vv\")\n        result.assert_outcomes(failed=1, passed=0)\n        result.stdout.no_re_match_line(\".*AttributeError.*\")\n\n\nclass TestAssert_reprcompare_attrsclass:\n    def test_attrs(self) -> None:\n        @attr.s\n        class SimpleDataObject:\n            field_a = attr.ib()\n            field_b = attr.ib()\n\n        left = SimpleDataObject(1, \"b\")\n        right = SimpleDataObject(1, \"c\")\n\n        lines = callequal(left, right)\n        assert lines is not None\n        assert lines[2].startswith(\"Omitting 1 identical item\")\n        assert \"Matching attributes\" not in lines\n        for line in lines[2:]:\n            assert \"field_a\" not in line\n\n    def test_attrs_recursive(self) -> None:\n        @attr.s\n        class OtherDataObject:\n            field_c = attr.ib()\n            field_d = attr.ib()\n\n        @attr.s\n        class SimpleDataObject:\n            field_a = attr.ib()\n            field_b = attr.ib()\n\n        left = SimpleDataObject(OtherDataObject(1, \"a\"), \"b\")\n        right = SimpleDataObject(OtherDataObject(1, \"b\"), \"b\")\n\n        lines = callequal(left, right)\n        assert lines is not None\n        assert \"Matching attributes\" not in lines\n        for line in lines[1:]:\n            assert \"field_b:\" not in line\n            assert \"field_c:\" not in line\n\n    def test_attrs_recursive_verbose(self) -> None:\n        @attr.s\n        class OtherDataObject:\n            field_c = attr.ib()\n            field_d = attr.ib()\n\n        @attr.s\n        class SimpleDataObject:\n            field_a = attr.ib()\n            field_b = attr.ib()\n\n        left = SimpleDataObject(OtherDataObject(1, \"a\"), \"b\")\n        right = SimpleDataObject(OtherDataObject(1, \"b\"), \"b\")\n\n        lines = callequal(left, right)\n        assert lines is not None\n        # indentation in output because of nested object structure\n        assert \"    field_d: 'a' != 'b'\" in lines\n\n    def test_attrs_verbose(self) -> None:\n        @attr.s\n        class SimpleDataObject:\n            field_a = attr.ib()\n            field_b = attr.ib()\n\n        left = SimpleDataObject(1, \"b\")\n        right = SimpleDataObject(1, \"c\")\n\n        lines = callequal(left, right, verbose=2)\n        assert lines is not None\n        assert lines[2].startswith(\"Matching attributes:\")\n        assert \"Omitting\" not in lines[2]\n        assert lines[3] == \"['field_a']\"\n\n    def test_attrs_with_attribute_comparison_off(self) -> None:\n        @attr.s\n        class SimpleDataObject:\n            field_a = attr.ib()\n            field_b = attr.ib(eq=False)\n\n        left = SimpleDataObject(1, \"b\")\n        right = SimpleDataObject(1, \"b\")\n\n        lines = callequal(left, right, verbose=2)\n        assert lines is not None\n        assert lines[2].startswith(\"Matching attributes:\")\n        assert \"Omitting\" not in lines[1]\n        assert lines[3] == \"['field_a']\"\n        for line in lines[3:]:\n            assert \"field_b\" not in line\n\n    def test_comparing_two_different_attrs_classes(self) -> None:\n        @attr.s\n        class SimpleDataObjectOne:\n            field_a = attr.ib()\n            field_b = attr.ib()\n\n        @attr.s\n        class SimpleDataObjectTwo:\n            field_a = attr.ib()\n            field_b = attr.ib()\n\n        left = SimpleDataObjectOne(1, \"b\")\n        right = SimpleDataObjectTwo(1, \"c\")\n\n        lines = callequal(left, right)\n        assert lines is None\n\n    def test_attrs_with_auto_detect_and_custom_eq(self) -> None:\n        @attr.s(\n            auto_detect=True\n        )  # attr.s doesn't ignore a custom eq if auto_detect=True\n        class SimpleDataObject:\n            field_a = attr.ib()\n\n            def __eq__(self, other):  # pragma: no cover\n                return super().__eq__(other)\n\n        left = SimpleDataObject(1)\n        right = SimpleDataObject(2)\n        # issue 9362\n        lines = callequal(left, right, verbose=2)\n        assert lines is None\n\n    def test_attrs_with_custom_eq(self) -> None:\n        @attr.define(slots=False)\n        class SimpleDataObject:\n            field_a = attr.ib()\n\n            def __eq__(self, other):  # pragma: no cover\n                return super().__eq__(other)\n\n        left = SimpleDataObject(1)\n        right = SimpleDataObject(2)\n        # issue 9362\n        lines = callequal(left, right, verbose=2)\n        assert lines is None\n\n\nclass TestAssert_reprcompare_namedtuple:\n    def test_namedtuple(self) -> None:\n        class NT(NamedTuple):\n            a: Any\n            b: Any\n\n        left = NT(1, \"b\")\n        right = NT(1, \"c\")\n\n        lines = callequal(left, right)\n        assert lines == [\n            \"NT(a=1, b='b') == NT(a=1, b='c')\",\n            \"\",\n            \"Omitting 1 identical items, use -vv to show\",\n            \"Differing attributes:\",\n            \"['b']\",\n            \"\",\n            \"Drill down into differing attribute b:\",\n            \"  b: 'b' != 'c'\",\n            \"  - c\",\n            \"  + b\",\n            \"Use -v to get more diff\",\n        ]\n\n    def test_comparing_two_different_namedtuple(self) -> None:\n        class NT1(NamedTuple):\n            a: Any\n            b: Any\n\n        class NT2(NamedTuple):\n            a: Any\n            b: Any\n\n        left = NT1(1, \"b\")\n        right = NT2(2, \"b\")\n\n        lines = callequal(left, right)\n        # Because the types are different, uses the generic sequence matcher.\n        assert lines == [\n            \"NT1(a=1, b='b') == NT2(a=2, b='b')\",\n            \"\",\n            \"At index 0 diff: 1 != 2\",\n            \"Use -v to get more diff\",\n        ]\n\n\nclass TestFormatExplanation:\n    def test_special_chars_full(self, pytester: Pytester) -> None:\n        # Issue 453, for the bug this would raise IndexError\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert '\\\\n}' == ''\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.stdout.fnmatch_lines([\"*AssertionError*\"])\n\n    def test_fmt_simple(self) -> None:\n        expl = \"assert foo\"\n        assert util.format_explanation(expl) == \"assert foo\"\n\n    def test_fmt_where(self) -> None:\n        expl = \"\\n\".join([\"assert 1\", \"{1 = foo\", \"} == 2\"])\n        res = \"\\n\".join([\"assert 1 == 2\", \" +  where 1 = foo\"])\n        assert util.format_explanation(expl) == res\n\n    def test_fmt_and(self) -> None:\n        expl = \"\\n\".join([\"assert 1\", \"{1 = foo\", \"} == 2\", \"{2 = bar\", \"}\"])\n        res = \"\\n\".join([\"assert 1 == 2\", \" +  where 1 = foo\", \" +  and   2 = bar\"])\n        assert util.format_explanation(expl) == res\n\n    def test_fmt_where_nested(self) -> None:\n        expl = \"\\n\".join([\"assert 1\", \"{1 = foo\", \"{foo = bar\", \"}\", \"} == 2\"])\n        res = \"\\n\".join([\"assert 1 == 2\", \" +  where 1 = foo\", \" +    where foo = bar\"])\n        assert util.format_explanation(expl) == res\n\n    def test_fmt_newline(self) -> None:\n        expl = \"\\n\".join(['assert \"foo\" == \"bar\"', \"~- foo\", \"~+ bar\"])\n        res = \"\\n\".join(['assert \"foo\" == \"bar\"', \"  - foo\", \"  + bar\"])\n        assert util.format_explanation(expl) == res\n\n    def test_fmt_newline_escaped(self) -> None:\n        expl = \"\\n\".join([\"assert foo == bar\", \"baz\"])\n        res = \"assert foo == bar\\\\nbaz\"\n        assert util.format_explanation(expl) == res\n\n    def test_fmt_newline_before_where(self) -> None:\n        expl = \"\\n\".join(\n            [\n                \"the assertion message here\",\n                \">assert 1\",\n                \"{1 = foo\",\n                \"} == 2\",\n                \"{2 = bar\",\n                \"}\",\n            ]\n        )\n        res = \"\\n\".join(\n            [\n                \"the assertion message here\",\n                \"assert 1 == 2\",\n                \" +  where 1 = foo\",\n                \" +  and   2 = bar\",\n            ]\n        )\n        assert util.format_explanation(expl) == res\n\n    def test_fmt_multi_newline_before_where(self) -> None:\n        expl = \"\\n\".join(\n            [\n                \"the assertion\",\n                \"~message here\",\n                \">assert 1\",\n                \"{1 = foo\",\n                \"} == 2\",\n                \"{2 = bar\",\n                \"}\",\n            ]\n        )\n        res = \"\\n\".join(\n            [\n                \"the assertion\",\n                \"  message here\",\n                \"assert 1 == 2\",\n                \" +  where 1 = foo\",\n                \" +  and   2 = bar\",\n            ]\n        )\n        assert util.format_explanation(expl) == res\n\n\nclass TestTruncateExplanation:\n    # The number of lines in the truncation explanation message. Used\n    # to calculate that results have the expected length.\n    LINES_IN_TRUNCATION_MSG = 2\n\n    def test_doesnt_truncate_when_input_is_empty_list(self) -> None:\n        expl: list[str] = []\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=100)\n        assert result == expl\n\n    def test_doesnt_truncate_at_when_input_is_5_lines_and_LT_max_chars(self) -> None:\n        expl = [\"a\" * 100 for x in range(5)]\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=8 * 80)\n        assert result == expl\n\n    def test_truncates_at_8_lines_when_given_list_of_empty_strings(self) -> None:\n        expl = [\"\" for x in range(50)]\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=100)\n        assert len(result) != len(expl)\n        assert result != expl\n        assert len(result) == 8 + self.LINES_IN_TRUNCATION_MSG\n        assert \"Full output truncated\" in result[-1]\n        assert \"42 lines hidden\" in result[-1]\n        last_line_before_trunc_msg = result[-self.LINES_IN_TRUNCATION_MSG - 1]\n        assert last_line_before_trunc_msg.endswith(\"...\")\n\n    def test_truncates_at_8_lines_when_first_8_lines_are_LT_max_chars(self) -> None:\n        total_lines = 100\n        expl = [\"a\" for x in range(total_lines)]\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=8 * 80)\n        assert result != expl\n        assert len(result) == 8 + self.LINES_IN_TRUNCATION_MSG\n        assert \"Full output truncated\" in result[-1]\n        assert f\"{total_lines - 8} lines hidden\" in result[-1]\n        last_line_before_trunc_msg = result[-self.LINES_IN_TRUNCATION_MSG - 1]\n        assert last_line_before_trunc_msg.endswith(\"...\")\n\n    def test_truncates_at_8_lines_when_there_is_one_line_to_remove(self) -> None:\n        \"\"\"The number of line in the result is 9, the same number as if we truncated.\"\"\"\n        expl = [\"a\" for x in range(9)]\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=8 * 80)\n        assert result == expl\n        assert \"truncated\" not in result[-1]\n\n    def test_truncates_edgecase_when_truncation_message_makes_the_result_longer_for_chars(\n        self,\n    ) -> None:\n        line = \"a\" * 10\n        expl = [line, line]\n        result = truncate._truncate_explanation(expl, max_lines=10, max_chars=10)\n        assert result == [line, line]\n\n    def test_truncates_edgecase_when_truncation_message_makes_the_result_longer_for_lines(\n        self,\n    ) -> None:\n        line = \"a\" * 10\n        expl = [line, line]\n        result = truncate._truncate_explanation(expl, max_lines=1, max_chars=100)\n        assert result == [line, line]\n\n    def test_truncates_at_8_lines_when_first_8_lines_are_EQ_max_chars(self) -> None:\n        expl = [chr(97 + x) * 80 for x in range(16)]\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=8 * 80)\n        assert result != expl\n        assert len(result) == 16 - 8 + self.LINES_IN_TRUNCATION_MSG\n        assert \"Full output truncated\" in result[-1]\n        assert \"8 lines hidden\" in result[-1]\n        last_line_before_trunc_msg = result[-self.LINES_IN_TRUNCATION_MSG - 1]\n        assert last_line_before_trunc_msg.endswith(\"...\")\n\n    def test_truncates_at_4_lines_when_first_4_lines_are_GT_max_chars(self) -> None:\n        expl = [\"a\" * 250 for x in range(10)]\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=999)\n        assert result != expl\n        assert len(result) == 4 + self.LINES_IN_TRUNCATION_MSG\n        assert \"Full output truncated\" in result[-1]\n        assert \"7 lines hidden\" in result[-1]\n        last_line_before_trunc_msg = result[-self.LINES_IN_TRUNCATION_MSG - 1]\n        assert last_line_before_trunc_msg.endswith(\"...\")\n\n    def test_truncates_at_1_line_when_first_line_is_GT_max_chars(self) -> None:\n        expl = [\"a\" * 250 for x in range(1000)]\n        result = truncate._truncate_explanation(expl, max_lines=8, max_chars=100)\n        assert result != expl\n        assert len(result) == 1 + self.LINES_IN_TRUNCATION_MSG\n        assert \"Full output truncated\" in result[-1]\n        assert \"1000 lines hidden\" in result[-1]\n        last_line_before_trunc_msg = result[-self.LINES_IN_TRUNCATION_MSG - 1]\n        assert last_line_before_trunc_msg.endswith(\"...\")\n\n    def test_full_output_truncated(self, monkeypatch, pytester: Pytester) -> None:\n        \"\"\"Test against full runpytest() output.\"\"\"\n        line_count = 7\n        line_len = 100\n        expected_truncated_lines = 2\n        pytester.makepyfile(\n            r\"\"\"\n            def test_many_lines():\n                a = list([str(i)[0] * %d for i in range(%d)])\n                b = a[::2]\n                a = '\\n'.join(map(str, a))\n                b = '\\n'.join(map(str, b))\n                assert a == b\n        \"\"\"\n            % (line_len, line_count)\n        )\n        monkeypatch.delenv(\"CI\", raising=False)\n\n        result = pytester.runpytest()\n        # without -vv, truncate the message showing a few diff lines only\n        result.stdout.fnmatch_lines(\n            [\n                \"*+ 1*\",\n                \"*+ 3*\",\n                \"*truncated (%d lines hidden)*use*-vv*\" % expected_truncated_lines,\n            ]\n        )\n\n        result = pytester.runpytest(\"-vv\")\n        result.stdout.fnmatch_lines([\"* 6*\"])\n\n        monkeypatch.setenv(\"CI\", \"1\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 6*\"])\n\n\ndef test_python25_compile_issue257(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_rewritten():\n            assert 1 == 2\n        # some comment\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        \"\"\"\n            *E*assert 1 == 2*\n            *1 failed*\n    \"\"\"\n    )\n\n\ndef test_rewritten(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_rewritten():\n            assert \"@py_builtins\" in globals()\n    \"\"\"\n    )\n    assert pytester.runpytest().ret == 0\n\n\ndef test_reprcompare_notin() -> None:\n    assert callop(\"not in\", \"foo\", \"aaafoobbb\") == [\n        \"'foo' not in 'aaafoobbb'\",\n        \"\",\n        \"'foo' is contained here:\",\n        \"  aaafoobbb\",\n        \"?    +++\",\n    ]\n\n\ndef test_reprcompare_whitespaces() -> None:\n    assert callequal(\"\\r\\n\", \"\\n\") == [\n        r\"'\\r\\n' == '\\n'\",\n        \"\",\n        r\"Strings contain only whitespace, escaping them using repr()\",\n        r\"- '\\n'\",\n        r\"+ '\\r\\n'\",\n        r\"?  ++\",\n    ]\n\n\nclass TestSetAssertions:\n    @pytest.mark.parametrize(\"op\", [\">=\", \">\", \"<=\", \"<\", \"==\"])\n    def test_set_extra_item(self, op, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            f\"\"\"\n            def test_hello():\n                x = set(\"hello x\")\n                y = set(\"hello y\")\n                assert x {op} y\n        \"\"\"\n        )\n\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*def test_hello():*\",\n                f\"*assert x {op} y*\",\n            ]\n        )\n        if op in [\">=\", \">\", \"==\"]:\n            result.stdout.fnmatch_lines(\n                [\n                    \"*E*Extra items in the right set:*\",\n                    \"*E*'y'\",\n                ]\n            )\n        if op in [\"<=\", \"<\", \"==\"]:\n            result.stdout.fnmatch_lines(\n                [\n                    \"*E*Extra items in the left set:*\",\n                    \"*E*'x'\",\n                ]\n            )\n\n    @pytest.mark.parametrize(\"op\", [\">\", \"<\", \"!=\"])\n    def test_set_proper_superset_equal(self, pytester: Pytester, op) -> None:\n        pytester.makepyfile(\n            f\"\"\"\n            def test_hello():\n                x = set([1, 2, 3])\n                y = x.copy()\n                assert x {op} y\n        \"\"\"\n        )\n\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*def test_hello():*\",\n                f\"*assert x {op} y*\",\n                \"*E*Both sets are equal*\",\n            ]\n        )\n\n    def test_pytest_assertrepr_compare_integration(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_hello():\n                x = set(range(100))\n                y = x.copy()\n                y.remove(50)\n                assert x == y\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*def test_hello():*\",\n                \"*assert x == y*\",\n                \"*E*Extra items*left*\",\n                \"*E*50*\",\n                \"*= 1 failed in*\",\n            ]\n        )\n\n\ndef test_assertrepr_loaded_per_dir(pytester: Pytester) -> None:\n    pytester.makepyfile(test_base=[\"def test_base(): assert 1 == 2\"])\n    a = pytester.mkdir(\"a\")\n    a.joinpath(\"test_a.py\").write_text(\"def test_a(): assert 1 == 2\", encoding=\"utf-8\")\n    a.joinpath(\"conftest.py\").write_text(\n        'def pytest_assertrepr_compare(): return [\"summary a\"]', encoding=\"utf-8\"\n    )\n    b = pytester.mkdir(\"b\")\n    b.joinpath(\"test_b.py\").write_text(\"def test_b(): assert 1 == 2\", encoding=\"utf-8\")\n    b.joinpath(\"conftest.py\").write_text(\n        'def pytest_assertrepr_compare(): return [\"summary b\"]', encoding=\"utf-8\"\n    )\n\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"*def test_a():*\",\n            \"*E*assert summary a*\",\n            \"*def test_b():*\",\n            \"*E*assert summary b*\",\n            \"*def test_base():*\",\n            \"*E*assert 1 == 2*\",\n        ]\n    )\n\n\ndef test_assertion_options(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_hello():\n            x = 3\n            assert x == 4\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert \"3 == 4\" in result.stdout.str()\n    result = pytester.runpytest_subprocess(\"--assert=plain\")\n    result.stdout.no_fnmatch_line(\"*3 == 4*\")\n\n\ndef test_triple_quoted_string_issue113(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_hello():\n            assert \"\" == '''\n    '''\"\"\"\n    )\n    result = pytester.runpytest(\"--fulltrace\")\n    result.stdout.fnmatch_lines([\"*1 failed*\"])\n    result.stdout.no_fnmatch_line(\"*SyntaxError*\")\n\n\ndef test_traceback_failure(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\n        \"\"\"\n        def g():\n            return 2\n        def f(x):\n            assert x == g()\n        def test_onefails():\n            f(3)\n    \"\"\"\n    )\n    result = pytester.runpytest(p1, \"--tb=long\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_traceback_failure.py F*\",\n            \"====* FAILURES *====\",\n            \"____*____\",\n            \"\",\n            \"    def test_onefails():\",\n            \">       f(3)\",\n            \"\",\n            \"*test_*.py:6: \",\n            \"_ _ _ *\",\n            # \"\",\n            \"    def f(x):\",\n            \">       assert x == g()\",\n            \"E       assert 3 == 2\",\n            \"E        +  where 2 = g()\",\n            \"\",\n            \"*test_traceback_failure.py:4: AssertionError\",\n        ]\n    )\n\n    result = pytester.runpytest(p1)  # \"auto\"\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_traceback_failure.py F*\",\n            \"====* FAILURES *====\",\n            \"____*____\",\n            \"\",\n            \"    def test_onefails():\",\n            \">       f(3)\",\n            \"\",\n            \"*test_*.py:6: \",\n            \"\",\n            \"    def f(x):\",\n            \">       assert x == g()\",\n            \"E       assert 3 == 2\",\n            \"E        +  where 2 = g()\",\n            \"\",\n            \"*test_traceback_failure.py:4: AssertionError\",\n        ]\n    )\n\n\ndef test_exception_handling_no_traceback(pytester: Pytester) -> None:\n    \"\"\"Handle chain exceptions in tasks submitted by the multiprocess module (#1984).\"\"\"\n    p1 = pytester.makepyfile(\n        \"\"\"\n        from multiprocessing import Pool\n\n        def process_task(n):\n            assert n == 10\n\n        def multitask_job():\n            tasks = [1]\n            with Pool(processes=1) as pool:\n                pool.map(process_task, tasks)\n\n        def test_multitask_job():\n            multitask_job()\n    \"\"\"\n    )\n    pytester.syspathinsert()\n    result = pytester.runpytest(p1, \"--tb=long\")\n    result.stdout.fnmatch_lines(\n        [\n            \"====* FAILURES *====\",\n            \"*multiprocessing.pool.RemoteTraceback:*\",\n            \"Traceback (most recent call last):\",\n            \"*assert n == 10\",\n            \"The above exception was the direct cause of the following exception:\",\n            \"> * multitask_job()\",\n        ]\n    )\n\n\n@pytest.mark.skipif(\"'__pypy__' in sys.builtin_module_names\")\n@pytest.mark.parametrize(\n    \"cmdline_args, warning_output\",\n    [\n        (\n            [\"-OO\", \"-m\", \"pytest\", \"-h\"],\n            [\"warning :*PytestConfigWarning:*assert statements are not executed*\"],\n        ),\n        (\n            [\"-OO\", \"-m\", \"pytest\"],\n            [\n                \"=*= warnings summary =*=\",\n                \"*PytestConfigWarning:*assert statements are not executed*\",\n            ],\n        ),\n        (\n            [\"-OO\", \"-m\", \"pytest\", \"--assert=plain\"],\n            [\n                \"=*= warnings summary =*=\",\n                \"*PytestConfigWarning: ASSERTIONS ARE NOT EXECUTED and FAILING TESTS WILL PASS.  \"\n                \"Are you using python -O?\",\n            ],\n        ),\n    ],\n)\ndef test_warn_missing(pytester: Pytester, cmdline_args, warning_output) -> None:\n    pytester.makepyfile(\"\")\n\n    result = pytester.run(sys.executable, *cmdline_args)\n    result.stdout.fnmatch_lines(warning_output)\n\n\ndef test_recursion_source_decode(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_something():\n            pass\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        python_files = *.py\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--collect-only\")\n    result.stdout.fnmatch_lines(\n        [\n            \"  <Module*>\",\n        ]\n    )\n\n\ndef test_AssertionError_message(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_hello():\n            x,y = 1,2\n            assert 0, (x,y)\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        \"\"\"\n        *def test_hello*\n        *assert 0, (x,y)*\n        *AssertionError: (1, 2)*\n    \"\"\"\n    )\n\n\ndef test_diff_newline_at_end(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        r\"\"\"\n        def test_diff():\n            assert 'asdf' == 'asdf\\n'\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        r\"\"\"\n        *assert 'asdf' == 'asdf\\n'\n        *  - asdf\n        *  ?     -\n        *  + asdf\n    \"\"\"\n    )\n\n\n@pytest.mark.filterwarnings(\"default\")\ndef test_assert_tuple_warning(pytester: Pytester) -> None:\n    msg = \"assertion is always true\"\n    pytester.makepyfile(\n        \"\"\"\n        def test_tuple():\n            assert(False, 'you shall not pass')\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([f\"*test_assert_tuple_warning.py:2:*{msg}*\"])\n\n    # tuples with size != 2 should not trigger the warning\n    pytester.makepyfile(\n        \"\"\"\n        def test_tuple():\n            assert ()\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert msg not in result.stdout.str()\n\n\ndef test_assert_indirect_tuple_no_warning(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_tuple():\n            tpl = ('foo', 'bar')\n            assert tpl\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    output = \"\\n\".join(result.stdout.lines)\n    assert \"WR1\" not in output\n\n\ndef test_assert_with_unicode(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\\\n        def test_unicode():\n            assert '\uc720\ub2c8\ucf54\ub4dc' == 'Unicode'\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*AssertionError*\"])\n\n\ndef test_raise_unprintable_assertion_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        r\"\"\"\n        def test_raise_assertion_error():\n            raise AssertionError('\\xff')\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [r\">       raise AssertionError('\\xff')\", \"E       AssertionError: *\"]\n    )\n\n\ndef test_raise_assertion_error_raising_repr(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        class RaisingRepr(object):\n            def __repr__(self):\n                raise Exception()\n        def test_raising_repr():\n            raise AssertionError(RaisingRepr())\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"E       AssertionError: <exception str() failed>\"])\n\n\ndef test_issue_1944(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def f():\n            return\n\n        assert f() == 10\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*1 error*\"])\n    assert (\n        \"AttributeError: 'Module' object has no attribute '_obj'\"\n        not in result.stdout.str()\n    )\n\n\ndef test_exit_from_assertrepr_compare(monkeypatch) -> None:\n    def raise_exit(obj):\n        outcomes.exit(\"Quitting debugger\")\n\n    monkeypatch.setattr(util, \"istext\", raise_exit)\n\n    with pytest.raises(outcomes.Exit, match=\"Quitting debugger\"):\n        callequal(1, 1)\n\n\ndef test_assertion_location_with_coverage(pytester: Pytester) -> None:\n    \"\"\"This used to report the wrong location when run with coverage (#5754).\"\"\"\n    p = pytester.makepyfile(\n        \"\"\"\n        def test():\n            assert False, 1\n            assert False, 2\n        \"\"\"\n    )\n    result = pytester.runpytest(str(p))\n    result.stdout.fnmatch_lines(\n        [\n            \">       assert False, 1\",\n            \"E       AssertionError: 1\",\n            \"E       assert False\",\n            \"*= 1 failed in*\",\n        ]\n    )\n\n\ndef test_reprcompare_verbose_long() -> None:\n    a = {f\"v{i}\": i for i in range(11)}\n    b = a.copy()\n    b[\"v2\"] += 10\n    lines = callop(\"==\", a, b, verbose=2)\n    assert lines is not None\n    assert lines[0] == (\n        \"{'v0': 0, 'v1': 1, 'v2': 2, 'v3': 3, 'v4': 4, 'v5': 5, \"\n        \"'v6': 6, 'v7': 7, 'v8': 8, 'v9': 9, 'v10': 10}\"\n        \" == \"\n        \"{'v0': 0, 'v1': 1, 'v2': 12, 'v3': 3, 'v4': 4, 'v5': 5, \"\n        \"'v6': 6, 'v7': 7, 'v8': 8, 'v9': 9, 'v10': 10}\"\n    )\n\n\n@pytest.mark.parametrize(\"enable_colors\", [True, False])\n@pytest.mark.parametrize(\n    (\"test_code\", \"expected_lines\"),\n    (\n        (\n            \"\"\"\n            def test():\n                assert [0, 1] == [0, 2]\n            \"\"\",\n            [\n                \"{bold}{red}E         At index 1 diff: {reset}{number}1{hl-reset}{endline} != {reset}{number}2*\",\n                \"{bold}{red}E         {light-red}-     2,{hl-reset}{endline}{reset}\",\n                \"{bold}{red}E         {light-green}+     1,{hl-reset}{endline}{reset}\",\n            ],\n        ),\n        (\n            \"\"\"\n            def test():\n                assert {f\"number-is-{i}\": i for i in range(1, 6)} == {\n                    f\"number-is-{i}\": i for i in range(5)\n                }\n            \"\"\",\n            [\n                \"{bold}{red}E         Common items:{reset}\",\n                \"{bold}{red}E         {reset}{{{str}'{hl-reset}{str}number-is-1{hl-reset}{str}'{hl-reset}: {number}1*\",\n                \"{bold}{red}E         Left contains 1 more item:{reset}\",\n                \"{bold}{red}E         {reset}{{{str}'{hl-reset}{str}number-is-5{hl-reset}{str}'{hl-reset}: {number}5*\",\n                \"{bold}{red}E         Right contains 1 more item:{reset}\",\n                \"{bold}{red}E         {reset}{{{str}'{hl-reset}{str}number-is-0{hl-reset}{str}'{hl-reset}: {number}0*\",\n                \"{bold}{red}E         {reset}{light-gray} {hl-reset} {{{endline}{reset}\",\n                \"{bold}{red}E         {light-gray} {hl-reset}     'number-is-1': 1,{endline}{reset}\",\n                \"{bold}{red}E         {light-green}+     'number-is-5': 5,{hl-reset}{endline}{reset}\",\n            ],\n        ),\n    ),\n)\ndef test_comparisons_handle_colors(\n    pytester: Pytester, color_mapping, enable_colors, test_code, expected_lines\n) -> None:\n    p = pytester.makepyfile(test_code)\n    result = pytester.runpytest(\n        f\"--color={'yes' if enable_colors else 'no'}\", \"-vv\", str(p)\n    )\n    formatter = (\n        color_mapping.format_for_fnmatch\n        if enable_colors\n        else color_mapping.strip_colors\n    )\n\n    result.stdout.fnmatch_lines(formatter(expected_lines), consecutive=False)\n\n\ndef test_fine_grained_assertion_verbosity(pytester: Pytester):\n    long_text = \"Lorem ipsum dolor sit amet \" * 10\n    p = pytester.makepyfile(\n        f\"\"\"\n        def test_ok():\n            pass\n\n\n        def test_words_fail():\n            fruits1 = [\"banana\", \"apple\", \"grapes\", \"melon\", \"kiwi\"]\n            fruits2 = [\"banana\", \"apple\", \"orange\", \"melon\", \"kiwi\"]\n            assert fruits1 == fruits2\n\n\n        def test_numbers_fail():\n            number_to_text1 = {{str(x): x for x in range(5)}}\n            number_to_text2 = {{str(x * 10): x * 10 for x in range(5)}}\n            assert number_to_text1 == number_to_text2\n\n\n        def test_long_text_fail():\n            long_text = \"{long_text}\"\n            assert \"hello world\" in long_text\n        \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        verbosity_assertions = 2\n        \"\"\"\n    )\n    result = pytester.runpytest(p)\n\n    result.stdout.fnmatch_lines(\n        [\n            f\"{p.name} .FFF                            [100%]\",\n            \"E         At index 2 diff: 'grapes' != 'orange'\",\n            \"E         Full diff:\",\n            \"E           [\",\n            \"E               'banana',\",\n            \"E               'apple',\",\n            \"E         -     'orange',\",\n            \"E         ?      ^  ^^\",\n            \"E         +     'grapes',\",\n            \"E         ?      ^  ^ +\",\n            \"E               'melon',\",\n            \"E               'kiwi',\",\n            \"E           ]\",\n            \"E         Full diff:\",\n            \"E           {\",\n            \"E               '0': 0,\",\n            \"E         -     '10': 10,\",\n            \"E         ?       -    -\",\n            \"E         +     '1': 1,\",\n            \"E         -     '20': 20,\",\n            \"E         ?       -    -\",\n            \"E         +     '2': 2,\",\n            \"E         -     '30': 30,\",\n            \"E         ?       -    -\",\n            \"E         +     '3': 3,\",\n            \"E         -     '40': 40,\",\n            \"E         ?       -    -\",\n            \"E         +     '4': 4,\",\n            \"E           }\",\n            f\"E       AssertionError: assert 'hello world' in '{long_text}'\",\n        ]\n    )\n\n\ndef test_full_output_vvv(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        r\"\"\"\n        def crash_helper(m):\n            assert 1 == 2\n        def test_vvv():\n            crash_helper(500 * \"a\")\n    \"\"\"\n    )\n    result = pytester.runpytest(\"\")\n    # without -vvv, the passed args are truncated\n    expected_non_vvv_arg_line = \"m = 'aaaaaaaaaaaaaaa*..aaaaaaaaaaaa*\"\n    result.stdout.fnmatch_lines(\n        [\n            expected_non_vvv_arg_line,\n            \"test_full_output_vvv.py:2: AssertionError\",\n        ],\n    )\n    # double check that the untruncated part is not in the output\n    expected_vvv_arg_line = \"m = '{}'\".format(500 * \"a\")\n    result.stdout.no_fnmatch_line(expected_vvv_arg_line)\n\n    # but with \"-vvv\" the args are not truncated\n    result = pytester.runpytest(\"-vvv\")\n    result.stdout.fnmatch_lines(\n        [\n            expected_vvv_arg_line,\n            \"test_full_output_vvv.py:2: AssertionError\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(expected_non_vvv_arg_line)\n", "testing/test_setuponly.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport sys\n\nfrom _pytest.config import ExitCode\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.fixture(params=[\"--setup-only\", \"--setup-plan\", \"--setup-show\"], scope=\"module\")\ndef mode(request):\n    return request.param\n\n\ndef test_show_only_active_fixtures(\n    pytester: Pytester, mode, dummy_yaml_custom_test\n) -> None:\n    pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def _arg0():\n            \"\"\"hidden arg0 fixture\"\"\"\n        @pytest.fixture\n        def arg1():\n            \"\"\"arg1 docstring\"\"\"\n        def test_arg1(arg1):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(mode)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\"*SETUP    F arg1*\", \"*test_arg1 (fixtures used: arg1)*\", \"*TEARDOWN F arg1*\"]\n    )\n    result.stdout.no_fnmatch_line(\"*_arg0*\")\n\n\ndef test_show_different_scopes(pytester: Pytester, mode) -> None:\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg_function():\n            \"\"\"function scoped fixture\"\"\"\n        @pytest.fixture(scope='session')\n        def arg_session():\n            \"\"\"session scoped fixture\"\"\"\n        def test_arg1(arg_session, arg_function):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(mode, p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"SETUP    S arg_session*\",\n            \"*SETUP    F arg_function*\",\n            \"*test_arg1 (fixtures used: arg_function, arg_session)*\",\n            \"*TEARDOWN F arg_function*\",\n            \"TEARDOWN S arg_session*\",\n        ]\n    )\n\n\ndef test_show_nested_fixtures(pytester: Pytester, mode) -> None:\n    pytester.makeconftest(\n        '''\n        import pytest\n        @pytest.fixture(scope='session')\n        def arg_same():\n            \"\"\"session scoped fixture\"\"\"\n        '''\n    )\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture(scope='function')\n        def arg_same(arg_same):\n            \"\"\"function scoped fixture\"\"\"\n        def test_arg1(arg_same):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(mode, p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"SETUP    S arg_same*\",\n            \"*SETUP    F arg_same (fixtures used: arg_same)*\",\n            \"*test_arg1 (fixtures used: arg_same)*\",\n            \"*TEARDOWN F arg_same*\",\n            \"TEARDOWN S arg_same*\",\n        ]\n    )\n\n\ndef test_show_fixtures_with_autouse(pytester: Pytester, mode) -> None:\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg_function():\n            \"\"\"function scoped fixture\"\"\"\n        @pytest.fixture(scope='session', autouse=True)\n        def arg_session():\n            \"\"\"session scoped fixture\"\"\"\n        def test_arg1(arg_function):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(mode, p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"SETUP    S arg_session*\",\n            \"*SETUP    F arg_function*\",\n            \"*test_arg1 (fixtures used: arg_function, arg_session)*\",\n        ]\n    )\n\n\ndef test_show_fixtures_with_parameters(pytester: Pytester, mode) -> None:\n    pytester.makeconftest(\n        '''\n        import pytest\n        @pytest.fixture(scope='session', params=['foo', 'bar'])\n        def arg_same():\n            \"\"\"session scoped fixture\"\"\"\n        '''\n    )\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture(scope='function')\n        def arg_other(arg_same):\n            \"\"\"function scoped fixture\"\"\"\n        def test_arg1(arg_other):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(mode, p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"SETUP    S arg_same?'foo'?\",\n            \"TEARDOWN S arg_same?'foo'?\",\n            \"SETUP    S arg_same?'bar'?\",\n            \"TEARDOWN S arg_same?'bar'?\",\n        ]\n    )\n\n\ndef test_show_fixtures_with_parameter_ids(pytester: Pytester, mode) -> None:\n    pytester.makeconftest(\n        '''\n        import pytest\n        @pytest.fixture(\n            scope='session', params=['foo', 'bar'], ids=['spam', 'ham'])\n        def arg_same():\n            \"\"\"session scoped fixture\"\"\"\n        '''\n    )\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture(scope='function')\n        def arg_other(arg_same):\n            \"\"\"function scoped fixture\"\"\"\n        def test_arg1(arg_other):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(mode, p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\"SETUP    S arg_same?'spam'?\", \"SETUP    S arg_same?'ham'?\"]\n    )\n\n\ndef test_show_fixtures_with_parameter_ids_function(pytester: Pytester, mode) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture(params=['foo', 'bar'], ids=lambda p: p.upper())\n        def foobar():\n            pass\n        def test_foobar(foobar):\n            pass\n    \"\"\"\n    )\n\n    result = pytester.runpytest(mode, p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\"*SETUP    F foobar?'FOO'?\", \"*SETUP    F foobar?'BAR'?\"]\n    )\n\n\ndef test_dynamic_fixture_request(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture()\n        def dynamically_requested_fixture():\n            pass\n        @pytest.fixture()\n        def dependent_fixture(request):\n            request.getfixturevalue('dynamically_requested_fixture')\n        def test_dyn(dependent_fixture):\n            pass\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--setup-only\", p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*SETUP    F dynamically_requested_fixture\",\n            \"*TEARDOWN F dynamically_requested_fixture\",\n        ]\n    )\n\n\ndef test_capturing(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest, sys\n        @pytest.fixture()\n        def one():\n            sys.stdout.write('this should be captured')\n            sys.stderr.write('this should also be captured')\n        @pytest.fixture()\n        def two(one):\n            assert 0\n        def test_capturing(two):\n            pass\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--setup-only\", p)\n    result.stdout.fnmatch_lines(\n        [\"this should be captured\", \"this should also be captured\"]\n    )\n\n\ndef test_show_fixtures_and_execute_test(pytester: Pytester) -> None:\n    \"\"\"Verify that setups are shown and tests are executed.\"\"\"\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture\n        def arg():\n            assert True\n        def test_arg(arg):\n            assert False\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--setup-show\", p)\n    assert result.ret == 1\n\n    result.stdout.fnmatch_lines(\n        [\"*SETUP    F arg*\", \"*test_arg (fixtures used: arg)F*\", \"*TEARDOWN F arg*\"]\n    )\n\n\ndef test_setup_show_with_KeyboardInterrupt_in_test(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture\n        def arg():\n            pass\n        def test_arg(arg):\n            raise KeyboardInterrupt()\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--setup-show\", p, no_reraise_ctrlc=True)\n    result.stdout.fnmatch_lines(\n        [\n            \"*SETUP    F arg*\",\n            \"*test_arg (fixtures used: arg)*\",\n            \"*TEARDOWN F arg*\",\n            \"*! KeyboardInterrupt !*\",\n            \"*= no tests ran in *\",\n        ]\n    )\n    assert result.ret == ExitCode.INTERRUPTED\n\n\ndef test_show_fixture_action_with_bytes(pytester: Pytester) -> None:\n    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n    test_file = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.parametrize('data', [b'Hello World'])\n        def test_data(data):\n            pass\n        \"\"\"\n    )\n    result = pytester.run(\n        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n    )\n    assert result.ret == 0\n", "testing/deprecated_test.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom pathlib import Path\nimport re\nimport sys\n\nfrom _pytest import deprecated\nfrom _pytest.compat import legacy_path\nfrom _pytest.pytester import Pytester\nimport pytest\nfrom pytest import PytestDeprecationWarning\n\n\n@pytest.mark.parametrize(\"plugin\", sorted(deprecated.DEPRECATED_EXTERNAL_PLUGINS))\n@pytest.mark.filterwarnings(\"default\")\ndef test_external_plugins_integrated(pytester: Pytester, plugin) -> None:\n    pytester.syspathinsert()\n    pytester.makepyfile(**{plugin: \"\"})\n\n    with pytest.warns(pytest.PytestConfigWarning):\n        pytester.parseconfig(\"-p\", plugin)\n\n\ndef test_hookspec_via_function_attributes_are_deprecated():\n    from _pytest.config import PytestPluginManager\n\n    pm = PytestPluginManager()\n\n    class DeprecatedHookMarkerSpec:\n        def pytest_bad_hook(self):\n            pass\n\n        pytest_bad_hook.historic = False  # type: ignore[attr-defined]\n\n    with pytest.warns(\n        PytestDeprecationWarning,\n        match=r\"Please use the pytest\\.hookspec\\(historic=False\\) decorator\",\n    ) as recorder:\n        pm.add_hookspecs(DeprecatedHookMarkerSpec)\n    (record,) = recorder\n    assert (\n        record.lineno\n        == DeprecatedHookMarkerSpec.pytest_bad_hook.__code__.co_firstlineno\n    )\n    assert record.filename == __file__\n\n\ndef test_hookimpl_via_function_attributes_are_deprecated():\n    from _pytest.config import PytestPluginManager\n\n    pm = PytestPluginManager()\n\n    class DeprecatedMarkImplPlugin:\n        def pytest_runtest_call(self):\n            pass\n\n        pytest_runtest_call.tryfirst = True  # type: ignore[attr-defined]\n\n    with pytest.warns(\n        PytestDeprecationWarning,\n        match=r\"Please use the pytest.hookimpl\\(tryfirst=True\\)\",\n    ) as recorder:\n        pm.register(DeprecatedMarkImplPlugin())\n    (record,) = recorder\n    assert (\n        record.lineno\n        == DeprecatedMarkImplPlugin.pytest_runtest_call.__code__.co_firstlineno\n    )\n    assert record.filename == __file__\n\n\ndef test_yield_fixture_is_deprecated() -> None:\n    with pytest.warns(DeprecationWarning, match=r\"yield_fixture is deprecated\"):\n\n        @pytest.yield_fixture\n        def fix():\n            assert False\n\n\ndef test_private_is_deprecated() -> None:\n    class PrivateInit:\n        def __init__(self, foo: int, *, _ispytest: bool = False) -> None:\n            deprecated.check_ispytest(_ispytest)\n\n    with pytest.warns(\n        pytest.PytestDeprecationWarning, match=\"private pytest class or function\"\n    ):\n        PrivateInit(10)\n\n    # Doesn't warn.\n    PrivateInit(10, _ispytest=True)\n\n\n@pytest.mark.parametrize(\"hooktype\", [\"hook\", \"ihook\"])\ndef test_hookproxy_warnings_for_pathlib(tmp_path, hooktype, request):\n    path = legacy_path(tmp_path)\n\n    PATH_WARN_MATCH = r\".*path: py\\.path\\.local\\) argument is deprecated, please use \\(collection_path: pathlib\\.Path.*\"\n    if hooktype == \"ihook\":\n        hooks = request.node.ihook\n    else:\n        hooks = request.config.hook\n\n    with pytest.warns(PytestDeprecationWarning, match=PATH_WARN_MATCH) as r:\n        l1 = sys._getframe().f_lineno\n        hooks.pytest_ignore_collect(\n            config=request.config, path=path, collection_path=tmp_path\n        )\n        l2 = sys._getframe().f_lineno\n\n    (record,) = r\n    assert record.filename == __file__\n    assert l1 < record.lineno < l2\n\n    hooks.pytest_ignore_collect(config=request.config, collection_path=tmp_path)\n\n    # Passing entirely *different* paths is an outright error.\n    with pytest.raises(ValueError, match=r\"path.*fspath.*need to be equal\"):\n        with pytest.warns(PytestDeprecationWarning, match=PATH_WARN_MATCH) as r:\n            hooks.pytest_ignore_collect(\n                config=request.config, path=path, collection_path=Path(\"/bla/bla\")\n            )\n\n\ndef test_hookimpl_warnings_for_pathlib() -> None:\n    class Plugin:\n        def pytest_ignore_collect(self, path: object) -> None:\n            raise NotImplementedError()\n\n        def pytest_collect_file(self, path: object) -> None:\n            raise NotImplementedError()\n\n        def pytest_pycollect_makemodule(self, path: object) -> None:\n            raise NotImplementedError()\n\n        def pytest_report_header(self, startdir: object) -> str:\n            raise NotImplementedError()\n\n        def pytest_report_collectionfinish(self, startdir: object) -> str:\n            raise NotImplementedError()\n\n    pm = pytest.PytestPluginManager()\n    with pytest.warns(\n        pytest.PytestRemovedIn9Warning,\n        match=r\"py\\.path\\.local.* argument is deprecated\",\n    ) as wc:\n        pm.register(Plugin())\n    assert len(wc.list) == 5\n\n\ndef test_node_ctor_fspath_argument_is_deprecated(pytester: Pytester) -> None:\n    mod = pytester.getmodulecol(\"\")\n\n    class MyFile(pytest.File):\n        def collect(self):\n            raise NotImplementedError()\n\n    with pytest.warns(\n        pytest.PytestDeprecationWarning,\n        match=re.escape(\n            \"The (fspath: py.path.local) argument to MyFile is deprecated.\"\n        ),\n    ):\n        MyFile.from_parent(\n            parent=mod.parent,\n            fspath=legacy_path(\"bla\"),\n        )\n\n\ndef test_fixture_disallow_on_marked_functions():\n    \"\"\"Test that applying @pytest.fixture to a marked function warns (#3364).\"\"\"\n    with pytest.warns(\n        pytest.PytestRemovedIn9Warning,\n        match=r\"Marks applied to fixtures have no effect\",\n    ) as record:\n\n        @pytest.fixture\n        @pytest.mark.parametrize(\"example\", [\"hello\"])\n        @pytest.mark.usefixtures(\"tmp_path\")\n        def foo():\n            raise NotImplementedError()\n\n    # it's only possible to get one warning here because you're already prevented\n    # from applying @fixture twice\n    # ValueError(\"fixture is being applied more than once to the same function\")\n    assert len(record) == 1\n\n\ndef test_fixture_disallow_marks_on_fixtures():\n    \"\"\"Test that applying a mark to a fixture warns (#3364).\"\"\"\n    with pytest.warns(\n        pytest.PytestRemovedIn9Warning,\n        match=r\"Marks applied to fixtures have no effect\",\n    ) as record:\n\n        @pytest.mark.parametrize(\"example\", [\"hello\"])\n        @pytest.mark.usefixtures(\"tmp_path\")\n        @pytest.fixture\n        def foo():\n            raise NotImplementedError()\n\n    assert len(record) == 2  # one for each mark decorator\n    # should point to this file\n    assert all(rec.filename == __file__ for rec in record)\n\n\ndef test_fixture_disallowed_between_marks():\n    \"\"\"Test that applying a mark to a fixture warns (#3364).\"\"\"\n    with pytest.warns(\n        pytest.PytestRemovedIn9Warning,\n        match=r\"Marks applied to fixtures have no effect\",\n    ) as record:\n\n        @pytest.mark.parametrize(\"example\", [\"hello\"])\n        @pytest.fixture\n        @pytest.mark.usefixtures(\"tmp_path\")\n        def foo():\n            raise NotImplementedError()\n\n    assert len(record) == 2  # one for each mark decorator\n", "testing/test_parseopt.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport argparse\nimport locale\nimport os\nfrom pathlib import Path\nimport shlex\nimport subprocess\nimport sys\n\nfrom _pytest.config import argparsing as parseopt\nfrom _pytest.config.exceptions import UsageError\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.fixture\ndef parser() -> parseopt.Parser:\n    return parseopt.Parser(_ispytest=True)\n\n\nclass TestParser:\n    def test_no_help_by_default(self) -> None:\n        parser = parseopt.Parser(usage=\"xyz\", _ispytest=True)\n        pytest.raises(UsageError, lambda: parser.parse([\"-h\"]))\n\n    def test_custom_prog(self, parser: parseopt.Parser) -> None:\n        \"\"\"Custom prog can be set for `argparse.ArgumentParser`.\"\"\"\n        assert parser._getparser().prog == os.path.basename(sys.argv[0])\n        parser.prog = \"custom-prog\"\n        assert parser._getparser().prog == \"custom-prog\"\n\n    def test_argument(self) -> None:\n        with pytest.raises(parseopt.ArgumentError):\n            # need a short or long option\n            argument = parseopt.Argument()\n        argument = parseopt.Argument(\"-t\")\n        assert argument._short_opts == [\"-t\"]\n        assert argument._long_opts == []\n        assert argument.dest == \"t\"\n        argument = parseopt.Argument(\"-t\", \"--test\")\n        assert argument._short_opts == [\"-t\"]\n        assert argument._long_opts == [\"--test\"]\n        assert argument.dest == \"test\"\n        argument = parseopt.Argument(\"-t\", \"--test\", dest=\"abc\")\n        assert argument.dest == \"abc\"\n        assert str(argument) == (\n            \"Argument(_short_opts: ['-t'], _long_opts: ['--test'], dest: 'abc')\"\n        )\n\n    def test_argument_type(self) -> None:\n        argument = parseopt.Argument(\"-t\", dest=\"abc\", type=int)\n        assert argument.type is int\n        argument = parseopt.Argument(\"-t\", dest=\"abc\", type=str)\n        assert argument.type is str\n        argument = parseopt.Argument(\"-t\", dest=\"abc\", type=float)\n        assert argument.type is float\n        argument = parseopt.Argument(\n            \"-t\", dest=\"abc\", type=str, choices=[\"red\", \"blue\"]\n        )\n        assert argument.type is str\n\n    def test_argument_processopt(self) -> None:\n        argument = parseopt.Argument(\"-t\", type=int)\n        argument.default = 42\n        argument.dest = \"abc\"\n        res = argument.attrs()\n        assert res[\"default\"] == 42\n        assert res[\"dest\"] == \"abc\"\n\n    def test_group_add_and_get(self, parser: parseopt.Parser) -> None:\n        group = parser.getgroup(\"hello\", description=\"desc\")\n        assert group.name == \"hello\"\n        assert group.description == \"desc\"\n\n    def test_getgroup_simple(self, parser: parseopt.Parser) -> None:\n        group = parser.getgroup(\"hello\", description=\"desc\")\n        assert group.name == \"hello\"\n        assert group.description == \"desc\"\n        group2 = parser.getgroup(\"hello\")\n        assert group2 is group\n\n    def test_group_ordering(self, parser: parseopt.Parser) -> None:\n        parser.getgroup(\"1\")\n        parser.getgroup(\"2\")\n        parser.getgroup(\"3\", after=\"1\")\n        groups = parser._groups\n        groups_names = [x.name for x in groups]\n        assert groups_names == list(\"132\")\n\n    def test_group_addoption(self) -> None:\n        group = parseopt.OptionGroup(\"hello\", _ispytest=True)\n        group.addoption(\"--option1\", action=\"store_true\")\n        assert len(group.options) == 1\n        assert isinstance(group.options[0], parseopt.Argument)\n\n    def test_group_addoption_conflict(self) -> None:\n        group = parseopt.OptionGroup(\"hello again\", _ispytest=True)\n        group.addoption(\"--option1\", \"--option-1\", action=\"store_true\")\n        with pytest.raises(ValueError) as err:\n            group.addoption(\"--option1\", \"--option-one\", action=\"store_true\")\n        assert str({\"--option1\"}) in str(err.value)\n\n    def test_group_shortopt_lowercase(self, parser: parseopt.Parser) -> None:\n        group = parser.getgroup(\"hello\")\n        with pytest.raises(ValueError):\n            group.addoption(\"-x\", action=\"store_true\")\n        assert len(group.options) == 0\n        group._addoption(\"-x\", action=\"store_true\")\n        assert len(group.options) == 1\n\n    def test_parser_addoption(self, parser: parseopt.Parser) -> None:\n        group = parser.getgroup(\"custom options\")\n        assert len(group.options) == 0\n        group.addoption(\"--option1\", action=\"store_true\")\n        assert len(group.options) == 1\n\n    def test_parse(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--hello\", dest=\"hello\", action=\"store\")\n        args = parser.parse([\"--hello\", \"world\"])\n        assert args.hello == \"world\"\n        assert not getattr(args, parseopt.FILE_OR_DIR)\n\n    def test_parse2(self, parser: parseopt.Parser) -> None:\n        args = parser.parse([Path(\".\")])\n        assert getattr(args, parseopt.FILE_OR_DIR)[0] == \".\"\n\n    # Warning ignore because of:\n    # https://github.com/python/cpython/issues/85308\n    # Can be removed once Python<3.12 support is dropped.\n    @pytest.mark.filterwarnings(\"ignore:'encoding' argument not specified\")\n    def test_parse_from_file(self, parser: parseopt.Parser, tmp_path: Path) -> None:\n        tests = [\".\", \"some.py::Test::test_method[param0]\", \"other/test_file.py\"]\n        args_file = tmp_path / \"tests.txt\"\n        args_file.write_text(\"\\n\".join(tests), encoding=\"utf-8\")\n        args = parser.parse([f\"@{args_file.absolute()}\"])\n        assert getattr(args, parseopt.FILE_OR_DIR) == tests\n\n    def test_parse_known_args(self, parser: parseopt.Parser) -> None:\n        parser.parse_known_args([Path(\".\")])\n        parser.addoption(\"--hello\", action=\"store_true\")\n        ns = parser.parse_known_args([\"x\", \"--y\", \"--hello\", \"this\"])\n        assert ns.hello\n        assert ns.file_or_dir == [\"x\"]\n\n    def test_parse_known_and_unknown_args(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--hello\", action=\"store_true\")\n        ns, unknown = parser.parse_known_and_unknown_args(\n            [\"x\", \"--y\", \"--hello\", \"this\"]\n        )\n        assert ns.hello\n        assert ns.file_or_dir == [\"x\"]\n        assert unknown == [\"--y\", \"this\"]\n\n    def test_parse_will_set_default(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--hello\", dest=\"hello\", default=\"x\", action=\"store\")\n        option = parser.parse([])\n        assert option.hello == \"x\"\n        del option.hello\n        parser.parse_setoption([], option)\n        assert option.hello == \"x\"\n\n    def test_parse_setoption(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--hello\", dest=\"hello\", action=\"store\")\n        parser.addoption(\"--world\", dest=\"world\", default=42)\n\n        option = argparse.Namespace()\n        args = parser.parse_setoption([\"--hello\", \"world\"], option)\n        assert option.hello == \"world\"\n        assert option.world == 42\n        assert not args\n\n    def test_parse_special_destination(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--ultimate-answer\", type=int)\n        args = parser.parse([\"--ultimate-answer\", \"42\"])\n        assert args.ultimate_answer == 42\n\n    def test_parse_split_positional_arguments(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"-R\", action=\"store_true\")\n        parser.addoption(\"-S\", action=\"store_false\")\n        args = parser.parse([\"-R\", \"4\", \"2\", \"-S\"])\n        assert getattr(args, parseopt.FILE_OR_DIR) == [\"4\", \"2\"]\n        args = parser.parse([\"-R\", \"-S\", \"4\", \"2\", \"-R\"])\n        assert getattr(args, parseopt.FILE_OR_DIR) == [\"4\", \"2\"]\n        assert args.R is True\n        assert args.S is False\n        args = parser.parse([\"-R\", \"4\", \"-S\", \"2\"])\n        assert getattr(args, parseopt.FILE_OR_DIR) == [\"4\", \"2\"]\n        assert args.R is True\n        assert args.S is False\n\n    def test_parse_defaultgetter(self) -> None:\n        def defaultget(option):\n            if not hasattr(option, \"type\"):\n                return\n            if option.type is int:\n                option.default = 42\n            elif option.type is str:\n                option.default = \"world\"\n\n        parser = parseopt.Parser(processopt=defaultget, _ispytest=True)\n        parser.addoption(\"--this\", dest=\"this\", type=int, action=\"store\")\n        parser.addoption(\"--hello\", dest=\"hello\", type=str, action=\"store\")\n        parser.addoption(\"--no\", dest=\"no\", action=\"store_true\")\n        option = parser.parse([])\n        assert option.hello == \"world\"\n        assert option.this == 42\n        assert option.no is False\n\n    def test_drop_short_helper(self) -> None:\n        parser = argparse.ArgumentParser(\n            formatter_class=parseopt.DropShorterLongHelpFormatter, allow_abbrev=False\n        )\n        parser.add_argument(\n            \"-t\", \"--twoword\", \"--duo\", \"--two-word\", \"--two\", help=\"foo\"\n        )\n        # throws error on --deux only!\n        parser.add_argument(\n            \"-d\", \"--deuxmots\", \"--deux-mots\", action=\"store_true\", help=\"foo\"\n        )\n        parser.add_argument(\"-s\", action=\"store_true\", help=\"single short\")\n        parser.add_argument(\"--abc\", \"-a\", action=\"store_true\", help=\"bar\")\n        parser.add_argument(\"--klm\", \"-k\", \"--kl-m\", action=\"store_true\", help=\"bar\")\n        parser.add_argument(\n            \"-P\", \"--pq-r\", \"-p\", \"--pqr\", action=\"store_true\", help=\"bar\"\n        )\n        parser.add_argument(\n            \"--zwei-wort\", \"--zweiwort\", \"--zweiwort\", action=\"store_true\", help=\"bar\"\n        )\n        parser.add_argument(\n            \"-x\", \"--exit-on-first\", \"--exitfirst\", action=\"store_true\", help=\"spam\"\n        )\n        parser.add_argument(\"files_and_dirs\", nargs=\"*\")\n        args = parser.parse_args([\"-k\", \"--duo\", \"hallo\", \"--exitfirst\"])\n        assert args.twoword == \"hallo\"\n        assert args.klm is True\n        assert args.zwei_wort is False\n        assert args.exit_on_first is True\n        assert args.s is False\n        args = parser.parse_args([\"--deux-mots\"])\n        with pytest.raises(AttributeError):\n            assert args.deux_mots is True\n        assert args.deuxmots is True\n        args = parser.parse_args([\"file\", \"dir\"])\n        assert \"|\".join(args.files_and_dirs) == \"file|dir\"\n\n    def test_drop_short_0(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--funcarg\", \"--func-arg\", action=\"store_true\")\n        parser.addoption(\"--abc-def\", \"--abc-def\", action=\"store_true\")\n        parser.addoption(\"--klm-hij\", action=\"store_true\")\n        with pytest.raises(UsageError):\n            parser.parse([\"--funcarg\", \"--k\"])\n\n    def test_drop_short_2(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--func-arg\", \"--doit\", action=\"store_true\")\n        args = parser.parse([\"--doit\"])\n        assert args.func_arg is True\n\n    def test_drop_short_3(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--func-arg\", \"--funcarg\", \"--doit\", action=\"store_true\")\n        args = parser.parse([\"abcd\"])\n        assert args.func_arg is False\n        assert args.file_or_dir == [\"abcd\"]\n\n    def test_drop_short_help0(self, parser: parseopt.Parser) -> None:\n        parser.addoption(\"--func-args\", \"--doit\", help=\"foo\", action=\"store_true\")\n        parser.parse([])\n        help = parser.optparser.format_help()\n        assert \"--func-args, --doit  foo\" in help\n\n    # testing would be more helpful with all help generated\n    def test_drop_short_help1(self, parser: parseopt.Parser) -> None:\n        group = parser.getgroup(\"general\")\n        group.addoption(\"--doit\", \"--func-args\", action=\"store_true\", help=\"foo\")\n        group._addoption(\n            \"-h\",\n            \"--help\",\n            action=\"store_true\",\n            dest=\"help\",\n            help=\"show help message and configuration info\",\n        )\n        parser.parse([\"-h\"])\n        help = parser.optparser.format_help()\n        assert \"-doit, --func-args  foo\" in help\n\n    def test_multiple_metavar_help(self, parser: parseopt.Parser) -> None:\n        \"\"\"\n        Help text for options with a metavar tuple should display help\n        in the form \"--preferences=value1 value2 value3\" (#2004).\n        \"\"\"\n        group = parser.getgroup(\"general\")\n        group.addoption(\n            \"--preferences\", metavar=(\"value1\", \"value2\", \"value3\"), nargs=3\n        )\n        group._addoption(\"-h\", \"--help\", action=\"store_true\", dest=\"help\")\n        parser.parse([\"-h\"])\n        help = parser.optparser.format_help()\n        assert \"--preferences=value1 value2 value3\" in help\n\n\ndef test_argcomplete(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n    if sys.version_info >= (3, 11):\n        # New in Python 3.11, ignores utf-8 mode\n        encoding = locale.getencoding()\n    else:\n        encoding = locale.getpreferredencoding(False)\n    try:\n        bash_version = subprocess.run(\n            [\"bash\", \"--version\"],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.DEVNULL,\n            check=True,\n            text=True,\n            encoding=encoding,\n        ).stdout\n    except (OSError, subprocess.CalledProcessError):\n        pytest.skip(\"bash is not available\")\n    if \"GNU bash\" not in bash_version:\n        # See #7518.\n        pytest.skip(\"not a real bash\")\n\n    script = str(pytester.path.joinpath(\"test_argcomplete\"))\n\n    with open(str(script), \"w\", encoding=\"utf-8\") as fp:\n        # redirect output from argcomplete to stdin and stderr is not trivial\n        # http://stackoverflow.com/q/12589419/1307905\n        # so we use bash\n        fp.write(\n            f'COMP_WORDBREAKS=\"$COMP_WORDBREAKS\" {shlex.quote(sys.executable)} -m pytest 8>&1 9>&2'\n        )\n    # alternative would be extended Pytester.{run(),_run(),popen()} to be able\n    # to handle a keyword argument env that replaces os.environ in popen or\n    # extends the copy, advantage: could not forget to restore\n    monkeypatch.setenv(\"_ARGCOMPLETE\", \"1\")\n    monkeypatch.setenv(\"_ARGCOMPLETE_IFS\", \"\\x0b\")\n    monkeypatch.setenv(\"COMP_WORDBREAKS\", \" \\\\t\\\\n\\\"\\\\'><=;|&(:\")\n\n    arg = \"--fu\"\n    monkeypatch.setenv(\"COMP_LINE\", \"pytest \" + arg)\n    monkeypatch.setenv(\"COMP_POINT\", str(len(\"pytest \" + arg)))\n    result = pytester.run(\"bash\", str(script), arg)\n    if result.ret == 255:\n        # argcomplete not found\n        pytest.skip(\"argcomplete not available\")\n    elif not result.stdout.str():\n        pytest.skip(\n            f\"bash provided no output on stdout, argcomplete not available? (stderr={result.stderr.str()!r})\"\n        )\n    else:\n        result.stdout.fnmatch_lines([\"--funcargs\", \"--fulltrace\"])\n    os.mkdir(\"test_argcomplete.d\")\n    arg = \"test_argc\"\n    monkeypatch.setenv(\"COMP_LINE\", \"pytest \" + arg)\n    monkeypatch.setenv(\"COMP_POINT\", str(len(\"pytest \" + arg)))\n    result = pytester.run(\"bash\", str(script), arg)\n    result.stdout.fnmatch_lines([\"test_argcomplete\", \"test_argcomplete.d/\"])\n", "testing/test_session.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom _pytest.config import ExitCode\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nclass SessionTests:\n    def test_basic_testitem_events(self, pytester: Pytester) -> None:\n        tfile = pytester.makepyfile(\n            \"\"\"\n            def test_one():\n                pass\n            def test_one_one():\n                assert 0\n            def test_other():\n                raise ValueError(23)\n            class TestClass(object):\n                def test_two(self, someargs):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(tfile)\n        passed, skipped, failed = reprec.listoutcomes()\n        assert len(skipped) == 0\n        assert len(passed) == 1\n        assert len(failed) == 3\n\n        def end(x):\n            return x.nodeid.split(\"::\")[-1]\n\n        assert end(failed[0]) == \"test_one_one\"\n        assert end(failed[1]) == \"test_other\"\n        itemstarted = reprec.getcalls(\"pytest_itemcollected\")\n        assert len(itemstarted) == 4\n        # XXX check for failing funcarg setup\n        # colreports = reprec.getcalls(\"pytest_collectreport\")\n        # assert len(colreports) == 4\n        # assert colreports[1].report.failed\n\n    def test_nested_import_error(self, pytester: Pytester) -> None:\n        tfile = pytester.makepyfile(\n            \"\"\"\n            import import_fails\n            def test_this():\n                assert import_fails.a == 1\n        \"\"\",\n            import_fails=\"\"\"\n            import does_not_work\n            a = 1\n        \"\"\",\n        )\n        reprec = pytester.inline_run(tfile)\n        values = reprec.getfailedcollections()\n        assert len(values) == 1\n        out = str(values[0].longrepr)\n        assert out.find(\"does_not_work\") != -1\n\n    def test_raises_output(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\n            import pytest\n            def test_raises_doesnt():\n                pytest.raises(ValueError, int, \"3\")\n        \"\"\"\n        )\n        passed, skipped, failed = reprec.listoutcomes()\n        assert len(failed) == 1\n        out = failed[0].longrepr.reprcrash.message  # type: ignore[union-attr]\n        assert \"DID NOT RAISE\" in out\n\n    def test_syntax_error_module(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\"this is really not python\")\n        values = reprec.getfailedcollections()\n        assert len(values) == 1\n        out = str(values[0].longrepr)\n        assert out.find(\"not python\") != -1\n\n    def test_exit_first_problem(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\n            def test_one(): assert 0\n            def test_two(): assert 0\n        \"\"\",\n            \"--exitfirst\",\n        )\n        passed, skipped, failed = reprec.countoutcomes()\n        assert failed == 1\n        assert passed == skipped == 0\n\n    def test_maxfail(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\n            def test_one(): assert 0\n            def test_two(): assert 0\n            def test_three(): assert 0\n        \"\"\",\n            \"--maxfail=2\",\n        )\n        passed, skipped, failed = reprec.countoutcomes()\n        assert failed == 2\n        assert passed == skipped == 0\n\n    def test_broken_repr(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            class reprexc(BaseException):\n                def __str__(self):\n                    return \"Ha Ha fooled you, I'm a broken repr().\"\n\n            class BrokenRepr1(object):\n                foo=0\n                def __repr__(self):\n                    raise reprexc\n\n            class TestBrokenClass(object):\n                def test_explicit_bad_repr(self):\n                    t = BrokenRepr1()\n                    with pytest.raises(BaseException, match=\"broken repr\"):\n                        repr(t)\n\n                def test_implicit_bad_repr1(self):\n                    t = BrokenRepr1()\n                    assert t.foo == 1\n\n        \"\"\"\n        )\n        reprec = pytester.inline_run(p)\n        passed, skipped, failed = reprec.listoutcomes()\n        assert (len(passed), len(skipped), len(failed)) == (1, 0, 1)\n        out = failed[0].longrepr.reprcrash.message  # type: ignore[union-attr]\n        assert out.find(\"<[reprexc() raised in repr()] BrokenRepr1\") != -1\n\n    def test_broken_repr_with_showlocals_verbose(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            class ObjWithErrorInRepr:\n                def __repr__(self):\n                    raise NotImplementedError\n\n            def test_repr_error():\n                x = ObjWithErrorInRepr()\n                assert x == \"value\"\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--showlocals\", \"-vv\", p)\n        passed, skipped, failed = reprec.listoutcomes()\n        assert (len(passed), len(skipped), len(failed)) == (0, 0, 1)\n        entries = failed[0].longrepr.reprtraceback.reprentries  # type: ignore[union-attr]\n        assert len(entries) == 1\n        repr_locals = entries[0].reprlocals\n        assert repr_locals.lines\n        assert len(repr_locals.lines) == 1\n        assert repr_locals.lines[0].startswith(\n            \"x          = <[NotImplementedError() raised in repr()] ObjWithErrorInRepr\"\n        )\n\n    def test_skip_file_by_conftest(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            conftest=\"\"\"\n            import pytest\n            def pytest_collect_file():\n                pytest.skip(\"intentional\")\n        \"\"\",\n            test_file=\"\"\"\n            def test_one(): pass\n        \"\"\",\n        )\n        try:\n            reprec = pytester.inline_run(pytester.path)\n        except pytest.skip.Exception:  # pragma: no cover\n            pytest.fail(\"wrong skipped caught\")\n        reports = reprec.getreports(\"pytest_collectreport\")\n        # Session, Dir\n        assert len(reports) == 2\n        assert reports[1].skipped\n\n\nclass TestNewSession(SessionTests):\n    def test_order_of_execution(self, pytester: Pytester) -> None:\n        reprec = pytester.inline_runsource(\n            \"\"\"\n            values = []\n            def test_1():\n                values.append(1)\n            def test_2():\n                values.append(2)\n            def test_3():\n                assert values == [1,2]\n            class Testmygroup(object):\n                reslist = values\n                def test_1(self):\n                    self.reslist.append(1)\n                def test_2(self):\n                    self.reslist.append(2)\n                def test_3(self):\n                    self.reslist.append(3)\n                def test_4(self):\n                    assert self.reslist == [1,2,1,2,3]\n        \"\"\"\n        )\n        passed, skipped, failed = reprec.countoutcomes()\n        assert failed == skipped == 0\n        assert passed == 7\n\n    def test_collect_only_with_various_situations(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            test_one=\"\"\"\n                def test_one():\n                    raise ValueError()\n\n                class TestX(object):\n                    def test_method_one(self):\n                        pass\n\n                class TestY(TestX):\n                    pass\n            \"\"\",\n            test_three=\"xxxdsadsadsadsa\",\n            __init__=\"\",\n        )\n        reprec = pytester.inline_run(\"--collect-only\", p.parent)\n\n        itemstarted = reprec.getcalls(\"pytest_itemcollected\")\n        assert len(itemstarted) == 3\n        assert not reprec.getreports(\"pytest_runtest_logreport\")\n        started = reprec.getcalls(\"pytest_collectstart\")\n        finished = reprec.getreports(\"pytest_collectreport\")\n        assert len(started) == len(finished)\n        assert len(started) == 6\n        colfail = [x for x in finished if x.failed]\n        assert len(colfail) == 1\n\n    def test_minus_x_import_error(self, pytester: Pytester) -> None:\n        pytester.makepyfile(__init__=\"\")\n        pytester.makepyfile(test_one=\"xxxx\", test_two=\"yyyy\")\n        reprec = pytester.inline_run(\"-x\", pytester.path)\n        finished = reprec.getreports(\"pytest_collectreport\")\n        colfail = [x for x in finished if x.failed]\n        assert len(colfail) == 1\n\n    def test_minus_x_overridden_by_maxfail(self, pytester: Pytester) -> None:\n        pytester.makepyfile(__init__=\"\")\n        pytester.makepyfile(test_one=\"xxxx\", test_two=\"yyyy\", test_third=\"zzz\")\n        reprec = pytester.inline_run(\"-x\", \"--maxfail=2\", pytester.path)\n        finished = reprec.getreports(\"pytest_collectreport\")\n        colfail = [x for x in finished if x.failed]\n        assert len(colfail) == 2\n\n\ndef test_plugin_specify(pytester: Pytester) -> None:\n    with pytest.raises(ImportError):\n        pytester.parseconfig(\"-p\", \"nqweotexistent\")\n    # pytest.raises(ImportError,\n    #    \"config.do_configure(config)\"\n    # )\n\n\ndef test_plugin_already_exists(pytester: Pytester) -> None:\n    config = pytester.parseconfig(\"-p\", \"terminal\")\n    assert config.option.plugins == [\"terminal\"]\n    config._do_configure()\n    config._ensure_unconfigure()\n\n\ndef test_exclude(pytester: Pytester) -> None:\n    hellodir = pytester.mkdir(\"hello\")\n    hellodir.joinpath(\"test_hello.py\").write_text(\"x y syntaxerror\", encoding=\"utf-8\")\n    hello2dir = pytester.mkdir(\"hello2\")\n    hello2dir.joinpath(\"test_hello2.py\").write_text(\"x y syntaxerror\", encoding=\"utf-8\")\n    pytester.makepyfile(test_ok=\"def test_pass(): pass\")\n    result = pytester.runpytest(\"--ignore=hello\", \"--ignore=hello2\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_exclude_glob(pytester: Pytester) -> None:\n    hellodir = pytester.mkdir(\"hello\")\n    hellodir.joinpath(\"test_hello.py\").write_text(\"x y syntaxerror\", encoding=\"utf-8\")\n    hello2dir = pytester.mkdir(\"hello2\")\n    hello2dir.joinpath(\"test_hello2.py\").write_text(\"x y syntaxerror\", encoding=\"utf-8\")\n    hello3dir = pytester.mkdir(\"hallo3\")\n    hello3dir.joinpath(\"test_hello3.py\").write_text(\"x y syntaxerror\", encoding=\"utf-8\")\n    subdir = pytester.mkdir(\"sub\")\n    subdir.joinpath(\"test_hello4.py\").write_text(\"x y syntaxerror\", encoding=\"utf-8\")\n    pytester.makepyfile(test_ok=\"def test_pass(): pass\")\n    result = pytester.runpytest(\"--ignore-glob=*h[ea]llo*\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_deselect(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_a=\"\"\"\n        import pytest\n\n        def test_a1(): pass\n\n        @pytest.mark.parametrize('b', range(3))\n        def test_a2(b): pass\n\n        class TestClass:\n            def test_c1(self): pass\n\n            def test_c2(self): pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\n        \"-v\",\n        \"--deselect=test_a.py::test_a2[1]\",\n        \"--deselect=test_a.py::test_a2[2]\",\n        \"--deselect=test_a.py::TestClass::test_c1\",\n    )\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*3 passed, 3 deselected*\"])\n    for line in result.stdout.lines:\n        assert not line.startswith((\"test_a.py::test_a2[1]\", \"test_a.py::test_a2[2]\"))\n\n\ndef test_sessionfinish_with_start(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        import os\n        values = []\n        def pytest_sessionstart():\n            values.append(os.getcwd())\n            os.chdir(\"..\")\n\n        def pytest_sessionfinish():\n            assert values[0] == os.getcwd()\n\n    \"\"\"\n    )\n    res = pytester.runpytest(\"--collect-only\")\n    assert res.ret == ExitCode.NO_TESTS_COLLECTED\n\n\ndef test_collection_args_do_not_duplicate_modules(pytester: Pytester) -> None:\n    \"\"\"Test that when multiple collection args are specified on the command line\n    for the same module, only a single Module collector is created.\n\n    Regression test for #723, #3358.\n    \"\"\"\n    pytester.makepyfile(\n        **{\n            \"d/test_it\": \"\"\"\n                def test_1(): pass\n                def test_2(): pass\n                \"\"\"\n        }\n    )\n\n    result = pytester.runpytest(\n        \"--collect-only\",\n        \"d/test_it.py::test_1\",\n        \"d/test_it.py::test_2\",\n    )\n    result.stdout.fnmatch_lines(\n        [\n            \"  <Dir d>\",\n            \"    <Module test_it.py>\",\n            \"      <Function test_1>\",\n            \"      <Function test_2>\",\n        ],\n        consecutive=True,\n    )\n\n    # Different, but related case.\n    result = pytester.runpytest(\n        \"--collect-only\",\n        \"--keep-duplicates\",\n        \"d\",\n        \"d\",\n    )\n    result.stdout.fnmatch_lines(\n        [\n            \"  <Dir d>\",\n            \"    <Module test_it.py>\",\n            \"      <Function test_1>\",\n            \"      <Function test_2>\",\n            \"      <Function test_1>\",\n            \"      <Function test_2>\",\n        ],\n        consecutive=True,\n    )\n\n\n@pytest.mark.parametrize(\"path\", [\"root\", \"{relative}/root\", \"{environment}/root\"])\ndef test_rootdir_option_arg(\n    pytester: Pytester, monkeypatch: MonkeyPatch, path: str\n) -> None:\n    monkeypatch.setenv(\"PY_ROOTDIR_PATH\", str(pytester.path))\n    path = path.format(relative=str(pytester.path), environment=\"$PY_ROOTDIR_PATH\")\n\n    rootdir = pytester.path / \"root\" / \"tests\"\n    rootdir.mkdir(parents=True)\n    pytester.makepyfile(\n        \"\"\"\n        import os\n        def test_one():\n            assert 1\n    \"\"\"\n    )\n\n    result = pytester.runpytest(f\"--rootdir={path}\")\n    result.stdout.fnmatch_lines(\n        [\n            f\"*rootdir: {pytester.path}/root\",\n            \"root/test_rootdir_option_arg.py *\",\n            \"*1 passed*\",\n        ]\n    )\n\n\ndef test_rootdir_wrong_option_arg(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--rootdir=wrong_dir\")\n    result.stderr.fnmatch_lines(\n        [\"*Directory *wrong_dir* not found. Check your '--rootdir' option.*\"]\n    )\n\n\ndef test_shouldfail_is_sticky(pytester: Pytester) -> None:\n    \"\"\"Test that session.shouldfail cannot be reset to False after being set.\n\n    Issue #11706.\n    \"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_sessionfinish(session):\n            assert session.shouldfail\n            session.shouldfail = False\n            assert session.shouldfail\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        def test_foo():\n            pytest.fail(\"This is a failing test\")\n\n        def test_bar(): pass\n        \"\"\"\n    )\n\n    result = pytester.runpytest(\"--maxfail=1\", \"-Wall\")\n\n    result.assert_outcomes(failed=1, warnings=1)\n    result.stdout.fnmatch_lines(\"*session.shouldfail cannot be unset*\")\n\n\ndef test_shouldstop_is_sticky(pytester: Pytester) -> None:\n    \"\"\"Test that session.shouldstop cannot be reset to False after being set.\n\n    Issue #11706.\n    \"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_sessionfinish(session):\n            assert session.shouldstop\n            session.shouldstop = False\n            assert session.shouldstop\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        def test_foo():\n            pytest.fail(\"This is a failing test\")\n\n        def test_bar(): pass\n        \"\"\"\n    )\n\n    result = pytester.runpytest(\"--stepwise\", \"-Wall\")\n\n    result.assert_outcomes(failed=1, warnings=1)\n    result.stdout.fnmatch_lines(\"*session.shouldstop cannot be unset*\")\n", "testing/test_legacypath.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nfrom _pytest.compat import LEGACY_PATH\nfrom _pytest.fixtures import TopRequest\nfrom _pytest.legacypath import TempdirFactory\nfrom _pytest.legacypath import Testdir\nimport pytest\n\n\ndef test_item_fspath(pytester: pytest.Pytester) -> None:\n    pytester.makepyfile(\"def test_func(): pass\")\n    items, hookrec = pytester.inline_genitems()\n    assert len(items) == 1\n    (item,) = items\n    items2, hookrec = pytester.inline_genitems(item.nodeid)\n    (item2,) = items2\n    assert item2.name == item.name\n    assert item2.fspath == item.fspath\n    assert item2.path == item.path\n\n\ndef test_testdir_testtmproot(testdir: Testdir) -> None:\n    \"\"\"Check test_tmproot is a py.path attribute for backward compatibility.\"\"\"\n    assert testdir.test_tmproot.check(dir=1)\n\n\ndef test_testdir_makefile_dot_prefixes_extension_silently(\n    testdir: Testdir,\n) -> None:\n    \"\"\"For backwards compat #8192\"\"\"\n    p1 = testdir.makefile(\"foo.bar\", \"\")\n    assert \".foo.bar\" in str(p1)\n\n\ndef test_testdir_makefile_ext_none_raises_type_error(testdir: Testdir) -> None:\n    \"\"\"For backwards compat #8192\"\"\"\n    with pytest.raises(TypeError):\n        testdir.makefile(None, \"\")\n\n\ndef test_testdir_makefile_ext_empty_string_makes_file(testdir: Testdir) -> None:\n    \"\"\"For backwards compat #8192\"\"\"\n    p1 = testdir.makefile(\"\", \"\")\n    assert \"test_testdir_makefile\" in str(p1)\n\n\ndef attempt_symlink_to(path: str, to_path: str) -> None:\n    \"\"\"Try to make a symlink from \"path\" to \"to_path\", skipping in case this platform\n    does not support it or we don't have sufficient privileges (common on Windows).\"\"\"\n    try:\n        Path(path).symlink_to(Path(to_path))\n    except OSError:\n        pytest.skip(\"could not create symbolic link\")\n\n\ndef test_tmpdir_factory(\n    tmpdir_factory: TempdirFactory,\n    tmp_path_factory: pytest.TempPathFactory,\n) -> None:\n    assert str(tmpdir_factory.getbasetemp()) == str(tmp_path_factory.getbasetemp())\n    dir = tmpdir_factory.mktemp(\"foo\")\n    assert dir.exists()\n\n\ndef test_tmpdir_equals_tmp_path(tmpdir: LEGACY_PATH, tmp_path: Path) -> None:\n    assert Path(tmpdir) == tmp_path\n\n\ndef test_tmpdir_always_is_realpath(pytester: pytest.Pytester) -> None:\n    # See test_tmp_path_always_is_realpath.\n    realtemp = pytester.mkdir(\"myrealtemp\")\n    linktemp = pytester.path.joinpath(\"symlinktemp\")\n    attempt_symlink_to(str(linktemp), str(realtemp))\n    p = pytester.makepyfile(\n        \"\"\"\n        def test_1(tmpdir):\n            import os\n            assert os.path.realpath(str(tmpdir)) == str(tmpdir)\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-s\", p, f\"--basetemp={linktemp}/bt\")\n    assert not result.ret\n\n\ndef test_cache_makedir(cache: pytest.Cache) -> None:\n    dir = cache.makedir(\"foo\")  # type: ignore[attr-defined]\n    assert dir.exists()\n    dir.remove()\n\n\ndef test_fixturerequest_getmodulepath(pytester: pytest.Pytester) -> None:\n    modcol = pytester.getmodulecol(\"def test_somefunc(): pass\")\n    (item,) = pytester.genitems([modcol])\n    assert isinstance(item, pytest.Function)\n    req = TopRequest(item, _ispytest=True)\n    assert req.path == modcol.path\n    assert req.fspath == modcol.fspath  # type: ignore[attr-defined]\n\n\nclass TestFixtureRequestSessionScoped:\n    @pytest.fixture(scope=\"session\")\n    def session_request(self, request):\n        return request\n\n    def test_session_scoped_unavailable_attributes(self, session_request):\n        with pytest.raises(\n            AttributeError,\n            match=\"path not available in session-scoped context\",\n        ):\n            _ = session_request.fspath\n\n\n@pytest.mark.parametrize(\"config_type\", [\"ini\", \"pyproject\"])\ndef test_addini_paths(pytester: pytest.Pytester, config_type: str) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_addoption(parser):\n            parser.addini(\"paths\", \"my new ini value\", type=\"pathlist\")\n            parser.addini(\"abc\", \"abc value\")\n    \"\"\"\n    )\n    if config_type == \"ini\":\n        inipath = pytester.makeini(\n            \"\"\"\n            [pytest]\n            paths=hello world/sub.py\n        \"\"\"\n        )\n    elif config_type == \"pyproject\":\n        inipath = pytester.makepyprojecttoml(\n            \"\"\"\n            [tool.pytest.ini_options]\n            paths=[\"hello\", \"world/sub.py\"]\n        \"\"\"\n        )\n    config = pytester.parseconfig()\n    values = config.getini(\"paths\")\n    assert len(values) == 2\n    assert values[0] == inipath.parent.joinpath(\"hello\")\n    assert values[1] == inipath.parent.joinpath(\"world/sub.py\")\n    pytest.raises(ValueError, config.getini, \"other\")\n\n\ndef test_override_ini_paths(pytester: pytest.Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_addoption(parser):\n            parser.addini(\"paths\", \"my new ini value\", type=\"pathlist\")\"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        paths=blah.py\"\"\"\n    )\n    pytester.makepyfile(\n        r\"\"\"\n        def test_overridden(pytestconfig):\n            config_paths = pytestconfig.getini(\"paths\")\n            print(config_paths)\n            for cpf in config_paths:\n                print('\\nuser_path:%s' % cpf.basename)\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--override-ini\", \"paths=foo/bar1.py foo/bar2.py\", \"-s\")\n    result.stdout.fnmatch_lines([\"user_path:bar1.py\", \"user_path:bar2.py\"])\n\n\ndef test_inifile_from_cmdline_main_hook(pytester: pytest.Pytester) -> None:\n    \"\"\"Ensure Config.inifile is available during pytest_cmdline_main (#9396).\"\"\"\n    p = pytester.makeini(\n        \"\"\"\n        [pytest]\n        \"\"\"\n    )\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_cmdline_main(config):\n            print(\"pytest_cmdline_main inifile =\", config.inifile)\n        \"\"\"\n    )\n    result = pytester.runpytest_subprocess(\"-s\")\n    result.stdout.fnmatch_lines(f\"*pytest_cmdline_main inifile = {p}\")\n", "testing/test_skipping.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport sys\nimport textwrap\n\nfrom _pytest.pytester import Pytester\nfrom _pytest.runner import runtestprotocol\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nimport pytest\n\n\nclass TestEvaluation:\n    def test_no_marker(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\"def test_func(): pass\")\n        skipped = evaluate_skip_marks(item)\n        assert not skipped\n\n    def test_marked_xfail_no_args(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_func():\n                pass\n        \"\"\"\n        )\n        xfailed = evaluate_xfail_marks(item)\n        assert xfailed\n        assert xfailed.reason == \"\"\n        assert xfailed.run\n\n    def test_marked_skipif_no_args(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif\n            def test_func():\n                pass\n        \"\"\"\n        )\n        skipped = evaluate_skip_marks(item)\n        assert skipped\n        assert skipped.reason == \"\"\n\n    def test_marked_one_arg(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(\"hasattr(os, 'sep')\")\n            def test_func():\n                pass\n        \"\"\"\n        )\n        skipped = evaluate_skip_marks(item)\n        assert skipped\n        assert skipped.reason == \"condition: hasattr(os, 'sep')\"\n\n    def test_marked_one_arg_with_reason(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(\"hasattr(os, 'sep')\", attr=2, reason=\"hello world\")\n            def test_func():\n                pass\n        \"\"\"\n        )\n        skipped = evaluate_skip_marks(item)\n        assert skipped\n        assert skipped.reason == \"hello world\"\n\n    def test_marked_one_arg_twice(self, pytester: Pytester) -> None:\n        lines = [\n            \"\"\"@pytest.mark.skipif(\"not hasattr(os, 'murks')\")\"\"\",\n            \"\"\"@pytest.mark.skipif(condition=\"hasattr(os, 'murks')\")\"\"\",\n        ]\n        for i in range(2):\n            item = pytester.getitem(\n                f\"\"\"\n                import pytest\n                {lines[i]}\n                {lines[(i + 1) % 2]}\n                def test_func():\n                    pass\n            \"\"\"\n            )\n            skipped = evaluate_skip_marks(item)\n            assert skipped\n            assert skipped.reason == \"condition: not hasattr(os, 'murks')\"\n\n    def test_marked_one_arg_twice2(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(\"hasattr(os, 'murks')\")\n            @pytest.mark.skipif(\"not hasattr(os, 'murks')\")\n            def test_func():\n                pass\n        \"\"\"\n        )\n        skipped = evaluate_skip_marks(item)\n        assert skipped\n        assert skipped.reason == \"condition: not hasattr(os, 'murks')\"\n\n    def test_marked_skipif_with_boolean_without_reason(\n        self, pytester: Pytester\n    ) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(False)\n            def test_func():\n                pass\n        \"\"\"\n        )\n        with pytest.raises(pytest.fail.Exception) as excinfo:\n            evaluate_skip_marks(item)\n        assert excinfo.value.msg is not None\n        assert (\n            \"\"\"Error evaluating 'skipif': you need to specify reason=STRING when using booleans as conditions.\"\"\"\n            in excinfo.value.msg\n        )\n\n    def test_marked_skipif_with_invalid_boolean(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n\n            class InvalidBool:\n                def __bool__(self):\n                    raise TypeError(\"INVALID\")\n\n            @pytest.mark.skipif(InvalidBool(), reason=\"xxx\")\n            def test_func():\n                pass\n        \"\"\"\n        )\n        with pytest.raises(pytest.fail.Exception) as excinfo:\n            evaluate_skip_marks(item)\n        assert excinfo.value.msg is not None\n        assert \"Error evaluating 'skipif' condition as a boolean\" in excinfo.value.msg\n        assert \"INVALID\" in excinfo.value.msg\n\n    def test_skipif_class(self, pytester: Pytester) -> None:\n        (item,) = pytester.getitems(\n            \"\"\"\n            import pytest\n            class TestClass(object):\n                pytestmark = pytest.mark.skipif(\"config._hackxyz\")\n                def test_func(self):\n                    pass\n        \"\"\"\n        )\n        item.config._hackxyz = 3  # type: ignore[attr-defined]\n        skipped = evaluate_skip_marks(item)\n        assert skipped\n        assert skipped.reason == \"condition: config._hackxyz\"\n\n    def test_skipif_markeval_namespace(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            def pytest_markeval_namespace():\n                return {\"color\": \"green\"}\n            \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.skipif(\"color == 'green'\")\n            def test_1():\n                assert True\n\n            @pytest.mark.skipif(\"color == 'red'\")\n            def test_2():\n                assert True\n        \"\"\"\n        )\n        res = pytester.runpytest(p)\n        assert res.ret == 0\n        res.stdout.fnmatch_lines([\"*1 skipped*\"])\n        res.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_skipif_markeval_namespace_multiple(self, pytester: Pytester) -> None:\n        \"\"\"Keys defined by ``pytest_markeval_namespace()`` in nested plugins override top-level ones.\"\"\"\n        root = pytester.mkdir(\"root\")\n        root.joinpath(\"__init__.py\").touch()\n        root.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n\n            def pytest_markeval_namespace():\n                return {\"arg\": \"root\"}\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        root.joinpath(\"test_root.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n\n            @pytest.mark.skipif(\"arg == 'root'\")\n            def test_root():\n                assert False\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        foo = root.joinpath(\"foo\")\n        foo.mkdir()\n        foo.joinpath(\"__init__.py\").touch()\n        foo.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n\n            def pytest_markeval_namespace():\n                return {\"arg\": \"foo\"}\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        foo.joinpath(\"test_foo.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n\n            @pytest.mark.skipif(\"arg == 'foo'\")\n            def test_foo():\n                assert False\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        bar = root.joinpath(\"bar\")\n        bar.mkdir()\n        bar.joinpath(\"__init__.py\").touch()\n        bar.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n\n            def pytest_markeval_namespace():\n                return {\"arg\": \"bar\"}\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        bar.joinpath(\"test_bar.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n\n            @pytest.mark.skipif(\"arg == 'bar'\")\n            def test_bar():\n                assert False\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        reprec = pytester.inline_run(\"-vs\", \"--capture=no\")\n        reprec.assertoutcome(skipped=3)\n\n    def test_skipif_markeval_namespace_ValueError(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            def pytest_markeval_namespace():\n                return True\n            \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.skipif(\"color == 'green'\")\n            def test_1():\n                assert True\n        \"\"\"\n        )\n        res = pytester.runpytest(p)\n        assert res.ret == 1\n        res.stdout.fnmatch_lines(\n            [\n                \"*ValueError: pytest_markeval_namespace() needs to return a dict, got True*\"\n            ]\n        )\n\n\nclass TestXFail:\n    @pytest.mark.parametrize(\"strict\", [True, False])\n    def test_xfail_simple(self, pytester: Pytester, strict: bool) -> None:\n        item = pytester.getitem(\n            f\"\"\"\n            import pytest\n            @pytest.mark.xfail(strict={strict})\n            def test_func():\n                assert 0\n        \"\"\"\n        )\n        reports = runtestprotocol(item, log=False)\n        assert len(reports) == 3\n        callreport = reports[1]\n        assert callreport.skipped\n        assert callreport.wasxfail == \"\"\n\n    def test_xfail_xpassed(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(reason=\"this is an xfail\")\n            def test_func():\n                assert 1\n        \"\"\"\n        )\n        reports = runtestprotocol(item, log=False)\n        assert len(reports) == 3\n        callreport = reports[1]\n        assert callreport.passed\n        assert callreport.wasxfail == \"this is an xfail\"\n\n    def test_xfail_using_platform(self, pytester: Pytester) -> None:\n        \"\"\"Verify that platform can be used with xfail statements.\"\"\"\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(\"platform.platform() == platform.platform()\")\n            def test_func():\n                assert 0\n        \"\"\"\n        )\n        reports = runtestprotocol(item, log=False)\n        assert len(reports) == 3\n        callreport = reports[1]\n        assert callreport.wasxfail\n\n    def test_xfail_xpassed_strict(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(strict=True, reason=\"nope\")\n            def test_func():\n                assert 1\n        \"\"\"\n        )\n        reports = runtestprotocol(item, log=False)\n        assert len(reports) == 3\n        callreport = reports[1]\n        assert callreport.failed\n        assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n        assert not hasattr(callreport, \"wasxfail\")\n\n    def test_xfail_run_anyway(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_func():\n                assert 0\n            def test_func2():\n                pytest.xfail(\"hello\")\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--runxfail\")\n        result.stdout.fnmatch_lines(\n            [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n        )\n\n    @pytest.mark.parametrize(\n        \"test_input,expected\",\n        [\n            (\n                [\"-rs\"],\n                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n            ),\n            (\n                [\"-rs\", \"--runxfail\"],\n                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n            ),\n        ],\n    )\n    def test_xfail_run_with_skip_mark(\n        self, pytester: Pytester, test_input, expected\n    ) -> None:\n        pytester.makepyfile(\n            test_sample=\"\"\"\n            import pytest\n            @pytest.mark.skip\n            def test_skip_location() -> None:\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(*test_input)\n        result.stdout.fnmatch_lines(expected)\n\n    def test_xfail_evalfalse_but_fails(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail('False')\n            def test_func():\n                assert 0\n        \"\"\"\n        )\n        reports = runtestprotocol(item, log=False)\n        callreport = reports[1]\n        assert callreport.failed\n        assert not hasattr(callreport, \"wasxfail\")\n        assert \"xfail\" in callreport.keywords\n\n    def test_xfail_not_report_default(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            test_one=\"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_this():\n                assert 0\n        \"\"\"\n        )\n        pytester.runpytest(p, \"-v\")\n        # result.stdout.fnmatch_lines([\n        #    \"*HINT*use*-r*\"\n        # ])\n\n    def test_xfail_not_run_xfail_reporting(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            test_one=\"\"\"\n            import pytest\n            @pytest.mark.xfail(run=False, reason=\"noway\")\n            def test_this():\n                assert 0\n            @pytest.mark.xfail(\"True\", run=False)\n            def test_this_true():\n                assert 0\n            @pytest.mark.xfail(\"False\", run=False, reason=\"huh\")\n            def test_this_false():\n                assert 1\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rx\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_one*test_this - reason: *NOTRUN* noway\",\n                \"*test_one*test_this_true - reason: *NOTRUN* condition: True\",\n                \"*1 passed*\",\n            ]\n        )\n\n    def test_xfail_not_run_no_setup_run(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            test_one=\"\"\"\n            import pytest\n            @pytest.mark.xfail(run=False, reason=\"hello\")\n            def test_this():\n                assert 0\n            def setup_module(mod):\n                raise ValueError(42)\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rx\")\n        result.stdout.fnmatch_lines([\"*test_one*test_this*NOTRUN*hello\", \"*1 xfailed*\"])\n\n    def test_xfail_xpass(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            test_one=\"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_that():\n                assert 1\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rX\")\n        result.stdout.fnmatch_lines([\"*XPASS*test_that*\", \"*1 xpassed*\"])\n        assert result.ret == 0\n\n    def test_xfail_imperative(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_this():\n                pytest.xfail(\"hello\")\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"*1 xfailed*\"])\n        result = pytester.runpytest(p, \"-rx\")\n        result.stdout.fnmatch_lines([\"*XFAIL*test_this*reason:*hello*\"])\n        result = pytester.runpytest(p, \"--runxfail\")\n        result.stdout.fnmatch_lines([\"*1 pass*\"])\n\n    def test_xfail_imperative_in_setup_function(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def setup_function(function):\n                pytest.xfail(\"hello\")\n\n            def test_this():\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"*1 xfailed*\"])\n        result = pytester.runpytest(p, \"-rx\")\n        result.stdout.fnmatch_lines([\"*XFAIL*test_this*reason:*hello*\"])\n        result = pytester.runpytest(p, \"--runxfail\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *def test_this*\n            *1 fail*\n        \"\"\"\n        )\n\n    def xtest_dynamic_xfail_set_during_setup(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def setup_function(function):\n                pytest.mark.xfail(function)\n            def test_this():\n                assert 0\n            def test_that():\n                assert 1\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rxX\")\n        result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n\n    def test_dynamic_xfail_no_run(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def arg(request):\n                request.applymarker(pytest.mark.xfail(run=False))\n            def test_this(arg):\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rxX\")\n        result.stdout.fnmatch_lines([\"*XFAIL*test_this*NOTRUN*\"])\n\n    def test_dynamic_xfail_set_during_funcarg_setup(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def arg(request):\n                request.applymarker(pytest.mark.xfail)\n            def test_this2(arg):\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"*1 xfailed*\"])\n\n    def test_dynamic_xfail_set_during_runtest_failed(self, pytester: Pytester) -> None:\n        # Issue #7486.\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_this(request):\n                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.assert_outcomes(xfailed=1)\n\n    def test_dynamic_xfail_set_during_runtest_passed_strict(\n        self, pytester: Pytester\n    ) -> None:\n        # Issue #7486.\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_this(request):\n                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.assert_outcomes(failed=1)\n\n    @pytest.mark.parametrize(\n        \"expected, actual, matchline\",\n        [\n            (\"TypeError\", \"TypeError\", \"*1 xfailed*\"),\n            (\"(AttributeError, TypeError)\", \"TypeError\", \"*1 xfailed*\"),\n            (\"TypeError\", \"IndexError\", \"*1 failed*\"),\n            (\"(AttributeError, TypeError)\", \"IndexError\", \"*1 failed*\"),\n        ],\n    )\n    def test_xfail_raises(\n        self, expected, actual, matchline, pytester: Pytester\n    ) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(raises=%s)\n            def test_raises():\n                raise %s()\n        \"\"\"  # noqa: UP031 (python syntax issues)\n            % (expected, actual)\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([matchline])\n\n    def test_strict_sanity(self, pytester: Pytester) -> None:\n        \"\"\"Sanity check for xfail(strict=True): a failing test should behave\n        exactly like a normal xfail.\"\"\"\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(reason='unsupported feature', strict=True)\n            def test_foo():\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rxX\")\n        result.stdout.fnmatch_lines([\"*XFAIL*unsupported feature*\"])\n        assert result.ret == 0\n\n    @pytest.mark.parametrize(\"strict\", [True, False])\n    def test_strict_xfail(self, pytester: Pytester, strict: bool) -> None:\n        p = pytester.makepyfile(\n            f\"\"\"\n            import pytest\n\n            @pytest.mark.xfail(reason='unsupported feature', strict={strict})\n            def test_foo():\n                with open('foo_executed', 'w', encoding='utf-8'):\n                    pass  # make sure test executes\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rxX\")\n        if strict:\n            result.stdout.fnmatch_lines(\n                [\"*test_foo*\", \"*XPASS(strict)*unsupported feature*\"]\n            )\n        else:\n            result.stdout.fnmatch_lines(\n                [\n                    \"*test_strict_xfail*\",\n                    \"XPASS test_strict_xfail.py::test_foo - unsupported feature\",\n                ]\n            )\n        assert result.ret == (1 if strict else 0)\n        assert pytester.path.joinpath(\"foo_executed\").exists()\n\n    @pytest.mark.parametrize(\"strict\", [True, False])\n    def test_strict_xfail_condition(self, pytester: Pytester, strict: bool) -> None:\n        p = pytester.makepyfile(\n            f\"\"\"\n            import pytest\n\n            @pytest.mark.xfail(False, reason='unsupported feature', strict={strict})\n            def test_foo():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rxX\")\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        assert result.ret == 0\n\n    @pytest.mark.parametrize(\"strict\", [True, False])\n    def test_xfail_condition_keyword(self, pytester: Pytester, strict: bool) -> None:\n        p = pytester.makepyfile(\n            f\"\"\"\n            import pytest\n\n            @pytest.mark.xfail(condition=False, reason='unsupported feature', strict={strict})\n            def test_foo():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rxX\")\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        assert result.ret == 0\n\n    @pytest.mark.parametrize(\"strict_val\", [\"true\", \"false\"])\n    def test_strict_xfail_default_from_file(\n        self, pytester: Pytester, strict_val\n    ) -> None:\n        pytester.makeini(\n            f\"\"\"\n            [pytest]\n            xfail_strict = {strict_val}\n        \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(reason='unsupported feature')\n            def test_foo():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-rxX\")\n        strict = strict_val == \"true\"\n        result.stdout.fnmatch_lines([\"*1 failed*\" if strict else \"*1 xpassed*\"])\n        assert result.ret == (1 if strict else 0)\n\n    def test_xfail_markeval_namespace(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            def pytest_markeval_namespace():\n                return {\"color\": \"green\"}\n            \"\"\"\n        )\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.xfail(\"color == 'green'\")\n            def test_1():\n                assert False\n\n            @pytest.mark.xfail(\"color == 'red'\")\n            def test_2():\n                assert False\n        \"\"\"\n        )\n        res = pytester.runpytest(p)\n        assert res.ret == 1\n        res.stdout.fnmatch_lines([\"*1 failed*\"])\n        res.stdout.fnmatch_lines([\"*1 xfailed*\"])\n\n\nclass TestXFailwithSetupTeardown:\n    def test_failing_setup_issue9(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def setup_function(func):\n                assert 0\n\n            @pytest.mark.xfail\n            def test_func():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 xfail*\"])\n\n    def test_failing_teardown_issue9(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def teardown_function(func):\n                assert 0\n\n            @pytest.mark.xfail\n            def test_func():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 xfail*\"])\n\n\nclass TestSkip:\n    def test_skip_class(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip\n            class TestSomething(object):\n                def test_foo(self):\n                    pass\n                def test_bar(self):\n                    pass\n\n            def test_baz():\n                pass\n        \"\"\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(skipped=2, passed=1)\n\n    def test_skips_on_false_string(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip('False')\n            def test_foo():\n                pass\n        \"\"\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(skipped=1)\n\n    def test_arg_as_reason(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip('testing stuff')\n            def test_bar():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rs\")\n        result.stdout.fnmatch_lines([\"*testing stuff*\", \"*1 skipped*\"])\n\n    def test_skip_no_reason(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip\n            def test_foo():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rs\")\n        result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n\n    def test_skip_with_reason(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason=\"for lolz\")\n            def test_bar():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rs\")\n        result.stdout.fnmatch_lines([\"*for lolz*\", \"*1 skipped*\"])\n\n    def test_only_skips_marked_test(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip\n            def test_foo():\n                pass\n            @pytest.mark.skip(reason=\"nothing in particular\")\n            def test_bar():\n                pass\n            def test_baz():\n                assert True\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rs\")\n        result.stdout.fnmatch_lines([\"*nothing in particular*\", \"*1 passed*2 skipped*\"])\n\n    def test_strict_and_skip(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip\n            def test_hello():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rs\", \"--strict-markers\")\n        result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n\n    def test_wrong_skip_usage(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(False, reason=\"I thought this was skipif\")\n            def test_hello():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*TypeError: *__init__() got multiple values for argument 'reason'\"\n                \" - maybe you meant pytest.mark.skipif?\"\n            ]\n        )\n\n\nclass TestSkipif:\n    def test_skipif_conditional(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(\"hasattr(os, 'sep')\")\n            def test_func():\n                pass\n        \"\"\"\n        )\n        x = pytest.raises(pytest.skip.Exception, lambda: pytest_runtest_setup(item))\n        assert x.value.msg == \"condition: hasattr(os, 'sep')\"\n\n    @pytest.mark.parametrize(\n        \"params\", [\"\\\"hasattr(sys, 'platform')\\\"\", 'True, reason=\"invalid platform\"']\n    )\n    def test_skipif_reporting(self, pytester: Pytester, params) -> None:\n        p = pytester.makepyfile(\n            test_foo=\"\"\"\n            import pytest\n            @pytest.mark.skipif(%(params)s)\n            def test_that():\n                assert 0\n        \"\"\"  # noqa: UP031 (python syntax issues)\n            % dict(params=params)\n        )\n        result = pytester.runpytest(p, \"-s\", \"-rs\")\n        result.stdout.fnmatch_lines([\"*SKIP*1*test_foo.py*platform*\", \"*1 skipped*\"])\n        assert result.ret == 0\n\n    def test_skipif_using_platform(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(\"platform.platform() == platform.platform()\")\n            def test_func():\n                pass\n        \"\"\"\n        )\n        pytest.raises(pytest.skip.Exception, lambda: pytest_runtest_setup(item))\n\n    @pytest.mark.parametrize(\n        \"marker, msg1, msg2\",\n        [(\"skipif\", \"SKIP\", \"skipped\"), (\"xfail\", \"XPASS\", \"xpassed\")],\n    )\n    def test_skipif_reporting_multiple(\n        self, pytester: Pytester, marker, msg1, msg2\n    ) -> None:\n        pytester.makepyfile(\n            test_foo=f\"\"\"\n            import pytest\n            @pytest.mark.{marker}(False, reason='first_condition')\n            @pytest.mark.{marker}(True, reason='second_condition')\n            def test_foobar():\n                assert 1\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\", \"-rsxX\")\n        result.stdout.fnmatch_lines(\n            [f\"*{msg1}*test_foo.py*second_condition*\", f\"*1 {msg2}*\"]\n        )\n        assert result.ret == 0\n\n\ndef test_skip_not_report_default(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        test_one=\"\"\"\n        import pytest\n        def test_this():\n            pytest.skip(\"hello\")\n    \"\"\"\n    )\n    result = pytester.runpytest(p, \"-v\")\n    result.stdout.fnmatch_lines(\n        [\n            # \"*HINT*use*-r*\",\n            \"*1 skipped*\"\n        ]\n    )\n\n\ndef test_skipif_class(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        class TestClass(object):\n            pytestmark = pytest.mark.skipif(\"True\")\n            def test_that(self):\n                assert 0\n            def test_though(self):\n                assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest(p)\n    result.stdout.fnmatch_lines([\"*2 skipped*\"])\n\n\ndef test_skipped_reasons_functional(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_one=\"\"\"\n            import pytest\n            from helpers import doskip\n\n            def setup_function(func):  # LINE 4\n                doskip(\"setup function\")\n\n            def test_func():\n                pass\n\n            class TestClass:\n                def test_method(self):\n                    doskip(\"test method\")\n\n                @pytest.mark.skip(\"via_decorator\")  # LINE 14\n                def test_deco(self):\n                    assert 0\n        \"\"\",\n        helpers=\"\"\"\n            import pytest, sys\n            def doskip(reason):\n                assert sys._getframe().f_lineno == 3\n                pytest.skip(reason)  # LINE 4\n        \"\"\",\n    )\n    result = pytester.runpytest(\"-rs\")\n    result.stdout.fnmatch_lines_random(\n        [\n            \"SKIPPED [[]1[]] test_one.py:7: setup function\",\n            \"SKIPPED [[]1[]] helpers.py:4: test method\",\n            \"SKIPPED [[]1[]] test_one.py:14: via_decorator\",\n        ]\n    )\n    assert result.ret == 0\n\n\ndef test_skipped_folding(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        test_one=\"\"\"\n            import pytest\n            pytestmark = pytest.mark.skip(\"Folding\")\n            def setup_function(func):\n                pass\n            def test_func():\n                pass\n            class TestClass(object):\n                def test_method(self):\n                    pass\n       \"\"\"\n    )\n    result = pytester.runpytest(\"-rs\")\n    result.stdout.fnmatch_lines([\"*SKIP*2*test_one.py: Folding\"])\n    assert result.ret == 0\n\n\ndef test_reportchars(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def test_1():\n            assert 0\n        @pytest.mark.xfail\n        def test_2():\n            assert 0\n        @pytest.mark.xfail\n        def test_3():\n            pass\n        def test_4():\n            pytest.skip(\"four\")\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-rfxXs\")\n    result.stdout.fnmatch_lines(\n        [\"FAIL*test_1*\", \"XFAIL*test_2*\", \"XPASS*test_3*\", \"SKIP*four*\"]\n    )\n\n\ndef test_reportchars_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        conftest=\"\"\"\n        def pytest_runtest_teardown():\n            assert 0\n        \"\"\",\n        test_simple=\"\"\"\n        def test_foo():\n            pass\n        \"\"\",\n    )\n    result = pytester.runpytest(\"-rE\")\n    result.stdout.fnmatch_lines([\"ERROR*test_foo*\"])\n\n\ndef test_reportchars_all(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def test_1():\n            assert 0\n        @pytest.mark.xfail\n        def test_2():\n            assert 0\n        @pytest.mark.xfail\n        def test_3():\n            pass\n        def test_4():\n            pytest.skip(\"four\")\n        @pytest.fixture\n        def fail():\n            assert 0\n        def test_5(fail):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-ra\")\n    result.stdout.fnmatch_lines(\n        [\n            \"SKIP*four*\",\n            \"XFAIL*test_2*\",\n            \"XPASS*test_3*\",\n            \"ERROR*test_5*\",\n            \"FAIL*test_1*\",\n        ]\n    )\n\n\ndef test_reportchars_all_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        conftest=\"\"\"\n        def pytest_runtest_teardown():\n            assert 0\n        \"\"\",\n        test_simple=\"\"\"\n        def test_foo():\n            pass\n        \"\"\",\n    )\n    result = pytester.runpytest(\"-ra\")\n    result.stdout.fnmatch_lines([\"ERROR*test_foo*\"])\n\n\ndef test_errors_in_xfail_skip_expressions(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.skipif(\"asd\")\n        def test_nameerror():\n            pass\n        @pytest.mark.xfail(\"syntax error\")\n        def test_syntax():\n            pass\n\n        def test_func():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    markline = \"            ^\"\n    pypy_version_info = getattr(sys, \"pypy_version_info\", None)\n    if pypy_version_info is not None and pypy_version_info < (6,):\n        markline = markline[1:]\n\n    if sys.version_info >= (3, 10):\n        expected = [\n            \"*ERROR*test_nameerror*\",\n            \"*asd*\",\n            \"\",\n            \"During handling of the above exception, another exception occurred:\",\n        ]\n    else:\n        expected = [\n            \"*ERROR*test_nameerror*\",\n        ]\n\n    expected += [\n        \"*evaluating*skipif*condition*\",\n        \"*asd*\",\n        \"*ERROR*test_syntax*\",\n        \"*evaluating*xfail*condition*\",\n        \"    syntax error\",\n        markline,\n        \"SyntaxError: invalid syntax\",\n        \"*1 pass*2 errors*\",\n    ]\n    result.stdout.fnmatch_lines(expected)\n\n\ndef test_xfail_skipif_with_globals(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        x = 3\n        @pytest.mark.skipif(\"x == 3\")\n        def test_skip1():\n            pass\n        @pytest.mark.xfail(\"x == 3\")\n        def test_boolean():\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-rsx\")\n    result.stdout.fnmatch_lines([\"*SKIP*x == 3*\", \"*XFAIL*test_boolean*x == 3*\"])\n\n\ndef test_default_markers(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--markers\")\n    result.stdout.fnmatch_lines(\n        [\n            \"*skipif(condition, ..., [*], reason=...)*skip*\",\n            \"*xfail(condition, ..., [*], reason=..., run=True, raises=None, strict=xfail_strict)*expected failure*\",\n        ]\n    )\n\n\ndef test_xfail_test_setup_exception(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n            def pytest_runtest_setup():\n                0 / 0\n        \"\"\"\n    )\n    p = pytester.makepyfile(\n        \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_func():\n                assert 0\n        \"\"\"\n    )\n    result = pytester.runpytest(p)\n    assert result.ret == 0\n    assert \"xfailed\" in result.stdout.str()\n    result.stdout.no_fnmatch_line(\"*xpassed*\")\n\n\ndef test_imperativeskip_on_xfail_test(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.xfail\n        def test_that_fails():\n            assert 0\n\n        @pytest.mark.skipif(\"True\")\n        def test_hello():\n            pass\n    \"\"\"\n    )\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        def pytest_runtest_setup(item):\n            pytest.skip(\"abc\")\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-rsxX\")\n    result.stdout.fnmatch_lines_random(\n        \"\"\"\n        *SKIP*abc*\n        *SKIP*condition: True*\n        *2 skipped*\n    \"\"\"\n    )\n\n\nclass TestBooleanCondition:\n    def test_skipif(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(True, reason=\"True123\")\n            def test_func1():\n                pass\n            @pytest.mark.skipif(False, reason=\"True123\")\n            def test_func2():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *1 passed*1 skipped*\n        \"\"\"\n        )\n\n    def test_skipif_noreason(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skipif(True)\n            def test_func():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rs\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *1 error*\n        \"\"\"\n        )\n\n    def test_xfail(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(True, reason=\"True123\")\n            def test_func():\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-rxs\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *XFAIL*True123*\n            *1 xfail*\n        \"\"\"\n        )\n\n\ndef test_xfail_item(pytester: Pytester) -> None:\n    # Ensure pytest.xfail works with non-Python Item\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n\n        class MyItem(pytest.Item):\n            nodeid = 'foo'\n            def runtest(self):\n                pytest.xfail(\"Expected Failure\")\n\n        def pytest_collect_file(file_path, parent):\n            return MyItem.from_parent(name=\"foo\", parent=parent)\n    \"\"\"\n    )\n    result = pytester.inline_run()\n    passed, skipped, failed = result.listoutcomes()\n    assert not failed\n    xfailed = [r for r in skipped if hasattr(r, \"wasxfail\")]\n    assert xfailed\n\n\ndef test_module_level_skip_error(pytester: Pytester) -> None:\n    \"\"\"Verify that using pytest.skip at module level causes a collection error.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        pytest.skip(\"skip_module_level\")\n\n        def test_func():\n            assert True\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\"*Using pytest.skip outside of a test will skip the entire module*\"]\n    )\n\n\ndef test_module_level_skip_with_allow_module_level(pytester: Pytester) -> None:\n    \"\"\"Verify that using pytest.skip(allow_module_level=True) is allowed.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        pytest.skip(\"skip_module_level\", allow_module_level=True)\n\n        def test_func():\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-rxs\")\n    result.stdout.fnmatch_lines([\"*SKIP*skip_module_level\"])\n\n\ndef test_invalid_skip_keyword_parameter(pytester: Pytester) -> None:\n    \"\"\"Verify that using pytest.skip() with unknown parameter raises an error.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        pytest.skip(\"skip_module_level\", unknown=1)\n\n        def test_func():\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*TypeError:*['unknown']*\"])\n\n\ndef test_mark_xfail_item(pytester: Pytester) -> None:\n    # Ensure pytest.mark.xfail works with non-Python Item\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n\n        class MyItem(pytest.Item):\n            nodeid = 'foo'\n            def setup(self):\n                marker = pytest.mark.xfail(\"1 == 2\", reason=\"Expected failure - false\")\n                self.add_marker(marker)\n                marker = pytest.mark.xfail(True, reason=\"Expected failure - true\")\n                self.add_marker(marker)\n            def runtest(self):\n                assert False\n\n        def pytest_collect_file(file_path, parent):\n            return MyItem.from_parent(name=\"foo\", parent=parent)\n    \"\"\"\n    )\n    result = pytester.inline_run()\n    passed, skipped, failed = result.listoutcomes()\n    assert not failed\n    xfailed = [r for r in skipped if hasattr(r, \"wasxfail\")]\n    assert xfailed\n\n\ndef test_summary_list_after_errors(pytester: Pytester) -> None:\n    \"\"\"Ensure the list of errors/fails/xfails/skips appears after tracebacks in terminal reporting.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def test_fail():\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-ra\")\n    result.stdout.fnmatch_lines(\n        [\n            \"=* FAILURES *=\",\n            \"*= short test summary info =*\",\n            \"FAILED test_summary_list_after_errors.py::test_fail - assert 0\",\n        ]\n    )\n\n\ndef test_importorskip() -> None:\n    with pytest.raises(\n        pytest.skip.Exception,\n        match=\"^could not import 'doesnotexist': No module named .*\",\n    ):\n        pytest.importorskip(\"doesnotexist\")\n\n\ndef test_relpath_rootdir(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        **{\n            \"tests/test_1.py\": \"\"\"\n        import pytest\n        @pytest.mark.skip()\n        def test_pass():\n            pass\n            \"\"\",\n        }\n    )\n    result = pytester.runpytest(\"-rs\", \"tests/test_1.py\", \"--rootdir=tests\")\n    result.stdout.fnmatch_lines(\n        [\"SKIPPED [[]1[]] tests/test_1.py:2: unconditional skip\"]\n    )\n\n\ndef test_skip_from_fixture(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        **{\n            \"tests/test_1.py\": \"\"\"\n        import pytest\n        def test_pass(arg):\n            pass\n        @pytest.fixture\n        def arg():\n            condition = True\n            if condition:\n                pytest.skip(\"Fixture conditional skip\")\n            \"\"\",\n        }\n    )\n    result = pytester.runpytest(\"-rs\", \"tests/test_1.py\", \"--rootdir=tests\")\n    result.stdout.fnmatch_lines(\n        [\"SKIPPED [[]1[]] tests/test_1.py:2: Fixture conditional skip\"]\n    )\n\n\ndef test_skip_using_reason_works_ok(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        def test_skipping_reason():\n            pytest.skip(reason=\"skippedreason\")\n        \"\"\"\n    )\n    result = pytester.runpytest(p)\n    result.stdout.no_fnmatch_line(\"*PytestDeprecationWarning*\")\n    result.assert_outcomes(skipped=1)\n\n\ndef test_fail_using_reason_works_ok(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        def test_failing_reason():\n            pytest.fail(reason=\"failedreason\")\n        \"\"\"\n    )\n    result = pytester.runpytest(p)\n    result.stdout.no_fnmatch_line(\"*PytestDeprecationWarning*\")\n    result.assert_outcomes(failed=1)\n\n\ndef test_exit_with_reason_works_ok(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        def test_exit_reason_only():\n            pytest.exit(reason=\"foo\")\n        \"\"\"\n    )\n    result = pytester.runpytest(p)\n    result.stdout.fnmatch_lines(\"*_pytest.outcomes.Exit: foo*\")\n", "testing/test_junitxml.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\nimport platform\nfrom typing import cast\nfrom typing import TYPE_CHECKING\nfrom xml.dom import minidom\n\nimport xmlschema\n\nfrom _pytest.config import Config\nfrom _pytest.junitxml import bin_xml_escape\nfrom _pytest.junitxml import LogXML\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import RunResult\nfrom _pytest.reports import BaseReport\nfrom _pytest.reports import TestReport\nfrom _pytest.stash import Stash\nimport pytest\n\n\n@pytest.fixture(scope=\"session\")\ndef schema() -> xmlschema.XMLSchema:\n    \"\"\"Return an xmlschema.XMLSchema object for the junit-10.xsd file.\"\"\"\n    fn = Path(__file__).parent / \"example_scripts/junit-10.xsd\"\n    with fn.open(encoding=\"utf-8\") as f:\n        return xmlschema.XMLSchema(f)\n\n\nclass RunAndParse:\n    def __init__(self, pytester: Pytester, schema: xmlschema.XMLSchema) -> None:\n        self.pytester = pytester\n        self.schema = schema\n\n    def __call__(\n        self, *args: str | os.PathLike[str], family: str | None = \"xunit1\"\n    ) -> tuple[RunResult, DomNode]:\n        if family:\n            args = (\"-o\", \"junit_family=\" + family, *args)\n        xml_path = self.pytester.path.joinpath(\"junit.xml\")\n        result = self.pytester.runpytest(f\"--junitxml={xml_path}\", *args)\n        if family == \"xunit2\":\n            with xml_path.open(encoding=\"utf-8\") as f:\n                self.schema.validate(f)\n        xmldoc = minidom.parse(str(xml_path))\n        return result, DomNode(xmldoc)\n\n\n@pytest.fixture\ndef run_and_parse(pytester: Pytester, schema: xmlschema.XMLSchema) -> RunAndParse:\n    \"\"\"Fixture that returns a function that can be used to execute pytest and\n    return the parsed ``DomNode`` of the root xml node.\n\n    The ``family`` parameter is used to configure the ``junit_family`` of the written report.\n    \"xunit2\" is also automatically validated against the schema.\n    \"\"\"\n    return RunAndParse(pytester, schema)\n\n\ndef assert_attr(node, **kwargs):\n    __tracebackhide__ = True\n\n    def nodeval(node, name):\n        anode = node.getAttributeNode(name)\n        if anode is not None:\n            return anode.value\n\n    expected = {name: str(value) for name, value in kwargs.items()}\n    on_node = {name: nodeval(node, name) for name in expected}\n    assert on_node == expected\n\n\nclass DomNode:\n    def __init__(self, dom):\n        self.__node = dom\n\n    def __repr__(self):\n        return self.__node.toxml()\n\n    def find_first_by_tag(self, tag):\n        return self.find_nth_by_tag(tag, 0)\n\n    def _by_tag(self, tag):\n        return self.__node.getElementsByTagName(tag)\n\n    @property\n    def children(self):\n        return [type(self)(x) for x in self.__node.childNodes]\n\n    @property\n    def get_unique_child(self):\n        children = self.children\n        assert len(children) == 1\n        return children[0]\n\n    def find_nth_by_tag(self, tag, n):\n        items = self._by_tag(tag)\n        try:\n            nth = items[n]\n        except IndexError:\n            pass\n        else:\n            return type(self)(nth)\n\n    def find_by_tag(self, tag):\n        t = type(self)\n        return [t(x) for x in self.__node.getElementsByTagName(tag)]\n\n    def __getitem__(self, key):\n        node = self.__node.getAttributeNode(key)\n        if node is not None:\n            return node.value\n\n    def assert_attr(self, **kwargs):\n        __tracebackhide__ = True\n        return assert_attr(self.__node, **kwargs)\n\n    def toxml(self):\n        return self.__node.toxml()\n\n    @property\n    def text(self):\n        return self.__node.childNodes[0].wholeText\n\n    @property\n    def tag(self):\n        return self.__node.tagName\n\n    @property\n    def next_sibling(self):\n        return type(self)(self.__node.nextSibling)\n\n\nparametrize_families = pytest.mark.parametrize(\"xunit_family\", [\"xunit1\", \"xunit2\"])\n\n\nclass TestPython:\n    @parametrize_families\n    def test_summing_simple(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_pass():\n                pass\n            def test_fail():\n                assert 0\n            def test_skip():\n                pytest.skip(\"\")\n            @pytest.mark.xfail\n            def test_xfail():\n                assert 0\n            @pytest.mark.xfail\n            def test_xpass():\n                assert 1\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(name=\"pytest\", errors=0, failures=1, skipped=2, tests=5)\n\n    @parametrize_families\n    def test_summing_simple_with_errors(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def fixture():\n                raise Exception()\n            def test_pass():\n                pass\n            def test_fail():\n                assert 0\n            def test_error(fixture):\n                pass\n            @pytest.mark.xfail\n            def test_xfail():\n                assert False\n            @pytest.mark.xfail(strict=True)\n            def test_xpass():\n                assert True\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n\n    @parametrize_families\n    def test_hostname_in_xml(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_pass():\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(hostname=platform.node())\n\n    @parametrize_families\n    def test_timestamp_in_xml(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_pass():\n                pass\n        \"\"\"\n        )\n        start_time = datetime.now()\n        result, dom = run_and_parse(family=xunit_family)\n        node = dom.find_first_by_tag(\"testsuite\")\n        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n        assert start_time <= timestamp < datetime.now()\n\n    def test_timing_function(\n        self, pytester: Pytester, run_and_parse: RunAndParse, mock_timing\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            from _pytest import timing\n            def setup_module():\n                timing.sleep(1)\n            def teardown_module():\n                timing.sleep(2)\n            def test_sleep():\n                timing.sleep(4)\n        \"\"\"\n        )\n        result, dom = run_and_parse()\n        node = dom.find_first_by_tag(\"testsuite\")\n        tnode = node.find_first_by_tag(\"testcase\")\n        val = tnode[\"time\"]\n        assert float(val) == 7.0\n\n    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n    def test_junit_duration_report(\n        self,\n        pytester: Pytester,\n        monkeypatch: MonkeyPatch,\n        duration_report: str,\n        run_and_parse: RunAndParse,\n    ) -> None:\n        # mock LogXML.node_reporter so it always sets a known duration to each test report object\n        original_node_reporter = LogXML.node_reporter\n\n        def node_reporter_wrapper(s, report):\n            report.duration = 1.0\n            reporter = original_node_reporter(s, report)\n            return reporter\n\n        monkeypatch.setattr(LogXML, \"node_reporter\", node_reporter_wrapper)\n\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"-o\", f\"junit_duration_report={duration_report}\")\n        node = dom.find_first_by_tag(\"testsuite\")\n        tnode = node.find_first_by_tag(\"testcase\")\n        val = float(tnode[\"time\"])\n        if duration_report == \"total\":\n            assert val == 3.0\n        else:\n            assert duration_report == \"call\"\n            assert val == 1.0\n\n    @parametrize_families\n    def test_setup_error(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def arg(request):\n                raise ValueError(\"Error reason\")\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(errors=1, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_setup_error\", name=\"test_function\")\n        fnode = tnode.find_first_by_tag(\"error\")\n        fnode.assert_attr(message='failed on setup with \"ValueError: Error reason\"')\n        assert \"ValueError\" in fnode.toxml()\n\n    @parametrize_families\n    def test_teardown_error(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def arg():\n                yield\n                raise ValueError('Error reason')\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_teardown_error\", name=\"test_function\")\n        fnode = tnode.find_first_by_tag(\"error\")\n        fnode.assert_attr(message='failed on teardown with \"ValueError: Error reason\"')\n        assert \"ValueError\" in fnode.toxml()\n\n    @parametrize_families\n    def test_call_failure_teardown_error(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def arg():\n                yield\n                raise Exception(\"Teardown Exception\")\n            def test_function(arg):\n                raise Exception(\"Call Exception\")\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(errors=1, failures=1, tests=1)\n        first, second = dom.find_by_tag(\"testcase\")\n        assert first\n        assert second\n        assert first != second\n        fnode = first.find_first_by_tag(\"failure\")\n        fnode.assert_attr(message=\"Exception: Call Exception\")\n        snode = second.find_first_by_tag(\"error\")\n        snode.assert_attr(\n            message='failed on teardown with \"Exception: Teardown Exception\"'\n        )\n\n    @parametrize_families\n    def test_skip_contains_name_reason(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_skip():\n                pytest.skip(\"hello23\")\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret == 0\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(skipped=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_skip_contains_name_reason\", name=\"test_skip\")\n        snode = tnode.find_first_by_tag(\"skipped\")\n        snode.assert_attr(type=\"pytest.skip\", message=\"hello23\")\n\n    @parametrize_families\n    def test_mark_skip_contains_name_reason(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason=\"hello24\")\n            def test_skip():\n                assert True\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret == 0\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(skipped=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(\n            classname=\"test_mark_skip_contains_name_reason\", name=\"test_skip\"\n        )\n        snode = tnode.find_first_by_tag(\"skipped\")\n        snode.assert_attr(type=\"pytest.skip\", message=\"hello24\")\n\n    @parametrize_families\n    def test_mark_skipif_contains_name_reason(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            GLOBAL_CONDITION = True\n            @pytest.mark.skipif(GLOBAL_CONDITION, reason=\"hello25\")\n            def test_skip():\n                assert True\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret == 0\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(skipped=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(\n            classname=\"test_mark_skipif_contains_name_reason\", name=\"test_skip\"\n        )\n        snode = tnode.find_first_by_tag(\"skipped\")\n        snode.assert_attr(type=\"pytest.skip\", message=\"hello25\")\n\n    @parametrize_families\n    def test_mark_skip_doesnt_capture_output(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason=\"foo\")\n            def test_skip():\n                print(\"bar!\")\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret == 0\n        node_xml = dom.find_first_by_tag(\"testsuite\").toxml()\n        assert \"bar!\" not in node_xml\n\n    @parametrize_families\n    def test_classname_instance(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def test_method(self):\n                    assert 0\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(failures=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(\n            classname=\"test_classname_instance.TestClass\", name=\"test_method\"\n        )\n\n    @parametrize_families\n    def test_classname_nested_dir(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        p = pytester.mkdir(\"sub\").joinpath(\"test_hello.py\")\n        p.write_text(\"def test_func(): 0/0\", encoding=\"utf-8\")\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(failures=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"sub.test_hello\", name=\"test_func\")\n\n    @parametrize_families\n    def test_internal_error(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makeconftest(\"def pytest_runtest_protocol(): 0 / 0\")\n        pytester.makepyfile(\"def test_function(): pass\")\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(errors=1, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"pytest\", name=\"internal\")\n        fnode = tnode.find_first_by_tag(\"error\")\n        fnode.assert_attr(message=\"internal error\")\n        assert \"Division\" in fnode.toxml()\n\n    @pytest.mark.parametrize(\n        \"junit_logging\", [\"no\", \"log\", \"system-out\", \"system-err\", \"out-err\", \"all\"]\n    )\n    @parametrize_families\n    def test_failure_function(\n        self,\n        pytester: Pytester,\n        junit_logging,\n        run_and_parse: RunAndParse,\n        xunit_family,\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n\n            def test_fail():\n                print(\"hello-stdout\")\n                sys.stderr.write(\"hello-stderr\\\\n\")\n                logging.info('info msg')\n                logging.warning('warning msg')\n                raise ValueError(42)\n        \"\"\"\n        )\n\n        result, dom = run_and_parse(\n            \"-o\", f\"junit_logging={junit_logging}\", family=xunit_family\n        )\n        assert result.ret, \"Expected ret > 0\"\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(failures=1, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_failure_function\", name=\"test_fail\")\n        fnode = tnode.find_first_by_tag(\"failure\")\n        fnode.assert_attr(message=\"ValueError: 42\")\n        assert \"ValueError\" in fnode.toxml(), \"ValueError not included\"\n\n        if junit_logging in [\"log\", \"all\"]:\n            logdata = tnode.find_first_by_tag(\"system-out\")\n            log_xml = logdata.toxml()\n            assert logdata.tag == \"system-out\", \"Expected tag: system-out\"\n            assert \"info msg\" not in log_xml, \"Unexpected INFO message\"\n            assert \"warning msg\" in log_xml, \"Missing WARN message\"\n        if junit_logging in [\"system-out\", \"out-err\", \"all\"]:\n            systemout = tnode.find_first_by_tag(\"system-out\")\n            systemout_xml = systemout.toxml()\n            assert systemout.tag == \"system-out\", \"Expected tag: system-out\"\n            assert \"info msg\" not in systemout_xml, \"INFO message found in system-out\"\n            assert (\n                \"hello-stdout\" in systemout_xml\n            ), \"Missing 'hello-stdout' in system-out\"\n        if junit_logging in [\"system-err\", \"out-err\", \"all\"]:\n            systemerr = tnode.find_first_by_tag(\"system-err\")\n            systemerr_xml = systemerr.toxml()\n            assert systemerr.tag == \"system-err\", \"Expected tag: system-err\"\n            assert \"info msg\" not in systemerr_xml, \"INFO message found in system-err\"\n            assert (\n                \"hello-stderr\" in systemerr_xml\n            ), \"Missing 'hello-stderr' in system-err\"\n            assert (\n                \"warning msg\" not in systemerr_xml\n            ), \"WARN message found in system-err\"\n        if junit_logging == \"no\":\n            assert not tnode.find_by_tag(\"log\"), \"Found unexpected content: log\"\n            assert not tnode.find_by_tag(\n                \"system-out\"\n            ), \"Found unexpected content: system-out\"\n            assert not tnode.find_by_tag(\n                \"system-err\"\n            ), \"Found unexpected content: system-err\"\n\n    @parametrize_families\n    def test_failure_verbose_message(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            def test_fail():\n                assert 0, \"An error\"\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        node = dom.find_first_by_tag(\"testsuite\")\n        tnode = node.find_first_by_tag(\"testcase\")\n        fnode = tnode.find_first_by_tag(\"failure\")\n        fnode.assert_attr(message=\"AssertionError: An error\\nassert 0\")\n\n    @parametrize_families\n    def test_failure_escape(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n            def test_func(arg1):\n                print(arg1)\n                assert 0\n        \"\"\"\n        )\n        result, dom = run_and_parse(\n            \"-o\", \"junit_logging=system-out\", family=xunit_family\n        )\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(failures=3, tests=3)\n\n        for index, char in enumerate(\"<&'\"):\n            tnode = node.find_nth_by_tag(\"testcase\", index)\n            tnode.assert_attr(\n                classname=\"test_failure_escape\", name=f\"test_func[{char}]\"\n            )\n            sysout = tnode.find_first_by_tag(\"system-out\")\n            text = sysout.text\n            assert f\"{char}\\n\" in text\n\n    @parametrize_families\n    def test_junit_prefixing(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_func():\n                assert 0\n            class TestHello(object):\n                def test_hello(self):\n                    pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"--junitprefix=xyz\", family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(failures=1, tests=2)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"xyz.test_junit_prefixing\", name=\"test_func\")\n        tnode = node.find_nth_by_tag(\"testcase\", 1)\n        tnode.assert_attr(\n            classname=\"xyz.test_junit_prefixing.TestHello\", name=\"test_hello\"\n        )\n\n    @parametrize_families\n    def test_xfailure_function(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_xfail():\n                pytest.xfail(\"42\")\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert not result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(skipped=1, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_xfailure_function\", name=\"test_xfail\")\n        fnode = tnode.find_first_by_tag(\"skipped\")\n        fnode.assert_attr(type=\"pytest.xfail\", message=\"42\")\n\n    @parametrize_families\n    def test_xfailure_marker(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(reason=\"42\")\n            def test_xfail():\n                assert False\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        assert not result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(skipped=1, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_xfailure_marker\", name=\"test_xfail\")\n        fnode = tnode.find_first_by_tag(\"skipped\")\n        fnode.assert_attr(type=\"pytest.xfail\", message=\"42\")\n\n    @pytest.mark.parametrize(\n        \"junit_logging\", [\"no\", \"log\", \"system-out\", \"system-err\", \"out-err\", \"all\"]\n    )\n    def test_xfail_captures_output_once(\n        self, pytester: Pytester, junit_logging: str, run_and_parse: RunAndParse\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n\n            @pytest.mark.xfail()\n            def test_fail():\n                sys.stdout.write('XFAIL This is stdout')\n                sys.stderr.write('XFAIL This is stderr')\n                assert 0\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"-o\", f\"junit_logging={junit_logging}\")\n        node = dom.find_first_by_tag(\"testsuite\")\n        tnode = node.find_first_by_tag(\"testcase\")\n        if junit_logging in [\"system-err\", \"out-err\", \"all\"]:\n            assert len(tnode.find_by_tag(\"system-err\")) == 1\n        else:\n            assert len(tnode.find_by_tag(\"system-err\")) == 0\n\n        if junit_logging in [\"log\", \"system-out\", \"out-err\", \"all\"]:\n            assert len(tnode.find_by_tag(\"system-out\")) == 1\n        else:\n            assert len(tnode.find_by_tag(\"system-out\")) == 0\n\n    @parametrize_families\n    def test_xfailure_xpass(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_xpass():\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        # assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(skipped=0, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_xfailure_xpass\", name=\"test_xpass\")\n\n    @parametrize_families\n    def test_xfailure_xpass_strict(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(strict=True, reason=\"This needs to fail!\")\n            def test_xpass():\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(family=xunit_family)\n        # assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(skipped=0, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(classname=\"test_xfailure_xpass_strict\", name=\"test_xpass\")\n        fnode = tnode.find_first_by_tag(\"failure\")\n        fnode.assert_attr(message=\"[XPASS(strict)] This needs to fail!\")\n\n    @parametrize_families\n    def test_collect_error(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makepyfile(\"syntax error\")\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(errors=1, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        fnode = tnode.find_first_by_tag(\"error\")\n        fnode.assert_attr(message=\"collection failure\")\n        assert \"SyntaxError\" in fnode.toxml()\n\n    def test_unicode(self, pytester: Pytester, run_and_parse: RunAndParse) -> None:\n        value = \"hx\\xc4\\x85\\xc4\\x87\\n\"\n        pytester.makepyfile(\n            f\"\"\"\\\n            # coding: latin1\n            def test_hello():\n                print({value!r})\n                assert 0\n            \"\"\"\n        )\n        result, dom = run_and_parse()\n        assert result.ret == 1\n        tnode = dom.find_first_by_tag(\"testcase\")\n        fnode = tnode.find_first_by_tag(\"failure\")\n        assert \"hx\" in fnode.toxml()\n\n    def test_assertion_binchars(\n        self, pytester: Pytester, run_and_parse: RunAndParse\n    ) -> None:\n        \"\"\"This test did fail when the escaping wasn't strict.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n\n            M1 = '\\x01\\x02\\x03\\x04'\n            M2 = '\\x01\\x02\\x03\\x05'\n\n            def test_str_compare():\n                assert M1 == M2\n            \"\"\"\n        )\n        result, dom = run_and_parse()\n        print(dom.toxml())\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\"])\n    def test_pass_captures_stdout(\n        self, pytester: Pytester, run_and_parse: RunAndParse, junit_logging: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_pass():\n                print('hello-stdout')\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"-o\", f\"junit_logging={junit_logging}\")\n        node = dom.find_first_by_tag(\"testsuite\")\n        pnode = node.find_first_by_tag(\"testcase\")\n        if junit_logging == \"no\":\n            assert not node.find_by_tag(\n                \"system-out\"\n            ), \"system-out should not be generated\"\n        if junit_logging == \"system-out\":\n            systemout = pnode.find_first_by_tag(\"system-out\")\n            assert (\n                \"hello-stdout\" in systemout.toxml()\n            ), \"'hello-stdout' should be in system-out\"\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-err\"])\n    def test_pass_captures_stderr(\n        self, pytester: Pytester, run_and_parse: RunAndParse, junit_logging: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            def test_pass():\n                sys.stderr.write('hello-stderr')\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"-o\", f\"junit_logging={junit_logging}\")\n        node = dom.find_first_by_tag(\"testsuite\")\n        pnode = node.find_first_by_tag(\"testcase\")\n        if junit_logging == \"no\":\n            assert not node.find_by_tag(\n                \"system-err\"\n            ), \"system-err should not be generated\"\n        if junit_logging == \"system-err\":\n            systemerr = pnode.find_first_by_tag(\"system-err\")\n            assert (\n                \"hello-stderr\" in systemerr.toxml()\n            ), \"'hello-stderr' should be in system-err\"\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\"])\n    def test_setup_error_captures_stdout(\n        self, pytester: Pytester, run_and_parse: RunAndParse, junit_logging: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def arg(request):\n                print('hello-stdout')\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"-o\", f\"junit_logging={junit_logging}\")\n        node = dom.find_first_by_tag(\"testsuite\")\n        pnode = node.find_first_by_tag(\"testcase\")\n        if junit_logging == \"no\":\n            assert not node.find_by_tag(\n                \"system-out\"\n            ), \"system-out should not be generated\"\n        if junit_logging == \"system-out\":\n            systemout = pnode.find_first_by_tag(\"system-out\")\n            assert (\n                \"hello-stdout\" in systemout.toxml()\n            ), \"'hello-stdout' should be in system-out\"\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-err\"])\n    def test_setup_error_captures_stderr(\n        self, pytester: Pytester, run_and_parse: RunAndParse, junit_logging: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n\n            @pytest.fixture\n            def arg(request):\n                sys.stderr.write('hello-stderr')\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"-o\", f\"junit_logging={junit_logging}\")\n        node = dom.find_first_by_tag(\"testsuite\")\n        pnode = node.find_first_by_tag(\"testcase\")\n        if junit_logging == \"no\":\n            assert not node.find_by_tag(\n                \"system-err\"\n            ), \"system-err should not be generated\"\n        if junit_logging == \"system-err\":\n            systemerr = pnode.find_first_by_tag(\"system-err\")\n            assert (\n                \"hello-stderr\" in systemerr.toxml()\n            ), \"'hello-stderr' should be in system-err\"\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\"])\n    def test_avoid_double_stdout(\n        self, pytester: Pytester, run_and_parse: RunAndParse, junit_logging: str\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n\n            @pytest.fixture\n            def arg(request):\n                yield\n                sys.stdout.write('hello-stdout teardown')\n                raise ValueError()\n            def test_function(arg):\n                sys.stdout.write('hello-stdout call')\n        \"\"\"\n        )\n        result, dom = run_and_parse(\"-o\", f\"junit_logging={junit_logging}\")\n        node = dom.find_first_by_tag(\"testsuite\")\n        pnode = node.find_first_by_tag(\"testcase\")\n        if junit_logging == \"no\":\n            assert not node.find_by_tag(\n                \"system-out\"\n            ), \"system-out should not be generated\"\n        if junit_logging == \"system-out\":\n            systemout = pnode.find_first_by_tag(\"system-out\")\n            assert \"hello-stdout call\" in systemout.toxml()\n            assert \"hello-stdout teardown\" in systemout.toxml()\n\n\ndef test_mangle_test_address() -> None:\n    from _pytest.junitxml import mangle_test_address\n\n    address = \"::\".join([\"a/my.py.thing.py\", \"Class\", \"method\", \"[a-1-::]\"])\n    newnames = mangle_test_address(address)\n    assert newnames == [\"a.my.py.thing\", \"Class\", \"method\", \"[a-1-::]\"]\n\n\ndef test_dont_configure_on_workers(tmp_path: Path) -> None:\n    gotten: list[object] = []\n\n    class FakeConfig:\n        if TYPE_CHECKING:\n            workerinput = None\n\n        def __init__(self):\n            self.pluginmanager = self\n            self.option = self\n            self.stash = Stash()\n\n        def getini(self, name):\n            return \"pytest\"\n\n        junitprefix = None\n        # XXX: shouldn't need tmp_path ?\n        xmlpath = str(tmp_path.joinpath(\"junix.xml\"))\n        register = gotten.append\n\n    fake_config = cast(Config, FakeConfig())\n    from _pytest import junitxml\n\n    junitxml.pytest_configure(fake_config)\n    assert len(gotten) == 1\n    FakeConfig.workerinput = None\n    junitxml.pytest_configure(fake_config)\n    assert len(gotten) == 1\n\n\nclass TestNonPython:\n    @parametrize_families\n    def test_summing_simple(\n        self, pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n    ) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_collect_file(file_path, parent):\n                if file_path.suffix == \".xyz\":\n                    return MyItem.from_parent(name=file_path.name, parent=parent)\n            class MyItem(pytest.Item):\n                def runtest(self):\n                    raise ValueError(42)\n                def repr_failure(self, excinfo):\n                    return \"custom item runtest failed\"\n        \"\"\"\n        )\n        pytester.path.joinpath(\"myfile.xyz\").write_text(\"hello\", encoding=\"utf-8\")\n        result, dom = run_and_parse(family=xunit_family)\n        assert result.ret\n        node = dom.find_first_by_tag(\"testsuite\")\n        node.assert_attr(errors=0, failures=1, skipped=0, tests=1)\n        tnode = node.find_first_by_tag(\"testcase\")\n        tnode.assert_attr(name=\"myfile.xyz\")\n        fnode = tnode.find_first_by_tag(\"failure\")\n        fnode.assert_attr(message=\"custom item runtest failed\")\n        assert \"custom item runtest failed\" in fnode.toxml()\n\n\n@pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\"])\ndef test_nullbyte(pytester: Pytester, junit_logging: str) -> None:\n    # A null byte cannot occur in XML (see section 2.2 of the spec)\n    pytester.makepyfile(\n        \"\"\"\n        import sys\n        def test_print_nullbyte():\n            sys.stdout.write('Here the null -->' + chr(0) + '<--')\n            sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n            assert False\n    \"\"\"\n    )\n    xmlf = pytester.path.joinpath(\"junit.xml\")\n    pytester.runpytest(f\"--junitxml={xmlf}\", \"-o\", f\"junit_logging={junit_logging}\")\n    text = xmlf.read_text(encoding=\"utf-8\")\n    assert \"\\x00\" not in text\n    if junit_logging == \"system-out\":\n        assert \"#x00\" in text\n    if junit_logging == \"no\":\n        assert \"#x00\" not in text\n\n\n@pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\"])\ndef test_nullbyte_replace(pytester: Pytester, junit_logging: str) -> None:\n    # Check if the null byte gets replaced\n    pytester.makepyfile(\n        \"\"\"\n        import sys\n        def test_print_nullbyte():\n            sys.stdout.write('Here the null -->' + chr(0) + '<--')\n            sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n            assert False\n    \"\"\"\n    )\n    xmlf = pytester.path.joinpath(\"junit.xml\")\n    pytester.runpytest(f\"--junitxml={xmlf}\", \"-o\", f\"junit_logging={junit_logging}\")\n    text = xmlf.read_text(encoding=\"utf-8\")\n    if junit_logging == \"system-out\":\n        assert \"#x0\" in text\n    if junit_logging == \"no\":\n        assert \"#x0\" not in text\n\n\ndef test_invalid_xml_escape() -> None:\n    # Test some more invalid xml chars, the full range should be\n    # tested really but let's just test the edges of the ranges\n    # instead.\n    # XXX This only tests low unicode character points for now as\n    #     there are some issues with the testing infrastructure for\n    #     the higher ones.\n    # XXX Testing 0xD (\\r) is tricky as it overwrites the just written\n    #     line in the output, so we skip it too.\n    invalid = (\n        0x00,\n        0x1,\n        0xB,\n        0xC,\n        0xE,\n        0x19,\n        27,  # issue #126\n        0xD800,\n        0xDFFF,\n        0xFFFE,\n        0x0FFFF,\n    )  # , 0x110000)\n    valid = (0x9, 0xA, 0x20)\n    # 0xD, 0xD7FF, 0xE000, 0xFFFD, 0x10000, 0x10FFFF)\n\n    for i in invalid:\n        got = bin_xml_escape(chr(i))\n        if i <= 0xFF:\n            expected = f\"#x{i:02X}\"\n        else:\n            expected = f\"#x{i:04X}\"\n        assert got == expected\n    for i in valid:\n        assert chr(i) == bin_xml_escape(chr(i))\n\n\ndef test_logxml_path_expansion(tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    home_tilde = Path(os.path.expanduser(\"~\")).joinpath(\"test.xml\")\n    xml_tilde = LogXML(Path(\"~\", \"test.xml\"), None)\n    assert xml_tilde.logfile == str(home_tilde)\n\n    monkeypatch.setenv(\"HOME\", str(tmp_path))\n    home_var = os.path.normpath(os.path.expandvars(\"$HOME/test.xml\"))\n    xml_var = LogXML(Path(\"$HOME\", \"test.xml\"), None)\n    assert xml_var.logfile == str(home_var)\n\n\ndef test_logxml_changingdir(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_func():\n            import os\n            os.chdir(\"a\")\n    \"\"\"\n    )\n    pytester.mkdir(\"a\")\n    result = pytester.runpytest(\"--junitxml=a/x.xml\")\n    assert result.ret == 0\n    assert pytester.path.joinpath(\"a/x.xml\").exists()\n\n\ndef test_logxml_makedir(pytester: Pytester) -> None:\n    \"\"\"--junitxml should automatically create directories for the xml file\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        def test_pass():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--junitxml=path/to/results.xml\")\n    assert result.ret == 0\n    assert pytester.path.joinpath(\"path/to/results.xml\").exists()\n\n\ndef test_logxml_check_isdir(pytester: Pytester) -> None:\n    \"\"\"Give an error if --junit-xml is a directory (#2089)\"\"\"\n    result = pytester.runpytest(\"--junit-xml=.\")\n    result.stderr.fnmatch_lines([\"*--junitxml must be a filename*\"])\n\n\ndef test_escaped_parametrized_names_xml(\n    pytester: Pytester, run_and_parse: RunAndParse\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\\\n        import pytest\n        @pytest.mark.parametrize('char', [\"\\\\x00\"])\n        def test_func(char):\n            assert char\n        \"\"\"\n    )\n    result, dom = run_and_parse()\n    assert result.ret == 0\n    node = dom.find_first_by_tag(\"testcase\")\n    node.assert_attr(name=\"test_func[\\\\x00]\")\n\n\ndef test_double_colon_split_function_issue469(\n    pytester: Pytester, run_and_parse: RunAndParse\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.parametrize('param', [\"double::colon\"])\n        def test_func(param):\n            pass\n    \"\"\"\n    )\n    result, dom = run_and_parse()\n    assert result.ret == 0\n    node = dom.find_first_by_tag(\"testcase\")\n    node.assert_attr(classname=\"test_double_colon_split_function_issue469\")\n    node.assert_attr(name=\"test_func[double::colon]\")\n\n\ndef test_double_colon_split_method_issue469(\n    pytester: Pytester, run_and_parse: RunAndParse\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        class TestClass(object):\n            @pytest.mark.parametrize('param', [\"double::colon\"])\n            def test_func(self, param):\n                pass\n    \"\"\"\n    )\n    result, dom = run_and_parse()\n    assert result.ret == 0\n    node = dom.find_first_by_tag(\"testcase\")\n    node.assert_attr(classname=\"test_double_colon_split_method_issue469.TestClass\")\n    node.assert_attr(name=\"test_func[double::colon]\")\n\n\ndef test_unicode_issue368(pytester: Pytester) -> None:\n    path = pytester.path.joinpath(\"test.xml\")\n    log = LogXML(str(path), None)\n    ustr = \"\u0412\u041d\u0418!\"\n\n    class Report(BaseReport):\n        longrepr = ustr\n        sections: list[tuple[str, str]] = []\n        nodeid = \"something\"\n        location = \"tests/filename.py\", 42, \"TestClass.method\"\n        when = \"teardown\"\n\n    test_report = cast(TestReport, Report())\n\n    # hopefully this is not too brittle ...\n    log.pytest_sessionstart()\n    node_reporter = log._opentestcase(test_report)\n    node_reporter.append_failure(test_report)\n    node_reporter.append_collect_error(test_report)\n    node_reporter.append_collect_skipped(test_report)\n    node_reporter.append_error(test_report)\n    test_report.longrepr = \"filename\", 1, ustr\n    node_reporter.append_skipped(test_report)\n    test_report.longrepr = \"filename\", 1, \"Skipped: \u5361\u5623\u5623\"\n    node_reporter.append_skipped(test_report)\n    test_report.wasxfail = ustr\n    node_reporter.append_skipped(test_report)\n    log.pytest_sessionfinish()\n\n\ndef test_record_property(pytester: Pytester, run_and_parse: RunAndParse) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def other(record_property):\n            record_property(\"bar\", 1)\n        def test_record(record_property, other):\n            record_property(\"foo\", \"<1\");\n    \"\"\"\n    )\n    result, dom = run_and_parse()\n    node = dom.find_first_by_tag(\"testsuite\")\n    tnode = node.find_first_by_tag(\"testcase\")\n    psnode = tnode.find_first_by_tag(\"properties\")\n    pnodes = psnode.find_by_tag(\"property\")\n    pnodes[0].assert_attr(name=\"bar\", value=\"1\")\n    pnodes[1].assert_attr(name=\"foo\", value=\"<1\")\n    result.stdout.fnmatch_lines([\"*= 1 passed in *\"])\n\n\ndef test_record_property_on_test_and_teardown_failure(\n    pytester: Pytester, run_and_parse: RunAndParse\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def other(record_property):\n            record_property(\"bar\", 1)\n            yield\n            assert 0\n\n        def test_record(record_property, other):\n            record_property(\"foo\", \"<1\")\n            assert 0\n    \"\"\"\n    )\n    result, dom = run_and_parse()\n    node = dom.find_first_by_tag(\"testsuite\")\n    tnodes = node.find_by_tag(\"testcase\")\n    for tnode in tnodes:\n        psnode = tnode.find_first_by_tag(\"properties\")\n        assert psnode, f\"testcase didn't had expected properties:\\n{tnode}\"\n        pnodes = psnode.find_by_tag(\"property\")\n        pnodes[0].assert_attr(name=\"bar\", value=\"1\")\n        pnodes[1].assert_attr(name=\"foo\", value=\"<1\")\n    result.stdout.fnmatch_lines([\"*= 1 failed, 1 error *\"])\n\n\ndef test_record_property_same_name(\n    pytester: Pytester, run_and_parse: RunAndParse\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_record_with_same_name(record_property):\n            record_property(\"foo\", \"bar\")\n            record_property(\"foo\", \"baz\")\n    \"\"\"\n    )\n    result, dom = run_and_parse()\n    node = dom.find_first_by_tag(\"testsuite\")\n    tnode = node.find_first_by_tag(\"testcase\")\n    psnode = tnode.find_first_by_tag(\"properties\")\n    pnodes = psnode.find_by_tag(\"property\")\n    pnodes[0].assert_attr(name=\"foo\", value=\"bar\")\n    pnodes[1].assert_attr(name=\"foo\", value=\"baz\")\n\n\n@pytest.mark.parametrize(\"fixture_name\", [\"record_property\", \"record_xml_attribute\"])\ndef test_record_fixtures_without_junitxml(\n    pytester: Pytester, fixture_name: str\n) -> None:\n    pytester.makepyfile(\n        f\"\"\"\n        def test_record({fixture_name}):\n            {fixture_name}(\"foo\", \"bar\")\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\n@pytest.mark.filterwarnings(\"default\")\ndef test_record_attribute(pytester: Pytester, run_and_parse: RunAndParse) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        junit_family = xunit1\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        def other(record_xml_attribute):\n            record_xml_attribute(\"bar\", 1)\n        def test_record(record_xml_attribute, other):\n            record_xml_attribute(\"foo\", \"<1\");\n    \"\"\"\n    )\n    result, dom = run_and_parse()\n    node = dom.find_first_by_tag(\"testsuite\")\n    tnode = node.find_first_by_tag(\"testcase\")\n    tnode.assert_attr(bar=\"1\")\n    tnode.assert_attr(foo=\"<1\")\n    result.stdout.fnmatch_lines(\n        [\"*test_record_attribute.py:6:*record_xml_attribute is an experimental feature\"]\n    )\n\n\n@pytest.mark.filterwarnings(\"default\")\n@pytest.mark.parametrize(\"fixture_name\", [\"record_xml_attribute\", \"record_property\"])\ndef test_record_fixtures_xunit2(\n    pytester: Pytester, fixture_name: str, run_and_parse: RunAndParse\n) -> None:\n    \"\"\"Ensure record_xml_attribute and record_property drop values when outside of legacy family.\"\"\"\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        junit_family = xunit2\n    \"\"\"\n    )\n    pytester.makepyfile(\n        f\"\"\"\n        import pytest\n\n        @pytest.fixture\n        def other({fixture_name}):\n            {fixture_name}(\"bar\", 1)\n        def test_record({fixture_name}, other):\n            {fixture_name}(\"foo\", \"<1\");\n    \"\"\"\n    )\n\n    result, dom = run_and_parse(family=None)\n    expected_lines = []\n    if fixture_name == \"record_xml_attribute\":\n        expected_lines.append(\n            \"*test_record_fixtures_xunit2.py:6:*record_xml_attribute is an experimental feature\"\n        )\n    expected_lines = [\n        f\"*test_record_fixtures_xunit2.py:6:*{fixture_name} is incompatible \"\n        \"with junit_family 'xunit2' (use 'legacy' or 'xunit1')\"\n    ]\n    result.stdout.fnmatch_lines(expected_lines)\n\n\ndef test_random_report_log_xdist(\n    pytester: Pytester, monkeypatch: MonkeyPatch, run_and_parse: RunAndParse\n) -> None:\n    \"\"\"`xdist` calls pytest_runtest_logreport as they are executed by the workers,\n    with nodes from several nodes overlapping, so junitxml must cope with that\n    to produce correct reports (#1064).\"\"\"\n    pytest.importorskip(\"xdist\")\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n    pytester.makepyfile(\n        \"\"\"\n        import pytest, time\n        @pytest.mark.parametrize('i', list(range(30)))\n        def test_x(i):\n            assert i != 22\n    \"\"\"\n    )\n    _, dom = run_and_parse(\"-n2\")\n    suite_node = dom.find_first_by_tag(\"testsuite\")\n    failed = []\n    for case_node in suite_node.find_by_tag(\"testcase\"):\n        if case_node.find_first_by_tag(\"failure\"):\n            failed.append(case_node[\"name\"])\n\n    assert failed == [\"test_x[22]\"]\n\n\n@parametrize_families\ndef test_root_testsuites_tag(\n    pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_x():\n            pass\n    \"\"\"\n    )\n    _, dom = run_and_parse(family=xunit_family)\n    root = dom.get_unique_child\n    assert root.tag == \"testsuites\"\n    suite_node = root.get_unique_child\n    assert suite_node.tag == \"testsuite\"\n\n\ndef test_runs_twice(pytester: Pytester, run_and_parse: RunAndParse) -> None:\n    f = pytester.makepyfile(\n        \"\"\"\n        def test_pass():\n            pass\n    \"\"\"\n    )\n\n    result, dom = run_and_parse(f, f)\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR*\")\n    first, second = (x[\"classname\"] for x in dom.find_by_tag(\"testcase\"))\n    assert first == second\n\n\ndef test_runs_twice_xdist(\n    pytester: Pytester, monkeypatch: MonkeyPatch, run_and_parse: RunAndParse\n) -> None:\n    pytest.importorskip(\"xdist\")\n    monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\")\n    f = pytester.makepyfile(\n        \"\"\"\n        def test_pass():\n            pass\n    \"\"\"\n    )\n\n    result, dom = run_and_parse(f, \"--dist\", \"each\", \"--tx\", \"2*popen\")\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR*\")\n    first, second = (x[\"classname\"] for x in dom.find_by_tag(\"testcase\"))\n    assert first == second\n\n\ndef test_fancy_items_regression(pytester: Pytester, run_and_parse: RunAndParse) -> None:\n    # issue 1259\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        class FunItem(pytest.Item):\n            def runtest(self):\n                pass\n        class NoFunItem(pytest.Item):\n            def runtest(self):\n                pass\n\n        class FunCollector(pytest.File):\n            def collect(self):\n                return [\n                    FunItem.from_parent(name='a', parent=self),\n                    NoFunItem.from_parent(name='a', parent=self),\n                    NoFunItem.from_parent(name='b', parent=self),\n                ]\n\n        def pytest_collect_file(file_path, parent):\n            if file_path.suffix == '.py':\n                return FunCollector.from_parent(path=file_path, parent=parent)\n    \"\"\"\n    )\n\n    pytester.makepyfile(\n        \"\"\"\n        def test_pass():\n            pass\n    \"\"\"\n    )\n\n    result, dom = run_and_parse()\n\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR*\")\n\n    items = sorted(\n        \"%(classname)s %(name)s\" % x  # noqa: UP031\n        # dom is a DomNode not a mapping, it's not possible to ** it.\n        for x in dom.find_by_tag(\"testcase\")\n    )\n\n    import pprint\n\n    pprint.pprint(items)\n    assert items == [\n        \"conftest a\",\n        \"conftest a\",\n        \"conftest b\",\n        \"test_fancy_items_regression a\",\n        \"test_fancy_items_regression a\",\n        \"test_fancy_items_regression b\",\n        \"test_fancy_items_regression test_pass\",\n    ]\n\n\n@parametrize_families\ndef test_global_properties(pytester: Pytester, xunit_family: str) -> None:\n    path = pytester.path.joinpath(\"test_global_properties.xml\")\n    log = LogXML(str(path), None, family=xunit_family)\n\n    class Report(BaseReport):\n        sections: list[tuple[str, str]] = []\n        nodeid = \"test_node_id\"\n\n    log.pytest_sessionstart()\n    log.add_global_property(\"foo\", \"1\")\n    log.add_global_property(\"bar\", \"2\")\n    log.pytest_sessionfinish()\n\n    dom = minidom.parse(str(path))\n\n    properties = dom.getElementsByTagName(\"properties\")\n\n    assert properties.length == 1, \"There must be one <properties> node\"\n\n    property_list = dom.getElementsByTagName(\"property\")\n\n    assert property_list.length == 2, \"There most be only 2 property nodes\"\n\n    expected = {\"foo\": \"1\", \"bar\": \"2\"}\n    actual = {}\n\n    for p in property_list:\n        k = str(p.getAttribute(\"name\"))\n        v = str(p.getAttribute(\"value\"))\n        actual[k] = v\n\n    assert actual == expected\n\n\ndef test_url_property(pytester: Pytester) -> None:\n    test_url = \"http://www.github.com/pytest-dev\"\n    path = pytester.path.joinpath(\"test_url_property.xml\")\n    log = LogXML(str(path), None)\n\n    class Report(BaseReport):\n        longrepr = \"FooBarBaz\"\n        sections: list[tuple[str, str]] = []\n        nodeid = \"something\"\n        location = \"tests/filename.py\", 42, \"TestClass.method\"\n        url = test_url\n\n    test_report = cast(TestReport, Report())\n\n    log.pytest_sessionstart()\n    node_reporter = log._opentestcase(test_report)\n    node_reporter.append_failure(test_report)\n    log.pytest_sessionfinish()\n\n    test_case = minidom.parse(str(path)).getElementsByTagName(\"testcase\")[0]\n\n    assert (\n        test_case.getAttribute(\"url\") == test_url\n    ), \"The URL did not get written to the xml\"\n\n\n@parametrize_families\ndef test_record_testsuite_property(\n    pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_func1(record_testsuite_property):\n            record_testsuite_property(\"stats\", \"all good\")\n\n        def test_func2(record_testsuite_property):\n            record_testsuite_property(\"stats\", 10)\n    \"\"\"\n    )\n    result, dom = run_and_parse(family=xunit_family)\n    assert result.ret == 0\n    node = dom.find_first_by_tag(\"testsuite\")\n    properties_node = node.find_first_by_tag(\"properties\")\n    p1_node = properties_node.find_nth_by_tag(\"property\", 0)\n    p2_node = properties_node.find_nth_by_tag(\"property\", 1)\n    p1_node.assert_attr(name=\"stats\", value=\"all good\")\n    p2_node.assert_attr(name=\"stats\", value=\"10\")\n\n\ndef test_record_testsuite_property_junit_disabled(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_func1(record_testsuite_property):\n            record_testsuite_property(\"stats\", \"all good\")\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\n@pytest.mark.parametrize(\"junit\", [True, False])\ndef test_record_testsuite_property_type_checking(\n    pytester: Pytester, junit: bool\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_func1(record_testsuite_property):\n            record_testsuite_property(1, 2)\n    \"\"\"\n    )\n    args = (\"--junitxml=tests.xml\",) if junit else ()\n    result = pytester.runpytest(*args)\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        [\"*TypeError: name parameter needs to be a string, but int given\"]\n    )\n\n\n@pytest.mark.parametrize(\"suite_name\", [\"my_suite\", \"\"])\n@parametrize_families\ndef test_set_suite_name(\n    pytester: Pytester, suite_name: str, run_and_parse: RunAndParse, xunit_family: str\n) -> None:\n    if suite_name:\n        pytester.makeini(\n            f\"\"\"\n            [pytest]\n            junit_suite_name={suite_name}\n            junit_family={xunit_family}\n        \"\"\"\n        )\n        expected = suite_name\n    else:\n        expected = \"pytest\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        def test_func():\n            pass\n    \"\"\"\n    )\n    result, dom = run_and_parse(family=xunit_family)\n    assert result.ret == 0\n    node = dom.find_first_by_tag(\"testsuite\")\n    node.assert_attr(name=expected)\n\n\ndef test_escaped_skipreason_issue3533(\n    pytester: Pytester, run_and_parse: RunAndParse\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.skip(reason='1 <> 2')\n        def test_skip():\n            pass\n    \"\"\"\n    )\n    _, dom = run_and_parse()\n    node = dom.find_first_by_tag(\"testcase\")\n    snode = node.find_first_by_tag(\"skipped\")\n    assert \"1 <> 2\" in snode.text\n    snode.assert_attr(message=\"1 <> 2\")\n\n\ndef test_bin_escaped_skipreason(pytester: Pytester, run_and_parse: RunAndParse) -> None:\n    \"\"\"Escape special characters from mark.skip reason (#11842).\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.skip(\"\\33[31;1mred\\33[0m\")\n        def test_skip():\n            pass\n    \"\"\"\n    )\n    _, dom = run_and_parse()\n    node = dom.find_first_by_tag(\"testcase\")\n    snode = node.find_first_by_tag(\"skipped\")\n    assert \"#x1B[31;1mred#x1B[0m\" in snode.text\n    snode.assert_attr(message=\"#x1B[31;1mred#x1B[0m\")\n\n\ndef test_escaped_setup_teardown_error(\n    pytester: Pytester, run_and_parse: RunAndParse\n) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture()\n        def my_setup():\n            raise Exception(\"error: \\033[31mred\\033[m\")\n\n        def test_esc(my_setup):\n            pass\n    \"\"\"\n    )\n    _, dom = run_and_parse()\n    node = dom.find_first_by_tag(\"testcase\")\n    snode = node.find_first_by_tag(\"error\")\n    assert \"#x1B[31mred#x1B[m\" in snode[\"message\"]\n    assert \"#x1B[31mred#x1B[m\" in snode.text\n\n\n@parametrize_families\ndef test_logging_passing_tests_disabled_does_not_log_test_output(\n    pytester: Pytester, run_and_parse: RunAndParse, xunit_family: str\n) -> None:\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        junit_log_passing_tests=False\n        junit_logging=system-out\n        junit_family={xunit_family}\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        import sys\n\n        def test_func():\n            sys.stdout.write('This is stdout')\n            sys.stderr.write('This is stderr')\n            logging.warning('hello')\n    \"\"\"\n    )\n    result, dom = run_and_parse(family=xunit_family)\n    assert result.ret == 0\n    node = dom.find_first_by_tag(\"testcase\")\n    assert len(node.find_by_tag(\"system-err\")) == 0\n    assert len(node.find_by_tag(\"system-out\")) == 0\n\n\n@parametrize_families\n@pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\", \"system-err\"])\ndef test_logging_passing_tests_disabled_logs_output_for_failing_test_issue5430(\n    pytester: Pytester,\n    junit_logging: str,\n    run_and_parse: RunAndParse,\n    xunit_family: str,\n) -> None:\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        junit_log_passing_tests=False\n        junit_family={xunit_family}\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        import sys\n\n        def test_func():\n            logging.warning('hello')\n            assert 0\n    \"\"\"\n    )\n    result, dom = run_and_parse(\n        \"-o\", f\"junit_logging={junit_logging}\", family=xunit_family\n    )\n    assert result.ret == 1\n    node = dom.find_first_by_tag(\"testcase\")\n    if junit_logging == \"system-out\":\n        assert len(node.find_by_tag(\"system-err\")) == 0\n        assert len(node.find_by_tag(\"system-out\")) == 1\n    elif junit_logging == \"system-err\":\n        assert len(node.find_by_tag(\"system-err\")) == 1\n        assert len(node.find_by_tag(\"system-out\")) == 0\n    else:\n        assert junit_logging == \"no\"\n        assert len(node.find_by_tag(\"system-err\")) == 0\n        assert len(node.find_by_tag(\"system-out\")) == 0\n", "testing/test_debugging.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport sys\n\nimport _pytest._code\nfrom _pytest.debugging import _validate_usepdb_cls\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\n@pytest.fixture(autouse=True)\ndef pdb_env(request):\n    if \"pytester\" in request.fixturenames:\n        # Disable pdb++ with inner tests.\n        pytester = request.getfixturevalue(\"pytester\")\n        pytester._monkeypatch.setenv(\"PDBPP_HIJACK_PDB\", \"0\")\n\n\ndef runpdb(pytester: Pytester, source: str):\n    p = pytester.makepyfile(source)\n    return pytester.runpytest_inprocess(\"--pdb\", p)\n\n\ndef runpdb_and_get_stdout(pytester: Pytester, source: str):\n    result = runpdb(pytester, source)\n    return result.stdout.str()\n\n\ndef runpdb_and_get_report(pytester: Pytester, source: str):\n    result = runpdb(pytester, source)\n    reports = result.reprec.getreports(\"pytest_runtest_logreport\")\n    assert len(reports) == 3, reports  # setup/call/teardown\n    return reports[1]\n\n\n@pytest.fixture\ndef custom_pdb_calls() -> list[str]:\n    called = []\n\n    # install dummy debugger class and track which methods were called on it\n    class _CustomPdb:\n        quitting = False\n\n        def __init__(self, *args, **kwargs):\n            called.append(\"init\")\n\n        def reset(self):\n            called.append(\"reset\")\n\n        def interaction(self, *args):\n            called.append(\"interaction\")\n\n    _pytest._CustomPdb = _CustomPdb  # type: ignore\n    return called\n\n\n@pytest.fixture\ndef custom_debugger_hook():\n    called = []\n\n    # install dummy debugger class and track which methods were called on it\n    class _CustomDebugger:\n        def __init__(self, *args, **kwargs):\n            called.append(\"init\")\n\n        def reset(self):\n            called.append(\"reset\")\n\n        def interaction(self, *args):\n            called.append(\"interaction\")\n\n        def set_trace(self, frame):\n            print(\"**CustomDebugger**\")\n            called.append(\"set_trace\")\n\n    _pytest._CustomDebugger = _CustomDebugger  # type: ignore\n    yield called\n    del _pytest._CustomDebugger  # type: ignore\n\n\nclass TestPDB:\n    @pytest.fixture\n    def pdblist(self, request):\n        monkeypatch = request.getfixturevalue(\"monkeypatch\")\n        pdblist = []\n\n        def mypdb(*args):\n            pdblist.append(args)\n\n        plugin = request.config.pluginmanager.getplugin(\"debugging\")\n        monkeypatch.setattr(plugin, \"post_mortem\", mypdb)\n        return pdblist\n\n    def test_pdb_on_fail(self, pytester: Pytester, pdblist) -> None:\n        rep = runpdb_and_get_report(\n            pytester,\n            \"\"\"\n            def test_func():\n                assert 0\n        \"\"\",\n        )\n        assert rep.failed\n        assert len(pdblist) == 1\n        tb = _pytest._code.Traceback(pdblist[0][0])\n        assert tb[-1].name == \"test_func\"\n\n    def test_pdb_on_xfail(self, pytester: Pytester, pdblist) -> None:\n        rep = runpdb_and_get_report(\n            pytester,\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_func():\n                assert 0\n        \"\"\",\n        )\n        assert \"xfail\" in rep.keywords\n        assert not pdblist\n\n    def test_pdb_on_skip(self, pytester, pdblist) -> None:\n        rep = runpdb_and_get_report(\n            pytester,\n            \"\"\"\n            import pytest\n            def test_func():\n                pytest.skip(\"hello\")\n        \"\"\",\n        )\n        assert rep.skipped\n        assert len(pdblist) == 0\n\n    def test_pdb_on_top_level_raise_skiptest(self, pytester, pdblist) -> None:\n        stdout = runpdb_and_get_stdout(\n            pytester,\n            \"\"\"\n            import unittest\n            raise unittest.SkipTest(\"This is a common way to skip an entire file.\")\n        \"\"\",\n        )\n        assert \"entering PDB\" not in stdout, stdout\n\n    def test_pdb_on_BdbQuit(self, pytester, pdblist) -> None:\n        rep = runpdb_and_get_report(\n            pytester,\n            \"\"\"\n            import bdb\n            def test_func():\n                raise bdb.BdbQuit\n        \"\"\",\n        )\n        assert rep.failed\n        assert len(pdblist) == 0\n\n    def test_pdb_on_KeyboardInterrupt(self, pytester, pdblist) -> None:\n        rep = runpdb_and_get_report(\n            pytester,\n            \"\"\"\n            def test_func():\n                raise KeyboardInterrupt\n        \"\"\",\n        )\n        assert rep.failed\n        assert len(pdblist) == 1\n\n    @staticmethod\n    def flush(child):\n        if child.isalive():\n            # Read if the test has not (e.g. test_pdb_unittest_skip).\n            child.read()\n            child.wait()\n        assert not child.isalive()\n\n    def test_pdb_unittest_postmortem(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import unittest\n            class Blub(unittest.TestCase):\n                def tearDown(self):\n                    self.filename = None\n                def test_false(self):\n                    self.filename = 'debug' + '.me'\n                    assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n        child.expect(\"Pdb\")\n        child.sendline(\"p self.filename\")\n        child.sendeof()\n        rest = child.read().decode(\"utf8\")\n        assert \"debug.me\" in rest\n        self.flush(child)\n\n    def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n        \"\"\"Test for issue #2137\"\"\"\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import unittest\n            @unittest.skipIf(True, 'Skipping also with pdb active')\n            class MyTestCase(unittest.TestCase):\n                def test_one(self):\n                    assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"-rs --pdb {p1}\")\n        child.expect(\"Skipping also with pdb active\")\n        child.expect_exact(\"= 1 skipped in\")\n        child.sendeof()\n        self.flush(child)\n\n    def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                import sys\n                sys.stderr.write(\"get\\\\x20rekt\")\n                print(\"get\\\\x20rekt\")\n                assert False\n\n            def test_not_called_due_to_quit():\n                pass\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n        child.expect(\"captured stdout\")\n        child.expect(\"get rekt\")\n        child.expect(\"captured stderr\")\n        child.expect(\"get rekt\")\n        child.expect(\"traceback\")\n        child.expect(\"def test_1\")\n        child.expect(\"Pdb\")\n        child.sendeof()\n        rest = child.read().decode(\"utf8\")\n        assert \"Exit: Quitting debugger\" in rest\n        assert \"= 1 failed in\" in rest\n        assert \"def test_1\" not in rest\n        assert \"get rekt\" not in rest\n        self.flush(child)\n\n    def test_pdb_dont_print_empty_captured_stdout_and_stderr(\n        self, pytester: Pytester\n    ) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                assert False\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n        child.expect(\"Pdb\")\n        output = child.before.decode(\"utf8\")\n        child.sendeof()\n        assert \"captured stdout\" not in output\n        assert \"captured stderr\" not in output\n        self.flush(child)\n\n    @pytest.mark.parametrize(\"showcapture\", [\"all\", \"no\", \"log\"])\n    def test_pdb_print_captured_logs(self, pytester, showcapture: str) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                import logging\n                logging.warning(\"get \" + \"rekt\")\n                assert False\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--show-capture={showcapture} --pdb {p1}\")\n        if showcapture in (\"all\", \"log\"):\n            child.expect(\"captured log\")\n            child.expect(\"get rekt\")\n        child.expect(\"Pdb\")\n        child.sendeof()\n        rest = child.read().decode(\"utf8\")\n        assert \"1 failed\" in rest\n        self.flush(child)\n\n    def test_pdb_print_captured_logs_nologging(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                import logging\n                logging.warning(\"get \" + \"rekt\")\n                assert False\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--show-capture=all --pdb -p no:logging {p1}\")\n        child.expect(\"get rekt\")\n        output = child.before.decode(\"utf8\")\n        assert \"captured log\" not in output\n        child.expect(\"Pdb\")\n        child.sendeof()\n        rest = child.read().decode(\"utf8\")\n        assert \"1 failed\" in rest\n        self.flush(child)\n\n    def test_pdb_interaction_exception(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def globalfunc():\n                pass\n            def test_1():\n                pytest.raises(ValueError, globalfunc)\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n        child.expect(\".*def test_1\")\n        child.expect(\".*pytest.raises.*globalfunc\")\n        child.expect(\"Pdb\")\n        child.sendline(\"globalfunc\")\n        child.expect(\".*function\")\n        child.sendeof()\n        child.expect(\"1 failed\")\n        self.flush(child)\n\n    def test_pdb_interaction_on_collection_issue181(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            xxx\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n        # child.expect(\".*import pytest.*\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        child.expect(\"1 error\")\n        self.flush(child)\n\n    def test_pdb_interaction_on_internal_error(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_runtest_protocol():\n                0/0\n        \"\"\"\n        )\n        p1 = pytester.makepyfile(\"def test_func(): pass\")\n        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n        child.expect(\"Pdb\")\n\n        # INTERNALERROR is only displayed once via terminal reporter.\n        assert (\n            len(\n                [\n                    x\n                    for x in child.before.decode().splitlines()\n                    if x.startswith(\"INTERNALERROR> Traceback\")\n                ]\n            )\n            == 1\n        )\n\n        child.sendeof()\n        self.flush(child)\n\n    def test_pdb_prevent_ConftestImportFailure_hiding_exception(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\"def test_func(): pass\")\n        sub_dir = pytester.path.joinpath(\"ns\")\n        sub_dir.mkdir()\n        sub_dir.joinpath(\"conftest\").with_suffix(\".py\").write_text(\n            \"import unknown\", \"utf-8\"\n        )\n        sub_dir.joinpath(\"test_file\").with_suffix(\".py\").write_text(\n            \"def test_func(): pass\", \"utf-8\"\n        )\n\n        result = pytester.runpytest_subprocess(\"--pdb\", \".\")\n        result.stdout.fnmatch_lines([\"-> import unknown\"])\n\n    @pytest.mark.xfail(reason=\"#10042\", strict=False)\n    def test_pdb_interaction_capturing_simple(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_1():\n                i = 0\n                print(\"hello17\")\n                pytest.set_trace()\n                i == 1\n                assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(r\"test_1\\(\\)\")\n        child.expect(\"i == 1\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        rest = child.read().decode(\"utf-8\")\n        assert \"AssertionError\" in rest\n        assert \"1 failed\" in rest\n        assert \"def test_1\" in rest\n        assert \"hello17\" in rest  # out is captured\n        self.flush(child)\n\n    def test_pdb_set_trace_kwargs(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_1():\n                i = 0\n                print(\"hello17\")\n                pytest.set_trace(header=\"== my_header ==\")\n                x = 3\n                assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(\"== my_header ==\")\n        assert \"PDB set_trace\" not in child.before.decode()\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        rest = child.read().decode(\"utf-8\")\n        assert \"1 failed\" in rest\n        assert \"def test_1\" in rest\n        assert \"hello17\" in rest  # out is captured\n        self.flush(child)\n\n    def test_pdb_set_trace_interception(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pdb\n            def test_1():\n                pdb.set_trace()\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(\"test_1\")\n        child.expect(\"Pdb\")\n        child.sendline(\"q\")\n        rest = child.read().decode(\"utf8\")\n        assert \"no tests ran\" in rest\n        assert \"reading from stdin while output\" not in rest\n        assert \"BdbQuit\" not in rest\n        self.flush(child)\n\n    def test_pdb_and_capsys(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_1(capsys):\n                print(\"hello1\")\n                pytest.set_trace()\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(\"test_1\")\n        child.send(\"capsys.readouterr()\\n\")\n        child.expect(\"hello1\")\n        child.sendeof()\n        child.read()\n        self.flush(child)\n\n    def test_pdb_with_caplog_on_pdb_invocation(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_1(capsys, caplog):\n                import logging\n                logging.getLogger(__name__).warning(\"some_warning\")\n                assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--pdb {p1!s}\")\n        child.send(\"caplog.record_tuples\\n\")\n        child.expect_exact(\n            \"[('test_pdb_with_caplog_on_pdb_invocation', 30, 'some_warning')]\"\n        )\n        child.sendeof()\n        child.read()\n        self.flush(child)\n\n    def test_set_trace_capturing_afterwards(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pdb\n            def test_1():\n                pdb.set_trace()\n            def test_2():\n                print(\"hello\")\n                assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(\"test_1\")\n        child.send(\"c\\n\")\n        child.expect(\"test_2\")\n        child.expect(\"Captured\")\n        child.expect(\"hello\")\n        child.sendeof()\n        child.read()\n        self.flush(child)\n\n    def test_pdb_interaction_doctest(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def function_1():\n                '''\n                >>> i = 0\n                >>> assert i == 1\n                '''\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--doctest-modules --pdb {p1}\")\n        child.expect(\"Pdb\")\n\n        assert \"UNEXPECTED EXCEPTION: AssertionError()\" in child.before.decode(\"utf8\")\n\n        child.sendline(\"'i=%i.' % i\")\n        child.expect(\"Pdb\")\n        assert \"\\r\\n'i=0.'\\r\\n\" in child.before.decode(\"utf8\")\n\n        child.sendeof()\n        rest = child.read().decode(\"utf8\")\n        assert \"! _pytest.outcomes.Exit: Quitting debugger !\" in rest\n        assert \"BdbQuit\" not in rest\n        assert \"1 failed\" in rest\n        self.flush(child)\n\n    def test_doctest_set_trace_quit(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def function_1():\n                '''\n                >>> __import__('pdb').set_trace()\n                '''\n        \"\"\"\n        )\n        # NOTE: does not use pytest.set_trace, but Python's patched pdb,\n        #       therefore \"-s\" is required.\n        child = pytester.spawn_pytest(f\"--doctest-modules --pdb -s {p1}\")\n        child.expect(\"Pdb\")\n        child.sendline(\"q\")\n        rest = child.read().decode(\"utf8\")\n\n        assert \"! _pytest.outcomes.Exit: Quitting debugger !\" in rest\n        assert \"= no tests ran in\" in rest\n        assert \"BdbQuit\" not in rest\n        assert \"UNEXPECTED EXCEPTION\" not in rest\n\n    @pytest.mark.xfail(reason=\"#10042\", strict=False)\n    def test_pdb_interaction_capturing_twice(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_1():\n                i = 0\n                print(\"hello17\")\n                pytest.set_trace()\n                x = 3\n                print(\"hello18\")\n                pytest.set_trace()\n                x = 4\n                assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(r\"PDB set_trace \\(IO-capturing turned off\\)\")\n        child.expect(\"test_1\")\n        child.expect(\"x = 3\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        child.expect(r\"PDB continue \\(IO-capturing resumed\\)\")\n        child.expect(r\"PDB set_trace \\(IO-capturing turned off\\)\")\n        child.expect(\"x = 4\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        child.expect(\"_ test_1 _\")\n        child.expect(\"def test_1\")\n        rest = child.read().decode(\"utf8\")\n        assert \"Captured stdout call\" in rest\n        assert \"hello17\" in rest  # out is captured\n        assert \"hello18\" in rest  # out is captured\n        assert \"1 failed\" in rest\n        self.flush(child)\n\n    @pytest.mark.xfail(reason=\"#10042\", strict=False)\n    def test_pdb_with_injected_do_debug(self, pytester: Pytester) -> None:\n        \"\"\"Simulates pdbpp, which injects Pdb into do_debug, and uses\n        self.__class__ in do_continue.\n        \"\"\"\n        p1 = pytester.makepyfile(\n            mytest=\"\"\"\n            import pdb\n            import pytest\n\n            count_continue = 0\n\n            class CustomPdb(pdb.Pdb, object):\n                def do_debug(self, arg):\n                    import sys\n                    import types\n\n                    do_debug_func = pdb.Pdb.do_debug\n\n                    newglobals = do_debug_func.__globals__.copy()\n                    newglobals['Pdb'] = self.__class__\n                    orig_do_debug = types.FunctionType(\n                        do_debug_func.__code__, newglobals,\n                        do_debug_func.__name__, do_debug_func.__defaults__,\n                    )\n                    return orig_do_debug(self, arg)\n                do_debug.__doc__ = pdb.Pdb.do_debug.__doc__\n\n                def do_continue(self, *args, **kwargs):\n                    global count_continue\n                    count_continue += 1\n                    return super(CustomPdb, self).do_continue(*args, **kwargs)\n\n            def foo():\n                print(\"print_from_foo\")\n\n            def test_1():\n                i = 0\n                print(\"hello17\")\n                pytest.set_trace()\n                x = 3\n                print(\"hello18\")\n\n                assert count_continue == 2, \"unexpected_failure: %d != 2\" % count_continue\n                pytest.fail(\"expected_failure\")\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--pdbcls=mytest:CustomPdb {p1!s}\")\n        child.expect(r\"PDB set_trace \\(IO-capturing turned off\\)\")\n        child.expect(r\"\\n\\(Pdb\")\n        child.sendline(\"debug foo()\")\n        child.expect(\"ENTERING RECURSIVE DEBUGGER\")\n        child.expect(r\"\\n\\(\\(Pdb\")\n        child.sendline(\"c\")\n        child.expect(\"LEAVING RECURSIVE DEBUGGER\")\n        assert b\"PDB continue\" not in child.before\n        # No extra newline.\n        assert child.before.endswith(b\"c\\r\\nprint_from_foo\\r\\n\")\n\n        # set_debug should not raise outcomes. Exit, if used recursively.\n        child.sendline(\"debug 42\")\n        child.sendline(\"q\")\n        child.expect(\"LEAVING RECURSIVE DEBUGGER\")\n        assert b\"ENTERING RECURSIVE DEBUGGER\" in child.before\n        assert b\"Quitting debugger\" not in child.before\n\n        child.sendline(\"c\")\n        child.expect(r\"PDB continue \\(IO-capturing resumed\\)\")\n        rest = child.read().decode(\"utf8\")\n        assert \"hello17\" in rest  # out is captured\n        assert \"hello18\" in rest  # out is captured\n        assert \"1 failed\" in rest\n        assert \"Failed: expected_failure\" in rest\n        assert \"AssertionError: unexpected_failure\" not in rest\n        self.flush(child)\n\n    def test_pdb_without_capture(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_1():\n                pytest.set_trace()\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"-s {p1}\")\n        child.expect(r\">>> PDB set_trace >>>\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        child.expect(r\">>> PDB continue >>>\")\n        child.expect(\"1 passed\")\n        self.flush(child)\n\n    @pytest.mark.parametrize(\"capture_arg\", (\"\", \"-s\", \"-p no:capture\"))\n    def test_pdb_continue_with_recursive_debug(\n        self, capture_arg, pytester: Pytester\n    ) -> None:\n        \"\"\"Full coverage for do_debug without capturing.\n\n        This is very similar to test_pdb_interaction_continue_recursive in general,\n        but mocks out ``pdb.set_trace`` for providing more coverage.\n        \"\"\"\n        p1 = pytester.makepyfile(\n            \"\"\"\n            try:\n                input = raw_input\n            except NameError:\n                pass\n\n            def set_trace():\n                __import__('pdb').set_trace()\n\n            def test_1(monkeypatch):\n                import _pytest.debugging\n\n                class pytestPDBTest(_pytest.debugging.pytestPDB):\n                    @classmethod\n                    def set_trace(cls, *args, **kwargs):\n                        # Init PytestPdbWrapper to handle capturing.\n                        _pdb = cls._init_pdb(\"set_trace\", *args, **kwargs)\n\n                        # Mock out pdb.Pdb.do_continue.\n                        import pdb\n                        pdb.Pdb.do_continue = lambda self, arg: None\n\n                        print(\"===\" + \" SET_TRACE ===\")\n                        assert input() == \"debug set_trace()\"\n\n                        # Simulate PytestPdbWrapper.do_debug\n                        cls._recursive_debug += 1\n                        print(\"ENTERING RECURSIVE DEBUGGER\")\n                        print(\"===\" + \" SET_TRACE_2 ===\")\n\n                        assert input() == \"c\"\n                        _pdb.do_continue(\"\")\n                        print(\"===\" + \" SET_TRACE_3 ===\")\n\n                        # Simulate PytestPdbWrapper.do_debug\n                        print(\"LEAVING RECURSIVE DEBUGGER\")\n                        cls._recursive_debug -= 1\n\n                        print(\"===\" + \" SET_TRACE_4 ===\")\n                        assert input() == \"c\"\n                        _pdb.do_continue(\"\")\n\n                    def do_continue(self, arg):\n                        print(\"=== do_continue\")\n\n                monkeypatch.setattr(_pytest.debugging, \"pytestPDB\", pytestPDBTest)\n\n                import pdb\n                monkeypatch.setattr(pdb, \"set_trace\", pytestPDBTest.set_trace)\n\n                set_trace()\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(f\"--tb=short {p1} {capture_arg}\")\n        child.expect(\"=== SET_TRACE ===\")\n        before = child.before.decode(\"utf8\")\n        if not capture_arg:\n            assert \">>> PDB set_trace (IO-capturing turned off) >>>\" in before\n        else:\n            assert \">>> PDB set_trace >>>\" in before\n        child.sendline(\"debug set_trace()\")\n        child.expect(\"=== SET_TRACE_2 ===\")\n        before = child.before.decode(\"utf8\")\n        assert \"\\r\\nENTERING RECURSIVE DEBUGGER\\r\\n\" in before\n        child.sendline(\"c\")\n        child.expect(\"=== SET_TRACE_3 ===\")\n\n        # No continue message with recursive debugging.\n        before = child.before.decode(\"utf8\")\n        assert \">>> PDB continue \" not in before\n\n        child.sendline(\"c\")\n        child.expect(\"=== SET_TRACE_4 ===\")\n        before = child.before.decode(\"utf8\")\n        assert \"\\r\\nLEAVING RECURSIVE DEBUGGER\\r\\n\" in before\n        child.sendline(\"c\")\n        rest = child.read().decode(\"utf8\")\n        if not capture_arg:\n            assert \"> PDB continue (IO-capturing resumed) >\" in rest\n        else:\n            assert \"> PDB continue >\" in rest\n        assert \"= 1 passed in\" in rest\n\n    def test_pdb_used_outside_test(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            pytest.set_trace()\n            x = 5\n        \"\"\"\n        )\n        child = pytester.spawn(f\"{sys.executable} {p1}\")\n        child.expect(\"x = 5\")\n        child.expect(\"Pdb\")\n        child.sendeof()\n        self.flush(child)\n\n    def test_pdb_used_in_generate_tests(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                pytest.set_trace()\n                x = 5\n            def test_foo(a):\n                pass\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(\"x = 5\")\n        child.expect(\"Pdb\")\n        child.sendeof()\n        self.flush(child)\n\n    def test_pdb_collection_failure_is_shown(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\"xxx\")\n        result = pytester.runpytest_subprocess(\"--pdb\", p1)\n        result.stdout.fnmatch_lines(\n            [\"E   NameError: *xxx*\", \"*! *Exit: Quitting debugger !*\"]  # due to EOF\n        )\n\n    @pytest.mark.parametrize(\"post_mortem\", (False, True))\n    def test_enter_leave_pdb_hooks_are_called(\n        self, post_mortem, pytester: Pytester\n    ) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            mypdb = None\n\n            def pytest_configure(config):\n                config.testing_verification = 'configured'\n\n            def pytest_enter_pdb(config, pdb):\n                assert config.testing_verification == 'configured'\n                print('enter_pdb_hook')\n\n                global mypdb\n                mypdb = pdb\n                mypdb.set_attribute = \"bar\"\n\n            def pytest_leave_pdb(config, pdb):\n                assert config.testing_verification == 'configured'\n                print('leave_pdb_hook')\n\n                global mypdb\n                assert mypdb is pdb\n                assert mypdb.set_attribute == \"bar\"\n        \"\"\"\n        )\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def test_set_trace():\n                pytest.set_trace()\n                assert 0\n\n            def test_post_mortem():\n                assert 0\n        \"\"\"\n        )\n        if post_mortem:\n            child = pytester.spawn_pytest(str(p1) + \" --pdb -s -k test_post_mortem\")\n        else:\n            child = pytester.spawn_pytest(str(p1) + \" -k test_set_trace\")\n        child.expect(\"enter_pdb_hook\")\n        child.sendline(\"c\")\n        if post_mortem:\n            child.expect(r\"PDB continue\")\n        else:\n            child.expect(r\"PDB continue \\(IO-capturing resumed\\)\")\n            child.expect(\"Captured stdout call\")\n        rest = child.read().decode(\"utf8\")\n        assert \"leave_pdb_hook\" in rest\n        assert \"1 failed\" in rest\n        self.flush(child)\n\n    def test_pdb_custom_cls(\n        self, pytester: Pytester, custom_pdb_calls: list[str]\n    ) -> None:\n        p1 = pytester.makepyfile(\"\"\"xxx \"\"\")\n        result = pytester.runpytest_inprocess(\n            \"--pdb\", \"--pdbcls=_pytest:_CustomPdb\", p1\n        )\n        result.stdout.fnmatch_lines([\"*NameError*xxx*\", \"*1 error*\"])\n        assert custom_pdb_calls == [\"init\", \"reset\", \"interaction\"]\n\n    def test_pdb_custom_cls_invalid(self, pytester: Pytester) -> None:\n        result = pytester.runpytest_inprocess(\"--pdbcls=invalid\")\n        result.stderr.fnmatch_lines(\n            [\n                \"*: error: argument --pdbcls: 'invalid' is not in the format 'modname:classname'\"\n            ]\n        )\n\n    def test_pdb_validate_usepdb_cls(self):\n        assert _validate_usepdb_cls(\"os.path:dirname.__name__\") == (\n            \"os.path\",\n            \"dirname.__name__\",\n        )\n\n        assert _validate_usepdb_cls(\"pdb:DoesNotExist\") == (\"pdb\", \"DoesNotExist\")\n\n    def test_pdb_custom_cls_without_pdb(\n        self, pytester: Pytester, custom_pdb_calls: list[str]\n    ) -> None:\n        p1 = pytester.makepyfile(\"\"\"xxx \"\"\")\n        result = pytester.runpytest_inprocess(\"--pdbcls=_pytest:_CustomPdb\", p1)\n        result.stdout.fnmatch_lines([\"*NameError*xxx*\", \"*1 error*\"])\n        assert custom_pdb_calls == []\n\n    def test_pdb_custom_cls_with_set_trace(\n        self,\n        pytester: Pytester,\n        monkeypatch: MonkeyPatch,\n    ) -> None:\n        pytester.makepyfile(\n            custom_pdb=\"\"\"\n            class CustomPdb(object):\n                def __init__(self, *args, **kwargs):\n                    skip = kwargs.pop(\"skip\")\n                    assert skip == [\"foo.*\"]\n                    print(\"__init__\")\n                    super(CustomPdb, self).__init__(*args, **kwargs)\n\n                def set_trace(*args, **kwargs):\n                    print('custom set_trace>')\n         \"\"\"\n        )\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def test_foo():\n                pytest.set_trace(skip=['foo.*'])\n        \"\"\"\n        )\n        monkeypatch.setenv(\"PYTHONPATH\", str(pytester.path))\n        child = pytester.spawn_pytest(f\"--pdbcls=custom_pdb:CustomPdb {p1!s}\")\n\n        child.expect(\"__init__\")\n        child.expect(\"custom set_trace>\")\n        self.flush(child)\n\n\nclass TestDebuggingBreakpoints:\n    @pytest.mark.parametrize(\"arg\", [\"--pdb\", \"\"])\n    def test_sys_breakpointhook_configure_and_unconfigure(\n        self, pytester: Pytester, arg: str\n    ) -> None:\n        \"\"\"\n        Test that sys.breakpointhook is set to the custom Pdb class once configured, test that\n        hook is reset to system value once pytest has been unconfigured\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import sys\n            from pytest import hookimpl\n            from _pytest.debugging import pytestPDB\n\n            def pytest_configure(config):\n                config.add_cleanup(check_restored)\n\n            def check_restored():\n                assert sys.breakpointhook == sys.__breakpointhook__\n\n            def test_check():\n                assert sys.breakpointhook == pytestPDB.set_trace\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_nothing(): pass\n        \"\"\"\n        )\n        args = (arg,) if arg else ()\n        result = pytester.runpytest_subprocess(*args)\n        result.stdout.fnmatch_lines([\"*1 passed in *\"])\n\n    def test_pdb_custom_cls(\n        self, pytester: Pytester, custom_debugger_hook, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.delenv(\"PYTHONBREAKPOINT\", raising=False)\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_nothing():\n                breakpoint()\n        \"\"\"\n        )\n        result = pytester.runpytest_inprocess(\n            \"--pdb\", \"--pdbcls=_pytest:_CustomDebugger\", p1\n        )\n        result.stdout.fnmatch_lines([\"*CustomDebugger*\", \"*1 passed*\"])\n        assert custom_debugger_hook == [\"init\", \"set_trace\"]\n\n    @pytest.mark.parametrize(\"arg\", [\"--pdb\", \"\"])\n    def test_environ_custom_class(\n        self, pytester: Pytester, custom_debugger_hook, arg: str\n    ) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import os\n            import sys\n\n            os.environ['PYTHONBREAKPOINT'] = '_pytest._CustomDebugger.set_trace'\n\n            def pytest_configure(config):\n                config.add_cleanup(check_restored)\n\n            def check_restored():\n                assert sys.breakpointhook == sys.__breakpointhook__\n\n            def test_check():\n                import _pytest\n                assert sys.breakpointhook is _pytest._CustomDebugger.set_trace\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_nothing(): pass\n        \"\"\"\n        )\n        args = (arg,) if arg else ()\n        result = pytester.runpytest_subprocess(*args)\n        result.stdout.fnmatch_lines([\"*1 passed in *\"])\n\n    def test_sys_breakpoint_interception(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        monkeypatch.delenv(\"PYTHONBREAKPOINT\", raising=False)\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                breakpoint()\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(\"test_1\")\n        child.expect(\"Pdb\")\n        child.sendline(\"quit\")\n        rest = child.read().decode(\"utf8\")\n        assert \"Quitting debugger\" in rest\n        assert \"reading from stdin while output\" not in rest\n        TestPDB.flush(child)\n\n    @pytest.mark.xfail(reason=\"#10042\", strict=False)\n    def test_pdb_not_altered(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pdb\n            def test_1():\n                pdb.set_trace()\n                assert 0\n        \"\"\"\n        )\n        child = pytester.spawn_pytest(str(p1))\n        child.expect(\"test_1\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        rest = child.read().decode(\"utf8\")\n        assert \"1 failed\" in rest\n        assert \"reading from stdin while output\" not in rest\n        TestPDB.flush(child)\n\n\nclass TestTraceOption:\n    def test_trace_sets_breakpoint(self, pytester: Pytester) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            def test_1():\n                assert True\n\n            def test_2():\n                pass\n\n            def test_3():\n                pass\n            \"\"\"\n        )\n        child = pytester.spawn_pytest(\"--trace \" + str(p1))\n        child.expect(\"test_1\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        child.expect(\"test_2\")\n        child.expect(\"Pdb\")\n        child.sendline(\"c\")\n        child.expect(\"test_3\")\n        child.expect(\"Pdb\")\n        child.sendline(\"q\")\n        child.expect_exact(\"Exit: Quitting debugger\")\n        rest = child.read().decode(\"utf8\")\n        assert \"= 2 passed in\" in rest\n        assert \"reading from stdin while output\" not in rest\n        # Only printed once - not on stderr.\n        assert \"Exit: Quitting debugger\" not in child.before.decode(\"utf8\")\n        TestPDB.flush(child)\n\n    def test_trace_with_parametrize_handles_shared_fixtureinfo(\n        self, pytester: Pytester\n    ) -> None:\n        p1 = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('myparam', [1,2])\n            def test_1(myparam, request):\n                assert myparam in (1, 2)\n                assert request.function.__name__ == \"test_1\"\n            @pytest.mark.parametrize('func', [1,2])\n            def test_func(func, request):\n                assert func in (1, 2)\n                assert request.function.__name__ == \"test_func\"\n            @pytest.mark.parametrize('myparam', [1,2])\n            def test_func_kw(myparam, request, func=\"func_kw\"):\n                assert myparam in (1, 2)\n                assert func == \"func_kw\"\n                assert request.function.__name__ == \"test_func_kw\"\n            \"\"\"\n        )\n        child = pytester.spawn_pytest(\"--trace \" + str(p1))\n        for func, argname in [\n            (\"test_1\", \"myparam\"),\n            (\"test_func\", \"func\"),\n            (\"test_func_kw\", \"myparam\"),\n        ]:\n            child.expect_exact(\"> PDB runcall (IO-capturing turned off) >\")\n            child.expect_exact(func)\n            child.expect_exact(\"Pdb\")\n            child.sendline(\"args\")\n            child.expect_exact(f\"{argname} = 1\\r\\n\")\n            child.expect_exact(\"Pdb\")\n            child.sendline(\"c\")\n            child.expect_exact(\"Pdb\")\n            child.sendline(\"args\")\n            child.expect_exact(f\"{argname} = 2\\r\\n\")\n            child.expect_exact(\"Pdb\")\n            child.sendline(\"c\")\n            child.expect_exact(\"> PDB continue (IO-capturing resumed) >\")\n        rest = child.read().decode(\"utf8\")\n        assert \"= 6 passed in\" in rest\n        assert \"reading from stdin while output\" not in rest\n        # Only printed once - not on stderr.\n        assert \"Exit: Quitting debugger\" not in child.before.decode(\"utf8\")\n        TestPDB.flush(child)\n\n\ndef test_trace_after_runpytest(pytester: Pytester) -> None:\n    \"\"\"Test that debugging's pytest_configure is reentrant.\"\"\"\n    p1 = pytester.makepyfile(\n        \"\"\"\n        from _pytest.debugging import pytestPDB\n\n        def test_outer(pytester) -> None:\n            assert len(pytestPDB._saved) == 1\n\n            pytester.makepyfile(\n                \\\"\"\"\n                from _pytest.debugging import pytestPDB\n\n                def test_inner():\n                    assert len(pytestPDB._saved) == 2\n                    print()\n                    print(\"test_inner_\" + \"end\")\n                \\\"\"\"\n            )\n\n            result = pytester.runpytest(\"-s\", \"-k\", \"test_inner\")\n            assert result.ret == 0\n\n            assert len(pytestPDB._saved) == 1\n    \"\"\"\n    )\n    result = pytester.runpytest_subprocess(\"-s\", \"-p\", \"pytester\", str(p1))\n    result.stdout.fnmatch_lines([\"test_inner_end\"])\n    assert result.ret == 0\n\n\ndef test_quit_with_swallowed_SystemExit(pytester: Pytester) -> None:\n    \"\"\"Test that debugging's pytest_configure is reentrant.\"\"\"\n    p1 = pytester.makepyfile(\n        \"\"\"\n        def call_pdb_set_trace():\n            __import__('pdb').set_trace()\n\n\n        def test_1():\n            try:\n                call_pdb_set_trace()\n            except SystemExit:\n                pass\n\n\n        def test_2():\n            pass\n    \"\"\"\n    )\n    child = pytester.spawn_pytest(str(p1))\n    child.expect(\"Pdb\")\n    child.sendline(\"q\")\n    child.expect_exact(\"Exit: Quitting debugger\")\n    rest = child.read().decode(\"utf8\")\n    assert \"no tests ran\" in rest\n    TestPDB.flush(child)\n\n\n@pytest.mark.parametrize(\"fixture\", (\"capfd\", \"capsys\"))\n@pytest.mark.xfail(reason=\"#10042\", strict=False)\ndef test_pdb_suspends_fixture_capturing(pytester: Pytester, fixture: str) -> None:\n    \"\"\"Using \"-s\" with pytest should suspend/resume fixture capturing.\"\"\"\n    p1 = pytester.makepyfile(\n        f\"\"\"\n        def test_inner({fixture}):\n            import sys\n\n            print(\"out_inner_before\")\n            sys.stderr.write(\"err_inner_before\\\\n\")\n\n            __import__(\"pdb\").set_trace()\n\n            print(\"out_inner_after\")\n            sys.stderr.write(\"err_inner_after\\\\n\")\n\n            out, err = {fixture}.readouterr()\n            assert out ==\"out_inner_before\\\\nout_inner_after\\\\n\"\n            assert err ==\"err_inner_before\\\\nerr_inner_after\\\\n\"\n        \"\"\"\n    )\n\n    child = pytester.spawn_pytest(str(p1) + \" -s\")\n\n    child.expect(\"Pdb\")\n    before = child.before.decode(\"utf8\")\n    assert (\n        f\"> PDB set_trace (IO-capturing turned off for fixture {fixture}) >\" in before\n    )\n\n    # Test that capturing is really suspended.\n    child.sendline(\"p 40 + 2\")\n    child.expect(\"Pdb\")\n    assert \"\\r\\n42\\r\\n\" in child.before.decode(\"utf8\")\n\n    child.sendline(\"c\")\n    rest = child.read().decode(\"utf8\")\n    assert \"out_inner\" not in rest\n    assert \"err_inner\" not in rest\n\n    TestPDB.flush(child)\n    assert child.exitstatus == 0\n    assert \"= 1 passed in\" in rest\n    assert f\"> PDB continue (IO-capturing resumed for fixture {fixture}) >\" in rest\n\n\ndef test_pdbcls_via_local_module(pytester: Pytester) -> None:\n    \"\"\"It should be imported in pytest_configure or later only.\"\"\"\n    p1 = pytester.makepyfile(\n        \"\"\"\n        def test():\n            print(\"before_set_trace\")\n            __import__(\"pdb\").set_trace()\n        \"\"\",\n        mypdb=\"\"\"\n        class Wrapped:\n            class MyPdb:\n                def set_trace(self, *args):\n                    print(\"set_trace_called\", args)\n\n                def runcall(self, *args, **kwds):\n                    print(\"runcall_called\", args, kwds)\n        \"\"\",\n    )\n    result = pytester.runpytest(\n        str(p1), \"--pdbcls=really.invalid:Value\", syspathinsert=True\n    )\n    result.stdout.fnmatch_lines(\n        [\n            \"*= FAILURES =*\",\n            \"E * --pdbcls: could not import 'really.invalid:Value': No module named *really*\",\n        ]\n    )\n    assert result.ret == 1\n\n    result = pytester.runpytest(\n        str(p1), \"--pdbcls=mypdb:Wrapped.MyPdb\", syspathinsert=True\n    )\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*set_trace_called*\", \"* 1 passed in *\"])\n\n    # Ensure that it also works with --trace.\n    result = pytester.runpytest(\n        str(p1), \"--pdbcls=mypdb:Wrapped.MyPdb\", \"--trace\", syspathinsert=True\n    )\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*runcall_called*\", \"* 1 passed in *\"])\n\n\ndef test_raises_bdbquit_with_eoferror(pytester: Pytester) -> None:\n    \"\"\"It is not guaranteed that DontReadFromInput's read is called.\"\"\"\n    p1 = pytester.makepyfile(\n        \"\"\"\n        def input_without_read(*args, **kwargs):\n            raise EOFError()\n\n        def test(monkeypatch):\n            import builtins\n            monkeypatch.setattr(builtins, \"input\", input_without_read)\n            __import__('pdb').set_trace()\n        \"\"\"\n    )\n    result = pytester.runpytest(str(p1))\n    result.stdout.fnmatch_lines([\"E *BdbQuit\", \"*= 1 failed in*\"])\n    assert result.ret == 1\n\n\ndef test_pdb_wrapper_class_is_reused(pytester: Pytester) -> None:\n    p1 = pytester.makepyfile(\n        \"\"\"\n        def test():\n            __import__(\"pdb\").set_trace()\n            __import__(\"pdb\").set_trace()\n\n            import mypdb\n            instances = mypdb.instances\n            assert len(instances) == 2\n            assert instances[0].__class__ is instances[1].__class__\n        \"\"\",\n        mypdb=\"\"\"\n        instances = []\n\n        class MyPdb:\n            def __init__(self, *args, **kwargs):\n                instances.append(self)\n\n            def set_trace(self, *args):\n                print(\"set_trace_called\", args)\n        \"\"\",\n    )\n    result = pytester.runpytest(str(p1), \"--pdbcls=mypdb:MyPdb\", syspathinsert=True)\n    assert result.ret == 0\n    result.stdout.fnmatch_lines(\n        [\"*set_trace_called*\", \"*set_trace_called*\", \"* 1 passed in *\"]\n    )\n", "testing/code/test_excinfo.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport fnmatch\nimport importlib\nimport io\nimport operator\nfrom pathlib import Path\nimport queue\nimport re\nimport sys\nimport textwrap\nfrom typing import Any\nfrom typing import cast\nfrom typing import TYPE_CHECKING\n\nimport _pytest._code\nfrom _pytest._code.code import ExceptionChainRepr\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest._code.code import FormattedExcinfo\nfrom _pytest._io import TerminalWriter\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pathlib import bestrelpath\nfrom _pytest.pathlib import import_path\nfrom _pytest.pytester import LineMatcher\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nif TYPE_CHECKING:\n    from _pytest._code.code import TracebackStyle\n\nif sys.version_info < (3, 11):\n    from exceptiongroup import ExceptionGroup\n\n\n@pytest.fixture\ndef limited_recursion_depth():\n    before = sys.getrecursionlimit()\n    sys.setrecursionlimit(150)\n    yield\n    sys.setrecursionlimit(before)\n\n\ndef test_excinfo_simple() -> None:\n    try:\n        raise ValueError\n    except ValueError:\n        info = _pytest._code.ExceptionInfo.from_current()\n    assert info.type == ValueError\n\n\ndef test_excinfo_from_exc_info_simple() -> None:\n    try:\n        raise ValueError\n    except ValueError as e:\n        assert e.__traceback__ is not None\n        info = _pytest._code.ExceptionInfo.from_exc_info((type(e), e, e.__traceback__))\n    assert info.type == ValueError\n\n\ndef test_excinfo_from_exception_simple() -> None:\n    try:\n        raise ValueError\n    except ValueError as e:\n        assert e.__traceback__ is not None\n        info = _pytest._code.ExceptionInfo.from_exception(e)\n    assert info.type == ValueError\n\n\ndef test_excinfo_from_exception_missing_traceback_assertion() -> None:\n    with pytest.raises(AssertionError, match=r\"must have.*__traceback__\"):\n        _pytest._code.ExceptionInfo.from_exception(ValueError())\n\n\ndef test_excinfo_getstatement():\n    def g():\n        raise ValueError\n\n    def f():\n        g()\n\n    try:\n        f()\n    except ValueError:\n        excinfo = _pytest._code.ExceptionInfo.from_current()\n    linenumbers = [\n        f.__code__.co_firstlineno - 1 + 4,\n        f.__code__.co_firstlineno - 1 + 1,\n        g.__code__.co_firstlineno - 1 + 1,\n    ]\n    values = list(excinfo.traceback)\n    foundlinenumbers = [x.lineno for x in values]\n    assert foundlinenumbers == linenumbers\n    # for x in info:\n    #    print \"%s:%d  %s\" %(x.path.relto(root), x.lineno, x.statement)\n    # xxx\n\n\n# testchain for getentries test below\n\n\ndef f():\n    #\n    raise ValueError\n    #\n\n\ndef g():\n    #\n    __tracebackhide__ = True\n    f()\n    #\n\n\ndef h():\n    #\n    g()\n    #\n\n\nclass TestTraceback_f_g_h:\n    def setup_method(self, method):\n        try:\n            h()\n        except ValueError:\n            self.excinfo = _pytest._code.ExceptionInfo.from_current()\n\n    def test_traceback_entries(self):\n        tb = self.excinfo.traceback\n        entries = list(tb)\n        assert len(tb) == 4  # maybe fragile test\n        assert len(entries) == 4  # maybe fragile test\n        names = [\"f\", \"g\", \"h\"]\n        for entry in entries:\n            try:\n                names.remove(entry.frame.code.name)\n            except ValueError:\n                pass\n        assert not names\n\n    def test_traceback_entry_getsource(self):\n        tb = self.excinfo.traceback\n        s = str(tb[-1].getsource())\n        assert s.startswith(\"def f():\")\n        assert s.endswith(\"raise ValueError\")\n\n    def test_traceback_entry_getsource_in_construct(self):\n        def xyz():\n            try:\n                raise ValueError\n            except somenoname:  # type: ignore[name-defined] # noqa: F821\n                pass  # pragma: no cover\n\n        try:\n            xyz()\n        except NameError:\n            excinfo = _pytest._code.ExceptionInfo.from_current()\n        else:\n            assert False, \"did not raise NameError\"\n\n        tb = excinfo.traceback\n        source = tb[-1].getsource()\n        assert source is not None\n        assert source.deindent().lines == [\n            \"def xyz():\",\n            \"    try:\",\n            \"        raise ValueError\",\n            \"    except somenoname:  # type: ignore[name-defined] # noqa: F821\",\n        ]\n\n    def test_traceback_cut(self) -> None:\n        co = _pytest._code.Code.from_function(f)\n        path, firstlineno = co.path, co.firstlineno\n        assert isinstance(path, Path)\n        traceback = self.excinfo.traceback\n        newtraceback = traceback.cut(path=path, firstlineno=firstlineno)\n        assert len(newtraceback) == 1\n        newtraceback = traceback.cut(path=path, lineno=firstlineno + 2)\n        assert len(newtraceback) == 1\n\n    def test_traceback_cut_excludepath(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\"def f(): raise ValueError\")\n        with pytest.raises(ValueError) as excinfo:\n            import_path(p, root=pytester.path, consider_namespace_packages=False).f()\n        basedir = Path(pytest.__file__).parent\n        newtraceback = excinfo.traceback.cut(excludepath=basedir)\n        for x in newtraceback:\n            assert isinstance(x.path, Path)\n            assert basedir not in x.path.parents\n        assert newtraceback[-1].frame.code.path == p\n\n    def test_traceback_filter(self):\n        traceback = self.excinfo.traceback\n        ntraceback = traceback.filter(self.excinfo)\n        assert len(ntraceback) == len(traceback) - 1\n\n    @pytest.mark.parametrize(\n        \"tracebackhide, matching\",\n        [\n            (lambda info: True, True),\n            (lambda info: False, False),\n            (operator.methodcaller(\"errisinstance\", ValueError), True),\n            (operator.methodcaller(\"errisinstance\", IndexError), False),\n        ],\n    )\n    def test_traceback_filter_selective(self, tracebackhide, matching):\n        def f():\n            #\n            raise ValueError\n            #\n\n        def g():\n            #\n            __tracebackhide__ = tracebackhide\n            f()\n            #\n\n        def h():\n            #\n            g()\n            #\n\n        excinfo = pytest.raises(ValueError, h)\n        traceback = excinfo.traceback\n        ntraceback = traceback.filter(excinfo)\n        print(f\"old: {traceback!r}\")\n        print(f\"new: {ntraceback!r}\")\n\n        if matching:\n            assert len(ntraceback) == len(traceback) - 2\n        else:\n            # -1 because of the __tracebackhide__ in pytest.raises\n            assert len(ntraceback) == len(traceback) - 1\n\n    def test_traceback_recursion_index(self):\n        def f(n):\n            if n < 10:\n                n += 1\n            f(n)\n\n        excinfo = pytest.raises(RecursionError, f, 8)\n        traceback = excinfo.traceback\n        recindex = traceback.recursionindex()\n        assert recindex == 3\n\n    def test_traceback_only_specific_recursion_errors(self, monkeypatch):\n        def f(n):\n            if n == 0:\n                raise RuntimeError(\"hello\")\n            f(n - 1)\n\n        excinfo = pytest.raises(RuntimeError, f, 25)\n        monkeypatch.delattr(excinfo.traceback.__class__, \"recursionindex\")\n        repr = excinfo.getrepr()\n        assert \"RuntimeError: hello\" in str(repr.reprcrash)\n\n    def test_traceback_no_recursion_index(self) -> None:\n        def do_stuff() -> None:\n            raise RuntimeError\n\n        def reraise_me() -> None:\n            import sys\n\n            exc, val, tb = sys.exc_info()\n            assert val is not None\n            raise val.with_traceback(tb)\n\n        def f(n: int) -> None:\n            try:\n                do_stuff()\n            except BaseException:\n                reraise_me()\n\n        excinfo = pytest.raises(RuntimeError, f, 8)\n        assert excinfo is not None\n        traceback = excinfo.traceback\n        recindex = traceback.recursionindex()\n        assert recindex is None\n\n    def test_traceback_messy_recursion(self):\n        # XXX: simplified locally testable version\n        decorator = pytest.importorskip(\"decorator\").decorator\n\n        def log(f, *k, **kw):\n            print(f\"{k} {kw}\")\n            f(*k, **kw)\n\n        log = decorator(log)\n\n        def fail():\n            raise ValueError(\"\")\n\n        fail = log(log(fail))\n\n        excinfo = pytest.raises(ValueError, fail)\n        assert excinfo.traceback.recursionindex() is None\n\n    def test_getreprcrash(self):\n        def i():\n            __tracebackhide__ = True\n            raise ValueError\n\n        def h():\n            i()\n\n        def g():\n            __tracebackhide__ = True\n            h()\n\n        def f():\n            g()\n\n        excinfo = pytest.raises(ValueError, f)\n        reprcrash = excinfo._getreprcrash()\n        assert reprcrash is not None\n        co = _pytest._code.Code.from_function(h)\n        assert reprcrash.path == str(co.path)\n        assert reprcrash.lineno == co.firstlineno + 1 + 1\n\n    def test_getreprcrash_empty(self):\n        def g():\n            __tracebackhide__ = True\n            raise ValueError\n\n        def f():\n            __tracebackhide__ = True\n            g()\n\n        excinfo = pytest.raises(ValueError, f)\n        assert excinfo._getreprcrash() is None\n\n\ndef test_excinfo_exconly():\n    excinfo = pytest.raises(ValueError, h)\n    assert excinfo.exconly().startswith(\"ValueError\")\n    with pytest.raises(ValueError) as excinfo:\n        raise ValueError(\"hello\\nworld\")\n    msg = excinfo.exconly(tryshort=True)\n    assert msg.startswith(\"ValueError\")\n    assert msg.endswith(\"world\")\n\n\ndef test_excinfo_repr_str() -> None:\n    excinfo1 = pytest.raises(ValueError, h)\n    assert repr(excinfo1) == \"<ExceptionInfo ValueError() tblen=4>\"\n    assert str(excinfo1) == \"<ExceptionInfo ValueError() tblen=4>\"\n\n    class CustomException(Exception):\n        def __repr__(self):\n            return \"custom_repr\"\n\n    def raises() -> None:\n        raise CustomException()\n\n    excinfo2 = pytest.raises(CustomException, raises)\n    assert repr(excinfo2) == \"<ExceptionInfo custom_repr tblen=2>\"\n    assert str(excinfo2) == \"<ExceptionInfo custom_repr tblen=2>\"\n\n\ndef test_excinfo_for_later() -> None:\n    e = ExceptionInfo[BaseException].for_later()\n    assert \"for raises\" in repr(e)\n    assert \"for raises\" in str(e)\n\n\ndef test_excinfo_errisinstance():\n    excinfo = pytest.raises(ValueError, h)\n    assert excinfo.errisinstance(ValueError)\n\n\ndef test_excinfo_no_sourcecode():\n    try:\n        exec(\"raise ValueError()\")\n    except ValueError:\n        excinfo = _pytest._code.ExceptionInfo.from_current()\n    s = str(excinfo.traceback[-1])\n    # TODO: Since Python 3.13b1 under pytest-xdist, the * is `import\n    # sys;exec(eval(sys.stdin.readline()))` (execnet bootstrap code)\n    # instead of `???` like before. Is this OK?\n    fnmatch.fnmatch(s, \"  File '<string>':1 in <module>\\n  *\\n\")\n\n\ndef test_excinfo_no_python_sourcecode(tmp_path: Path) -> None:\n    # XXX: simplified locally testable version\n    tmp_path.joinpath(\"test.txt\").write_text(\"{{ h()}}:\", encoding=\"utf-8\")\n\n    jinja2 = pytest.importorskip(\"jinja2\")\n    loader = jinja2.FileSystemLoader(str(tmp_path))\n    env = jinja2.Environment(loader=loader)\n    template = env.get_template(\"test.txt\")\n    excinfo = pytest.raises(ValueError, template.render, h=h)\n    for item in excinfo.traceback:\n        print(item)  # XXX: for some reason jinja.Template.render is printed in full\n        _ = item.source  # shouldn't fail\n        if isinstance(item.path, Path) and item.path.name == \"test.txt\":\n            assert str(item.source) == \"{{ h()}}:\"\n\n\ndef test_entrysource_Queue_example():\n    try:\n        queue.Queue().get(timeout=0.001)\n    except queue.Empty:\n        excinfo = _pytest._code.ExceptionInfo.from_current()\n    entry = excinfo.traceback[-1]\n    source = entry.getsource()\n    assert source is not None\n    s = str(source).strip()\n    assert s.startswith(\"def get\")\n\n\ndef test_codepath_Queue_example() -> None:\n    try:\n        queue.Queue().get(timeout=0.001)\n    except queue.Empty:\n        excinfo = _pytest._code.ExceptionInfo.from_current()\n    entry = excinfo.traceback[-1]\n    path = entry.path\n    assert isinstance(path, Path)\n    assert path.name.lower() == \"queue.py\"\n    assert path.exists()\n\n\ndef test_match_succeeds():\n    with pytest.raises(ZeroDivisionError) as excinfo:\n        _ = 0 // 0\n    excinfo.match(r\".*zero.*\")\n\n\ndef test_match_raises_error(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        def test_division_zero():\n            with pytest.raises(ZeroDivisionError) as excinfo:\n                0 / 0\n            excinfo.match(r'[123]+')\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--tb=short\")\n    assert result.ret != 0\n\n    match = [\n        r\"E .* AssertionError: Regex pattern did not match.\",\n        r\"E .* Regex: '\\[123\\]\\+'\",\n        r\"E .* Input: 'division by zero'\",\n    ]\n    result.stdout.re_match_lines(match)\n    result.stdout.no_fnmatch_line(\"*__tracebackhide__ = True*\")\n\n    result = pytester.runpytest(\"--fulltrace\")\n    assert result.ret != 0\n    result.stdout.re_match_lines([r\".*__tracebackhide__ = True.*\", *match])\n\n\nclass TestGroupContains:\n    def test_contains_exception_type(self) -> None:\n        exc_group = ExceptionGroup(\"\", [RuntimeError()])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(RuntimeError)\n\n    def test_doesnt_contain_exception_type(self) -> None:\n        exc_group = ExceptionGroup(\"\", [ValueError()])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert not exc_info.group_contains(RuntimeError)\n\n    def test_contains_exception_match(self) -> None:\n        exc_group = ExceptionGroup(\"\", [RuntimeError(\"exception message\")])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(RuntimeError, match=r\"^exception message$\")\n\n    def test_doesnt_contain_exception_match(self) -> None:\n        exc_group = ExceptionGroup(\"\", [RuntimeError(\"message that will not match\")])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert not exc_info.group_contains(RuntimeError, match=r\"^exception message$\")\n\n    def test_contains_exception_type_unlimited_depth(self) -> None:\n        exc_group = ExceptionGroup(\"\", [ExceptionGroup(\"\", [RuntimeError()])])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(RuntimeError)\n\n    def test_contains_exception_type_at_depth_1(self) -> None:\n        exc_group = ExceptionGroup(\"\", [RuntimeError()])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(RuntimeError, depth=1)\n\n    def test_doesnt_contain_exception_type_past_depth(self) -> None:\n        exc_group = ExceptionGroup(\"\", [ExceptionGroup(\"\", [RuntimeError()])])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert not exc_info.group_contains(RuntimeError, depth=1)\n\n    def test_contains_exception_type_specific_depth(self) -> None:\n        exc_group = ExceptionGroup(\"\", [ExceptionGroup(\"\", [RuntimeError()])])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(RuntimeError, depth=2)\n\n    def test_contains_exception_match_unlimited_depth(self) -> None:\n        exc_group = ExceptionGroup(\n            \"\", [ExceptionGroup(\"\", [RuntimeError(\"exception message\")])]\n        )\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(RuntimeError, match=r\"^exception message$\")\n\n    def test_contains_exception_match_at_depth_1(self) -> None:\n        exc_group = ExceptionGroup(\"\", [RuntimeError(\"exception message\")])\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(\n            RuntimeError, match=r\"^exception message$\", depth=1\n        )\n\n    def test_doesnt_contain_exception_match_past_depth(self) -> None:\n        exc_group = ExceptionGroup(\n            \"\", [ExceptionGroup(\"\", [RuntimeError(\"exception message\")])]\n        )\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert not exc_info.group_contains(\n            RuntimeError, match=r\"^exception message$\", depth=1\n        )\n\n    def test_contains_exception_match_specific_depth(self) -> None:\n        exc_group = ExceptionGroup(\n            \"\", [ExceptionGroup(\"\", [RuntimeError(\"exception message\")])]\n        )\n        with pytest.raises(ExceptionGroup) as exc_info:\n            raise exc_group\n        assert exc_info.group_contains(\n            RuntimeError, match=r\"^exception message$\", depth=2\n        )\n\n\nclass TestFormattedExcinfo:\n    @pytest.fixture\n    def importasmod(self, tmp_path: Path, _sys_snapshot):\n        def importasmod(source):\n            source = textwrap.dedent(source)\n            modpath = tmp_path.joinpath(\"mod.py\")\n            tmp_path.joinpath(\"__init__.py\").touch()\n            modpath.write_text(source, encoding=\"utf-8\")\n            importlib.invalidate_caches()\n            return import_path(\n                modpath, root=tmp_path, consider_namespace_packages=False\n            )\n\n        return importasmod\n\n    def test_repr_source(self):\n        pr = FormattedExcinfo()\n        source = _pytest._code.Source(\n            \"\"\"\\\n            def f(x):\n                pass\n            \"\"\"\n        ).strip()\n        pr.flow_marker = \"|\"  # type: ignore[misc]\n        lines = pr.get_source(source, 0)\n        assert len(lines) == 2\n        assert lines[0] == \"|   def f(x):\"\n        assert lines[1] == \"        pass\"\n\n    def test_repr_source_out_of_bounds(self):\n        pr = FormattedExcinfo()\n        source = _pytest._code.Source(\n            \"\"\"\\\n            def f(x):\n                pass\n            \"\"\"\n        ).strip()\n        pr.flow_marker = \"|\"  # type: ignore[misc]\n\n        lines = pr.get_source(source, 100)\n        assert len(lines) == 1\n        assert lines[0] == \"|   ???\"\n\n        lines = pr.get_source(source, -100)\n        assert len(lines) == 1\n        assert lines[0] == \"|   ???\"\n\n    def test_repr_source_excinfo(self) -> None:\n        \"\"\"Check if indentation is right.\"\"\"\n        try:\n\n            def f():\n                _ = 1 / 0\n\n            f()\n\n        except BaseException:\n            excinfo = _pytest._code.ExceptionInfo.from_current()\n        else:\n            assert False, \"did not raise\"\n\n        pr = FormattedExcinfo()\n        source = pr._getentrysource(excinfo.traceback[-1])\n        assert source is not None\n        lines = pr.get_source(source, 1, excinfo)\n        for line in lines:\n            print(line)\n        assert lines == [\n            \"    def f():\",\n            \">       _ = 1 / 0\",\n            \"E       ZeroDivisionError: division by zero\",\n        ]\n\n    def test_repr_source_not_existing(self):\n        pr = FormattedExcinfo()\n        co = compile(\"raise ValueError()\", \"\", \"exec\")\n        try:\n            exec(co)\n        except ValueError:\n            excinfo = _pytest._code.ExceptionInfo.from_current()\n        repr = pr.repr_excinfo(excinfo)\n        assert repr.reprtraceback.reprentries[1].lines[0] == \">   ???\"\n        assert repr.chain[0][0].reprentries[1].lines[0] == \">   ???\"\n\n    def test_repr_many_line_source_not_existing(self):\n        pr = FormattedExcinfo()\n        co = compile(\n            \"\"\"\na = 1\nraise ValueError()\n\"\"\",\n            \"\",\n            \"exec\",\n        )\n        try:\n            exec(co)\n        except ValueError:\n            excinfo = _pytest._code.ExceptionInfo.from_current()\n        repr = pr.repr_excinfo(excinfo)\n        assert repr.reprtraceback.reprentries[1].lines[0] == \">   ???\"\n        assert repr.chain[0][0].reprentries[1].lines[0] == \">   ???\"\n\n    def test_repr_source_failing_fullsource(self, monkeypatch) -> None:\n        pr = FormattedExcinfo()\n\n        try:\n            _ = 1 / 0\n        except ZeroDivisionError:\n            excinfo = ExceptionInfo.from_current()\n\n        with monkeypatch.context() as m:\n            m.setattr(_pytest._code.Code, \"fullsource\", property(lambda self: None))\n            repr = pr.repr_excinfo(excinfo)\n\n        assert repr.reprtraceback.reprentries[0].lines[0] == \">   ???\"\n        assert repr.chain[0][0].reprentries[0].lines[0] == \">   ???\"\n\n    def test_repr_local(self) -> None:\n        p = FormattedExcinfo(showlocals=True)\n        loc = {\"y\": 5, \"z\": 7, \"x\": 3, \"@x\": 2, \"__builtins__\": {}}\n        reprlocals = p.repr_locals(loc)\n        assert reprlocals is not None\n        assert reprlocals.lines\n        assert reprlocals.lines[0] == \"__builtins__ = <builtins>\"\n        assert reprlocals.lines[1] == \"x          = 3\"\n        assert reprlocals.lines[2] == \"y          = 5\"\n        assert reprlocals.lines[3] == \"z          = 7\"\n\n    def test_repr_local_with_error(self) -> None:\n        class ObjWithErrorInRepr:\n            def __repr__(self):\n                raise NotImplementedError\n\n        p = FormattedExcinfo(showlocals=True, truncate_locals=False)\n        loc = {\"x\": ObjWithErrorInRepr(), \"__builtins__\": {}}\n        reprlocals = p.repr_locals(loc)\n        assert reprlocals is not None\n        assert reprlocals.lines\n        assert reprlocals.lines[0] == \"__builtins__ = <builtins>\"\n        assert \"[NotImplementedError() raised in repr()]\" in reprlocals.lines[1]\n\n    def test_repr_local_with_exception_in_class_property(self) -> None:\n        class ExceptionWithBrokenClass(Exception):\n            # Type ignored because it's bypassed intentionally.\n            @property  # type: ignore\n            def __class__(self):\n                raise TypeError(\"boom!\")\n\n        class ObjWithErrorInRepr:\n            def __repr__(self):\n                raise ExceptionWithBrokenClass()\n\n        p = FormattedExcinfo(showlocals=True, truncate_locals=False)\n        loc = {\"x\": ObjWithErrorInRepr(), \"__builtins__\": {}}\n        reprlocals = p.repr_locals(loc)\n        assert reprlocals is not None\n        assert reprlocals.lines\n        assert reprlocals.lines[0] == \"__builtins__ = <builtins>\"\n        assert \"[ExceptionWithBrokenClass() raised in repr()]\" in reprlocals.lines[1]\n\n    def test_repr_local_truncated(self) -> None:\n        loc = {\"l\": [i for i in range(10)]}\n        p = FormattedExcinfo(showlocals=True)\n        truncated_reprlocals = p.repr_locals(loc)\n        assert truncated_reprlocals is not None\n        assert truncated_reprlocals.lines\n        assert truncated_reprlocals.lines[0] == \"l          = [0, 1, 2, 3, 4, 5, ...]\"\n\n        q = FormattedExcinfo(showlocals=True, truncate_locals=False)\n        full_reprlocals = q.repr_locals(loc)\n        assert full_reprlocals is not None\n        assert full_reprlocals.lines\n        assert full_reprlocals.lines[0] == \"l          = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\"\n\n    def test_repr_args_not_truncated(self, importasmod) -> None:\n        mod = importasmod(\n            \"\"\"\n            def func1(m):\n                raise ValueError(\"hello\\\\nworld\")\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.func1, \"m\" * 500)\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        entry = excinfo.traceback[-1]\n        p = FormattedExcinfo(funcargs=True, truncate_args=True)\n        reprfuncargs = p.repr_args(entry)\n        assert reprfuncargs is not None\n        arg1 = cast(str, reprfuncargs.args[0][1])\n        assert len(arg1) < 500\n        assert \"...\" in arg1\n        # again without truncate\n        p = FormattedExcinfo(funcargs=True, truncate_args=False)\n        reprfuncargs = p.repr_args(entry)\n        assert reprfuncargs is not None\n        assert reprfuncargs.args[0] == (\"m\", repr(\"m\" * 500))\n        assert \"...\" not in cast(str, reprfuncargs.args[0][1])\n\n    def test_repr_tracebackentry_lines(self, importasmod) -> None:\n        mod = importasmod(\n            \"\"\"\n            def func1():\n                raise ValueError(\"hello\\\\nworld\")\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.func1)\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        p = FormattedExcinfo()\n        reprtb = p.repr_traceback_entry(excinfo.traceback[-1])\n\n        # test as intermittent entry\n        lines = reprtb.lines\n        assert lines[0] == \"    def func1():\"\n        assert lines[1] == '>       raise ValueError(\"hello\\\\nworld\")'\n\n        # test as last entry\n        p = FormattedExcinfo(showlocals=True)\n        repr_entry = p.repr_traceback_entry(excinfo.traceback[-1], excinfo)\n        lines = repr_entry.lines\n        assert lines[0] == \"    def func1():\"\n        assert lines[1] == '>       raise ValueError(\"hello\\\\nworld\")'\n        assert lines[2] == \"E       ValueError: hello\"\n        assert lines[3] == \"E       world\"\n        assert not lines[4:]\n\n        loc = repr_entry.reprfileloc\n        assert loc is not None\n        assert loc.path == mod.__file__\n        assert loc.lineno == 3\n        # assert loc.message == \"ValueError: hello\"\n\n    def test_repr_tracebackentry_lines2(self, importasmod, tw_mock) -> None:\n        mod = importasmod(\n            \"\"\"\n            def func1(m, x, y, z):\n                raise ValueError(\"hello\\\\nworld\")\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.func1, \"m\" * 90, 5, 13, \"z\" * 120)\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        entry = excinfo.traceback[-1]\n        p = FormattedExcinfo(funcargs=True)\n        reprfuncargs = p.repr_args(entry)\n        assert reprfuncargs is not None\n        assert reprfuncargs.args[0] == (\"m\", repr(\"m\" * 90))\n        assert reprfuncargs.args[1] == (\"x\", \"5\")\n        assert reprfuncargs.args[2] == (\"y\", \"13\")\n        assert reprfuncargs.args[3] == (\"z\", repr(\"z\" * 120))\n\n        p = FormattedExcinfo(funcargs=True)\n        repr_entry = p.repr_traceback_entry(entry)\n        assert repr_entry.reprfuncargs is not None\n        assert repr_entry.reprfuncargs.args == reprfuncargs.args\n        repr_entry.toterminal(tw_mock)\n        assert tw_mock.lines[0] == \"m = \" + repr(\"m\" * 90)\n        assert tw_mock.lines[1] == \"x = 5, y = 13\"\n        assert tw_mock.lines[2] == \"z = \" + repr(\"z\" * 120)\n\n    def test_repr_tracebackentry_lines_var_kw_args(self, importasmod, tw_mock) -> None:\n        mod = importasmod(\n            \"\"\"\n            def func1(x, *y, **z):\n                raise ValueError(\"hello\\\\nworld\")\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.func1, \"a\", \"b\", c=\"d\")\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        entry = excinfo.traceback[-1]\n        p = FormattedExcinfo(funcargs=True)\n        reprfuncargs = p.repr_args(entry)\n        assert reprfuncargs is not None\n        assert reprfuncargs.args[0] == (\"x\", repr(\"a\"))\n        assert reprfuncargs.args[1] == (\"y\", repr((\"b\",)))\n        assert reprfuncargs.args[2] == (\"z\", repr({\"c\": \"d\"}))\n\n        p = FormattedExcinfo(funcargs=True)\n        repr_entry = p.repr_traceback_entry(entry)\n        assert repr_entry.reprfuncargs\n        assert repr_entry.reprfuncargs.args == reprfuncargs.args\n        repr_entry.toterminal(tw_mock)\n        assert tw_mock.lines[0] == \"x = 'a', y = ('b',), z = {'c': 'd'}\"\n\n    def test_repr_tracebackentry_short(self, importasmod) -> None:\n        mod = importasmod(\n            \"\"\"\n            def func1():\n                raise ValueError(\"hello\")\n            def entry():\n                func1()\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n        p = FormattedExcinfo(style=\"short\")\n        reprtb = p.repr_traceback_entry(excinfo.traceback[-2])\n        lines = reprtb.lines\n        basename = Path(mod.__file__).name\n        assert lines[0] == \"    func1()\"\n        assert reprtb.reprfileloc is not None\n        assert basename in str(reprtb.reprfileloc.path)\n        assert reprtb.reprfileloc.lineno == 5\n\n        # test last entry\n        p = FormattedExcinfo(style=\"short\")\n        reprtb = p.repr_traceback_entry(excinfo.traceback[-1], excinfo)\n        lines = reprtb.lines\n        assert lines[0] == '    raise ValueError(\"hello\")'\n        assert lines[1] == \"E   ValueError: hello\"\n        assert reprtb.reprfileloc is not None\n        assert basename in str(reprtb.reprfileloc.path)\n        assert reprtb.reprfileloc.lineno == 3\n\n    def test_repr_tracebackentry_no(self, importasmod):\n        mod = importasmod(\n            \"\"\"\n            def func1():\n                raise ValueError(\"hello\")\n            def entry():\n                func1()\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n        p = FormattedExcinfo(style=\"no\")\n        p.repr_traceback_entry(excinfo.traceback[-2])\n\n        p = FormattedExcinfo(style=\"no\")\n        reprentry = p.repr_traceback_entry(excinfo.traceback[-1], excinfo)\n        lines = reprentry.lines\n        assert lines[0] == \"E   ValueError: hello\"\n        assert not lines[1:]\n\n    def test_repr_traceback_tbfilter(self, importasmod):\n        mod = importasmod(\n            \"\"\"\n            def f(x):\n                raise ValueError(x)\n            def entry():\n                f(0)\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n        p = FormattedExcinfo(tbfilter=True)\n        reprtb = p.repr_traceback(excinfo)\n        assert len(reprtb.reprentries) == 2\n        p = FormattedExcinfo(tbfilter=False)\n        reprtb = p.repr_traceback(excinfo)\n        assert len(reprtb.reprentries) == 3\n\n    def test_traceback_short_no_source(\n        self,\n        importasmod,\n        monkeypatch: pytest.MonkeyPatch,\n    ) -> None:\n        mod = importasmod(\n            \"\"\"\n            def func1():\n                raise ValueError(\"hello\")\n            def entry():\n                func1()\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n        from _pytest._code.code import Code\n\n        with monkeypatch.context() as mp:\n            mp.setattr(Code, \"path\", \"bogus\")\n            p = FormattedExcinfo(style=\"short\")\n            reprtb = p.repr_traceback_entry(excinfo.traceback[-2])\n            lines = reprtb.lines\n            last_p = FormattedExcinfo(style=\"short\")\n            last_reprtb = last_p.repr_traceback_entry(excinfo.traceback[-1], excinfo)\n            last_lines = last_reprtb.lines\n        assert lines[0] == \"    func1()\"\n\n        assert last_lines[0] == '    raise ValueError(\"hello\")'\n        assert last_lines[1] == \"E   ValueError: hello\"\n\n    def test_repr_traceback_and_excinfo(self, importasmod) -> None:\n        mod = importasmod(\n            \"\"\"\n            def f(x):\n                raise ValueError(x)\n            def entry():\n                f(0)\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n\n        styles: tuple[TracebackStyle, ...] = (\"long\", \"short\")\n        for style in styles:\n            p = FormattedExcinfo(style=style)\n            reprtb = p.repr_traceback(excinfo)\n            assert len(reprtb.reprentries) == 2\n            assert reprtb.style == style\n            assert not reprtb.extraline\n            repr = p.repr_excinfo(excinfo)\n            assert repr.reprtraceback\n            assert len(repr.reprtraceback.reprentries) == len(reprtb.reprentries)\n\n            assert repr.chain[0][0]\n            assert len(repr.chain[0][0].reprentries) == len(reprtb.reprentries)\n            assert repr.reprcrash is not None\n            assert repr.reprcrash.path.endswith(\"mod.py\")\n            assert repr.reprcrash.message == \"ValueError: 0\"\n\n    def test_repr_traceback_with_invalid_cwd(self, importasmod, monkeypatch) -> None:\n        mod = importasmod(\n            \"\"\"\n            def f(x):\n                raise ValueError(x)\n            def entry():\n                f(0)\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n\n        p = FormattedExcinfo(abspath=False)\n\n        raised = 0\n\n        orig_path_cwd = Path.cwd\n\n        def raiseos():\n            nonlocal raised\n            upframe = sys._getframe().f_back\n            assert upframe is not None\n            if upframe.f_code.co_name == \"_makepath\":\n                # Only raise with expected calls, but not via e.g. inspect for\n                # py38-windows.\n                raised += 1\n                raise OSError(2, \"custom_oserror\")\n            return orig_path_cwd()\n\n        monkeypatch.setattr(Path, \"cwd\", raiseos)\n        assert p._makepath(Path(__file__)) == __file__\n        assert raised == 1\n        repr_tb = p.repr_traceback(excinfo)\n\n        matcher = LineMatcher(str(repr_tb).splitlines())\n        matcher.fnmatch_lines(\n            [\n                \"def entry():\",\n                \">       f(0)\",\n                \"\",\n                f\"{mod.__file__}:5: \",\n                \"_ _ *\",\n                \"\",\n                \"    def f(x):\",\n                \">       raise ValueError(x)\",\n                \"E       ValueError: 0\",\n                \"\",\n                f\"{mod.__file__}:3: ValueError\",\n            ]\n        )\n        assert raised == 3\n\n    def test_repr_excinfo_addouterr(self, importasmod, tw_mock):\n        mod = importasmod(\n            \"\"\"\n            def entry():\n                raise ValueError()\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n        repr = excinfo.getrepr()\n        repr.addsection(\"title\", \"content\")\n        repr.toterminal(tw_mock)\n        assert tw_mock.lines[-1] == \"content\"\n        assert tw_mock.lines[-2] == (\"-\", \"title\")\n\n    def test_repr_excinfo_reprcrash(self, importasmod) -> None:\n        mod = importasmod(\n            \"\"\"\n            def entry():\n                raise ValueError()\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n        repr = excinfo.getrepr()\n        assert repr.reprcrash is not None\n        assert repr.reprcrash.path.endswith(\"mod.py\")\n        assert repr.reprcrash.lineno == 3\n        assert repr.reprcrash.message == \"ValueError\"\n        assert str(repr.reprcrash).endswith(\"mod.py:3: ValueError\")\n\n    def test_repr_traceback_recursion(self, importasmod):\n        mod = importasmod(\n            \"\"\"\n            def rec2(x):\n                return rec1(x+1)\n            def rec1(x):\n                return rec2(x-1)\n            def entry():\n                rec1(42)\n        \"\"\"\n        )\n        excinfo = pytest.raises(RuntimeError, mod.entry)\n\n        for style in (\"short\", \"long\", \"no\"):\n            p = FormattedExcinfo(style=\"short\")\n            reprtb = p.repr_traceback(excinfo)\n            assert reprtb.extraline == \"!!! Recursion detected (same locals & position)\"\n            assert str(reprtb)\n\n    def test_reprexcinfo_getrepr(self, importasmod) -> None:\n        mod = importasmod(\n            \"\"\"\n            def f(x):\n                raise ValueError(x)\n            def entry():\n                f(0)\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.entry)\n\n        styles: tuple[TracebackStyle, ...] = (\"short\", \"long\", \"no\")\n        for style in styles:\n            for showlocals in (True, False):\n                repr = excinfo.getrepr(style=style, showlocals=showlocals)\n                assert repr.reprtraceback.style == style\n\n                assert isinstance(repr, ExceptionChainRepr)\n                for r in repr.chain:\n                    assert r[0].style == style\n\n    def test_reprexcinfo_unicode(self):\n        from _pytest._code.code import TerminalRepr\n\n        class MyRepr(TerminalRepr):\n            def toterminal(self, tw: TerminalWriter) -> None:\n                tw.line(\"\u044f\")\n\n        x = str(MyRepr())\n        assert x == \"\u044f\"\n\n    def test_toterminal_long(self, importasmod, tw_mock):\n        mod = importasmod(\n            \"\"\"\n            def g(x):\n                raise ValueError(x)\n            def f():\n                g(3)\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.f)\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        repr = excinfo.getrepr()\n        repr.toterminal(tw_mock)\n        assert tw_mock.lines[0] == \"\"\n        tw_mock.lines.pop(0)\n        assert tw_mock.lines[0] == \"    def f():\"\n        assert tw_mock.lines[1] == \">       g(3)\"\n        assert tw_mock.lines[2] == \"\"\n        line = tw_mock.get_write_msg(3)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[4] == (\":5: \")\n        assert tw_mock.lines[5] == (\"_ \", None)\n        assert tw_mock.lines[6] == \"\"\n        assert tw_mock.lines[7] == \"    def g(x):\"\n        assert tw_mock.lines[8] == \">       raise ValueError(x)\"\n        assert tw_mock.lines[9] == \"E       ValueError: 3\"\n        assert tw_mock.lines[10] == \"\"\n        line = tw_mock.get_write_msg(11)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[12] == \":3: ValueError\"\n\n    def test_toterminal_long_missing_source(\n        self, importasmod, tmp_path: Path, tw_mock\n    ) -> None:\n        mod = importasmod(\n            \"\"\"\n            def g(x):\n                raise ValueError(x)\n            def f():\n                g(3)\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.f)\n        tmp_path.joinpath(\"mod.py\").unlink()\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        repr = excinfo.getrepr()\n        repr.toterminal(tw_mock)\n        assert tw_mock.lines[0] == \"\"\n        tw_mock.lines.pop(0)\n        assert tw_mock.lines[0] == \">   ???\"\n        assert tw_mock.lines[1] == \"\"\n        line = tw_mock.get_write_msg(2)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[3] == \":5: \"\n        assert tw_mock.lines[4] == (\"_ \", None)\n        assert tw_mock.lines[5] == \"\"\n        assert tw_mock.lines[6] == \">   ???\"\n        assert tw_mock.lines[7] == \"E   ValueError: 3\"\n        assert tw_mock.lines[8] == \"\"\n        line = tw_mock.get_write_msg(9)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[10] == \":3: ValueError\"\n\n    def test_toterminal_long_incomplete_source(\n        self, importasmod, tmp_path: Path, tw_mock\n    ) -> None:\n        mod = importasmod(\n            \"\"\"\n            def g(x):\n                raise ValueError(x)\n            def f():\n                g(3)\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.f)\n        tmp_path.joinpath(\"mod.py\").write_text(\"asdf\", encoding=\"utf-8\")\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        repr = excinfo.getrepr()\n        repr.toterminal(tw_mock)\n        assert tw_mock.lines[0] == \"\"\n        tw_mock.lines.pop(0)\n        assert tw_mock.lines[0] == \">   ???\"\n        assert tw_mock.lines[1] == \"\"\n        line = tw_mock.get_write_msg(2)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[3] == \":5: \"\n        assert tw_mock.lines[4] == (\"_ \", None)\n        assert tw_mock.lines[5] == \"\"\n        assert tw_mock.lines[6] == \">   ???\"\n        assert tw_mock.lines[7] == \"E   ValueError: 3\"\n        assert tw_mock.lines[8] == \"\"\n        line = tw_mock.get_write_msg(9)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[10] == \":3: ValueError\"\n\n    def test_toterminal_long_filenames(\n        self, importasmod, tw_mock, monkeypatch: MonkeyPatch\n    ) -> None:\n        mod = importasmod(\n            \"\"\"\n            def f():\n                raise ValueError()\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.f)\n        path = Path(mod.__file__)\n        monkeypatch.chdir(path.parent)\n        repr = excinfo.getrepr(abspath=False)\n        repr.toterminal(tw_mock)\n        x = bestrelpath(Path.cwd(), path)\n        if len(x) < len(str(path)):\n            msg = tw_mock.get_write_msg(-2)\n            assert msg == \"mod.py\"\n            assert tw_mock.lines[-1] == \":3: ValueError\"\n\n        repr = excinfo.getrepr(abspath=True)\n        repr.toterminal(tw_mock)\n        msg = tw_mock.get_write_msg(-2)\n        assert msg == str(path)\n        line = tw_mock.lines[-1]\n        assert line == \":3: ValueError\"\n\n    @pytest.mark.parametrize(\n        \"reproptions\",\n        [\n            pytest.param(\n                {\n                    \"style\": style,\n                    \"showlocals\": showlocals,\n                    \"funcargs\": funcargs,\n                    \"tbfilter\": tbfilter,\n                },\n                id=f\"style={style},showlocals={showlocals},funcargs={funcargs},tbfilter={tbfilter}\",\n            )\n            for style in [\"long\", \"short\", \"line\", \"no\", \"native\", \"value\", \"auto\"]\n            for showlocals in (True, False)\n            for tbfilter in (True, False)\n            for funcargs in (True, False)\n        ],\n    )\n    def test_format_excinfo(self, reproptions: dict[str, Any]) -> None:\n        def bar():\n            assert False, \"some error\"\n\n        def foo():\n            bar()\n\n        # using inline functions as opposed to importasmod so we get source code lines\n        # in the tracebacks (otherwise getinspect doesn't find the source code).\n        with pytest.raises(AssertionError) as excinfo:\n            foo()\n        file = io.StringIO()\n        tw = TerminalWriter(file=file)\n        repr = excinfo.getrepr(**reproptions)\n        repr.toterminal(tw)\n        assert file.getvalue()\n\n    def test_traceback_repr_style(self, importasmod, tw_mock):\n        mod = importasmod(\n            \"\"\"\n            def f():\n                g()\n            def g():\n                h()\n            def h():\n                i()\n            def i():\n                raise ValueError()\n        \"\"\"\n        )\n        excinfo = pytest.raises(ValueError, mod.f)\n        excinfo.traceback = excinfo.traceback.filter(excinfo)\n        excinfo.traceback = _pytest._code.Traceback(\n            entry if i not in (1, 2) else entry.with_repr_style(\"short\")\n            for i, entry in enumerate(excinfo.traceback)\n        )\n        r = excinfo.getrepr(style=\"long\")\n        r.toterminal(tw_mock)\n        for line in tw_mock.lines:\n            print(line)\n        assert tw_mock.lines[0] == \"\"\n        assert tw_mock.lines[1] == \"    def f():\"\n        assert tw_mock.lines[2] == \">       g()\"\n        assert tw_mock.lines[3] == \"\"\n        msg = tw_mock.get_write_msg(4)\n        assert msg.endswith(\"mod.py\")\n        assert tw_mock.lines[5] == \":3: \"\n        assert tw_mock.lines[6] == (\"_ \", None)\n        tw_mock.get_write_msg(7)\n        assert tw_mock.lines[8].endswith(\"in g\")\n        assert tw_mock.lines[9] == \"    h()\"\n        tw_mock.get_write_msg(10)\n        assert tw_mock.lines[11].endswith(\"in h\")\n        assert tw_mock.lines[12] == \"    i()\"\n        assert tw_mock.lines[13] == (\"_ \", None)\n        assert tw_mock.lines[14] == \"\"\n        assert tw_mock.lines[15] == \"    def i():\"\n        assert tw_mock.lines[16] == \">       raise ValueError()\"\n        assert tw_mock.lines[17] == \"E       ValueError\"\n        assert tw_mock.lines[18] == \"\"\n        msg = tw_mock.get_write_msg(19)\n        msg.endswith(\"mod.py\")\n        assert tw_mock.lines[20] == \":9: ValueError\"\n\n    def test_exc_chain_repr(self, importasmod, tw_mock):\n        mod = importasmod(\n            \"\"\"\n            class Err(Exception):\n                pass\n            def f():\n                try:\n                    g()\n                except Exception as e:\n                    raise Err() from e\n                finally:\n                    h()\n            def g():\n                raise ValueError()\n\n            def h():\n                raise AttributeError()\n        \"\"\"\n        )\n        excinfo = pytest.raises(AttributeError, mod.f)\n        r = excinfo.getrepr(style=\"long\")\n        r.toterminal(tw_mock)\n        for line in tw_mock.lines:\n            print(line)\n        assert tw_mock.lines[0] == \"\"\n        assert tw_mock.lines[1] == \"    def f():\"\n        assert tw_mock.lines[2] == \"        try:\"\n        assert tw_mock.lines[3] == \">           g()\"\n        assert tw_mock.lines[4] == \"\"\n        line = tw_mock.get_write_msg(5)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[6] == \":6: \"\n        assert tw_mock.lines[7] == (\"_ \", None)\n        assert tw_mock.lines[8] == \"\"\n        assert tw_mock.lines[9] == \"    def g():\"\n        assert tw_mock.lines[10] == \">       raise ValueError()\"\n        assert tw_mock.lines[11] == \"E       ValueError\"\n        assert tw_mock.lines[12] == \"\"\n        line = tw_mock.get_write_msg(13)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[14] == \":12: ValueError\"\n        assert tw_mock.lines[15] == \"\"\n        assert (\n            tw_mock.lines[16]\n            == \"The above exception was the direct cause of the following exception:\"\n        )\n        assert tw_mock.lines[17] == \"\"\n        assert tw_mock.lines[18] == \"    def f():\"\n        assert tw_mock.lines[19] == \"        try:\"\n        assert tw_mock.lines[20] == \"            g()\"\n        assert tw_mock.lines[21] == \"        except Exception as e:\"\n        assert tw_mock.lines[22] == \">           raise Err() from e\"\n        assert tw_mock.lines[23] == \"E           test_exc_chain_repr0.mod.Err\"\n        assert tw_mock.lines[24] == \"\"\n        line = tw_mock.get_write_msg(25)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[26] == \":8: Err\"\n        assert tw_mock.lines[27] == \"\"\n        assert (\n            tw_mock.lines[28]\n            == \"During handling of the above exception, another exception occurred:\"\n        )\n        assert tw_mock.lines[29] == \"\"\n        assert tw_mock.lines[30] == \"    def f():\"\n        assert tw_mock.lines[31] == \"        try:\"\n        assert tw_mock.lines[32] == \"            g()\"\n        assert tw_mock.lines[33] == \"        except Exception as e:\"\n        assert tw_mock.lines[34] == \"            raise Err() from e\"\n        assert tw_mock.lines[35] == \"        finally:\"\n        assert tw_mock.lines[36] == \">           h()\"\n        assert tw_mock.lines[37] == \"\"\n        line = tw_mock.get_write_msg(38)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[39] == \":10: \"\n        assert tw_mock.lines[40] == (\"_ \", None)\n        assert tw_mock.lines[41] == \"\"\n        assert tw_mock.lines[42] == \"    def h():\"\n        assert tw_mock.lines[43] == \">       raise AttributeError()\"\n        assert tw_mock.lines[44] == \"E       AttributeError\"\n        assert tw_mock.lines[45] == \"\"\n        line = tw_mock.get_write_msg(46)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[47] == \":15: AttributeError\"\n\n    @pytest.mark.parametrize(\"mode\", [\"from_none\", \"explicit_suppress\"])\n    def test_exc_repr_chain_suppression(self, importasmod, mode, tw_mock):\n        \"\"\"Check that exc repr does not show chained exceptions in Python 3.\n        - When the exception is raised with \"from None\"\n        - Explicitly suppressed with \"chain=False\" to ExceptionInfo.getrepr().\n        \"\"\"\n        raise_suffix = \" from None\" if mode == \"from_none\" else \"\"\n        mod = importasmod(\n            f\"\"\"\n            def f():\n                try:\n                    g()\n                except Exception:\n                    raise AttributeError(){raise_suffix}\n            def g():\n                raise ValueError()\n        \"\"\"\n        )\n        excinfo = pytest.raises(AttributeError, mod.f)\n        r = excinfo.getrepr(style=\"long\", chain=mode != \"explicit_suppress\")\n        r.toterminal(tw_mock)\n        for line in tw_mock.lines:\n            print(line)\n        assert tw_mock.lines[0] == \"\"\n        assert tw_mock.lines[1] == \"    def f():\"\n        assert tw_mock.lines[2] == \"        try:\"\n        assert tw_mock.lines[3] == \"            g()\"\n        assert tw_mock.lines[4] == \"        except Exception:\"\n        assert tw_mock.lines[5] == f\">           raise AttributeError(){raise_suffix}\"\n        assert tw_mock.lines[6] == \"E           AttributeError\"\n        assert tw_mock.lines[7] == \"\"\n        line = tw_mock.get_write_msg(8)\n        assert line.endswith(\"mod.py\")\n        assert tw_mock.lines[9] == \":6: AttributeError\"\n        assert len(tw_mock.lines) == 10\n\n    @pytest.mark.parametrize(\n        \"reason, description\",\n        [\n            pytest.param(\n                \"cause\",\n                \"The above exception was the direct cause of the following exception:\",\n                id=\"cause\",\n            ),\n            pytest.param(\n                \"context\",\n                \"During handling of the above exception, another exception occurred:\",\n                id=\"context\",\n            ),\n        ],\n    )\n    def test_exc_chain_repr_without_traceback(self, importasmod, reason, description):\n        \"\"\"\n        Handle representation of exception chains where one of the exceptions doesn't have a\n        real traceback, such as those raised in a subprocess submitted by the multiprocessing\n        module (#1984).\n        \"\"\"\n        exc_handling_code = \" from e\" if reason == \"cause\" else \"\"\n        mod = importasmod(\n            f\"\"\"\n            def f():\n                try:\n                    g()\n                except Exception as e:\n                    raise RuntimeError('runtime problem'){exc_handling_code}\n            def g():\n                raise ValueError('invalid value')\n        \"\"\"\n        )\n\n        with pytest.raises(RuntimeError) as excinfo:\n            mod.f()\n\n        # emulate the issue described in #1984\n        attr = f\"__{reason}__\"\n        getattr(excinfo.value, attr).__traceback__ = None\n\n        r = excinfo.getrepr()\n        file = io.StringIO()\n        tw = TerminalWriter(file=file)\n        tw.hasmarkup = False\n        r.toterminal(tw)\n\n        matcher = LineMatcher(file.getvalue().splitlines())\n        matcher.fnmatch_lines(\n            [\n                \"ValueError: invalid value\",\n                description,\n                \"* except Exception as e:\",\n                \"> * raise RuntimeError('runtime problem')\" + exc_handling_code,\n                \"E *RuntimeError: runtime problem\",\n            ]\n        )\n\n    def test_exc_chain_repr_cycle(self, importasmod, tw_mock):\n        mod = importasmod(\n            \"\"\"\n            class Err(Exception):\n                pass\n            def fail():\n                return 0 / 0\n            def reraise():\n                try:\n                    fail()\n                except ZeroDivisionError as e:\n                    raise Err() from e\n            def unreraise():\n                try:\n                    reraise()\n                except Err as e:\n                    raise e.__cause__\n        \"\"\"\n        )\n        excinfo = pytest.raises(ZeroDivisionError, mod.unreraise)\n        r = excinfo.getrepr(style=\"short\")\n        r.toterminal(tw_mock)\n        out = \"\\n\".join(line for line in tw_mock.lines if isinstance(line, str))\n        expected_out = textwrap.dedent(\n            \"\"\"\\\n            :13: in unreraise\n                reraise()\n            :10: in reraise\n                raise Err() from e\n            E   test_exc_chain_repr_cycle0.mod.Err\n\n            During handling of the above exception, another exception occurred:\n            :15: in unreraise\n                raise e.__cause__\n            :8: in reraise\n                fail()\n            :5: in fail\n                return 0 / 0\n            E   ZeroDivisionError: division by zero\"\"\"\n        )\n        assert out == expected_out\n\n    def test_exec_type_error_filter(self, importasmod):\n        \"\"\"See #7742\"\"\"\n        mod = importasmod(\n            \"\"\"\\\n            def f():\n                exec(\"a = 1\", {}, [])\n            \"\"\"\n        )\n        with pytest.raises(TypeError) as excinfo:\n            mod.f()\n        # previously crashed with `AttributeError: list has no attribute get`\n        excinfo.traceback.filter(excinfo)\n\n\n@pytest.mark.parametrize(\"style\", [\"short\", \"long\"])\n@pytest.mark.parametrize(\"encoding\", [None, \"utf8\", \"utf16\"])\ndef test_repr_traceback_with_unicode(style, encoding):\n    if encoding is None:\n        msg: str | bytes = \"\u2639\"\n    else:\n        msg = \"\u2639\".encode(encoding)\n    try:\n        raise RuntimeError(msg)\n    except RuntimeError:\n        e_info = ExceptionInfo.from_current()\n    formatter = FormattedExcinfo(style=style)\n    repr_traceback = formatter.repr_traceback(e_info)\n    assert repr_traceback is not None\n\n\ndef test_cwd_deleted(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import os\n\n        def test(tmp_path):\n            os.chdir(tmp_path)\n            tmp_path.unlink()\n            assert False\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"* 1 failed in *\"])\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR*\")\n    result.stderr.no_fnmatch_line(\"*INTERNALERROR*\")\n\n\ndef test_regression_negative_line_index(pytester: Pytester) -> None:\n    \"\"\"\n    With Python 3.10 alphas, there was an INTERNALERROR reported in\n    https://github.com/pytest-dev/pytest/pull/8227\n    This test ensures it does not regress.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import ast\n        import pytest\n\n\n        def test_literal_eval():\n            with pytest.raises(ValueError, match=\"^$\"):\n                ast.literal_eval(\"pytest\")\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"* 1 failed in *\"])\n    result.stdout.no_fnmatch_line(\"*INTERNALERROR*\")\n    result.stderr.no_fnmatch_line(\"*INTERNALERROR*\")\n\n\n@pytest.mark.usefixtures(\"limited_recursion_depth\")\ndef test_exception_repr_extraction_error_on_recursion():\n    \"\"\"\n    Ensure we can properly detect a recursion error even\n    if some locals raise error on comparison (#2459).\n    \"\"\"\n\n    class numpy_like:\n        def __eq__(self, other):\n            if type(other) is numpy_like:\n                raise ValueError(\n                    \"The truth value of an array \"\n                    \"with more than one element is ambiguous.\"\n                )\n\n    def a(x):\n        return b(numpy_like())\n\n    def b(x):\n        return a(numpy_like())\n\n    with pytest.raises(RuntimeError) as excinfo:\n        a(numpy_like())\n\n    matcher = LineMatcher(str(excinfo.getrepr()).splitlines())\n    matcher.fnmatch_lines(\n        [\n            \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\",\n            \"*The following exception happened*\",\n            \"*ValueError: The truth value of an array*\",\n        ]\n    )\n\n\n@pytest.mark.usefixtures(\"limited_recursion_depth\")\ndef test_no_recursion_index_on_recursion_error():\n    \"\"\"\n    Ensure that we don't break in case we can't find the recursion index\n    during a recursion error (#2486).\n    \"\"\"\n\n    class RecursionDepthError:\n        def __getattr__(self, attr):\n            return getattr(self, \"_\" + attr)\n\n    with pytest.raises(RuntimeError) as excinfo:\n        _ = RecursionDepthError().trigger\n    assert \"maximum recursion\" in str(excinfo.getrepr())\n\n\ndef _exceptiongroup_common(\n    pytester: Pytester,\n    outer_chain: str,\n    inner_chain: str,\n    native: bool,\n) -> None:\n    pre_raise = \"exceptiongroup.\" if not native else \"\"\n    pre_catch = pre_raise if sys.version_info < (3, 11) else \"\"\n    filestr = f\"\"\"\n    {\"import exceptiongroup\" if not native else \"\"}\n    import pytest\n\n    def f(): raise ValueError(\"From f()\")\n    def g(): raise BaseException(\"From g()\")\n\n    def inner(inner_chain):\n        excs = []\n        for callback in [f, g]:\n            try:\n                callback()\n            except BaseException as err:\n                excs.append(err)\n        if excs:\n            if inner_chain == \"none\":\n                raise {pre_raise}BaseExceptionGroup(\"Oops\", excs)\n            try:\n                raise SyntaxError()\n            except SyntaxError as e:\n                if inner_chain == \"from\":\n                    raise {pre_raise}BaseExceptionGroup(\"Oops\", excs) from e\n                else:\n                    raise {pre_raise}BaseExceptionGroup(\"Oops\", excs)\n\n    def outer(outer_chain, inner_chain):\n        try:\n            inner(inner_chain)\n        except {pre_catch}BaseExceptionGroup as e:\n            if outer_chain == \"none\":\n                raise\n            if outer_chain == \"from\":\n                raise IndexError() from e\n            else:\n                raise IndexError()\n\n\n    def test():\n        outer(\"{outer_chain}\", \"{inner_chain}\")\n    \"\"\"\n    pytester.makepyfile(test_excgroup=filestr)\n    result = pytester.runpytest()\n    match_lines = []\n    if inner_chain in (\"another\", \"from\"):\n        match_lines.append(r\"SyntaxError: <no detail available>\")\n\n    match_lines += [\n        r\"  + Exception Group Traceback (most recent call last):\",\n        rf\"  \\| {pre_catch}BaseExceptionGroup: Oops \\(2 sub-exceptions\\)\",\n        r\"    \\| ValueError: From f\\(\\)\",\n        r\"    \\| BaseException: From g\\(\\)\",\n        r\"=* short test summary info =*\",\n    ]\n    if outer_chain in (\"another\", \"from\"):\n        match_lines.append(r\"FAILED test_excgroup.py::test - IndexError\")\n    else:\n        match_lines.append(\n            rf\"FAILED test_excgroup.py::test - {pre_catch}BaseExceptionGroup: Oops \\(2.*\"\n        )\n    result.stdout.re_match_lines(match_lines)\n\n\n@pytest.mark.skipif(\n    sys.version_info < (3, 11), reason=\"Native ExceptionGroup not implemented\"\n)\n@pytest.mark.parametrize(\"outer_chain\", [\"none\", \"from\", \"another\"])\n@pytest.mark.parametrize(\"inner_chain\", [\"none\", \"from\", \"another\"])\ndef test_native_exceptiongroup(pytester: Pytester, outer_chain, inner_chain) -> None:\n    _exceptiongroup_common(pytester, outer_chain, inner_chain, native=True)\n\n\n@pytest.mark.parametrize(\"outer_chain\", [\"none\", \"from\", \"another\"])\n@pytest.mark.parametrize(\"inner_chain\", [\"none\", \"from\", \"another\"])\ndef test_exceptiongroup(pytester: Pytester, outer_chain, inner_chain) -> None:\n    # with py>=3.11 does not depend on exceptiongroup, though there is a toxenv for it\n    pytest.importorskip(\"exceptiongroup\")\n    _exceptiongroup_common(pytester, outer_chain, inner_chain, native=False)\n\n\n@pytest.mark.parametrize(\"tbstyle\", (\"long\", \"short\", \"auto\", \"line\", \"native\"))\ndef test_all_entries_hidden(pytester: Pytester, tbstyle: str) -> None:\n    \"\"\"Regression test for #10903.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        def test():\n            __tracebackhide__ = True\n            1 / 0\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--tb\", tbstyle)\n    assert result.ret == 1\n    if tbstyle != \"line\":\n        result.stdout.fnmatch_lines([\"*ZeroDivisionError: division by zero\"])\n    if tbstyle not in (\"line\", \"native\"):\n        result.stdout.fnmatch_lines([\"All traceback entries are hidden.*\"])\n\n\ndef test_hidden_entries_of_chained_exceptions_are_not_shown(pytester: Pytester) -> None:\n    \"\"\"Hidden entries of chained exceptions are not shown (#1904).\"\"\"\n    p = pytester.makepyfile(\n        \"\"\"\n        def g1():\n            __tracebackhide__ = True\n            str.does_not_exist\n\n        def f3():\n            __tracebackhide__ = True\n            1 / 0\n\n        def f2():\n            try:\n                f3()\n            except Exception:\n                g1()\n\n        def f1():\n            __tracebackhide__ = True\n            f2()\n\n        def test():\n            f1()\n        \"\"\"\n    )\n    result = pytester.runpytest(str(p), \"--tb=short\")\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        [\n            \"*.py:11: in f2\",\n            \"    f3()\",\n            \"E   ZeroDivisionError: division by zero\",\n            \"\",\n            \"During handling of the above exception, another exception occurred:\",\n            \"*.py:20: in test\",\n            \"    f1()\",\n            \"*.py:13: in f2\",\n            \"    g1()\",\n            \"E   AttributeError:*'does_not_exist'\",\n        ],\n        consecutive=True,\n    )\n\n\ndef add_note(err: BaseException, msg: str) -> None:\n    \"\"\"Adds a note to an exception inplace.\"\"\"\n    if sys.version_info < (3, 11):\n        err.__notes__ = [*getattr(err, \"__notes__\", []), msg]  # type: ignore[attr-defined]\n    else:\n        err.add_note(msg)\n\n\n@pytest.mark.parametrize(\n    \"error,notes,match\",\n    [\n        (Exception(\"test\"), [], \"test\"),\n        (AssertionError(\"foo\"), [\"bar\"], \"bar\"),\n        (AssertionError(\"foo\"), [\"bar\", \"baz\"], \"bar\"),\n        (AssertionError(\"foo\"), [\"bar\", \"baz\"], \"baz\"),\n        (ValueError(\"foo\"), [\"bar\", \"baz\"], re.compile(r\"bar\\nbaz\", re.MULTILINE)),\n        (ValueError(\"foo\"), [\"bar\", \"baz\"], re.compile(r\"BAZ\", re.IGNORECASE)),\n    ],\n)\ndef test_check_error_notes_success(\n    error: Exception, notes: list[str], match: str\n) -> None:\n    for note in notes:\n        add_note(error, note)\n\n    with pytest.raises(Exception, match=match):\n        raise error\n\n\n@pytest.mark.parametrize(\n    \"error, notes, match\",\n    [\n        (Exception(\"test\"), [], \"foo\"),\n        (AssertionError(\"foo\"), [\"bar\"], \"baz\"),\n        (AssertionError(\"foo\"), [\"bar\"], \"foo\\nbaz\"),\n    ],\n)\ndef test_check_error_notes_failure(\n    error: Exception, notes: list[str], match: str\n) -> None:\n    for note in notes:\n        add_note(error, note)\n\n    with pytest.raises(AssertionError):\n        with pytest.raises(type(error), match=match):\n            raise error\n", "testing/code/test_code.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport re\nimport sys\nfrom types import FrameType\nfrom unittest import mock\n\nfrom _pytest._code import Code\nfrom _pytest._code import ExceptionInfo\nfrom _pytest._code import Frame\nfrom _pytest._code import Source\nfrom _pytest._code.code import ExceptionChainRepr\nfrom _pytest._code.code import ReprFuncArgs\nimport pytest\n\n\ndef test_ne() -> None:\n    code1 = Code(compile('foo = \"bar\"', \"\", \"exec\"))\n    assert code1 == code1\n    code2 = Code(compile('foo = \"baz\"', \"\", \"exec\"))\n    assert code2 != code1\n\n\ndef test_code_gives_back_name_for_not_existing_file() -> None:\n    name = \"abc-123\"\n    co_code = compile(\"pass\\n\", name, \"exec\")\n    assert co_code.co_filename == name\n    code = Code(co_code)\n    assert str(code.path) == name\n    assert code.fullsource is None\n\n\ndef test_code_from_function_with_class() -> None:\n    class A:\n        pass\n\n    with pytest.raises(TypeError):\n        Code.from_function(A)\n\n\ndef x() -> None:\n    raise NotImplementedError()\n\n\ndef test_code_fullsource() -> None:\n    code = Code.from_function(x)\n    full = code.fullsource\n    assert \"test_code_fullsource()\" in str(full)\n\n\ndef test_code_source() -> None:\n    code = Code.from_function(x)\n    src = code.source()\n    expected = \"\"\"def x() -> None:\n    raise NotImplementedError()\"\"\"\n    assert str(src) == expected\n\n\ndef test_frame_getsourcelineno_myself() -> None:\n    def func() -> FrameType:\n        return sys._getframe(0)\n\n    f = Frame(func())\n    source, lineno = f.code.fullsource, f.lineno\n    assert source is not None\n    assert source[lineno].startswith(\"        return sys._getframe(0)\")\n\n\ndef test_getstatement_empty_fullsource() -> None:\n    def func() -> FrameType:\n        return sys._getframe(0)\n\n    f = Frame(func())\n    with mock.patch.object(f.code.__class__, \"fullsource\", None):\n        assert f.statement == Source(\"\")\n\n\ndef test_code_from_func() -> None:\n    co = Code.from_function(test_frame_getsourcelineno_myself)\n    assert co.firstlineno\n    assert co.path\n\n\ndef test_unicode_handling() -> None:\n    value = \"\u0105\u0107\".encode()\n\n    def f() -> None:\n        raise Exception(value)\n\n    excinfo = pytest.raises(Exception, f)\n    str(excinfo)\n\n\ndef test_code_getargs() -> None:\n    def f1(x):\n        raise NotImplementedError()\n\n    c1 = Code.from_function(f1)\n    assert c1.getargs(var=True) == (\"x\",)\n\n    def f2(x, *y):\n        raise NotImplementedError()\n\n    c2 = Code.from_function(f2)\n    assert c2.getargs(var=True) == (\"x\", \"y\")\n\n    def f3(x, **z):\n        raise NotImplementedError()\n\n    c3 = Code.from_function(f3)\n    assert c3.getargs(var=True) == (\"x\", \"z\")\n\n    def f4(x, *y, **z):\n        raise NotImplementedError()\n\n    c4 = Code.from_function(f4)\n    assert c4.getargs(var=True) == (\"x\", \"y\", \"z\")\n\n\ndef test_frame_getargs() -> None:\n    def f1(x) -> FrameType:\n        return sys._getframe(0)\n\n    fr1 = Frame(f1(\"a\"))\n    assert fr1.getargs(var=True) == [(\"x\", \"a\")]\n\n    def f2(x, *y) -> FrameType:\n        return sys._getframe(0)\n\n    fr2 = Frame(f2(\"a\", \"b\", \"c\"))\n    assert fr2.getargs(var=True) == [(\"x\", \"a\"), (\"y\", (\"b\", \"c\"))]\n\n    def f3(x, **z) -> FrameType:\n        return sys._getframe(0)\n\n    fr3 = Frame(f3(\"a\", b=\"c\"))\n    assert fr3.getargs(var=True) == [(\"x\", \"a\"), (\"z\", {\"b\": \"c\"})]\n\n    def f4(x, *y, **z) -> FrameType:\n        return sys._getframe(0)\n\n    fr4 = Frame(f4(\"a\", \"b\", c=\"d\"))\n    assert fr4.getargs(var=True) == [(\"x\", \"a\"), (\"y\", (\"b\",)), (\"z\", {\"c\": \"d\"})]\n\n\nclass TestExceptionInfo:\n    def test_bad_getsource(self) -> None:\n        try:\n            if False:\n                pass\n            else:\n                assert False\n        except AssertionError:\n            exci = ExceptionInfo.from_current()\n        assert exci.getrepr()\n\n    def test_from_current_with_missing(self) -> None:\n        with pytest.raises(AssertionError, match=\"no current exception\"):\n            ExceptionInfo.from_current()\n\n\nclass TestTracebackEntry:\n    def test_getsource(self) -> None:\n        try:\n            if False:\n                pass\n            else:\n                assert False\n        except AssertionError:\n            exci = ExceptionInfo.from_current()\n        entry = exci.traceback[0]\n        source = entry.getsource()\n        assert source is not None\n        assert len(source) == 6\n        assert \"assert False\" in source[5]\n\n    def test_tb_entry_str(self):\n        try:\n            assert False\n        except AssertionError:\n            exci = ExceptionInfo.from_current()\n        pattern = r\"  File '.*test_code.py':\\d+ in test_tb_entry_str\\n  assert False\"\n        entry = str(exci.traceback[0])\n        assert re.match(pattern, entry)\n\n\nclass TestReprFuncArgs:\n    def test_not_raise_exception_with_mixed_encoding(self, tw_mock) -> None:\n        args = [(\"unicode_string\", \"S\u00e3o Paulo\"), (\"utf8_string\", b\"S\\xc3\\xa3o Paulo\")]\n\n        r = ReprFuncArgs(args)\n        r.toterminal(tw_mock)\n\n        assert (\n            tw_mock.lines[0]\n            == r\"unicode_string = S\u00e3o Paulo, utf8_string = b'S\\xc3\\xa3o Paulo'\"\n        )\n\n\ndef test_ExceptionChainRepr():\n    \"\"\"Test ExceptionChainRepr, especially with regard to being hashable.\"\"\"\n    try:\n        raise ValueError()\n    except ValueError:\n        excinfo1 = ExceptionInfo.from_current()\n        excinfo2 = ExceptionInfo.from_current()\n\n    repr1 = excinfo1.getrepr()\n    repr2 = excinfo2.getrepr()\n    assert repr1 != repr2\n\n    assert isinstance(repr1, ExceptionChainRepr)\n    assert hash(repr1) != hash(repr2)\n    assert repr1 is not excinfo1.getrepr()\n", "testing/code/test_source.py": "# mypy: allow-untyped-defs\n# flake8: noqa\n# disable flake check on this file because some constructs are strange\n# or redundant on purpose and can't be disable on a line-by-line basis\nimport inspect\nimport linecache\nimport sys\nimport textwrap\nfrom pathlib import Path\nfrom typing import Any\nfrom typing import Dict\n\nimport pytest\nfrom _pytest._code import Code\nfrom _pytest._code import Frame\nfrom _pytest._code import getfslineno\nfrom _pytest._code import Source\nfrom _pytest.pathlib import import_path\n\n\ndef test_source_str_function() -> None:\n    x = Source(\"3\")\n    assert str(x) == \"3\"\n\n    x = Source(\"   3\")\n    assert str(x) == \"3\"\n\n    x = Source(\n        \"\"\"\n        3\n        \"\"\"\n    )\n    assert str(x) == \"\\n3\"\n\n\ndef test_source_from_function() -> None:\n    source = Source(test_source_str_function)\n    assert str(source).startswith(\"def test_source_str_function() -> None:\")\n\n\ndef test_source_from_method() -> None:\n    class TestClass:\n        def test_method(self):\n            pass\n\n    source = Source(TestClass().test_method)\n    assert source.lines == [\"def test_method(self):\", \"    pass\"]\n\n\ndef test_source_from_lines() -> None:\n    lines = [\"a \\n\", \"b\\n\", \"c\"]\n    source = Source(lines)\n    assert source.lines == [\"a \", \"b\", \"c\"]\n\n\ndef test_source_from_inner_function() -> None:\n    def f():\n        raise NotImplementedError()\n\n    source = Source(f)\n    assert str(source).startswith(\"def f():\")\n\n\ndef test_source_strips() -> None:\n    source = Source(\"\")\n    assert source == Source()\n    assert str(source) == \"\"\n    assert source.strip() == source\n\n\ndef test_source_strip_multiline() -> None:\n    source = Source()\n    source.lines = [\"\", \" hello\", \"  \"]\n    source2 = source.strip()\n    assert source2.lines == [\" hello\"]\n\n\nclass TestAccesses:\n    def setup_class(self) -> None:\n        self.source = Source(\n            \"\"\"\\\n            def f(x):\n                pass\n            def g(x):\n                pass\n        \"\"\"\n        )\n\n    def test_getrange(self) -> None:\n        x = self.source[0:2]\n        assert len(x.lines) == 2\n        assert str(x) == \"def f(x):\\n    pass\"\n\n    def test_getrange_step_not_supported(self) -> None:\n        with pytest.raises(IndexError, match=r\"step\"):\n            self.source[::2]\n\n    def test_getline(self) -> None:\n        x = self.source[0]\n        assert x == \"def f(x):\"\n\n    def test_len(self) -> None:\n        assert len(self.source) == 4\n\n    def test_iter(self) -> None:\n        values = [x for x in self.source]\n        assert len(values) == 4\n\n\nclass TestSourceParsing:\n    def setup_class(self) -> None:\n        self.source = Source(\n            \"\"\"\\\n            def f(x):\n                assert (x ==\n                        3 +\n                        4)\n        \"\"\"\n        ).strip()\n\n    def test_getstatement(self) -> None:\n        # print str(self.source)\n        ass = str(self.source[1:])\n        for i in range(1, 4):\n            # print \"trying start in line %r\" % self.source[i]\n            s = self.source.getstatement(i)\n            # x = s.deindent()\n            assert str(s) == ass\n\n    def test_getstatementrange_triple_quoted(self) -> None:\n        # print str(self.source)\n        source = Source(\n            \"\"\"hello('''\n        ''')\"\"\"\n        )\n        s = source.getstatement(0)\n        assert s == source\n        s = source.getstatement(1)\n        assert s == source\n\n    def test_getstatementrange_within_constructs(self) -> None:\n        source = Source(\n            \"\"\"\\\n            try:\n                try:\n                    raise ValueError\n                except SomeThing:\n                    pass\n            finally:\n                42\n        \"\"\"\n        )\n        assert len(source) == 7\n        # check all lineno's that could occur in a traceback\n        # assert source.getstatementrange(0) == (0, 7)\n        # assert source.getstatementrange(1) == (1, 5)\n        assert source.getstatementrange(2) == (2, 3)\n        assert source.getstatementrange(3) == (3, 4)\n        assert source.getstatementrange(4) == (4, 5)\n        # assert source.getstatementrange(5) == (0, 7)\n        assert source.getstatementrange(6) == (6, 7)\n\n    def test_getstatementrange_bug(self) -> None:\n        source = Source(\n            \"\"\"\\\n            try:\n                x = (\n                   y +\n                   z)\n            except:\n                pass\n        \"\"\"\n        )\n        assert len(source) == 6\n        assert source.getstatementrange(2) == (1, 4)\n\n    def test_getstatementrange_bug2(self) -> None:\n        source = Source(\n            \"\"\"\\\n            assert (\n                33\n                ==\n                [\n                  X(3,\n                      b=1, c=2\n                   ),\n                ]\n              )\n        \"\"\"\n        )\n        assert len(source) == 9\n        assert source.getstatementrange(5) == (0, 9)\n\n    def test_getstatementrange_ast_issue58(self) -> None:\n        source = Source(\n            \"\"\"\\\n\n            def test_some():\n                for a in [a for a in\n                    CAUSE_ERROR]: pass\n\n            x = 3\n        \"\"\"\n        )\n        assert getstatement(2, source).lines == source.lines[2:3]\n        assert getstatement(3, source).lines == source.lines[3:4]\n\n    def test_getstatementrange_out_of_bounds_py3(self) -> None:\n        source = Source(\"if xxx:\\n   from .collections import something\")\n        r = source.getstatementrange(1)\n        assert r == (1, 2)\n\n    def test_getstatementrange_with_syntaxerror_issue7(self) -> None:\n        source = Source(\":\")\n        pytest.raises(SyntaxError, lambda: source.getstatementrange(0))\n\n\ndef test_getstartingblock_singleline() -> None:\n    class A:\n        def __init__(self, *args) -> None:\n            frame = sys._getframe(1)\n            self.source = Frame(frame).statement\n\n    x = A(\"x\", \"y\")\n\n    values = [i for i in x.source.lines if i.strip()]\n    assert len(values) == 1\n\n\ndef test_getline_finally() -> None:\n    def c() -> None:\n        pass\n\n    with pytest.raises(TypeError) as excinfo:\n        teardown = None\n        try:\n            c(1)  # type: ignore\n        finally:\n            if teardown:\n                teardown()  # type: ignore[unreachable]\n    source = excinfo.traceback[-1].statement\n    assert str(source).strip() == \"c(1)  # type: ignore\"\n\n\ndef test_getfuncsource_dynamic() -> None:\n    def f():\n        raise NotImplementedError()\n\n    def g():\n        pass  # pragma: no cover\n\n    f_source = Source(f)\n    g_source = Source(g)\n    assert str(f_source).strip() == \"def f():\\n    raise NotImplementedError()\"\n    assert str(g_source).strip() == \"def g():\\n    pass  # pragma: no cover\"\n\n\ndef test_getfuncsource_with_multiline_string() -> None:\n    def f():\n        c = \"\"\"while True:\n    pass\n\"\"\"\n\n    expected = '''\\\n    def f():\n        c = \"\"\"while True:\n    pass\n\"\"\"\n'''\n    assert str(Source(f)) == expected.rstrip()\n\n\ndef test_deindent() -> None:\n    from _pytest._code.source import deindent as deindent\n\n    assert deindent([\"\\tfoo\", \"\\tbar\"]) == [\"foo\", \"bar\"]\n\n    source = \"\"\"\\\n        def f():\n            def g():\n                pass\n    \"\"\"\n    lines = deindent(source.splitlines())\n    assert lines == [\"def f():\", \"    def g():\", \"        pass\"]\n\n\ndef test_source_of_class_at_eof_without_newline(_sys_snapshot, tmp_path: Path) -> None:\n    # this test fails because the implicit inspect.getsource(A) below\n    # does not return the \"x = 1\" last line.\n    source = Source(\n        \"\"\"\n        class A:\n            def method(self):\n                x = 1\n    \"\"\"\n    )\n    path = tmp_path.joinpath(\"a.py\")\n    path.write_text(str(source), encoding=\"utf-8\")\n    mod: Any = import_path(path, root=tmp_path, consider_namespace_packages=False)\n    s2 = Source(mod.A)\n    assert str(source).strip() == str(s2).strip()\n\n\nif True:\n\n    def x():\n        pass\n\n\ndef test_source_fallback() -> None:\n    src = Source(x)\n    expected = \"\"\"def x():\n    pass\"\"\"\n    assert str(src) == expected\n\n\ndef test_findsource_fallback() -> None:\n    from _pytest._code.source import findsource\n\n    src, lineno = findsource(x)\n    assert src is not None\n    assert \"test_findsource_simple\" in str(src)\n    assert src[lineno] == \"    def x():\"\n\n\ndef test_findsource(monkeypatch) -> None:\n    from _pytest._code.source import findsource\n\n    filename = \"<pytest-test_findsource>\"\n    lines = [\"if 1:\\n\", \"    def x():\\n\", \"          pass\\n\"]\n    co = compile(\"\".join(lines), filename, \"exec\")\n\n    monkeypatch.setitem(linecache.cache, filename, (1, None, lines, filename))\n\n    src, lineno = findsource(co)\n    assert src is not None\n    assert \"if 1:\" in str(src)\n\n    d: Dict[str, Any] = {}\n    eval(co, d)\n    src, lineno = findsource(d[\"x\"])\n    assert src is not None\n    assert \"if 1:\" in str(src)\n    assert src[lineno] == \"    def x():\"\n\n\ndef test_getfslineno() -> None:\n    def f(x) -> None:\n        raise NotImplementedError()\n\n    fspath, lineno = getfslineno(f)\n\n    assert isinstance(fspath, Path)\n    assert fspath.name == \"test_source.py\"\n    assert lineno == f.__code__.co_firstlineno - 1  # see findsource\n\n    class A:\n        pass\n\n    fspath, lineno = getfslineno(A)\n\n    _, A_lineno = inspect.findsource(A)\n    assert isinstance(fspath, Path)\n    assert fspath.name == \"test_source.py\"\n    assert lineno == A_lineno\n\n    assert getfslineno(3) == (\"\", -1)\n\n    class B:\n        pass\n\n    B.__name__ = B.__qualname__ = \"B2\"\n    # Since Python 3.13 this started working.\n    if sys.version_info >= (3, 13):\n        assert getfslineno(B)[1] != -1\n    else:\n        assert getfslineno(B)[1] == -1\n\n\ndef test_code_of_object_instance_with_call() -> None:\n    class A:\n        pass\n\n    pytest.raises(TypeError, lambda: Source(A()))\n\n    class WithCall:\n        def __call__(self) -> None:\n            pass\n\n    code = Code.from_function(WithCall())\n    assert \"pass\" in str(code.source())\n\n    class Hello:\n        def __call__(self) -> None:\n            pass\n\n    pytest.raises(TypeError, lambda: Code.from_function(Hello))\n\n\ndef getstatement(lineno: int, source) -> Source:\n    from _pytest._code.source import getstatementrange_ast\n\n    src = Source(source)\n    ast, start, end = getstatementrange_ast(lineno, src)\n    return src[start:end]\n\n\ndef test_oneline() -> None:\n    source = getstatement(0, \"raise ValueError\")\n    assert str(source) == \"raise ValueError\"\n\n\ndef test_comment_and_no_newline_at_end() -> None:\n    from _pytest._code.source import getstatementrange_ast\n\n    source = Source(\n        [\n            \"def test_basic_complex():\",\n            \"    assert 1 == 2\",\n            \"# vim: filetype=pyopencl:fdm=marker\",\n        ]\n    )\n    ast, start, end = getstatementrange_ast(1, source)\n    assert end == 2\n\n\ndef test_oneline_and_comment() -> None:\n    source = getstatement(0, \"raise ValueError\\n#hello\")\n    assert str(source) == \"raise ValueError\"\n\n\ndef test_comments() -> None:\n    source = '''def test():\n    \"comment 1\"\n    x = 1\n      # comment 2\n    # comment 3\n\n    assert False\n\n\"\"\"\ncomment 4\n\"\"\"\n'''\n    for line in range(2, 6):\n        assert str(getstatement(line, source)) == \"    x = 1\"\n    for line in range(6, 8):\n        assert str(getstatement(line, source)) == \"    assert False\"\n    for line in range(8, 10):\n        assert str(getstatement(line, source)) == '\"\"\"\\ncomment 4\\n\"\"\"'\n\n\ndef test_comment_in_statement() -> None:\n    source = \"\"\"test(foo=1,\n    # comment 1\n    bar=2)\n\"\"\"\n    for line in range(1, 3):\n        assert (\n            str(getstatement(line, source))\n            == \"test(foo=1,\\n    # comment 1\\n    bar=2)\"\n        )\n\n\ndef test_source_with_decorator() -> None:\n    \"\"\"Test behavior with Source / Code().source with regard to decorators.\"\"\"\n    from _pytest.compat import get_real_func\n\n    @pytest.mark.foo\n    def deco_mark():\n        assert False\n\n    src = inspect.getsource(deco_mark)\n    assert textwrap.indent(str(Source(deco_mark)), \"    \") + \"\\n\" == src\n    assert src.startswith(\"    @pytest.mark.foo\")\n\n    @pytest.fixture\n    def deco_fixture():\n        assert False\n\n    src = inspect.getsource(deco_fixture)\n    assert src == \"    @pytest.fixture\\n    def deco_fixture():\\n        assert False\\n\"\n    # currently Source does not unwrap decorators, testing the\n    # existing behavior here for explicitness, but perhaps we should revisit/change this\n    # in the future\n    assert str(Source(deco_fixture)).startswith(\"@functools.wraps(function)\")\n    assert (\n        textwrap.indent(str(Source(get_real_func(deco_fixture))), \"    \") + \"\\n\" == src\n    )\n\n\ndef test_single_line_else() -> None:\n    source = getstatement(1, \"if False: 2\\nelse: 3\")\n    assert str(source) == \"else: 3\"\n\n\ndef test_single_line_finally() -> None:\n    source = getstatement(1, \"try: 1\\nfinally: 3\")\n    assert str(source) == \"finally: 3\"\n\n\ndef test_issue55() -> None:\n    source = (\n        \"def round_trip(dinp):\\n  assert 1 == dinp\\n\"\n        'def test_rt():\\n  round_trip(\"\"\"\\n\"\"\")\\n'\n    )\n    s = getstatement(3, source)\n    assert str(s) == '  round_trip(\"\"\"\\n\"\"\")'\n\n\ndef test_multiline() -> None:\n    source = getstatement(\n        0,\n        \"\"\"\\\nraise ValueError(\n    23\n)\nx = 3\n\"\"\",\n    )\n    assert str(source) == \"raise ValueError(\\n    23\\n)\"\n\n\nclass TestTry:\n    def setup_class(self) -> None:\n        self.source = \"\"\"\\\ntry:\n    raise ValueError\nexcept Something:\n    raise IndexError(1)\nelse:\n    raise KeyError()\n\"\"\"\n\n    def test_body(self) -> None:\n        source = getstatement(1, self.source)\n        assert str(source) == \"    raise ValueError\"\n\n    def test_except_line(self) -> None:\n        source = getstatement(2, self.source)\n        assert str(source) == \"except Something:\"\n\n    def test_except_body(self) -> None:\n        source = getstatement(3, self.source)\n        assert str(source) == \"    raise IndexError(1)\"\n\n    def test_else(self) -> None:\n        source = getstatement(5, self.source)\n        assert str(source) == \"    raise KeyError()\"\n\n\nclass TestTryFinally:\n    def setup_class(self) -> None:\n        self.source = \"\"\"\\\ntry:\n    raise ValueError\nfinally:\n    raise IndexError(1)\n\"\"\"\n\n    def test_body(self) -> None:\n        source = getstatement(1, self.source)\n        assert str(source) == \"    raise ValueError\"\n\n    def test_finally(self) -> None:\n        source = getstatement(3, self.source)\n        assert str(source) == \"    raise IndexError(1)\"\n\n\nclass TestIf:\n    def setup_class(self) -> None:\n        self.source = \"\"\"\\\nif 1:\n    y = 3\nelif False:\n    y = 5\nelse:\n    y = 7\n\"\"\"\n\n    def test_body(self) -> None:\n        source = getstatement(1, self.source)\n        assert str(source) == \"    y = 3\"\n\n    def test_elif_clause(self) -> None:\n        source = getstatement(2, self.source)\n        assert str(source) == \"elif False:\"\n\n    def test_elif(self) -> None:\n        source = getstatement(3, self.source)\n        assert str(source) == \"    y = 5\"\n\n    def test_else(self) -> None:\n        source = getstatement(5, self.source)\n        assert str(source) == \"    y = 7\"\n\n\ndef test_semicolon() -> None:\n    s = \"\"\"\\\nhello ; pytest.skip()\n\"\"\"\n    source = getstatement(0, s)\n    assert str(source) == s.strip()\n\n\ndef test_def_online() -> None:\n    s = \"\"\"\\\ndef func(): raise ValueError(42)\n\ndef something():\n    pass\n\"\"\"\n    source = getstatement(0, s)\n    assert str(source) == \"def func(): raise ValueError(42)\"\n\n\ndef test_decorator() -> None:\n    s = \"\"\"\\\ndef foo(f):\n    pass\n\n@foo\ndef bar():\n    pass\n    \"\"\"\n    source = getstatement(3, s)\n    assert \"@foo\" in str(source)\n\n\ndef XXX_test_expression_multiline() -> None:\n    source = \"\"\"\\\nsomething\n'''\n'''\"\"\"\n    result = getstatement(1, source)\n    assert str(result) == \"'''\\n'''\"\n\n\ndef test_getstartingblock_multiline() -> None:\n    class A:\n        def __init__(self, *args):\n            frame = sys._getframe(1)\n            self.source = Frame(frame).statement\n\n    # fmt: off\n    x = A('x',\n          'y'\n          ,\n          'z')\n    # fmt: on\n    values = [i for i in x.source.lines if i.strip()]\n    assert len(values) == 4\n", "testing/io/test_wcwidth.py": "from __future__ import annotations\n\nfrom _pytest._io.wcwidth import wcswidth\nfrom _pytest._io.wcwidth import wcwidth\nimport pytest\n\n\n@pytest.mark.parametrize(\n    (\"c\", \"expected\"),\n    [\n        (\"\\0\", 0),\n        (\"\\n\", -1),\n        (\"a\", 1),\n        (\"1\", 1),\n        (\"\u05d0\", 1),\n        (\"\\u200b\", 0),\n        (\"\\u1abe\", 0),\n        (\"\\u0591\", 0),\n        (\"\ud83c\ude50\", 2),\n        (\"\uff04\", 2),  # noqa: RUF001\n    ],\n)\ndef test_wcwidth(c: str, expected: int) -> None:\n    assert wcwidth(c) == expected\n\n\n@pytest.mark.parametrize(\n    (\"s\", \"expected\"),\n    [\n        (\"\", 0),\n        (\"hello, world!\", 13),\n        (\"hello, world!\\n\", -1),\n        (\"0123456789\", 10),\n        (\"\u05e9\u05dc\u05d5\u05dd, \u05e2\u05d5\u05dc\u05dd!\", 11),\n        (\"\u05e9\u05b0\u05d1\u05bb\u05e2\u05b8\u05d9\u05d9\u05dd\", 6),\n        (\"\ud83c\ude50\ud83c\ude50\ud83c\ude50\", 6),\n    ],\n)\ndef test_wcswidth(s: str, expected: int) -> None:\n    assert wcswidth(s) == expected\n", "testing/io/test_terminalwriter.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport io\nimport os\nfrom pathlib import Path\nimport re\nimport shutil\nimport sys\nfrom typing import Generator\nfrom unittest import mock\n\nfrom _pytest._io import terminalwriter\nfrom _pytest.monkeypatch import MonkeyPatch\nimport pytest\n\n\n# These tests were initially copied from py 1.8.1.\n\n\ndef test_terminal_width_COLUMNS(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setenv(\"COLUMNS\", \"42\")\n    assert terminalwriter.get_terminal_width() == 42\n    monkeypatch.delenv(\"COLUMNS\", raising=False)\n\n\ndef test_terminalwriter_width_bogus(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setattr(shutil, \"get_terminal_size\", mock.Mock(return_value=(10, 10)))\n    monkeypatch.delenv(\"COLUMNS\", raising=False)\n    tw = terminalwriter.TerminalWriter()\n    assert tw.fullwidth == 80\n\n\ndef test_terminalwriter_computes_width(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setattr(terminalwriter, \"get_terminal_width\", lambda: 42)\n    tw = terminalwriter.TerminalWriter()\n    assert tw.fullwidth == 42\n\n\ndef test_terminalwriter_dumb_term_no_markup(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setattr(os, \"environ\", {\"TERM\": \"dumb\", \"PATH\": \"\"})\n\n    class MyFile:\n        closed = False\n\n        def isatty(self):\n            return True\n\n    with monkeypatch.context() as m:\n        m.setattr(sys, \"stdout\", MyFile())\n        assert sys.stdout.isatty()\n        tw = terminalwriter.TerminalWriter()\n        assert not tw.hasmarkup\n\n\ndef test_terminalwriter_not_unicode() -> None:\n    \"\"\"If the file doesn't support Unicode, the string is unicode-escaped (#7475).\"\"\"\n    buffer = io.BytesIO()\n    file = io.TextIOWrapper(buffer, encoding=\"cp1252\")\n    tw = terminalwriter.TerminalWriter(file)\n    tw.write(\"hello \ud83c\udf00 w\u00f4rld \u05d0\u05d1\u05d2\", flush=True)\n    assert buffer.getvalue() == rb\"hello \\U0001f300 w\\xf4rld \\u05d0\\u05d1\\u05d2\"\n\n\nwin32 = int(sys.platform == \"win32\")\n\n\nclass TestTerminalWriter:\n    @pytest.fixture(params=[\"path\", \"stringio\"])\n    def tw(\n        self, request, tmp_path: Path\n    ) -> Generator[terminalwriter.TerminalWriter, None, None]:\n        if request.param == \"path\":\n            p = tmp_path.joinpath(\"tmpfile\")\n            f = open(str(p), \"w+\", encoding=\"utf8\")\n            tw = terminalwriter.TerminalWriter(f)\n\n            def getlines():\n                f.flush()\n                with open(str(p), encoding=\"utf8\") as fp:\n                    return fp.readlines()\n\n        elif request.param == \"stringio\":\n            f = io.StringIO()\n            tw = terminalwriter.TerminalWriter(f)\n\n            def getlines():\n                f.seek(0)\n                return f.readlines()\n\n        tw.getlines = getlines  # type: ignore\n        tw.getvalue = lambda: \"\".join(getlines())  # type: ignore\n\n        with f:\n            yield tw\n\n    def test_line(self, tw) -> None:\n        tw.line(\"hello\")\n        lines = tw.getlines()\n        assert len(lines) == 1\n        assert lines[0] == \"hello\\n\"\n\n    def test_line_unicode(self, tw) -> None:\n        msg = \"b\\u00f6y\"\n        tw.line(msg)\n        lines = tw.getlines()\n        assert lines[0] == msg + \"\\n\"\n\n    def test_sep_no_title(self, tw) -> None:\n        tw.sep(\"-\", fullwidth=60)\n        lines = tw.getlines()\n        assert len(lines) == 1\n        assert lines[0] == \"-\" * (60 - win32) + \"\\n\"\n\n    def test_sep_with_title(self, tw) -> None:\n        tw.sep(\"-\", \"hello\", fullwidth=60)\n        lines = tw.getlines()\n        assert len(lines) == 1\n        assert lines[0] == \"-\" * 26 + \" hello \" + \"-\" * (27 - win32) + \"\\n\"\n\n    def test_sep_longer_than_width(self, tw) -> None:\n        tw.sep(\"-\", \"a\" * 10, fullwidth=5)\n        (line,) = tw.getlines()\n        # even though the string is wider than the line, still have a separator\n        assert line == \"- aaaaaaaaaa -\\n\"\n\n    @pytest.mark.skipif(sys.platform == \"win32\", reason=\"win32 has no native ansi\")\n    @pytest.mark.parametrize(\"bold\", (True, False))\n    @pytest.mark.parametrize(\"color\", (\"red\", \"green\"))\n    def test_markup(self, tw, bold: bool, color: str) -> None:\n        text = tw.markup(\"hello\", **{color: True, \"bold\": bold})\n        assert \"hello\" in text\n\n    def test_markup_bad(self, tw) -> None:\n        with pytest.raises(ValueError):\n            tw.markup(\"x\", wronkw=3)\n        with pytest.raises(ValueError):\n            tw.markup(\"x\", wronkw=0)\n\n    def test_line_write_markup(self, tw) -> None:\n        tw.hasmarkup = True\n        tw.line(\"x\", bold=True)\n        tw.write(\"x\\n\", red=True)\n        lines = tw.getlines()\n        if sys.platform != \"win32\":\n            assert len(lines[0]) >= 2, lines\n            assert len(lines[1]) >= 2, lines\n\n    def test_attr_fullwidth(self, tw) -> None:\n        tw.sep(\"-\", \"hello\", fullwidth=70)\n        tw.fullwidth = 70\n        tw.sep(\"-\", \"hello\")\n        lines = tw.getlines()\n        assert len(lines[0]) == len(lines[1])\n\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"win32 has no native ansi\")\ndef test_attr_hasmarkup() -> None:\n    file = io.StringIO()\n    tw = terminalwriter.TerminalWriter(file)\n    assert not tw.hasmarkup\n    tw.hasmarkup = True\n    tw.line(\"hello\", bold=True)\n    s = file.getvalue()\n    assert len(s) > len(\"hello\\n\")\n    assert \"\\x1b[1m\" in s\n    assert \"\\x1b[0m\" in s\n\n\ndef assert_color(expected: bool, default: bool | None = None) -> None:\n    file = io.StringIO()\n    if default is None:\n        default = not expected\n    file.isatty = lambda: default  # type: ignore\n    tw = terminalwriter.TerminalWriter(file=file)\n    assert tw.hasmarkup is expected\n    tw.line(\"hello\", bold=True)\n    s = file.getvalue()\n    if expected:\n        assert len(s) > len(\"hello\\n\")\n        assert \"\\x1b[1m\" in s\n        assert \"\\x1b[0m\" in s\n    else:\n        assert s == \"hello\\n\"\n\n\ndef test_should_do_markup_PY_COLORS_eq_1(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setitem(os.environ, \"PY_COLORS\", \"1\")\n    assert_color(True)\n\n\ndef test_should_not_do_markup_PY_COLORS_eq_0(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setitem(os.environ, \"PY_COLORS\", \"0\")\n    assert_color(False)\n\n\ndef test_should_not_do_markup_NO_COLOR(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setitem(os.environ, \"NO_COLOR\", \"1\")\n    assert_color(False)\n\n\ndef test_should_do_markup_FORCE_COLOR(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setitem(os.environ, \"FORCE_COLOR\", \"1\")\n    assert_color(True)\n\n\n@pytest.mark.parametrize(\n    [\"NO_COLOR\", \"FORCE_COLOR\", \"expected\"],\n    [\n        (\"1\", \"1\", False),\n        (\"\", \"1\", True),\n        (\"1\", \"\", False),\n    ],\n)\ndef test_NO_COLOR_and_FORCE_COLOR(\n    monkeypatch: MonkeyPatch,\n    NO_COLOR: str,\n    FORCE_COLOR: str,\n    expected: bool,\n) -> None:\n    monkeypatch.setitem(os.environ, \"NO_COLOR\", NO_COLOR)\n    monkeypatch.setitem(os.environ, \"FORCE_COLOR\", FORCE_COLOR)\n    assert_color(expected)\n\n\ndef test_empty_NO_COLOR_and_FORCE_COLOR_ignored(monkeypatch: MonkeyPatch) -> None:\n    monkeypatch.setitem(os.environ, \"NO_COLOR\", \"\")\n    monkeypatch.setitem(os.environ, \"FORCE_COLOR\", \"\")\n    assert_color(True, True)\n    assert_color(False, False)\n\n\nclass TestTerminalWriterLineWidth:\n    def test_init(self) -> None:\n        tw = terminalwriter.TerminalWriter()\n        assert tw.width_of_current_line == 0\n\n    def test_update(self) -> None:\n        tw = terminalwriter.TerminalWriter()\n        tw.write(\"hello world\")\n        assert tw.width_of_current_line == 11\n\n    def test_update_with_newline(self) -> None:\n        tw = terminalwriter.TerminalWriter()\n        tw.write(\"hello\\nworld\")\n        assert tw.width_of_current_line == 5\n\n    def test_update_with_wide_text(self) -> None:\n        tw = terminalwriter.TerminalWriter()\n        tw.write(\"\u4e47\u4e42\u3112\u5c3a\u5342 \u3112\u5344\u4e28\u531a\u531a\")\n        assert tw.width_of_current_line == 21  # 5*2 + 1 + 5*2\n\n    def test_composed(self) -> None:\n        tw = terminalwriter.TerminalWriter()\n        text = \"caf\u00e9 food\"\n        assert len(text) == 9\n        tw.write(text)\n        assert tw.width_of_current_line == 9\n\n    def test_combining(self) -> None:\n        tw = terminalwriter.TerminalWriter()\n        text = \"cafe\u0301 food\"\n        assert len(text) == 10\n        tw.write(text)\n        assert tw.width_of_current_line == 9\n\n\n@pytest.mark.parametrize(\n    (\"has_markup\", \"code_highlight\", \"expected\"),\n    [\n        pytest.param(\n            True,\n            True,\n            \"{reset}{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",\n            id=\"with markup and code_highlight\",\n        ),\n        pytest.param(\n            True,\n            False,\n            \"assert 0\\n\",\n            id=\"with markup but no code_highlight\",\n        ),\n        pytest.param(\n            False,\n            True,\n            \"assert 0\\n\",\n            id=\"without markup but with code_highlight\",\n        ),\n        pytest.param(\n            False,\n            False,\n            \"assert 0\\n\",\n            id=\"neither markup nor code_highlight\",\n        ),\n    ],\n)\ndef test_code_highlight(has_markup, code_highlight, expected, color_mapping):\n    f = io.StringIO()\n    tw = terminalwriter.TerminalWriter(f)\n    tw.hasmarkup = has_markup\n    tw.code_highlight = code_highlight\n    tw._write_source([\"assert 0\"])\n\n    assert f.getvalue().splitlines(keepends=True) == color_mapping.format([expected])\n\n    with pytest.raises(\n        ValueError,\n        match=re.escape(\"indents size (2) should have same size as lines (1)\"),\n    ):\n        tw._write_source([\"assert 0\"], [\" \", \" \"])\n\n\ndef test_highlight_empty_source() -> None:\n    \"\"\"Don't crash trying to highlight empty source code.\n\n    Issue #11758.\n    \"\"\"\n    f = io.StringIO()\n    tw = terminalwriter.TerminalWriter(f)\n    tw.hasmarkup = True\n    tw.code_highlight = True\n    tw._write_source([])\n\n    assert f.getvalue() == \"\"\n", "testing/io/test_pprint.py": "from __future__ import annotations\n\nfrom collections import ChainMap\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import OrderedDict\nfrom dataclasses import dataclass\nimport textwrap\nfrom types import MappingProxyType\nfrom types import SimpleNamespace\nfrom typing import Any\n\nfrom _pytest._io.pprint import PrettyPrinter\nimport pytest\n\n\n@dataclass\nclass EmptyDataclass:\n    pass\n\n\n@dataclass\nclass DataclassWithOneItem:\n    foo: str\n\n\n@dataclass\nclass DataclassWithTwoItems:\n    foo: str\n    bar: str\n\n\n@pytest.mark.parametrize(\n    (\"data\", \"expected\"),\n    (\n        pytest.param(\n            EmptyDataclass(),\n            \"EmptyDataclass()\",\n            id=\"dataclass-empty\",\n        ),\n        pytest.param(\n            DataclassWithOneItem(foo=\"bar\"),\n            \"\"\"\n            DataclassWithOneItem(\n                foo='bar',\n            )\n            \"\"\",\n            id=\"dataclass-one-item\",\n        ),\n        pytest.param(\n            DataclassWithTwoItems(foo=\"foo\", bar=\"bar\"),\n            \"\"\"\n            DataclassWithTwoItems(\n                foo='foo',\n                bar='bar',\n            )\n            \"\"\",\n            id=\"dataclass-two-items\",\n        ),\n        pytest.param(\n            {},\n            \"{}\",\n            id=\"dict-empty\",\n        ),\n        pytest.param(\n            {\"one\": 1},\n            \"\"\"\n            {\n                'one': 1,\n            }\n            \"\"\",\n            id=\"dict-one-item\",\n        ),\n        pytest.param(\n            {\"one\": 1, \"two\": 2},\n            \"\"\"\n            {\n                'one': 1,\n                'two': 2,\n            }\n            \"\"\",\n            id=\"dict-two-items\",\n        ),\n        pytest.param(OrderedDict(), \"OrderedDict()\", id=\"ordereddict-empty\"),\n        pytest.param(\n            OrderedDict({\"one\": 1}),\n            \"\"\"\n            OrderedDict({\n                'one': 1,\n            })\n            \"\"\",\n            id=\"ordereddict-one-item\",\n        ),\n        pytest.param(\n            OrderedDict({\"one\": 1, \"two\": 2}),\n            \"\"\"\n            OrderedDict({\n                'one': 1,\n                'two': 2,\n            })\n            \"\"\",\n            id=\"ordereddict-two-items\",\n        ),\n        pytest.param(\n            [],\n            \"[]\",\n            id=\"list-empty\",\n        ),\n        pytest.param(\n            [1],\n            \"\"\"\n            [\n                1,\n            ]\n            \"\"\",\n            id=\"list-one-item\",\n        ),\n        pytest.param(\n            [1, 2],\n            \"\"\"\n            [\n                1,\n                2,\n            ]\n            \"\"\",\n            id=\"list-two-items\",\n        ),\n        pytest.param(\n            tuple(),\n            \"()\",\n            id=\"tuple-empty\",\n        ),\n        pytest.param(\n            (1,),\n            \"\"\"\n            (\n                1,\n            )\n            \"\"\",\n            id=\"tuple-one-item\",\n        ),\n        pytest.param(\n            (1, 2),\n            \"\"\"\n            (\n                1,\n                2,\n            )\n            \"\"\",\n            id=\"tuple-two-items\",\n        ),\n        pytest.param(\n            set(),\n            \"set()\",\n            id=\"set-empty\",\n        ),\n        pytest.param(\n            {1},\n            \"\"\"\n            {\n                1,\n            }\n            \"\"\",\n            id=\"set-one-item\",\n        ),\n        pytest.param(\n            {1, 2},\n            \"\"\"\n            {\n                1,\n                2,\n            }\n            \"\"\",\n            id=\"set-two-items\",\n        ),\n        pytest.param(\n            MappingProxyType({}),\n            \"mappingproxy({})\",\n            id=\"mappingproxy-empty\",\n        ),\n        pytest.param(\n            MappingProxyType({\"one\": 1}),\n            \"\"\"\n            mappingproxy({\n                'one': 1,\n            })\n            \"\"\",\n            id=\"mappingproxy-one-item\",\n        ),\n        pytest.param(\n            MappingProxyType({\"one\": 1, \"two\": 2}),\n            \"\"\"\n            mappingproxy({\n                'one': 1,\n                'two': 2,\n            })\n            \"\"\",\n            id=\"mappingproxy-two-items\",\n        ),\n        pytest.param(\n            SimpleNamespace(),\n            \"namespace()\",\n            id=\"simplenamespace-empty\",\n        ),\n        pytest.param(\n            SimpleNamespace(one=1),\n            \"\"\"\n            namespace(\n                one=1,\n            )\n            \"\"\",\n            id=\"simplenamespace-one-item\",\n        ),\n        pytest.param(\n            SimpleNamespace(one=1, two=2),\n            \"\"\"\n            namespace(\n                one=1,\n                two=2,\n            )\n            \"\"\",\n            id=\"simplenamespace-two-items\",\n        ),\n        pytest.param(\n            defaultdict(str), \"defaultdict(<class 'str'>, {})\", id=\"defaultdict-empty\"\n        ),\n        pytest.param(\n            defaultdict(str, {\"one\": \"1\"}),\n            \"\"\"\n            defaultdict(<class 'str'>, {\n                'one': '1',\n            })\n            \"\"\",\n            id=\"defaultdict-one-item\",\n        ),\n        pytest.param(\n            defaultdict(str, {\"one\": \"1\", \"two\": \"2\"}),\n            \"\"\"\n            defaultdict(<class 'str'>, {\n                'one': '1',\n                'two': '2',\n            })\n            \"\"\",\n            id=\"defaultdict-two-items\",\n        ),\n        pytest.param(\n            Counter(),\n            \"Counter()\",\n            id=\"counter-empty\",\n        ),\n        pytest.param(\n            Counter(\"1\"),\n            \"\"\"\n            Counter({\n                '1': 1,\n            })\n            \"\"\",\n            id=\"counter-one-item\",\n        ),\n        pytest.param(\n            Counter(\"121\"),\n            \"\"\"\n            Counter({\n                '1': 2,\n                '2': 1,\n            })\n            \"\"\",\n            id=\"counter-two-items\",\n        ),\n        pytest.param(ChainMap(), \"ChainMap({})\", id=\"chainmap-empty\"),\n        pytest.param(\n            ChainMap({\"one\": 1, \"two\": 2}),\n            \"\"\"\n            ChainMap(\n                {\n                    'one': 1,\n                    'two': 2,\n                },\n            )\n            \"\"\",\n            id=\"chainmap-one-item\",\n        ),\n        pytest.param(\n            ChainMap({\"one\": 1}, {\"two\": 2}),\n            \"\"\"\n            ChainMap(\n                {\n                    'one': 1,\n                },\n                {\n                    'two': 2,\n                },\n            )\n            \"\"\",\n            id=\"chainmap-two-items\",\n        ),\n        pytest.param(\n            deque(),\n            \"deque([])\",\n            id=\"deque-empty\",\n        ),\n        pytest.param(\n            deque([1]),\n            \"\"\"\n            deque([\n                1,\n            ])\n            \"\"\",\n            id=\"deque-one-item\",\n        ),\n        pytest.param(\n            deque([1, 2]),\n            \"\"\"\n            deque([\n                1,\n                2,\n            ])\n            \"\"\",\n            id=\"deque-two-items\",\n        ),\n        pytest.param(\n            deque([1, 2], maxlen=3),\n            \"\"\"\n            deque(maxlen=3, [\n                1,\n                2,\n            ])\n            \"\"\",\n            id=\"deque-maxlen\",\n        ),\n        pytest.param(\n            {\n                \"chainmap\": ChainMap({\"one\": 1}, {\"two\": 2}),\n                \"counter\": Counter(\"122\"),\n                \"dataclass\": DataclassWithTwoItems(foo=\"foo\", bar=\"bar\"),\n                \"defaultdict\": defaultdict(str, {\"one\": \"1\", \"two\": \"2\"}),\n                \"deque\": deque([1, 2], maxlen=3),\n                \"dict\": {\"one\": 1, \"two\": 2},\n                \"list\": [1, 2],\n                \"mappingproxy\": MappingProxyType({\"one\": 1, \"two\": 2}),\n                \"ordereddict\": OrderedDict({\"one\": 1, \"two\": 2}),\n                \"set\": {1, 2},\n                \"simplenamespace\": SimpleNamespace(one=1, two=2),\n                \"tuple\": (1, 2),\n            },\n            \"\"\"\n            {\n                'chainmap': ChainMap(\n                    {\n                        'one': 1,\n                    },\n                    {\n                        'two': 2,\n                    },\n                ),\n                'counter': Counter({\n                    '2': 2,\n                    '1': 1,\n                }),\n                'dataclass': DataclassWithTwoItems(\n                    foo='foo',\n                    bar='bar',\n                ),\n                'defaultdict': defaultdict(<class 'str'>, {\n                    'one': '1',\n                    'two': '2',\n                }),\n                'deque': deque(maxlen=3, [\n                    1,\n                    2,\n                ]),\n                'dict': {\n                    'one': 1,\n                    'two': 2,\n                },\n                'list': [\n                    1,\n                    2,\n                ],\n                'mappingproxy': mappingproxy({\n                    'one': 1,\n                    'two': 2,\n                }),\n                'ordereddict': OrderedDict({\n                    'one': 1,\n                    'two': 2,\n                }),\n                'set': {\n                    1,\n                    2,\n                },\n                'simplenamespace': namespace(\n                    one=1,\n                    two=2,\n                ),\n                'tuple': (\n                    1,\n                    2,\n                ),\n            }\n            \"\"\",\n            id=\"deep-example\",\n        ),\n    ),\n)\ndef test_consistent_pretty_printer(data: Any, expected: str) -> None:\n    assert PrettyPrinter().pformat(data) == textwrap.dedent(expected).strip()\n", "testing/io/test_saferepr.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom _pytest._io.saferepr import DEFAULT_REPR_MAX_SIZE\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest._io.saferepr import saferepr_unlimited\nimport pytest\n\n\ndef test_simple_repr():\n    assert saferepr(1) == \"1\"\n    assert saferepr(None) == \"None\"\n\n\ndef test_maxsize():\n    s = saferepr(\"x\" * 50, maxsize=25)\n    assert len(s) == 25\n    expected = repr(\"x\" * 10 + \"...\" + \"x\" * 10)\n    assert s == expected\n\n\ndef test_no_maxsize():\n    text = \"x\" * DEFAULT_REPR_MAX_SIZE * 10\n    s = saferepr(text, maxsize=None)\n    expected = repr(text)\n    assert s == expected\n\n\ndef test_maxsize_error_on_instance():\n    class A:\n        def __repr__(self):\n            raise ValueError(\"...\")\n\n    s = saferepr((\"*\" * 50, A()), maxsize=25)\n    assert len(s) == 25\n    assert s[0] == \"(\" and s[-1] == \")\"\n\n\ndef test_exceptions() -> None:\n    class BrokenRepr:\n        def __init__(self, ex):\n            self.ex = ex\n\n        def __repr__(self):\n            raise self.ex\n\n    class BrokenReprException(Exception):\n        __str__ = None  # type: ignore[assignment]\n        __repr__ = None  # type: ignore[assignment]\n\n    assert \"Exception\" in saferepr(BrokenRepr(Exception(\"broken\")))\n    s = saferepr(BrokenReprException(\"really broken\"))\n    assert \"TypeError\" in s\n    assert \"TypeError\" in saferepr(BrokenRepr(\"string\"))\n\n    none = None\n    try:\n        none()  # type: ignore[misc]\n    except BaseException as exc:\n        exp_exc = repr(exc)\n    obj = BrokenRepr(BrokenReprException(\"omg even worse\"))\n    s2 = saferepr(obj)\n    assert s2 == (\n        f\"<[unpresentable exception ({exp_exc!s}) raised in repr()] BrokenRepr object at 0x{id(obj):x}>\"\n    )\n\n\ndef test_baseexception():\n    \"\"\"Test saferepr() with BaseExceptions, which includes pytest outcomes.\"\"\"\n\n    class RaisingOnStrRepr(BaseException):\n        def __init__(self, exc_types):\n            self.exc_types = exc_types\n\n        def raise_exc(self, *args):\n            try:\n                self.exc_type = self.exc_types.pop(0)\n            except IndexError:\n                pass\n            if hasattr(self.exc_type, \"__call__\"):\n                raise self.exc_type(*args)\n            raise self.exc_type\n\n        def __str__(self):  # noqa: PLE0307\n            self.raise_exc(\"__str__\")\n\n        def __repr__(self):\n            self.raise_exc(\"__repr__\")\n\n    class BrokenObj:\n        def __init__(self, exc):\n            self.exc = exc\n\n        def __repr__(self):\n            raise self.exc\n\n        __str__ = __repr__\n\n    baseexc_str = BaseException(\"__str__\")\n    obj = BrokenObj(RaisingOnStrRepr([BaseException]))\n    assert saferepr(obj) == (\n        f\"<[unpresentable exception ({baseexc_str!r}) \"\n        f\"raised in repr()] BrokenObj object at 0x{id(obj):x}>\"\n    )\n    obj = BrokenObj(RaisingOnStrRepr([RaisingOnStrRepr([BaseException])]))\n    assert saferepr(obj) == (\n        f\"<[{baseexc_str!r} raised in repr()] BrokenObj object at 0x{id(obj):x}>\"\n    )\n\n    with pytest.raises(KeyboardInterrupt):\n        saferepr(BrokenObj(KeyboardInterrupt()))\n\n    with pytest.raises(SystemExit):\n        saferepr(BrokenObj(SystemExit()))\n\n    with pytest.raises(KeyboardInterrupt):\n        saferepr(BrokenObj(RaisingOnStrRepr([KeyboardInterrupt])))\n\n    with pytest.raises(SystemExit):\n        saferepr(BrokenObj(RaisingOnStrRepr([SystemExit])))\n\n    with pytest.raises(KeyboardInterrupt):\n        print(saferepr(BrokenObj(RaisingOnStrRepr([BaseException, KeyboardInterrupt]))))\n\n    with pytest.raises(SystemExit):\n        saferepr(BrokenObj(RaisingOnStrRepr([BaseException, SystemExit])))\n\n\ndef test_buggy_builtin_repr():\n    # Simulate a case where a repr for a builtin raises.\n    # reprlib dispatches by type name, so use \"int\".\n\n    class int:\n        def __repr__(self):\n            raise ValueError(\"Buggy repr!\")\n\n    assert \"Buggy\" in saferepr(int())\n\n\ndef test_big_repr():\n    from _pytest._io.saferepr import SafeRepr\n\n    assert len(saferepr(range(1000))) <= len(\"[\" + SafeRepr(0).maxlist * \"1000\" + \"]\")\n\n\ndef test_repr_on_newstyle() -> None:\n    class Function:\n        def __repr__(self):\n            return f\"<{self.name}>\"  # type: ignore[attr-defined]\n\n    assert saferepr(Function())\n\n\ndef test_unicode():\n    val = \"\u00a3\u20ac\"\n    reprval = \"'\u00a3\u20ac'\"\n    assert saferepr(val) == reprval\n\n\ndef test_broken_getattribute():\n    \"\"\"saferepr() can create proper representations of classes with\n    broken __getattribute__ (#7145)\n    \"\"\"\n\n    class SomeClass:\n        def __getattribute__(self, attr):\n            raise RuntimeError\n\n        def __repr__(self):\n            raise RuntimeError\n\n    assert saferepr(SomeClass()).startswith(\n        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n    )\n\n\ndef test_saferepr_unlimited():\n    dict5 = {f\"v{i}\": i for i in range(5)}\n    assert saferepr_unlimited(dict5) == \"{'v0': 0, 'v1': 1, 'v2': 2, 'v3': 3, 'v4': 4}\"\n\n    dict_long = {f\"v{i}\": i for i in range(1_000)}\n    r = saferepr_unlimited(dict_long)\n    assert \"...\" not in r\n    assert \"\\n\" not in r\n\n\ndef test_saferepr_unlimited_exc():\n    class A:\n        def __repr__(self):\n            raise ValueError(42)\n\n    assert saferepr_unlimited(A()).startswith(\n        \"<[ValueError(42) raised in repr()] A object at 0x\"\n    )\n", "testing/plugins_integration/pytest_twisted_integration.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest_twisted\nfrom twisted.internet.task import deferLater\n\n\ndef sleep():\n    import twisted.internet.reactor\n\n    return deferLater(clock=twisted.internet.reactor, delay=0)\n\n\n@pytest_twisted.inlineCallbacks\ndef test_inlineCallbacks():\n    yield sleep()\n\n\n@pytest_twisted.ensureDeferred\nasync def test_inlineCallbacks_async():\n    await sleep()\n", "testing/plugins_integration/pytest_mock_integration.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_mocker(mocker):\n    mocker.MagicMock()\n", "testing/plugins_integration/bdd_wallet.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom pytest_bdd import given\nfrom pytest_bdd import scenario\nfrom pytest_bdd import then\nfrom pytest_bdd import when\n\nimport pytest\n\n\n@scenario(\"bdd_wallet.feature\", \"Buy fruits\")\ndef test_publish():\n    pass\n\n\n@pytest.fixture\ndef wallet():\n    class Wallet:\n        amount = 0\n\n    return Wallet()\n\n\n@given(\"A wallet with 50\")\ndef fill_wallet(wallet):\n    wallet.amount = 50\n\n\n@when(\"I buy some apples for 1\")\ndef buy_apples(wallet):\n    wallet.amount -= 1\n\n\n@when(\"I buy some bananas for 2\")\ndef buy_bananas(wallet):\n    wallet.amount -= 2\n\n\n@then(\"I have 47 left\")\ndef check(wallet):\n    assert wallet.amount == 47\n", "testing/plugins_integration/django_settings.py": "from __future__ import annotations\n\n\nSECRET_KEY = \"mysecret\"\n", "testing/plugins_integration/simple_integration.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\ndef test_foo():\n    assert True\n\n\n@pytest.mark.parametrize(\"i\", range(3))\ndef test_bar(i):\n    assert True\n", "testing/plugins_integration/pytest_anyio_integration.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport anyio\n\nimport pytest\n\n\n@pytest.mark.anyio\nasync def test_sleep():\n    await anyio.sleep(0)\n", "testing/plugins_integration/pytest_rerunfailures_integration.py": "from __future__ import annotations\n\nimport unittest\n\n\nclass MyTestCase(unittest.TestCase):\n    first_time = True\n\n    def test_fail_the_first_time(self) -> None:\n        \"\"\"Regression test for issue #12424.\"\"\"\n        if self.first_time:\n            type(self).first_time = False\n            self.fail()\n", "testing/plugins_integration/pytest_trio_integration.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport trio\n\nimport pytest\n\n\n@pytest.mark.trio\nasync def test_sleep():\n    await trio.sleep(0)\n", "testing/plugins_integration/pytest_asyncio_integration.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport asyncio\n\nimport pytest\n\n\n@pytest.mark.asyncio\nasync def test_sleep():\n    await asyncio.sleep(0)\n", "testing/python/show_fixtures_per_test.py": "from __future__ import annotations\n\nfrom _pytest.pytester import Pytester\n\n\ndef test_no_items_should_not_show_output(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--fixtures-per-test\")\n    result.stdout.no_fnmatch_line(\"*fixtures used by*\")\n    assert result.ret == 0\n\n\ndef test_fixtures_in_module(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def _arg0():\n            \"\"\"hidden arg0 fixture\"\"\"\n        @pytest.fixture\n        def arg1():\n            \"\"\"arg1 docstring\"\"\"\n        def test_arg1(arg1):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(\"--fixtures-per-test\", p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*fixtures used by test_arg1*\",\n            \"*(test_fixtures_in_module.py:9)*\",\n            \"arg1 -- test_fixtures_in_module.py:6\",\n            \"    arg1 docstring\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*_arg0*\")\n\n\ndef test_fixtures_in_conftest(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg1():\n            \"\"\"arg1 docstring\"\"\"\n        @pytest.fixture\n        def arg2():\n            \"\"\"arg2 docstring\"\"\"\n        @pytest.fixture\n        def arg3(arg1, arg2):\n            \"\"\"arg3\n            docstring\n            \"\"\"\n    '''\n    )\n    p = pytester.makepyfile(\n        \"\"\"\n        def test_arg2(arg2):\n            pass\n        def test_arg3(arg3):\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--fixtures-per-test\", p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*fixtures used by test_arg2*\",\n            \"*(test_fixtures_in_conftest.py:2)*\",\n            \"arg2 -- conftest.py:6\",\n            \"    arg2 docstring\",\n            \"*fixtures used by test_arg3*\",\n            \"*(test_fixtures_in_conftest.py:4)*\",\n            \"arg1 -- conftest.py:3\",\n            \"    arg1 docstring\",\n            \"arg2 -- conftest.py:6\",\n            \"    arg2 docstring\",\n            \"arg3 -- conftest.py:9\",\n            \"    arg3\",\n        ]\n    )\n\n\ndef test_should_show_fixtures_used_by_test(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg1():\n            \"\"\"arg1 from conftest\"\"\"\n        @pytest.fixture\n        def arg2():\n            \"\"\"arg2 from conftest\"\"\"\n    '''\n    )\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg1():\n            \"\"\"arg1 from testmodule\"\"\"\n        def test_args(arg1, arg2):\n            pass\n    '''\n    )\n    result = pytester.runpytest(\"--fixtures-per-test\", p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*fixtures used by test_args*\",\n            \"*(test_should_show_fixtures_used_by_test.py:6)*\",\n            \"arg1 -- test_should_show_fixtures_used_by_test.py:3\",\n            \"    arg1 from testmodule\",\n            \"arg2 -- conftest.py:6\",\n            \"    arg2 from conftest\",\n        ]\n    )\n\n\ndef test_verbose_include_private_fixtures_and_loc(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        '''\n        import pytest\n        @pytest.fixture\n        def _arg1():\n            \"\"\"_arg1 from conftest\"\"\"\n        @pytest.fixture\n        def arg2(_arg1):\n            \"\"\"arg2 from conftest\"\"\"\n    '''\n    )\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg3():\n            \"\"\"arg3 from testmodule\"\"\"\n        def test_args(arg2, arg3):\n            pass\n    '''\n    )\n    result = pytester.runpytest(\"--fixtures-per-test\", \"-v\", p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*fixtures used by test_args*\",\n            \"*(test_verbose_include_private_fixtures_and_loc.py:6)*\",\n            \"_arg1 -- conftest.py:3\",\n            \"    _arg1 from conftest\",\n            \"arg2 -- conftest.py:6\",\n            \"    arg2 from conftest\",\n            \"arg3 -- test_verbose_include_private_fixtures_and_loc.py:3\",\n            \"    arg3 from testmodule\",\n        ]\n    )\n\n\ndef test_doctest_items(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        '''\n        def foo():\n            \"\"\"\n            >>> 1 + 1\n            2\n            \"\"\"\n    '''\n    )\n    pytester.maketxtfile(\n        \"\"\"\n        >>> 1 + 1\n        2\n    \"\"\"\n    )\n    result = pytester.runpytest(\n        \"--fixtures-per-test\", \"--doctest-modules\", \"--doctest-glob=*.txt\", \"-v\"\n    )\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines([\"*collected 2 items*\"])\n\n\ndef test_multiline_docstring_in_module(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg1():\n            \"\"\"Docstring content that spans across multiple lines,\n            through second line,\n            and through third line.\n\n            Docstring content that extends into a second paragraph.\n\n            Docstring content that extends into a third paragraph.\n            \"\"\"\n        def test_arg1(arg1):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(\"--fixtures-per-test\", p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*fixtures used by test_arg1*\",\n            \"*(test_multiline_docstring_in_module.py:13)*\",\n            \"arg1 -- test_multiline_docstring_in_module.py:3\",\n            \"    Docstring content that spans across multiple lines,\",\n            \"    through second line,\",\n            \"    and through third line.\",\n        ]\n    )\n\n\ndef test_verbose_include_multiline_docstring(pytester: Pytester) -> None:\n    p = pytester.makepyfile(\n        '''\n        import pytest\n        @pytest.fixture\n        def arg1():\n            \"\"\"Docstring content that spans across multiple lines,\n            through second line,\n            and through third line.\n\n            Docstring content that extends into a second paragraph.\n\n            Docstring content that extends into a third paragraph.\n            \"\"\"\n        def test_arg1(arg1):\n            pass\n    '''\n    )\n\n    result = pytester.runpytest(\"--fixtures-per-test\", \"-v\", p)\n    assert result.ret == 0\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*fixtures used by test_arg1*\",\n            \"*(test_verbose_include_multiline_docstring.py:13)*\",\n            \"arg1 -- test_verbose_include_multiline_docstring.py:3\",\n            \"    Docstring content that spans across multiple lines,\",\n            \"    through second line,\",\n            \"    and through third line.\",\n            \"    \",\n            \"    Docstring content that extends into a second paragraph.\",\n            \"    \",\n            \"    Docstring content that extends into a third paragraph.\",\n        ]\n    )\n", "testing/python/collect.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nimport sys\nimport textwrap\nfrom typing import Any\n\nimport _pytest._code\nfrom _pytest.config import ExitCode\nfrom _pytest.main import Session\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.pytester import Pytester\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nimport pytest\n\n\nclass TestModule:\n    def test_failing_import(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\"import alksdjalskdjalkjals\")\n        pytest.raises(Collector.CollectError, modcol.collect)\n\n    def test_import_duplicate(self, pytester: Pytester) -> None:\n        a = pytester.mkdir(\"a\")\n        b = pytester.mkdir(\"b\")\n        p1 = a.joinpath(\"test_whatever.py\")\n        p1.touch()\n        p2 = b.joinpath(\"test_whatever.py\")\n        p2.touch()\n        # ensure we don't have it imported already\n        sys.modules.pop(p1.stem, None)\n\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*import*mismatch*\",\n                \"*imported*test_whatever*\",\n                f\"*{p1}*\",\n                \"*not the same*\",\n                f\"*{p2}*\",\n                \"*HINT*\",\n            ]\n        )\n\n    def test_import_prepend_append(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        root1 = pytester.mkdir(\"root1\")\n        root2 = pytester.mkdir(\"root2\")\n        root1.joinpath(\"x456.py\").touch()\n        root2.joinpath(\"x456.py\").touch()\n        p = root2.joinpath(\"test_x456.py\")\n        monkeypatch.syspath_prepend(str(root1))\n        p.write_text(\n            textwrap.dedent(\n                f\"\"\"\\\n                import x456\n                def test():\n                    assert x456.__file__.startswith({str(root2)!r})\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        with monkeypatch.context() as mp:\n            mp.chdir(root2)\n            reprec = pytester.inline_run(\"--import-mode=append\")\n            reprec.assertoutcome(passed=0, failed=1)\n            reprec = pytester.inline_run()\n            reprec.assertoutcome(passed=1)\n\n    def test_syntax_error_in_module(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\"this is a syntax error\")\n        pytest.raises(modcol.CollectError, modcol.collect)\n        pytest.raises(modcol.CollectError, modcol.collect)\n\n    def test_module_considers_pluginmanager_at_import(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\"pytest_plugins='xasdlkj',\")\n        pytest.raises(ImportError, lambda: modcol.obj)\n\n    def test_invalid_test_module_name(self, pytester: Pytester) -> None:\n        a = pytester.mkdir(\"a\")\n        a.joinpath(\"test_one.part1.py\").touch()\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"ImportError while importing test module*test_one.part1*\",\n                \"Hint: make sure your test modules/packages have valid Python names.\",\n            ]\n        )\n\n    @pytest.mark.parametrize(\"verbose\", [0, 1, 2])\n    def test_show_traceback_import_error(\n        self, pytester: Pytester, verbose: int\n    ) -> None:\n        \"\"\"Import errors when collecting modules should display the traceback (#1976).\n\n        With low verbosity we omit pytest and internal modules, otherwise show all traceback entries.\n        \"\"\"\n        pytester.makepyfile(\n            foo_traceback_import_error=\"\"\"\n               from bar_traceback_import_error import NOT_AVAILABLE\n           \"\"\",\n            bar_traceback_import_error=\"\",\n        )\n        pytester.makepyfile(\n            \"\"\"\n               import foo_traceback_import_error\n        \"\"\"\n        )\n        args = (\"-v\",) * verbose\n        result = pytester.runpytest(*args)\n        result.stdout.fnmatch_lines(\n            [\n                \"ImportError while importing test module*\",\n                \"Traceback:\",\n                \"*from bar_traceback_import_error import NOT_AVAILABLE\",\n                \"*cannot import name *NOT_AVAILABLE*\",\n            ]\n        )\n        assert result.ret == 2\n\n        stdout = result.stdout.str()\n        if verbose == 2:\n            assert \"_pytest\" in stdout\n        else:\n            assert \"_pytest\" not in stdout\n\n    def test_show_traceback_import_error_unicode(self, pytester: Pytester) -> None:\n        \"\"\"Check test modules collected which raise ImportError with unicode messages\n        are handled properly (#2336).\n        \"\"\"\n        pytester.makepyfile(\"raise ImportError('Something bad happened \u263a')\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"ImportError while importing test module*\",\n                \"Traceback:\",\n                \"*raise ImportError*Something bad happened*\",\n            ]\n        )\n        assert result.ret == 2\n\n\nclass TestClass:\n    def test_class_with_init_warning(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            class TestClass1(object):\n                def __init__(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*cannot collect test class 'TestClass1' because it has \"\n                \"a __init__ constructor (from: test_class_with_init_warning.py)\"\n            ]\n        )\n\n    def test_class_with_new_warning(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            class TestClass1(object):\n                def __new__(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*cannot collect test class 'TestClass1' because it has \"\n                \"a __new__ constructor (from: test_class_with_new_warning.py)\"\n            ]\n        )\n\n    def test_class_subclassobject(self, pytester: Pytester) -> None:\n        pytester.getmodulecol(\n            \"\"\"\n            class test(object):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*collected 0*\"])\n\n    def test_static_method(self, pytester: Pytester) -> None:\n        \"\"\"Support for collecting staticmethod tests (#2528, #2699)\"\"\"\n        pytester.getmodulecol(\n            \"\"\"\n            import pytest\n            class Test(object):\n                @staticmethod\n                def test_something():\n                    pass\n\n                @pytest.fixture\n                def fix(self):\n                    return 1\n\n                @staticmethod\n                def test_fix(fix):\n                    assert fix == 1\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*collected 2 items*\", \"*2 passed in*\"])\n\n    def test_setup_teardown_class_as_classmethod(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_mod1=\"\"\"\n            class TestClassMethod(object):\n                @classmethod\n                def setup_class(cls):\n                    pass\n                def test_1(self):\n                    pass\n                @classmethod\n                def teardown_class(cls):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_issue1035_obj_has_getattr(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            class Chameleon(object):\n                def __getattr__(self, name):\n                    return True\n            chameleon = Chameleon()\n        \"\"\"\n        )\n        colitems = modcol.collect()\n        assert len(colitems) == 0\n\n    def test_issue1579_namedtuple(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import collections\n\n            TestCase = collections.namedtuple('TestCase', ['a'])\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            \"*cannot collect test class 'TestCase' \"\n            \"because it has a __new__ constructor*\"\n        )\n\n    def test_issue2234_property(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            class TestCase(object):\n                @property\n                def prop(self):\n                    raise NotImplementedError()\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n    def test_abstract_class_is_not_collected(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #12275 (non-unittest version).\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import abc\n\n            class TestBase(abc.ABC):\n                @abc.abstractmethod\n                def abstract1(self): pass\n\n                @abc.abstractmethod\n                def abstract2(self): pass\n\n                def test_it(self): pass\n\n            class TestPartial(TestBase):\n                def abstract1(self): pass\n\n            class TestConcrete(TestPartial):\n                def abstract2(self): pass\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.OK\n        result.assert_outcomes(passed=1)\n\n\nclass TestFunction:\n    def test_getmodulecollector(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\"def test_func(): pass\")\n        modcol = item.getparent(pytest.Module)\n        assert isinstance(modcol, pytest.Module)\n        assert hasattr(modcol.obj, \"test_func\")\n\n    @pytest.mark.filterwarnings(\"default\")\n    def test_function_as_object_instance_ignored(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            class A(object):\n                def __call__(self, tmp_path):\n                    0/0\n\n            test_a = A()\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 0 items\",\n                \"*test_function_as_object_instance_ignored.py:2: \"\n                \"*cannot collect 'test_a' because it is not a function.\",\n            ]\n        )\n\n    @staticmethod\n    def make_function(pytester: Pytester, **kwargs: Any) -> Any:\n        from _pytest.fixtures import FixtureManager\n\n        config = pytester.parseconfigure()\n        session = Session.from_config(config)\n        session._fixturemanager = FixtureManager(session)\n\n        return pytest.Function.from_parent(parent=session, **kwargs)\n\n    def test_function_equality(self, pytester: Pytester) -> None:\n        def func1():\n            pass\n\n        def func2():\n            pass\n\n        f1 = self.make_function(pytester, name=\"name\", callobj=func1)\n        assert f1 == f1\n        f2 = self.make_function(\n            pytester, name=\"name\", callobj=func2, originalname=\"foobar\"\n        )\n        assert f1 != f2\n\n    def test_repr_produces_actual_test_id(self, pytester: Pytester) -> None:\n        f = self.make_function(\n            pytester, name=r\"test[\\xe5]\", callobj=self.test_repr_produces_actual_test_id\n        )\n        assert repr(f) == r\"<Function test[\\xe5]>\"\n\n    def test_issue197_parametrize_emptyset(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('arg', [])\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(skipped=1)\n\n    def test_single_tuple_unwraps_values(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize(('arg',), [(1,)])\n            def test_function(arg):\n                assert arg == 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_issue213_parametrize_value_no_equal(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            class A(object):\n                def __eq__(self, other):\n                    raise ValueError(\"not possible\")\n            @pytest.mark.parametrize('arg', [A()])\n            def test_function(arg):\n                assert arg.__class__.__name__ == \"A\"\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--fulltrace\")\n        reprec.assertoutcome(passed=1)\n\n    def test_parametrize_with_non_hashable_values(self, pytester: Pytester) -> None:\n        \"\"\"Test parametrization with non-hashable values.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            archival_mapping = {\n                '1.0': {'tag': '1.0'},\n                '1.2.2a1': {'tag': 'release-1.2.2a1'},\n            }\n\n            import pytest\n            @pytest.mark.parametrize('key value'.split(),\n                                     archival_mapping.items())\n            def test_archival_to_version(key, value):\n                assert key in archival_mapping\n                assert value == archival_mapping[key]\n        \"\"\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(passed=2)\n\n    def test_parametrize_with_non_hashable_values_indirect(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test parametrization with non-hashable values with indirect parametrization.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            archival_mapping = {\n                '1.0': {'tag': '1.0'},\n                '1.2.2a1': {'tag': 'release-1.2.2a1'},\n            }\n\n            import pytest\n\n            @pytest.fixture\n            def key(request):\n                return request.param\n\n            @pytest.fixture\n            def value(request):\n                return request.param\n\n            @pytest.mark.parametrize('key value'.split(),\n                                     archival_mapping.items(), indirect=True)\n            def test_archival_to_version(key, value):\n                assert key in archival_mapping\n                assert value == archival_mapping[key]\n        \"\"\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(passed=2)\n\n    def test_parametrize_overrides_fixture(self, pytester: Pytester) -> None:\n        \"\"\"Test parametrization when parameter overrides existing fixture with same name.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def value():\n                return 'value'\n\n            @pytest.mark.parametrize('value',\n                                     ['overridden'])\n            def test_overridden_via_param(value):\n                assert value == 'overridden'\n\n            @pytest.mark.parametrize('somevalue', ['overridden'])\n            def test_not_overridden(value, somevalue):\n                assert value == 'value'\n                assert somevalue == 'overridden'\n\n            @pytest.mark.parametrize('other,value', [('foo', 'overridden')])\n            def test_overridden_via_multiparam(other, value):\n                assert other == 'foo'\n                assert value == 'overridden'\n        \"\"\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(passed=3)\n\n    def test_parametrize_overrides_parametrized_fixture(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test parametrization when parameter overrides existing parametrized fixture with same name.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2])\n            def value(request):\n                return request.param\n\n            @pytest.mark.parametrize('value',\n                                     ['overridden'])\n            def test_overridden_via_param(value):\n                assert value == 'overridden'\n        \"\"\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(passed=1)\n\n    def test_parametrize_overrides_indirect_dependency_fixture(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test parametrization when parameter overrides a fixture that a test indirectly depends on\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            fix3_instantiated = False\n\n            @pytest.fixture\n            def fix1(fix2):\n               return fix2 + '1'\n\n            @pytest.fixture\n            def fix2(fix3):\n               return fix3 + '2'\n\n            @pytest.fixture\n            def fix3():\n               global fix3_instantiated\n               fix3_instantiated = True\n               return '3'\n\n            @pytest.mark.parametrize('fix2', ['2'])\n            def test_it(fix1):\n               assert fix1 == '21'\n               assert not fix3_instantiated\n        \"\"\"\n        )\n        rec = pytester.inline_run()\n        rec.assertoutcome(passed=1)\n\n    def test_parametrize_with_mark(self, pytester: Pytester) -> None:\n        items = pytester.getitems(\n            \"\"\"\n            import pytest\n            @pytest.mark.foo\n            @pytest.mark.parametrize('arg', [\n                1,\n                pytest.param(2, marks=[pytest.mark.baz, pytest.mark.bar])\n            ])\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n        keywords = [item.keywords for item in items]\n        assert (\n            \"foo\" in keywords[0]\n            and \"bar\" not in keywords[0]\n            and \"baz\" not in keywords[0]\n        )\n        assert \"foo\" in keywords[1] and \"bar\" in keywords[1] and \"baz\" in keywords[1]\n\n    def test_parametrize_with_empty_string_arguments(self, pytester: Pytester) -> None:\n        items = pytester.getitems(\n            \"\"\"\\\n            import pytest\n\n            @pytest.mark.parametrize('v', ('', ' '))\n            @pytest.mark.parametrize('w', ('', ' '))\n            def test(v, w): ...\n            \"\"\"\n        )\n        names = {item.name for item in items}\n        assert names == {\"test[-]\", \"test[ -]\", \"test[- ]\", \"test[ - ]\"}\n\n    def test_function_equality_with_callspec(self, pytester: Pytester) -> None:\n        items = pytester.getitems(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('arg', [1,2])\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n        assert items[0] != items[1]\n        assert not (items[0] == items[1])\n\n    def test_pyfunc_call(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\"def test_func(): raise ValueError\")\n        config = item.config\n\n        class MyPlugin1:\n            def pytest_pyfunc_call(self):\n                raise ValueError\n\n        class MyPlugin2:\n            def pytest_pyfunc_call(self):\n                return True\n\n        config.pluginmanager.register(MyPlugin1())\n        config.pluginmanager.register(MyPlugin2())\n        config.hook.pytest_runtest_setup(item=item)\n        config.hook.pytest_pyfunc_call(pyfuncitem=item)\n\n    def test_multiple_parametrize(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('x', [0, 1])\n            @pytest.mark.parametrize('y', [2, 3])\n            def test1(x, y):\n                pass\n        \"\"\"\n        )\n        colitems = modcol.collect()\n        assert colitems[0].name == \"test1[2-0]\"\n        assert colitems[1].name == \"test1[2-1]\"\n        assert colitems[2].name == \"test1[3-0]\"\n        assert colitems[3].name == \"test1[3-1]\"\n\n    def test_issue751_multiple_parametrize_with_ids(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('x', [0], ids=['c'])\n            @pytest.mark.parametrize('y', [0, 1], ids=['a', 'b'])\n            class Test(object):\n                def test1(self, x, y):\n                    pass\n                def test2(self, x, y):\n                    pass\n        \"\"\"\n        )\n        colitems = modcol.collect()[0].collect()\n        assert colitems[0].name == \"test1[a-c]\"\n        assert colitems[1].name == \"test1[b-c]\"\n        assert colitems[2].name == \"test2[a-c]\"\n        assert colitems[3].name == \"test2[b-c]\"\n\n    def test_parametrize_skipif(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            m = pytest.mark.skipif('True')\n\n            @pytest.mark.parametrize('x', [0, 1, pytest.param(2, marks=m)])\n            def test_skip_if(x):\n                assert x < 2\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 2 passed, 1 skipped in *\"])\n\n    def test_parametrize_skip(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            m = pytest.mark.skip('')\n\n            @pytest.mark.parametrize('x', [0, 1, pytest.param(2, marks=m)])\n            def test_skip(x):\n                assert x < 2\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 2 passed, 1 skipped in *\"])\n\n    def test_parametrize_skipif_no_skip(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            m = pytest.mark.skipif('False')\n\n            @pytest.mark.parametrize('x', [0, 1, m(2)])\n            def test_skipif_no_skip(x):\n                assert x < 2\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 1 failed, 2 passed in *\"])\n\n    def test_parametrize_xfail(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            m = pytest.mark.xfail('True')\n\n            @pytest.mark.parametrize('x', [0, 1, pytest.param(2, marks=m)])\n            def test_xfail(x):\n                assert x < 2\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 2 passed, 1 xfailed in *\"])\n\n    def test_parametrize_passed(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            m = pytest.mark.xfail('True')\n\n            @pytest.mark.parametrize('x', [0, 1, pytest.param(2, marks=m)])\n            def test_xfail(x):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 2 passed, 1 xpassed in *\"])\n\n    def test_parametrize_xfail_passed(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            m = pytest.mark.xfail('False')\n\n            @pytest.mark.parametrize('x', [0, 1, m(2)])\n            def test_passed(x):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 3 passed in *\"])\n\n    def test_function_originalname(self, pytester: Pytester) -> None:\n        items = pytester.getitems(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize('arg', [1,2])\n            def test_func(arg):\n                pass\n\n            def test_no_param():\n                pass\n        \"\"\"\n        )\n        originalnames = []\n        for x in items:\n            assert isinstance(x, pytest.Function)\n            originalnames.append(x.originalname)\n        assert originalnames == [\n            \"test_func\",\n            \"test_func\",\n            \"test_no_param\",\n        ]\n\n    def test_function_with_square_brackets(self, pytester: Pytester) -> None:\n        \"\"\"Check that functions with square brackets don't cause trouble.\"\"\"\n        p1 = pytester.makepyfile(\n            \"\"\"\n            locals()[\"test_foo[name]\"] = lambda: None\n            \"\"\"\n        )\n        result = pytester.runpytest(\"-v\", str(p1))\n        result.stdout.fnmatch_lines(\n            [\n                \"test_function_with_square_brackets.py::test_foo[[]name[]] PASSED *\",\n                \"*= 1 passed in *\",\n            ]\n        )\n\n\nclass TestSorting:\n    def test_check_equality(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            def test_pass(): pass\n            def test_fail(): assert 0\n        \"\"\"\n        )\n        fn1 = pytester.collect_by_name(modcol, \"test_pass\")\n        assert isinstance(fn1, pytest.Function)\n        fn2 = pytester.collect_by_name(modcol, \"test_pass\")\n        assert isinstance(fn2, pytest.Function)\n\n        assert fn1 == fn2\n        assert fn1 != modcol\n        assert hash(fn1) == hash(fn2)\n\n        fn3 = pytester.collect_by_name(modcol, \"test_fail\")\n        assert isinstance(fn3, pytest.Function)\n        assert not (fn1 == fn3)\n        assert fn1 != fn3\n\n        for fn in fn1, fn2, fn3:\n            assert fn != 3  # type: ignore[comparison-overlap]\n            assert fn != modcol\n            assert fn != [1, 2, 3]  # type: ignore[comparison-overlap]\n            assert [1, 2, 3] != fn  # type: ignore[comparison-overlap]\n            assert modcol != fn\n\n    def test_allow_sane_sorting_for_decorators(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            def dec(f):\n                g = lambda: f(2)\n                g.place_as = f\n                return g\n\n\n            def test_b(y):\n                pass\n            test_b = dec(test_b)\n\n            def test_a(y):\n                pass\n            test_a = dec(test_a)\n        \"\"\"\n        )\n        colitems = modcol.collect()\n        assert len(colitems) == 2\n        assert [item.name for item in colitems] == [\"test_b\", \"test_a\"]\n\n    def test_ordered_by_definition_order(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            class Test1:\n                def test_foo(self): pass\n                def test_bar(self): pass\n            class Test2:\n                def test_foo(self): pass\n                test_bar = Test1.test_bar\n            class Test3(Test2):\n                def test_baz(self): pass\n            \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines(\n            [\n                \"*Class Test1*\",\n                \"*Function test_foo*\",\n                \"*Function test_bar*\",\n                \"*Class Test2*\",\n                # previously the order was flipped due to Test1.test_bar reference\n                \"*Function test_foo*\",\n                \"*Function test_bar*\",\n                \"*Class Test3*\",\n                \"*Function test_foo*\",\n                \"*Function test_bar*\",\n                \"*Function test_baz*\",\n            ]\n        )\n\n\nclass TestConftestCustomization:\n    def test_pytest_pycollect_module(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            class MyModule(pytest.Module):\n                pass\n            def pytest_pycollect_makemodule(module_path, parent):\n                if module_path.name == \"test_xyz.py\":\n                    return MyModule.from_parent(path=module_path, parent=parent)\n        \"\"\"\n        )\n        pytester.makepyfile(\"def test_some(): pass\")\n        pytester.makepyfile(test_xyz=\"def test_func(): pass\")\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*<Module*test_pytest*\", \"*<MyModule*xyz*\"])\n\n    def test_customized_pymakemodule_issue205_subdir(self, pytester: Pytester) -> None:\n        b = pytester.path.joinpath(\"a\", \"b\")\n        b.mkdir(parents=True)\n        b.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.hookimpl(wrapper=True)\n                def pytest_pycollect_makemodule():\n                    mod = yield\n                    mod.obj.hello = \"world\"\n                    return mod\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        b.joinpath(\"test_module.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def test_hello():\n                    assert hello == \"world\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_customized_pymakeitem(self, pytester: Pytester) -> None:\n        b = pytester.path.joinpath(\"a\", \"b\")\n        b.mkdir(parents=True)\n        b.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.hookimpl(wrapper=True)\n                def pytest_pycollect_makeitem():\n                    result = yield\n                    if result:\n                        for func in result:\n                            func._some123 = \"world\"\n                    return result\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        b.joinpath(\"test_module.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n\n                @pytest.fixture()\n                def obj(request):\n                    return request.node._some123\n                def test_hello(obj):\n                    assert obj == \"world\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_pytest_pycollect_makeitem(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            class MyFunction(pytest.Function):\n                pass\n            def pytest_pycollect_makeitem(collector, name, obj):\n                if name == \"some\":\n                    return MyFunction.from_parent(name=name, parent=collector)\n        \"\"\"\n        )\n        pytester.makepyfile(\"def some(): pass\")\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*MyFunction*some*\"])\n\n    def test_issue2369_collect_module_fileext(self, pytester: Pytester) -> None:\n        \"\"\"Ensure we can collect files with weird file extensions as Python\n        modules (#2369)\"\"\"\n        # Implement a little meta path finder to import files containing\n        # Python source code whose file extension is \".narf\".\n        pytester.makeconftest(\n            \"\"\"\n            import sys\n            import os.path\n            from importlib.util import spec_from_loader\n            from importlib.machinery import SourceFileLoader\n            from _pytest.python import Module\n\n            class MetaPathFinder:\n                def find_spec(self, fullname, path, target=None):\n                    if os.path.exists(fullname + \".narf\"):\n                        return spec_from_loader(\n                            fullname,\n                            SourceFileLoader(fullname, fullname + \".narf\"),\n                        )\n            sys.meta_path.append(MetaPathFinder())\n\n            def pytest_collect_file(file_path, parent):\n                if file_path.suffix == \".narf\":\n                    return Module.from_parent(path=file_path, parent=parent)\n            \"\"\"\n        )\n        pytester.makefile(\n            \".narf\",\n            \"\"\"\\\n            def test_something():\n                assert 1 + 1 == 2\"\"\",\n        )\n        # Use runpytest_subprocess, since we're futzing with sys.meta_path.\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_early_ignored_attributes(self, pytester: Pytester) -> None:\n        \"\"\"Builtin attributes should be ignored early on, even if\n        configuration would otherwise allow them.\n\n        This tests a performance optimization, not correctness, really,\n        although it tests PytestCollectionWarning is not raised, while\n        it would have been raised otherwise.\n        \"\"\"\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            python_classes=*\n            python_functions=*\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            class TestEmpty:\n                pass\n            test_empty = TestEmpty()\n            def test_real():\n                pass\n        \"\"\"\n        )\n        items, rec = pytester.inline_genitems()\n        assert rec.ret == 0\n        assert len(items) == 1\n\n\ndef test_setup_only_available_in_subdir(pytester: Pytester) -> None:\n    sub1 = pytester.mkpydir(\"sub1\")\n    sub2 = pytester.mkpydir(\"sub2\")\n    sub1.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            def pytest_runtest_setup(item):\n                assert item.path.stem == \"test_in_sub1\"\n            def pytest_runtest_call(item):\n                assert item.path.stem == \"test_in_sub1\"\n            def pytest_runtest_teardown(item):\n                assert item.path.stem == \"test_in_sub1\"\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    sub2.joinpath(\"conftest.py\").write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            def pytest_runtest_setup(item):\n                assert item.path.stem == \"test_in_sub2\"\n            def pytest_runtest_call(item):\n                assert item.path.stem == \"test_in_sub2\"\n            def pytest_runtest_teardown(item):\n                assert item.path.stem == \"test_in_sub2\"\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    sub1.joinpath(\"test_in_sub1.py\").write_text(\"def test_1(): pass\", encoding=\"utf-8\")\n    sub2.joinpath(\"test_in_sub2.py\").write_text(\"def test_2(): pass\", encoding=\"utf-8\")\n    result = pytester.runpytest(\"-v\", \"-s\")\n    result.assert_outcomes(passed=2)\n\n\ndef test_modulecol_roundtrip(pytester: Pytester) -> None:\n    modcol = pytester.getmodulecol(\"pass\", withinit=False)\n    trail = modcol.nodeid\n    newcol = modcol.session.perform_collect([trail], genitems=0)[0]\n    assert modcol.name == newcol.name\n\n\nclass TestTracebackCutting:\n    def test_skip_simple(self):\n        with pytest.raises(pytest.skip.Exception) as excinfo:\n            pytest.skip(\"xxx\")\n        assert excinfo.traceback[-1].frame.code.name == \"skip\"\n        assert excinfo.traceback[-1].ishidden(excinfo)\n        assert excinfo.traceback[-2].frame.code.name == \"test_skip_simple\"\n        assert not excinfo.traceback[-2].ishidden(excinfo)\n\n    def test_traceback_argsetup(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def hello(request):\n                raise ValueError(\"xyz\")\n        \"\"\"\n        )\n        p = pytester.makepyfile(\"def test(hello): pass\")\n        result = pytester.runpytest(p)\n        assert result.ret != 0\n        out = result.stdout.str()\n        assert \"xyz\" in out\n        assert \"conftest.py:5: ValueError\" in out\n        numentries = out.count(\"_ _ _\")  # separator for traceback entries\n        assert numentries == 0\n\n        result = pytester.runpytest(\"--fulltrace\", p)\n        out = result.stdout.str()\n        assert \"conftest.py:5: ValueError\" in out\n        numentries = out.count(\"_ _ _ _\")  # separator for traceback entries\n        assert numentries > 3\n\n    def test_traceback_error_during_import(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            x = 1\n            x = 2\n            x = 17\n            asd\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        out = result.stdout.str()\n        assert \"x = 1\" not in out\n        assert \"x = 2\" not in out\n        result.stdout.fnmatch_lines([\" *asd*\", \"E*NameError*\"])\n        result = pytester.runpytest(\"--fulltrace\")\n        out = result.stdout.str()\n        assert \"x = 1\" in out\n        assert \"x = 2\" in out\n        result.stdout.fnmatch_lines([\">*asd*\", \"E*NameError*\"])\n\n    def test_traceback_filter_error_during_fixture_collection(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Integration test for issue #995.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def fail_me(func):\n                ns = {}\n                exec('def w(): raise ValueError(\"fail me\")', ns)\n                return ns['w']\n\n            @pytest.fixture(scope='class')\n            @fail_me\n            def fail_fixture():\n                pass\n\n            def test_failing_fixture(fail_fixture):\n               pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        out = result.stdout.str()\n        assert \"INTERNALERROR>\" not in out\n        result.stdout.fnmatch_lines([\"*ValueError: fail me*\", \"* 1 error in *\"])\n\n    def test_filter_traceback_generated_code(self) -> None:\n        \"\"\"Test that filter_traceback() works with the fact that\n        _pytest._code.code.Code.path attribute might return an str object.\n\n        In this case, one of the entries on the traceback was produced by\n        dynamically generated code.\n        See: https://bitbucket.org/pytest-dev/py/issues/71\n        This fixes #995.\n        \"\"\"\n        from _pytest._code import filter_traceback\n\n        tb = None\n        try:\n            ns: dict[str, Any] = {}\n            exec(\"def foo(): raise ValueError\", ns)\n            ns[\"foo\"]()\n        except ValueError:\n            _, _, tb = sys.exc_info()\n\n        assert tb is not None\n        traceback = _pytest._code.Traceback(tb)\n        assert isinstance(traceback[-1].path, str)\n        assert not filter_traceback(traceback[-1])\n\n    def test_filter_traceback_path_no_longer_valid(self, pytester: Pytester) -> None:\n        \"\"\"Test that filter_traceback() works with the fact that\n        _pytest._code.code.Code.path attribute might return an str object.\n\n        In this case, one of the files in the traceback no longer exists.\n        This fixes #1133.\n        \"\"\"\n        from _pytest._code import filter_traceback\n\n        pytester.syspathinsert()\n        pytester.makepyfile(\n            filter_traceback_entry_as_str=\"\"\"\n            def foo():\n                raise ValueError\n        \"\"\"\n        )\n        tb = None\n        try:\n            import filter_traceback_entry_as_str\n\n            filter_traceback_entry_as_str.foo()\n        except ValueError:\n            _, _, tb = sys.exc_info()\n\n        assert tb is not None\n        pytester.path.joinpath(\"filter_traceback_entry_as_str.py\").unlink()\n        traceback = _pytest._code.Traceback(tb)\n        assert isinstance(traceback[-1].path, str)\n        assert filter_traceback(traceback[-1])\n\n\nclass TestReportInfo:\n    def test_itemreport_reportinfo(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            class MyFunction(pytest.Function):\n                def reportinfo(self):\n                    return \"ABCDE\", 42, \"custom\"\n            def pytest_pycollect_makeitem(collector, name, obj):\n                if name == \"test_func\":\n                    return MyFunction.from_parent(name=name, parent=collector)\n        \"\"\"\n        )\n        item = pytester.getitem(\"def test_func(): pass\")\n        item.config.pluginmanager.getplugin(\"runner\")\n        assert item.location == (\"ABCDE\", 42, \"custom\")\n\n    def test_func_reportinfo(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\"def test_func(): pass\")\n        path, lineno, modpath = item.reportinfo()\n        assert os.fspath(path) == str(item.path)\n        assert lineno == 0\n        assert modpath == \"test_func\"\n\n    def test_class_reportinfo(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            # lineno 0\n            class TestClass(object):\n                def test_hello(self): pass\n        \"\"\"\n        )\n        classcol = pytester.collect_by_name(modcol, \"TestClass\")\n        assert isinstance(classcol, Class)\n        path, lineno, msg = classcol.reportinfo()\n        assert os.fspath(path) == str(modcol.path)\n        assert lineno == 1\n        assert msg == \"TestClass\"\n\n    @pytest.mark.filterwarnings(\n        \"ignore:usage of Generator.Function is deprecated, please use pytest.Function instead\"\n    )\n    def test_reportinfo_with_nasty_getattr(self, pytester: Pytester) -> None:\n        # https://github.com/pytest-dev/pytest/issues/1204\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            # lineno 0\n            class TestClass:\n                def __getattr__(self, name):\n                    return \"this is not an int\"\n\n                def __class_getattr__(cls, name):\n                    return \"this is not an int\"\n\n                def intest_foo(self):\n                    pass\n\n                def test_bar(self):\n                    pass\n        \"\"\"\n        )\n        classcol = pytester.collect_by_name(modcol, \"TestClass\")\n        assert isinstance(classcol, Class)\n        path, lineno, msg = classcol.reportinfo()\n        func = next(iter(classcol.collect()))\n        assert isinstance(func, Function)\n        path, lineno, msg = func.reportinfo()\n\n\ndef test_customized_python_discovery(pytester: Pytester) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        python_files=check_*.py\n        python_classes=Check\n        python_functions=check\n    \"\"\"\n    )\n    p = pytester.makepyfile(\n        \"\"\"\n        def check_simple():\n            pass\n        class CheckMyApp(object):\n            def check_meth(self):\n                pass\n    \"\"\"\n    )\n    p2 = p.with_name(p.name.replace(\"test\", \"check\"))\n    p.rename(p2)\n    result = pytester.runpytest(\"--collect-only\", \"-s\")\n    result.stdout.fnmatch_lines(\n        [\"*check_customized*\", \"*check_simple*\", \"*CheckMyApp*\", \"*check_meth*\"]\n    )\n\n    result = pytester.runpytest()\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n\ndef test_customized_python_discovery_functions(pytester: Pytester) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        python_functions=_test\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        def _test_underscore():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--collect-only\", \"-s\")\n    result.stdout.fnmatch_lines([\"*_test_underscore*\"])\n\n    result = pytester.runpytest()\n    assert result.ret == 0\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_unorderable_types(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        class TestJoinEmpty(object):\n            pass\n\n        def make_test():\n            class Test(object):\n                pass\n            Test.__name__ = \"TestFoo\"\n            return Test\n        TestFoo = make_test()\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.no_fnmatch_line(\"*TypeError*\")\n    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n\n\n@pytest.mark.filterwarnings(\"default::pytest.PytestCollectionWarning\")\ndef test_dont_collect_non_function_callable(pytester: Pytester) -> None:\n    \"\"\"Test for issue https://github.com/pytest-dev/pytest/issues/331\n\n    In this case an INTERNALERROR occurred trying to report the failure of\n    a test like this one because pytest failed to get the source lines.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        class Oh(object):\n            def __call__(self):\n                pass\n\n        test_a = Oh()\n\n        def test_real():\n            pass\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"*collected 1 item*\",\n            \"*test_dont_collect_non_function_callable.py:2: *cannot collect 'test_a' because it is not a function*\",\n            \"*1 passed, 1 warning in *\",\n        ]\n    )\n\n\ndef test_class_injection_does_not_break_collection(pytester: Pytester) -> None:\n    \"\"\"Tests whether injection during collection time will terminate testing.\n\n    In this case the error should not occur if the TestClass itself\n    is modified during collection time, and the original method list\n    is still used for collection.\n    \"\"\"\n    pytester.makeconftest(\n        \"\"\"\n        from test_inject import TestClass\n        def pytest_generate_tests(metafunc):\n            TestClass.changed_var = {}\n    \"\"\"\n    )\n    pytester.makepyfile(\n        test_inject='''\n         class TestClass(object):\n            def test_injection(self):\n                \"\"\"Test being parametrized.\"\"\"\n                pass\n    '''\n    )\n    result = pytester.runpytest()\n    assert (\n        \"RuntimeError: dictionary changed size during iteration\"\n        not in result.stdout.str()\n    )\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_syntax_error_with_non_ascii_chars(pytester: Pytester) -> None:\n    \"\"\"Fix decoding issue while formatting SyntaxErrors during collection (#578).\"\"\"\n    pytester.makepyfile(\"\u2603\")\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*ERROR collecting*\", \"*SyntaxError*\", \"*1 error in*\"])\n\n\ndef test_collect_error_with_fulltrace(pytester: Pytester) -> None:\n    pytester.makepyfile(\"assert 0\")\n    result = pytester.runpytest(\"--fulltrace\")\n    result.stdout.fnmatch_lines(\n        [\n            \"collected 0 items / 1 error\",\n            \"\",\n            \"*= ERRORS =*\",\n            \"*_ ERROR collecting test_collect_error_with_fulltrace.py _*\",\n            \"\",\n            \">   assert 0\",\n            \"E   assert 0\",\n            \"\",\n            \"test_collect_error_with_fulltrace.py:1: AssertionError\",\n            \"*! Interrupted: 1 error during collection !*\",\n        ]\n    )\n\n\ndef test_skip_duplicates_by_default(pytester: Pytester) -> None:\n    \"\"\"Test for issue https://github.com/pytest-dev/pytest/issues/1609 (#1609)\n\n    Ignore duplicate directories.\n    \"\"\"\n    a = pytester.mkdir(\"a\")\n    fh = a.joinpath(\"test_a.py\")\n    fh.write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            def test_real():\n                pass\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    result = pytester.runpytest(str(a), str(a))\n    result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n\n\ndef test_keep_duplicates(pytester: Pytester) -> None:\n    \"\"\"Test for issue https://github.com/pytest-dev/pytest/issues/1609 (#1609)\n\n    Use --keep-duplicates to collect tests from duplicate directories.\n    \"\"\"\n    a = pytester.mkdir(\"a\")\n    fh = a.joinpath(\"test_a.py\")\n    fh.write_text(\n        textwrap.dedent(\n            \"\"\"\\\n            import pytest\n            def test_real():\n                pass\n            \"\"\"\n        ),\n        encoding=\"utf-8\",\n    )\n    result = pytester.runpytest(\"--keep-duplicates\", str(a), str(a))\n    result.stdout.fnmatch_lines([\"*collected 2 item*\"])\n\n\ndef test_package_collection_infinite_recursion(pytester: Pytester) -> None:\n    pytester.copy_example(\"collect/package_infinite_recursion\")\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n\ndef test_package_collection_init_given_as_argument(pytester: Pytester) -> None:\n    \"\"\"Regression test for #3749, #8976, #9263, #9313.\n\n    Specifying an __init__.py file directly should collect only the __init__.py\n    Module, not the entire package.\n    \"\"\"\n    p = pytester.copy_example(\"collect/package_init_given_as_arg\")\n    items, hookrecorder = pytester.inline_genitems(p / \"pkg\" / \"__init__.py\")\n    assert len(items) == 1\n    assert items[0].name == \"test_init\"\n\n\ndef test_package_with_modules(pytester: Pytester) -> None:\n    \"\"\"\n    .\n    \u2514\u2500\u2500 root\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 sub1\n        \u2502   \u251c\u2500\u2500 __init__.py\n        \u2502   \u2514\u2500\u2500 sub1_1\n        \u2502       \u251c\u2500\u2500 __init__.py\n        \u2502       \u2514\u2500\u2500 test_in_sub1.py\n        \u2514\u2500\u2500 sub2\n            \u2514\u2500\u2500 test\n                \u2514\u2500\u2500 test_in_sub2.py\n\n    \"\"\"\n    root = pytester.mkpydir(\"root\")\n    sub1 = root.joinpath(\"sub1\")\n    sub1_test = sub1.joinpath(\"sub1_1\")\n    sub1_test.mkdir(parents=True)\n    for d in (sub1, sub1_test):\n        d.joinpath(\"__init__.py\").touch()\n\n    sub2 = root.joinpath(\"sub2\")\n    sub2_test = sub2.joinpath(\"test\")\n    sub2_test.mkdir(parents=True)\n\n    sub1_test.joinpath(\"test_in_sub1.py\").write_text(\n        \"def test_1(): pass\", encoding=\"utf-8\"\n    )\n    sub2_test.joinpath(\"test_in_sub2.py\").write_text(\n        \"def test_2(): pass\", encoding=\"utf-8\"\n    )\n\n    # Execute from .\n    result = pytester.runpytest(\"-v\", \"-s\")\n    result.assert_outcomes(passed=2)\n\n    # Execute from . with one argument \"root\"\n    result = pytester.runpytest(\"-v\", \"-s\", \"root\")\n    result.assert_outcomes(passed=2)\n\n    # Chdir into package's root and execute with no args\n    os.chdir(root)\n    result = pytester.runpytest(\"-v\", \"-s\")\n    result.assert_outcomes(passed=2)\n\n\ndef test_package_ordering(pytester: Pytester) -> None:\n    \"\"\"\n    .\n    \u2514\u2500\u2500 root\n        \u251c\u2500\u2500 Test_root.py\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 sub1\n        \u2502   \u251c\u2500\u2500 Test_sub1.py\n        \u2502   \u2514\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 sub2\n            \u2514\u2500\u2500 test\n                \u2514\u2500\u2500 test_sub2.py\n\n    \"\"\"\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        python_files=*.py\n    \"\"\"\n    )\n    root = pytester.mkpydir(\"root\")\n    sub1 = root.joinpath(\"sub1\")\n    sub1.mkdir()\n    sub1.joinpath(\"__init__.py\").touch()\n    sub2 = root.joinpath(\"sub2\")\n    sub2_test = sub2.joinpath(\"test\")\n    sub2_test.mkdir(parents=True)\n\n    root.joinpath(\"Test_root.py\").write_text(\"def test_1(): pass\", encoding=\"utf-8\")\n    sub1.joinpath(\"Test_sub1.py\").write_text(\"def test_2(): pass\", encoding=\"utf-8\")\n    sub2_test.joinpath(\"test_sub2.py\").write_text(\n        \"def test_3(): pass\", encoding=\"utf-8\"\n    )\n\n    # Execute from .\n    result = pytester.runpytest(\"-v\", \"-s\")\n    result.assert_outcomes(passed=3)\n\n\ndef test_collection_hierarchy(pytester: Pytester) -> None:\n    \"\"\"A general test checking that a filesystem hierarchy is collected as\n    expected in various scenarios.\n\n    top/\n    \u251c\u2500\u2500 aaa\n    \u2502   \u251c\u2500\u2500 pkg\n    \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2502   \u2514\u2500\u2500 test_pkg.py\n    \u2502   \u2514\u2500\u2500 test_aaa.py\n    \u251c\u2500\u2500 test_a.py\n    \u251c\u2500\u2500 test_b\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 test_b.py\n    \u251c\u2500\u2500 test_c.py\n    \u2514\u2500\u2500 zzz\n        \u251c\u2500\u2500 dir\n        \u2502   \u2514\u2500\u2500 test_dir.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 test_zzz.py\n    \"\"\"\n    pytester.makepyfile(\n        **{\n            \"top/aaa/test_aaa.py\": \"def test_it(): pass\",\n            \"top/aaa/pkg/__init__.py\": \"\",\n            \"top/aaa/pkg/test_pkg.py\": \"def test_it(): pass\",\n            \"top/test_a.py\": \"def test_it(): pass\",\n            \"top/test_b/__init__.py\": \"\",\n            \"top/test_b/test_b.py\": \"def test_it(): pass\",\n            \"top/test_c.py\": \"def test_it(): pass\",\n            \"top/zzz/__init__.py\": \"\",\n            \"top/zzz/test_zzz.py\": \"def test_it(): pass\",\n            \"top/zzz/dir/test_dir.py\": \"def test_it(): pass\",\n        }\n    )\n\n    full = [\n        \"<Dir test_collection_hierarchy*>\",\n        \"  <Dir top>\",\n        \"    <Dir aaa>\",\n        \"      <Package pkg>\",\n        \"        <Module test_pkg.py>\",\n        \"          <Function test_it>\",\n        \"      <Module test_aaa.py>\",\n        \"        <Function test_it>\",\n        \"    <Module test_a.py>\",\n        \"      <Function test_it>\",\n        \"    <Package test_b>\",\n        \"      <Module test_b.py>\",\n        \"        <Function test_it>\",\n        \"    <Module test_c.py>\",\n        \"      <Function test_it>\",\n        \"    <Package zzz>\",\n        \"      <Dir dir>\",\n        \"        <Module test_dir.py>\",\n        \"          <Function test_it>\",\n        \"      <Module test_zzz.py>\",\n        \"        <Function test_it>\",\n    ]\n    result = pytester.runpytest(\"--collect-only\")\n    result.stdout.fnmatch_lines(full, consecutive=True)\n    result = pytester.runpytest(\"top\", \"--collect-only\")\n    result.stdout.fnmatch_lines(full, consecutive=True)\n    result = pytester.runpytest(\"top\", \"top\", \"--collect-only\")\n    result.stdout.fnmatch_lines(full, consecutive=True)\n\n    result = pytester.runpytest(\n        \"top/aaa\", \"top/aaa/pkg\", \"--collect-only\", \"--keep-duplicates\"\n    )\n    result.stdout.fnmatch_lines(\n        [\n            \"<Dir test_collection_hierarchy*>\",\n            \"  <Dir top>\",\n            \"    <Dir aaa>\",\n            \"      <Package pkg>\",\n            \"        <Module test_pkg.py>\",\n            \"          <Function test_it>\",\n            \"      <Module test_aaa.py>\",\n            \"        <Function test_it>\",\n            \"      <Package pkg>\",\n            \"        <Module test_pkg.py>\",\n            \"          <Function test_it>\",\n        ],\n        consecutive=True,\n    )\n\n    result = pytester.runpytest(\n        \"top/aaa/pkg\", \"top/aaa\", \"--collect-only\", \"--keep-duplicates\"\n    )\n    result.stdout.fnmatch_lines(\n        [\n            \"<Dir test_collection_hierarchy*>\",\n            \"  <Dir top>\",\n            \"    <Dir aaa>\",\n            \"      <Package pkg>\",\n            \"        <Module test_pkg.py>\",\n            \"          <Function test_it>\",\n            \"          <Function test_it>\",\n            \"      <Module test_aaa.py>\",\n            \"        <Function test_it>\",\n        ],\n        consecutive=True,\n    )\n", "testing/python/integration.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom _pytest._code import getfslineno\nfrom _pytest.fixtures import getfixturemarker\nfrom _pytest.pytester import Pytester\nfrom _pytest.python import Function\nimport pytest\n\n\ndef test_wrapped_getfslineno() -> None:\n    def func():\n        pass\n\n    def wrap(f):\n        func.__wrapped__ = f  # type: ignore\n        func.patchings = [\"qwe\"]  # type: ignore\n        return func\n\n    @wrap\n    def wrapped_func(x, y, z):\n        pass\n\n    fs, lineno = getfslineno(wrapped_func)\n    fs2, lineno2 = getfslineno(wrap)\n    assert lineno > lineno2, \"getfslineno does not unwrap correctly\"\n\n\nclass TestMockDecoration:\n    def test_wrapped_getfuncargnames(self) -> None:\n        from _pytest.compat import getfuncargnames\n\n        def wrap(f):\n            def func():\n                pass\n\n            func.__wrapped__ = f  # type: ignore\n            return func\n\n        @wrap\n        def f(x):\n            pass\n\n        values = getfuncargnames(f)\n        assert values == (\"x\",)\n\n    def test_getfuncargnames_patching(self):\n        from unittest.mock import patch\n\n        from _pytest.compat import getfuncargnames\n\n        class T:\n            def original(self, x, y, z):\n                pass\n\n        @patch.object(T, \"original\")\n        def f(x, y, z):\n            pass\n\n        values = getfuncargnames(f)\n        assert values == (\"y\", \"z\")\n\n    def test_unittest_mock(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import unittest.mock\n            class T(unittest.TestCase):\n                @unittest.mock.patch(\"os.path.abspath\")\n                def test_hello(self, abspath):\n                    import os\n                    os.path.abspath(\"hello\")\n                    abspath.assert_any_call(\"hello\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_unittest_mock_and_fixture(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import os.path\n            import unittest.mock\n            import pytest\n\n            @pytest.fixture\n            def inject_me():\n                pass\n\n            @unittest.mock.patch.object(os.path, \"abspath\",\n                                        new=unittest.mock.MagicMock)\n            def test_hello(inject_me):\n                import os\n                os.path.abspath(\"hello\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_unittest_mock_and_pypi_mock(self, pytester: Pytester) -> None:\n        pytest.importorskip(\"mock\", \"1.0.1\")\n        pytester.makepyfile(\n            \"\"\"\n            import mock\n            import unittest.mock\n            class TestBoth(object):\n                @unittest.mock.patch(\"os.path.abspath\")\n                def test_hello(self, abspath):\n                    import os\n                    os.path.abspath(\"hello\")\n                    abspath.assert_any_call(\"hello\")\n\n                @mock.patch(\"os.path.abspath\")\n                def test_hello_mock(self, abspath):\n                    import os\n                    os.path.abspath(\"hello\")\n                    abspath.assert_any_call(\"hello\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_mock_sentinel_check_against_numpy_like(self, pytester: Pytester) -> None:\n        \"\"\"Ensure our function that detects mock arguments compares against sentinels using\n        identity to circumvent objects which can't be compared with equality against others\n        in a truth context, like with numpy arrays (#5606).\n        \"\"\"\n        pytester.makepyfile(\n            dummy=\"\"\"\n            class NumpyLike:\n                def __init__(self, value):\n                    self.value = value\n                def __eq__(self, other):\n                    raise ValueError(\"like numpy, cannot compare against others for truth\")\n            FOO = NumpyLike(10)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            from unittest.mock import patch\n            import dummy\n            class Test(object):\n                @patch(\"dummy.FOO\", new=dummy.NumpyLike(50))\n                def test_hello(self):\n                    assert dummy.FOO.value == 50\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_mock(self, pytester: Pytester) -> None:\n        pytest.importorskip(\"mock\", \"1.0.1\")\n        pytester.makepyfile(\n            \"\"\"\n            import os\n            import unittest\n            import mock\n\n            class T(unittest.TestCase):\n                @mock.patch(\"os.path.abspath\")\n                def test_hello(self, abspath):\n                    os.path.abspath(\"hello\")\n                    abspath.assert_any_call(\"hello\")\n            def mock_basename(path):\n                return \"mock_basename\"\n            @mock.patch(\"os.path.abspath\")\n            @mock.patch(\"os.path.normpath\")\n            @mock.patch(\"os.path.basename\", new=mock_basename)\n            def test_something(normpath, abspath, tmp_path):\n                abspath.return_value = \"this\"\n                os.path.normpath(os.path.abspath(\"hello\"))\n                normpath.assert_any_call(\"this\")\n                assert os.path.basename(\"123\") == \"mock_basename\"\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n        calls = reprec.getcalls(\"pytest_runtest_logreport\")\n        funcnames = [\n            call.report.location[2] for call in calls if call.report.when == \"call\"\n        ]\n        assert funcnames == [\"T.test_hello\", \"test_something\"]\n\n    def test_mock_sorting(self, pytester: Pytester) -> None:\n        pytest.importorskip(\"mock\", \"1.0.1\")\n        pytester.makepyfile(\n            \"\"\"\n            import os\n            import mock\n\n            @mock.patch(\"os.path.abspath\")\n            def test_one(abspath):\n                pass\n            @mock.patch(\"os.path.abspath\")\n            def test_two(abspath):\n                pass\n            @mock.patch(\"os.path.abspath\")\n            def test_three(abspath):\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        calls = reprec.getreports(\"pytest_runtest_logreport\")\n        calls = [x for x in calls if x.when == \"call\"]\n        names = [x.nodeid.split(\"::\")[-1] for x in calls]\n        assert names == [\"test_one\", \"test_two\", \"test_three\"]\n\n    def test_mock_double_patch_issue473(self, pytester: Pytester) -> None:\n        pytest.importorskip(\"mock\", \"1.0.1\")\n        pytester.makepyfile(\n            \"\"\"\n            from mock import patch\n            from pytest import mark\n\n            @patch('os.getcwd')\n            @patch('os.path')\n            @mark.slow\n            class TestSimple(object):\n                def test_simple_thing(self, mock_path, mock_getcwd):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n\nclass TestReRunTests:\n    def test_rerun(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            from _pytest.runner import runtestprotocol\n            def pytest_runtest_protocol(item, nextitem):\n                runtestprotocol(item, log=False, nextitem=nextitem)\n                runtestprotocol(item, log=True, nextitem=nextitem)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            count = 0\n            req = None\n            @pytest.fixture\n            def fix(request):\n                global count, req\n                assert request != req\n                req = request\n                print(\"fix count %s\" % count)\n                count += 1\n            def test_fix(fix):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *fix count 0*\n            *fix count 1*\n        \"\"\"\n        )\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *2 passed*\n        \"\"\"\n        )\n\n\ndef test_pytestconfig_is_session_scoped() -> None:\n    from _pytest.fixtures import pytestconfig\n\n    marker = getfixturemarker(pytestconfig)\n    assert marker is not None\n    assert marker.scope == \"session\"\n\n\nclass TestNoselikeTestAttribute:\n    def test_module_with_global_test(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            __test__ = False\n            def test_hello():\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        assert not reprec.getfailedcollections()\n        calls = reprec.getreports(\"pytest_runtest_logreport\")\n        assert not calls\n\n    def test_class_and_method(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            __test__ = True\n            def test_func():\n                pass\n            test_func.__test__ = False\n\n            class TestSome(object):\n                __test__ = False\n                def test_method(self):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        assert not reprec.getfailedcollections()\n        calls = reprec.getreports(\"pytest_runtest_logreport\")\n        assert not calls\n\n    def test_unittest_class(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import unittest\n            class TC(unittest.TestCase):\n                def test_1(self):\n                    pass\n            class TC2(unittest.TestCase):\n                __test__ = False\n                def test_2(self):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        assert not reprec.getfailedcollections()\n        call = reprec.getcalls(\"pytest_collection_modifyitems\")[0]\n        assert len(call.items) == 1\n        assert call.items[0].cls.__name__ == \"TC\"\n\n    def test_class_with_nasty_getattr(self, pytester: Pytester) -> None:\n        \"\"\"Make sure we handle classes with a custom nasty __getattr__ right.\n\n        With a custom __getattr__ which e.g. returns a function (like with a\n        RPC wrapper), we shouldn't assume this meant \"__test__ = True\".\n        \"\"\"\n        # https://github.com/pytest-dev/pytest/issues/1204\n        pytester.makepyfile(\n            \"\"\"\n            class MetaModel(type):\n\n                def __getattr__(cls, key):\n                    return lambda: None\n\n\n            BaseModel = MetaModel('Model', (), {})\n\n\n            class Model(BaseModel):\n\n                __metaclass__ = MetaModel\n\n                def test_blah(self):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        assert not reprec.getfailedcollections()\n        call = reprec.getcalls(\"pytest_collection_modifyitems\")[0]\n        assert not call.items\n\n\nclass TestParameterize:\n    \"\"\"#351\"\"\"\n\n    def test_idfn_marker(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def idfn(param):\n                if param == 0:\n                    return 'spam'\n                elif param == 1:\n                    return 'ham'\n                else:\n                    return None\n\n            @pytest.mark.parametrize('a,b', [(0, 2), (1, 2)], ids=idfn)\n            def test_params(a, b):\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest(\"--collect-only\")\n        res.stdout.fnmatch_lines([\"*spam-2*\", \"*ham-2*\"])\n\n    def test_idfn_fixture(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def idfn(param):\n                if param == 0:\n                    return 'spam'\n                elif param == 1:\n                    return 'ham'\n                else:\n                    return None\n\n            @pytest.fixture(params=[0, 1], ids=idfn)\n            def a(request):\n                return request.param\n\n            @pytest.fixture(params=[1, 2], ids=idfn)\n            def b(request):\n                return request.param\n\n            def test_params(a, b):\n                pass\n        \"\"\"\n        )\n        res = pytester.runpytest(\"--collect-only\")\n        res.stdout.fnmatch_lines([\"*spam-2*\", \"*ham-2*\"])\n\n\ndef test_function_instance(pytester: Pytester) -> None:\n    items = pytester.getitems(\n        \"\"\"\n        def test_func(): pass\n\n        class TestIt:\n            def test_method(self): pass\n\n            @classmethod\n            def test_class(cls): pass\n\n            @staticmethod\n            def test_static(): pass\n        \"\"\"\n    )\n    assert len(items) == 4\n\n    assert isinstance(items[0], Function)\n    assert items[0].name == \"test_func\"\n    assert items[0].instance is None\n\n    assert isinstance(items[1], Function)\n    assert items[1].name == \"test_method\"\n    assert items[1].instance is not None\n    assert items[1].instance.__class__.__name__ == \"TestIt\"\n\n    # Even class and static methods get an instance!\n    # This is the instance used for bound fixture methods, which\n    # class/staticmethod tests are perfectly able to request.\n    assert isinstance(items[2], Function)\n    assert items[2].name == \"test_class\"\n    assert items[2].instance is not None\n\n    assert isinstance(items[3], Function)\n    assert items[3].name == \"test_static\"\n    assert items[3].instance is not None\n\n    assert items[1].instance is not items[2].instance is not items[3].instance\n", "testing/python/approx.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom contextlib import contextmanager\nfrom decimal import Decimal\nfrom fractions import Fraction\nfrom math import sqrt\nimport operator\nfrom operator import eq\nfrom operator import ne\n\nfrom _pytest.pytester import Pytester\nfrom _pytest.python_api import _recursive_sequence_map\nimport pytest\nfrom pytest import approx\n\n\ninf, nan = float(\"inf\"), float(\"nan\")\n\n\n@pytest.fixture\ndef mocked_doctest_runner(monkeypatch):\n    import doctest\n\n    class MockedPdb:\n        def __init__(self, out):\n            pass\n\n        def set_trace(self):\n            raise NotImplementedError(\"not used\")\n\n        def reset(self):\n            pass\n\n        def set_continue(self):\n            pass\n\n    monkeypatch.setattr(\"doctest._OutputRedirectingPdb\", MockedPdb)\n\n    class MyDocTestRunner(doctest.DocTestRunner):\n        def report_failure(self, out, test, example, got):\n            raise AssertionError(\n                f\"'{example.source.strip()}' evaluates to '{got.strip()}', not '{example.want.strip()}'\"\n            )\n\n    return MyDocTestRunner()\n\n\n@contextmanager\ndef temporary_verbosity(config, verbosity=0):\n    original_verbosity = config.getoption(\"verbose\")\n    config.option.verbose = verbosity\n    try:\n        yield\n    finally:\n        config.option.verbose = original_verbosity\n\n\n@pytest.fixture\ndef assert_approx_raises_regex(pytestconfig):\n    def do_assert(lhs, rhs, expected_message, verbosity_level=0):\n        import re\n\n        with temporary_verbosity(pytestconfig, verbosity_level):\n            with pytest.raises(AssertionError) as e:\n                assert lhs == approx(rhs)\n\n        nl = \"\\n\"\n        obtained_message = str(e.value).splitlines()[1:]\n        assert len(obtained_message) == len(expected_message), (\n            \"Regex message length doesn't match obtained.\\n\"\n            \"Obtained:\\n\"\n            f\"{nl.join(obtained_message)}\\n\\n\"\n            \"Expected regex:\\n\"\n            f\"{nl.join(expected_message)}\\n\\n\"\n        )\n\n        for i, (obtained_line, expected_line) in enumerate(\n            zip(obtained_message, expected_message)\n        ):\n            regex = re.compile(expected_line)\n            assert regex.match(obtained_line) is not None, (\n                \"Unexpected error message:\\n\"\n                f\"{nl.join(obtained_message)}\\n\\n\"\n                \"Did not match regex:\\n\"\n                f\"{nl.join(expected_message)}\\n\\n\"\n                f\"With verbosity level = {verbosity_level}, on line {i}\"\n            )\n\n    return do_assert\n\n\nSOME_FLOAT = r\"[+-]?([0-9]*[.])?[0-9]+\\s*\"\nSOME_INT = r\"[0-9]+\\s*\"\n\n\nclass TestApprox:\n    def test_error_messages_native_dtypes(self, assert_approx_raises_regex):\n        assert_approx_raises_regex(\n            2.0,\n            1.0,\n            [\n                \"\",\n                \"  comparison failed\",\n                f\"  Obtained: {SOME_FLOAT}\",\n                f\"  Expected: {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n        assert_approx_raises_regex(\n            {\"a\": 1.0, \"b\": 1000.0, \"c\": 1000000.0},\n            {\n                \"a\": 2.0,\n                \"b\": 1000.0,\n                \"c\": 3000000.0,\n            },\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 2 / 3:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                rf\"  Max relative difference: {SOME_FLOAT}\",\n                r\"  Index \\| Obtained\\s+\\| Expected           \",\n                rf\"  a     \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n                rf\"  c     \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n        assert_approx_raises_regex(\n            {\"a\": 1.0, \"b\": None, \"c\": None},\n            {\n                \"a\": None,\n                \"b\": 1000.0,\n                \"c\": None,\n            },\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 2 / 3:\",\n                r\"  Max absolute difference: -inf\",\n                r\"  Max relative difference: -inf\",\n                r\"  Index \\| Obtained\\s+\\| Expected\\s+\",\n                rf\"  a     \\| {SOME_FLOAT} \\| None\",\n                rf\"  b     \\| None\\s+\\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n        assert_approx_raises_regex(\n            [1.0, 2.0, 3.0, 4.0],\n            [1.0, 3.0, 3.0, 5.0],\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 2 / 4:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                rf\"  Max relative difference: {SOME_FLOAT}\",\n                r\"  Index \\| Obtained\\s+\\| Expected   \",\n                rf\"  1     \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n                rf\"  3     \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n        assert_approx_raises_regex(\n            (1, 2.2, 4),\n            (1, 3.2, 4),\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 1 / 3:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                rf\"  Max relative difference: {SOME_FLOAT}\",\n                r\"  Index \\| Obtained\\s+\\| Expected   \",\n                rf\"  1     \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n        # Specific test for comparison with 0.0 (relative diff will be 'inf')\n        assert_approx_raises_regex(\n            [0.0],\n            [1.0],\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 1 / 1:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                r\"  Max relative difference: inf\",\n                r\"  Index \\| Obtained\\s+\\| Expected   \",\n                rf\"\\s*0\\s*\\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n    def test_error_messages_numpy_dtypes(self, assert_approx_raises_regex):\n        np = pytest.importorskip(\"numpy\")\n\n        a = np.linspace(0, 100, 20)\n        b = np.linspace(0, 100, 20)\n        a[10] += 0.5\n        assert_approx_raises_regex(\n            a,\n            b,\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 1 / 20:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                rf\"  Max relative difference: {SOME_FLOAT}\",\n                r\"  Index \\| Obtained\\s+\\| Expected\",\n                rf\"  \\(10,\\) \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n        assert_approx_raises_regex(\n            np.array(\n                [\n                    [[1.1987311, 12412342.3], [3.214143244, 1423412423415.677]],\n                    [[1, 2], [3, 219371297321973]],\n                ]\n            ),\n            np.array(\n                [\n                    [[1.12313, 12412342.3], [3.214143244, 534523542345.677]],\n                    [[1, 2], [3, 7]],\n                ]\n            ),\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 3 / 8:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                rf\"  Max relative difference: {SOME_FLOAT}\",\n                r\"  Index\\s+\\| Obtained\\s+\\| Expected\\s+\",\n                rf\"  \\(0, 0, 0\\) \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n                rf\"  \\(0, 1, 1\\) \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n                rf\"  \\(1, 1, 1\\) \\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n        # Specific test for comparison with 0.0 (relative diff will be 'inf')\n        assert_approx_raises_regex(\n            np.array([0.0]),\n            np.array([1.0]),\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 1 / 1:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                r\"  Max relative difference: inf\",\n                r\"  Index \\| Obtained\\s+\\| Expected   \",\n                rf\"\\s*\\(0,\\)\\s*\\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n    def test_error_messages_invalid_args(self, assert_approx_raises_regex):\n        np = pytest.importorskip(\"numpy\")\n        with pytest.raises(AssertionError) as e:\n            assert np.array([[1.2, 3.4], [4.0, 5.0]]) == pytest.approx(\n                np.array([[4.0], [5.0]])\n            )\n        message = \"\\n\".join(str(e.value).split(\"\\n\")[1:])\n        assert message == \"\\n\".join(\n            [\n                \"  \",\n                \"  Impossible to compare arrays with different shapes.\",\n                \"  Shapes: (2, 1) and (2, 2)\",\n            ]\n        )\n\n        with pytest.raises(AssertionError) as e:\n            assert [1.0, 2.0, 3.0] == pytest.approx([4.0, 5.0])\n        message = \"\\n\".join(str(e.value).split(\"\\n\")[1:])\n        assert message == \"\\n\".join(\n            [\n                \"  \",\n                \"  Impossible to compare lists with different sizes.\",\n                \"  Lengths: 2 and 3\",\n            ]\n        )\n\n    def test_error_messages_with_different_verbosity(self, assert_approx_raises_regex):\n        np = pytest.importorskip(\"numpy\")\n        for v in [0, 1, 2]:\n            # Verbosity level doesn't affect the error message for scalars\n            assert_approx_raises_regex(\n                2.0,\n                1.0,\n                [\n                    \"\",\n                    \"  comparison failed\",\n                    f\"  Obtained: {SOME_FLOAT}\",\n                    f\"  Expected: {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n                ],\n                verbosity_level=v,\n            )\n\n        a = np.linspace(1, 101, 20)\n        b = np.linspace(2, 102, 20)\n        assert_approx_raises_regex(\n            a,\n            b,\n            [\n                r\"^  $\",\n                r\"^  comparison failed. Mismatched elements: 20 / 20:$\",\n                rf\"^  Max absolute difference: {SOME_FLOAT}$\",\n                rf\"^  Max relative difference: {SOME_FLOAT}$\",\n                r\"^  Index \\| Obtained\\s+\\| Expected\\s+$\",\n                rf\"^  \\(0,\\)\\s+\\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}e-{SOME_INT}$\",\n                rf\"^  \\(1,\\)\\s+\\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}e-{SOME_INT}\\.\\.\\.$\",\n                \"^  $\",\n                rf\"^  ...Full output truncated \\({SOME_INT} lines hidden\\), use '-vv' to show$\",\n            ],\n            verbosity_level=0,\n        )\n\n        assert_approx_raises_regex(\n            a,\n            b,\n            [\n                r\"  \",\n                r\"  comparison failed. Mismatched elements: 20 / 20:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                rf\"  Max relative difference: {SOME_FLOAT}\",\n                r\"  Index \\| Obtained\\s+\\| Expected\",\n            ]\n            + [\n                rf\"  \\({i},\\)\\s+\\| {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\"\n                for i in range(20)\n            ],\n            verbosity_level=2,\n        )\n\n    def test_repr_string(self):\n        assert repr(approx(1.0)) == \"1.0 \u00b1 1.0e-06\"\n        assert repr(approx([1.0, 2.0])) == \"approx([1.0 \u00b1 1.0e-06, 2.0 \u00b1 2.0e-06])\"\n        assert repr(approx((1.0, 2.0))) == \"approx((1.0 \u00b1 1.0e-06, 2.0 \u00b1 2.0e-06))\"\n        assert repr(approx(inf)) == \"inf\"\n        assert repr(approx(1.0, rel=nan)) == \"1.0 \u00b1 ???\"\n        assert repr(approx(1.0, rel=inf)) == \"1.0 \u00b1 inf\"\n\n        # Dictionaries aren't ordered, so we need to check both orders.\n        assert repr(approx({\"a\": 1.0, \"b\": 2.0})) in (\n            \"approx({'a': 1.0 \u00b1 1.0e-06, 'b': 2.0 \u00b1 2.0e-06})\",\n            \"approx({'b': 2.0 \u00b1 2.0e-06, 'a': 1.0 \u00b1 1.0e-06})\",\n        )\n\n    def test_repr_complex_numbers(self):\n        assert repr(approx(inf + 1j)) == \"(inf+1j)\"\n        assert repr(approx(1.0j, rel=inf)) == \"1j \u00b1 inf\"\n\n        # can't compute a sensible tolerance\n        assert repr(approx(nan + 1j)) == \"(nan+1j) \u00b1 ???\"\n\n        assert repr(approx(1.0j)) == \"1j \u00b1 1.0e-06 \u2220 \u00b1180\u00b0\"\n\n        # relative tolerance is scaled to |3+4j| = 5\n        assert repr(approx(3 + 4 * 1j)) == \"(3+4j) \u00b1 5.0e-06 \u2220 \u00b1180\u00b0\"\n\n        # absolute tolerance is not scaled\n        assert repr(approx(3.3 + 4.4 * 1j, abs=0.02)) == \"(3.3+4.4j) \u00b1 2.0e-02 \u2220 \u00b1180\u00b0\"\n\n    @pytest.mark.parametrize(\n        \"value, expected_repr_string\",\n        [\n            (5.0, \"approx(5.0 \u00b1 5.0e-06)\"),\n            ([5.0], \"approx([5.0 \u00b1 5.0e-06])\"),\n            ([[5.0]], \"approx([[5.0 \u00b1 5.0e-06]])\"),\n            ([[5.0, 6.0]], \"approx([[5.0 \u00b1 5.0e-06, 6.0 \u00b1 6.0e-06]])\"),\n            ([[5.0], [6.0]], \"approx([[5.0 \u00b1 5.0e-06], [6.0 \u00b1 6.0e-06]])\"),\n        ],\n    )\n    def test_repr_nd_array(self, value, expected_repr_string):\n        \"\"\"Make sure that arrays of all different dimensions are repr'd correctly.\"\"\"\n        np = pytest.importorskip(\"numpy\")\n        np_array = np.array(value)\n        assert repr(approx(np_array)) == expected_repr_string\n\n    def test_bool(self):\n        with pytest.raises(AssertionError) as err:\n            assert approx(1)\n\n        assert err.match(r\"approx\\(\\) is not supported in a boolean context\")\n\n    def test_operator_overloading(self):\n        assert 1 == approx(1, rel=1e-6, abs=1e-12)\n        assert not (1 != approx(1, rel=1e-6, abs=1e-12))\n        assert 10 != approx(1, rel=1e-6, abs=1e-12)\n        assert not (10 == approx(1, rel=1e-6, abs=1e-12))\n\n    def test_exactly_equal(self):\n        examples = [\n            (2.0, 2.0),\n            (0.1e200, 0.1e200),\n            (1.123e-300, 1.123e-300),\n            (12345, 12345.0),\n            (0.0, -0.0),\n            (345678, 345678),\n            (Decimal(\"1.0001\"), Decimal(\"1.0001\")),\n            (Fraction(1, 3), Fraction(-1, -3)),\n        ]\n        for a, x in examples:\n            assert a == approx(x)\n\n    def test_opposite_sign(self):\n        examples = [(eq, 1e-100, -1e-100), (ne, 1e100, -1e100)]\n        for op, a, x in examples:\n            assert op(a, approx(x))\n\n    def test_zero_tolerance(self):\n        within_1e10 = [(1.1e-100, 1e-100), (-1.1e-100, -1e-100)]\n        for a, x in within_1e10:\n            assert x == approx(x, rel=0.0, abs=0.0)\n            assert a != approx(x, rel=0.0, abs=0.0)\n            assert a == approx(x, rel=0.0, abs=5e-101)\n            assert a != approx(x, rel=0.0, abs=5e-102)\n            assert a == approx(x, rel=5e-1, abs=0.0)\n            assert a != approx(x, rel=5e-2, abs=0.0)\n\n    @pytest.mark.parametrize(\n        (\"rel\", \"abs\"),\n        [\n            (-1e100, None),\n            (None, -1e100),\n            (1e100, -1e100),\n            (-1e100, 1e100),\n            (-1e100, -1e100),\n        ],\n    )\n    def test_negative_tolerance(self, rel: float | None, abs: float | None) -> None:\n        # Negative tolerances are not allowed.\n        with pytest.raises(ValueError):\n            1.1 == approx(1, rel, abs)\n\n    def test_negative_tolerance_message(self):\n        # Error message for negative tolerance should include the value.\n        with pytest.raises(ValueError, match=\"-3\"):\n            0 == approx(1, abs=-3)\n        with pytest.raises(ValueError, match=\"-3\"):\n            0 == approx(1, rel=-3)\n\n    def test_inf_tolerance(self):\n        # Everything should be equal if the tolerance is infinite.\n        large_diffs = [(1, 1000), (1e-50, 1e50), (-1.0, -1e300), (0.0, 10)]\n        for a, x in large_diffs:\n            assert a != approx(x, rel=0.0, abs=0.0)\n            assert a == approx(x, rel=inf, abs=0.0)\n            assert a == approx(x, rel=0.0, abs=inf)\n            assert a == approx(x, rel=inf, abs=inf)\n\n    def test_inf_tolerance_expecting_zero(self) -> None:\n        # If the relative tolerance is zero but the expected value is infinite,\n        # the actual tolerance is a NaN, which should be an error.\n        with pytest.raises(ValueError):\n            1 == approx(0, rel=inf, abs=0.0)\n        with pytest.raises(ValueError):\n            1 == approx(0, rel=inf, abs=inf)\n\n    def test_nan_tolerance(self) -> None:\n        with pytest.raises(ValueError):\n            1.1 == approx(1, rel=nan)\n        with pytest.raises(ValueError):\n            1.1 == approx(1, abs=nan)\n        with pytest.raises(ValueError):\n            1.1 == approx(1, rel=nan, abs=nan)\n\n    def test_reasonable_defaults(self):\n        # Whatever the defaults are, they should work for numbers close to 1\n        # than have a small amount of floating-point error.\n        assert 0.1 + 0.2 == approx(0.3)\n\n    def test_default_tolerances(self):\n        # This tests the defaults as they are currently set.  If you change the\n        # defaults, this test will fail but you should feel free to change it.\n        # None of the other tests (except the doctests) should be affected by\n        # the choice of defaults.\n        examples = [\n            # Relative tolerance used.\n            (eq, 1e100 + 1e94, 1e100),\n            (ne, 1e100 + 2e94, 1e100),\n            (eq, 1e0 + 1e-6, 1e0),\n            (ne, 1e0 + 2e-6, 1e0),\n            # Absolute tolerance used.\n            (eq, 1e-100, +1e-106),\n            (eq, 1e-100, +2e-106),\n            (eq, 1e-100, 0),\n        ]\n        for op, a, x in examples:\n            assert op(a, approx(x))\n\n    def test_custom_tolerances(self):\n        assert 1e8 + 1e0 == approx(1e8, rel=5e-8, abs=5e0)\n        assert 1e8 + 1e0 == approx(1e8, rel=5e-9, abs=5e0)\n        assert 1e8 + 1e0 == approx(1e8, rel=5e-8, abs=5e-1)\n        assert 1e8 + 1e0 != approx(1e8, rel=5e-9, abs=5e-1)\n\n        assert 1e0 + 1e-8 == approx(1e0, rel=5e-8, abs=5e-8)\n        assert 1e0 + 1e-8 == approx(1e0, rel=5e-9, abs=5e-8)\n        assert 1e0 + 1e-8 == approx(1e0, rel=5e-8, abs=5e-9)\n        assert 1e0 + 1e-8 != approx(1e0, rel=5e-9, abs=5e-9)\n\n        assert 1e-8 + 1e-16 == approx(1e-8, rel=5e-8, abs=5e-16)\n        assert 1e-8 + 1e-16 == approx(1e-8, rel=5e-9, abs=5e-16)\n        assert 1e-8 + 1e-16 == approx(1e-8, rel=5e-8, abs=5e-17)\n        assert 1e-8 + 1e-16 != approx(1e-8, rel=5e-9, abs=5e-17)\n\n    def test_relative_tolerance(self):\n        within_1e8_rel = [(1e8 + 1e0, 1e8), (1e0 + 1e-8, 1e0), (1e-8 + 1e-16, 1e-8)]\n        for a, x in within_1e8_rel:\n            assert a == approx(x, rel=5e-8, abs=0.0)\n            assert a != approx(x, rel=5e-9, abs=0.0)\n\n    def test_absolute_tolerance(self):\n        within_1e8_abs = [(1e8 + 9e-9, 1e8), (1e0 + 9e-9, 1e0), (1e-8 + 9e-9, 1e-8)]\n        for a, x in within_1e8_abs:\n            assert a == approx(x, rel=0, abs=5e-8)\n            assert a != approx(x, rel=0, abs=5e-9)\n\n    def test_expecting_zero(self):\n        examples = [\n            (ne, 1e-6, 0.0),\n            (ne, -1e-6, 0.0),\n            (eq, 1e-12, 0.0),\n            (eq, -1e-12, 0.0),\n            (ne, 2e-12, 0.0),\n            (ne, -2e-12, 0.0),\n            (ne, inf, 0.0),\n            (ne, nan, 0.0),\n        ]\n        for op, a, x in examples:\n            assert op(a, approx(x, rel=0.0, abs=1e-12))\n            assert op(a, approx(x, rel=1e-6, abs=1e-12))\n\n    def test_expecting_inf(self):\n        examples = [\n            (eq, inf, inf),\n            (eq, -inf, -inf),\n            (ne, inf, -inf),\n            (ne, 0.0, inf),\n            (ne, nan, inf),\n        ]\n        for op, a, x in examples:\n            assert op(a, approx(x))\n\n    def test_expecting_nan(self):\n        examples = [\n            (eq, nan, nan),\n            (eq, -nan, -nan),\n            (eq, nan, -nan),\n            (ne, 0.0, nan),\n            (ne, inf, nan),\n        ]\n        for op, a, x in examples:\n            # Nothing is equal to NaN by default.\n            assert a != approx(x)\n\n            # If ``nan_ok=True``, then NaN is equal to NaN.\n            assert op(a, approx(x, nan_ok=True))\n\n    def test_int(self):\n        within_1e6 = [(1000001, 1000000), (-1000001, -1000000)]\n        for a, x in within_1e6:\n            assert a == approx(x, rel=5e-6, abs=0)\n            assert a != approx(x, rel=5e-7, abs=0)\n            assert approx(x, rel=5e-6, abs=0) == a\n            assert approx(x, rel=5e-7, abs=0) != a\n\n    def test_decimal(self):\n        within_1e6 = [\n            (Decimal(\"1.000001\"), Decimal(\"1.0\")),\n            (Decimal(\"-1.000001\"), Decimal(\"-1.0\")),\n        ]\n        for a, x in within_1e6:\n            assert a == approx(x)\n            assert a == approx(x, rel=Decimal(\"5e-6\"), abs=0)\n            assert a != approx(x, rel=Decimal(\"5e-7\"), abs=0)\n            assert approx(x, rel=Decimal(\"5e-6\"), abs=0) == a\n            assert approx(x, rel=Decimal(\"5e-7\"), abs=0) != a\n\n    def test_fraction(self):\n        within_1e6 = [\n            (1 + Fraction(1, 1000000), Fraction(1)),\n            (-1 - Fraction(-1, 1000000), Fraction(-1)),\n        ]\n        for a, x in within_1e6:\n            assert a == approx(x, rel=5e-6, abs=0)\n            assert a != approx(x, rel=5e-7, abs=0)\n            assert approx(x, rel=5e-6, abs=0) == a\n            assert approx(x, rel=5e-7, abs=0) != a\n\n    def test_complex(self):\n        within_1e6 = [\n            (1.000001 + 1.0j, 1.0 + 1.0j),\n            (1.0 + 1.000001j, 1.0 + 1.0j),\n            (-1.000001 + 1.0j, -1.0 + 1.0j),\n            (1.0 - 1.000001j, 1.0 - 1.0j),\n        ]\n        for a, x in within_1e6:\n            assert a == approx(x, rel=5e-6, abs=0)\n            assert a != approx(x, rel=5e-7, abs=0)\n            assert approx(x, rel=5e-6, abs=0) == a\n            assert approx(x, rel=5e-7, abs=0) != a\n\n    def test_list(self):\n        actual = [1 + 1e-7, 2 + 1e-8]\n        expected = [1, 2]\n\n        # Return false if any element is outside the tolerance.\n        assert actual == approx(expected, rel=5e-7, abs=0)\n        assert actual != approx(expected, rel=5e-8, abs=0)\n        assert approx(expected, rel=5e-7, abs=0) == actual\n        assert approx(expected, rel=5e-8, abs=0) != actual\n\n    def test_list_decimal(self):\n        actual = [Decimal(\"1.000001\"), Decimal(\"2.000001\")]\n        expected = [Decimal(\"1\"), Decimal(\"2\")]\n\n        assert actual == approx(expected)\n\n    def test_list_wrong_len(self):\n        assert [1, 2] != approx([1])\n        assert [1, 2] != approx([1, 2, 3])\n\n    def test_tuple(self):\n        actual = (1 + 1e-7, 2 + 1e-8)\n        expected = (1, 2)\n\n        # Return false if any element is outside the tolerance.\n        assert actual == approx(expected, rel=5e-7, abs=0)\n        assert actual != approx(expected, rel=5e-8, abs=0)\n        assert approx(expected, rel=5e-7, abs=0) == actual\n        assert approx(expected, rel=5e-8, abs=0) != actual\n\n    def test_tuple_wrong_len(self):\n        assert (1, 2) != approx((1,))\n        assert (1, 2) != approx((1, 2, 3))\n\n    def test_tuple_vs_other(self):\n        assert 1 != approx((1,))\n\n    def test_dict(self):\n        actual = {\"a\": 1 + 1e-7, \"b\": 2 + 1e-8}\n        # Dictionaries became ordered in python3.6, so switch up the order here\n        # to make sure it doesn't matter.\n        expected = {\"b\": 2, \"a\": 1}\n\n        # Return false if any element is outside the tolerance.\n        assert actual == approx(expected, rel=5e-7, abs=0)\n        assert actual != approx(expected, rel=5e-8, abs=0)\n        assert approx(expected, rel=5e-7, abs=0) == actual\n        assert approx(expected, rel=5e-8, abs=0) != actual\n\n    def test_dict_decimal(self):\n        actual = {\"a\": Decimal(\"1.000001\"), \"b\": Decimal(\"2.000001\")}\n        # Dictionaries became ordered in python3.6, so switch up the order here\n        # to make sure it doesn't matter.\n        expected = {\"b\": Decimal(\"2\"), \"a\": Decimal(\"1\")}\n\n        assert actual == approx(expected)\n\n    def test_dict_wrong_len(self):\n        assert {\"a\": 1, \"b\": 2} != approx({\"a\": 1})\n        assert {\"a\": 1, \"b\": 2} != approx({\"a\": 1, \"c\": 2})\n        assert {\"a\": 1, \"b\": 2} != approx({\"a\": 1, \"b\": 2, \"c\": 3})\n\n    def test_dict_nonnumeric(self):\n        assert {\"a\": 1.0, \"b\": None} == pytest.approx({\"a\": 1.0, \"b\": None})\n        assert {\"a\": 1.0, \"b\": 1} != pytest.approx({\"a\": 1.0, \"b\": None})\n\n    def test_dict_vs_other(self):\n        assert 1 != approx({\"a\": 0})\n\n    def test_dict_for_div_by_zero(self, assert_approx_raises_regex):\n        assert_approx_raises_regex(\n            {\"foo\": 42.0},\n            {\"foo\": 0.0},\n            [\n                r\"\",\n                r\"  comparison failed. Mismatched elements: 1 / 1:\",\n                rf\"  Max absolute difference: {SOME_FLOAT}\",\n                r\"  Max relative difference: inf\",\n                r\"  Index \\| Obtained\\s+\\| Expected   \",\n                rf\"  foo   | {SOME_FLOAT} \\| {SOME_FLOAT} \u00b1 {SOME_FLOAT}\",\n            ],\n        )\n\n    def test_numpy_array(self):\n        np = pytest.importorskip(\"numpy\")\n\n        actual = np.array([1 + 1e-7, 2 + 1e-8])\n        expected = np.array([1, 2])\n\n        # Return false if any element is outside the tolerance.\n        assert actual == approx(expected, rel=5e-7, abs=0)\n        assert actual != approx(expected, rel=5e-8, abs=0)\n        assert approx(expected, rel=5e-7, abs=0) == expected\n        assert approx(expected, rel=5e-8, abs=0) != actual\n\n        # Should be able to compare lists with numpy arrays.\n        assert list(actual) == approx(expected, rel=5e-7, abs=0)\n        assert list(actual) != approx(expected, rel=5e-8, abs=0)\n        assert actual == approx(list(expected), rel=5e-7, abs=0)\n        assert actual != approx(list(expected), rel=5e-8, abs=0)\n\n    def test_numpy_tolerance_args(self):\n        \"\"\"\n        Check that numpy rel/abs args are handled correctly\n        for comparison against an np.array\n        Check both sides of the operator, hopefully it doesn't impact things.\n        Test all permutations of where the approx and np.array() can show up\n        \"\"\"\n        np = pytest.importorskip(\"numpy\")\n        expected = 100.0\n        actual = 99.0\n        abs_diff = expected - actual\n        rel_diff = (expected - actual) / expected\n\n        tests = [\n            (eq, abs_diff, 0),\n            (eq, 0, rel_diff),\n            (ne, 0, rel_diff / 2.0),  # rel diff fail\n            (ne, abs_diff / 2.0, 0),  # abs diff fail\n        ]\n\n        for op, _abs, _rel in tests:\n            assert op(np.array(actual), approx(expected, abs=_abs, rel=_rel))  # a, b\n            assert op(approx(expected, abs=_abs, rel=_rel), np.array(actual))  # b, a\n\n            assert op(actual, approx(np.array(expected), abs=_abs, rel=_rel))  # a, b\n            assert op(approx(np.array(expected), abs=_abs, rel=_rel), actual)  # b, a\n\n            assert op(np.array(actual), approx(np.array(expected), abs=_abs, rel=_rel))\n            assert op(approx(np.array(expected), abs=_abs, rel=_rel), np.array(actual))\n\n    def test_numpy_expecting_nan(self):\n        np = pytest.importorskip(\"numpy\")\n        examples = [\n            (eq, nan, nan),\n            (eq, -nan, -nan),\n            (eq, nan, -nan),\n            (ne, 0.0, nan),\n            (ne, inf, nan),\n        ]\n        for op, a, x in examples:\n            # Nothing is equal to NaN by default.\n            assert np.array(a) != approx(x)\n            assert a != approx(np.array(x))\n\n            # If ``nan_ok=True``, then NaN is equal to NaN.\n            assert op(np.array(a), approx(x, nan_ok=True))\n            assert op(a, approx(np.array(x), nan_ok=True))\n\n    def test_numpy_expecting_inf(self):\n        np = pytest.importorskip(\"numpy\")\n        examples = [\n            (eq, inf, inf),\n            (eq, -inf, -inf),\n            (ne, inf, -inf),\n            (ne, 0.0, inf),\n            (ne, nan, inf),\n        ]\n        for op, a, x in examples:\n            assert op(np.array(a), approx(x))\n            assert op(a, approx(np.array(x)))\n            assert op(np.array(a), approx(np.array(x)))\n\n    def test_numpy_array_wrong_shape(self):\n        np = pytest.importorskip(\"numpy\")\n\n        a12 = np.array([[1, 2]])\n        a21 = np.array([[1], [2]])\n\n        assert a12 != approx(a21)\n        assert a21 != approx(a12)\n\n    def test_numpy_array_implicit_conversion(self):\n        np = pytest.importorskip(\"numpy\")\n\n        class ImplicitArray:\n            \"\"\"Type which is implicitly convertible to a numpy array.\"\"\"\n\n            def __init__(self, vals):\n                self.vals = vals\n\n            def __array__(self, dtype=None, copy=None):\n                return np.array(self.vals)\n\n        vec1 = ImplicitArray([1.0, 2.0, 3.0])\n        vec2 = ImplicitArray([1.0, 2.0, 4.0])\n        # see issue #12114 for test case\n        assert vec1 != approx(vec2)\n\n    def test_numpy_array_protocol(self):\n        \"\"\"\n        array-like objects such as tensorflow's DeviceArray are handled like ndarray.\n        See issue #8132\n        \"\"\"\n        np = pytest.importorskip(\"numpy\")\n\n        class DeviceArray:\n            def __init__(self, value, size):\n                self.value = value\n                self.size = size\n\n            def __array__(self):\n                return self.value * np.ones(self.size)\n\n        class DeviceScalar:\n            def __init__(self, value):\n                self.value = value\n\n            def __array__(self):\n                return np.array(self.value)\n\n        expected = 1\n        actual = 1 + 1e-6\n        assert approx(expected) == DeviceArray(actual, size=1)\n        assert approx(expected) == DeviceArray(actual, size=2)\n        assert approx(expected) == DeviceScalar(actual)\n        assert approx(DeviceScalar(expected)) == actual\n        assert approx(DeviceScalar(expected)) == DeviceScalar(actual)\n\n    def test_doctests(self, mocked_doctest_runner) -> None:\n        import doctest\n\n        parser = doctest.DocTestParser()\n        assert approx.__doc__ is not None\n        test = parser.get_doctest(\n            approx.__doc__, {\"approx\": approx}, approx.__name__, None, None\n        )\n        mocked_doctest_runner.run(test)\n\n    def test_unicode_plus_minus(self, pytester: Pytester) -> None:\n        \"\"\"\n        Comparing approx instances inside lists should not produce an error in the detailed diff.\n        Integration test for issue #2111.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_foo():\n                assert [3] == [pytest.approx(4)]\n        \"\"\"\n        )\n        expected = \"4.0e-06\"\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [f\"*At index 0 diff: 3 != 4 \u00b1 {expected}\", \"=* 1 failed in *=\"]\n        )\n\n    @pytest.mark.parametrize(\n        \"x, name\",\n        [\n            pytest.param([[1]], \"data structures\", id=\"nested-list\"),\n            pytest.param({\"key\": {\"key\": 1}}, \"dictionaries\", id=\"nested-dict\"),\n        ],\n    )\n    def test_expected_value_type_error(self, x, name):\n        with pytest.raises(\n            TypeError,\n            match=rf\"pytest.approx\\(\\) does not support nested {name}:\",\n        ):\n            approx(x)\n\n    @pytest.mark.parametrize(\n        \"x\",\n        [\n            pytest.param(None),\n            pytest.param(\"string\"),\n            pytest.param([\"string\"], id=\"nested-str\"),\n            pytest.param({\"key\": \"string\"}, id=\"dict-with-string\"),\n        ],\n    )\n    def test_nonnumeric_okay_if_equal(self, x):\n        assert x == approx(x)\n\n    @pytest.mark.parametrize(\n        \"x\",\n        [\n            pytest.param(\"string\"),\n            pytest.param([\"string\"], id=\"nested-str\"),\n            pytest.param({\"key\": \"string\"}, id=\"dict-with-string\"),\n        ],\n    )\n    def test_nonnumeric_false_if_unequal(self, x):\n        \"\"\"For nonnumeric types, x != pytest.approx(y) reduces to x != y\"\"\"\n        assert \"ab\" != approx(\"abc\")\n        assert [\"ab\"] != approx([\"abc\"])\n        # in particular, both of these should return False\n        assert {\"a\": 1.0} != approx({\"a\": None})\n        assert {\"a\": None} != approx({\"a\": 1.0})\n\n        assert 1.0 != approx(None)\n        assert None != approx(1.0)  # noqa: E711\n\n        assert 1.0 != approx([None])\n        assert None != approx([1.0])  # noqa: E711\n\n    def test_nonnumeric_dict_repr(self):\n        \"\"\"Dicts with non-numerics and infinites have no tolerances\"\"\"\n        x1 = {\"foo\": 1.0000005, \"bar\": None, \"foobar\": inf}\n        assert (\n            repr(approx(x1))\n            == \"approx({'foo': 1.0000005 \u00b1 1.0e-06, 'bar': None, 'foobar': inf})\"\n        )\n\n    def test_nonnumeric_list_repr(self):\n        \"\"\"Lists with non-numerics and infinites have no tolerances\"\"\"\n        x1 = [1.0000005, None, inf]\n        assert repr(approx(x1)) == \"approx([1.0000005 \u00b1 1.0e-06, None, inf])\"\n\n    @pytest.mark.parametrize(\n        \"op\",\n        [\n            pytest.param(operator.le, id=\"<=\"),\n            pytest.param(operator.lt, id=\"<\"),\n            pytest.param(operator.ge, id=\">=\"),\n            pytest.param(operator.gt, id=\">\"),\n        ],\n    )\n    def test_comparison_operator_type_error(self, op):\n        \"\"\"pytest.approx should raise TypeError for operators other than == and != (#2003).\"\"\"\n        with pytest.raises(TypeError):\n            op(1, approx(1, rel=1e-6, abs=1e-12))\n\n    def test_numpy_array_with_scalar(self):\n        np = pytest.importorskip(\"numpy\")\n\n        actual = np.array([1 + 1e-7, 1 - 1e-8])\n        expected = 1.0\n\n        assert actual == approx(expected, rel=5e-7, abs=0)\n        assert actual != approx(expected, rel=5e-8, abs=0)\n        assert approx(expected, rel=5e-7, abs=0) == actual\n        assert approx(expected, rel=5e-8, abs=0) != actual\n\n    def test_numpy_scalar_with_array(self):\n        np = pytest.importorskip(\"numpy\")\n\n        actual = 1.0\n        expected = np.array([1 + 1e-7, 1 - 1e-8])\n\n        assert actual == approx(expected, rel=5e-7, abs=0)\n        assert actual != approx(expected, rel=5e-8, abs=0)\n        assert approx(expected, rel=5e-7, abs=0) == actual\n        assert approx(expected, rel=5e-8, abs=0) != actual\n\n    def test_generic_ordered_sequence(self):\n        class MySequence:\n            def __getitem__(self, i):\n                return [1, 2, 3, 4][i]\n\n            def __len__(self):\n                return 4\n\n        expected = MySequence()\n        assert [1, 2, 3, 4] == approx(expected, abs=1e-4)\n\n        expected_repr = \"approx([1 \u00b1 1.0e-06, 2 \u00b1 2.0e-06, 3 \u00b1 3.0e-06, 4 \u00b1 4.0e-06])\"\n        assert repr(approx(expected)) == expected_repr\n\n    def test_allow_ordered_sequences_only(self) -> None:\n        \"\"\"pytest.approx() should raise an error on unordered sequences (#9692).\"\"\"\n        with pytest.raises(TypeError, match=\"only supports ordered sequences\"):\n            assert {1, 2, 3} == approx({1, 2, 3})\n\n    def test_strange_sequence(self):\n        \"\"\"https://github.com/pytest-dev/pytest/issues/11797\"\"\"\n        a = MyVec3(1, 2, 3)\n        b = MyVec3(0, 1, 2)\n\n        # this would trigger the error inside the test\n        pytest.approx(a, abs=0.5)._repr_compare(b)\n\n        assert b == pytest.approx(a, abs=2)\n        assert b != pytest.approx(a, abs=0.5)\n\n\nclass MyVec3:  # incomplete\n    \"\"\"sequence like\"\"\"\n\n    _x: int\n    _y: int\n    _z: int\n\n    def __init__(self, x: int, y: int, z: int):\n        self._x, self._y, self._z = x, y, z\n\n    def __repr__(self) -> str:\n        return f\"<MyVec3 {self._x} {self._y} {self._z}>\"\n\n    def __len__(self) -> int:\n        return 3\n\n    def __getitem__(self, key: int) -> int:\n        if key == 0:\n            return self._x\n        if key == 1:\n            return self._y\n        if key == 2:\n            return self._z\n        raise IndexError(key)\n\n\nclass TestRecursiveSequenceMap:\n    def test_map_over_scalar(self):\n        assert _recursive_sequence_map(sqrt, 16) == 4\n\n    def test_map_over_empty_list(self):\n        assert _recursive_sequence_map(sqrt, []) == []\n\n    def test_map_over_list(self):\n        assert _recursive_sequence_map(sqrt, [4, 16, 25, 676]) == [2, 4, 5, 26]\n\n    def test_map_over_tuple(self):\n        assert _recursive_sequence_map(sqrt, (4, 16, 25, 676)) == (2, 4, 5, 26)\n\n    def test_map_over_nested_lists(self):\n        assert _recursive_sequence_map(sqrt, [4, [25, 64], [[49]]]) == [\n            2,\n            [5, 8],\n            [[7]],\n        ]\n\n    def test_map_over_mixed_sequence(self):\n        assert _recursive_sequence_map(sqrt, [4, (25, 64), [(49)]]) == [\n            2,\n            (5, 8),\n            [(7)],\n        ]\n\n    def test_map_over_sequence_like(self):\n        assert _recursive_sequence_map(int, MyVec3(1, 2, 3)) == [1, 2, 3]\n", "testing/python/fixtures.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport os\nfrom pathlib import Path\nimport sys\nimport textwrap\n\nfrom _pytest.compat import getfuncargnames\nfrom _pytest.config import ExitCode\nfrom _pytest.fixtures import deduplicate_names\nfrom _pytest.fixtures import TopRequest\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import get_public_names\nfrom _pytest.pytester import Pytester\nfrom _pytest.python import Function\nimport pytest\n\n\ndef test_getfuncargnames_functions():\n    \"\"\"Test getfuncargnames for normal functions\"\"\"\n\n    def f():\n        raise NotImplementedError()\n\n    assert not getfuncargnames(f)\n\n    def g(arg):\n        raise NotImplementedError()\n\n    assert getfuncargnames(g) == (\"arg\",)\n\n    def h(arg1, arg2=\"hello\"):\n        raise NotImplementedError()\n\n    assert getfuncargnames(h) == (\"arg1\",)\n\n    def j(arg1, arg2, arg3=\"hello\"):\n        raise NotImplementedError()\n\n    assert getfuncargnames(j) == (\"arg1\", \"arg2\")\n\n\ndef test_getfuncargnames_methods():\n    \"\"\"Test getfuncargnames for normal methods\"\"\"\n\n    class A:\n        def f(self, arg1, arg2=\"hello\"):\n            raise NotImplementedError()\n\n    assert getfuncargnames(A().f) == (\"arg1\",)\n\n\ndef test_getfuncargnames_staticmethod():\n    \"\"\"Test getfuncargnames for staticmethods\"\"\"\n\n    class A:\n        @staticmethod\n        def static(arg1, arg2, x=1):\n            raise NotImplementedError()\n\n    assert getfuncargnames(A.static, cls=A) == (\"arg1\", \"arg2\")\n\n\ndef test_getfuncargnames_staticmethod_inherited() -> None:\n    \"\"\"Test getfuncargnames for inherited staticmethods (#8061)\"\"\"\n\n    class A:\n        @staticmethod\n        def static(arg1, arg2, x=1):\n            raise NotImplementedError()\n\n    class B(A):\n        pass\n\n    assert getfuncargnames(B.static, cls=B) == (\"arg1\", \"arg2\")\n\n\ndef test_getfuncargnames_partial():\n    \"\"\"Check getfuncargnames for methods defined with functools.partial (#5701)\"\"\"\n    import functools\n\n    def check(arg1, arg2, i):\n        raise NotImplementedError()\n\n    class T:\n        test_ok = functools.partial(check, i=2)\n\n    values = getfuncargnames(T().test_ok, name=\"test_ok\")\n    assert values == (\"arg1\", \"arg2\")\n\n\ndef test_getfuncargnames_staticmethod_partial():\n    \"\"\"Check getfuncargnames for staticmethods defined with functools.partial (#5701)\"\"\"\n    import functools\n\n    def check(arg1, arg2, i):\n        raise NotImplementedError()\n\n    class T:\n        test_ok = staticmethod(functools.partial(check, i=2))\n\n    values = getfuncargnames(T().test_ok, name=\"test_ok\")\n    assert values == (\"arg1\", \"arg2\")\n\n\n@pytest.mark.pytester_example_path(\"fixtures/fill_fixtures\")\nclass TestFillFixtures:\n    def test_funcarg_lookupfails(self, pytester: Pytester) -> None:\n        pytester.copy_example()\n        result = pytester.runpytest()  # \"--collect-only\")\n        assert result.ret != 0\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *def test_func(some)*\n            *fixture*some*not found*\n            *xyzsomething*\n            \"\"\"\n        )\n\n    def test_detect_recursive_dependency_error(self, pytester: Pytester) -> None:\n        pytester.copy_example()\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\"*recursive dependency involving fixture 'fix1' detected*\"]\n        )\n\n    def test_funcarg_basic(self, pytester: Pytester) -> None:\n        pytester.copy_example()\n        item = pytester.getitem(Path(\"test_funcarg_basic.py\"))\n        assert isinstance(item, Function)\n        # Execute's item's setup, which fills fixtures.\n        item.session._setupstate.setup(item)\n        del item.funcargs[\"request\"]\n        assert len(get_public_names(item.funcargs)) == 2\n        assert item.funcargs[\"some\"] == \"test_func\"\n        assert item.funcargs[\"other\"] == 42\n\n    def test_funcarg_lookup_modulelevel(self, pytester: Pytester) -> None:\n        pytester.copy_example()\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_funcarg_lookup_classlevel(self, pytester: Pytester) -> None:\n        p = pytester.copy_example()\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_conftest_funcargs_only_available_in_subdir(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.copy_example()\n        result = pytester.runpytest(\"-v\")\n        result.assert_outcomes(passed=2)\n\n    def test_extend_fixture_module_class(self, pytester: Pytester) -> None:\n        testfile = pytester.copy_example()\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result = pytester.runpytest(testfile)\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_extend_fixture_conftest_module(self, pytester: Pytester) -> None:\n        p = pytester.copy_example()\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result = pytester.runpytest(str(next(Path(str(p)).rglob(\"test_*.py\"))))\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_extend_fixture_conftest_conftest(self, pytester: Pytester) -> None:\n        p = pytester.copy_example()\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result = pytester.runpytest(str(next(Path(str(p)).rglob(\"test_*.py\"))))\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_extend_fixture_conftest_plugin(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            testplugin=\"\"\"\n            import pytest\n\n            @pytest.fixture\n            def foo():\n                return 7\n        \"\"\"\n        )\n        pytester.syspathinsert()\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            pytest_plugins = 'testplugin'\n\n            @pytest.fixture\n            def foo(foo):\n                return foo + 7\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo(foo):\n                assert foo == 14\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        assert result.ret == 0\n\n    def test_extend_fixture_plugin_plugin(self, pytester: Pytester) -> None:\n        # Two plugins should extend each order in loading order\n        pytester.makepyfile(\n            testplugin0=\"\"\"\n            import pytest\n\n            @pytest.fixture\n            def foo():\n                return 7\n        \"\"\"\n        )\n        pytester.makepyfile(\n            testplugin1=\"\"\"\n            import pytest\n\n            @pytest.fixture\n            def foo(foo):\n                return foo + 7\n        \"\"\"\n        )\n        pytester.syspathinsert()\n        pytester.makepyfile(\n            \"\"\"\n            pytest_plugins = ['testplugin0', 'testplugin1']\n\n            def test_foo(foo):\n                assert foo == 14\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_override_parametrized_fixture_conftest_module(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test override of the parametrized fixture with non-parametrized one on the test module level.\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2, 3])\n            def spam(request):\n                return request.param\n        \"\"\"\n        )\n        testfile = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def spam():\n                return 'spam'\n\n            def test_spam(spam):\n                assert spam == 'spam'\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result = pytester.runpytest(testfile)\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_override_parametrized_fixture_conftest_conftest(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test override of the parametrized fixture with non-parametrized one on the conftest level.\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2, 3])\n            def spam(request):\n                return request.param\n        \"\"\"\n        )\n        subdir = pytester.mkpydir(\"subdir\")\n        subdir.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n\n                @pytest.fixture\n                def spam():\n                    return 'spam'\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        testfile = subdir.joinpath(\"test_spam.py\")\n        testfile.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def test_spam(spam):\n                    assert spam == \"spam\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n        result = pytester.runpytest(testfile)\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_override_non_parametrized_fixture_conftest_module(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test override of the non-parametrized fixture with parametrized one on the test module level.\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def spam():\n                return 'spam'\n        \"\"\"\n        )\n        testfile = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2, 3])\n            def spam(request):\n                return request.param\n\n            params = {'spam': 1}\n\n            def test_spam(spam):\n                assert spam == params['spam']\n                params['spam'] += 1\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n        result = pytester.runpytest(testfile)\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n\n    def test_override_non_parametrized_fixture_conftest_conftest(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test override of the non-parametrized fixture with parametrized one on the conftest level.\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def spam():\n                return 'spam'\n        \"\"\"\n        )\n        subdir = pytester.mkpydir(\"subdir\")\n        subdir.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n\n                @pytest.fixture(params=[1, 2, 3])\n                def spam(request):\n                    return request.param\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        testfile = subdir.joinpath(\"test_spam.py\")\n        testfile.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                params = {'spam': 1}\n\n                def test_spam(spam):\n                    assert spam == params['spam']\n                    params['spam'] += 1\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n        result = pytester.runpytest(testfile)\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n\n    def test_override_autouse_fixture_with_parametrized_fixture_conftest_conftest(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Test override of the autouse fixture with parametrized one on the conftest level.\n        This test covers the issue explained in issue 1601\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(autouse=True)\n            def spam():\n                return 'spam'\n        \"\"\"\n        )\n        subdir = pytester.mkpydir(\"subdir\")\n        subdir.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n\n                @pytest.fixture(params=[1, 2, 3])\n                def spam(request):\n                    return request.param\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        testfile = subdir.joinpath(\"test_spam.py\")\n        testfile.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                params = {'spam': 1}\n\n                def test_spam(spam):\n                    assert spam == params['spam']\n                    params['spam'] += 1\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n        result = pytester.runpytest(testfile)\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n\n    def test_override_fixture_reusing_super_fixture_parametrization(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Override a fixture at a lower level, reusing the higher-level fixture that\n        is parametrized (#1953).\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2])\n            def foo(request):\n                return request.param\n            \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def foo(foo):\n                return foo * 2\n\n            def test_spam(foo):\n                assert foo in (2, 4)\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    def test_override_parametrize_fixture_and_indirect(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Override a fixture at a lower level, reusing the higher-level fixture that\n        is parametrized, while also using indirect parametrization.\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2])\n            def foo(request):\n                return request.param\n            \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def foo(foo):\n                return foo * 2\n\n            @pytest.fixture\n            def bar(request):\n                return request.param * 100\n\n            @pytest.mark.parametrize(\"bar\", [42], indirect=True)\n            def test_spam(bar, foo):\n                assert bar == 4200\n                assert foo in (2, 4)\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    def test_override_top_level_fixture_reusing_super_fixture_parametrization(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Same as the above test, but with another level of overwriting.\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=['unused', 'unused'])\n            def foo(request):\n                return request.param\n            \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2])\n            def foo(request):\n                return request.param\n\n            class Test:\n\n                @pytest.fixture\n                def foo(self, foo):\n                    return foo * 2\n\n                def test_spam(self, foo):\n                    assert foo in (2, 4)\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    def test_override_parametrized_fixture_with_new_parametrized_fixture(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Overriding a parametrized fixture, while also parametrizing the new fixture and\n        simultaneously requesting the overwritten fixture as parameter, yields the same value\n        as ``request.param``.\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=['ignored', 'ignored'])\n            def foo(request):\n                return request.param\n            \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[10, 20])\n            def foo(foo, request):\n                assert request.param == foo\n                return foo * 2\n\n            def test_spam(foo):\n                assert foo in (20, 40)\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    def test_autouse_fixture_plugin(self, pytester: Pytester) -> None:\n        # A fixture from a plugin has no baseid set, which screwed up\n        # the autouse fixture handling.\n        pytester.makepyfile(\n            testplugin=\"\"\"\n            import pytest\n\n            @pytest.fixture(autouse=True)\n            def foo(request):\n                request.function.foo = 7\n        \"\"\"\n        )\n        pytester.syspathinsert()\n        pytester.makepyfile(\n            \"\"\"\n            pytest_plugins = 'testplugin'\n\n            def test_foo(request):\n                assert request.function.foo == 7\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_funcarg_lookup_error(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def a_fixture(): pass\n\n            @pytest.fixture\n            def b_fixture(): pass\n\n            @pytest.fixture\n            def c_fixture(): pass\n\n            @pytest.fixture\n            def d_fixture(): pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_lookup_error(unknown):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*ERROR at setup of test_lookup_error*\",\n                \"  def test_lookup_error(unknown):*\",\n                \"E       fixture 'unknown' not found\",\n                \">       available fixtures:*a_fixture,*b_fixture,*c_fixture,*d_fixture*monkeypatch,*\",\n                # sorted\n                \">       use 'py*test --fixtures *' for help on them.\",\n                \"*1 error*\",\n            ]\n        )\n        result.stdout.no_fnmatch_line(\"*INTERNAL*\")\n\n    def test_fixture_excinfo_leak(self, pytester: Pytester) -> None:\n        # on python2 sys.excinfo would leak into fixture executions\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            import traceback\n            import pytest\n\n            @pytest.fixture\n            def leak():\n                if sys.exc_info()[0]:  # python3 bug :)\n                    traceback.print_exc()\n                #fails\n                assert sys.exc_info() == (None, None, None)\n\n            def test_leak(leak):\n                if sys.exc_info()[0]:  # python3 bug :)\n                    traceback.print_exc()\n                assert sys.exc_info() == (None, None, None)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n\nclass TestRequestBasic:\n    def test_request_attributes(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def something(request): pass\n            def test_func(something): pass\n        \"\"\"\n        )\n        assert isinstance(item, Function)\n        req = TopRequest(item, _ispytest=True)\n        assert req.function == item.obj\n        assert req.keywords == item.keywords\n        assert hasattr(req.module, \"test_func\")\n        assert req.cls is None\n        assert req.function.__name__ == \"test_func\"\n        assert req.config == item.config\n        assert repr(req).find(req.function.__name__) != -1\n\n    def test_request_attributes_method(self, pytester: Pytester) -> None:\n        (item,) = pytester.getitems(\n            \"\"\"\n            import pytest\n            class TestB(object):\n\n                @pytest.fixture\n                def something(self, request):\n                    return 1\n                def test_func(self, something):\n                    pass\n        \"\"\"\n        )\n        assert isinstance(item, Function)\n        req = item._request\n        assert req.cls.__name__ == \"TestB\"\n        assert req.instance.__class__ == req.cls\n\n    def test_request_contains_funcarg_arg2fixturedefs(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def something(request):\n                pass\n            class TestClass(object):\n                def test_method(self, something):\n                    pass\n        \"\"\"\n        )\n        (item1,) = pytester.genitems([modcol])\n        assert isinstance(item1, Function)\n        assert item1.name == \"test_method\"\n        arg2fixturedefs = TopRequest(item1, _ispytest=True)._arg2fixturedefs\n        assert len(arg2fixturedefs) == 1\n        assert arg2fixturedefs[\"something\"][0].argname == \"something\"\n\n    @pytest.mark.skipif(\n        hasattr(sys, \"pypy_version_info\"),\n        reason=\"this method of test doesn't work on pypy\",\n    )\n    def test_request_garbage(self, pytester: Pytester) -> None:\n        try:\n            import xdist  # noqa: F401\n        except ImportError:\n            pass\n        else:\n            pytest.xfail(\"this test is flaky when executed with xdist\")\n        pytester.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n            from _pytest.fixtures import PseudoFixtureDef\n            import gc\n\n            @pytest.fixture(autouse=True)\n            def something(request):\n                original = gc.get_debug()\n                gc.set_debug(gc.DEBUG_SAVEALL)\n                gc.collect()\n\n                yield\n\n                try:\n                    gc.collect()\n                    leaked = [x for _ in gc.garbage if isinstance(_, PseudoFixtureDef)]\n                    assert leaked == []\n                finally:\n                    gc.set_debug(original)\n\n            def test_func():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest_subprocess()\n        result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n    def test_getfixturevalue_recursive(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def something(request):\n                return 1\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def something(request):\n                return request.getfixturevalue(\"something\") + 1\n            def test_func(something):\n                assert something == 2\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_getfixturevalue_teardown(self, pytester: Pytester) -> None:\n        \"\"\"\n        Issue #1895\n\n        `test_inner` requests `inner` fixture, which in turn requests `resource`\n        using `getfixturevalue`. `test_func` then requests `resource`.\n\n        `resource` is teardown before `inner` because the fixture mechanism won't consider\n        `inner` dependent on `resource` when it is used via `getfixturevalue`: `test_func`\n        will then cause the `resource`'s finalizer to be called first because of this.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='session')\n            def resource():\n                r = ['value']\n                yield r\n                r.pop()\n\n            @pytest.fixture(scope='session')\n            def inner(request):\n                resource = request.getfixturevalue('resource')\n                assert resource == ['value']\n                yield\n                assert resource == ['value']\n\n            def test_inner(inner):\n                pass\n\n            def test_func(resource):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 2 passed in *\"])\n\n    def test_getfixturevalue(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def something(request):\n                return 1\n\n            values = [2]\n            @pytest.fixture\n            def other(request):\n                return values.pop()\n\n            def test_func(something): pass\n        \"\"\"\n        )\n        assert isinstance(item, Function)\n        req = item._request\n\n        # Execute item's setup.\n        item.session._setupstate.setup(item)\n\n        with pytest.raises(pytest.FixtureLookupError):\n            req.getfixturevalue(\"notexists\")\n        val = req.getfixturevalue(\"something\")\n        assert val == 1\n        val = req.getfixturevalue(\"something\")\n        assert val == 1\n        val2 = req.getfixturevalue(\"other\")\n        assert val2 == 2\n        val2 = req.getfixturevalue(\"other\")  # see about caching\n        assert val2 == 2\n        assert item.funcargs[\"something\"] == 1\n        assert len(get_public_names(item.funcargs)) == 2\n        assert \"request\" in item.funcargs\n\n    def test_request_addfinalizer(self, pytester: Pytester) -> None:\n        item = pytester.getitem(\n            \"\"\"\n            import pytest\n            teardownlist = []\n            @pytest.fixture\n            def something(request):\n                request.addfinalizer(lambda: teardownlist.append(1))\n            def test_func(something): pass\n        \"\"\"\n        )\n        assert isinstance(item, Function)\n        item.session._setupstate.setup(item)\n        item._request._fillfixtures()\n        # successively check finalization calls\n        parent = item.getparent(pytest.Module)\n        assert parent is not None\n        teardownlist = parent.obj.teardownlist\n        ss = item.session._setupstate\n        assert not teardownlist\n        ss.teardown_exact(None)\n        print(ss.stack)\n        assert teardownlist == [1]\n\n    def test_request_addfinalizer_failing_setup(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = [1]\n            @pytest.fixture\n            def myfix(request):\n                request.addfinalizer(values.pop)\n                assert 0\n            def test_fix(myfix):\n                pass\n            def test_finalizer_ran():\n                assert not values\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(failed=1, passed=1)\n\n    def test_request_addfinalizer_failing_setup_module(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = [1, 2]\n            @pytest.fixture(scope=\"module\")\n            def myfix(request):\n                request.addfinalizer(values.pop)\n                request.addfinalizer(values.pop)\n                assert 0\n            def test_fix(myfix):\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        mod = reprec.getcalls(\"pytest_runtest_setup\")[0].item.module\n        assert not mod.values\n\n    def test_request_addfinalizer_partial_setup_failure(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture\n            def something(request):\n                request.addfinalizer(lambda: values.append(None))\n            def test_func(something, missingarg):\n                pass\n            def test_second():\n                assert len(values) == 1\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.stdout.fnmatch_lines(\n            [\"*1 error*\"]  # XXX the whole module collection fails\n        )\n\n    def test_request_subrequest_addfinalizer_exceptions(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"\n        Ensure exceptions raised during teardown by finalizers are suppressed\n        until all finalizers are called, then re-raised together in an\n        exception group (#2440)\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            def _excepts(where):\n                raise Exception('Error in %s fixture' % where)\n            @pytest.fixture\n            def subrequest(request):\n                return request\n            @pytest.fixture\n            def something(subrequest):\n                subrequest.addfinalizer(lambda: values.append(1))\n                subrequest.addfinalizer(lambda: values.append(2))\n                subrequest.addfinalizer(lambda: _excepts('something'))\n            @pytest.fixture\n            def excepts(subrequest):\n                subrequest.addfinalizer(lambda: _excepts('excepts'))\n                subrequest.addfinalizer(lambda: values.append(3))\n            def test_first(something, excepts):\n                pass\n            def test_second():\n                assert values == [3, 2, 1]\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.assert_outcomes(passed=2, errors=1)\n        result.stdout.fnmatch_lines(\n            [\n                '  | *ExceptionGroup: errors while tearing down fixture \"subrequest\" of <Function test_first> (2 sub-exceptions)',  # noqa: E501\n                \"  +-+---------------- 1 ----------------\",\n                \"    | Exception: Error in something fixture\",\n                \"    +---------------- 2 ----------------\",\n                \"    | Exception: Error in excepts fixture\",\n                \"    +------------------------------------\",\n            ],\n        )\n\n    def test_request_getmodulepath(self, pytester: Pytester) -> None:\n        modcol = pytester.getmodulecol(\"def test_somefunc(): pass\")\n        (item,) = pytester.genitems([modcol])\n        assert isinstance(item, Function)\n        req = TopRequest(item, _ispytest=True)\n        assert req.path == modcol.path\n\n    def test_request_fixturenames(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            from _pytest.pytester import get_public_names\n            @pytest.fixture()\n            def arg1():\n                pass\n            @pytest.fixture()\n            def farg(arg1):\n                pass\n            @pytest.fixture(autouse=True)\n            def sarg(tmp_path):\n                pass\n            def test_function(request, farg):\n                assert set(get_public_names(request.fixturenames)) == \\\n                       set([\"sarg\", \"arg1\", \"request\", \"farg\",\n                            \"tmp_path\", \"tmp_path_factory\"])\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_request_fixturenames_dynamic_fixture(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #3057\"\"\"\n        pytester.copy_example(\"fixtures/test_getfixturevalue_dynamic.py\")\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*1 passed*\"])\n\n    def test_setupdecorator_and_xunit(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(scope='module', autouse=True)\n            def setup_module():\n                values.append(\"module\")\n            @pytest.fixture(autouse=True)\n            def setup_function():\n                values.append(\"function\")\n\n            def test_func():\n                pass\n\n            class TestClass(object):\n                @pytest.fixture(scope=\"class\", autouse=True)\n                def setup_class(self):\n                    values.append(\"class\")\n                @pytest.fixture(autouse=True)\n                def setup_method(self):\n                    values.append(\"method\")\n                def test_method(self):\n                    pass\n            def test_all():\n                assert values == [\"module\", \"function\", \"class\",\n                             \"function\", \"method\", \"function\"]\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\")\n        reprec.assertoutcome(passed=3)\n\n    def test_fixtures_sub_subdir_normalize_sep(self, pytester: Pytester) -> None:\n        # this tests that normalization of nodeids takes place\n        b = pytester.path.joinpath(\"tests\", \"unit\")\n        b.mkdir(parents=True)\n        b.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.fixture\n                def arg1():\n                    pass\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        p = b.joinpath(\"test_module.py\")\n        p.write_text(\"def test_func(arg1): pass\", encoding=\"utf-8\")\n        result = pytester.runpytest(p, \"--fixtures\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *fixtures defined*conftest*\n            *arg1*\n        \"\"\"\n        )\n\n    def test_show_fixtures_color_yes(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\"def test_this(): assert 1\")\n        result = pytester.runpytest(\"--color=yes\", \"--fixtures\")\n        assert \"\\x1b[32mtmp_path\" in result.stdout.str()\n\n    def test_newstyle_with_request(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture()\n            def arg(request):\n                pass\n            def test_1(arg):\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_setupcontext_no_param(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(params=[1,2])\n            def arg(request):\n                return request.param\n\n            @pytest.fixture(autouse=True)\n            def mysetup(request, arg):\n                assert not hasattr(request, \"param\")\n            def test_1(arg):\n                assert arg in (1,2)\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n\nclass TestRequestSessionScoped:\n    @pytest.fixture(scope=\"session\")\n    def session_request(self, request):\n        return request\n\n    @pytest.mark.parametrize(\"name\", [\"path\", \"module\"])\n    def test_session_scoped_unavailable_attributes(self, session_request, name):\n        with pytest.raises(\n            AttributeError,\n            match=f\"{name} not available in session-scoped context\",\n        ):\n            getattr(session_request, name)\n\n\nclass TestRequestMarking:\n    def test_applymarker(self, pytester: Pytester) -> None:\n        item1, item2 = pytester.getitems(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def something(request):\n                pass\n            class TestClass(object):\n                def test_func1(self, something):\n                    pass\n                def test_func2(self, something):\n                    pass\n        \"\"\"\n        )\n        assert isinstance(item1, Function)\n        req1 = TopRequest(item1, _ispytest=True)\n        assert \"xfail\" not in item1.keywords\n        req1.applymarker(pytest.mark.xfail)\n        assert \"xfail\" in item1.keywords\n        assert \"skipif\" not in item1.keywords\n        req1.applymarker(pytest.mark.skipif)\n        assert \"skipif\" in item1.keywords\n        with pytest.raises(ValueError):\n            req1.applymarker(42)  # type: ignore[arg-type]\n\n    def test_accesskeywords(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture()\n            def keywords(request):\n                return request.keywords\n            @pytest.mark.XYZ\n            def test_function(keywords):\n                assert keywords[\"XYZ\"]\n                assert \"abc\" not in keywords\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_accessmarker_dynamic(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture()\n            def keywords(request):\n                return request.keywords\n\n            @pytest.fixture(scope=\"class\", autouse=True)\n            def marking(request):\n                request.applymarker(pytest.mark.XYZ(\"hello\"))\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def test_fun1(keywords):\n                assert keywords[\"XYZ\"] is not None\n                assert \"abc\" not in keywords\n            def test_fun2(keywords):\n                assert keywords[\"XYZ\"] is not None\n                assert \"abc\" not in keywords\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n\nclass TestFixtureUsages:\n    def test_noargfixturedec(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def arg1():\n                return 1\n\n            def test_func(arg1):\n                assert arg1 == 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_receives_funcargs(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture()\n            def arg1():\n                return 1\n\n            @pytest.fixture()\n            def arg2(arg1):\n                return arg1 + 1\n\n            def test_add(arg2):\n                assert arg2 == 2\n            def test_all(arg1, arg2):\n                assert arg1 == 1\n                assert arg2 == 2\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_receives_funcargs_scope_mismatch(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"function\")\n            def arg1():\n                return 1\n\n            @pytest.fixture(scope=\"module\")\n            def arg2(arg1):\n                return arg1 + 1\n\n            def test_add(arg2):\n                assert arg2 == 2\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*ScopeMismatch*Requesting fixture stack*\",\n                \"test_receives_funcargs_scope_mismatch.py:6:  def arg2(arg1)\",\n                \"Requested fixture:\",\n                \"test_receives_funcargs_scope_mismatch.py:2:  def arg1()\",\n                \"*1 error*\",\n            ]\n        )\n\n    def test_receives_funcargs_scope_mismatch_issue660(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"function\")\n            def arg1():\n                return 1\n\n            @pytest.fixture(scope=\"module\")\n            def arg2(arg1):\n                return arg1 + 1\n\n            def test_add(arg1, arg2):\n                assert arg2 == 2\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*ScopeMismatch*Requesting fixture stack*\",\n                \"* def arg2(arg1)\",\n                \"Requested fixture:\",\n                \"* def arg1()\",\n                \"*1 error*\",\n            ],\n        )\n\n    def test_invalid_scope(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"functions\")\n            def badscope():\n                pass\n\n            def test_nothing(badscope):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest_inprocess()\n        result.stdout.fnmatch_lines(\n            \"*Fixture 'badscope' from test_invalid_scope.py got an unexpected scope value 'functions'\"\n        )\n\n    @pytest.mark.parametrize(\"scope\", [\"function\", \"session\"])\n    def test_parameters_without_eq_semantics(self, scope, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            f\"\"\"\n            class NoEq1:  # fails on `a == b` statement\n                def __eq__(self, _):\n                    raise RuntimeError\n\n            class NoEq2:  # fails on `if a == b:` statement\n                def __eq__(self, _):\n                    class NoBool:\n                        def __bool__(self):\n                            raise RuntimeError\n                    return NoBool()\n\n            import pytest\n            @pytest.fixture(params=[NoEq1(), NoEq2()], scope={scope!r})\n            def no_eq(request):\n                return request.param\n\n            def test1(no_eq):\n                pass\n\n            def test2(no_eq):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*4 passed*\"])\n\n    def test_funcarg_parametrized_and_used_twice(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(params=[1,2])\n            def arg1(request):\n                values.append(1)\n                return request.param\n\n            @pytest.fixture()\n            def arg2(arg1):\n                return arg1 + 1\n\n            def test_add(arg1, arg2):\n                assert arg2 == arg1 + 1\n                assert len(values) == arg1\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 passed*\"])\n\n    def test_factory_uses_unknown_funcarg_as_dependency_error(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture()\n            def fail(missing):\n                return\n\n            @pytest.fixture()\n            def call_fail(fail):\n                return\n\n            def test_missing(call_fail):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *pytest.fixture()*\n            *def call_fail(fail)*\n            *pytest.fixture()*\n            *def fail*\n            *fixture*'missing'*not found*\n        \"\"\"\n        )\n\n    def test_factory_setup_as_classes_fails(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            class arg1(object):\n                def __init__(self, request):\n                    self.x = 1\n            arg1 = pytest.fixture()(arg1)\n\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        values = reprec.getfailedcollections()\n        assert len(values) == 1\n\n    def test_usefixtures_marker(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            values = []\n\n            @pytest.fixture(scope=\"class\")\n            def myfix(request):\n                request.cls.hello = \"world\"\n                values.append(1)\n\n            class TestClass(object):\n                def test_one(self):\n                    assert self.hello == \"world\"\n                    assert len(values) == 1\n                def test_two(self):\n                    assert self.hello == \"world\"\n                    assert len(values) == 1\n            pytest.mark.usefixtures(\"myfix\")(TestClass)\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_usefixtures_ini(self, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            usefixtures = myfix\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"class\")\n            def myfix(request):\n                request.cls.hello = \"world\"\n\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def test_one(self):\n                    assert self.hello == \"world\"\n                def test_two(self):\n                    assert self.hello == \"world\"\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_usefixtures_seen_in_showmarkers(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--markers\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *usefixtures(fixturename1*mark tests*fixtures*\n        \"\"\"\n        )\n\n    def test_request_instance_issue203(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            class TestClass(object):\n                @pytest.fixture\n                def setup1(self, request):\n                    assert self == request.instance\n                    self.arg1 = 1\n                def test_hello(self, setup1):\n                    assert self.arg1 == 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_fixture_parametrized_with_iterator(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            values = []\n            def f():\n                yield 1\n                yield 2\n            dec = pytest.fixture(scope=\"module\", params=f())\n\n            @dec\n            def arg(request):\n                return request.param\n            @dec\n            def arg2(request):\n                return request.param\n\n            def test_1(arg):\n                values.append(arg)\n            def test_2(arg2):\n                values.append(arg2*10)\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\")\n        reprec.assertoutcome(passed=4)\n        values = reprec.getcalls(\"pytest_runtest_call\")[0].item.module.values\n        assert values == [1, 2, 10, 20]\n\n    def test_setup_functions_as_fixtures(self, pytester: Pytester) -> None:\n        \"\"\"Ensure setup_* methods obey fixture scope rules (#517, #3094).\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            DB_INITIALIZED = None\n\n            @pytest.fixture(scope=\"session\", autouse=True)\n            def db():\n                global DB_INITIALIZED\n                DB_INITIALIZED = True\n                yield\n                DB_INITIALIZED = False\n\n            def setup_module():\n                assert DB_INITIALIZED\n\n            def teardown_module():\n                assert DB_INITIALIZED\n\n            class TestClass(object):\n\n                def setup_method(self, method):\n                    assert DB_INITIALIZED\n\n                def teardown_method(self, method):\n                    assert DB_INITIALIZED\n\n                def test_printer_1(self):\n                    pass\n\n                def test_printer_2(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 2 passed in *\"])\n\n\nclass TestFixtureManagerParseFactories:\n    @pytest.fixture\n    def pytester(self, pytester: Pytester) -> Pytester:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def hello(request):\n                return \"conftest\"\n\n            @pytest.fixture\n            def fm(request):\n                return request._fixturemanager\n\n            @pytest.fixture\n            def item(request):\n                return request._pyfuncitem\n        \"\"\"\n        )\n        return pytester\n\n    def test_parsefactories_evil_objects_issue214(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            class A(object):\n                def __call__(self):\n                    pass\n                def __getattr__(self, name):\n                    raise RuntimeError()\n            a = A()\n            def test_hello():\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1, failed=0)\n\n    def test_parsefactories_conftest(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def test_hello(item, fm):\n                for name in (\"fm\", \"hello\", \"item\"):\n                    faclist = fm.getfixturedefs(name, item)\n                    assert len(faclist) == 1\n                    fac = faclist[0]\n                    assert fac.func.__name__ == name\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=1)\n\n    def test_parsefactories_conftest_and_module_and_class(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            import pytest\n\n            @pytest.fixture\n            def hello(request):\n                return \"module\"\n            class TestClass(object):\n                @pytest.fixture\n                def hello(self, request):\n                    return \"class\"\n                def test_hello(self, item, fm):\n                    faclist = fm.getfixturedefs(\"hello\", item)\n                    print(faclist)\n                    assert len(faclist) == 3\n\n                    assert faclist[0].func(item._request) == \"conftest\"\n                    assert faclist[1].func(item._request) == \"module\"\n                    assert faclist[2].func(item._request) == \"class\"\n            \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=1)\n\n    def test_parsefactories_relative_node_ids(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        # example mostly taken from:\n        # https://mail.python.org/pipermail/pytest-dev/2014-September/002617.html\n        runner = pytester.mkdir(\"runner\")\n        package = pytester.mkdir(\"package\")\n        package.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n            @pytest.fixture\n            def one():\n                return 1\n            \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        package.joinpath(\"test_x.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def test_x(one):\n                    assert one == 1\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub = package.joinpath(\"sub\")\n        sub.mkdir()\n        sub.joinpath(\"__init__.py\").touch()\n        sub.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.fixture\n                def one():\n                    return 2\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub.joinpath(\"test_y.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def test_x(one):\n                    assert one == 2\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n        with monkeypatch.context() as mp:\n            mp.chdir(runner)\n            reprec = pytester.inline_run(\"..\")\n            reprec.assertoutcome(passed=2)\n\n    def test_package_xunit_fixture(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            __init__=\"\"\"\\\n            values = []\n        \"\"\"\n        )\n        package = pytester.mkdir(\"package\")\n        package.joinpath(\"__init__.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                from .. import values\n                def setup_module():\n                    values.append(\"package\")\n                def teardown_module():\n                    values[:] = []\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        package.joinpath(\"test_x.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                from .. import values\n                def test_x():\n                    assert values == [\"package\"]\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        package = pytester.mkdir(\"package2\")\n        package.joinpath(\"__init__.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                from .. import values\n                def setup_module():\n                    values.append(\"package2\")\n                def teardown_module():\n                    values[:] = []\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        package.joinpath(\"test_x.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                from .. import values\n                def test_x():\n                    assert values == [\"package2\"]\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_package_fixture_complex(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            __init__=\"\"\"\\\n            values = []\n        \"\"\"\n        )\n        pytester.syspathinsert(pytester.path.name)\n        package = pytester.mkdir(\"package\")\n        package.joinpath(\"__init__.py\").write_text(\"\", encoding=\"utf-8\")\n        package.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                from .. import values\n                @pytest.fixture(scope=\"package\")\n                def one():\n                    values.append(\"package\")\n                    yield values\n                    values.pop()\n                @pytest.fixture(scope=\"package\", autouse=True)\n                def two():\n                    values.append(\"package-auto\")\n                    yield values\n                    values.pop()\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        package.joinpath(\"test_x.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                from .. import values\n                def test_package_autouse():\n                    assert values == [\"package-auto\"]\n                def test_package(one):\n                    assert values == [\"package-auto\", \"package\"]\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_collect_custom_items(self, pytester: Pytester) -> None:\n        pytester.copy_example(\"fixtures/custom_item\")\n        result = pytester.runpytest(\"foo\")\n        result.stdout.fnmatch_lines([\"*passed*\"])\n\n\nclass TestAutouseDiscovery:\n    @pytest.fixture\n    def pytester(self, pytester: Pytester) -> Pytester:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture(autouse=True)\n            def perfunction(request, tmp_path):\n                pass\n\n            @pytest.fixture()\n            def arg1(tmp_path):\n                pass\n            @pytest.fixture(autouse=True)\n            def perfunction2(arg1):\n                pass\n\n            @pytest.fixture\n            def fm(request):\n                return request._fixturemanager\n\n            @pytest.fixture\n            def item(request):\n                return request._pyfuncitem\n        \"\"\"\n        )\n        return pytester\n\n    def test_parsefactories_conftest(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            from _pytest.pytester import get_public_names\n            def test_check_setup(item, fm):\n                autousenames = list(fm._getautousenames(item))\n                assert len(get_public_names(autousenames)) == 2\n                assert \"perfunction2\" in autousenames\n                assert \"perfunction\" in autousenames\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=1)\n\n    def test_two_classes_separated_autouse(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            class TestA(object):\n                values = []\n                @pytest.fixture(autouse=True)\n                def setup1(self):\n                    self.values.append(1)\n                def test_setup1(self):\n                    assert self.values == [1]\n            class TestB(object):\n                values = []\n                @pytest.fixture(autouse=True)\n                def setup2(self):\n                    self.values.append(1)\n                def test_setup2(self):\n                    assert self.values == [1]\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_setup_at_classlevel(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            class TestClass(object):\n                @pytest.fixture(autouse=True)\n                def permethod(self, request):\n                    request.instance.funcname = request.function.__name__\n                def test_method1(self):\n                    assert self.funcname == \"test_method1\"\n                def test_method2(self):\n                    assert self.funcname == \"test_method2\"\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=2)\n\n    @pytest.mark.xfail(reason=\"'enabled' feature not implemented\")\n    def test_setup_enabled_functionnode(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def enabled(parentnode, markers):\n                return \"needsdb\" in markers\n\n            @pytest.fixture(params=[1,2])\n            def db(request):\n                return request.param\n\n            @pytest.fixture(enabled=enabled, autouse=True)\n            def createdb(db):\n                pass\n\n            def test_func1(request):\n                assert \"db\" not in request.fixturenames\n\n            @pytest.mark.needsdb\n            def test_func2(request):\n                assert \"db\" in request.fixturenames\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=2)\n\n    def test_callables_nocode(self, pytester: Pytester) -> None:\n        \"\"\"An imported mock.call would break setup/factory discovery due to\n        it being callable and __code__ not being a code object.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n           class _call(tuple):\n               def __call__(self, *k, **kw):\n                   pass\n               def __getattr__(self, k):\n                   return self\n\n           call = _call()\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(failed=0, passed=0)\n\n    def test_autouse_in_conftests(self, pytester: Pytester) -> None:\n        a = pytester.mkdir(\"a\")\n        b = pytester.mkdir(\"a1\")\n        conftest = pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture(autouse=True)\n            def hello():\n                xxx\n        \"\"\"\n        )\n        conftest.rename(a.joinpath(conftest.name))\n        a.joinpath(\"test_something.py\").write_text(\n            \"def test_func(): pass\", encoding=\"utf-8\"\n        )\n        b.joinpath(\"test_otherthing.py\").write_text(\n            \"def test_func(): pass\", encoding=\"utf-8\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *1 passed*1 error*\n        \"\"\"\n        )\n\n    def test_autouse_in_module_and_two_classes(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(autouse=True)\n            def append1():\n                values.append(\"module\")\n            def test_x():\n                assert values == [\"module\"]\n\n            class TestA(object):\n                @pytest.fixture(autouse=True)\n                def append2(self):\n                    values.append(\"A\")\n                def test_hello(self):\n                    assert values == [\"module\", \"module\", \"A\"], values\n            class TestA2(object):\n                def test_world(self):\n                    assert values == [\"module\", \"module\", \"A\", \"module\"], values\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=3)\n\n\nclass TestAutouseManagement:\n    def test_autouse_conftest_mid_directory(self, pytester: Pytester) -> None:\n        pkgdir = pytester.mkpydir(\"xyz123\")\n        pkgdir.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.fixture(autouse=True)\n                def app():\n                    import sys\n                    sys._myapp = \"hello\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub = pkgdir.joinpath(\"tests\")\n        sub.mkdir()\n        t = sub.joinpath(\"test_app.py\")\n        t.touch()\n        t.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import sys\n                def test_app():\n                    assert sys._myapp == \"hello\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=1)\n\n    def test_funcarg_and_setup(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(scope=\"module\")\n            def arg():\n                values.append(1)\n                return 0\n            @pytest.fixture(scope=\"module\", autouse=True)\n            def something(arg):\n                values.append(2)\n\n            def test_hello(arg):\n                assert len(values) == 2\n                assert values == [1,2]\n                assert arg == 0\n\n            def test_hello2(arg):\n                assert len(values) == 2\n                assert values == [1,2]\n                assert arg == 0\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_uses_parametrized_resource(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(params=[1,2])\n            def arg(request):\n                return request.param\n\n            @pytest.fixture(autouse=True)\n            def something(arg):\n                values.append(arg)\n\n            def test_hello():\n                if len(values) == 1:\n                    assert values == [1]\n                elif len(values) == 2:\n                    assert values == [1, 2]\n                else:\n                    0/0\n\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=2)\n\n    def test_session_parametrized_function(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            values = []\n\n            @pytest.fixture(scope=\"session\", params=[1,2])\n            def arg(request):\n               return request.param\n\n            @pytest.fixture(scope=\"function\", autouse=True)\n            def append(request, arg):\n                if request.function.__name__ == \"test_some\":\n                    values.append(arg)\n\n            def test_some():\n                pass\n\n            def test_result(arg):\n                assert len(values) == arg\n                assert values[:arg] == [1,2][:arg]\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\", \"-s\")\n        reprec.assertoutcome(passed=4)\n\n    def test_class_function_parametrization_finalization(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.makeconftest(\n            \"\"\"\n            import pytest\n            import pprint\n\n            values = []\n\n            @pytest.fixture(scope=\"function\", params=[1,2])\n            def farg(request):\n                return request.param\n\n            @pytest.fixture(scope=\"class\", params=list(\"ab\"))\n            def carg(request):\n                return request.param\n\n            @pytest.fixture(scope=\"function\", autouse=True)\n            def append(request, farg, carg):\n                def fin():\n                    values.append(\"fin_%s%s\" % (carg, farg))\n                request.addfinalizer(fin)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            class TestClass(object):\n                def test_1(self):\n                    pass\n            class TestClass2(object):\n                def test_2(self):\n                    pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\", \"-s\", \"--confcutdir\", pytester.path)\n        reprec.assertoutcome(passed=8)\n        config = reprec.getcalls(\"pytest_unconfigure\")[0].config\n        values = config.pluginmanager._getconftestmodules(p)[0].values\n        assert values == [\"fin_a1\", \"fin_a2\", \"fin_b1\", \"fin_b2\"] * 2\n\n    def test_scope_ordering(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(scope=\"function\", autouse=True)\n            def fappend2():\n                values.append(2)\n            @pytest.fixture(scope=\"class\", autouse=True)\n            def classappend3():\n                values.append(3)\n            @pytest.fixture(scope=\"module\", autouse=True)\n            def mappend():\n                values.append(1)\n\n            class TestHallo(object):\n                def test_method(self):\n                    assert values == [1,3,2]\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_parametrization_setup_teardown_ordering(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            def pytest_generate_tests(metafunc):\n                if metafunc.cls is None:\n                    assert metafunc.function is test_finish\n                if metafunc.cls is not None:\n                    metafunc.parametrize(\"item\", [1,2], scope=\"class\")\n            class TestClass(object):\n                @pytest.fixture(scope=\"class\", autouse=True)\n                def addteardown(self, item, request):\n                    values.append(\"setup-%d\" % item)\n                    request.addfinalizer(lambda: values.append(\"teardown-%d\" % item))\n                def test_step1(self, item):\n                    values.append(\"step1-%d\" % item)\n                def test_step2(self, item):\n                    values.append(\"step2-%d\" % item)\n\n            def test_finish():\n                print(values)\n                assert values == [\"setup-1\", \"step1-1\", \"step2-1\", \"teardown-1\",\n                             \"setup-2\", \"step1-2\", \"step2-2\", \"teardown-2\",]\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=5)\n\n    def test_ordering_autouse_before_explicit(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            values = []\n            @pytest.fixture(autouse=True)\n            def fix1():\n                values.append(1)\n            @pytest.fixture()\n            def arg1():\n                values.append(2)\n            def test_hello(arg1):\n                assert values == [1,2]\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    @pytest.mark.parametrize(\"param1\", [\"\", \"params=[1]\"], ids=[\"p00\", \"p01\"])\n    @pytest.mark.parametrize(\"param2\", [\"\", \"params=[1]\"], ids=[\"p10\", \"p11\"])\n    def test_ordering_dependencies_torndown_first(\n        self, pytester: Pytester, param1, param2\n    ) -> None:\n        \"\"\"#226\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(%(param1)s)\n            def arg1(request):\n                request.addfinalizer(lambda: values.append(\"fin1\"))\n                values.append(\"new1\")\n            @pytest.fixture(%(param2)s)\n            def arg2(request, arg1):\n                request.addfinalizer(lambda: values.append(\"fin2\"))\n                values.append(\"new2\")\n\n            def test_arg(arg2):\n                pass\n            def test_check():\n                assert values == [\"new1\", \"new2\", \"fin2\", \"fin1\"]\n        \"\"\"  # noqa: UP031 (python syntax issues)\n            % locals()\n        )\n        reprec = pytester.inline_run(\"-s\")\n        reprec.assertoutcome(passed=2)\n\n    def test_reordering_catastrophic_performance(self, pytester: Pytester) -> None:\n        \"\"\"Check that a certain high-scope parametrization pattern doesn't cause\n        a catasrophic slowdown.\n\n        Regression test for #12355.\n        \"\"\"\n        pytester.makepyfile(\"\"\"\n            import pytest\n\n            params = tuple(\"abcdefghijklmnopqrstuvwxyz\")\n            @pytest.mark.parametrize(params, [range(len(params))] * 3, scope=\"module\")\n            def test_parametrize(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z):\n                pass\n        \"\"\")\n\n        result = pytester.runpytest()\n\n        result.assert_outcomes(passed=3)\n\n\nclass TestFixtureMarker:\n    def test_parametrize(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(params=[\"a\", \"b\", \"c\"])\n            def arg(request):\n                return request.param\n            values = []\n            def test_param(arg):\n                values.append(arg)\n            def test_result():\n                assert values == list(\"abc\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=4)\n\n    def test_multiple_parametrization_issue_736(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1,2,3])\n            def foo(request):\n                return request.param\n\n            @pytest.mark.parametrize('foobar', [4,5,6])\n            def test_issue(foo, foobar):\n                assert foo in [1,2,3]\n                assert foobar in [4,5,6]\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=9)\n\n    @pytest.mark.parametrize(\n        \"param_args\",\n        [\"'fixt, val'\", \"'fixt,val'\", \"['fixt', 'val']\", \"('fixt', 'val')\"],\n    )\n    def test_override_parametrized_fixture_issue_979(\n        self, pytester: Pytester, param_args\n    ) -> None:\n        \"\"\"Make sure a parametrized argument can override a parametrized fixture.\n\n        This was a regression introduced in the fix for #736.\n        \"\"\"\n        pytester.makepyfile(\n            f\"\"\"\n            import pytest\n\n            @pytest.fixture(params=[1, 2])\n            def fixt(request):\n                return request.param\n\n            @pytest.mark.parametrize({param_args}, [(3, 'x'), (4, 'x')])\n            def test_foo(fixt, val):\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_scope_session(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(scope=\"module\")\n            def arg():\n                values.append(1)\n                return 1\n\n            def test_1(arg):\n                assert arg == 1\n            def test_2(arg):\n                assert arg == 1\n                assert len(values) == 1\n            class TestClass(object):\n                def test3(self, arg):\n                    assert arg == 1\n                    assert len(values) == 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=3)\n\n    def test_scope_session_exc(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(scope=\"session\")\n            def fix():\n                values.append(1)\n                pytest.skip('skipping')\n\n            def test_1(fix):\n                pass\n            def test_2(fix):\n                pass\n            def test_last():\n                assert values == [1]\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(skipped=2, passed=1)\n\n    def test_scope_session_exc_two_fix(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            m = []\n            @pytest.fixture(scope=\"session\")\n            def a():\n                values.append(1)\n                pytest.skip('skipping')\n            @pytest.fixture(scope=\"session\")\n            def b(a):\n                m.append(1)\n\n            def test_1(b):\n                pass\n            def test_2(b):\n                pass\n            def test_last():\n                assert values == [1]\n                assert m == []\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(skipped=2, passed=1)\n\n    def test_scope_exc(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_foo=\"\"\"\n                def test_foo(fix):\n                    pass\n            \"\"\",\n            test_bar=\"\"\"\n                def test_bar(fix):\n                    pass\n            \"\"\",\n            conftest=\"\"\"\n                import pytest\n                reqs = []\n                @pytest.fixture(scope=\"session\")\n                def fix(request):\n                    reqs.append(1)\n                    pytest.skip()\n                @pytest.fixture\n                def req_list():\n                    return reqs\n            \"\"\",\n            test_real=\"\"\"\n                def test_last(req_list):\n                    assert req_list == [1]\n            \"\"\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(skipped=2, passed=1)\n\n    def test_scope_module_uses_session(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(scope=\"module\")\n            def arg():\n                values.append(1)\n                return 1\n\n            def test_1(arg):\n                assert arg == 1\n            def test_2(arg):\n                assert arg == 1\n                assert len(values) == 1\n            class TestClass(object):\n                def test3(self, arg):\n                    assert arg == 1\n                    assert len(values) == 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=3)\n\n    def test_scope_module_and_finalizer(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            finalized_list = []\n            created_list = []\n            @pytest.fixture(scope=\"module\")\n            def arg(request):\n                created_list.append(1)\n                assert request.scope == \"module\"\n                request.addfinalizer(lambda: finalized_list.append(1))\n            @pytest.fixture\n            def created(request):\n                return len(created_list)\n            @pytest.fixture\n            def finalized(request):\n                return len(finalized_list)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            test_mod1=\"\"\"\n                def test_1(arg, created, finalized):\n                    assert created == 1\n                    assert finalized == 0\n                def test_2(arg, created, finalized):\n                    assert created == 1\n                    assert finalized == 0\"\"\",\n            test_mod2=\"\"\"\n                def test_3(arg, created, finalized):\n                    assert created == 2\n                    assert finalized == 1\"\"\",\n            test_mode3=\"\"\"\n                def test_4(arg, created, finalized):\n                    assert created == 3\n                    assert finalized == 2\n            \"\"\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=4)\n\n    def test_scope_mismatch_various(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            finalized = []\n            created = []\n            @pytest.fixture(scope=\"function\")\n            def arg(request):\n                pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            test_mod1=\"\"\"\n                import pytest\n                @pytest.fixture(scope=\"session\")\n                def arg(request):\n                    request.getfixturevalue(\"arg\")\n                def test_1(arg):\n                    pass\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        result.stdout.fnmatch_lines(\n            [\"*ScopeMismatch*You tried*function*session*request*\"]\n        )\n\n    def test_scope_mismatch_already_computed_dynamic(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_it=\"\"\"\n                import pytest\n\n                @pytest.fixture(scope=\"function\")\n                def fixfunc(): pass\n\n                @pytest.fixture(scope=\"module\")\n                def fixmod(fixfunc): pass\n\n                def test_it(request, fixfunc):\n                    request.getfixturevalue(\"fixmod\")\n            \"\"\",\n        )\n\n        result = pytester.runpytest()\n        assert result.ret == ExitCode.TESTS_FAILED\n        result.stdout.fnmatch_lines(\n            [\n                \"*ScopeMismatch*Requesting fixture stack*\",\n                \"test_it.py:6:  def fixmod(fixfunc)\",\n                \"Requested fixture:\",\n                \"test_it.py:3:  def fixfunc()\",\n            ]\n        )\n\n    def test_dynamic_scope(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n\n            def pytest_addoption(parser):\n                parser.addoption(\"--extend-scope\", action=\"store_true\", default=False)\n\n\n            def dynamic_scope(fixture_name, config):\n                if config.getoption(\"--extend-scope\"):\n                    return \"session\"\n                return \"function\"\n\n\n            @pytest.fixture(scope=dynamic_scope)\n            def dynamic_fixture(calls=[]):\n                calls.append(\"call\")\n                return len(calls)\n\n        \"\"\"\n        )\n\n        pytester.makepyfile(\n            \"\"\"\n            def test_first(dynamic_fixture):\n                assert dynamic_fixture == 1\n\n\n            def test_second(dynamic_fixture):\n                assert dynamic_fixture == 2\n\n        \"\"\"\n        )\n\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n        reprec = pytester.inline_run(\"--extend-scope\")\n        reprec.assertoutcome(passed=1, failed=1)\n\n    def test_dynamic_scope_bad_return(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def dynamic_scope(**_):\n                return \"wrong-scope\"\n\n            @pytest.fixture(scope=dynamic_scope)\n            def fixture():\n                pass\n\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            \"Fixture 'fixture' from test_dynamic_scope_bad_return.py \"\n            \"got an unexpected scope value 'wrong-scope'\"\n        )\n\n    def test_register_only_with_mark(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture()\n            def arg():\n                return 1\n        \"\"\"\n        )\n        pytester.makepyfile(\n            test_mod1=\"\"\"\n                import pytest\n                @pytest.fixture()\n                def arg(arg):\n                    return arg + 1\n                def test_1(arg):\n                    assert arg == 2\n            \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_parametrize_and_scope(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"module\", params=[\"a\", \"b\", \"c\"])\n            def arg(request):\n                return request.param\n            values = []\n            def test_param(arg):\n                values.append(arg)\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\")\n        reprec.assertoutcome(passed=3)\n        values = reprec.getcalls(\"pytest_runtest_call\")[0].item.module.values\n        assert len(values) == 3\n        assert \"a\" in values\n        assert \"b\" in values\n        assert \"c\" in values\n\n    def test_scope_mismatch(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"function\")\n            def arg(request):\n                pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"session\")\n            def arg(arg):\n                pass\n            def test_mismatch(arg):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*ScopeMismatch*\", \"*1 error*\"])\n\n    def test_parametrize_separated_order(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"module\", params=[1, 2])\n            def arg(request):\n                return request.param\n\n            values = []\n            def test_1(arg):\n                values.append(arg)\n            def test_2(arg):\n                values.append(arg)\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\")\n        reprec.assertoutcome(passed=4)\n        values = reprec.getcalls(\"pytest_runtest_call\")[0].item.module.values\n        assert values == [1, 1, 2, 2]\n\n    def test_module_parametrized_ordering(self, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style=classic\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"session\", params=\"s1 s2\".split())\n            def sarg():\n                pass\n            @pytest.fixture(scope=\"module\", params=\"m1 m2\".split())\n            def marg():\n                pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            test_mod1=\"\"\"\n            def test_func(sarg):\n                pass\n            def test_func1(marg):\n                pass\n        \"\"\",\n            test_mod2=\"\"\"\n            def test_func2(sarg):\n                pass\n            def test_func3(sarg, marg):\n                pass\n            def test_func3b(sarg, marg):\n                pass\n            def test_func4(marg):\n                pass\n        \"\"\",\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            test_mod1.py::test_func[s1] PASSED\n            test_mod2.py::test_func2[s1] PASSED\n            test_mod2.py::test_func3[s1-m1] PASSED\n            test_mod2.py::test_func3b[s1-m1] PASSED\n            test_mod2.py::test_func3[s1-m2] PASSED\n            test_mod2.py::test_func3b[s1-m2] PASSED\n            test_mod1.py::test_func[s2] PASSED\n            test_mod2.py::test_func2[s2] PASSED\n            test_mod2.py::test_func3[s2-m1] PASSED\n            test_mod2.py::test_func3b[s2-m1] PASSED\n            test_mod2.py::test_func4[m1] PASSED\n            test_mod2.py::test_func3[s2-m2] PASSED\n            test_mod2.py::test_func3b[s2-m2] PASSED\n            test_mod2.py::test_func4[m2] PASSED\n            test_mod1.py::test_func1[m1] PASSED\n            test_mod1.py::test_func1[m2] PASSED\n        \"\"\"\n        )\n\n    def test_dynamic_parametrized_ordering(self, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style=classic\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            def pytest_configure(config):\n                class DynamicFixturePlugin(object):\n                    @pytest.fixture(scope='session', params=['flavor1', 'flavor2'])\n                    def flavor(self, request):\n                        return request.param\n                config.pluginmanager.register(DynamicFixturePlugin(), 'flavor-fixture')\n\n            @pytest.fixture(scope='session', params=['vxlan', 'vlan'])\n            def encap(request):\n                return request.param\n\n            @pytest.fixture(scope='session', autouse='True')\n            def reprovision(request, flavor, encap):\n                pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test(reprovision):\n                pass\n            def test2(reprovision):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            test_dynamic_parametrized_ordering.py::test[flavor1-vxlan] PASSED\n            test_dynamic_parametrized_ordering.py::test2[flavor1-vxlan] PASSED\n            test_dynamic_parametrized_ordering.py::test[flavor1-vlan] PASSED\n            test_dynamic_parametrized_ordering.py::test2[flavor1-vlan] PASSED\n            test_dynamic_parametrized_ordering.py::test[flavor2-vlan] PASSED\n            test_dynamic_parametrized_ordering.py::test2[flavor2-vlan] PASSED\n            test_dynamic_parametrized_ordering.py::test[flavor2-vxlan] PASSED\n            test_dynamic_parametrized_ordering.py::test2[flavor2-vxlan] PASSED\n        \"\"\"\n        )\n\n    def test_class_ordering(self, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style=classic\n        \"\"\"\n        )\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            values = []\n\n            @pytest.fixture(scope=\"function\", params=[1,2])\n            def farg(request):\n                return request.param\n\n            @pytest.fixture(scope=\"class\", params=list(\"ab\"))\n            def carg(request):\n                return request.param\n\n            @pytest.fixture(scope=\"function\", autouse=True)\n            def append(request, farg, carg):\n                def fin():\n                    values.append(\"fin_%s%s\" % (carg, farg))\n                request.addfinalizer(fin)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            class TestClass2(object):\n                def test_1(self):\n                    pass\n                def test_2(self):\n                    pass\n            class TestClass(object):\n                def test_3(self):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-vs\")\n        result.stdout.re_match_lines(\n            r\"\"\"\n            test_class_ordering.py::TestClass2::test_1\\[a-1\\] PASSED\n            test_class_ordering.py::TestClass2::test_1\\[a-2\\] PASSED\n            test_class_ordering.py::TestClass2::test_2\\[a-1\\] PASSED\n            test_class_ordering.py::TestClass2::test_2\\[a-2\\] PASSED\n            test_class_ordering.py::TestClass2::test_1\\[b-1\\] PASSED\n            test_class_ordering.py::TestClass2::test_1\\[b-2\\] PASSED\n            test_class_ordering.py::TestClass2::test_2\\[b-1\\] PASSED\n            test_class_ordering.py::TestClass2::test_2\\[b-2\\] PASSED\n            test_class_ordering.py::TestClass::test_3\\[a-1\\] PASSED\n            test_class_ordering.py::TestClass::test_3\\[a-2\\] PASSED\n            test_class_ordering.py::TestClass::test_3\\[b-1\\] PASSED\n            test_class_ordering.py::TestClass::test_3\\[b-2\\] PASSED\n        \"\"\"\n        )\n\n    def test_parametrize_separated_order_higher_scope_first(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"function\", params=[1, 2])\n            def arg(request):\n                param = request.param\n                request.addfinalizer(lambda: values.append(\"fin:%s\" % param))\n                values.append(\"create:%s\" % param)\n                return request.param\n\n            @pytest.fixture(scope=\"module\", params=[\"mod1\", \"mod2\"])\n            def modarg(request):\n                param = request.param\n                request.addfinalizer(lambda: values.append(\"fin:%s\" % param))\n                values.append(\"create:%s\" % param)\n                return request.param\n\n            values = []\n            def test_1(arg):\n                values.append(\"test1\")\n            def test_2(modarg):\n                values.append(\"test2\")\n            def test_3(arg, modarg):\n                values.append(\"test3\")\n            def test_4(modarg, arg):\n                values.append(\"test4\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\")\n        reprec.assertoutcome(passed=12)\n        values = reprec.getcalls(\"pytest_runtest_call\")[0].item.module.values\n        expected = [\n            \"create:1\",\n            \"test1\",\n            \"fin:1\",\n            \"create:2\",\n            \"test1\",\n            \"fin:2\",\n            \"create:mod1\",\n            \"test2\",\n            \"create:1\",\n            \"test3\",\n            \"fin:1\",\n            \"create:2\",\n            \"test3\",\n            \"fin:2\",\n            \"create:1\",\n            \"test4\",\n            \"fin:1\",\n            \"create:2\",\n            \"test4\",\n            \"fin:2\",\n            \"fin:mod1\",\n            \"create:mod2\",\n            \"test2\",\n            \"create:1\",\n            \"test3\",\n            \"fin:1\",\n            \"create:2\",\n            \"test3\",\n            \"fin:2\",\n            \"create:1\",\n            \"test4\",\n            \"fin:1\",\n            \"create:2\",\n            \"test4\",\n            \"fin:2\",\n            \"fin:mod2\",\n        ]\n        import pprint\n\n        pprint.pprint(list(zip(values, expected)))\n        assert values == expected\n\n    def test_parametrized_fixture_teardown_order(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(params=[1,2], scope=\"class\")\n            def param1(request):\n                return request.param\n\n            values = []\n\n            class TestClass(object):\n                @classmethod\n                @pytest.fixture(scope=\"class\", autouse=True)\n                def setup1(self, request, param1):\n                    values.append(1)\n                    request.addfinalizer(self.teardown1)\n                @classmethod\n                def teardown1(self):\n                    assert values.pop() == 1\n                @pytest.fixture(scope=\"class\", autouse=True)\n                def setup2(self, request, param1):\n                    values.append(2)\n                    request.addfinalizer(self.teardown2)\n                @classmethod\n                def teardown2(self):\n                    assert values.pop() == 2\n                def test(self):\n                    pass\n\n            def test_finish():\n                assert not values\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *3 passed*\n        \"\"\"\n        )\n        result.stdout.no_fnmatch_line(\"*error*\")\n\n    def test_fixture_finalizer(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n            import sys\n\n            @pytest.fixture\n            def browser(request):\n\n                def finalize():\n                    sys.stdout.write_text('Finalized', encoding='utf-8')\n                request.addfinalizer(finalize)\n                return {}\n        \"\"\"\n        )\n        b = pytester.mkdir(\"subdir\")\n        b.joinpath(\"test_overridden_fixture_finalizer.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n                @pytest.fixture\n                def browser(browser):\n                    browser['visited'] = True\n                    return browser\n\n                def test_browser(browser):\n                    assert browser['visited'] is True\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.runpytest(\"-s\")\n        for test in [\"test_browser\"]:\n            reprec.stdout.fnmatch_lines([\"*Finalized*\"])\n\n    def test_class_scope_with_normal_tests(self, pytester: Pytester) -> None:\n        testpath = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            class Box(object):\n                value = 0\n\n            @pytest.fixture(scope='class')\n            def a(request):\n                Box.value += 1\n                return Box.value\n\n            def test_a(a):\n                assert a == 1\n\n            class Test1(object):\n                def test_b(self, a):\n                    assert a == 2\n\n            class Test2(object):\n                def test_c(self, a):\n                    assert a == 3\"\"\"\n        )\n        reprec = pytester.inline_run(testpath)\n        for test in [\"test_a\", \"test_b\", \"test_c\"]:\n            assert reprec.matchreport(test).passed\n\n    def test_request_is_clean(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(params=[1, 2])\n            def fix(request):\n                request.addfinalizer(lambda: values.append(request.param))\n            def test_fix(fix):\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-s\")\n        values = reprec.getcalls(\"pytest_runtest_call\")[0].item.module.values\n        assert values == [1, 2]\n\n    def test_parametrize_separated_lifecycle(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            values = []\n            @pytest.fixture(scope=\"module\", params=[1, 2])\n            def arg(request):\n                x = request.param\n                request.addfinalizer(lambda: values.append(\"fin%s\" % x))\n                return request.param\n            def test_1(arg):\n                values.append(arg)\n            def test_2(arg):\n                values.append(arg)\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-vs\")\n        reprec.assertoutcome(passed=4)\n        values = reprec.getcalls(\"pytest_runtest_call\")[0].item.module.values\n        import pprint\n\n        pprint.pprint(values)\n        # assert len(values) == 6\n        assert values[0] == values[1] == 1\n        assert values[2] == \"fin1\"\n        assert values[3] == values[4] == 2\n        assert values[5] == \"fin2\"\n\n    def test_parametrize_function_scoped_finalizers_called(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"function\", params=[1, 2])\n            def arg(request):\n                x = request.param\n                request.addfinalizer(lambda: values.append(\"fin%s\" % x))\n                return request.param\n\n            values = []\n            def test_1(arg):\n                values.append(arg)\n            def test_2(arg):\n                values.append(arg)\n            def test_3():\n                assert len(values) == 8\n                assert values == [1, \"fin1\", 2, \"fin2\", 1, \"fin1\", 2, \"fin2\"]\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\")\n        reprec.assertoutcome(passed=5)\n\n    @pytest.mark.parametrize(\"scope\", [\"session\", \"function\", \"module\"])\n    def test_finalizer_order_on_parametrization(\n        self, scope, pytester: Pytester\n    ) -> None:\n        \"\"\"#246\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n\n            @pytest.fixture(scope=%(scope)r, params=[\"1\"])\n            def fix1(request):\n                return request.param\n\n            @pytest.fixture(scope=%(scope)r)\n            def fix2(request, base):\n                def cleanup_fix2():\n                    assert not values, \"base should not have been finalized\"\n                request.addfinalizer(cleanup_fix2)\n\n            @pytest.fixture(scope=%(scope)r)\n            def base(request, fix1):\n                def cleanup_base():\n                    values.append(\"fin_base\")\n                    print(\"finalizing base\")\n                request.addfinalizer(cleanup_base)\n\n            def test_begin():\n                pass\n            def test_baz(base, fix2):\n                pass\n            def test_other():\n                pass\n        \"\"\"  # noqa: UP031 (python syntax issues)\n            % {\"scope\": scope}\n        )\n        reprec = pytester.inline_run(\"-lvs\")\n        reprec.assertoutcome(passed=3)\n\n    def test_class_scope_parametrization_ordering(self, pytester: Pytester) -> None:\n        \"\"\"#396\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            @pytest.fixture(params=[\"John\", \"Doe\"], scope=\"class\")\n            def human(request):\n                request.addfinalizer(lambda: values.append(\"fin %s\" % request.param))\n                return request.param\n\n            class TestGreetings(object):\n                def test_hello(self, human):\n                    values.append(\"test_hello\")\n\n            class TestMetrics(object):\n                def test_name(self, human):\n                    values.append(\"test_name\")\n\n                def test_population(self, human):\n                    values.append(\"test_population\")\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=6)\n        values = reprec.getcalls(\"pytest_runtest_call\")[0].item.module.values\n        assert values == [\n            \"test_hello\",\n            \"fin John\",\n            \"test_hello\",\n            \"fin Doe\",\n            \"test_name\",\n            \"test_population\",\n            \"fin John\",\n            \"test_name\",\n            \"test_population\",\n            \"fin Doe\",\n        ]\n\n    def test_parametrize_setup_function(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"module\", params=[1, 2])\n            def arg(request):\n                return request.param\n\n            @pytest.fixture(scope=\"module\", autouse=True)\n            def mysetup(request, arg):\n                request.addfinalizer(lambda: values.append(\"fin%s\" % arg))\n                values.append(\"setup%s\" % arg)\n\n            values = []\n            def test_1(arg):\n                values.append(arg)\n            def test_2(arg):\n                values.append(arg)\n            def test_3():\n                import pprint\n                pprint.pprint(values)\n                if arg == 1:\n                    assert values == [\"setup1\", 1, 1, ]\n                elif arg == 2:\n                    assert values == [\"setup1\", 1, 1, \"fin1\",\n                                 \"setup2\", 2, 2, ]\n\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"-v\")\n        reprec.assertoutcome(passed=6)\n\n    def test_fixture_marked_function_not_collected_as_test(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def test_app():\n                return 1\n\n            def test_something(test_app):\n                assert test_app == 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n    def test_params_and_ids(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[object(), object()],\n                            ids=['alpha', 'beta'])\n            def fix(request):\n                return request.param\n\n            def test_foo(fix):\n                assert 1\n        \"\"\"\n        )\n        res = pytester.runpytest(\"-v\")\n        res.stdout.fnmatch_lines([\"*test_foo*alpha*\", \"*test_foo*beta*\"])\n\n    def test_params_and_ids_yieldfixture(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[object(), object()], ids=['alpha', 'beta'])\n            def fix(request):\n                 yield request.param\n\n            def test_foo(fix):\n                assert 1\n        \"\"\"\n        )\n        res = pytester.runpytest(\"-v\")\n        res.stdout.fnmatch_lines([\"*test_foo*alpha*\", \"*test_foo*beta*\"])\n\n    def test_deterministic_fixture_collection(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        \"\"\"#920\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"module\",\n                            params=[\"A\",\n                                    \"B\",\n                                    \"C\"])\n            def A(request):\n                return request.param\n\n            @pytest.fixture(scope=\"module\",\n                            params=[\"DDDDDDDDD\", \"EEEEEEEEEEEE\", \"FFFFFFFFFFF\", \"banansda\"])\n            def B(request, A):\n                return request.param\n\n            def test_foo(B):\n                # Something funky is going on here.\n                # Despite specified seeds, on what is collected,\n                # sometimes we get unexpected passes. hashing B seems\n                # to help?\n                assert hash(B) or True\n            \"\"\"\n        )\n        monkeypatch.setenv(\"PYTHONHASHSEED\", \"1\")\n        out1 = pytester.runpytest_subprocess(\"-v\")\n        monkeypatch.setenv(\"PYTHONHASHSEED\", \"2\")\n        out2 = pytester.runpytest_subprocess(\"-v\")\n        output1 = [\n            line\n            for line in out1.outlines\n            if line.startswith(\"test_deterministic_fixture_collection.py::test_foo\")\n        ]\n        output2 = [\n            line\n            for line in out2.outlines\n            if line.startswith(\"test_deterministic_fixture_collection.py::test_foo\")\n        ]\n        assert len(output1) == 12\n        assert output1 == output2\n\n\nclass TestRequestScopeAccess:\n    pytestmark = pytest.mark.parametrize(\n        (\"scope\", \"ok\", \"error\"),\n        [\n            [\"session\", \"\", \"path class function module\"],\n            [\"module\", \"module path\", \"cls function\"],\n            [\"class\", \"module path cls\", \"function\"],\n            [\"function\", \"module path cls function\", \"\"],\n        ],\n    )\n\n    def test_setup(self, pytester: Pytester, scope, ok, error) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=%r, autouse=True)\n            def myscoped(request):\n                for x in %r:\n                    assert hasattr(request, x)\n                for x in %r:\n                    pytest.raises(AttributeError, lambda:\n                        getattr(request, x))\n                assert request.session\n                assert request.config\n            def test_func():\n                pass\n        \"\"\"  # noqa: UP031 (python syntax issues)\n            % (scope, ok.split(), error.split())\n        )\n        reprec = pytester.inline_run(\"-l\")\n        reprec.assertoutcome(passed=1)\n\n    def test_funcarg(self, pytester: Pytester, scope, ok, error) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=%r)\n            def arg(request):\n                for x in %r:\n                    assert hasattr(request, x)\n                for x in %r:\n                    pytest.raises(AttributeError, lambda:\n                        getattr(request, x))\n                assert request.session\n                assert request.config\n            def test_func(arg):\n                pass\n        \"\"\"  # noqa: UP031 (python syntax issues)\n            % (scope, ok.split(), error.split())\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n\nclass TestErrors:\n    def test_subfactory_missing_funcarg(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture()\n            def gen(qwe123):\n                return 1\n            def test_something(gen):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        result.stdout.fnmatch_lines(\n            [\"*def gen(qwe123):*\", \"*fixture*qwe123*not found*\", \"*1 error*\"]\n        )\n\n    def test_issue498_fixture_finalizer_failing(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def fix1(request):\n                def f():\n                    raise KeyError\n                request.addfinalizer(f)\n                return object()\n\n            values = []\n            def test_1(fix1):\n                values.append(fix1)\n            def test_2(fix1):\n                values.append(fix1)\n            def test_3():\n                assert values[0] != values[1]\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *ERROR*teardown*test_1*\n            *KeyError*\n            *ERROR*teardown*test_2*\n            *KeyError*\n            *3 pass*2 errors*\n        \"\"\"\n        )\n\n    def test_setupfunc_missing_funcarg(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(autouse=True)\n            def gen(qwe123):\n                return 1\n            def test_something():\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret != 0\n        result.stdout.fnmatch_lines(\n            [\"*def gen(qwe123):*\", \"*fixture*qwe123*not found*\", \"*1 error*\"]\n        )\n\n    def test_cached_exception_doesnt_get_longer(self, pytester: Pytester) -> None:\n        \"\"\"Regression test for #12204.\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"session\")\n            def bad(): 1 / 0\n\n            def test_1(bad): pass\n            def test_2(bad): pass\n            def test_3(bad): pass\n            \"\"\"\n        )\n\n        result = pytester.runpytest_inprocess(\"--tb=native\")\n        assert result.ret == ExitCode.TESTS_FAILED\n        failures = result.reprec.getfailures()  # type: ignore[attr-defined]\n        assert len(failures) == 3\n        lines1 = failures[1].longrepr.reprtraceback.reprentries[0].lines\n        lines2 = failures[2].longrepr.reprtraceback.reprentries[0].lines\n        assert len(lines1) == len(lines2)\n\n\nclass TestShowFixtures:\n    def test_funcarg_compat(self, pytester: Pytester) -> None:\n        config = pytester.parseconfigure(\"--funcargs\")\n        assert config.option.showfixtures\n\n    def test_show_help(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--fixtures\", \"--help\")\n        assert not result.ret\n\n    def test_show_fixtures(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--fixtures\")\n        result.stdout.fnmatch_lines(\n            [\n                \"tmp_path_factory [[]session scope[]] -- .../_pytest/tmpdir.py:*\",\n                \"*for the test session*\",\n                \"tmp_path -- .../_pytest/tmpdir.py:*\",\n                \"*temporary directory*\",\n            ]\n        )\n\n    def test_show_fixtures_verbose(self, pytester: Pytester) -> None:\n        result = pytester.runpytest(\"--fixtures\", \"-v\")\n        result.stdout.fnmatch_lines(\n            [\n                \"tmp_path_factory [[]session scope[]] -- .../_pytest/tmpdir.py:*\",\n                \"*for the test session*\",\n                \"tmp_path -- .../_pytest/tmpdir.py:*\",\n                \"*temporary directory*\",\n            ]\n        )\n\n    def test_show_fixtures_testmodule(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            '''\n            import pytest\n            @pytest.fixture\n            def _arg0():\n                \"\"\" hidden \"\"\"\n            @pytest.fixture\n            def arg1():\n                \"\"\"  hello world \"\"\"\n        '''\n        )\n        result = pytester.runpytest(\"--fixtures\", p)\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *tmp_path -- *\n            *fixtures defined from*\n            *arg1 -- test_show_fixtures_testmodule.py:6*\n            *hello world*\n        \"\"\"\n        )\n        result.stdout.no_fnmatch_line(\"*arg0*\")\n\n    @pytest.mark.parametrize(\"testmod\", [True, False])\n    def test_show_fixtures_conftest(self, pytester: Pytester, testmod) -> None:\n        pytester.makeconftest(\n            '''\n            import pytest\n            @pytest.fixture\n            def arg1():\n                \"\"\"  hello world \"\"\"\n        '''\n        )\n        if testmod:\n            pytester.makepyfile(\n                \"\"\"\n                def test_hello():\n                    pass\n            \"\"\"\n            )\n        result = pytester.runpytest(\"--fixtures\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *tmp_path*\n            *fixtures defined from*conftest*\n            *arg1*\n            *hello world*\n        \"\"\"\n        )\n\n    def test_show_fixtures_trimmed_doc(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            textwrap.dedent(\n                '''\\\n                import pytest\n                @pytest.fixture\n                def arg1():\n                    \"\"\"\n                    line1\n                    line2\n\n                    \"\"\"\n                @pytest.fixture\n                def arg2():\n                    \"\"\"\n                    line1\n                    line2\n\n                    \"\"\"\n                '''\n            )\n        )\n        result = pytester.runpytest(\"--fixtures\", p)\n        result.stdout.fnmatch_lines(\n            textwrap.dedent(\n                \"\"\"\\\n                * fixtures defined from test_show_fixtures_trimmed_doc *\n                arg2 -- test_show_fixtures_trimmed_doc.py:10\n                    line1\n                    line2\n                arg1 -- test_show_fixtures_trimmed_doc.py:3\n                    line1\n                    line2\n                \"\"\"\n            )\n        )\n\n    def test_show_fixtures_indented_doc(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            textwrap.dedent(\n                '''\\\n                import pytest\n                @pytest.fixture\n                def fixture1():\n                    \"\"\"\n                    line1\n                        indented line\n                    \"\"\"\n                '''\n            )\n        )\n        result = pytester.runpytest(\"--fixtures\", p)\n        result.stdout.fnmatch_lines(\n            textwrap.dedent(\n                \"\"\"\\\n                * fixtures defined from test_show_fixtures_indented_doc *\n                fixture1 -- test_show_fixtures_indented_doc.py:3\n                    line1\n                        indented line\n                \"\"\"\n            )\n        )\n\n    def test_show_fixtures_indented_doc_first_line_unindented(\n        self, pytester: Pytester\n    ) -> None:\n        p = pytester.makepyfile(\n            textwrap.dedent(\n                '''\\\n                import pytest\n                @pytest.fixture\n                def fixture1():\n                    \"\"\"line1\n                    line2\n                        indented line\n                    \"\"\"\n                '''\n            )\n        )\n        result = pytester.runpytest(\"--fixtures\", p)\n        result.stdout.fnmatch_lines(\n            textwrap.dedent(\n                \"\"\"\\\n                * fixtures defined from test_show_fixtures_indented_doc_first_line_unindented *\n                fixture1 -- test_show_fixtures_indented_doc_first_line_unindented.py:3\n                    line1\n                    line2\n                        indented line\n                \"\"\"\n            )\n        )\n\n    def test_show_fixtures_indented_in_class(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            textwrap.dedent(\n                '''\\\n                import pytest\n                class TestClass(object):\n                    @pytest.fixture\n                    def fixture1(self):\n                        \"\"\"line1\n                        line2\n                            indented line\n                        \"\"\"\n                '''\n            )\n        )\n        result = pytester.runpytest(\"--fixtures\", p)\n        result.stdout.fnmatch_lines(\n            textwrap.dedent(\n                \"\"\"\\\n                * fixtures defined from test_show_fixtures_indented_in_class *\n                fixture1 -- test_show_fixtures_indented_in_class.py:4\n                    line1\n                    line2\n                        indented line\n                \"\"\"\n            )\n        )\n\n    def test_show_fixtures_different_files(self, pytester: Pytester) -> None:\n        \"\"\"`--fixtures` only shows fixtures from first file (#833).\"\"\"\n        pytester.makepyfile(\n            test_a='''\n            import pytest\n\n            @pytest.fixture\n            def fix_a():\n                \"\"\"Fixture A\"\"\"\n                pass\n\n            def test_a(fix_a):\n                pass\n        '''\n        )\n        pytester.makepyfile(\n            test_b='''\n            import pytest\n\n            @pytest.fixture\n            def fix_b():\n                \"\"\"Fixture B\"\"\"\n                pass\n\n            def test_b(fix_b):\n                pass\n        '''\n        )\n        result = pytester.runpytest(\"--fixtures\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            * fixtures defined from test_a *\n            fix_a -- test_a.py:4\n                Fixture A\n\n            * fixtures defined from test_b *\n            fix_b -- test_b.py:4\n                Fixture B\n        \"\"\"\n        )\n\n    def test_show_fixtures_with_same_name(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            '''\n            import pytest\n            @pytest.fixture\n            def arg1():\n                \"\"\"Hello World in conftest.py\"\"\"\n                return \"Hello World\"\n        '''\n        )\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo(arg1):\n                assert arg1 == \"Hello World\"\n        \"\"\"\n        )\n        pytester.makepyfile(\n            '''\n            import pytest\n            @pytest.fixture\n            def arg1():\n                \"\"\"Hi from test module\"\"\"\n                return \"Hi\"\n            def test_bar(arg1):\n                assert arg1 == \"Hi\"\n        '''\n        )\n        result = pytester.runpytest(\"--fixtures\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            * fixtures defined from conftest *\n            arg1 -- conftest.py:3\n                Hello World in conftest.py\n\n            * fixtures defined from test_show_fixtures_with_same_name *\n            arg1 -- test_show_fixtures_with_same_name.py:3\n                Hi from test module\n        \"\"\"\n        )\n\n    def test_fixture_disallow_twice(self):\n        \"\"\"Test that applying @pytest.fixture twice generates an error (#2334).\"\"\"\n        with pytest.raises(ValueError):\n\n            @pytest.fixture\n            @pytest.fixture\n            def foo():\n                raise NotImplementedError()\n\n\nclass TestContextManagerFixtureFuncs:\n    def test_simple(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def arg1():\n                print(\"setup\")\n                yield 1\n                print(\"teardown\")\n            def test_1(arg1):\n                print(\"test1\", arg1)\n            def test_2(arg1):\n                print(\"test2\", arg1)\n                assert 0\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *setup*\n            *test1 1*\n            *teardown*\n            *setup*\n            *test2 1*\n            *teardown*\n        \"\"\"\n        )\n\n    def test_scoped(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"module\")\n            def arg1():\n                print(\"setup\")\n                yield 1\n                print(\"teardown\")\n            def test_1(arg1):\n                print(\"test1\", arg1)\n            def test_2(arg1):\n                print(\"test2\", arg1)\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *setup*\n            *test1 1*\n            *test2 1*\n            *teardown*\n        \"\"\"\n        )\n\n    def test_setup_exception(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"module\")\n            def arg1():\n                pytest.fail(\"setup\")\n                yield 1\n            def test_1(arg1):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *pytest.fail*setup*\n            *1 error*\n        \"\"\"\n        )\n\n    def test_teardown_exception(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"module\")\n            def arg1():\n                yield 1\n                pytest.fail(\"teardown\")\n            def test_1(arg1):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *pytest.fail*teardown*\n            *1 passed*1 error*\n        \"\"\"\n        )\n\n    def test_yields_more_than_one(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope=\"module\")\n            def arg1():\n                yield 1\n                yield 2\n            def test_1(arg1):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *fixture function*\n            *test_yields*:2*\n        \"\"\"\n        )\n\n    def test_custom_name(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(name='meow')\n            def arg1():\n                return 'mew'\n            def test_1(meow):\n                print(meow)\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        result.stdout.fnmatch_lines([\"*mew*\"])\n\n\nclass TestParameterizedSubRequest:\n    def test_call_from_fixture(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_call_from_fixture=\"\"\"\n            import pytest\n\n            @pytest.fixture(params=[0, 1, 2])\n            def fix_with_param(request):\n                return request.param\n\n            @pytest.fixture\n            def get_named_fixture(request):\n                return request.getfixturevalue('fix_with_param')\n\n            def test_foo(request, get_named_fixture):\n                pass\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"The requested fixture has no parameter defined for test:\",\n                \"    test_call_from_fixture.py::test_foo\",\n                \"Requested fixture 'fix_with_param' defined in:\",\n                \"test_call_from_fixture.py:4\",\n                \"Requested here:\",\n                \"test_call_from_fixture.py:9\",\n                \"*1 error in*\",\n            ]\n        )\n\n    def test_call_from_test(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            test_call_from_test=\"\"\"\n            import pytest\n\n            @pytest.fixture(params=[0, 1, 2])\n            def fix_with_param(request):\n                return request.param\n\n            def test_foo(request):\n                request.getfixturevalue('fix_with_param')\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"The requested fixture has no parameter defined for test:\",\n                \"    test_call_from_test.py::test_foo\",\n                \"Requested fixture 'fix_with_param' defined in:\",\n                \"test_call_from_test.py:4\",\n                \"Requested here:\",\n                \"test_call_from_test.py:8\",\n                \"*1 failed*\",\n            ]\n        )\n\n    def test_external_fixture(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(params=[0, 1, 2])\n            def fix_with_param(request):\n                return request.param\n            \"\"\"\n        )\n\n        pytester.makepyfile(\n            test_external_fixture=\"\"\"\n            def test_foo(request):\n                request.getfixturevalue('fix_with_param')\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"The requested fixture has no parameter defined for test:\",\n                \"    test_external_fixture.py::test_foo\",\n                \"\",\n                \"Requested fixture 'fix_with_param' defined in:\",\n                \"conftest.py:4\",\n                \"Requested here:\",\n                \"test_external_fixture.py:2\",\n                \"*1 failed*\",\n            ]\n        )\n\n    def test_non_relative_path(self, pytester: Pytester) -> None:\n        tests_dir = pytester.mkdir(\"tests\")\n        fixdir = pytester.mkdir(\"fixtures\")\n        fixfile = fixdir.joinpath(\"fix.py\")\n        fixfile.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                import pytest\n\n                @pytest.fixture(params=[0, 1, 2])\n                def fix_with_param(request):\n                    return request.param\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        testfile = tests_dir.joinpath(\"test_foos.py\")\n        testfile.write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                from fix import fix_with_param\n\n                def test_foo(request):\n                    request.getfixturevalue('fix_with_param')\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n\n        os.chdir(tests_dir)\n        pytester.syspathinsert(fixdir)\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"The requested fixture has no parameter defined for test:\",\n                \"    test_foos.py::test_foo\",\n                \"\",\n                \"Requested fixture 'fix_with_param' defined in:\",\n                f\"{fixfile}:4\",\n                \"Requested here:\",\n                \"test_foos.py:4\",\n                \"*1 failed*\",\n            ]\n        )\n\n        # With non-overlapping rootdir, passing tests_dir.\n        rootdir = pytester.mkdir(\"rootdir\")\n        os.chdir(rootdir)\n        result = pytester.runpytest(\"--rootdir\", rootdir, tests_dir)\n        result.stdout.fnmatch_lines(\n            [\n                \"The requested fixture has no parameter defined for test:\",\n                \"    test_foos.py::test_foo\",\n                \"\",\n                \"Requested fixture 'fix_with_param' defined in:\",\n                f\"{fixfile}:4\",\n                \"Requested here:\",\n                f\"{testfile}:4\",\n                \"*1 failed*\",\n            ]\n        )\n\n\ndef test_pytest_fixture_setup_and_post_finalizer_hook(pytester: Pytester) -> None:\n    pytester.makeconftest(\n        \"\"\"\n        def pytest_fixture_setup(fixturedef, request):\n            print('ROOT setup hook called for {0} from {1}'.format(fixturedef.argname, request.node.name))\n        def pytest_fixture_post_finalizer(fixturedef, request):\n            print('ROOT finalizer hook called for {0} from {1}'.format(fixturedef.argname, request.node.name))\n    \"\"\"\n    )\n    pytester.makepyfile(\n        **{\n            \"tests/conftest.py\": \"\"\"\n            def pytest_fixture_setup(fixturedef, request):\n                print('TESTS setup hook called for {0} from {1}'.format(fixturedef.argname, request.node.name))\n            def pytest_fixture_post_finalizer(fixturedef, request):\n                print('TESTS finalizer hook called for {0} from {1}'.format(fixturedef.argname, request.node.name))\n        \"\"\",\n            \"tests/test_hooks.py\": \"\"\"\n            import pytest\n\n            @pytest.fixture()\n            def my_fixture():\n                return 'some'\n\n            def test_func(my_fixture):\n                print('TEST test_func')\n                assert my_fixture == 'some'\n        \"\"\",\n        }\n    )\n    result = pytester.runpytest(\"-s\")\n    assert result.ret == 0\n    result.stdout.fnmatch_lines(\n        [\n            \"*TESTS setup hook called for my_fixture from test_func*\",\n            \"*ROOT setup hook called for my_fixture from test_func*\",\n            \"*TEST test_func*\",\n            \"*TESTS finalizer hook called for my_fixture from test_func*\",\n            \"*ROOT finalizer hook called for my_fixture from test_func*\",\n        ]\n    )\n\n\nclass TestScopeOrdering:\n    \"\"\"Class of tests that ensure fixtures are ordered based on their scopes (#2405)\"\"\"\n\n    @pytest.mark.parametrize(\"variant\", [\"mark\", \"autouse\"])\n    def test_func_closure_module_auto(\n        self, pytester: Pytester, variant, monkeypatch\n    ) -> None:\n        \"\"\"Semantically identical to the example posted in #2405 when ``use_mark=True``\"\"\"\n        monkeypatch.setenv(\"FIXTURE_ACTIVATION_VARIANT\", variant)\n        pytester.makepyfile(\n            \"\"\"\n            import warnings\n            import os\n            import pytest\n            VAR = 'FIXTURE_ACTIVATION_VARIANT'\n            VALID_VARS = ('autouse', 'mark')\n\n            VARIANT = os.environ.get(VAR)\n            if VARIANT is None or VARIANT not in VALID_VARS:\n                warnings.warn(\"{!r} is not  in {}, assuming autouse\".format(VARIANT, VALID_VARS) )\n                variant = 'mark'\n\n            @pytest.fixture(scope='module', autouse=VARIANT == 'autouse')\n            def m1(): pass\n\n            if VARIANT=='mark':\n                pytestmark = pytest.mark.usefixtures('m1')\n\n            @pytest.fixture(scope='function', autouse=True)\n            def f1(): pass\n\n            def test_func(m1):\n                pass\n        \"\"\"\n        )\n        items, _ = pytester.inline_genitems()\n        assert isinstance(items[0], Function)\n        request = TopRequest(items[0], _ispytest=True)\n        assert request.fixturenames == \"m1 f1\".split()\n\n    def test_func_closure_with_native_fixtures(\n        self, pytester: Pytester, monkeypatch: MonkeyPatch\n    ) -> None:\n        \"\"\"Sanity check that verifies the order returned by the closures and the actual fixture execution order:\n        The execution order may differ because of fixture inter-dependencies.\n        \"\"\"\n        monkeypatch.setattr(pytest, \"FIXTURE_ORDER\", [], raising=False)\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            FIXTURE_ORDER = pytest.FIXTURE_ORDER\n\n            @pytest.fixture(scope=\"session\")\n            def s1():\n                FIXTURE_ORDER.append('s1')\n\n            @pytest.fixture(scope=\"package\")\n            def p1():\n                FIXTURE_ORDER.append('p1')\n\n            @pytest.fixture(scope=\"module\")\n            def m1():\n                FIXTURE_ORDER.append('m1')\n\n            @pytest.fixture(scope='session')\n            def my_tmp_path_factory():\n                FIXTURE_ORDER.append('my_tmp_path_factory')\n\n            @pytest.fixture\n            def my_tmp_path(my_tmp_path_factory):\n                FIXTURE_ORDER.append('my_tmp_path')\n\n            @pytest.fixture\n            def f1(my_tmp_path):\n                FIXTURE_ORDER.append('f1')\n\n            @pytest.fixture\n            def f2():\n                FIXTURE_ORDER.append('f2')\n\n            def test_foo(f1, p1, m1, f2, s1): pass\n        \"\"\"\n        )\n        items, _ = pytester.inline_genitems()\n        assert isinstance(items[0], Function)\n        request = TopRequest(items[0], _ispytest=True)\n        # order of fixtures based on their scope and position in the parameter list\n        assert (\n            request.fixturenames\n            == \"s1 my_tmp_path_factory p1 m1 f1 f2 my_tmp_path\".split()\n        )\n        pytester.runpytest()\n        # actual fixture execution differs: dependent fixtures must be created first (\"my_tmp_path\")\n        FIXTURE_ORDER = pytest.FIXTURE_ORDER  # type: ignore[attr-defined]\n        assert FIXTURE_ORDER == \"s1 my_tmp_path_factory p1 m1 my_tmp_path f1 f2\".split()\n\n    def test_func_closure_module(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='module')\n            def m1(): pass\n\n            @pytest.fixture(scope='function')\n            def f1(): pass\n\n            def test_func(f1, m1):\n                pass\n        \"\"\"\n        )\n        items, _ = pytester.inline_genitems()\n        assert isinstance(items[0], Function)\n        request = TopRequest(items[0], _ispytest=True)\n        assert request.fixturenames == \"m1 f1\".split()\n\n    def test_func_closure_scopes_reordered(self, pytester: Pytester) -> None:\n        \"\"\"Test ensures that fixtures are ordered by scope regardless of the order of the parameters, although\n        fixtures of same scope keep the declared order\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='session')\n            def s1(): pass\n\n            @pytest.fixture(scope='module')\n            def m1(): pass\n\n            @pytest.fixture(scope='function')\n            def f1(): pass\n\n            @pytest.fixture(scope='function')\n            def f2(): pass\n\n            class Test:\n\n                @pytest.fixture(scope='class')\n                def c1(cls): pass\n\n                def test_func(self, f2, f1, c1, m1, s1):\n                    pass\n        \"\"\"\n        )\n        items, _ = pytester.inline_genitems()\n        assert isinstance(items[0], Function)\n        request = TopRequest(items[0], _ispytest=True)\n        assert request.fixturenames == \"s1 m1 c1 f2 f1\".split()\n\n    def test_func_closure_same_scope_closer_root_first(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"Auto-use fixtures of same scope are ordered by closer-to-root first\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='module', autouse=True)\n            def m_conf(): pass\n        \"\"\"\n        )\n        pytester.makepyfile(\n            **{\n                \"sub/conftest.py\": \"\"\"\n                import pytest\n\n                @pytest.fixture(scope='package', autouse=True)\n                def p_sub(): pass\n\n                @pytest.fixture(scope='module', autouse=True)\n                def m_sub(): pass\n            \"\"\",\n                \"sub/__init__.py\": \"\",\n                \"sub/test_func.py\": \"\"\"\n                import pytest\n\n                @pytest.fixture(scope='module', autouse=True)\n                def m_test(): pass\n\n                @pytest.fixture(scope='function')\n                def f1(): pass\n\n                def test_func(m_test, f1):\n                    pass\n        \"\"\",\n            }\n        )\n        items, _ = pytester.inline_genitems()\n        assert isinstance(items[0], Function)\n        request = TopRequest(items[0], _ispytest=True)\n        assert request.fixturenames == \"p_sub m_conf m_sub m_test f1\".split()\n\n    def test_func_closure_all_scopes_complex(self, pytester: Pytester) -> None:\n        \"\"\"Complex test involving all scopes and mixing autouse with normal fixtures\"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='session')\n            def s1(): pass\n\n            @pytest.fixture(scope='package', autouse=True)\n            def p1(): pass\n        \"\"\"\n        )\n        pytester.makepyfile(**{\"__init__.py\": \"\"})\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='module', autouse=True)\n            def m1(): pass\n\n            @pytest.fixture(scope='module')\n            def m2(s1): pass\n\n            @pytest.fixture(scope='function')\n            def f1(): pass\n\n            @pytest.fixture(scope='function')\n            def f2(): pass\n\n            class Test:\n\n                @pytest.fixture(scope='class', autouse=True)\n                def c1(self):\n                    pass\n\n                def test_func(self, f2, f1, m2):\n                    pass\n        \"\"\"\n        )\n        items, _ = pytester.inline_genitems()\n        assert isinstance(items[0], Function)\n        request = TopRequest(items[0], _ispytest=True)\n        assert request.fixturenames == \"s1 p1 m1 m2 c1 f2 f1\".split()\n\n    def test_parametrized_package_scope_reordering(self, pytester: Pytester) -> None:\n        \"\"\"A paramaterized package-scoped fixture correctly reorders items to\n        minimize setups & teardowns.\n\n        Regression test for #12328.\n        \"\"\"\n        pytester.makepyfile(\n            __init__=\"\",\n            conftest=\"\"\"\n                import pytest\n                @pytest.fixture(scope=\"package\", params=[\"a\", \"b\"])\n                def fix(request):\n                    return request.param\n            \"\"\",\n            test_1=\"def test1(fix): pass\",\n            test_2=\"def test2(fix): pass\",\n        )\n\n        result = pytester.runpytest(\"--setup-plan\")\n        assert result.ret == ExitCode.OK\n        result.stdout.fnmatch_lines(\n            [\n                \"  SETUP    P fix['a']\",\n                \"        test_1.py::test1[a] (fixtures used: fix, request)\",\n                \"        test_2.py::test2[a] (fixtures used: fix, request)\",\n                \"  TEARDOWN P fix['a']\",\n                \"  SETUP    P fix['b']\",\n                \"        test_1.py::test1[b] (fixtures used: fix, request)\",\n                \"        test_2.py::test2[b] (fixtures used: fix, request)\",\n                \"  TEARDOWN P fix['b']\",\n            ],\n        )\n\n    def test_multiple_packages(self, pytester: Pytester) -> None:\n        \"\"\"Complex test involving multiple package fixtures. Make sure teardowns\n        are executed in order.\n        .\n        \u2514\u2500\u2500 root\n            \u251c\u2500\u2500 __init__.py\n            \u251c\u2500\u2500 sub1\n            \u2502   \u251c\u2500\u2500 __init__.py\n            \u2502   \u251c\u2500\u2500 conftest.py\n            \u2502   \u2514\u2500\u2500 test_1.py\n            \u2514\u2500\u2500 sub2\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 conftest.py\n                \u2514\u2500\u2500 test_2.py\n        \"\"\"\n        root = pytester.mkdir(\"root\")\n        root.joinpath(\"__init__.py\").write_text(\"values = []\", encoding=\"utf-8\")\n        sub1 = root.joinpath(\"sub1\")\n        sub1.mkdir()\n        sub1.joinpath(\"__init__.py\").touch()\n        sub1.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n            from .. import values\n            @pytest.fixture(scope=\"package\")\n            def fix():\n                values.append(\"pre-sub1\")\n                yield values\n                assert values.pop() == \"pre-sub1\"\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub1.joinpath(\"test_1.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            from .. import values\n            def test_1(fix):\n                assert values == [\"pre-sub1\"]\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub2 = root.joinpath(\"sub2\")\n        sub2.mkdir()\n        sub2.joinpath(\"__init__.py\").touch()\n        sub2.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            import pytest\n            from .. import values\n            @pytest.fixture(scope=\"package\")\n            def fix():\n                values.append(\"pre-sub2\")\n                yield values\n                assert values.pop() == \"pre-sub2\"\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub2.joinpath(\"test_2.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n            from .. import values\n            def test_2(fix):\n                assert values == [\"pre-sub2\"]\n        \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_class_fixture_self_instance(self, pytester: Pytester) -> None:\n        \"\"\"Check that plugin classes which implement fixtures receive the plugin instance\n        as self (see #2270).\n        \"\"\"\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            def pytest_configure(config):\n                config.pluginmanager.register(MyPlugin())\n\n            class MyPlugin():\n                def __init__(self):\n                    self.arg = 1\n\n                @pytest.fixture(scope='function')\n                def myfix(self):\n                    assert isinstance(self, MyPlugin)\n                    return self.arg\n        \"\"\"\n        )\n\n        pytester.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def test_1(self, myfix):\n                    assert myfix == 1\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=1)\n\n\ndef test_call_fixture_function_error():\n    \"\"\"Check if an error is raised if a fixture function is called directly (#4545)\"\"\"\n\n    @pytest.fixture\n    def fix():\n        raise NotImplementedError()\n\n    with pytest.raises(pytest.fail.Exception):\n        assert fix() == 1\n\n\ndef test_fixture_double_decorator(pytester: Pytester) -> None:\n    \"\"\"Check if an error is raised when using @pytest.fixture twice.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture\n        @pytest.fixture\n        def fixt():\n            pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(errors=1)\n    result.stdout.fnmatch_lines(\n        [\n            \"E * ValueError: @pytest.fixture is being applied more than once to the same function 'fixt'\"\n        ]\n    )\n\n\ndef test_fixture_param_shadowing(pytester: Pytester) -> None:\n    \"\"\"Parametrized arguments would be shadowed if a fixture with the same name also exists (#5036)\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture(params=['a', 'b'])\n        def argroot(request):\n            return request.param\n\n        @pytest.fixture\n        def arg(argroot):\n            return argroot\n\n        # This should only be parametrized directly\n        @pytest.mark.parametrize(\"arg\", [1])\n        def test_direct(arg):\n            assert arg == 1\n\n        # This should be parametrized based on the fixtures\n        def test_normal_fixture(arg):\n            assert isinstance(arg, str)\n\n        # Indirect should still work:\n\n        @pytest.fixture\n        def arg2(request):\n            return 2*request.param\n\n        @pytest.mark.parametrize(\"arg2\", [1], indirect=True)\n        def test_indirect(arg2):\n            assert arg2 == 2\n    \"\"\"\n    )\n    # Only one test should have run\n    result = pytester.runpytest(\"-v\")\n    result.assert_outcomes(passed=4)\n    result.stdout.fnmatch_lines([\"*::test_direct[[]1[]]*\"])\n    result.stdout.fnmatch_lines([\"*::test_normal_fixture[[]a[]]*\"])\n    result.stdout.fnmatch_lines([\"*::test_normal_fixture[[]b[]]*\"])\n    result.stdout.fnmatch_lines([\"*::test_indirect[[]1[]]*\"])\n\n\ndef test_fixture_named_request(pytester: Pytester) -> None:\n    pytester.copy_example(\"fixtures/test_fixture_named_request.py\")\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"*'request' is a reserved word for fixtures, use another name:\",\n            \"  *test_fixture_named_request.py:8\",\n        ]\n    )\n\n\ndef test_indirect_fixture_does_not_break_scope(pytester: Pytester) -> None:\n    \"\"\"Ensure that fixture scope is respected when using indirect fixtures (#570)\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        instantiated  = []\n\n        @pytest.fixture(scope=\"session\")\n        def fixture_1(request):\n            instantiated.append((\"fixture_1\", request.param))\n\n\n        @pytest.fixture(scope=\"session\")\n        def fixture_2(request):\n            instantiated.append((\"fixture_2\", request.param))\n\n\n        scenarios = [\n            (\"A\", \"a1\"),\n            (\"A\", \"a2\"),\n            (\"B\", \"b1\"),\n            (\"B\", \"b2\"),\n            (\"C\", \"c1\"),\n            (\"C\", \"c2\"),\n        ]\n\n        @pytest.mark.parametrize(\n            \"fixture_1,fixture_2\", scenarios, indirect=[\"fixture_1\", \"fixture_2\"]\n        )\n        def test_create_fixtures(fixture_1, fixture_2):\n            pass\n\n\n        def test_check_fixture_instantiations():\n            assert instantiated == [\n                ('fixture_1', 'A'),\n                ('fixture_2', 'a1'),\n                ('fixture_2', 'a2'),\n                ('fixture_1', 'B'),\n                ('fixture_2', 'b1'),\n                ('fixture_2', 'b2'),\n                ('fixture_1', 'C'),\n                ('fixture_2', 'c1'),\n                ('fixture_2', 'c2'),\n            ]\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=7)\n\n\ndef test_fixture_parametrization_nparray(pytester: Pytester) -> None:\n    pytest.importorskip(\"numpy\")\n\n    pytester.makepyfile(\n        \"\"\"\n        from numpy import linspace\n        from pytest import fixture\n\n        @fixture(params=linspace(1, 10, 10))\n        def value(request):\n            return request.param\n\n        def test_bug(value):\n            assert value == value\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=10)\n\n\ndef test_fixture_arg_ordering(pytester: Pytester) -> None:\n    \"\"\"\n    This test describes how fixtures in the same scope but without explicit dependencies\n    between them are created. While users should make dependencies explicit, often\n    they rely on this order, so this test exists to catch regressions in this regard.\n    See #6540 and #6492.\n    \"\"\"\n    p1 = pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        suffixes = []\n\n        @pytest.fixture\n        def fix_1(): suffixes.append(\"fix_1\")\n        @pytest.fixture\n        def fix_2(): suffixes.append(\"fix_2\")\n        @pytest.fixture\n        def fix_3(): suffixes.append(\"fix_3\")\n        @pytest.fixture\n        def fix_4(): suffixes.append(\"fix_4\")\n        @pytest.fixture\n        def fix_5(): suffixes.append(\"fix_5\")\n\n        @pytest.fixture\n        def fix_combined(fix_1, fix_2, fix_3, fix_4, fix_5): pass\n\n        def test_suffix(fix_combined):\n            assert suffixes == [\"fix_1\", \"fix_2\", \"fix_3\", \"fix_4\", \"fix_5\"]\n        \"\"\"\n    )\n    result = pytester.runpytest(\"-vv\", str(p1))\n    assert result.ret == 0\n\n\ndef test_yield_fixture_with_no_value(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.fixture(name='custom')\n        def empty_yield():\n            if False:\n                yield\n\n        def test_fixt(custom):\n            pass\n        \"\"\"\n    )\n    expected = \"E               ValueError: custom did not yield a value\"\n    result = pytester.runpytest()\n    result.assert_outcomes(errors=1)\n    result.stdout.fnmatch_lines([expected])\n    assert result.ret == ExitCode.TESTS_FAILED\n\n\ndef test_deduplicate_names() -> None:\n    items = deduplicate_names(\"abacd\")\n    assert items == (\"a\", \"b\", \"c\", \"d\")\n    items = deduplicate_names((*items, \"g\", \"f\", \"g\", \"e\", \"b\"))\n    assert items == (\"a\", \"b\", \"c\", \"d\", \"g\", \"f\", \"e\")\n\n\ndef test_staticmethod_classmethod_fixture_instance(pytester: Pytester) -> None:\n    \"\"\"Ensure that static and class methods get and have access to a fresh\n    instance.\n\n    This also ensures `setup_method` works well with static and class methods.\n\n    Regression test for #12065.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        class Test:\n            ran_setup_method = False\n            ran_fixture = False\n\n            def setup_method(self):\n                assert not self.ran_setup_method\n                self.ran_setup_method = True\n\n            @pytest.fixture(autouse=True)\n            def fixture(self):\n                assert not self.ran_fixture\n                self.ran_fixture = True\n\n            def test_method(self):\n                assert self.ran_setup_method\n                assert self.ran_fixture\n\n            @staticmethod\n            def test_1(request):\n                assert request.instance.ran_setup_method\n                assert request.instance.ran_fixture\n\n            @classmethod\n            def test_2(cls, request):\n                assert request.instance.ran_setup_method\n                assert request.instance.ran_fixture\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.OK\n    result.assert_outcomes(passed=3)\n\n\ndef test_scoped_fixture_caching(pytester: Pytester) -> None:\n    \"\"\"Make sure setup and finalization is only run once when using scoped fixture\n    multiple times.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        from __future__ import annotations\n\n        from typing import Generator\n\n        import pytest\n        executed: list[str] = []\n        @pytest.fixture(scope=\"class\")\n        def fixture_1() -> Generator[None, None, None]:\n            executed.append(\"fix setup\")\n            yield\n            executed.append(\"fix teardown\")\n\n\n        class TestFixtureCaching:\n            def test_1(self, fixture_1: None) -> None:\n                assert executed == [\"fix setup\"]\n\n            def test_2(self, fixture_1: None) -> None:\n                assert executed == [\"fix setup\"]\n\n\n        def test_expected_setup_and_teardown() -> None:\n            assert executed == [\"fix setup\", \"fix teardown\"]\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\ndef test_scoped_fixture_caching_exception(pytester: Pytester) -> None:\n    \"\"\"Make sure setup & finalization is only run once for scoped fixture, with a cached exception.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        from __future__ import annotations\n\n        import pytest\n        executed_crash: list[str] = []\n\n\n        @pytest.fixture(scope=\"class\")\n        def fixture_crash(request: pytest.FixtureRequest) -> None:\n            executed_crash.append(\"fix_crash setup\")\n\n            def my_finalizer() -> None:\n                executed_crash.append(\"fix_crash teardown\")\n\n            request.addfinalizer(my_finalizer)\n\n            raise Exception(\"foo\")\n\n\n        class TestFixtureCachingException:\n            @pytest.mark.xfail\n            def test_crash_1(self, fixture_crash: None) -> None:\n                ...\n\n            @pytest.mark.xfail\n            def test_crash_2(self, fixture_crash: None) -> None:\n                ...\n\n\n        def test_crash_expected_setup_and_teardown() -> None:\n            assert executed_crash == [\"fix_crash setup\", \"fix_crash teardown\"]\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\ndef test_scoped_fixture_teardown_order(pytester: Pytester) -> None:\n    \"\"\"\n    Make sure teardowns happen in reverse order of setup with scoped fixtures, when\n    a later test only depends on a subset of scoped fixtures.\n\n    Regression test for https://github.com/pytest-dev/pytest/issues/1489\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        from typing import Generator\n\n        import pytest\n\n\n        last_executed = \"\"\n\n\n        @pytest.fixture(scope=\"module\")\n        def fixture_1() -> Generator[None, None, None]:\n            global last_executed\n            assert last_executed == \"\"\n            last_executed = \"fixture_1_setup\"\n            yield\n            assert last_executed == \"fixture_2_teardown\"\n            last_executed = \"fixture_1_teardown\"\n\n\n        @pytest.fixture(scope=\"module\")\n        def fixture_2() -> Generator[None, None, None]:\n            global last_executed\n            assert last_executed == \"fixture_1_setup\"\n            last_executed = \"fixture_2_setup\"\n            yield\n            assert last_executed == \"run_test\"\n            last_executed = \"fixture_2_teardown\"\n\n\n        def test_fixture_teardown_order(fixture_1: None, fixture_2: None) -> None:\n            global last_executed\n            assert last_executed == \"fixture_2_setup\"\n            last_executed = \"run_test\"\n\n\n        def test_2(fixture_1: None) -> None:\n            # This would previously queue an additional teardown of fixture_1,\n            # despite fixture_1's value being cached, which caused fixture_1 to be\n            # torn down before fixture_2 - violating the rule that teardowns should\n            # happen in reverse order of setup.\n            pass\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\ndef test_subfixture_teardown_order(pytester: Pytester) -> None:\n    \"\"\"\n    Make sure fixtures don't re-register their finalization in parent fixtures multiple\n    times, causing ordering failure in their teardowns.\n\n    Regression test for #12135\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        execution_order = []\n\n        @pytest.fixture(scope=\"class\")\n        def fixture_1():\n            ...\n\n        @pytest.fixture(scope=\"class\")\n        def fixture_2(fixture_1):\n            execution_order.append(\"setup 2\")\n            yield\n            execution_order.append(\"teardown 2\")\n\n        @pytest.fixture(scope=\"class\")\n        def fixture_3(fixture_1):\n            execution_order.append(\"setup 3\")\n            yield\n            execution_order.append(\"teardown 3\")\n\n        class TestFoo:\n            def test_initialize_fixtures(self, fixture_2, fixture_3):\n                ...\n\n            # This would previously reschedule fixture_2's finalizer in the parent fixture,\n            # causing it to be torn down before fixture 3.\n            def test_reschedule_fixture_2(self, fixture_2):\n                ...\n\n            # Force finalization directly on fixture_1\n            # Otherwise the cleanup would sequence 3&2 before 1 as normal.\n            @pytest.mark.parametrize(\"fixture_1\", [None], indirect=[\"fixture_1\"])\n            def test_finalize_fixture_1(self, fixture_1):\n                ...\n\n        def test_result():\n            assert execution_order == [\"setup 2\", \"setup 3\", \"teardown 3\", \"teardown 2\"]\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 0\n", "testing/python/metafunc.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport dataclasses\nimport itertools\nimport re\nimport sys\nimport textwrap\nfrom typing import Any\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Iterator\nfrom typing import Sequence\n\nimport hypothesis\nfrom hypothesis import strategies\n\nfrom _pytest import fixtures\nfrom _pytest import python\nfrom _pytest.compat import getfuncargnames\nfrom _pytest.compat import NOTSET\nfrom _pytest.outcomes import fail\nfrom _pytest.pytester import Pytester\nfrom _pytest.python import Function\nfrom _pytest.python import IdMaker\nfrom _pytest.scope import Scope\nimport pytest\n\n\nclass TestMetafunc:\n    def Metafunc(self, func, config=None) -> python.Metafunc:\n        # The unit tests of this class check if things work correctly\n        # on the funcarg level, so we don't need a full blown\n        # initialization.\n        class FuncFixtureInfoMock:\n            name2fixturedefs: dict[str, list[fixtures.FixtureDef[object]]] = {}\n\n            def __init__(self, names):\n                self.names_closure = names\n\n        @dataclasses.dataclass\n        class FixtureManagerMock:\n            config: Any\n\n        @dataclasses.dataclass\n        class SessionMock:\n            _fixturemanager: FixtureManagerMock\n\n        @dataclasses.dataclass\n        class DefinitionMock(python.FunctionDefinition):\n            _nodeid: str\n            obj: object\n\n        names = getfuncargnames(func)\n        fixtureinfo: Any = FuncFixtureInfoMock(names)\n        definition: Any = DefinitionMock._create(obj=func, _nodeid=\"mock::nodeid\")\n        definition._fixtureinfo = fixtureinfo\n        definition.session = SessionMock(FixtureManagerMock({}))\n        return python.Metafunc(definition, fixtureinfo, config, _ispytest=True)\n\n    def test_no_funcargs(self) -> None:\n        def function():\n            pass\n\n        metafunc = self.Metafunc(function)\n        assert not metafunc.fixturenames\n        repr(metafunc._calls)\n\n    def test_function_basic(self) -> None:\n        def func(arg1, arg2=\"qwe\"):\n            pass\n\n        metafunc = self.Metafunc(func)\n        assert len(metafunc.fixturenames) == 1\n        assert \"arg1\" in metafunc.fixturenames\n        assert metafunc.function is func\n        assert metafunc.cls is None\n\n    def test_parametrize_error(self) -> None:\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x\", [1, 2])\n        pytest.raises(ValueError, lambda: metafunc.parametrize(\"x\", [5, 6]))\n        pytest.raises(ValueError, lambda: metafunc.parametrize(\"x\", [5, 6]))\n        metafunc.parametrize(\"y\", [1, 2])\n        pytest.raises(ValueError, lambda: metafunc.parametrize(\"y\", [5, 6]))\n        pytest.raises(ValueError, lambda: metafunc.parametrize(\"y\", [5, 6]))\n\n        with pytest.raises(TypeError, match=\"^ids must be a callable or an iterable$\"):\n            metafunc.parametrize(\"y\", [5, 6], ids=42)  # type: ignore[arg-type]\n\n    def test_parametrize_error_iterator(self) -> None:\n        def func(x):\n            raise NotImplementedError()\n\n        class Exc(Exception):\n            def __repr__(self):\n                return \"Exc(from_gen)\"\n\n        def gen() -> Iterator[int | None | Exc]:\n            yield 0\n            yield None\n            yield Exc()\n\n        metafunc = self.Metafunc(func)\n        # When the input is an iterator, only len(args) are taken,\n        # so the bad Exc isn't reached.\n        metafunc.parametrize(\"x\", [1, 2], ids=gen())\n        assert [(x.params, x.id) for x in metafunc._calls] == [\n            ({\"x\": 1}, \"0\"),\n            ({\"x\": 2}, \"2\"),\n        ]\n        with pytest.raises(\n            fail.Exception,\n            match=(\n                r\"In func: ids contains unsupported value Exc\\(from_gen\\) \\(type: <class .*Exc'>\\) at index 2. \"\n                r\"Supported types are: .*\"\n            ),\n        ):\n            metafunc.parametrize(\"x\", [1, 2, 3], ids=gen())\n\n    def test_parametrize_bad_scope(self) -> None:\n        def func(x):\n            pass\n\n        metafunc = self.Metafunc(func)\n        with pytest.raises(\n            fail.Exception,\n            match=r\"parametrize\\(\\) call in func got an unexpected scope value 'doggy'\",\n        ):\n            metafunc.parametrize(\"x\", [1], scope=\"doggy\")  # type: ignore[arg-type]\n\n    def test_parametrize_request_name(self, pytester: Pytester) -> None:\n        \"\"\"Show proper error  when 'request' is used as a parameter name in parametrize (#6183)\"\"\"\n\n        def func(request):\n            raise NotImplementedError()\n\n        metafunc = self.Metafunc(func)\n        with pytest.raises(\n            fail.Exception,\n            match=r\"'request' is a reserved name and cannot be used in @pytest.mark.parametrize\",\n        ):\n            metafunc.parametrize(\"request\", [1])\n\n    def test_find_parametrized_scope(self) -> None:\n        \"\"\"Unit test for _find_parametrized_scope (#3941).\"\"\"\n        from _pytest.python import _find_parametrized_scope\n\n        @dataclasses.dataclass\n        class DummyFixtureDef:\n            _scope: Scope\n\n        fixtures_defs = cast(\n            Dict[str, Sequence[fixtures.FixtureDef[object]]],\n            dict(\n                session_fix=[DummyFixtureDef(Scope.Session)],\n                package_fix=[DummyFixtureDef(Scope.Package)],\n                module_fix=[DummyFixtureDef(Scope.Module)],\n                class_fix=[DummyFixtureDef(Scope.Class)],\n                func_fix=[DummyFixtureDef(Scope.Function)],\n                mixed_fix=[DummyFixtureDef(Scope.Module), DummyFixtureDef(Scope.Class)],\n            ),\n        )\n\n        # use arguments to determine narrow scope; the cause of the bug is that it would look on all\n        # fixture defs given to the method\n        def find_scope(argnames, indirect):\n            return _find_parametrized_scope(argnames, fixtures_defs, indirect=indirect)\n\n        assert find_scope([\"func_fix\"], indirect=True) == Scope.Function\n        assert find_scope([\"class_fix\"], indirect=True) == Scope.Class\n        assert find_scope([\"module_fix\"], indirect=True) == Scope.Module\n        assert find_scope([\"package_fix\"], indirect=True) == Scope.Package\n        assert find_scope([\"session_fix\"], indirect=True) == Scope.Session\n\n        assert find_scope([\"class_fix\", \"func_fix\"], indirect=True) == Scope.Function\n        assert find_scope([\"func_fix\", \"session_fix\"], indirect=True) == Scope.Function\n        assert find_scope([\"session_fix\", \"class_fix\"], indirect=True) == Scope.Class\n        assert (\n            find_scope([\"package_fix\", \"session_fix\"], indirect=True) == Scope.Package\n        )\n        assert find_scope([\"module_fix\", \"session_fix\"], indirect=True) == Scope.Module\n\n        # when indirect is False or is not for all scopes, always use function\n        assert (\n            find_scope([\"session_fix\", \"module_fix\"], indirect=False) == Scope.Function\n        )\n        assert (\n            find_scope([\"session_fix\", \"module_fix\"], indirect=[\"module_fix\"])\n            == Scope.Function\n        )\n        assert (\n            find_scope(\n                [\"session_fix\", \"module_fix\"], indirect=[\"session_fix\", \"module_fix\"]\n            )\n            == Scope.Module\n        )\n        assert find_scope([\"mixed_fix\"], indirect=True) == Scope.Class\n\n    def test_parametrize_and_id(self) -> None:\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n\n        metafunc.parametrize(\"x\", [1, 2], ids=[\"basic\", \"advanced\"])\n        metafunc.parametrize(\"y\", [\"abc\", \"def\"])\n        ids = [x.id for x in metafunc._calls]\n        assert ids == [\"basic-abc\", \"basic-def\", \"advanced-abc\", \"advanced-def\"]\n\n    def test_parametrize_and_id_unicode(self) -> None:\n        \"\"\"Allow unicode strings for \"ids\" parameter in Python 2 (##1905)\"\"\"\n\n        def func(x):\n            pass\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x\", [1, 2], ids=[\"basic\", \"advanced\"])\n        ids = [x.id for x in metafunc._calls]\n        assert ids == [\"basic\", \"advanced\"]\n\n    def test_parametrize_with_wrong_number_of_ids(self) -> None:\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n\n        with pytest.raises(fail.Exception):\n            metafunc.parametrize(\"x\", [1, 2], ids=[\"basic\"])\n\n        with pytest.raises(fail.Exception):\n            metafunc.parametrize(\n                (\"x\", \"y\"), [(\"abc\", \"def\"), (\"ghi\", \"jkl\")], ids=[\"one\"]\n            )\n\n    def test_parametrize_ids_iterator_without_mark(self) -> None:\n        def func(x, y):\n            pass\n\n        it = itertools.count()\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x\", [1, 2], ids=it)\n        metafunc.parametrize(\"y\", [3, 4], ids=it)\n        ids = [x.id for x in metafunc._calls]\n        assert ids == [\"0-2\", \"0-3\", \"1-2\", \"1-3\"]\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x\", [1, 2], ids=it)\n        metafunc.parametrize(\"y\", [3, 4], ids=it)\n        ids = [x.id for x in metafunc._calls]\n        assert ids == [\"4-6\", \"4-7\", \"5-6\", \"5-7\"]\n\n    def test_parametrize_empty_list(self) -> None:\n        \"\"\"#510\"\"\"\n\n        def func(y):\n            pass\n\n        class MockConfig:\n            def getini(self, name):\n                return \"\"\n\n            @property\n            def hook(self):\n                return self\n\n            def pytest_make_parametrize_id(self, **kw):\n                pass\n\n        metafunc = self.Metafunc(func, MockConfig())\n        metafunc.parametrize(\"y\", [])\n        assert \"skip\" == metafunc._calls[0].marks[0].name\n\n    def test_parametrize_with_userobjects(self) -> None:\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n\n        class A:\n            pass\n\n        metafunc.parametrize(\"x\", [A(), A()])\n        metafunc.parametrize(\"y\", list(\"ab\"))\n        assert metafunc._calls[0].id == \"x0-a\"\n        assert metafunc._calls[1].id == \"x0-b\"\n        assert metafunc._calls[2].id == \"x1-a\"\n        assert metafunc._calls[3].id == \"x1-b\"\n\n    @hypothesis.given(strategies.text() | strategies.binary())\n    @hypothesis.settings(\n        deadline=400.0\n    )  # very close to std deadline and CI boxes are not reliable in CPU power\n    def test_idval_hypothesis(self, value) -> None:\n        escaped = IdMaker([], [], None, None, None, None, None)._idval(value, \"a\", 6)\n        assert isinstance(escaped, str)\n        escaped.encode(\"ascii\")\n\n    def test_unicode_idval(self) -> None:\n        \"\"\"Test that Unicode strings outside the ASCII character set get\n        escaped, using byte escapes if they're in that range or unicode\n        escapes if they're not.\n\n        \"\"\"\n        values = [\n            (\"\", r\"\"),\n            (\"ascii\", r\"ascii\"),\n            (\"a\u00e7\u00e3o\", r\"a\\xe7\\xe3o\"),\n            (\"jos\u00e9@blah.com\", r\"jos\\xe9@blah.com\"),\n            (\n                r\"\u03b4\u03bf\u03ba.\u03b9\u03bc\u03ae@\u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1.\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae\",\n                r\"\\u03b4\\u03bf\\u03ba.\\u03b9\\u03bc\\u03ae@\\u03c0\\u03b1\\u03c1\\u03ac\\u03b4\\u03b5\\u03b9\\u03b3\"\n                r\"\\u03bc\\u03b1.\\u03b4\\u03bf\\u03ba\\u03b9\\u03bc\\u03ae\",\n            ),\n        ]\n        for val, expected in values:\n            assert (\n                IdMaker([], [], None, None, None, None, None)._idval(val, \"a\", 6)\n                == expected\n            )\n\n    def test_unicode_idval_with_config(self) -> None:\n        \"\"\"Unit test for expected behavior to obtain ids with\n        disable_test_id_escaping_and_forfeit_all_rights_to_community_support\n        option (#5294).\"\"\"\n\n        class MockConfig:\n            def __init__(self, config):\n                self.config = config\n\n            @property\n            def hook(self):\n                return self\n\n            def pytest_make_parametrize_id(self, **kw):\n                pass\n\n            def getini(self, name):\n                return self.config[name]\n\n        option = \"disable_test_id_escaping_and_forfeit_all_rights_to_community_support\"\n\n        values: list[tuple[str, Any, str]] = [\n            (\"a\u00e7\u00e3o\", MockConfig({option: True}), \"a\u00e7\u00e3o\"),\n            (\"a\u00e7\u00e3o\", MockConfig({option: False}), \"a\\\\xe7\\\\xe3o\"),\n        ]\n        for val, config, expected in values:\n            actual = IdMaker([], [], None, None, config, None, None)._idval(val, \"a\", 6)\n            assert actual == expected\n\n    def test_bytes_idval(self) -> None:\n        \"\"\"Unit test for the expected behavior to obtain ids for parametrized\n        bytes values: bytes objects are always escaped using \"binary escape\".\"\"\"\n        values = [\n            (b\"\", r\"\"),\n            (b\"\\xc3\\xb4\\xff\\xe4\", r\"\\xc3\\xb4\\xff\\xe4\"),\n            (b\"ascii\", r\"ascii\"),\n            (\"\u03b1\u03c1\u03ac\".encode(), r\"\\xce\\xb1\\xcf\\x81\\xce\\xac\"),\n        ]\n        for val, expected in values:\n            assert (\n                IdMaker([], [], None, None, None, None, None)._idval(val, \"a\", 6)\n                == expected\n            )\n\n    def test_class_or_function_idval(self) -> None:\n        \"\"\"Unit test for the expected behavior to obtain ids for parametrized\n        values that are classes or functions: their __name__.\"\"\"\n\n        class TestClass:\n            pass\n\n        def test_function():\n            pass\n\n        values = [(TestClass, \"TestClass\"), (test_function, \"test_function\")]\n        for val, expected in values:\n            assert (\n                IdMaker([], [], None, None, None, None, None)._idval(val, \"a\", 6)\n                == expected\n            )\n\n    def test_notset_idval(self) -> None:\n        \"\"\"Test that a NOTSET value (used by an empty parameterset) generates\n        a proper ID.\n\n        Regression test for #7686.\n        \"\"\"\n        assert (\n            IdMaker([], [], None, None, None, None, None)._idval(NOTSET, \"a\", 0) == \"a0\"\n        )\n\n    def test_idmaker_autoname(self) -> None:\n        \"\"\"#250\"\"\"\n        result = IdMaker(\n            (\"a\", \"b\"),\n            [pytest.param(\"string\", 1.0), pytest.param(\"st-ring\", 2.0)],\n            None,\n            None,\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"string-1.0\", \"st-ring-2.0\"]\n\n        result = IdMaker(\n            (\"a\", \"b\"),\n            [pytest.param(object(), 1.0), pytest.param(object(), object())],\n            None,\n            None,\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"a0-1.0\", \"a1-b1\"]\n        # unicode mixing, issue250\n        result = IdMaker(\n            (\"a\", \"b\"), [pytest.param({}, b\"\\xc3\\xb4\")], None, None, None, None, None\n        ).make_unique_parameterset_ids()\n        assert result == [\"a0-\\\\xc3\\\\xb4\"]\n\n    def test_idmaker_with_bytes_regex(self) -> None:\n        result = IdMaker(\n            (\"a\"), [pytest.param(re.compile(b\"foo\"), 1.0)], None, None, None, None, None\n        ).make_unique_parameterset_ids()\n        assert result == [\"foo\"]\n\n    def test_idmaker_native_strings(self) -> None:\n        result = IdMaker(\n            (\"a\", \"b\"),\n            [\n                pytest.param(1.0, -1.1),\n                pytest.param(2, -202),\n                pytest.param(\"three\", \"three hundred\"),\n                pytest.param(True, False),\n                pytest.param(None, None),\n                pytest.param(re.compile(\"foo\"), re.compile(\"bar\")),\n                pytest.param(str, int),\n                pytest.param(list(\"six\"), [66, 66]),\n                pytest.param({7}, set(\"seven\")),\n                pytest.param(tuple(\"eight\"), (8, -8, 8)),\n                pytest.param(b\"\\xc3\\xb4\", b\"name\"),\n                pytest.param(b\"\\xc3\\xb4\", \"other\"),\n                pytest.param(1.0j, -2.0j),\n            ],\n            None,\n            None,\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\n            \"1.0--1.1\",\n            \"2--202\",\n            \"three-three hundred\",\n            \"True-False\",\n            \"None-None\",\n            \"foo-bar\",\n            \"str-int\",\n            \"a7-b7\",\n            \"a8-b8\",\n            \"a9-b9\",\n            \"\\\\xc3\\\\xb4-name\",\n            \"\\\\xc3\\\\xb4-other\",\n            \"1j-(-0-2j)\",\n        ]\n\n    def test_idmaker_non_printable_characters(self) -> None:\n        result = IdMaker(\n            (\"s\", \"n\"),\n            [\n                pytest.param(\"\\x00\", 1),\n                pytest.param(\"\\x05\", 2),\n                pytest.param(b\"\\x00\", 3),\n                pytest.param(b\"\\x05\", 4),\n                pytest.param(\"\\t\", 5),\n                pytest.param(b\"\\t\", 6),\n            ],\n            None,\n            None,\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"\\\\x00-1\", \"\\\\x05-2\", \"\\\\x00-3\", \"\\\\x05-4\", \"\\\\t-5\", \"\\\\t-6\"]\n\n    def test_idmaker_manual_ids_must_be_printable(self) -> None:\n        result = IdMaker(\n            (\"s\",),\n            [\n                pytest.param(\"x00\", id=\"hello \\x00\"),\n                pytest.param(\"x05\", id=\"hello \\x05\"),\n            ],\n            None,\n            None,\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"hello \\\\x00\", \"hello \\\\x05\"]\n\n    def test_idmaker_enum(self) -> None:\n        enum = pytest.importorskip(\"enum\")\n        e = enum.Enum(\"Foo\", \"one, two\")\n        result = IdMaker(\n            (\"a\", \"b\"), [pytest.param(e.one, e.two)], None, None, None, None, None\n        ).make_unique_parameterset_ids()\n        assert result == [\"Foo.one-Foo.two\"]\n\n    def test_idmaker_idfn(self) -> None:\n        \"\"\"#351\"\"\"\n\n        def ids(val: object) -> str | None:\n            if isinstance(val, Exception):\n                return repr(val)\n            return None\n\n        result = IdMaker(\n            (\"a\", \"b\"),\n            [\n                pytest.param(10.0, IndexError()),\n                pytest.param(20, KeyError()),\n                pytest.param(\"three\", [1, 2, 3]),\n            ],\n            ids,\n            None,\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"10.0-IndexError()\", \"20-KeyError()\", \"three-b2\"]\n\n    def test_idmaker_idfn_unique_names(self) -> None:\n        \"\"\"#351\"\"\"\n\n        def ids(val: object) -> str:\n            return \"a\"\n\n        result = IdMaker(\n            (\"a\", \"b\"),\n            [\n                pytest.param(10.0, IndexError()),\n                pytest.param(20, KeyError()),\n                pytest.param(\"three\", [1, 2, 3]),\n            ],\n            ids,\n            None,\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"a-a0\", \"a-a1\", \"a-a2\"]\n\n    def test_idmaker_with_idfn_and_config(self) -> None:\n        \"\"\"Unit test for expected behavior to create ids with idfn and\n        disable_test_id_escaping_and_forfeit_all_rights_to_community_support\n        option (#5294).\n        \"\"\"\n\n        class MockConfig:\n            def __init__(self, config):\n                self.config = config\n\n            @property\n            def hook(self):\n                return self\n\n            def pytest_make_parametrize_id(self, **kw):\n                pass\n\n            def getini(self, name):\n                return self.config[name]\n\n        option = \"disable_test_id_escaping_and_forfeit_all_rights_to_community_support\"\n\n        values: list[tuple[Any, str]] = [\n            (MockConfig({option: True}), \"a\u00e7\u00e3o\"),\n            (MockConfig({option: False}), \"a\\\\xe7\\\\xe3o\"),\n        ]\n        for config, expected in values:\n            result = IdMaker(\n                (\"a\",),\n                [pytest.param(\"string\")],\n                lambda _: \"a\u00e7\u00e3o\",\n                None,\n                config,\n                None,\n                None,\n            ).make_unique_parameterset_ids()\n            assert result == [expected]\n\n    def test_idmaker_with_ids_and_config(self) -> None:\n        \"\"\"Unit test for expected behavior to create ids with ids and\n        disable_test_id_escaping_and_forfeit_all_rights_to_community_support\n        option (#5294).\n        \"\"\"\n\n        class MockConfig:\n            def __init__(self, config):\n                self.config = config\n\n            @property\n            def hook(self):\n                return self\n\n            def pytest_make_parametrize_id(self, **kw):\n                pass\n\n            def getini(self, name):\n                return self.config[name]\n\n        option = \"disable_test_id_escaping_and_forfeit_all_rights_to_community_support\"\n\n        values: list[tuple[Any, str]] = [\n            (MockConfig({option: True}), \"a\u00e7\u00e3o\"),\n            (MockConfig({option: False}), \"a\\\\xe7\\\\xe3o\"),\n        ]\n        for config, expected in values:\n            result = IdMaker(\n                (\"a\",), [pytest.param(\"string\")], None, [\"a\u00e7\u00e3o\"], config, None, None\n            ).make_unique_parameterset_ids()\n            assert result == [expected]\n\n    def test_idmaker_duplicated_empty_str(self) -> None:\n        \"\"\"Regression test for empty strings parametrized more than once (#11563).\"\"\"\n        result = IdMaker(\n            (\"a\",), [pytest.param(\"\"), pytest.param(\"\")], None, None, None, None, None\n        ).make_unique_parameterset_ids()\n        assert result == [\"0\", \"1\"]\n\n    def test_parametrize_ids_exception(self, pytester: Pytester) -> None:\n        \"\"\"\n        :param pytester: the instance of Pytester class, a temporary\n        test directory.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n                import pytest\n\n                def ids(arg):\n                    raise Exception(\"bad ids\")\n\n                @pytest.mark.parametrize(\"arg\", [\"a\", \"b\"], ids=ids)\n                def test_foo(arg):\n                    pass\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"*Exception: bad ids\",\n                \"*test_foo: error raised while trying to determine id of parameter 'arg' at position 0\",\n            ]\n        )\n\n    def test_parametrize_ids_returns_non_string(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\\\n            import pytest\n\n            def ids(d):\n                return d\n\n            @pytest.mark.parametrize(\"arg\", ({1: 2}, {3, 4}), ids=ids)\n            def test(arg):\n                assert arg\n\n            @pytest.mark.parametrize(\"arg\", (1, 2.0, True), ids=ids)\n            def test_int(arg):\n                assert arg\n            \"\"\"\n        )\n        result = pytester.runpytest(\"-vv\", \"-s\")\n        result.stdout.fnmatch_lines(\n            [\n                \"test_parametrize_ids_returns_non_string.py::test[arg0] PASSED\",\n                \"test_parametrize_ids_returns_non_string.py::test[arg1] PASSED\",\n                \"test_parametrize_ids_returns_non_string.py::test_int[1] PASSED\",\n                \"test_parametrize_ids_returns_non_string.py::test_int[2.0] PASSED\",\n                \"test_parametrize_ids_returns_non_string.py::test_int[True] PASSED\",\n            ]\n        )\n\n    def test_idmaker_with_ids(self) -> None:\n        result = IdMaker(\n            (\"a\", \"b\"),\n            [pytest.param(1, 2), pytest.param(3, 4)],\n            None,\n            [\"a\", None],\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"a\", \"3-4\"]\n\n    def test_idmaker_with_paramset_id(self) -> None:\n        result = IdMaker(\n            (\"a\", \"b\"),\n            [pytest.param(1, 2, id=\"me\"), pytest.param(3, 4, id=\"you\")],\n            None,\n            [\"a\", None],\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"me\", \"you\"]\n\n    def test_idmaker_with_ids_unique_names(self) -> None:\n        result = IdMaker(\n            (\"a\"),\n            list(map(pytest.param, [1, 2, 3, 4, 5])),\n            None,\n            [\"a\", \"a\", \"b\", \"c\", \"b\"],\n            None,\n            None,\n            None,\n        ).make_unique_parameterset_ids()\n        assert result == [\"a0\", \"a1\", \"b0\", \"c\", \"b1\"]\n\n    def test_parametrize_indirect(self) -> None:\n        \"\"\"#714\"\"\"\n\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x\", [1], indirect=True)\n        metafunc.parametrize(\"y\", [2, 3], indirect=True)\n        assert len(metafunc._calls) == 2\n        assert metafunc._calls[0].params == dict(x=1, y=2)\n        assert metafunc._calls[1].params == dict(x=1, y=3)\n\n    def test_parametrize_indirect_list(self) -> None:\n        \"\"\"#714\"\"\"\n\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x, y\", [(\"a\", \"b\")], indirect=[\"x\"])\n        assert metafunc._calls[0].params == dict(x=\"a\", y=\"b\")\n        # Since `y` is a direct parameter, its pseudo-fixture would\n        # be registered.\n        assert list(metafunc._arg2fixturedefs.keys()) == [\"y\"]\n\n    def test_parametrize_indirect_list_all(self) -> None:\n        \"\"\"#714\"\"\"\n\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x, y\", [(\"a\", \"b\")], indirect=[\"x\", \"y\"])\n        assert metafunc._calls[0].params == dict(x=\"a\", y=\"b\")\n        assert list(metafunc._arg2fixturedefs.keys()) == []\n\n    def test_parametrize_indirect_list_empty(self) -> None:\n        \"\"\"#714\"\"\"\n\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n        metafunc.parametrize(\"x, y\", [(\"a\", \"b\")], indirect=[])\n        assert metafunc._calls[0].params == dict(x=\"a\", y=\"b\")\n        assert list(metafunc._arg2fixturedefs.keys()) == [\"x\", \"y\"]\n\n    def test_parametrize_indirect_wrong_type(self) -> None:\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n        with pytest.raises(\n            fail.Exception,\n            match=\"In func: expected Sequence or boolean for indirect, got dict\",\n        ):\n            metafunc.parametrize(\"x, y\", [(\"a\", \"b\")], indirect={})  # type: ignore[arg-type]\n\n    def test_parametrize_indirect_list_functional(self, pytester: Pytester) -> None:\n        \"\"\"\n        #714\n        Test parametrization with 'indirect' parameter applied on\n        particular arguments. As y is direct, its value should\n        be used directly rather than being passed to the fixture y.\n\n        :param pytester: the instance of Pytester class, a temporary\n        test directory.\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope='function')\n            def x(request):\n                return request.param * 3\n            @pytest.fixture(scope='function')\n            def y(request):\n                return request.param * 2\n            @pytest.mark.parametrize('x, y', [('a', 'b')], indirect=['x'])\n            def test_simple(x,y):\n                assert len(x) == 3\n                assert len(y) == 1\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines([\"*test_simple*a-b*\", \"*1 passed*\"])\n\n    def test_parametrize_indirect_list_error(self) -> None:\n        \"\"\"#714\"\"\"\n\n        def func(x, y):\n            pass\n\n        metafunc = self.Metafunc(func)\n        with pytest.raises(fail.Exception):\n            metafunc.parametrize(\"x, y\", [(\"a\", \"b\")], indirect=[\"x\", \"z\"])\n\n    def test_parametrize_uses_no_fixture_error_indirect_false(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"The 'uses no fixture' error tells the user at collection time\n        that the parametrize data they've set up doesn't correspond to the\n        fixtures in their test function, rather than silently ignoring this\n        and letting the test potentially pass.\n\n        #714\n        \"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize('x, y', [('a', 'b')], indirect=False)\n            def test_simple(x):\n                assert len(x) == 3\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*uses no argument 'y'*\"])\n\n    def test_parametrize_uses_no_fixture_error_indirect_true(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"#714\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope='function')\n            def x(request):\n                return request.param * 3\n            @pytest.fixture(scope='function')\n            def y(request):\n                return request.param * 2\n\n            @pytest.mark.parametrize('x, y', [('a', 'b')], indirect=True)\n            def test_simple(x):\n                assert len(x) == 3\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*uses no fixture 'y'*\"])\n\n    def test_parametrize_indirect_uses_no_fixture_error_indirect_string(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"#714\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope='function')\n            def x(request):\n                return request.param * 3\n\n            @pytest.mark.parametrize('x, y', [('a', 'b')], indirect='y')\n            def test_simple(x):\n                assert len(x) == 3\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*uses no fixture 'y'*\"])\n\n    def test_parametrize_indirect_uses_no_fixture_error_indirect_list(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"#714\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope='function')\n            def x(request):\n                return request.param * 3\n\n            @pytest.mark.parametrize('x, y', [('a', 'b')], indirect=['y'])\n            def test_simple(x):\n                assert len(x) == 3\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*uses no fixture 'y'*\"])\n\n    def test_parametrize_argument_not_in_indirect_list(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"#714\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture(scope='function')\n            def x(request):\n                return request.param * 3\n\n            @pytest.mark.parametrize('x, y', [('a', 'b')], indirect=['x'])\n            def test_simple(x):\n                assert len(x) == 3\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines([\"*uses no argument 'y'*\"])\n\n    def test_parametrize_gives_indicative_error_on_function_with_default_argument(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize('x, y', [('a', 'b')])\n            def test_simple(x, y=1):\n                assert len(x) == 1\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines(\n            [\"*already takes an argument 'y' with a default value\"]\n        )\n\n    def test_parametrize_functional(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize('x', [1,2], indirect=True)\n                metafunc.parametrize('y', [2])\n            @pytest.fixture\n            def x(request):\n                return request.param * 10\n\n            def test_simple(x,y):\n                assert x in (10,20)\n                assert y == 2\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            [\"*test_simple*1-2*\", \"*test_simple*2-2*\", \"*2 passed*\"]\n        )\n\n    def test_parametrize_onearg(self) -> None:\n        metafunc = self.Metafunc(lambda x: None)\n        metafunc.parametrize(\"x\", [1, 2])\n        assert len(metafunc._calls) == 2\n        assert metafunc._calls[0].params == dict(x=1)\n        assert metafunc._calls[0].id == \"1\"\n        assert metafunc._calls[1].params == dict(x=2)\n        assert metafunc._calls[1].id == \"2\"\n\n    def test_parametrize_onearg_indirect(self) -> None:\n        metafunc = self.Metafunc(lambda x: None)\n        metafunc.parametrize(\"x\", [1, 2], indirect=True)\n        assert metafunc._calls[0].params == dict(x=1)\n        assert metafunc._calls[0].id == \"1\"\n        assert metafunc._calls[1].params == dict(x=2)\n        assert metafunc._calls[1].id == \"2\"\n\n    def test_parametrize_twoargs(self) -> None:\n        metafunc = self.Metafunc(lambda x, y: None)\n        metafunc.parametrize((\"x\", \"y\"), [(1, 2), (3, 4)])\n        assert len(metafunc._calls) == 2\n        assert metafunc._calls[0].params == dict(x=1, y=2)\n        assert metafunc._calls[0].id == \"1-2\"\n        assert metafunc._calls[1].params == dict(x=3, y=4)\n        assert metafunc._calls[1].id == \"3-4\"\n\n    def test_high_scoped_parametrize_reordering(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"arg2\", [3, 4])\n            @pytest.mark.parametrize(\"arg1\", [0, 1, 2], scope='module')\n            def test1(arg1, arg2):\n                pass\n\n            def test2():\n                pass\n\n            @pytest.mark.parametrize(\"arg1\", [0, 1, 2], scope='module')\n            def test3(arg1):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.re_match_lines(\n            [\n                r\"    <Function test1\\[0-3\\]>\",\n                r\"    <Function test1\\[0-4\\]>\",\n                r\"    <Function test3\\[0\\]>\",\n                r\"    <Function test1\\[1-3\\]>\",\n                r\"    <Function test1\\[1-4\\]>\",\n                r\"    <Function test3\\[1\\]>\",\n                r\"    <Function test1\\[2-3\\]>\",\n                r\"    <Function test1\\[2-4\\]>\",\n                r\"    <Function test3\\[2\\]>\",\n                r\"    <Function test2>\",\n            ]\n        )\n\n    def test_parametrize_multiple_times(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            pytestmark = pytest.mark.parametrize(\"x\", [1,2])\n            def test_func(x):\n                assert 0, x\n            class TestClass(object):\n                pytestmark = pytest.mark.parametrize(\"y\", [3,4])\n                def test_meth(self, x, y):\n                    assert 0, x\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 1\n        result.assert_outcomes(failed=6)\n\n    def test_parametrize_CSV(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize(\"x, y,\", [(1,2), (2,3)])\n            def test_func(x, y):\n                assert x+1 == y\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    def test_parametrize_class_scenarios(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n        # same as doc/en/example/parametrize scenario example\n        def pytest_generate_tests(metafunc):\n            idlist = []\n            argvalues = []\n            for scenario in metafunc.cls.scenarios:\n                idlist.append(scenario[0])\n                items = scenario[1].items()\n                argnames = [x[0] for x in items]\n                argvalues.append(([x[1] for x in items]))\n            metafunc.parametrize(argnames, argvalues, ids=idlist, scope=\"class\")\n\n        class Test(object):\n               scenarios = [['1', {'arg': {1: 2}, \"arg2\": \"value2\"}],\n                            ['2', {'arg':'value2', \"arg2\": \"value2\"}]]\n\n               def test_1(self, arg, arg2):\n                  pass\n\n               def test_2(self, arg2, arg):\n                  pass\n\n               def test_3(self, arg, arg2):\n                  pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *test_1*1*\n            *test_2*1*\n            *test_3*1*\n            *test_1*2*\n            *test_2*2*\n            *test_3*2*\n            *6 passed*\n        \"\"\"\n        )\n\n\nclass TestMetafuncFunctional:\n    def test_attributes(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            # assumes that generate/provide runs in the same process\n            import sys, pytest\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize('metafunc', [metafunc])\n\n            @pytest.fixture\n            def metafunc(request):\n                return request.param\n\n            def test_function(metafunc, pytestconfig):\n                assert metafunc.config == pytestconfig\n                assert metafunc.module.__name__ == __name__\n                assert metafunc.function == test_function\n                assert metafunc.cls is None\n\n            class TestClass(object):\n                def test_method(self, metafunc, pytestconfig):\n                    assert metafunc.config == pytestconfig\n                    assert metafunc.module.__name__ == __name__\n                    unbound = TestClass.test_method\n                    assert metafunc.function == unbound\n                    assert metafunc.cls == TestClass\n        \"\"\"\n        )\n        result = pytester.runpytest(p, \"-v\")\n        result.assert_outcomes(passed=2)\n\n    def test_two_functions(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize('arg1', [10, 20], ids=['0', '1'])\n\n            def test_func1(arg1):\n                assert arg1 == 10\n\n            def test_func2(arg1):\n                assert arg1 in (10, 20)\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\", p)\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_func1*0*PASS*\",\n                \"*test_func1*1*FAIL*\",\n                \"*test_func2*PASS*\",\n                \"*test_func2*PASS*\",\n                \"*1 failed, 3 passed*\",\n            ]\n        )\n\n    def test_noself_in_method(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                assert 'xyz' not in metafunc.fixturenames\n\n            class TestHello(object):\n                def test_hello(xyz):\n                    pass\n        \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.assert_outcomes(passed=1)\n\n    def test_generate_tests_in_class(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def pytest_generate_tests(self, metafunc):\n                    metafunc.parametrize('hello', ['world'], ids=['hellow'])\n\n                def test_myfunc(self, hello):\n                    assert hello == \"world\"\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\", p)\n        result.stdout.fnmatch_lines([\"*test_myfunc*hello*PASS*\", \"*1 passed*\"])\n\n    def test_two_functions_not_same_instance(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize('arg1', [10, 20], ids=[\"0\", \"1\"])\n\n            class TestClass(object):\n                def test_func(self, arg1):\n                    assert not hasattr(self, 'x')\n                    self.x = 1\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\", p)\n        result.stdout.fnmatch_lines(\n            [\"*test_func*0*PASS*\", \"*test_func*1*PASS*\", \"*2 pass*\"]\n        )\n\n    def test_issue28_setup_method_in_generate_tests(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize('arg1', [1])\n\n            class TestClass(object):\n                def test_method(self, arg1):\n                    assert arg1 == self.val\n                def setup_method(self, func):\n                    self.val = 1\n            \"\"\"\n        )\n        result = pytester.runpytest(p)\n        result.assert_outcomes(passed=1)\n\n    def test_parametrize_functional2(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize(\"arg1\", [1,2])\n                metafunc.parametrize(\"arg2\", [4,5])\n            def test_hello(arg1, arg2):\n                assert 0, (arg1, arg2)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\"*(1, 4)*\", \"*(1, 5)*\", \"*(2, 4)*\", \"*(2, 5)*\", \"*4 failed*\"]\n        )\n\n    def test_parametrize_and_inner_getfixturevalue(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize(\"arg1\", [1], indirect=True)\n                metafunc.parametrize(\"arg2\", [10], indirect=True)\n\n            import pytest\n            @pytest.fixture\n            def arg1(request):\n                x = request.getfixturevalue(\"arg2\")\n                return x + request.param\n\n            @pytest.fixture\n            def arg2(request):\n                return request.param\n\n            def test_func1(arg1, arg2):\n                assert arg1 == 11\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\", p)\n        result.stdout.fnmatch_lines([\"*test_func1*1*PASS*\", \"*1 passed*\"])\n\n    def test_parametrize_on_setup_arg(self, pytester: Pytester) -> None:\n        p = pytester.makepyfile(\n            \"\"\"\n            def pytest_generate_tests(metafunc):\n                assert \"arg1\" in metafunc.fixturenames\n                metafunc.parametrize(\"arg1\", [1], indirect=True)\n\n            import pytest\n            @pytest.fixture\n            def arg1(request):\n                return request.param\n\n            @pytest.fixture\n            def arg2(request, arg1):\n                return 10 * arg1\n\n            def test_func(arg2):\n                assert arg2 == 10\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\", p)\n        result.stdout.fnmatch_lines([\"*test_func*1*PASS*\", \"*1 passed*\"])\n\n    def test_parametrize_with_ids(self, pytester: Pytester) -> None:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            console_output_style=classic\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize((\"a\", \"b\"), [(1,1), (1,2)],\n                                     ids=[\"basic\", \"advanced\"])\n\n            def test_function(a, b):\n                assert a == b\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        assert result.ret == 1\n        result.stdout.fnmatch_lines_random(\n            [\"*test_function*basic*PASSED\", \"*test_function*advanced*FAILED\"]\n        )\n\n    def test_parametrize_without_ids(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize((\"a\", \"b\"),\n                                     [(1,object()), (1.3,object())])\n\n            def test_function(a, b):\n                assert 1\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            \"\"\"\n            *test_function*1-b0*\n            *test_function*1.3-b1*\n        \"\"\"\n        )\n\n    def test_parametrize_with_None_in_ids(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize((\"a\", \"b\"), [(1,1), (1,1), (1,2)],\n                                     ids=[\"basic\", None, \"advanced\"])\n\n            def test_function(a, b):\n                assert a == b\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        assert result.ret == 1\n        result.stdout.fnmatch_lines_random(\n            [\n                \"*test_function*basic*PASSED*\",\n                \"*test_function*1-1*PASSED*\",\n                \"*test_function*advanced*FAILED*\",\n            ]\n        )\n\n    def test_fixture_parametrized_empty_ids(self, pytester: Pytester) -> None:\n        \"\"\"Fixtures parametrized with empty ids cause an internal error (#1849).\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"module\", ids=[], params=[])\n            def temp(request):\n               return request.param\n\n            def test_temp(temp):\n                 pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 1 skipped *\"])\n\n    def test_parametrized_empty_ids(self, pytester: Pytester) -> None:\n        \"\"\"Tests parametrized with empty ids cause an internal error (#1849).\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize('temp', [], ids=list())\n            def test_temp(temp):\n                 pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 1 skipped *\"])\n\n    def test_parametrized_ids_invalid_type(self, pytester: Pytester) -> None:\n        \"\"\"Test error with non-strings/non-ints, without generator (#1857).\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"x, expected\", [(1, 2), (3, 4), (5, 6)], ids=(None, 2, OSError()))\n            def test_ids_numbers(x,expected):\n                assert x * 2 == expected\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines(\n            [\n                \"In test_ids_numbers: ids contains unsupported value OSError() (type: <class 'OSError'>) at index 2. \"\n                \"Supported types are: str, bytes, int, float, complex, bool, enum, regex or anything with a __name__.\"\n            ]\n        )\n\n    def test_parametrize_with_identical_ids_get_unique_names(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                metafunc.parametrize((\"a\", \"b\"), [(1,1), (1,2)],\n                                     ids=[\"a\", \"a\"])\n\n            def test_function(a, b):\n                assert a == b\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        assert result.ret == 1\n        result.stdout.fnmatch_lines_random(\n            [\"*test_function*a0*PASSED*\", \"*test_function*a1*FAILED*\"]\n        )\n\n    @pytest.mark.parametrize((\"scope\", \"length\"), [(\"module\", 2), (\"function\", 4)])\n    def test_parametrize_scope_overrides(\n        self, pytester: Pytester, scope: str, length: int\n    ) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            values = []\n            def pytest_generate_tests(metafunc):\n                if \"arg\" in metafunc.fixturenames:\n                    metafunc.parametrize(\"arg\", [1,2], indirect=True,\n                                         scope=%r)\n            @pytest.fixture\n            def arg(request):\n                values.append(request.param)\n                return request.param\n            def test_hello(arg):\n                assert arg in (1,2)\n            def test_world(arg):\n                assert arg in (1,2)\n            def test_checklength():\n                assert len(values) == %d\n        \"\"\"\n            % (scope, length)\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=5)\n\n    def test_parametrize_issue323(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='module', params=range(966))\n            def foo(request):\n                return request.param\n\n            def test_it(foo):\n                pass\n            def test_it2(foo):\n                pass\n        \"\"\"\n        )\n        reprec = pytester.inline_run(\"--collect-only\")\n        assert not reprec.getcalls(\"pytest_internalerror\")\n\n    def test_usefixtures_seen_in_generate_tests(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            def pytest_generate_tests(metafunc):\n                assert \"abc\" in metafunc.fixturenames\n                metafunc.parametrize(\"abc\", [1])\n\n            @pytest.mark.usefixtures(\"abc\")\n            def test_function():\n                pass\n        \"\"\"\n        )\n        reprec = pytester.runpytest()\n        reprec.assert_outcomes(passed=1)\n\n    def test_generate_tests_only_done_in_subdir(self, pytester: Pytester) -> None:\n        sub1 = pytester.mkpydir(\"sub1\")\n        sub2 = pytester.mkpydir(\"sub2\")\n        sub1.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def pytest_generate_tests(metafunc):\n                    assert metafunc.function.__name__ == \"test_1\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub2.joinpath(\"conftest.py\").write_text(\n            textwrap.dedent(\n                \"\"\"\\\n                def pytest_generate_tests(metafunc):\n                    assert metafunc.function.__name__ == \"test_2\"\n                \"\"\"\n            ),\n            encoding=\"utf-8\",\n        )\n        sub1.joinpath(\"test_in_sub1.py\").write_text(\n            \"def test_1(): pass\", encoding=\"utf-8\"\n        )\n        sub2.joinpath(\"test_in_sub2.py\").write_text(\n            \"def test_2(): pass\", encoding=\"utf-8\"\n        )\n        result = pytester.runpytest(\"--keep-duplicates\", \"-v\", \"-s\", sub1, sub2, sub1)\n        result.assert_outcomes(passed=3)\n\n    def test_generate_same_function_names_issue403(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            def make_tests():\n                @pytest.mark.parametrize(\"x\", range(2))\n                def test_foo(x):\n                    pass\n                return test_foo\n\n            test_x = make_tests()\n            test_y = make_tests()\n        \"\"\"\n        )\n        reprec = pytester.runpytest()\n        reprec.assert_outcomes(passed=4)\n\n    def test_parametrize_misspelling(self, pytester: Pytester) -> None:\n        \"\"\"#463\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrise(\"x\", range(2))\n            def test_foo(x):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"--collect-only\")\n        result.stdout.fnmatch_lines(\n            [\n                \"collected 0 items / 1 error\",\n                \"\",\n                \"*= ERRORS =*\",\n                \"*_ ERROR collecting test_parametrize_misspelling.py _*\",\n                \"test_parametrize_misspelling.py:3: in <module>\",\n                '    @pytest.mark.parametrise(\"x\", range(2))',\n                \"E   Failed: Unknown 'parametrise' mark, did you mean 'parametrize'?\",\n                \"*! Interrupted: 1 error during collection !*\",\n                \"*= no tests collected, 1 error in *\",\n            ]\n        )\n\n    @pytest.mark.parametrize(\"scope\", [\"class\", \"package\"])\n    def test_parametrize_missing_scope_doesnt_crash(\n        self, pytester: Pytester, scope: str\n    ) -> None:\n        \"\"\"Doesn't crash when parametrize(scope=<scope>) is used without a\n        corresponding <scope> node.\"\"\"\n        pytester.makepyfile(\n            f\"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"x\", [0], scope=\"{scope}\")\n            def test_it(x): pass\n            \"\"\"\n        )\n        result = pytester.runpytest()\n        assert result.ret == 0\n\n    def test_parametrize_module_level_test_with_class_scope(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"\n        Test that a class-scoped parametrization without a corresponding `Class`\n        gets module scope, i.e. we only create a single FixtureDef for it per module.\n        \"\"\"\n        module = pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"x\", [0, 1], scope=\"class\")\n            def test_1(x):\n                pass\n\n            @pytest.mark.parametrize(\"x\", [1, 2], scope=\"module\")\n            def test_2(x):\n                pass\n        \"\"\"\n        )\n        test_1_0, _, test_2_0, _ = pytester.genitems((pytester.getmodulecol(module),))\n\n        assert isinstance(test_1_0, Function)\n        assert test_1_0.name == \"test_1[0]\"\n        test_1_fixture_x = test_1_0._fixtureinfo.name2fixturedefs[\"x\"][-1]\n\n        assert isinstance(test_2_0, Function)\n        assert test_2_0.name == \"test_2[1]\"\n        test_2_fixture_x = test_2_0._fixtureinfo.name2fixturedefs[\"x\"][-1]\n\n        assert test_1_fixture_x is test_2_fixture_x\n\n    def test_reordering_with_scopeless_and_just_indirect_parametrization(\n        self, pytester: Pytester\n    ) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"package\")\n            def fixture1():\n                pass\n            \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope=\"module\")\n            def fixture0():\n                pass\n\n            @pytest.fixture(scope=\"module\")\n            def fixture1(fixture0):\n                pass\n\n            @pytest.mark.parametrize(\"fixture1\", [0], indirect=True)\n            def test_0(fixture1):\n                pass\n\n            @pytest.fixture(scope=\"module\")\n            def fixture():\n                pass\n\n            @pytest.mark.parametrize(\"fixture\", [0], indirect=True)\n            def test_1(fixture):\n                pass\n\n            def test_2():\n                pass\n\n            class Test:\n                @pytest.fixture(scope=\"class\")\n                def fixture(self, fixture):\n                    pass\n\n                @pytest.mark.parametrize(\"fixture\", [0], indirect=True)\n                def test_3(self, fixture):\n                    pass\n            \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        assert result.ret == 0\n        result.stdout.fnmatch_lines(\n            [\n                \"*test_0*\",\n                \"*test_1*\",\n                \"*test_2*\",\n                \"*test_3*\",\n            ]\n        )\n\n\nclass TestMetafuncFunctionalAuto:\n    \"\"\"Tests related to automatically find out the correct scope for\n    parametrized tests (#1832).\"\"\"\n\n    def test_parametrize_auto_scope(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='session', autouse=True)\n            def fixture():\n                return 1\n\n            @pytest.mark.parametrize('animal', [\"dog\", \"cat\"])\n            def test_1(animal):\n                assert animal in ('dog', 'cat')\n\n            @pytest.mark.parametrize('animal', ['fish'])\n            def test_2(animal):\n                assert animal == 'fish'\n\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 3 passed *\"])\n\n    def test_parametrize_auto_scope_indirect(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='session')\n            def echo(request):\n                return request.param\n\n            @pytest.mark.parametrize('animal, echo', [(\"dog\", 1), (\"cat\", 2)], indirect=['echo'])\n            def test_1(animal, echo):\n                assert animal in ('dog', 'cat')\n                assert echo in (1, 2, 3)\n\n            @pytest.mark.parametrize('animal, echo', [('fish', 3)], indirect=['echo'])\n            def test_2(animal, echo):\n                assert animal == 'fish'\n                assert echo in (1, 2, 3)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 3 passed *\"])\n\n    def test_parametrize_auto_scope_override_fixture(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='session', autouse=True)\n            def animal():\n                return 'fox'\n\n            @pytest.mark.parametrize('animal', [\"dog\", \"cat\"])\n            def test_1(animal):\n                assert animal in ('dog', 'cat')\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 2 passed *\"])\n\n    def test_parametrize_all_indirects(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture()\n            def animal(request):\n                return request.param\n\n            @pytest.fixture(scope='session')\n            def echo(request):\n                return request.param\n\n            @pytest.mark.parametrize('animal, echo', [(\"dog\", 1), (\"cat\", 2)], indirect=True)\n            def test_1(animal, echo):\n                assert animal in ('dog', 'cat')\n                assert echo in (1, 2, 3)\n\n            @pytest.mark.parametrize('animal, echo', [(\"fish\", 3)], indirect=True)\n            def test_2(animal, echo):\n                assert animal == 'fish'\n                assert echo in (1, 2, 3)\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"* 3 passed *\"])\n\n    def test_parametrize_some_arguments_auto_scope(\n        self, pytester: Pytester, monkeypatch\n    ) -> None:\n        \"\"\"Integration test for (#3941)\"\"\"\n        class_fix_setup: list[object] = []\n        monkeypatch.setattr(sys, \"class_fix_setup\", class_fix_setup, raising=False)\n        func_fix_setup: list[object] = []\n        monkeypatch.setattr(sys, \"func_fix_setup\", func_fix_setup, raising=False)\n\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            import sys\n\n            @pytest.fixture(scope='class', autouse=True)\n            def class_fix(request):\n                sys.class_fix_setup.append(request.param)\n\n            @pytest.fixture(autouse=True)\n            def func_fix():\n                sys.func_fix_setup.append(True)\n\n            @pytest.mark.parametrize('class_fix', [10, 20], indirect=True)\n            class Test:\n                def test_foo(self):\n                    pass\n                def test_bar(self):\n                    pass\n            \"\"\"\n        )\n        result = pytester.runpytest_inprocess()\n        result.stdout.fnmatch_lines([\"* 4 passed in *\"])\n        assert func_fix_setup == [True] * 4\n        assert class_fix_setup == [10, 20]\n\n    def test_parametrize_issue634(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture(scope='module')\n            def foo(request):\n                print('preparing foo-%d' % request.param)\n                return 'foo-%d' % request.param\n\n            def test_one(foo):\n                pass\n\n            def test_two(foo):\n                pass\n\n            test_two.test_with = (2, 3)\n\n            def pytest_generate_tests(metafunc):\n                params = (1, 2, 3, 4)\n                if not 'foo' in metafunc.fixturenames:\n                    return\n\n                test_with = getattr(metafunc.function, 'test_with', None)\n                if test_with:\n                    params = test_with\n                metafunc.parametrize('foo', params, indirect=True)\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-s\")\n        output = result.stdout.str()\n        assert output.count(\"preparing foo-2\") == 1\n        assert output.count(\"preparing foo-3\") == 1\n\n\nclass TestMarkersWithParametrization:\n    \"\"\"#308\"\"\"\n\n    def test_simple_mark(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n            @pytest.mark.foo\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                (1, 2),\n                pytest.param(1, 3, marks=pytest.mark.bar),\n                (2, 3),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        items = pytester.getitems(s)\n        assert len(items) == 3\n        for item in items:\n            assert \"foo\" in item.keywords\n        assert \"bar\" not in items[0].keywords\n        assert \"bar\" in items[1].keywords\n        assert \"bar\" not in items[2].keywords\n\n    def test_select_based_on_mark(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                (1, 2),\n                pytest.param(2, 3, marks=pytest.mark.foo),\n                (3, 4),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        rec = pytester.inline_run(\"-m\", \"foo\")\n        passed, skipped, fail = rec.listoutcomes()\n        assert len(passed) == 1\n        assert len(skipped) == 0\n        assert len(fail) == 0\n\n    def test_simple_xfail(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                (1, 2),\n                pytest.param(1, 3, marks=pytest.mark.xfail),\n                (2, 3),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        # xfail is skip??\n        reprec.assertoutcome(passed=2, skipped=1)\n\n    def test_simple_xfail_single_argname(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"n\", [\n                2,\n                pytest.param(3, marks=pytest.mark.xfail),\n                4,\n            ])\n            def test_isEven(n):\n                assert n % 2 == 0\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2, skipped=1)\n\n    def test_xfail_with_arg(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                (1, 2),\n                pytest.param(1, 3, marks=pytest.mark.xfail(\"True\")),\n                (2, 3),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2, skipped=1)\n\n    def test_xfail_with_kwarg(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                (1, 2),\n                pytest.param(1, 3, marks=pytest.mark.xfail(reason=\"some bug\")),\n                (2, 3),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2, skipped=1)\n\n    def test_xfail_with_arg_and_kwarg(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                (1, 2),\n                pytest.param(1, 3, marks=pytest.mark.xfail(\"True\", reason=\"some bug\")),\n                (2, 3),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2, skipped=1)\n\n    @pytest.mark.parametrize(\"strict\", [True, False])\n    def test_xfail_passing_is_xpass(self, pytester: Pytester, strict: bool) -> None:\n        s = f\"\"\"\n            import pytest\n\n            m = pytest.mark.xfail(\"sys.version_info > (0, 0, 0)\", reason=\"some bug\", strict={strict})\n\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                (1, 2),\n                pytest.param(2, 3, marks=m),\n                (3, 4),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        passed, failed = (2, 1) if strict else (3, 0)\n        reprec.assertoutcome(passed=passed, failed=failed)\n\n    def test_parametrize_called_in_generate_tests(self, pytester: Pytester) -> None:\n        s = \"\"\"\n            import pytest\n\n\n            def pytest_generate_tests(metafunc):\n                passingTestData = [(1, 2),\n                                   (2, 3)]\n                failingTestData = [(1, 3),\n                                   (2, 2)]\n\n                testData = passingTestData + [pytest.param(*d, marks=pytest.mark.xfail)\n                                  for d in failingTestData]\n                metafunc.parametrize((\"n\", \"expected\"), testData)\n\n\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2, skipped=2)\n\n    def test_parametrize_ID_generation_string_int_works(\n        self, pytester: Pytester\n    ) -> None:\n        \"\"\"#290\"\"\"\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n            def myfixture():\n                return 'example'\n            @pytest.mark.parametrize(\n                'limit', (0, '0'))\n            def test_limit(limit, myfixture):\n                return\n        \"\"\"\n        )\n        reprec = pytester.inline_run()\n        reprec.assertoutcome(passed=2)\n\n    @pytest.mark.parametrize(\"strict\", [True, False])\n    def test_parametrize_marked_value(self, pytester: Pytester, strict: bool) -> None:\n        s = f\"\"\"\n            import pytest\n\n            @pytest.mark.parametrize((\"n\", \"expected\"), [\n                pytest.param(\n                    2,3,\n                    marks=pytest.mark.xfail(\"sys.version_info > (0, 0, 0)\", reason=\"some bug\", strict={strict}),\n                ),\n                pytest.param(\n                    2,3,\n                    marks=[pytest.mark.xfail(\"sys.version_info > (0, 0, 0)\", reason=\"some bug\", strict={strict})],\n                ),\n            ])\n            def test_increment(n, expected):\n                assert n + 1 == expected\n        \"\"\"\n        pytester.makepyfile(s)\n        reprec = pytester.inline_run()\n        passed, failed = (0, 2) if strict else (2, 0)\n        reprec.assertoutcome(passed=passed, failed=failed)\n\n    def test_pytest_make_parametrize_id(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_make_parametrize_id(config, val):\n                return str(val * 2)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n                import pytest\n\n                @pytest.mark.parametrize(\"x\", range(2))\n                def test_func(x):\n                    pass\n                \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines([\"*test_func*0*PASS*\", \"*test_func*2*PASS*\"])\n\n    def test_pytest_make_parametrize_id_with_argname(self, pytester: Pytester) -> None:\n        pytester.makeconftest(\n            \"\"\"\n            def pytest_make_parametrize_id(config, val, argname):\n                return str(val * 2 if argname == 'x' else val * 10)\n        \"\"\"\n        )\n        pytester.makepyfile(\n            \"\"\"\n                import pytest\n\n                @pytest.mark.parametrize(\"x\", range(2))\n                def test_func_a(x):\n                    pass\n\n                @pytest.mark.parametrize(\"y\", [1])\n                def test_func_b(y):\n                    pass\n                \"\"\"\n        )\n        result = pytester.runpytest(\"-v\")\n        result.stdout.fnmatch_lines(\n            [\"*test_func_a*0*PASS*\", \"*test_func_a*2*PASS*\", \"*test_func_b*10*PASS*\"]\n        )\n\n    def test_parametrize_positional_args(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.parametrize(\"a\", [1], False)\n            def test_foo(a):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.assert_outcomes(passed=1)\n\n    def test_parametrize_iterator(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import itertools\n            import pytest\n\n            id_parametrize = pytest.mark.parametrize(\n                ids=(\"param%d\" % i for i in itertools.count())\n            )\n\n            @id_parametrize('y', ['a', 'b'])\n            def test1(y):\n                pass\n\n            @id_parametrize('y', ['a', 'b'])\n            def test2(y):\n                pass\n\n            @pytest.mark.parametrize(\"a, b\", [(1, 2), (3, 4)], ids=itertools.count())\n            def test_converted_to_str(a, b):\n                pass\n        \"\"\"\n        )\n        result = pytester.runpytest(\"-vv\", \"-s\")\n        result.stdout.fnmatch_lines(\n            [\n                \"test_parametrize_iterator.py::test1[param0] PASSED\",\n                \"test_parametrize_iterator.py::test1[param1] PASSED\",\n                \"test_parametrize_iterator.py::test2[param0] PASSED\",\n                \"test_parametrize_iterator.py::test2[param1] PASSED\",\n                \"test_parametrize_iterator.py::test_converted_to_str[0] PASSED\",\n                \"test_parametrize_iterator.py::test_converted_to_str[1] PASSED\",\n                \"*= 6 passed in *\",\n            ]\n        )\n", "testing/python/raises.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport re\nimport sys\n\nfrom _pytest.outcomes import Failed\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nclass TestRaises:\n    def test_check_callable(self) -> None:\n        with pytest.raises(TypeError, match=r\".* must be callable\"):\n            pytest.raises(RuntimeError, \"int('qwe')\")  # type: ignore[call-overload]\n\n    def test_raises(self):\n        excinfo = pytest.raises(ValueError, int, \"qwe\")\n        assert \"invalid literal\" in str(excinfo.value)\n\n    def test_raises_function(self):\n        excinfo = pytest.raises(ValueError, int, \"hello\")\n        assert \"invalid literal\" in str(excinfo.value)\n\n    def test_raises_does_not_allow_none(self):\n        with pytest.raises(ValueError, match=\"Expected an exception type or\"):\n            # We're testing that this invalid usage gives a helpful error,\n            # so we can ignore Mypy telling us that None is invalid.\n            pytest.raises(expected_exception=None)  # type: ignore\n\n    def test_raises_does_not_allow_empty_tuple(self):\n        with pytest.raises(ValueError, match=\"Expected an exception type or\"):\n            pytest.raises(expected_exception=())\n\n    def test_raises_callable_no_exception(self) -> None:\n        class A:\n            def __call__(self):\n                pass\n\n        try:\n            pytest.raises(ValueError, A())\n        except pytest.fail.Exception:\n            pass\n\n    def test_raises_falsey_type_error(self) -> None:\n        with pytest.raises(TypeError):\n            with pytest.raises(AssertionError, match=0):  # type: ignore[call-overload]\n                raise AssertionError(\"ohai\")\n\n    def test_raises_repr_inflight(self):\n        \"\"\"Ensure repr() on an exception info inside a pytest.raises with block works (#4386)\"\"\"\n\n        class E(Exception):\n            pass\n\n        with pytest.raises(E) as excinfo:\n            # this test prints the inflight uninitialized object\n            # using repr and str as well as pprint to demonstrate\n            # it works\n            print(str(excinfo))\n            print(repr(excinfo))\n            import pprint\n\n            pprint.pprint(excinfo)\n            raise E()\n\n    def test_raises_as_contextmanager(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            import pytest\n            import _pytest._code\n\n            def test_simple():\n                with pytest.raises(ZeroDivisionError) as excinfo:\n                    assert isinstance(excinfo, _pytest._code.ExceptionInfo)\n                    1/0\n                print(excinfo)\n                assert excinfo.type == ZeroDivisionError\n                assert isinstance(excinfo.value, ZeroDivisionError)\n\n            def test_noraise():\n                with pytest.raises(pytest.raises.Exception):\n                    with pytest.raises(ValueError):\n                           int()\n\n            def test_raise_wrong_exception_passes_by():\n                with pytest.raises(ZeroDivisionError):\n                    with pytest.raises(ValueError):\n                           1/0\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*3 passed*\"])\n\n    def test_does_not_raise(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            from contextlib import nullcontext as does_not_raise\n            import pytest\n\n            @pytest.mark.parametrize('example_input,expectation', [\n                (3, does_not_raise()),\n                (2, does_not_raise()),\n                (1, does_not_raise()),\n                (0, pytest.raises(ZeroDivisionError)),\n            ])\n            def test_division(example_input, expectation):\n                '''Test how much I know division.'''\n                with expectation:\n                    assert (6 / example_input) is not None\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*4 passed*\"])\n\n    def test_does_not_raise_does_raise(self, pytester: Pytester) -> None:\n        pytester.makepyfile(\n            \"\"\"\n            from contextlib import nullcontext as does_not_raise\n            import pytest\n\n            @pytest.mark.parametrize('example_input,expectation', [\n                (0, does_not_raise()),\n                (1, pytest.raises(ZeroDivisionError)),\n            ])\n            def test_division(example_input, expectation):\n                '''Test how much I know division.'''\n                with expectation:\n                    assert (6 / example_input) is not None\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*2 failed*\"])\n\n    def test_noclass(self) -> None:\n        with pytest.raises(TypeError):\n            pytest.raises(\"wrong\", lambda: None)  # type: ignore[call-overload]\n\n    def test_invalid_arguments_to_raises(self) -> None:\n        with pytest.raises(TypeError, match=\"unknown\"):\n            with pytest.raises(TypeError, unknown=\"bogus\"):  # type: ignore[call-overload]\n                raise ValueError()\n\n    def test_tuple(self):\n        with pytest.raises((KeyError, ValueError)):\n            raise KeyError(\"oops\")\n\n    def test_no_raise_message(self) -> None:\n        try:\n            pytest.raises(ValueError, int, \"0\")\n        except pytest.fail.Exception as e:\n            assert e.msg == f\"DID NOT RAISE {ValueError!r}\"\n        else:\n            assert False, \"Expected pytest.raises.Exception\"\n\n        try:\n            with pytest.raises(ValueError):\n                pass\n        except pytest.fail.Exception as e:\n            assert e.msg == f\"DID NOT RAISE {ValueError!r}\"\n        else:\n            assert False, \"Expected pytest.raises.Exception\"\n\n    @pytest.mark.parametrize(\"method\", [\"function\", \"function_match\", \"with\"])\n    def test_raises_cyclic_reference(self, method):\n        \"\"\"Ensure pytest.raises does not leave a reference cycle (#1965).\"\"\"\n        import gc\n\n        class T:\n            def __call__(self):\n                raise ValueError\n\n        t = T()\n        refcount = len(gc.get_referrers(t))\n\n        if method == \"function\":\n            pytest.raises(ValueError, t)\n        elif method == \"function_match\":\n            pytest.raises(ValueError, t).match(\"^$\")\n        else:\n            with pytest.raises(ValueError):\n                t()\n\n        # ensure both forms of pytest.raises don't leave exceptions in sys.exc_info()\n        assert sys.exc_info() == (None, None, None)\n\n        assert refcount == len(gc.get_referrers(t))\n\n    def test_raises_match(self) -> None:\n        msg = r\"with base \\d+\"\n        with pytest.raises(ValueError, match=msg):\n            int(\"asdf\")\n\n        msg = \"with base 10\"\n        with pytest.raises(ValueError, match=msg):\n            int(\"asdf\")\n\n        msg = \"with base 16\"\n        expr = (\n            \"Regex pattern did not match.\\n\"\n            f\" Regex: {msg!r}\\n\"\n            \" Input: \\\"invalid literal for int() with base 10: 'asdf'\\\"\"\n        )\n        with pytest.raises(AssertionError, match=\"(?m)\" + re.escape(expr)):\n            with pytest.raises(ValueError, match=msg):\n                int(\"asdf\", base=10)\n\n        # \"match\" without context manager.\n        pytest.raises(ValueError, int, \"asdf\").match(\"invalid literal\")\n        with pytest.raises(AssertionError) as excinfo:\n            pytest.raises(ValueError, int, \"asdf\").match(msg)\n        assert str(excinfo.value) == expr\n\n        pytest.raises(TypeError, int, match=\"invalid\")\n\n        def tfunc(match):\n            raise ValueError(f\"match={match}\")\n\n        pytest.raises(ValueError, tfunc, match=\"asdf\").match(\"match=asdf\")\n        pytest.raises(ValueError, tfunc, match=\"\").match(\"match=\")\n\n    def test_match_failure_string_quoting(self):\n        with pytest.raises(AssertionError) as excinfo:\n            with pytest.raises(AssertionError, match=\"'foo\"):\n                raise AssertionError(\"'bar\")\n        (msg,) = excinfo.value.args\n        assert msg == '''Regex pattern did not match.\\n Regex: \"'foo\"\\n Input: \"'bar\"'''\n\n    def test_match_failure_exact_string_message(self):\n        message = \"Oh here is a message with (42) numbers in parameters\"\n        with pytest.raises(AssertionError) as excinfo:\n            with pytest.raises(AssertionError, match=message):\n                raise AssertionError(message)\n        (msg,) = excinfo.value.args\n        assert msg == (\n            \"Regex pattern did not match.\\n\"\n            \" Regex: 'Oh here is a message with (42) numbers in parameters'\\n\"\n            \" Input: 'Oh here is a message with (42) numbers in parameters'\\n\"\n            \" Did you mean to `re.escape()` the regex?\"\n        )\n\n    def test_raises_match_wrong_type(self):\n        \"\"\"Raising an exception with the wrong type and match= given.\n\n        pytest should throw the unexpected exception - the pattern match is not\n        really relevant if we got a different exception.\n        \"\"\"\n        with pytest.raises(ValueError):\n            with pytest.raises(IndexError, match=\"nomatch\"):\n                int(\"asdf\")\n\n    def test_raises_exception_looks_iterable(self):\n        class Meta(type):\n            def __getitem__(self, item):\n                return 1 / 0\n\n            def __len__(self):\n                return 1\n\n        class ClassLooksIterableException(Exception, metaclass=Meta):\n            pass\n\n        with pytest.raises(\n            Failed,\n            match=r\"DID NOT RAISE <class 'raises(\\..*)*ClassLooksIterableException'>\",\n        ):\n            pytest.raises(ClassLooksIterableException, lambda: None)\n\n    def test_raises_with_raising_dunder_class(self) -> None:\n        \"\"\"Test current behavior with regard to exceptions via __class__ (#4284).\"\"\"\n\n        class CrappyClass(Exception):\n            # Type ignored because it's bypassed intentionally.\n            @property  # type: ignore\n            def __class__(self):\n                assert False, \"via __class__\"\n\n        with pytest.raises(AssertionError) as excinfo:\n            with pytest.raises(CrappyClass()):  # type: ignore[call-overload]\n                pass\n        assert \"via __class__\" in excinfo.value.args[0]\n\n    def test_raises_context_manager_with_kwargs(self):\n        with pytest.raises(TypeError) as excinfo:\n            with pytest.raises(OSError, foo=\"bar\"):  # type: ignore[call-overload]\n                pass\n        assert \"Unexpected keyword arguments\" in str(excinfo.value)\n\n    def test_expected_exception_is_not_a_baseexception(self) -> None:\n        with pytest.raises(TypeError) as excinfo:\n            with pytest.raises(\"hello\"):  # type: ignore[call-overload]\n                pass  # pragma: no cover\n        assert \"must be a BaseException type, not str\" in str(excinfo.value)\n\n        class NotAnException:\n            pass\n\n        with pytest.raises(TypeError) as excinfo:\n            with pytest.raises(NotAnException):  # type: ignore[type-var]\n                pass  # pragma: no cover\n        assert \"must be a BaseException type, not NotAnException\" in str(excinfo.value)\n\n        with pytest.raises(TypeError) as excinfo:\n            with pytest.raises((\"hello\", NotAnException)):  # type: ignore[arg-type]\n                pass  # pragma: no cover\n        assert \"must be a BaseException type, not str\" in str(excinfo.value)\n\n    def test_issue_11872(self) -> None:\n        \"\"\"Regression test for #11872.\n\n        urllib.error.HTTPError on Python<=3.9 raises KeyError instead of\n        AttributeError on invalid attribute access.\n\n        https://github.com/python/cpython/issues/98778\n        \"\"\"\n        from urllib.error import HTTPError\n\n        with pytest.raises(HTTPError, match=\"Not Found\"):\n            raise HTTPError(code=404, msg=\"Not Found\", fp=None, hdrs=None, url=\"\")  # type: ignore [arg-type]\n", "testing/example_scripts/issue_519.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pprint\n\nimport pytest\n\n\ndef pytest_generate_tests(metafunc):\n    if \"arg1\" in metafunc.fixturenames:\n        metafunc.parametrize(\"arg1\", [\"arg1v1\", \"arg1v2\"], scope=\"module\")\n\n    if \"arg2\" in metafunc.fixturenames:\n        metafunc.parametrize(\"arg2\", [\"arg2v1\", \"arg2v2\"], scope=\"function\")\n\n\n@pytest.fixture(scope=\"session\")\ndef checked_order():\n    order: list[tuple[str, str, str]] = []\n\n    yield order\n    pprint.pprint(order)\n    assert order == [\n        (\"issue_519.py\", \"fix1\", \"arg1v1\"),\n        (\"test_one[arg1v1-arg2v1]\", \"fix2\", \"arg2v1\"),\n        (\"test_one[arg1v1-arg2v2]\", \"fix2\", \"arg2v2\"),\n        (\"test_two[arg1v1-arg2v1]\", \"fix2\", \"arg2v1\"),\n        (\"test_two[arg1v1-arg2v2]\", \"fix2\", \"arg2v2\"),\n        (\"issue_519.py\", \"fix1\", \"arg1v2\"),\n        (\"test_one[arg1v2-arg2v1]\", \"fix2\", \"arg2v1\"),\n        (\"test_one[arg1v2-arg2v2]\", \"fix2\", \"arg2v2\"),\n        (\"test_two[arg1v2-arg2v1]\", \"fix2\", \"arg2v1\"),\n        (\"test_two[arg1v2-arg2v2]\", \"fix2\", \"arg2v2\"),\n    ]\n\n\n@pytest.fixture(scope=\"module\")\ndef fix1(request, arg1, checked_order):\n    checked_order.append((request.node.name, \"fix1\", arg1))\n    yield \"fix1-\" + arg1\n\n\n@pytest.fixture(scope=\"function\")\ndef fix2(request, fix1, arg2, checked_order):\n    checked_order.append((request.node.name, \"fix2\", arg2))\n    yield \"fix2-\" + arg2 + fix1\n\n\ndef test_one(fix2):\n    pass\n\n\ndef test_two(fix2):\n    pass\n", "testing/example_scripts/__init__.py": "", "testing/example_scripts/acceptance/fixture_mock_integration.py": "# mypy: allow-untyped-defs\n\"\"\"Reproduces issue #3774\"\"\"\n\nfrom __future__ import annotations\n\nfrom unittest import mock\n\nimport pytest\n\n\nconfig = {\"mykey\": \"ORIGINAL\"}\n\n\n@pytest.fixture(scope=\"function\")\n@mock.patch.dict(config, {\"mykey\": \"MOCKED\"})\ndef my_fixture():\n    return config[\"mykey\"]\n\n\ndef test_foobar(my_fixture):\n    assert my_fixture == \"MOCKED\"\n", "testing/example_scripts/unittest/test_parametrized_fixture_error_message.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport unittest\n\nimport pytest\n\n\n@pytest.fixture(params=[1, 2])\ndef two(request):\n    return request.param\n\n\n@pytest.mark.usefixtures(\"two\")\nclass TestSomethingElse(unittest.TestCase):\n    def test_two(self):\n        pass\n", "testing/example_scripts/unittest/test_setup_skip.py": "# mypy: allow-untyped-defs\n\"\"\"Skipping an entire subclass with unittest.skip() should *not* call setUp from a base class.\"\"\"\n\nfrom __future__ import annotations\n\nimport unittest\n\n\nclass Base(unittest.TestCase):\n    def setUp(self):\n        assert 0\n\n\n@unittest.skip(\"skip all tests\")\nclass Test(Base):\n    def test_foo(self):\n        assert 0\n", "testing/example_scripts/unittest/test_unittest_asynctest.py": "# mypy: allow-untyped-defs\n\"\"\"Issue #7110\"\"\"\n\nfrom __future__ import annotations\n\nimport asyncio\n\nimport asynctest\n\n\nteardowns: list[None] = []\n\n\nclass Test(asynctest.TestCase):\n    async def tearDown(self):\n        teardowns.append(None)\n\n    async def test_error(self):\n        await asyncio.sleep(0)\n        self.fail(\"failing on purpose\")\n\n    async def test_ok(self):\n        await asyncio.sleep(0)\n\n    def test_teardowns(self):\n        assert len(teardowns) == 2\n", "testing/example_scripts/unittest/test_setup_skip_class.py": "# mypy: allow-untyped-defs\n\"\"\"Skipping an entire subclass with unittest.skip() should *not* call setUpClass from a base class.\"\"\"\n\nfrom __future__ import annotations\n\nimport unittest\n\n\nclass Base(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        assert 0\n\n\n@unittest.skip(\"skip all tests\")\nclass Test(Base):\n    def test_foo(self):\n        assert 0\n", "testing/example_scripts/unittest/test_unittest_asyncio.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom unittest import IsolatedAsyncioTestCase\n\n\nteardowns: list[None] = []\n\n\nclass AsyncArguments(IsolatedAsyncioTestCase):\n    async def asyncTearDown(self):\n        teardowns.append(None)\n\n    async def test_something_async(self):\n        async def addition(x, y):\n            return x + y\n\n        self.assertEqual(await addition(2, 2), 4)\n\n    async def test_something_async_fails(self):\n        async def addition(x, y):\n            return x + y\n\n        self.assertEqual(await addition(2, 2), 3)\n\n    def test_teardowns(self):\n        assert len(teardowns) == 2\n", "testing/example_scripts/unittest/test_setup_skip_module.py": "# mypy: allow-untyped-defs\n\"\"\"setUpModule is always called, even if all tests in the module are skipped\"\"\"\n\nfrom __future__ import annotations\n\nimport unittest\n\n\ndef setUpModule():\n    assert 0\n\n\n@unittest.skip(\"skip all tests\")\nclass Base(unittest.TestCase):\n    def test(self):\n        assert 0\n", "testing/example_scripts/unittest/test_unittest_plain_async.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    async def test_foo(self):\n        assert False\n", "testing/example_scripts/perf_examples/collect_stats/template_test.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_x():\n    pass\n", "testing/example_scripts/perf_examples/collect_stats/generate_folders.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport argparse\nimport pathlib\n\n\nHERE = pathlib.Path(__file__).parent\nTEST_CONTENT = (HERE / \"template_test.py\").read_bytes()\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"numbers\", nargs=\"*\", type=int)\n\n\ndef generate_folders(root, elements, *more_numbers):\n    fill_len = len(str(elements))\n    if more_numbers:\n        for i in range(elements):\n            new_folder = root.joinpath(f\"foo_{i:0>{fill_len}}\")\n            new_folder.mkdir()\n            new_folder.joinpath(\"__init__.py\").write_bytes(TEST_CONTENT)\n            generate_folders(new_folder, *more_numbers)\n    else:\n        for i in range(elements):\n            new_test = root.joinpath(f\"test_{i:0<{fill_len}}.py\")\n            new_test.write_bytes(TEST_CONTENT)\n\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    generate_folders(HERE, *(args.numbers or (10, 100)))\n", "testing/example_scripts/marks/marks_considered_keywords/test_marks_as_keywords.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.mark.foo\ndef test_mark():\n    pass\n", "testing/example_scripts/marks/marks_considered_keywords/conftest.py": "", "testing/example_scripts/customdirectory/conftest.py": "# mypy: allow-untyped-defs\n# content of conftest.py\nfrom __future__ import annotations\n\nimport json\n\nimport pytest\n\n\nclass ManifestDirectory(pytest.Directory):\n    def collect(self):\n        manifest_path = self.path / \"manifest.json\"\n        manifest = json.loads(manifest_path.read_text(encoding=\"utf-8\"))\n        ihook = self.ihook\n        for file in manifest[\"files\"]:\n            yield from ihook.pytest_collect_file(\n                file_path=self.path / file, parent=self\n            )\n\n\n@pytest.hookimpl\ndef pytest_collect_directory(path, parent):\n    if path.joinpath(\"manifest.json\").is_file():\n        return ManifestDirectory.from_parent(parent=parent, path=path)\n    return None\n", "testing/example_scripts/customdirectory/tests/test_third.py": "# mypy: allow-untyped-defs\n# content of test_third.py\nfrom __future__ import annotations\n\n\ndef test_3():\n    pass\n", "testing/example_scripts/customdirectory/tests/test_second.py": "# mypy: allow-untyped-defs\n# content of test_second.py\nfrom __future__ import annotations\n\n\ndef test_2():\n    pass\n", "testing/example_scripts/customdirectory/tests/test_first.py": "# mypy: allow-untyped-defs\n# content of test_first.py\nfrom __future__ import annotations\n\n\ndef test_1():\n    pass\n", "testing/example_scripts/dataclasses/test_compare_dataclasses_field_comparison_off.py": "from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\n\n\ndef test_dataclasses_with_attribute_comparison_off() -> None:\n    @dataclass\n    class SimpleDataObject:\n        field_a: int = field()\n        field_b: str = field(compare=False)\n\n    left = SimpleDataObject(1, \"b\")\n    right = SimpleDataObject(1, \"c\")\n\n    assert left == right\n", "testing/example_scripts/dataclasses/test_compare_dataclasses_with_custom_eq.py": "from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\n\n\ndef test_dataclasses() -> None:\n    @dataclass\n    class SimpleDataObject:\n        field_a: int = field()\n        field_b: str = field()\n\n        def __eq__(self, __o: object) -> bool:\n            return super().__eq__(__o)\n\n    left = SimpleDataObject(1, \"b\")\n    right = SimpleDataObject(1, \"c\")\n\n    assert left == right\n", "testing/example_scripts/dataclasses/test_compare_dataclasses.py": "from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\n\n\ndef test_dataclasses() -> None:\n    @dataclass\n    class SimpleDataObject:\n        field_a: int = field()\n        field_b: str = field()\n\n    left = SimpleDataObject(1, \"b\")\n    right = SimpleDataObject(1, \"c\")\n\n    assert left == right\n", "testing/example_scripts/dataclasses/test_compare_recursive_dataclasses.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass S:\n    a: int\n    b: str\n\n\n@dataclass\nclass C:\n    c: S\n    d: S\n\n\n@dataclass\nclass C2:\n    e: C\n    f: S\n\n\n@dataclass\nclass C3:\n    g: S\n    h: C2\n    i: str\n    j: str\n\n\ndef test_recursive_dataclasses():\n    left = C3(\n        S(10, \"ten\"),\n        C2(C(S(1, \"one\"), S(2, \"two\")), S(2, \"three\")),\n        \"equal\",\n        \"left\",\n    )\n    right = C3(\n        S(20, \"xxx\"),\n        C2(C(S(1, \"one\"), S(2, \"yyy\")), S(3, \"three\")),\n        \"equal\",\n        \"right\",\n    )\n\n    assert left == right\n", "testing/example_scripts/dataclasses/test_compare_dataclasses_verbose.py": "from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\n\n\ndef test_dataclasses_verbose() -> None:\n    @dataclass\n    class SimpleDataObject:\n        field_a: int = field()\n        field_b: str = field()\n\n    left = SimpleDataObject(1, \"b\")\n    right = SimpleDataObject(1, \"c\")\n\n    assert left == right\n", "testing/example_scripts/dataclasses/test_compare_two_different_dataclasses.py": "from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\n\n\ndef test_comparing_two_different_data_classes() -> None:\n    @dataclass\n    class SimpleDataObjectOne:\n        field_a: int = field()\n        field_b: str = field()\n\n    @dataclass\n    class SimpleDataObjectTwo:\n        field_a: int = field()\n        field_b: str = field()\n\n    left = SimpleDataObjectOne(1, \"b\")\n    right = SimpleDataObjectTwo(1, \"c\")\n\n    assert left != right  # type: ignore[comparison-overlap]\n", "testing/example_scripts/dataclasses/test_compare_initvar.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import InitVar\n\n\n@dataclass\nclass Foo:\n    init_only: InitVar[int]\n    real_attr: int\n\n\ndef test_demonstrate():\n    assert Foo(1, 2) == Foo(1, 3)\n", "testing/example_scripts/issue88_initial_file_multinodes/test_hello.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_hello():\n    pass\n", "testing/example_scripts/issue88_initial_file_multinodes/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\nclass MyFile(pytest.File):\n    def collect(self):\n        return [MyItem.from_parent(name=\"hello\", parent=self)]\n\n\ndef pytest_collect_file(file_path, parent):\n    return MyFile.from_parent(path=file_path, parent=parent)\n\n\nclass MyItem(pytest.Item):\n    def runtest(self):\n        raise NotImplementedError()\n", "testing/example_scripts/tmpdir/tmp_path_fixture.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"a\", [r\"qwe/\\abc\"])\ndef test_fixture(tmp_path, a):\n    assert tmp_path.is_dir()\n    assert list(tmp_path.iterdir()) == []\n", "testing/example_scripts/doctest/main_py/test_normal_module.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_doc():\n    \"\"\"\n    >>> 10 > 5\n    True\n    \"\"\"\n    assert False\n", "testing/example_scripts/doctest/main_py/__main__.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_this_is_ignored():\n    assert True\n", "testing/example_scripts/conftest_usageerror/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef pytest_configure(config):\n    import pytest\n\n    raise pytest.UsageError(\"hello\")\n\n\ndef pytest_unconfigure(config):\n    print(\"pytest_unconfigure_called\")\n", "testing/example_scripts/config/collect_pytest_prefix/test_foo.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_foo():\n    pass\n", "testing/example_scripts/config/collect_pytest_prefix/conftest.py": "from __future__ import annotations\n\n\nclass pytest_something:\n    pass\n", "testing/example_scripts/warnings/test_group_warnings_by_message.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport warnings\n\nimport pytest\n\n\ndef func(msg):\n    warnings.warn(UserWarning(msg))\n\n\n@pytest.mark.parametrize(\"i\", range(5))\ndef test_foo(i):\n    func(\"foo\")\n\n\ndef test_foo_1():\n    func(\"foo\")\n\n\n@pytest.mark.parametrize(\"i\", range(5))\ndef test_bar(i):\n    func(\"bar\")\n", "testing/example_scripts/warnings/test_group_warnings_by_message_summary/test_2.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom test_1 import func\n\n\ndef test_2():\n    func(\"foo\")\n", "testing/example_scripts/warnings/test_group_warnings_by_message_summary/test_1.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport warnings\n\nimport pytest\n\n\ndef func(msg):\n    warnings.warn(UserWarning(msg))\n\n\n@pytest.mark.parametrize(\"i\", range(20))\ndef test_foo(i):\n    func(\"foo\")\n\n\ndef test_foo_1():\n    func(\"foo\")\n\n\n@pytest.mark.parametrize(\"i\", range(20))\ndef test_bar(i):\n    func(\"bar\")\n", "testing/example_scripts/collect/package_infinite_recursion/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef pytest_ignore_collect(collection_path):\n    return False\n", "testing/example_scripts/collect/package_infinite_recursion/tests/test_basic.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test():\n    pass\n", "testing/example_scripts/collect/package_infinite_recursion/tests/__init__.py": "", "testing/example_scripts/collect/package_init_given_as_arg/pkg/test_foo.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_foo():\n    pass\n", "testing/example_scripts/collect/package_init_given_as_arg/pkg/__init__.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_init():\n    pass\n", "testing/example_scripts/collect/collect_init_tests/tests/test_foo.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_foo():\n    pass\n", "testing/example_scripts/collect/collect_init_tests/tests/__init__.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_init():\n    pass\n", "testing/example_scripts/fixtures/test_getfixturevalue_dynamic.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef dynamic():\n    pass\n\n\n@pytest.fixture\ndef a(request):\n    request.getfixturevalue(\"dynamic\")\n\n\n@pytest.fixture\ndef b(a):\n    pass\n\n\ndef test(b, request):\n    assert request.fixturenames == [\"b\", \"request\", \"a\", \"dynamic\"]\n", "testing/example_scripts/fixtures/test_fixture_named_request.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef request():\n    pass\n\n\ndef test():\n    pass\n", "testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookup_classlevel.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\nclass TestClass:\n    @pytest.fixture\n    def something(self, request):\n        return request.instance\n\n    def test_method(self, something):\n        assert something is self\n", "testing/example_scripts/fixtures/fill_fixtures/test_detect_recursive_dependency_error.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef fix1(fix2):\n    return 1\n\n\n@pytest.fixture\ndef fix2(fix1):\n    return 1\n\n\ndef test(fix1):\n    pass\n", "testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_module_class.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef spam():\n    return \"spam\"\n\n\nclass TestSpam:\n    @pytest.fixture\n    def spam(self, spam):\n        return spam * 2\n\n    def test_spam(self, spam):\n        assert spam == \"spamspam\"\n", "testing/example_scripts/fixtures/fill_fixtures/test_funcarg_basic.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef some(request):\n    return request.function.__name__\n\n\n@pytest.fixture\ndef other(request):\n    return 42\n\n\ndef test_func(some, other):\n    pass\n", "testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookupfails.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef xyzsomething(request):\n    return 42\n\n\ndef test_func(some):\n    pass\n", "testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookup_modulelevel.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef something(request):\n    return request.function.__name__\n\n\nclass TestClass:\n    def test_method(self, something):\n        assert something == \"test_method\"\n\n\ndef test_func(something):\n    assert something == \"test_func\"\n", "testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_conftest/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef spam():\n    return \"spam\"\n", "testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_conftest/pkg/test_spam.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_spam(spam):\n    assert spam == \"spamspam\"\n", "testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_conftest/pkg/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef spam(spam):\n    return spam * 2\n", "testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_conftest/pkg/__init__.py": "", "testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_module/test_extend_fixture_conftest_module.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef spam(spam):\n    return spam * 2\n\n\ndef test_spam(spam):\n    assert spam == \"spamspam\"\n", "testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_module/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef spam():\n    return \"spam\"\n", "testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub2/test_in_sub2.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_2(arg2):\n    pass\n", "testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub2/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef arg2(request):\n    pytest.raises(Exception, request.getfixturevalue, \"arg1\")\n", "testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub2/__init__.py": "", "testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub1/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\n@pytest.fixture\ndef arg1(request):\n    with pytest.raises(pytest.FixtureLookupError):\n        request.getfixturevalue(\"arg2\")\n", "testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub1/test_in_sub1.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_1(arg1):\n    pass\n", "testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub1/__init__.py": "", "testing/example_scripts/fixtures/custom_item/conftest.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport pytest\n\n\nclass CustomItem(pytest.Item):\n    def runtest(self):\n        pass\n\n\nclass CustomFile(pytest.File):\n    def collect(self):\n        yield CustomItem.from_parent(name=\"foo\", parent=self)\n\n\ndef pytest_collect_file(file_path, parent):\n    return CustomFile.from_parent(path=file_path, parent=parent)\n", "testing/example_scripts/fixtures/custom_item/foo/test_foo.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test():\n    pass\n", "testing/example_scripts/fixtures/custom_item/foo/__init__.py": "", "testing/freeze/runtests_script.py": "\"\"\"\nThis is the script that is actually frozen into an executable: simply executes\npytest main().\n\"\"\"\n\nfrom __future__ import annotations\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    import pytest\n\n    sys.exit(pytest.main())\n", "testing/freeze/create_executable.py": "\"\"\"Generate an executable with pytest runner embedded using PyInstaller.\"\"\"\n\nfrom __future__ import annotations\n\n\nif __name__ == \"__main__\":\n    import subprocess\n\n    import pytest\n\n    hidden = []\n    for x in pytest.freeze_includes():\n        hidden.extend([\"--hidden-import\", x])\n    hidden.extend([\"--hidden-import\", \"distutils\"])\n    args = [\"pyinstaller\", \"--noconfirm\", *hidden, \"runtests_script.py\"]\n    subprocess.check_call(\" \".join(args), shell=True)\n", "testing/freeze/tox_run.py": "\"\"\"\nCalled by tox.ini: uses the generated executable to run the tests in ./tests/\ndirectory.\n\"\"\"\n\nfrom __future__ import annotations\n\n\nif __name__ == \"__main__\":\n    import os\n    import sys\n\n    executable = os.path.join(os.getcwd(), \"dist\", \"runtests_script\", \"runtests_script\")\n    if sys.platform.startswith(\"win\"):\n        executable += \".exe\"\n    sys.exit(os.system(f\"{executable} tests\"))\n", "testing/freeze/tests/test_trivial.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\n\ndef test_upper():\n    assert \"foo\".upper() == \"FOO\"\n\n\ndef test_lower():\n    assert \"FOO\".lower() == \"foo\"\n", "testing/_py/test_local.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport contextlib\nimport multiprocessing\nimport os\nimport sys\nimport time\nfrom unittest import mock\nimport warnings\n\nfrom py import error\nfrom py.path import local\n\nimport pytest\n\n\n@contextlib.contextmanager\ndef ignore_encoding_warning():\n    with warnings.catch_warnings():\n        if sys.version_info > (3, 10):\n            warnings.simplefilter(\"ignore\", EncodingWarning)\n        yield\n\n\nclass CommonFSTests:\n    def test_constructor_equality(self, path1):\n        p = path1.__class__(path1)\n        assert p == path1\n\n    def test_eq_nonstring(self, path1):\n        p1 = path1.join(\"sampledir\")\n        p2 = path1.join(\"sampledir\")\n        assert p1 == p2\n\n    def test_new_identical(self, path1):\n        assert path1 == path1.new()\n\n    def test_join(self, path1):\n        p = path1.join(\"sampledir\")\n        strp = str(p)\n        assert strp.endswith(\"sampledir\")\n        assert strp.startswith(str(path1))\n\n    def test_join_normalized(self, path1):\n        newpath = path1.join(path1.sep + \"sampledir\")\n        strp = str(newpath)\n        assert strp.endswith(\"sampledir\")\n        assert strp.startswith(str(path1))\n        newpath = path1.join((path1.sep * 2) + \"sampledir\")\n        strp = str(newpath)\n        assert strp.endswith(\"sampledir\")\n        assert strp.startswith(str(path1))\n\n    def test_join_noargs(self, path1):\n        newpath = path1.join()\n        assert path1 == newpath\n\n    def test_add_something(self, path1):\n        p = path1.join(\"sample\")\n        p = p + \"dir\"\n        assert p.check()\n        assert p.exists()\n        assert p.isdir()\n        assert not p.isfile()\n\n    def test_parts(self, path1):\n        newpath = path1.join(\"sampledir\", \"otherfile\")\n        par = newpath.parts()[-3:]\n        assert par == [path1, path1.join(\"sampledir\"), newpath]\n\n        revpar = newpath.parts(reverse=True)[:3]\n        assert revpar == [newpath, path1.join(\"sampledir\"), path1]\n\n    def test_common(self, path1):\n        other = path1.join(\"sampledir\")\n        x = other.common(path1)\n        assert x == path1\n\n    # def test_parents_nonexisting_file(self, path1):\n    #    newpath = path1 / 'dirnoexist' / 'nonexisting file'\n    #    par = list(newpath.parents())\n    #    assert par[:2] == [path1 / 'dirnoexist', path1]\n\n    def test_basename_checks(self, path1):\n        newpath = path1.join(\"sampledir\")\n        assert newpath.check(basename=\"sampledir\")\n        assert newpath.check(notbasename=\"xyz\")\n        assert newpath.basename == \"sampledir\"\n\n    def test_basename(self, path1):\n        newpath = path1.join(\"sampledir\")\n        assert newpath.check(basename=\"sampledir\")\n        assert newpath.basename, \"sampledir\"\n\n    def test_dirname(self, path1):\n        newpath = path1.join(\"sampledir\")\n        assert newpath.dirname == str(path1)\n\n    def test_dirpath(self, path1):\n        newpath = path1.join(\"sampledir\")\n        assert newpath.dirpath() == path1\n\n    def test_dirpath_with_args(self, path1):\n        newpath = path1.join(\"sampledir\")\n        assert newpath.dirpath(\"x\") == path1.join(\"x\")\n\n    def test_newbasename(self, path1):\n        newpath = path1.join(\"samplefile\")\n        newbase = newpath.new(basename=\"samplefile2\")\n        assert newbase.basename == \"samplefile2\"\n        assert newbase.dirpath() == newpath.dirpath()\n\n    def test_not_exists(self, path1):\n        assert not path1.join(\"does_not_exist\").check()\n        assert path1.join(\"does_not_exist\").check(exists=0)\n\n    def test_exists(self, path1):\n        assert path1.join(\"samplefile\").check()\n        assert path1.join(\"samplefile\").check(exists=1)\n        assert path1.join(\"samplefile\").exists()\n        assert path1.join(\"samplefile\").isfile()\n        assert not path1.join(\"samplefile\").isdir()\n\n    def test_dir(self, path1):\n        # print repr(path1.join(\"sampledir\"))\n        assert path1.join(\"sampledir\").check(dir=1)\n        assert path1.join(\"samplefile\").check(notdir=1)\n        assert not path1.join(\"samplefile\").check(dir=1)\n        assert path1.join(\"samplefile\").exists()\n        assert not path1.join(\"samplefile\").isdir()\n        assert path1.join(\"samplefile\").isfile()\n\n    def test_fnmatch_file(self, path1):\n        assert path1.join(\"samplefile\").check(fnmatch=\"s*e\")\n        assert path1.join(\"samplefile\").fnmatch(\"s*e\")\n        assert not path1.join(\"samplefile\").fnmatch(\"s*x\")\n        assert not path1.join(\"samplefile\").check(fnmatch=\"s*x\")\n\n    # def test_fnmatch_dir(self, path1):\n\n    #    pattern = path1.sep.join(['s*file'])\n    #    sfile = path1.join(\"samplefile\")\n    #    assert sfile.check(fnmatch=pattern)\n\n    def test_relto(self, path1):\n        p = path1.join(\"sampledir\", \"otherfile\")\n        assert p.relto(path1) == p.sep.join([\"sampledir\", \"otherfile\"])\n        assert p.check(relto=path1)\n        assert path1.check(notrelto=p)\n        assert not path1.check(relto=p)\n\n    def test_bestrelpath(self, path1):\n        curdir = path1\n        sep = curdir.sep\n        s = curdir.bestrelpath(curdir)\n        assert s == \".\"\n        s = curdir.bestrelpath(curdir.join(\"hello\", \"world\"))\n        assert s == \"hello\" + sep + \"world\"\n\n        s = curdir.bestrelpath(curdir.dirpath().join(\"sister\"))\n        assert s == \"..\" + sep + \"sister\"\n        assert curdir.bestrelpath(curdir.dirpath()) == \"..\"\n\n        assert curdir.bestrelpath(\"hello\") == \"hello\"\n\n    def test_relto_not_relative(self, path1):\n        l1 = path1.join(\"bcde\")\n        l2 = path1.join(\"b\")\n        assert not l1.relto(l2)\n        assert not l2.relto(l1)\n\n    def test_listdir(self, path1):\n        p = path1.listdir()\n        assert path1.join(\"sampledir\") in p\n        assert path1.join(\"samplefile\") in p\n        with pytest.raises(error.ENOTDIR):\n            path1.join(\"samplefile\").listdir()\n\n    def test_listdir_fnmatchstring(self, path1):\n        p = path1.listdir(\"s*dir\")\n        assert len(p)\n        assert p[0], path1.join(\"sampledir\")\n\n    def test_listdir_filter(self, path1):\n        p = path1.listdir(lambda x: x.check(dir=1))\n        assert path1.join(\"sampledir\") in p\n        assert path1.join(\"samplefile\") not in p\n\n    def test_listdir_sorted(self, path1):\n        p = path1.listdir(lambda x: x.check(basestarts=\"sample\"), sort=True)\n        assert path1.join(\"sampledir\") == p[0]\n        assert path1.join(\"samplefile\") == p[1]\n        assert path1.join(\"samplepickle\") == p[2]\n\n    def test_visit_nofilter(self, path1):\n        lst = []\n        for i in path1.visit():\n            lst.append(i.relto(path1))\n        assert \"sampledir\" in lst\n        assert path1.sep.join([\"sampledir\", \"otherfile\"]) in lst\n\n    def test_visit_norecurse(self, path1):\n        lst = []\n        for i in path1.visit(None, lambda x: x.basename != \"sampledir\"):\n            lst.append(i.relto(path1))\n        assert \"sampledir\" in lst\n        assert path1.sep.join([\"sampledir\", \"otherfile\"]) not in lst\n\n    @pytest.mark.parametrize(\n        \"fil\",\n        [\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info < (3,6)\")(b\"*dir\")],\n    )\n    def test_visit_filterfunc_is_string(self, path1, fil):\n        lst = []\n        for i in path1.visit(fil):\n            lst.append(i.relto(path1))\n        assert len(lst), 2\n        assert \"sampledir\" in lst\n        assert \"otherdir\" in lst\n\n    def test_visit_ignore(self, path1):\n        p = path1.join(\"nonexisting\")\n        assert list(p.visit(ignore=error.ENOENT)) == []\n\n    def test_visit_endswith(self, path1):\n        p = []\n        for i in path1.visit(lambda x: x.check(endswith=\"file\")):\n            p.append(i.relto(path1))\n        assert path1.sep.join([\"sampledir\", \"otherfile\"]) in p\n        assert \"samplefile\" in p\n\n    def test_cmp(self, path1):\n        path1 = path1.join(\"samplefile\")\n        path2 = path1.join(\"samplefile2\")\n        assert (path1 < path2) == (\"samplefile\" < \"samplefile2\")\n        assert not (path1 < path1)\n\n    def test_simple_read(self, path1):\n        with ignore_encoding_warning():\n            x = path1.join(\"samplefile\").read(\"r\")\n        assert x == \"samplefile\\n\"\n\n    def test_join_div_operator(self, path1):\n        newpath = path1 / \"/sampledir\" / \"/test//\"\n        newpath2 = path1.join(\"sampledir\", \"test\")\n        assert newpath == newpath2\n\n    def test_ext(self, path1):\n        newpath = path1.join(\"sampledir.ext\")\n        assert newpath.ext == \".ext\"\n        newpath = path1.join(\"sampledir\")\n        assert not newpath.ext\n\n    def test_purebasename(self, path1):\n        newpath = path1.join(\"samplefile.py\")\n        assert newpath.purebasename == \"samplefile\"\n\n    def test_multiple_parts(self, path1):\n        newpath = path1.join(\"samplefile.py\")\n        dirname, purebasename, basename, ext = newpath._getbyspec(\n            \"dirname,purebasename,basename,ext\"\n        )\n        assert str(path1).endswith(dirname)  # be careful with win32 'drive'\n        assert purebasename == \"samplefile\"\n        assert basename == \"samplefile.py\"\n        assert ext == \".py\"\n\n    def test_dotted_name_ext(self, path1):\n        newpath = path1.join(\"a.b.c\")\n        ext = newpath.ext\n        assert ext == \".c\"\n        assert newpath.ext == \".c\"\n\n    def test_newext(self, path1):\n        newpath = path1.join(\"samplefile.py\")\n        newext = newpath.new(ext=\".txt\")\n        assert newext.basename == \"samplefile.txt\"\n        assert newext.purebasename == \"samplefile\"\n\n    def test_readlines(self, path1):\n        fn = path1.join(\"samplefile\")\n        with ignore_encoding_warning():\n            contents = fn.readlines()\n        assert contents == [\"samplefile\\n\"]\n\n    def test_readlines_nocr(self, path1):\n        fn = path1.join(\"samplefile\")\n        with ignore_encoding_warning():\n            contents = fn.readlines(cr=0)\n        assert contents == [\"samplefile\", \"\"]\n\n    def test_file(self, path1):\n        assert path1.join(\"samplefile\").check(file=1)\n\n    def test_not_file(self, path1):\n        assert not path1.join(\"sampledir\").check(file=1)\n        assert path1.join(\"sampledir\").check(file=0)\n\n    def test_non_existent(self, path1):\n        assert path1.join(\"sampledir.nothere\").check(dir=0)\n        assert path1.join(\"sampledir.nothere\").check(file=0)\n        assert path1.join(\"sampledir.nothere\").check(notfile=1)\n        assert path1.join(\"sampledir.nothere\").check(notdir=1)\n        assert path1.join(\"sampledir.nothere\").check(notexists=1)\n        assert not path1.join(\"sampledir.nothere\").check(notfile=0)\n\n    #    pattern = path1.sep.join(['s*file'])\n    #    sfile = path1.join(\"samplefile\")\n    #    assert sfile.check(fnmatch=pattern)\n\n    def test_size(self, path1):\n        url = path1.join(\"samplefile\")\n        assert url.size() > len(\"samplefile\")\n\n    def test_mtime(self, path1):\n        url = path1.join(\"samplefile\")\n        assert url.mtime() > 0\n\n    def test_relto_wrong_type(self, path1):\n        with pytest.raises(TypeError):\n            path1.relto(42)\n\n    def test_load(self, path1):\n        p = path1.join(\"samplepickle\")\n        obj = p.load()\n        assert type(obj) is dict\n        assert obj.get(\"answer\", None) == 42\n\n    def test_visit_filesonly(self, path1):\n        p = []\n        for i in path1.visit(lambda x: x.check(file=1)):\n            p.append(i.relto(path1))\n        assert \"sampledir\" not in p\n        assert path1.sep.join([\"sampledir\", \"otherfile\"]) in p\n\n    def test_visit_nodotfiles(self, path1):\n        p = []\n        for i in path1.visit(lambda x: x.check(dotfile=0)):\n            p.append(i.relto(path1))\n        assert \"sampledir\" in p\n        assert path1.sep.join([\"sampledir\", \"otherfile\"]) in p\n        assert \".dotfile\" not in p\n\n    def test_visit_breadthfirst(self, path1):\n        lst = []\n        for i in path1.visit(bf=True):\n            lst.append(i.relto(path1))\n        for i, p in enumerate(lst):\n            if path1.sep in p:\n                for j in range(i, len(lst)):\n                    assert path1.sep in lst[j]\n                break\n        else:\n            pytest.fail(\"huh\")\n\n    def test_visit_sort(self, path1):\n        lst = []\n        for i in path1.visit(bf=True, sort=True):\n            lst.append(i.relto(path1))\n        for i, p in enumerate(lst):\n            if path1.sep in p:\n                break\n        assert lst[:i] == sorted(lst[:i])\n        assert lst[i:] == sorted(lst[i:])\n\n    def test_endswith(self, path1):\n        def chk(p):\n            return p.check(endswith=\"pickle\")\n\n        assert not chk(path1)\n        assert not chk(path1.join(\"samplefile\"))\n        assert chk(path1.join(\"somepickle\"))\n\n    def test_copy_file(self, path1):\n        otherdir = path1.join(\"otherdir\")\n        initpy = otherdir.join(\"__init__.py\")\n        copied = otherdir.join(\"copied\")\n        initpy.copy(copied)\n        try:\n            assert copied.check()\n            s1 = initpy.read_text(encoding=\"utf-8\")\n            s2 = copied.read_text(encoding=\"utf-8\")\n            assert s1 == s2\n        finally:\n            if copied.check():\n                copied.remove()\n\n    def test_copy_dir(self, path1):\n        otherdir = path1.join(\"otherdir\")\n        copied = path1.join(\"newdir\")\n        try:\n            otherdir.copy(copied)\n            assert copied.check(dir=1)\n            assert copied.join(\"__init__.py\").check(file=1)\n            s1 = otherdir.join(\"__init__.py\").read_text(encoding=\"utf-8\")\n            s2 = copied.join(\"__init__.py\").read_text(encoding=\"utf-8\")\n            assert s1 == s2\n        finally:\n            if copied.check(dir=1):\n                copied.remove(rec=1)\n\n    def test_remove_file(self, path1):\n        d = path1.ensure(\"todeleted\")\n        assert d.check()\n        d.remove()\n        assert not d.check()\n\n    def test_remove_dir_recursive_by_default(self, path1):\n        d = path1.ensure(\"to\", \"be\", \"deleted\")\n        assert d.check()\n        p = path1.join(\"to\")\n        p.remove()\n        assert not p.check()\n\n    def test_ensure_dir(self, path1):\n        b = path1.ensure_dir(\"001\", \"002\")\n        assert b.basename == \"002\"\n        assert b.isdir()\n\n    def test_mkdir_and_remove(self, path1):\n        tmpdir = path1\n        with pytest.raises(error.EEXIST):\n            tmpdir.mkdir(\"sampledir\")\n        new = tmpdir.join(\"mktest1\")\n        new.mkdir()\n        assert new.check(dir=1)\n        new.remove()\n\n        new = tmpdir.mkdir(\"mktest\")\n        assert new.check(dir=1)\n        new.remove()\n        assert tmpdir.join(\"mktest\") == new\n\n    def test_move_file(self, path1):\n        p = path1.join(\"samplefile\")\n        newp = p.dirpath(\"moved_samplefile\")\n        p.move(newp)\n        try:\n            assert newp.check(file=1)\n            assert not p.check()\n        finally:\n            dp = newp.dirpath()\n            if hasattr(dp, \"revert\"):\n                dp.revert()\n            else:\n                newp.move(p)\n                assert p.check()\n\n    def test_move_dir(self, path1):\n        source = path1.join(\"sampledir\")\n        dest = path1.join(\"moveddir\")\n        source.move(dest)\n        assert dest.check(dir=1)\n        assert dest.join(\"otherfile\").check(file=1)\n        assert not source.join(\"sampledir\").check()\n\n    def test_fspath_protocol_match_strpath(self, path1):\n        assert path1.__fspath__() == path1.strpath\n\n    def test_fspath_func_match_strpath(self, path1):\n        from os import fspath\n\n        assert fspath(path1) == path1.strpath\n\n    @pytest.mark.skip(\"sys.version_info < (3,6)\")\n    def test_fspath_open(self, path1):\n        f = path1.join(\"opentestfile\")\n        open(f)\n\n    @pytest.mark.skip(\"sys.version_info < (3,6)\")\n    def test_fspath_fsencode(self, path1):\n        from os import fsencode\n\n        assert fsencode(path1) == fsencode(path1.strpath)\n\n\ndef setuptestfs(path):\n    if path.join(\"samplefile\").check():\n        return\n    # print \"setting up test fs for\", repr(path)\n    samplefile = path.ensure(\"samplefile\")\n    samplefile.write_text(\"samplefile\\n\", encoding=\"utf-8\")\n\n    execfile = path.ensure(\"execfile\")\n    execfile.write_text(\"x=42\", encoding=\"utf-8\")\n\n    execfilepy = path.ensure(\"execfile.py\")\n    execfilepy.write_text(\"x=42\", encoding=\"utf-8\")\n\n    d = {1: 2, \"hello\": \"world\", \"answer\": 42}\n    path.ensure(\"samplepickle\").dump(d)\n\n    sampledir = path.ensure(\"sampledir\", dir=1)\n    sampledir.ensure(\"otherfile\")\n\n    otherdir = path.ensure(\"otherdir\", dir=1)\n    otherdir.ensure(\"__init__.py\")\n\n    module_a = otherdir.ensure(\"a.py\")\n    module_a.write_text(\"from .b import stuff as result\\n\", encoding=\"utf-8\")\n    module_b = otherdir.ensure(\"b.py\")\n    module_b.write_text('stuff=\"got it\"\\n', encoding=\"utf-8\")\n    module_c = otherdir.ensure(\"c.py\")\n    module_c.write_text(\n        \"\"\"import py;\nimport otherdir.a\nvalue = otherdir.a.result\n\"\"\",\n        encoding=\"utf-8\",\n    )\n    module_d = otherdir.ensure(\"d.py\")\n    module_d.write_text(\n        \"\"\"import py;\nfrom otherdir import a\nvalue2 = a.result\n\"\"\",\n        encoding=\"utf-8\",\n    )\n\n\nwin32only = pytest.mark.skipif(\n    \"not (sys.platform == 'win32' or getattr(os, '_name', None) == 'nt')\"\n)\nskiponwin32 = pytest.mark.skipif(\n    \"sys.platform == 'win32' or getattr(os, '_name', None) == 'nt'\"\n)\n\nATIME_RESOLUTION = 0.01\n\n\n@pytest.fixture(scope=\"session\")\ndef path1(tmpdir_factory):\n    path = tmpdir_factory.mktemp(\"path\")\n    setuptestfs(path)\n    yield path\n    assert path.join(\"samplefile\").check()\n\n\n@pytest.fixture\ndef fake_fspath_obj(request):\n    class FakeFSPathClass:\n        def __init__(self, path):\n            self._path = path\n\n        def __fspath__(self):\n            return self._path\n\n    return FakeFSPathClass(os.path.join(\"this\", \"is\", \"a\", \"fake\", \"path\"))\n\n\ndef batch_make_numbered_dirs(rootdir, repeats):\n    for i in range(repeats):\n        dir_ = local.make_numbered_dir(prefix=\"repro-\", rootdir=rootdir)\n        file_ = dir_.join(\"foo\")\n        file_.write_text(f\"{i}\", encoding=\"utf-8\")\n        actual = int(file_.read_text(encoding=\"utf-8\"))\n        assert (\n            actual == i\n        ), f\"int(file_.read_text(encoding='utf-8')) is {actual} instead of {i}\"\n        dir_.join(\".lock\").remove(ignore_errors=True)\n    return True\n\n\nclass TestLocalPath(CommonFSTests):\n    def test_join_normpath(self, tmpdir):\n        assert tmpdir.join(\".\") == tmpdir\n        p = tmpdir.join(f\"../{tmpdir.basename}\")\n        assert p == tmpdir\n        p = tmpdir.join(f\"..//{tmpdir.basename}/\")\n        assert p == tmpdir\n\n    @skiponwin32\n    def test_dirpath_abs_no_abs(self, tmpdir):\n        p = tmpdir.join(\"foo\")\n        assert p.dirpath(\"/bar\") == tmpdir.join(\"bar\")\n        assert tmpdir.dirpath(\"/bar\", abs=True) == local(\"/bar\")\n\n    def test_gethash(self, tmpdir):\n        from hashlib import md5\n        from hashlib import sha1 as sha\n\n        fn = tmpdir.join(\"testhashfile\")\n        data = b\"hello\"\n        fn.write(data, mode=\"wb\")\n        assert fn.computehash(\"md5\") == md5(data).hexdigest()\n        assert fn.computehash(\"sha1\") == sha(data).hexdigest()\n        with pytest.raises(ValueError):\n            fn.computehash(\"asdasd\")\n\n    def test_remove_removes_readonly_file(self, tmpdir):\n        readonly_file = tmpdir.join(\"readonly\").ensure()\n        readonly_file.chmod(0)\n        readonly_file.remove()\n        assert not readonly_file.check(exists=1)\n\n    def test_remove_removes_readonly_dir(self, tmpdir):\n        readonly_dir = tmpdir.join(\"readonlydir\").ensure(dir=1)\n        readonly_dir.chmod(int(\"500\", 8))\n        readonly_dir.remove()\n        assert not readonly_dir.check(exists=1)\n\n    def test_remove_removes_dir_and_readonly_file(self, tmpdir):\n        readonly_dir = tmpdir.join(\"readonlydir\").ensure(dir=1)\n        readonly_file = readonly_dir.join(\"readonlyfile\").ensure()\n        readonly_file.chmod(0)\n        readonly_dir.remove()\n        assert not readonly_dir.check(exists=1)\n\n    def test_remove_routes_ignore_errors(self, tmpdir, monkeypatch):\n        lst = []\n        monkeypatch.setattr(\"shutil.rmtree\", lambda *args, **kwargs: lst.append(kwargs))\n        tmpdir.remove()\n        assert not lst[0][\"ignore_errors\"]\n        for val in (True, False):\n            lst[:] = []\n            tmpdir.remove(ignore_errors=val)\n            assert lst[0][\"ignore_errors\"] == val\n\n    def test_initialize_curdir(self):\n        assert str(local()) == os.getcwd()\n\n    @skiponwin32\n    def test_chdir_gone(self, path1):\n        p = path1.ensure(\"dir_to_be_removed\", dir=1)\n        p.chdir()\n        p.remove()\n        pytest.raises(error.ENOENT, local)\n        assert path1.chdir() is None\n        assert os.getcwd() == str(path1)\n\n        with pytest.raises(error.ENOENT):\n            with p.as_cwd():\n                raise NotImplementedError\n\n    @skiponwin32\n    def test_chdir_gone_in_as_cwd(self, path1):\n        p = path1.ensure(\"dir_to_be_removed\", dir=1)\n        p.chdir()\n        p.remove()\n\n        with path1.as_cwd() as old:\n            assert old is None\n\n    def test_as_cwd(self, path1):\n        dir = path1.ensure(\"subdir\", dir=1)\n        old = local()\n        with dir.as_cwd() as x:\n            assert x == old\n            assert local() == dir\n        assert os.getcwd() == str(old)\n\n    def test_as_cwd_exception(self, path1):\n        old = local()\n        dir = path1.ensure(\"subdir\", dir=1)\n        with pytest.raises(ValueError):\n            with dir.as_cwd():\n                raise ValueError()\n        assert old == local()\n\n    def test_initialize_reldir(self, path1):\n        with path1.as_cwd():\n            p = local(\"samplefile\")\n            assert p.check()\n\n    def test_tilde_expansion(self, monkeypatch, tmpdir):\n        monkeypatch.setenv(\"HOME\", str(tmpdir))\n        p = local(\"~\", expanduser=True)\n        assert p == os.path.expanduser(\"~\")\n\n    @pytest.mark.skipif(\n        not sys.platform.startswith(\"win32\"), reason=\"case-insensitive only on windows\"\n    )\n    def test_eq_hash_are_case_insensitive_on_windows(self):\n        a = local(\"/some/path\")\n        b = local(\"/some/PATH\")\n        assert a == b\n        assert hash(a) == hash(b)\n        assert a in {b}\n        assert a in {b: \"b\"}\n\n    def test_eq_with_strings(self, path1):\n        path1 = path1.join(\"sampledir\")\n        path2 = str(path1)\n        assert path1 == path2\n        assert path2 == path1\n        path3 = path1.join(\"samplefile\")\n        assert path3 != path2\n        assert path2 != path3\n\n    def test_eq_with_none(self, path1):\n        assert path1 != None  # noqa: E711\n\n    def test_eq_non_ascii_unicode(self, path1):\n        path2 = path1.join(\"temp\")\n        path3 = path1.join(\"a\u00e7\u00e3o\")\n        path4 = path1.join(\"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\")\n\n        assert path2 != path3\n        assert path2 != path4\n        assert path4 != path3\n\n    def test_gt_with_strings(self, path1):\n        path2 = path1.join(\"sampledir\")\n        path3 = str(path1.join(\"ttt\"))\n        assert path3 > path2\n        assert path2 < path3\n        assert path2 < \"ttt\"\n        assert \"ttt\" > path2\n        path4 = path1.join(\"aaa\")\n        lst = [path2, path4, path3]\n        assert sorted(lst) == [path4, path2, path3]\n\n    def test_open_and_ensure(self, path1):\n        p = path1.join(\"sub1\", \"sub2\", \"file\")\n        with p.open(\"w\", ensure=1, encoding=\"utf-8\") as f:\n            f.write(\"hello\")\n        assert p.read_text(encoding=\"utf-8\") == \"hello\"\n\n    def test_write_and_ensure(self, path1):\n        p = path1.join(\"sub1\", \"sub2\", \"file\")\n        p.write_text(\"hello\", ensure=1, encoding=\"utf-8\")\n        assert p.read_text(encoding=\"utf-8\") == \"hello\"\n\n    @pytest.mark.parametrize(\"bin\", (False, True))\n    def test_dump(self, tmpdir, bin):\n        path = tmpdir.join(f\"dumpfile{int(bin)}\")\n        try:\n            d = {\"answer\": 42}\n            path.dump(d, bin=bin)\n            f = path.open(\"rb+\")\n            import pickle\n\n            dnew = pickle.load(f)\n            assert d == dnew\n        finally:\n            f.close()\n\n    def test_setmtime(self):\n        import tempfile\n        import time\n\n        try:\n            fd, name = tempfile.mkstemp()\n            os.close(fd)\n        except AttributeError:\n            name = tempfile.mktemp()\n            open(name, \"w\").close()\n        try:\n            mtime = int(time.time()) - 100\n            path = local(name)\n            assert path.mtime() != mtime\n            path.setmtime(mtime)\n            assert path.mtime() == mtime\n            path.setmtime()\n            assert path.mtime() != mtime\n        finally:\n            os.remove(name)\n\n    def test_normpath(self, path1):\n        new1 = path1.join(\"/otherdir\")\n        new2 = path1.join(\"otherdir\")\n        assert str(new1) == str(new2)\n\n    def test_mkdtemp_creation(self):\n        d = local.mkdtemp()\n        try:\n            assert d.check(dir=1)\n        finally:\n            d.remove(rec=1)\n\n    def test_tmproot(self):\n        d = local.mkdtemp()\n        tmproot = local.get_temproot()\n        try:\n            assert d.check(dir=1)\n            assert d.dirpath() == tmproot\n        finally:\n            d.remove(rec=1)\n\n    def test_chdir(self, tmpdir):\n        old = local()\n        try:\n            res = tmpdir.chdir()\n            assert str(res) == str(old)\n            assert os.getcwd() == str(tmpdir)\n        finally:\n            old.chdir()\n\n    def test_ensure_filepath_withdir(self, tmpdir):\n        newfile = tmpdir.join(\"test1\", \"test\")\n        newfile.ensure()\n        assert newfile.check(file=1)\n        newfile.write_text(\"42\", encoding=\"utf-8\")\n        newfile.ensure()\n        s = newfile.read_text(encoding=\"utf-8\")\n        assert s == \"42\"\n\n    def test_ensure_filepath_withoutdir(self, tmpdir):\n        newfile = tmpdir.join(\"test1file\")\n        t = newfile.ensure()\n        assert t == newfile\n        assert newfile.check(file=1)\n\n    def test_ensure_dirpath(self, tmpdir):\n        newfile = tmpdir.join(\"test1\", \"testfile\")\n        t = newfile.ensure(dir=1)\n        assert t == newfile\n        assert newfile.check(dir=1)\n\n    def test_ensure_non_ascii_unicode(self, tmpdir):\n        newfile = tmpdir.join(\"a\u00e7\u00e3o\", \"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\")\n        t = newfile.ensure(dir=1)\n        assert t == newfile\n        assert newfile.check(dir=1)\n\n    @pytest.mark.xfail(run=False, reason=\"unreliable est for long filenames\")\n    def test_long_filenames(self, tmpdir):\n        if sys.platform == \"win32\":\n            pytest.skip(\"win32: work around needed for path length limit\")\n        # see http://codespeak.net/pipermail/py-dev/2008q2/000922.html\n\n        # testing paths > 260 chars (which is Windows' limitation, but\n        # depending on how the paths are used), but > 4096 (which is the\n        # Linux' limitation) - the behaviour of paths with names > 4096 chars\n        # is undetermined\n        newfilename = \"/test\" * 60  # type:ignore[unreachable,unused-ignore]\n        l1 = tmpdir.join(newfilename)\n        l1.ensure(file=True)\n        l1.write_text(\"foo\", encoding=\"utf-8\")\n        l2 = tmpdir.join(newfilename)\n        assert l2.read_text(encoding=\"utf-8\") == \"foo\"\n\n    def test_visit_depth_first(self, tmpdir):\n        tmpdir.ensure(\"a\", \"1\")\n        tmpdir.ensure(\"b\", \"2\")\n        p3 = tmpdir.ensure(\"breadth\")\n        lst = list(tmpdir.visit(lambda x: x.check(file=1)))\n        assert len(lst) == 3\n        # check that breadth comes last\n        assert lst[2] == p3\n\n    def test_visit_rec_fnmatch(self, tmpdir):\n        p1 = tmpdir.ensure(\"a\", \"123\")\n        tmpdir.ensure(\".b\", \"345\")\n        lst = list(tmpdir.visit(\"???\", rec=\"[!.]*\"))\n        assert len(lst) == 1\n        # check that breadth comes last\n        assert lst[0] == p1\n\n    def test_fnmatch_file_abspath(self, tmpdir):\n        b = tmpdir.join(\"a\", \"b\")\n        assert b.fnmatch(os.sep.join(\"ab\"))\n        pattern = os.sep.join([str(tmpdir), \"*\", \"b\"])\n        assert b.fnmatch(pattern)\n\n    def test_sysfind(self):\n        name = sys.platform == \"win32\" and \"cmd\" or \"test\"\n        x = local.sysfind(name)\n        assert x.check(file=1)\n        assert local.sysfind(\"jaksdkasldqwe\") is None\n        assert local.sysfind(name, paths=[]) is None\n        x2 = local.sysfind(name, paths=[x.dirpath()])\n        assert x2 == x\n\n    def test_fspath_protocol_other_class(self, fake_fspath_obj):\n        # py.path is always absolute\n        py_path = local(fake_fspath_obj)\n        str_path = fake_fspath_obj.__fspath__()\n        assert py_path.check(endswith=str_path)\n        assert py_path.join(fake_fspath_obj).strpath == os.path.join(\n            py_path.strpath, str_path\n        )\n\n    @pytest.mark.xfail(\n        reason=\"#11603\", raises=(error.EEXIST, error.ENOENT), strict=False\n    )\n    def test_make_numbered_dir_multiprocess_safe(self, tmpdir):\n        # https://github.com/pytest-dev/py/issues/30\n        with multiprocessing.Pool() as pool:\n            results = [\n                pool.apply_async(batch_make_numbered_dirs, [tmpdir, 100])\n                for _ in range(20)\n            ]\n            for r in results:\n                assert r.get()\n\n\nclass TestExecutionOnWindows:\n    pytestmark = win32only\n\n    def test_sysfind_bat_exe_before(self, tmpdir, monkeypatch):\n        monkeypatch.setenv(\"PATH\", str(tmpdir), prepend=os.pathsep)\n        tmpdir.ensure(\"hello\")\n        h = tmpdir.ensure(\"hello.bat\")\n        x = local.sysfind(\"hello\")\n        assert x == h\n\n\nclass TestExecution:\n    pytestmark = skiponwin32\n\n    def test_sysfind_no_permission_ignored(self, monkeypatch, tmpdir):\n        noperm = tmpdir.ensure(\"noperm\", dir=True)\n        monkeypatch.setenv(\"PATH\", str(noperm), prepend=\":\")\n        noperm.chmod(0)\n        try:\n            assert local.sysfind(\"jaksdkasldqwe\") is None\n        finally:\n            noperm.chmod(0o644)\n\n    def test_sysfind_absolute(self):\n        x = local.sysfind(\"test\")\n        assert x.check(file=1)\n        y = local.sysfind(str(x))\n        assert y.check(file=1)\n        assert y == x\n\n    def test_sysfind_multiple(self, tmpdir, monkeypatch):\n        monkeypatch.setenv(\n            \"PATH\", \"{}:{}\".format(tmpdir.ensure(\"a\"), tmpdir.join(\"b\")), prepend=\":\"\n        )\n        tmpdir.ensure(\"b\", \"a\")\n        x = local.sysfind(\"a\", checker=lambda x: x.dirpath().basename == \"b\")\n        assert x.basename == \"a\"\n        assert x.dirpath().basename == \"b\"\n        assert local.sysfind(\"a\", checker=lambda x: None) is None\n\n    def test_sysexec(self):\n        x = local.sysfind(\"ls\")\n        out = x.sysexec(\"-a\")\n        for x in local().listdir():\n            assert out.find(x.basename) != -1\n\n    def test_sysexec_failing(self):\n        try:\n            from py._process.cmdexec import ExecutionFailed  # py library\n        except ImportError:\n            ExecutionFailed = RuntimeError  # py vendored\n        x = local.sysfind(\"false\")\n        with pytest.raises(ExecutionFailed):\n            x.sysexec(\"aksjdkasjd\")\n\n    def test_make_numbered_dir(self, tmpdir):\n        tmpdir.ensure(\"base.not_an_int\", dir=1)\n        for i in range(10):\n            numdir = local.make_numbered_dir(\n                prefix=\"base.\", rootdir=tmpdir, keep=2, lock_timeout=0\n            )\n            assert numdir.check()\n            assert numdir.basename == \"base.%d\" % i\n            if i >= 1:\n                assert numdir.new(ext=str(i - 1)).check()\n            if i >= 2:\n                assert numdir.new(ext=str(i - 2)).check()\n            if i >= 3:\n                assert not numdir.new(ext=str(i - 3)).check()\n\n    def test_make_numbered_dir_case(self, tmpdir):\n        \"\"\"make_numbered_dir does not make assumptions on the underlying\n        filesystem based on the platform and will assume it _could_ be case\n        insensitive.\n\n        See issues:\n        - https://github.com/pytest-dev/pytest/issues/708\n        - https://github.com/pytest-dev/pytest/issues/3451\n        \"\"\"\n        d1 = local.make_numbered_dir(\n            prefix=\"CAse.\",\n            rootdir=tmpdir,\n            keep=2,\n            lock_timeout=0,\n        )\n        d2 = local.make_numbered_dir(\n            prefix=\"caSE.\",\n            rootdir=tmpdir,\n            keep=2,\n            lock_timeout=0,\n        )\n        assert str(d1).lower() != str(d2).lower()\n        assert str(d2).endswith(\".1\")\n\n    def test_make_numbered_dir_NotImplemented_Error(self, tmpdir, monkeypatch):\n        def notimpl(x, y):\n            raise NotImplementedError(42)\n\n        monkeypatch.setattr(os, \"symlink\", notimpl)\n        x = tmpdir.make_numbered_dir(rootdir=tmpdir, lock_timeout=0)\n        assert x.relto(tmpdir)\n        assert x.check()\n\n    def test_locked_make_numbered_dir(self, tmpdir):\n        for i in range(10):\n            numdir = local.make_numbered_dir(prefix=\"base2.\", rootdir=tmpdir, keep=2)\n            assert numdir.check()\n            assert numdir.basename == \"base2.%d\" % i\n            for j in range(i):\n                assert numdir.new(ext=str(j)).check()\n\n    def test_error_preservation(self, path1):\n        pytest.raises(EnvironmentError, path1.join(\"qwoeqiwe\").mtime)\n        pytest.raises(EnvironmentError, path1.join(\"qwoeqiwe\").read)\n\n    # def test_parentdirmatch(self):\n    #    local.parentdirmatch('std', startmodule=__name__)\n    #\n\n\nclass TestImport:\n    @pytest.fixture(autouse=True)\n    def preserve_sys(self):\n        with mock.patch.dict(sys.modules):\n            with mock.patch.object(sys, \"path\", list(sys.path)):\n                yield\n\n    def test_pyimport(self, path1):\n        obj = path1.join(\"execfile.py\").pyimport()\n        assert obj.x == 42\n        assert obj.__name__ == \"execfile\"\n\n    def test_pyimport_renamed_dir_creates_mismatch(self, tmpdir, monkeypatch):\n        p = tmpdir.ensure(\"a\", \"test_x123.py\")\n        p.pyimport()\n        tmpdir.join(\"a\").move(tmpdir.join(\"b\"))\n        with pytest.raises(tmpdir.ImportMismatchError):\n            tmpdir.join(\"b\", \"test_x123.py\").pyimport()\n\n        # Errors can be ignored.\n        monkeypatch.setenv(\"PY_IGNORE_IMPORTMISMATCH\", \"1\")\n        tmpdir.join(\"b\", \"test_x123.py\").pyimport()\n\n        # PY_IGNORE_IMPORTMISMATCH=0 does not ignore error.\n        monkeypatch.setenv(\"PY_IGNORE_IMPORTMISMATCH\", \"0\")\n        with pytest.raises(tmpdir.ImportMismatchError):\n            tmpdir.join(\"b\", \"test_x123.py\").pyimport()\n\n    def test_pyimport_messy_name(self, tmpdir):\n        # http://bitbucket.org/hpk42/py-trunk/issue/129\n        path = tmpdir.ensure(\"foo__init__.py\")\n        path.pyimport()\n\n    def test_pyimport_dir(self, tmpdir):\n        p = tmpdir.join(\"hello_123\")\n        p_init = p.ensure(\"__init__.py\")\n        m = p.pyimport()\n        assert m.__name__ == \"hello_123\"\n        m = p_init.pyimport()\n        assert m.__name__ == \"hello_123\"\n\n    def test_pyimport_execfile_different_name(self, path1):\n        obj = path1.join(\"execfile.py\").pyimport(modname=\"0x.y.z\")\n        assert obj.x == 42\n        assert obj.__name__ == \"0x.y.z\"\n\n    def test_pyimport_a(self, path1):\n        otherdir = path1.join(\"otherdir\")\n        mod = otherdir.join(\"a.py\").pyimport()\n        assert mod.result == \"got it\"\n        assert mod.__name__ == \"otherdir.a\"\n\n    def test_pyimport_b(self, path1):\n        otherdir = path1.join(\"otherdir\")\n        mod = otherdir.join(\"b.py\").pyimport()\n        assert mod.stuff == \"got it\"\n        assert mod.__name__ == \"otherdir.b\"\n\n    def test_pyimport_c(self, path1):\n        otherdir = path1.join(\"otherdir\")\n        mod = otherdir.join(\"c.py\").pyimport()\n        assert mod.value == \"got it\"\n\n    def test_pyimport_d(self, path1):\n        otherdir = path1.join(\"otherdir\")\n        mod = otherdir.join(\"d.py\").pyimport()\n        assert mod.value2 == \"got it\"\n\n    def test_pyimport_and_import(self, tmpdir):\n        tmpdir.ensure(\"xxxpackage\", \"__init__.py\")\n        mod1path = tmpdir.ensure(\"xxxpackage\", \"module1.py\")\n        mod1 = mod1path.pyimport()\n        assert mod1.__name__ == \"xxxpackage.module1\"\n        from xxxpackage import module1\n\n        assert module1 is mod1\n\n    def test_pyimport_check_filepath_consistency(self, monkeypatch, tmpdir):\n        name = \"pointsback123\"\n        ModuleType = type(os)\n        p = tmpdir.ensure(name + \".py\")\n        with monkeypatch.context() as mp:\n            for ending in (\".pyc\", \"$py.class\", \".pyo\"):\n                mod = ModuleType(name)\n                pseudopath = tmpdir.ensure(name + ending)\n                mod.__file__ = str(pseudopath)\n                mp.setitem(sys.modules, name, mod)\n                newmod = p.pyimport()\n                assert mod == newmod\n        mod = ModuleType(name)\n        pseudopath = tmpdir.ensure(name + \"123.py\")\n        mod.__file__ = str(pseudopath)\n        monkeypatch.setitem(sys.modules, name, mod)\n        excinfo = pytest.raises(pseudopath.ImportMismatchError, p.pyimport)\n        modname, modfile, orig = excinfo.value.args\n        assert modname == name\n        assert modfile == pseudopath\n        assert orig == p\n        assert issubclass(pseudopath.ImportMismatchError, ImportError)\n\n    def test_issue131_pyimport_on__init__(self, tmpdir):\n        # __init__.py files may be namespace packages, and thus the\n        # __file__ of an imported module may not be ourselves\n        # see issue\n        p1 = tmpdir.ensure(\"proja\", \"__init__.py\")\n        p2 = tmpdir.ensure(\"sub\", \"proja\", \"__init__.py\")\n        m1 = p1.pyimport()\n        m2 = p2.pyimport()\n        assert m1 == m2\n\n    def test_ensuresyspath_append(self, tmpdir):\n        root1 = tmpdir.mkdir(\"root1\")\n        file1 = root1.ensure(\"x123.py\")\n        assert str(root1) not in sys.path\n        file1.pyimport(ensuresyspath=\"append\")\n        assert str(root1) == sys.path[-1]\n        assert str(root1) not in sys.path[:-1]\n\n\nclass TestImportlibImport:\n    OPTS = {\"ensuresyspath\": \"importlib\"}\n\n    def test_pyimport(self, path1):\n        obj = path1.join(\"execfile.py\").pyimport(**self.OPTS)\n        assert obj.x == 42\n        assert obj.__name__ == \"execfile\"\n\n    def test_pyimport_dir_fails(self, tmpdir):\n        p = tmpdir.join(\"hello_123\")\n        p.ensure(\"__init__.py\")\n        with pytest.raises(ImportError):\n            p.pyimport(**self.OPTS)\n\n    def test_pyimport_execfile_different_name(self, path1):\n        obj = path1.join(\"execfile.py\").pyimport(modname=\"0x.y.z\", **self.OPTS)\n        assert obj.x == 42\n        assert obj.__name__ == \"0x.y.z\"\n\n    def test_pyimport_relative_import_fails(self, path1):\n        otherdir = path1.join(\"otherdir\")\n        with pytest.raises(ImportError):\n            otherdir.join(\"a.py\").pyimport(**self.OPTS)\n\n    def test_pyimport_doesnt_use_sys_modules(self, tmpdir):\n        p = tmpdir.ensure(\"file738jsk.py\")\n        mod = p.pyimport(**self.OPTS)\n        assert mod.__name__ == \"file738jsk\"\n        assert \"file738jsk\" not in sys.modules\n\n\ndef test_pypkgdir(tmpdir):\n    pkg = tmpdir.ensure(\"pkg1\", dir=1)\n    pkg.ensure(\"__init__.py\")\n    pkg.ensure(\"subdir/__init__.py\")\n    assert pkg.pypkgpath() == pkg\n    assert pkg.join(\"subdir\", \"__init__.py\").pypkgpath() == pkg\n\n\ndef test_pypkgdir_unimportable(tmpdir):\n    pkg = tmpdir.ensure(\"pkg1-1\", dir=1)  # unimportable\n    pkg.ensure(\"__init__.py\")\n    subdir = pkg.ensure(\"subdir/__init__.py\").dirpath()\n    assert subdir.pypkgpath() == subdir\n    assert subdir.ensure(\"xyz.py\").pypkgpath() == subdir\n    assert not pkg.pypkgpath()\n\n\ndef test_isimportable():\n    try:\n        from py.path import isimportable  # py vendored version\n    except ImportError:\n        from py._path.local import isimportable  # py library\n\n    assert not isimportable(\"\")\n    assert isimportable(\"x\")\n    assert isimportable(\"x1\")\n    assert isimportable(\"x_1\")\n    assert isimportable(\"_\")\n    assert isimportable(\"_1\")\n    assert not isimportable(\"x-1\")\n    assert not isimportable(\"x:1\")\n\n\ndef test_homedir_from_HOME(monkeypatch):\n    path = os.getcwd()\n    monkeypatch.setenv(\"HOME\", path)\n    assert local._gethomedir() == local(path)\n\n\ndef test_homedir_not_exists(monkeypatch):\n    monkeypatch.delenv(\"HOME\", raising=False)\n    monkeypatch.delenv(\"HOMEDRIVE\", raising=False)\n    homedir = local._gethomedir()\n    assert homedir is None\n\n\ndef test_samefile(tmpdir):\n    assert tmpdir.samefile(tmpdir)\n    p = tmpdir.ensure(\"hello\")\n    assert p.samefile(p)\n    with p.dirpath().as_cwd():\n        assert p.samefile(p.basename)\n    if sys.platform == \"win32\":\n        p1 = p.__class__(str(p).lower())\n        p2 = p.__class__(str(p).upper())\n        assert p1.samefile(p2)\n\n\n@pytest.mark.skipif(not hasattr(os, \"symlink\"), reason=\"os.symlink not available\")\ndef test_samefile_symlink(tmpdir):\n    p1 = tmpdir.ensure(\"foo.txt\")\n    p2 = tmpdir.join(\"linked.txt\")\n    try:\n        os.symlink(str(p1), str(p2))\n    except (OSError, NotImplementedError) as e:\n        # on Windows this might fail if the user doesn't have special symlink permissions\n        # pypy3 on Windows doesn't implement os.symlink and raises NotImplementedError\n        pytest.skip(str(e.args[0]))\n\n    assert p1.samefile(p2)\n\n\ndef test_listdir_single_arg(tmpdir):\n    tmpdir.ensure(\"hello\")\n    assert tmpdir.listdir(\"hello\")[0].basename == \"hello\"\n\n\ndef test_mkdtemp_rootdir(tmpdir):\n    dtmp = local.mkdtemp(rootdir=tmpdir)\n    assert tmpdir.listdir() == [dtmp]\n\n\nclass TestWINLocalPath:\n    pytestmark = win32only\n\n    def test_owner_group_not_implemented(self, path1):\n        with pytest.raises(NotImplementedError):\n            _ = path1.stat().owner\n        with pytest.raises(NotImplementedError):\n            _ = path1.stat().group\n\n    def test_chmod_simple_int(self, path1):\n        mode = path1.stat().mode\n        # Ensure that we actually change the mode to something different.\n        path1.chmod(mode == 0 and 1 or 0)\n        try:\n            print(path1.stat().mode)\n            print(mode)\n            assert path1.stat().mode != mode\n        finally:\n            path1.chmod(mode)\n            assert path1.stat().mode == mode\n\n    def test_path_comparison_lowercase_mixed(self, path1):\n        t1 = path1.join(\"a_path\")\n        t2 = path1.join(\"A_path\")\n        assert t1 == t1\n        assert t1 == t2\n\n    def test_relto_with_mixed_case(self, path1):\n        t1 = path1.join(\"a_path\", \"fiLe\")\n        t2 = path1.join(\"A_path\")\n        assert t1.relto(t2) == \"fiLe\"\n\n    def test_allow_unix_style_paths(self, path1):\n        t1 = path1.join(\"a_path\")\n        assert t1 == str(path1) + \"\\\\a_path\"\n        t1 = path1.join(\"a_path/\")\n        assert t1 == str(path1) + \"\\\\a_path\"\n        t1 = path1.join(\"dir/a_path\")\n        assert t1 == str(path1) + \"\\\\dir\\\\a_path\"\n\n    def test_sysfind_in_currentdir(self, path1):\n        cmd = local.sysfind(\"cmd\")\n        root = cmd.new(dirname=\"\", basename=\"\")  # c:\\ in most installations\n        with root.as_cwd():\n            x = local.sysfind(cmd.relto(root))\n            assert x.check(file=1)\n\n    def test_fnmatch_file_abspath_posix_pattern_on_win32(self, tmpdir):\n        # path-matching patterns might contain a posix path separator '/'\n        # Test that we can match that pattern on windows.\n        import posixpath\n\n        b = tmpdir.join(\"a\", \"b\")\n        assert b.fnmatch(posixpath.sep.join(\"ab\"))\n        pattern = posixpath.sep.join([str(tmpdir), \"*\", \"b\"])\n        assert b.fnmatch(pattern)\n\n\nclass TestPOSIXLocalPath:\n    pytestmark = skiponwin32\n\n    def test_hardlink(self, tmpdir):\n        linkpath = tmpdir.join(\"test\")\n        filepath = tmpdir.join(\"file\")\n        filepath.write_text(\"Hello\", encoding=\"utf-8\")\n        nlink = filepath.stat().nlink\n        linkpath.mklinkto(filepath)\n        assert filepath.stat().nlink == nlink + 1\n\n    def test_symlink_are_identical(self, tmpdir):\n        filepath = tmpdir.join(\"file\")\n        filepath.write_text(\"Hello\", encoding=\"utf-8\")\n        linkpath = tmpdir.join(\"test\")\n        linkpath.mksymlinkto(filepath)\n        assert linkpath.readlink() == str(filepath)\n\n    def test_symlink_isfile(self, tmpdir):\n        linkpath = tmpdir.join(\"test\")\n        filepath = tmpdir.join(\"file\")\n        filepath.write_text(\"\", encoding=\"utf-8\")\n        linkpath.mksymlinkto(filepath)\n        assert linkpath.check(file=1)\n        assert not linkpath.check(link=0, file=1)\n        assert linkpath.islink()\n\n    def test_symlink_relative(self, tmpdir):\n        linkpath = tmpdir.join(\"test\")\n        filepath = tmpdir.join(\"file\")\n        filepath.write_text(\"Hello\", encoding=\"utf-8\")\n        linkpath.mksymlinkto(filepath, absolute=False)\n        assert linkpath.readlink() == \"file\"\n        assert filepath.read_text(encoding=\"utf-8\") == linkpath.read_text(\n            encoding=\"utf-8\"\n        )\n\n    def test_symlink_not_existing(self, tmpdir):\n        linkpath = tmpdir.join(\"testnotexisting\")\n        assert not linkpath.check(link=1)\n        assert linkpath.check(link=0)\n\n    def test_relto_with_root(self, path1, tmpdir):\n        y = path1.join(\"x\").relto(local(\"/\"))\n        assert y[0] == str(path1)[1]\n\n    def test_visit_recursive_symlink(self, tmpdir):\n        linkpath = tmpdir.join(\"test\")\n        linkpath.mksymlinkto(tmpdir)\n        visitor = tmpdir.visit(None, lambda x: x.check(link=0))\n        assert list(visitor) == [linkpath]\n\n    def test_symlink_isdir(self, tmpdir):\n        linkpath = tmpdir.join(\"test\")\n        linkpath.mksymlinkto(tmpdir)\n        assert linkpath.check(dir=1)\n        assert not linkpath.check(link=0, dir=1)\n\n    def test_symlink_remove(self, tmpdir):\n        linkpath = tmpdir.join(\"test\")\n        linkpath.mksymlinkto(linkpath)  # point to itself\n        assert linkpath.check(link=1)\n        linkpath.remove()\n        assert not linkpath.check()\n\n    def test_realpath_file(self, tmpdir):\n        linkpath = tmpdir.join(\"test\")\n        filepath = tmpdir.join(\"file\")\n        filepath.write_text(\"\", encoding=\"utf-8\")\n        linkpath.mksymlinkto(filepath)\n        realpath = linkpath.realpath()\n        assert realpath.basename == \"file\"\n\n    def test_owner(self, path1, tmpdir):\n        from grp import getgrgid  # type:ignore[attr-defined,unused-ignore]\n        from pwd import getpwuid  # type:ignore[attr-defined,unused-ignore]\n\n        stat = path1.stat()\n        assert stat.path == path1\n\n        uid = stat.uid\n        gid = stat.gid\n        owner = getpwuid(uid)[0]\n        group = getgrgid(gid)[0]\n\n        assert uid == stat.uid\n        assert owner == stat.owner\n        assert gid == stat.gid\n        assert group == stat.group\n\n    def test_stat_helpers(self, tmpdir, monkeypatch):\n        path1 = tmpdir.ensure(\"file\")\n        stat1 = path1.stat()\n        stat2 = tmpdir.stat()\n        assert stat1.isfile()\n        assert stat2.isdir()\n        assert not stat1.islink()\n        assert not stat2.islink()\n\n    def test_stat_non_raising(self, tmpdir):\n        path1 = tmpdir.join(\"file\")\n        pytest.raises(error.ENOENT, lambda: path1.stat())\n        res = path1.stat(raising=False)\n        assert res is None\n\n    def test_atime(self, tmpdir):\n        import time\n\n        path = tmpdir.ensure(\"samplefile\")\n        now = time.time()\n        atime1 = path.atime()\n        # we could wait here but timer resolution is very\n        # system dependent\n        path.read_binary()\n        time.sleep(ATIME_RESOLUTION)\n        atime2 = path.atime()\n        time.sleep(ATIME_RESOLUTION)\n        duration = time.time() - now\n        assert (atime2 - atime1) <= duration\n\n    def test_commondir(self, path1):\n        # XXX This is here in local until we find a way to implement this\n        #     using the subversion command line api.\n        p1 = path1.join(\"something\")\n        p2 = path1.join(\"otherthing\")\n        assert p1.common(p2) == path1\n        assert p2.common(p1) == path1\n\n    def test_commondir_nocommon(self, path1):\n        # XXX This is here in local until we find a way to implement this\n        #     using the subversion command line api.\n        p1 = path1.join(\"something\")\n        p2 = local(path1.sep + \"blabla\")\n        assert p1.common(p2) == \"/\"\n\n    def test_join_to_root(self, path1):\n        root = path1.parts()[0]\n        assert len(str(root)) == 1\n        assert str(root.join(\"a\")) == \"/a\"\n\n    def test_join_root_to_root_with_no_abs(self, path1):\n        nroot = path1.join(\"/\")\n        assert str(path1) == str(nroot)\n        assert path1 == nroot\n\n    def test_chmod_simple_int(self, path1):\n        mode = path1.stat().mode\n        path1.chmod(int(mode / 2))\n        try:\n            assert path1.stat().mode != mode\n        finally:\n            path1.chmod(mode)\n            assert path1.stat().mode == mode\n\n    def test_chmod_rec_int(self, path1):\n        # XXX fragile test\n        def recfilter(x):\n            return x.check(dotfile=0, link=0)\n\n        oldmodes = {}\n        for x in path1.visit(rec=recfilter):\n            oldmodes[x] = x.stat().mode\n        path1.chmod(int(\"772\", 8), rec=recfilter)\n        try:\n            for x in path1.visit(rec=recfilter):\n                assert x.stat().mode & int(\"777\", 8) == int(\"772\", 8)\n        finally:\n            for x, y in oldmodes.items():\n                x.chmod(y)\n\n    def test_copy_archiving(self, tmpdir):\n        unicode_fn = \"something-\\342\\200\\223.txt\"\n        f = tmpdir.ensure(\"a\", unicode_fn)\n        a = f.dirpath()\n        oldmode = f.stat().mode\n        newmode = oldmode ^ 1\n        f.chmod(newmode)\n        b = tmpdir.join(\"b\")\n        a.copy(b, mode=True)\n        assert b.join(f.basename).stat().mode == newmode\n\n    def test_copy_stat_file(self, tmpdir):\n        src = tmpdir.ensure(\"src\")\n        dst = tmpdir.join(\"dst\")\n        # a small delay before the copy\n        time.sleep(ATIME_RESOLUTION)\n        src.copy(dst, stat=True)\n        oldstat = src.stat()\n        newstat = dst.stat()\n        assert oldstat.mode == newstat.mode\n        assert (dst.atime() - src.atime()) < ATIME_RESOLUTION\n        assert (dst.mtime() - src.mtime()) < ATIME_RESOLUTION\n\n    def test_copy_stat_dir(self, tmpdir):\n        test_files = [\"a\", \"b\", \"c\"]\n        src = tmpdir.join(\"src\")\n        for f in test_files:\n            src.join(f).write_text(f, ensure=True, encoding=\"utf-8\")\n        dst = tmpdir.join(\"dst\")\n        # a small delay before the copy\n        time.sleep(ATIME_RESOLUTION)\n        src.copy(dst, stat=True)\n        for f in test_files:\n            oldstat = src.join(f).stat()\n            newstat = dst.join(f).stat()\n            assert (newstat.atime - oldstat.atime) < ATIME_RESOLUTION\n            assert (newstat.mtime - oldstat.mtime) < ATIME_RESOLUTION\n            assert oldstat.mode == newstat.mode\n\n    def test_chown_identity(self, path1):\n        owner = path1.stat().owner\n        group = path1.stat().group\n        path1.chown(owner, group)\n\n    def test_chown_dangling_link(self, path1):\n        owner = path1.stat().owner\n        group = path1.stat().group\n        x = path1.join(\"hello\")\n        x.mksymlinkto(\"qlwkejqwlek\")\n        try:\n            path1.chown(owner, group, rec=1)\n        finally:\n            x.remove(rec=0)\n\n    def test_chown_identity_rec_mayfail(self, path1):\n        owner = path1.stat().owner\n        group = path1.stat().group\n        path1.chown(owner, group)\n\n\nclass TestUnicode:\n    def test_join_ensure(self, tmpdir, monkeypatch):\n        if \"LANG\" not in os.environ:\n            pytest.skip(\"cannot run test without locale\")\n        x = local(tmpdir.strpath)\n        part = \"h\u00e4llo\"\n        y = x.ensure(part)\n        assert x.join(part) == y\n\n    def test_listdir(self, tmpdir):\n        if \"LANG\" not in os.environ:\n            pytest.skip(\"cannot run test without locale\")\n        x = local(tmpdir.strpath)\n        part = \"h\u00e4llo\"\n        y = x.ensure(part)\n        assert x.listdir(part)[0] == y\n\n    @pytest.mark.xfail(reason=\"changing read/write might break existing usages\")\n    def test_read_write(self, tmpdir):\n        x = tmpdir.join(\"hello\")\n        part = \"h\u00e4llo\"\n        with ignore_encoding_warning():\n            x.write(part)\n            assert x.read() == part\n            x.write(part.encode(sys.getdefaultencoding()))\n            assert x.read() == part.encode(sys.getdefaultencoding())\n\n\nclass TestBinaryAndTextMethods:\n    def test_read_binwrite(self, tmpdir):\n        x = tmpdir.join(\"hello\")\n        part = \"h\u00e4llo\"\n        part_utf8 = part.encode(\"utf8\")\n        x.write_binary(part_utf8)\n        assert x.read_binary() == part_utf8\n        s = x.read_text(encoding=\"utf8\")\n        assert s == part\n        assert isinstance(s, str)\n\n    def test_read_textwrite(self, tmpdir):\n        x = tmpdir.join(\"hello\")\n        part = \"h\u00e4llo\"\n        part_utf8 = part.encode(\"utf8\")\n        x.write_text(part, encoding=\"utf8\")\n        assert x.read_binary() == part_utf8\n        assert x.read_text(encoding=\"utf8\") == part\n\n    def test_default_encoding(self, tmpdir):\n        x = tmpdir.join(\"hello\")\n        # Can't use UTF8 as the default encoding (ASCII) doesn't support it\n        part = \"hello\"\n        x.write_text(part, \"ascii\")\n        s = x.read_text(\"ascii\")\n        assert s == part\n        assert type(s) is type(part)\n", "testing/examples/test_issue519.py": "from __future__ import annotations\n\nfrom _pytest.pytester import Pytester\n\n\ndef test_519(pytester: Pytester) -> None:\n    pytester.copy_example(\"issue_519.py\")\n    res = pytester.runpytest(\"issue_519.py\")\n    res.assert_outcomes(passed=8)\n", "testing/logging/test_reporting.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport io\nimport os\nimport re\nfrom typing import cast\n\nfrom _pytest.capture import CaptureManager\nfrom _pytest.config import ExitCode\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.pytester import Pytester\nfrom _pytest.terminal import TerminalReporter\nimport pytest\n\n\ndef test_nothing_logged(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import sys\n\n        def test_foo():\n            sys.stdout.write('text going to stdout')\n            sys.stderr.write('text going to stderr')\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 1\n    result.stdout.fnmatch_lines([\"*- Captured stdout call -*\", \"text going to stdout\"])\n    result.stdout.fnmatch_lines([\"*- Captured stderr call -*\", \"text going to stderr\"])\n    with pytest.raises(pytest.fail.Exception):\n        result.stdout.fnmatch_lines([\"*- Captured *log call -*\"])\n\n\ndef test_messages_logged(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import sys\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo():\n            sys.stdout.write('text going to stdout')\n            sys.stderr.write('text going to stderr')\n            logger.info('text going to logger')\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--log-level=INFO\")\n    assert result.ret == 1\n    result.stdout.fnmatch_lines([\"*- Captured *log call -*\", \"*text going to logger*\"])\n    result.stdout.fnmatch_lines([\"*- Captured stdout call -*\", \"text going to stdout\"])\n    result.stdout.fnmatch_lines([\"*- Captured stderr call -*\", \"text going to stderr\"])\n\n\ndef test_root_logger_affected(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n        logger = logging.getLogger()\n\n        def test_foo():\n            logger.info('info text ' + 'going to logger')\n            logger.warning('warning text ' + 'going to logger')\n            logger.error('error text ' + 'going to logger')\n\n            assert 0\n    \"\"\"\n    )\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n    result = pytester.runpytest(\"--log-level=ERROR\", \"--log-file=pytest.log\")\n    assert result.ret == 1\n\n    # The capture log calls in the stdout section only contain the\n    # logger.error msg, because of --log-level=ERROR.\n    result.stdout.fnmatch_lines([\"*error text going to logger*\"])\n    stdout = result.stdout.str()\n    assert \"warning text going to logger\" not in stdout\n    assert \"info text going to logger\" not in stdout\n\n    # The log file should only contain the error log messages and\n    # not the warning or info ones, because the root logger is set to\n    # ERROR using --log-level=ERROR.\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"info text going to logger\" not in contents\n        assert \"warning text going to logger\" not in contents\n        assert \"error text going to logger\" in contents\n\n\ndef test_log_cli_level_log_level_interaction(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n        logger = logging.getLogger()\n\n        def test_foo():\n            logger.debug('debug text ' + 'going to logger')\n            logger.info('info text ' + 'going to logger')\n            logger.warning('warning text ' + 'going to logger')\n            logger.error('error text ' + 'going to logger')\n            assert 0\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--log-cli-level=INFO\", \"--log-level=ERROR\")\n    assert result.ret == 1\n\n    result.stdout.fnmatch_lines(\n        [\n            \"*-- live log call --*\",\n            \"*INFO*info text going to logger\",\n            \"*WARNING*warning text going to logger\",\n            \"*ERROR*error text going to logger\",\n            \"=* 1 failed in *=\",\n        ]\n    )\n    result.stdout.no_re_match_line(\"DEBUG\")\n\n\ndef test_setup_logging(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def setup_function(function):\n            logger.info('text going to logger from setup')\n\n        def test_foo():\n            logger.info('text going to logger from call')\n            assert False\n    \"\"\"\n    )\n    result = pytester.runpytest(\"--log-level=INFO\")\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        [\n            \"*- Captured *log setup -*\",\n            \"*text going to logger from setup*\",\n            \"*- Captured *log call -*\",\n            \"*text going to logger from call*\",\n        ]\n    )\n\n\ndef test_teardown_logging(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo():\n            logger.info('text going to logger from call')\n\n        def teardown_function(function):\n            logger.info('text going to logger from teardown')\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--log-level=INFO\")\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        [\n            \"*- Captured *log call -*\",\n            \"*text going to logger from call*\",\n            \"*- Captured *log teardown -*\",\n            \"*text going to logger from teardown*\",\n        ]\n    )\n\n\n@pytest.mark.parametrize(\"enabled\", [True, False])\ndef test_log_cli_enabled_disabled(pytester: Pytester, enabled: bool) -> None:\n    msg = \"critical message logged by test\"\n    pytester.makepyfile(\n        f\"\"\"\n        import logging\n        def test_log_cli():\n            logging.critical(\"{msg}\")\n    \"\"\"\n    )\n    if enabled:\n        pytester.makeini(\n            \"\"\"\n            [pytest]\n            log_cli=true\n        \"\"\"\n        )\n    result = pytester.runpytest()\n    if enabled:\n        result.stdout.fnmatch_lines(\n            [\n                \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                \"*-- live log call --*\",\n                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                \"PASSED*\",\n            ]\n        )\n    else:\n        assert msg not in result.stdout.str()\n\n\ndef test_log_cli_default_level(pytester: Pytester) -> None:\n    # Default log file level\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_cli(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_cli_handler.level == logging.NOTSET\n            logging.getLogger('catchlog').info(\"INFO message won't be shown\")\n            logging.getLogger('catchlog').warning(\"WARNING message will be shown\")\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines(\n        [\n            \"test_log_cli_default_level.py::test_log_cli \",\n            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*INFO message won't be shown*\")\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n\n\ndef test_log_cli_default_level_multiple_tests(\n    pytester: Pytester, request: FixtureRequest\n) -> None:\n    \"\"\"Ensure we reset the first newline added by the live logger between tests\"\"\"\n    filename = request.node.name + \".py\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_log_1():\n            logging.warning(\"log message from test_log_1\")\n\n        def test_log_2():\n            logging.warning(\"log message from test_log_2\")\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"{filename}::test_log_1 \",\n            \"*WARNING*log message from test_log_1*\",\n            \"PASSED *50%*\",\n            f\"{filename}::test_log_2 \",\n            \"*WARNING*log message from test_log_2*\",\n            \"PASSED *100%*\",\n            \"=* 2 passed in *=\",\n        ]\n    )\n\n\ndef test_log_cli_default_level_sections(\n    pytester: Pytester, request: FixtureRequest\n) -> None:\n    \"\"\"Check that with live logging enable we are printing the correct headers during\n    start/setup/call/teardown/finish.\"\"\"\n    filename = request.node.name + \".py\"\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        import logging\n\n        def pytest_runtest_logstart():\n            logging.warning('>>>>> START >>>>>')\n\n        def pytest_runtest_logfinish():\n            logging.warning('<<<<< END <<<<<<<')\n    \"\"\"\n    )\n\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n\n        @pytest.fixture\n        def fix(request):\n            logging.warning(\"log message from setup of {}\".format(request.node.name))\n            yield\n            logging.warning(\"log message from teardown of {}\".format(request.node.name))\n\n        def test_log_1(fix):\n            logging.warning(\"log message from test_log_1\")\n\n        def test_log_2(fix):\n            logging.warning(\"log message from test_log_2\")\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"{filename}::test_log_1 \",\n            \"*-- live log start --*\",\n            \"*WARNING* >>>>> START >>>>>*\",\n            \"*-- live log setup --*\",\n            \"*WARNING*log message from setup of test_log_1*\",\n            \"*-- live log call --*\",\n            \"*WARNING*log message from test_log_1*\",\n            \"PASSED *50%*\",\n            \"*-- live log teardown --*\",\n            \"*WARNING*log message from teardown of test_log_1*\",\n            \"*-- live log finish --*\",\n            \"*WARNING* <<<<< END <<<<<<<*\",\n            f\"{filename}::test_log_2 \",\n            \"*-- live log start --*\",\n            \"*WARNING* >>>>> START >>>>>*\",\n            \"*-- live log setup --*\",\n            \"*WARNING*log message from setup of test_log_2*\",\n            \"*-- live log call --*\",\n            \"*WARNING*log message from test_log_2*\",\n            \"PASSED *100%*\",\n            \"*-- live log teardown --*\",\n            \"*WARNING*log message from teardown of test_log_2*\",\n            \"*-- live log finish --*\",\n            \"*WARNING* <<<<< END <<<<<<<*\",\n            \"=* 2 passed in *=\",\n        ]\n    )\n\n\ndef test_live_logs_unknown_sections(\n    pytester: Pytester, request: FixtureRequest\n) -> None:\n    \"\"\"Check that with live logging enable we are printing the correct headers during\n    start/setup/call/teardown/finish.\"\"\"\n    filename = request.node.name + \".py\"\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        import logging\n\n        def pytest_runtest_protocol(item, nextitem):\n            logging.warning('Unknown Section!')\n\n        def pytest_runtest_logstart():\n            logging.warning('>>>>> START >>>>>')\n\n        def pytest_runtest_logfinish():\n            logging.warning('<<<<< END <<<<<<<')\n    \"\"\"\n    )\n\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n\n        @pytest.fixture\n        def fix(request):\n            logging.warning(\"log message from setup of {}\".format(request.node.name))\n            yield\n            logging.warning(\"log message from teardown of {}\".format(request.node.name))\n\n        def test_log_1(fix):\n            logging.warning(\"log message from test_log_1\")\n\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            \"*WARNING*Unknown Section*\",\n            f\"{filename}::test_log_1 \",\n            \"*WARNING* >>>>> START >>>>>*\",\n            \"*-- live log setup --*\",\n            \"*WARNING*log message from setup of test_log_1*\",\n            \"*-- live log call --*\",\n            \"*WARNING*log message from test_log_1*\",\n            \"PASSED *100%*\",\n            \"*-- live log teardown --*\",\n            \"*WARNING*log message from teardown of test_log_1*\",\n            \"*WARNING* <<<<< END <<<<<<<*\",\n            \"=* 1 passed in *=\",\n        ]\n    )\n\n\ndef test_sections_single_new_line_after_test_outcome(\n    pytester: Pytester, request: FixtureRequest\n) -> None:\n    \"\"\"Check that only a single new line is written between log messages during\n    teardown/finish.\"\"\"\n    filename = request.node.name + \".py\"\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n        import logging\n\n        def pytest_runtest_logstart():\n            logging.warning('>>>>> START >>>>>')\n\n        def pytest_runtest_logfinish():\n            logging.warning('<<<<< END <<<<<<<')\n            logging.warning('<<<<< END <<<<<<<')\n    \"\"\"\n    )\n\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n\n        @pytest.fixture\n        def fix(request):\n            logging.warning(\"log message from setup of {}\".format(request.node.name))\n            yield\n            logging.warning(\"log message from teardown of {}\".format(request.node.name))\n            logging.warning(\"log message from teardown of {}\".format(request.node.name))\n\n        def test_log_1(fix):\n            logging.warning(\"log message from test_log_1\")\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines(\n        [\n            f\"{filename}::test_log_1 \",\n            \"*-- live log start --*\",\n            \"*WARNING* >>>>> START >>>>>*\",\n            \"*-- live log setup --*\",\n            \"*WARNING*log message from setup of test_log_1*\",\n            \"*-- live log call --*\",\n            \"*WARNING*log message from test_log_1*\",\n            \"PASSED *100%*\",\n            \"*-- live log teardown --*\",\n            \"*WARNING*log message from teardown of test_log_1*\",\n            \"*-- live log finish --*\",\n            \"*WARNING* <<<<< END <<<<<<<*\",\n            \"*WARNING* <<<<< END <<<<<<<*\",\n            \"=* 1 passed in *=\",\n        ]\n    )\n    assert (\n        re.search(\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n            result.stdout.str(),\n            re.MULTILINE,\n        )\n        is not None\n    )\n    assert (\n        re.search(\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n            result.stdout.str(),\n            re.MULTILINE,\n        )\n        is not None\n    )\n\n\ndef test_log_cli_level(pytester: Pytester) -> None:\n    # Default log file level\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_cli(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_cli_handler.level == logging.INFO\n            logging.getLogger('catchlog').debug(\"This log message won't be shown\")\n            logging.getLogger('catchlog').info(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"-s\", \"--log-cli-level=INFO\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_log_cli_level.py*This log message will be shown\",\n            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*This log message won't be shown*\")\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n\n    result = pytester.runpytest(\"-s\", \"--log-level=INFO\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_log_cli_level.py* This log message will be shown\",\n            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*This log message won't be shown*\")\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n\n\ndef test_log_cli_ini_level(pytester: Pytester) -> None:\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n        log_cli_level = INFO\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_cli(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_cli_handler.level == logging.INFO\n            logging.getLogger('catchlog').debug(\"This log message won't be shown\")\n            logging.getLogger('catchlog').info(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"-s\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n        ]\n    )\n    result.stdout.no_fnmatch_line(\"*This log message won't be shown*\")\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n\n\n@pytest.mark.parametrize(\n    \"cli_args\",\n    [\"\", \"--log-level=WARNING\", \"--log-file-level=WARNING\", \"--log-cli-level=WARNING\"],\n)\ndef test_log_cli_auto_enable(pytester: Pytester, cli_args: str) -> None:\n    \"\"\"Check that live logs are enabled if --log-level or --log-cli-level is passed on the CLI.\n    It should not be auto enabled if the same configs are set on the INI file.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_log_1():\n            logging.info(\"log message from test_log_1 not to be shown\")\n            logging.warning(\"log message from test_log_1\")\n\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_level=INFO\n        log_cli_level=INFO\n    \"\"\"\n    )\n\n    result = pytester.runpytest(cli_args)\n    stdout = result.stdout.str()\n    if cli_args == \"--log-cli-level=WARNING\":\n        result.stdout.fnmatch_lines(\n            [\n                \"*::test_log_1 \",\n                \"*-- live log call --*\",\n                \"*WARNING*log message from test_log_1*\",\n                \"PASSED *100%*\",\n                \"=* 1 passed in *=\",\n            ]\n        )\n        assert \"INFO\" not in stdout\n    else:\n        result.stdout.fnmatch_lines(\n            [\"*test_log_cli_auto_enable*100%*\", \"=* 1 passed in *=\"]\n        )\n        assert \"INFO\" not in stdout\n        assert \"WARNING\" not in stdout\n\n\ndef test_log_file_cli(pytester: Pytester) -> None:\n    # Default log file level\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_file(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_file_handler.level == logging.WARNING\n            logging.getLogger('catchlog').info(\"This log message won't be shown\")\n            logging.getLogger('catchlog').warning(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    result = pytester.runpytest(\n        \"-s\", f\"--log-file={log_file}\", \"--log-file-level=WARNING\"\n    )\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines([\"test_log_file_cli.py PASSED\"])\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"This log message will be shown\" in contents\n        assert \"This log message won't be shown\" not in contents\n\n\ndef test_log_file_mode_cli(pytester: Pytester) -> None:\n    # Default log file level\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_file(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_file_handler.level == logging.WARNING\n            logging.getLogger('catchlog').info(\"This log message won't be shown\")\n            logging.getLogger('catchlog').warning(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    with open(log_file, mode=\"w\", encoding=\"utf-8\") as wfh:\n        wfh.write(\"A custom header\\n\")\n\n    result = pytester.runpytest(\n        \"-s\",\n        f\"--log-file={log_file}\",\n        \"--log-file-mode=a\",\n        \"--log-file-level=WARNING\",\n    )\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines([\"test_log_file_mode_cli.py PASSED\"])\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"A custom header\" in contents\n        assert \"This log message will be shown\" in contents\n        assert \"This log message won't be shown\" not in contents\n\n\ndef test_log_file_mode_cli_invalid(pytester: Pytester) -> None:\n    # Default log file level\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_file(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_file_handler.level == logging.WARNING\n            logging.getLogger('catchlog').info(\"This log message won't be shown\")\n            logging.getLogger('catchlog').warning(\"This log message will be shown\")\n    \"\"\"\n    )\n\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    result = pytester.runpytest(\n        \"-s\",\n        f\"--log-file={log_file}\",\n        \"--log-file-mode=b\",\n        \"--log-file-level=WARNING\",\n    )\n\n    # make sure that we get a '4' exit code for the testsuite\n    assert result.ret == ExitCode.USAGE_ERROR\n\n\ndef test_log_file_cli_level(pytester: Pytester) -> None:\n    # Default log file level\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_file(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_file_handler.level == logging.INFO\n            logging.getLogger('catchlog').debug(\"This log message won't be shown\")\n            logging.getLogger('catchlog').info(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    result = pytester.runpytest(\"-s\", f\"--log-file={log_file}\", \"--log-file-level=INFO\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines([\"test_log_file_cli_level.py PASSED\"])\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"This log message will be shown\" in contents\n        assert \"This log message won't be shown\" not in contents\n\n\ndef test_log_level_not_changed_by_default(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n        def test_log_file():\n            assert logging.getLogger().level == logging.WARNING\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-s\")\n    result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n\n\ndef test_log_file_ini(pytester: Pytester) -> None:\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        log_file={log_file}\n        log_file_level=WARNING\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_file(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_file_handler.level == logging.WARNING\n            logging.getLogger('catchlog').info(\"This log message won't be shown\")\n            logging.getLogger('catchlog').warning(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"-s\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines([\"test_log_file_ini.py PASSED\"])\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"This log message will be shown\" in contents\n        assert \"This log message won't be shown\" not in contents\n\n\ndef test_log_file_mode_ini(pytester: Pytester) -> None:\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        log_file={log_file}\n        log_file_mode=a\n        log_file_level=WARNING\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_file(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_file_handler.level == logging.WARNING\n            logging.getLogger('catchlog').info(\"This log message won't be shown\")\n            logging.getLogger('catchlog').warning(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n\n    with open(log_file, mode=\"w\", encoding=\"utf-8\") as wfh:\n        wfh.write(\"A custom header\\n\")\n\n    result = pytester.runpytest(\"-s\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines([\"test_log_file_mode_ini.py PASSED\"])\n\n    assert result.ret == ExitCode.OK\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"A custom header\" in contents\n        assert \"This log message will be shown\" in contents\n        assert \"This log message won't be shown\" not in contents\n\n\ndef test_log_file_ini_level(pytester: Pytester) -> None:\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        log_file={log_file}\n        log_file_level = INFO\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_file(request):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_file_handler.level == logging.INFO\n            logging.getLogger('catchlog').debug(\"This log message won't be shown\")\n            logging.getLogger('catchlog').info(\"This log message will be shown\")\n            print('PASSED')\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"-s\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines([\"test_log_file_ini_level.py PASSED\"])\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"This log message will be shown\" in contents\n        assert \"This log message won't be shown\" not in contents\n\n\ndef test_log_file_unicode(pytester: Pytester) -> None:\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        log_file={log_file}\n        log_file_level = INFO\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\\\n        import logging\n\n        def test_log_file():\n            logging.getLogger('catchlog').info(\"Normal message\")\n            logging.getLogger('catchlog').info(\"\u251c\")\n            logging.getLogger('catchlog').info(\"Another normal message\")\n        \"\"\"\n    )\n\n    result = pytester.runpytest()\n\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"Normal message\" in contents\n        assert \"\u251c\" in contents\n        assert \"Another normal message\" in contents\n\n\n@pytest.mark.parametrize(\"has_capture_manager\", [True, False])\ndef test_live_logging_suspends_capture(\n    has_capture_manager: bool, request: FixtureRequest\n) -> None:\n    \"\"\"Test that capture manager is suspended when we emitting messages for live logging.\n\n    This tests the implementation calls instead of behavior because it is difficult/impossible to do it using\n    ``pytester`` facilities because they do their own capturing.\n\n    We parametrize the test to also make sure _LiveLoggingStreamHandler works correctly if no capture manager plugin\n    is installed.\n    \"\"\"\n    import contextlib\n    from functools import partial\n    import logging\n\n    from _pytest.logging import _LiveLoggingStreamHandler\n\n    class MockCaptureManager:\n        calls = []\n\n        @contextlib.contextmanager\n        def global_and_fixture_disabled(self):\n            self.calls.append(\"enter disabled\")\n            yield\n            self.calls.append(\"exit disabled\")\n\n    class DummyTerminal(io.StringIO):\n        def section(self, *args, **kwargs):\n            pass\n\n    out_file = cast(TerminalReporter, DummyTerminal())\n    capture_manager = (\n        cast(CaptureManager, MockCaptureManager()) if has_capture_manager else None\n    )\n    handler = _LiveLoggingStreamHandler(out_file, capture_manager)\n    handler.set_when(\"call\")\n\n    logger = logging.getLogger(__name__ + \".test_live_logging_suspends_capture\")\n    logger.addHandler(handler)\n    request.addfinalizer(partial(logger.removeHandler, handler))\n\n    logger.critical(\"some message\")\n    if has_capture_manager:\n        assert MockCaptureManager.calls == [\"enter disabled\", \"exit disabled\"]\n    else:\n        assert MockCaptureManager.calls == []\n    assert cast(io.StringIO, out_file).getvalue() == \"\\nsome message\\n\"\n\n\ndef test_collection_live_logging(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logging.getLogger().info(\"Normal message\")\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--log-cli-level=INFO\")\n    result.stdout.fnmatch_lines(\n        [\"*--- live log collection ---*\", \"*Normal message*\", \"collected 0 items\"]\n    )\n\n\n@pytest.mark.parametrize(\"verbose\", [\"\", \"-q\", \"-qq\"])\ndef test_collection_collect_only_live_logging(pytester: Pytester, verbose: str) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        def test_simple():\n            pass\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--collect-only\", \"--log-cli-level=INFO\", verbose)\n\n    expected_lines = []\n\n    if not verbose:\n        expected_lines.extend(\n            [\n                \"*collected 1 item*\",\n                \"*<Module test_collection_collect_only_live_logging.py>*\",\n                \"*1 test collected*\",\n            ]\n        )\n    elif verbose == \"-q\":\n        result.stdout.no_fnmatch_line(\"*collected 1 item**\")\n        expected_lines.extend(\n            [\n                \"*test_collection_collect_only_live_logging.py::test_simple*\",\n                \"1 test collected in [0-9].[0-9][0-9]s\",\n            ]\n        )\n    elif verbose == \"-qq\":\n        result.stdout.no_fnmatch_line(\"*collected 1 item**\")\n        expected_lines.extend([\"*test_collection_collect_only_live_logging.py: 1*\"])\n\n    result.stdout.fnmatch_lines(expected_lines)\n\n\ndef test_collection_logging_to_file(pytester: Pytester) -> None:\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        log_file={log_file}\n        log_file_level = INFO\n        \"\"\"\n    )\n\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logging.getLogger().info(\"Normal message\")\n\n        def test_simple():\n            logging.getLogger().debug(\"debug message in test_simple\")\n            logging.getLogger().info(\"info message in test_simple\")\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n\n    result.stdout.no_fnmatch_line(\"*--- live log collection ---*\")\n\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"Normal message\" in contents\n        assert \"debug message in test_simple\" not in contents\n        assert \"info message in test_simple\" in contents\n\n\ndef test_log_in_hooks(pytester: Pytester) -> None:\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        log_file={log_file}\n        log_file_level = INFO\n        log_cli=true\n        \"\"\"\n    )\n    pytester.makeconftest(\n        \"\"\"\n        import logging\n\n        def pytest_runtestloop(session):\n            logging.info('runtestloop')\n\n        def pytest_sessionstart(session):\n            logging.info('sessionstart')\n\n        def pytest_sessionfinish(session, exitstatus):\n            logging.info('sessionfinish')\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*sessionstart*\", \"*runtestloop*\", \"*sessionfinish*\"])\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"sessionstart\" in contents\n        assert \"runtestloop\" in contents\n        assert \"sessionfinish\" in contents\n\n\ndef test_log_in_runtest_logreport(pytester: Pytester) -> None:\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n\n    pytester.makeini(\n        f\"\"\"\n        [pytest]\n        log_file={log_file}\n        log_file_level = INFO\n        log_cli=true\n        \"\"\"\n    )\n    pytester.makeconftest(\n        \"\"\"\n        import logging\n        logger = logging.getLogger(__name__)\n\n        def pytest_runtest_logreport(report):\n            logger.info(\"logreport\")\n    \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n            def test_first():\n                assert True\n        \"\"\"\n    )\n    pytester.runpytest()\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert contents.count(\"logreport\") == 3\n\n\ndef test_log_set_path(pytester: Pytester) -> None:\n    report_dir_base = str(pytester.path)\n\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_file_level = DEBUG\n        log_cli=true\n        \"\"\"\n    )\n    pytester.makeconftest(\n        f\"\"\"\n            import os\n            import pytest\n            @pytest.hookimpl(wrapper=True, tryfirst=True)\n            def pytest_runtest_setup(item):\n                config = item.config\n                logging_plugin = config.pluginmanager.get_plugin(\"logging-plugin\")\n                report_file = os.path.join({report_dir_base!r}, item._request.node.name)\n                logging_plugin.set_log_path(report_file)\n                return (yield)\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n            import logging\n            logger = logging.getLogger(\"testcase-logger\")\n            def test_first():\n                logger.info(\"message from test 1\")\n                assert True\n\n            def test_second():\n                logger.debug(\"message from test 2\")\n                assert True\n        \"\"\"\n    )\n    pytester.runpytest()\n    with open(os.path.join(report_dir_base, \"test_first\"), encoding=\"utf-8\") as rfh:\n        content = rfh.read()\n        assert \"message from test 1\" in content\n\n    with open(os.path.join(report_dir_base, \"test_second\"), encoding=\"utf-8\") as rfh:\n        content = rfh.read()\n        assert \"message from test 2\" in content\n\n\ndef test_log_set_path_with_log_file_mode(pytester: Pytester) -> None:\n    report_dir_base = str(pytester.path)\n\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_file_level = DEBUG\n        log_cli=true\n        log_file_mode=a\n        \"\"\"\n    )\n    pytester.makeconftest(\n        f\"\"\"\n            import os\n            import pytest\n            @pytest.hookimpl(wrapper=True, tryfirst=True)\n            def pytest_runtest_setup(item):\n                config = item.config\n                logging_plugin = config.pluginmanager.get_plugin(\"logging-plugin\")\n                report_file = os.path.join({report_dir_base!r}, item._request.node.name)\n                logging_plugin.set_log_path(report_file)\n                return (yield)\n        \"\"\"\n    )\n    pytester.makepyfile(\n        \"\"\"\n            import logging\n            logger = logging.getLogger(\"testcase-logger\")\n            def test_first():\n                logger.info(\"message from test 1\")\n                assert True\n\n            def test_second():\n                logger.debug(\"message from test 2\")\n                assert True\n        \"\"\"\n    )\n\n    test_first_log_file = os.path.join(report_dir_base, \"test_first\")\n    test_second_log_file = os.path.join(report_dir_base, \"test_second\")\n    with open(test_first_log_file, mode=\"w\", encoding=\"utf-8\") as wfh:\n        wfh.write(\"A custom header for test 1\\n\")\n\n    with open(test_second_log_file, mode=\"w\", encoding=\"utf-8\") as wfh:\n        wfh.write(\"A custom header for test 2\\n\")\n\n    result = pytester.runpytest()\n    assert result.ret == ExitCode.OK\n\n    with open(test_first_log_file, encoding=\"utf-8\") as rfh:\n        content = rfh.read()\n        assert \"A custom header for test 1\" in content\n        assert \"message from test 1\" in content\n\n    with open(test_second_log_file, encoding=\"utf-8\") as rfh:\n        content = rfh.read()\n        assert \"A custom header for test 2\" in content\n        assert \"message from test 2\" in content\n\n\ndef test_colored_captured_log(pytester: Pytester) -> None:\n    \"\"\"Test that the level names of captured log messages of a failing test\n    are colored.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo():\n            logger.info('text going to logger from call')\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--log-level=INFO\", \"--color=yes\")\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        [\n            \"*-- Captured log call --*\",\n            \"\\x1b[32mINFO    \\x1b[0m*text going to logger from call\",\n        ]\n    )\n\n\ndef test_colored_ansi_esc_caplogtext(pytester: Pytester) -> None:\n    \"\"\"Make sure that caplog.text does not contain ANSI escape sequences.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo(caplog):\n            logger.info('text going to logger from call')\n            assert '\\x1b' not in caplog.text\n        \"\"\"\n    )\n    result = pytester.runpytest(\"--log-level=INFO\", \"--color=yes\")\n    assert result.ret == 0\n\n\ndef test_logging_emit_error(pytester: Pytester) -> None:\n    \"\"\"An exception raised during emit() should fail the test.\n\n    The default behavior of logging is to print \"Logging error\"\n    to stderr with the call stack and some extra details.\n\n    pytest overrides this behavior to propagate the exception.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_bad_log():\n            logging.warning('oops', 'first', 2)\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(failed=1)\n    result.stdout.fnmatch_lines(\n        [\n            \"====* FAILURES *====\",\n            \"*not all arguments converted during string formatting*\",\n        ]\n    )\n\n\ndef test_logging_emit_error_supressed(pytester: Pytester) -> None:\n    \"\"\"If logging is configured to silently ignore errors, pytest\n    doesn't propagate errors either.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_bad_log(monkeypatch):\n            monkeypatch.setattr(logging, 'raiseExceptions', False)\n            logging.warning('oops', 'first', 2)\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=1)\n\n\ndef test_log_file_cli_subdirectories_are_successfully_created(\n    pytester: Pytester,\n) -> None:\n    path = pytester.makepyfile(\"\"\" def test_logger(): pass \"\"\")\n    expected = os.path.join(os.path.dirname(str(path)), \"foo\", \"bar\")\n    result = pytester.runpytest(\"--log-file=foo/bar/logf.log\")\n    assert \"logf.log\" in os.listdir(expected)\n    assert result.ret == ExitCode.OK\n\n\ndef test_disable_loggers(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n        import os\n        disabled_log = logging.getLogger('disabled')\n        test_log = logging.getLogger('test')\n        def test_logger_propagation(caplog):\n            with caplog.at_level(logging.DEBUG):\n                disabled_log.warning(\"no log; no stderr\")\n                test_log.debug(\"Visible text!\")\n                assert caplog.record_tuples == [('test', 10, 'Visible text!')]\n         \"\"\"\n    )\n    result = pytester.runpytest(\"--log-disable=disabled\", \"-s\")\n    assert result.ret == ExitCode.OK\n    assert not result.stderr.lines\n\n\ndef test_disable_loggers_does_not_propagate(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n    import logging\n    import os\n\n    parent_logger = logging.getLogger(\"parent\")\n    child_logger = parent_logger.getChild(\"child\")\n\n    def test_logger_propagation_to_parent(caplog):\n            with caplog.at_level(logging.DEBUG):\n                parent_logger.warning(\"some parent logger message\")\n                child_logger.warning(\"some child logger message\")\n                assert len(caplog.record_tuples) == 1\n                assert caplog.record_tuples[0][0] == \"parent\"\n                assert caplog.record_tuples[0][2] == \"some parent logger message\"\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--log-disable=parent.child\", \"-s\")\n    assert result.ret == ExitCode.OK\n    assert not result.stderr.lines\n\n\ndef test_log_disabling_works_with_log_cli(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n    import logging\n    disabled_log = logging.getLogger('disabled')\n    test_log = logging.getLogger('test')\n\n    def test_log_cli_works(caplog):\n        test_log.info(\"Visible text!\")\n        disabled_log.warning(\"This string will be suppressed.\")\n    \"\"\"\n    )\n    result = pytester.runpytest(\n        \"--log-cli-level=DEBUG\",\n        \"--log-disable=disabled\",\n    )\n    assert result.ret == ExitCode.OK\n    result.stdout.fnmatch_lines(\n        \"INFO     test:test_log_disabling_works_with_log_cli.py:6 Visible text!\"\n    )\n    result.stdout.no_fnmatch_line(\n        \"WARNING  disabled:test_log_disabling_works_with_log_cli.py:7 This string will be suppressed.\"\n    )\n    assert not result.stderr.lines\n\n\ndef test_without_date_format_log(pytester: Pytester) -> None:\n    \"\"\"Check that date is not printed by default.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo():\n            logger.warning('text')\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 1\n    result.stdout.fnmatch_lines(\n        [\"WARNING  test_without_date_format_log:test_without_date_format_log.py:6 text\"]\n    )\n\n\ndef test_date_format_log(pytester: Pytester) -> None:\n    \"\"\"Check that log_date_format affects output.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo():\n            logger.warning('text')\n            assert False\n        \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_format=%(asctime)s; %(levelname)s; %(message)s\n        log_date_format=%Y-%m-%d %H:%M:%S\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 1\n    result.stdout.re_match_lines([r\"^[0-9-]{10} [0-9:]{8}; WARNING; text\"])\n\n\ndef test_date_format_percentf_log(pytester: Pytester) -> None:\n    \"\"\"Make sure that microseconds are printed in log.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo():\n            logger.warning('text')\n            assert False\n        \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_format=%(asctime)s; %(levelname)s; %(message)s\n        log_date_format=%Y-%m-%d %H:%M:%S.%f\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 1\n    result.stdout.re_match_lines([r\"^[0-9-]{10} [0-9:]{8}.[0-9]{6}; WARNING; text\"])\n\n\ndef test_date_format_percentf_tz_log(pytester: Pytester) -> None:\n    \"\"\"Make sure that timezone and microseconds are properly formatted together.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        logger = logging.getLogger(__name__)\n\n        def test_foo():\n            logger.warning('text')\n            assert False\n        \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_format=%(asctime)s; %(levelname)s; %(message)s\n        log_date_format=%Y-%m-%d %H:%M:%S.%f%z\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    assert result.ret == 1\n    result.stdout.re_match_lines(\n        [r\"^[0-9-]{10} [0-9:]{8}.[0-9]{6}[+-][0-9\\.]+; WARNING; text\"]\n    )\n\n\ndef test_log_file_cli_fallback_options(pytester: Pytester) -> None:\n    \"\"\"Make sure that fallback values for log-file formats and level works.\"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n        logger = logging.getLogger()\n\n        def test_foo():\n            logger.info('info text going to logger')\n            logger.warning('warning text going to logger')\n            logger.error('error text going to logger')\n\n            assert 0\n    \"\"\"\n    )\n    log_file = str(pytester.path.joinpath(\"pytest.log\"))\n    result = pytester.runpytest(\n        \"--log-level=ERROR\",\n        \"--log-format=%(asctime)s %(message)s\",\n        \"--log-date-format=%H:%M\",\n        \"--log-file=pytest.log\",\n    )\n    assert result.ret == 1\n\n    # The log file should only contain the error log messages\n    # not the warning or info ones and the format and date format\n    # should match the formats provided using --log-format and --log-date-format\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert re.match(r\"[0-9]{2}:[0-9]{2} error text going to logger\\s*\", contents)\n        assert \"info text going to logger\" not in contents\n        assert \"warning text going to logger\" not in contents\n        assert \"error text going to logger\" in contents\n\n    # Try with a different format and date format to make sure that the formats\n    # are being used\n    result = pytester.runpytest(\n        \"--log-level=ERROR\",\n        \"--log-format=%(asctime)s : %(message)s\",\n        \"--log-date-format=%H:%M:%S\",\n        \"--log-file=pytest.log\",\n    )\n    assert result.ret == 1\n\n    # The log file should only contain the error log messages\n    # not the warning or info ones and the format and date format\n    # should match the formats provided using --log-format and --log-date-format\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert re.match(\n            r\"[0-9]{2}:[0-9]{2}:[0-9]{2} : error text going to logger\\s*\", contents\n        )\n        assert \"info text going to logger\" not in contents\n        assert \"warning text going to logger\" not in contents\n        assert \"error text going to logger\" in contents\n", "testing/logging/test_fixture.py": "# mypy: disable-error-code=\"attr-defined\"\n# mypy: disallow-untyped-defs\nfrom __future__ import annotations\n\nimport logging\nfrom typing import Iterator\n\nfrom _pytest.logging import caplog_records_key\nfrom _pytest.pytester import Pytester\nimport pytest\n\n\nlogger = logging.getLogger(__name__)\nsublogger = logging.getLogger(__name__ + \".baz\")\n\n\n@pytest.fixture(autouse=True)\ndef cleanup_disabled_logging() -> Iterator[None]:\n    \"\"\"Simple fixture that ensures that a test doesn't disable logging.\n\n    This is necessary because ``logging.disable()`` is global, so a test disabling logging\n    and not cleaning up after will break every test that runs after it.\n\n    This behavior was moved to a fixture so that logging will be un-disabled even if the test fails an assertion.\n    \"\"\"\n    yield\n    logging.disable(logging.NOTSET)\n\n\ndef test_fixture_help(pytester: Pytester) -> None:\n    result = pytester.runpytest(\"--fixtures\")\n    result.stdout.fnmatch_lines([\"*caplog*\"])\n\n\ndef test_change_level(caplog: pytest.LogCaptureFixture) -> None:\n    caplog.set_level(logging.INFO)\n    logger.debug(\"handler DEBUG level\")\n    logger.info(\"handler INFO level\")\n\n    caplog.set_level(logging.CRITICAL, logger=sublogger.name)\n    sublogger.warning(\"logger WARNING level\")\n    sublogger.critical(\"logger CRITICAL level\")\n\n    assert \"DEBUG\" not in caplog.text\n    assert \"INFO\" in caplog.text\n    assert \"WARNING\" not in caplog.text\n    assert \"CRITICAL\" in caplog.text\n\n\ndef test_change_level_logging_disabled(caplog: pytest.LogCaptureFixture) -> None:\n    logging.disable(logging.CRITICAL)\n    assert logging.root.manager.disable == logging.CRITICAL\n    caplog.set_level(logging.WARNING)\n    logger.info(\"handler INFO level\")\n    logger.warning(\"handler WARNING level\")\n\n    caplog.set_level(logging.CRITICAL, logger=sublogger.name)\n    sublogger.warning(\"logger SUB_WARNING level\")\n    sublogger.critical(\"logger SUB_CRITICAL level\")\n\n    assert \"INFO\" not in caplog.text\n    assert \"WARNING\" in caplog.text\n    assert \"SUB_WARNING\" not in caplog.text\n    assert \"SUB_CRITICAL\" in caplog.text\n\n\ndef test_change_level_undo(pytester: Pytester) -> None:\n    \"\"\"Ensure that 'set_level' is undone after the end of the test.\n\n    Tests the logging output themselves (affected both by logger and handler levels).\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        def test1(caplog):\n            caplog.set_level(logging.INFO)\n            # using + operator here so fnmatch_lines doesn't match the code in the traceback\n            logging.info('log from ' + 'test1')\n            assert 0\n\n        def test2(caplog):\n            # using + operator here so fnmatch_lines doesn't match the code in the traceback\n            logging.info('log from ' + 'test2')\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n    result.stdout.no_fnmatch_line(\"*log from test2*\")\n\n\ndef test_change_disabled_level_undo(pytester: Pytester) -> None:\n    \"\"\"Ensure that '_force_enable_logging' in 'set_level' is undone after the end of the test.\n\n    Tests the logging output themselves (affected by disabled logging level).\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        def test1(caplog):\n            logging.disable(logging.CRITICAL)\n            caplog.set_level(logging.INFO)\n            # using + operator here so fnmatch_lines doesn't match the code in the traceback\n            logging.info('log from ' + 'test1')\n            assert 0\n\n        def test2(caplog):\n            # using + operator here so fnmatch_lines doesn't match the code in the traceback\n            # use logging.warning because we need a level that will show up if logging.disabled\n            # isn't reset to ``CRITICAL`` after test1.\n            logging.warning('log from ' + 'test2')\n            assert 0\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n    result.stdout.no_fnmatch_line(\"*log from test2*\")\n\n\ndef test_change_level_undoes_handler_level(pytester: Pytester) -> None:\n    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n\n    Issue #7569. Tests the handler level specifically.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import logging\n\n        def test1(caplog):\n            assert caplog.handler.level == 0\n            caplog.set_level(9999)\n            caplog.set_level(41)\n            assert caplog.handler.level == 41\n\n        def test2(caplog):\n            assert caplog.handler.level == 0\n\n        def test3(caplog):\n            assert caplog.handler.level == 0\n            caplog.set_level(43)\n            assert caplog.handler.level == 43\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(passed=3)\n\n\ndef test_with_statement_at_level(caplog: pytest.LogCaptureFixture) -> None:\n    with caplog.at_level(logging.INFO):\n        logger.debug(\"handler DEBUG level\")\n        logger.info(\"handler INFO level\")\n\n        with caplog.at_level(logging.CRITICAL, logger=sublogger.name):\n            sublogger.warning(\"logger WARNING level\")\n            sublogger.critical(\"logger CRITICAL level\")\n\n    assert \"DEBUG\" not in caplog.text\n    assert \"INFO\" in caplog.text\n    assert \"WARNING\" not in caplog.text\n    assert \"CRITICAL\" in caplog.text\n\n\ndef test_with_statement_at_level_logging_disabled(\n    caplog: pytest.LogCaptureFixture,\n) -> None:\n    logging.disable(logging.CRITICAL)\n    assert logging.root.manager.disable == logging.CRITICAL\n    with caplog.at_level(logging.WARNING):\n        logger.debug(\"handler DEBUG level\")\n        logger.info(\"handler INFO level\")\n        logger.warning(\"handler WARNING level\")\n        logger.error(\"handler ERROR level\")\n        logger.critical(\"handler CRITICAL level\")\n\n        assert logging.root.manager.disable == logging.INFO\n\n        with caplog.at_level(logging.CRITICAL, logger=sublogger.name):\n            sublogger.warning(\"logger SUB_WARNING level\")\n            sublogger.critical(\"logger SUB_CRITICAL level\")\n\n    assert \"DEBUG\" not in caplog.text\n    assert \"INFO\" not in caplog.text\n    assert \"WARNING\" in caplog.text\n    assert \"ERROR\" in caplog.text\n    assert \" CRITICAL\" in caplog.text\n    assert \"SUB_WARNING\" not in caplog.text\n    assert \"SUB_CRITICAL\" in caplog.text\n    assert logging.root.manager.disable == logging.CRITICAL\n\n\ndef test_with_statement_filtering(caplog: pytest.LogCaptureFixture) -> None:\n    class TestFilter(logging.Filter):\n        def filter(self, record: logging.LogRecord) -> bool:\n            record.msg = \"filtered handler call\"\n            return True\n\n    with caplog.at_level(logging.INFO):\n        with caplog.filtering(TestFilter()):\n            logger.info(\"handler call\")\n        logger.info(\"handler call\")\n\n    filtered_tuple, unfiltered_tuple = caplog.record_tuples\n    assert filtered_tuple == (\"test_fixture\", 20, \"filtered handler call\")\n    assert unfiltered_tuple == (\"test_fixture\", 20, \"handler call\")\n\n\n@pytest.mark.parametrize(\n    \"level_str,expected_disable_level\",\n    [\n        (\"CRITICAL\", logging.ERROR),\n        (\"ERROR\", logging.WARNING),\n        (\"WARNING\", logging.INFO),\n        (\"INFO\", logging.DEBUG),\n        (\"DEBUG\", logging.NOTSET),\n        (\"NOTSET\", logging.NOTSET),\n        (\"NOTVALIDLEVEL\", logging.NOTSET),\n    ],\n)\ndef test_force_enable_logging_level_string(\n    caplog: pytest.LogCaptureFixture, level_str: str, expected_disable_level: int\n) -> None:\n    \"\"\"Test _force_enable_logging using a level string.\n\n    ``expected_disable_level`` is one level below ``level_str`` because the disabled log level\n    always needs to be *at least* one level lower than the level that caplog is trying to capture.\n    \"\"\"\n    test_logger = logging.getLogger(\"test_str_level_force_enable\")\n    # Emulate a testing environment where all logging is disabled.\n    logging.disable(logging.CRITICAL)\n    # Make sure all logging is disabled.\n    assert not test_logger.isEnabledFor(logging.CRITICAL)\n    # Un-disable logging for `level_str`.\n    caplog._force_enable_logging(level_str, test_logger)\n    # Make sure that the disabled level is now one below the requested logging level.\n    # We don't use `isEnabledFor` here because that also checks the level set by\n    # `logging.setLevel()` which is irrelevant to `logging.disable()`.\n    assert test_logger.manager.disable == expected_disable_level\n\n\ndef test_log_access(caplog: pytest.LogCaptureFixture) -> None:\n    caplog.set_level(logging.INFO)\n    logger.info(\"boo %s\", \"arg\")\n    assert caplog.records[0].levelname == \"INFO\"\n    assert caplog.records[0].msg == \"boo %s\"\n    assert \"boo arg\" in caplog.text\n\n\ndef test_messages(caplog: pytest.LogCaptureFixture) -> None:\n    caplog.set_level(logging.INFO)\n    logger.info(\"boo %s\", \"arg\")\n    logger.info(\"bar %s\\nbaz %s\", \"arg1\", \"arg2\")\n    assert \"boo arg\" == caplog.messages[0]\n    assert \"bar arg1\\nbaz arg2\" == caplog.messages[1]\n    assert caplog.text.count(\"\\n\") > len(caplog.messages)\n    assert len(caplog.text.splitlines()) > len(caplog.messages)\n\n    try:\n        raise Exception(\"test\")\n    except Exception:\n        logger.exception(\"oops\")\n\n    assert \"oops\" in caplog.text\n    assert \"oops\" in caplog.messages[-1]\n    # Tracebacks are stored in the record and not added until the formatter or handler.\n    assert \"Exception\" in caplog.text\n    assert \"Exception\" not in caplog.messages[-1]\n\n\ndef test_record_tuples(caplog: pytest.LogCaptureFixture) -> None:\n    caplog.set_level(logging.INFO)\n    logger.info(\"boo %s\", \"arg\")\n\n    assert caplog.record_tuples == [(__name__, logging.INFO, \"boo arg\")]\n\n\ndef test_unicode(caplog: pytest.LogCaptureFixture) -> None:\n    caplog.set_level(logging.INFO)\n    logger.info(\"b\u016b\")\n    assert caplog.records[0].levelname == \"INFO\"\n    assert caplog.records[0].msg == \"b\u016b\"\n    assert \"b\u016b\" in caplog.text\n\n\ndef test_clear(caplog: pytest.LogCaptureFixture) -> None:\n    caplog.set_level(logging.INFO)\n    logger.info(\"b\u016b\")\n    assert len(caplog.records)\n    assert caplog.text\n    caplog.clear()\n    assert not len(caplog.records)\n    assert not caplog.text\n\n\n@pytest.fixture\ndef logging_during_setup_and_teardown(\n    caplog: pytest.LogCaptureFixture,\n) -> Iterator[None]:\n    caplog.set_level(\"INFO\")\n    logger.info(\"a_setup_log\")\n    yield\n    logger.info(\"a_teardown_log\")\n    assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n\n\ndef private_assert_caplog_records_is_setup_call(\n    caplog: pytest.LogCaptureFixture,\n) -> None:\n    # This reaches into private API, don't use this type of thing in real tests!\n    caplog_records = caplog._item.stash[caplog_records_key]\n    assert set(caplog_records) == {\"setup\", \"call\"}\n\n\ndef test_captures_for_all_stages(\n    caplog: pytest.LogCaptureFixture, logging_during_setup_and_teardown: None\n) -> None:\n    assert not caplog.records\n    assert not caplog.get_records(\"call\")\n    logger.info(\"a_call_log\")\n    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log\"]\n\n    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n\n    private_assert_caplog_records_is_setup_call(caplog)\n\n\ndef test_clear_for_call_stage(\n    caplog: pytest.LogCaptureFixture, logging_during_setup_and_teardown: None\n) -> None:\n    logger.info(\"a_call_log\")\n    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log\"]\n    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n    private_assert_caplog_records_is_setup_call(caplog)\n\n    caplog.clear()\n\n    assert caplog.get_records(\"call\") == []\n    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n    private_assert_caplog_records_is_setup_call(caplog)\n\n    logging.info(\"a_call_log_after_clear\")\n    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_after_clear\"]\n    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n    private_assert_caplog_records_is_setup_call(caplog)\n\n\ndef test_ini_controls_global_log_level(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_level_override(request, caplog):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_level == logging.ERROR\n            logger = logging.getLogger('catchlog')\n            logger.warning(\"WARNING message won't be shown\")\n            logger.error(\"ERROR message will be shown\")\n            assert 'WARNING' not in caplog.text\n            assert 'ERROR' in caplog.text\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_level=ERROR\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    # make sure that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n\n\ndef test_can_override_global_log_level(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_level_override(request, caplog):\n            logger = logging.getLogger('catchlog')\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_level == logging.WARNING\n\n            logger.info(\"INFO message won't be shown\")\n\n            caplog.set_level(logging.INFO, logger.name)\n\n            with caplog.at_level(logging.DEBUG, logger.name):\n                logger.debug(\"DEBUG message will be shown\")\n\n            logger.debug(\"DEBUG message won't be shown\")\n\n            with caplog.at_level(logging.CRITICAL, logger.name):\n                logger.warning(\"WARNING message won't be shown\")\n\n            logger.debug(\"DEBUG message won't be shown\")\n            logger.info(\"INFO message will be shown\")\n\n            assert \"message won't be shown\" not in caplog.text\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_level=WARNING\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    assert result.ret == 0\n\n\ndef test_captures_despite_exception(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n        def test_log_level_override(request, caplog):\n            logger = logging.getLogger('catchlog')\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_level == logging.WARNING\n\n            logger.error(\"ERROR message \" + \"will be shown\")\n\n            with caplog.at_level(logging.DEBUG, logger.name):\n                logger.debug(\"DEBUG message \" + \"won't be shown\")\n                raise Exception()\n    \"\"\"\n    )\n    pytester.makeini(\n        \"\"\"\n        [pytest]\n        log_level=WARNING\n    \"\"\"\n    )\n\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*ERROR message will be shown*\"])\n    result.stdout.no_fnmatch_line(\"*DEBUG message won't be shown*\")\n    assert result.ret == 1\n\n\ndef test_log_report_captures_according_to_config_option_upon_failure(\n    pytester: Pytester,\n) -> None:\n    \"\"\"Test that upon failure:\n    (1) `caplog` succeeded to capture the DEBUG message and assert on it => No `Exception` is raised.\n    (2) The `DEBUG` message does NOT appear in the `Captured log call` report.\n    (3) The stdout, `INFO`, and `WARNING` messages DO appear in the test reports due to `--log-level=INFO`.\n    \"\"\"\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n\n        def function_that_logs():\n            logging.debug('DEBUG log ' + 'message')\n            logging.info('INFO log ' + 'message')\n            logging.warning('WARNING log ' + 'message')\n            print('Print ' + 'message')\n\n        def test_that_fails(request, caplog):\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_level == logging.INFO\n\n            with caplog.at_level(logging.DEBUG):\n                function_that_logs()\n\n            if 'DEBUG log ' + 'message' not in caplog.text:\n                raise Exception('caplog failed to ' + 'capture DEBUG')\n\n            assert False\n    \"\"\"\n    )\n\n    result = pytester.runpytest(\"--log-level=INFO\")\n    result.stdout.no_fnmatch_line(\"*Exception: caplog failed to capture DEBUG*\")\n    result.stdout.no_fnmatch_line(\"*DEBUG log message*\")\n    result.stdout.fnmatch_lines(\n        [\"*Print message*\", \"*INFO log message*\", \"*WARNING log message*\"]\n    )\n    assert result.ret == 1\n", "testing/logging/test_formatter.py": "from __future__ import annotations\n\nimport logging\nfrom typing import Any\n\nfrom _pytest._io import TerminalWriter\nfrom _pytest.logging import ColoredLevelFormatter\n\n\ndef test_coloredlogformatter() -> None:\n    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n\n    record = logging.LogRecord(\n        name=\"dummy\",\n        level=logging.INFO,\n        pathname=\"dummypath\",\n        lineno=10,\n        msg=\"Test Message\",\n        args=(),\n        exc_info=None,\n    )\n\n    tw = TerminalWriter()\n    tw.hasmarkup = True\n    formatter = ColoredLevelFormatter(tw, logfmt)\n    output = formatter.format(record)\n    assert output == (\n        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n    )\n\n    tw.hasmarkup = False\n    formatter = ColoredLevelFormatter(tw, logfmt)\n    output = formatter.format(record)\n    assert output == (\"dummypath                   10 INFO     Test Message\")\n\n\ndef test_coloredlogformatter_with_width_precision() -> None:\n    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8.8s %(message)s\"\n\n    record = logging.LogRecord(\n        name=\"dummy\",\n        level=logging.INFO,\n        pathname=\"dummypath\",\n        lineno=10,\n        msg=\"Test Message\",\n        args=(),\n        exc_info=None,\n    )\n\n    tw = TerminalWriter()\n    tw.hasmarkup = True\n    formatter = ColoredLevelFormatter(tw, logfmt)\n    output = formatter.format(record)\n    assert output == (\n        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n    )\n\n    tw.hasmarkup = False\n    formatter = ColoredLevelFormatter(tw, logfmt)\n    output = formatter.format(record)\n    assert output == (\"dummypath                   10 INFO     Test Message\")\n\n\ndef test_multiline_message() -> None:\n    from _pytest.logging import PercentStyleMultiline\n\n    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n\n    record: Any = logging.LogRecord(\n        name=\"dummy\",\n        level=logging.INFO,\n        pathname=\"dummypath\",\n        lineno=10,\n        msg=\"Test Message line1\\nline2\",\n        args=(),\n        exc_info=None,\n    )\n    # this is called by logging.Formatter.format\n    record.message = record.getMessage()\n\n    ai_on_style = PercentStyleMultiline(logfmt, True)\n    output = ai_on_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\n\"\n        \"                                        line2\"\n    )\n\n    ai_off_style = PercentStyleMultiline(logfmt, False)\n    output = ai_off_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\nline2\"\n    )\n\n    ai_none_style = PercentStyleMultiline(logfmt, None)\n    output = ai_none_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\nline2\"\n    )\n\n    record.auto_indent = False\n    output = ai_on_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\nline2\"\n    )\n\n    record.auto_indent = True\n    output = ai_off_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\n\"\n        \"                                        line2\"\n    )\n\n    record.auto_indent = \"False\"\n    output = ai_on_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\nline2\"\n    )\n\n    record.auto_indent = \"True\"\n    output = ai_off_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\n\"\n        \"                                        line2\"\n    )\n\n    # bad string values default to False\n    record.auto_indent = \"junk\"\n    output = ai_off_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\nline2\"\n    )\n\n    # anything other than string or int will default to False\n    record.auto_indent = dict()\n    output = ai_off_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\nline2\"\n    )\n\n    record.auto_indent = \"5\"\n    output = ai_off_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\n     line2\"\n    )\n\n    record.auto_indent = 5\n    output = ai_off_style.format(record)\n    assert output == (\n        \"dummypath                   10 INFO     Test Message line1\\n     line2\"\n    )\n\n\ndef test_colored_short_level() -> None:\n    logfmt = \"%(levelname).1s %(message)s\"\n\n    record = logging.LogRecord(\n        name=\"dummy\",\n        level=logging.INFO,\n        pathname=\"dummypath\",\n        lineno=10,\n        msg=\"Test Message\",\n        args=(),\n        exc_info=None,\n    )\n\n    class ColorConfig:\n        class option:\n            pass\n\n    tw = TerminalWriter()\n    tw.hasmarkup = True\n    formatter = ColoredLevelFormatter(tw, logfmt)\n    output = formatter.format(record)\n    # the I (of INFO) is colored\n    assert output == (\"\\x1b[32mI\\x1b[0m Test Message\")\n", "src/py.py": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nfrom __future__ import annotations\n\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path\n\n__all__ = [\"error\", \"path\"]\n", "src/_pytest/reports.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport dataclasses\nfrom io import StringIO\nimport os\nfrom pprint import pprint\nfrom typing import Any\nfrom typing import cast\nfrom typing import final\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import NoReturn\nfrom typing import TYPE_CHECKING\n\nfrom _pytest._code.code import ExceptionChainRepr\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest._code.code import ExceptionRepr\nfrom _pytest._code.code import ReprEntry\nfrom _pytest._code.code import ReprEntryNative\nfrom _pytest._code.code import ReprExceptionInfo\nfrom _pytest._code.code import ReprFileLocation\nfrom _pytest._code.code import ReprFuncArgs\nfrom _pytest._code.code import ReprLocals\nfrom _pytest._code.code import ReprTraceback\nfrom _pytest._code.code import TerminalRepr\nfrom _pytest._io import TerminalWriter\nfrom _pytest.config import Config\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import skip\n\n\nif TYPE_CHECKING:\n    from typing_extensions import Self\n\n    from _pytest.runner import CallInfo\n\n\ndef getworkerinfoline(node):\n    try:\n        return node._workerinfocache\n    except AttributeError:\n        d = node.workerinfo\n        ver = \"{}.{}.{}\".format(*d[\"version_info\"][:3])\n        node._workerinfocache = s = \"[{}] {} -- Python {} {}\".format(\n            d[\"id\"], d[\"sysplatform\"], ver, d[\"executable\"]\n        )\n        return s\n\n\nclass BaseReport:\n    when: str | None\n    location: tuple[str, int | None, str] | None\n    longrepr: (\n        None | ExceptionInfo[BaseException] | tuple[str, int, str] | str | TerminalRepr\n    )\n    sections: list[tuple[str, str]]\n    nodeid: str\n    outcome: Literal[\"passed\", \"failed\", \"skipped\"]\n\n    def __init__(self, **kw: Any) -> None:\n        self.__dict__.update(kw)\n\n    if TYPE_CHECKING:\n        # Can have arbitrary fields given to __init__().\n        def __getattr__(self, key: str) -> Any: ...\n\n    def toterminal(self, out: TerminalWriter) -> None:\n        if hasattr(self, \"node\"):\n            worker_info = getworkerinfoline(self.node)\n            if worker_info:\n                out.line(worker_info)\n\n        longrepr = self.longrepr\n        if longrepr is None:\n            return\n\n        if hasattr(longrepr, \"toterminal\"):\n            longrepr_terminal = cast(TerminalRepr, longrepr)\n            longrepr_terminal.toterminal(out)\n        else:\n            try:\n                s = str(longrepr)\n            except UnicodeEncodeError:\n                s = \"<unprintable longrepr>\"\n            out.line(s)\n\n    def get_sections(self, prefix: str) -> Iterator[tuple[str, str]]:\n        for name, content in self.sections:\n            if name.startswith(prefix):\n                yield prefix, content\n\n    @property\n    def longreprtext(self) -> str:\n        \"\"\"Read-only property that returns the full string representation of\n        ``longrepr``.\n\n        .. versionadded:: 3.0\n        \"\"\"\n        file = StringIO()\n        tw = TerminalWriter(file)\n        tw.hasmarkup = False\n        self.toterminal(tw)\n        exc = file.getvalue()\n        return exc.strip()\n\n    @property\n    def caplog(self) -> str:\n        \"\"\"Return captured log lines, if log capturing is enabled.\n\n        .. versionadded:: 3.5\n        \"\"\"\n        return \"\\n\".join(\n            content for (prefix, content) in self.get_sections(\"Captured log\")\n        )\n\n    @property\n    def capstdout(self) -> str:\n        \"\"\"Return captured text from stdout, if capturing is enabled.\n\n        .. versionadded:: 3.0\n        \"\"\"\n        return \"\".join(\n            content for (prefix, content) in self.get_sections(\"Captured stdout\")\n        )\n\n    @property\n    def capstderr(self) -> str:\n        \"\"\"Return captured text from stderr, if capturing is enabled.\n\n        .. versionadded:: 3.0\n        \"\"\"\n        return \"\".join(\n            content for (prefix, content) in self.get_sections(\"Captured stderr\")\n        )\n\n    @property\n    def passed(self) -> bool:\n        \"\"\"Whether the outcome is passed.\"\"\"\n        return self.outcome == \"passed\"\n\n    @property\n    def failed(self) -> bool:\n        \"\"\"Whether the outcome is failed.\"\"\"\n        return self.outcome == \"failed\"\n\n    @property\n    def skipped(self) -> bool:\n        \"\"\"Whether the outcome is skipped.\"\"\"\n        return self.outcome == \"skipped\"\n\n    @property\n    def fspath(self) -> str:\n        \"\"\"The path portion of the reported node, as a string.\"\"\"\n        return self.nodeid.split(\"::\")[0]\n\n    @property\n    def count_towards_summary(self) -> bool:\n        \"\"\"**Experimental** Whether this report should be counted towards the\n        totals shown at the end of the test session: \"1 passed, 1 failure, etc\".\n\n        .. note::\n\n            This function is considered **experimental**, so beware that it is subject to changes\n            even in patch releases.\n        \"\"\"\n        return True\n\n    @property\n    def head_line(self) -> str | None:\n        \"\"\"**Experimental** The head line shown with longrepr output for this\n        report, more commonly during traceback representation during\n        failures::\n\n            ________ Test.foo ________\n\n\n        In the example above, the head_line is \"Test.foo\".\n\n        .. note::\n\n            This function is considered **experimental**, so beware that it is subject to changes\n            even in patch releases.\n        \"\"\"\n        if self.location is not None:\n            fspath, lineno, domain = self.location\n            return domain\n        return None\n\n    def _get_verbose_word(self, config: Config):\n        _category, _short, verbose = config.hook.pytest_report_teststatus(\n            report=self, config=config\n        )\n        return verbose\n\n    def _to_json(self) -> dict[str, Any]:\n        \"\"\"Return the contents of this report as a dict of builtin entries,\n        suitable for serialization.\n\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Experimental method.\n        \"\"\"\n        return _report_to_json(self)\n\n    @classmethod\n    def _from_json(cls, reportdict: dict[str, object]) -> Self:\n        \"\"\"Create either a TestReport or CollectReport, depending on the calling class.\n\n        It is the callers responsibility to know which class to pass here.\n\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Experimental method.\n        \"\"\"\n        kwargs = _report_kwargs_from_json(reportdict)\n        return cls(**kwargs)\n\n\ndef _report_unserialization_failure(\n    type_name: str, report_class: type[BaseReport], reportdict\n) -> NoReturn:\n    url = \"https://github.com/pytest-dev/pytest/issues\"\n    stream = StringIO()\n    pprint(\"-\" * 100, stream=stream)\n    pprint(f\"INTERNALERROR: Unknown entry type returned: {type_name}\", stream=stream)\n    pprint(f\"report_name: {report_class}\", stream=stream)\n    pprint(reportdict, stream=stream)\n    pprint(f\"Please report this bug at {url}\", stream=stream)\n    pprint(\"-\" * 100, stream=stream)\n    raise RuntimeError(stream.getvalue())\n\n\n@final\nclass TestReport(BaseReport):\n    \"\"\"Basic test report object (also used for setup and teardown calls if\n    they fail).\n\n    Reports can contain arbitrary extra attributes.\n    \"\"\"\n\n    __test__ = False\n    # Defined by skipping plugin.\n    # xfail reason if xfailed, otherwise not defined. Use hasattr to distinguish.\n    wasxfail: str\n\n    def __init__(\n        self,\n        nodeid: str,\n        location: tuple[str, int | None, str],\n        keywords: Mapping[str, Any],\n        outcome: Literal[\"passed\", \"failed\", \"skipped\"],\n        longrepr: None\n        | ExceptionInfo[BaseException]\n        | tuple[str, int, str]\n        | str\n        | TerminalRepr,\n        when: Literal[\"setup\", \"call\", \"teardown\"],\n        sections: Iterable[tuple[str, str]] = (),\n        duration: float = 0,\n        start: float = 0,\n        stop: float = 0,\n        user_properties: Iterable[tuple[str, object]] | None = None,\n        **extra,\n    ) -> None:\n        #: Normalized collection nodeid.\n        self.nodeid = nodeid\n\n        #: A (filesystempath, lineno, domaininfo) tuple indicating the\n        #: actual location of a test item - it might be different from the\n        #: collected one e.g. if a method is inherited from a different module.\n        #: The filesystempath may be relative to ``config.rootdir``.\n        #: The line number is 0-based.\n        self.location: tuple[str, int | None, str] = location\n\n        #: A name -> value dictionary containing all keywords and\n        #: markers associated with a test invocation.\n        self.keywords: Mapping[str, Any] = keywords\n\n        #: Test outcome, always one of \"passed\", \"failed\", \"skipped\".\n        self.outcome = outcome\n\n        #: None or a failure representation.\n        self.longrepr = longrepr\n\n        #: One of 'setup', 'call', 'teardown' to indicate runtest phase.\n        self.when = when\n\n        #: User properties is a list of tuples (name, value) that holds user\n        #: defined properties of the test.\n        self.user_properties = list(user_properties or [])\n\n        #: Tuples of str ``(heading, content)`` with extra information\n        #: for the test report. Used by pytest to add text captured\n        #: from ``stdout``, ``stderr``, and intercepted logging events. May\n        #: be used by other plugins to add arbitrary information to reports.\n        self.sections = list(sections)\n\n        #: Time it took to run just the test.\n        self.duration: float = duration\n\n        #: The system time when the call started, in seconds since the epoch.\n        self.start: float = start\n        #: The system time when the call ended, in seconds since the epoch.\n        self.stop: float = stop\n\n        self.__dict__.update(extra)\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} {self.nodeid!r} when={self.when!r} outcome={self.outcome!r}>\"\n\n    @classmethod\n    def from_item_and_call(cls, item: Item, call: CallInfo[None]) -> TestReport:\n        \"\"\"Create and fill a TestReport with standard item and call info.\n\n        :param item: The item.\n        :param call: The call info.\n        \"\"\"\n        when = call.when\n        # Remove \"collect\" from the Literal type -- only for collection calls.\n        assert when != \"collect\"\n        duration = call.duration\n        start = call.start\n        stop = call.stop\n        keywords = {x: 1 for x in item.keywords}\n        excinfo = call.excinfo\n        sections = []\n        if not call.excinfo:\n            outcome: Literal[\"passed\", \"failed\", \"skipped\"] = \"passed\"\n            longrepr: (\n                None\n                | ExceptionInfo[BaseException]\n                | tuple[str, int, str]\n                | str\n                | TerminalRepr\n            ) = None\n        else:\n            if not isinstance(excinfo, ExceptionInfo):\n                outcome = \"failed\"\n                longrepr = excinfo\n            elif isinstance(excinfo.value, skip.Exception):\n                outcome = \"skipped\"\n                r = excinfo._getreprcrash()\n                assert (\n                    r is not None\n                ), \"There should always be a traceback entry for skipping a test.\"\n                if excinfo.value._use_item_location:\n                    path, line = item.reportinfo()[:2]\n                    assert line is not None\n                    longrepr = os.fspath(path), line + 1, r.message\n                else:\n                    longrepr = (str(r.path), r.lineno, r.message)\n            else:\n                outcome = \"failed\"\n                if call.when == \"call\":\n                    longrepr = item.repr_failure(excinfo)\n                else:  # exception in setup or teardown\n                    longrepr = item._repr_failure_py(\n                        excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")\n                    )\n        for rwhen, key, content in item._report_sections:\n            sections.append((f\"Captured {key} {rwhen}\", content))\n        return cls(\n            item.nodeid,\n            item.location,\n            keywords,\n            outcome,\n            longrepr,\n            when,\n            sections,\n            duration,\n            start,\n            stop,\n            user_properties=item.user_properties,\n        )\n\n\n@final\nclass CollectReport(BaseReport):\n    \"\"\"Collection report object.\n\n    Reports can contain arbitrary extra attributes.\n    \"\"\"\n\n    when = \"collect\"\n\n    def __init__(\n        self,\n        nodeid: str,\n        outcome: Literal[\"passed\", \"failed\", \"skipped\"],\n        longrepr: None\n        | ExceptionInfo[BaseException]\n        | tuple[str, int, str]\n        | str\n        | TerminalRepr,\n        result: list[Item | Collector] | None,\n        sections: Iterable[tuple[str, str]] = (),\n        **extra,\n    ) -> None:\n        #: Normalized collection nodeid.\n        self.nodeid = nodeid\n\n        #: Test outcome, always one of \"passed\", \"failed\", \"skipped\".\n        self.outcome = outcome\n\n        #: None or a failure representation.\n        self.longrepr = longrepr\n\n        #: The collected items and collection nodes.\n        self.result = result or []\n\n        #: Tuples of str ``(heading, content)`` with extra information\n        #: for the test report. Used by pytest to add text captured\n        #: from ``stdout``, ``stderr``, and intercepted logging events. May\n        #: be used by other plugins to add arbitrary information to reports.\n        self.sections = list(sections)\n\n        self.__dict__.update(extra)\n\n    @property\n    def location(  # type:ignore[override]\n        self,\n    ) -> tuple[str, int | None, str] | None:\n        return (self.fspath, None, self.fspath)\n\n    def __repr__(self) -> str:\n        return f\"<CollectReport {self.nodeid!r} lenresult={len(self.result)} outcome={self.outcome!r}>\"\n\n\nclass CollectErrorRepr(TerminalRepr):\n    def __init__(self, msg: str) -> None:\n        self.longrepr = msg\n\n    def toterminal(self, out: TerminalWriter) -> None:\n        out.line(self.longrepr, red=True)\n\n\ndef pytest_report_to_serializable(\n    report: CollectReport | TestReport,\n) -> dict[str, Any] | None:\n    if isinstance(report, (TestReport, CollectReport)):\n        data = report._to_json()\n        data[\"$report_type\"] = report.__class__.__name__\n        return data\n    # TODO: Check if this is actually reachable.\n    return None  # type: ignore[unreachable]\n\n\ndef pytest_report_from_serializable(\n    data: dict[str, Any],\n) -> CollectReport | TestReport | None:\n    if \"$report_type\" in data:\n        if data[\"$report_type\"] == \"TestReport\":\n            return TestReport._from_json(data)\n        elif data[\"$report_type\"] == \"CollectReport\":\n            return CollectReport._from_json(data)\n        assert False, \"Unknown report_type unserialize data: {}\".format(\n            data[\"$report_type\"]\n        )\n    return None\n\n\ndef _report_to_json(report: BaseReport) -> dict[str, Any]:\n    \"\"\"Return the contents of this report as a dict of builtin entries,\n    suitable for serialization.\n\n    This was originally the serialize_report() function from xdist (ca03269).\n    \"\"\"\n\n    def serialize_repr_entry(\n        entry: ReprEntry | ReprEntryNative,\n    ) -> dict[str, Any]:\n        data = dataclasses.asdict(entry)\n        for key, value in data.items():\n            if hasattr(value, \"__dict__\"):\n                data[key] = dataclasses.asdict(value)\n        entry_data = {\"type\": type(entry).__name__, \"data\": data}\n        return entry_data\n\n    def serialize_repr_traceback(reprtraceback: ReprTraceback) -> dict[str, Any]:\n        result = dataclasses.asdict(reprtraceback)\n        result[\"reprentries\"] = [\n            serialize_repr_entry(x) for x in reprtraceback.reprentries\n        ]\n        return result\n\n    def serialize_repr_crash(\n        reprcrash: ReprFileLocation | None,\n    ) -> dict[str, Any] | None:\n        if reprcrash is not None:\n            return dataclasses.asdict(reprcrash)\n        else:\n            return None\n\n    def serialize_exception_longrepr(rep: BaseReport) -> dict[str, Any]:\n        assert rep.longrepr is not None\n        # TODO: Investigate whether the duck typing is really necessary here.\n        longrepr = cast(ExceptionRepr, rep.longrepr)\n        result: dict[str, Any] = {\n            \"reprcrash\": serialize_repr_crash(longrepr.reprcrash),\n            \"reprtraceback\": serialize_repr_traceback(longrepr.reprtraceback),\n            \"sections\": longrepr.sections,\n        }\n        if isinstance(longrepr, ExceptionChainRepr):\n            result[\"chain\"] = []\n            for repr_traceback, repr_crash, description in longrepr.chain:\n                result[\"chain\"].append(\n                    (\n                        serialize_repr_traceback(repr_traceback),\n                        serialize_repr_crash(repr_crash),\n                        description,\n                    )\n                )\n        else:\n            result[\"chain\"] = None\n        return result\n\n    d = report.__dict__.copy()\n    if hasattr(report.longrepr, \"toterminal\"):\n        if hasattr(report.longrepr, \"reprtraceback\") and hasattr(\n            report.longrepr, \"reprcrash\"\n        ):\n            d[\"longrepr\"] = serialize_exception_longrepr(report)\n        else:\n            d[\"longrepr\"] = str(report.longrepr)\n    else:\n        d[\"longrepr\"] = report.longrepr\n    for name in d:\n        if isinstance(d[name], os.PathLike):\n            d[name] = os.fspath(d[name])\n        elif name == \"result\":\n            d[name] = None  # for now\n    return d\n\n\ndef _report_kwargs_from_json(reportdict: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"Return **kwargs that can be used to construct a TestReport or\n    CollectReport instance.\n\n    This was originally the serialize_report() function from xdist (ca03269).\n    \"\"\"\n\n    def deserialize_repr_entry(entry_data):\n        data = entry_data[\"data\"]\n        entry_type = entry_data[\"type\"]\n        if entry_type == \"ReprEntry\":\n            reprfuncargs = None\n            reprfileloc = None\n            reprlocals = None\n            if data[\"reprfuncargs\"]:\n                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n            if data[\"reprfileloc\"]:\n                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n            if data[\"reprlocals\"]:\n                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n\n            reprentry: ReprEntry | ReprEntryNative = ReprEntry(\n                lines=data[\"lines\"],\n                reprfuncargs=reprfuncargs,\n                reprlocals=reprlocals,\n                reprfileloc=reprfileloc,\n                style=data[\"style\"],\n            )\n        elif entry_type == \"ReprEntryNative\":\n            reprentry = ReprEntryNative(data[\"lines\"])\n        else:\n            _report_unserialization_failure(entry_type, TestReport, reportdict)\n        return reprentry\n\n    def deserialize_repr_traceback(repr_traceback_dict):\n        repr_traceback_dict[\"reprentries\"] = [\n            deserialize_repr_entry(x) for x in repr_traceback_dict[\"reprentries\"]\n        ]\n        return ReprTraceback(**repr_traceback_dict)\n\n    def deserialize_repr_crash(repr_crash_dict: dict[str, Any] | None):\n        if repr_crash_dict is not None:\n            return ReprFileLocation(**repr_crash_dict)\n        else:\n            return None\n\n    if (\n        reportdict[\"longrepr\"]\n        and \"reprcrash\" in reportdict[\"longrepr\"]\n        and \"reprtraceback\" in reportdict[\"longrepr\"]\n    ):\n        reprtraceback = deserialize_repr_traceback(\n            reportdict[\"longrepr\"][\"reprtraceback\"]\n        )\n        reprcrash = deserialize_repr_crash(reportdict[\"longrepr\"][\"reprcrash\"])\n        if reportdict[\"longrepr\"][\"chain\"]:\n            chain = []\n            for repr_traceback_data, repr_crash_data, description in reportdict[\n                \"longrepr\"\n            ][\"chain\"]:\n                chain.append(\n                    (\n                        deserialize_repr_traceback(repr_traceback_data),\n                        deserialize_repr_crash(repr_crash_data),\n                        description,\n                    )\n                )\n            exception_info: ExceptionChainRepr | ReprExceptionInfo = ExceptionChainRepr(\n                chain\n            )\n        else:\n            exception_info = ReprExceptionInfo(\n                reprtraceback=reprtraceback,\n                reprcrash=reprcrash,\n            )\n\n        for section in reportdict[\"longrepr\"][\"sections\"]:\n            exception_info.addsection(*section)\n        reportdict[\"longrepr\"] = exception_info\n\n    return reportdict\n", "src/_pytest/logging.py": "# mypy: allow-untyped-defs\n\"\"\"Access and control log capturing.\"\"\"\n\nfrom __future__ import annotations\n\nfrom contextlib import contextmanager\nfrom contextlib import nullcontext\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom datetime import timezone\nimport io\nfrom io import StringIO\nimport logging\nfrom logging import LogRecord\nimport os\nfrom pathlib import Path\nimport re\nfrom types import TracebackType\nfrom typing import AbstractSet\nfrom typing import Dict\nfrom typing import final\nfrom typing import Generator\nfrom typing import Generic\nfrom typing import List\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom _pytest import nodes\nfrom _pytest._io import TerminalWriter\nfrom _pytest.capture import CaptureManager\nfrom _pytest.config import _strtobool\nfrom _pytest.config import Config\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.config import hookimpl\nfrom _pytest.config import UsageError\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.main import Session\nfrom _pytest.stash import StashKey\nfrom _pytest.terminal import TerminalReporter\n\n\nif TYPE_CHECKING:\n    logging_StreamHandler = logging.StreamHandler[StringIO]\nelse:\n    logging_StreamHandler = logging.StreamHandler\n\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n_ANSI_ESCAPE_SEQ = re.compile(r\"\\x1b\\[[\\d;]+m\")\ncaplog_handler_key = StashKey[\"LogCaptureHandler\"]()\ncaplog_records_key = StashKey[Dict[str, List[logging.LogRecord]]]()\n\n\ndef _remove_ansi_escape_sequences(text: str) -> str:\n    return _ANSI_ESCAPE_SEQ.sub(\"\", text)\n\n\nclass DatetimeFormatter(logging.Formatter):\n    \"\"\"A logging formatter which formats record with\n    :func:`datetime.datetime.strftime` formatter instead of\n    :func:`time.strftime` in case of microseconds in format string.\n    \"\"\"\n\n    def formatTime(self, record: LogRecord, datefmt: str | None = None) -> str:\n        if datefmt and \"%f\" in datefmt:\n            ct = self.converter(record.created)\n            tz = timezone(timedelta(seconds=ct.tm_gmtoff), ct.tm_zone)\n            # Construct `datetime.datetime` object from `struct_time`\n            # and msecs information from `record`\n            # Using int() instead of round() to avoid it exceeding 1_000_000 and causing a ValueError (#11861).\n            dt = datetime(*ct[0:6], microsecond=int(record.msecs * 1000), tzinfo=tz)\n            return dt.strftime(datefmt)\n        # Use `logging.Formatter` for non-microsecond formats\n        return super().formatTime(record, datefmt)\n\n\nclass ColoredLevelFormatter(DatetimeFormatter):\n    \"\"\"A logging formatter which colorizes the %(levelname)..s part of the\n    log format passed to __init__.\"\"\"\n\n    LOGLEVEL_COLOROPTS: Mapping[int, AbstractSet[str]] = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-.]?\\d*(?:\\.\\d+)?s)\")\n\n    def __init__(self, terminalwriter: TerminalWriter, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self._terminalwriter = terminalwriter\n        self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping: dict[int, str] = {}\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            self.add_color_level(level, *color_opts)\n\n    def add_color_level(self, level: int, *color_opts: str) -> None:\n        \"\"\"Add or update color opts for a log level.\n\n        :param level:\n            Log level to apply a style to, e.g. ``logging.INFO``.\n        :param color_opts:\n            ANSI escape sequence color options. Capitalized colors indicates\n            background color, i.e. ``'green', 'Yellow', 'bold'`` will give bold\n            green text on yellow background.\n\n        .. warning::\n            This is an experimental API.\n        \"\"\"\n        assert self._fmt is not None\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        formatted_levelname = levelname_fmt % {\"levelname\": logging.getLevelName(level)}\n\n        # add ANSI escape sequences around the formatted levelname\n        color_kwargs = {name: True for name in color_opts}\n        colorized_formatted_levelname = self._terminalwriter.markup(\n            formatted_levelname, **color_kwargs\n        )\n        self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n            colorized_formatted_levelname, self._fmt\n        )\n\n    def format(self, record: logging.LogRecord) -> str:\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        self._style._fmt = fmt\n        return super().format(record)\n\n\nclass PercentStyleMultiline(logging.PercentStyle):\n    \"\"\"A logging style with special support for multiline messages.\n\n    If the message of a record consists of multiple lines, this style\n    formats the message as if each line were logged separately.\n    \"\"\"\n\n    def __init__(self, fmt: str, auto_indent: int | str | bool | None) -> None:\n        super().__init__(fmt)\n        self._auto_indent = self._get_auto_indent(auto_indent)\n\n    @staticmethod\n    def _get_auto_indent(auto_indent_option: int | str | bool | None) -> int:\n        \"\"\"Determine the current auto indentation setting.\n\n        Specify auto indent behavior (on/off/fixed) by passing in\n        extra={\"auto_indent\": [value]} to the call to logging.log() or\n        using a --log-auto-indent [value] command line or the\n        log_auto_indent [value] config option.\n\n        Default behavior is auto-indent off.\n\n        Using the string \"True\" or \"on\" or the boolean True as the value\n        turns auto indent on, using the string \"False\" or \"off\" or the\n        boolean False or the int 0 turns it off, and specifying a\n        positive integer fixes the indentation position to the value\n        specified.\n\n        Any other values for the option are invalid, and will silently be\n        converted to the default.\n\n        :param None|bool|int|str auto_indent_option:\n            User specified option for indentation from command line, config\n            or extra kwarg. Accepts int, bool or str. str option accepts the\n            same range of values as boolean config options, as well as\n            positive integers represented in str form.\n\n        :returns:\n            Indentation value, which can be\n            -1 (automatically determine indentation) or\n            0 (auto-indent turned off) or\n            >0 (explicitly set indentation position).\n        \"\"\"\n        if auto_indent_option is None:\n            return 0\n        elif isinstance(auto_indent_option, bool):\n            if auto_indent_option:\n                return -1\n            else:\n                return 0\n        elif isinstance(auto_indent_option, int):\n            return int(auto_indent_option)\n        elif isinstance(auto_indent_option, str):\n            try:\n                return int(auto_indent_option)\n            except ValueError:\n                pass\n            try:\n                if _strtobool(auto_indent_option):\n                    return -1\n            except ValueError:\n                return 0\n\n        return 0\n\n    def format(self, record: logging.LogRecord) -> str:\n        if \"\\n\" in record.message:\n            if hasattr(record, \"auto_indent\"):\n                # Passed in from the \"extra={}\" kwarg on the call to logging.log().\n                auto_indent = self._get_auto_indent(record.auto_indent)\n            else:\n                auto_indent = self._auto_indent\n\n            if auto_indent:\n                lines = record.message.splitlines()\n                formatted = self._fmt % {**record.__dict__, \"message\": lines[0]}\n\n                if auto_indent < 0:\n                    indentation = _remove_ansi_escape_sequences(formatted).find(\n                        lines[0]\n                    )\n                else:\n                    # Optimizes logging by allowing a fixed indentation.\n                    indentation = auto_indent\n                lines[0] = formatted\n                return (\"\\n\" + \" \" * indentation).join(lines)\n        return self._fmt % record.__dict__\n\n\ndef get_option_ini(config: Config, *names: str):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"Default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        metavar=\"LEVEL\",\n        help=(\n            \"Level of messages to catch/display.\"\n            \" Not set by default, so it depends on the root/parent log handler's\"\n            ' effective level, where it is \"WARNING\" by default.'\n        ),\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"Log format used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"Log date format used by the logging module\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='Enable log display during test run (also known as \"live logging\")',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"CLI logging level\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"Log format used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"Log date format used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"Path to a file when logging will be written to\",\n    )\n    add_option_ini(\n        \"--log-file-mode\",\n        dest=\"log_file_mode\",\n        default=\"w\",\n        choices=[\"w\", \"a\"],\n        help=\"Log file open mode\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"Log file logging level\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=None,\n        help=\"Log format used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=None,\n        help=\"Log date format used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-auto-indent\",\n        dest=\"log_auto_indent\",\n        default=None,\n        help=\"Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.\",\n    )\n    group.addoption(\n        \"--log-disable\",\n        action=\"append\",\n        default=[],\n        dest=\"logger_disable\",\n        help=\"Disable a logger by name. Can be passed multiple times.\",\n    )\n\n\n_HandlerType = TypeVar(\"_HandlerType\", bound=logging.Handler)\n\n\n# Not using @contextmanager for performance reasons.\nclass catching_logs(Generic[_HandlerType]):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n\n    __slots__ = (\"handler\", \"level\", \"orig_level\")\n\n    def __init__(self, handler: _HandlerType, level: int | None = None) -> None:\n        self.handler = handler\n        self.level = level\n\n    def __enter__(self) -> _HandlerType:\n        root_logger = logging.getLogger()\n        if self.level is not None:\n            self.handler.setLevel(self.level)\n        root_logger.addHandler(self.handler)\n        if self.level is not None:\n            self.orig_level = root_logger.level\n            root_logger.setLevel(min(self.orig_level, self.level))\n        return self.handler\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        root_logger = logging.getLogger()\n        if self.level is not None:\n            root_logger.setLevel(self.orig_level)\n        root_logger.removeHandler(self.handler)\n\n\nclass LogCaptureHandler(logging_StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Create a new log handler.\"\"\"\n        super().__init__(StringIO())\n        self.records: list[logging.LogRecord] = []\n\n    def emit(self, record: logging.LogRecord) -> None:\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        super().emit(record)\n\n    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()\n\n    def clear(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n\n    def handleError(self, record: logging.LogRecord) -> None:\n        if logging.raiseExceptions:\n            # Fail the test if the log message is bad (emit failed).\n            # The default behavior of logging is to print \"Logging error\"\n            # to stderr with the call stack and some extra details.\n            # pytest wants to make such mistakes visible during testing.\n            raise  # pylint: disable=misplaced-bare-raise\n\n\n@final\nclass LogCaptureFixture:\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item: nodes.Node, *, _ispytest: bool = False) -> None:\n        check_ispytest(_ispytest)\n        self._item = item\n        self._initial_handler_level: int | None = None\n        # Dict of log name -> log level.\n        self._initial_logger_levels: dict[str | None, int] = {}\n        self._initial_disabled_logging_level: int | None = None\n\n    def _finalize(self) -> None:\n        \"\"\"Finalize the fixture.\n\n        This restores the log levels and the disabled logging levels changed by :meth:`set_level`.\n        \"\"\"\n        # Restore log levels.\n        if self._initial_handler_level is not None:\n            self.handler.setLevel(self._initial_handler_level)\n        for logger_name, level in self._initial_logger_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n        # Disable logging at the original disabled logging level.\n        if self._initial_disabled_logging_level is not None:\n            logging.disable(self._initial_disabled_logging_level)\n            self._initial_disabled_logging_level = None\n\n    @property\n    def handler(self) -> LogCaptureHandler:\n        \"\"\"Get the logging handler used by the fixture.\"\"\"\n        return self._item.stash[caplog_handler_key]\n\n    def get_records(\n        self, when: Literal[\"setup\", \"call\", \"teardown\"]\n    ) -> list[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param when:\n            Which test phase to obtain the records from.\n            Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n\n    @property\n    def text(self) -> str:\n        \"\"\"The formatted log text.\"\"\"\n        return _remove_ansi_escape_sequences(self.handler.stream.getvalue())\n\n    @property\n    def records(self) -> list[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self) -> list[tuple[str, int, str]]:\n        \"\"\"A list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self) -> list[str]:\n        \"\"\"A list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for\n        interpolation, log messages in this list are all interpolated.\n\n        Unlike 'text', which contains the output from the handler, log\n        messages in this list are unadorned with levels, timestamps, etc,\n        making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or\n        the `exc_info` or `stack_info` arguments to the logging functions) is\n        not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.clear()\n\n    def _force_enable_logging(\n        self, level: int | str, logger_obj: logging.Logger\n    ) -> int:\n        \"\"\"Enable the desired logging level if the global level was disabled via ``logging.disabled``.\n\n        Only enables logging levels greater than or equal to the requested ``level``.\n\n        Does nothing if the desired ``level`` wasn't disabled.\n\n        :param level:\n            The logger level caplog should capture.\n            All logging is enabled if a non-standard logging level string is supplied.\n            Valid level strings are in :data:`logging._nameToLevel`.\n        :param logger_obj: The logger object to check.\n\n        :return: The original disabled logging level.\n        \"\"\"\n        original_disable_level: int = logger_obj.manager.disable\n\n        if isinstance(level, str):\n            # Try to translate the level string to an int for `logging.disable()`\n            level = logging.getLevelName(level)\n\n        if not isinstance(level, int):\n            # The level provided was not valid, so just un-disable all logging.\n            logging.disable(logging.NOTSET)\n        elif not logger_obj.isEnabledFor(level):\n            # Each level is `10` away from other levels.\n            # https://docs.python.org/3/library/logging.html#logging-levels\n            disable_level = max(level - 10, logging.NOTSET)\n            logging.disable(disable_level)\n\n        return original_disable_level\n\n    def set_level(self, level: int | str, logger: str | None = None) -> None:\n        \"\"\"Set the threshold level of a logger for the duration of a test.\n\n        Logging messages which are less severe than this level will not be captured.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be\n            restored to their initial values at the end of the test.\n\n        Will enable the requested logging level if it was disabled via :func:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        \"\"\"\n        logger_obj = logging.getLogger(logger)\n        # Save the original log-level to restore it during teardown.\n        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n        logger_obj.setLevel(level)\n        if self._initial_handler_level is None:\n            self._initial_handler_level = self.handler.level\n        self.handler.setLevel(level)\n        initial_disabled_logging_level = self._force_enable_logging(level, logger_obj)\n        if self._initial_disabled_logging_level is None:\n            self._initial_disabled_logging_level = initial_disabled_logging_level\n\n    @contextmanager\n    def at_level(\n        self, level: int | str, logger: str | None = None\n    ) -> Generator[None, None, None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.\n\n        Will enable the requested logging level if it was disabled via :func:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        \"\"\"\n        logger_obj = logging.getLogger(logger)\n        orig_level = logger_obj.level\n        logger_obj.setLevel(level)\n        handler_orig_level = self.handler.level\n        self.handler.setLevel(level)\n        original_disable_level = self._force_enable_logging(level, logger_obj)\n        try:\n            yield\n        finally:\n            logger_obj.setLevel(orig_level)\n            self.handler.setLevel(handler_orig_level)\n            logging.disable(original_disable_level)\n\n    @contextmanager\n    def filtering(self, filter_: logging.Filter) -> Generator[None, None, None]:\n        \"\"\"Context manager that temporarily adds the given filter to the caplog's\n        :meth:`handler` for the 'with' statement block, and removes that filter at the\n        end of the block.\n\n        :param filter_: A custom :class:`logging.Filter` object.\n\n        .. versionadded:: 7.5\n        \"\"\"\n        self.handler.addFilter(filter_)\n        try:\n            yield\n        finally:\n            self.handler.removeFilter(filter_)\n\n\n@fixture\ndef caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.messages        -> list of format-interpolated log messages\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node, _ispytest=True)\n    yield result\n    result._finalize()\n\n\ndef get_log_level_for_setting(config: Config, *setting_names: str) -> int | None:\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return None\n\n    if isinstance(log_level, str):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError as e:\n        # Python logging does not recognise this as a logging level\n        raise UsageError(\n            f\"'{log_level}' is not recognized as a logging level name for \"\n            f\"'{setting_name}'. Please consider passing the \"\n            \"logging level num instead.\"\n        ) from e\n\n\n# run after terminalreporter/capturemanager are configured\n@hookimpl(trylast=True)\ndef pytest_configure(config: Config) -> None:\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin:\n    \"\"\"Attaches to the logging module and captures log messages for each test.\"\"\"\n\n    def __init__(self, config: Config) -> None:\n        \"\"\"Create a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # Report logging.\n        self.formatter = self._create_formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n            get_option_ini(config, \"log_auto_indent\"),\n        )\n        self.log_level = get_log_level_for_setting(config, \"log_level\")\n        self.caplog_handler = LogCaptureHandler()\n        self.caplog_handler.setFormatter(self.formatter)\n        self.report_handler = LogCaptureHandler()\n        self.report_handler.setFormatter(self.formatter)\n\n        # File logging.\n        self.log_file_level = get_log_level_for_setting(\n            config, \"log_file_level\", \"log_level\"\n        )\n        log_file = get_option_ini(config, \"log_file\") or os.devnull\n        if log_file != os.devnull:\n            directory = os.path.dirname(os.path.abspath(log_file))\n            if not os.path.isdir(directory):\n                os.makedirs(directory)\n\n        self.log_file_mode = get_option_ini(config, \"log_file_mode\") or \"w\"\n        self.log_file_handler = _FileHandler(\n            log_file, mode=self.log_file_mode, encoding=\"UTF-8\"\n        )\n        log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n\n        log_file_formatter = DatetimeFormatter(\n            log_file_format, datefmt=log_file_date_format\n        )\n        self.log_file_handler.setFormatter(log_file_formatter)\n\n        # CLI/live logging.\n        self.log_cli_level = get_log_level_for_setting(\n            config, \"log_cli_level\", \"log_level\"\n        )\n        if self._log_cli_enabled():\n            terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n            # Guaranteed by `_log_cli_enabled()`.\n            assert terminal_reporter is not None\n            capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n            # if capturemanager plugin is disabled, live logging still works.\n            self.log_cli_handler: (\n                _LiveLoggingStreamHandler | _LiveLoggingNullHandler\n            ) = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        else:\n            self.log_cli_handler = _LiveLoggingNullHandler()\n        log_cli_formatter = self._create_formatter(\n            get_option_ini(config, \"log_cli_format\", \"log_format\"),\n            get_option_ini(config, \"log_cli_date_format\", \"log_date_format\"),\n            get_option_ini(config, \"log_auto_indent\"),\n        )\n        self.log_cli_handler.setFormatter(log_cli_formatter)\n        self._disable_loggers(loggers_to_disable=config.option.logger_disable)\n\n    def _disable_loggers(self, loggers_to_disable: list[str]) -> None:\n        if not loggers_to_disable:\n            return\n\n        for name in loggers_to_disable:\n            logger = logging.getLogger(name)\n            logger.disabled = True\n\n    def _create_formatter(self, log_format, log_date_format, auto_indent):\n        # Color option doesn't exist if terminal plugin is disabled.\n        color = getattr(self._config.option, \"color\", \"no\")\n        if color != \"no\" and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(\n            log_format\n        ):\n            formatter: logging.Formatter = ColoredLevelFormatter(\n                create_terminal_writer(self._config), log_format, log_date_format\n            )\n        else:\n            formatter = DatetimeFormatter(log_format, log_date_format)\n\n        formatter._style = PercentStyleMultiline(\n            formatter._style._fmt, auto_indent=auto_indent\n        )\n\n        return formatter\n\n    def set_log_path(self, fname: str) -> None:\n        \"\"\"Set the filename parameter for Logging.FileHandler().\n\n        Creates parent directory if it does not exist.\n\n        .. warning::\n            This is an experimental API.\n        \"\"\"\n        fpath = Path(fname)\n\n        if not fpath.is_absolute():\n            fpath = self._config.rootpath / fpath\n\n        if not fpath.parent.exists():\n            fpath.parent.mkdir(exist_ok=True, parents=True)\n\n        # https://github.com/python/mypy/issues/11193\n        stream: io.TextIOWrapper = fpath.open(mode=self.log_file_mode, encoding=\"UTF-8\")  # type: ignore[assignment]\n        old_stream = self.log_file_handler.setStream(stream)\n        if old_stream:\n            old_stream.close()\n\n    def _log_cli_enabled(self) -> bool:\n        \"\"\"Return whether live logging is enabled.\"\"\"\n        enabled = self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n        if not enabled:\n            return False\n\n        terminal_reporter = self._config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return False\n\n        return True\n\n    @hookimpl(wrapper=True, tryfirst=True)\n    def pytest_sessionstart(self) -> Generator[None, None, None]:\n        self.log_cli_handler.set_when(\"sessionstart\")\n\n        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n            with catching_logs(self.log_file_handler, level=self.log_file_level):\n                return (yield)\n\n    @hookimpl(wrapper=True, tryfirst=True)\n    def pytest_collection(self) -> Generator[None, None, None]:\n        self.log_cli_handler.set_when(\"collection\")\n\n        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n            with catching_logs(self.log_file_handler, level=self.log_file_level):\n                return (yield)\n\n    @hookimpl(wrapper=True)\n    def pytest_runtestloop(self, session: Session) -> Generator[None, object, object]:\n        if session.config.option.collectonly:\n            return (yield)\n\n        if self._log_cli_enabled() and self._config.getoption(\"verbose\") < 1:\n            # The verbose flag is needed to avoid messy test progress output.\n            self._config.option.verbose = 1\n\n        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n            with catching_logs(self.log_file_handler, level=self.log_file_level):\n                return (yield)  # Run all the tests.\n\n    @hookimpl\n    def pytest_runtest_logstart(self) -> None:\n        self.log_cli_handler.reset()\n        self.log_cli_handler.set_when(\"start\")\n\n    @hookimpl\n    def pytest_runtest_logreport(self) -> None:\n        self.log_cli_handler.set_when(\"logreport\")\n\n    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:\n        \"\"\"Implement the internals of the pytest_runtest_xxx() hooks.\"\"\"\n        with catching_logs(\n            self.caplog_handler,\n            level=self.log_level,\n        ) as caplog_handler, catching_logs(\n            self.report_handler,\n            level=self.log_level,\n        ) as report_handler:\n            caplog_handler.reset()\n            report_handler.reset()\n            item.stash[caplog_records_key][when] = caplog_handler.records\n            item.stash[caplog_handler_key] = caplog_handler\n\n            try:\n                yield\n            finally:\n                log = report_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:\n        self.log_cli_handler.set_when(\"setup\")\n\n        empty: dict[str, list[logging.LogRecord]] = {}\n        item.stash[caplog_records_key] = empty\n        yield from self._runtest_for(item, \"setup\")\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(self, item: nodes.Item) -> Generator[None, None, None]:\n        self.log_cli_handler.set_when(\"call\")\n\n        yield from self._runtest_for(item, \"call\")\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_teardown(self, item: nodes.Item) -> Generator[None, None, None]:\n        self.log_cli_handler.set_when(\"teardown\")\n\n        try:\n            yield from self._runtest_for(item, \"teardown\")\n        finally:\n            del item.stash[caplog_records_key]\n            del item.stash[caplog_handler_key]\n\n    @hookimpl\n    def pytest_runtest_logfinish(self) -> None:\n        self.log_cli_handler.set_when(\"finish\")\n\n    @hookimpl(wrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self) -> Generator[None, None, None]:\n        self.log_cli_handler.set_when(\"sessionfinish\")\n\n        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n            with catching_logs(self.log_file_handler, level=self.log_file_level):\n                return (yield)\n\n    @hookimpl\n    def pytest_unconfigure(self) -> None:\n        # Close the FileHandler explicitly.\n        # (logging.shutdown might have lost the weakref?!)\n        self.log_file_handler.close()\n\n\nclass _FileHandler(logging.FileHandler):\n    \"\"\"A logging FileHandler with pytest tweaks.\"\"\"\n\n    def handleError(self, record: logging.LogRecord) -> None:\n        # Handled by LogCaptureHandler.\n        pass\n\n\nclass _LiveLoggingStreamHandler(logging_StreamHandler):\n    \"\"\"A logging StreamHandler used by the live logging feature: it will\n    write a newline before the first log message in each test.\n\n    During live logging we must also explicitly disable stdout/stderr\n    capturing otherwise it will get captured and won't appear in the\n    terminal.\n    \"\"\"\n\n    # Officially stream needs to be a IO[str], but TerminalReporter\n    # isn't. So force it.\n    stream: TerminalReporter = None  # type: ignore\n\n    def __init__(\n        self,\n        terminal_reporter: TerminalReporter,\n        capture_manager: CaptureManager | None,\n    ) -> None:\n        super().__init__(stream=terminal_reporter)  # type: ignore[arg-type]\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self) -> None:\n        \"\"\"Reset the handler; should be called before the start of each test.\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when: str | None) -> None:\n        \"\"\"Prepare for the given test phase (setup/call/teardown).\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record: logging.LogRecord) -> None:\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else nullcontext()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            super().emit(record)\n\n    def handleError(self, record: logging.LogRecord) -> None:\n        # Handled by LogCaptureHandler.\n        pass\n\n\nclass _LiveLoggingNullHandler(logging.NullHandler):\n    \"\"\"A logging handler used when live logging is disabled.\"\"\"\n\n    def reset(self) -> None:\n        pass\n\n    def set_when(self, when: str) -> None:\n        pass\n\n    def handleError(self, record: logging.LogRecord) -> None:\n        # Handled by LogCaptureHandler.\n        pass\n", "src/_pytest/pathlib.py": "from __future__ import annotations\n\nimport atexit\nimport contextlib\nfrom enum import Enum\nfrom errno import EBADF\nfrom errno import ELOOP\nfrom errno import ENOENT\nfrom errno import ENOTDIR\nimport fnmatch\nfrom functools import partial\nfrom importlib.machinery import ModuleSpec\nimport importlib.util\nimport itertools\nimport os\nfrom os.path import expanduser\nfrom os.path import expandvars\nfrom os.path import isabs\nfrom os.path import sep\nfrom pathlib import Path\nfrom pathlib import PurePath\nfrom posixpath import sep as posix_sep\nimport shutil\nimport sys\nimport types\nfrom types import ModuleType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import TypeVar\nimport uuid\nimport warnings\n\nfrom _pytest.compat import assert_never\nfrom _pytest.outcomes import skip\nfrom _pytest.warning_types import PytestWarning\n\n\nLOCK_TIMEOUT = 60 * 60 * 24 * 3\n\n\n_AnyPurePath = TypeVar(\"_AnyPurePath\", bound=PurePath)\n\n# The following function, variables and comments were\n# copied from cpython 3.9 Lib/pathlib.py file.\n\n# EBADF - guard against macOS `stat` throwing EBADF\n_IGNORED_ERRORS = (ENOENT, ENOTDIR, EBADF, ELOOP)\n\n_IGNORED_WINERRORS = (\n    21,  # ERROR_NOT_READY - drive exists but is not accessible\n    1921,  # ERROR_CANT_RESOLVE_FILENAME - fix for broken symlink pointing to itself\n)\n\n\ndef _ignore_error(exception: Exception) -> bool:\n    return (\n        getattr(exception, \"errno\", None) in _IGNORED_ERRORS\n        or getattr(exception, \"winerror\", None) in _IGNORED_WINERRORS\n    )\n\n\ndef get_lock_path(path: _AnyPurePath) -> _AnyPurePath:\n    return path.joinpath(\".lock\")\n\n\ndef on_rm_rf_error(\n    func: Callable[..., Any] | None,\n    path: str,\n    excinfo: BaseException\n    | tuple[type[BaseException], BaseException, types.TracebackType | None],\n    *,\n    start_path: Path,\n) -> bool:\n    \"\"\"Handle known read-only errors during rmtree.\n\n    The returned value is used only by our own tests.\n    \"\"\"\n    if isinstance(excinfo, BaseException):\n        exc = excinfo\n    else:\n        exc = excinfo[1]\n\n    # Another process removed the file in the middle of the \"rm_rf\" (xdist for example).\n    # More context: https://github.com/pytest-dev/pytest/issues/5974#issuecomment-543799018\n    if isinstance(exc, FileNotFoundError):\n        return False\n\n    if not isinstance(exc, PermissionError):\n        warnings.warn(\n            PytestWarning(f\"(rm_rf) error removing {path}\\n{type(exc)}: {exc}\")\n        )\n        return False\n\n    if func not in (os.rmdir, os.remove, os.unlink):\n        if func not in (os.open,):\n            warnings.warn(\n                PytestWarning(\n                    f\"(rm_rf) unknown function {func} when removing {path}:\\n{type(exc)}: {exc}\"\n                )\n            )\n        return False\n\n    # Chmod + retry.\n    import stat\n\n    def chmod_rw(p: str) -> None:\n        mode = os.stat(p).st_mode\n        os.chmod(p, mode | stat.S_IRUSR | stat.S_IWUSR)\n\n    # For files, we need to recursively go upwards in the directories to\n    # ensure they all are also writable.\n    p = Path(path)\n    if p.is_file():\n        for parent in p.parents:\n            chmod_rw(str(parent))\n            # Stop when we reach the original path passed to rm_rf.\n            if parent == start_path:\n                break\n    chmod_rw(str(path))\n\n    func(path)\n    return True\n\n\ndef ensure_extended_length_path(path: Path) -> Path:\n    \"\"\"Get the extended-length version of a path (Windows).\n\n    On Windows, by default, the maximum length of a path (MAX_PATH) is 260\n    characters, and operations on paths longer than that fail. But it is possible\n    to overcome this by converting the path to \"extended-length\" form before\n    performing the operation:\n    https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation\n\n    On Windows, this function returns the extended-length absolute version of path.\n    On other platforms it returns path unchanged.\n    \"\"\"\n    if sys.platform.startswith(\"win32\"):\n        path = path.resolve()\n        path = Path(get_extended_length_path_str(str(path)))\n    return path\n\n\ndef get_extended_length_path_str(path: str) -> str:\n    \"\"\"Convert a path to a Windows extended length path.\"\"\"\n    long_path_prefix = \"\\\\\\\\?\\\\\"\n    unc_long_path_prefix = \"\\\\\\\\?\\\\UNC\\\\\"\n    if path.startswith((long_path_prefix, unc_long_path_prefix)):\n        return path\n    # UNC\n    if path.startswith(\"\\\\\\\\\"):\n        return unc_long_path_prefix + path[2:]\n    return long_path_prefix + path\n\n\ndef rm_rf(path: Path) -> None:\n    \"\"\"Remove the path contents recursively, even if some elements\n    are read-only.\"\"\"\n    path = ensure_extended_length_path(path)\n    onerror = partial(on_rm_rf_error, start_path=path)\n    if sys.version_info >= (3, 12):\n        shutil.rmtree(str(path), onexc=onerror)\n    else:\n        shutil.rmtree(str(path), onerror=onerror)\n\n\ndef find_prefixed(root: Path, prefix: str) -> Iterator[os.DirEntry[str]]:\n    \"\"\"Find all elements in root that begin with the prefix, case-insensitive.\"\"\"\n    l_prefix = prefix.lower()\n    for x in os.scandir(root):\n        if x.name.lower().startswith(l_prefix):\n            yield x\n\n\ndef extract_suffixes(iter: Iterable[os.DirEntry[str]], prefix: str) -> Iterator[str]:\n    \"\"\"Return the parts of the paths following the prefix.\n\n    :param iter: Iterator over path names.\n    :param prefix: Expected prefix of the path names.\n    \"\"\"\n    p_len = len(prefix)\n    for entry in iter:\n        yield entry.name[p_len:]\n\n\ndef find_suffixes(root: Path, prefix: str) -> Iterator[str]:\n    \"\"\"Combine find_prefixes and extract_suffixes.\"\"\"\n    return extract_suffixes(find_prefixed(root, prefix), prefix)\n\n\ndef parse_num(maybe_num: str) -> int:\n    \"\"\"Parse number path suffixes, returns -1 on error.\"\"\"\n    try:\n        return int(maybe_num)\n    except ValueError:\n        return -1\n\n\ndef _force_symlink(root: Path, target: str | PurePath, link_to: str | Path) -> None:\n    \"\"\"Helper to create the current symlink.\n\n    It's full of race conditions that are reasonably OK to ignore\n    for the context of best effort linking to the latest test run.\n\n    The presumption being that in case of much parallelism\n    the inaccuracy is going to be acceptable.\n    \"\"\"\n    current_symlink = root.joinpath(target)\n    try:\n        current_symlink.unlink()\n    except OSError:\n        pass\n    try:\n        current_symlink.symlink_to(link_to)\n    except Exception:\n        pass\n\n\ndef make_numbered_dir(root: Path, prefix: str, mode: int = 0o700) -> Path:\n    \"\"\"Create a directory with an increased number as suffix for the given prefix.\"\"\"\n    for i in range(10):\n        # try up to 10 times to create the folder\n        max_existing = max(map(parse_num, find_suffixes(root, prefix)), default=-1)\n        new_number = max_existing + 1\n        new_path = root.joinpath(f\"{prefix}{new_number}\")\n        try:\n            new_path.mkdir(mode=mode)\n        except Exception:\n            pass\n        else:\n            _force_symlink(root, prefix + \"current\", new_path)\n            return new_path\n    else:\n        raise OSError(\n            \"could not create numbered dir with prefix \"\n            f\"{prefix} in {root} after 10 tries\"\n        )\n\n\ndef create_cleanup_lock(p: Path) -> Path:\n    \"\"\"Create a lock to prevent premature folder cleanup.\"\"\"\n    lock_path = get_lock_path(p)\n    try:\n        fd = os.open(str(lock_path), os.O_WRONLY | os.O_CREAT | os.O_EXCL, 0o644)\n    except FileExistsError as e:\n        raise OSError(f\"cannot create lockfile in {p}\") from e\n    else:\n        pid = os.getpid()\n        spid = str(pid).encode()\n        os.write(fd, spid)\n        os.close(fd)\n        if not lock_path.is_file():\n            raise OSError(\"lock path got renamed after successful creation\")\n        return lock_path\n\n\ndef register_cleanup_lock_removal(\n    lock_path: Path, register: Any = atexit.register\n) -> Any:\n    \"\"\"Register a cleanup function for removing a lock, by default on atexit.\"\"\"\n    pid = os.getpid()\n\n    def cleanup_on_exit(lock_path: Path = lock_path, original_pid: int = pid) -> None:\n        current_pid = os.getpid()\n        if current_pid != original_pid:\n            # fork\n            return\n        try:\n            lock_path.unlink()\n        except OSError:\n            pass\n\n    return register(cleanup_on_exit)\n\n\ndef maybe_delete_a_numbered_dir(path: Path) -> None:\n    \"\"\"Remove a numbered directory if its lock can be obtained and it does\n    not seem to be in use.\"\"\"\n    path = ensure_extended_length_path(path)\n    lock_path = None\n    try:\n        lock_path = create_cleanup_lock(path)\n        parent = path.parent\n\n        garbage = parent.joinpath(f\"garbage-{uuid.uuid4()}\")\n        path.rename(garbage)\n        rm_rf(garbage)\n    except OSError:\n        #  known races:\n        #  * other process did a cleanup at the same time\n        #  * deletable folder was found\n        #  * process cwd (Windows)\n        return\n    finally:\n        # If we created the lock, ensure we remove it even if we failed\n        # to properly remove the numbered dir.\n        if lock_path is not None:\n            try:\n                lock_path.unlink()\n            except OSError:\n                pass\n\n\ndef ensure_deletable(path: Path, consider_lock_dead_if_created_before: float) -> bool:\n    \"\"\"Check if `path` is deletable based on whether the lock file is expired.\"\"\"\n    if path.is_symlink():\n        return False\n    lock = get_lock_path(path)\n    try:\n        if not lock.is_file():\n            return True\n    except OSError:\n        # we might not have access to the lock file at all, in this case assume\n        # we don't have access to the entire directory (#7491).\n        return False\n    try:\n        lock_time = lock.stat().st_mtime\n    except Exception:\n        return False\n    else:\n        if lock_time < consider_lock_dead_if_created_before:\n            # We want to ignore any errors while trying to remove the lock such as:\n            # - PermissionDenied, like the file permissions have changed since the lock creation;\n            # - FileNotFoundError, in case another pytest process got here first;\n            # and any other cause of failure.\n            with contextlib.suppress(OSError):\n                lock.unlink()\n                return True\n        return False\n\n\ndef try_cleanup(path: Path, consider_lock_dead_if_created_before: float) -> None:\n    \"\"\"Try to cleanup a folder if we can ensure it's deletable.\"\"\"\n    if ensure_deletable(path, consider_lock_dead_if_created_before):\n        maybe_delete_a_numbered_dir(path)\n\n\ndef cleanup_candidates(root: Path, prefix: str, keep: int) -> Iterator[Path]:\n    \"\"\"List candidates for numbered directories to be removed - follows py.path.\"\"\"\n    max_existing = max(map(parse_num, find_suffixes(root, prefix)), default=-1)\n    max_delete = max_existing - keep\n    entries = find_prefixed(root, prefix)\n    entries, entries2 = itertools.tee(entries)\n    numbers = map(parse_num, extract_suffixes(entries2, prefix))\n    for entry, number in zip(entries, numbers):\n        if number <= max_delete:\n            yield Path(entry)\n\n\ndef cleanup_dead_symlinks(root: Path) -> None:\n    for left_dir in root.iterdir():\n        if left_dir.is_symlink():\n            if not left_dir.resolve().exists():\n                left_dir.unlink()\n\n\ndef cleanup_numbered_dir(\n    root: Path, prefix: str, keep: int, consider_lock_dead_if_created_before: float\n) -> None:\n    \"\"\"Cleanup for lock driven numbered directories.\"\"\"\n    if not root.exists():\n        return\n    for path in cleanup_candidates(root, prefix, keep):\n        try_cleanup(path, consider_lock_dead_if_created_before)\n    for path in root.glob(\"garbage-*\"):\n        try_cleanup(path, consider_lock_dead_if_created_before)\n\n    cleanup_dead_symlinks(root)\n\n\ndef make_numbered_dir_with_cleanup(\n    root: Path,\n    prefix: str,\n    keep: int,\n    lock_timeout: float,\n    mode: int,\n) -> Path:\n    \"\"\"Create a numbered dir with a cleanup lock and remove old ones.\"\"\"\n    e = None\n    for i in range(10):\n        try:\n            p = make_numbered_dir(root, prefix, mode)\n            # Only lock the current dir when keep is not 0\n            if keep != 0:\n                lock_path = create_cleanup_lock(p)\n                register_cleanup_lock_removal(lock_path)\n        except Exception as exc:\n            e = exc\n        else:\n            consider_lock_dead_if_created_before = p.stat().st_mtime - lock_timeout\n            # Register a cleanup for program exit\n            atexit.register(\n                cleanup_numbered_dir,\n                root,\n                prefix,\n                keep,\n                consider_lock_dead_if_created_before,\n            )\n            return p\n    assert e is not None\n    raise e\n\n\ndef resolve_from_str(input: str, rootpath: Path) -> Path:\n    input = expanduser(input)\n    input = expandvars(input)\n    if isabs(input):\n        return Path(input)\n    else:\n        return rootpath.joinpath(input)\n\n\ndef fnmatch_ex(pattern: str, path: str | os.PathLike[str]) -> bool:\n    \"\"\"A port of FNMatcher from py.path.common which works with PurePath() instances.\n\n    The difference between this algorithm and PurePath.match() is that the\n    latter matches \"**\" glob expressions for each part of the path, while\n    this algorithm uses the whole path instead.\n\n    For example:\n        \"tests/foo/bar/doc/test_foo.py\" matches pattern \"tests/**/doc/test*.py\"\n        with this algorithm, but not with PurePath.match().\n\n    This algorithm was ported to keep backward-compatibility with existing\n    settings which assume paths match according this logic.\n\n    References:\n    * https://bugs.python.org/issue29249\n    * https://bugs.python.org/issue34731\n    \"\"\"\n    path = PurePath(path)\n    iswin32 = sys.platform.startswith(\"win\")\n\n    if iswin32 and sep not in pattern and posix_sep in pattern:\n        # Running on Windows, the pattern has no Windows path separators,\n        # and the pattern has one or more Posix path separators. Replace\n        # the Posix path separators with the Windows path separator.\n        pattern = pattern.replace(posix_sep, sep)\n\n    if sep not in pattern:\n        name = path.name\n    else:\n        name = str(path)\n        if path.is_absolute() and not os.path.isabs(pattern):\n            pattern = f\"*{os.sep}{pattern}\"\n    return fnmatch.fnmatch(name, pattern)\n\n\ndef parts(s: str) -> set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n\n\ndef symlink_or_skip(\n    src: os.PathLike[str] | str,\n    dst: os.PathLike[str] | str,\n    **kwargs: Any,\n) -> None:\n    \"\"\"Make a symlink, or skip the test in case symlinks are not supported.\"\"\"\n    try:\n        os.symlink(src, dst, **kwargs)\n    except OSError as e:\n        skip(f\"symlinks not supported: {e}\")\n\n\nclass ImportMode(Enum):\n    \"\"\"Possible values for `mode` parameter of `import_path`.\"\"\"\n\n    prepend = \"prepend\"\n    append = \"append\"\n    importlib = \"importlib\"\n\n\nclass ImportPathMismatchError(ImportError):\n    \"\"\"Raised on import_path() if there is a mismatch of __file__'s.\n\n    This can happen when `import_path` is called multiple times with different filenames that has\n    the same basename but reside in packages\n    (for example \"/tests1/test_foo.py\" and \"/tests2/test_foo.py\").\n    \"\"\"\n\n\ndef import_path(\n    path: str | os.PathLike[str],\n    *,\n    mode: str | ImportMode = ImportMode.prepend,\n    root: Path,\n    consider_namespace_packages: bool,\n) -> ModuleType:\n    \"\"\"\n    Import and return a module from the given path, which can be a file (a module) or\n    a directory (a package).\n\n    :param path:\n        Path to the file to import.\n\n    :param mode:\n        Controls the underlying import mechanism that will be used:\n\n        * ImportMode.prepend: the directory containing the module (or package, taking\n          `__init__.py` files into account) will be put at the *start* of `sys.path` before\n          being imported with `importlib.import_module`.\n\n        * ImportMode.append: same as `prepend`, but the directory will be appended\n          to the end of `sys.path`, if not already in `sys.path`.\n\n        * ImportMode.importlib: uses more fine control mechanisms provided by `importlib`\n          to import the module, which avoids having to muck with `sys.path` at all. It effectively\n          allows having same-named test modules in different places.\n\n    :param root:\n        Used as an anchor when mode == ImportMode.importlib to obtain\n        a unique name for the module being imported so it can safely be stored\n        into ``sys.modules``.\n\n    :param consider_namespace_packages:\n        If True, consider namespace packages when resolving module names.\n\n    :raises ImportPathMismatchError:\n        If after importing the given `path` and the module `__file__`\n        are different. Only raised in `prepend` and `append` modes.\n    \"\"\"\n    path = Path(path)\n    mode = ImportMode(mode)\n\n    if not path.exists():\n        raise ImportError(path)\n\n    if mode is ImportMode.importlib:\n        # Try to import this module using the standard import mechanisms, but\n        # without touching sys.path.\n        try:\n            pkg_root, module_name = resolve_pkg_root_and_module_name(\n                path, consider_namespace_packages=consider_namespace_packages\n            )\n        except CouldNotResolvePathError:\n            pass\n        else:\n            # If the given module name is already in sys.modules, do not import it again.\n            with contextlib.suppress(KeyError):\n                return sys.modules[module_name]\n\n            mod = _import_module_using_spec(\n                module_name, path, pkg_root, insert_modules=False\n            )\n            if mod is not None:\n                return mod\n\n        # Could not import the module with the current sys.path, so we fall back\n        # to importing the file as a single module, not being a part of a package.\n        module_name = module_name_from_path(path, root)\n        with contextlib.suppress(KeyError):\n            return sys.modules[module_name]\n\n        mod = _import_module_using_spec(\n            module_name, path, path.parent, insert_modules=True\n        )\n        if mod is None:\n            raise ImportError(f\"Can't find module {module_name} at location {path}\")\n        return mod\n\n    try:\n        pkg_root, module_name = resolve_pkg_root_and_module_name(\n            path, consider_namespace_packages=consider_namespace_packages\n        )\n    except CouldNotResolvePathError:\n        pkg_root, module_name = path.parent, path.stem\n\n    # Change sys.path permanently: restoring it at the end of this function would cause surprising\n    # problems because of delayed imports: for example, a conftest.py file imported by this function\n    # might have local imports, which would fail at runtime if we restored sys.path.\n    if mode is ImportMode.append:\n        if str(pkg_root) not in sys.path:\n            sys.path.append(str(pkg_root))\n    elif mode is ImportMode.prepend:\n        if str(pkg_root) != sys.path[0]:\n            sys.path.insert(0, str(pkg_root))\n    else:\n        assert_never(mode)\n\n    importlib.import_module(module_name)\n\n    mod = sys.modules[module_name]\n    if path.name == \"__init__.py\":\n        return mod\n\n    ignore = os.environ.get(\"PY_IGNORE_IMPORTMISMATCH\", \"\")\n    if ignore != \"1\":\n        module_file = mod.__file__\n        if module_file is None:\n            raise ImportPathMismatchError(module_name, module_file, path)\n\n        if module_file.endswith((\".pyc\", \".pyo\")):\n            module_file = module_file[:-1]\n        if module_file.endswith(os.sep + \"__init__.py\"):\n            module_file = module_file[: -(len(os.sep + \"__init__.py\"))]\n\n        try:\n            is_same = _is_same(str(path), module_file)\n        except FileNotFoundError:\n            is_same = False\n\n        if not is_same:\n            raise ImportPathMismatchError(module_name, module_file, path)\n\n    return mod\n\n\ndef _import_module_using_spec(\n    module_name: str, module_path: Path, module_location: Path, *, insert_modules: bool\n) -> ModuleType | None:\n    \"\"\"\n    Tries to import a module by its canonical name, path to the .py file, and its\n    parent location.\n\n    :param insert_modules:\n        If True, will call insert_missing_modules to create empty intermediate modules\n        for made-up module names (when importing test files not reachable from sys.path).\n    \"\"\"\n    # Checking with sys.meta_path first in case one of its hooks can import this module,\n    # such as our own assertion-rewrite hook.\n    for meta_importer in sys.meta_path:\n        spec = meta_importer.find_spec(module_name, [str(module_location)])\n        if spec_matches_module_path(spec, module_path):\n            break\n    else:\n        spec = importlib.util.spec_from_file_location(module_name, str(module_path))\n\n    if spec_matches_module_path(spec, module_path):\n        assert spec is not None\n        # Attempt to import the parent module, seems is our responsibility:\n        # https://github.com/python/cpython/blob/73906d5c908c1e0b73c5436faeff7d93698fc074/Lib/importlib/_bootstrap.py#L1308-L1311\n        parent_module_name, _, name = module_name.rpartition(\".\")\n        parent_module: ModuleType | None = None\n        if parent_module_name:\n            parent_module = sys.modules.get(parent_module_name)\n            if parent_module is None:\n                # Find the directory of this module's parent.\n                parent_dir = (\n                    module_path.parent.parent\n                    if module_path.name == \"__init__.py\"\n                    else module_path.parent\n                )\n                # Consider the parent module path as its __init__.py file, if it has one.\n                parent_module_path = (\n                    parent_dir / \"__init__.py\"\n                    if (parent_dir / \"__init__.py\").is_file()\n                    else parent_dir\n                )\n                parent_module = _import_module_using_spec(\n                    parent_module_name,\n                    parent_module_path,\n                    parent_dir,\n                    insert_modules=insert_modules,\n                )\n\n        # Find spec and import this module.\n        mod = importlib.util.module_from_spec(spec)\n        sys.modules[module_name] = mod\n        spec.loader.exec_module(mod)  # type: ignore[union-attr]\n\n        # Set this module as an attribute of the parent module (#12194).\n        if parent_module is not None:\n            setattr(parent_module, name, mod)\n\n        if insert_modules:\n            insert_missing_modules(sys.modules, module_name)\n        return mod\n\n    return None\n\n\ndef spec_matches_module_path(module_spec: ModuleSpec | None, module_path: Path) -> bool:\n    \"\"\"Return true if the given ModuleSpec can be used to import the given module path.\"\"\"\n    if module_spec is None or module_spec.origin is None:\n        return False\n\n    return Path(module_spec.origin) == module_path\n\n\n# Implement a special _is_same function on Windows which returns True if the two filenames\n# compare equal, to circumvent os.path.samefile returning False for mounts in UNC (#7678).\nif sys.platform.startswith(\"win\"):\n\n    def _is_same(f1: str, f2: str) -> bool:\n        return Path(f1) == Path(f2) or os.path.samefile(f1, f2)\n\nelse:\n\n    def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)\n\n\ndef module_name_from_path(path: Path, root: Path) -> str:\n    \"\"\"\n    Return a dotted module name based on the given path, anchored on root.\n\n    For example: path=\"projects/src/tests/test_foo.py\" and root=\"/projects\", the\n    resulting module name will be \"src.tests.test_foo\".\n    \"\"\"\n    path = path.with_suffix(\"\")\n    try:\n        relative_path = path.relative_to(root)\n    except ValueError:\n        # If we can't get a relative path to root, use the full path, except\n        # for the first part (\"d:\\\\\" or \"/\" depending on the platform, for example).\n        path_parts = path.parts[1:]\n    else:\n        # Use the parts for the relative path to the root path.\n        path_parts = relative_path.parts\n\n    # Module name for packages do not contain the __init__ file, unless\n    # the `__init__.py` file is at the root.\n    if len(path_parts) >= 2 and path_parts[-1] == \"__init__\":\n        path_parts = path_parts[:-1]\n\n    # Module names cannot contain \".\", normalize them to \"_\". This prevents\n    # a directory having a \".\" in the name (\".env.310\" for example) causing extra intermediate modules.\n    # Also, important to replace \".\" at the start of paths, as those are considered relative imports.\n    path_parts = tuple(x.replace(\".\", \"_\") for x in path_parts)\n\n    return \".\".join(path_parts)\n\n\ndef insert_missing_modules(modules: dict[str, ModuleType], module_name: str) -> None:\n    \"\"\"\n    Used by ``import_path`` to create intermediate modules when using mode=importlib.\n\n    When we want to import a module as \"src.tests.test_foo\" for example, we need\n    to create empty modules \"src\" and \"src.tests\" after inserting \"src.tests.test_foo\",\n    otherwise \"src.tests.test_foo\" is not importable by ``__import__``.\n    \"\"\"\n    module_parts = module_name.split(\".\")\n    while module_name:\n        parent_module_name, _, child_name = module_name.rpartition(\".\")\n        if parent_module_name:\n            parent_module = modules.get(parent_module_name)\n            if parent_module is None:\n                try:\n                    # If sys.meta_path is empty, calling import_module will issue\n                    # a warning and raise ModuleNotFoundError. To avoid the\n                    # warning, we check sys.meta_path explicitly and raise the error\n                    # ourselves to fall back to creating a dummy module.\n                    if not sys.meta_path:\n                        raise ModuleNotFoundError\n                    parent_module = importlib.import_module(parent_module_name)\n                except ModuleNotFoundError:\n                    parent_module = ModuleType(\n                        module_name,\n                        doc=\"Empty module created by pytest's importmode=importlib.\",\n                    )\n                modules[parent_module_name] = parent_module\n\n            # Add child attribute to the parent that can reference the child\n            # modules.\n            if not hasattr(parent_module, child_name):\n                setattr(parent_module, child_name, modules[module_name])\n\n        module_parts.pop(-1)\n        module_name = \".\".join(module_parts)\n\n\ndef resolve_package_path(path: Path) -> Path | None:\n    \"\"\"Return the Python package path by looking for the last\n    directory upwards which still contains an __init__.py.\n\n    Returns None if it cannot be determined.\n    \"\"\"\n    result = None\n    for parent in itertools.chain((path,), path.parents):\n        if parent.is_dir():\n            if not (parent / \"__init__.py\").is_file():\n                break\n            if not parent.name.isidentifier():\n                break\n            result = parent\n    return result\n\n\ndef resolve_pkg_root_and_module_name(\n    path: Path, *, consider_namespace_packages: bool = False\n) -> tuple[Path, str]:\n    \"\"\"\n    Return the path to the directory of the root package that contains the\n    given Python file, and its module name:\n\n        src/\n            app/\n                __init__.py\n                core/\n                    __init__.py\n                    models.py\n\n    Passing the full path to `models.py` will yield Path(\"src\") and \"app.core.models\".\n\n    If consider_namespace_packages is True, then we additionally check upwards in the hierarchy\n    for namespace packages:\n\n    https://packaging.python.org/en/latest/guides/packaging-namespace-packages\n\n    Raises CouldNotResolvePathError if the given path does not belong to a package (missing any __init__.py files).\n    \"\"\"\n    pkg_root: Path | None = None\n    pkg_path = resolve_package_path(path)\n    if pkg_path is not None:\n        pkg_root = pkg_path.parent\n    if consider_namespace_packages:\n        start = pkg_root if pkg_root is not None else path.parent\n        for candidate in (start, *start.parents):\n            module_name = compute_module_name(candidate, path)\n            if module_name and is_importable(module_name, path):\n                # Point the pkg_root to the root of the namespace package.\n                pkg_root = candidate\n                break\n\n    if pkg_root is not None:\n        module_name = compute_module_name(pkg_root, path)\n        if module_name:\n            return pkg_root, module_name\n\n    raise CouldNotResolvePathError(f\"Could not resolve for {path}\")\n\n\ndef is_importable(module_name: str, module_path: Path) -> bool:\n    \"\"\"\n    Return if the given module path could be imported normally by Python, akin to the user\n    entering the REPL and importing the corresponding module name directly, and corresponds\n    to the module_path specified.\n\n    :param module_name:\n        Full module name that we want to check if is importable.\n        For example, \"app.models\".\n\n    :param module_path:\n        Full path to the python module/package we want to check if is importable.\n        For example, \"/projects/src/app/models.py\".\n    \"\"\"\n    try:\n        # Note this is different from what we do in ``_import_module_using_spec``, where we explicitly search through\n        # sys.meta_path to be able to pass the path of the module that we want to import (``meta_importer.find_spec``).\n        # Using importlib.util.find_spec() is different, it gives the same results as trying to import\n        # the module normally in the REPL.\n        spec = importlib.util.find_spec(module_name)\n    except (ImportError, ValueError, ImportWarning):\n        return False\n    else:\n        return spec_matches_module_path(spec, module_path)\n\n\ndef compute_module_name(root: Path, module_path: Path) -> str | None:\n    \"\"\"Compute a module name based on a path and a root anchor.\"\"\"\n    try:\n        path_without_suffix = module_path.with_suffix(\"\")\n    except ValueError:\n        # Empty paths (such as Path.cwd()) might break meta_path hooks (like our own assertion rewriter).\n        return None\n\n    try:\n        relative = path_without_suffix.relative_to(root)\n    except ValueError:  # pragma: no cover\n        return None\n    names = list(relative.parts)\n    if not names:\n        return None\n    if names[-1] == \"__init__\":\n        names.pop()\n    return \".\".join(names)\n\n\nclass CouldNotResolvePathError(Exception):\n    \"\"\"Custom exception raised by resolve_pkg_root_and_module_name.\"\"\"\n\n\ndef scandir(\n    path: str | os.PathLike[str],\n    sort_key: Callable[[os.DirEntry[str]], object] = lambda entry: entry.name,\n) -> list[os.DirEntry[str]]:\n    \"\"\"Scan a directory recursively, in breadth-first order.\n\n    The returned entries are sorted according to the given key.\n    The default is to sort by name.\n    \"\"\"\n    entries = []\n    with os.scandir(path) as s:\n        # Skip entries with symlink loops and other brokenness, so the caller\n        # doesn't have to deal with it.\n        for entry in s:\n            try:\n                entry.is_file()\n            except OSError as err:\n                if _ignore_error(err):\n                    continue\n                raise\n            entries.append(entry)\n    entries.sort(key=sort_key)  # type: ignore[arg-type]\n    return entries\n\n\ndef visit(\n    path: str | os.PathLike[str], recurse: Callable[[os.DirEntry[str]], bool]\n) -> Iterator[os.DirEntry[str]]:\n    \"\"\"Walk a directory recursively, in breadth-first order.\n\n    The `recurse` predicate determines whether a directory is recursed.\n\n    Entries at each directory level are sorted.\n    \"\"\"\n    entries = scandir(path)\n    yield from entries\n    for entry in entries:\n        if entry.is_dir() and recurse(entry):\n            yield from visit(entry.path, recurse)\n\n\ndef absolutepath(path: str | os.PathLike[str]) -> Path:\n    \"\"\"Convert a path to an absolute path using os.path.abspath.\n\n    Prefer this over Path.resolve() (see #6523).\n    Prefer this over Path.absolute() (not public, doesn't normalize).\n    \"\"\"\n    return Path(os.path.abspath(path))\n\n\ndef commonpath(path1: Path, path2: Path) -> Path | None:\n    \"\"\"Return the common part shared with the other path, or None if there is\n    no common part.\n\n    If one path is relative and one is absolute, returns None.\n    \"\"\"\n    try:\n        return Path(os.path.commonpath((str(path1), str(path2))))\n    except ValueError:\n        return None\n\n\ndef bestrelpath(directory: Path, dest: Path) -> str:\n    \"\"\"Return a string which is a relative path from directory to dest such\n    that directory/bestrelpath == dest.\n\n    The paths must be either both absolute or both relative.\n\n    If no such path can be determined, returns dest.\n    \"\"\"\n    assert isinstance(directory, Path)\n    assert isinstance(dest, Path)\n    if dest == directory:\n        return os.curdir\n    # Find the longest common directory.\n    base = commonpath(directory, dest)\n    # Can be the case on Windows for two absolute paths on different drives.\n    # Can be the case for two relative paths without common prefix.\n    # Can be the case for a relative path and an absolute path.\n    if not base:\n        return str(dest)\n    reldirectory = directory.relative_to(base)\n    reldest = dest.relative_to(base)\n    return os.path.join(\n        # Back from directory to base.\n        *([os.pardir] * len(reldirectory.parts)),\n        # Forward from base to dest.\n        *reldest.parts,\n    )\n\n\ndef safe_exists(p: Path) -> bool:\n    \"\"\"Like Path.exists(), but account for input arguments that might be too long (#11394).\"\"\"\n    try:\n        return p.exists()\n    except (ValueError, OSError):\n        # ValueError: stat: path too long for Windows\n        # OSError: [WinError 123] The filename, directory name, or volume label syntax is incorrect\n        return False\n", "src/_pytest/unraisableexception.py": "from __future__ import annotations\n\nimport sys\nimport traceback\nfrom types import TracebackType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Generator\nfrom typing import TYPE_CHECKING\nimport warnings\n\nimport pytest\n\n\nif TYPE_CHECKING:\n    from typing_extensions import Self\n\n\n# Copied from cpython/Lib/test/support/__init__.py, with modifications.\nclass catch_unraisable_exception:\n    \"\"\"Context manager catching unraisable exception using sys.unraisablehook.\n\n    Storing the exception value (cm.unraisable.exc_value) creates a reference\n    cycle. The reference cycle is broken explicitly when the context manager\n    exits.\n\n    Storing the object (cm.unraisable.object) can resurrect it if it is set to\n    an object which is being finalized. Exiting the context manager clears the\n    stored object.\n\n    Usage:\n        with catch_unraisable_exception() as cm:\n            # code creating an \"unraisable exception\"\n            ...\n            # check the unraisable exception: use cm.unraisable\n            ...\n        # cm.unraisable attribute no longer exists at this point\n        # (to break a reference cycle)\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.unraisable: sys.UnraisableHookArgs | None = None\n        self._old_hook: Callable[[sys.UnraisableHookArgs], Any] | None = None\n\n    def _hook(self, unraisable: sys.UnraisableHookArgs) -> None:\n        # Storing unraisable.object can resurrect an object which is being\n        # finalized. Storing unraisable.exc_value creates a reference cycle.\n        self.unraisable = unraisable\n\n    def __enter__(self) -> Self:\n        self._old_hook = sys.unraisablehook\n        sys.unraisablehook = self._hook\n        return self\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        assert self._old_hook is not None\n        sys.unraisablehook = self._old_hook\n        self._old_hook = None\n        del self.unraisable\n\n\ndef unraisable_exception_runtest_hook() -> Generator[None, None, None]:\n    with catch_unraisable_exception() as cm:\n        try:\n            yield\n        finally:\n            if cm.unraisable:\n                if cm.unraisable.err_msg is not None:\n                    err_msg = cm.unraisable.err_msg\n                else:\n                    err_msg = \"Exception ignored in\"\n                msg = f\"{err_msg}: {cm.unraisable.object!r}\\n\\n\"\n                msg += \"\".join(\n                    traceback.format_exception(\n                        cm.unraisable.exc_type,\n                        cm.unraisable.exc_value,\n                        cm.unraisable.exc_traceback,\n                    )\n                )\n                warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_setup() -> Generator[None, None, None]:\n    yield from unraisable_exception_runtest_hook()\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_call() -> Generator[None, None, None]:\n    yield from unraisable_exception_runtest_hook()\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_teardown() -> Generator[None, None, None]:\n    yield from unraisable_exception_runtest_hook()\n", "src/_pytest/pastebin.py": "# mypy: allow-untyped-defs\n\"\"\"Submit failure or test session information to a pastebin service.\"\"\"\n\nfrom __future__ import annotations\n\nfrom io import StringIO\nimport tempfile\nfrom typing import IO\n\nfrom _pytest.config import Config\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.stash import StashKey\nfrom _pytest.terminal import TerminalReporter\nimport pytest\n\n\npastebinfile_key = StashKey[IO[bytes]]()\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"terminal reporting\")\n    group._addoption(\n        \"--pastebin\",\n        metavar=\"mode\",\n        action=\"store\",\n        dest=\"pastebin\",\n        default=None,\n        choices=[\"failed\", \"all\"],\n        help=\"Send failed|all info to bpaste.net pastebin service\",\n    )\n\n\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config: Config) -> None:\n    if config.option.pastebin == \"all\":\n        tr = config.pluginmanager.getplugin(\"terminalreporter\")\n        # If no terminal reporter plugin is present, nothing we can do here;\n        # this can happen when this function executes in a worker node\n        # when using pytest-xdist, for example.\n        if tr is not None:\n            # pastebin file will be UTF-8 encoded binary file.\n            config.stash[pastebinfile_key] = tempfile.TemporaryFile(\"w+b\")\n            oldwrite = tr._tw.write\n\n            def tee_write(s, **kwargs):\n                oldwrite(s, **kwargs)\n                if isinstance(s, str):\n                    s = s.encode(\"utf-8\")\n                config.stash[pastebinfile_key].write(s)\n\n            tr._tw.write = tee_write\n\n\ndef pytest_unconfigure(config: Config) -> None:\n    if pastebinfile_key in config.stash:\n        pastebinfile = config.stash[pastebinfile_key]\n        # Get terminal contents and delete file.\n        pastebinfile.seek(0)\n        sessionlog = pastebinfile.read()\n        pastebinfile.close()\n        del config.stash[pastebinfile_key]\n        # Undo our patching in the terminal reporter.\n        tr = config.pluginmanager.getplugin(\"terminalreporter\")\n        del tr._tw.__dict__[\"write\"]\n        # Write summary.\n        tr.write_sep(\"=\", \"Sending information to Paste Service\")\n        pastebinurl = create_new_paste(sessionlog)\n        tr.write_line(f\"pastebin session-log: {pastebinurl}\\n\")\n\n\ndef create_new_paste(contents: str | bytes) -> str:\n    \"\"\"Create a new paste using the bpaste.net service.\n\n    :contents: Paste contents string.\n    :returns: URL to the pasted contents, or an error message.\n    \"\"\"\n    import re\n    from urllib.parse import urlencode\n    from urllib.request import urlopen\n\n    params = {\"code\": contents, \"lexer\": \"text\", \"expiry\": \"1week\"}\n    url = \"https://bpa.st\"\n    try:\n        response: str = (\n            urlopen(url, data=urlencode(params).encode(\"ascii\")).read().decode(\"utf-8\")\n        )\n    except OSError as exc_info:  # urllib errors\n        return f\"bad response: {exc_info}\"\n    m = re.search(r'href=\"/raw/(\\w+)\"', response)\n    if m:\n        return f\"{url}/show/{m.group(1)}\"\n    else:\n        return \"bad response: invalid format ('\" + response + \"')\"\n\n\ndef pytest_terminal_summary(terminalreporter: TerminalReporter) -> None:\n    if terminalreporter.config.option.pastebin != \"failed\":\n        return\n    if \"failed\" in terminalreporter.stats:\n        terminalreporter.write_sep(\"=\", \"Sending information to Paste Service\")\n        for rep in terminalreporter.stats[\"failed\"]:\n            try:\n                msg = rep.longrepr.reprtraceback.reprentries[-1].reprfileloc\n            except AttributeError:\n                msg = terminalreporter._getfailureheadline(rep)\n            file = StringIO()\n            tw = create_terminal_writer(terminalreporter.config, file)\n            rep.toterminal(tw)\n            s = file.getvalue()\n            assert len(s)\n            pastebinurl = create_new_paste(s)\n            terminalreporter.write_line(f\"{msg} --> {pastebinurl}\")\n", "src/_pytest/monkeypatch.py": "# mypy: allow-untyped-defs\n\"\"\"Monkeypatching and mocking functionality.\"\"\"\n\nfrom __future__ import annotations\n\nfrom contextlib import contextmanager\nimport os\nimport re\nimport sys\nfrom typing import Any\nfrom typing import final\nfrom typing import Generator\nfrom typing import Mapping\nfrom typing import MutableMapping\nfrom typing import overload\nfrom typing import TypeVar\nimport warnings\n\nfrom _pytest.fixtures import fixture\nfrom _pytest.warning_types import PytestWarning\n\n\nRE_IMPORT_ERROR_NAME = re.compile(r\"^No module named (.*)$\")\n\n\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\n\n\n@fixture\ndef monkeypatch() -> Generator[MonkeyPatch, None, None]:\n    \"\"\"A convenient fixture for monkey-patching.\n\n    The fixture provides these methods to modify objects, dictionaries, or\n    :data:`os.environ`:\n\n    * :meth:`monkeypatch.setattr(obj, name, value, raising=True) <pytest.MonkeyPatch.setattr>`\n    * :meth:`monkeypatch.delattr(obj, name, raising=True) <pytest.MonkeyPatch.delattr>`\n    * :meth:`monkeypatch.setitem(mapping, name, value) <pytest.MonkeyPatch.setitem>`\n    * :meth:`monkeypatch.delitem(obj, name, raising=True) <pytest.MonkeyPatch.delitem>`\n    * :meth:`monkeypatch.setenv(name, value, prepend=None) <pytest.MonkeyPatch.setenv>`\n    * :meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`\n    * :meth:`monkeypatch.syspath_prepend(path) <pytest.MonkeyPatch.syspath_prepend>`\n    * :meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`\n    * :meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`\n\n    All modifications will be undone after the requesting test function or\n    fixture has finished. The ``raising`` parameter determines if a :class:`KeyError`\n    or :class:`AttributeError` will be raised if the set/deletion operation does not have the\n    specified target.\n\n    To undo modifications done by the fixture in a contained scope,\n    use :meth:`context() <pytest.MonkeyPatch.context>`.\n    \"\"\"\n    mpatch = MonkeyPatch()\n    yield mpatch\n    mpatch.undo()\n\n\ndef resolve(name: str) -> object:\n    # Simplified from zope.dottedname.\n    parts = name.split(\".\")\n\n    used = parts.pop(0)\n    found: object = __import__(used)\n    for part in parts:\n        used += \".\" + part\n        try:\n            found = getattr(found, part)\n        except AttributeError:\n            pass\n        else:\n            continue\n        # We use explicit un-nesting of the handling block in order\n        # to avoid nested exceptions.\n        try:\n            __import__(used)\n        except ImportError as ex:\n            expected = str(ex).split()[-1]\n            if expected == used:\n                raise\n            else:\n                raise ImportError(f\"import error in {used}: {ex}\") from ex\n        found = annotated_getattr(found, part, used)\n    return found\n\n\ndef annotated_getattr(obj: object, name: str, ann: str) -> object:\n    try:\n        obj = getattr(obj, name)\n    except AttributeError as e:\n        raise AttributeError(\n            f\"{type(obj).__name__!r} object at {ann} has no attribute {name!r}\"\n        ) from e\n    return obj\n\n\ndef derive_importpath(import_path: str, raising: bool) -> tuple[str, object]:\n    if not isinstance(import_path, str) or \".\" not in import_path:\n        raise TypeError(f\"must be absolute import path string, not {import_path!r}\")\n    module, attr = import_path.rsplit(\".\", 1)\n    target = resolve(module)\n    if raising:\n        annotated_getattr(target, attr, ann=module)\n    return attr, target\n\n\nclass Notset:\n    def __repr__(self) -> str:\n        return \"<notset>\"\n\n\nnotset = Notset()\n\n\n@final\nclass MonkeyPatch:\n    \"\"\"Helper to conveniently monkeypatch attributes/items/environment\n    variables/syspath.\n\n    Returned by the :fixture:`monkeypatch` fixture.\n\n    .. versionchanged:: 6.2\n        Can now also be used directly as `pytest.MonkeyPatch()`, for when\n        the fixture is not available. In this case, use\n        :meth:`with MonkeyPatch.context() as mp: <context>` or remember to call\n        :meth:`undo` explicitly.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self._setattr: list[tuple[object, str, object]] = []\n        self._setitem: list[tuple[Mapping[Any, Any], object, object]] = []\n        self._cwd: str | None = None\n        self._savesyspath: list[str] | None = None\n\n    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch, None, None]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n    @overload\n    def setattr(\n        self,\n        target: str,\n        name: object,\n        value: Notset = ...,\n        raising: bool = ...,\n    ) -> None: ...\n\n    @overload\n    def setattr(\n        self,\n        target: object,\n        name: str,\n        value: object,\n        raising: bool = ...,\n    ) -> None: ...\n\n    def setattr(\n        self,\n        target: str | object,\n        name: object | str,\n        value: object = notset,\n        raising: bool = True,\n    ) -> None:\n        \"\"\"\n        Set attribute value on target, memorizing the old value.\n\n        For example:\n\n        .. code-block:: python\n\n            import os\n\n            monkeypatch.setattr(os, \"getcwd\", lambda: \"/\")\n\n        The code above replaces the :func:`os.getcwd` function by a ``lambda`` which\n        always returns ``\"/\"``.\n\n        For convenience, you can specify a string as ``target`` which\n        will be interpreted as a dotted import path, with the last part\n        being the attribute name:\n\n        .. code-block:: python\n\n            monkeypatch.setattr(\"os.getcwd\", lambda: \"/\")\n\n        Raises :class:`AttributeError` if the attribute does not exist, unless\n        ``raising`` is set to False.\n\n        **Where to patch**\n\n        ``monkeypatch.setattr`` works by (temporarily) changing the object that a name points to with another one.\n        There can be many names pointing to any individual object, so for patching to work you must ensure\n        that you patch the name used by the system under test.\n\n        See the section :ref:`Where to patch <python:where-to-patch>` in the :mod:`unittest.mock`\n        docs for a complete explanation, which is meant for :func:`unittest.mock.patch` but\n        applies to ``monkeypatch.setattr`` as well.\n        \"\"\"\n        __tracebackhide__ = True\n        import inspect\n\n        if isinstance(value, Notset):\n            if not isinstance(target, str):\n                raise TypeError(\n                    \"use setattr(target, name, value) or \"\n                    \"setattr(target, value) with target being a dotted \"\n                    \"import string\"\n                )\n            value = name\n            name, target = derive_importpath(target, raising)\n        else:\n            if not isinstance(name, str):\n                raise TypeError(\n                    \"use setattr(target, name, value) with name being a string or \"\n                    \"setattr(target, value) with target being a dotted \"\n                    \"import string\"\n                )\n\n        oldval = getattr(target, name, notset)\n        if raising and oldval is notset:\n            raise AttributeError(f\"{target!r} has no attribute {name!r}\")\n\n        # avoid class descriptors like staticmethod/classmethod\n        if inspect.isclass(target):\n            oldval = target.__dict__.get(name, notset)\n        self._setattr.append((target, name, oldval))\n        setattr(target, name, value)\n\n    def delattr(\n        self,\n        target: object | str,\n        name: str | Notset = notset,\n        raising: bool = True,\n    ) -> None:\n        \"\"\"Delete attribute ``name`` from ``target``.\n\n        If no ``name`` is specified and ``target`` is a string\n        it will be interpreted as a dotted import path with the\n        last part being the attribute name.\n\n        Raises AttributeError it the attribute does not exist, unless\n        ``raising`` is set to False.\n        \"\"\"\n        __tracebackhide__ = True\n        import inspect\n\n        if isinstance(name, Notset):\n            if not isinstance(target, str):\n                raise TypeError(\n                    \"use delattr(target, name) or \"\n                    \"delattr(target) with target being a dotted \"\n                    \"import string\"\n                )\n            name, target = derive_importpath(target, raising)\n\n        if not hasattr(target, name):\n            if raising:\n                raise AttributeError(name)\n        else:\n            oldval = getattr(target, name, notset)\n            # Avoid class descriptors like staticmethod/classmethod.\n            if inspect.isclass(target):\n                oldval = target.__dict__.get(name, notset)\n            self._setattr.append((target, name, oldval))\n            delattr(target, name)\n\n    def setitem(self, dic: Mapping[K, V], name: K, value: V) -> None:\n        \"\"\"Set dictionary entry ``name`` to value.\"\"\"\n        self._setitem.append((dic, name, dic.get(name, notset)))\n        # Not all Mapping types support indexing, but MutableMapping doesn't support TypedDict\n        dic[name] = value  # type: ignore[index]\n\n    def delitem(self, dic: Mapping[K, V], name: K, raising: bool = True) -> None:\n        \"\"\"Delete ``name`` from dict.\n\n        Raises ``KeyError`` if it doesn't exist, unless ``raising`` is set to\n        False.\n        \"\"\"\n        if name not in dic:\n            if raising:\n                raise KeyError(name)\n        else:\n            self._setitem.append((dic, name, dic.get(name, notset)))\n            # Not all Mapping types support indexing, but MutableMapping doesn't support TypedDict\n            del dic[name]  # type: ignore[attr-defined]\n\n    def setenv(self, name: str, value: str, prepend: str | None = None) -> None:\n        \"\"\"Set environment variable ``name`` to ``value``.\n\n        If ``prepend`` is a character, read the current environment variable\n        value and prepend the ``value`` adjoined with the ``prepend``\n        character.\n        \"\"\"\n        if not isinstance(value, str):\n            warnings.warn(  # type: ignore[unreachable]\n                PytestWarning(\n                    f\"Value of environment variable {name} type should be str, but got \"\n                    f\"{value!r} (type: {type(value).__name__}); converted to str implicitly\"\n                ),\n                stacklevel=2,\n            )\n            value = str(value)\n        if prepend and name in os.environ:\n            value = value + prepend + os.environ[name]\n        self.setitem(os.environ, name, value)\n\n    def delenv(self, name: str, raising: bool = True) -> None:\n        \"\"\"Delete ``name`` from the environment.\n\n        Raises ``KeyError`` if it does not exist, unless ``raising`` is set to\n        False.\n        \"\"\"\n        environ: MutableMapping[str, str] = os.environ\n        self.delitem(environ, name, raising=raising)\n\n    def syspath_prepend(self, path) -> None:\n        \"\"\"Prepend ``path`` to ``sys.path`` list of import locations.\"\"\"\n        if self._savesyspath is None:\n            self._savesyspath = sys.path[:]\n        sys.path.insert(0, str(path))\n\n        # https://github.com/pypa/setuptools/blob/d8b901bc/docs/pkg_resources.txt#L162-L171\n        # this is only needed when pkg_resources was already loaded by the namespace package\n        if \"pkg_resources\" in sys.modules:\n            from pkg_resources import fixup_namespace_packages\n\n            fixup_namespace_packages(str(path))\n\n        # A call to syspathinsert() usually means that the caller wants to\n        # import some dynamically created files, thus with python3 we\n        # invalidate its import caches.\n        # This is especially important when any namespace package is in use,\n        # since then the mtime based FileFinder cache (that gets created in\n        # this case already) gets not invalidated when writing the new files\n        # quickly afterwards.\n        from importlib import invalidate_caches\n\n        invalidate_caches()\n\n    def chdir(self, path: str | os.PathLike[str]) -> None:\n        \"\"\"Change the current working directory to the specified path.\n\n        :param path:\n            The path to change into.\n        \"\"\"\n        if self._cwd is None:\n            self._cwd = os.getcwd()\n        os.chdir(path)\n\n    def undo(self) -> None:\n        \"\"\"Undo previous changes.\n\n        This call consumes the undo stack. Calling it a second time has no\n        effect unless you do more monkeypatching after the undo call.\n\n        There is generally no need to call `undo()`, since it is\n        called automatically during tear-down.\n\n        .. note::\n            The same `monkeypatch` fixture is used across a\n            single test function invocation. If `monkeypatch` is used both by\n            the test function itself and one of the test fixtures,\n            calling `undo()` will undo all of the changes made in\n            both functions.\n\n            Prefer to use :meth:`context() <pytest.MonkeyPatch.context>` instead.\n        \"\"\"\n        for obj, name, value in reversed(self._setattr):\n            if value is not notset:\n                setattr(obj, name, value)\n            else:\n                delattr(obj, name)\n        self._setattr[:] = []\n        for dictionary, key, value in reversed(self._setitem):\n            if value is notset:\n                try:\n                    # Not all Mapping types support indexing, but MutableMapping doesn't support TypedDict\n                    del dictionary[key]  # type: ignore[attr-defined]\n                except KeyError:\n                    pass  # Was already deleted, so we have the desired state.\n            else:\n                # Not all Mapping types support indexing, but MutableMapping doesn't support TypedDict\n                dictionary[key] = value  # type: ignore[index]\n        self._setitem[:] = []\n        if self._savesyspath is not None:\n            sys.path[:] = self._savesyspath\n            self._savesyspath = None\n\n        if self._cwd is not None:\n            os.chdir(self._cwd)\n            self._cwd = None\n", "src/_pytest/doctest.py": "# mypy: allow-untyped-defs\n\"\"\"Discover and run doctests in modules and test files.\"\"\"\n\nfrom __future__ import annotations\n\nimport bdb\nfrom contextlib import contextmanager\nimport functools\nimport inspect\nimport os\nfrom pathlib import Path\nimport platform\nimport sys\nimport traceback\nimport types\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Generator\nfrom typing import Iterable\nfrom typing import Pattern\nfrom typing import Sequence\nfrom typing import TYPE_CHECKING\nimport warnings\n\nfrom _pytest import outcomes\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest._code.code import ReprFileLocation\nfrom _pytest._code.code import TerminalRepr\nfrom _pytest._io import TerminalWriter\nfrom _pytest.compat import safe_getattr\nfrom _pytest.config import Config\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import TopRequest\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import OutcomeException\nfrom _pytest.outcomes import skip\nfrom _pytest.pathlib import fnmatch_ex\nfrom _pytest.python import Module\nfrom _pytest.python_api import approx\nfrom _pytest.warning_types import PytestWarning\n\n\nif TYPE_CHECKING:\n    import doctest\n    from typing import Self\n\nDOCTEST_REPORT_CHOICE_NONE = \"none\"\nDOCTEST_REPORT_CHOICE_CDIFF = \"cdiff\"\nDOCTEST_REPORT_CHOICE_NDIFF = \"ndiff\"\nDOCTEST_REPORT_CHOICE_UDIFF = \"udiff\"\nDOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE = \"only_first_failure\"\n\nDOCTEST_REPORT_CHOICES = (\n    DOCTEST_REPORT_CHOICE_NONE,\n    DOCTEST_REPORT_CHOICE_CDIFF,\n    DOCTEST_REPORT_CHOICE_NDIFF,\n    DOCTEST_REPORT_CHOICE_UDIFF,\n    DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE,\n)\n\n# Lazy definition of runner class\nRUNNER_CLASS = None\n# Lazy definition of output checker class\nCHECKER_CLASS: type[doctest.OutputChecker] | None = None\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    parser.addini(\n        \"doctest_optionflags\",\n        \"Option flags for doctests\",\n        type=\"args\",\n        default=[\"ELLIPSIS\"],\n    )\n    parser.addini(\n        \"doctest_encoding\", \"Encoding used for doctest files\", default=\"utf-8\"\n    )\n    group = parser.getgroup(\"collect\")\n    group.addoption(\n        \"--doctest-modules\",\n        action=\"store_true\",\n        default=False,\n        help=\"Run doctests in all .py modules\",\n        dest=\"doctestmodules\",\n    )\n    group.addoption(\n        \"--doctest-report\",\n        type=str.lower,\n        default=\"udiff\",\n        help=\"Choose another output format for diffs on doctest failure\",\n        choices=DOCTEST_REPORT_CHOICES,\n        dest=\"doctestreport\",\n    )\n    group.addoption(\n        \"--doctest-glob\",\n        action=\"append\",\n        default=[],\n        metavar=\"pat\",\n        help=\"Doctests file matching pattern, default: test*.txt\",\n        dest=\"doctestglob\",\n    )\n    group.addoption(\n        \"--doctest-ignore-import-errors\",\n        action=\"store_true\",\n        default=False,\n        help=\"Ignore doctest collection errors\",\n        dest=\"doctest_ignore_import_errors\",\n    )\n    group.addoption(\n        \"--doctest-continue-on-failure\",\n        action=\"store_true\",\n        default=False,\n        help=\"For a given doctest, continue to run after the first failure\",\n        dest=\"doctest_continue_on_failure\",\n    )\n\n\ndef pytest_unconfigure() -> None:\n    global RUNNER_CLASS\n\n    RUNNER_CLASS = None\n\n\ndef pytest_collect_file(\n    file_path: Path,\n    parent: Collector,\n) -> DoctestModule | DoctestTextfile | None:\n    config = parent.config\n    if file_path.suffix == \".py\":\n        if config.option.doctestmodules and not any(\n            (_is_setup_py(file_path), _is_main_py(file_path))\n        ):\n            return DoctestModule.from_parent(parent, path=file_path)\n    elif _is_doctest(config, file_path, parent):\n        return DoctestTextfile.from_parent(parent, path=file_path)\n    return None\n\n\ndef _is_setup_py(path: Path) -> bool:\n    if path.name != \"setup.py\":\n        return False\n    contents = path.read_bytes()\n    return b\"setuptools\" in contents or b\"distutils\" in contents\n\n\ndef _is_doctest(config: Config, path: Path, parent: Collector) -> bool:\n    if path.suffix in (\".txt\", \".rst\") and parent.session.isinitpath(path):\n        return True\n    globs = config.getoption(\"doctestglob\") or [\"test*.txt\"]\n    return any(fnmatch_ex(glob, path) for glob in globs)\n\n\ndef _is_main_py(path: Path) -> bool:\n    return path.name == \"__main__.py\"\n\n\nclass ReprFailDoctest(TerminalRepr):\n    def __init__(\n        self, reprlocation_lines: Sequence[tuple[ReprFileLocation, Sequence[str]]]\n    ) -> None:\n        self.reprlocation_lines = reprlocation_lines\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        for reprlocation, lines in self.reprlocation_lines:\n            for line in lines:\n                tw.line(line)\n            reprlocation.toterminal(tw)\n\n\nclass MultipleDoctestFailures(Exception):\n    def __init__(self, failures: Sequence[doctest.DocTestFailure]) -> None:\n        super().__init__()\n        self.failures = failures\n\n\ndef _init_runner_class() -> type[doctest.DocTestRunner]:\n    import doctest\n\n    class PytestDoctestRunner(doctest.DebugRunner):\n        \"\"\"Runner to collect failures.\n\n        Note that the out variable in this case is a list instead of a\n        stdout-like object.\n        \"\"\"\n\n        def __init__(\n            self,\n            checker: doctest.OutputChecker | None = None,\n            verbose: bool | None = None,\n            optionflags: int = 0,\n            continue_on_failure: bool = True,\n        ) -> None:\n            super().__init__(checker=checker, verbose=verbose, optionflags=optionflags)\n            self.continue_on_failure = continue_on_failure\n\n        def report_failure(\n            self,\n            out,\n            test: doctest.DocTest,\n            example: doctest.Example,\n            got: str,\n        ) -> None:\n            failure = doctest.DocTestFailure(test, example, got)\n            if self.continue_on_failure:\n                out.append(failure)\n            else:\n                raise failure\n\n        def report_unexpected_exception(\n            self,\n            out,\n            test: doctest.DocTest,\n            example: doctest.Example,\n            exc_info: tuple[type[BaseException], BaseException, types.TracebackType],\n        ) -> None:\n            if isinstance(exc_info[1], OutcomeException):\n                raise exc_info[1]\n            if isinstance(exc_info[1], bdb.BdbQuit):\n                outcomes.exit(\"Quitting debugger\")\n            failure = doctest.UnexpectedException(test, example, exc_info)\n            if self.continue_on_failure:\n                out.append(failure)\n            else:\n                raise failure\n\n    return PytestDoctestRunner\n\n\ndef _get_runner(\n    checker: doctest.OutputChecker | None = None,\n    verbose: bool | None = None,\n    optionflags: int = 0,\n    continue_on_failure: bool = True,\n) -> doctest.DocTestRunner:\n    # We need this in order to do a lazy import on doctest\n    global RUNNER_CLASS\n    if RUNNER_CLASS is None:\n        RUNNER_CLASS = _init_runner_class()\n    # Type ignored because the continue_on_failure argument is only defined on\n    # PytestDoctestRunner, which is lazily defined so can't be used as a type.\n    return RUNNER_CLASS(  # type: ignore\n        checker=checker,\n        verbose=verbose,\n        optionflags=optionflags,\n        continue_on_failure=continue_on_failure,\n    )\n\n\nclass DoctestItem(Item):\n    def __init__(\n        self,\n        name: str,\n        parent: DoctestTextfile | DoctestModule,\n        runner: doctest.DocTestRunner,\n        dtest: doctest.DocTest,\n    ) -> None:\n        super().__init__(name, parent)\n        self.runner = runner\n        self.dtest = dtest\n\n        # Stuff needed for fixture support.\n        self.obj = None\n        fm = self.session._fixturemanager\n        fixtureinfo = fm.getfixtureinfo(node=self, func=None, cls=None)\n        self._fixtureinfo = fixtureinfo\n        self.fixturenames = fixtureinfo.names_closure\n        self._initrequest()\n\n    @classmethod\n    def from_parent(  # type: ignore[override]\n        cls,\n        parent: DoctestTextfile | DoctestModule,\n        *,\n        name: str,\n        runner: doctest.DocTestRunner,\n        dtest: doctest.DocTest,\n    ) -> Self:\n        # incompatible signature due to imposed limits on subclass\n        \"\"\"The public named constructor.\"\"\"\n        return super().from_parent(name=name, parent=parent, runner=runner, dtest=dtest)\n\n    def _initrequest(self) -> None:\n        self.funcargs: dict[str, object] = {}\n        self._request = TopRequest(self, _ispytest=True)  # type: ignore[arg-type]\n\n    def setup(self) -> None:\n        self._request._fillfixtures()\n        globs = dict(getfixture=self._request.getfixturevalue)\n        for name, value in self._request.getfixturevalue(\"doctest_namespace\").items():\n            globs[name] = value\n        self.dtest.globs.update(globs)\n\n    def runtest(self) -> None:\n        _check_all_skipped(self.dtest)\n        self._disable_output_capturing_for_darwin()\n        failures: list[doctest.DocTestFailure] = []\n        # Type ignored because we change the type of `out` from what\n        # doctest expects.\n        self.runner.run(self.dtest, out=failures)  # type: ignore[arg-type]\n        if failures:\n            raise MultipleDoctestFailures(failures)\n\n    def _disable_output_capturing_for_darwin(self) -> None:\n        \"\"\"Disable output capturing. Otherwise, stdout is lost to doctest (#985).\"\"\"\n        if platform.system() != \"Darwin\":\n            return\n        capman = self.config.pluginmanager.getplugin(\"capturemanager\")\n        if capman:\n            capman.suspend_global_capture(in_=True)\n            out, err = capman.read_global_capture()\n            sys.stdout.write(out)\n            sys.stderr.write(err)\n\n    # TODO: Type ignored -- breaks Liskov Substitution.\n    def repr_failure(  # type: ignore[override]\n        self,\n        excinfo: ExceptionInfo[BaseException],\n    ) -> str | TerminalRepr:\n        import doctest\n\n        failures: (\n            Sequence[doctest.DocTestFailure | doctest.UnexpectedException] | None\n        ) = None\n        if isinstance(\n            excinfo.value, (doctest.DocTestFailure, doctest.UnexpectedException)\n        ):\n            failures = [excinfo.value]\n        elif isinstance(excinfo.value, MultipleDoctestFailures):\n            failures = excinfo.value.failures\n\n        if failures is None:\n            return super().repr_failure(excinfo)\n\n        reprlocation_lines = []\n        for failure in failures:\n            example = failure.example\n            test = failure.test\n            filename = test.filename\n            if test.lineno is None:\n                lineno = None\n            else:\n                lineno = test.lineno + example.lineno + 1\n            message = type(failure).__name__\n            # TODO: ReprFileLocation doesn't expect a None lineno.\n            reprlocation = ReprFileLocation(filename, lineno, message)  # type: ignore[arg-type]\n            checker = _get_checker()\n            report_choice = _get_report_choice(self.config.getoption(\"doctestreport\"))\n            if lineno is not None:\n                assert failure.test.docstring is not None\n                lines = failure.test.docstring.splitlines(False)\n                # add line numbers to the left of the error message\n                assert test.lineno is not None\n                lines = [\n                    \"%03d %s\" % (i + test.lineno + 1, x) for (i, x) in enumerate(lines)\n                ]\n                # trim docstring error lines to 10\n                lines = lines[max(example.lineno - 9, 0) : example.lineno + 1]\n            else:\n                lines = [\n                    \"EXAMPLE LOCATION UNKNOWN, not showing all tests of that example\"\n                ]\n                indent = \">>>\"\n                for line in example.source.splitlines():\n                    lines.append(f\"??? {indent} {line}\")\n                    indent = \"...\"\n            if isinstance(failure, doctest.DocTestFailure):\n                lines += checker.output_difference(\n                    example, failure.got, report_choice\n                ).split(\"\\n\")\n            else:\n                inner_excinfo = ExceptionInfo.from_exc_info(failure.exc_info)\n                lines += [f\"UNEXPECTED EXCEPTION: {inner_excinfo.value!r}\"]\n                lines += [\n                    x.strip(\"\\n\") for x in traceback.format_exception(*failure.exc_info)\n                ]\n            reprlocation_lines.append((reprlocation, lines))\n        return ReprFailDoctest(reprlocation_lines)\n\n    def reportinfo(self) -> tuple[os.PathLike[str] | str, int | None, str]:\n        return self.path, self.dtest.lineno, f\"[doctest] {self.name}\"\n\n\ndef _get_flag_lookup() -> dict[str, int]:\n    import doctest\n\n    return dict(\n        DONT_ACCEPT_TRUE_FOR_1=doctest.DONT_ACCEPT_TRUE_FOR_1,\n        DONT_ACCEPT_BLANKLINE=doctest.DONT_ACCEPT_BLANKLINE,\n        NORMALIZE_WHITESPACE=doctest.NORMALIZE_WHITESPACE,\n        ELLIPSIS=doctest.ELLIPSIS,\n        IGNORE_EXCEPTION_DETAIL=doctest.IGNORE_EXCEPTION_DETAIL,\n        COMPARISON_FLAGS=doctest.COMPARISON_FLAGS,\n        ALLOW_UNICODE=_get_allow_unicode_flag(),\n        ALLOW_BYTES=_get_allow_bytes_flag(),\n        NUMBER=_get_number_flag(),\n    )\n\n\ndef get_optionflags(config: Config) -> int:\n    optionflags_str = config.getini(\"doctest_optionflags\")\n    flag_lookup_table = _get_flag_lookup()\n    flag_acc = 0\n    for flag in optionflags_str:\n        flag_acc |= flag_lookup_table[flag]\n    return flag_acc\n\n\ndef _get_continue_on_failure(config: Config) -> bool:\n    continue_on_failure: bool = config.getvalue(\"doctest_continue_on_failure\")\n    if continue_on_failure:\n        # We need to turn off this if we use pdb since we should stop at\n        # the first failure.\n        if config.getvalue(\"usepdb\"):\n            continue_on_failure = False\n    return continue_on_failure\n\n\nclass DoctestTextfile(Module):\n    obj = None\n\n    def collect(self) -> Iterable[DoctestItem]:\n        import doctest\n\n        # Inspired by doctest.testfile; ideally we would use it directly,\n        # but it doesn't support passing a custom checker.\n        encoding = self.config.getini(\"doctest_encoding\")\n        text = self.path.read_text(encoding)\n        filename = str(self.path)\n        name = self.path.name\n        globs = {\"__name__\": \"__main__\"}\n\n        optionflags = get_optionflags(self.config)\n\n        runner = _get_runner(\n            verbose=False,\n            optionflags=optionflags,\n            checker=_get_checker(),\n            continue_on_failure=_get_continue_on_failure(self.config),\n        )\n\n        parser = doctest.DocTestParser()\n        test = parser.get_doctest(text, globs, name, filename, 0)\n        if test.examples:\n            yield DoctestItem.from_parent(\n                self, name=test.name, runner=runner, dtest=test\n            )\n\n\ndef _check_all_skipped(test: doctest.DocTest) -> None:\n    \"\"\"Raise pytest.skip() if all examples in the given DocTest have the SKIP\n    option set.\"\"\"\n    import doctest\n\n    all_skipped = all(x.options.get(doctest.SKIP, False) for x in test.examples)\n    if all_skipped:\n        skip(\"all tests skipped by +SKIP option\")\n\n\ndef _is_mocked(obj: object) -> bool:\n    \"\"\"Return if an object is possibly a mock object by checking the\n    existence of a highly improbable attribute.\"\"\"\n    return (\n        safe_getattr(obj, \"pytest_mock_example_attribute_that_shouldnt_exist\", None)\n        is not None\n    )\n\n\n@contextmanager\ndef _patch_unwrap_mock_aware() -> Generator[None, None, None]:\n    \"\"\"Context manager which replaces ``inspect.unwrap`` with a version\n    that's aware of mock objects and doesn't recurse into them.\"\"\"\n    real_unwrap = inspect.unwrap\n\n    def _mock_aware_unwrap(\n        func: Callable[..., Any], *, stop: Callable[[Any], Any] | None = None\n    ) -> Any:\n        try:\n            if stop is None or stop is _is_mocked:\n                return real_unwrap(func, stop=_is_mocked)\n            _stop = stop\n            return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))\n        except Exception as e:\n            warnings.warn(\n                f\"Got {e!r} when unwrapping {func!r}.  This is usually caused \"\n                \"by a violation of Python's object protocol; see e.g. \"\n                \"https://github.com/pytest-dev/pytest/issues/5080\",\n                PytestWarning,\n            )\n            raise\n\n    inspect.unwrap = _mock_aware_unwrap\n    try:\n        yield\n    finally:\n        inspect.unwrap = real_unwrap\n\n\nclass DoctestModule(Module):\n    def collect(self) -> Iterable[DoctestItem]:\n        import doctest\n\n        class MockAwareDocTestFinder(doctest.DocTestFinder):\n            py_ver_info_minor = sys.version_info[:2]\n            is_find_lineno_broken = (\n                py_ver_info_minor < (3, 11)\n                or (py_ver_info_minor == (3, 11) and sys.version_info.micro < 9)\n                or (py_ver_info_minor == (3, 12) and sys.version_info.micro < 3)\n            )\n            if is_find_lineno_broken:\n\n                def _find_lineno(self, obj, source_lines):\n                    \"\"\"On older Pythons, doctest code does not take into account\n                    `@property`. https://github.com/python/cpython/issues/61648\n\n                    Moreover, wrapped Doctests need to be unwrapped so the correct\n                    line number is returned. #8796\n                    \"\"\"\n                    if isinstance(obj, property):\n                        obj = getattr(obj, \"fget\", obj)\n\n                    if hasattr(obj, \"__wrapped__\"):\n                        # Get the main obj in case of it being wrapped\n                        obj = inspect.unwrap(obj)\n\n                    # Type ignored because this is a private function.\n                    return super()._find_lineno(  # type:ignore[misc]\n                        obj,\n                        source_lines,\n                    )\n\n            if sys.version_info < (3, 10):\n\n                def _find(\n                    self, tests, obj, name, module, source_lines, globs, seen\n                ) -> None:\n                    \"\"\"Override _find to work around issue in stdlib.\n\n                    https://github.com/pytest-dev/pytest/issues/3456\n                    https://github.com/python/cpython/issues/69718\n                    \"\"\"\n                    if _is_mocked(obj):\n                        return  # pragma: no cover\n                    with _patch_unwrap_mock_aware():\n                        # Type ignored because this is a private function.\n                        super()._find(  # type:ignore[misc]\n                            tests, obj, name, module, source_lines, globs, seen\n                        )\n\n            if sys.version_info < (3, 13):\n\n                def _from_module(self, module, object):\n                    \"\"\"`cached_property` objects are never considered a part\n                    of the 'current module'. As such they are skipped by doctest.\n                    Here we override `_from_module` to check the underlying\n                    function instead. https://github.com/python/cpython/issues/107995\n                    \"\"\"\n                    if isinstance(object, functools.cached_property):\n                        object = object.func\n\n                    # Type ignored because this is a private function.\n                    return super()._from_module(module, object)  # type: ignore[misc]\n\n        try:\n            module = self.obj\n        except Collector.CollectError:\n            if self.config.getvalue(\"doctest_ignore_import_errors\"):\n                skip(f\"unable to import module {self.path!r}\")\n            else:\n                raise\n\n        # While doctests currently don't support fixtures directly, we still\n        # need to pick up autouse fixtures.\n        self.session._fixturemanager.parsefactories(self)\n\n        # Uses internal doctest module parsing mechanism.\n        finder = MockAwareDocTestFinder()\n        optionflags = get_optionflags(self.config)\n        runner = _get_runner(\n            verbose=False,\n            optionflags=optionflags,\n            checker=_get_checker(),\n            continue_on_failure=_get_continue_on_failure(self.config),\n        )\n\n        for test in finder.find(module, module.__name__):\n            if test.examples:  # skip empty doctests\n                yield DoctestItem.from_parent(\n                    self, name=test.name, runner=runner, dtest=test\n                )\n\n\ndef _init_checker_class() -> type[doctest.OutputChecker]:\n    import doctest\n    import re\n\n    class LiteralsOutputChecker(doctest.OutputChecker):\n        # Based on doctest_nose_plugin.py from the nltk project\n        # (https://github.com/nltk/nltk) and on the \"numtest\" doctest extension\n        # by Sebastien Boisgerault (https://github.com/boisgera/numtest).\n\n        _unicode_literal_re = re.compile(r\"(\\W|^)[uU]([rR]?[\\'\\\"])\", re.UNICODE)\n        _bytes_literal_re = re.compile(r\"(\\W|^)[bB]([rR]?[\\'\\\"])\", re.UNICODE)\n        _number_re = re.compile(\n            r\"\"\"\n            (?P<number>\n              (?P<mantissa>\n                (?P<integer1> [+-]?\\d*)\\.(?P<fraction>\\d+)\n                |\n                (?P<integer2> [+-]?\\d+)\\.\n              )\n              (?:\n                [Ee]\n                (?P<exponent1> [+-]?\\d+)\n              )?\n              |\n              (?P<integer3> [+-]?\\d+)\n              (?:\n                [Ee]\n                (?P<exponent2> [+-]?\\d+)\n              )\n            )\n            \"\"\",\n            re.VERBOSE,\n        )\n\n        def check_output(self, want: str, got: str, optionflags: int) -> bool:\n            if super().check_output(want, got, optionflags):\n                return True\n\n            allow_unicode = optionflags & _get_allow_unicode_flag()\n            allow_bytes = optionflags & _get_allow_bytes_flag()\n            allow_number = optionflags & _get_number_flag()\n\n            if not allow_unicode and not allow_bytes and not allow_number:\n                return False\n\n            def remove_prefixes(regex: Pattern[str], txt: str) -> str:\n                return re.sub(regex, r\"\\1\\2\", txt)\n\n            if allow_unicode:\n                want = remove_prefixes(self._unicode_literal_re, want)\n                got = remove_prefixes(self._unicode_literal_re, got)\n\n            if allow_bytes:\n                want = remove_prefixes(self._bytes_literal_re, want)\n                got = remove_prefixes(self._bytes_literal_re, got)\n\n            if allow_number:\n                got = self._remove_unwanted_precision(want, got)\n\n            return super().check_output(want, got, optionflags)\n\n        def _remove_unwanted_precision(self, want: str, got: str) -> str:\n            wants = list(self._number_re.finditer(want))\n            gots = list(self._number_re.finditer(got))\n            if len(wants) != len(gots):\n                return got\n            offset = 0\n            for w, g in zip(wants, gots):\n                fraction: str | None = w.group(\"fraction\")\n                exponent: str | None = w.group(\"exponent1\")\n                if exponent is None:\n                    exponent = w.group(\"exponent2\")\n                precision = 0 if fraction is None else len(fraction)\n                if exponent is not None:\n                    precision -= int(exponent)\n                if float(w.group()) == approx(float(g.group()), abs=10**-precision):\n                    # They're close enough. Replace the text we actually\n                    # got with the text we want, so that it will match when we\n                    # check the string literally.\n                    got = (\n                        got[: g.start() + offset] + w.group() + got[g.end() + offset :]\n                    )\n                    offset += w.end() - w.start() - (g.end() - g.start())\n            return got\n\n    return LiteralsOutputChecker\n\n\ndef _get_checker() -> doctest.OutputChecker:\n    \"\"\"Return a doctest.OutputChecker subclass that supports some\n    additional options:\n\n    * ALLOW_UNICODE and ALLOW_BYTES options to ignore u'' and b''\n      prefixes (respectively) in string literals. Useful when the same\n      doctest should run in Python 2 and Python 3.\n\n    * NUMBER to ignore floating-point differences smaller than the\n      precision of the literal number in the doctest.\n\n    An inner class is used to avoid importing \"doctest\" at the module\n    level.\n    \"\"\"\n    global CHECKER_CLASS\n    if CHECKER_CLASS is None:\n        CHECKER_CLASS = _init_checker_class()\n    return CHECKER_CLASS()\n\n\ndef _get_allow_unicode_flag() -> int:\n    \"\"\"Register and return the ALLOW_UNICODE flag.\"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"ALLOW_UNICODE\")\n\n\ndef _get_allow_bytes_flag() -> int:\n    \"\"\"Register and return the ALLOW_BYTES flag.\"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"ALLOW_BYTES\")\n\n\ndef _get_number_flag() -> int:\n    \"\"\"Register and return the NUMBER flag.\"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"NUMBER\")\n\n\ndef _get_report_choice(key: str) -> int:\n    \"\"\"Return the actual `doctest` module flag value.\n\n    We want to do it as late as possible to avoid importing `doctest` and all\n    its dependencies when parsing options, as it adds overhead and breaks tests.\n    \"\"\"\n    import doctest\n\n    return {\n        DOCTEST_REPORT_CHOICE_UDIFF: doctest.REPORT_UDIFF,\n        DOCTEST_REPORT_CHOICE_CDIFF: doctest.REPORT_CDIFF,\n        DOCTEST_REPORT_CHOICE_NDIFF: doctest.REPORT_NDIFF,\n        DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE: doctest.REPORT_ONLY_FIRST_FAILURE,\n        DOCTEST_REPORT_CHOICE_NONE: 0,\n    }[key]\n\n\n@fixture(scope=\"session\")\ndef doctest_namespace() -> dict[str, Any]:\n    \"\"\"Fixture that returns a :py:class:`dict` that will be injected into the\n    namespace of doctests.\n\n    Usually this fixture is used in conjunction with another ``autouse`` fixture:\n\n    .. code-block:: python\n\n        @pytest.fixture(autouse=True)\n        def add_np(doctest_namespace):\n            doctest_namespace[\"np\"] = numpy\n\n    For more details: :ref:`doctest_namespace`.\n    \"\"\"\n    return dict()\n", "src/_pytest/skipping.py": "# mypy: allow-untyped-defs\n\"\"\"Support for skip/xfail functions and markers.\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections.abc import Mapping\nimport dataclasses\nimport os\nimport platform\nimport sys\nimport traceback\nfrom typing import Generator\nfrom typing import Optional\n\nfrom _pytest.config import Config\nfrom _pytest.config import hookimpl\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.mark.structures import Mark\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.reports import BaseReport\nfrom _pytest.reports import TestReport\nfrom _pytest.runner import CallInfo\nfrom _pytest.stash import StashKey\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group.addoption(\n        \"--runxfail\",\n        action=\"store_true\",\n        dest=\"runxfail\",\n        default=False,\n        help=\"Report the results of xfail tests as if they were not marked\",\n    )\n\n    parser.addini(\n        \"xfail_strict\",\n        \"Default for the strict parameter of xfail \"\n        \"markers when not given explicitly (default: False)\",\n        default=False,\n        type=\"bool\",\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    if config.option.runxfail:\n        # yay a hack\n        import pytest\n\n        old = pytest.xfail\n        config.add_cleanup(lambda: setattr(pytest, \"xfail\", old))\n\n        def nop(*args, **kwargs):\n            pass\n\n        nop.Exception = xfail.Exception  # type: ignore[attr-defined]\n        setattr(pytest, \"xfail\", nop)\n\n    config.addinivalue_line(\n        \"markers\",\n        \"skip(reason=None): skip the given test function with an optional reason. \"\n        'Example: skip(reason=\"no way of currently testing this\") skips the '\n        \"test.\",\n    )\n    config.addinivalue_line(\n        \"markers\",\n        \"skipif(condition, ..., *, reason=...): \"\n        \"skip the given test function if any of the conditions evaluate to True. \"\n        \"Example: skipif(sys.platform == 'win32') skips the test if we are on the win32 platform. \"\n        \"See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif\",\n    )\n    config.addinivalue_line(\n        \"markers\",\n        \"xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict): \"\n        \"mark the test function as an expected failure if any of the conditions \"\n        \"evaluate to True. Optionally specify a reason for better reporting \"\n        \"and run=False if you don't even want to execute the test function. \"\n        \"If only specific exception(s) are expected, you can list them in \"\n        \"raises, and if the test fails in other ways, it will be reported as \"\n        \"a true failure. See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail\",\n    )\n\n\ndef evaluate_condition(item: Item, mark: Mark, condition: object) -> tuple[bool, str]:\n    \"\"\"Evaluate a single skipif/xfail condition.\n\n    If an old-style string condition is given, it is eval()'d, otherwise the\n    condition is bool()'d. If this fails, an appropriately formatted pytest.fail\n    is raised.\n\n    Returns (result, reason). The reason is only relevant if the result is True.\n    \"\"\"\n    # String condition.\n    if isinstance(condition, str):\n        globals_ = {\n            \"os\": os,\n            \"sys\": sys,\n            \"platform\": platform,\n            \"config\": item.config,\n        }\n        for dictionary in reversed(\n            item.ihook.pytest_markeval_namespace(config=item.config)\n        ):\n            if not isinstance(dictionary, Mapping):\n                raise ValueError(\n                    f\"pytest_markeval_namespace() needs to return a dict, got {dictionary!r}\"\n                )\n            globals_.update(dictionary)\n        if hasattr(item, \"obj\"):\n            globals_.update(item.obj.__globals__)\n        try:\n            filename = f\"<{mark.name} condition>\"\n            condition_code = compile(condition, filename, \"eval\")\n            result = eval(condition_code, globals_)\n        except SyntaxError as exc:\n            msglines = [\n                f\"Error evaluating {mark.name!r} condition\",\n                \"    \" + condition,\n                \"    \" + \" \" * (exc.offset or 0) + \"^\",\n                \"SyntaxError: invalid syntax\",\n            ]\n            fail(\"\\n\".join(msglines), pytrace=False)\n        except Exception as exc:\n            msglines = [\n                f\"Error evaluating {mark.name!r} condition\",\n                \"    \" + condition,\n                *traceback.format_exception_only(type(exc), exc),\n            ]\n            fail(\"\\n\".join(msglines), pytrace=False)\n\n    # Boolean condition.\n    else:\n        try:\n            result = bool(condition)\n        except Exception as exc:\n            msglines = [\n                f\"Error evaluating {mark.name!r} condition as a boolean\",\n                *traceback.format_exception_only(type(exc), exc),\n            ]\n            fail(\"\\n\".join(msglines), pytrace=False)\n\n    reason = mark.kwargs.get(\"reason\", None)\n    if reason is None:\n        if isinstance(condition, str):\n            reason = \"condition: \" + condition\n        else:\n            # XXX better be checked at collection time\n            msg = (\n                f\"Error evaluating {mark.name!r}: \"\n                + \"you need to specify reason=STRING when using booleans as conditions.\"\n            )\n            fail(msg, pytrace=False)\n\n    return result, reason\n\n\n@dataclasses.dataclass(frozen=True)\nclass Skip:\n    \"\"\"The result of evaluate_skip_marks().\"\"\"\n\n    reason: str = \"unconditional skip\"\n\n\ndef evaluate_skip_marks(item: Item) -> Skip | None:\n    \"\"\"Evaluate skip and skipif marks on item, returning Skip if triggered.\"\"\"\n    for mark in item.iter_markers(name=\"skipif\"):\n        if \"condition\" not in mark.kwargs:\n            conditions = mark.args\n        else:\n            conditions = (mark.kwargs[\"condition\"],)\n\n        # Unconditional.\n        if not conditions:\n            reason = mark.kwargs.get(\"reason\", \"\")\n            return Skip(reason)\n\n        # If any of the conditions are true.\n        for condition in conditions:\n            result, reason = evaluate_condition(item, mark, condition)\n            if result:\n                return Skip(reason)\n\n    for mark in item.iter_markers(name=\"skip\"):\n        try:\n            return Skip(*mark.args, **mark.kwargs)\n        except TypeError as e:\n            raise TypeError(str(e) + \" - maybe you meant pytest.mark.skipif?\") from None\n\n    return None\n\n\n@dataclasses.dataclass(frozen=True)\nclass Xfail:\n    \"\"\"The result of evaluate_xfail_marks().\"\"\"\n\n    __slots__ = (\"reason\", \"run\", \"strict\", \"raises\")\n\n    reason: str\n    run: bool\n    strict: bool\n    raises: tuple[type[BaseException], ...] | None\n\n\ndef evaluate_xfail_marks(item: Item) -> Xfail | None:\n    \"\"\"Evaluate xfail marks on item, returning Xfail if triggered.\"\"\"\n    for mark in item.iter_markers(name=\"xfail\"):\n        run = mark.kwargs.get(\"run\", True)\n        strict = mark.kwargs.get(\"strict\", item.config.getini(\"xfail_strict\"))\n        raises = mark.kwargs.get(\"raises\", None)\n        if \"condition\" not in mark.kwargs:\n            conditions = mark.args\n        else:\n            conditions = (mark.kwargs[\"condition\"],)\n\n        # Unconditional.\n        if not conditions:\n            reason = mark.kwargs.get(\"reason\", \"\")\n            return Xfail(reason, run, strict, raises)\n\n        # If any of the conditions are true.\n        for condition in conditions:\n            result, reason = evaluate_condition(item, mark, condition)\n            if result:\n                return Xfail(reason, run, strict, raises)\n\n    return None\n\n\n# Saves the xfail mark evaluation. Can be refreshed during call if None.\nxfailed_key = StashKey[Optional[Xfail]]()\n\n\n@hookimpl(tryfirst=True)\ndef pytest_runtest_setup(item: Item) -> None:\n    skipped = evaluate_skip_marks(item)\n    if skipped:\n        raise skip.Exception(skipped.reason, _use_item_location=True)\n\n    item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n    if xfailed and not item.config.option.runxfail and not xfailed.run:\n        xfail(\"[NOTRUN] \" + xfailed.reason)\n\n\n@hookimpl(wrapper=True)\ndef pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n    xfailed = item.stash.get(xfailed_key, None)\n    if xfailed is None:\n        item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n\n    if xfailed and not item.config.option.runxfail and not xfailed.run:\n        xfail(\"[NOTRUN] \" + xfailed.reason)\n\n    try:\n        return (yield)\n    finally:\n        # The test run may have added an xfail mark dynamically.\n        xfailed = item.stash.get(xfailed_key, None)\n        if xfailed is None:\n            item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n\n\n@hookimpl(wrapper=True)\ndef pytest_runtest_makereport(\n    item: Item, call: CallInfo[None]\n) -> Generator[None, TestReport, TestReport]:\n    rep = yield\n    xfailed = item.stash.get(xfailed_key, None)\n    if item.config.option.runxfail:\n        pass  # don't interfere\n    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n        assert call.excinfo.value.msg is not None\n        rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n        rep.outcome = \"skipped\"\n    elif not rep.skipped and xfailed:\n        if call.excinfo:\n            raises = xfailed.raises\n            if raises is not None and not isinstance(call.excinfo.value, raises):\n                rep.outcome = \"failed\"\n            else:\n                rep.outcome = \"skipped\"\n                rep.wasxfail = xfailed.reason\n        elif call.when == \"call\":\n            if xfailed.strict:\n                rep.outcome = \"failed\"\n                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n            else:\n                rep.outcome = \"passed\"\n                rep.wasxfail = xfailed.reason\n    return rep\n\n\ndef pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str] | None:\n    if hasattr(report, \"wasxfail\"):\n        if report.skipped:\n            return \"xfailed\", \"x\", \"XFAIL\"\n        elif report.passed:\n            return \"xpassed\", \"X\", \"XPASS\"\n    return None\n", "src/_pytest/_argcomplete.py": "\"\"\"Allow bash-completion for argparse with argcomplete if installed.\n\nNeeds argcomplete>=0.5.6 for python 3.2/3.3 (older versions fail\nto find the magic string, so _ARGCOMPLETE env. var is never set, and\nthis does not need special code).\n\nFunction try_argcomplete(parser) should be called directly before\nthe call to ArgumentParser.parse_args().\n\nThe filescompleter is what you normally would use on the positional\narguments specification, in order to get \"dirname/\" after \"dirn<TAB>\"\ninstead of the default \"dirname \":\n\n   optparser.add_argument(Config._file_or_dir, nargs='*').completer=filescompleter\n\nOther, application specific, completers should go in the file\ndoing the add_argument calls as they need to be specified as .completer\nattributes as well. (If argcomplete is not installed, the function the\nattribute points to will not be used).\n\nSPEEDUP\n=======\n\nThe generic argcomplete script for bash-completion\n(/etc/bash_completion.d/python-argcomplete.sh)\nuses a python program to determine startup script generated by pip.\nYou can speed up completion somewhat by changing this script to include\n  # PYTHON_ARGCOMPLETE_OK\nso the python-argcomplete-check-easy-install-script does not\nneed to be called to find the entry point of the code and see if that is\nmarked  with PYTHON_ARGCOMPLETE_OK.\n\nINSTALL/DEBUGGING\n=================\n\nTo include this support in another application that has setup.py generated\nscripts:\n\n- Add the line:\n    # PYTHON_ARGCOMPLETE_OK\n  near the top of the main python entry point.\n\n- Include in the file calling parse_args():\n    from _argcomplete import try_argcomplete, filescompleter\n  Call try_argcomplete just before parse_args(), and optionally add\n  filescompleter to the positional arguments' add_argument().\n\nIf things do not work right away:\n\n- Switch on argcomplete debugging with (also helpful when doing custom\n  completers):\n    export _ARC_DEBUG=1\n\n- Run:\n    python-argcomplete-check-easy-install-script $(which appname)\n    echo $?\n  will echo 0 if the magic line has been found, 1 if not.\n\n- Sometimes it helps to find early on errors using:\n    _ARGCOMPLETE=1 _ARC_DEBUG=1 appname\n  which should throw a KeyError: 'COMPLINE' (which is properly set by the\n  global argcomplete script).\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nfrom glob import glob\nimport os\nimport sys\nfrom typing import Any\n\n\nclass FastFilesCompleter:\n    \"\"\"Fast file completer class.\"\"\"\n\n    def __init__(self, directories: bool = True) -> None:\n        self.directories = directories\n\n    def __call__(self, prefix: str, **kwargs: Any) -> list[str]:\n        # Only called on non option completions.\n        if os.sep in prefix[1:]:\n            prefix_dir = len(os.path.dirname(prefix) + os.sep)\n        else:\n            prefix_dir = 0\n        completion = []\n        globbed = []\n        if \"*\" not in prefix and \"?\" not in prefix:\n            # We are on unix, otherwise no bash.\n            if not prefix or prefix[-1] == os.sep:\n                globbed.extend(glob(prefix + \".*\"))\n            prefix += \"*\"\n        globbed.extend(glob(prefix))\n        for x in sorted(globbed):\n            if os.path.isdir(x):\n                x += \"/\"\n            # Append stripping the prefix (like bash, not like compgen).\n            completion.append(x[prefix_dir:])\n        return completion\n\n\nif os.environ.get(\"_ARGCOMPLETE\"):\n    try:\n        import argcomplete.completers\n    except ImportError:\n        sys.exit(-1)\n    filescompleter: FastFilesCompleter | None = FastFilesCompleter()\n\n    def try_argcomplete(parser: argparse.ArgumentParser) -> None:\n        argcomplete.autocomplete(parser, always_complete_options=False)\n\nelse:\n\n    def try_argcomplete(parser: argparse.ArgumentParser) -> None:\n        pass\n\n    filescompleter = None\n", "src/_pytest/outcomes.py": "\"\"\"Exception classes and constants handling test outcomes as well as\nfunctions creating them.\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import NoReturn\nfrom typing import Protocol\nfrom typing import Type\nfrom typing import TypeVar\n\nfrom .warning_types import PytestDeprecationWarning\n\n\nclass OutcomeException(BaseException):\n    \"\"\"OutcomeException and its subclass instances indicate and contain info\n    about test and collection outcomes.\"\"\"\n\n    def __init__(self, msg: str | None = None, pytrace: bool = True) -> None:\n        if msg is not None and not isinstance(msg, str):\n            error_msg = (  # type: ignore[unreachable]\n                \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n                \"Perhaps you meant to use a mark?\"\n            )\n            raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n        super().__init__(msg)\n        self.msg = msg\n        self.pytrace = pytrace\n\n    def __repr__(self) -> str:\n        if self.msg is not None:\n            return self.msg\n        return f\"<{self.__class__.__name__} instance>\"\n\n    __str__ = __repr__\n\n\nTEST_OUTCOME = (OutcomeException, Exception)\n\n\nclass Skipped(OutcomeException):\n    # XXX hackish: on 3k we fake to live in the builtins\n    # in order to have Skipped exception printing shorter/nicer\n    __module__ = \"builtins\"\n\n    def __init__(\n        self,\n        msg: str | None = None,\n        pytrace: bool = True,\n        allow_module_level: bool = False,\n        *,\n        _use_item_location: bool = False,\n    ) -> None:\n        super().__init__(msg=msg, pytrace=pytrace)\n        self.allow_module_level = allow_module_level\n        # If true, the skip location is reported as the item's location,\n        # instead of the place that raises the exception/calls skip().\n        self._use_item_location = _use_item_location\n\n\nclass Failed(OutcomeException):\n    \"\"\"Raised from an explicit call to pytest.fail().\"\"\"\n\n    __module__ = \"builtins\"\n\n\nclass Exit(Exception):\n    \"\"\"Raised for immediate program exits (no tracebacks/summaries).\"\"\"\n\n    def __init__(\n        self, msg: str = \"unknown reason\", returncode: int | None = None\n    ) -> None:\n        self.msg = msg\n        self.returncode = returncode\n        super().__init__(msg)\n\n\n# Elaborate hack to work around https://github.com/python/mypy/issues/2087.\n# Ideally would just be `exit.Exception = Exit` etc.\n\n_F = TypeVar(\"_F\", bound=Callable[..., object])\n_ET = TypeVar(\"_ET\", bound=Type[BaseException])\n\n\nclass _WithException(Protocol[_F, _ET]):\n    Exception: _ET\n    __call__: _F\n\n\ndef _with_exception(exception_type: _ET) -> Callable[[_F], _WithException[_F, _ET]]:\n    def decorate(func: _F) -> _WithException[_F, _ET]:\n        func_with_exception = cast(_WithException[_F, _ET], func)\n        func_with_exception.Exception = exception_type\n        return func_with_exception\n\n    return decorate\n\n\n# Exposed helper methods.\n\n\n@_with_exception(Exit)\ndef exit(\n    reason: str = \"\",\n    returncode: int | None = None,\n) -> NoReturn:\n    \"\"\"Exit testing process.\n\n    :param reason:\n        The message to show as the reason for exiting pytest.  reason has a default value\n        only because `msg` is deprecated.\n\n    :param returncode:\n        Return code to be used when exiting pytest. None means the same as ``0`` (no error), same as :func:`sys.exit`.\n\n    :raises pytest.exit.Exception:\n        The exception that is raised.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Exit(reason, returncode)\n\n\n@_with_exception(Skipped)\ndef skip(\n    reason: str = \"\",\n    *,\n    allow_module_level: bool = False,\n) -> NoReturn:\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param reason:\n        The message to show the user as reason for the skip.\n\n    :param allow_module_level:\n        Allows this function to be called at module level.\n        Raising the skip exception at module level will stop\n        the execution of the module and prevent the collection of all tests in the module,\n        even those defined before the `skip` call.\n\n        Defaults to False.\n\n    :raises pytest.skip.Exception:\n        The exception that is raised.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see :py:data:`doctest.SKIP`)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=reason, allow_module_level=allow_module_level)\n\n\n@_with_exception(Failed)\ndef fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.\n\n    :param reason:\n        The message to show the user as reason for the failure.\n\n    :param pytrace:\n        If False, msg represents the full failure information and no\n        python traceback will be reported.\n\n    :raises pytest.fail.Exception:\n        The exception that is raised.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Failed(msg=reason, pytrace=pytrace)\n\n\nclass XFailed(Failed):\n    \"\"\"Raised from an explicit call to pytest.xfail().\"\"\"\n\n\n@_with_exception(XFailed)\ndef xfail(reason: str = \"\") -> NoReturn:\n    \"\"\"Imperatively xfail an executing test or setup function with the given reason.\n\n    This function should be called only during testing (setup, call or teardown).\n\n    No other code is executed after using ``xfail()`` (it is implemented\n    internally by raising an exception).\n\n    :param reason:\n        The message to show the user as reason for the xfail.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.xfail ref` marker when\n        possible to declare a test to be xfailed under certain conditions\n        like known bugs or missing features.\n\n    :raises pytest.xfail.Exception:\n        The exception that is raised.\n    \"\"\"\n    __tracebackhide__ = True\n    raise XFailed(reason)\n\n\ndef importorskip(\n    modname: str,\n    minversion: str | None = None,\n    reason: str | None = None,\n    *,\n    exc_type: type[ImportError] | None = None,\n) -> Any:\n    \"\"\"Import and return the requested module ``modname``, or skip the\n    current test if the module cannot be imported.\n\n    :param modname:\n        The name of the module to import.\n    :param minversion:\n        If given, the imported module's ``__version__`` attribute must be at\n        least this minimal version, otherwise the test is still skipped.\n    :param reason:\n        If given, this reason is shown as the message when the module cannot\n        be imported.\n    :param exc_type:\n        The exception that should be captured in order to skip modules.\n        Must be :py:class:`ImportError` or a subclass.\n\n        If the module can be imported but raises :class:`ImportError`, pytest will\n        issue a warning to the user, as often users expect the module not to be\n        found (which would raise :class:`ModuleNotFoundError` instead).\n\n        This warning can be suppressed by passing ``exc_type=ImportError`` explicitly.\n\n        See :ref:`import-or-skip-import-error` for details.\n\n\n    :returns:\n        The imported module. This should be assigned to its canonical name.\n\n    :raises pytest.skip.Exception:\n        If the module cannot be imported.\n\n    Example::\n\n        docutils = pytest.importorskip(\"docutils\")\n\n    .. versionadded:: 8.2\n\n        The ``exc_type`` parameter.\n    \"\"\"\n    import warnings\n\n    __tracebackhide__ = True\n    compile(modname, \"\", \"eval\")  # to catch syntaxerrors\n\n    # Until pytest 9.1, we will warn the user if we catch ImportError (instead of ModuleNotFoundError),\n    # as this might be hiding an installation/environment problem, which is not usually what is intended\n    # when using importorskip() (#11523).\n    # In 9.1, to keep the function signature compatible, we just change the code below to:\n    # 1. Use `exc_type = ModuleNotFoundError` if `exc_type` is not given.\n    # 2. Remove `warn_on_import` and the warning handling.\n    if exc_type is None:\n        exc_type = ImportError\n        warn_on_import_error = True\n    else:\n        warn_on_import_error = False\n\n    skipped: Skipped | None = None\n    warning: Warning | None = None\n\n    with warnings.catch_warnings():\n        # Make sure to ignore ImportWarnings that might happen because\n        # of existing directories with the same name we're trying to\n        # import but without a __init__.py file.\n        warnings.simplefilter(\"ignore\")\n\n        try:\n            __import__(modname)\n        except exc_type as exc:\n            # Do not raise or issue warnings inside the catch_warnings() block.\n            if reason is None:\n                reason = f\"could not import {modname!r}: {exc}\"\n            skipped = Skipped(reason, allow_module_level=True)\n\n            if warn_on_import_error and not isinstance(exc, ModuleNotFoundError):\n                lines = [\n                    \"\",\n                    f\"Module '{modname}' was found, but when imported by pytest it raised:\",\n                    f\"    {exc!r}\",\n                    \"In pytest 9.1 this warning will become an error by default.\",\n                    \"You can fix the underlying problem, or alternatively overwrite this behavior and silence this \"\n                    \"warning by passing exc_type=ImportError explicitly.\",\n                    \"See https://docs.pytest.org/en/stable/deprecations.html#pytest-importorskip-default-behavior-regarding-importerror\",\n                ]\n                warning = PytestDeprecationWarning(\"\\n\".join(lines))\n\n    if warning:\n        warnings.warn(warning, stacklevel=2)\n    if skipped:\n        raise skipped\n\n    mod = sys.modules[modname]\n    if minversion is None:\n        return mod\n    verattr = getattr(mod, \"__version__\", None)\n    if minversion is not None:\n        # Imported lazily to improve start-up time.\n        from packaging.version import Version\n\n        if verattr is None or Version(verattr) < Version(minversion):\n            raise Skipped(\n                f\"module {modname!r} has __version__ {verattr!r}, required is: {minversion!r}\",\n                allow_module_level=True,\n            )\n    return mod\n", "src/_pytest/python_api.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom collections.abc import Collection\nfrom collections.abc import Sized\nfrom decimal import Decimal\nimport math\nfrom numbers import Complex\nimport pprint\nfrom types import TracebackType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import ContextManager\nfrom typing import final\nfrom typing import Mapping\nfrom typing import overload\nfrom typing import Pattern\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nimport _pytest._code\nfrom _pytest.outcomes import fail\n\n\nif TYPE_CHECKING:\n    from numpy import ndarray\n\n\ndef _compare_approx(\n    full_object: object,\n    message_data: Sequence[tuple[str, str, str]],\n    number_of_elements: int,\n    different_ids: Sequence[object],\n    max_abs_diff: float,\n    max_rel_diff: float,\n) -> list[str]:\n    message_list = list(message_data)\n    message_list.insert(0, (\"Index\", \"Obtained\", \"Expected\"))\n    max_sizes = [0, 0, 0]\n    for index, obtained, expected in message_list:\n        max_sizes[0] = max(max_sizes[0], len(index))\n        max_sizes[1] = max(max_sizes[1], len(obtained))\n        max_sizes[2] = max(max_sizes[2], len(expected))\n    explanation = [\n        f\"comparison failed. Mismatched elements: {len(different_ids)} / {number_of_elements}:\",\n        f\"Max absolute difference: {max_abs_diff}\",\n        f\"Max relative difference: {max_rel_diff}\",\n    ] + [\n        f\"{indexes:<{max_sizes[0]}} | {obtained:<{max_sizes[1]}} | {expected:<{max_sizes[2]}}\"\n        for indexes, obtained, expected in message_list\n    ]\n    return explanation\n\n\n# builtin pytest.approx helper\n\n\nclass ApproxBase:\n    \"\"\"Provide shared utilities for making approximate comparisons between\n    numbers or sequences of numbers.\"\"\"\n\n    # Tell numpy to use our `__eq__` operator instead of its.\n    __array_ufunc__ = None\n    __array_priority__ = 100\n\n    def __init__(self, expected, rel=None, abs=None, nan_ok: bool = False) -> None:\n        __tracebackhide__ = True\n        self.expected = expected\n        self.abs = abs\n        self.rel = rel\n        self.nan_ok = nan_ok\n        self._check_type()\n\n    def __repr__(self) -> str:\n        raise NotImplementedError\n\n    def _repr_compare(self, other_side: Any) -> list[str]:\n        return [\n            \"comparison failed\",\n            f\"Obtained: {other_side}\",\n            f\"Expected: {self}\",\n        ]\n\n    def __eq__(self, actual) -> bool:\n        return all(\n            a == self._approx_scalar(x) for a, x in self._yield_comparisons(actual)\n        )\n\n    def __bool__(self):\n        __tracebackhide__ = True\n        raise AssertionError(\n            \"approx() is not supported in a boolean context.\\nDid you mean: `assert a == approx(b)`?\"\n        )\n\n    # Ignore type because of https://github.com/python/mypy/issues/4266.\n    __hash__ = None  # type: ignore\n\n    def __ne__(self, actual) -> bool:\n        return not (actual == self)\n\n    def _approx_scalar(self, x) -> ApproxScalar:\n        if isinstance(x, Decimal):\n            return ApproxDecimal(x, rel=self.rel, abs=self.abs, nan_ok=self.nan_ok)\n        return ApproxScalar(x, rel=self.rel, abs=self.abs, nan_ok=self.nan_ok)\n\n    def _yield_comparisons(self, actual):\n        \"\"\"Yield all the pairs of numbers to be compared.\n\n        This is used to implement the `__eq__` method.\n        \"\"\"\n        raise NotImplementedError\n\n    def _check_type(self) -> None:\n        \"\"\"Raise a TypeError if the expected value is not a valid type.\"\"\"\n        # This is only a concern if the expected value is a sequence.  In every\n        # other case, the approx() function ensures that the expected value has\n        # a numeric type.  For this reason, the default is to do nothing.  The\n        # classes that deal with sequences should reimplement this method to\n        # raise if there are any non-numeric elements in the sequence.\n\n\ndef _recursive_sequence_map(f, x):\n    \"\"\"Recursively map a function over a sequence of arbitrary depth\"\"\"\n    if isinstance(x, (list, tuple)):\n        seq_type = type(x)\n        return seq_type(_recursive_sequence_map(f, xi) for xi in x)\n    elif _is_sequence_like(x):\n        return [_recursive_sequence_map(f, xi) for xi in x]\n    else:\n        return f(x)\n\n\nclass ApproxNumpy(ApproxBase):\n    \"\"\"Perform approximate comparisons where the expected value is numpy array.\"\"\"\n\n    def __repr__(self) -> str:\n        list_scalars = _recursive_sequence_map(\n            self._approx_scalar, self.expected.tolist()\n        )\n        return f\"approx({list_scalars!r})\"\n\n    def _repr_compare(self, other_side: ndarray | list[Any]) -> list[str]:\n        import itertools\n        import math\n\n        def get_value_from_nested_list(\n            nested_list: list[Any], nd_index: tuple[Any, ...]\n        ) -> Any:\n            \"\"\"\n            Helper function to get the value out of a nested list, given an n-dimensional index.\n            This mimics numpy's indexing, but for raw nested python lists.\n            \"\"\"\n            value: Any = nested_list\n            for i in nd_index:\n                value = value[i]\n            return value\n\n        np_array_shape = self.expected.shape\n        approx_side_as_seq = _recursive_sequence_map(\n            self._approx_scalar, self.expected.tolist()\n        )\n\n        # convert other_side to numpy array to ensure shape attribute is available\n        other_side_as_array = _as_numpy_array(other_side)\n        assert other_side_as_array is not None\n\n        if np_array_shape != other_side_as_array.shape:\n            return [\n                \"Impossible to compare arrays with different shapes.\",\n                f\"Shapes: {np_array_shape} and {other_side_as_array.shape}\",\n            ]\n\n        number_of_elements = self.expected.size\n        max_abs_diff = -math.inf\n        max_rel_diff = -math.inf\n        different_ids = []\n        for index in itertools.product(*(range(i) for i in np_array_shape)):\n            approx_value = get_value_from_nested_list(approx_side_as_seq, index)\n            other_value = get_value_from_nested_list(other_side_as_array, index)\n            if approx_value != other_value:\n                abs_diff = abs(approx_value.expected - other_value)\n                max_abs_diff = max(max_abs_diff, abs_diff)\n                if other_value == 0.0:\n                    max_rel_diff = math.inf\n                else:\n                    max_rel_diff = max(max_rel_diff, abs_diff / abs(other_value))\n                different_ids.append(index)\n\n        message_data = [\n            (\n                str(index),\n                str(get_value_from_nested_list(other_side_as_array, index)),\n                str(get_value_from_nested_list(approx_side_as_seq, index)),\n            )\n            for index in different_ids\n        ]\n        return _compare_approx(\n            self.expected,\n            message_data,\n            number_of_elements,\n            different_ids,\n            max_abs_diff,\n            max_rel_diff,\n        )\n\n    def __eq__(self, actual) -> bool:\n        import numpy as np\n\n        # self.expected is supposed to always be an array here.\n\n        if not np.isscalar(actual):\n            try:\n                actual = np.asarray(actual)\n            except Exception as e:\n                raise TypeError(f\"cannot compare '{actual}' to numpy.ndarray\") from e\n\n        if not np.isscalar(actual) and actual.shape != self.expected.shape:\n            return False\n\n        return super().__eq__(actual)\n\n    def _yield_comparisons(self, actual):\n        import numpy as np\n\n        # `actual` can either be a numpy array or a scalar, it is treated in\n        # `__eq__` before being passed to `ApproxBase.__eq__`, which is the\n        # only method that calls this one.\n\n        if np.isscalar(actual):\n            for i in np.ndindex(self.expected.shape):\n                yield actual, self.expected[i].item()\n        else:\n            for i in np.ndindex(self.expected.shape):\n                yield actual[i].item(), self.expected[i].item()\n\n\nclass ApproxMapping(ApproxBase):\n    \"\"\"Perform approximate comparisons where the expected value is a mapping\n    with numeric values (the keys can be anything).\"\"\"\n\n    def __repr__(self) -> str:\n        return f\"approx({({k: self._approx_scalar(v) for k, v in self.expected.items()})!r})\"\n\n    def _repr_compare(self, other_side: Mapping[object, float]) -> list[str]:\n        import math\n\n        approx_side_as_map = {\n            k: self._approx_scalar(v) for k, v in self.expected.items()\n        }\n\n        number_of_elements = len(approx_side_as_map)\n        max_abs_diff = -math.inf\n        max_rel_diff = -math.inf\n        different_ids = []\n        for (approx_key, approx_value), other_value in zip(\n            approx_side_as_map.items(), other_side.values()\n        ):\n            if approx_value != other_value:\n                if approx_value.expected is not None and other_value is not None:\n                    max_abs_diff = max(\n                        max_abs_diff, abs(approx_value.expected - other_value)\n                    )\n                    if approx_value.expected == 0.0:\n                        max_rel_diff = math.inf\n                    else:\n                        max_rel_diff = max(\n                            max_rel_diff,\n                            abs(\n                                (approx_value.expected - other_value)\n                                / approx_value.expected\n                            ),\n                        )\n                different_ids.append(approx_key)\n\n        message_data = [\n            (str(key), str(other_side[key]), str(approx_side_as_map[key]))\n            for key in different_ids\n        ]\n\n        return _compare_approx(\n            self.expected,\n            message_data,\n            number_of_elements,\n            different_ids,\n            max_abs_diff,\n            max_rel_diff,\n        )\n\n    def __eq__(self, actual) -> bool:\n        try:\n            if set(actual.keys()) != set(self.expected.keys()):\n                return False\n        except AttributeError:\n            return False\n\n        return super().__eq__(actual)\n\n    def _yield_comparisons(self, actual):\n        for k in self.expected.keys():\n            yield actual[k], self.expected[k]\n\n    def _check_type(self) -> None:\n        __tracebackhide__ = True\n        for key, value in self.expected.items():\n            if isinstance(value, type(self.expected)):\n                msg = \"pytest.approx() does not support nested dictionaries: key={!r} value={!r}\\n  full mapping={}\"\n                raise TypeError(msg.format(key, value, pprint.pformat(self.expected)))\n\n\nclass ApproxSequenceLike(ApproxBase):\n    \"\"\"Perform approximate comparisons where the expected value is a sequence of numbers.\"\"\"\n\n    def __repr__(self) -> str:\n        seq_type = type(self.expected)\n        if seq_type not in (tuple, list):\n            seq_type = list\n        return f\"approx({seq_type(self._approx_scalar(x) for x in self.expected)!r})\"\n\n    def _repr_compare(self, other_side: Sequence[float]) -> list[str]:\n        import math\n\n        if len(self.expected) != len(other_side):\n            return [\n                \"Impossible to compare lists with different sizes.\",\n                f\"Lengths: {len(self.expected)} and {len(other_side)}\",\n            ]\n\n        approx_side_as_map = _recursive_sequence_map(self._approx_scalar, self.expected)\n\n        number_of_elements = len(approx_side_as_map)\n        max_abs_diff = -math.inf\n        max_rel_diff = -math.inf\n        different_ids = []\n        for i, (approx_value, other_value) in enumerate(\n            zip(approx_side_as_map, other_side)\n        ):\n            if approx_value != other_value:\n                abs_diff = abs(approx_value.expected - other_value)\n                max_abs_diff = max(max_abs_diff, abs_diff)\n                if other_value == 0.0:\n                    max_rel_diff = math.inf\n                else:\n                    max_rel_diff = max(max_rel_diff, abs_diff / abs(other_value))\n                different_ids.append(i)\n\n        message_data = [\n            (str(i), str(other_side[i]), str(approx_side_as_map[i]))\n            for i in different_ids\n        ]\n\n        return _compare_approx(\n            self.expected,\n            message_data,\n            number_of_elements,\n            different_ids,\n            max_abs_diff,\n            max_rel_diff,\n        )\n\n    def __eq__(self, actual) -> bool:\n        try:\n            if len(actual) != len(self.expected):\n                return False\n        except TypeError:\n            return False\n        return super().__eq__(actual)\n\n    def _yield_comparisons(self, actual):\n        return zip(actual, self.expected)\n\n    def _check_type(self) -> None:\n        __tracebackhide__ = True\n        for index, x in enumerate(self.expected):\n            if isinstance(x, type(self.expected)):\n                msg = \"pytest.approx() does not support nested data structures: {!r} at index {}\\n  full sequence: {}\"\n                raise TypeError(msg.format(x, index, pprint.pformat(self.expected)))\n\n\nclass ApproxScalar(ApproxBase):\n    \"\"\"Perform approximate comparisons where the expected value is a single number.\"\"\"\n\n    # Using Real should be better than this Union, but not possible yet:\n    # https://github.com/python/typeshed/pull/3108\n    DEFAULT_ABSOLUTE_TOLERANCE: float | Decimal = 1e-12\n    DEFAULT_RELATIVE_TOLERANCE: float | Decimal = 1e-6\n\n    def __repr__(self) -> str:\n        \"\"\"Return a string communicating both the expected value and the\n        tolerance for the comparison being made.\n\n        For example, ``1.0 \u00b1 1e-6``, ``(3+4j) \u00b1 5e-6 \u2220 \u00b1180\u00b0``.\n        \"\"\"\n        # Don't show a tolerance for values that aren't compared using\n        # tolerances, i.e. non-numerics and infinities. Need to call abs to\n        # handle complex numbers, e.g. (inf + 1j).\n        if (not isinstance(self.expected, (Complex, Decimal))) or math.isinf(\n            abs(self.expected)\n        ):\n            return str(self.expected)\n\n        # If a sensible tolerance can't be calculated, self.tolerance will\n        # raise a ValueError.  In this case, display '???'.\n        try:\n            vetted_tolerance = f\"{self.tolerance:.1e}\"\n            if (\n                isinstance(self.expected, Complex)\n                and self.expected.imag\n                and not math.isinf(self.tolerance)\n            ):\n                vetted_tolerance += \" \u2220 \u00b1180\u00b0\"\n        except ValueError:\n            vetted_tolerance = \"???\"\n\n        return f\"{self.expected} \u00b1 {vetted_tolerance}\"\n\n    def __eq__(self, actual) -> bool:\n        \"\"\"Return whether the given value is equal to the expected value\n        within the pre-specified tolerance.\"\"\"\n        asarray = _as_numpy_array(actual)\n        if asarray is not None:\n            # Call ``__eq__()`` manually to prevent infinite-recursion with\n            # numpy<1.13.  See #3748.\n            return all(self.__eq__(a) for a in asarray.flat)\n\n        # Short-circuit exact equality.\n        if actual == self.expected:\n            return True\n\n        # If either type is non-numeric, fall back to strict equality.\n        # NB: we need Complex, rather than just Number, to ensure that __abs__,\n        # __sub__, and __float__ are defined.\n        if not (\n            isinstance(self.expected, (Complex, Decimal))\n            and isinstance(actual, (Complex, Decimal))\n        ):\n            return False\n\n        # Allow the user to control whether NaNs are considered equal to each\n        # other or not.  The abs() calls are for compatibility with complex\n        # numbers.\n        if math.isnan(abs(self.expected)):\n            return self.nan_ok and math.isnan(abs(actual))\n\n        # Infinity shouldn't be approximately equal to anything but itself, but\n        # if there's a relative tolerance, it will be infinite and infinity\n        # will seem approximately equal to everything.  The equal-to-itself\n        # case would have been short circuited above, so here we can just\n        # return false if the expected value is infinite.  The abs() call is\n        # for compatibility with complex numbers.\n        if math.isinf(abs(self.expected)):\n            return False\n\n        # Return true if the two numbers are within the tolerance.\n        result: bool = abs(self.expected - actual) <= self.tolerance\n        return result\n\n    # Ignore type because of https://github.com/python/mypy/issues/4266.\n    __hash__ = None  # type: ignore\n\n    @property\n    def tolerance(self):\n        \"\"\"Return the tolerance for the comparison.\n\n        This could be either an absolute tolerance or a relative tolerance,\n        depending on what the user specified or which would be larger.\n        \"\"\"\n\n        def set_default(x, default):\n            return x if x is not None else default\n\n        # Figure out what the absolute tolerance should be.  ``self.abs`` is\n        # either None or a value specified by the user.\n        absolute_tolerance = set_default(self.abs, self.DEFAULT_ABSOLUTE_TOLERANCE)\n\n        if absolute_tolerance < 0:\n            raise ValueError(\n                f\"absolute tolerance can't be negative: {absolute_tolerance}\"\n            )\n        if math.isnan(absolute_tolerance):\n            raise ValueError(\"absolute tolerance can't be NaN.\")\n\n        # If the user specified an absolute tolerance but not a relative one,\n        # just return the absolute tolerance.\n        if self.rel is None:\n            if self.abs is not None:\n                return absolute_tolerance\n\n        # Figure out what the relative tolerance should be.  ``self.rel`` is\n        # either None or a value specified by the user.  This is done after\n        # we've made sure the user didn't ask for an absolute tolerance only,\n        # because we don't want to raise errors about the relative tolerance if\n        # we aren't even going to use it.\n        relative_tolerance = set_default(\n            self.rel, self.DEFAULT_RELATIVE_TOLERANCE\n        ) * abs(self.expected)\n\n        if relative_tolerance < 0:\n            raise ValueError(\n                f\"relative tolerance can't be negative: {relative_tolerance}\"\n            )\n        if math.isnan(relative_tolerance):\n            raise ValueError(\"relative tolerance can't be NaN.\")\n\n        # Return the larger of the relative and absolute tolerances.\n        return max(relative_tolerance, absolute_tolerance)\n\n\nclass ApproxDecimal(ApproxScalar):\n    \"\"\"Perform approximate comparisons where the expected value is a Decimal.\"\"\"\n\n    DEFAULT_ABSOLUTE_TOLERANCE = Decimal(\"1e-12\")\n    DEFAULT_RELATIVE_TOLERANCE = Decimal(\"1e-6\")\n\n\ndef approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n    \"\"\"Assert that two numbers (or two ordered sequences of numbers) are equal to each other\n    within some tolerance.\n\n    Due to the :doc:`python:tutorial/floatingpoint`, numbers that we\n    would intuitively expect to be equal are not always so::\n\n        >>> 0.1 + 0.2 == 0.3\n        False\n\n    This problem is commonly encountered when writing tests, e.g. when making\n    sure that floating-point values are what you expect them to be.  One way to\n    deal with this problem is to assert that two floating-point numbers are\n    equal to within some appropriate tolerance::\n\n        >>> abs((0.1 + 0.2) - 0.3) < 1e-6\n        True\n\n    However, comparisons like this are tedious to write and difficult to\n    understand.  Furthermore, absolute comparisons like the one above are\n    usually discouraged because there's no tolerance that works well for all\n    situations.  ``1e-6`` is good for numbers around ``1``, but too small for\n    very big numbers and too big for very small ones.  It's better to express\n    the tolerance as a fraction of the expected value, but relative comparisons\n    like that are even more difficult to write correctly and concisely.\n\n    The ``approx`` class performs floating-point comparisons using a syntax\n    that's as intuitive as possible::\n\n        >>> from pytest import approx\n        >>> 0.1 + 0.2 == approx(0.3)\n        True\n\n    The same syntax also works for ordered sequences of numbers::\n\n        >>> (0.1 + 0.2, 0.2 + 0.4) == approx((0.3, 0.6))\n        True\n\n    ``numpy`` arrays::\n\n        >>> import numpy as np                                                          # doctest: +SKIP\n        >>> np.array([0.1, 0.2]) + np.array([0.2, 0.4]) == approx(np.array([0.3, 0.6])) # doctest: +SKIP\n        True\n\n    And for a ``numpy`` array against a scalar::\n\n        >>> import numpy as np                                         # doctest: +SKIP\n        >>> np.array([0.1, 0.2]) + np.array([0.2, 0.1]) == approx(0.3) # doctest: +SKIP\n        True\n\n    Only ordered sequences are supported, because ``approx`` needs\n    to infer the relative position of the sequences without ambiguity. This means\n    ``sets`` and other unordered sequences are not supported.\n\n    Finally, dictionary *values* can also be compared::\n\n        >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})\n        True\n\n    The comparison will be true if both mappings have the same keys and their\n    respective values match the expected tolerances.\n\n    **Tolerances**\n\n    By default, ``approx`` considers numbers within a relative tolerance of\n    ``1e-6`` (i.e. one part in a million) of its expected value to be equal.\n    This treatment would lead to surprising results if the expected value was\n    ``0.0``, because nothing but ``0.0`` itself is relatively close to ``0.0``.\n    To handle this case less surprisingly, ``approx`` also considers numbers\n    within an absolute tolerance of ``1e-12`` of its expected value to be\n    equal.  Infinity and NaN are special cases.  Infinity is only considered\n    equal to itself, regardless of the relative tolerance.  NaN is not\n    considered equal to anything by default, but you can make it be equal to\n    itself by setting the ``nan_ok`` argument to True.  (This is meant to\n    facilitate comparing arrays that use NaN to mean \"no data\".)\n\n    Both the relative and absolute tolerances can be changed by passing\n    arguments to the ``approx`` constructor::\n\n        >>> 1.0001 == approx(1)\n        False\n        >>> 1.0001 == approx(1, rel=1e-3)\n        True\n        >>> 1.0001 == approx(1, abs=1e-3)\n        True\n\n    If you specify ``abs`` but not ``rel``, the comparison will not consider\n    the relative tolerance at all.  In other words, two numbers that are within\n    the default relative tolerance of ``1e-6`` will still be considered unequal\n    if they exceed the specified absolute tolerance.  If you specify both\n    ``abs`` and ``rel``, the numbers will be considered equal if either\n    tolerance is met::\n\n        >>> 1 + 1e-8 == approx(1)\n        True\n        >>> 1 + 1e-8 == approx(1, abs=1e-12)\n        False\n        >>> 1 + 1e-8 == approx(1, rel=1e-6, abs=1e-12)\n        True\n\n    You can also use ``approx`` to compare nonnumeric types, or dicts and\n    sequences containing nonnumeric types, in which case it falls back to\n    strict equality. This can be useful for comparing dicts and sequences that\n    can contain optional values::\n\n        >>> {\"required\": 1.0000005, \"optional\": None} == approx({\"required\": 1, \"optional\": None})\n        True\n        >>> [None, 1.0000005] == approx([None,1])\n        True\n        >>> [\"foo\", 1.0000005] == approx([None,1])\n        False\n\n    If you're thinking about using ``approx``, then you might want to know how\n    it compares to other good ways of comparing floating-point numbers.  All of\n    these algorithms are based on relative and absolute tolerances and should\n    agree for the most part, but they do have meaningful differences:\n\n    - ``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``:  True if the relative\n      tolerance is met w.r.t. either ``a`` or ``b`` or if the absolute\n      tolerance is met.  Because the relative tolerance is calculated w.r.t.\n      both ``a`` and ``b``, this test is symmetric (i.e.  neither ``a`` nor\n      ``b`` is a \"reference value\").  You have to specify an absolute tolerance\n      if you want to compare to ``0.0`` because there is no tolerance by\n      default.  More information: :py:func:`math.isclose`.\n\n    - ``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: True if the difference\n      between ``a`` and ``b`` is less that the sum of the relative tolerance\n      w.r.t. ``b`` and the absolute tolerance.  Because the relative tolerance\n      is only calculated w.r.t. ``b``, this test is asymmetric and you can\n      think of ``b`` as the reference value.  Support for comparing sequences\n      is provided by :py:func:`numpy.allclose`.  More information:\n      :std:doc:`numpy:reference/generated/numpy.isclose`.\n\n    - ``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b``\n      are within an absolute tolerance of ``1e-7``.  No relative tolerance is\n      considered , so this function is not appropriate for very large or very\n      small numbers.  Also, it's only available in subclasses of ``unittest.TestCase``\n      and it's ugly because it doesn't follow PEP8.  More information:\n      :py:meth:`unittest.TestCase.assertAlmostEqual`.\n\n    - ``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative\n      tolerance is met w.r.t. ``b`` or if the absolute tolerance is met.\n      Because the relative tolerance is only calculated w.r.t. ``b``, this test\n      is asymmetric and you can think of ``b`` as the reference value.  In the\n      special case that you explicitly specify an absolute tolerance but not a\n      relative tolerance, only the absolute tolerance is considered.\n\n    .. note::\n\n        ``approx`` can handle numpy arrays, but we recommend the\n        specialised test helpers in :std:doc:`numpy:reference/routines.testing`\n        if you need support for comparisons, NaNs, or ULP-based tolerances.\n\n        To match strings using regex, you can use\n        `Matches <https://github.com/asottile/re-assert#re_assertmatchespattern-str-args-kwargs>`_\n        from the\n        `re_assert package <https://github.com/asottile/re-assert>`_.\n\n    .. warning::\n\n       .. versionchanged:: 3.2\n\n       In order to avoid inconsistent behavior, :py:exc:`TypeError` is\n       raised for ``>``, ``>=``, ``<`` and ``<=`` comparisons.\n       The example below illustrates the problem::\n\n           assert approx(0.1) > 0.1 + 1e-10  # calls approx(0.1).__gt__(0.1 + 1e-10)\n           assert 0.1 + 1e-10 > approx(0.1)  # calls approx(0.1).__lt__(0.1 + 1e-10)\n\n       In the second example one expects ``approx(0.1).__le__(0.1 + 1e-10)``\n       to be called. But instead, ``approx(0.1).__lt__(0.1 + 1e-10)`` is used to\n       comparison. This is because the call hierarchy of rich comparisons\n       follows a fixed behavior. More information: :py:meth:`object.__ge__`\n\n    .. versionchanged:: 3.7.1\n       ``approx`` raises ``TypeError`` when it encounters a dict value or\n       sequence element of nonnumeric type.\n\n    .. versionchanged:: 6.1.0\n       ``approx`` falls back to strict equality for nonnumeric types instead\n       of raising ``TypeError``.\n    \"\"\"\n    # Delegate the comparison to a class that knows how to deal with the type\n    # of the expected value (e.g. int, float, list, dict, numpy.array, etc).\n    #\n    # The primary responsibility of these classes is to implement ``__eq__()``\n    # and ``__repr__()``.  The former is used to actually check if some\n    # \"actual\" value is equivalent to the given expected value within the\n    # allowed tolerance.  The latter is used to show the user the expected\n    # value and tolerance, in the case that a test failed.\n    #\n    # The actual logic for making approximate comparisons can be found in\n    # ApproxScalar, which is used to compare individual numbers.  All of the\n    # other Approx classes eventually delegate to this class.  The ApproxBase\n    # class provides some convenient methods and overloads, but isn't really\n    # essential.\n\n    __tracebackhide__ = True\n\n    if isinstance(expected, Decimal):\n        cls: type[ApproxBase] = ApproxDecimal\n    elif isinstance(expected, Mapping):\n        cls = ApproxMapping\n    elif _is_numpy_array(expected):\n        expected = _as_numpy_array(expected)\n        cls = ApproxNumpy\n    elif _is_sequence_like(expected):\n        cls = ApproxSequenceLike\n    elif isinstance(expected, Collection) and not isinstance(expected, (str, bytes)):\n        msg = f\"pytest.approx() only supports ordered sequences, but got: {expected!r}\"\n        raise TypeError(msg)\n    else:\n        cls = ApproxScalar\n\n    return cls(expected, rel, abs, nan_ok)\n\n\ndef _is_sequence_like(expected: object) -> bool:\n    return (\n        hasattr(expected, \"__getitem__\")\n        and isinstance(expected, Sized)\n        and not isinstance(expected, (str, bytes))\n    )\n\n\ndef _is_numpy_array(obj: object) -> bool:\n    \"\"\"\n    Return true if the given object is implicitly convertible to ndarray,\n    and numpy is already imported.\n    \"\"\"\n    return _as_numpy_array(obj) is not None\n\n\ndef _as_numpy_array(obj: object) -> ndarray | None:\n    \"\"\"\n    Return an ndarray if the given object is implicitly convertible to ndarray,\n    and numpy is already imported, otherwise None.\n    \"\"\"\n    import sys\n\n    np: Any = sys.modules.get(\"numpy\")\n    if np is not None:\n        # avoid infinite recursion on numpy scalars, which have __array__\n        if np.isscalar(obj):\n            return None\n        elif isinstance(obj, np.ndarray):\n            return obj\n        elif hasattr(obj, \"__array__\") or hasattr(\"obj\", \"__array_interface__\"):\n            return np.asarray(obj)\n    return None\n\n\n# builtin pytest.raises helper\n\nE = TypeVar(\"E\", bound=BaseException)\n\n\n@overload\ndef raises(\n    expected_exception: type[E] | tuple[type[E], ...],\n    *,\n    match: str | Pattern[str] | None = ...,\n) -> RaisesContext[E]: ...\n\n\n@overload\ndef raises(\n    expected_exception: type[E] | tuple[type[E], ...],\n    func: Callable[..., Any],\n    *args: Any,\n    **kwargs: Any,\n) -> _pytest._code.ExceptionInfo[E]: ...\n\n\ndef raises(\n    expected_exception: type[E] | tuple[type[E], ...], *args: Any, **kwargs: Any\n) -> RaisesContext[E] | _pytest._code.ExceptionInfo[E]:\n    r\"\"\"Assert that a code block/function call raises an exception type, or one of its subclasses.\n\n    :param expected_exception:\n        The expected exception type, or a tuple if one of multiple possible\n        exception types are expected. Note that subclasses of the passed exceptions\n        will also match.\n\n    :kwparam str | re.Pattern[str] | None match:\n        If specified, a string containing a regular expression,\n        or a regular expression object, that is tested against the string\n        representation of the exception and its :pep:`678` `__notes__`\n        using :func:`re.search`.\n\n        To match a literal string that may contain :ref:`special characters\n        <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.\n\n        (This is only used when ``pytest.raises`` is used as a context manager,\n        and passed through to the function otherwise.\n        When using ``pytest.raises`` as a function, you can use:\n        ``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")``.)\n\n    Use ``pytest.raises`` as a context manager, which will capture the exception of the given\n    type, or any of its subclasses::\n\n        >>> import pytest\n        >>> with pytest.raises(ZeroDivisionError):\n        ...    1/0\n\n    If the code block does not raise the expected exception (:class:`ZeroDivisionError` in the example\n    above), or no exception at all, the check will fail instead.\n\n    You can also use the keyword argument ``match`` to assert that the\n    exception matches a text or regex::\n\n        >>> with pytest.raises(ValueError, match='must be 0 or None'):\n        ...     raise ValueError(\"value must be 0 or None\")\n\n        >>> with pytest.raises(ValueError, match=r'must be \\d+$'):\n        ...     raise ValueError(\"value must be 42\")\n\n    The ``match`` argument searches the formatted exception string, which includes any\n    `PEP-678 <https://peps.python.org/pep-0678/>`__ ``__notes__``:\n\n        >>> with pytest.raises(ValueError, match=r\"had a note added\"):  # doctest: +SKIP\n        ...     e = ValueError(\"value must be 42\")\n        ...     e.add_note(\"had a note added\")\n        ...     raise e\n\n    The context manager produces an :class:`ExceptionInfo` object which can be used to inspect the\n    details of the captured exception::\n\n        >>> with pytest.raises(ValueError) as exc_info:\n        ...     raise ValueError(\"value must be 42\")\n        >>> assert exc_info.type is ValueError\n        >>> assert exc_info.value.args[0] == \"value must be 42\"\n\n    .. warning::\n\n       Given that ``pytest.raises`` matches subclasses, be wary of using it to match :class:`Exception` like this::\n\n           with pytest.raises(Exception):  # Careful, this will catch ANY exception raised.\n               some_function()\n\n       Because :class:`Exception` is the base class of almost all exceptions, it is easy for this to hide\n       real bugs, where the user wrote this expecting a specific exception, but some other exception is being\n       raised due to a bug introduced during a refactoring.\n\n       Avoid using ``pytest.raises`` to catch :class:`Exception` unless certain that you really want to catch\n       **any** exception raised.\n\n    .. note::\n\n       When using ``pytest.raises`` as a context manager, it's worthwhile to\n       note that normal context manager rules apply and that the exception\n       raised *must* be the final line in the scope of the context manager.\n       Lines of code after that, within the scope of the context manager will\n       not be executed. For example::\n\n           >>> value = 15\n           >>> with pytest.raises(ValueError) as exc_info:\n           ...     if value > 10:\n           ...         raise ValueError(\"value must be <= 10\")\n           ...     assert exc_info.type is ValueError  # This will not execute.\n\n       Instead, the following approach must be taken (note the difference in\n       scope)::\n\n           >>> with pytest.raises(ValueError) as exc_info:\n           ...     if value > 10:\n           ...         raise ValueError(\"value must be <= 10\")\n           ...\n           >>> assert exc_info.type is ValueError\n\n    **Using with** ``pytest.mark.parametrize``\n\n    When using :ref:`pytest.mark.parametrize ref`\n    it is possible to parametrize tests such that\n    some runs raise an exception and others do not.\n\n    See :ref:`parametrizing_conditional_raising` for an example.\n\n    .. seealso::\n\n        :ref:`assertraises` for more examples and detailed discussion.\n\n    **Legacy form**\n\n    It is possible to specify a callable by passing a to-be-called lambda::\n\n        >>> raises(ZeroDivisionError, lambda: 1/0)\n        <ExceptionInfo ...>\n\n    or you can specify an arbitrary callable with arguments::\n\n        >>> def f(x): return 1/x\n        ...\n        >>> raises(ZeroDivisionError, f, 0)\n        <ExceptionInfo ...>\n        >>> raises(ZeroDivisionError, f, x=0)\n        <ExceptionInfo ...>\n\n    The form above is fully supported but discouraged for new code because the\n    context manager form is regarded as more readable and less error-prone.\n\n    .. note::\n        Similar to caught exception objects in Python, explicitly clearing\n        local references to returned ``ExceptionInfo`` objects can\n        help the Python interpreter speed up its garbage collection.\n\n        Clearing those references breaks a reference cycle\n        (``ExceptionInfo`` --> caught exception --> frame stack raising\n        the exception --> current frame stack --> local variables -->\n        ``ExceptionInfo``) which makes Python keep all objects referenced\n        from that cycle (including all local variables in the current\n        frame) alive until the next cyclic garbage collection run.\n        More detailed information can be found in the official Python\n        documentation for :ref:`the try statement <python:try>`.\n    \"\"\"\n    __tracebackhide__ = True\n\n    if not expected_exception:\n        raise ValueError(\n            f\"Expected an exception type or a tuple of exception types, but got `{expected_exception!r}`. \"\n            f\"Raising exceptions is already understood as failing the test, so you don't need \"\n            f\"any special code to say 'this should never raise an exception'.\"\n        )\n    if isinstance(expected_exception, type):\n        expected_exceptions: tuple[type[E], ...] = (expected_exception,)\n    else:\n        expected_exceptions = expected_exception\n    for exc in expected_exceptions:\n        if not isinstance(exc, type) or not issubclass(exc, BaseException):\n            msg = \"expected exception must be a BaseException type, not {}\"  # type: ignore[unreachable]\n            not_a = exc.__name__ if isinstance(exc, type) else type(exc).__name__\n            raise TypeError(msg.format(not_a))\n\n    message = f\"DID NOT RAISE {expected_exception}\"\n\n    if not args:\n        match: str | Pattern[str] | None = kwargs.pop(\"match\", None)\n        if kwargs:\n            msg = \"Unexpected keyword arguments passed to pytest.raises: \"\n            msg += \", \".join(sorted(kwargs))\n            msg += \"\\nUse context-manager form instead?\"\n            raise TypeError(msg)\n        return RaisesContext(expected_exception, message, match)\n    else:\n        func = args[0]\n        if not callable(func):\n            raise TypeError(f\"{func!r} object (type: {type(func)}) must be callable\")\n        try:\n            func(*args[1:], **kwargs)\n        except expected_exception as e:\n            return _pytest._code.ExceptionInfo.from_exception(e)\n    fail(message)\n\n\n# This doesn't work with mypy for now. Use fail.Exception instead.\nraises.Exception = fail.Exception  # type: ignore\n\n\n@final\nclass RaisesContext(ContextManager[_pytest._code.ExceptionInfo[E]]):\n    def __init__(\n        self,\n        expected_exception: type[E] | tuple[type[E], ...],\n        message: str,\n        match_expr: str | Pattern[str] | None = None,\n    ) -> None:\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo: _pytest._code.ExceptionInfo[E] | None = None\n\n    def __enter__(self) -> _pytest._code.ExceptionInfo[E]:\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> bool:\n        __tracebackhide__ = True\n        if exc_type is None:\n            fail(self.message)\n        assert self.excinfo is not None\n        if not issubclass(exc_type, self.expected_exception):\n            return False\n        # Cast to narrow the exception type now that it's verified.\n        exc_info = cast(Tuple[Type[E], E, TracebackType], (exc_type, exc_val, exc_tb))\n        self.excinfo.fill_unfilled(exc_info)\n        if self.match_expr is not None:\n            self.excinfo.match(self.match_expr)\n        return True\n", "src/_pytest/setuponly.py": "from __future__ import annotations\n\nfrom typing import Generator\n\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.fixtures import FixtureDef\nfrom _pytest.fixtures import SubRequest\nfrom _pytest.scope import Scope\nimport pytest\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"debugconfig\")\n    group.addoption(\n        \"--setuponly\",\n        \"--setup-only\",\n        action=\"store_true\",\n        help=\"Only setup fixtures, do not execute tests\",\n    )\n    group.addoption(\n        \"--setupshow\",\n        \"--setup-show\",\n        action=\"store_true\",\n        help=\"Show setup of fixtures while executing tests\",\n    )\n\n\n@pytest.hookimpl(wrapper=True)\ndef pytest_fixture_setup(\n    fixturedef: FixtureDef[object], request: SubRequest\n) -> Generator[None, object, object]:\n    try:\n        return (yield)\n    finally:\n        if request.config.option.setupshow:\n            if hasattr(request, \"param\"):\n                # Save the fixture parameter so ._show_fixture_action() can\n                # display it now and during the teardown (in .finish()).\n                if fixturedef.ids:\n                    if callable(fixturedef.ids):\n                        param = fixturedef.ids(request.param)\n                    else:\n                        param = fixturedef.ids[request.param_index]\n                else:\n                    param = request.param\n                fixturedef.cached_param = param  # type: ignore[attr-defined]\n            _show_fixture_action(fixturedef, request.config, \"SETUP\")\n\n\ndef pytest_fixture_post_finalizer(\n    fixturedef: FixtureDef[object], request: SubRequest\n) -> None:\n    if fixturedef.cached_result is not None:\n        config = request.config\n        if config.option.setupshow:\n            _show_fixture_action(fixturedef, request.config, \"TEARDOWN\")\n            if hasattr(fixturedef, \"cached_param\"):\n                del fixturedef.cached_param\n\n\ndef _show_fixture_action(\n    fixturedef: FixtureDef[object], config: Config, msg: str\n) -> None:\n    capman = config.pluginmanager.getplugin(\"capturemanager\")\n    if capman:\n        capman.suspend_global_capture()\n\n    tw = config.get_terminal_writer()\n    tw.line()\n    # Use smaller indentation the higher the scope: Session = 0, Package = 1, etc.\n    scope_indent = list(reversed(Scope)).index(fixturedef._scope)\n    tw.write(\" \" * 2 * scope_indent)\n    tw.write(\n        \"{step} {scope} {fixture}\".format(  # noqa: UP032 (Readability)\n            step=msg.ljust(8),  # align the output to TEARDOWN\n            scope=fixturedef.scope[0].upper(),\n            fixture=fixturedef.argname,\n        )\n    )\n\n    if msg == \"SETUP\":\n        deps = sorted(arg for arg in fixturedef.argnames if arg != \"request\")\n        if deps:\n            tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n\n    if hasattr(fixturedef, \"cached_param\"):\n        tw.write(f\"[{saferepr(fixturedef.cached_param, maxsize=42)}]\")\n\n    tw.flush()\n\n    if capman:\n        capman.resume_global_capture()\n\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_cmdline_main(config: Config) -> int | ExitCode | None:\n    if config.option.setuponly:\n        config.option.setupshow = True\n    return None\n", "src/_pytest/capture.py": "# mypy: allow-untyped-defs\n\"\"\"Per-test stdout/stderr capturing mechanism.\"\"\"\n\nfrom __future__ import annotations\n\nimport abc\nimport collections\nimport contextlib\nimport io\nfrom io import UnsupportedOperation\nimport os\nimport sys\nfrom tempfile import TemporaryFile\nfrom types import TracebackType\nfrom typing import Any\nfrom typing import AnyStr\nfrom typing import BinaryIO\nfrom typing import Final\nfrom typing import final\nfrom typing import Generator\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Literal\nfrom typing import NamedTuple\nfrom typing import TextIO\nfrom typing import TYPE_CHECKING\n\n\nif TYPE_CHECKING:\n    from typing_extensions import Self\n\nfrom _pytest.config import Config\nfrom _pytest.config import hookimpl\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import SubRequest\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.reports import CollectReport\n\n\n_CaptureMethod = Literal[\"fd\", \"sys\", \"no\", \"tee-sys\"]\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group._addoption(\n        \"--capture\",\n        action=\"store\",\n        default=\"fd\",\n        metavar=\"method\",\n        choices=[\"fd\", \"sys\", \"no\", \"tee-sys\"],\n        help=\"Per-test capturing method: one of fd|sys|no|tee-sys\",\n    )\n    group._addoption(\n        \"-s\",\n        action=\"store_const\",\n        const=\"no\",\n        dest=\"capture\",\n        help=\"Shortcut for --capture=no\",\n    )\n\n\ndef _colorama_workaround() -> None:\n    \"\"\"Ensure colorama is imported so that it attaches to the correct stdio\n    handles on Windows.\n\n    colorama uses the terminal on import time. So if something does the\n    first import of colorama while I/O capture is active, colorama will\n    fail in various ways.\n    \"\"\"\n    if sys.platform.startswith(\"win32\"):\n        try:\n            import colorama  # noqa: F401\n        except ImportError:\n            pass\n\n\ndef _windowsconsoleio_workaround(stream: TextIO) -> None:\n    \"\"\"Workaround for Windows Unicode console handling.\n\n    Python 3.6 implemented Unicode console handling for Windows. This works\n    by reading/writing to the raw console handle using\n    ``{Read,Write}ConsoleW``.\n\n    The problem is that we are going to ``dup2`` over the stdio file\n    descriptors when doing ``FDCapture`` and this will ``CloseHandle`` the\n    handles used by Python to write to the console. Though there is still some\n    weirdness and the console handle seems to only be closed randomly and not\n    on the first call to ``CloseHandle``, or maybe it gets reopened with the\n    same handle value when we suspend capturing.\n\n    The workaround in this case will reopen stdio with a different fd which\n    also means a different handle by replicating the logic in\n    \"Py_lifecycle.c:initstdio/create_stdio\".\n\n    :param stream:\n        In practice ``sys.stdout`` or ``sys.stderr``, but given\n        here as parameter for unittesting purposes.\n\n    See https://github.com/pytest-dev/py/issues/103.\n    \"\"\"\n    if not sys.platform.startswith(\"win32\") or hasattr(sys, \"pypy_version_info\"):\n        return\n\n    # Bail out if ``stream`` doesn't seem like a proper ``io`` stream (#2666).\n    if not hasattr(stream, \"buffer\"):  # type: ignore[unreachable,unused-ignore]\n        return\n\n    raw_stdout = stream.buffer.raw if hasattr(stream.buffer, \"raw\") else stream.buffer\n\n    if not isinstance(raw_stdout, io._WindowsConsoleIO):  # type: ignore[attr-defined,unused-ignore]\n        return\n\n    def _reopen_stdio(f, mode):\n        if not hasattr(stream.buffer, \"raw\") and mode[0] == \"w\":\n            buffering = 0\n        else:\n            buffering = -1\n\n        return io.TextIOWrapper(\n            open(os.dup(f.fileno()), mode, buffering),\n            f.encoding,\n            f.errors,\n            f.newlines,\n            f.line_buffering,\n        )\n\n    sys.stdin = _reopen_stdio(sys.stdin, \"rb\")\n    sys.stdout = _reopen_stdio(sys.stdout, \"wb\")\n    sys.stderr = _reopen_stdio(sys.stderr, \"wb\")\n\n\n@hookimpl(wrapper=True)\ndef pytest_load_initial_conftests(early_config: Config) -> Generator[None, None, None]:\n    ns = early_config.known_args_namespace\n    if ns.capture == \"fd\":\n        _windowsconsoleio_workaround(sys.stdout)\n    _colorama_workaround()\n    pluginmanager = early_config.pluginmanager\n    capman = CaptureManager(ns.capture)\n    pluginmanager.register(capman, \"capturemanager\")\n\n    # Make sure that capturemanager is properly reset at final shutdown.\n    early_config.add_cleanup(capman.stop_global_capturing)\n\n    # Finally trigger conftest loading but while capturing (issue #93).\n    capman.start_global_capturing()\n    try:\n        try:\n            yield\n        finally:\n            capman.suspend_global_capture()\n    except BaseException:\n        out, err = capman.read_global_capture()\n        sys.stdout.write(out)\n        sys.stderr.write(err)\n        raise\n\n\n# IO Helpers.\n\n\nclass EncodedFile(io.TextIOWrapper):\n    __slots__ = ()\n\n    @property\n    def name(self) -> str:\n        # Ensure that file.name is a string. Workaround for a Python bug\n        # fixed in >=3.7.4: https://bugs.python.org/issue36015\n        return repr(self.buffer)\n\n    @property\n    def mode(self) -> str:\n        # TextIOWrapper doesn't expose a mode, but at least some of our\n        # tests check it.\n        return self.buffer.mode.replace(\"b\", \"\")\n\n\nclass CaptureIO(io.TextIOWrapper):\n    def __init__(self) -> None:\n        super().__init__(io.BytesIO(), encoding=\"UTF-8\", newline=\"\", write_through=True)\n\n    def getvalue(self) -> str:\n        assert isinstance(self.buffer, io.BytesIO)\n        return self.buffer.getvalue().decode(\"UTF-8\")\n\n\nclass TeeCaptureIO(CaptureIO):\n    def __init__(self, other: TextIO) -> None:\n        self._other = other\n        super().__init__()\n\n    def write(self, s: str) -> int:\n        super().write(s)\n        return self._other.write(s)\n\n\nclass DontReadFromInput(TextIO):\n    @property\n    def encoding(self) -> str:\n        return sys.__stdin__.encoding\n\n    def read(self, size: int = -1) -> str:\n        raise OSError(\n            \"pytest: reading from stdin while output is captured!  Consider using `-s`.\"\n        )\n\n    readline = read\n\n    def __next__(self) -> str:\n        return self.readline()\n\n    def readlines(self, hint: int | None = -1) -> list[str]:\n        raise OSError(\n            \"pytest: reading from stdin while output is captured!  Consider using `-s`.\"\n        )\n\n    def __iter__(self) -> Iterator[str]:\n        return self\n\n    def fileno(self) -> int:\n        raise UnsupportedOperation(\"redirected stdin is pseudofile, has no fileno()\")\n\n    def flush(self) -> None:\n        raise UnsupportedOperation(\"redirected stdin is pseudofile, has no flush()\")\n\n    def isatty(self) -> bool:\n        return False\n\n    def close(self) -> None:\n        pass\n\n    def readable(self) -> bool:\n        return False\n\n    def seek(self, offset: int, whence: int = 0) -> int:\n        raise UnsupportedOperation(\"redirected stdin is pseudofile, has no seek(int)\")\n\n    def seekable(self) -> bool:\n        return False\n\n    def tell(self) -> int:\n        raise UnsupportedOperation(\"redirected stdin is pseudofile, has no tell()\")\n\n    def truncate(self, size: int | None = None) -> int:\n        raise UnsupportedOperation(\"cannot truncate stdin\")\n\n    def write(self, data: str) -> int:\n        raise UnsupportedOperation(\"cannot write to stdin\")\n\n    def writelines(self, lines: Iterable[str]) -> None:\n        raise UnsupportedOperation(\"Cannot write to stdin\")\n\n    def writable(self) -> bool:\n        return False\n\n    def __enter__(self) -> Self:\n        return self\n\n    def __exit__(\n        self,\n        type: type[BaseException] | None,\n        value: BaseException | None,\n        traceback: TracebackType | None,\n    ) -> None:\n        pass\n\n    @property\n    def buffer(self) -> BinaryIO:\n        # The str/bytes doesn't actually matter in this type, so OK to fake.\n        return self  # type: ignore[return-value]\n\n\n# Capture classes.\n\n\nclass CaptureBase(abc.ABC, Generic[AnyStr]):\n    EMPTY_BUFFER: AnyStr\n\n    @abc.abstractmethod\n    def __init__(self, fd: int) -> None:\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    def start(self) -> None:\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    def done(self) -> None:\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    def suspend(self) -> None:\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    def resume(self) -> None:\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    def writeorg(self, data: AnyStr) -> None:\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    def snap(self) -> AnyStr:\n        raise NotImplementedError()\n\n\npatchsysdict = {0: \"stdin\", 1: \"stdout\", 2: \"stderr\"}\n\n\nclass NoCapture(CaptureBase[str]):\n    EMPTY_BUFFER = \"\"\n\n    def __init__(self, fd: int) -> None:\n        pass\n\n    def start(self) -> None:\n        pass\n\n    def done(self) -> None:\n        pass\n\n    def suspend(self) -> None:\n        pass\n\n    def resume(self) -> None:\n        pass\n\n    def snap(self) -> str:\n        return \"\"\n\n    def writeorg(self, data: str) -> None:\n        pass\n\n\nclass SysCaptureBase(CaptureBase[AnyStr]):\n    def __init__(\n        self, fd: int, tmpfile: TextIO | None = None, *, tee: bool = False\n    ) -> None:\n        name = patchsysdict[fd]\n        self._old: TextIO = getattr(sys, name)\n        self.name = name\n        if tmpfile is None:\n            if name == \"stdin\":\n                tmpfile = DontReadFromInput()\n            else:\n                tmpfile = CaptureIO() if not tee else TeeCaptureIO(self._old)\n        self.tmpfile = tmpfile\n        self._state = \"initialized\"\n\n    def repr(self, class_name: str) -> str:\n        return \"<{} {} _old={} _state={!r} tmpfile={!r}>\".format(\n            class_name,\n            self.name,\n            hasattr(self, \"_old\") and repr(self._old) or \"<UNSET>\",\n            self._state,\n            self.tmpfile,\n        )\n\n    def __repr__(self) -> str:\n        return \"<{} {} _old={} _state={!r} tmpfile={!r}>\".format(\n            self.__class__.__name__,\n            self.name,\n            hasattr(self, \"_old\") and repr(self._old) or \"<UNSET>\",\n            self._state,\n            self.tmpfile,\n        )\n\n    def _assert_state(self, op: str, states: tuple[str, ...]) -> None:\n        assert (\n            self._state in states\n        ), \"cannot {} in state {!r}: expected one of {}\".format(\n            op, self._state, \", \".join(states)\n        )\n\n    def start(self) -> None:\n        self._assert_state(\"start\", (\"initialized\",))\n        setattr(sys, self.name, self.tmpfile)\n        self._state = \"started\"\n\n    def done(self) -> None:\n        self._assert_state(\"done\", (\"initialized\", \"started\", \"suspended\", \"done\"))\n        if self._state == \"done\":\n            return\n        setattr(sys, self.name, self._old)\n        del self._old\n        self.tmpfile.close()\n        self._state = \"done\"\n\n    def suspend(self) -> None:\n        self._assert_state(\"suspend\", (\"started\", \"suspended\"))\n        setattr(sys, self.name, self._old)\n        self._state = \"suspended\"\n\n    def resume(self) -> None:\n        self._assert_state(\"resume\", (\"started\", \"suspended\"))\n        if self._state == \"started\":\n            return\n        setattr(sys, self.name, self.tmpfile)\n        self._state = \"started\"\n\n\nclass SysCaptureBinary(SysCaptureBase[bytes]):\n    EMPTY_BUFFER = b\"\"\n\n    def snap(self) -> bytes:\n        self._assert_state(\"snap\", (\"started\", \"suspended\"))\n        self.tmpfile.seek(0)\n        res = self.tmpfile.buffer.read()\n        self.tmpfile.seek(0)\n        self.tmpfile.truncate()\n        return res\n\n    def writeorg(self, data: bytes) -> None:\n        self._assert_state(\"writeorg\", (\"started\", \"suspended\"))\n        self._old.flush()\n        self._old.buffer.write(data)\n        self._old.buffer.flush()\n\n\nclass SysCapture(SysCaptureBase[str]):\n    EMPTY_BUFFER = \"\"\n\n    def snap(self) -> str:\n        self._assert_state(\"snap\", (\"started\", \"suspended\"))\n        assert isinstance(self.tmpfile, CaptureIO)\n        res = self.tmpfile.getvalue()\n        self.tmpfile.seek(0)\n        self.tmpfile.truncate()\n        return res\n\n    def writeorg(self, data: str) -> None:\n        self._assert_state(\"writeorg\", (\"started\", \"suspended\"))\n        self._old.write(data)\n        self._old.flush()\n\n\nclass FDCaptureBase(CaptureBase[AnyStr]):\n    def __init__(self, targetfd: int) -> None:\n        self.targetfd = targetfd\n\n        try:\n            os.fstat(targetfd)\n        except OSError:\n            # FD capturing is conceptually simple -- create a temporary file,\n            # redirect the FD to it, redirect back when done. But when the\n            # target FD is invalid it throws a wrench into this lovely scheme.\n            #\n            # Tests themselves shouldn't care if the FD is valid, FD capturing\n            # should work regardless of external circumstances. So falling back\n            # to just sys capturing is not a good option.\n            #\n            # Further complications are the need to support suspend() and the\n            # possibility of FD reuse (e.g. the tmpfile getting the very same\n            # target FD). The following approach is robust, I believe.\n            self.targetfd_invalid: int | None = os.open(os.devnull, os.O_RDWR)\n            os.dup2(self.targetfd_invalid, targetfd)\n        else:\n            self.targetfd_invalid = None\n        self.targetfd_save = os.dup(targetfd)\n\n        if targetfd == 0:\n            self.tmpfile = open(os.devnull, encoding=\"utf-8\")\n            self.syscapture: CaptureBase[str] = SysCapture(targetfd)\n        else:\n            self.tmpfile = EncodedFile(\n                TemporaryFile(buffering=0),\n                encoding=\"utf-8\",\n                errors=\"replace\",\n                newline=\"\",\n                write_through=True,\n            )\n            if targetfd in patchsysdict:\n                self.syscapture = SysCapture(targetfd, self.tmpfile)\n            else:\n                self.syscapture = NoCapture(targetfd)\n\n        self._state = \"initialized\"\n\n    def __repr__(self) -> str:\n        return (\n            f\"<{self.__class__.__name__} {self.targetfd} oldfd={self.targetfd_save} \"\n            f\"_state={self._state!r} tmpfile={self.tmpfile!r}>\"\n        )\n\n    def _assert_state(self, op: str, states: tuple[str, ...]) -> None:\n        assert (\n            self._state in states\n        ), \"cannot {} in state {!r}: expected one of {}\".format(\n            op, self._state, \", \".join(states)\n        )\n\n    def start(self) -> None:\n        \"\"\"Start capturing on targetfd using memorized tmpfile.\"\"\"\n        self._assert_state(\"start\", (\"initialized\",))\n        os.dup2(self.tmpfile.fileno(), self.targetfd)\n        self.syscapture.start()\n        self._state = \"started\"\n\n    def done(self) -> None:\n        \"\"\"Stop capturing, restore streams, return original capture file,\n        seeked to position zero.\"\"\"\n        self._assert_state(\"done\", (\"initialized\", \"started\", \"suspended\", \"done\"))\n        if self._state == \"done\":\n            return\n        os.dup2(self.targetfd_save, self.targetfd)\n        os.close(self.targetfd_save)\n        if self.targetfd_invalid is not None:\n            if self.targetfd_invalid != self.targetfd:\n                os.close(self.targetfd)\n            os.close(self.targetfd_invalid)\n        self.syscapture.done()\n        self.tmpfile.close()\n        self._state = \"done\"\n\n    def suspend(self) -> None:\n        self._assert_state(\"suspend\", (\"started\", \"suspended\"))\n        if self._state == \"suspended\":\n            return\n        self.syscapture.suspend()\n        os.dup2(self.targetfd_save, self.targetfd)\n        self._state = \"suspended\"\n\n    def resume(self) -> None:\n        self._assert_state(\"resume\", (\"started\", \"suspended\"))\n        if self._state == \"started\":\n            return\n        self.syscapture.resume()\n        os.dup2(self.tmpfile.fileno(), self.targetfd)\n        self._state = \"started\"\n\n\nclass FDCaptureBinary(FDCaptureBase[bytes]):\n    \"\"\"Capture IO to/from a given OS-level file descriptor.\n\n    snap() produces `bytes`.\n    \"\"\"\n\n    EMPTY_BUFFER = b\"\"\n\n    def snap(self) -> bytes:\n        self._assert_state(\"snap\", (\"started\", \"suspended\"))\n        self.tmpfile.seek(0)\n        res = self.tmpfile.buffer.read()\n        self.tmpfile.seek(0)\n        self.tmpfile.truncate()\n        return res\n\n    def writeorg(self, data: bytes) -> None:\n        \"\"\"Write to original file descriptor.\"\"\"\n        self._assert_state(\"writeorg\", (\"started\", \"suspended\"))\n        os.write(self.targetfd_save, data)\n\n\nclass FDCapture(FDCaptureBase[str]):\n    \"\"\"Capture IO to/from a given OS-level file descriptor.\n\n    snap() produces text.\n    \"\"\"\n\n    EMPTY_BUFFER = \"\"\n\n    def snap(self) -> str:\n        self._assert_state(\"snap\", (\"started\", \"suspended\"))\n        self.tmpfile.seek(0)\n        res = self.tmpfile.read()\n        self.tmpfile.seek(0)\n        self.tmpfile.truncate()\n        return res\n\n    def writeorg(self, data: str) -> None:\n        \"\"\"Write to original file descriptor.\"\"\"\n        self._assert_state(\"writeorg\", (\"started\", \"suspended\"))\n        # XXX use encoding of original stream\n        os.write(self.targetfd_save, data.encode(\"utf-8\"))\n\n\n# MultiCapture\n\n\n# Generic NamedTuple only supported since Python 3.11.\nif sys.version_info >= (3, 11) or TYPE_CHECKING:\n\n    @final\n    class CaptureResult(NamedTuple, Generic[AnyStr]):\n        \"\"\"The result of :method:`caplog.readouterr() <pytest.CaptureFixture.readouterr>`.\"\"\"\n\n        out: AnyStr\n        err: AnyStr\n\nelse:\n\n    class CaptureResult(\n        collections.namedtuple(\"CaptureResult\", [\"out\", \"err\"]),  # noqa: PYI024\n        Generic[AnyStr],\n    ):\n        \"\"\"The result of :method:`caplog.readouterr() <pytest.CaptureFixture.readouterr>`.\"\"\"\n\n        __slots__ = ()\n\n\nclass MultiCapture(Generic[AnyStr]):\n    _state = None\n    _in_suspended = False\n\n    def __init__(\n        self,\n        in_: CaptureBase[AnyStr] | None,\n        out: CaptureBase[AnyStr] | None,\n        err: CaptureBase[AnyStr] | None,\n    ) -> None:\n        self.in_: CaptureBase[AnyStr] | None = in_\n        self.out: CaptureBase[AnyStr] | None = out\n        self.err: CaptureBase[AnyStr] | None = err\n\n    def __repr__(self) -> str:\n        return (\n            f\"<MultiCapture out={self.out!r} err={self.err!r} in_={self.in_!r} \"\n            f\"_state={self._state!r} _in_suspended={self._in_suspended!r}>\"\n        )\n\n    def start_capturing(self) -> None:\n        self._state = \"started\"\n        if self.in_:\n            self.in_.start()\n        if self.out:\n            self.out.start()\n        if self.err:\n            self.err.start()\n\n    def pop_outerr_to_orig(self) -> tuple[AnyStr, AnyStr]:\n        \"\"\"Pop current snapshot out/err capture and flush to orig streams.\"\"\"\n        out, err = self.readouterr()\n        if out:\n            assert self.out is not None\n            self.out.writeorg(out)\n        if err:\n            assert self.err is not None\n            self.err.writeorg(err)\n        return out, err\n\n    def suspend_capturing(self, in_: bool = False) -> None:\n        self._state = \"suspended\"\n        if self.out:\n            self.out.suspend()\n        if self.err:\n            self.err.suspend()\n        if in_ and self.in_:\n            self.in_.suspend()\n            self._in_suspended = True\n\n    def resume_capturing(self) -> None:\n        self._state = \"started\"\n        if self.out:\n            self.out.resume()\n        if self.err:\n            self.err.resume()\n        if self._in_suspended:\n            assert self.in_ is not None\n            self.in_.resume()\n            self._in_suspended = False\n\n    def stop_capturing(self) -> None:\n        \"\"\"Stop capturing and reset capturing streams.\"\"\"\n        if self._state == \"stopped\":\n            raise ValueError(\"was already stopped\")\n        self._state = \"stopped\"\n        if self.out:\n            self.out.done()\n        if self.err:\n            self.err.done()\n        if self.in_:\n            self.in_.done()\n\n    def is_started(self) -> bool:\n        \"\"\"Whether actively capturing -- not suspended or stopped.\"\"\"\n        return self._state == \"started\"\n\n    def readouterr(self) -> CaptureResult[AnyStr]:\n        out = self.out.snap() if self.out else \"\"\n        err = self.err.snap() if self.err else \"\"\n        # TODO: This type error is real, need to fix.\n        return CaptureResult(out, err)  # type: ignore[arg-type]\n\n\ndef _get_multicapture(method: _CaptureMethod) -> MultiCapture[str]:\n    if method == \"fd\":\n        return MultiCapture(in_=FDCapture(0), out=FDCapture(1), err=FDCapture(2))\n    elif method == \"sys\":\n        return MultiCapture(in_=SysCapture(0), out=SysCapture(1), err=SysCapture(2))\n    elif method == \"no\":\n        return MultiCapture(in_=None, out=None, err=None)\n    elif method == \"tee-sys\":\n        return MultiCapture(\n            in_=None, out=SysCapture(1, tee=True), err=SysCapture(2, tee=True)\n        )\n    raise ValueError(f\"unknown capturing method: {method!r}\")\n\n\n# CaptureManager and CaptureFixture\n\n\nclass CaptureManager:\n    \"\"\"The capture plugin.\n\n    Manages that the appropriate capture method is enabled/disabled during\n    collection and each test phase (setup, call, teardown). After each of\n    those points, the captured output is obtained and attached to the\n    collection/runtest report.\n\n    There are two levels of capture:\n\n    * global: enabled by default and can be suppressed by the ``-s``\n      option. This is always enabled/disabled during collection and each test\n      phase.\n\n    * fixture: when a test function or one of its fixture depend on the\n      ``capsys`` or ``capfd`` fixtures. In this case special handling is\n      needed to ensure the fixtures take precedence over the global capture.\n    \"\"\"\n\n    def __init__(self, method: _CaptureMethod) -> None:\n        self._method: Final = method\n        self._global_capturing: MultiCapture[str] | None = None\n        self._capture_fixture: CaptureFixture[Any] | None = None\n\n    def __repr__(self) -> str:\n        return (\n            f\"<CaptureManager _method={self._method!r} _global_capturing={self._global_capturing!r} \"\n            f\"_capture_fixture={self._capture_fixture!r}>\"\n        )\n\n    def is_capturing(self) -> str | bool:\n        if self.is_globally_capturing():\n            return \"global\"\n        if self._capture_fixture:\n            return f\"fixture {self._capture_fixture.request.fixturename}\"\n        return False\n\n    # Global capturing control\n\n    def is_globally_capturing(self) -> bool:\n        return self._method != \"no\"\n\n    def start_global_capturing(self) -> None:\n        assert self._global_capturing is None\n        self._global_capturing = _get_multicapture(self._method)\n        self._global_capturing.start_capturing()\n\n    def stop_global_capturing(self) -> None:\n        if self._global_capturing is not None:\n            self._global_capturing.pop_outerr_to_orig()\n            self._global_capturing.stop_capturing()\n            self._global_capturing = None\n\n    def resume_global_capture(self) -> None:\n        # During teardown of the python process, and on rare occasions, capture\n        # attributes can be `None` while trying to resume global capture.\n        if self._global_capturing is not None:\n            self._global_capturing.resume_capturing()\n\n    def suspend_global_capture(self, in_: bool = False) -> None:\n        if self._global_capturing is not None:\n            self._global_capturing.suspend_capturing(in_=in_)\n\n    def suspend(self, in_: bool = False) -> None:\n        # Need to undo local capsys-et-al if it exists before disabling global capture.\n        self.suspend_fixture()\n        self.suspend_global_capture(in_)\n\n    def resume(self) -> None:\n        self.resume_global_capture()\n        self.resume_fixture()\n\n    def read_global_capture(self) -> CaptureResult[str]:\n        assert self._global_capturing is not None\n        return self._global_capturing.readouterr()\n\n    # Fixture Control\n\n    def set_fixture(self, capture_fixture: CaptureFixture[Any]) -> None:\n        if self._capture_fixture:\n            current_fixture = self._capture_fixture.request.fixturename\n            requested_fixture = capture_fixture.request.fixturename\n            capture_fixture.request.raiseerror(\n                f\"cannot use {requested_fixture} and {current_fixture} at the same time\"\n            )\n        self._capture_fixture = capture_fixture\n\n    def unset_fixture(self) -> None:\n        self._capture_fixture = None\n\n    def activate_fixture(self) -> None:\n        \"\"\"If the current item is using ``capsys`` or ``capfd``, activate\n        them so they take precedence over the global capture.\"\"\"\n        if self._capture_fixture:\n            self._capture_fixture._start()\n\n    def deactivate_fixture(self) -> None:\n        \"\"\"Deactivate the ``capsys`` or ``capfd`` fixture of this item, if any.\"\"\"\n        if self._capture_fixture:\n            self._capture_fixture.close()\n\n    def suspend_fixture(self) -> None:\n        if self._capture_fixture:\n            self._capture_fixture._suspend()\n\n    def resume_fixture(self) -> None:\n        if self._capture_fixture:\n            self._capture_fixture._resume()\n\n    # Helper context managers\n\n    @contextlib.contextmanager\n    def global_and_fixture_disabled(self) -> Generator[None, None, None]:\n        \"\"\"Context manager to temporarily disable global and current fixture capturing.\"\"\"\n        do_fixture = self._capture_fixture and self._capture_fixture._is_started()\n        if do_fixture:\n            self.suspend_fixture()\n        do_global = self._global_capturing and self._global_capturing.is_started()\n        if do_global:\n            self.suspend_global_capture()\n        try:\n            yield\n        finally:\n            if do_global:\n                self.resume_global_capture()\n            if do_fixture:\n                self.resume_fixture()\n\n    @contextlib.contextmanager\n    def item_capture(self, when: str, item: Item) -> Generator[None, None, None]:\n        self.resume_global_capture()\n        self.activate_fixture()\n        try:\n            yield\n        finally:\n            self.deactivate_fixture()\n            self.suspend_global_capture(in_=False)\n\n            out, err = self.read_global_capture()\n            item.add_report_section(when, \"stdout\", out)\n            item.add_report_section(when, \"stderr\", err)\n\n    # Hooks\n\n    @hookimpl(wrapper=True)\n    def pytest_make_collect_report(\n        self, collector: Collector\n    ) -> Generator[None, CollectReport, CollectReport]:\n        if isinstance(collector, File):\n            self.resume_global_capture()\n            try:\n                rep = yield\n            finally:\n                self.suspend_global_capture()\n            out, err = self.read_global_capture()\n            if out:\n                rep.sections.append((\"Captured stdout\", out))\n            if err:\n                rep.sections.append((\"Captured stderr\", err))\n        else:\n            rep = yield\n        return rep\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:\n        with self.item_capture(\"setup\", item):\n            return (yield)\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(self, item: Item) -> Generator[None, None, None]:\n        with self.item_capture(\"call\", item):\n            return (yield)\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_teardown(self, item: Item) -> Generator[None, None, None]:\n        with self.item_capture(\"teardown\", item):\n            return (yield)\n\n    @hookimpl(tryfirst=True)\n    def pytest_keyboard_interrupt(self) -> None:\n        self.stop_global_capturing()\n\n    @hookimpl(tryfirst=True)\n    def pytest_internalerror(self) -> None:\n        self.stop_global_capturing()\n\n\nclass CaptureFixture(Generic[AnyStr]):\n    \"\"\"Object returned by the :fixture:`capsys`, :fixture:`capsysbinary`,\n    :fixture:`capfd` and :fixture:`capfdbinary` fixtures.\"\"\"\n\n    def __init__(\n        self,\n        captureclass: type[CaptureBase[AnyStr]],\n        request: SubRequest,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        self.captureclass: type[CaptureBase[AnyStr]] = captureclass\n        self.request = request\n        self._capture: MultiCapture[AnyStr] | None = None\n        self._captured_out: AnyStr = self.captureclass.EMPTY_BUFFER\n        self._captured_err: AnyStr = self.captureclass.EMPTY_BUFFER\n\n    def _start(self) -> None:\n        if self._capture is None:\n            self._capture = MultiCapture(\n                in_=None,\n                out=self.captureclass(1),\n                err=self.captureclass(2),\n            )\n            self._capture.start_capturing()\n\n    def close(self) -> None:\n        if self._capture is not None:\n            out, err = self._capture.pop_outerr_to_orig()\n            self._captured_out += out\n            self._captured_err += err\n            self._capture.stop_capturing()\n            self._capture = None\n\n    def readouterr(self) -> CaptureResult[AnyStr]:\n        \"\"\"Read and return the captured output so far, resetting the internal\n        buffer.\n\n        :returns:\n            The captured content as a namedtuple with ``out`` and ``err``\n            string attributes.\n        \"\"\"\n        captured_out, captured_err = self._captured_out, self._captured_err\n        if self._capture is not None:\n            out, err = self._capture.readouterr()\n            captured_out += out\n            captured_err += err\n        self._captured_out = self.captureclass.EMPTY_BUFFER\n        self._captured_err = self.captureclass.EMPTY_BUFFER\n        return CaptureResult(captured_out, captured_err)\n\n    def _suspend(self) -> None:\n        \"\"\"Suspend this fixture's own capturing temporarily.\"\"\"\n        if self._capture is not None:\n            self._capture.suspend_capturing()\n\n    def _resume(self) -> None:\n        \"\"\"Resume this fixture's own capturing temporarily.\"\"\"\n        if self._capture is not None:\n            self._capture.resume_capturing()\n\n    def _is_started(self) -> bool:\n        \"\"\"Whether actively capturing -- not disabled or closed.\"\"\"\n        if self._capture is not None:\n            return self._capture.is_started()\n        return False\n\n    @contextlib.contextmanager\n    def disabled(self) -> Generator[None, None, None]:\n        \"\"\"Temporarily disable capturing while inside the ``with`` block.\"\"\"\n        capmanager: CaptureManager = self.request.config.pluginmanager.getplugin(\n            \"capturemanager\"\n        )\n        with capmanager.global_and_fixture_disabled():\n            yield\n\n\n# The fixtures.\n\n\n@fixture\ndef capsys(request: SubRequest) -> Generator[CaptureFixture[str], None, None]:\n    r\"\"\"Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``.\n\n    The captured output is made available via ``capsys.readouterr()`` method\n    calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``text`` objects.\n\n    Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_output(capsys):\n            print(\"hello\")\n            captured = capsys.readouterr()\n            assert captured.out == \"hello\\n\"\n    \"\"\"\n    capman: CaptureManager = request.config.pluginmanager.getplugin(\"capturemanager\")\n    capture_fixture = CaptureFixture(SysCapture, request, _ispytest=True)\n    capman.set_fixture(capture_fixture)\n    capture_fixture._start()\n    yield capture_fixture\n    capture_fixture.close()\n    capman.unset_fixture()\n\n\n@fixture\ndef capsysbinary(request: SubRequest) -> Generator[CaptureFixture[bytes], None, None]:\n    r\"\"\"Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``.\n\n    The captured output is made available via ``capsysbinary.readouterr()``\n    method calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``bytes`` objects.\n\n    Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_output(capsysbinary):\n            print(\"hello\")\n            captured = capsysbinary.readouterr()\n            assert captured.out == b\"hello\\n\"\n    \"\"\"\n    capman: CaptureManager = request.config.pluginmanager.getplugin(\"capturemanager\")\n    capture_fixture = CaptureFixture(SysCaptureBinary, request, _ispytest=True)\n    capman.set_fixture(capture_fixture)\n    capture_fixture._start()\n    yield capture_fixture\n    capture_fixture.close()\n    capman.unset_fixture()\n\n\n@fixture\ndef capfd(request: SubRequest) -> Generator[CaptureFixture[str], None, None]:\n    r\"\"\"Enable text capturing of writes to file descriptors ``1`` and ``2``.\n\n    The captured output is made available via ``capfd.readouterr()`` method\n    calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``text`` objects.\n\n    Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_system_echo(capfd):\n            os.system('echo \"hello\"')\n            captured = capfd.readouterr()\n            assert captured.out == \"hello\\n\"\n    \"\"\"\n    capman: CaptureManager = request.config.pluginmanager.getplugin(\"capturemanager\")\n    capture_fixture = CaptureFixture(FDCapture, request, _ispytest=True)\n    capman.set_fixture(capture_fixture)\n    capture_fixture._start()\n    yield capture_fixture\n    capture_fixture.close()\n    capman.unset_fixture()\n\n\n@fixture\ndef capfdbinary(request: SubRequest) -> Generator[CaptureFixture[bytes], None, None]:\n    r\"\"\"Enable bytes capturing of writes to file descriptors ``1`` and ``2``.\n\n    The captured output is made available via ``capfd.readouterr()`` method\n    calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``byte`` objects.\n\n    Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_system_echo(capfdbinary):\n            os.system('echo \"hello\"')\n            captured = capfdbinary.readouterr()\n            assert captured.out == b\"hello\\n\"\n\n    \"\"\"\n    capman: CaptureManager = request.config.pluginmanager.getplugin(\"capturemanager\")\n    capture_fixture = CaptureFixture(FDCaptureBinary, request, _ispytest=True)\n    capman.set_fixture(capture_fixture)\n    capture_fixture._start()\n    yield capture_fixture\n    capture_fixture.close()\n    capman.unset_fixture()\n", "src/_pytest/junitxml.py": "# mypy: allow-untyped-defs\n\"\"\"Report test results in JUnit-XML format, for use with Jenkins and build\nintegration servers.\n\nBased on initial code from Ross Lawley.\n\nOutput conforms to\nhttps://github.com/jenkinsci/xunit-plugin/blob/master/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom datetime import datetime\nimport functools\nimport os\nimport platform\nimport re\nfrom typing import Callable\nfrom typing import Match\nimport xml.etree.ElementTree as ET\n\nfrom _pytest import nodes\nfrom _pytest import timing\nfrom _pytest._code.code import ExceptionRepr\nfrom _pytest._code.code import ReprFileLocation\nfrom _pytest.config import Config\nfrom _pytest.config import filename_arg\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.reports import TestReport\nfrom _pytest.stash import StashKey\nfrom _pytest.terminal import TerminalReporter\nimport pytest\n\n\nxml_key = StashKey[\"LogXML\"]()\n\n\ndef bin_xml_escape(arg: object) -> str:\n    r\"\"\"Visually escape invalid XML characters.\n\n    For example, transforms\n        'hello\\aworld\\b'\n    into\n        'hello#x07world#x08'\n    Note that the #xABs are *not* XML escapes - missing the ampersand &#xAB.\n    The idea is to escape visually for the user rather than for XML itself.\n    \"\"\"\n\n    def repl(matchobj: Match[str]) -> str:\n        i = ord(matchobj.group())\n        if i <= 0xFF:\n            return f\"#x{i:02X}\"\n        else:\n            return f\"#x{i:04X}\"\n\n    # The spec range of valid chars is:\n    # Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n    # For an unknown(?) reason, we disallow #x7F (DEL) as well.\n    illegal_xml_re = (\n        \"[^\\u0009\\u000a\\u000d\\u0020-\\u007e\\u0080-\\ud7ff\\ue000-\\ufffd\\u10000-\\u10ffff]\"\n    )\n    return re.sub(illegal_xml_re, repl, str(arg))\n\n\ndef merge_family(left, right) -> None:\n    result = {}\n    for kl, vl in left.items():\n        for kr, vr in right.items():\n            if not isinstance(vl, list):\n                raise TypeError(type(vl))\n            result[kl] = vl + vr\n    left.update(result)\n\n\nfamilies = {}\nfamilies[\"_base\"] = {\"testcase\": [\"classname\", \"name\"]}\nfamilies[\"_base_legacy\"] = {\"testcase\": [\"file\", \"line\", \"url\"]}\n\n# xUnit 1.x inherits legacy attributes.\nfamilies[\"xunit1\"] = families[\"_base\"].copy()\nmerge_family(families[\"xunit1\"], families[\"_base_legacy\"])\n\n# xUnit 2.x uses strict base attributes.\nfamilies[\"xunit2\"] = families[\"_base\"]\n\n\nclass _NodeReporter:\n    def __init__(self, nodeid: str | TestReport, xml: LogXML) -> None:\n        self.id = nodeid\n        self.xml = xml\n        self.add_stats = self.xml.add_stats\n        self.family = self.xml.family\n        self.duration = 0.0\n        self.properties: list[tuple[str, str]] = []\n        self.nodes: list[ET.Element] = []\n        self.attrs: dict[str, str] = {}\n\n    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n    def add_property(self, name: str, value: object) -> None:\n        self.properties.append((str(name), bin_xml_escape(value)))\n\n    def add_attribute(self, name: str, value: object) -> None:\n        self.attrs[str(name)] = bin_xml_escape(value)\n\n    def make_properties_node(self) -> ET.Element | None:\n        \"\"\"Return a Junit node containing custom properties, if any.\"\"\"\n        if self.properties:\n            properties = ET.Element(\"properties\")\n            for name, value in self.properties:\n                properties.append(ET.Element(\"property\", name=name, value=value))\n            return properties\n        return None\n\n    def record_testreport(self, testreport: TestReport) -> None:\n        names = mangle_test_address(testreport.nodeid)\n        existing_attrs = self.attrs\n        classnames = names[:-1]\n        if self.xml.prefix:\n            classnames.insert(0, self.xml.prefix)\n        attrs: dict[str, str] = {\n            \"classname\": \".\".join(classnames),\n            \"name\": bin_xml_escape(names[-1]),\n            \"file\": testreport.location[0],\n        }\n        if testreport.location[1] is not None:\n            attrs[\"line\"] = str(testreport.location[1])\n        if hasattr(testreport, \"url\"):\n            attrs[\"url\"] = testreport.url\n        self.attrs = attrs\n        self.attrs.update(existing_attrs)  # Restore any user-defined attributes.\n\n        # Preserve legacy testcase behavior.\n        if self.family == \"xunit1\":\n            return\n\n        # Filter out attributes not permitted by this test family.\n        # Including custom attributes because they are not valid here.\n        temp_attrs = {}\n        for key in self.attrs:\n            if key in families[self.family][\"testcase\"]:\n                temp_attrs[key] = self.attrs[key]\n        self.attrs = temp_attrs\n\n    def to_xml(self) -> ET.Element:\n        testcase = ET.Element(\"testcase\", self.attrs, time=f\"{self.duration:.3f}\")\n        properties = self.make_properties_node()\n        if properties is not None:\n            testcase.append(properties)\n        testcase.extend(self.nodes)\n        return testcase\n\n    def _add_simple(self, tag: str, message: str, data: str | None = None) -> None:\n        node = ET.Element(tag, message=message)\n        node.text = bin_xml_escape(data)\n        self.append(node)\n\n    def write_captured_output(self, report: TestReport) -> None:\n        if not self.xml.log_passing_tests and report.passed:\n            return\n\n        content_out = report.capstdout\n        content_log = report.caplog\n        content_err = report.capstderr\n        if self.xml.logging == \"no\":\n            return\n        content_all = \"\"\n        if self.xml.logging in [\"log\", \"all\"]:\n            content_all = self._prepare_content(content_log, \" Captured Log \")\n        if self.xml.logging in [\"system-out\", \"out-err\", \"all\"]:\n            content_all += self._prepare_content(content_out, \" Captured Out \")\n            self._write_content(report, content_all, \"system-out\")\n            content_all = \"\"\n        if self.xml.logging in [\"system-err\", \"out-err\", \"all\"]:\n            content_all += self._prepare_content(content_err, \" Captured Err \")\n            self._write_content(report, content_all, \"system-err\")\n            content_all = \"\"\n        if content_all:\n            self._write_content(report, content_all, \"system-out\")\n\n    def _prepare_content(self, content: str, header: str) -> str:\n        return \"\\n\".join([header.center(80, \"-\"), content, \"\"])\n\n    def _write_content(self, report: TestReport, content: str, jheader: str) -> None:\n        tag = ET.Element(jheader)\n        tag.text = bin_xml_escape(content)\n        self.append(tag)\n\n    def append_pass(self, report: TestReport) -> None:\n        self.add_stats(\"passed\")\n\n    def append_failure(self, report: TestReport) -> None:\n        # msg = str(report.longrepr.reprtraceback.extraline)\n        if hasattr(report, \"wasxfail\"):\n            self._add_simple(\"skipped\", \"xfail-marked test passes unexpectedly\")\n        else:\n            assert report.longrepr is not None\n            reprcrash: ReprFileLocation | None = getattr(\n                report.longrepr, \"reprcrash\", None\n            )\n            if reprcrash is not None:\n                message = reprcrash.message\n            else:\n                message = str(report.longrepr)\n            message = bin_xml_escape(message)\n            self._add_simple(\"failure\", message, str(report.longrepr))\n\n    def append_collect_error(self, report: TestReport) -> None:\n        # msg = str(report.longrepr.reprtraceback.extraline)\n        assert report.longrepr is not None\n        self._add_simple(\"error\", \"collection failure\", str(report.longrepr))\n\n    def append_collect_skipped(self, report: TestReport) -> None:\n        self._add_simple(\"skipped\", \"collection skipped\", str(report.longrepr))\n\n    def append_error(self, report: TestReport) -> None:\n        assert report.longrepr is not None\n        reprcrash: ReprFileLocation | None = getattr(report.longrepr, \"reprcrash\", None)\n        if reprcrash is not None:\n            reason = reprcrash.message\n        else:\n            reason = str(report.longrepr)\n\n        if report.when == \"teardown\":\n            msg = f'failed on teardown with \"{reason}\"'\n        else:\n            msg = f'failed on setup with \"{reason}\"'\n        self._add_simple(\"error\", bin_xml_escape(msg), str(report.longrepr))\n\n    def append_skipped(self, report: TestReport) -> None:\n        if hasattr(report, \"wasxfail\"):\n            xfailreason = report.wasxfail\n            if xfailreason.startswith(\"reason: \"):\n                xfailreason = xfailreason[8:]\n            xfailreason = bin_xml_escape(xfailreason)\n            skipped = ET.Element(\"skipped\", type=\"pytest.xfail\", message=xfailreason)\n            self.append(skipped)\n        else:\n            assert isinstance(report.longrepr, tuple)\n            filename, lineno, skipreason = report.longrepr\n            if skipreason.startswith(\"Skipped: \"):\n                skipreason = skipreason[9:]\n            details = f\"{filename}:{lineno}: {skipreason}\"\n\n            skipped = ET.Element(\n                \"skipped\", type=\"pytest.skip\", message=bin_xml_escape(skipreason)\n            )\n            skipped.text = bin_xml_escape(details)\n            self.append(skipped)\n            self.write_captured_output(report)\n\n    def finalize(self) -> None:\n        data = self.to_xml()\n        self.__dict__.clear()\n        # Type ignored because mypy doesn't like overriding a method.\n        # Also the return value doesn't match...\n        self.to_xml = lambda: data  # type: ignore[method-assign]\n\n\ndef _warn_incompatibility_with_xunit2(\n    request: FixtureRequest, fixture_name: str\n) -> None:\n    \"\"\"Emit a PytestWarning about the given fixture being incompatible with newer xunit revisions.\"\"\"\n    from _pytest.warning_types import PytestWarning\n\n    xml = request.config.stash.get(xml_key, None)\n    if xml is not None and xml.family not in (\"xunit1\", \"legacy\"):\n        request.node.warn(\n            PytestWarning(\n                f\"{fixture_name} is incompatible with junit_family '{xml.family}' (use 'legacy' or 'xunit1')\"\n            )\n        )\n\n\n@pytest.fixture\ndef record_property(request: FixtureRequest) -> Callable[[str, object], None]:\n    \"\"\"Add extra properties to the calling test.\n\n    User properties become part of the test report and are available to the\n    configured reporters, like JUnit XML.\n\n    The fixture is callable with ``name, value``. The value is automatically\n    XML-encoded.\n\n    Example::\n\n        def test_function(record_property):\n            record_property(\"example_key\", 1)\n    \"\"\"\n    _warn_incompatibility_with_xunit2(request, \"record_property\")\n\n    def append_property(name: str, value: object) -> None:\n        request.node.user_properties.append((name, value))\n\n    return append_property\n\n\n@pytest.fixture\ndef record_xml_attribute(request: FixtureRequest) -> Callable[[str, object], None]:\n    \"\"\"Add extra xml attributes to the tag for the calling test.\n\n    The fixture is callable with ``name, value``. The value is\n    automatically XML-encoded.\n    \"\"\"\n    from _pytest.warning_types import PytestExperimentalApiWarning\n\n    request.node.warn(\n        PytestExperimentalApiWarning(\"record_xml_attribute is an experimental feature\")\n    )\n\n    _warn_incompatibility_with_xunit2(request, \"record_xml_attribute\")\n\n    # Declare noop\n    def add_attr_noop(name: str, value: object) -> None:\n        pass\n\n    attr_func = add_attr_noop\n\n    xml = request.config.stash.get(xml_key, None)\n    if xml is not None:\n        node_reporter = xml.node_reporter(request.node.nodeid)\n        attr_func = node_reporter.add_attribute\n\n    return attr_func\n\n\ndef _check_record_param_type(param: str, v: str) -> None:\n    \"\"\"Used by record_testsuite_property to check that the given parameter name is of the proper\n    type.\"\"\"\n    __tracebackhide__ = True\n    if not isinstance(v, str):\n        msg = \"{param} parameter needs to be a string, but {g} given\"  # type: ignore[unreachable]\n        raise TypeError(msg.format(param=param, g=type(v).__name__))\n\n\n@pytest.fixture(scope=\"session\")\ndef record_testsuite_property(request: FixtureRequest) -> Callable[[str, object], None]:\n    \"\"\"Record a new ``<property>`` tag as child of the root ``<testsuite>``.\n\n    This is suitable to writing global information regarding the entire test\n    suite, and is compatible with ``xunit2`` JUnit family.\n\n    This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:\n\n    .. code-block:: python\n\n        def test_foo(record_testsuite_property):\n            record_testsuite_property(\"ARCH\", \"PPC\")\n            record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\")\n\n    :param name:\n        The property name.\n    :param value:\n        The property value. Will be converted to a string.\n\n    .. warning::\n\n        Currently this fixture **does not work** with the\n        `pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__ plugin. See\n        :issue:`7767` for details.\n    \"\"\"\n    __tracebackhide__ = True\n\n    def record_func(name: str, value: object) -> None:\n        \"\"\"No-op function in case --junit-xml was not passed in the command-line.\"\"\"\n        __tracebackhide__ = True\n        _check_record_param_type(\"name\", name)\n\n    xml = request.config.stash.get(xml_key, None)\n    if xml is not None:\n        record_func = xml.add_global_property\n    return record_func\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"terminal reporting\")\n    group.addoption(\n        \"--junitxml\",\n        \"--junit-xml\",\n        action=\"store\",\n        dest=\"xmlpath\",\n        metavar=\"path\",\n        type=functools.partial(filename_arg, optname=\"--junitxml\"),\n        default=None,\n        help=\"Create junit-xml style report file at given path\",\n    )\n    group.addoption(\n        \"--junitprefix\",\n        \"--junit-prefix\",\n        action=\"store\",\n        metavar=\"str\",\n        default=None,\n        help=\"Prepend prefix to classnames in junit-xml output\",\n    )\n    parser.addini(\n        \"junit_suite_name\", \"Test suite name for JUnit report\", default=\"pytest\"\n    )\n    parser.addini(\n        \"junit_logging\",\n        \"Write captured log messages to JUnit report: \"\n        \"one of no|log|system-out|system-err|out-err|all\",\n        default=\"no\",\n    )\n    parser.addini(\n        \"junit_log_passing_tests\",\n        \"Capture log information for passing tests to JUnit report: \",\n        type=\"bool\",\n        default=True,\n    )\n    parser.addini(\n        \"junit_duration_report\",\n        \"Duration time to report: one of total|call\",\n        default=\"total\",\n    )  # choices=['total', 'call'])\n    parser.addini(\n        \"junit_family\",\n        \"Emit XML for schema: one of legacy|xunit1|xunit2\",\n        default=\"xunit2\",\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    xmlpath = config.option.xmlpath\n    # Prevent opening xmllog on worker nodes (xdist).\n    if xmlpath and not hasattr(config, \"workerinput\"):\n        junit_family = config.getini(\"junit_family\")\n        config.stash[xml_key] = LogXML(\n            xmlpath,\n            config.option.junitprefix,\n            config.getini(\"junit_suite_name\"),\n            config.getini(\"junit_logging\"),\n            config.getini(\"junit_duration_report\"),\n            junit_family,\n            config.getini(\"junit_log_passing_tests\"),\n        )\n        config.pluginmanager.register(config.stash[xml_key])\n\n\ndef pytest_unconfigure(config: Config) -> None:\n    xml = config.stash.get(xml_key, None)\n    if xml:\n        del config.stash[xml_key]\n        config.pluginmanager.unregister(xml)\n\n\ndef mangle_test_address(address: str) -> list[str]:\n    path, possible_open_bracket, params = address.partition(\"[\")\n    names = path.split(\"::\")\n    # Convert file path to dotted path.\n    names[0] = names[0].replace(nodes.SEP, \".\")\n    names[0] = re.sub(r\"\\.py$\", \"\", names[0])\n    # Put any params back.\n    names[-1] += possible_open_bracket + params\n    return names\n\n\nclass LogXML:\n    def __init__(\n        self,\n        logfile,\n        prefix: str | None,\n        suite_name: str = \"pytest\",\n        logging: str = \"no\",\n        report_duration: str = \"total\",\n        family=\"xunit1\",\n        log_passing_tests: bool = True,\n    ) -> None:\n        logfile = os.path.expanduser(os.path.expandvars(logfile))\n        self.logfile = os.path.normpath(os.path.abspath(logfile))\n        self.prefix = prefix\n        self.suite_name = suite_name\n        self.logging = logging\n        self.log_passing_tests = log_passing_tests\n        self.report_duration = report_duration\n        self.family = family\n        self.stats: dict[str, int] = dict.fromkeys(\n            [\"error\", \"passed\", \"failure\", \"skipped\"], 0\n        )\n        self.node_reporters: dict[tuple[str | TestReport, object], _NodeReporter] = {}\n        self.node_reporters_ordered: list[_NodeReporter] = []\n        self.global_properties: list[tuple[str, str]] = []\n\n        # List of reports that failed on call but teardown is pending.\n        self.open_reports: list[TestReport] = []\n        self.cnt_double_fail_tests = 0\n\n        # Replaces convenience family with real family.\n        if self.family == \"legacy\":\n            self.family = \"xunit1\"\n\n    def finalize(self, report: TestReport) -> None:\n        nodeid = getattr(report, \"nodeid\", report)\n        # Local hack to handle xdist report order.\n        workernode = getattr(report, \"node\", None)\n        reporter = self.node_reporters.pop((nodeid, workernode))\n\n        for propname, propvalue in report.user_properties:\n            reporter.add_property(propname, str(propvalue))\n\n        if reporter is not None:\n            reporter.finalize()\n\n    def node_reporter(self, report: TestReport | str) -> _NodeReporter:\n        nodeid: str | TestReport = getattr(report, \"nodeid\", report)\n        # Local hack to handle xdist report order.\n        workernode = getattr(report, \"node\", None)\n\n        key = nodeid, workernode\n\n        if key in self.node_reporters:\n            # TODO: breaks for --dist=each\n            return self.node_reporters[key]\n\n        reporter = _NodeReporter(nodeid, self)\n\n        self.node_reporters[key] = reporter\n        self.node_reporters_ordered.append(reporter)\n\n        return reporter\n\n    def add_stats(self, key: str) -> None:\n        if key in self.stats:\n            self.stats[key] += 1\n\n    def _opentestcase(self, report: TestReport) -> _NodeReporter:\n        reporter = self.node_reporter(report)\n        reporter.record_testreport(report)\n        return reporter\n\n    def pytest_runtest_logreport(self, report: TestReport) -> None:\n        \"\"\"Handle a setup/call/teardown report, generating the appropriate\n        XML tags as necessary.\n\n        Note: due to plugins like xdist, this hook may be called in interlaced\n        order with reports from other nodes. For example:\n\n        Usual call order:\n            -> setup node1\n            -> call node1\n            -> teardown node1\n            -> setup node2\n            -> call node2\n            -> teardown node2\n\n        Possible call order in xdist:\n            -> setup node1\n            -> call node1\n            -> setup node2\n            -> call node2\n            -> teardown node2\n            -> teardown node1\n        \"\"\"\n        close_report = None\n        if report.passed:\n            if report.when == \"call\":  # ignore setup/teardown\n                reporter = self._opentestcase(report)\n                reporter.append_pass(report)\n        elif report.failed:\n            if report.when == \"teardown\":\n                # The following vars are needed when xdist plugin is used.\n                report_wid = getattr(report, \"worker_id\", None)\n                report_ii = getattr(report, \"item_index\", None)\n                close_report = next(\n                    (\n                        rep\n                        for rep in self.open_reports\n                        if (\n                            rep.nodeid == report.nodeid\n                            and getattr(rep, \"item_index\", None) == report_ii\n                            and getattr(rep, \"worker_id\", None) == report_wid\n                        )\n                    ),\n                    None,\n                )\n                if close_report:\n                    # We need to open new testcase in case we have failure in\n                    # call and error in teardown in order to follow junit\n                    # schema.\n                    self.finalize(close_report)\n                    self.cnt_double_fail_tests += 1\n            reporter = self._opentestcase(report)\n            if report.when == \"call\":\n                reporter.append_failure(report)\n                self.open_reports.append(report)\n                if not self.log_passing_tests:\n                    reporter.write_captured_output(report)\n            else:\n                reporter.append_error(report)\n        elif report.skipped:\n            reporter = self._opentestcase(report)\n            reporter.append_skipped(report)\n        self.update_testcase_duration(report)\n        if report.when == \"teardown\":\n            reporter = self._opentestcase(report)\n            reporter.write_captured_output(report)\n\n            self.finalize(report)\n            report_wid = getattr(report, \"worker_id\", None)\n            report_ii = getattr(report, \"item_index\", None)\n            close_report = next(\n                (\n                    rep\n                    for rep in self.open_reports\n                    if (\n                        rep.nodeid == report.nodeid\n                        and getattr(rep, \"item_index\", None) == report_ii\n                        and getattr(rep, \"worker_id\", None) == report_wid\n                    )\n                ),\n                None,\n            )\n            if close_report:\n                self.open_reports.remove(close_report)\n\n    def update_testcase_duration(self, report: TestReport) -> None:\n        \"\"\"Accumulate total duration for nodeid from given report and update\n        the Junit.testcase with the new total if already created.\"\"\"\n        if self.report_duration in {\"total\", report.when}:\n            reporter = self.node_reporter(report)\n            reporter.duration += getattr(report, \"duration\", 0.0)\n\n    def pytest_collectreport(self, report: TestReport) -> None:\n        if not report.passed:\n            reporter = self._opentestcase(report)\n            if report.failed:\n                reporter.append_collect_error(report)\n            else:\n                reporter.append_collect_skipped(report)\n\n    def pytest_internalerror(self, excrepr: ExceptionRepr) -> None:\n        reporter = self.node_reporter(\"internal\")\n        reporter.attrs.update(classname=\"pytest\", name=\"internal\")\n        reporter._add_simple(\"error\", \"internal error\", str(excrepr))\n\n    def pytest_sessionstart(self) -> None:\n        self.suite_start_time = timing.time()\n\n    def pytest_sessionfinish(self) -> None:\n        dirname = os.path.dirname(os.path.abspath(self.logfile))\n        # exist_ok avoids filesystem race conditions between checking path existence and requesting creation\n        os.makedirs(dirname, exist_ok=True)\n\n        with open(self.logfile, \"w\", encoding=\"utf-8\") as logfile:\n            suite_stop_time = timing.time()\n            suite_time_delta = suite_stop_time - self.suite_start_time\n\n            numtests = (\n                self.stats[\"passed\"]\n                + self.stats[\"failure\"]\n                + self.stats[\"skipped\"]\n                + self.stats[\"error\"]\n                - self.cnt_double_fail_tests\n            )\n            logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n\n            suite_node = ET.Element(\n                \"testsuite\",\n                name=self.suite_name,\n                errors=str(self.stats[\"error\"]),\n                failures=str(self.stats[\"failure\"]),\n                skipped=str(self.stats[\"skipped\"]),\n                tests=str(numtests),\n                time=f\"{suite_time_delta:.3f}\",\n                timestamp=datetime.fromtimestamp(self.suite_start_time).isoformat(),\n                hostname=platform.node(),\n            )\n            global_properties = self._get_global_properties_node()\n            if global_properties is not None:\n                suite_node.append(global_properties)\n            for node_reporter in self.node_reporters_ordered:\n                suite_node.append(node_reporter.to_xml())\n            testsuites = ET.Element(\"testsuites\")\n            testsuites.append(suite_node)\n            logfile.write(ET.tostring(testsuites, encoding=\"unicode\"))\n\n    def pytest_terminal_summary(self, terminalreporter: TerminalReporter) -> None:\n        terminalreporter.write_sep(\"-\", f\"generated xml file: {self.logfile}\")\n\n    def add_global_property(self, name: str, value: object) -> None:\n        __tracebackhide__ = True\n        _check_record_param_type(\"name\", name)\n        self.global_properties.append((name, bin_xml_escape(value)))\n\n    def _get_global_properties_node(self) -> ET.Element | None:\n        \"\"\"Return a Junit node containing custom properties, if any.\"\"\"\n        if self.global_properties:\n            properties = ET.Element(\"properties\")\n            for name, value in self.global_properties:\n                properties.append(ET.Element(\"property\", name=name, value=value))\n            return properties\n        return None\n", "src/_pytest/debugging.py": "# mypy: allow-untyped-defs\n# ruff: noqa: T100\n\"\"\"Interactive debugging with PDB, the Python Debugger.\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport functools\nimport sys\nimport types\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Generator\nimport unittest\n\nfrom _pytest import outcomes\nfrom _pytest._code import ExceptionInfo\nfrom _pytest.capture import CaptureManager\nfrom _pytest.config import Config\nfrom _pytest.config import ConftestImportFailure\nfrom _pytest.config import hookimpl\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.config.exceptions import UsageError\nfrom _pytest.nodes import Node\nfrom _pytest.reports import BaseReport\nfrom _pytest.runner import CallInfo\n\n\ndef _validate_usepdb_cls(value: str) -> tuple[str, str]:\n    \"\"\"Validate syntax of --pdbcls option.\"\"\"\n    try:\n        modname, classname = value.split(\":\")\n    except ValueError as e:\n        raise argparse.ArgumentTypeError(\n            f\"{value!r} is not in the format 'modname:classname'\"\n        ) from e\n    return (modname, classname)\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group._addoption(\n        \"--pdb\",\n        dest=\"usepdb\",\n        action=\"store_true\",\n        help=\"Start the interactive Python debugger on errors or KeyboardInterrupt\",\n    )\n    group._addoption(\n        \"--pdbcls\",\n        dest=\"usepdb_cls\",\n        metavar=\"modulename:classname\",\n        type=_validate_usepdb_cls,\n        help=\"Specify a custom interactive Python debugger for use with --pdb.\"\n        \"For example: --pdbcls=IPython.terminal.debugger:TerminalPdb\",\n    )\n    group._addoption(\n        \"--trace\",\n        dest=\"trace\",\n        action=\"store_true\",\n        help=\"Immediately break when running each test\",\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    import pdb\n\n    if config.getvalue(\"trace\"):\n        config.pluginmanager.register(PdbTrace(), \"pdbtrace\")\n    if config.getvalue(\"usepdb\"):\n        config.pluginmanager.register(PdbInvoke(), \"pdbinvoke\")\n\n    pytestPDB._saved.append(\n        (pdb.set_trace, pytestPDB._pluginmanager, pytestPDB._config)\n    )\n    pdb.set_trace = pytestPDB.set_trace\n    pytestPDB._pluginmanager = config.pluginmanager\n    pytestPDB._config = config\n\n    # NOTE: not using pytest_unconfigure, since it might get called although\n    #       pytest_configure was not (if another plugin raises UsageError).\n    def fin() -> None:\n        (\n            pdb.set_trace,\n            pytestPDB._pluginmanager,\n            pytestPDB._config,\n        ) = pytestPDB._saved.pop()\n\n    config.add_cleanup(fin)\n\n\nclass pytestPDB:\n    \"\"\"Pseudo PDB that defers to the real pdb.\"\"\"\n\n    _pluginmanager: PytestPluginManager | None = None\n    _config: Config | None = None\n    _saved: list[\n        tuple[Callable[..., None], PytestPluginManager | None, Config | None]\n    ] = []\n    _recursive_debug = 0\n    _wrapped_pdb_cls: tuple[type[Any], type[Any]] | None = None\n\n    @classmethod\n    def _is_capturing(cls, capman: CaptureManager | None) -> str | bool:\n        if capman:\n            return capman.is_capturing()\n        return False\n\n    @classmethod\n    def _import_pdb_cls(cls, capman: CaptureManager | None):\n        if not cls._config:\n            import pdb\n\n            # Happens when using pytest.set_trace outside of a test.\n            return pdb.Pdb\n\n        usepdb_cls = cls._config.getvalue(\"usepdb_cls\")\n\n        if cls._wrapped_pdb_cls and cls._wrapped_pdb_cls[0] == usepdb_cls:\n            return cls._wrapped_pdb_cls[1]\n\n        if usepdb_cls:\n            modname, classname = usepdb_cls\n\n            try:\n                __import__(modname)\n                mod = sys.modules[modname]\n\n                # Handle --pdbcls=pdb:pdb.Pdb (useful e.g. with pdbpp).\n                parts = classname.split(\".\")\n                pdb_cls = getattr(mod, parts[0])\n                for part in parts[1:]:\n                    pdb_cls = getattr(pdb_cls, part)\n            except Exception as exc:\n                value = \":\".join((modname, classname))\n                raise UsageError(\n                    f\"--pdbcls: could not import {value!r}: {exc}\"\n                ) from exc\n        else:\n            import pdb\n\n            pdb_cls = pdb.Pdb\n\n        wrapped_cls = cls._get_pdb_wrapper_class(pdb_cls, capman)\n        cls._wrapped_pdb_cls = (usepdb_cls, wrapped_cls)\n        return wrapped_cls\n\n    @classmethod\n    def _get_pdb_wrapper_class(cls, pdb_cls, capman: CaptureManager | None):\n        import _pytest.config\n\n        class PytestPdbWrapper(pdb_cls):\n            _pytest_capman = capman\n            _continued = False\n\n            def do_debug(self, arg):\n                cls._recursive_debug += 1\n                ret = super().do_debug(arg)\n                cls._recursive_debug -= 1\n                return ret\n\n            def do_continue(self, arg):\n                ret = super().do_continue(arg)\n                if cls._recursive_debug == 0:\n                    assert cls._config is not None\n                    tw = _pytest.config.create_terminal_writer(cls._config)\n                    tw.line()\n\n                    capman = self._pytest_capman\n                    capturing = pytestPDB._is_capturing(capman)\n                    if capturing:\n                        if capturing == \"global\":\n                            tw.sep(\">\", \"PDB continue (IO-capturing resumed)\")\n                        else:\n                            tw.sep(\n                                \">\",\n                                f\"PDB continue (IO-capturing resumed for {capturing})\",\n                            )\n                        assert capman is not None\n                        capman.resume()\n                    else:\n                        tw.sep(\">\", \"PDB continue\")\n                assert cls._pluginmanager is not None\n                cls._pluginmanager.hook.pytest_leave_pdb(config=cls._config, pdb=self)\n                self._continued = True\n                return ret\n\n            do_c = do_cont = do_continue\n\n            def do_quit(self, arg):\n                \"\"\"Raise Exit outcome when quit command is used in pdb.\n\n                This is a bit of a hack - it would be better if BdbQuit\n                could be handled, but this would require to wrap the\n                whole pytest run, and adjust the report etc.\n                \"\"\"\n                ret = super().do_quit(arg)\n\n                if cls._recursive_debug == 0:\n                    outcomes.exit(\"Quitting debugger\")\n\n                return ret\n\n            do_q = do_quit\n            do_exit = do_quit\n\n            def setup(self, f, tb):\n                \"\"\"Suspend on setup().\n\n                Needed after do_continue resumed, and entering another\n                breakpoint again.\n                \"\"\"\n                ret = super().setup(f, tb)\n                if not ret and self._continued:\n                    # pdb.setup() returns True if the command wants to exit\n                    # from the interaction: do not suspend capturing then.\n                    if self._pytest_capman:\n                        self._pytest_capman.suspend_global_capture(in_=True)\n                return ret\n\n            def get_stack(self, f, t):\n                stack, i = super().get_stack(f, t)\n                if f is None:\n                    # Find last non-hidden frame.\n                    i = max(0, len(stack) - 1)\n                    while i and stack[i][0].f_locals.get(\"__tracebackhide__\", False):\n                        i -= 1\n                return stack, i\n\n        return PytestPdbWrapper\n\n    @classmethod\n    def _init_pdb(cls, method, *args, **kwargs):\n        \"\"\"Initialize PDB debugging, dropping any IO capturing.\"\"\"\n        import _pytest.config\n\n        if cls._pluginmanager is None:\n            capman: CaptureManager | None = None\n        else:\n            capman = cls._pluginmanager.getplugin(\"capturemanager\")\n        if capman:\n            capman.suspend(in_=True)\n\n        if cls._config:\n            tw = _pytest.config.create_terminal_writer(cls._config)\n            tw.line()\n\n            if cls._recursive_debug == 0:\n                # Handle header similar to pdb.set_trace in py37+.\n                header = kwargs.pop(\"header\", None)\n                if header is not None:\n                    tw.sep(\">\", header)\n                else:\n                    capturing = cls._is_capturing(capman)\n                    if capturing == \"global\":\n                        tw.sep(\">\", f\"PDB {method} (IO-capturing turned off)\")\n                    elif capturing:\n                        tw.sep(\n                            \">\",\n                            f\"PDB {method} (IO-capturing turned off for {capturing})\",\n                        )\n                    else:\n                        tw.sep(\">\", f\"PDB {method}\")\n\n        _pdb = cls._import_pdb_cls(capman)(**kwargs)\n\n        if cls._pluginmanager:\n            cls._pluginmanager.hook.pytest_enter_pdb(config=cls._config, pdb=_pdb)\n        return _pdb\n\n    @classmethod\n    def set_trace(cls, *args, **kwargs) -> None:\n        \"\"\"Invoke debugging via ``Pdb.set_trace``, dropping any IO capturing.\"\"\"\n        frame = sys._getframe().f_back\n        _pdb = cls._init_pdb(\"set_trace\", *args, **kwargs)\n        _pdb.set_trace(frame)\n\n\nclass PdbInvoke:\n    def pytest_exception_interact(\n        self, node: Node, call: CallInfo[Any], report: BaseReport\n    ) -> None:\n        capman = node.config.pluginmanager.getplugin(\"capturemanager\")\n        if capman:\n            capman.suspend_global_capture(in_=True)\n            out, err = capman.read_global_capture()\n            sys.stdout.write(out)\n            sys.stdout.write(err)\n        assert call.excinfo is not None\n\n        if not isinstance(call.excinfo.value, unittest.SkipTest):\n            _enter_pdb(node, call.excinfo, report)\n\n    def pytest_internalerror(self, excinfo: ExceptionInfo[BaseException]) -> None:\n        tb = _postmortem_traceback(excinfo)\n        post_mortem(tb)\n\n\nclass PdbTrace:\n    @hookimpl(wrapper=True)\n    def pytest_pyfunc_call(self, pyfuncitem) -> Generator[None, object, object]:\n        wrap_pytest_function_for_tracing(pyfuncitem)\n        return (yield)\n\n\ndef wrap_pytest_function_for_tracing(pyfuncitem) -> None:\n    \"\"\"Change the Python function object of the given Function item by a\n    wrapper which actually enters pdb before calling the python function\n    itself, effectively leaving the user in the pdb prompt in the first\n    statement of the function.\"\"\"\n    _pdb = pytestPDB._init_pdb(\"runcall\")\n    testfunction = pyfuncitem.obj\n\n    # we can't just return `partial(pdb.runcall, testfunction)` because (on\n    # python < 3.7.4) runcall's first param is `func`, which means we'd get\n    # an exception if one of the kwargs to testfunction was called `func`.\n    @functools.wraps(testfunction)\n    def wrapper(*args, **kwargs) -> None:\n        func = functools.partial(testfunction, *args, **kwargs)\n        _pdb.runcall(func)\n\n    pyfuncitem.obj = wrapper\n\n\ndef maybe_wrap_pytest_function_for_tracing(pyfuncitem) -> None:\n    \"\"\"Wrap the given pytestfunct item for tracing support if --trace was given in\n    the command line.\"\"\"\n    if pyfuncitem.config.getvalue(\"trace\"):\n        wrap_pytest_function_for_tracing(pyfuncitem)\n\n\ndef _enter_pdb(\n    node: Node, excinfo: ExceptionInfo[BaseException], rep: BaseReport\n) -> BaseReport:\n    # XXX we re-use the TerminalReporter's terminalwriter\n    # because this seems to avoid some encoding related troubles\n    # for not completely clear reasons.\n    tw = node.config.pluginmanager.getplugin(\"terminalreporter\")._tw\n    tw.line()\n\n    showcapture = node.config.option.showcapture\n\n    for sectionname, content in (\n        (\"stdout\", rep.capstdout),\n        (\"stderr\", rep.capstderr),\n        (\"log\", rep.caplog),\n    ):\n        if showcapture in (sectionname, \"all\") and content:\n            tw.sep(\">\", \"captured \" + sectionname)\n            if content[-1:] == \"\\n\":\n                content = content[:-1]\n            tw.line(content)\n\n    tw.sep(\">\", \"traceback\")\n    rep.toterminal(tw)\n    tw.sep(\">\", \"entering PDB\")\n    tb = _postmortem_traceback(excinfo)\n    rep._pdbshown = True  # type: ignore[attr-defined]\n    post_mortem(tb)\n    return rep\n\n\ndef _postmortem_traceback(excinfo: ExceptionInfo[BaseException]) -> types.TracebackType:\n    from doctest import UnexpectedException\n\n    if isinstance(excinfo.value, UnexpectedException):\n        # A doctest.UnexpectedException is not useful for post_mortem.\n        # Use the underlying exception instead:\n        return excinfo.value.exc_info[2]\n    elif isinstance(excinfo.value, ConftestImportFailure):\n        # A config.ConftestImportFailure is not useful for post_mortem.\n        # Use the underlying exception instead:\n        assert excinfo.value.cause.__traceback__ is not None\n        return excinfo.value.cause.__traceback__\n    else:\n        assert excinfo._excinfo is not None\n        return excinfo._excinfo[2]\n\n\ndef post_mortem(t: types.TracebackType) -> None:\n    p = pytestPDB._init_pdb(\"post_mortem\")\n    p.reset()\n    p.interaction(None, t)\n    if p.quitting:\n        outcomes.exit(\"Quitting debugger\")\n", "src/_pytest/python_path.py": "from __future__ import annotations\n\nimport sys\n\nimport pytest\nfrom pytest import Config\nfrom pytest import Parser\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    parser.addini(\"pythonpath\", type=\"paths\", help=\"Add paths to sys.path\", default=[])\n\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_load_initial_conftests(early_config: Config) -> None:\n    # `pythonpath = a b` will set `sys.path` to `[a, b, x, y, z, ...]`\n    for path in reversed(early_config.getini(\"pythonpath\")):\n        sys.path.insert(0, str(path))\n\n\n@pytest.hookimpl(trylast=True)\ndef pytest_unconfigure(config: Config) -> None:\n    for path in config.getini(\"pythonpath\"):\n        path_str = str(path)\n        if path_str in sys.path:\n            sys.path.remove(path_str)\n", "src/_pytest/warning_types.py": "from __future__ import annotations\n\nimport dataclasses\nimport inspect\nfrom types import FunctionType\nfrom typing import Any\nfrom typing import final\nfrom typing import Generic\nfrom typing import TypeVar\nimport warnings\n\n\nclass PytestWarning(UserWarning):\n    \"\"\"Base class for all warnings emitted by pytest.\"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestAssertRewriteWarning(PytestWarning):\n    \"\"\"Warning emitted by the pytest assert rewrite module.\"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestCacheWarning(PytestWarning):\n    \"\"\"Warning emitted by the cache plugin in various situations.\"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestConfigWarning(PytestWarning):\n    \"\"\"Warning emitted for configuration issues.\"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestCollectionWarning(PytestWarning):\n    \"\"\"Warning emitted when pytest is not able to collect a file or symbol in a module.\"\"\"\n\n    __module__ = \"pytest\"\n\n\nclass PytestDeprecationWarning(PytestWarning, DeprecationWarning):\n    \"\"\"Warning class for features that will be removed in a future version.\"\"\"\n\n    __module__ = \"pytest\"\n\n\nclass PytestRemovedIn9Warning(PytestDeprecationWarning):\n    \"\"\"Warning class for features that will be removed in pytest 9.\"\"\"\n\n    __module__ = \"pytest\"\n\n\nclass PytestReturnNotNoneWarning(PytestWarning):\n    \"\"\"Warning emitted when a test function is returning value other than None.\"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestExperimentalApiWarning(PytestWarning, FutureWarning):\n    \"\"\"Warning category used to denote experiments in pytest.\n\n    Use sparingly as the API might change or even be removed completely in a\n    future version.\n    \"\"\"\n\n    __module__ = \"pytest\"\n\n    @classmethod\n    def simple(cls, apiname: str) -> PytestExperimentalApiWarning:\n        return cls(f\"{apiname} is an experimental api that may change over time\")\n\n\n@final\nclass PytestUnhandledCoroutineWarning(PytestReturnNotNoneWarning):\n    \"\"\"Warning emitted for an unhandled coroutine.\n\n    A coroutine was encountered when collecting test functions, but was not\n    handled by any async-aware plugin.\n    Coroutine test functions are not natively supported.\n    \"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestUnknownMarkWarning(PytestWarning):\n    \"\"\"Warning emitted on use of unknown markers.\n\n    See :ref:`mark` for details.\n    \"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestUnraisableExceptionWarning(PytestWarning):\n    \"\"\"An unraisable exception was reported.\n\n    Unraisable exceptions are exceptions raised in :meth:`__del__ <object.__del__>`\n    implementations and similar situations when the exception cannot be raised\n    as normal.\n    \"\"\"\n\n    __module__ = \"pytest\"\n\n\n@final\nclass PytestUnhandledThreadExceptionWarning(PytestWarning):\n    \"\"\"An unhandled exception occurred in a :class:`~threading.Thread`.\n\n    Such exceptions don't propagate normally.\n    \"\"\"\n\n    __module__ = \"pytest\"\n\n\n_W = TypeVar(\"_W\", bound=PytestWarning)\n\n\n@final\n@dataclasses.dataclass\nclass UnformattedWarning(Generic[_W]):\n    \"\"\"A warning meant to be formatted during runtime.\n\n    This is used to hold warnings that need to format their message at runtime,\n    as opposed to a direct message.\n    \"\"\"\n\n    category: type[_W]\n    template: str\n\n    def format(self, **kwargs: Any) -> _W:\n        \"\"\"Return an instance of the warning category, formatted with given kwargs.\"\"\"\n        return self.category(self.template.format(**kwargs))\n\n\ndef warn_explicit_for(method: FunctionType, message: PytestWarning) -> None:\n    \"\"\"\n    Issue the warning :param:`message` for the definition of the given :param:`method`\n\n    this helps to log warnings for functions defined prior to finding an issue with them\n    (like hook wrappers being marked in a legacy mechanism)\n    \"\"\"\n    lineno = method.__code__.co_firstlineno\n    filename = inspect.getfile(method)\n    module = method.__module__\n    mod_globals = method.__globals__\n    try:\n        warnings.warn_explicit(\n            message,\n            type(message),\n            filename=filename,\n            module=module,\n            registry=mod_globals.setdefault(\"__warningregistry__\", {}),\n            lineno=lineno,\n        )\n    except Warning as w:\n        # If warnings are errors (e.g. -Werror), location information gets lost, so we add it to the message.\n        raise type(w)(f\"{w}\\n at {filename}:{lineno}\") from None\n", "src/_pytest/helpconfig.py": "# mypy: allow-untyped-defs\n\"\"\"Version info, help messages, tracing configuration.\"\"\"\n\nfrom __future__ import annotations\n\nfrom argparse import Action\nimport os\nimport sys\nfrom typing import Generator\n\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config import PrintHelp\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.terminal import TerminalReporter\nimport pytest\n\n\nclass HelpAction(Action):\n    \"\"\"An argparse Action that will raise an exception in order to skip the\n    rest of the argument parsing when --help is passed.\n\n    This prevents argparse from quitting due to missing required arguments\n    when any are defined, for example by ``pytest_addoption``.\n    This is similar to the way that the builtin argparse --help option is\n    implemented by raising SystemExit.\n    \"\"\"\n\n    def __init__(self, option_strings, dest=None, default=False, help=None):\n        super().__init__(\n            option_strings=option_strings,\n            dest=dest,\n            const=True,\n            default=default,\n            nargs=0,\n            help=help,\n        )\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        setattr(namespace, self.dest, self.const)\n\n        # We should only skip the rest of the parsing after preparse is done.\n        if getattr(parser._parser, \"after_preparse\", False):\n            raise PrintHelp\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"debugconfig\")\n    group.addoption(\n        \"--version\",\n        \"-V\",\n        action=\"count\",\n        default=0,\n        dest=\"version\",\n        help=\"Display pytest version and information about plugins. \"\n        \"When given twice, also display information about plugins.\",\n    )\n    group._addoption(\n        \"-h\",\n        \"--help\",\n        action=HelpAction,\n        dest=\"help\",\n        help=\"Show help message and configuration info\",\n    )\n    group._addoption(\n        \"-p\",\n        action=\"append\",\n        dest=\"plugins\",\n        default=[],\n        metavar=\"name\",\n        help=\"Early-load given plugin module name or entry point (multi-allowed). \"\n        \"To avoid loading of plugins, use the `no:` prefix, e.g. \"\n        \"`no:doctest`.\",\n    )\n    group.addoption(\n        \"--traceconfig\",\n        \"--trace-config\",\n        action=\"store_true\",\n        default=False,\n        help=\"Trace considerations of conftest.py files\",\n    )\n    group.addoption(\n        \"--debug\",\n        action=\"store\",\n        nargs=\"?\",\n        const=\"pytestdebug.log\",\n        dest=\"debug\",\n        metavar=\"DEBUG_FILE_NAME\",\n        help=\"Store internal tracing debug information in this log file. \"\n        \"This file is opened with 'w' and truncated as a result, care advised. \"\n        \"Default: pytestdebug.log.\",\n    )\n    group._addoption(\n        \"-o\",\n        \"--override-ini\",\n        dest=\"override_ini\",\n        action=\"append\",\n        help='Override ini option with \"option=value\" style, '\n        \"e.g. `-o xfail_strict=True -o cache_dir=cache`.\",\n    )\n\n\n@pytest.hookimpl(wrapper=True)\ndef pytest_cmdline_parse() -> Generator[None, Config, Config]:\n    config = yield\n\n    if config.option.debug:\n        # --debug | --debug <file.log> was provided.\n        path = config.option.debug\n        debugfile = open(path, \"w\", encoding=\"utf-8\")\n        debugfile.write(\n            \"versions pytest-{}, \"\n            \"python-{}\\ninvocation_dir={}\\ncwd={}\\nargs={}\\n\\n\".format(\n                pytest.__version__,\n                \".\".join(map(str, sys.version_info)),\n                config.invocation_params.dir,\n                os.getcwd(),\n                config.invocation_params.args,\n            )\n        )\n        config.trace.root.setwriter(debugfile.write)\n        undo_tracing = config.pluginmanager.enable_tracing()\n        sys.stderr.write(f\"writing pytest debug information to {path}\\n\")\n\n        def unset_tracing() -> None:\n            debugfile.close()\n            sys.stderr.write(f\"wrote pytest debug information to {debugfile.name}\\n\")\n            config.trace.root.setwriter(None)\n            undo_tracing()\n\n        config.add_cleanup(unset_tracing)\n\n    return config\n\n\ndef showversion(config: Config) -> None:\n    if config.option.version > 1:\n        sys.stdout.write(\n            f\"This is pytest version {pytest.__version__}, imported from {pytest.__file__}\\n\"\n        )\n        plugininfo = getpluginversioninfo(config)\n        if plugininfo:\n            for line in plugininfo:\n                sys.stdout.write(line + \"\\n\")\n    else:\n        sys.stdout.write(f\"pytest {pytest.__version__}\\n\")\n\n\ndef pytest_cmdline_main(config: Config) -> int | ExitCode | None:\n    if config.option.version > 0:\n        showversion(config)\n        return 0\n    elif config.option.help:\n        config._do_configure()\n        showhelp(config)\n        config._ensure_unconfigure()\n        return 0\n    return None\n\n\ndef showhelp(config: Config) -> None:\n    import textwrap\n\n    reporter: TerminalReporter | None = config.pluginmanager.get_plugin(\n        \"terminalreporter\"\n    )\n    assert reporter is not None\n    tw = reporter._tw\n    tw.write(config._parser.optparser.format_help())\n    tw.line()\n    tw.line(\n        \"[pytest] ini-options in the first \"\n        \"pytest.ini|tox.ini|setup.cfg|pyproject.toml file found:\"\n    )\n    tw.line()\n\n    columns = tw.fullwidth  # costly call\n    indent_len = 24  # based on argparse's max_help_position=24\n    indent = \" \" * indent_len\n    for name in config._parser._ininames:\n        help, type, default = config._parser._inidict[name]\n        if type is None:\n            type = \"string\"\n        if help is None:\n            raise TypeError(f\"help argument cannot be None for {name}\")\n        spec = f\"{name} ({type}):\"\n        tw.write(f\"  {spec}\")\n        spec_len = len(spec)\n        if spec_len > (indent_len - 3):\n            # Display help starting at a new line.\n            tw.line()\n            helplines = textwrap.wrap(\n                help,\n                columns,\n                initial_indent=indent,\n                subsequent_indent=indent,\n                break_on_hyphens=False,\n            )\n\n            for line in helplines:\n                tw.line(line)\n        else:\n            # Display help starting after the spec, following lines indented.\n            tw.write(\" \" * (indent_len - spec_len - 2))\n            wrapped = textwrap.wrap(help, columns - indent_len, break_on_hyphens=False)\n\n            if wrapped:\n                tw.line(wrapped[0])\n                for line in wrapped[1:]:\n                    tw.line(indent + line)\n\n    tw.line()\n    tw.line(\"Environment variables:\")\n    vars = [\n        (\"PYTEST_ADDOPTS\", \"Extra command line options\"),\n        (\"PYTEST_PLUGINS\", \"Comma-separated plugins to load during startup\"),\n        (\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", \"Set to disable plugin auto-loading\"),\n        (\"PYTEST_DEBUG\", \"Set to enable debug tracing of pytest's internals\"),\n    ]\n    for name, help in vars:\n        tw.line(f\"  {name:<24} {help}\")\n    tw.line()\n    tw.line()\n\n    tw.line(\"to see available markers type: pytest --markers\")\n    tw.line(\"to see available fixtures type: pytest --fixtures\")\n    tw.line(\n        \"(shown according to specified file_or_dir or current dir \"\n        \"if not specified; fixtures with leading '_' are only shown \"\n        \"with the '-v' option\"\n    )\n\n    for warningreport in reporter.stats.get(\"warnings\", []):\n        tw.line(\"warning : \" + warningreport.message, red=True)\n    return\n\n\nconftest_options = [(\"pytest_plugins\", \"list of plugin names to load\")]\n\n\ndef getpluginversioninfo(config: Config) -> list[str]:\n    lines = []\n    plugininfo = config.pluginmanager.list_plugin_distinfo()\n    if plugininfo:\n        lines.append(\"registered third-party plugins:\")\n        for plugin, dist in plugininfo:\n            loc = getattr(plugin, \"__file__\", repr(plugin))\n            content = f\"{dist.project_name}-{dist.version} at {loc}\"\n            lines.append(\"  \" + content)\n    return lines\n\n\ndef pytest_report_header(config: Config) -> list[str]:\n    lines = []\n    if config.option.debug or config.option.traceconfig:\n        lines.append(f\"using: pytest-{pytest.__version__}\")\n\n        verinfo = getpluginversioninfo(config)\n        if verinfo:\n            lines.extend(verinfo)\n\n    if config.option.traceconfig:\n        lines.append(\"active plugins:\")\n        items = config.pluginmanager.list_name_plugin()\n        for name, plugin in items:\n            if hasattr(plugin, \"__file__\"):\n                r = plugin.__file__\n            else:\n                r = repr(plugin)\n            lines.append(f\"    {name:<20}: {r}\")\n    return lines\n", "src/_pytest/faulthandler.py": "from __future__ import annotations\n\nimport os\nimport sys\nfrom typing import Generator\n\nfrom _pytest.config import Config\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.nodes import Item\nfrom _pytest.stash import StashKey\nimport pytest\n\n\nfault_handler_original_stderr_fd_key = StashKey[int]()\nfault_handler_stderr_fd_key = StashKey[int]()\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    help = (\n        \"Dump the traceback of all threads if a test takes \"\n        \"more than TIMEOUT seconds to finish\"\n    )\n    parser.addini(\"faulthandler_timeout\", help, default=0.0)\n\n\ndef pytest_configure(config: Config) -> None:\n    import faulthandler\n\n    # at teardown we want to restore the original faulthandler fileno\n    # but faulthandler has no api to return the original fileno\n    # so here we stash the stderr fileno to be used at teardown\n    # sys.stderr and sys.__stderr__ may be closed or patched during the session\n    # so we can't rely on their values being good at that point (#11572).\n    stderr_fileno = get_stderr_fileno()\n    if faulthandler.is_enabled():\n        config.stash[fault_handler_original_stderr_fd_key] = stderr_fileno\n    config.stash[fault_handler_stderr_fd_key] = os.dup(stderr_fileno)\n    faulthandler.enable(file=config.stash[fault_handler_stderr_fd_key])\n\n\ndef pytest_unconfigure(config: Config) -> None:\n    import faulthandler\n\n    faulthandler.disable()\n    # Close the dup file installed during pytest_configure.\n    if fault_handler_stderr_fd_key in config.stash:\n        os.close(config.stash[fault_handler_stderr_fd_key])\n        del config.stash[fault_handler_stderr_fd_key]\n    # Re-enable the faulthandler if it was originally enabled.\n    if fault_handler_original_stderr_fd_key in config.stash:\n        faulthandler.enable(config.stash[fault_handler_original_stderr_fd_key])\n        del config.stash[fault_handler_original_stderr_fd_key]\n\n\ndef get_stderr_fileno() -> int:\n    try:\n        fileno = sys.stderr.fileno()\n        # The Twisted Logger will return an invalid file descriptor since it is not backed\n        # by an FD. So, let's also forward this to the same code path as with pytest-xdist.\n        if fileno == -1:\n            raise AttributeError()\n        return fileno\n    except (AttributeError, ValueError):\n        # pytest-xdist monkeypatches sys.stderr with an object that is not an actual file.\n        # https://docs.python.org/3/library/faulthandler.html#issue-with-file-descriptors\n        # This is potentially dangerous, but the best we can do.\n        return sys.__stderr__.fileno()\n\n\ndef get_timeout_config_value(config: Config) -> float:\n    return float(config.getini(\"faulthandler_timeout\") or 0.0)\n\n\n@pytest.hookimpl(wrapper=True, trylast=True)\ndef pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:\n    timeout = get_timeout_config_value(item.config)\n    if timeout > 0:\n        import faulthandler\n\n        stderr = item.config.stash[fault_handler_stderr_fd_key]\n        faulthandler.dump_traceback_later(timeout, file=stderr)\n        try:\n            return (yield)\n        finally:\n            faulthandler.cancel_dump_traceback_later()\n    else:\n        return (yield)\n\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_enter_pdb() -> None:\n    \"\"\"Cancel any traceback dumping due to timeout before entering pdb.\"\"\"\n    import faulthandler\n\n    faulthandler.cancel_dump_traceback_later()\n\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_exception_interact() -> None:\n    \"\"\"Cancel any traceback dumping due to an interactive exception being\n    raised.\"\"\"\n    import faulthandler\n\n    faulthandler.cancel_dump_traceback_later()\n", "src/_pytest/legacypath.py": "# mypy: allow-untyped-defs\n\"\"\"Add backward compatibility support for the legacy py path type.\"\"\"\n\nfrom __future__ import annotations\n\nimport dataclasses\nfrom pathlib import Path\nimport shlex\nimport subprocess\nfrom typing import Final\nfrom typing import final\nfrom typing import TYPE_CHECKING\n\nfrom iniconfig import SectionWrapper\n\nfrom _pytest.cacheprovider import Cache\nfrom _pytest.compat import LEGACY_PATH\nfrom _pytest.compat import legacy_path\nfrom _pytest.config import Config\nfrom _pytest.config import hookimpl\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.main import Session\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Item\nfrom _pytest.nodes import Node\nfrom _pytest.pytester import HookRecorder\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import RunResult\nfrom _pytest.terminal import TerminalReporter\nfrom _pytest.tmpdir import TempPathFactory\n\n\nif TYPE_CHECKING:\n    import pexpect\n\n\n@final\nclass Testdir:\n    \"\"\"\n    Similar to :class:`Pytester`, but this class works with legacy legacy_path objects instead.\n\n    All methods just forward to an internal :class:`Pytester` instance, converting results\n    to `legacy_path` objects as necessary.\n    \"\"\"\n\n    __test__ = False\n\n    CLOSE_STDIN: Final = Pytester.CLOSE_STDIN\n    TimeoutExpired: Final = Pytester.TimeoutExpired\n\n    def __init__(self, pytester: Pytester, *, _ispytest: bool = False) -> None:\n        check_ispytest(_ispytest)\n        self._pytester = pytester\n\n    @property\n    def tmpdir(self) -> LEGACY_PATH:\n        \"\"\"Temporary directory where tests are executed.\"\"\"\n        return legacy_path(self._pytester.path)\n\n    @property\n    def test_tmproot(self) -> LEGACY_PATH:\n        return legacy_path(self._pytester._test_tmproot)\n\n    @property\n    def request(self):\n        return self._pytester._request\n\n    @property\n    def plugins(self):\n        return self._pytester.plugins\n\n    @plugins.setter\n    def plugins(self, plugins):\n        self._pytester.plugins = plugins\n\n    @property\n    def monkeypatch(self) -> MonkeyPatch:\n        return self._pytester._monkeypatch\n\n    def make_hook_recorder(self, pluginmanager) -> HookRecorder:\n        \"\"\"See :meth:`Pytester.make_hook_recorder`.\"\"\"\n        return self._pytester.make_hook_recorder(pluginmanager)\n\n    def chdir(self) -> None:\n        \"\"\"See :meth:`Pytester.chdir`.\"\"\"\n        return self._pytester.chdir()\n\n    def finalize(self) -> None:\n        return self._pytester._finalize()\n\n    def makefile(self, ext, *args, **kwargs) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.makefile`.\"\"\"\n        if ext and not ext.startswith(\".\"):\n            # pytester.makefile is going to throw a ValueError in a way that\n            # testdir.makefile did not, because\n            # pathlib.Path is stricter suffixes than py.path\n            # This ext arguments is likely user error, but since testdir has\n            # allowed this, we will prepend \".\" as a workaround to avoid breaking\n            # testdir usage that worked before\n            ext = \".\" + ext\n        return legacy_path(self._pytester.makefile(ext, *args, **kwargs))\n\n    def makeconftest(self, source) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.makeconftest`.\"\"\"\n        return legacy_path(self._pytester.makeconftest(source))\n\n    def makeini(self, source) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.makeini`.\"\"\"\n        return legacy_path(self._pytester.makeini(source))\n\n    def getinicfg(self, source: str) -> SectionWrapper:\n        \"\"\"See :meth:`Pytester.getinicfg`.\"\"\"\n        return self._pytester.getinicfg(source)\n\n    def makepyprojecttoml(self, source) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.makepyprojecttoml`.\"\"\"\n        return legacy_path(self._pytester.makepyprojecttoml(source))\n\n    def makepyfile(self, *args, **kwargs) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.makepyfile`.\"\"\"\n        return legacy_path(self._pytester.makepyfile(*args, **kwargs))\n\n    def maketxtfile(self, *args, **kwargs) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.maketxtfile`.\"\"\"\n        return legacy_path(self._pytester.maketxtfile(*args, **kwargs))\n\n    def syspathinsert(self, path=None) -> None:\n        \"\"\"See :meth:`Pytester.syspathinsert`.\"\"\"\n        return self._pytester.syspathinsert(path)\n\n    def mkdir(self, name) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.mkdir`.\"\"\"\n        return legacy_path(self._pytester.mkdir(name))\n\n    def mkpydir(self, name) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.mkpydir`.\"\"\"\n        return legacy_path(self._pytester.mkpydir(name))\n\n    def copy_example(self, name=None) -> LEGACY_PATH:\n        \"\"\"See :meth:`Pytester.copy_example`.\"\"\"\n        return legacy_path(self._pytester.copy_example(name))\n\n    def getnode(self, config: Config, arg) -> Item | Collector | None:\n        \"\"\"See :meth:`Pytester.getnode`.\"\"\"\n        return self._pytester.getnode(config, arg)\n\n    def getpathnode(self, path):\n        \"\"\"See :meth:`Pytester.getpathnode`.\"\"\"\n        return self._pytester.getpathnode(path)\n\n    def genitems(self, colitems: list[Item | Collector]) -> list[Item]:\n        \"\"\"See :meth:`Pytester.genitems`.\"\"\"\n        return self._pytester.genitems(colitems)\n\n    def runitem(self, source):\n        \"\"\"See :meth:`Pytester.runitem`.\"\"\"\n        return self._pytester.runitem(source)\n\n    def inline_runsource(self, source, *cmdlineargs):\n        \"\"\"See :meth:`Pytester.inline_runsource`.\"\"\"\n        return self._pytester.inline_runsource(source, *cmdlineargs)\n\n    def inline_genitems(self, *args):\n        \"\"\"See :meth:`Pytester.inline_genitems`.\"\"\"\n        return self._pytester.inline_genitems(*args)\n\n    def inline_run(self, *args, plugins=(), no_reraise_ctrlc: bool = False):\n        \"\"\"See :meth:`Pytester.inline_run`.\"\"\"\n        return self._pytester.inline_run(\n            *args, plugins=plugins, no_reraise_ctrlc=no_reraise_ctrlc\n        )\n\n    def runpytest_inprocess(self, *args, **kwargs) -> RunResult:\n        \"\"\"See :meth:`Pytester.runpytest_inprocess`.\"\"\"\n        return self._pytester.runpytest_inprocess(*args, **kwargs)\n\n    def runpytest(self, *args, **kwargs) -> RunResult:\n        \"\"\"See :meth:`Pytester.runpytest`.\"\"\"\n        return self._pytester.runpytest(*args, **kwargs)\n\n    def parseconfig(self, *args) -> Config:\n        \"\"\"See :meth:`Pytester.parseconfig`.\"\"\"\n        return self._pytester.parseconfig(*args)\n\n    def parseconfigure(self, *args) -> Config:\n        \"\"\"See :meth:`Pytester.parseconfigure`.\"\"\"\n        return self._pytester.parseconfigure(*args)\n\n    def getitem(self, source, funcname=\"test_func\"):\n        \"\"\"See :meth:`Pytester.getitem`.\"\"\"\n        return self._pytester.getitem(source, funcname)\n\n    def getitems(self, source):\n        \"\"\"See :meth:`Pytester.getitems`.\"\"\"\n        return self._pytester.getitems(source)\n\n    def getmodulecol(self, source, configargs=(), withinit=False):\n        \"\"\"See :meth:`Pytester.getmodulecol`.\"\"\"\n        return self._pytester.getmodulecol(\n            source, configargs=configargs, withinit=withinit\n        )\n\n    def collect_by_name(self, modcol: Collector, name: str) -> Item | Collector | None:\n        \"\"\"See :meth:`Pytester.collect_by_name`.\"\"\"\n        return self._pytester.collect_by_name(modcol, name)\n\n    def popen(\n        self,\n        cmdargs,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=CLOSE_STDIN,\n        **kw,\n    ):\n        \"\"\"See :meth:`Pytester.popen`.\"\"\"\n        return self._pytester.popen(cmdargs, stdout, stderr, stdin, **kw)\n\n    def run(self, *cmdargs, timeout=None, stdin=CLOSE_STDIN) -> RunResult:\n        \"\"\"See :meth:`Pytester.run`.\"\"\"\n        return self._pytester.run(*cmdargs, timeout=timeout, stdin=stdin)\n\n    def runpython(self, script) -> RunResult:\n        \"\"\"See :meth:`Pytester.runpython`.\"\"\"\n        return self._pytester.runpython(script)\n\n    def runpython_c(self, command):\n        \"\"\"See :meth:`Pytester.runpython_c`.\"\"\"\n        return self._pytester.runpython_c(command)\n\n    def runpytest_subprocess(self, *args, timeout=None) -> RunResult:\n        \"\"\"See :meth:`Pytester.runpytest_subprocess`.\"\"\"\n        return self._pytester.runpytest_subprocess(*args, timeout=timeout)\n\n    def spawn_pytest(self, string: str, expect_timeout: float = 10.0) -> pexpect.spawn:\n        \"\"\"See :meth:`Pytester.spawn_pytest`.\"\"\"\n        return self._pytester.spawn_pytest(string, expect_timeout=expect_timeout)\n\n    def spawn(self, cmd: str, expect_timeout: float = 10.0) -> pexpect.spawn:\n        \"\"\"See :meth:`Pytester.spawn`.\"\"\"\n        return self._pytester.spawn(cmd, expect_timeout=expect_timeout)\n\n    def __repr__(self) -> str:\n        return f\"<Testdir {self.tmpdir!r}>\"\n\n    def __str__(self) -> str:\n        return str(self.tmpdir)\n\n\nclass LegacyTestdirPlugin:\n    @staticmethod\n    @fixture\n    def testdir(pytester: Pytester) -> Testdir:\n        \"\"\"\n        Identical to :fixture:`pytester`, and provides an instance whose methods return\n        legacy ``LEGACY_PATH`` objects instead when applicable.\n\n        New code should avoid using :fixture:`testdir` in favor of :fixture:`pytester`.\n        \"\"\"\n        return Testdir(pytester, _ispytest=True)\n\n\n@final\n@dataclasses.dataclass\nclass TempdirFactory:\n    \"\"\"Backward compatibility wrapper that implements ``py.path.local``\n    for :class:`TempPathFactory`.\n\n    .. note::\n        These days, it is preferred to use ``tmp_path_factory``.\n\n        :ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`.\n\n    \"\"\"\n\n    _tmppath_factory: TempPathFactory\n\n    def __init__(\n        self, tmppath_factory: TempPathFactory, *, _ispytest: bool = False\n    ) -> None:\n        check_ispytest(_ispytest)\n        self._tmppath_factory = tmppath_factory\n\n    def mktemp(self, basename: str, numbered: bool = True) -> LEGACY_PATH:\n        \"\"\"Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object.\"\"\"\n        return legacy_path(self._tmppath_factory.mktemp(basename, numbered).resolve())\n\n    def getbasetemp(self) -> LEGACY_PATH:\n        \"\"\"Same as :meth:`TempPathFactory.getbasetemp`, but returns a ``py.path.local`` object.\"\"\"\n        return legacy_path(self._tmppath_factory.getbasetemp().resolve())\n\n\nclass LegacyTmpdirPlugin:\n    @staticmethod\n    @fixture(scope=\"session\")\n    def tmpdir_factory(request: FixtureRequest) -> TempdirFactory:\n        \"\"\"Return a :class:`pytest.TempdirFactory` instance for the test session.\"\"\"\n        # Set dynamically by pytest_configure().\n        return request.config._tmpdirhandler  # type: ignore\n\n    @staticmethod\n    @fixture\n    def tmpdir(tmp_path: Path) -> LEGACY_PATH:\n        \"\"\"Return a temporary directory path object which is unique to each test\n        function invocation, created as a sub directory of the base temporary\n        directory.\n\n        By default, a new base temporary directory is created each test session,\n        and old bases are removed after 3 sessions, to aid in debugging. If\n        ``--basetemp`` is used then it is cleared each session. See\n        :ref:`temporary directory location and retention`.\n\n        The returned object is a `legacy_path`_ object.\n\n        .. note::\n            These days, it is preferred to use ``tmp_path``.\n\n            :ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`.\n\n        .. _legacy_path: https://py.readthedocs.io/en/latest/path.html\n        \"\"\"\n        return legacy_path(tmp_path)\n\n\ndef Cache_makedir(self: Cache, name: str) -> LEGACY_PATH:\n    \"\"\"Return a directory path object with the given name.\n\n    Same as :func:`mkdir`, but returns a legacy py path instance.\n    \"\"\"\n    return legacy_path(self.mkdir(name))\n\n\ndef FixtureRequest_fspath(self: FixtureRequest) -> LEGACY_PATH:\n    \"\"\"(deprecated) The file system path of the test module which collected this test.\"\"\"\n    return legacy_path(self.path)\n\n\ndef TerminalReporter_startdir(self: TerminalReporter) -> LEGACY_PATH:\n    \"\"\"The directory from which pytest was invoked.\n\n    Prefer to use ``startpath`` which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    \"\"\"\n    return legacy_path(self.startpath)\n\n\ndef Config_invocation_dir(self: Config) -> LEGACY_PATH:\n    \"\"\"The directory from which pytest was invoked.\n\n    Prefer to use :attr:`invocation_params.dir <InvocationParams.dir>`,\n    which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    \"\"\"\n    return legacy_path(str(self.invocation_params.dir))\n\n\ndef Config_rootdir(self: Config) -> LEGACY_PATH:\n    \"\"\"The path to the :ref:`rootdir <rootdir>`.\n\n    Prefer to use :attr:`rootpath`, which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    \"\"\"\n    return legacy_path(str(self.rootpath))\n\n\ndef Config_inifile(self: Config) -> LEGACY_PATH | None:\n    \"\"\"The path to the :ref:`configfile <configfiles>`.\n\n    Prefer to use :attr:`inipath`, which is a :class:`pathlib.Path`.\n\n    :type: Optional[LEGACY_PATH]\n    \"\"\"\n    return legacy_path(str(self.inipath)) if self.inipath else None\n\n\ndef Session_startdir(self: Session) -> LEGACY_PATH:\n    \"\"\"The path from which pytest was invoked.\n\n    Prefer to use ``startpath`` which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    \"\"\"\n    return legacy_path(self.startpath)\n\n\ndef Config__getini_unknown_type(self, name: str, type: str, value: str | list[str]):\n    if type == \"pathlist\":\n        # TODO: This assert is probably not valid in all cases.\n        assert self.inipath is not None\n        dp = self.inipath.parent\n        input_values = shlex.split(value) if isinstance(value, str) else value\n        return [legacy_path(str(dp / x)) for x in input_values]\n    else:\n        raise ValueError(f\"unknown configuration type: {type}\", value)\n\n\ndef Node_fspath(self: Node) -> LEGACY_PATH:\n    \"\"\"(deprecated) returns a legacy_path copy of self.path\"\"\"\n    return legacy_path(self.path)\n\n\ndef Node_fspath_set(self: Node, value: LEGACY_PATH) -> None:\n    self.path = Path(value)\n\n\n@hookimpl(tryfirst=True)\ndef pytest_load_initial_conftests(early_config: Config) -> None:\n    \"\"\"Monkeypatch legacy path attributes in several classes, as early as possible.\"\"\"\n    mp = MonkeyPatch()\n    early_config.add_cleanup(mp.undo)\n\n    # Add Cache.makedir().\n    mp.setattr(Cache, \"makedir\", Cache_makedir, raising=False)\n\n    # Add FixtureRequest.fspath property.\n    mp.setattr(FixtureRequest, \"fspath\", property(FixtureRequest_fspath), raising=False)\n\n    # Add TerminalReporter.startdir property.\n    mp.setattr(\n        TerminalReporter, \"startdir\", property(TerminalReporter_startdir), raising=False\n    )\n\n    # Add Config.{invocation_dir,rootdir,inifile} properties.\n    mp.setattr(Config, \"invocation_dir\", property(Config_invocation_dir), raising=False)\n    mp.setattr(Config, \"rootdir\", property(Config_rootdir), raising=False)\n    mp.setattr(Config, \"inifile\", property(Config_inifile), raising=False)\n\n    # Add Session.startdir property.\n    mp.setattr(Session, \"startdir\", property(Session_startdir), raising=False)\n\n    # Add pathlist configuration type.\n    mp.setattr(Config, \"_getini_unknown_type\", Config__getini_unknown_type)\n\n    # Add Node.fspath property.\n    mp.setattr(Node, \"fspath\", property(Node_fspath, Node_fspath_set), raising=False)\n\n\n@hookimpl\ndef pytest_configure(config: Config) -> None:\n    \"\"\"Installs the LegacyTmpdirPlugin if the ``tmpdir`` plugin is also installed.\"\"\"\n    if config.pluginmanager.has_plugin(\"tmpdir\"):\n        mp = MonkeyPatch()\n        config.add_cleanup(mp.undo)\n        # Create TmpdirFactory and attach it to the config object.\n        #\n        # This is to comply with existing plugins which expect the handler to be\n        # available at pytest_configure time, but ideally should be moved entirely\n        # to the tmpdir_factory session fixture.\n        try:\n            tmp_path_factory = config._tmp_path_factory  # type: ignore[attr-defined]\n        except AttributeError:\n            # tmpdir plugin is blocked.\n            pass\n        else:\n            _tmpdirhandler = TempdirFactory(tmp_path_factory, _ispytest=True)\n            mp.setattr(config, \"_tmpdirhandler\", _tmpdirhandler, raising=False)\n\n        config.pluginmanager.register(LegacyTmpdirPlugin, \"legacypath-tmpdir\")\n\n\n@hookimpl\ndef pytest_plugin_registered(plugin: object, manager: PytestPluginManager) -> None:\n    # pytester is not loaded by default and is commonly loaded from a conftest,\n    # so checking for it in `pytest_configure` is not enough.\n    is_pytester = plugin is manager.get_plugin(\"pytester\")\n    if is_pytester and not manager.is_registered(LegacyTestdirPlugin):\n        manager.register(LegacyTestdirPlugin, \"legacypath-pytester\")\n", "src/_pytest/threadexception.py": "from __future__ import annotations\n\nimport threading\nimport traceback\nfrom types import TracebackType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Generator\nfrom typing import TYPE_CHECKING\nimport warnings\n\nimport pytest\n\n\nif TYPE_CHECKING:\n    from typing_extensions import Self\n\n\n# Copied from cpython/Lib/test/support/threading_helper.py, with modifications.\nclass catch_threading_exception:\n    \"\"\"Context manager catching threading.Thread exception using\n    threading.excepthook.\n\n    Storing exc_value using a custom hook can create a reference cycle. The\n    reference cycle is broken explicitly when the context manager exits.\n\n    Storing thread using a custom hook can resurrect it if it is set to an\n    object which is being finalized. Exiting the context manager clears the\n    stored object.\n\n    Usage:\n        with threading_helper.catch_threading_exception() as cm:\n            # code spawning a thread which raises an exception\n            ...\n            # check the thread exception: use cm.args\n            ...\n        # cm.args attribute no longer exists at this point\n        # (to break a reference cycle)\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.args: threading.ExceptHookArgs | None = None\n        self._old_hook: Callable[[threading.ExceptHookArgs], Any] | None = None\n\n    def _hook(self, args: threading.ExceptHookArgs) -> None:\n        self.args = args\n\n    def __enter__(self) -> Self:\n        self._old_hook = threading.excepthook\n        threading.excepthook = self._hook\n        return self\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        assert self._old_hook is not None\n        threading.excepthook = self._old_hook\n        self._old_hook = None\n        del self.args\n\n\ndef thread_exception_runtest_hook() -> Generator[None, None, None]:\n    with catch_threading_exception() as cm:\n        try:\n            yield\n        finally:\n            if cm.args:\n                thread_name = (\n                    \"<unknown>\" if cm.args.thread is None else cm.args.thread.name\n                )\n                msg = f\"Exception in thread {thread_name}\\n\\n\"\n                msg += \"\".join(\n                    traceback.format_exception(\n                        cm.args.exc_type,\n                        cm.args.exc_value,\n                        cm.args.exc_traceback,\n                    )\n                )\n                warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))\n\n\n@pytest.hookimpl(wrapper=True, trylast=True)\ndef pytest_runtest_setup() -> Generator[None, None, None]:\n    yield from thread_exception_runtest_hook()\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_call() -> Generator[None, None, None]:\n    yield from thread_exception_runtest_hook()\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_teardown() -> Generator[None, None, None]:\n    yield from thread_exception_runtest_hook()\n", "src/_pytest/terminal.py": "# mypy: allow-untyped-defs\n\"\"\"Terminal reporting of the full testing process.\n\nThis is a good source for looking at the various reporting hooks.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nfrom collections import Counter\nimport dataclasses\nimport datetime\nfrom functools import partial\nimport inspect\nfrom pathlib import Path\nimport platform\nimport sys\nimport textwrap\nfrom typing import Any\nfrom typing import Callable\nfrom typing import ClassVar\nfrom typing import final\nfrom typing import Generator\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import NamedTuple\nfrom typing import Sequence\nfrom typing import TextIO\nfrom typing import TYPE_CHECKING\nimport warnings\n\nimport pluggy\n\nfrom _pytest import nodes\nfrom _pytest import timing\nfrom _pytest._code import ExceptionInfo\nfrom _pytest._code.code import ExceptionRepr\nfrom _pytest._io import TerminalWriter\nfrom _pytest._io.wcwidth import wcswidth\nimport _pytest._version\nfrom _pytest.assertion.util import running_on_ci\nfrom _pytest.config import _PluggyPlugin\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config import hookimpl\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.nodes import Item\nfrom _pytest.nodes import Node\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import bestrelpath\nfrom _pytest.reports import BaseReport\nfrom _pytest.reports import CollectReport\nfrom _pytest.reports import TestReport\n\n\nif TYPE_CHECKING:\n    from _pytest.main import Session\n\n\nREPORT_COLLECTING_RESOLUTION = 0.5\n\nKNOWN_TYPES = (\n    \"failed\",\n    \"passed\",\n    \"skipped\",\n    \"deselected\",\n    \"xfailed\",\n    \"xpassed\",\n    \"warnings\",\n    \"error\",\n)\n\n_REPORTCHARS_DEFAULT = \"fE\"\n\n\nclass MoreQuietAction(argparse.Action):\n    \"\"\"A modified copy of the argparse count action which counts down and updates\n    the legacy quiet attribute at the same time.\n\n    Used to unify verbosity handling.\n    \"\"\"\n\n    def __init__(\n        self,\n        option_strings: Sequence[str],\n        dest: str,\n        default: object = None,\n        required: bool = False,\n        help: str | None = None,\n    ) -> None:\n        super().__init__(\n            option_strings=option_strings,\n            dest=dest,\n            nargs=0,\n            default=default,\n            required=required,\n            help=help,\n        )\n\n    def __call__(\n        self,\n        parser: argparse.ArgumentParser,\n        namespace: argparse.Namespace,\n        values: str | Sequence[object] | None,\n        option_string: str | None = None,\n    ) -> None:\n        new_count = getattr(namespace, self.dest, 0) - 1\n        setattr(namespace, self.dest, new_count)\n        # todo Deprecate config.quiet\n        namespace.quiet = getattr(namespace, \"quiet\", 0) + 1\n\n\nclass TestShortLogReport(NamedTuple):\n    \"\"\"Used to store the test status result category, shortletter and verbose word.\n    For example ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})``.\n\n    :ivar category:\n        The class of result, for example ``\u201cpassed\u201d``, ``\u201cskipped\u201d``, ``\u201cerror\u201d``, or the empty string.\n\n    :ivar letter:\n        The short letter shown as testing progresses, for example ``\".\"``, ``\"s\"``, ``\"E\"``, or the empty string.\n\n    :ivar word:\n        Verbose word is shown as testing progresses in verbose mode, for example ``\"PASSED\"``, ``\"SKIPPED\"``,\n        ``\"ERROR\"``, or the empty string.\n    \"\"\"\n\n    category: str\n    letter: str\n    word: str | tuple[str, Mapping[str, bool]]\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"terminal reporting\", \"Reporting\", after=\"general\")\n    group._addoption(\n        \"-v\",\n        \"--verbose\",\n        action=\"count\",\n        default=0,\n        dest=\"verbose\",\n        help=\"Increase verbosity\",\n    )\n    group._addoption(\n        \"--no-header\",\n        action=\"store_true\",\n        default=False,\n        dest=\"no_header\",\n        help=\"Disable header\",\n    )\n    group._addoption(\n        \"--no-summary\",\n        action=\"store_true\",\n        default=False,\n        dest=\"no_summary\",\n        help=\"Disable summary\",\n    )\n    group._addoption(\n        \"-q\",\n        \"--quiet\",\n        action=MoreQuietAction,\n        default=0,\n        dest=\"verbose\",\n        help=\"Decrease verbosity\",\n    )\n    group._addoption(\n        \"--verbosity\",\n        dest=\"verbose\",\n        type=int,\n        default=0,\n        help=\"Set verbosity. Default: 0.\",\n    )\n    group._addoption(\n        \"-r\",\n        action=\"store\",\n        dest=\"reportchars\",\n        default=_REPORTCHARS_DEFAULT,\n        metavar=\"chars\",\n        help=\"Show extra test summary info as specified by chars: (f)ailed, \"\n        \"(E)rror, (s)kipped, (x)failed, (X)passed, \"\n        \"(p)assed, (P)assed with output, (a)ll except passed (p/P), or (A)ll. \"\n        \"(w)arnings are enabled by default (see --disable-warnings), \"\n        \"'N' can be used to reset the list. (default: 'fE').\",\n    )\n    group._addoption(\n        \"--disable-warnings\",\n        \"--disable-pytest-warnings\",\n        default=False,\n        dest=\"disable_warnings\",\n        action=\"store_true\",\n        help=\"Disable warnings summary\",\n    )\n    group._addoption(\n        \"-l\",\n        \"--showlocals\",\n        action=\"store_true\",\n        dest=\"showlocals\",\n        default=False,\n        help=\"Show locals in tracebacks (disabled by default)\",\n    )\n    group._addoption(\n        \"--no-showlocals\",\n        action=\"store_false\",\n        dest=\"showlocals\",\n        help=\"Hide locals in tracebacks (negate --showlocals passed through addopts)\",\n    )\n    group._addoption(\n        \"--tb\",\n        metavar=\"style\",\n        action=\"store\",\n        dest=\"tbstyle\",\n        default=\"auto\",\n        choices=[\"auto\", \"long\", \"short\", \"no\", \"line\", \"native\"],\n        help=\"Traceback print mode (auto/long/short/line/native/no)\",\n    )\n    group._addoption(\n        \"--xfail-tb\",\n        action=\"store_true\",\n        dest=\"xfail_tb\",\n        default=False,\n        help=\"Show tracebacks for xfail (as long as --tb != no)\",\n    )\n    group._addoption(\n        \"--show-capture\",\n        action=\"store\",\n        dest=\"showcapture\",\n        choices=[\"no\", \"stdout\", \"stderr\", \"log\", \"all\"],\n        default=\"all\",\n        help=\"Controls how captured stdout/stderr/log is shown on failed tests. \"\n        \"Default: all.\",\n    )\n    group._addoption(\n        \"--fulltrace\",\n        \"--full-trace\",\n        action=\"store_true\",\n        default=False,\n        help=\"Don't cut any tracebacks (default is to cut)\",\n    )\n    group._addoption(\n        \"--color\",\n        metavar=\"color\",\n        action=\"store\",\n        dest=\"color\",\n        default=\"auto\",\n        choices=[\"yes\", \"no\", \"auto\"],\n        help=\"Color terminal output (yes/no/auto)\",\n    )\n    group._addoption(\n        \"--code-highlight\",\n        default=\"yes\",\n        choices=[\"yes\", \"no\"],\n        help=\"Whether code should be highlighted (only if --color is also enabled). \"\n        \"Default: yes.\",\n    )\n\n    parser.addini(\n        \"console_output_style\",\n        help='Console output: \"classic\", or with additional progress information '\n        '(\"progress\" (percentage) | \"count\" | \"progress-even-when-capture-no\" (forces '\n        \"progress even when capture=no)\",\n        default=\"progress\",\n    )\n    Config._add_verbosity_ini(\n        parser,\n        Config.VERBOSITY_TEST_CASES,\n        help=(\n            \"Specify a verbosity level for test case execution, overriding the main level. \"\n            \"Higher levels will provide more detailed information about each test case executed.\"\n        ),\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    reporter = TerminalReporter(config, sys.stdout)\n    config.pluginmanager.register(reporter, \"terminalreporter\")\n    if config.option.debug or config.option.traceconfig:\n\n        def mywriter(tags, args):\n            msg = \" \".join(map(str, args))\n            reporter.write_line(\"[traceconfig] \" + msg)\n\n        config.trace.root.setprocessor(\"pytest:config\", mywriter)\n\n\ndef getreportopt(config: Config) -> str:\n    reportchars: str = config.option.reportchars\n\n    old_aliases = {\"F\", \"S\"}\n    reportopts = \"\"\n    for char in reportchars:\n        if char in old_aliases:\n            char = char.lower()\n        if char == \"a\":\n            reportopts = \"sxXEf\"\n        elif char == \"A\":\n            reportopts = \"PpsxXEf\"\n        elif char == \"N\":\n            reportopts = \"\"\n        elif char not in reportopts:\n            reportopts += char\n\n    if not config.option.disable_warnings and \"w\" not in reportopts:\n        reportopts = \"w\" + reportopts\n    elif config.option.disable_warnings and \"w\" in reportopts:\n        reportopts = reportopts.replace(\"w\", \"\")\n\n    return reportopts\n\n\n@hookimpl(trylast=True)  # after _pytest.runner\ndef pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str]:\n    letter = \"F\"\n    if report.passed:\n        letter = \".\"\n    elif report.skipped:\n        letter = \"s\"\n\n    outcome: str = report.outcome\n    if report.when in (\"collect\", \"setup\", \"teardown\") and outcome == \"failed\":\n        outcome = \"error\"\n        letter = \"E\"\n\n    return outcome, letter, outcome.upper()\n\n\n@dataclasses.dataclass\nclass WarningReport:\n    \"\"\"Simple structure to hold warnings information captured by ``pytest_warning_recorded``.\n\n    :ivar str message:\n        User friendly message about the warning.\n    :ivar str|None nodeid:\n        nodeid that generated the warning (see ``get_location``).\n    :ivar tuple fslocation:\n        File system location of the source of the warning (see ``get_location``).\n    \"\"\"\n\n    message: str\n    nodeid: str | None = None\n    fslocation: tuple[str, int] | None = None\n\n    count_towards_summary: ClassVar = True\n\n    def get_location(self, config: Config) -> str | None:\n        \"\"\"Return the more user-friendly information about the location of a warning, or None.\"\"\"\n        if self.nodeid:\n            return self.nodeid\n        if self.fslocation:\n            filename, linenum = self.fslocation\n            relpath = bestrelpath(config.invocation_params.dir, absolutepath(filename))\n            return f\"{relpath}:{linenum}\"\n        return None\n\n\n@final\nclass TerminalReporter:\n    def __init__(self, config: Config, file: TextIO | None = None) -> None:\n        import _pytest.config\n\n        self.config = config\n        self._numcollected = 0\n        self._session: Session | None = None\n        self._showfspath: bool | None = None\n\n        self.stats: dict[str, list[Any]] = {}\n        self._main_color: str | None = None\n        self._known_types: list[str] | None = None\n        self.startpath = config.invocation_params.dir\n        if file is None:\n            file = sys.stdout\n        self._tw = _pytest.config.create_terminal_writer(config, file)\n        self._screen_width = self._tw.fullwidth\n        self.currentfspath: None | Path | str | int = None\n        self.reportchars = getreportopt(config)\n        self.hasmarkup = self._tw.hasmarkup\n        self.isatty = file.isatty()\n        self._progress_nodeids_reported: set[str] = set()\n        self._show_progress_info = self._determine_show_progress_info()\n        self._collect_report_last_write: float | None = None\n        self._already_displayed_warnings: int | None = None\n        self._keyboardinterrupt_memo: ExceptionRepr | None = None\n\n    def _determine_show_progress_info(self) -> Literal[\"progress\", \"count\", False]:\n        \"\"\"Return whether we should display progress information based on the current config.\"\"\"\n        # do not show progress if we are not capturing output (#3038) unless explicitly\n        # overridden by progress-even-when-capture-no\n        if (\n            self.config.getoption(\"capture\", \"no\") == \"no\"\n            and self.config.getini(\"console_output_style\")\n            != \"progress-even-when-capture-no\"\n        ):\n            return False\n        # do not show progress if we are showing fixture setup/teardown\n        if self.config.getoption(\"setupshow\", False):\n            return False\n        cfg: str = self.config.getini(\"console_output_style\")\n        if cfg in {\"progress\", \"progress-even-when-capture-no\"}:\n            return \"progress\"\n        elif cfg == \"count\":\n            return \"count\"\n        else:\n            return False\n\n    @property\n    def verbosity(self) -> int:\n        verbosity: int = self.config.option.verbose\n        return verbosity\n\n    @property\n    def showheader(self) -> bool:\n        return self.verbosity >= 0\n\n    @property\n    def no_header(self) -> bool:\n        return bool(self.config.option.no_header)\n\n    @property\n    def no_summary(self) -> bool:\n        return bool(self.config.option.no_summary)\n\n    @property\n    def showfspath(self) -> bool:\n        if self._showfspath is None:\n            return self.config.get_verbosity(Config.VERBOSITY_TEST_CASES) >= 0\n        return self._showfspath\n\n    @showfspath.setter\n    def showfspath(self, value: bool | None) -> None:\n        self._showfspath = value\n\n    @property\n    def showlongtestinfo(self) -> bool:\n        return self.config.get_verbosity(Config.VERBOSITY_TEST_CASES) > 0\n\n    def hasopt(self, char: str) -> bool:\n        char = {\"xfailed\": \"x\", \"skipped\": \"s\"}.get(char, char)\n        return char in self.reportchars\n\n    def write_fspath_result(self, nodeid: str, res: str, **markup: bool) -> None:\n        fspath = self.config.rootpath / nodeid.split(\"::\")[0]\n        if self.currentfspath is None or fspath != self.currentfspath:\n            if self.currentfspath is not None and self._show_progress_info:\n                self._write_progress_information_filling_space()\n            self.currentfspath = fspath\n            relfspath = bestrelpath(self.startpath, fspath)\n            self._tw.line()\n            self._tw.write(relfspath + \" \")\n        self._tw.write(res, flush=True, **markup)\n\n    def write_ensure_prefix(self, prefix: str, extra: str = \"\", **kwargs) -> None:\n        if self.currentfspath != prefix:\n            self._tw.line()\n            self.currentfspath = prefix\n            self._tw.write(prefix)\n        if extra:\n            self._tw.write(extra, **kwargs)\n            self.currentfspath = -2\n\n    def ensure_newline(self) -> None:\n        if self.currentfspath:\n            self._tw.line()\n            self.currentfspath = None\n\n    def wrap_write(\n        self,\n        content: str,\n        *,\n        flush: bool = False,\n        margin: int = 8,\n        line_sep: str = \"\\n\",\n        **markup: bool,\n    ) -> None:\n        \"\"\"Wrap message with margin for progress info.\"\"\"\n        width_of_current_line = self._tw.width_of_current_line\n        wrapped = line_sep.join(\n            textwrap.wrap(\n                \" \" * width_of_current_line + content,\n                width=self._screen_width - margin,\n                drop_whitespace=True,\n                replace_whitespace=False,\n            ),\n        )\n        wrapped = wrapped[width_of_current_line:]\n        self._tw.write(wrapped, flush=flush, **markup)\n\n    def write(self, content: str, *, flush: bool = False, **markup: bool) -> None:\n        self._tw.write(content, flush=flush, **markup)\n\n    def flush(self) -> None:\n        self._tw.flush()\n\n    def write_line(self, line: str | bytes, **markup: bool) -> None:\n        if not isinstance(line, str):\n            line = str(line, errors=\"replace\")\n        self.ensure_newline()\n        self._tw.line(line, **markup)\n\n    def rewrite(self, line: str, **markup: bool) -> None:\n        \"\"\"Rewinds the terminal cursor to the beginning and writes the given line.\n\n        :param erase:\n            If True, will also add spaces until the full terminal width to ensure\n            previous lines are properly erased.\n\n        The rest of the keyword arguments are markup instructions.\n        \"\"\"\n        erase = markup.pop(\"erase\", False)\n        if erase:\n            fill_count = self._tw.fullwidth - len(line) - 1\n            fill = \" \" * fill_count\n        else:\n            fill = \"\"\n        line = str(line)\n        self._tw.write(\"\\r\" + line + fill, **markup)\n\n    def write_sep(\n        self,\n        sep: str,\n        title: str | None = None,\n        fullwidth: int | None = None,\n        **markup: bool,\n    ) -> None:\n        self.ensure_newline()\n        self._tw.sep(sep, title, fullwidth, **markup)\n\n    def section(self, title: str, sep: str = \"=\", **kw: bool) -> None:\n        self._tw.sep(sep, title, **kw)\n\n    def line(self, msg: str, **kw: bool) -> None:\n        self._tw.line(msg, **kw)\n\n    def _add_stats(self, category: str, items: Sequence[Any]) -> None:\n        set_main_color = category not in self.stats\n        self.stats.setdefault(category, []).extend(items)\n        if set_main_color:\n            self._set_main_color()\n\n    def pytest_internalerror(self, excrepr: ExceptionRepr) -> bool:\n        for line in str(excrepr).split(\"\\n\"):\n            self.write_line(\"INTERNALERROR> \" + line)\n        return True\n\n    def pytest_warning_recorded(\n        self,\n        warning_message: warnings.WarningMessage,\n        nodeid: str,\n    ) -> None:\n        from _pytest.warnings import warning_record_to_str\n\n        fslocation = warning_message.filename, warning_message.lineno\n        message = warning_record_to_str(warning_message)\n\n        warning_report = WarningReport(\n            fslocation=fslocation, message=message, nodeid=nodeid\n        )\n        self._add_stats(\"warnings\", [warning_report])\n\n    def pytest_plugin_registered(self, plugin: _PluggyPlugin) -> None:\n        if self.config.option.traceconfig:\n            msg = f\"PLUGIN registered: {plugin}\"\n            # XXX This event may happen during setup/teardown time\n            #     which unfortunately captures our output here\n            #     which garbles our output if we use self.write_line.\n            self.write_line(msg)\n\n    def pytest_deselected(self, items: Sequence[Item]) -> None:\n        self._add_stats(\"deselected\", items)\n\n    def pytest_runtest_logstart(\n        self, nodeid: str, location: tuple[str, int | None, str]\n    ) -> None:\n        fspath, lineno, domain = location\n        # Ensure that the path is printed before the\n        # 1st test of a module starts running.\n        if self.showlongtestinfo:\n            line = self._locationline(nodeid, fspath, lineno, domain)\n            self.write_ensure_prefix(line, \"\")\n            self.flush()\n        elif self.showfspath:\n            self.write_fspath_result(nodeid, \"\")\n            self.flush()\n\n    def pytest_runtest_logreport(self, report: TestReport) -> None:\n        self._tests_ran = True\n        rep = report\n\n        res = TestShortLogReport(\n            *self.config.hook.pytest_report_teststatus(report=rep, config=self.config)\n        )\n        category, letter, word = res.category, res.letter, res.word\n        if not isinstance(word, tuple):\n            markup = None\n        else:\n            word, markup = word\n        self._add_stats(category, [rep])\n        if not letter and not word:\n            # Probably passed setup/teardown.\n            return\n        if markup is None:\n            was_xfail = hasattr(report, \"wasxfail\")\n            if rep.passed and not was_xfail:\n                markup = {\"green\": True}\n            elif rep.passed and was_xfail:\n                markup = {\"yellow\": True}\n            elif rep.failed:\n                markup = {\"red\": True}\n            elif rep.skipped:\n                markup = {\"yellow\": True}\n            else:\n                markup = {}\n        self._progress_nodeids_reported.add(rep.nodeid)\n        if self.config.get_verbosity(Config.VERBOSITY_TEST_CASES) <= 0:\n            self._tw.write(letter, **markup)\n            # When running in xdist, the logreport and logfinish of multiple\n            # items are interspersed, e.g. `logreport`, `logreport`,\n            # `logfinish`, `logfinish`. To avoid the \"past edge\" calculation\n            # from getting confused and overflowing (#7166), do the past edge\n            # printing here and not in logfinish, except for the 100% which\n            # should only be printed after all teardowns are finished.\n            if self._show_progress_info and not self._is_last_item:\n                self._write_progress_information_if_past_edge()\n        else:\n            line = self._locationline(rep.nodeid, *rep.location)\n            running_xdist = hasattr(rep, \"node\")\n            if not running_xdist:\n                self.write_ensure_prefix(line, word, **markup)\n                if rep.skipped or hasattr(report, \"wasxfail\"):\n                    reason = _get_raw_skip_reason(rep)\n                    if self.config.get_verbosity(Config.VERBOSITY_TEST_CASES) < 2:\n                        available_width = (\n                            (self._tw.fullwidth - self._tw.width_of_current_line)\n                            - len(\" [100%]\")\n                            - 1\n                        )\n                        formatted_reason = _format_trimmed(\n                            \" ({})\", reason, available_width\n                        )\n                    else:\n                        formatted_reason = f\" ({reason})\"\n\n                    if reason and formatted_reason is not None:\n                        self.wrap_write(formatted_reason)\n                if self._show_progress_info:\n                    self._write_progress_information_filling_space()\n            else:\n                self.ensure_newline()\n                self._tw.write(f\"[{rep.node.gateway.id}]\")\n                if self._show_progress_info:\n                    self._tw.write(\n                        self._get_progress_information_message() + \" \", cyan=True\n                    )\n                else:\n                    self._tw.write(\" \")\n                self._tw.write(word, **markup)\n                self._tw.write(\" \" + line)\n                self.currentfspath = -2\n        self.flush()\n\n    @property\n    def _is_last_item(self) -> bool:\n        assert self._session is not None\n        return len(self._progress_nodeids_reported) == self._session.testscollected\n\n    @hookimpl(wrapper=True)\n    def pytest_runtestloop(self) -> Generator[None, object, object]:\n        result = yield\n\n        # Write the final/100% progress -- deferred until the loop is complete.\n        if (\n            self.config.get_verbosity(Config.VERBOSITY_TEST_CASES) <= 0\n            and self._show_progress_info\n            and self._progress_nodeids_reported\n        ):\n            self._write_progress_information_filling_space()\n\n        return result\n\n    def _get_progress_information_message(self) -> str:\n        assert self._session\n        collected = self._session.testscollected\n        if self._show_progress_info == \"count\":\n            if collected:\n                progress = len(self._progress_nodeids_reported)\n                counter_format = f\"{{:{len(str(collected))}d}}\"\n                format_string = f\" [{counter_format}/{{}}]\"\n                return format_string.format(progress, collected)\n            return f\" [ {collected} / {collected} ]\"\n        else:\n            if collected:\n                return (\n                    f\" [{len(self._progress_nodeids_reported) * 100 // collected:3d}%]\"\n                )\n            return \" [100%]\"\n\n    def _write_progress_information_if_past_edge(self) -> None:\n        w = self._width_of_current_line\n        if self._show_progress_info == \"count\":\n            assert self._session\n            num_tests = self._session.testscollected\n            progress_length = len(f\" [{num_tests}/{num_tests}]\")\n        else:\n            progress_length = len(\" [100%]\")\n        past_edge = w + progress_length + 1 >= self._screen_width\n        if past_edge:\n            main_color, _ = self._get_main_color()\n            msg = self._get_progress_information_message()\n            self._tw.write(msg + \"\\n\", **{main_color: True})\n\n    def _write_progress_information_filling_space(self) -> None:\n        color, _ = self._get_main_color()\n        msg = self._get_progress_information_message()\n        w = self._width_of_current_line\n        fill = self._tw.fullwidth - w - 1\n        self.write(msg.rjust(fill), flush=True, **{color: True})\n\n    @property\n    def _width_of_current_line(self) -> int:\n        \"\"\"Return the width of the current line.\"\"\"\n        return self._tw.width_of_current_line\n\n    def pytest_collection(self) -> None:\n        if self.isatty:\n            if self.config.option.verbose >= 0:\n                self.write(\"collecting ... \", flush=True, bold=True)\n                self._collect_report_last_write = timing.time()\n        elif self.config.option.verbose >= 1:\n            self.write(\"collecting ... \", flush=True, bold=True)\n\n    def pytest_collectreport(self, report: CollectReport) -> None:\n        if report.failed:\n            self._add_stats(\"error\", [report])\n        elif report.skipped:\n            self._add_stats(\"skipped\", [report])\n        items = [x for x in report.result if isinstance(x, Item)]\n        self._numcollected += len(items)\n        if self.isatty:\n            self.report_collect()\n\n    def report_collect(self, final: bool = False) -> None:\n        if self.config.option.verbose < 0:\n            return\n\n        if not final:\n            # Only write \"collecting\" report every 0.5s.\n            t = timing.time()\n            if (\n                self._collect_report_last_write is not None\n                and self._collect_report_last_write > t - REPORT_COLLECTING_RESOLUTION\n            ):\n                return\n            self._collect_report_last_write = t\n\n        errors = len(self.stats.get(\"error\", []))\n        skipped = len(self.stats.get(\"skipped\", []))\n        deselected = len(self.stats.get(\"deselected\", []))\n        selected = self._numcollected - deselected\n        line = \"collected \" if final else \"collecting \"\n        line += (\n            str(self._numcollected) + \" item\" + (\"\" if self._numcollected == 1 else \"s\")\n        )\n        if errors:\n            line += \" / %d error%s\" % (errors, \"s\" if errors != 1 else \"\")\n        if deselected:\n            line += \" / %d deselected\" % deselected\n        if skipped:\n            line += \" / %d skipped\" % skipped\n        if self._numcollected > selected:\n            line += \" / %d selected\" % selected\n        if self.isatty:\n            self.rewrite(line, bold=True, erase=True)\n            if final:\n                self.write(\"\\n\")\n        else:\n            self.write_line(line)\n\n    @hookimpl(trylast=True)\n    def pytest_sessionstart(self, session: Session) -> None:\n        self._session = session\n        self._sessionstarttime = timing.time()\n        if not self.showheader:\n            return\n        self.write_sep(\"=\", \"test session starts\", bold=True)\n        verinfo = platform.python_version()\n        if not self.no_header:\n            msg = f\"platform {sys.platform} -- Python {verinfo}\"\n            pypy_version_info = getattr(sys, \"pypy_version_info\", None)\n            if pypy_version_info:\n                verinfo = \".\".join(map(str, pypy_version_info[:3]))\n                msg += f\"[pypy-{verinfo}-{pypy_version_info[3]}]\"\n            msg += f\", pytest-{_pytest._version.version}, pluggy-{pluggy.__version__}\"\n            if (\n                self.verbosity > 0\n                or self.config.option.debug\n                or getattr(self.config.option, \"pastebin\", None)\n            ):\n                msg += \" -- \" + str(sys.executable)\n            self.write_line(msg)\n            lines = self.config.hook.pytest_report_header(\n                config=self.config, start_path=self.startpath\n            )\n            self._write_report_lines_from_hooks(lines)\n\n    def _write_report_lines_from_hooks(\n        self, lines: Sequence[str | Sequence[str]]\n    ) -> None:\n        for line_or_lines in reversed(lines):\n            if isinstance(line_or_lines, str):\n                self.write_line(line_or_lines)\n            else:\n                for line in line_or_lines:\n                    self.write_line(line)\n\n    def pytest_report_header(self, config: Config) -> list[str]:\n        result = [f\"rootdir: {config.rootpath}\"]\n\n        if config.inipath:\n            result.append(\"configfile: \" + bestrelpath(config.rootpath, config.inipath))\n\n        if config.args_source == Config.ArgsSource.TESTPATHS:\n            testpaths: list[str] = config.getini(\"testpaths\")\n            result.append(\"testpaths: {}\".format(\", \".join(testpaths)))\n\n        plugininfo = config.pluginmanager.list_plugin_distinfo()\n        if plugininfo:\n            result.append(\n                \"plugins: {}\".format(\", \".join(_plugin_nameversions(plugininfo)))\n            )\n        return result\n\n    def pytest_collection_finish(self, session: Session) -> None:\n        self.report_collect(True)\n\n        lines = self.config.hook.pytest_report_collectionfinish(\n            config=self.config,\n            start_path=self.startpath,\n            items=session.items,\n        )\n        self._write_report_lines_from_hooks(lines)\n\n        if self.config.getoption(\"collectonly\"):\n            if session.items:\n                if self.config.option.verbose > -1:\n                    self._tw.line(\"\")\n                self._printcollecteditems(session.items)\n\n            failed = self.stats.get(\"failed\")\n            if failed:\n                self._tw.sep(\"!\", \"collection failures\")\n                for rep in failed:\n                    rep.toterminal(self._tw)\n\n    def _printcollecteditems(self, items: Sequence[Item]) -> None:\n        test_cases_verbosity = self.config.get_verbosity(Config.VERBOSITY_TEST_CASES)\n        if test_cases_verbosity < 0:\n            if test_cases_verbosity < -1:\n                counts = Counter(item.nodeid.split(\"::\", 1)[0] for item in items)\n                for name, count in sorted(counts.items()):\n                    self._tw.line(\"%s: %d\" % (name, count))\n            else:\n                for item in items:\n                    self._tw.line(item.nodeid)\n            return\n        stack: list[Node] = []\n        indent = \"\"\n        for item in items:\n            needed_collectors = item.listchain()[1:]  # strip root node\n            while stack:\n                if stack == needed_collectors[: len(stack)]:\n                    break\n                stack.pop()\n            for col in needed_collectors[len(stack) :]:\n                stack.append(col)\n                indent = (len(stack) - 1) * \"  \"\n                self._tw.line(f\"{indent}{col}\")\n                if test_cases_verbosity >= 1:\n                    obj = getattr(col, \"obj\", None)\n                    doc = inspect.getdoc(obj) if obj else None\n                    if doc:\n                        for line in doc.splitlines():\n                            self._tw.line(\"{}{}\".format(indent + \"  \", line))\n\n    @hookimpl(wrapper=True)\n    def pytest_sessionfinish(\n        self, session: Session, exitstatus: int | ExitCode\n    ) -> Generator[None, None, None]:\n        result = yield\n        self._tw.line(\"\")\n        summary_exit_codes = (\n            ExitCode.OK,\n            ExitCode.TESTS_FAILED,\n            ExitCode.INTERRUPTED,\n            ExitCode.USAGE_ERROR,\n            ExitCode.NO_TESTS_COLLECTED,\n        )\n        if exitstatus in summary_exit_codes and not self.no_summary:\n            self.config.hook.pytest_terminal_summary(\n                terminalreporter=self, exitstatus=exitstatus, config=self.config\n            )\n        if session.shouldfail:\n            self.write_sep(\"!\", str(session.shouldfail), red=True)\n        if exitstatus == ExitCode.INTERRUPTED:\n            self._report_keyboardinterrupt()\n            self._keyboardinterrupt_memo = None\n        elif session.shouldstop:\n            self.write_sep(\"!\", str(session.shouldstop), red=True)\n        self.summary_stats()\n        return result\n\n    @hookimpl(wrapper=True)\n    def pytest_terminal_summary(self) -> Generator[None, None, None]:\n        self.summary_errors()\n        self.summary_failures()\n        self.summary_xfailures()\n        self.summary_warnings()\n        self.summary_passes()\n        self.summary_xpasses()\n        try:\n            return (yield)\n        finally:\n            self.short_test_summary()\n            # Display any extra warnings from teardown here (if any).\n            self.summary_warnings()\n\n    def pytest_keyboard_interrupt(self, excinfo: ExceptionInfo[BaseException]) -> None:\n        self._keyboardinterrupt_memo = excinfo.getrepr(funcargs=True)\n\n    def pytest_unconfigure(self) -> None:\n        if self._keyboardinterrupt_memo is not None:\n            self._report_keyboardinterrupt()\n\n    def _report_keyboardinterrupt(self) -> None:\n        excrepr = self._keyboardinterrupt_memo\n        assert excrepr is not None\n        assert excrepr.reprcrash is not None\n        msg = excrepr.reprcrash.message\n        self.write_sep(\"!\", msg)\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --full-trace)\",\n                    yellow=True,\n                )\n\n    def _locationline(\n        self, nodeid: str, fspath: str, lineno: int | None, domain: str\n    ) -> str:\n        def mkrel(nodeid: str) -> str:\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # fspath comes from testid which has a \"/\"-normalized path.\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + bestrelpath(self.startpath, Path(fspath))\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n        except AttributeError:\n            try:\n                return str(rep.longrepr)[:50]\n            except AttributeError:\n                return \"\"\n\n    #\n    # Summaries for sessionfinish.\n    #\n    def getreports(self, name: str):\n        return [x for x in self.stats.get(name, ()) if not hasattr(x, \"_pdbshown\")]\n\n    def summary_warnings(self) -> None:\n        if self.hasopt(\"w\"):\n            all_warnings: list[WarningReport] | None = self.stats.get(\"warnings\")\n            if not all_warnings:\n                return\n\n            final = self._already_displayed_warnings is not None\n            if final:\n                warning_reports = all_warnings[self._already_displayed_warnings :]\n            else:\n                warning_reports = all_warnings\n            self._already_displayed_warnings = len(warning_reports)\n            if not warning_reports:\n                return\n\n            reports_grouped_by_message: dict[str, list[WarningReport]] = {}\n            for wr in warning_reports:\n                reports_grouped_by_message.setdefault(wr.message, []).append(wr)\n\n            def collapsed_location_report(reports: list[WarningReport]) -> str:\n                locations = []\n                for w in reports:\n                    location = w.get_location(self.config)\n                    if location:\n                        locations.append(location)\n\n                if len(locations) < 10:\n                    return \"\\n\".join(map(str, locations))\n\n                counts_by_filename = Counter(\n                    str(loc).split(\"::\", 1)[0] for loc in locations\n                )\n                return \"\\n\".join(\n                    \"{}: {} warning{}\".format(k, v, \"s\" if v > 1 else \"\")\n                    for k, v in counts_by_filename.items()\n                )\n\n            title = \"warnings summary (final)\" if final else \"warnings summary\"\n            self.write_sep(\"=\", title, yellow=True, bold=False)\n            for message, message_reports in reports_grouped_by_message.items():\n                maybe_location = collapsed_location_report(message_reports)\n                if maybe_location:\n                    self._tw.line(maybe_location)\n                    lines = message.splitlines()\n                    indented = \"\\n\".join(\"  \" + x for x in lines)\n                    message = indented.rstrip()\n                else:\n                    message = message.rstrip()\n                self._tw.line(message)\n                self._tw.line()\n            self._tw.line(\n                \"-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\"\n            )\n\n    def summary_passes(self) -> None:\n        self.summary_passes_combined(\"passed\", \"PASSES\", \"P\")\n\n    def summary_xpasses(self) -> None:\n        self.summary_passes_combined(\"xpassed\", \"XPASSES\", \"X\")\n\n    def summary_passes_combined(\n        self, which_reports: str, sep_title: str, needed_opt: str\n    ) -> None:\n        if self.config.option.tbstyle != \"no\":\n            if self.hasopt(needed_opt):\n                reports: list[TestReport] = self.getreports(which_reports)\n                if not reports:\n                    return\n                self.write_sep(\"=\", sep_title)\n                for rep in reports:\n                    if rep.sections:\n                        msg = self._getfailureheadline(rep)\n                        self.write_sep(\"_\", msg, green=True, bold=True)\n                        self._outrep_summary(rep)\n                    self._handle_teardown_sections(rep.nodeid)\n\n    def _get_teardown_reports(self, nodeid: str) -> list[TestReport]:\n        reports = self.getreports(\"\")\n        return [\n            report\n            for report in reports\n            if report.when == \"teardown\" and report.nodeid == nodeid\n        ]\n\n    def _handle_teardown_sections(self, nodeid: str) -> None:\n        for report in self._get_teardown_reports(nodeid):\n            self.print_teardown_sections(report)\n\n    def print_teardown_sections(self, rep: TestReport) -> None:\n        showcapture = self.config.option.showcapture\n        if showcapture == \"no\":\n            return\n        for secname, content in rep.sections:\n            if showcapture != \"all\" and showcapture not in secname:\n                continue\n            if \"teardown\" in secname:\n                self._tw.sep(\"-\", secname)\n                if content[-1:] == \"\\n\":\n                    content = content[:-1]\n                self._tw.line(content)\n\n    def summary_failures(self) -> None:\n        style = self.config.option.tbstyle\n        self.summary_failures_combined(\"failed\", \"FAILURES\", style=style)\n\n    def summary_xfailures(self) -> None:\n        show_tb = self.config.option.xfail_tb\n        style = self.config.option.tbstyle if show_tb else \"no\"\n        self.summary_failures_combined(\"xfailed\", \"XFAILURES\", style=style)\n\n    def summary_failures_combined(\n        self,\n        which_reports: str,\n        sep_title: str,\n        *,\n        style: str,\n        needed_opt: str | None = None,\n    ) -> None:\n        if style != \"no\":\n            if not needed_opt or self.hasopt(needed_opt):\n                reports: list[BaseReport] = self.getreports(which_reports)\n                if not reports:\n                    return\n                self.write_sep(\"=\", sep_title)\n                if style == \"line\":\n                    for rep in reports:\n                        line = self._getcrashline(rep)\n                        self.write_line(line)\n                else:\n                    for rep in reports:\n                        msg = self._getfailureheadline(rep)\n                        self.write_sep(\"_\", msg, red=True, bold=True)\n                        self._outrep_summary(rep)\n                        self._handle_teardown_sections(rep.nodeid)\n\n    def summary_errors(self) -> None:\n        if self.config.option.tbstyle != \"no\":\n            reports: list[BaseReport] = self.getreports(\"error\")\n            if not reports:\n                return\n            self.write_sep(\"=\", \"ERRORS\")\n            for rep in self.stats[\"error\"]:\n                msg = self._getfailureheadline(rep)\n                if rep.when == \"collect\":\n                    msg = \"ERROR collecting \" + msg\n                else:\n                    msg = f\"ERROR at {rep.when} of {msg}\"\n                self.write_sep(\"_\", msg, red=True, bold=True)\n                self._outrep_summary(rep)\n\n    def _outrep_summary(self, rep: BaseReport) -> None:\n        rep.toterminal(self._tw)\n        showcapture = self.config.option.showcapture\n        if showcapture == \"no\":\n            return\n        for secname, content in rep.sections:\n            if showcapture != \"all\" and showcapture not in secname:\n                continue\n            self._tw.sep(\"-\", secname)\n            if content[-1:] == \"\\n\":\n                content = content[:-1]\n            self._tw.line(content)\n\n    def summary_stats(self) -> None:\n        if self.verbosity < -1:\n            return\n\n        session_duration = timing.time() - self._sessionstarttime\n        (parts, main_color) = self.build_summary_stats_line()\n        line_parts = []\n\n        display_sep = self.verbosity >= 0\n        if display_sep:\n            fullwidth = self._tw.fullwidth\n        for text, markup in parts:\n            with_markup = self._tw.markup(text, **markup)\n            if display_sep:\n                fullwidth += len(with_markup) - len(text)\n            line_parts.append(with_markup)\n        msg = \", \".join(line_parts)\n\n        main_markup = {main_color: True}\n        duration = f\" in {format_session_duration(session_duration)}\"\n        duration_with_markup = self._tw.markup(duration, **main_markup)\n        if display_sep:\n            fullwidth += len(duration_with_markup) - len(duration)\n        msg += duration_with_markup\n\n        if display_sep:\n            markup_for_end_sep = self._tw.markup(\"\", **main_markup)\n            if markup_for_end_sep.endswith(\"\\x1b[0m\"):\n                markup_for_end_sep = markup_for_end_sep[:-4]\n            fullwidth += len(markup_for_end_sep)\n            msg += markup_for_end_sep\n\n        if display_sep:\n            self.write_sep(\"=\", msg, fullwidth=fullwidth, **main_markup)\n        else:\n            self.write_line(msg, **main_markup)\n\n    def short_test_summary(self) -> None:\n        if not self.reportchars:\n            return\n\n        def show_simple(lines: list[str], *, stat: str) -> None:\n            failed = self.stats.get(stat, [])\n            if not failed:\n                return\n            config = self.config\n            for rep in failed:\n                color = _color_for_type.get(stat, _color_for_type_default)\n                line = _get_line_with_reprcrash_message(\n                    config, rep, self._tw, {color: True}\n                )\n                lines.append(line)\n\n        def show_xfailed(lines: list[str]) -> None:\n            xfailed = self.stats.get(\"xfailed\", [])\n            for rep in xfailed:\n                verbose_word = rep._get_verbose_word(self.config)\n                markup_word = self._tw.markup(\n                    verbose_word, **{_color_for_type[\"warnings\"]: True}\n                )\n                nodeid = _get_node_id_with_markup(self._tw, self.config, rep)\n                line = f\"{markup_word} {nodeid}\"\n                reason = rep.wasxfail\n                if reason:\n                    line += \" - \" + str(reason)\n\n                lines.append(line)\n\n        def show_xpassed(lines: list[str]) -> None:\n            xpassed = self.stats.get(\"xpassed\", [])\n            for rep in xpassed:\n                verbose_word = rep._get_verbose_word(self.config)\n                markup_word = self._tw.markup(\n                    verbose_word, **{_color_for_type[\"warnings\"]: True}\n                )\n                nodeid = _get_node_id_with_markup(self._tw, self.config, rep)\n                line = f\"{markup_word} {nodeid}\"\n                reason = rep.wasxfail\n                if reason:\n                    line += \" - \" + str(reason)\n                lines.append(line)\n\n        def show_skipped(lines: list[str]) -> None:\n            skipped: list[CollectReport] = self.stats.get(\"skipped\", [])\n            fskips = _folded_skips(self.startpath, skipped) if skipped else []\n            if not fskips:\n                return\n            verbose_word = skipped[0]._get_verbose_word(self.config)\n            markup_word = self._tw.markup(\n                verbose_word, **{_color_for_type[\"warnings\"]: True}\n            )\n            prefix = \"Skipped: \"\n            for num, fspath, lineno, reason in fskips:\n                if reason.startswith(prefix):\n                    reason = reason[len(prefix) :]\n                if lineno is not None:\n                    lines.append(\n                        \"%s [%d] %s:%d: %s\" % (markup_word, num, fspath, lineno, reason)\n                    )\n                else:\n                    lines.append(\"%s [%d] %s: %s\" % (markup_word, num, fspath, reason))\n\n        REPORTCHAR_ACTIONS: Mapping[str, Callable[[list[str]], None]] = {\n            \"x\": show_xfailed,\n            \"X\": show_xpassed,\n            \"f\": partial(show_simple, stat=\"failed\"),\n            \"s\": show_skipped,\n            \"p\": partial(show_simple, stat=\"passed\"),\n            \"E\": partial(show_simple, stat=\"error\"),\n        }\n\n        lines: list[str] = []\n        for char in self.reportchars:\n            action = REPORTCHAR_ACTIONS.get(char)\n            if action:  # skipping e.g. \"P\" (passed with output) here.\n                action(lines)\n\n        if lines:\n            self.write_sep(\"=\", \"short test summary info\", cyan=True, bold=True)\n            for line in lines:\n                self.write_line(line)\n\n    def _get_main_color(self) -> tuple[str, list[str]]:\n        if self._main_color is None or self._known_types is None or self._is_last_item:\n            self._set_main_color()\n            assert self._main_color\n            assert self._known_types\n        return self._main_color, self._known_types\n\n    def _determine_main_color(self, unknown_type_seen: bool) -> str:\n        stats = self.stats\n        if \"failed\" in stats or \"error\" in stats:\n            main_color = \"red\"\n        elif \"warnings\" in stats or \"xpassed\" in stats or unknown_type_seen:\n            main_color = \"yellow\"\n        elif \"passed\" in stats or not self._is_last_item:\n            main_color = \"green\"\n        else:\n            main_color = \"yellow\"\n        return main_color\n\n    def _set_main_color(self) -> None:\n        unknown_types: list[str] = []\n        for found_type in self.stats:\n            if found_type:  # setup/teardown reports have an empty key, ignore them\n                if found_type not in KNOWN_TYPES and found_type not in unknown_types:\n                    unknown_types.append(found_type)\n        self._known_types = list(KNOWN_TYPES) + unknown_types\n        self._main_color = self._determine_main_color(bool(unknown_types))\n\n    def build_summary_stats_line(self) -> tuple[list[tuple[str, dict[str, bool]]], str]:\n        \"\"\"\n        Build the parts used in the last summary stats line.\n\n        The summary stats line is the line shown at the end, \"=== 12 passed, 2 errors in Xs===\".\n\n        This function builds a list of the \"parts\" that make up for the text in that line, in\n        the example above it would be:\n\n            [\n                (\"12 passed\", {\"green\": True}),\n                (\"2 errors\", {\"red\": True}\n            ]\n\n        That last dict for each line is a \"markup dictionary\", used by TerminalWriter to\n        color output.\n\n        The final color of the line is also determined by this function, and is the second\n        element of the returned tuple.\n        \"\"\"\n        if self.config.getoption(\"collectonly\"):\n            return self._build_collect_only_summary_stats_line()\n        else:\n            return self._build_normal_summary_stats_line()\n\n    def _get_reports_to_display(self, key: str) -> list[Any]:\n        \"\"\"Get test/collection reports for the given status key, such as `passed` or `error`.\"\"\"\n        reports = self.stats.get(key, [])\n        return [x for x in reports if getattr(x, \"count_towards_summary\", True)]\n\n    def _build_normal_summary_stats_line(\n        self,\n    ) -> tuple[list[tuple[str, dict[str, bool]]], str]:\n        main_color, known_types = self._get_main_color()\n        parts = []\n\n        for key in known_types:\n            reports = self._get_reports_to_display(key)\n            if reports:\n                count = len(reports)\n                color = _color_for_type.get(key, _color_for_type_default)\n                markup = {color: True, \"bold\": color == main_color}\n                parts.append((\"%d %s\" % pluralize(count, key), markup))\n\n        if not parts:\n            parts = [(\"no tests ran\", {_color_for_type_default: True})]\n\n        return parts, main_color\n\n    def _build_collect_only_summary_stats_line(\n        self,\n    ) -> tuple[list[tuple[str, dict[str, bool]]], str]:\n        deselected = len(self._get_reports_to_display(\"deselected\"))\n        errors = len(self._get_reports_to_display(\"error\"))\n\n        if self._numcollected == 0:\n            parts = [(\"no tests collected\", {\"yellow\": True})]\n            main_color = \"yellow\"\n\n        elif deselected == 0:\n            main_color = \"green\"\n            collected_output = \"%d %s collected\" % pluralize(self._numcollected, \"test\")\n            parts = [(collected_output, {main_color: True})]\n        else:\n            all_tests_were_deselected = self._numcollected == deselected\n            if all_tests_were_deselected:\n                main_color = \"yellow\"\n                collected_output = f\"no tests collected ({deselected} deselected)\"\n            else:\n                main_color = \"green\"\n                selected = self._numcollected - deselected\n                collected_output = f\"{selected}/{self._numcollected} tests collected ({deselected} deselected)\"\n\n            parts = [(collected_output, {main_color: True})]\n\n        if errors:\n            main_color = _color_for_type[\"error\"]\n            parts += [(\"%d %s\" % pluralize(errors, \"error\"), {main_color: True})]\n\n        return parts, main_color\n\n\ndef _get_node_id_with_markup(tw: TerminalWriter, config: Config, rep: BaseReport):\n    nodeid = config.cwd_relative_nodeid(rep.nodeid)\n    path, *parts = nodeid.split(\"::\")\n    if parts:\n        parts_markup = tw.markup(\"::\".join(parts), bold=True)\n        return path + \"::\" + parts_markup\n    else:\n        return path\n\n\ndef _format_trimmed(format: str, msg: str, available_width: int) -> str | None:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)\n\n\ndef _get_line_with_reprcrash_message(\n    config: Config, rep: BaseReport, tw: TerminalWriter, word_markup: dict[str, bool]\n) -> str:\n    \"\"\"Get summary line for a report, trying to add reprcrash message.\"\"\"\n    verbose_word = rep._get_verbose_word(config)\n    word = tw.markup(verbose_word, **word_markup)\n    node = _get_node_id_with_markup(tw, config, rep)\n\n    line = f\"{word} {node}\"\n    line_width = wcswidth(line)\n\n    try:\n        # Type ignored intentionally -- possible AttributeError expected.\n        msg = rep.longrepr.reprcrash.message  # type: ignore[union-attr]\n    except AttributeError:\n        pass\n    else:\n        if running_on_ci() or config.option.verbose >= 2:\n            msg = f\" - {msg}\"\n        else:\n            available_width = tw.fullwidth - line_width\n            msg = _format_trimmed(\" - {}\", msg, available_width)\n        if msg is not None:\n            line += msg\n\n    return line\n\n\ndef _folded_skips(\n    startpath: Path,\n    skipped: Sequence[CollectReport],\n) -> list[tuple[int, str, int | None, str]]:\n    d: dict[tuple[str, int | None, str], list[CollectReport]] = {}\n    for event in skipped:\n        assert event.longrepr is not None\n        assert isinstance(event.longrepr, tuple), (event, event.longrepr)\n        assert len(event.longrepr) == 3, (event, event.longrepr)\n        fspath, lineno, reason = event.longrepr\n        # For consistency, report all fspaths in relative form.\n        fspath = bestrelpath(startpath, Path(fspath))\n        keywords = getattr(event, \"keywords\", {})\n        # Folding reports with global pytestmark variable.\n        # This is a workaround, because for now we cannot identify the scope of a skip marker\n        # TODO: Revisit after marks scope would be fixed.\n        if (\n            event.when == \"setup\"\n            and \"skip\" in keywords\n            and \"pytestmark\" not in keywords\n        ):\n            key: tuple[str, int | None, str] = (fspath, None, reason)\n        else:\n            key = (fspath, lineno, reason)\n        d.setdefault(key, []).append(event)\n    values: list[tuple[int, str, int | None, str]] = []\n    for key, events in d.items():\n        values.append((len(events), *key))\n    return values\n\n\n_color_for_type = {\n    \"failed\": \"red\",\n    \"error\": \"red\",\n    \"warnings\": \"yellow\",\n    \"passed\": \"green\",\n}\n_color_for_type_default = \"yellow\"\n\n\ndef pluralize(count: int, noun: str) -> tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun\n\n\ndef _plugin_nameversions(plugininfo) -> list[str]:\n    values: list[str] = []\n    for plugin, dist in plugininfo:\n        # Gets us name and version!\n        name = f\"{dist.project_name}-{dist.version}\"\n        # Questionable convenience, but it keeps things short.\n        if name.startswith(\"pytest-\"):\n            name = name[7:]\n        # We decided to print python package names they can have more than one plugin.\n        if name not in values:\n            values.append(name)\n    return values\n\n\ndef format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\"\n\n\ndef _get_raw_skip_reason(report: TestReport) -> str:\n    \"\"\"Get the reason string of a skip/xfail/xpass test report.\n\n    The string is just the part given by the user.\n    \"\"\"\n    if hasattr(report, \"wasxfail\"):\n        reason = report.wasxfail\n        if reason.startswith(\"reason: \"):\n            reason = reason[len(\"reason: \") :]\n        return reason\n    else:\n        assert report.skipped\n        assert isinstance(report.longrepr, tuple)\n        _, _, reason = report.longrepr\n        if reason.startswith(\"Skipped: \"):\n            reason = reason[len(\"Skipped: \") :]\n        elif reason == \"Skipped\":\n            reason = \"\"\n        return reason\n", "src/_pytest/nodes.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport abc\nfrom functools import cached_property\nfrom inspect import signature\nimport os\nimport pathlib\nfrom pathlib import Path\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import MutableMapping\nfrom typing import NoReturn\nfrom typing import overload\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nimport warnings\n\nimport pluggy\n\nimport _pytest._code\nfrom _pytest._code import getfslineno\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest._code.code import TerminalRepr\nfrom _pytest._code.code import Traceback\nfrom _pytest._code.code import TracebackStyle\nfrom _pytest.compat import LEGACY_PATH\nfrom _pytest.config import Config\nfrom _pytest.config import ConftestImportFailure\nfrom _pytest.config.compat import _check_path\nfrom _pytest.deprecated import NODE_CTOR_FSPATH_ARG\nfrom _pytest.mark.structures import Mark\nfrom _pytest.mark.structures import MarkDecorator\nfrom _pytest.mark.structures import NodeKeywords\nfrom _pytest.outcomes import fail\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import commonpath\nfrom _pytest.stash import Stash\nfrom _pytest.warning_types import PytestWarning\n\n\nif TYPE_CHECKING:\n    from typing import Self\n\n    # Imported here due to circular import.\n    from _pytest.main import Session\n\n\nSEP = \"/\"\n\ntracebackcutdir = Path(_pytest.__file__).parent\n\n\n_T = TypeVar(\"_T\")\n\n\ndef _imply_path(\n    node_type: type[Node],\n    path: Path | None,\n    fspath: LEGACY_PATH | None,\n) -> Path:\n    if fspath is not None:\n        warnings.warn(\n            NODE_CTOR_FSPATH_ARG.format(\n                node_type_name=node_type.__name__,\n            ),\n            stacklevel=6,\n        )\n    if path is not None:\n        if fspath is not None:\n            _check_path(path, fspath)\n        return path\n    else:\n        assert fspath is not None\n        return Path(fspath)\n\n\n_NodeType = TypeVar(\"_NodeType\", bound=\"Node\")\n\n\nclass NodeMeta(abc.ABCMeta):\n    \"\"\"Metaclass used by :class:`Node` to enforce that direct construction raises\n    :class:`Failed`.\n\n    This behaviour supports the indirection introduced with :meth:`Node.from_parent`,\n    the named constructor to be used instead of direct construction. The design\n    decision to enforce indirection with :class:`NodeMeta` was made as a\n    temporary aid for refactoring the collection tree, which was diagnosed to\n    have :class:`Node` objects whose creational patterns were overly entangled.\n    Once the refactoring is complete, this metaclass can be removed.\n\n    See https://github.com/pytest-dev/pytest/projects/3 for an overview of the\n    progress on detangling the :class:`Node` classes.\n    \"\"\"\n\n    def __call__(cls, *k, **kw) -> NoReturn:\n        msg = (\n            \"Direct construction of {name} has been deprecated, please use {name}.from_parent.\\n\"\n            \"See \"\n            \"https://docs.pytest.org/en/stable/deprecations.html#node-construction-changed-to-node-from-parent\"\n            \" for more details.\"\n        ).format(name=f\"{cls.__module__}.{cls.__name__}\")\n        fail(msg, pytrace=False)\n\n    def _create(cls: type[_T], *k, **kw) -> _T:\n        try:\n            return super().__call__(*k, **kw)  # type: ignore[no-any-return,misc]\n        except TypeError:\n            sig = signature(getattr(cls, \"__init__\"))\n            known_kw = {k: v for k, v in kw.items() if k in sig.parameters}\n            from .warning_types import PytestDeprecationWarning\n\n            warnings.warn(\n                PytestDeprecationWarning(\n                    f\"{cls} is not using a cooperative constructor and only takes {set(known_kw)}.\\n\"\n                    \"See https://docs.pytest.org/en/stable/deprecations.html\"\n                    \"#constructors-of-custom-pytest-node-subclasses-should-take-kwargs \"\n                    \"for more details.\"\n                )\n            )\n\n            return super().__call__(*k, **known_kw)  # type: ignore[no-any-return,misc]\n\n\nclass Node(abc.ABC, metaclass=NodeMeta):\n    r\"\"\"Base class of :class:`Collector` and :class:`Item`, the components of\n    the test collection tree.\n\n    ``Collector``\\'s are the internal nodes of the tree, and ``Item``\\'s are the\n    leaf nodes.\n    \"\"\"\n\n    # Implemented in the legacypath plugin.\n    #: A ``LEGACY_PATH`` copy of the :attr:`path` attribute. Intended for usage\n    #: for methods not migrated to ``pathlib.Path`` yet, such as\n    #: :meth:`Item.reportinfo <pytest.Item.reportinfo>`. Will be deprecated in\n    #: a future release, prefer using :attr:`path` instead.\n    fspath: LEGACY_PATH\n\n    # Use __slots__ to make attribute access faster.\n    # Note that __dict__ is still available.\n    __slots__ = (\n        \"name\",\n        \"parent\",\n        \"config\",\n        \"session\",\n        \"path\",\n        \"_nodeid\",\n        \"_store\",\n        \"__dict__\",\n    )\n\n    def __init__(\n        self,\n        name: str,\n        parent: Node | None = None,\n        config: Config | None = None,\n        session: Session | None = None,\n        fspath: LEGACY_PATH | None = None,\n        path: Path | None = None,\n        nodeid: str | None = None,\n    ) -> None:\n        #: A unique name within the scope of the parent node.\n        self.name: str = name\n\n        #: The parent collector node.\n        self.parent = parent\n\n        if config:\n            #: The pytest config object.\n            self.config: Config = config\n        else:\n            if not parent:\n                raise TypeError(\"config or parent must be provided\")\n            self.config = parent.config\n\n        if session:\n            #: The pytest session this node is part of.\n            self.session: Session = session\n        else:\n            if not parent:\n                raise TypeError(\"session or parent must be provided\")\n            self.session = parent.session\n\n        if path is None and fspath is None:\n            path = getattr(parent, \"path\", None)\n        #: Filesystem path where this node was collected from (can be None).\n        self.path: pathlib.Path = _imply_path(type(self), path, fspath=fspath)\n\n        # The explicit annotation is to avoid publicly exposing NodeKeywords.\n        #: Keywords/markers collected from all scopes.\n        self.keywords: MutableMapping[str, Any] = NodeKeywords(self)\n\n        #: The marker objects belonging to this node.\n        self.own_markers: list[Mark] = []\n\n        #: Allow adding of extra keywords to use for matching.\n        self.extra_keyword_matches: set[str] = set()\n\n        if nodeid is not None:\n            assert \"::()\" not in nodeid\n            self._nodeid = nodeid\n        else:\n            if not self.parent:\n                raise TypeError(\"nodeid or parent must be provided\")\n            self._nodeid = self.parent.nodeid + \"::\" + self.name\n\n        #: A place where plugins can store information on the node for their\n        #: own use.\n        self.stash: Stash = Stash()\n        # Deprecated alias. Was never public. Can be removed in a few releases.\n        self._store = self.stash\n\n    @classmethod\n    def from_parent(cls, parent: Node, **kw) -> Self:\n        \"\"\"Public constructor for Nodes.\n\n        This indirection got introduced in order to enable removing\n        the fragile logic from the node constructors.\n\n        Subclasses can use ``super().from_parent(...)`` when overriding the\n        construction.\n\n        :param parent: The parent node of this Node.\n        \"\"\"\n        if \"config\" in kw:\n            raise TypeError(\"config is not a valid argument for from_parent\")\n        if \"session\" in kw:\n            raise TypeError(\"session is not a valid argument for from_parent\")\n        return cls._create(parent=parent, **kw)\n\n    @property\n    def ihook(self) -> pluggy.HookRelay:\n        \"\"\"fspath-sensitive hook proxy used to call pytest hooks.\"\"\"\n        return self.session.gethookproxy(self.path)\n\n    def __repr__(self) -> str:\n        return \"<{} {}>\".format(self.__class__.__name__, getattr(self, \"name\", None))\n\n    def warn(self, warning: Warning) -> None:\n        \"\"\"Issue a warning for this Node.\n\n        Warnings will be displayed after the test session, unless explicitly suppressed.\n\n        :param Warning warning:\n            The warning instance to issue.\n\n        :raises ValueError: If ``warning`` instance is not a subclass of Warning.\n\n        Example usage:\n\n        .. code-block:: python\n\n            node.warn(PytestWarning(\"some message\"))\n            node.warn(UserWarning(\"some message\"))\n\n        .. versionchanged:: 6.2\n            Any subclass of :class:`Warning` is now accepted, rather than only\n            :class:`PytestWarning <pytest.PytestWarning>` subclasses.\n        \"\"\"\n        # enforce type checks here to avoid getting a generic type error later otherwise.\n        if not isinstance(warning, Warning):\n            raise ValueError(\n                f\"warning must be an instance of Warning or subclass, got {warning!r}\"\n            )\n        path, lineno = get_fslocation_from_item(self)\n        assert lineno is not None\n        warnings.warn_explicit(\n            warning,\n            category=None,\n            filename=str(path),\n            lineno=lineno + 1,\n        )\n\n    # Methods for ordering nodes.\n\n    @property\n    def nodeid(self) -> str:\n        \"\"\"A ::-separated string denoting its collection tree address.\"\"\"\n        return self._nodeid\n\n    def __hash__(self) -> int:\n        return hash(self._nodeid)\n\n    def setup(self) -> None:\n        pass\n\n    def teardown(self) -> None:\n        pass\n\n    def iter_parents(self) -> Iterator[Node]:\n        \"\"\"Iterate over all parent collectors starting from and including self\n        up to the root of the collection tree.\n\n        .. versionadded:: 8.1\n        \"\"\"\n        parent: Node | None = self\n        while parent is not None:\n            yield parent\n            parent = parent.parent\n\n    def listchain(self) -> list[Node]:\n        \"\"\"Return a list of all parent collectors starting from the root of the\n        collection tree down to and including self.\"\"\"\n        chain = []\n        item: Node | None = self\n        while item is not None:\n            chain.append(item)\n            item = item.parent\n        chain.reverse()\n        return chain\n\n    def add_marker(self, marker: str | MarkDecorator, append: bool = True) -> None:\n        \"\"\"Dynamically add a marker object to the node.\n\n        :param marker:\n            The marker.\n        :param append:\n            Whether to append the marker, or prepend it.\n        \"\"\"\n        from _pytest.mark import MARK_GEN\n\n        if isinstance(marker, MarkDecorator):\n            marker_ = marker\n        elif isinstance(marker, str):\n            marker_ = getattr(MARK_GEN, marker)\n        else:\n            raise ValueError(\"is not a string or pytest.mark.* Marker\")\n        self.keywords[marker_.name] = marker_\n        if append:\n            self.own_markers.append(marker_.mark)\n        else:\n            self.own_markers.insert(0, marker_.mark)\n\n    def iter_markers(self, name: str | None = None) -> Iterator[Mark]:\n        \"\"\"Iterate over all markers of the node.\n\n        :param name: If given, filter the results by the name attribute.\n        :returns: An iterator of the markers of the node.\n        \"\"\"\n        return (x[1] for x in self.iter_markers_with_node(name=name))\n\n    def iter_markers_with_node(\n        self, name: str | None = None\n    ) -> Iterator[tuple[Node, Mark]]:\n        \"\"\"Iterate over all markers of the node.\n\n        :param name: If given, filter the results by the name attribute.\n        :returns: An iterator of (node, mark) tuples.\n        \"\"\"\n        for node in self.iter_parents():\n            for mark in node.own_markers:\n                if name is None or getattr(mark, \"name\", None) == name:\n                    yield node, mark\n\n    @overload\n    def get_closest_marker(self, name: str) -> Mark | None: ...\n\n    @overload\n    def get_closest_marker(self, name: str, default: Mark) -> Mark: ...\n\n    def get_closest_marker(self, name: str, default: Mark | None = None) -> Mark | None:\n        \"\"\"Return the first marker matching the name, from closest (for\n        example function) to farther level (for example module level).\n\n        :param default: Fallback return value if no marker was found.\n        :param name: Name to filter by.\n        \"\"\"\n        return next(self.iter_markers(name=name), default)\n\n    def listextrakeywords(self) -> set[str]:\n        \"\"\"Return a set of all extra keywords in self and any parents.\"\"\"\n        extra_keywords: set[str] = set()\n        for item in self.listchain():\n            extra_keywords.update(item.extra_keyword_matches)\n        return extra_keywords\n\n    def listnames(self) -> list[str]:\n        return [x.name for x in self.listchain()]\n\n    def addfinalizer(self, fin: Callable[[], object]) -> None:\n        \"\"\"Register a function to be called without arguments when this node is\n        finalized.\n\n        This method can only be called when this node is active\n        in a setup chain, for example during self.setup().\n        \"\"\"\n        self.session._setupstate.addfinalizer(fin, self)\n\n    def getparent(self, cls: type[_NodeType]) -> _NodeType | None:\n        \"\"\"Get the closest parent node (including self) which is an instance of\n        the given class.\n\n        :param cls: The node class to search for.\n        :returns: The node, if found.\n        \"\"\"\n        for node in self.iter_parents():\n            if isinstance(node, cls):\n                return node\n        return None\n\n    def _traceback_filter(self, excinfo: ExceptionInfo[BaseException]) -> Traceback:\n        return excinfo.traceback\n\n    def _repr_failure_py(\n        self,\n        excinfo: ExceptionInfo[BaseException],\n        style: TracebackStyle | None = None,\n    ) -> TerminalRepr:\n        from _pytest.fixtures import FixtureLookupError\n\n        if isinstance(excinfo.value, ConftestImportFailure):\n            excinfo = ExceptionInfo.from_exception(excinfo.value.cause)\n        if isinstance(excinfo.value, fail.Exception):\n            if not excinfo.value.pytrace:\n                style = \"value\"\n        if isinstance(excinfo.value, FixtureLookupError):\n            return excinfo.value.formatrepr()\n\n        tbfilter: bool | Callable[[ExceptionInfo[BaseException]], Traceback]\n        if self.config.getoption(\"fulltrace\", False):\n            style = \"long\"\n            tbfilter = False\n        else:\n            tbfilter = self._traceback_filter\n            if style == \"auto\":\n                style = \"long\"\n        # XXX should excinfo.getrepr record all data and toterminal() process it?\n        if style is None:\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n                style = \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"verbose\", 0) > 1:\n            truncate_locals = False\n        else:\n            truncate_locals = True\n\n        truncate_args = False if self.config.getoption(\"verbose\", 0) > 2 else True\n\n        # excinfo.getrepr() formats paths relative to the CWD if `abspath` is False.\n        # It is possible for a fixture/test to change the CWD while this code runs, which\n        # would then result in the user seeing confusing paths in the failure message.\n        # To fix this, if the CWD changed, always display the full absolute path.\n        # It will be better to just always display paths relative to invocation_dir, but\n        # this requires a lot of plumbing (#6428).\n        try:\n            abspath = Path(os.getcwd()) != self.config.invocation_params.dir\n        except OSError:\n            abspath = True\n\n        return excinfo.getrepr(\n            funcargs=True,\n            abspath=abspath,\n            showlocals=self.config.getoption(\"showlocals\", False),\n            style=style,\n            tbfilter=tbfilter,\n            truncate_locals=truncate_locals,\n            truncate_args=truncate_args,\n        )\n\n    def repr_failure(\n        self,\n        excinfo: ExceptionInfo[BaseException],\n        style: TracebackStyle | None = None,\n    ) -> str | TerminalRepr:\n        \"\"\"Return a representation of a collection or test failure.\n\n        .. seealso:: :ref:`non-python tests`\n\n        :param excinfo: Exception information for the failure.\n        \"\"\"\n        return self._repr_failure_py(excinfo, style)\n\n\ndef get_fslocation_from_item(node: Node) -> tuple[str | Path, int | None]:\n    \"\"\"Try to extract the actual location from a node, depending on available attributes:\n\n    * \"location\": a pair (path, lineno)\n    * \"obj\": a Python object that the node wraps.\n    * \"path\": just a path\n\n    :rtype: A tuple of (str|Path, int) with filename and 0-based line number.\n    \"\"\"\n    # See Item.location.\n    location: tuple[str, int | None, str] | None = getattr(node, \"location\", None)\n    if location is not None:\n        return location[:2]\n    obj = getattr(node, \"obj\", None)\n    if obj is not None:\n        return getfslineno(obj)\n    return getattr(node, \"path\", \"unknown location\"), -1\n\n\nclass Collector(Node, abc.ABC):\n    \"\"\"Base class of all collectors.\n\n    Collector create children through `collect()` and thus iteratively build\n    the collection tree.\n    \"\"\"\n\n    class CollectError(Exception):\n        \"\"\"An error during collection, contains a custom message.\"\"\"\n\n    @abc.abstractmethod\n    def collect(self) -> Iterable[Item | Collector]:\n        \"\"\"Collect children (items and collectors) for this collector.\"\"\"\n        raise NotImplementedError(\"abstract\")\n\n    # TODO: This omits the style= parameter which breaks Liskov Substitution.\n    def repr_failure(  # type: ignore[override]\n        self, excinfo: ExceptionInfo[BaseException]\n    ) -> str | TerminalRepr:\n        \"\"\"Return a representation of a collection failure.\n\n        :param excinfo: Exception information for the failure.\n        \"\"\"\n        if isinstance(excinfo.value, self.CollectError) and not self.config.getoption(\n            \"fulltrace\", False\n        ):\n            exc = excinfo.value\n            return str(exc.args[0])\n\n        # Respect explicit tbstyle option, but default to \"short\"\n        # (_repr_failure_py uses \"long\" with \"fulltrace\" option always).\n        tbstyle = self.config.getoption(\"tbstyle\", \"auto\")\n        if tbstyle == \"auto\":\n            tbstyle = \"short\"\n\n        return self._repr_failure_py(excinfo, style=tbstyle)\n\n    def _traceback_filter(self, excinfo: ExceptionInfo[BaseException]) -> Traceback:\n        if hasattr(self, \"path\"):\n            traceback = excinfo.traceback\n            ntraceback = traceback.cut(path=self.path)\n            if ntraceback == traceback:\n                ntraceback = ntraceback.cut(excludepath=tracebackcutdir)\n            return ntraceback.filter(excinfo)\n        return excinfo.traceback\n\n\ndef _check_initialpaths_for_relpath(session: Session, path: Path) -> str | None:\n    for initial_path in session._initialpaths:\n        if commonpath(path, initial_path) == initial_path:\n            rel = str(path.relative_to(initial_path))\n            return \"\" if rel == \".\" else rel\n    return None\n\n\nclass FSCollector(Collector, abc.ABC):\n    \"\"\"Base class for filesystem collectors.\"\"\"\n\n    def __init__(\n        self,\n        fspath: LEGACY_PATH | None = None,\n        path_or_parent: Path | Node | None = None,\n        path: Path | None = None,\n        name: str | None = None,\n        parent: Node | None = None,\n        config: Config | None = None,\n        session: Session | None = None,\n        nodeid: str | None = None,\n    ) -> None:\n        if path_or_parent:\n            if isinstance(path_or_parent, Node):\n                assert parent is None\n                parent = cast(FSCollector, path_or_parent)\n            elif isinstance(path_or_parent, Path):\n                assert path is None\n                path = path_or_parent\n\n        path = _imply_path(type(self), path, fspath=fspath)\n        if name is None:\n            name = path.name\n            if parent is not None and parent.path != path:\n                try:\n                    rel = path.relative_to(parent.path)\n                except ValueError:\n                    pass\n                else:\n                    name = str(rel)\n                name = name.replace(os.sep, SEP)\n        self.path = path\n\n        if session is None:\n            assert parent is not None\n            session = parent.session\n\n        if nodeid is None:\n            try:\n                nodeid = str(self.path.relative_to(session.config.rootpath))\n            except ValueError:\n                nodeid = _check_initialpaths_for_relpath(session, path)\n\n            if nodeid and os.sep != SEP:\n                nodeid = nodeid.replace(os.sep, SEP)\n\n        super().__init__(\n            name=name,\n            parent=parent,\n            config=config,\n            session=session,\n            nodeid=nodeid,\n            path=path,\n        )\n\n    @classmethod\n    def from_parent(\n        cls,\n        parent,\n        *,\n        fspath: LEGACY_PATH | None = None,\n        path: Path | None = None,\n        **kw,\n    ) -> Self:\n        \"\"\"The public constructor.\"\"\"\n        return super().from_parent(parent=parent, fspath=fspath, path=path, **kw)\n\n\nclass File(FSCollector, abc.ABC):\n    \"\"\"Base class for collecting tests from a file.\n\n    :ref:`non-python tests`.\n    \"\"\"\n\n\nclass Directory(FSCollector, abc.ABC):\n    \"\"\"Base class for collecting files from a directory.\n\n    A basic directory collector does the following: goes over the files and\n    sub-directories in the directory and creates collectors for them by calling\n    the hooks :hook:`pytest_collect_directory` and :hook:`pytest_collect_file`,\n    after checking that they are not ignored using\n    :hook:`pytest_ignore_collect`.\n\n    The default directory collectors are :class:`~pytest.Dir` and\n    :class:`~pytest.Package`.\n\n    .. versionadded:: 8.0\n\n    :ref:`custom directory collectors`.\n    \"\"\"\n\n\nclass Item(Node, abc.ABC):\n    \"\"\"Base class of all test invocation items.\n\n    Note that for a single function there might be multiple test invocation items.\n    \"\"\"\n\n    nextitem = None\n\n    def __init__(\n        self,\n        name,\n        parent=None,\n        config: Config | None = None,\n        session: Session | None = None,\n        nodeid: str | None = None,\n        **kw,\n    ) -> None:\n        # The first two arguments are intentionally passed positionally,\n        # to keep plugins who define a node type which inherits from\n        # (pytest.Item, pytest.File) working (see issue #8435).\n        # They can be made kwargs when the deprecation above is done.\n        super().__init__(\n            name,\n            parent,\n            config=config,\n            session=session,\n            nodeid=nodeid,\n            **kw,\n        )\n        self._report_sections: list[tuple[str, str, str]] = []\n\n        #: A list of tuples (name, value) that holds user defined properties\n        #: for this test.\n        self.user_properties: list[tuple[str, object]] = []\n\n        self._check_item_and_collector_diamond_inheritance()\n\n    def _check_item_and_collector_diamond_inheritance(self) -> None:\n        \"\"\"\n        Check if the current type inherits from both File and Collector\n        at the same time, emitting a warning accordingly (#8447).\n        \"\"\"\n        cls = type(self)\n\n        # We inject an attribute in the type to avoid issuing this warning\n        # for the same class more than once, which is not helpful.\n        # It is a hack, but was deemed acceptable in order to avoid\n        # flooding the user in the common case.\n        attr_name = \"_pytest_diamond_inheritance_warning_shown\"\n        if getattr(cls, attr_name, False):\n            return\n        setattr(cls, attr_name, True)\n\n        problems = \", \".join(\n            base.__name__ for base in cls.__bases__ if issubclass(base, Collector)\n        )\n        if problems:\n            warnings.warn(\n                f\"{cls.__name__} is an Item subclass and should not be a collector, \"\n                f\"however its bases {problems} are collectors.\\n\"\n                \"Please split the Collectors and the Item into separate node types.\\n\"\n                \"Pytest Doc example: https://docs.pytest.org/en/latest/example/nonpython.html\\n\"\n                \"example pull request on a plugin: https://github.com/asmeurer/pytest-flakes/pull/40/\",\n                PytestWarning,\n            )\n\n    @abc.abstractmethod\n    def runtest(self) -> None:\n        \"\"\"Run the test case for this item.\n\n        Must be implemented by subclasses.\n\n        .. seealso:: :ref:`non-python tests`\n        \"\"\"\n        raise NotImplementedError(\"runtest must be implemented by Item subclass\")\n\n    def add_report_section(self, when: str, key: str, content: str) -> None:\n        \"\"\"Add a new report section, similar to what's done internally to add\n        stdout and stderr captured output::\n\n            item.add_report_section(\"call\", \"stdout\", \"report section contents\")\n\n        :param str when:\n            One of the possible capture states, ``\"setup\"``, ``\"call\"``, ``\"teardown\"``.\n        :param str key:\n            Name of the section, can be customized at will. Pytest uses ``\"stdout\"`` and\n            ``\"stderr\"`` internally.\n        :param str content:\n            The full contents as a string.\n        \"\"\"\n        if content:\n            self._report_sections.append((when, key, content))\n\n    def reportinfo(self) -> tuple[os.PathLike[str] | str, int | None, str]:\n        \"\"\"Get location information for this item for test reports.\n\n        Returns a tuple with three elements:\n\n        - The path of the test (default ``self.path``)\n        - The 0-based line number of the test (default ``None``)\n        - A name of the test to be shown (default ``\"\"``)\n\n        .. seealso:: :ref:`non-python tests`\n        \"\"\"\n        return self.path, None, \"\"\n\n    @cached_property\n    def location(self) -> tuple[str, int | None, str]:\n        \"\"\"\n        Returns a tuple of ``(relfspath, lineno, testname)`` for this item\n        where ``relfspath`` is file path relative to ``config.rootpath``\n        and lineno is a 0-based line number.\n        \"\"\"\n        location = self.reportinfo()\n        path = absolutepath(location[0])\n        relfspath = self.session._node_location_to_relpath(path)\n        assert type(location[2]) is str\n        return (relfspath, location[1], location[2])\n", "src/_pytest/timing.py": "\"\"\"Indirection for time functions.\n\nWe intentionally grab some \"time\" functions internally to avoid tests mocking \"time\" to affect\npytest runtime information (issue #185).\n\nFixture \"mock_timing\" also interacts with this module for pytest's own tests.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom time import perf_counter\nfrom time import sleep\nfrom time import time\n\n\n__all__ = [\"perf_counter\", \"sleep\", \"time\"]\n", "src/_pytest/stash.py": "from __future__ import annotations\n\nfrom typing import Any\nfrom typing import cast\nfrom typing import Generic\nfrom typing import TypeVar\n\n\n__all__ = [\"Stash\", \"StashKey\"]\n\n\nT = TypeVar(\"T\")\nD = TypeVar(\"D\")\n\n\nclass StashKey(Generic[T]):\n    \"\"\"``StashKey`` is an object used as a key to a :class:`Stash`.\n\n    A ``StashKey`` is associated with the type ``T`` of the value of the key.\n\n    A ``StashKey`` is unique and cannot conflict with another key.\n\n    .. versionadded:: 7.0\n    \"\"\"\n\n    __slots__ = ()\n\n\nclass Stash:\n    r\"\"\"``Stash`` is a type-safe heterogeneous mutable mapping that\n    allows keys and value types to be defined separately from\n    where it (the ``Stash``) is created.\n\n    Usually you will be given an object which has a ``Stash``, for example\n    :class:`~pytest.Config` or a :class:`~_pytest.nodes.Node`:\n\n    .. code-block:: python\n\n        stash: Stash = some_object.stash\n\n    If a module or plugin wants to store data in this ``Stash``, it creates\n    :class:`StashKey`\\s for its keys (at the module level):\n\n    .. code-block:: python\n\n        # At the top-level of the module\n        some_str_key = StashKey[str]()\n        some_bool_key = StashKey[bool]()\n\n    To store information:\n\n    .. code-block:: python\n\n        # Value type must match the key.\n        stash[some_str_key] = \"value\"\n        stash[some_bool_key] = True\n\n    To retrieve the information:\n\n    .. code-block:: python\n\n        # The static type of some_str is str.\n        some_str = stash[some_str_key]\n        # The static type of some_bool is bool.\n        some_bool = stash[some_bool_key]\n\n    .. versionadded:: 7.0\n    \"\"\"\n\n    __slots__ = (\"_storage\",)\n\n    def __init__(self) -> None:\n        self._storage: dict[StashKey[Any], object] = {}\n\n    def __setitem__(self, key: StashKey[T], value: T) -> None:\n        \"\"\"Set a value for key.\"\"\"\n        self._storage[key] = value\n\n    def __getitem__(self, key: StashKey[T]) -> T:\n        \"\"\"Get the value for key.\n\n        Raises ``KeyError`` if the key wasn't set before.\n        \"\"\"\n        return cast(T, self._storage[key])\n\n    def get(self, key: StashKey[T], default: D) -> T | D:\n        \"\"\"Get the value for key, or return default if the key wasn't set\n        before.\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def setdefault(self, key: StashKey[T], default: T) -> T:\n        \"\"\"Return the value of key if already set, otherwise set the value\n        of key to default and return default.\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default\n\n    def __delitem__(self, key: StashKey[T]) -> None:\n        \"\"\"Delete the value for key.\n\n        Raises ``KeyError`` if the key wasn't set before.\n        \"\"\"\n        del self._storage[key]\n\n    def __contains__(self, key: StashKey[T]) -> bool:\n        \"\"\"Return whether key was set.\"\"\"\n        return key in self._storage\n\n    def __len__(self) -> int:\n        \"\"\"Return how many items exist in the stash.\"\"\"\n        return len(self._storage)\n", "src/_pytest/scope.py": "\"\"\"\nScope definition and related utilities.\n\nThose are defined here, instead of in the 'fixtures' module because\ntheir use is spread across many other pytest modules, and centralizing it in 'fixtures'\nwould cause circular references.\n\nAlso this makes the module light to import, as it should.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom enum import Enum\nfrom functools import total_ordering\nfrom typing import Literal\n\n\n_ScopeName = Literal[\"session\", \"package\", \"module\", \"class\", \"function\"]\n\n\n@total_ordering\nclass Scope(Enum):\n    \"\"\"\n    Represents one of the possible fixture scopes in pytest.\n\n    Scopes are ordered from lower to higher, that is:\n\n              ->>> higher ->>>\n\n    Function < Class < Module < Package < Session\n\n              <<<- lower  <<<-\n    \"\"\"\n\n    # Scopes need to be listed from lower to higher.\n    Function: _ScopeName = \"function\"\n    Class: _ScopeName = \"class\"\n    Module: _ScopeName = \"module\"\n    Package: _ScopeName = \"package\"\n    Session: _ScopeName = \"session\"\n\n    def next_lower(self) -> Scope:\n        \"\"\"Return the next lower scope.\"\"\"\n        index = _SCOPE_INDICES[self]\n        if index == 0:\n            raise ValueError(f\"{self} is the lower-most scope\")\n        return _ALL_SCOPES[index - 1]\n\n    def next_higher(self) -> Scope:\n        \"\"\"Return the next higher scope.\"\"\"\n        index = _SCOPE_INDICES[self]\n        if index == len(_SCOPE_INDICES) - 1:\n            raise ValueError(f\"{self} is the upper-most scope\")\n        return _ALL_SCOPES[index + 1]\n\n    def __lt__(self, other: Scope) -> bool:\n        self_index = _SCOPE_INDICES[self]\n        other_index = _SCOPE_INDICES[other]\n        return self_index < other_index\n\n    @classmethod\n    def from_user(\n        cls, scope_name: _ScopeName, descr: str, where: str | None = None\n    ) -> Scope:\n        \"\"\"\n        Given a scope name from the user, return the equivalent Scope enum. Should be used\n        whenever we want to convert a user provided scope name to its enum object.\n\n        If the scope name is invalid, construct a user friendly message and call pytest.fail.\n        \"\"\"\n        from _pytest.outcomes import fail\n\n        try:\n            # Holding this reference is necessary for mypy at the moment.\n            scope = Scope(scope_name)\n        except ValueError:\n            fail(\n                \"{} {}got an unexpected scope value '{}'\".format(\n                    descr, f\"from {where} \" if where else \"\", scope_name\n                ),\n                pytrace=False,\n            )\n        return scope\n\n\n_ALL_SCOPES = list(Scope)\n_SCOPE_INDICES = {scope: index for index, scope in enumerate(_ALL_SCOPES)}\n\n\n# Ordered list of scopes which can contain many tests (in practice all except Function).\nHIGH_SCOPES = [x for x in Scope if x is not Scope.Function]\n", "src/_pytest/warnings.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nfrom contextlib import contextmanager\nimport sys\nfrom typing import Generator\nfrom typing import Literal\nimport warnings\n\nfrom _pytest.config import apply_warning_filters\nfrom _pytest.config import Config\nfrom _pytest.config import parse_warning_filter\nfrom _pytest.main import Session\nfrom _pytest.nodes import Item\nfrom _pytest.terminal import TerminalReporter\nimport pytest\n\n\ndef pytest_configure(config: Config) -> None:\n    config.addinivalue_line(\n        \"markers\",\n        \"filterwarnings(warning): add a warning filter to the given test. \"\n        \"see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings \",\n    )\n\n\n@contextmanager\ndef catch_warnings_for_item(\n    config: Config,\n    ihook,\n    when: Literal[\"config\", \"collect\", \"runtest\"],\n    item: Item | None,\n) -> Generator[None, None, None]:\n    \"\"\"Context manager that catches warnings generated in the contained execution block.\n\n    ``item`` can be None if we are not in the context of an item execution.\n\n    Each warning captured triggers the ``pytest_warning_recorded`` hook.\n    \"\"\"\n    config_filters = config.getini(\"filterwarnings\")\n    cmdline_filters = config.known_args_namespace.pythonwarnings or []\n    with warnings.catch_warnings(record=True) as log:\n        # mypy can't infer that record=True means log is not None; help it.\n        assert log is not None\n\n        if not sys.warnoptions:\n            # If user is not explicitly configuring warning filters, show deprecation warnings by default (#2908).\n            warnings.filterwarnings(\"always\", category=DeprecationWarning)\n            warnings.filterwarnings(\"always\", category=PendingDeprecationWarning)\n\n        # To be enabled in pytest 9.0.0.\n        # warnings.filterwarnings(\"error\", category=pytest.PytestRemovedIn9Warning)\n\n        apply_warning_filters(config_filters, cmdline_filters)\n\n        # apply filters from \"filterwarnings\" marks\n        nodeid = \"\" if item is None else item.nodeid\n        if item is not None:\n            for mark in item.iter_markers(name=\"filterwarnings\"):\n                for arg in mark.args:\n                    warnings.filterwarnings(*parse_warning_filter(arg, escape=False))\n\n        try:\n            yield\n        finally:\n            for warning_message in log:\n                ihook.pytest_warning_recorded.call_historic(\n                    kwargs=dict(\n                        warning_message=warning_message,\n                        nodeid=nodeid,\n                        when=when,\n                        location=None,\n                    )\n                )\n\n\ndef warning_record_to_str(warning_message: warnings.WarningMessage) -> str:\n    \"\"\"Convert a warnings.WarningMessage to a string.\"\"\"\n    warn_msg = warning_message.message\n    msg = warnings.formatwarning(\n        str(warn_msg),\n        warning_message.category,\n        warning_message.filename,\n        warning_message.lineno,\n        warning_message.line,\n    )\n    if warning_message.source is not None:\n        try:\n            import tracemalloc\n        except ImportError:\n            pass\n        else:\n            tb = tracemalloc.get_object_traceback(warning_message.source)\n            if tb is not None:\n                formatted_tb = \"\\n\".join(tb.format())\n                # Use a leading new line to better separate the (large) output\n                # from the traceback to the previous warning text.\n                msg += f\"\\nObject allocated at:\\n{formatted_tb}\"\n            else:\n                # No need for a leading new line.\n                url = \"https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings\"\n                msg += \"Enable tracemalloc to get traceback where the object was allocated.\\n\"\n                msg += f\"See {url} for more info.\"\n    return msg\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:\n    with catch_warnings_for_item(\n        config=item.config, ihook=item.ihook, when=\"runtest\", item=item\n    ):\n        return (yield)\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_collection(session: Session) -> Generator[None, object, object]:\n    config = session.config\n    with catch_warnings_for_item(\n        config=config, ihook=config.hook, when=\"collect\", item=None\n    ):\n        return (yield)\n\n\n@pytest.hookimpl(wrapper=True)\ndef pytest_terminal_summary(\n    terminalreporter: TerminalReporter,\n) -> Generator[None, None, None]:\n    config = terminalreporter.config\n    with catch_warnings_for_item(\n        config=config, ihook=config.hook, when=\"config\", item=None\n    ):\n        return (yield)\n\n\n@pytest.hookimpl(wrapper=True)\ndef pytest_sessionfinish(session: Session) -> Generator[None, None, None]:\n    config = session.config\n    with catch_warnings_for_item(\n        config=config, ihook=config.hook, when=\"config\", item=None\n    ):\n        return (yield)\n\n\n@pytest.hookimpl(wrapper=True)\ndef pytest_load_initial_conftests(\n    early_config: Config,\n) -> Generator[None, None, None]:\n    with catch_warnings_for_item(\n        config=early_config, ihook=early_config.hook, when=\"config\", item=None\n    ):\n        return (yield)\n", "src/_pytest/python.py": "# mypy: allow-untyped-defs\n\"\"\"Python test discovery, setup and run of test functions.\"\"\"\n\nfrom __future__ import annotations\n\nimport abc\nfrom collections import Counter\nfrom collections import defaultdict\nimport dataclasses\nimport enum\nimport fnmatch\nfrom functools import partial\nimport inspect\nimport itertools\nimport os\nfrom pathlib import Path\nimport types\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import final\nfrom typing import Generator\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import Pattern\nfrom typing import Sequence\nfrom typing import TYPE_CHECKING\nimport warnings\n\nimport _pytest\nfrom _pytest import fixtures\nfrom _pytest import nodes\nfrom _pytest._code import filter_traceback\nfrom _pytest._code import getfslineno\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest._code.code import TerminalRepr\nfrom _pytest._code.code import Traceback\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest.compat import ascii_escaped\nfrom _pytest.compat import get_default_arg_names\nfrom _pytest.compat import get_real_func\nfrom _pytest.compat import getimfunc\nfrom _pytest.compat import is_async_function\nfrom _pytest.compat import is_generator\nfrom _pytest.compat import LEGACY_PATH\nfrom _pytest.compat import NOTSET\nfrom _pytest.compat import safe_getattr\nfrom _pytest.compat import safe_isclass\nfrom _pytest.config import Config\nfrom _pytest.config import hookimpl\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import FixtureDef\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.fixtures import FuncFixtureInfo\nfrom _pytest.fixtures import get_scope_node\nfrom _pytest.main import Session\nfrom _pytest.mark import MARK_GEN\nfrom _pytest.mark import ParameterSet\nfrom _pytest.mark.structures import get_unpacked_marks\nfrom _pytest.mark.structures import Mark\nfrom _pytest.mark.structures import MarkDecorator\nfrom _pytest.mark.structures import normalize_mark_list\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import skip\nfrom _pytest.pathlib import fnmatch_ex\nfrom _pytest.pathlib import import_path\nfrom _pytest.pathlib import ImportPathMismatchError\nfrom _pytest.pathlib import scandir\nfrom _pytest.scope import _ScopeName\nfrom _pytest.scope import Scope\nfrom _pytest.stash import StashKey\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestReturnNotNoneWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\n\n\nif TYPE_CHECKING:\n    from typing import Self\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    parser.addini(\n        \"python_files\",\n        type=\"args\",\n        # NOTE: default is also used in AssertionRewritingHook.\n        default=[\"test_*.py\", \"*_test.py\"],\n        help=\"Glob-style file patterns for Python test module discovery\",\n    )\n    parser.addini(\n        \"python_classes\",\n        type=\"args\",\n        default=[\"Test\"],\n        help=\"Prefixes or glob names for Python test class discovery\",\n    )\n    parser.addini(\n        \"python_functions\",\n        type=\"args\",\n        default=[\"test\"],\n        help=\"Prefixes or glob names for Python test function and method discovery\",\n    )\n    parser.addini(\n        \"disable_test_id_escaping_and_forfeit_all_rights_to_community_support\",\n        type=\"bool\",\n        default=False,\n        help=\"Disable string escape non-ASCII characters, might cause unwanted \"\n        \"side effects(use at your own risk)\",\n    )\n\n\ndef pytest_generate_tests(metafunc: Metafunc) -> None:\n    for marker in metafunc.definition.iter_markers(name=\"parametrize\"):\n        metafunc.parametrize(*marker.args, **marker.kwargs, _param_mark=marker)\n\n\ndef pytest_configure(config: Config) -> None:\n    config.addinivalue_line(\n        \"markers\",\n        \"parametrize(argnames, argvalues): call a test function multiple \"\n        \"times passing in different arguments in turn. argvalues generally \"\n        \"needs to be a list of values if argnames specifies only one name \"\n        \"or a list of tuples of values if argnames specifies multiple names. \"\n        \"Example: @parametrize('arg1', [1,2]) would lead to two calls of the \"\n        \"decorated test function, one with arg1=1 and another with arg1=2.\"\n        \"see https://docs.pytest.org/en/stable/how-to/parametrize.html for more info \"\n        \"and examples.\",\n    )\n    config.addinivalue_line(\n        \"markers\",\n        \"usefixtures(fixturename1, fixturename2, ...): mark tests as needing \"\n        \"all of the specified fixtures. see \"\n        \"https://docs.pytest.org/en/stable/explanation/fixtures.html#usefixtures \",\n    )\n\n\ndef async_warn_and_skip(nodeid: str) -> None:\n    msg = \"async def functions are not natively supported and have been skipped.\\n\"\n    msg += (\n        \"You need to install a suitable plugin for your async framework, for example:\\n\"\n    )\n    msg += \"  - anyio\\n\"\n    msg += \"  - pytest-asyncio\\n\"\n    msg += \"  - pytest-tornasync\\n\"\n    msg += \"  - pytest-trio\\n\"\n    msg += \"  - pytest-twisted\"\n    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))\n    skip(reason=\"async def function and no async plugin installed (see warnings)\")\n\n\n@hookimpl(trylast=True)\ndef pytest_pyfunc_call(pyfuncitem: Function) -> object | None:\n    testfunction = pyfuncitem.obj\n    if is_async_function(testfunction):\n        async_warn_and_skip(pyfuncitem.nodeid)\n    funcargs = pyfuncitem.funcargs\n    testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n    result = testfunction(**testargs)\n    if hasattr(result, \"__await__\") or hasattr(result, \"__aiter__\"):\n        async_warn_and_skip(pyfuncitem.nodeid)\n    elif result is not None:\n        warnings.warn(\n            PytestReturnNotNoneWarning(\n                f\"Expected None, but {pyfuncitem.nodeid} returned {result!r}, which will be an error in a \"\n                \"future version of pytest.  Did you mean to use `assert` instead of `return`?\"\n            )\n        )\n    return True\n\n\ndef pytest_collect_directory(\n    path: Path, parent: nodes.Collector\n) -> nodes.Collector | None:\n    pkginit = path / \"__init__.py\"\n    try:\n        has_pkginit = pkginit.is_file()\n    except PermissionError:\n        # See https://github.com/pytest-dev/pytest/issues/12120#issuecomment-2106349096.\n        return None\n    if has_pkginit:\n        return Package.from_parent(parent, path=path)\n    return None\n\n\ndef pytest_collect_file(file_path: Path, parent: nodes.Collector) -> Module | None:\n    if file_path.suffix == \".py\":\n        if not parent.session.isinitpath(file_path):\n            if not path_matches_patterns(\n                file_path, parent.config.getini(\"python_files\")\n            ):\n                return None\n        ihook = parent.session.gethookproxy(file_path)\n        module: Module = ihook.pytest_pycollect_makemodule(\n            module_path=file_path, parent=parent\n        )\n        return module\n    return None\n\n\ndef path_matches_patterns(path: Path, patterns: Iterable[str]) -> bool:\n    \"\"\"Return whether path matches any of the patterns in the list of globs given.\"\"\"\n    return any(fnmatch_ex(pattern, path) for pattern in patterns)\n\n\ndef pytest_pycollect_makemodule(module_path: Path, parent) -> Module:\n    return Module.from_parent(parent, path=module_path)\n\n\n@hookimpl(trylast=True)\ndef pytest_pycollect_makeitem(\n    collector: Module | Class, name: str, obj: object\n) -> None | nodes.Item | nodes.Collector | list[nodes.Item | nodes.Collector]:\n    assert isinstance(collector, (Class, Module)), type(collector)\n    # Nothing was collected elsewhere, let's do it here.\n    if safe_isclass(obj):\n        if collector.istestclass(obj, name):\n            return Class.from_parent(collector, name=name, obj=obj)\n    elif collector.istestfunction(obj, name):\n        # mock seems to store unbound methods (issue473), normalize it.\n        obj = getattr(obj, \"__func__\", obj)\n        # We need to try and unwrap the function if it's a functools.partial\n        # or a functools.wrapped.\n        # We mustn't if it's been wrapped with mock.patch (python 2 only).\n        if not (inspect.isfunction(obj) or inspect.isfunction(get_real_func(obj))):\n            filename, lineno = getfslineno(obj)\n            warnings.warn_explicit(\n                message=PytestCollectionWarning(\n                    f\"cannot collect {name!r} because it is not a function.\"\n                ),\n                category=None,\n                filename=str(filename),\n                lineno=lineno + 1,\n            )\n        elif getattr(obj, \"__test__\", True):\n            if is_generator(obj):\n                res = Function.from_parent(collector, name=name)\n                reason = (\n                    f\"yield tests were removed in pytest 4.0 - {name} will be ignored\"\n                )\n                res.add_marker(MARK_GEN.xfail(run=False, reason=reason))\n                res.warn(PytestCollectionWarning(reason))\n                return res\n            else:\n                return list(collector._genfunctions(name, obj))\n    return None\n\n\nclass PyobjMixin(nodes.Node):\n    \"\"\"this mix-in inherits from Node to carry over the typing information\n\n    as its intended to always mix in before a node\n    its position in the mro is unaffected\"\"\"\n\n    _ALLOW_MARKERS = True\n\n    @property\n    def module(self):\n        \"\"\"Python module object this node was collected from (can be None).\"\"\"\n        node = self.getparent(Module)\n        return node.obj if node is not None else None\n\n    @property\n    def cls(self):\n        \"\"\"Python class object this node was collected from (can be None).\"\"\"\n        node = self.getparent(Class)\n        return node.obj if node is not None else None\n\n    @property\n    def instance(self):\n        \"\"\"Python instance object the function is bound to.\n\n        Returns None if not a test method, e.g. for a standalone test function,\n        a class or a module.\n        \"\"\"\n        # Overridden by Function.\n        return None\n\n    @property\n    def obj(self):\n        \"\"\"Underlying Python object.\"\"\"\n        obj = getattr(self, \"_obj\", None)\n        if obj is None:\n            self._obj = obj = self._getobj()\n            # XXX evil hack\n            # used to avoid Function marker duplication\n            if self._ALLOW_MARKERS:\n                self.own_markers.extend(get_unpacked_marks(self.obj))\n                # This assumes that `obj` is called before there is a chance\n                # to add custom keys to `self.keywords`, so no fear of overriding.\n                self.keywords.update((mark.name, mark) for mark in self.own_markers)\n        return obj\n\n    @obj.setter\n    def obj(self, value):\n        self._obj = value\n\n    def _getobj(self):\n        \"\"\"Get the underlying Python object. May be overwritten by subclasses.\"\"\"\n        # TODO: Improve the type of `parent` such that assert/ignore aren't needed.\n        assert self.parent is not None\n        obj = self.parent.obj  # type: ignore[attr-defined]\n        return getattr(obj, self.name)\n\n    def getmodpath(self, stopatmodule: bool = True, includemodule: bool = False) -> str:\n        \"\"\"Return Python path relative to the containing module.\"\"\"\n        parts = []\n        for node in self.iter_parents():\n            name = node.name\n            if isinstance(node, Module):\n                name = os.path.splitext(name)[0]\n                if stopatmodule:\n                    if includemodule:\n                        parts.append(name)\n                    break\n            parts.append(name)\n        parts.reverse()\n        return \".\".join(parts)\n\n    def reportinfo(self) -> tuple[os.PathLike[str] | str, int | None, str]:\n        # XXX caching?\n        path, lineno = getfslineno(self.obj)\n        modpath = self.getmodpath()\n        return path, lineno, modpath\n\n\n# As an optimization, these builtin attribute names are pre-ignored when\n# iterating over an object during collection -- the pytest_pycollect_makeitem\n# hook is not called for them.\n# fmt: off\nclass _EmptyClass: pass  # noqa: E701\nIGNORED_ATTRIBUTES = frozenset.union(\n    frozenset(),\n    # Module.\n    dir(types.ModuleType(\"empty_module\")),\n    # Some extra module attributes the above doesn't catch.\n    {\"__builtins__\", \"__file__\", \"__cached__\"},\n    # Class.\n    dir(_EmptyClass),\n    # Instance.\n    dir(_EmptyClass()),\n)\ndel _EmptyClass\n# fmt: on\n\n\nclass PyCollector(PyobjMixin, nodes.Collector, abc.ABC):\n    def funcnamefilter(self, name: str) -> bool:\n        return self._matches_prefix_or_glob_option(\"python_functions\", name)\n\n    def isnosetest(self, obj: object) -> bool:\n        \"\"\"Look for the __test__ attribute, which is applied by the\n        @nose.tools.istest decorator.\n        \"\"\"\n        # We explicitly check for \"is True\" here to not mistakenly treat\n        # classes with a custom __getattr__ returning something truthy (like a\n        # function) as test classes.\n        return safe_getattr(obj, \"__test__\", False) is True\n\n    def classnamefilter(self, name: str) -> bool:\n        return self._matches_prefix_or_glob_option(\"python_classes\", name)\n\n    def istestfunction(self, obj: object, name: str) -> bool:\n        if self.funcnamefilter(name) or self.isnosetest(obj):\n            if isinstance(obj, (staticmethod, classmethod)):\n                # staticmethods and classmethods need to be unwrapped.\n                obj = safe_getattr(obj, \"__func__\", False)\n            return callable(obj) and fixtures.getfixturemarker(obj) is None\n        else:\n            return False\n\n    def istestclass(self, obj: object, name: str) -> bool:\n        if not (self.classnamefilter(name) or self.isnosetest(obj)):\n            return False\n        if inspect.isabstract(obj):\n            return False\n        return True\n\n    def _matches_prefix_or_glob_option(self, option_name: str, name: str) -> bool:\n        \"\"\"Check if the given name matches the prefix or glob-pattern defined\n        in ini configuration.\"\"\"\n        for option in self.config.getini(option_name):\n            if name.startswith(option):\n                return True\n            # Check that name looks like a glob-string before calling fnmatch\n            # because this is called for every name in each collected module,\n            # and fnmatch is somewhat expensive to call.\n            elif (\"*\" in option or \"?\" in option or \"[\" in option) and fnmatch.fnmatch(\n                name, option\n            ):\n                return True\n        return False\n\n    def collect(self) -> Iterable[nodes.Item | nodes.Collector]:\n        if not getattr(self.obj, \"__test__\", True):\n            return []\n\n        # Avoid random getattrs and peek in the __dict__ instead.\n        dicts = [getattr(self.obj, \"__dict__\", {})]\n        if isinstance(self.obj, type):\n            for basecls in self.obj.__mro__:\n                dicts.append(basecls.__dict__)\n\n        # In each class, nodes should be definition ordered.\n        # __dict__ is definition ordered.\n        seen: set[str] = set()\n        dict_values: list[list[nodes.Item | nodes.Collector]] = []\n        ihook = self.ihook\n        for dic in dicts:\n            values: list[nodes.Item | nodes.Collector] = []\n            # Note: seems like the dict can change during iteration -\n            # be careful not to remove the list() without consideration.\n            for name, obj in list(dic.items()):\n                if name in IGNORED_ATTRIBUTES:\n                    continue\n                if name in seen:\n                    continue\n                seen.add(name)\n                res = ihook.pytest_pycollect_makeitem(\n                    collector=self, name=name, obj=obj\n                )\n                if res is None:\n                    continue\n                elif isinstance(res, list):\n                    values.extend(res)\n                else:\n                    values.append(res)\n            dict_values.append(values)\n\n        # Between classes in the class hierarchy, reverse-MRO order -- nodes\n        # inherited from base classes should come before subclasses.\n        result = []\n        for values in reversed(dict_values):\n            result.extend(values)\n        return result\n\n    def _genfunctions(self, name: str, funcobj) -> Iterator[Function]:\n        modulecol = self.getparent(Module)\n        assert modulecol is not None\n        module = modulecol.obj\n        clscol = self.getparent(Class)\n        cls = clscol and clscol.obj or None\n\n        definition = FunctionDefinition.from_parent(self, name=name, callobj=funcobj)\n        fixtureinfo = definition._fixtureinfo\n\n        # pytest_generate_tests impls call metafunc.parametrize() which fills\n        # metafunc._calls, the outcome of the hook.\n        metafunc = Metafunc(\n            definition=definition,\n            fixtureinfo=fixtureinfo,\n            config=self.config,\n            cls=cls,\n            module=module,\n            _ispytest=True,\n        )\n        methods = []\n        if hasattr(module, \"pytest_generate_tests\"):\n            methods.append(module.pytest_generate_tests)\n        if cls is not None and hasattr(cls, \"pytest_generate_tests\"):\n            methods.append(cls().pytest_generate_tests)\n        self.ihook.pytest_generate_tests.call_extra(methods, dict(metafunc=metafunc))\n\n        if not metafunc._calls:\n            yield Function.from_parent(self, name=name, fixtureinfo=fixtureinfo)\n        else:\n            # Direct parametrizations taking place in module/class-specific\n            # `metafunc.parametrize` calls may have shadowed some fixtures, so make sure\n            # we update what the function really needs a.k.a its fixture closure. Note that\n            # direct parametrizations using `@pytest.mark.parametrize` have already been considered\n            # into making the closure using `ignore_args` arg to `getfixtureclosure`.\n            fixtureinfo.prune_dependency_tree()\n\n            for callspec in metafunc._calls:\n                subname = f\"{name}[{callspec.id}]\"\n                yield Function.from_parent(\n                    self,\n                    name=subname,\n                    callspec=callspec,\n                    fixtureinfo=fixtureinfo,\n                    keywords={callspec.id: True},\n                    originalname=name,\n                )\n\n\ndef importtestmodule(\n    path: Path,\n    config: Config,\n):\n    # We assume we are only called once per module.\n    importmode = config.getoption(\"--import-mode\")\n    try:\n        mod = import_path(\n            path,\n            mode=importmode,\n            root=config.rootpath,\n            consider_namespace_packages=config.getini(\"consider_namespace_packages\"),\n        )\n    except SyntaxError as e:\n        raise nodes.Collector.CollectError(\n            ExceptionInfo.from_current().getrepr(style=\"short\")\n        ) from e\n    except ImportPathMismatchError as e:\n        raise nodes.Collector.CollectError(\n            \"import file mismatch:\\n\"\n            \"imported module {!r} has this __file__ attribute:\\n\"\n            \"  {}\\n\"\n            \"which is not the same as the test file we want to collect:\\n\"\n            \"  {}\\n\"\n            \"HINT: remove __pycache__ / .pyc files and/or use a \"\n            \"unique basename for your test file modules\".format(*e.args)\n        ) from e\n    except ImportError as e:\n        exc_info = ExceptionInfo.from_current()\n        if config.getoption(\"verbose\") < 2:\n            exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n        exc_repr = (\n            exc_info.getrepr(style=\"short\")\n            if exc_info.traceback\n            else exc_info.exconly()\n        )\n        formatted_tb = str(exc_repr)\n        raise nodes.Collector.CollectError(\n            f\"ImportError while importing test module '{path}'.\\n\"\n            \"Hint: make sure your test modules/packages have valid Python names.\\n\"\n            \"Traceback:\\n\"\n            f\"{formatted_tb}\"\n        ) from e\n    except skip.Exception as e:\n        if e.allow_module_level:\n            raise\n        raise nodes.Collector.CollectError(\n            \"Using pytest.skip outside of a test will skip the entire module. \"\n            \"If that's your intention, pass `allow_module_level=True`. \"\n            \"If you want to skip a specific test or an entire class, \"\n            \"use the @pytest.mark.skip or @pytest.mark.skipif decorators.\"\n        ) from e\n    config.pluginmanager.consider_module(mod)\n    return mod\n\n\nclass Module(nodes.File, PyCollector):\n    \"\"\"Collector for test classes and functions in a Python module.\"\"\"\n\n    def _getobj(self):\n        return importtestmodule(self.path, self.config)\n\n    def collect(self) -> Iterable[nodes.Item | nodes.Collector]:\n        self._register_setup_module_fixture()\n        self._register_setup_function_fixture()\n        self.session._fixturemanager.parsefactories(self)\n        return super().collect()\n\n    def _register_setup_module_fixture(self) -> None:\n        \"\"\"Register an autouse, module-scoped fixture for the collected module object\n        that invokes setUpModule/tearDownModule if either or both are available.\n\n        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with\n        other fixtures (#517).\n        \"\"\"\n        setup_module = _get_first_non_fixture_func(\n            self.obj, (\"setUpModule\", \"setup_module\")\n        )\n        teardown_module = _get_first_non_fixture_func(\n            self.obj, (\"tearDownModule\", \"teardown_module\")\n        )\n\n        if setup_module is None and teardown_module is None:\n            return\n\n        def xunit_setup_module_fixture(request) -> Generator[None, None, None]:\n            module = request.module\n            if setup_module is not None:\n                _call_with_optional_argument(setup_module, module)\n            yield\n            if teardown_module is not None:\n                _call_with_optional_argument(teardown_module, module)\n\n        self.session._fixturemanager._register_fixture(\n            # Use a unique name to speed up lookup.\n            name=f\"_xunit_setup_module_fixture_{self.obj.__name__}\",\n            func=xunit_setup_module_fixture,\n            nodeid=self.nodeid,\n            scope=\"module\",\n            autouse=True,\n        )\n\n    def _register_setup_function_fixture(self) -> None:\n        \"\"\"Register an autouse, function-scoped fixture for the collected module object\n        that invokes setup_function/teardown_function if either or both are available.\n\n        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with\n        other fixtures (#517).\n        \"\"\"\n        setup_function = _get_first_non_fixture_func(self.obj, (\"setup_function\",))\n        teardown_function = _get_first_non_fixture_func(\n            self.obj, (\"teardown_function\",)\n        )\n        if setup_function is None and teardown_function is None:\n            return\n\n        def xunit_setup_function_fixture(request) -> Generator[None, None, None]:\n            if request.instance is not None:\n                # in this case we are bound to an instance, so we need to let\n                # setup_method handle this\n                yield\n                return\n            function = request.function\n            if setup_function is not None:\n                _call_with_optional_argument(setup_function, function)\n            yield\n            if teardown_function is not None:\n                _call_with_optional_argument(teardown_function, function)\n\n        self.session._fixturemanager._register_fixture(\n            # Use a unique name to speed up lookup.\n            name=f\"_xunit_setup_function_fixture_{self.obj.__name__}\",\n            func=xunit_setup_function_fixture,\n            nodeid=self.nodeid,\n            scope=\"function\",\n            autouse=True,\n        )\n\n\nclass Package(nodes.Directory):\n    \"\"\"Collector for files and directories in a Python packages -- directories\n    with an `__init__.py` file.\n\n    .. note::\n\n        Directories without an `__init__.py` file are instead collected by\n        :class:`~pytest.Dir` by default. Both are :class:`~pytest.Directory`\n        collectors.\n\n    .. versionchanged:: 8.0\n\n        Now inherits from :class:`~pytest.Directory`.\n    \"\"\"\n\n    def __init__(\n        self,\n        fspath: LEGACY_PATH | None,\n        parent: nodes.Collector,\n        # NOTE: following args are unused:\n        config=None,\n        session=None,\n        nodeid=None,\n        path: Path | None = None,\n    ) -> None:\n        # NOTE: Could be just the following, but kept as-is for compat.\n        # super().__init__(self, fspath, parent=parent)\n        session = parent.session\n        super().__init__(\n            fspath=fspath,\n            path=path,\n            parent=parent,\n            config=config,\n            session=session,\n            nodeid=nodeid,\n        )\n\n    def setup(self) -> None:\n        init_mod = importtestmodule(self.path / \"__init__.py\", self.config)\n\n        # Not using fixtures to call setup_module here because autouse fixtures\n        # from packages are not called automatically (#4085).\n        setup_module = _get_first_non_fixture_func(\n            init_mod, (\"setUpModule\", \"setup_module\")\n        )\n        if setup_module is not None:\n            _call_with_optional_argument(setup_module, init_mod)\n\n        teardown_module = _get_first_non_fixture_func(\n            init_mod, (\"tearDownModule\", \"teardown_module\")\n        )\n        if teardown_module is not None:\n            func = partial(_call_with_optional_argument, teardown_module, init_mod)\n            self.addfinalizer(func)\n\n    def collect(self) -> Iterable[nodes.Item | nodes.Collector]:\n        # Always collect __init__.py first.\n        def sort_key(entry: os.DirEntry[str]) -> object:\n            return (entry.name != \"__init__.py\", entry.name)\n\n        config = self.config\n        col: nodes.Collector | None\n        cols: Sequence[nodes.Collector]\n        ihook = self.ihook\n        for direntry in scandir(self.path, sort_key):\n            if direntry.is_dir():\n                path = Path(direntry.path)\n                if not self.session.isinitpath(path, with_parents=True):\n                    if ihook.pytest_ignore_collect(collection_path=path, config=config):\n                        continue\n                col = ihook.pytest_collect_directory(path=path, parent=self)\n                if col is not None:\n                    yield col\n\n            elif direntry.is_file():\n                path = Path(direntry.path)\n                if not self.session.isinitpath(path):\n                    if ihook.pytest_ignore_collect(collection_path=path, config=config):\n                        continue\n                cols = ihook.pytest_collect_file(file_path=path, parent=self)\n                yield from cols\n\n\ndef _call_with_optional_argument(func, arg) -> None:\n    \"\"\"Call the given function with the given argument if func accepts one argument, otherwise\n    calls func without arguments.\"\"\"\n    arg_count = func.__code__.co_argcount\n    if inspect.ismethod(func):\n        arg_count -= 1\n    if arg_count:\n        func(arg)\n    else:\n        func()\n\n\ndef _get_first_non_fixture_func(obj: object, names: Iterable[str]) -> object | None:\n    \"\"\"Return the attribute from the given object to be used as a setup/teardown\n    xunit-style function, but only if not marked as a fixture to avoid calling it twice.\n    \"\"\"\n    for name in names:\n        meth: object | None = getattr(obj, name, None)\n        if meth is not None and fixtures.getfixturemarker(meth) is None:\n            return meth\n    return None\n\n\nclass Class(PyCollector):\n    \"\"\"Collector for test methods (and nested classes) in a Python class.\"\"\"\n\n    @classmethod\n    def from_parent(cls, parent, *, name, obj=None, **kw) -> Self:  # type: ignore[override]\n        \"\"\"The public constructor.\"\"\"\n        return super().from_parent(name=name, parent=parent, **kw)\n\n    def newinstance(self):\n        return self.obj()\n\n    def collect(self) -> Iterable[nodes.Item | nodes.Collector]:\n        if not safe_getattr(self.obj, \"__test__\", True):\n            return []\n        if hasinit(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    f\"cannot collect test class {self.obj.__name__!r} because it has a \"\n                    f\"__init__ constructor (from: {self.parent.nodeid})\"\n                )\n            )\n            return []\n        elif hasnew(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    f\"cannot collect test class {self.obj.__name__!r} because it has a \"\n                    f\"__new__ constructor (from: {self.parent.nodeid})\"\n                )\n            )\n            return []\n\n        self._register_setup_class_fixture()\n        self._register_setup_method_fixture()\n\n        self.session._fixturemanager.parsefactories(self.newinstance(), self.nodeid)\n\n        return super().collect()\n\n    def _register_setup_class_fixture(self) -> None:\n        \"\"\"Register an autouse, class scoped fixture into the collected class object\n        that invokes setup_class/teardown_class if either or both are available.\n\n        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with\n        other fixtures (#517).\n        \"\"\"\n        setup_class = _get_first_non_fixture_func(self.obj, (\"setup_class\",))\n        teardown_class = _get_first_non_fixture_func(self.obj, (\"teardown_class\",))\n        if setup_class is None and teardown_class is None:\n            return\n\n        def xunit_setup_class_fixture(request) -> Generator[None, None, None]:\n            cls = request.cls\n            if setup_class is not None:\n                func = getimfunc(setup_class)\n                _call_with_optional_argument(func, cls)\n            yield\n            if teardown_class is not None:\n                func = getimfunc(teardown_class)\n                _call_with_optional_argument(func, cls)\n\n        self.session._fixturemanager._register_fixture(\n            # Use a unique name to speed up lookup.\n            name=f\"_xunit_setup_class_fixture_{self.obj.__qualname__}\",\n            func=xunit_setup_class_fixture,\n            nodeid=self.nodeid,\n            scope=\"class\",\n            autouse=True,\n        )\n\n    def _register_setup_method_fixture(self) -> None:\n        \"\"\"Register an autouse, function scoped fixture into the collected class object\n        that invokes setup_method/teardown_method if either or both are available.\n\n        Using a fixture to invoke these methods ensures we play nicely and unsurprisingly with\n        other fixtures (#517).\n        \"\"\"\n        setup_name = \"setup_method\"\n        setup_method = _get_first_non_fixture_func(self.obj, (setup_name,))\n        teardown_name = \"teardown_method\"\n        teardown_method = _get_first_non_fixture_func(self.obj, (teardown_name,))\n        if setup_method is None and teardown_method is None:\n            return\n\n        def xunit_setup_method_fixture(request) -> Generator[None, None, None]:\n            instance = request.instance\n            method = request.function\n            if setup_method is not None:\n                func = getattr(instance, setup_name)\n                _call_with_optional_argument(func, method)\n            yield\n            if teardown_method is not None:\n                func = getattr(instance, teardown_name)\n                _call_with_optional_argument(func, method)\n\n        self.session._fixturemanager._register_fixture(\n            # Use a unique name to speed up lookup.\n            name=f\"_xunit_setup_method_fixture_{self.obj.__qualname__}\",\n            func=xunit_setup_method_fixture,\n            nodeid=self.nodeid,\n            scope=\"function\",\n            autouse=True,\n        )\n\n\ndef hasinit(obj: object) -> bool:\n    init: object = getattr(obj, \"__init__\", None)\n    if init:\n        return init != object.__init__\n    return False\n\n\ndef hasnew(obj: object) -> bool:\n    new: object = getattr(obj, \"__new__\", None)\n    if new:\n        return new != object.__new__\n    return False\n\n\n@final\n@dataclasses.dataclass(frozen=True)\nclass IdMaker:\n    \"\"\"Make IDs for a parametrization.\"\"\"\n\n    __slots__ = (\n        \"argnames\",\n        \"parametersets\",\n        \"idfn\",\n        \"ids\",\n        \"config\",\n        \"nodeid\",\n        \"func_name\",\n    )\n\n    # The argnames of the parametrization.\n    argnames: Sequence[str]\n    # The ParameterSets of the parametrization.\n    parametersets: Sequence[ParameterSet]\n    # Optionally, a user-provided callable to make IDs for parameters in a\n    # ParameterSet.\n    idfn: Callable[[Any], object | None] | None\n    # Optionally, explicit IDs for ParameterSets by index.\n    ids: Sequence[object | None] | None\n    # Optionally, the pytest config.\n    # Used for controlling ASCII escaping, and for calling the\n    # :hook:`pytest_make_parametrize_id` hook.\n    config: Config | None\n    # Optionally, the ID of the node being parametrized.\n    # Used only for clearer error messages.\n    nodeid: str | None\n    # Optionally, the ID of the function being parametrized.\n    # Used only for clearer error messages.\n    func_name: str | None\n\n    def make_unique_parameterset_ids(self) -> list[str]:\n        \"\"\"Make a unique identifier for each ParameterSet, that may be used to\n        identify the parametrization in a node ID.\n\n        Format is <prm_1_token>-...-<prm_n_token>[counter], where prm_x_token is\n        - user-provided id, if given\n        - else an id derived from the value, applicable for certain types\n        - else <argname><parameterset index>\n        The counter suffix is appended only in case a string wouldn't be unique\n        otherwise.\n        \"\"\"\n        resolved_ids = list(self._resolve_ids())\n        # All IDs must be unique!\n        if len(resolved_ids) != len(set(resolved_ids)):\n            # Record the number of occurrences of each ID.\n            id_counts = Counter(resolved_ids)\n            # Map the ID to its next suffix.\n            id_suffixes: dict[str, int] = defaultdict(int)\n            # Suffix non-unique IDs to make them unique.\n            for index, id in enumerate(resolved_ids):\n                if id_counts[id] > 1:\n                    suffix = \"\"\n                    if id and id[-1].isdigit():\n                        suffix = \"_\"\n                    new_id = f\"{id}{suffix}{id_suffixes[id]}\"\n                    while new_id in set(resolved_ids):\n                        id_suffixes[id] += 1\n                        new_id = f\"{id}{suffix}{id_suffixes[id]}\"\n                    resolved_ids[index] = new_id\n                    id_suffixes[id] += 1\n        assert len(resolved_ids) == len(\n            set(resolved_ids)\n        ), f\"Internal error: {resolved_ids=}\"\n        return resolved_ids\n\n    def _resolve_ids(self) -> Iterable[str]:\n        \"\"\"Resolve IDs for all ParameterSets (may contain duplicates).\"\"\"\n        for idx, parameterset in enumerate(self.parametersets):\n            if parameterset.id is not None:\n                # ID provided directly - pytest.param(..., id=\"...\")\n                yield parameterset.id\n            elif self.ids and idx < len(self.ids) and self.ids[idx] is not None:\n                # ID provided in the IDs list - parametrize(..., ids=[...]).\n                yield self._idval_from_value_required(self.ids[idx], idx)\n            else:\n                # ID not provided - generate it.\n                yield \"-\".join(\n                    self._idval(val, argname, idx)\n                    for val, argname in zip(parameterset.values, self.argnames)\n                )\n\n    def _idval(self, val: object, argname: str, idx: int) -> str:\n        \"\"\"Make an ID for a parameter in a ParameterSet.\"\"\"\n        idval = self._idval_from_function(val, argname, idx)\n        if idval is not None:\n            return idval\n        idval = self._idval_from_hook(val, argname)\n        if idval is not None:\n            return idval\n        idval = self._idval_from_value(val)\n        if idval is not None:\n            return idval\n        return self._idval_from_argname(argname, idx)\n\n    def _idval_from_function(self, val: object, argname: str, idx: int) -> str | None:\n        \"\"\"Try to make an ID for a parameter in a ParameterSet using the\n        user-provided id callable, if given.\"\"\"\n        if self.idfn is None:\n            return None\n        try:\n            id = self.idfn(val)\n        except Exception as e:\n            prefix = f\"{self.nodeid}: \" if self.nodeid is not None else \"\"\n            msg = \"error raised while trying to determine id of parameter '{}' at position {}\"\n            msg = prefix + msg.format(argname, idx)\n            raise ValueError(msg) from e\n        if id is None:\n            return None\n        return self._idval_from_value(id)\n\n    def _idval_from_hook(self, val: object, argname: str) -> str | None:\n        \"\"\"Try to make an ID for a parameter in a ParameterSet by calling the\n        :hook:`pytest_make_parametrize_id` hook.\"\"\"\n        if self.config:\n            id: str | None = self.config.hook.pytest_make_parametrize_id(\n                config=self.config, val=val, argname=argname\n            )\n            return id\n        return None\n\n    def _idval_from_value(self, val: object) -> str | None:\n        \"\"\"Try to make an ID for a parameter in a ParameterSet from its value,\n        if the value type is supported.\"\"\"\n        if isinstance(val, (str, bytes)):\n            return _ascii_escaped_by_config(val, self.config)\n        elif val is None or isinstance(val, (float, int, bool, complex)):\n            return str(val)\n        elif isinstance(val, Pattern):\n            return ascii_escaped(val.pattern)\n        elif val is NOTSET:\n            # Fallback to default. Note that NOTSET is an enum.Enum.\n            pass\n        elif isinstance(val, enum.Enum):\n            return str(val)\n        elif isinstance(getattr(val, \"__name__\", None), str):\n            # Name of a class, function, module, etc.\n            name: str = getattr(val, \"__name__\")\n            return name\n        return None\n\n    def _idval_from_value_required(self, val: object, idx: int) -> str:\n        \"\"\"Like _idval_from_value(), but fails if the type is not supported.\"\"\"\n        id = self._idval_from_value(val)\n        if id is not None:\n            return id\n\n        # Fail.\n        if self.func_name is not None:\n            prefix = f\"In {self.func_name}: \"\n        elif self.nodeid is not None:\n            prefix = f\"In {self.nodeid}: \"\n        else:\n            prefix = \"\"\n        msg = (\n            f\"{prefix}ids contains unsupported value {saferepr(val)} (type: {type(val)!r}) at index {idx}. \"\n            \"Supported types are: str, bytes, int, float, complex, bool, enum, regex or anything with a __name__.\"\n        )\n        fail(msg, pytrace=False)\n\n    @staticmethod\n    def _idval_from_argname(argname: str, idx: int) -> str:\n        \"\"\"Make an ID for a parameter in a ParameterSet from the argument name\n        and the index of the ParameterSet.\"\"\"\n        return str(argname) + str(idx)\n\n\n@final\n@dataclasses.dataclass(frozen=True)\nclass CallSpec2:\n    \"\"\"A planned parameterized invocation of a test function.\n\n    Calculated during collection for a given test function's Metafunc.\n    Once collection is over, each callspec is turned into a single Item\n    and stored in item.callspec.\n    \"\"\"\n\n    # arg name -> arg value which will be passed to a fixture or pseudo-fixture\n    # of the same name. (indirect or direct parametrization respectively)\n    params: dict[str, object] = dataclasses.field(default_factory=dict)\n    # arg name -> arg index.\n    indices: dict[str, int] = dataclasses.field(default_factory=dict)\n    # Used for sorting parametrized resources.\n    _arg2scope: Mapping[str, Scope] = dataclasses.field(default_factory=dict)\n    # Parts which will be added to the item's name in `[..]` separated by \"-\".\n    _idlist: Sequence[str] = dataclasses.field(default_factory=tuple)\n    # Marks which will be applied to the item.\n    marks: list[Mark] = dataclasses.field(default_factory=list)\n\n    def setmulti(\n        self,\n        *,\n        argnames: Iterable[str],\n        valset: Iterable[object],\n        id: str,\n        marks: Iterable[Mark | MarkDecorator],\n        scope: Scope,\n        param_index: int,\n    ) -> CallSpec2:\n        params = self.params.copy()\n        indices = self.indices.copy()\n        arg2scope = dict(self._arg2scope)\n        for arg, val in zip(argnames, valset):\n            if arg in params:\n                raise ValueError(f\"duplicate parametrization of {arg!r}\")\n            params[arg] = val\n            indices[arg] = param_index\n            arg2scope[arg] = scope\n        return CallSpec2(\n            params=params,\n            indices=indices,\n            _arg2scope=arg2scope,\n            _idlist=[*self._idlist, id],\n            marks=[*self.marks, *normalize_mark_list(marks)],\n        )\n\n    def getparam(self, name: str) -> object:\n        try:\n            return self.params[name]\n        except KeyError as e:\n            raise ValueError(name) from e\n\n    @property\n    def id(self) -> str:\n        return \"-\".join(self._idlist)\n\n\ndef get_direct_param_fixture_func(request: FixtureRequest) -> Any:\n    return request.param\n\n\n# Used for storing pseudo fixturedefs for direct parametrization.\nname2pseudofixturedef_key = StashKey[Dict[str, FixtureDef[Any]]]()\n\n\n@final\nclass Metafunc:\n    \"\"\"Objects passed to the :hook:`pytest_generate_tests` hook.\n\n    They help to inspect a test function and to generate tests according to\n    test configuration or values specified in the class or module where a\n    test function is defined.\n    \"\"\"\n\n    def __init__(\n        self,\n        definition: FunctionDefinition,\n        fixtureinfo: fixtures.FuncFixtureInfo,\n        config: Config,\n        cls=None,\n        module=None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n\n        #: Access to the underlying :class:`_pytest.python.FunctionDefinition`.\n        self.definition = definition\n\n        #: Access to the :class:`pytest.Config` object for the test session.\n        self.config = config\n\n        #: The module object where the test function is defined in.\n        self.module = module\n\n        #: Underlying Python test function.\n        self.function = definition.obj\n\n        #: Set of fixture names required by the test function.\n        self.fixturenames = fixtureinfo.names_closure\n\n        #: Class object where the test function is defined in or ``None``.\n        self.cls = cls\n\n        self._arg2fixturedefs = fixtureinfo.name2fixturedefs\n\n        # Result of parametrize().\n        self._calls: list[CallSpec2] = []\n\n    def parametrize(\n        self,\n        argnames: str | Sequence[str],\n        argvalues: Iterable[ParameterSet | Sequence[object] | object],\n        indirect: bool | Sequence[str] = False,\n        ids: Iterable[object | None] | Callable[[Any], object | None] | None = None,\n        scope: _ScopeName | None = None,\n        *,\n        _param_mark: Mark | None = None,\n    ) -> None:\n        \"\"\"Add new invocations to the underlying test function using the list\n        of argvalues for the given argnames. Parametrization is performed\n        during the collection phase. If you need to setup expensive resources\n        see about setting indirect to do it rather than at test setup time.\n\n        Can be called multiple times per test function (but only on different\n        argument names), in which case each call parametrizes all previous\n        parametrizations, e.g.\n\n        ::\n\n            unparametrized:         t\n            parametrize [\"x\", \"y\"]: t[x], t[y]\n            parametrize [1, 2]:     t[x-1], t[x-2], t[y-1], t[y-2]\n\n        :param argnames:\n            A comma-separated string denoting one or more argument names, or\n            a list/tuple of argument strings.\n\n        :param argvalues:\n            The list of argvalues determines how often a test is invoked with\n            different argument values.\n\n            If only one argname was specified argvalues is a list of values.\n            If N argnames were specified, argvalues must be a list of\n            N-tuples, where each tuple-element specifies a value for its\n            respective argname.\n        :type argvalues: Iterable[_pytest.mark.structures.ParameterSet | Sequence[object] | object]\n        :param indirect:\n            A list of arguments' names (subset of argnames) or a boolean.\n            If True the list contains all names from the argnames. Each\n            argvalue corresponding to an argname in this list will\n            be passed as request.param to its respective argname fixture\n            function so that it can perform more expensive setups during the\n            setup phase of a test rather than at collection time.\n\n        :param ids:\n            Sequence of (or generator for) ids for ``argvalues``,\n            or a callable to return part of the id for each argvalue.\n\n            With sequences (and generators like ``itertools.count()``) the\n            returned ids should be of type ``string``, ``int``, ``float``,\n            ``bool``, or ``None``.\n            They are mapped to the corresponding index in ``argvalues``.\n            ``None`` means to use the auto-generated id.\n\n            If it is a callable it will be called for each entry in\n            ``argvalues``, and the return value is used as part of the\n            auto-generated id for the whole set (where parts are joined with\n            dashes (\"-\")).\n            This is useful to provide more specific ids for certain items, e.g.\n            dates.  Returning ``None`` will use an auto-generated id.\n\n            If no ids are provided they will be generated automatically from\n            the argvalues.\n\n        :param scope:\n            If specified it denotes the scope of the parameters.\n            The scope is used for grouping tests by parameter instances.\n            It will also override any fixture-function defined scope, allowing\n            to set a dynamic scope using test context or configuration.\n        \"\"\"\n        argnames, parametersets = ParameterSet._for_parametrize(\n            argnames,\n            argvalues,\n            self.function,\n            self.config,\n            nodeid=self.definition.nodeid,\n        )\n        del argvalues\n\n        if \"request\" in argnames:\n            fail(\n                \"'request' is a reserved name and cannot be used in @pytest.mark.parametrize\",\n                pytrace=False,\n            )\n\n        if scope is not None:\n            scope_ = Scope.from_user(\n                scope, descr=f\"parametrize() call in {self.function.__name__}\"\n            )\n        else:\n            scope_ = _find_parametrized_scope(argnames, self._arg2fixturedefs, indirect)\n\n        self._validate_if_using_arg_names(argnames, indirect)\n\n        # Use any already (possibly) generated ids with parametrize Marks.\n        if _param_mark and _param_mark._param_ids_from:\n            generated_ids = _param_mark._param_ids_from._param_ids_generated\n            if generated_ids is not None:\n                ids = generated_ids\n\n        ids = self._resolve_parameter_set_ids(\n            argnames, ids, parametersets, nodeid=self.definition.nodeid\n        )\n\n        # Store used (possibly generated) ids with parametrize Marks.\n        if _param_mark and _param_mark._param_ids_from and generated_ids is None:\n            object.__setattr__(_param_mark._param_ids_from, \"_param_ids_generated\", ids)\n\n        # Add funcargs as fixturedefs to fixtureinfo.arg2fixturedefs by registering\n        # artificial \"pseudo\" FixtureDef's so that later at test execution time we can\n        # rely on a proper FixtureDef to exist for fixture setup.\n        node = None\n        # If we have a scope that is higher than function, we need\n        # to make sure we only ever create an according fixturedef on\n        # a per-scope basis. We thus store and cache the fixturedef on the\n        # node related to the scope.\n        if scope_ is not Scope.Function:\n            collector = self.definition.parent\n            assert collector is not None\n            node = get_scope_node(collector, scope_)\n            if node is None:\n                # If used class scope and there is no class, use module-level\n                # collector (for now).\n                if scope_ is Scope.Class:\n                    assert isinstance(collector, Module)\n                    node = collector\n                # If used package scope and there is no package, use session\n                # (for now).\n                elif scope_ is Scope.Package:\n                    node = collector.session\n                else:\n                    assert False, f\"Unhandled missing scope: {scope}\"\n        if node is None:\n            name2pseudofixturedef = None\n        else:\n            default: dict[str, FixtureDef[Any]] = {}\n            name2pseudofixturedef = node.stash.setdefault(\n                name2pseudofixturedef_key, default\n            )\n        arg_directness = self._resolve_args_directness(argnames, indirect)\n        for argname in argnames:\n            if arg_directness[argname] == \"indirect\":\n                continue\n            if name2pseudofixturedef is not None and argname in name2pseudofixturedef:\n                fixturedef = name2pseudofixturedef[argname]\n            else:\n                fixturedef = FixtureDef(\n                    config=self.config,\n                    baseid=\"\",\n                    argname=argname,\n                    func=get_direct_param_fixture_func,\n                    scope=scope_,\n                    params=None,\n                    ids=None,\n                    _ispytest=True,\n                )\n                if name2pseudofixturedef is not None:\n                    name2pseudofixturedef[argname] = fixturedef\n            self._arg2fixturedefs[argname] = [fixturedef]\n\n        # Create the new calls: if we are parametrize() multiple times (by applying the decorator\n        # more than once) then we accumulate those calls generating the cartesian product\n        # of all calls.\n        newcalls = []\n        for callspec in self._calls or [CallSpec2()]:\n            for param_index, (param_id, param_set) in enumerate(\n                zip(ids, parametersets)\n            ):\n                newcallspec = callspec.setmulti(\n                    argnames=argnames,\n                    valset=param_set.values,\n                    id=param_id,\n                    marks=param_set.marks,\n                    scope=scope_,\n                    param_index=param_index,\n                )\n                newcalls.append(newcallspec)\n        self._calls = newcalls\n\n    def _resolve_parameter_set_ids(\n        self,\n        argnames: Sequence[str],\n        ids: Iterable[object | None] | Callable[[Any], object | None] | None,\n        parametersets: Sequence[ParameterSet],\n        nodeid: str,\n    ) -> list[str]:\n        \"\"\"Resolve the actual ids for the given parameter sets.\n\n        :param argnames:\n            Argument names passed to ``parametrize()``.\n        :param ids:\n            The `ids` parameter of the ``parametrize()`` call (see docs).\n        :param parametersets:\n            The parameter sets, each containing a set of values corresponding\n            to ``argnames``.\n        :param nodeid str:\n            The nodeid of the definition item that generated this\n            parametrization.\n        :returns:\n            List with ids for each parameter set given.\n        \"\"\"\n        if ids is None:\n            idfn = None\n            ids_ = None\n        elif callable(ids):\n            idfn = ids\n            ids_ = None\n        else:\n            idfn = None\n            ids_ = self._validate_ids(ids, parametersets, self.function.__name__)\n        id_maker = IdMaker(\n            argnames,\n            parametersets,\n            idfn,\n            ids_,\n            self.config,\n            nodeid=nodeid,\n            func_name=self.function.__name__,\n        )\n        return id_maker.make_unique_parameterset_ids()\n\n    def _validate_ids(\n        self,\n        ids: Iterable[object | None],\n        parametersets: Sequence[ParameterSet],\n        func_name: str,\n    ) -> list[object | None]:\n        try:\n            num_ids = len(ids)  # type: ignore[arg-type]\n        except TypeError:\n            try:\n                iter(ids)\n            except TypeError as e:\n                raise TypeError(\"ids must be a callable or an iterable\") from e\n            num_ids = len(parametersets)\n\n        # num_ids == 0 is a special case: https://github.com/pytest-dev/pytest/issues/1849\n        if num_ids != len(parametersets) and num_ids != 0:\n            msg = \"In {}: {} parameter sets specified, with different number of ids: {}\"\n            fail(msg.format(func_name, len(parametersets), num_ids), pytrace=False)\n\n        return list(itertools.islice(ids, num_ids))\n\n    def _resolve_args_directness(\n        self,\n        argnames: Sequence[str],\n        indirect: bool | Sequence[str],\n    ) -> dict[str, Literal[\"indirect\", \"direct\"]]:\n        \"\"\"Resolve if each parametrized argument must be considered an indirect\n        parameter to a fixture of the same name, or a direct parameter to the\n        parametrized function, based on the ``indirect`` parameter of the\n        parametrized() call.\n\n        :param argnames:\n            List of argument names passed to ``parametrize()``.\n        :param indirect:\n            Same as the ``indirect`` parameter of ``parametrize()``.\n        :returns\n            A dict mapping each arg name to either \"indirect\" or \"direct\".\n        \"\"\"\n        arg_directness: dict[str, Literal[\"indirect\", \"direct\"]]\n        if isinstance(indirect, bool):\n            arg_directness = dict.fromkeys(\n                argnames, \"indirect\" if indirect else \"direct\"\n            )\n        elif isinstance(indirect, Sequence):\n            arg_directness = dict.fromkeys(argnames, \"direct\")\n            for arg in indirect:\n                if arg not in argnames:\n                    fail(\n                        f\"In {self.function.__name__}: indirect fixture '{arg}' doesn't exist\",\n                        pytrace=False,\n                    )\n                arg_directness[arg] = \"indirect\"\n        else:\n            fail(\n                f\"In {self.function.__name__}: expected Sequence or boolean\"\n                f\" for indirect, got {type(indirect).__name__}\",\n                pytrace=False,\n            )\n        return arg_directness\n\n    def _validate_if_using_arg_names(\n        self,\n        argnames: Sequence[str],\n        indirect: bool | Sequence[str],\n    ) -> None:\n        \"\"\"Check if all argnames are being used, by default values, or directly/indirectly.\n\n        :param List[str] argnames: List of argument names passed to ``parametrize()``.\n        :param indirect: Same as the ``indirect`` parameter of ``parametrize()``.\n        :raises ValueError: If validation fails.\n        \"\"\"\n        default_arg_names = set(get_default_arg_names(self.function))\n        func_name = self.function.__name__\n        for arg in argnames:\n            if arg not in self.fixturenames:\n                if arg in default_arg_names:\n                    fail(\n                        f\"In {func_name}: function already takes an argument '{arg}' with a default value\",\n                        pytrace=False,\n                    )\n                else:\n                    if isinstance(indirect, Sequence):\n                        name = \"fixture\" if arg in indirect else \"argument\"\n                    else:\n                        name = \"fixture\" if indirect else \"argument\"\n                    fail(\n                        f\"In {func_name}: function uses no {name} '{arg}'\",\n                        pytrace=False,\n                    )\n\n\ndef _find_parametrized_scope(\n    argnames: Sequence[str],\n    arg2fixturedefs: Mapping[str, Sequence[fixtures.FixtureDef[object]]],\n    indirect: bool | Sequence[str],\n) -> Scope:\n    \"\"\"Find the most appropriate scope for a parametrized call based on its arguments.\n\n    When there's at least one direct argument, always use \"function\" scope.\n\n    When a test function is parametrized and all its arguments are indirect\n    (e.g. fixtures), return the most narrow scope based on the fixtures used.\n\n    Related to issue #1832, based on code posted by @Kingdread.\n    \"\"\"\n    if isinstance(indirect, Sequence):\n        all_arguments_are_fixtures = len(indirect) == len(argnames)\n    else:\n        all_arguments_are_fixtures = bool(indirect)\n\n    if all_arguments_are_fixtures:\n        fixturedefs = arg2fixturedefs or {}\n        used_scopes = [\n            fixturedef[-1]._scope\n            for name, fixturedef in fixturedefs.items()\n            if name in argnames\n        ]\n        # Takes the most narrow scope from used fixtures.\n        return min(used_scopes, default=Scope.Function)\n\n    return Scope.Function\n\n\ndef _ascii_escaped_by_config(val: str | bytes, config: Config | None) -> str:\n    if config is None:\n        escape_option = False\n    else:\n        escape_option = config.getini(\n            \"disable_test_id_escaping_and_forfeit_all_rights_to_community_support\"\n        )\n    # TODO: If escaping is turned off and the user passes bytes,\n    #       will return a bytes. For now we ignore this but the\n    #       code *probably* doesn't handle this case.\n    return val if escape_option else ascii_escaped(val)  # type: ignore\n\n\nclass Function(PyobjMixin, nodes.Item):\n    \"\"\"Item responsible for setting up and executing a Python test function.\n\n    :param name:\n        The full function name, including any decorations like those\n        added by parametrization (``my_func[my_param]``).\n    :param parent:\n        The parent Node.\n    :param config:\n        The pytest Config object.\n    :param callspec:\n        If given, this function has been parametrized and the callspec contains\n        meta information about the parametrization.\n    :param callobj:\n        If given, the object which will be called when the Function is invoked,\n        otherwise the callobj will be obtained from ``parent`` using ``originalname``.\n    :param keywords:\n        Keywords bound to the function object for \"-k\" matching.\n    :param session:\n        The pytest Session object.\n    :param fixtureinfo:\n        Fixture information already resolved at this fixture node..\n    :param originalname:\n        The attribute name to use for accessing the underlying function object.\n        Defaults to ``name``. Set this if name is different from the original name,\n        for example when it contains decorations like those added by parametrization\n        (``my_func[my_param]``).\n    \"\"\"\n\n    # Disable since functions handle it themselves.\n    _ALLOW_MARKERS = False\n\n    def __init__(\n        self,\n        name: str,\n        parent,\n        config: Config | None = None,\n        callspec: CallSpec2 | None = None,\n        callobj=NOTSET,\n        keywords: Mapping[str, Any] | None = None,\n        session: Session | None = None,\n        fixtureinfo: FuncFixtureInfo | None = None,\n        originalname: str | None = None,\n    ) -> None:\n        super().__init__(name, parent, config=config, session=session)\n\n        if callobj is not NOTSET:\n            self._obj = callobj\n            self._instance = getattr(callobj, \"__self__\", None)\n\n        #: Original function name, without any decorations (for example\n        #: parametrization adds a ``\"[...]\"`` suffix to function names), used to access\n        #: the underlying function object from ``parent`` (in case ``callobj`` is not given\n        #: explicitly).\n        #:\n        #: .. versionadded:: 3.0\n        self.originalname = originalname or name\n\n        # Note: when FunctionDefinition is introduced, we should change ``originalname``\n        # to a readonly property that returns FunctionDefinition.name.\n\n        self.own_markers.extend(get_unpacked_marks(self.obj))\n        if callspec:\n            self.callspec = callspec\n            self.own_markers.extend(callspec.marks)\n\n        # todo: this is a hell of a hack\n        # https://github.com/pytest-dev/pytest/issues/4569\n        # Note: the order of the updates is important here; indicates what\n        # takes priority (ctor argument over function attributes over markers).\n        # Take own_markers only; NodeKeywords handles parent traversal on its own.\n        self.keywords.update((mark.name, mark) for mark in self.own_markers)\n        self.keywords.update(self.obj.__dict__)\n        if keywords:\n            self.keywords.update(keywords)\n\n        if fixtureinfo is None:\n            fm = self.session._fixturemanager\n            fixtureinfo = fm.getfixtureinfo(self, self.obj, self.cls)\n        self._fixtureinfo: FuncFixtureInfo = fixtureinfo\n        self.fixturenames = fixtureinfo.names_closure\n        self._initrequest()\n\n    # todo: determine sound type limitations\n    @classmethod\n    def from_parent(cls, parent, **kw) -> Self:\n        \"\"\"The public constructor.\"\"\"\n        return super().from_parent(parent=parent, **kw)\n\n    def _initrequest(self) -> None:\n        self.funcargs: dict[str, object] = {}\n        self._request = fixtures.TopRequest(self, _ispytest=True)\n\n    @property\n    def function(self):\n        \"\"\"Underlying python 'function' object.\"\"\"\n        return getimfunc(self.obj)\n\n    @property\n    def instance(self):\n        try:\n            return self._instance\n        except AttributeError:\n            if isinstance(self.parent, Class):\n                # Each Function gets a fresh class instance.\n                self._instance = self._getinstance()\n            else:\n                self._instance = None\n        return self._instance\n\n    def _getinstance(self):\n        if isinstance(self.parent, Class):\n            # Each Function gets a fresh class instance.\n            return self.parent.newinstance()\n        else:\n            return None\n\n    def _getobj(self):\n        instance = self.instance\n        if instance is not None:\n            parent_obj = instance\n        else:\n            assert self.parent is not None\n            parent_obj = self.parent.obj  # type: ignore[attr-defined]\n        return getattr(parent_obj, self.originalname)\n\n    @property\n    def _pyfuncitem(self):\n        \"\"\"(compatonly) for code expecting pytest-2.2 style request objects.\"\"\"\n        return self\n\n    def runtest(self) -> None:\n        \"\"\"Execute the underlying test function.\"\"\"\n        self.ihook.pytest_pyfunc_call(pyfuncitem=self)\n\n    def setup(self) -> None:\n        self._request._fillfixtures()\n\n    def _traceback_filter(self, excinfo: ExceptionInfo[BaseException]) -> Traceback:\n        if hasattr(self, \"_obj\") and not self.config.getoption(\"fulltrace\", False):\n            code = _pytest._code.Code.from_function(get_real_func(self.obj))\n            path, firstlineno = code.path, code.firstlineno\n            traceback = excinfo.traceback\n            ntraceback = traceback.cut(path=path, firstlineno=firstlineno)\n            if ntraceback == traceback:\n                ntraceback = ntraceback.cut(path=path)\n                if ntraceback == traceback:\n                    ntraceback = ntraceback.filter(filter_traceback)\n                    if not ntraceback:\n                        ntraceback = traceback\n            ntraceback = ntraceback.filter(excinfo)\n\n            # issue364: mark all but first and last frames to\n            # only show a single-line message for each frame.\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"auto\":\n                if len(ntraceback) > 2:\n                    ntraceback = Traceback(\n                        (\n                            ntraceback[0],\n                            *(t.with_repr_style(\"short\") for t in ntraceback[1:-1]),\n                            ntraceback[-1],\n                        )\n                    )\n\n            return ntraceback\n        return excinfo.traceback\n\n    # TODO: Type ignored -- breaks Liskov Substitution.\n    def repr_failure(  # type: ignore[override]\n        self,\n        excinfo: ExceptionInfo[BaseException],\n    ) -> str | TerminalRepr:\n        style = self.config.getoption(\"tbstyle\", \"auto\")\n        if style == \"auto\":\n            style = \"long\"\n        return self._repr_failure_py(excinfo, style=style)\n\n\nclass FunctionDefinition(Function):\n    \"\"\"This class is a stop gap solution until we evolve to have actual function\n    definition nodes and manage to get rid of ``metafunc``.\"\"\"\n\n    def runtest(self) -> None:\n        raise RuntimeError(\"function definitions are not supposed to be run as tests\")\n\n    setup = runtest\n", "src/_pytest/tmpdir.py": "# mypy: allow-untyped-defs\n\"\"\"Support for providing temporary directories to test functions.\"\"\"\n\nfrom __future__ import annotations\n\nimport dataclasses\nimport os\nfrom pathlib import Path\nimport re\nfrom shutil import rmtree\nimport tempfile\nfrom typing import Any\nfrom typing import Dict\nfrom typing import final\nfrom typing import Generator\nfrom typing import Literal\n\nfrom .pathlib import cleanup_dead_symlinks\nfrom .pathlib import LOCK_TIMEOUT\nfrom .pathlib import make_numbered_dir\nfrom .pathlib import make_numbered_dir_with_cleanup\nfrom .pathlib import rm_rf\nfrom _pytest.compat import get_user_id\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config import hookimpl\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Item\nfrom _pytest.reports import TestReport\nfrom _pytest.stash import StashKey\n\n\ntmppath_result_key = StashKey[Dict[str, bool]]()\nRetentionType = Literal[\"all\", \"failed\", \"none\"]\n\n\n@final\n@dataclasses.dataclass\nclass TempPathFactory:\n    \"\"\"Factory for temporary directories under the common base temp directory.\n\n    The base directory can be configured using the ``--basetemp`` option.\n    \"\"\"\n\n    _given_basetemp: Path | None\n    # pluggy TagTracerSub, not currently exposed, so Any.\n    _trace: Any\n    _basetemp: Path | None\n    _retention_count: int\n    _retention_policy: RetentionType\n\n    def __init__(\n        self,\n        given_basetemp: Path | None,\n        retention_count: int,\n        retention_policy: RetentionType,\n        trace,\n        basetemp: Path | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        if given_basetemp is None:\n            self._given_basetemp = None\n        else:\n            # Use os.path.abspath() to get absolute path instead of resolve() as it\n            # does not work the same in all platforms (see #4427).\n            # Path.absolute() exists, but it is not public (see https://bugs.python.org/issue25012).\n            self._given_basetemp = Path(os.path.abspath(str(given_basetemp)))\n        self._trace = trace\n        self._retention_count = retention_count\n        self._retention_policy = retention_policy\n        self._basetemp = basetemp\n\n    @classmethod\n    def from_config(\n        cls,\n        config: Config,\n        *,\n        _ispytest: bool = False,\n    ) -> TempPathFactory:\n        \"\"\"Create a factory according to pytest configuration.\n\n        :meta private:\n        \"\"\"\n        check_ispytest(_ispytest)\n        count = int(config.getini(\"tmp_path_retention_count\"))\n        if count < 0:\n            raise ValueError(\n                f\"tmp_path_retention_count must be >= 0. Current input: {count}.\"\n            )\n\n        policy = config.getini(\"tmp_path_retention_policy\")\n        if policy not in (\"all\", \"failed\", \"none\"):\n            raise ValueError(\n                f\"tmp_path_retention_policy must be either all, failed, none. Current input: {policy}.\"\n            )\n\n        return cls(\n            given_basetemp=config.option.basetemp,\n            trace=config.trace.get(\"tmpdir\"),\n            retention_count=count,\n            retention_policy=policy,\n            _ispytest=True,\n        )\n\n    def _ensure_relative_to_basetemp(self, basename: str) -> str:\n        basename = os.path.normpath(basename)\n        if (self.getbasetemp() / basename).resolve().parent != self.getbasetemp():\n            raise ValueError(f\"{basename} is not a normalized and relative path\")\n        return basename\n\n    def mktemp(self, basename: str, numbered: bool = True) -> Path:\n        \"\"\"Create a new temporary directory managed by the factory.\n\n        :param basename:\n            Directory base name, must be a relative path.\n\n        :param numbered:\n            If ``True``, ensure the directory is unique by adding a numbered\n            suffix greater than any existing one: ``basename=\"foo-\"`` and ``numbered=True``\n            means that this function will create directories named ``\"foo-0\"``,\n            ``\"foo-1\"``, ``\"foo-2\"`` and so on.\n\n        :returns:\n            The path to the new directory.\n        \"\"\"\n        basename = self._ensure_relative_to_basetemp(basename)\n        if not numbered:\n            p = self.getbasetemp().joinpath(basename)\n            p.mkdir(mode=0o700)\n        else:\n            p = make_numbered_dir(root=self.getbasetemp(), prefix=basename, mode=0o700)\n            self._trace(\"mktemp\", p)\n        return p\n\n    def getbasetemp(self) -> Path:\n        \"\"\"Return the base temporary directory, creating it if needed.\n\n        :returns:\n            The base temporary directory.\n        \"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            if basetemp.exists():\n                rm_rf(basetemp)\n            basetemp.mkdir(mode=0o700)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            try:\n                rootdir.mkdir(mode=0o700, exist_ok=True)\n            except OSError:\n                # getuser() likely returned illegal characters for the platform, use unknown back off mechanism\n                rootdir = temproot.joinpath(\"pytest-of-unknown\")\n                rootdir.mkdir(mode=0o700, exist_ok=True)\n            # Because we use exist_ok=True with a predictable name, make sure\n            # we are the owners, to prevent any funny business (on unix, where\n            # temproot is usually shared).\n            # Also, to keep things private, fixup any world-readable temp\n            # rootdir's permissions. Historically 0o755 was used, so we can't\n            # just error out on this, at least for a while.\n            uid = get_user_id()\n            if uid is not None:\n                rootdir_stat = rootdir.stat()\n                if rootdir_stat.st_uid != uid:\n                    raise OSError(\n                        f\"The temporary directory {rootdir} is not owned by the current user. \"\n                        \"Fix this and try again.\"\n                    )\n                if (rootdir_stat.st_mode & 0o077) != 0:\n                    os.chmod(rootdir, rootdir_stat.st_mode & ~0o077)\n            keep = self._retention_count\n            if self._retention_policy == \"none\":\n                keep = 0\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\",\n                root=rootdir,\n                keep=keep,\n                lock_timeout=LOCK_TIMEOUT,\n                mode=0o700,\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = basetemp\n        self._trace(\"new basetemp\", basetemp)\n        return basetemp\n\n\ndef get_user() -> str | None:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        # In some exotic environments, getpass may not be importable.\n        import getpass\n\n        return getpass.getuser()\n    except (ImportError, OSError, KeyError):\n        return None\n\n\ndef pytest_configure(config: Config) -> None:\n    \"\"\"Create a TempPathFactory and attach it to the config object.\n\n    This is to comply with existing plugins which expect the handler to be\n    available at pytest_configure time, but ideally should be moved entirely\n    to the tmp_path_factory session fixture.\n    \"\"\"\n    mp = MonkeyPatch()\n    config.add_cleanup(mp.undo)\n    _tmp_path_factory = TempPathFactory.from_config(config, _ispytest=True)\n    mp.setattr(config, \"_tmp_path_factory\", _tmp_path_factory, raising=False)\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    parser.addini(\n        \"tmp_path_retention_count\",\n        help=\"How many sessions should we keep the `tmp_path` directories, according to `tmp_path_retention_policy`.\",\n        default=3,\n    )\n\n    parser.addini(\n        \"tmp_path_retention_policy\",\n        help=\"Controls which directories created by the `tmp_path` fixture are kept around, based on test outcome. \"\n        \"(all/failed/none)\",\n        default=\"all\",\n    )\n\n\n@fixture(scope=\"session\")\ndef tmp_path_factory(request: FixtureRequest) -> TempPathFactory:\n    \"\"\"Return a :class:`pytest.TempPathFactory` instance for the test session.\"\"\"\n    # Set dynamically by pytest_configure() above.\n    return request.config._tmp_path_factory  # type: ignore\n\n\ndef _mk_tmp(request: FixtureRequest, factory: TempPathFactory) -> Path:\n    name = request.node.name\n    name = re.sub(r\"[\\W]\", \"_\", name)\n    MAXVAL = 30\n    name = name[:MAXVAL]\n    return factory.mktemp(name, numbered=True)\n\n\n@fixture\ndef tmp_path(\n    request: FixtureRequest, tmp_path_factory: TempPathFactory\n) -> Generator[Path, None, None]:\n    \"\"\"Return a temporary directory path object which is unique to each test\n    function invocation, created as a sub directory of the base temporary\n    directory.\n\n    By default, a new base temporary directory is created each test session,\n    and old bases are removed after 3 sessions, to aid in debugging.\n    This behavior can be configured with :confval:`tmp_path_retention_count` and\n    :confval:`tmp_path_retention_policy`.\n    If ``--basetemp`` is used then it is cleared each session. See\n    :ref:`temporary directory location and retention`.\n\n    The returned object is a :class:`pathlib.Path` object.\n    \"\"\"\n    path = _mk_tmp(request, tmp_path_factory)\n    yield path\n\n    # Remove the tmpdir if the policy is \"failed\" and the test passed.\n    tmp_path_factory: TempPathFactory = request.session.config._tmp_path_factory  # type: ignore\n    policy = tmp_path_factory._retention_policy\n    result_dict = request.node.stash[tmppath_result_key]\n\n    if policy == \"failed\" and result_dict.get(\"call\", True):\n        # We do a \"best effort\" to remove files, but it might not be possible due to some leaked resource,\n        # permissions, etc, in which case we ignore it.\n        rmtree(path, ignore_errors=True)\n\n    del request.node.stash[tmppath_result_key]\n\n\ndef pytest_sessionfinish(session, exitstatus: int | ExitCode):\n    \"\"\"After each session, remove base directory if all the tests passed,\n    the policy is \"failed\", and the basetemp is not specified by a user.\n    \"\"\"\n    tmp_path_factory: TempPathFactory = session.config._tmp_path_factory\n    basetemp = tmp_path_factory._basetemp\n    if basetemp is None:\n        return\n\n    policy = tmp_path_factory._retention_policy\n    if (\n        exitstatus == 0\n        and policy == \"failed\"\n        and tmp_path_factory._given_basetemp is None\n    ):\n        if basetemp.is_dir():\n            # We do a \"best effort\" to remove files, but it might not be possible due to some leaked resource,\n            # permissions, etc, in which case we ignore it.\n            rmtree(basetemp, ignore_errors=True)\n\n    # Remove dead symlinks.\n    if basetemp.is_dir():\n        cleanup_dead_symlinks(basetemp)\n\n\n@hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_makereport(\n    item: Item, call\n) -> Generator[None, TestReport, TestReport]:\n    rep = yield\n    assert rep.when is not None\n    empty: dict[str, bool] = {}\n    item.stash.setdefault(tmppath_result_key, empty)[rep.when] = rep.passed\n    return rep\n", "src/_pytest/freeze_support.py": "\"\"\"Provides a function to report all internal modules for using freezing\ntools.\"\"\"\n\nfrom __future__ import annotations\n\nimport types\nfrom typing import Iterator\n\n\ndef freeze_includes() -> list[str]:\n    \"\"\"Return a list of module names used by pytest that should be\n    included by cx_freeze.\"\"\"\n    import _pytest\n\n    result = list(_iter_all_modules(_pytest))\n    return result\n\n\ndef _iter_all_modules(\n    package: str | types.ModuleType,\n    prefix: str = \"\",\n) -> Iterator[str]:\n    \"\"\"Iterate over the names of all modules that can be found in the given\n    package, recursively.\n\n        >>> import _pytest\n        >>> list(_iter_all_modules(_pytest))\n        ['_pytest._argcomplete', '_pytest._code.code', ...]\n    \"\"\"\n    import os\n    import pkgutil\n\n    if isinstance(package, str):\n        path = package\n    else:\n        # Type ignored because typeshed doesn't define ModuleType.__path__\n        # (only defined on packages).\n        package_path = package.__path__\n        path, prefix = package_path[0], package.__name__ + \".\"\n    for _, name, is_package in pkgutil.iter_modules([path]):\n        if is_package:\n            for m in _iter_all_modules(os.path.join(path, name), prefix=name + \".\"):\n                yield prefix + m\n        else:\n            yield prefix + name\n", "src/_pytest/stepwise.py": "from __future__ import annotations\n\nfrom _pytest import nodes\nfrom _pytest.cacheprovider import Cache\nfrom _pytest.config import Config\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.main import Session\nfrom _pytest.reports import TestReport\n\n\nSTEPWISE_CACHE_DIR = \"cache/stepwise\"\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group.addoption(\n        \"--sw\",\n        \"--stepwise\",\n        action=\"store_true\",\n        default=False,\n        dest=\"stepwise\",\n        help=\"Exit on test failure and continue from last failing test next time\",\n    )\n    group.addoption(\n        \"--sw-skip\",\n        \"--stepwise-skip\",\n        action=\"store_true\",\n        default=False,\n        dest=\"stepwise_skip\",\n        help=\"Ignore the first failing test but stop on the next failing test. \"\n        \"Implicitly enables --stepwise.\",\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    if config.option.stepwise_skip:\n        # allow --stepwise-skip to work on its own merits.\n        config.option.stepwise = True\n    if config.getoption(\"stepwise\"):\n        config.pluginmanager.register(StepwisePlugin(config), \"stepwiseplugin\")\n\n\ndef pytest_sessionfinish(session: Session) -> None:\n    if not session.config.getoption(\"stepwise\"):\n        assert session.config.cache is not None\n        if hasattr(session.config, \"workerinput\"):\n            # Do not update cache if this process is a xdist worker to prevent\n            # race conditions (#10641).\n            return\n        # Clear the list of failing tests if the plugin is not active.\n        session.config.cache.set(STEPWISE_CACHE_DIR, [])\n\n\nclass StepwisePlugin:\n    def __init__(self, config: Config) -> None:\n        self.config = config\n        self.session: Session | None = None\n        self.report_status = \"\"\n        assert config.cache is not None\n        self.cache: Cache = config.cache\n        self.lastfailed: str | None = self.cache.get(STEPWISE_CACHE_DIR, None)\n        self.skip: bool = config.getoption(\"stepwise_skip\")\n\n    def pytest_sessionstart(self, session: Session) -> None:\n        self.session = session\n\n    def pytest_collection_modifyitems(\n        self, config: Config, items: list[nodes.Item]\n    ) -> None:\n        if not self.lastfailed:\n            self.report_status = \"no previously failed tests, not skipping.\"\n            return\n\n        # check all item nodes until we find a match on last failed\n        failed_index = None\n        for index, item in enumerate(items):\n            if item.nodeid == self.lastfailed:\n                failed_index = index\n                break\n\n        # If the previously failed test was not found among the test items,\n        # do not skip any tests.\n        if failed_index is None:\n            self.report_status = \"previously failed test not found, not skipping.\"\n        else:\n            self.report_status = f\"skipping {failed_index} already passed items.\"\n            deselected = items[:failed_index]\n            del items[:failed_index]\n            config.hook.pytest_deselected(items=deselected)\n\n    def pytest_runtest_logreport(self, report: TestReport) -> None:\n        if report.failed:\n            if self.skip:\n                # Remove test from the failed ones (if it exists) and unset the skip option\n                # to make sure the following tests will not be skipped.\n                if report.nodeid == self.lastfailed:\n                    self.lastfailed = None\n\n                self.skip = False\n            else:\n                # Mark test as the last failing and interrupt the test session.\n                self.lastfailed = report.nodeid\n                assert self.session is not None\n                self.session.shouldstop = (\n                    \"Test failed, continuing from this test next run.\"\n                )\n\n        else:\n            # If the test was actually run and did pass.\n            if report.when == \"call\":\n                # Remove test from the failed ones, if exists.\n                if report.nodeid == self.lastfailed:\n                    self.lastfailed = None\n\n    def pytest_report_collectionfinish(self) -> str | None:\n        if self.config.getoption(\"verbose\") >= 0 and self.report_status:\n            return f\"stepwise: {self.report_status}\"\n        return None\n\n    def pytest_sessionfinish(self) -> None:\n        if hasattr(self.config, \"workerinput\"):\n            # Do not update cache if this process is a xdist worker to prevent\n            # race conditions (#10641).\n            return\n        self.cache.set(STEPWISE_CACHE_DIR, self.lastfailed)\n", "src/_pytest/runner.py": "# mypy: allow-untyped-defs\n\"\"\"Basic collect and runtest protocol implementations.\"\"\"\n\nfrom __future__ import annotations\n\nimport bdb\nimport dataclasses\nimport os\nimport sys\nimport types\nfrom typing import Callable\nfrom typing import cast\nfrom typing import final\nfrom typing import Generic\nfrom typing import Literal\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom .reports import BaseReport\nfrom .reports import CollectErrorRepr\nfrom .reports import CollectReport\nfrom .reports import TestReport\nfrom _pytest import timing\nfrom _pytest._code.code import ExceptionChainRepr\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest._code.code import TerminalRepr\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Directory\nfrom _pytest.nodes import Item\nfrom _pytest.nodes import Node\nfrom _pytest.outcomes import Exit\nfrom _pytest.outcomes import OutcomeException\nfrom _pytest.outcomes import Skipped\nfrom _pytest.outcomes import TEST_OUTCOME\n\n\nif sys.version_info < (3, 11):\n    from exceptiongroup import BaseExceptionGroup\n\nif TYPE_CHECKING:\n    from _pytest.main import Session\n    from _pytest.terminal import TerminalReporter\n\n#\n# pytest plugin hooks.\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"terminal reporting\", \"Reporting\", after=\"general\")\n    group.addoption(\n        \"--durations\",\n        action=\"store\",\n        type=int,\n        default=None,\n        metavar=\"N\",\n        help=\"Show N slowest setup/test durations (N=0 for all)\",\n    )\n    group.addoption(\n        \"--durations-min\",\n        action=\"store\",\n        type=float,\n        default=0.005,\n        metavar=\"N\",\n        help=\"Minimal duration in seconds for inclusion in slowest list. \"\n        \"Default: 0.005.\",\n    )\n\n\ndef pytest_terminal_summary(terminalreporter: TerminalReporter) -> None:\n    durations = terminalreporter.config.option.durations\n    durations_min = terminalreporter.config.option.durations_min\n    verbose = terminalreporter.config.getvalue(\"verbose\")\n    if durations is None:\n        return\n    tr = terminalreporter\n    dlist = []\n    for replist in tr.stats.values():\n        for rep in replist:\n            if hasattr(rep, \"duration\"):\n                dlist.append(rep)\n    if not dlist:\n        return\n    dlist.sort(key=lambda x: x.duration, reverse=True)\n    if not durations:\n        tr.write_sep(\"=\", \"slowest durations\")\n    else:\n        tr.write_sep(\"=\", f\"slowest {durations} durations\")\n        dlist = dlist[:durations]\n\n    for i, rep in enumerate(dlist):\n        if verbose < 2 and rep.duration < durations_min:\n            tr.write_line(\"\")\n            tr.write_line(\n                f\"({len(dlist) - i} durations < {durations_min:g}s hidden.  Use -vv to show these durations.)\"\n            )\n            break\n        tr.write_line(f\"{rep.duration:02.2f}s {rep.when:<8} {rep.nodeid}\")\n\n\ndef pytest_sessionstart(session: Session) -> None:\n    session._setupstate = SetupState()\n\n\ndef pytest_sessionfinish(session: Session) -> None:\n    session._setupstate.teardown_exact(None)\n\n\ndef pytest_runtest_protocol(item: Item, nextitem: Item | None) -> bool:\n    ihook = item.ihook\n    ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n    runtestprotocol(item, nextitem=nextitem)\n    ihook.pytest_runtest_logfinish(nodeid=item.nodeid, location=item.location)\n    return True\n\n\ndef runtestprotocol(\n    item: Item, log: bool = True, nextitem: Item | None = None\n) -> list[TestReport]:\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:  # type: ignore[attr-defined]\n        # This only happens if the item is re-run, as is done by\n        # pytest-rerunfailures.\n        item._initrequest()  # type: ignore[attr-defined]\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_report(item, \"call\", log))\n    # If the session is about to fail or stop, teardown everything - this is\n    # necessary to correctly report fixture teardown errors (see #11706)\n    if item.session.shouldfail or item.session.shouldstop:\n        nextitem = None\n    reports.append(call_and_report(item, \"teardown\", log, nextitem=nextitem))\n    # After all teardown hooks have been called\n    # want funcargs and request info to go away.\n    if hasrequest:\n        item._request = False  # type: ignore[attr-defined]\n        item.funcargs = None  # type: ignore[attr-defined]\n    return reports\n\n\ndef show_test_item(item: Item) -> None:\n    \"\"\"Show test function, parameters and the fixtures of the test item.\"\"\"\n    tw = item.config.get_terminal_writer()\n    tw.line()\n    tw.write(\" \" * 8)\n    tw.write(item.nodeid)\n    used_fixtures = sorted(getattr(item, \"fixturenames\", []))\n    if used_fixtures:\n        tw.write(\" (fixtures used: {})\".format(\", \".join(used_fixtures)))\n    tw.flush()\n\n\ndef pytest_runtest_setup(item: Item) -> None:\n    _update_current_test_var(item, \"setup\")\n    item.session._setupstate.setup(item)\n\n\ndef pytest_runtest_call(item: Item) -> None:\n    _update_current_test_var(item, \"call\")\n    try:\n        del sys.last_type\n        del sys.last_value\n        del sys.last_traceback\n        if sys.version_info >= (3, 12, 0):\n            del sys.last_exc\n    except AttributeError:\n        pass\n    try:\n        item.runtest()\n    except Exception as e:\n        # Store trace info to allow postmortem debugging\n        sys.last_type = type(e)\n        sys.last_value = e\n        if sys.version_info >= (3, 12, 0):\n            sys.last_exc = e\n        assert e.__traceback__ is not None\n        # Skip *this* frame\n        sys.last_traceback = e.__traceback__.tb_next\n        raise\n\n\ndef pytest_runtest_teardown(item: Item, nextitem: Item | None) -> None:\n    _update_current_test_var(item, \"teardown\")\n    item.session._setupstate.teardown_exact(nextitem)\n    _update_current_test_var(item, None)\n\n\ndef _update_current_test_var(\n    item: Item, when: Literal[\"setup\", \"call\", \"teardown\"] | None\n) -> None:\n    \"\"\"Update :envvar:`PYTEST_CURRENT_TEST` to reflect the current item and stage.\n\n    If ``when`` is None, delete ``PYTEST_CURRENT_TEST`` from the environment.\n    \"\"\"\n    var_name = \"PYTEST_CURRENT_TEST\"\n    if when:\n        value = f\"{item.nodeid} ({when})\"\n        # don't allow null bytes on environment variables (see #2644, #2957)\n        value = value.replace(\"\\x00\", \"(null)\")\n        os.environ[var_name] = value\n    else:\n        os.environ.pop(var_name)\n\n\ndef pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str] | None:\n    if report.when in (\"setup\", \"teardown\"):\n        if report.failed:\n            #      category, shortletter, verbose-word\n            return \"error\", \"E\", \"ERROR\"\n        elif report.skipped:\n            return \"skipped\", \"s\", \"SKIPPED\"\n        else:\n            return \"\", \"\", \"\"\n    return None\n\n\n#\n# Implementation\n\n\ndef call_and_report(\n    item: Item, when: Literal[\"setup\", \"call\", \"teardown\"], log: bool = True, **kwds\n) -> TestReport:\n    ihook = item.ihook\n    if when == \"setup\":\n        runtest_hook: Callable[..., None] = ihook.pytest_runtest_setup\n    elif when == \"call\":\n        runtest_hook = ihook.pytest_runtest_call\n    elif when == \"teardown\":\n        runtest_hook = ihook.pytest_runtest_teardown\n    else:\n        assert False, f\"Unhandled runtest hook case: {when}\"\n    reraise: tuple[type[BaseException], ...] = (Exit,)\n    if not item.config.getoption(\"usepdb\", False):\n        reraise += (KeyboardInterrupt,)\n    call = CallInfo.from_call(\n        lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n    )\n    report: TestReport = ihook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        ihook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        ihook.pytest_exception_interact(node=item, call=call, report=report)\n    return report\n\n\ndef check_interactive_exception(call: CallInfo[object], report: BaseReport) -> bool:\n    \"\"\"Check whether the call raised an exception that should be reported as\n    interactive.\"\"\"\n    if call.excinfo is None:\n        # Didn't raise.\n        return False\n    if hasattr(report, \"wasxfail\"):\n        # Exception was expected.\n        return False\n    if isinstance(call.excinfo.value, (Skipped, bdb.BdbQuit)):\n        # Special control flow exception.\n        return False\n    return True\n\n\nTResult = TypeVar(\"TResult\", covariant=True)\n\n\n@final\n@dataclasses.dataclass\nclass CallInfo(Generic[TResult]):\n    \"\"\"Result/Exception info of a function invocation.\"\"\"\n\n    _result: TResult | None\n    #: The captured exception of the call, if it raised.\n    excinfo: ExceptionInfo[BaseException] | None\n    #: The system time when the call started, in seconds since the epoch.\n    start: float\n    #: The system time when the call ended, in seconds since the epoch.\n    stop: float\n    #: The call duration, in seconds.\n    duration: float\n    #: The context of invocation: \"collect\", \"setup\", \"call\" or \"teardown\".\n    when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"]\n\n    def __init__(\n        self,\n        result: TResult | None,\n        excinfo: ExceptionInfo[BaseException] | None,\n        start: float,\n        stop: float,\n        duration: float,\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        self._result = result\n        self.excinfo = excinfo\n        self.start = start\n        self.stop = stop\n        self.duration = duration\n        self.when = when\n\n    @property\n    def result(self) -> TResult:\n        \"\"\"The return value of the call, if it didn't raise.\n\n        Can only be accessed if excinfo is None.\n        \"\"\"\n        if self.excinfo is not None:\n            raise AttributeError(f\"{self!r} has no valid result\")\n        # The cast is safe because an exception wasn't raised, hence\n        # _result has the expected function return type (which may be\n        #  None, that's why a cast and not an assert).\n        return cast(TResult, self._result)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n\n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n            result: TResult | None = func()\n        except BaseException:\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and isinstance(excinfo.value, reraise):\n                raise\n            result = None\n        # use the perf counter\n        precise_stop = timing.perf_counter()\n        duration = precise_stop - precise_start\n        stop = timing.time()\n        return cls(\n            start=start,\n            stop=stop,\n            duration=duration,\n            when=when,\n            result=result,\n            excinfo=excinfo,\n            _ispytest=True,\n        )\n\n    def __repr__(self) -> str:\n        if self.excinfo is None:\n            return f\"<CallInfo when={self.when!r} result: {self._result!r}>\"\n        return f\"<CallInfo when={self.when!r} excinfo={self.excinfo!r}>\"\n\n\ndef pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> TestReport:\n    return TestReport.from_item_and_call(item, call)\n\n\ndef pytest_make_collect_report(collector: Collector) -> CollectReport:\n    def collect() -> list[Item | Collector]:\n        # Before collecting, if this is a Directory, load the conftests.\n        # If a conftest import fails to load, it is considered a collection\n        # error of the Directory collector. This is why it's done inside of the\n        # CallInfo wrapper.\n        #\n        # Note: initial conftests are loaded early, not here.\n        if isinstance(collector, Directory):\n            collector.config.pluginmanager._loadconftestmodules(\n                collector.path,\n                collector.config.getoption(\"importmode\"),\n                rootpath=collector.config.rootpath,\n                consider_namespace_packages=collector.config.getini(\n                    \"consider_namespace_packages\"\n                ),\n            )\n\n        return list(collector.collect())\n\n    call = CallInfo.from_call(\n        collect, \"collect\", reraise=(KeyboardInterrupt, SystemExit)\n    )\n    longrepr: None | tuple[str, int, str] | str | TerminalRepr = None\n    if not call.excinfo:\n        outcome: Literal[\"passed\", \"skipped\", \"failed\"] = \"passed\"\n    else:\n        skip_exceptions = [Skipped]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if isinstance(call.excinfo.value, tuple(skip_exceptions)):\n            outcome = \"skipped\"\n            r_ = collector._repr_failure_py(call.excinfo, \"line\")\n            assert isinstance(r_, ExceptionChainRepr), repr(r_)\n            r = r_.reprcrash\n            assert r\n            longrepr = (str(r.path), r.lineno, r.message)\n        else:\n            outcome = \"failed\"\n            errorinfo = collector.repr_failure(call.excinfo)\n            if not hasattr(errorinfo, \"toterminal\"):\n                assert isinstance(errorinfo, str)\n                errorinfo = CollectErrorRepr(errorinfo)\n            longrepr = errorinfo\n    result = call.result if not call.excinfo else None\n    rep = CollectReport(collector.nodeid, outcome, longrepr, result)\n    rep.call = call  # type: ignore # see collect_one_node\n    return rep\n\n\nclass SetupState:\n    \"\"\"Shared state for setting up/tearing down test items or collectors\n    in a session.\n\n    Suppose we have a collection tree as follows:\n\n    <Session session>\n        <Module mod1>\n            <Function item1>\n        <Module mod2>\n            <Function item2>\n\n    The SetupState maintains a stack. The stack starts out empty:\n\n        []\n\n    During the setup phase of item1, setup(item1) is called. What it does\n    is:\n\n        push session to stack, run session.setup()\n        push mod1 to stack, run mod1.setup()\n        push item1 to stack, run item1.setup()\n\n    The stack is:\n\n        [session, mod1, item1]\n\n    While the stack is in this shape, it is allowed to add finalizers to\n    each of session, mod1, item1 using addfinalizer().\n\n    During the teardown phase of item1, teardown_exact(item2) is called,\n    where item2 is the next item to item1. What it does is:\n\n        pop item1 from stack, run its teardowns\n        pop mod1 from stack, run its teardowns\n\n    mod1 was popped because it ended its purpose with item1. The stack is:\n\n        [session]\n\n    During the setup phase of item2, setup(item2) is called. What it does\n    is:\n\n        push mod2 to stack, run mod2.setup()\n        push item2 to stack, run item2.setup()\n\n    Stack:\n\n        [session, mod2, item2]\n\n    During the teardown phase of item2, teardown_exact(None) is called,\n    because item2 is the last item. What it does is:\n\n        pop item2 from stack, run its teardowns\n        pop mod2 from stack, run its teardowns\n        pop session from stack, run its teardowns\n\n    Stack:\n\n        []\n\n    The end!\n    \"\"\"\n\n    def __init__(self) -> None:\n        # The stack is in the dict insertion order.\n        self.stack: dict[\n            Node,\n            tuple[\n                # Node's finalizers.\n                list[Callable[[], object]],\n                # Node's exception and original traceback, if its setup raised.\n                tuple[OutcomeException | Exception, types.TracebackType | None] | None,\n            ],\n        ] = {}\n\n    def setup(self, item: Item) -> None:\n        \"\"\"Setup objects along the collector chain to the item.\"\"\"\n        needed_collectors = item.listchain()\n\n        # If a collector fails its setup, fail its entire subtree of items.\n        # The setup is not retried for each item - the same exception is used.\n        for col, (finalizers, exc) in self.stack.items():\n            assert col in needed_collectors, \"previous item was not torn down properly\"\n            if exc:\n                raise exc[0].with_traceback(exc[1])\n\n        for col in needed_collectors[len(self.stack) :]:\n            assert col not in self.stack\n            # Push onto the stack.\n            self.stack[col] = ([col.teardown], None)\n            try:\n                col.setup()\n            except TEST_OUTCOME as exc:\n                self.stack[col] = (self.stack[col][0], (exc, exc.__traceback__))\n                raise\n\n    def addfinalizer(self, finalizer: Callable[[], object], node: Node) -> None:\n        \"\"\"Attach a finalizer to the given node.\n\n        The node must be currently active in the stack.\n        \"\"\"\n        assert node and not isinstance(node, tuple)\n        assert callable(finalizer)\n        assert node in self.stack, (node, self.stack)\n        self.stack[node][0].append(finalizer)\n\n    def teardown_exact(self, nextitem: Item | None) -> None:\n        \"\"\"Teardown the current stack up until reaching nodes that nextitem\n        also descends from.\n\n        When nextitem is None (meaning we're at the last item), the entire\n        stack is torn down.\n        \"\"\"\n        needed_collectors = nextitem and nextitem.listchain() or []\n        exceptions: list[BaseException] = []\n        while self.stack:\n            if list(self.stack.keys()) == needed_collectors[: len(self.stack)]:\n                break\n            node, (finalizers, _) = self.stack.popitem()\n            these_exceptions = []\n            while finalizers:\n                fin = finalizers.pop()\n                try:\n                    fin()\n                except TEST_OUTCOME as e:\n                    these_exceptions.append(e)\n\n            if len(these_exceptions) == 1:\n                exceptions.extend(these_exceptions)\n            elif these_exceptions:\n                msg = f\"errors while tearing down {node!r}\"\n                exceptions.append(BaseExceptionGroup(msg, these_exceptions[::-1]))\n\n        if len(exceptions) == 1:\n            raise exceptions[0]\n        elif exceptions:\n            raise BaseExceptionGroup(\"errors during test teardown\", exceptions[::-1])\n        if nextitem is None:\n            assert not self.stack\n\n\ndef collect_one_node(collector: Collector) -> CollectReport:\n    ihook = collector.ihook\n    ihook.pytest_collectstart(collector=collector)\n    rep: CollectReport = ihook.pytest_make_collect_report(collector=collector)\n    call = rep.__dict__.pop(\"call\", None)\n    if call and check_interactive_exception(call, rep):\n        ihook.pytest_exception_interact(node=collector, call=call, report=rep)\n    return rep\n", "src/_pytest/main.py": "\"\"\"Core implementation of the testing process: init, session, runtest loop.\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport dataclasses\nimport fnmatch\nimport functools\nimport importlib\nimport importlib.util\nimport os\nfrom pathlib import Path\nimport sys\nfrom typing import AbstractSet\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import final\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Literal\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import TYPE_CHECKING\nimport warnings\n\nimport pluggy\n\nfrom _pytest import nodes\nimport _pytest._code\nfrom _pytest.config import Config\nfrom _pytest.config import directory_arg\nfrom _pytest.config import ExitCode\nfrom _pytest.config import hookimpl\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.config import UsageError\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.config.compat import PathAwareHookProxy\nfrom _pytest.outcomes import exit\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import bestrelpath\nfrom _pytest.pathlib import fnmatch_ex\nfrom _pytest.pathlib import safe_exists\nfrom _pytest.pathlib import scandir\nfrom _pytest.reports import CollectReport\nfrom _pytest.reports import TestReport\nfrom _pytest.runner import collect_one_node\nfrom _pytest.runner import SetupState\nfrom _pytest.warning_types import PytestWarning\n\n\nif TYPE_CHECKING:\n    from typing import Self\n\n    from _pytest.fixtures import FixtureManager\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    parser.addini(\n        \"norecursedirs\",\n        \"Directory patterns to avoid for recursion\",\n        type=\"args\",\n        default=[\n            \"*.egg\",\n            \".*\",\n            \"_darcs\",\n            \"build\",\n            \"CVS\",\n            \"dist\",\n            \"node_modules\",\n            \"venv\",\n            \"{arch}\",\n        ],\n    )\n    parser.addini(\n        \"testpaths\",\n        \"Directories to search for tests when no files or directories are given on the \"\n        \"command line\",\n        type=\"args\",\n        default=[],\n    )\n    group = parser.getgroup(\"general\", \"Running and selection options\")\n    group._addoption(\n        \"-x\",\n        \"--exitfirst\",\n        action=\"store_const\",\n        dest=\"maxfail\",\n        const=1,\n        help=\"Exit instantly on first error or failed test\",\n    )\n    group = parser.getgroup(\"pytest-warnings\")\n    group.addoption(\n        \"-W\",\n        \"--pythonwarnings\",\n        action=\"append\",\n        help=\"Set which warnings to report, see -W option of Python itself\",\n    )\n    parser.addini(\n        \"filterwarnings\",\n        type=\"linelist\",\n        help=\"Each line specifies a pattern for \"\n        \"warnings.filterwarnings. \"\n        \"Processed after -W/--pythonwarnings.\",\n    )\n    group._addoption(\n        \"--maxfail\",\n        metavar=\"num\",\n        action=\"store\",\n        type=int,\n        dest=\"maxfail\",\n        default=0,\n        help=\"Exit after first num failures or errors\",\n    )\n    group._addoption(\n        \"--strict-config\",\n        action=\"store_true\",\n        help=\"Any warnings encountered while parsing the `pytest` section of the \"\n        \"configuration file raise errors\",\n    )\n    group._addoption(\n        \"--strict-markers\",\n        action=\"store_true\",\n        help=\"Markers not registered in the `markers` section of the configuration \"\n        \"file raise errors\",\n    )\n    group._addoption(\n        \"--strict\",\n        action=\"store_true\",\n        help=\"(Deprecated) alias to --strict-markers\",\n    )\n    group._addoption(\n        \"-c\",\n        \"--config-file\",\n        metavar=\"FILE\",\n        type=str,\n        dest=\"inifilename\",\n        help=\"Load configuration from `FILE` instead of trying to locate one of the \"\n        \"implicit configuration files.\",\n    )\n    group._addoption(\n        \"--continue-on-collection-errors\",\n        action=\"store_true\",\n        default=False,\n        dest=\"continue_on_collection_errors\",\n        help=\"Force test execution even if collection errors occur\",\n    )\n    group._addoption(\n        \"--rootdir\",\n        action=\"store\",\n        dest=\"rootdir\",\n        help=\"Define root directory for tests. Can be relative path: 'root_dir', './root_dir', \"\n        \"'root_dir/another_dir/'; absolute path: '/home/user/root_dir'; path with variables: \"\n        \"'$HOME/root_dir'.\",\n    )\n\n    group = parser.getgroup(\"collect\", \"collection\")\n    group.addoption(\n        \"--collectonly\",\n        \"--collect-only\",\n        \"--co\",\n        action=\"store_true\",\n        help=\"Only collect tests, don't execute them\",\n    )\n    group.addoption(\n        \"--pyargs\",\n        action=\"store_true\",\n        help=\"Try to interpret all arguments as Python packages\",\n    )\n    group.addoption(\n        \"--ignore\",\n        action=\"append\",\n        metavar=\"path\",\n        help=\"Ignore path during collection (multi-allowed)\",\n    )\n    group.addoption(\n        \"--ignore-glob\",\n        action=\"append\",\n        metavar=\"path\",\n        help=\"Ignore path pattern during collection (multi-allowed)\",\n    )\n    group.addoption(\n        \"--deselect\",\n        action=\"append\",\n        metavar=\"nodeid_prefix\",\n        help=\"Deselect item (via node id prefix) during collection (multi-allowed)\",\n    )\n    group.addoption(\n        \"--confcutdir\",\n        dest=\"confcutdir\",\n        default=None,\n        metavar=\"dir\",\n        type=functools.partial(directory_arg, optname=\"--confcutdir\"),\n        help=\"Only load conftest.py's relative to specified dir\",\n    )\n    group.addoption(\n        \"--noconftest\",\n        action=\"store_true\",\n        dest=\"noconftest\",\n        default=False,\n        help=\"Don't load any conftest.py files\",\n    )\n    group.addoption(\n        \"--keepduplicates\",\n        \"--keep-duplicates\",\n        action=\"store_true\",\n        dest=\"keepduplicates\",\n        default=False,\n        help=\"Keep duplicate tests\",\n    )\n    group.addoption(\n        \"--collect-in-virtualenv\",\n        action=\"store_true\",\n        dest=\"collect_in_virtualenv\",\n        default=False,\n        help=\"Don't ignore tests in a local virtualenv directory\",\n    )\n    group.addoption(\n        \"--import-mode\",\n        default=\"prepend\",\n        choices=[\"prepend\", \"append\", \"importlib\"],\n        dest=\"importmode\",\n        help=\"Prepend/append to sys.path when importing test modules and conftest \"\n        \"files. Default: prepend.\",\n    )\n    parser.addini(\n        \"consider_namespace_packages\",\n        type=\"bool\",\n        default=False,\n        help=\"Consider namespace packages when resolving module names during import\",\n    )\n\n    group = parser.getgroup(\"debugconfig\", \"test session debugging and configuration\")\n    group.addoption(\n        \"--basetemp\",\n        dest=\"basetemp\",\n        default=None,\n        type=validate_basetemp,\n        metavar=\"dir\",\n        help=(\n            \"Base temporary directory for this test run. \"\n            \"(Warning: this directory is removed if it exists.)\"\n        ),\n    )\n\n\ndef validate_basetemp(path: str) -> str:\n    # GH 7119\n    msg = \"basetemp must not be empty, the current working directory or any parent directory of it\"\n\n    # empty path\n    if not path:\n        raise argparse.ArgumentTypeError(msg)\n\n    def is_ancestor(base: Path, query: Path) -> bool:\n        \"\"\"Return whether query is an ancestor of base.\"\"\"\n        if base == query:\n            return True\n        return query in base.parents\n\n    # check if path is an ancestor of cwd\n    if is_ancestor(Path.cwd(), Path(path).absolute()):\n        raise argparse.ArgumentTypeError(msg)\n\n    # check symlinks for ancestors\n    if is_ancestor(Path.cwd().resolve(), Path(path).resolve()):\n        raise argparse.ArgumentTypeError(msg)\n\n    return path\n\n\ndef wrap_session(\n    config: Config, doit: Callable[[Config, Session], int | ExitCode | None]\n) -> int | ExitCode:\n    \"\"\"Skeleton command line program.\"\"\"\n    session = Session.from_config(config)\n    session.exitstatus = ExitCode.OK\n    initstate = 0\n    try:\n        try:\n            config._do_configure()\n            initstate = 1\n            config.hook.pytest_sessionstart(session=session)\n            initstate = 2\n            session.exitstatus = doit(config, session) or 0\n        except UsageError:\n            session.exitstatus = ExitCode.USAGE_ERROR\n            raise\n        except Failed:\n            session.exitstatus = ExitCode.TESTS_FAILED\n        except (KeyboardInterrupt, exit.Exception):\n            excinfo = _pytest._code.ExceptionInfo.from_current()\n            exitstatus: int | ExitCode = ExitCode.INTERRUPTED\n            if isinstance(excinfo.value, exit.Exception):\n                if excinfo.value.returncode is not None:\n                    exitstatus = excinfo.value.returncode\n                if initstate < 2:\n                    sys.stderr.write(f\"{excinfo.typename}: {excinfo.value.msg}\\n\")\n            config.hook.pytest_keyboard_interrupt(excinfo=excinfo)\n            session.exitstatus = exitstatus\n        except BaseException:\n            session.exitstatus = ExitCode.INTERNAL_ERROR\n            excinfo = _pytest._code.ExceptionInfo.from_current()\n            try:\n                config.notify_exception(excinfo, config.option)\n            except exit.Exception as exc:\n                if exc.returncode is not None:\n                    session.exitstatus = exc.returncode\n                sys.stderr.write(f\"{type(exc).__name__}: {exc}\\n\")\n            else:\n                if isinstance(excinfo.value, SystemExit):\n                    sys.stderr.write(\"mainloop: caught unexpected SystemExit!\\n\")\n\n    finally:\n        # Explicitly break reference cycle.\n        excinfo = None  # type: ignore\n        os.chdir(session.startpath)\n        if initstate >= 2:\n            try:\n                config.hook.pytest_sessionfinish(\n                    session=session, exitstatus=session.exitstatus\n                )\n            except exit.Exception as exc:\n                if exc.returncode is not None:\n                    session.exitstatus = exc.returncode\n                sys.stderr.write(f\"{type(exc).__name__}: {exc}\\n\")\n        config._ensure_unconfigure()\n    return session.exitstatus\n\n\ndef pytest_cmdline_main(config: Config) -> int | ExitCode:\n    return wrap_session(config, _main)\n\n\ndef _main(config: Config, session: Session) -> int | ExitCode | None:\n    \"\"\"Default command line protocol for initialization, session,\n    running tests and reporting.\"\"\"\n    config.hook.pytest_collection(session=session)\n    config.hook.pytest_runtestloop(session=session)\n\n    if session.testsfailed:\n        return ExitCode.TESTS_FAILED\n    elif session.testscollected == 0:\n        return ExitCode.NO_TESTS_COLLECTED\n    return None\n\n\ndef pytest_collection(session: Session) -> None:\n    session.perform_collect()\n\n\ndef pytest_runtestloop(session: Session) -> bool:\n    if session.testsfailed and not session.config.option.continue_on_collection_errors:\n        raise session.Interrupted(\n            \"%d error%s during collection\"\n            % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n        )\n\n    if session.config.option.collectonly:\n        return True\n\n    for i, item in enumerate(session.items):\n        nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n        item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n        if session.shouldfail:\n            raise session.Failed(session.shouldfail)\n        if session.shouldstop:\n            raise session.Interrupted(session.shouldstop)\n    return True\n\n\ndef _in_venv(path: Path) -> bool:\n    \"\"\"Attempt to detect if ``path`` is the root of a Virtual Environment by\n    checking for the existence of the appropriate activate script.\"\"\"\n    bindir = path.joinpath(\"Scripts\" if sys.platform.startswith(\"win\") else \"bin\")\n    try:\n        if not bindir.is_dir():\n            return False\n    except OSError:\n        return False\n    activates = (\n        \"activate\",\n        \"activate.csh\",\n        \"activate.fish\",\n        \"Activate\",\n        \"Activate.bat\",\n        \"Activate.ps1\",\n    )\n    return any(fname.name in activates for fname in bindir.iterdir())\n\n\ndef pytest_ignore_collect(collection_path: Path, config: Config) -> bool | None:\n    if collection_path.name == \"__pycache__\":\n        return True\n\n    ignore_paths = config._getconftest_pathlist(\n        \"collect_ignore\", path=collection_path.parent\n    )\n    ignore_paths = ignore_paths or []\n    excludeopt = config.getoption(\"ignore\")\n    if excludeopt:\n        ignore_paths.extend(absolutepath(x) for x in excludeopt)\n\n    if collection_path in ignore_paths:\n        return True\n\n    ignore_globs = config._getconftest_pathlist(\n        \"collect_ignore_glob\", path=collection_path.parent\n    )\n    ignore_globs = ignore_globs or []\n    excludeglobopt = config.getoption(\"ignore_glob\")\n    if excludeglobopt:\n        ignore_globs.extend(absolutepath(x) for x in excludeglobopt)\n\n    if any(fnmatch.fnmatch(str(collection_path), str(glob)) for glob in ignore_globs):\n        return True\n\n    allow_in_venv = config.getoption(\"collect_in_virtualenv\")\n    if not allow_in_venv and _in_venv(collection_path):\n        return True\n\n    if collection_path.is_dir():\n        norecursepatterns = config.getini(\"norecursedirs\")\n        if any(fnmatch_ex(pat, collection_path) for pat in norecursepatterns):\n            return True\n\n    return None\n\n\ndef pytest_collect_directory(\n    path: Path, parent: nodes.Collector\n) -> nodes.Collector | None:\n    return Dir.from_parent(parent, path=path)\n\n\ndef pytest_collection_modifyitems(items: list[nodes.Item], config: Config) -> None:\n    deselect_prefixes = tuple(config.getoption(\"deselect\") or [])\n    if not deselect_prefixes:\n        return\n\n    remaining = []\n    deselected = []\n    for colitem in items:\n        if colitem.nodeid.startswith(deselect_prefixes):\n            deselected.append(colitem)\n        else:\n            remaining.append(colitem)\n\n    if deselected:\n        config.hook.pytest_deselected(items=deselected)\n        items[:] = remaining\n\n\nclass FSHookProxy:\n    def __init__(\n        self,\n        pm: PytestPluginManager,\n        remove_mods: AbstractSet[object],\n    ) -> None:\n        self.pm = pm\n        self.remove_mods = remove_mods\n\n    def __getattr__(self, name: str) -> pluggy.HookCaller:\n        x = self.pm.subset_hook_caller(name, remove_plugins=self.remove_mods)\n        self.__dict__[name] = x\n        return x\n\n\nclass Interrupted(KeyboardInterrupt):\n    \"\"\"Signals that the test run was interrupted.\"\"\"\n\n    __module__ = \"builtins\"  # For py3.\n\n\nclass Failed(Exception):\n    \"\"\"Signals a stop as failed test run.\"\"\"\n\n\n@dataclasses.dataclass\nclass _bestrelpath_cache(Dict[Path, str]):\n    __slots__ = (\"path\",)\n\n    path: Path\n\n    def __missing__(self, path: Path) -> str:\n        r = bestrelpath(self.path, path)\n        self[path] = r\n        return r\n\n\n@final\nclass Dir(nodes.Directory):\n    \"\"\"Collector of files in a file system directory.\n\n    .. versionadded:: 8.0\n\n    .. note::\n\n        Python directories with an `__init__.py` file are instead collected by\n        :class:`~pytest.Package` by default. Both are :class:`~pytest.Directory`\n        collectors.\n    \"\"\"\n\n    @classmethod\n    def from_parent(  # type: ignore[override]\n        cls,\n        parent: nodes.Collector,\n        *,\n        path: Path,\n    ) -> Self:\n        \"\"\"The public constructor.\n\n        :param parent: The parent collector of this Dir.\n        :param path: The directory's path.\n        :type path: pathlib.Path\n        \"\"\"\n        return super().from_parent(parent=parent, path=path)\n\n    def collect(self) -> Iterable[nodes.Item | nodes.Collector]:\n        config = self.config\n        col: nodes.Collector | None\n        cols: Sequence[nodes.Collector]\n        ihook = self.ihook\n        for direntry in scandir(self.path):\n            if direntry.is_dir():\n                path = Path(direntry.path)\n                if not self.session.isinitpath(path, with_parents=True):\n                    if ihook.pytest_ignore_collect(collection_path=path, config=config):\n                        continue\n                col = ihook.pytest_collect_directory(path=path, parent=self)\n                if col is not None:\n                    yield col\n\n            elif direntry.is_file():\n                path = Path(direntry.path)\n                if not self.session.isinitpath(path):\n                    if ihook.pytest_ignore_collect(collection_path=path, config=config):\n                        continue\n                cols = ihook.pytest_collect_file(file_path=path, parent=self)\n                yield from cols\n\n\n@final\nclass Session(nodes.Collector):\n    \"\"\"The root of the collection tree.\n\n    ``Session`` collects the initial paths given as arguments to pytest.\n    \"\"\"\n\n    Interrupted = Interrupted\n    Failed = Failed\n    # Set on the session by runner.pytest_sessionstart.\n    _setupstate: SetupState\n    # Set on the session by fixtures.pytest_sessionstart.\n    _fixturemanager: FixtureManager\n    exitstatus: int | ExitCode\n\n    def __init__(self, config: Config) -> None:\n        super().__init__(\n            name=\"\",\n            path=config.rootpath,\n            fspath=None,\n            parent=None,\n            config=config,\n            session=self,\n            nodeid=\"\",\n        )\n        self.testsfailed = 0\n        self.testscollected = 0\n        self._shouldstop: bool | str = False\n        self._shouldfail: bool | str = False\n        self.trace = config.trace.root.get(\"collection\")\n        self._initialpaths: frozenset[Path] = frozenset()\n        self._initialpaths_with_parents: frozenset[Path] = frozenset()\n        self._notfound: list[tuple[str, Sequence[nodes.Collector]]] = []\n        self._initial_parts: list[CollectionArgument] = []\n        self._collection_cache: dict[nodes.Collector, CollectReport] = {}\n        self.items: list[nodes.Item] = []\n\n        self._bestrelpathcache: dict[Path, str] = _bestrelpath_cache(config.rootpath)\n\n        self.config.pluginmanager.register(self, name=\"session\")\n\n    @classmethod\n    def from_config(cls, config: Config) -> Session:\n        session: Session = cls._create(config=config)\n        return session\n\n    def __repr__(self) -> str:\n        return \"<%s %s exitstatus=%r testsfailed=%d testscollected=%d>\" % (\n            self.__class__.__name__,\n            self.name,\n            getattr(self, \"exitstatus\", \"<UNSET>\"),\n            self.testsfailed,\n            self.testscollected,\n        )\n\n    @property\n    def shouldstop(self) -> bool | str:\n        return self._shouldstop\n\n    @shouldstop.setter\n    def shouldstop(self, value: bool | str) -> None:\n        # The runner checks shouldfail and assumes that if it is set we are\n        # definitely stopping, so prevent unsetting it.\n        if value is False and self._shouldstop:\n            warnings.warn(\n                PytestWarning(\n                    \"session.shouldstop cannot be unset after it has been set; ignoring.\"\n                ),\n                stacklevel=2,\n            )\n            return\n        self._shouldstop = value\n\n    @property\n    def shouldfail(self) -> bool | str:\n        return self._shouldfail\n\n    @shouldfail.setter\n    def shouldfail(self, value: bool | str) -> None:\n        # The runner checks shouldfail and assumes that if it is set we are\n        # definitely stopping, so prevent unsetting it.\n        if value is False and self._shouldfail:\n            warnings.warn(\n                PytestWarning(\n                    \"session.shouldfail cannot be unset after it has been set; ignoring.\"\n                ),\n                stacklevel=2,\n            )\n            return\n        self._shouldfail = value\n\n    @property\n    def startpath(self) -> Path:\n        \"\"\"The path from which pytest was invoked.\n\n        .. versionadded:: 7.0.0\n        \"\"\"\n        return self.config.invocation_params.dir\n\n    def _node_location_to_relpath(self, node_path: Path) -> str:\n        # bestrelpath is a quite slow function.\n        return self._bestrelpathcache[node_path]\n\n    @hookimpl(tryfirst=True)\n    def pytest_collectstart(self) -> None:\n        if self.shouldfail:\n            raise self.Failed(self.shouldfail)\n        if self.shouldstop:\n            raise self.Interrupted(self.shouldstop)\n\n    @hookimpl(tryfirst=True)\n    def pytest_runtest_logreport(self, report: TestReport | CollectReport) -> None:\n        if report.failed and not hasattr(report, \"wasxfail\"):\n            self.testsfailed += 1\n            maxfail = self.config.getvalue(\"maxfail\")\n            if maxfail and self.testsfailed >= maxfail:\n                self.shouldfail = \"stopping after %d failures\" % (self.testsfailed)\n\n    pytest_collectreport = pytest_runtest_logreport\n\n    def isinitpath(\n        self,\n        path: str | os.PathLike[str],\n        *,\n        with_parents: bool = False,\n    ) -> bool:\n        \"\"\"Is path an initial path?\n\n        An initial path is a path explicitly given to pytest on the command\n        line.\n\n        :param with_parents:\n            If set, also return True if the path is a parent of an initial path.\n\n        .. versionchanged:: 8.0\n            Added the ``with_parents`` parameter.\n        \"\"\"\n        # Optimization: Path(Path(...)) is much slower than isinstance.\n        path_ = path if isinstance(path, Path) else Path(path)\n        if with_parents:\n            return path_ in self._initialpaths_with_parents\n        else:\n            return path_ in self._initialpaths\n\n    def gethookproxy(self, fspath: os.PathLike[str]) -> pluggy.HookRelay:\n        # Optimization: Path(Path(...)) is much slower than isinstance.\n        path = fspath if isinstance(fspath, Path) else Path(fspath)\n        pm = self.config.pluginmanager\n        # Check if we have the common case of running\n        # hooks with all conftest.py files.\n        my_conftestmodules = pm._getconftestmodules(path)\n        remove_mods = pm._conftest_plugins.difference(my_conftestmodules)\n        proxy: pluggy.HookRelay\n        if remove_mods:\n            # One or more conftests are not in use at this path.\n            proxy = PathAwareHookProxy(FSHookProxy(pm, remove_mods))  # type: ignore[arg-type,assignment]\n        else:\n            # All plugins are active for this fspath.\n            proxy = self.config.hook\n        return proxy\n\n    def _collect_path(\n        self,\n        path: Path,\n        path_cache: dict[Path, Sequence[nodes.Collector]],\n    ) -> Sequence[nodes.Collector]:\n        \"\"\"Create a Collector for the given path.\n\n        `path_cache` makes it so the same Collectors are returned for the same\n        path.\n        \"\"\"\n        if path in path_cache:\n            return path_cache[path]\n\n        if path.is_dir():\n            ihook = self.gethookproxy(path.parent)\n            col: nodes.Collector | None = ihook.pytest_collect_directory(\n                path=path, parent=self\n            )\n            cols: Sequence[nodes.Collector] = (col,) if col is not None else ()\n\n        elif path.is_file():\n            ihook = self.gethookproxy(path)\n            cols = ihook.pytest_collect_file(file_path=path, parent=self)\n\n        else:\n            # Broken symlink or invalid/missing file.\n            cols = ()\n\n        path_cache[path] = cols\n        return cols\n\n    @overload\n    def perform_collect(\n        self, args: Sequence[str] | None = ..., genitems: Literal[True] = ...\n    ) -> Sequence[nodes.Item]: ...\n\n    @overload\n    def perform_collect(\n        self, args: Sequence[str] | None = ..., genitems: bool = ...\n    ) -> Sequence[nodes.Item | nodes.Collector]: ...\n\n    def perform_collect(\n        self, args: Sequence[str] | None = None, genitems: bool = True\n    ) -> Sequence[nodes.Item | nodes.Collector]:\n        \"\"\"Perform the collection phase for this session.\n\n        This is called by the default :hook:`pytest_collection` hook\n        implementation; see the documentation of this hook for more details.\n        For testing purposes, it may also be called directly on a fresh\n        ``Session``.\n\n        This function normally recursively expands any collectors collected\n        from the session to their items, and only items are returned. For\n        testing purposes, this may be suppressed by passing ``genitems=False``,\n        in which case the return value contains these collectors unexpanded,\n        and ``session.items`` is empty.\n        \"\"\"\n        if args is None:\n            args = self.config.args\n\n        self.trace(\"perform_collect\", self, args)\n        self.trace.root.indent += 1\n\n        hook = self.config.hook\n\n        self._notfound = []\n        self._initial_parts = []\n        self._collection_cache = {}\n        self.items = []\n        items: Sequence[nodes.Item | nodes.Collector] = self.items\n        try:\n            initialpaths: list[Path] = []\n            initialpaths_with_parents: list[Path] = []\n            for arg in args:\n                collection_argument = resolve_collection_argument(\n                    self.config.invocation_params.dir,\n                    arg,\n                    as_pypath=self.config.option.pyargs,\n                )\n                self._initial_parts.append(collection_argument)\n                initialpaths.append(collection_argument.path)\n                initialpaths_with_parents.append(collection_argument.path)\n                initialpaths_with_parents.extend(collection_argument.path.parents)\n            self._initialpaths = frozenset(initialpaths)\n            self._initialpaths_with_parents = frozenset(initialpaths_with_parents)\n\n            rep = collect_one_node(self)\n            self.ihook.pytest_collectreport(report=rep)\n            self.trace.root.indent -= 1\n            if self._notfound:\n                errors = []\n                for arg, collectors in self._notfound:\n                    if collectors:\n                        errors.append(\n                            f\"not found: {arg}\\n(no match in any of {collectors!r})\"\n                        )\n                    else:\n                        errors.append(f\"found no collectors for {arg}\")\n\n                raise UsageError(*errors)\n\n            if not genitems:\n                items = rep.result\n            else:\n                if rep.passed:\n                    for node in rep.result:\n                        self.items.extend(self.genitems(node))\n\n            self.config.pluginmanager.check_pending()\n            hook.pytest_collection_modifyitems(\n                session=self, config=self.config, items=items\n            )\n        finally:\n            self._notfound = []\n            self._initial_parts = []\n            self._collection_cache = {}\n            hook.pytest_collection_finish(session=self)\n\n        if genitems:\n            self.testscollected = len(items)\n\n        return items\n\n    def _collect_one_node(\n        self,\n        node: nodes.Collector,\n        handle_dupes: bool = True,\n    ) -> tuple[CollectReport, bool]:\n        if node in self._collection_cache and handle_dupes:\n            rep = self._collection_cache[node]\n            return rep, True\n        else:\n            rep = collect_one_node(node)\n            self._collection_cache[node] = rep\n            return rep, False\n\n    def collect(self) -> Iterator[nodes.Item | nodes.Collector]:\n        # This is a cache for the root directories of the initial paths.\n        # We can't use collection_cache for Session because of its special\n        # role as the bootstrapping collector.\n        path_cache: dict[Path, Sequence[nodes.Collector]] = {}\n\n        pm = self.config.pluginmanager\n\n        for collection_argument in self._initial_parts:\n            self.trace(\"processing argument\", collection_argument)\n            self.trace.root.indent += 1\n\n            argpath = collection_argument.path\n            names = collection_argument.parts\n            module_name = collection_argument.module_name\n\n            # resolve_collection_argument() ensures this.\n            if argpath.is_dir():\n                assert not names, f\"invalid arg {(argpath, names)!r}\"\n\n            paths = [argpath]\n            # Add relevant parents of the path, from the root, e.g.\n            #   /a/b/c.py -> [/, /a, /a/b, /a/b/c.py]\n            if module_name is None:\n                # Paths outside of the confcutdir should not be considered.\n                for path in argpath.parents:\n                    if not pm._is_in_confcutdir(path):\n                        break\n                    paths.insert(0, path)\n            else:\n                # For --pyargs arguments, only consider paths matching the module\n                # name. Paths beyond the package hierarchy are not included.\n                module_name_parts = module_name.split(\".\")\n                for i, path in enumerate(argpath.parents, 2):\n                    if i > len(module_name_parts) or path.stem != module_name_parts[-i]:\n                        break\n                    paths.insert(0, path)\n\n            # Start going over the parts from the root, collecting each level\n            # and discarding all nodes which don't match the level's part.\n            any_matched_in_initial_part = False\n            notfound_collectors = []\n            work: list[tuple[nodes.Collector | nodes.Item, list[Path | str]]] = [\n                (self, [*paths, *names])\n            ]\n            while work:\n                matchnode, matchparts = work.pop()\n\n                # Pop'd all of the parts, this is a match.\n                if not matchparts:\n                    yield matchnode\n                    any_matched_in_initial_part = True\n                    continue\n\n                # Should have been matched by now, discard.\n                if not isinstance(matchnode, nodes.Collector):\n                    continue\n\n                # Collect this level of matching.\n                # Collecting Session (self) is done directly to avoid endless\n                # recursion to this function.\n                subnodes: Sequence[nodes.Collector | nodes.Item]\n                if isinstance(matchnode, Session):\n                    assert isinstance(matchparts[0], Path)\n                    subnodes = matchnode._collect_path(matchparts[0], path_cache)\n                else:\n                    # For backward compat, files given directly multiple\n                    # times on the command line should not be deduplicated.\n                    handle_dupes = not (\n                        len(matchparts) == 1\n                        and isinstance(matchparts[0], Path)\n                        and matchparts[0].is_file()\n                    )\n                    rep, duplicate = self._collect_one_node(matchnode, handle_dupes)\n                    if not duplicate and not rep.passed:\n                        # Report collection failures here to avoid failing to\n                        # run some test specified in the command line because\n                        # the module could not be imported (#134).\n                        matchnode.ihook.pytest_collectreport(report=rep)\n                    if not rep.passed:\n                        continue\n                    subnodes = rep.result\n\n                # Prune this level.\n                any_matched_in_collector = False\n                for node in reversed(subnodes):\n                    # Path part e.g. `/a/b/` in `/a/b/test_file.py::TestIt::test_it`.\n                    if isinstance(matchparts[0], Path):\n                        is_match = node.path == matchparts[0]\n                        if sys.platform == \"win32\" and not is_match:\n                            # In case the file paths do not match, fallback to samefile() to\n                            # account for short-paths on Windows (#11895).\n                            same_file = os.path.samefile(node.path, matchparts[0])\n                            # We don't want to match links to the current node,\n                            # otherwise we would match the same file more than once (#12039).\n                            is_match = same_file and (\n                                os.path.islink(node.path)\n                                == os.path.islink(matchparts[0])\n                            )\n\n                    # Name part e.g. `TestIt` in `/a/b/test_file.py::TestIt::test_it`.\n                    else:\n                        # TODO: Remove parametrized workaround once collection structure contains\n                        # parametrization.\n                        is_match = (\n                            node.name == matchparts[0]\n                            or node.name.split(\"[\")[0] == matchparts[0]\n                        )\n                    if is_match:\n                        work.append((node, matchparts[1:]))\n                        any_matched_in_collector = True\n\n                if not any_matched_in_collector:\n                    notfound_collectors.append(matchnode)\n\n            if not any_matched_in_initial_part:\n                report_arg = \"::\".join((str(argpath), *names))\n                self._notfound.append((report_arg, notfound_collectors))\n\n            self.trace.root.indent -= 1\n\n    def genitems(self, node: nodes.Item | nodes.Collector) -> Iterator[nodes.Item]:\n        self.trace(\"genitems\", node)\n        if isinstance(node, nodes.Item):\n            node.ihook.pytest_itemcollected(item=node)\n            yield node\n        else:\n            assert isinstance(node, nodes.Collector)\n            keepduplicates = self.config.getoption(\"keepduplicates\")\n            # For backward compat, dedup only applies to files.\n            handle_dupes = not (keepduplicates and isinstance(node, nodes.File))\n            rep, duplicate = self._collect_one_node(node, handle_dupes)\n            if duplicate and not keepduplicates:\n                return\n            if rep.passed:\n                for subnode in rep.result:\n                    yield from self.genitems(subnode)\n            if not duplicate:\n                node.ihook.pytest_collectreport(report=rep)\n\n\ndef search_pypath(module_name: str) -> str | None:\n    \"\"\"Search sys.path for the given a dotted module name, and return its file\n    system path if found.\"\"\"\n    try:\n        spec = importlib.util.find_spec(module_name)\n    # AttributeError: looks like package module, but actually filename\n    # ImportError: module does not exist\n    # ValueError: not a module name\n    except (AttributeError, ImportError, ValueError):\n        return None\n    if spec is None or spec.origin is None or spec.origin == \"namespace\":\n        return None\n    elif spec.submodule_search_locations:\n        return os.path.dirname(spec.origin)\n    else:\n        return spec.origin\n\n\n@dataclasses.dataclass(frozen=True)\nclass CollectionArgument:\n    \"\"\"A resolved collection argument.\"\"\"\n\n    path: Path\n    parts: Sequence[str]\n    module_name: str | None\n\n\ndef resolve_collection_argument(\n    invocation_path: Path, arg: str, *, as_pypath: bool = False\n) -> CollectionArgument:\n    \"\"\"Parse path arguments optionally containing selection parts and return (fspath, names).\n\n    Command-line arguments can point to files and/or directories, and optionally contain\n    parts for specific tests selection, for example:\n\n        \"pkg/tests/test_foo.py::TestClass::test_foo\"\n\n    This function ensures the path exists, and returns a resolved `CollectionArgument`:\n\n        CollectionArgument(\n            path=Path(\"/full/path/to/pkg/tests/test_foo.py\"),\n            parts=[\"TestClass\", \"test_foo\"],\n            module_name=None,\n        )\n\n    When as_pypath is True, expects that the command-line argument actually contains\n    module paths instead of file-system paths:\n\n        \"pkg.tests.test_foo::TestClass::test_foo\"\n\n    In which case we search sys.path for a matching module, and then return the *path* to the\n    found module, which may look like this:\n\n        CollectionArgument(\n            path=Path(\"/home/u/myvenv/lib/site-packages/pkg/tests/test_foo.py\"),\n            parts=[\"TestClass\", \"test_foo\"],\n            module_name=\"pkg.tests.test_foo\",\n        )\n\n    If the path doesn't exist, raise UsageError.\n    If the path is a directory and selection parts are present, raise UsageError.\n    \"\"\"\n    base, squacket, rest = str(arg).partition(\"[\")\n    strpath, *parts = base.split(\"::\")\n    if parts:\n        parts[-1] = f\"{parts[-1]}{squacket}{rest}\"\n    module_name = None\n    if as_pypath:\n        pyarg_strpath = search_pypath(strpath)\n        if pyarg_strpath is not None:\n            module_name = strpath\n            strpath = pyarg_strpath\n    fspath = invocation_path / strpath\n    fspath = absolutepath(fspath)\n    if not safe_exists(fspath):\n        msg = (\n            \"module or package not found: {arg} (missing __init__.py?)\"\n            if as_pypath\n            else \"file or directory not found: {arg}\"\n        )\n        raise UsageError(msg.format(arg=arg))\n    if parts and fspath.is_dir():\n        msg = (\n            \"package argument cannot contain :: selection parts: {arg}\"\n            if as_pypath\n            else \"directory argument cannot contain :: selection parts: {arg}\"\n        )\n        raise UsageError(msg.format(arg=arg))\n    return CollectionArgument(\n        path=fspath,\n        parts=parts,\n        module_name=module_name,\n    )\n", "src/_pytest/fixtures.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport abc\nfrom collections import defaultdict\nfrom collections import deque\nimport dataclasses\nimport functools\nimport inspect\nimport os\nfrom pathlib import Path\nimport sys\nimport types\nfrom typing import AbstractSet\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Final\nfrom typing import final\nfrom typing import Generator\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Mapping\nfrom typing import MutableMapping\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import OrderedDict\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\nimport warnings\n\nimport _pytest\nfrom _pytest import nodes\nfrom _pytest._code import getfslineno\nfrom _pytest._code import Source\nfrom _pytest._code.code import FormattedExcinfo\nfrom _pytest._code.code import TerminalRepr\nfrom _pytest._io import TerminalWriter\nfrom _pytest.compat import _PytestWrapper\nfrom _pytest.compat import assert_never\nfrom _pytest.compat import get_real_func\nfrom _pytest.compat import get_real_method\nfrom _pytest.compat import getfuncargnames\nfrom _pytest.compat import getimfunc\nfrom _pytest.compat import getlocation\nfrom _pytest.compat import is_generator\nfrom _pytest.compat import NOTSET\nfrom _pytest.compat import NotSetType\nfrom _pytest.compat import safe_getattr\nfrom _pytest.config import _PluggyPlugin\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.deprecated import MARKED_FIXTURE\nfrom _pytest.deprecated import YIELD_FIXTURE\nfrom _pytest.main import Session\nfrom _pytest.mark import Mark\nfrom _pytest.mark import ParameterSet\nfrom _pytest.mark.structures import MarkDecorator\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import TEST_OUTCOME\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import bestrelpath\nfrom _pytest.scope import _ScopeName\nfrom _pytest.scope import HIGH_SCOPES\nfrom _pytest.scope import Scope\n\n\nif sys.version_info < (3, 11):\n    from exceptiongroup import BaseExceptionGroup\n\n\nif TYPE_CHECKING:\n    from _pytest.python import CallSpec2\n    from _pytest.python import Function\n    from _pytest.python import Metafunc\n\n\n# The value of the fixture -- return/yield of the fixture function (type variable).\nFixtureValue = TypeVar(\"FixtureValue\")\n# The type of the fixture function (type variable).\nFixtureFunction = TypeVar(\"FixtureFunction\", bound=Callable[..., object])\n# The type of a fixture function (type alias generic in fixture value).\n_FixtureFunc = Union[\n    Callable[..., FixtureValue], Callable[..., Generator[FixtureValue, None, None]]\n]\n# The type of FixtureDef.cached_result (type alias generic in fixture value).\n_FixtureCachedResult = Union[\n    Tuple[\n        # The result.\n        FixtureValue,\n        # Cache key.\n        object,\n        None,\n    ],\n    Tuple[\n        None,\n        # Cache key.\n        object,\n        # The exception and the original traceback.\n        Tuple[BaseException, Optional[types.TracebackType]],\n    ],\n]\n\n\n@dataclasses.dataclass(frozen=True)\nclass PseudoFixtureDef(Generic[FixtureValue]):\n    cached_result: _FixtureCachedResult[FixtureValue]\n    _scope: Scope\n\n\ndef pytest_sessionstart(session: Session) -> None:\n    session._fixturemanager = FixtureManager(session)\n\n\ndef get_scope_package(\n    node: nodes.Item,\n    fixturedef: FixtureDef[object],\n) -> nodes.Node | None:\n    from _pytest.python import Package\n\n    for parent in node.iter_parents():\n        if isinstance(parent, Package) and parent.nodeid == fixturedef.baseid:\n            return parent\n    return node.session\n\n\ndef get_scope_node(node: nodes.Node, scope: Scope) -> nodes.Node | None:\n    import _pytest.python\n\n    if scope is Scope.Function:\n        # Type ignored because this is actually safe, see:\n        # https://github.com/python/mypy/issues/4717\n        return node.getparent(nodes.Item)  # type: ignore[type-abstract]\n    elif scope is Scope.Class:\n        return node.getparent(_pytest.python.Class)\n    elif scope is Scope.Module:\n        return node.getparent(_pytest.python.Module)\n    elif scope is Scope.Package:\n        return node.getparent(_pytest.python.Package)\n    elif scope is Scope.Session:\n        return node.getparent(_pytest.main.Session)\n    else:\n        assert_never(scope)\n\n\ndef getfixturemarker(obj: object) -> FixtureFunctionMarker | None:\n    \"\"\"Return fixturemarker or None if it doesn't exist or raised\n    exceptions.\"\"\"\n    return cast(\n        Optional[FixtureFunctionMarker],\n        safe_getattr(obj, \"_pytestfixturefunction\", None),\n    )\n\n\n# Algorithm for sorting on a per-parametrized resource setup basis.\n# It is called for Session scope first and performs sorting\n# down to the lower scopes such as to minimize number of \"high scope\"\n# setups and teardowns.\n\n\n@dataclasses.dataclass(frozen=True)\nclass FixtureArgKey:\n    argname: str\n    param_index: int\n    scoped_item_path: Path | None\n    item_cls: type | None\n\n\n_V = TypeVar(\"_V\")\nOrderedSet = Dict[_V, None]\n\n\ndef get_parametrized_fixture_argkeys(\n    item: nodes.Item, scope: Scope\n) -> Iterator[FixtureArgKey]:\n    \"\"\"Return list of keys for all parametrized arguments which match\n    the specified scope.\"\"\"\n    assert scope is not Scope.Function\n\n    try:\n        callspec: CallSpec2 = item.callspec  # type: ignore[attr-defined]\n    except AttributeError:\n        return\n\n    item_cls = None\n    if scope is Scope.Session:\n        scoped_item_path = None\n    elif scope is Scope.Package:\n        # Package key = module's directory.\n        scoped_item_path = item.path.parent\n    elif scope is Scope.Module:\n        scoped_item_path = item.path\n    elif scope is Scope.Class:\n        scoped_item_path = item.path\n        item_cls = item.cls  # type: ignore[attr-defined]\n    else:\n        assert_never(scope)\n\n    for argname in callspec.indices:\n        if callspec._arg2scope[argname] != scope:\n            continue\n        param_index = callspec.indices[argname]\n        yield FixtureArgKey(argname, param_index, scoped_item_path, item_cls)\n\n\ndef reorder_items(items: Sequence[nodes.Item]) -> list[nodes.Item]:\n    argkeys_by_item: dict[Scope, dict[nodes.Item, OrderedSet[FixtureArgKey]]] = {}\n    items_by_argkey: dict[\n        Scope, dict[FixtureArgKey, OrderedDict[nodes.Item, None]]\n    ] = {}\n    for scope in HIGH_SCOPES:\n        scoped_argkeys_by_item = argkeys_by_item[scope] = {}\n        scoped_items_by_argkey = items_by_argkey[scope] = defaultdict(OrderedDict)\n        for item in items:\n            argkeys = dict.fromkeys(get_parametrized_fixture_argkeys(item, scope))\n            if argkeys:\n                scoped_argkeys_by_item[item] = argkeys\n                for argkey in argkeys:\n                    scoped_items_by_argkey[argkey][item] = None\n\n    items_set = dict.fromkeys(items)\n    return list(\n        reorder_items_atscope(\n            items_set, argkeys_by_item, items_by_argkey, Scope.Session\n        )\n    )\n\n\ndef reorder_items_atscope(\n    items: OrderedSet[nodes.Item],\n    argkeys_by_item: Mapping[Scope, Mapping[nodes.Item, OrderedSet[FixtureArgKey]]],\n    items_by_argkey: Mapping[\n        Scope, Mapping[FixtureArgKey, OrderedDict[nodes.Item, None]]\n    ],\n    scope: Scope,\n) -> OrderedSet[nodes.Item]:\n    if scope is Scope.Function or len(items) < 3:\n        return items\n\n    scoped_items_by_argkey = items_by_argkey[scope]\n    scoped_argkeys_by_item = argkeys_by_item[scope]\n\n    ignore: set[FixtureArgKey] = set()\n    items_deque = deque(items)\n    items_done: OrderedSet[nodes.Item] = {}\n    while items_deque:\n        no_argkey_items: OrderedSet[nodes.Item] = {}\n        slicing_argkey = None\n        while items_deque:\n            item = items_deque.popleft()\n            if item in items_done or item in no_argkey_items:\n                continue\n            argkeys = dict.fromkeys(\n                k for k in scoped_argkeys_by_item.get(item, ()) if k not in ignore\n            )\n            if not argkeys:\n                no_argkey_items[item] = None\n            else:\n                slicing_argkey, _ = argkeys.popitem()\n                # We don't have to remove relevant items from later in the\n                # deque because they'll just be ignored.\n                matching_items = [\n                    i for i in scoped_items_by_argkey[slicing_argkey] if i in items\n                ]\n                for i in reversed(matching_items):\n                    items_deque.appendleft(i)\n                    # Fix items_by_argkey order.\n                    for other_scope in HIGH_SCOPES:\n                        other_scoped_items_by_argkey = items_by_argkey[other_scope]\n                        for argkey in argkeys_by_item[other_scope].get(i, ()):\n                            other_scoped_items_by_argkey[argkey][i] = None\n                            other_scoped_items_by_argkey[argkey].move_to_end(\n                                i, last=False\n                            )\n                break\n        if no_argkey_items:\n            reordered_no_argkey_items = reorder_items_atscope(\n                no_argkey_items, argkeys_by_item, items_by_argkey, scope.next_lower()\n            )\n            items_done.update(reordered_no_argkey_items)\n        if slicing_argkey is not None:\n            ignore.add(slicing_argkey)\n    return items_done\n\n\n@dataclasses.dataclass(frozen=True)\nclass FuncFixtureInfo:\n    \"\"\"Fixture-related information for a fixture-requesting item (e.g. test\n    function).\n\n    This is used to examine the fixtures which an item requests statically\n    (known during collection). This includes autouse fixtures, fixtures\n    requested by the `usefixtures` marker, fixtures requested in the function\n    parameters, and the transitive closure of these.\n\n    An item may also request fixtures dynamically (using `request.getfixturevalue`);\n    these are not reflected here.\n    \"\"\"\n\n    __slots__ = (\"argnames\", \"initialnames\", \"names_closure\", \"name2fixturedefs\")\n\n    # Fixture names that the item requests directly by function parameters.\n    argnames: tuple[str, ...]\n    # Fixture names that the item immediately requires. These include\n    # argnames + fixture names specified via usefixtures and via autouse=True in\n    # fixture definitions.\n    initialnames: tuple[str, ...]\n    # The transitive closure of the fixture names that the item requires.\n    # Note: can't include dynamic dependencies (`request.getfixturevalue` calls).\n    names_closure: list[str]\n    # A map from a fixture name in the transitive closure to the FixtureDefs\n    # matching the name which are applicable to this function.\n    # There may be multiple overriding fixtures with the same name. The\n    # sequence is ordered from furthest to closes to the function.\n    name2fixturedefs: dict[str, Sequence[FixtureDef[Any]]]\n\n    def prune_dependency_tree(self) -> None:\n        \"\"\"Recompute names_closure from initialnames and name2fixturedefs.\n\n        Can only reduce names_closure, which means that the new closure will\n        always be a subset of the old one. The order is preserved.\n\n        This method is needed because direct parametrization may shadow some\n        of the fixtures that were included in the originally built dependency\n        tree. In this way the dependency tree can get pruned, and the closure\n        of argnames may get reduced.\n        \"\"\"\n        closure: set[str] = set()\n        working_set = set(self.initialnames)\n        while working_set:\n            argname = working_set.pop()\n            # Argname may be something not included in the original names_closure,\n            # in which case we ignore it. This currently happens with pseudo\n            # FixtureDefs which wrap 'get_direct_param_fixture_func(request)'.\n            # So they introduce the new dependency 'request' which might have\n            # been missing in the original tree (closure).\n            if argname not in closure and argname in self.names_closure:\n                closure.add(argname)\n                if argname in self.name2fixturedefs:\n                    working_set.update(self.name2fixturedefs[argname][-1].argnames)\n\n        self.names_closure[:] = sorted(closure, key=self.names_closure.index)\n\n\nclass FixtureRequest(abc.ABC):\n    \"\"\"The type of the ``request`` fixture.\n\n    A request object gives access to the requesting test context and has a\n    ``param`` attribute in case the fixture is parametrized.\n    \"\"\"\n\n    def __init__(\n        self,\n        pyfuncitem: Function,\n        fixturename: str | None,\n        arg2fixturedefs: dict[str, Sequence[FixtureDef[Any]]],\n        fixture_defs: dict[str, FixtureDef[Any]],\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        #: Fixture for which this request is being performed.\n        self.fixturename: Final = fixturename\n        self._pyfuncitem: Final = pyfuncitem\n        # The FixtureDefs for each fixture name requested by this item.\n        # Starts from the statically-known fixturedefs resolved during\n        # collection. Dynamically requested fixtures (using\n        # `request.getfixturevalue(\"foo\")`) are added dynamically.\n        self._arg2fixturedefs: Final = arg2fixturedefs\n        # The evaluated argnames so far, mapping to the FixtureDef they resolved\n        # to.\n        self._fixture_defs: Final = fixture_defs\n        # Notes on the type of `param`:\n        # -`request.param` is only defined in parametrized fixtures, and will raise\n        #   AttributeError otherwise. Python typing has no notion of \"undefined\", so\n        #   this cannot be reflected in the type.\n        # - Technically `param` is only (possibly) defined on SubRequest, not\n        #   FixtureRequest, but the typing of that is still in flux so this cheats.\n        # - In the future we might consider using a generic for the param type, but\n        #   for now just using Any.\n        self.param: Any\n\n    @property\n    def _fixturemanager(self) -> FixtureManager:\n        return self._pyfuncitem.session._fixturemanager\n\n    @property\n    @abc.abstractmethod\n    def _scope(self) -> Scope:\n        raise NotImplementedError()\n\n    @property\n    def scope(self) -> _ScopeName:\n        \"\"\"Scope string, one of \"function\", \"class\", \"module\", \"package\", \"session\".\"\"\"\n        return self._scope.value\n\n    @abc.abstractmethod\n    def _check_scope(\n        self,\n        requested_fixturedef: FixtureDef[object] | PseudoFixtureDef[object],\n        requested_scope: Scope,\n    ) -> None:\n        raise NotImplementedError()\n\n    @property\n    def fixturenames(self) -> list[str]:\n        \"\"\"Names of all active fixtures in this request.\"\"\"\n        result = list(self._pyfuncitem.fixturenames)\n        result.extend(set(self._fixture_defs).difference(result))\n        return result\n\n    @property\n    @abc.abstractmethod\n    def node(self):\n        \"\"\"Underlying collection node (depends on current request scope).\"\"\"\n        raise NotImplementedError()\n\n    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n    @property\n    def function(self):\n        \"\"\"Test function object if the request has a per-function scope.\"\"\"\n        if self.scope != \"function\":\n            raise AttributeError(\n                f\"function not available in {self.scope}-scoped context\"\n            )\n        return self._pyfuncitem.obj\n\n    @property\n    def cls(self):\n        \"\"\"Class (can be None) where the test function was collected.\"\"\"\n        if self.scope not in (\"class\", \"function\"):\n            raise AttributeError(f\"cls not available in {self.scope}-scoped context\")\n        clscol = self._pyfuncitem.getparent(_pytest.python.Class)\n        if clscol:\n            return clscol.obj\n\n    @property\n    def instance(self):\n        \"\"\"Instance (can be None) on which test function was collected.\"\"\"\n        if self.scope != \"function\":\n            return None\n        return getattr(self._pyfuncitem, \"instance\", None)\n\n    @property\n    def module(self):\n        \"\"\"Python module object where the test function was collected.\"\"\"\n        if self.scope not in (\"function\", \"class\", \"module\"):\n            raise AttributeError(f\"module not available in {self.scope}-scoped context\")\n        mod = self._pyfuncitem.getparent(_pytest.python.Module)\n        assert mod is not None\n        return mod.obj\n\n    @property\n    def path(self) -> Path:\n        \"\"\"Path where the test function was collected.\"\"\"\n        if self.scope not in (\"function\", \"class\", \"module\", \"package\"):\n            raise AttributeError(f\"path not available in {self.scope}-scoped context\")\n        return self._pyfuncitem.path\n\n    @property\n    def keywords(self) -> MutableMapping[str, Any]:\n        \"\"\"Keywords/markers dictionary for the underlying node.\"\"\"\n        node: nodes.Node = self.node\n        return node.keywords\n\n    @property\n    def session(self) -> Session:\n        \"\"\"Pytest session object.\"\"\"\n        return self._pyfuncitem.session\n\n    @abc.abstractmethod\n    def addfinalizer(self, finalizer: Callable[[], object]) -> None:\n        \"\"\"Add finalizer/teardown function to be called without arguments after\n        the last test within the requesting test context finished execution.\"\"\"\n        raise NotImplementedError()\n\n    def applymarker(self, marker: str | MarkDecorator) -> None:\n        \"\"\"Apply a marker to a single test function invocation.\n\n        This method is useful if you don't want to have a keyword/marker\n        on all function invocations.\n\n        :param marker:\n            An object created by a call to ``pytest.mark.NAME(...)``.\n        \"\"\"\n        self.node.add_marker(marker)\n\n    def raiseerror(self, msg: str | None) -> NoReturn:\n        \"\"\"Raise a FixtureLookupError exception.\n\n        :param msg:\n            An optional custom error message.\n        \"\"\"\n        raise FixtureLookupError(None, self, msg)\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n\n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n\n        This method can be used during the test setup phase or the test run\n        phase, but during the test teardown phase a fixture's value may not\n        be available.\n\n        :param argname:\n            The fixture name.\n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n        # Note that in addition to the use case described in the docstring,\n        # getfixturevalue() is also called by pytest itself during item and fixture\n        # setup to evaluate the fixtures that are requested statically\n        # (using function parameters, autouse, etc).\n\n        fixturedef = self._get_active_fixturedef(argname)\n        assert fixturedef.cached_result is not None, (\n            f'The fixture value for \"{argname}\" is not available.  '\n            \"This can happen when the fixture has already been torn down.\"\n        )\n        return fixturedef.cached_result[0]\n\n    def _iter_chain(self) -> Iterator[SubRequest]:\n        \"\"\"Yield all SubRequests in the chain, from self up.\n\n        Note: does *not* yield the TopRequest.\n        \"\"\"\n        current = self\n        while isinstance(current, SubRequest):\n            yield current\n            current = current._parent_request\n\n    def _get_active_fixturedef(\n        self, argname: str\n    ) -> FixtureDef[object] | PseudoFixtureDef[object]:\n        if argname == \"request\":\n            cached_result = (self, [0], None)\n            return PseudoFixtureDef(cached_result, Scope.Function)\n\n        # If we already finished computing a fixture by this name in this item,\n        # return it.\n        fixturedef = self._fixture_defs.get(argname)\n        if fixturedef is not None:\n            self._check_scope(fixturedef, fixturedef._scope)\n            return fixturedef\n\n        # Find the appropriate fixturedef.\n        fixturedefs = self._arg2fixturedefs.get(argname, None)\n        if fixturedefs is None:\n            # We arrive here because of a dynamic call to\n            # getfixturevalue(argname) which was naturally\n            # not known at parsing/collection time.\n            fixturedefs = self._fixturemanager.getfixturedefs(argname, self._pyfuncitem)\n            if fixturedefs is not None:\n                self._arg2fixturedefs[argname] = fixturedefs\n        # No fixtures defined with this name.\n        if fixturedefs is None:\n            raise FixtureLookupError(argname, self)\n        # The are no fixtures with this name applicable for the function.\n        if not fixturedefs:\n            raise FixtureLookupError(argname, self)\n        # A fixture may override another fixture with the same name, e.g. a\n        # fixture in a module can override a fixture in a conftest, a fixture in\n        # a class can override a fixture in the module, and so on.\n        # An overriding fixture can request its own name (possibly indirectly);\n        # in this case it gets the value of the fixture it overrides, one level\n        # up.\n        # Check how many `argname`s deep we are, and take the next one.\n        # `fixturedefs` is sorted from furthest to closest, so use negative\n        # indexing to go in reverse.\n        index = -1\n        for request in self._iter_chain():\n            if request.fixturename == argname:\n                index -= 1\n        # If already consumed all of the available levels, fail.\n        if -index > len(fixturedefs):\n            raise FixtureLookupError(argname, self)\n        fixturedef = fixturedefs[index]\n\n        # Prepare a SubRequest object for calling the fixture.\n        try:\n            callspec = self._pyfuncitem.callspec\n        except AttributeError:\n            callspec = None\n        if callspec is not None and argname in callspec.params:\n            param = callspec.params[argname]\n            param_index = callspec.indices[argname]\n            # The parametrize invocation scope overrides the fixture's scope.\n            scope = callspec._arg2scope[argname]\n        else:\n            param = NOTSET\n            param_index = 0\n            scope = fixturedef._scope\n            self._check_fixturedef_without_param(fixturedef)\n        self._check_scope(fixturedef, scope)\n        subrequest = SubRequest(\n            self, scope, param, param_index, fixturedef, _ispytest=True\n        )\n\n        # Make sure the fixture value is cached, running it if it isn't\n        fixturedef.execute(request=subrequest)\n\n        self._fixture_defs[argname] = fixturedef\n        return fixturedef\n\n    def _check_fixturedef_without_param(self, fixturedef: FixtureDef[object]) -> None:\n        \"\"\"Check that this request is allowed to execute this fixturedef without\n        a param.\"\"\"\n        funcitem = self._pyfuncitem\n        has_params = fixturedef.params is not None\n        fixtures_not_supported = getattr(funcitem, \"nofuncargs\", False)\n        if has_params and fixtures_not_supported:\n            msg = (\n                f\"{funcitem.name} does not support fixtures, maybe unittest.TestCase subclass?\\n\"\n                f\"Node id: {funcitem.nodeid}\\n\"\n                f\"Function type: {type(funcitem).__name__}\"\n            )\n            fail(msg, pytrace=False)\n        if has_params:\n            frame = inspect.stack()[3]\n            frameinfo = inspect.getframeinfo(frame[0])\n            source_path = absolutepath(frameinfo.filename)\n            source_lineno = frameinfo.lineno\n            try:\n                source_path_str = str(source_path.relative_to(funcitem.config.rootpath))\n            except ValueError:\n                source_path_str = str(source_path)\n            location = getlocation(fixturedef.func, funcitem.config.rootpath)\n            msg = (\n                \"The requested fixture has no parameter defined for test:\\n\"\n                f\"    {funcitem.nodeid}\\n\\n\"\n                f\"Requested fixture '{fixturedef.argname}' defined in:\\n\"\n                f\"{location}\\n\\n\"\n                f\"Requested here:\\n\"\n                f\"{source_path_str}:{source_lineno}\"\n            )\n            fail(msg, pytrace=False)\n\n    def _get_fixturestack(self) -> list[FixtureDef[Any]]:\n        values = [request._fixturedef for request in self._iter_chain()]\n        values.reverse()\n        return values\n\n\n@final\nclass TopRequest(FixtureRequest):\n    \"\"\"The type of the ``request`` fixture in a test function.\"\"\"\n\n    def __init__(self, pyfuncitem: Function, *, _ispytest: bool = False) -> None:\n        super().__init__(\n            fixturename=None,\n            pyfuncitem=pyfuncitem,\n            arg2fixturedefs=pyfuncitem._fixtureinfo.name2fixturedefs.copy(),\n            fixture_defs={},\n            _ispytest=_ispytest,\n        )\n\n    @property\n    def _scope(self) -> Scope:\n        return Scope.Function\n\n    def _check_scope(\n        self,\n        requested_fixturedef: FixtureDef[object] | PseudoFixtureDef[object],\n        requested_scope: Scope,\n    ) -> None:\n        # TopRequest always has function scope so always valid.\n        pass\n\n    @property\n    def node(self):\n        return self._pyfuncitem\n\n    def __repr__(self) -> str:\n        return f\"<FixtureRequest for {self.node!r}>\"\n\n    def _fillfixtures(self) -> None:\n        item = self._pyfuncitem\n        for argname in item.fixturenames:\n            if argname not in item.funcargs:\n                item.funcargs[argname] = self.getfixturevalue(argname)\n\n    def addfinalizer(self, finalizer: Callable[[], object]) -> None:\n        self.node.addfinalizer(finalizer)\n\n\n@final\nclass SubRequest(FixtureRequest):\n    \"\"\"The type of the ``request`` fixture in a fixture function requested\n    (transitively) by a test function.\"\"\"\n\n    def __init__(\n        self,\n        request: FixtureRequest,\n        scope: Scope,\n        param: Any,\n        param_index: int,\n        fixturedef: FixtureDef[object],\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        super().__init__(\n            pyfuncitem=request._pyfuncitem,\n            fixturename=fixturedef.argname,\n            fixture_defs=request._fixture_defs,\n            arg2fixturedefs=request._arg2fixturedefs,\n            _ispytest=_ispytest,\n        )\n        self._parent_request: Final[FixtureRequest] = request\n        self._scope_field: Final = scope\n        self._fixturedef: Final[FixtureDef[object]] = fixturedef\n        if param is not NOTSET:\n            self.param = param\n        self.param_index: Final = param_index\n\n    def __repr__(self) -> str:\n        return f\"<SubRequest {self.fixturename!r} for {self._pyfuncitem!r}>\"\n\n    @property\n    def _scope(self) -> Scope:\n        return self._scope_field\n\n    @property\n    def node(self):\n        scope = self._scope\n        if scope is Scope.Function:\n            # This might also be a non-function Item despite its attribute name.\n            node: nodes.Node | None = self._pyfuncitem\n        elif scope is Scope.Package:\n            node = get_scope_package(self._pyfuncitem, self._fixturedef)\n        else:\n            node = get_scope_node(self._pyfuncitem, scope)\n        if node is None and scope is Scope.Class:\n            # Fallback to function item itself.\n            node = self._pyfuncitem\n        assert node, f'Could not obtain a node for scope \"{scope}\" for function {self._pyfuncitem!r}'\n        return node\n\n    def _check_scope(\n        self,\n        requested_fixturedef: FixtureDef[object] | PseudoFixtureDef[object],\n        requested_scope: Scope,\n    ) -> None:\n        if isinstance(requested_fixturedef, PseudoFixtureDef):\n            return\n        if self._scope > requested_scope:\n            # Try to report something helpful.\n            argname = requested_fixturedef.argname\n            fixture_stack = \"\\n\".join(\n                self._format_fixturedef_line(fixturedef)\n                for fixturedef in self._get_fixturestack()\n            )\n            requested_fixture = self._format_fixturedef_line(requested_fixturedef)\n            fail(\n                f\"ScopeMismatch: You tried to access the {requested_scope.value} scoped \"\n                f\"fixture {argname} with a {self._scope.value} scoped request object. \"\n                f\"Requesting fixture stack:\\n{fixture_stack}\\n\"\n                f\"Requested fixture:\\n{requested_fixture}\",\n                pytrace=False,\n            )\n\n    def _format_fixturedef_line(self, fixturedef: FixtureDef[object]) -> str:\n        factory = fixturedef.func\n        path, lineno = getfslineno(factory)\n        if isinstance(path, Path):\n            path = bestrelpath(self._pyfuncitem.session.path, path)\n        signature = inspect.signature(factory)\n        return f\"{path}:{lineno + 1}:  def {factory.__name__}{signature}\"\n\n    def addfinalizer(self, finalizer: Callable[[], object]) -> None:\n        self._fixturedef.addfinalizer(finalizer)\n\n\n@final\nclass FixtureLookupError(LookupError):\n    \"\"\"Could not return a requested fixture (missing or invalid).\"\"\"\n\n    def __init__(\n        self, argname: str | None, request: FixtureRequest, msg: str | None = None\n    ) -> None:\n        self.argname = argname\n        self.request = request\n        self.fixturestack = request._get_fixturestack()\n        self.msg = msg\n\n    def formatrepr(self) -> FixtureLookupErrorRepr:\n        tblines: list[str] = []\n        addline = tblines.append\n        stack = [self.request._pyfuncitem.obj]\n        stack.extend(map(lambda x: x.func, self.fixturestack))\n        msg = self.msg\n        if msg is not None:\n            # The last fixture raise an error, let's present\n            # it at the requesting side.\n            stack = stack[:-1]\n        for function in stack:\n            fspath, lineno = getfslineno(function)\n            try:\n                lines, _ = inspect.getsourcelines(get_real_func(function))\n            except (OSError, IndexError, TypeError):\n                error_msg = \"file %s, line %s: source code not available\"\n                addline(error_msg % (fspath, lineno + 1))\n            else:\n                addline(f\"file {fspath}, line {lineno + 1}\")\n                for i, line in enumerate(lines):\n                    line = line.rstrip()\n                    addline(\"  \" + line)\n                    if line.lstrip().startswith(\"def\"):\n                        break\n\n        if msg is None:\n            fm = self.request._fixturemanager\n            available = set()\n            parent = self.request._pyfuncitem.parent\n            assert parent is not None\n            for name, fixturedefs in fm._arg2fixturedefs.items():\n                faclist = list(fm._matchfactories(fixturedefs, parent))\n                if faclist:\n                    available.add(name)\n            if self.argname in available:\n                msg = (\n                    f\" recursive dependency involving fixture '{self.argname}' detected\"\n                )\n            else:\n                msg = f\"fixture '{self.argname}' not found\"\n            msg += \"\\n available fixtures: {}\".format(\", \".join(sorted(available)))\n            msg += \"\\n use 'pytest --fixtures [testpath]' for help on them.\"\n\n        return FixtureLookupErrorRepr(fspath, lineno, tblines, msg, self.argname)\n\n\nclass FixtureLookupErrorRepr(TerminalRepr):\n    def __init__(\n        self,\n        filename: str | os.PathLike[str],\n        firstlineno: int,\n        tblines: Sequence[str],\n        errorstring: str,\n        argname: str | None,\n    ) -> None:\n        self.tblines = tblines\n        self.errorstring = errorstring\n        self.filename = filename\n        self.firstlineno = firstlineno\n        self.argname = argname\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        # tw.line(\"FixtureLookupError: %s\" %(self.argname), red=True)\n        for tbline in self.tblines:\n            tw.line(tbline.rstrip())\n        lines = self.errorstring.split(\"\\n\")\n        if lines:\n            tw.line(\n                f\"{FormattedExcinfo.fail_marker}       {lines[0].strip()}\",\n                red=True,\n            )\n            for line in lines[1:]:\n                tw.line(\n                    f\"{FormattedExcinfo.flow_marker}       {line.strip()}\",\n                    red=True,\n                )\n        tw.line()\n        tw.line(\"%s:%d\" % (os.fspath(self.filename), self.firstlineno + 1))\n\n\ndef call_fixture_func(\n    fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n) -> FixtureValue:\n    if is_generator(fixturefunc):\n        fixturefunc = cast(\n            Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n        )\n        generator = fixturefunc(**kwargs)\n        try:\n            fixture_result = next(generator)\n        except StopIteration:\n            raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n        finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n        request.addfinalizer(finalizer)\n    else:\n        fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n        fixture_result = fixturefunc(**kwargs)\n    return fixture_result\n\n\ndef _teardown_yield_fixture(fixturefunc, it) -> None:\n    \"\"\"Execute the teardown of a fixture function by advancing the iterator\n    after the yield and ensure the iteration ends (if not it means there is\n    more than one yield in the function).\"\"\"\n    try:\n        next(it)\n    except StopIteration:\n        pass\n    else:\n        fs, lineno = getfslineno(fixturefunc)\n        fail(\n            f\"fixture function has more than one 'yield':\\n\\n\"\n            f\"{Source(fixturefunc).indent()}\\n\"\n            f\"{fs}:{lineno + 1}\",\n            pytrace=False,\n        )\n\n\ndef _eval_scope_callable(\n    scope_callable: Callable[[str, Config], _ScopeName],\n    fixture_name: str,\n    config: Config,\n) -> _ScopeName:\n    try:\n        # Type ignored because there is no typing mechanism to specify\n        # keyword arguments, currently.\n        result = scope_callable(fixture_name=fixture_name, config=config)  # type: ignore[call-arg]\n    except Exception as e:\n        raise TypeError(\n            f\"Error evaluating {scope_callable} while defining fixture '{fixture_name}'.\\n\"\n            \"Expected a function with the signature (*, fixture_name, config)\"\n        ) from e\n    if not isinstance(result, str):\n        fail(\n            f\"Expected {scope_callable} to return a 'str' while defining fixture '{fixture_name}', but it returned:\\n\"\n            f\"{result!r}\",\n            pytrace=False,\n        )\n    return result\n\n\n@final\nclass FixtureDef(Generic[FixtureValue]):\n    \"\"\"A container for a fixture definition.\n\n    Note: At this time, only explicitly documented fields and methods are\n    considered public stable API.\n    \"\"\"\n\n    def __init__(\n        self,\n        config: Config,\n        baseid: str | None,\n        argname: str,\n        func: _FixtureFunc[FixtureValue],\n        scope: Scope | _ScopeName | Callable[[str, Config], _ScopeName] | None,\n        params: Sequence[object] | None,\n        ids: tuple[object | None, ...] | Callable[[Any], object | None] | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        # The \"base\" node ID for the fixture.\n        #\n        # This is a node ID prefix. A fixture is only available to a node (e.g.\n        # a `Function` item) if the fixture's baseid is a nodeid of a parent of\n        # node.\n        #\n        # For a fixture found in a Collector's object (e.g. a `Module`s module,\n        # a `Class`'s class), the baseid is the Collector's nodeid.\n        #\n        # For a fixture found in a conftest plugin, the baseid is the conftest's\n        # directory path relative to the rootdir.\n        #\n        # For other plugins, the baseid is the empty string (always matches).\n        self.baseid: Final = baseid or \"\"\n        # Whether the fixture was found from a node or a conftest in the\n        # collection tree. Will be false for fixtures defined in non-conftest\n        # plugins.\n        self.has_location: Final = baseid is not None\n        # The fixture factory function.\n        self.func: Final = func\n        # The name by which the fixture may be requested.\n        self.argname: Final = argname\n        if scope is None:\n            scope = Scope.Function\n        elif callable(scope):\n            scope = _eval_scope_callable(scope, argname, config)\n        if isinstance(scope, str):\n            scope = Scope.from_user(\n                scope, descr=f\"Fixture '{func.__name__}'\", where=baseid\n            )\n        self._scope: Final = scope\n        # If the fixture is directly parametrized, the parameter values.\n        self.params: Final = params\n        # If the fixture is directly parametrized, a tuple of explicit IDs to\n        # assign to the parameter values, or a callable to generate an ID given\n        # a parameter value.\n        self.ids: Final = ids\n        # The names requested by the fixtures.\n        self.argnames: Final = getfuncargnames(func, name=argname)\n        # If the fixture was executed, the current value of the fixture.\n        # Can change if the fixture is executed with different parameters.\n        self.cached_result: _FixtureCachedResult[FixtureValue] | None = None\n        self._finalizers: Final[list[Callable[[], object]]] = []\n\n    @property\n    def scope(self) -> _ScopeName:\n        \"\"\"Scope string, one of \"function\", \"class\", \"module\", \"package\", \"session\".\"\"\"\n        return self._scope.value\n\n    def addfinalizer(self, finalizer: Callable[[], object]) -> None:\n        self._finalizers.append(finalizer)\n\n    def finish(self, request: SubRequest) -> None:\n        exceptions: list[BaseException] = []\n        while self._finalizers:\n            fin = self._finalizers.pop()\n            try:\n                fin()\n            except BaseException as e:\n                exceptions.append(e)\n        node = request.node\n        node.ihook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n        # Even if finalization fails, we invalidate the cached fixture\n        # value and remove all finalizers because they may be bound methods\n        # which will keep instances alive.\n        self.cached_result = None\n        self._finalizers.clear()\n        if len(exceptions) == 1:\n            raise exceptions[0]\n        elif len(exceptions) > 1:\n            msg = f'errors while tearing down fixture \"{self.argname}\" of {node}'\n            raise BaseExceptionGroup(msg, exceptions[::-1])\n\n    def execute(self, request: SubRequest) -> FixtureValue:\n        \"\"\"Return the value of this fixture, executing it if not cached.\"\"\"\n        # Ensure that the dependent fixtures requested by this fixture are loaded.\n        # This needs to be done before checking if we have a cached value, since\n        # if a dependent fixture has their cache invalidated, e.g. due to\n        # parametrization, they finalize themselves and fixtures depending on it\n        # (which will likely include this fixture) setting `self.cached_result = None`.\n        # See #4871\n        requested_fixtures_that_should_finalize_us = []\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            # Saves requested fixtures in a list so we later can add our finalizer\n            # to them, ensuring that if a requested fixture gets torn down we get torn\n            # down first. This is generally handled by SetupState, but still currently\n            # needed when this fixture is not parametrized but depends on a parametrized\n            # fixture.\n            if not isinstance(fixturedef, PseudoFixtureDef):\n                requested_fixtures_that_should_finalize_us.append(fixturedef)\n\n        # Check for (and return) cached value/exception.\n        my_cache_key = self.cache_key(request)\n        if self.cached_result is not None:\n            cache_key = self.cached_result[1]\n            # note: comparison with `==` can fail (or be expensive) for e.g.\n            # numpy arrays (#6497).\n            if my_cache_key is cache_key:\n                if self.cached_result[2] is not None:\n                    exc, exc_tb = self.cached_result[2]\n                    raise exc.with_traceback(exc_tb)\n                else:\n                    result = self.cached_result[0]\n                    return result\n            # We have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one.\n            self.finish(request)\n            assert self.cached_result is None\n\n        # Add finalizer to requested fixtures we saved previously.\n        # We make sure to do this after checking for cached value to avoid\n        # adding our finalizer multiple times. (#12135)\n        finalizer = functools.partial(self.finish, request=request)\n        for parent_fixture in requested_fixtures_that_should_finalize_us:\n            parent_fixture.addfinalizer(finalizer)\n\n        ihook = request.node.ihook\n        try:\n            # Setup the fixture, run the code in it, and cache the value\n            # in self.cached_result\n            result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\n        finally:\n            # schedule our finalizer, even if the setup failed\n            request.node.addfinalizer(finalizer)\n\n        return result\n\n    def cache_key(self, request: SubRequest) -> object:\n        return getattr(request, \"param\", None)\n\n    def __repr__(self) -> str:\n        return f\"<FixtureDef argname={self.argname!r} scope={self.scope!r} baseid={self.baseid!r}>\"\n\n\ndef resolve_fixture_function(\n    fixturedef: FixtureDef[FixtureValue], request: FixtureRequest\n) -> _FixtureFunc[FixtureValue]:\n    \"\"\"Get the actual callable that can be called to obtain the fixture\n    value.\"\"\"\n    fixturefunc = fixturedef.func\n    # The fixture function needs to be bound to the actual\n    # request.instance so that code working with \"fixturedef\" behaves\n    # as expected.\n    instance = request.instance\n    if instance is not None:\n        # Handle the case where fixture is defined not in a test class, but some other class\n        # (for example a plugin class with a fixture), see #2270.\n        if hasattr(fixturefunc, \"__self__\") and not isinstance(\n            instance,\n            fixturefunc.__self__.__class__,\n        ):\n            return fixturefunc\n        fixturefunc = getimfunc(fixturedef.func)\n        if fixturefunc != fixturedef.func:\n            fixturefunc = fixturefunc.__get__(instance)\n    return fixturefunc\n\n\ndef pytest_fixture_setup(\n    fixturedef: FixtureDef[FixtureValue], request: SubRequest\n) -> FixtureValue:\n    \"\"\"Execution of fixture setup.\"\"\"\n    kwargs = {}\n    for argname in fixturedef.argnames:\n        kwargs[argname] = request.getfixturevalue(argname)\n\n    fixturefunc = resolve_fixture_function(fixturedef, request)\n    my_cache_key = fixturedef.cache_key(request)\n    try:\n        result = call_fixture_func(fixturefunc, request, kwargs)\n    except TEST_OUTCOME as e:\n        if isinstance(e, skip.Exception):\n            # The test requested a fixture which caused a skip.\n            # Don't show the fixture as the skip location, as then the user\n            # wouldn't know which test skipped.\n            e._use_item_location = True\n        fixturedef.cached_result = (None, my_cache_key, (e, e.__traceback__))\n        raise\n    fixturedef.cached_result = (result, my_cache_key, None)\n    return result\n\n\ndef wrap_function_to_error_out_if_called_directly(\n    function: FixtureFunction,\n    fixture_marker: FixtureFunctionMarker,\n) -> FixtureFunction:\n    \"\"\"Wrap the given fixture function so we can raise an error about it being called directly,\n    instead of used as an argument in a test function.\"\"\"\n    name = fixture_marker.name or function.__name__\n    message = (\n        f'Fixture \"{name}\" called directly. Fixtures are not meant to be called directly,\\n'\n        \"but are created automatically when test functions request them as parameters.\\n\"\n        \"See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and\\n\"\n        \"https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.\"\n    )\n\n    @functools.wraps(function)\n    def result(*args, **kwargs):\n        fail(message, pytrace=False)\n\n    # Keep reference to the original function in our own custom attribute so we don't unwrap\n    # further than this point and lose useful wrappings like @mock.patch (#3774).\n    result.__pytest_wrapped__ = _PytestWrapper(function)  # type: ignore[attr-defined]\n\n    return cast(FixtureFunction, result)\n\n\n@final\n@dataclasses.dataclass(frozen=True)\nclass FixtureFunctionMarker:\n    scope: _ScopeName | Callable[[str, Config], _ScopeName]\n    params: tuple[object, ...] | None\n    autouse: bool = False\n    ids: tuple[object | None, ...] | Callable[[Any], object | None] | None = None\n    name: str | None = None\n\n    _ispytest: dataclasses.InitVar[bool] = False\n\n    def __post_init__(self, _ispytest: bool) -> None:\n        check_ispytest(_ispytest)\n\n    def __call__(self, function: FixtureFunction) -> FixtureFunction:\n        if inspect.isclass(function):\n            raise ValueError(\"class fixtures not supported (maybe in the future)\")\n\n        if getattr(function, \"_pytestfixturefunction\", False):\n            raise ValueError(\n                f\"@pytest.fixture is being applied more than once to the same function {function.__name__!r}\"\n            )\n\n        if hasattr(function, \"pytestmark\"):\n            warnings.warn(MARKED_FIXTURE, stacklevel=2)\n\n        function = wrap_function_to_error_out_if_called_directly(function, self)\n\n        name = self.name or function.__name__\n        if name == \"request\":\n            location = getlocation(function)\n            fail(\n                f\"'request' is a reserved word for fixtures, use another name:\\n  {location}\",\n                pytrace=False,\n            )\n\n        # Type ignored because https://github.com/python/mypy/issues/2087.\n        function._pytestfixturefunction = self  # type: ignore[attr-defined]\n        return function\n\n\n@overload\ndef fixture(\n    fixture_function: FixtureFunction,\n    *,\n    scope: _ScopeName | Callable[[str, Config], _ScopeName] = ...,\n    params: Iterable[object] | None = ...,\n    autouse: bool = ...,\n    ids: Sequence[object | None] | Callable[[Any], object | None] | None = ...,\n    name: str | None = ...,\n) -> FixtureFunction: ...\n\n\n@overload\ndef fixture(\n    fixture_function: None = ...,\n    *,\n    scope: _ScopeName | Callable[[str, Config], _ScopeName] = ...,\n    params: Iterable[object] | None = ...,\n    autouse: bool = ...,\n    ids: Sequence[object | None] | Callable[[Any], object | None] | None = ...,\n    name: str | None = None,\n) -> FixtureFunctionMarker: ...\n\n\ndef fixture(\n    fixture_function: FixtureFunction | None = None,\n    *,\n    scope: _ScopeName | Callable[[str, Config], _ScopeName] = \"function\",\n    params: Iterable[object] | None = None,\n    autouse: bool = False,\n    ids: Sequence[object | None] | Callable[[Any], object | None] | None = None,\n    name: str | None = None,\n) -> FixtureFunctionMarker | FixtureFunction:\n    \"\"\"Decorator to mark a fixture factory function.\n\n    This decorator can be used, with or without parameters, to define a\n    fixture function.\n\n    The name of the fixture function can later be referenced to cause its\n    invocation ahead of running tests: test modules or classes can use the\n    ``pytest.mark.usefixtures(fixturename)`` marker.\n\n    Test functions can directly use fixture names as input arguments in which\n    case the fixture instance returned from the fixture function will be\n    injected.\n\n    Fixtures can provide their values to test functions using ``return`` or\n    ``yield`` statements. When using ``yield`` the code block after the\n    ``yield`` statement is executed as teardown code regardless of the test\n    outcome, and must yield exactly once.\n\n    :param scope:\n        The scope for which this fixture is shared; one of ``\"function\"``\n        (default), ``\"class\"``, ``\"module\"``, ``\"package\"`` or ``\"session\"``.\n\n        This parameter may also be a callable which receives ``(fixture_name, config)``\n        as parameters, and must return a ``str`` with one of the values mentioned above.\n\n        See :ref:`dynamic scope` in the docs for more information.\n\n    :param params:\n        An optional list of parameters which will cause multiple invocations\n        of the fixture function and all of the tests using it. The current\n        parameter is available in ``request.param``.\n\n    :param autouse:\n        If True, the fixture func is activated for all tests that can see it.\n        If False (the default), an explicit reference is needed to activate\n        the fixture.\n\n    :param ids:\n        Sequence of ids each corresponding to the params so that they are\n        part of the test id. If no ids are provided they will be generated\n        automatically from the params.\n\n    :param name:\n        The name of the fixture. This defaults to the name of the decorated\n        function. If a fixture is used in the same module in which it is\n        defined, the function name of the fixture will be shadowed by the\n        function arg that requests the fixture; one way to resolve this is to\n        name the decorated function ``fixture_<fixturename>`` and then use\n        ``@pytest.fixture(name='<fixturename>')``.\n    \"\"\"\n    fixture_marker = FixtureFunctionMarker(\n        scope=scope,\n        params=tuple(params) if params is not None else None,\n        autouse=autouse,\n        ids=None if ids is None else ids if callable(ids) else tuple(ids),\n        name=name,\n        _ispytest=True,\n    )\n\n    # Direct decoration.\n    if fixture_function:\n        return fixture_marker(fixture_function)\n\n    return fixture_marker\n\n\ndef yield_fixture(\n    fixture_function=None,\n    *args,\n    scope=\"function\",\n    params=None,\n    autouse=False,\n    ids=None,\n    name=None,\n):\n    \"\"\"(Return a) decorator to mark a yield-fixture factory function.\n\n    .. deprecated:: 3.0\n        Use :py:func:`pytest.fixture` directly instead.\n    \"\"\"\n    warnings.warn(YIELD_FIXTURE, stacklevel=2)\n    return fixture(\n        fixture_function,\n        *args,\n        scope=scope,\n        params=params,\n        autouse=autouse,\n        ids=ids,\n        name=name,\n    )\n\n\n@fixture(scope=\"session\")\ndef pytestconfig(request: FixtureRequest) -> Config:\n    \"\"\"Session-scoped fixture that returns the session's :class:`pytest.Config`\n    object.\n\n    Example::\n\n        def test_foo(pytestconfig):\n            if pytestconfig.getoption(\"verbose\") > 0:\n                ...\n\n    \"\"\"\n    return request.config\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    parser.addini(\n        \"usefixtures\",\n        type=\"args\",\n        default=[],\n        help=\"List of default fixtures to be used with this project\",\n    )\n    group = parser.getgroup(\"general\")\n    group.addoption(\n        \"--fixtures\",\n        \"--funcargs\",\n        action=\"store_true\",\n        dest=\"showfixtures\",\n        default=False,\n        help=\"Show available fixtures, sorted by plugin appearance \"\n        \"(fixtures with leading '_' are only shown with '-v')\",\n    )\n    group.addoption(\n        \"--fixtures-per-test\",\n        action=\"store_true\",\n        dest=\"show_fixtures_per_test\",\n        default=False,\n        help=\"Show fixtures per test\",\n    )\n\n\ndef pytest_cmdline_main(config: Config) -> int | ExitCode | None:\n    if config.option.showfixtures:\n        showfixtures(config)\n        return 0\n    if config.option.show_fixtures_per_test:\n        show_fixtures_per_test(config)\n        return 0\n    return None\n\n\ndef _get_direct_parametrize_args(node: nodes.Node) -> set[str]:\n    \"\"\"Return all direct parametrization arguments of a node, so we don't\n    mistake them for fixtures.\n\n    Check https://github.com/pytest-dev/pytest/issues/5036.\n\n    These things are done later as well when dealing with parametrization\n    so this could be improved.\n    \"\"\"\n    parametrize_argnames: set[str] = set()\n    for marker in node.iter_markers(name=\"parametrize\"):\n        if not marker.kwargs.get(\"indirect\", False):\n            p_argnames, _ = ParameterSet._parse_parametrize_args(\n                *marker.args, **marker.kwargs\n            )\n            parametrize_argnames.update(p_argnames)\n    return parametrize_argnames\n\n\ndef deduplicate_names(*seqs: Iterable[str]) -> tuple[str, ...]:\n    \"\"\"De-duplicate the sequence of names while keeping the original order.\"\"\"\n    # Ideally we would use a set, but it does not preserve insertion order.\n    return tuple(dict.fromkeys(name for seq in seqs for name in seq))\n\n\nclass FixtureManager:\n    \"\"\"pytest fixture definitions and information is stored and managed\n    from this class.\n\n    During collection fm.parsefactories() is called multiple times to parse\n    fixture function definitions into FixtureDef objects and internal\n    data structures.\n\n    During collection of test functions, metafunc-mechanics instantiate\n    a FuncFixtureInfo object which is cached per node/func-name.\n    This FuncFixtureInfo object is later retrieved by Function nodes\n    which themselves offer a fixturenames attribute.\n\n    The FuncFixtureInfo object holds information about fixtures and FixtureDefs\n    relevant for a particular function. An initial list of fixtures is\n    assembled like this:\n\n    - ini-defined usefixtures\n    - autouse-marked fixtures along the collection chain up from the function\n    - usefixtures markers at module/class/function level\n    - test function funcargs\n\n    Subsequently the funcfixtureinfo.fixturenames attribute is computed\n    as the closure of the fixtures needed to setup the initial fixtures,\n    i.e. fixtures needed by fixture functions themselves are appended\n    to the fixturenames list.\n\n    Upon the test-setup phases all fixturenames are instantiated, retrieved\n    by a lookup of their FuncFixtureInfo.\n    \"\"\"\n\n    def __init__(self, session: Session) -> None:\n        self.session = session\n        self.config: Config = session.config\n        # Maps a fixture name (argname) to all of the FixtureDefs in the test\n        # suite/plugins defined with this name. Populated by parsefactories().\n        # TODO: The order of the FixtureDefs list of each arg is significant,\n        #       explain.\n        self._arg2fixturedefs: Final[dict[str, list[FixtureDef[Any]]]] = {}\n        self._holderobjseen: Final[set[object]] = set()\n        # A mapping from a nodeid to a list of autouse fixtures it defines.\n        self._nodeid_autousenames: Final[dict[str, list[str]]] = {\n            \"\": self.config.getini(\"usefixtures\"),\n        }\n        session.config.pluginmanager.register(self, \"funcmanage\")\n\n    def getfixtureinfo(\n        self,\n        node: nodes.Item,\n        func: Callable[..., object] | None,\n        cls: type | None,\n    ) -> FuncFixtureInfo:\n        \"\"\"Calculate the :class:`FuncFixtureInfo` for an item.\n\n        If ``func`` is None, or if the item sets an attribute\n        ``nofuncargs = True``, then ``func`` is not examined at all.\n\n        :param node:\n            The item requesting the fixtures.\n        :param func:\n            The item's function.\n        :param cls:\n            If the function is a method, the method's class.\n        \"\"\"\n        if func is not None and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, name=node.name, cls=cls)\n        else:\n            argnames = ()\n        usefixturesnames = self._getusefixturesnames(node)\n        autousenames = self._getautousenames(node)\n        initialnames = deduplicate_names(autousenames, usefixturesnames, argnames)\n\n        direct_parametrize_args = _get_direct_parametrize_args(node)\n\n        names_closure, arg2fixturedefs = self.getfixtureclosure(\n            parentnode=node,\n            initialnames=initialnames,\n            ignore_args=direct_parametrize_args,\n        )\n\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)\n\n    def pytest_plugin_registered(self, plugin: _PluggyPlugin, plugin_name: str) -> None:\n        # Fixtures defined in conftest plugins are only visible to within the\n        # conftest's directory. This is unlike fixtures in non-conftest plugins\n        # which have global visibility. So for conftests, construct the base\n        # nodeid from the plugin name (which is the conftest path).\n        if plugin_name and plugin_name.endswith(\"conftest.py\"):\n            # Note: we explicitly do *not* use `plugin.__file__` here -- The\n            # difference is that plugin_name has the correct capitalization on\n            # case-insensitive systems (Windows) and other normalization issues\n            # (issue #11816).\n            conftestpath = absolutepath(plugin_name)\n            try:\n                nodeid = str(conftestpath.parent.relative_to(self.config.rootpath))\n            except ValueError:\n                nodeid = \"\"\n            if nodeid == \".\":\n                nodeid = \"\"\n            if os.sep != nodes.SEP:\n                nodeid = nodeid.replace(os.sep, nodes.SEP)\n        else:\n            nodeid = None\n\n        self.parsefactories(plugin, nodeid)\n\n    def _getautousenames(self, node: nodes.Node) -> Iterator[str]:\n        \"\"\"Return the names of autouse fixtures applicable to node.\"\"\"\n        for parentnode in node.listchain():\n            basenames = self._nodeid_autousenames.get(parentnode.nodeid)\n            if basenames:\n                yield from basenames\n\n    def _getusefixturesnames(self, node: nodes.Item) -> Iterator[str]:\n        \"\"\"Return the names of usefixtures fixtures applicable to node.\"\"\"\n        for mark in node.iter_markers(name=\"usefixtures\"):\n            yield from mark.args\n\n    def getfixtureclosure(\n        self,\n        parentnode: nodes.Node,\n        initialnames: tuple[str, ...],\n        ignore_args: AbstractSet[str],\n    ) -> tuple[list[str], dict[str, Sequence[FixtureDef[Any]]]]:\n        # Collect the closure of all fixtures, starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive).\n\n        fixturenames_closure = list(initialnames)\n\n        arg2fixturedefs: dict[str, Sequence[FixtureDef[Any]]] = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in ignore_args:\n                    continue\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentnode)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    for arg in fixturedefs[-1].argnames:\n                        if arg not in fixturenames_closure:\n                            fixturenames_closure.append(arg)\n\n        def sort_by_scope(arg_name: str) -> Scope:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return Scope.Function\n            else:\n                return fixturedefs[-1]._scope\n\n        fixturenames_closure.sort(key=sort_by_scope, reverse=True)\n        return fixturenames_closure, arg2fixturedefs\n\n    def pytest_generate_tests(self, metafunc: Metafunc) -> None:\n        \"\"\"Generate new tests based on parametrized fixtures used by the given metafunc\"\"\"\n\n        def get_parametrize_mark_argnames(mark: Mark) -> Sequence[str]:\n            args, _ = ParameterSet._parse_parametrize_args(*mark.args, **mark.kwargs)\n            return args\n\n        for argname in metafunc.fixturenames:\n            # Get the FixtureDefs for the argname.\n            fixture_defs = metafunc._arg2fixturedefs.get(argname)\n            if not fixture_defs:\n                # Will raise FixtureLookupError at setup time if not parametrized somewhere\n                # else (e.g @pytest.mark.parametrize)\n                continue\n\n            # If the test itself parametrizes using this argname, give it\n            # precedence.\n            if any(\n                argname in get_parametrize_mark_argnames(mark)\n                for mark in metafunc.definition.iter_markers(\"parametrize\")\n            ):\n                continue\n\n            # In the common case we only look at the fixture def with the\n            # closest scope (last in the list). But if the fixture overrides\n            # another fixture, while requesting the super fixture, keep going\n            # in case the super fixture is parametrized (#1953).\n            for fixturedef in reversed(fixture_defs):\n                # Fixture is parametrized, apply it and stop.\n                if fixturedef.params is not None:\n                    metafunc.parametrize(\n                        argname,\n                        fixturedef.params,\n                        indirect=True,\n                        scope=fixturedef.scope,\n                        ids=fixturedef.ids,\n                    )\n                    break\n\n                # Not requesting the overridden super fixture, stop.\n                if argname not in fixturedef.argnames:\n                    break\n\n                # Try next super fixture, if any.\n\n    def pytest_collection_modifyitems(self, items: list[nodes.Item]) -> None:\n        # Separate parametrized setups.\n        items[:] = reorder_items(items)\n\n    def _register_fixture(\n        self,\n        *,\n        name: str,\n        func: _FixtureFunc[object],\n        nodeid: str | None,\n        scope: Scope | _ScopeName | Callable[[str, Config], _ScopeName] = \"function\",\n        params: Sequence[object] | None = None,\n        ids: tuple[object | None, ...] | Callable[[Any], object | None] | None = None,\n        autouse: bool = False,\n    ) -> None:\n        \"\"\"Register a fixture\n\n        :param name:\n            The fixture's name.\n        :param func:\n            The fixture's implementation function.\n        :param nodeid:\n            The visibility of the fixture. The fixture will be available to the\n            node with this nodeid and its children in the collection tree.\n            None means that the fixture is visible to the entire collection tree,\n            e.g. a fixture defined for general use in a plugin.\n        :param scope:\n            The fixture's scope.\n        :param params:\n            The fixture's parametrization params.\n        :param ids:\n            The fixture's IDs.\n        :param autouse:\n            Whether this is an autouse fixture.\n        \"\"\"\n        fixture_def = FixtureDef(\n            config=self.config,\n            baseid=nodeid,\n            argname=name,\n            func=func,\n            scope=scope,\n            params=params,\n            ids=ids,\n            _ispytest=True,\n        )\n\n        faclist = self._arg2fixturedefs.setdefault(name, [])\n        if fixture_def.has_location:\n            faclist.append(fixture_def)\n        else:\n            # fixturedefs with no location are at the front\n            # so this inserts the current fixturedef after the\n            # existing fixturedefs from external plugins but\n            # before the fixturedefs provided in conftests.\n            i = len([f for f in faclist if not f.has_location])\n            faclist.insert(i, fixture_def)\n        if autouse:\n            self._nodeid_autousenames.setdefault(nodeid or \"\", []).append(name)\n\n    @overload\n    def parsefactories(\n        self,\n        node_or_obj: nodes.Node,\n    ) -> None:\n        raise NotImplementedError()\n\n    @overload\n    def parsefactories(\n        self,\n        node_or_obj: object,\n        nodeid: str | None,\n    ) -> None:\n        raise NotImplementedError()\n\n    def parsefactories(\n        self,\n        node_or_obj: nodes.Node | object,\n        nodeid: str | NotSetType | None = NOTSET,\n    ) -> None:\n        \"\"\"Collect fixtures from a collection node or object.\n\n        Found fixtures are parsed into `FixtureDef`s and saved.\n\n        If `node_or_object` is a collection node (with an underlying Python\n        object), the node's object is traversed and the node's nodeid is used to\n        determine the fixtures' visibility. `nodeid` must not be specified in\n        this case.\n\n        If `node_or_object` is an object (e.g. a plugin), the object is\n        traversed and the given `nodeid` is used to determine the fixtures'\n        visibility. `nodeid` must be specified in this case; None and \"\" mean\n        total visibility.\n        \"\"\"\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            assert isinstance(node_or_obj, nodes.Node)\n            holderobj = cast(object, node_or_obj.obj)  # type: ignore[attr-defined]\n            assert isinstance(node_or_obj.nodeid, str)\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # Magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute.\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # During fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in\n            # order to not emit the warning when pytest itself calls the\n            # fixture function.\n            func = get_real_method(obj, holderobj)\n\n            self._register_fixture(\n                name=name,\n                nodeid=nodeid,\n                func=func,\n                scope=marker.scope,\n                params=marker.params,\n                ids=marker.ids,\n                autouse=marker.autouse,\n            )\n\n    def getfixturedefs(\n        self, argname: str, node: nodes.Node\n    ) -> Sequence[FixtureDef[Any]] | None:\n        \"\"\"Get FixtureDefs for a fixture name which are applicable\n        to a given node.\n\n        Returns None if there are no fixtures at all defined with the given\n        name. (This is different from the case in which there are fixtures\n        with the given name, but none applicable to the node. In this case,\n        an empty result is returned).\n\n        :param argname: Name of the fixture to search for.\n        :param node: The requesting Node.\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, node))\n\n    def _matchfactories(\n        self, fixturedefs: Iterable[FixtureDef[Any]], node: nodes.Node\n    ) -> Iterator[FixtureDef[Any]]:\n        parentnodeids = {n.nodeid for n in node.iter_parents()}\n        for fixturedef in fixturedefs:\n            if fixturedef.baseid in parentnodeids:\n                yield fixturedef\n\n\ndef show_fixtures_per_test(config: Config) -> int | ExitCode:\n    from _pytest.main import wrap_session\n\n    return wrap_session(config, _show_fixtures_per_test)\n\n\n_PYTEST_DIR = Path(_pytest.__file__).parent\n\n\ndef _pretty_fixture_path(invocation_dir: Path, func) -> str:\n    loc = Path(getlocation(func, invocation_dir))\n    prefix = Path(\"...\", \"_pytest\")\n    try:\n        return str(prefix / loc.relative_to(_PYTEST_DIR))\n    except ValueError:\n        return bestrelpath(invocation_dir, loc)\n\n\ndef _show_fixtures_per_test(config: Config, session: Session) -> None:\n    import _pytest.config\n\n    session.perform_collect()\n    invocation_dir = config.invocation_params.dir\n    tw = _pytest.config.create_terminal_writer(config)\n    verbose = config.getvalue(\"verbose\")\n\n    def get_best_relpath(func) -> str:\n        loc = getlocation(func, invocation_dir)\n        return bestrelpath(invocation_dir, Path(loc))\n\n    def write_fixture(fixture_def: FixtureDef[object]) -> None:\n        argname = fixture_def.argname\n        if verbose <= 0 and argname.startswith(\"_\"):\n            return\n        prettypath = _pretty_fixture_path(invocation_dir, fixture_def.func)\n        tw.write(f\"{argname}\", green=True)\n        tw.write(f\" -- {prettypath}\", yellow=True)\n        tw.write(\"\\n\")\n        fixture_doc = inspect.getdoc(fixture_def.func)\n        if fixture_doc:\n            write_docstring(\n                tw,\n                fixture_doc.split(\"\\n\\n\", maxsplit=1)[0]\n                if verbose <= 0\n                else fixture_doc,\n            )\n        else:\n            tw.line(\"    no docstring available\", red=True)\n\n    def write_item(item: nodes.Item) -> None:\n        # Not all items have _fixtureinfo attribute.\n        info: FuncFixtureInfo | None = getattr(item, \"_fixtureinfo\", None)\n        if info is None or not info.name2fixturedefs:\n            # This test item does not use any fixtures.\n            return\n        tw.line()\n        tw.sep(\"-\", f\"fixtures used by {item.name}\")\n        # TODO: Fix this type ignore.\n        tw.sep(\"-\", f\"({get_best_relpath(item.function)})\")  # type: ignore[attr-defined]\n        # dict key not used in loop but needed for sorting.\n        for _, fixturedefs in sorted(info.name2fixturedefs.items()):\n            assert fixturedefs is not None\n            if not fixturedefs:\n                continue\n            # Last item is expected to be the one used by the test item.\n            write_fixture(fixturedefs[-1])\n\n    for session_item in session.items:\n        write_item(session_item)\n\n\ndef showfixtures(config: Config) -> int | ExitCode:\n    from _pytest.main import wrap_session\n\n    return wrap_session(config, _showfixtures_main)\n\n\ndef _showfixtures_main(config: Config, session: Session) -> None:\n    import _pytest.config\n\n    session.perform_collect()\n    invocation_dir = config.invocation_params.dir\n    tw = _pytest.config.create_terminal_writer(config)\n    verbose = config.getvalue(\"verbose\")\n\n    fm = session._fixturemanager\n\n    available = []\n    seen: set[tuple[str, str]] = set()\n\n    for argname, fixturedefs in fm._arg2fixturedefs.items():\n        assert fixturedefs is not None\n        if not fixturedefs:\n            continue\n        for fixturedef in fixturedefs:\n            loc = getlocation(fixturedef.func, invocation_dir)\n            if (fixturedef.argname, loc) in seen:\n                continue\n            seen.add((fixturedef.argname, loc))\n            available.append(\n                (\n                    len(fixturedef.baseid),\n                    fixturedef.func.__module__,\n                    _pretty_fixture_path(invocation_dir, fixturedef.func),\n                    fixturedef.argname,\n                    fixturedef,\n                )\n            )\n\n    available.sort()\n    currentmodule = None\n    for baseid, module, prettypath, argname, fixturedef in available:\n        if currentmodule != module:\n            if not module.startswith(\"_pytest.\"):\n                tw.line()\n                tw.sep(\"-\", f\"fixtures defined from {module}\")\n                currentmodule = module\n        if verbose <= 0 and argname.startswith(\"_\"):\n            continue\n        tw.write(f\"{argname}\", green=True)\n        if fixturedef.scope != \"function\":\n            tw.write(f\" [{fixturedef.scope} scope]\", cyan=True)\n        tw.write(f\" -- {prettypath}\", yellow=True)\n        tw.write(\"\\n\")\n        doc = inspect.getdoc(fixturedef.func)\n        if doc:\n            write_docstring(\n                tw, doc.split(\"\\n\\n\", maxsplit=1)[0] if verbose <= 0 else doc\n            )\n        else:\n            tw.line(\"    no docstring available\", red=True)\n        tw.line()\n\n\ndef write_docstring(tw: TerminalWriter, doc: str, indent: str = \"    \") -> None:\n    for line in doc.split(\"\\n\"):\n        tw.line(indent + line)\n", "src/_pytest/deprecated.py": "\"\"\"Deprecation messages and bits of code used elsewhere in the codebase that\nis planned to be removed in the next pytest release.\n\nKeeping it in a central location makes it easy to track what is deprecated and should\nbe removed when the time comes.\n\nAll constants defined in this module should be either instances of\n:class:`PytestWarning`, or :class:`UnformattedWarning`\nin case of warnings which need to format their messages.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom warnings import warn\n\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestRemovedIn9Warning\nfrom _pytest.warning_types import UnformattedWarning\n\n\n# set of plugins which have been integrated into the core; we use this list to ignore\n# them during registration to avoid conflicts\nDEPRECATED_EXTERNAL_PLUGINS = {\n    \"pytest_catchlog\",\n    \"pytest_capturelog\",\n    \"pytest_faulthandler\",\n}\n\n\n# This can be* removed pytest 8, but it's harmless and common, so no rush to remove.\n# * If you're in the future: \"could have been\".\nYIELD_FIXTURE = PytestDeprecationWarning(\n    \"@pytest.yield_fixture is deprecated.\\n\"\n    \"Use @pytest.fixture instead; they are the same.\"\n)\n\n# This deprecation is never really meant to be removed.\nPRIVATE = PytestDeprecationWarning(\"A private pytest class or function was used.\")\n\n\nHOOK_LEGACY_PATH_ARG = UnformattedWarning(\n    PytestRemovedIn9Warning,\n    \"The ({pylib_path_arg}: py.path.local) argument is deprecated, please use ({pathlib_path_arg}: pathlib.Path)\\n\"\n    \"see https://docs.pytest.org/en/latest/deprecations.html\"\n    \"#py-path-local-arguments-for-hooks-replaced-with-pathlib-path\",\n)\n\nNODE_CTOR_FSPATH_ARG = UnformattedWarning(\n    PytestRemovedIn9Warning,\n    \"The (fspath: py.path.local) argument to {node_type_name} is deprecated. \"\n    \"Please use the (path: pathlib.Path) argument instead.\\n\"\n    \"See https://docs.pytest.org/en/latest/deprecations.html\"\n    \"#fspath-argument-for-node-constructors-replaced-with-pathlib-path\",\n)\n\nHOOK_LEGACY_MARKING = UnformattedWarning(\n    PytestDeprecationWarning,\n    \"The hook{type} {fullname} uses old-style configuration options (marks or attributes).\\n\"\n    \"Please use the pytest.hook{type}({hook_opts}) decorator instead\\n\"\n    \" to configure the hooks.\\n\"\n    \" See https://docs.pytest.org/en/latest/deprecations.html\"\n    \"#configuring-hook-specs-impls-using-markers\",\n)\n\nMARKED_FIXTURE = PytestRemovedIn9Warning(\n    \"Marks applied to fixtures have no effect\\n\"\n    \"See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\"\n)\n\n# You want to make some `__init__` or function \"private\".\n#\n#   def my_private_function(some, args):\n#       ...\n#\n# Do this:\n#\n#   def my_private_function(some, args, *, _ispytest: bool = False):\n#       check_ispytest(_ispytest)\n#       ...\n#\n# Change all internal/allowed calls to\n#\n#   my_private_function(some, args, _ispytest=True)\n#\n# All other calls will get the default _ispytest=False and trigger\n# the warning (possibly error in the future).\n\n\ndef check_ispytest(ispytest: bool) -> None:\n    if not ispytest:\n        warn(PRIVATE, stacklevel=3)\n", "src/_pytest/pytester_assertions.py": "\"\"\"Helper plugin for pytester; should not be loaded on its own.\"\"\"\n\n# This plugin contains assertions used by pytester. pytester cannot\n# contain them itself, since it is imported by the `pytest` module,\n# hence cannot be subject to assertion rewriting, which requires a\n# module to not be already imported.\nfrom __future__ import annotations\n\nfrom typing import Sequence\n\nfrom _pytest.reports import CollectReport\nfrom _pytest.reports import TestReport\n\n\ndef assertoutcome(\n    outcomes: tuple[\n        Sequence[TestReport],\n        Sequence[CollectReport | TestReport],\n        Sequence[CollectReport | TestReport],\n    ],\n    passed: int = 0,\n    skipped: int = 0,\n    failed: int = 0,\n) -> None:\n    __tracebackhide__ = True\n\n    realpassed, realskipped, realfailed = outcomes\n    obtained = {\n        \"passed\": len(realpassed),\n        \"skipped\": len(realskipped),\n        \"failed\": len(realfailed),\n    }\n    expected = {\"passed\": passed, \"skipped\": skipped, \"failed\": failed}\n    assert obtained == expected, outcomes\n\n\ndef assert_outcomes(\n    outcomes: dict[str, int],\n    passed: int = 0,\n    skipped: int = 0,\n    failed: int = 0,\n    errors: int = 0,\n    xpassed: int = 0,\n    xfailed: int = 0,\n    warnings: int | None = None,\n    deselected: int | None = None,\n) -> None:\n    \"\"\"Assert that the specified outcomes appear with the respective\n    numbers (0 means it didn't occur) in the text output from a test run.\"\"\"\n    __tracebackhide__ = True\n\n    obtained = {\n        \"passed\": outcomes.get(\"passed\", 0),\n        \"skipped\": outcomes.get(\"skipped\", 0),\n        \"failed\": outcomes.get(\"failed\", 0),\n        \"errors\": outcomes.get(\"errors\", 0),\n        \"xpassed\": outcomes.get(\"xpassed\", 0),\n        \"xfailed\": outcomes.get(\"xfailed\", 0),\n    }\n    expected = {\n        \"passed\": passed,\n        \"skipped\": skipped,\n        \"failed\": failed,\n        \"errors\": errors,\n        \"xpassed\": xpassed,\n        \"xfailed\": xfailed,\n    }\n    if warnings is not None:\n        obtained[\"warnings\"] = outcomes.get(\"warnings\", 0)\n        expected[\"warnings\"] = warnings\n    if deselected is not None:\n        obtained[\"deselected\"] = outcomes.get(\"deselected\", 0)\n        expected[\"deselected\"] = deselected\n    assert obtained == expected\n", "src/_pytest/__init__.py": "from __future__ import annotations\n\n\n__all__ = [\"__version__\", \"version_tuple\"]\n\ntry:\n    from ._version import version as __version__\n    from ._version import version_tuple\nexcept ImportError:  # pragma: no cover\n    # broken installation, we don't even try\n    # unknown only works because we do poor mans version compare\n    __version__ = \"unknown\"\n    version_tuple = (0, 0, \"unknown\")\n", "src/_pytest/setupplan.py": "from __future__ import annotations\n\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.fixtures import FixtureDef\nfrom _pytest.fixtures import SubRequest\nimport pytest\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"debugconfig\")\n    group.addoption(\n        \"--setupplan\",\n        \"--setup-plan\",\n        action=\"store_true\",\n        help=\"Show what fixtures and tests would be executed but \"\n        \"don't execute anything\",\n    )\n\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_fixture_setup(\n    fixturedef: FixtureDef[object], request: SubRequest\n) -> object | None:\n    # Will return a dummy fixture if the setuponly option is provided.\n    if request.config.option.setupplan:\n        my_cache_key = fixturedef.cache_key(request)\n        fixturedef.cached_result = (None, my_cache_key, None)\n        return fixturedef.cached_result\n    return None\n\n\n@pytest.hookimpl(tryfirst=True)\ndef pytest_cmdline_main(config: Config) -> int | ExitCode | None:\n    if config.option.setupplan:\n        config.option.setuponly = True\n        config.option.setupshow = True\n    return None\n", "src/_pytest/compat.py": "# mypy: allow-untyped-defs\n\"\"\"Python version compatibility code.\"\"\"\n\nfrom __future__ import annotations\n\nimport dataclasses\nimport enum\nimport functools\nimport inspect\nfrom inspect import Parameter\nfrom inspect import signature\nimport os\nfrom pathlib import Path\nimport sys\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Final\nfrom typing import NoReturn\n\nimport py\n\n\n#: constant to prepare valuing pylib path replacements/lazy proxies later on\n#  intended for removal in pytest 8.0 or 9.0\n\n# fmt: off\n# intentional space to create a fake difference for the verification\nLEGACY_PATH = py.path. local\n# fmt: on\n\n\ndef legacy_path(path: str | os.PathLike[str]) -> LEGACY_PATH:\n    \"\"\"Internal wrapper to prepare lazy proxies for legacy_path instances\"\"\"\n    return LEGACY_PATH(path)\n\n\n# fmt: off\n# Singleton type for NOTSET, as described in:\n# https://www.python.org/dev/peps/pep-0484/#support-for-singleton-types-in-unions\nclass NotSetType(enum.Enum):\n    token = 0\nNOTSET: Final = NotSetType.token\n# fmt: on\n\n\ndef is_generator(func: object) -> bool:\n    genfunc = inspect.isgeneratorfunction(func)\n    return genfunc and not iscoroutinefunction(func)\n\n\ndef iscoroutinefunction(func: object) -> bool:\n    \"\"\"Return True if func is a coroutine function (a function defined with async\n    def syntax, and doesn't contain yield), or a function decorated with\n    @asyncio.coroutine.\n\n    Note: copied and modified from Python 3.5's builtin coroutines.py to avoid\n    importing asyncio directly, which in turns also initializes the \"logging\"\n    module as a side-effect (see issue #8).\n    \"\"\"\n    return inspect.iscoroutinefunction(func) or getattr(func, \"_is_coroutine\", False)\n\n\ndef is_async_function(func: object) -> bool:\n    \"\"\"Return True if the given function seems to be an async function or\n    an async generator.\"\"\"\n    return iscoroutinefunction(func) or inspect.isasyncgenfunction(func)\n\n\ndef getlocation(function, curdir: str | os.PathLike[str] | None = None) -> str:\n    function = get_real_func(function)\n    fn = Path(inspect.getfile(function))\n    lineno = function.__code__.co_firstlineno\n    if curdir is not None:\n        try:\n            relfn = fn.relative_to(curdir)\n        except ValueError:\n            pass\n        else:\n            return \"%s:%d\" % (relfn, lineno + 1)\n    return \"%s:%d\" % (fn, lineno + 1)\n\n\ndef num_mock_patch_args(function) -> int:\n    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"\n    patchings = getattr(function, \"patchings\", None)\n    if not patchings:\n        return 0\n\n    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())\n    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())\n\n    return len(\n        [\n            p\n            for p in patchings\n            if not p.attribute_name\n            and (p.new is mock_sentinel or p.new is ut_mock_sentinel)\n        ]\n    )\n\n\ndef getfuncargnames(\n    function: Callable[..., object],\n    *,\n    name: str = \"\",\n    cls: type | None = None,\n) -> tuple[str, ...]:\n    \"\"\"Return the names of a function's mandatory arguments.\n\n    Should return the names of all function arguments that:\n    * Aren't bound to an instance or type as in instance or class methods.\n    * Don't have default values.\n    * Aren't bound with functools.partial.\n    * Aren't replaced with mocks.\n\n    The cls arguments indicate that the function should be treated as a bound\n    method even though it's not unless the function is a static method.\n\n    The name parameter should be the original name in which the function was collected.\n    \"\"\"\n    # TODO(RonnyPfannschmidt): This function should be refactored when we\n    # revisit fixtures. The fixture mechanism should ask the node for\n    # the fixture names, and not try to obtain directly from the\n    # function object well after collection has occurred.\n\n    # The parameters attribute of a Signature object contains an\n    # ordered mapping of parameter names to Parameter instances.  This\n    # creates a tuple of the names of the parameters that don't have\n    # defaults.\n    try:\n        parameters = signature(function).parameters\n    except (ValueError, TypeError) as e:\n        from _pytest.outcomes import fail\n\n        fail(\n            f\"Could not determine arguments of {function!r}: {e}\",\n            pytrace=False,\n        )\n\n    arg_names = tuple(\n        p.name\n        for p in parameters.values()\n        if (\n            p.kind is Parameter.POSITIONAL_OR_KEYWORD\n            or p.kind is Parameter.KEYWORD_ONLY\n        )\n        and p.default is Parameter.empty\n    )\n    if not name:\n        name = function.__name__\n\n    # If this function should be treated as a bound method even though\n    # it's passed as an unbound method or function, remove the first\n    # parameter name.\n    if (\n        # Not using `getattr` because we don't want to resolve the staticmethod.\n        # Not using `cls.__dict__` because we want to check the entire MRO.\n        cls\n        and not isinstance(\n            inspect.getattr_static(cls, name, default=None), staticmethod\n        )\n    ):\n        arg_names = arg_names[1:]\n    # Remove any names that will be replaced with mocks.\n    if hasattr(function, \"__wrapped__\"):\n        arg_names = arg_names[num_mock_patch_args(function) :]\n    return arg_names\n\n\ndef get_default_arg_names(function: Callable[..., Any]) -> tuple[str, ...]:\n    # Note: this code intentionally mirrors the code at the beginning of\n    # getfuncargnames, to get the arguments which were excluded from its result\n    # because they had default values.\n    return tuple(\n        p.name\n        for p in signature(function).parameters.values()\n        if p.kind in (Parameter.POSITIONAL_OR_KEYWORD, Parameter.KEYWORD_ONLY)\n        and p.default is not Parameter.empty\n    )\n\n\n_non_printable_ascii_translate_table = {\n    i: f\"\\\\x{i:02x}\" for i in range(128) if i not in range(32, 127)\n}\n_non_printable_ascii_translate_table.update(\n    {ord(\"\\t\"): \"\\\\t\", ord(\"\\r\"): \"\\\\r\", ord(\"\\n\"): \"\\\\n\"}\n)\n\n\ndef ascii_escaped(val: bytes | str) -> str:\n    r\"\"\"If val is pure ASCII, return it as an str, otherwise, escape\n    bytes objects into a sequence of escaped bytes:\n\n    b'\\xc3\\xb4\\xc5\\xd6' -> r'\\xc3\\xb4\\xc5\\xd6'\n\n    and escapes strings into a sequence of escaped unicode ids, e.g.:\n\n    r'4\\nV\\U00043efa\\x0eMXWB\\x1e\\u3028\\u15fd\\xcd\\U0007d944'\n\n    Note:\n       The obvious \"v.decode('unicode-escape')\" will return\n       valid UTF-8 unicode if it finds them in bytes, but we\n       want to return escaped bytes for any byte, even if they match\n       a UTF-8 string.\n    \"\"\"\n    if isinstance(val, bytes):\n        ret = val.decode(\"ascii\", \"backslashreplace\")\n    else:\n        ret = val.encode(\"unicode_escape\").decode(\"ascii\")\n    return ret.translate(_non_printable_ascii_translate_table)\n\n\n@dataclasses.dataclass\nclass _PytestWrapper:\n    \"\"\"Dummy wrapper around a function object for internal use only.\n\n    Used to correctly unwrap the underlying function object when we are\n    creating fixtures, because we wrap the function object ourselves with a\n    decorator to issue warnings when the fixture function is called directly.\n    \"\"\"\n\n    obj: Any\n\n\ndef get_real_func(obj):\n    \"\"\"Get the real function object of the (possibly) wrapped object by\n    functools.wraps or functools.partial.\"\"\"\n    start_obj = obj\n    for i in range(100):\n        # __pytest_wrapped__ is set by @pytest.fixture when wrapping the fixture function\n        # to trigger a warning if it gets called directly instead of by pytest: we don't\n        # want to unwrap further than this otherwise we lose useful wrappings like @mock.patch (#3774)\n        new_obj = getattr(obj, \"__pytest_wrapped__\", None)\n        if isinstance(new_obj, _PytestWrapper):\n            obj = new_obj.obj\n            break\n        new_obj = getattr(obj, \"__wrapped__\", None)\n        if new_obj is None:\n            break\n        obj = new_obj\n    else:\n        from _pytest._io.saferepr import saferepr\n\n        raise ValueError(\n            f\"could not find real function of {saferepr(start_obj)}\\nstopped at {saferepr(obj)}\"\n        )\n    if isinstance(obj, functools.partial):\n        obj = obj.func\n    return obj\n\n\ndef get_real_method(obj, holder):\n    \"\"\"Attempt to obtain the real function object that might be wrapping\n    ``obj``, while at the same time returning a bound method to ``holder`` if\n    the original object was a bound method.\"\"\"\n    try:\n        is_method = hasattr(obj, \"__func__\")\n        obj = get_real_func(obj)\n    except Exception:  # pragma: no cover\n        return obj\n    if is_method and hasattr(obj, \"__get__\") and callable(obj.__get__):\n        obj = obj.__get__(holder)\n    return obj\n\n\ndef getimfunc(func):\n    try:\n        return func.__func__\n    except AttributeError:\n        return func\n\n\ndef safe_getattr(object: Any, name: str, default: Any) -> Any:\n    \"\"\"Like getattr but return default upon any Exception or any OutcomeException.\n\n    Attribute access can potentially fail for 'evil' Python objects.\n    See issue #214.\n    It catches OutcomeException because of #2490 (issue #580), new outcomes\n    are derived from BaseException instead of Exception (for more details\n    check #2707).\n    \"\"\"\n    from _pytest.outcomes import TEST_OUTCOME\n\n    try:\n        return getattr(object, name, default)\n    except TEST_OUTCOME:\n        return default\n\n\ndef safe_isclass(obj: object) -> bool:\n    \"\"\"Ignore any exception via isinstance on Python 3.\"\"\"\n    try:\n        return inspect.isclass(obj)\n    except Exception:\n        return False\n\n\ndef get_user_id() -> int | None:\n    \"\"\"Return the current process's real user id or None if it could not be\n    determined.\n\n    :return: The user id or None if it could not be determined.\n    \"\"\"\n    # mypy follows the version and platform checking expectation of PEP 484:\n    # https://mypy.readthedocs.io/en/stable/common_issues.html?highlight=platform#python-version-and-system-platform-checks\n    # Containment checks are too complex for mypy v1.5.0 and cause failure.\n    if sys.platform == \"win32\" or sys.platform == \"emscripten\":\n        # win32 does not have a getuid() function.\n        # Emscripten has a return 0 stub.\n        return None\n    else:\n        # On other platforms, a return value of -1 is assumed to indicate that\n        # the current process's real user id could not be determined.\n        ERROR = -1\n        uid = os.getuid()\n        return uid if uid != ERROR else None\n\n\n# Perform exhaustiveness checking.\n#\n# Consider this example:\n#\n#     MyUnion = Union[int, str]\n#\n#     def handle(x: MyUnion) -> int {\n#         if isinstance(x, int):\n#             return 1\n#         elif isinstance(x, str):\n#             return 2\n#         else:\n#             raise Exception('unreachable')\n#\n# Now suppose we add a new variant:\n#\n#     MyUnion = Union[int, str, bytes]\n#\n# After doing this, we must remember ourselves to go and update the handle\n# function to handle the new variant.\n#\n# With `assert_never` we can do better:\n#\n#     // raise Exception('unreachable')\n#     return assert_never(x)\n#\n# Now, if we forget to handle the new variant, the type-checker will emit a\n# compile-time error, instead of the runtime error we would have gotten\n# previously.\n#\n# This also work for Enums (if you use `is` to compare) and Literals.\ndef assert_never(value: NoReturn) -> NoReturn:\n    assert False, f\"Unhandled value: {value} ({type(value).__name__})\"\n", "src/_pytest/unittest.py": "# mypy: allow-untyped-defs\n\"\"\"Discover and run std-library \"unittest\" style tests.\"\"\"\n\nfrom __future__ import annotations\n\nimport inspect\nimport sys\nimport traceback\nimport types\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Generator\nfrom typing import Iterable\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import Union\n\nimport _pytest._code\nfrom _pytest.compat import is_async_function\nfrom _pytest.config import hookimpl\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Module\nfrom _pytest.runner import CallInfo\nimport pytest\n\n\nif sys.version_info[:2] < (3, 11):\n    from exceptiongroup import ExceptionGroup\n\nif TYPE_CHECKING:\n    import unittest\n\n    import twisted.trial.unittest\n\n\n_SysExcInfoType = Union[\n    Tuple[Type[BaseException], BaseException, types.TracebackType],\n    Tuple[None, None, None],\n]\n\n\ndef pytest_pycollect_makeitem(\n    collector: Module | Class, name: str, obj: object\n) -> UnitTestCase | None:\n    try:\n        # Has unittest been imported?\n        ut = sys.modules[\"unittest\"]\n        # Is obj a subclass of unittest.TestCase?\n        # Type ignored because `ut` is an opaque module.\n        if not issubclass(obj, ut.TestCase):  # type: ignore\n            return None\n    except Exception:\n        return None\n    # Is obj a concrete class?\n    # Abstract classes can't be instantiated so no point collecting them.\n    if inspect.isabstract(obj):\n        return None\n    # Yes, so let's collect it.\n    return UnitTestCase.from_parent(collector, name=name, obj=obj)\n\n\nclass UnitTestCase(Class):\n    # Marker for fixturemanger.getfixtureinfo()\n    # to declare that our children do not support funcargs.\n    nofuncargs = True\n\n    def newinstance(self):\n        # TestCase __init__ takes the method (test) name. The TestCase\n        # constructor treats the name \"runTest\" as a special no-op, so it can be\n        # used when a dummy instance is needed. While unittest.TestCase has a\n        # default, some subclasses omit the default (#9610), so always supply\n        # it.\n        return self.obj(\"runTest\")\n\n    def collect(self) -> Iterable[Item | Collector]:\n        from unittest import TestLoader\n\n        cls = self.obj\n        if not getattr(cls, \"__test__\", True):\n            return\n\n        skipped = _is_skipped(cls)\n        if not skipped:\n            self._register_unittest_setup_method_fixture(cls)\n            self._register_unittest_setup_class_fixture(cls)\n            self._register_setup_class_fixture()\n\n        self.session._fixturemanager.parsefactories(self.newinstance(), self.nodeid)\n\n        loader = TestLoader()\n        foundsomething = False\n        for name in loader.getTestCaseNames(self.obj):\n            x = getattr(self.obj, name)\n            if not getattr(x, \"__test__\", True):\n                continue\n            yield TestCaseFunction.from_parent(self, name=name)\n            foundsomething = True\n\n        if not foundsomething:\n            runtest = getattr(self.obj, \"runTest\", None)\n            if runtest is not None:\n                ut = sys.modules.get(\"twisted.trial.unittest\", None)\n                if ut is None or runtest != ut.TestCase.runTest:\n                    yield TestCaseFunction.from_parent(self, name=\"runTest\")\n\n    def _register_unittest_setup_class_fixture(self, cls: type) -> None:\n        \"\"\"Register an auto-use fixture to invoke setUpClass and\n        tearDownClass (#517).\"\"\"\n        setup = getattr(cls, \"setUpClass\", None)\n        teardown = getattr(cls, \"tearDownClass\", None)\n        if setup is None and teardown is None:\n            return None\n        cleanup = getattr(cls, \"doClassCleanups\", lambda: None)\n\n        def process_teardown_exceptions() -> None:\n            # tearDown_exceptions is a list set in the class containing exc_infos for errors during\n            # teardown for the class.\n            exc_infos = getattr(cls, \"tearDown_exceptions\", None)\n            if not exc_infos:\n                return\n            exceptions = [exc for (_, exc, _) in exc_infos]\n            # If a single exception, raise it directly as this provides a more readable\n            # error (hopefully this will improve in #12255).\n            if len(exceptions) == 1:\n                raise exceptions[0]\n            else:\n                raise ExceptionGroup(\"Unittest class cleanup errors\", exceptions)\n\n        def unittest_setup_class_fixture(\n            request: FixtureRequest,\n        ) -> Generator[None, None, None]:\n            cls = request.cls\n            if _is_skipped(cls):\n                reason = cls.__unittest_skip_why__\n                raise pytest.skip.Exception(reason, _use_item_location=True)\n            if setup is not None:\n                try:\n                    setup()\n                # unittest does not call the cleanup function for every BaseException, so we\n                # follow this here.\n                except Exception:\n                    cleanup()\n                    process_teardown_exceptions()\n                    raise\n            yield\n            try:\n                if teardown is not None:\n                    teardown()\n            finally:\n                cleanup()\n                process_teardown_exceptions()\n\n        self.session._fixturemanager._register_fixture(\n            # Use a unique name to speed up lookup.\n            name=f\"_unittest_setUpClass_fixture_{cls.__qualname__}\",\n            func=unittest_setup_class_fixture,\n            nodeid=self.nodeid,\n            scope=\"class\",\n            autouse=True,\n        )\n\n    def _register_unittest_setup_method_fixture(self, cls: type) -> None:\n        \"\"\"Register an auto-use fixture to invoke setup_method and\n        teardown_method (#517).\"\"\"\n        setup = getattr(cls, \"setup_method\", None)\n        teardown = getattr(cls, \"teardown_method\", None)\n        if setup is None and teardown is None:\n            return None\n\n        def unittest_setup_method_fixture(\n            request: FixtureRequest,\n        ) -> Generator[None, None, None]:\n            self = request.instance\n            if _is_skipped(self):\n                reason = self.__unittest_skip_why__\n                raise pytest.skip.Exception(reason, _use_item_location=True)\n            if setup is not None:\n                setup(self, request.function)\n            yield\n            if teardown is not None:\n                teardown(self, request.function)\n\n        self.session._fixturemanager._register_fixture(\n            # Use a unique name to speed up lookup.\n            name=f\"_unittest_setup_method_fixture_{cls.__qualname__}\",\n            func=unittest_setup_method_fixture,\n            nodeid=self.nodeid,\n            scope=\"function\",\n            autouse=True,\n        )\n\n\nclass TestCaseFunction(Function):\n    nofuncargs = True\n    _excinfo: list[_pytest._code.ExceptionInfo[BaseException]] | None = None\n\n    def _getinstance(self):\n        assert isinstance(self.parent, UnitTestCase)\n        return self.parent.obj(self.name)\n\n    # Backward compat for pytest-django; can be removed after pytest-django\n    # updates + some slack.\n    @property\n    def _testcase(self):\n        return self.instance\n\n    def setup(self) -> None:\n        # A bound method to be called during teardown() if set (see 'runtest()').\n        self._explicit_tearDown: Callable[[], None] | None = None\n        super().setup()\n\n    def teardown(self) -> None:\n        if self._explicit_tearDown is not None:\n            self._explicit_tearDown()\n            self._explicit_tearDown = None\n        self._obj = None\n        del self._instance\n        super().teardown()\n\n    def startTest(self, testcase: unittest.TestCase) -> None:\n        pass\n\n    def _addexcinfo(self, rawexcinfo: _SysExcInfoType) -> None:\n        # Unwrap potential exception info (see twisted trial support below).\n        rawexcinfo = getattr(rawexcinfo, \"_rawexcinfo\", rawexcinfo)\n        try:\n            excinfo = _pytest._code.ExceptionInfo[BaseException].from_exc_info(\n                rawexcinfo  # type: ignore[arg-type]\n            )\n            # Invoke the attributes to trigger storing the traceback\n            # trial causes some issue there.\n            _ = excinfo.value\n            _ = excinfo.traceback\n        except TypeError:\n            try:\n                try:\n                    values = traceback.format_exception(*rawexcinfo)\n                    values.insert(\n                        0,\n                        \"NOTE: Incompatible Exception Representation, \"\n                        \"displaying natively:\\n\\n\",\n                    )\n                    fail(\"\".join(values), pytrace=False)\n                except (fail.Exception, KeyboardInterrupt):\n                    raise\n                except BaseException:\n                    fail(\n                        \"ERROR: Unknown Incompatible Exception \"\n                        f\"representation:\\n{rawexcinfo!r}\",\n                        pytrace=False,\n                    )\n            except KeyboardInterrupt:\n                raise\n            except fail.Exception:\n                excinfo = _pytest._code.ExceptionInfo.from_current()\n        self.__dict__.setdefault(\"_excinfo\", []).append(excinfo)\n\n    def addError(\n        self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType\n    ) -> None:\n        try:\n            if isinstance(rawexcinfo[1], exit.Exception):\n                exit(rawexcinfo[1].msg)\n        except TypeError:\n            pass\n        self._addexcinfo(rawexcinfo)\n\n    def addFailure(\n        self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType\n    ) -> None:\n        self._addexcinfo(rawexcinfo)\n\n    def addSkip(self, testcase: unittest.TestCase, reason: str) -> None:\n        try:\n            raise pytest.skip.Exception(reason, _use_item_location=True)\n        except skip.Exception:\n            self._addexcinfo(sys.exc_info())\n\n    def addExpectedFailure(\n        self,\n        testcase: unittest.TestCase,\n        rawexcinfo: _SysExcInfoType,\n        reason: str = \"\",\n    ) -> None:\n        try:\n            xfail(str(reason))\n        except xfail.Exception:\n            self._addexcinfo(sys.exc_info())\n\n    def addUnexpectedSuccess(\n        self,\n        testcase: unittest.TestCase,\n        reason: twisted.trial.unittest.Todo | None = None,\n    ) -> None:\n        msg = \"Unexpected success\"\n        if reason:\n            msg += f\": {reason.reason}\"\n        # Preserve unittest behaviour - fail the test. Explicitly not an XPASS.\n        try:\n            fail(msg, pytrace=False)\n        except fail.Exception:\n            self._addexcinfo(sys.exc_info())\n\n    def addSuccess(self, testcase: unittest.TestCase) -> None:\n        pass\n\n    def stopTest(self, testcase: unittest.TestCase) -> None:\n        pass\n\n    def addDuration(self, testcase: unittest.TestCase, elapsed: float) -> None:\n        pass\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n\n        testcase = self.instance\n        assert testcase is not None\n\n        maybe_wrap_pytest_function_for_tracing(self)\n\n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            testcase(result=self)\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = testcase.tearDown\n                setattr(testcase, \"tearDown\", lambda *args: None)\n\n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(testcase, self.name, self.obj)\n            try:\n                testcase(result=self)\n            finally:\n                delattr(testcase, self.name)\n\n    def _traceback_filter(\n        self, excinfo: _pytest._code.ExceptionInfo[BaseException]\n    ) -> _pytest._code.Traceback:\n        traceback = super()._traceback_filter(excinfo)\n        ntraceback = traceback.filter(\n            lambda x: not x.frame.f_globals.get(\"__unittest\"),\n        )\n        if not ntraceback:\n            ntraceback = traceback\n        return ntraceback\n\n\n@hookimpl(tryfirst=True)\ndef pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> None:\n    if isinstance(item, TestCaseFunction):\n        if item._excinfo:\n            call.excinfo = item._excinfo.pop(0)\n            try:\n                del call.result\n            except AttributeError:\n                pass\n\n    # Convert unittest.SkipTest to pytest.skip.\n    # This is actually only needed for nose, which reuses unittest.SkipTest for\n    # its own nose.SkipTest. For unittest TestCases, SkipTest is already\n    # handled internally, and doesn't reach here.\n    unittest = sys.modules.get(\"unittest\")\n    if unittest and call.excinfo and isinstance(call.excinfo.value, unittest.SkipTest):\n        excinfo = call.excinfo\n        call2 = CallInfo[None].from_call(\n            lambda: pytest.skip(str(excinfo.value)), call.when\n        )\n        call.excinfo = call2.excinfo\n\n\n# Twisted trial support.\nclassImplements_has_run = False\n\n\n@hookimpl(wrapper=True)\ndef pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:\n    if isinstance(item, TestCaseFunction) and \"twisted.trial.unittest\" in sys.modules:\n        ut: Any = sys.modules[\"twisted.python.failure\"]\n        global classImplements_has_run\n        Failure__init__ = ut.Failure.__init__\n        if not classImplements_has_run:\n            from twisted.trial.itrial import IReporter\n            from zope.interface import classImplements\n\n            classImplements(TestCaseFunction, IReporter)\n            classImplements_has_run = True\n\n        def excstore(\n            self, exc_value=None, exc_type=None, exc_tb=None, captureVars=None\n        ):\n            if exc_value is None:\n                self._rawexcinfo = sys.exc_info()\n            else:\n                if exc_type is None:\n                    exc_type = type(exc_value)\n                self._rawexcinfo = (exc_type, exc_value, exc_tb)\n            try:\n                Failure__init__(\n                    self, exc_value, exc_type, exc_tb, captureVars=captureVars\n                )\n            except TypeError:\n                Failure__init__(self, exc_value, exc_type, exc_tb)\n\n        ut.Failure.__init__ = excstore\n        try:\n            res = yield\n        finally:\n            ut.Failure.__init__ = Failure__init__\n    else:\n        res = yield\n    return res\n\n\ndef _is_skipped(obj) -> bool:\n    \"\"\"Return True if the given object has been marked with @unittest.skip.\"\"\"\n    return bool(getattr(obj, \"__unittest_skip__\", False))\n", "src/_pytest/recwarn.py": "# mypy: allow-untyped-defs\n\"\"\"Record warnings during test function execution.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pprint import pformat\nimport re\nfrom types import TracebackType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import final\nfrom typing import Generator\nfrom typing import Iterator\nfrom typing import overload\nfrom typing import Pattern\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\n\nif TYPE_CHECKING:\n    from typing_extensions import Self\n\nimport warnings\n\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import fixture\nfrom _pytest.outcomes import Exit\nfrom _pytest.outcomes import fail\n\n\nT = TypeVar(\"T\")\n\n\n@fixture\ndef recwarn() -> Generator[WarningsRecorder, None, None]:\n    \"\"\"Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions.\n\n    See https://docs.pytest.org/en/latest/how-to/capture-warnings.html for information\n    on warning categories.\n    \"\"\"\n    wrec = WarningsRecorder(_ispytest=True)\n    with wrec:\n        warnings.simplefilter(\"default\")\n        yield wrec\n\n\n@overload\ndef deprecated_call(*, match: str | Pattern[str] | None = ...) -> WarningsRecorder: ...\n\n\n@overload\ndef deprecated_call(func: Callable[..., T], *args: Any, **kwargs: Any) -> T: ...\n\n\ndef deprecated_call(\n    func: Callable[..., Any] | None = None, *args: Any, **kwargs: Any\n) -> WarningsRecorder | Any:\n    \"\"\"Assert that code produces a ``DeprecationWarning`` or ``PendingDeprecationWarning`` or ``FutureWarning``.\n\n    This function can be used as a context manager::\n\n        >>> import warnings\n        >>> def api_call_v2():\n        ...     warnings.warn('use v3 of this api', DeprecationWarning)\n        ...     return 200\n\n        >>> import pytest\n        >>> with pytest.deprecated_call():\n        ...    assert api_call_v2() == 200\n\n    It can also be used by passing a function and ``*args`` and ``**kwargs``,\n    in which case it will ensure calling ``func(*args, **kwargs)`` produces one of\n    the warnings types above. The return value is the return value of the function.\n\n    In the context manager form you may use the keyword argument ``match`` to assert\n    that the warning matches a text or regex.\n\n    The context manager produces a list of :class:`warnings.WarningMessage` objects,\n    one for each warning raised.\n    \"\"\"\n    __tracebackhide__ = True\n    if func is not None:\n        args = (func, *args)\n    return warns(\n        (DeprecationWarning, PendingDeprecationWarning, FutureWarning), *args, **kwargs\n    )\n\n\n@overload\ndef warns(\n    expected_warning: type[Warning] | tuple[type[Warning], ...] = ...,\n    *,\n    match: str | Pattern[str] | None = ...,\n) -> WarningsChecker: ...\n\n\n@overload\ndef warns(\n    expected_warning: type[Warning] | tuple[type[Warning], ...],\n    func: Callable[..., T],\n    *args: Any,\n    **kwargs: Any,\n) -> T: ...\n\n\ndef warns(\n    expected_warning: type[Warning] | tuple[type[Warning], ...] = Warning,\n    *args: Any,\n    match: str | Pattern[str] | None = None,\n    **kwargs: Any,\n) -> WarningsChecker | Any:\n    r\"\"\"Assert that code raises a particular class of warning.\n\n    Specifically, the parameter ``expected_warning`` can be a warning class or tuple\n    of warning classes, and the code inside the ``with`` block must issue at least one\n    warning of that class or classes.\n\n    This helper produces a list of :class:`warnings.WarningMessage` objects, one for\n    each warning emitted (regardless of whether it is an ``expected_warning`` or not).\n    Since pytest 8.0, unmatched warnings are also re-emitted when the context closes.\n\n    This function can be used as a context manager::\n\n        >>> import pytest\n        >>> with pytest.warns(RuntimeWarning):\n        ...    warnings.warn(\"my warning\", RuntimeWarning)\n\n    In the context manager form you may use the keyword argument ``match`` to assert\n    that the warning matches a text or regex::\n\n        >>> with pytest.warns(UserWarning, match='must be 0 or None'):\n        ...     warnings.warn(\"value must be 0 or None\", UserWarning)\n\n        >>> with pytest.warns(UserWarning, match=r'must be \\d+$'):\n        ...     warnings.warn(\"value must be 42\", UserWarning)\n\n        >>> with pytest.warns(UserWarning):  # catch re-emitted warning\n        ...     with pytest.warns(UserWarning, match=r'must be \\d+$'):\n        ...         warnings.warn(\"this is not here\", UserWarning)\n        Traceback (most recent call last):\n          ...\n        Failed: DID NOT WARN. No warnings of type ...UserWarning... were emitted...\n\n    **Using with** ``pytest.mark.parametrize``\n\n    When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests\n    such that some runs raise a warning and others do not.\n\n    This could be achieved in the same way as with exceptions, see\n    :ref:`parametrizing_conditional_raising` for an example.\n\n    \"\"\"\n    __tracebackhide__ = True\n    if not args:\n        if kwargs:\n            argnames = \", \".join(sorted(kwargs))\n            raise TypeError(\n                f\"Unexpected keyword arguments passed to pytest.warns: {argnames}\"\n                \"\\nUse context-manager form instead?\"\n            )\n        return WarningsChecker(expected_warning, match_expr=match, _ispytest=True)\n    else:\n        func = args[0]\n        if not callable(func):\n            raise TypeError(f\"{func!r} object (type: {type(func)}) must be callable\")\n        with WarningsChecker(expected_warning, _ispytest=True):\n            return func(*args[1:], **kwargs)\n\n\nclass WarningsRecorder(warnings.catch_warnings):  # type:ignore[type-arg]\n    \"\"\"A context manager to record raised warnings.\n\n    Each recorded warning is an instance of :class:`warnings.WarningMessage`.\n\n    Adapted from `warnings.catch_warnings`.\n\n    .. note::\n        ``DeprecationWarning`` and ``PendingDeprecationWarning`` are treated\n        differently; see :ref:`ensuring_function_triggers`.\n\n    \"\"\"\n\n    def __init__(self, *, _ispytest: bool = False) -> None:\n        check_ispytest(_ispytest)\n        super().__init__(record=True)\n        self._entered = False\n        self._list: list[warnings.WarningMessage] = []\n\n    @property\n    def list(self) -> list[warnings.WarningMessage]:\n        \"\"\"The list of recorded warnings.\"\"\"\n        return self._list\n\n    def __getitem__(self, i: int) -> warnings.WarningMessage:\n        \"\"\"Get a recorded warning by index.\"\"\"\n        return self._list[i]\n\n    def __iter__(self) -> Iterator[warnings.WarningMessage]:\n        \"\"\"Iterate through the recorded warnings.\"\"\"\n        return iter(self._list)\n\n    def __len__(self) -> int:\n        \"\"\"The number of recorded warnings.\"\"\"\n        return len(self._list)\n\n    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n    def clear(self) -> None:\n        \"\"\"Clear the list of recorded warnings.\"\"\"\n        self._list[:] = []\n\n    def __enter__(self) -> Self:\n        if self._entered:\n            __tracebackhide__ = True\n            raise RuntimeError(f\"Cannot enter {self!r} twice\")\n        _list = super().__enter__()\n        # record=True means it's None.\n        assert _list is not None\n        self._list = _list\n        warnings.simplefilter(\"always\")\n        return self\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        if not self._entered:\n            __tracebackhide__ = True\n            raise RuntimeError(f\"Cannot exit {self!r} without entering first\")\n\n        super().__exit__(exc_type, exc_val, exc_tb)\n\n        # Built-in catch_warnings does not reset entered state so we do it\n        # manually here for this context manager to become reusable.\n        self._entered = False\n\n\n@final\nclass WarningsChecker(WarningsRecorder):\n    def __init__(\n        self,\n        expected_warning: type[Warning] | tuple[type[Warning], ...] = Warning,\n        match_expr: str | Pattern[str] | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        super().__init__(_ispytest=True)\n\n        msg = \"exceptions must be derived from Warning, not %s\"\n        if isinstance(expected_warning, tuple):\n            for exc in expected_warning:\n                if not issubclass(exc, Warning):\n                    raise TypeError(msg % type(exc))\n            expected_warning_tup = expected_warning\n        elif isinstance(expected_warning, type) and issubclass(\n            expected_warning, Warning\n        ):\n            expected_warning_tup = (expected_warning,)\n        else:\n            raise TypeError(msg % type(expected_warning))\n\n        self.expected_warning = expected_warning_tup\n        self.match_expr = match_expr\n\n    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        super().__exit__(exc_type, exc_val, exc_tb)\n\n        __tracebackhide__ = True\n\n        # BaseExceptions like pytest.{skip,fail,xfail,exit} or Ctrl-C within\n        # pytest.warns should *not* trigger \"DID NOT WARN\" and get suppressed\n        # when the warning doesn't happen. Control-flow exceptions should always\n        # propagate.\n        if exc_val is not None and (\n            not isinstance(exc_val, Exception)\n            # Exit is an Exception, not a BaseException, for some reason.\n            or isinstance(exc_val, Exit)\n        ):\n            return\n\n        def found_str() -> str:\n            return pformat([record.message for record in self], indent=2)\n\n        try:\n            if not any(issubclass(w.category, self.expected_warning) for w in self):\n                fail(\n                    f\"DID NOT WARN. No warnings of type {self.expected_warning} were emitted.\\n\"\n                    f\" Emitted warnings: {found_str()}.\"\n                )\n            elif not any(self.matches(w) for w in self):\n                fail(\n                    f\"DID NOT WARN. No warnings of type {self.expected_warning} matching the regex were emitted.\\n\"\n                    f\" Regex: {self.match_expr}\\n\"\n                    f\" Emitted warnings: {found_str()}.\"\n                )\n        finally:\n            # Whether or not any warnings matched, we want to re-emit all unmatched warnings.\n            for w in self:\n                if not self.matches(w):\n                    warnings.warn_explicit(\n                        message=w.message,\n                        category=w.category,\n                        filename=w.filename,\n                        lineno=w.lineno,\n                        module=w.__module__,\n                        source=w.source,\n                    )\n\n            # Currently in Python it is possible to pass other types than an\n            # `str` message when creating `Warning` instances, however this\n            # causes an exception when :func:`warnings.filterwarnings` is used\n            # to filter those warnings. See\n            # https://github.com/python/cpython/issues/103577 for a discussion.\n            # While this can be considered a bug in CPython, we put guards in\n            # pytest as the error message produced without this check in place\n            # is confusing (#10865).\n            for w in self:\n                if type(w.message) is not UserWarning:\n                    # If the warning was of an incorrect type then `warnings.warn()`\n                    # creates a UserWarning. Any other warning must have been specified\n                    # explicitly.\n                    continue\n                if not w.message.args:\n                    # UserWarning() without arguments must have been specified explicitly.\n                    continue\n                msg = w.message.args[0]\n                if isinstance(msg, str):\n                    continue\n                # It's possible that UserWarning was explicitly specified, and\n                # its first argument was not a string. But that case can't be\n                # distinguished from an invalid type.\n                raise TypeError(\n                    f\"Warning must be str or Warning, got {msg!r} (type {type(msg).__name__})\"\n                )\n", "src/_pytest/cacheprovider.py": "# mypy: allow-untyped-defs\n\"\"\"Implementation of the cache provider.\"\"\"\n\n# This plugin was not named \"cache\" to avoid conflicts with the external\n# pytest-cache version.\nfrom __future__ import annotations\n\nimport dataclasses\nimport errno\nimport json\nimport os\nfrom pathlib import Path\nimport tempfile\nfrom typing import final\nfrom typing import Generator\nfrom typing import Iterable\n\nfrom .pathlib import resolve_from_str\nfrom .pathlib import rm_rf\nfrom .reports import CollectReport\nfrom _pytest import nodes\nfrom _pytest._io import TerminalWriter\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config import hookimpl\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.main import Session\nfrom _pytest.nodes import Directory\nfrom _pytest.nodes import File\nfrom _pytest.reports import TestReport\n\n\nREADME_CONTENT = \"\"\"\\\n# pytest cache directory #\n\nThis directory contains data from the pytest's cache plugin,\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\n\n**Do not** commit this to version control.\n\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\n\"\"\"\n\nCACHEDIR_TAG_CONTENT = b\"\"\"\\\nSignature: 8a477f597d28d172789f06886806bc55\n# This file is a cache directory tag created by pytest.\n# For information about cache directory tags, see:\n#\thttps://bford.info/cachedir/spec.html\n\"\"\"\n\n\n@final\n@dataclasses.dataclass\nclass Cache:\n    \"\"\"Instance of the `cache` fixture.\"\"\"\n\n    _cachedir: Path = dataclasses.field(repr=False)\n    _config: Config = dataclasses.field(repr=False)\n\n    # Sub-directory under cache-dir for directories created by `mkdir()`.\n    _CACHE_PREFIX_DIRS = \"d\"\n\n    # Sub-directory under cache-dir for values created by `set()`.\n    _CACHE_PREFIX_VALUES = \"v\"\n\n    def __init__(\n        self, cachedir: Path, config: Config, *, _ispytest: bool = False\n    ) -> None:\n        check_ispytest(_ispytest)\n        self._cachedir = cachedir\n        self._config = config\n\n    @classmethod\n    def for_config(cls, config: Config, *, _ispytest: bool = False) -> Cache:\n        \"\"\"Create the Cache instance for a Config.\n\n        :meta private:\n        \"\"\"\n        check_ispytest(_ispytest)\n        cachedir = cls.cache_dir_from_config(config, _ispytest=True)\n        if config.getoption(\"cacheclear\") and cachedir.is_dir():\n            cls.clear_cache(cachedir, _ispytest=True)\n        return cls(cachedir, config, _ispytest=True)\n\n    @classmethod\n    def clear_cache(cls, cachedir: Path, _ispytest: bool = False) -> None:\n        \"\"\"Clear the sub-directories used to hold cached directories and values.\n\n        :meta private:\n        \"\"\"\n        check_ispytest(_ispytest)\n        for prefix in (cls._CACHE_PREFIX_DIRS, cls._CACHE_PREFIX_VALUES):\n            d = cachedir / prefix\n            if d.is_dir():\n                rm_rf(d)\n\n    @staticmethod\n    def cache_dir_from_config(config: Config, *, _ispytest: bool = False) -> Path:\n        \"\"\"Get the path to the cache directory for a Config.\n\n        :meta private:\n        \"\"\"\n        check_ispytest(_ispytest)\n        return resolve_from_str(config.getini(\"cache_dir\"), config.rootpath)\n\n    def warn(self, fmt: str, *, _ispytest: bool = False, **args: object) -> None:\n        \"\"\"Issue a cache warning.\n\n        :meta private:\n        \"\"\"\n        check_ispytest(_ispytest)\n        import warnings\n\n        from _pytest.warning_types import PytestCacheWarning\n\n        warnings.warn(\n            PytestCacheWarning(fmt.format(**args) if args else fmt),\n            self._config.hook,\n            stacklevel=3,\n        )\n\n    def _mkdir(self, path: Path) -> None:\n        self._ensure_cache_dir_and_supporting_files()\n        path.mkdir(exist_ok=True, parents=True)\n\n    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n    def _getvaluepath(self, key: str) -> Path:\n        return self._cachedir.joinpath(self._CACHE_PREFIX_VALUES, Path(key))\n\n    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n    def set(self, key: str, value: object) -> None:\n        \"\"\"Save value for the given key.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param value:\n            Must be of any combination of basic python types,\n            including nested types like lists of dictionaries.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            self._mkdir(path.parent)\n        except OSError as exc:\n            self.warn(\n                f\"could not create cache path {path}: {exc}\",\n                _ispytest=True,\n            )\n            return\n        data = json.dumps(value, ensure_ascii=False, indent=2)\n        try:\n            f = path.open(\"w\", encoding=\"UTF-8\")\n        except OSError as exc:\n            self.warn(\n                f\"cache could not write path {path}: {exc}\",\n                _ispytest=True,\n            )\n        else:\n            with f:\n                f.write(data)\n\n    def _ensure_cache_dir_and_supporting_files(self) -> None:\n        \"\"\"Create the cache dir and its supporting files.\"\"\"\n        if self._cachedir.is_dir():\n            return\n\n        self._cachedir.parent.mkdir(parents=True, exist_ok=True)\n        with tempfile.TemporaryDirectory(\n            prefix=\"pytest-cache-files-\",\n            dir=self._cachedir.parent,\n        ) as newpath:\n            path = Path(newpath)\n\n            # Reset permissions to the default, see #12308.\n            # Note: there's no way to get the current umask atomically, eek.\n            umask = os.umask(0o022)\n            os.umask(umask)\n            path.chmod(0o777 - umask)\n\n            with open(path.joinpath(\"README.md\"), \"x\", encoding=\"UTF-8\") as f:\n                f.write(README_CONTENT)\n            with open(path.joinpath(\".gitignore\"), \"x\", encoding=\"UTF-8\") as f:\n                f.write(\"# Created by pytest automatically.\\n*\\n\")\n            with open(path.joinpath(\"CACHEDIR.TAG\"), \"xb\") as f:\n                f.write(CACHEDIR_TAG_CONTENT)\n\n            try:\n                path.rename(self._cachedir)\n            except OSError as e:\n                # If 2 concurrent pytests both race to the rename, the loser\n                # gets \"Directory not empty\" from the rename. In this case,\n                # everything is handled so just continue (while letting the\n                # temporary directory be cleaned up).\n                if e.errno != errno.ENOTEMPTY:\n                    raise\n            else:\n                # Create a directory in place of the one we just moved so that\n                # `TemporaryDirectory`'s cleanup doesn't complain.\n                #\n                # TODO: pass ignore_cleanup_errors=True when we no longer support python < 3.10.\n                # See https://github.com/python/cpython/issues/74168. Note that passing\n                # delete=False would do the wrong thing in case of errors and isn't supported\n                # until python 3.12.\n                path.mkdir()\n\n\nclass LFPluginCollWrapper:\n    def __init__(self, lfplugin: LFPlugin) -> None:\n        self.lfplugin = lfplugin\n        self._collected_at_least_one_failure = False\n\n    @hookimpl(wrapper=True)\n    def pytest_make_collect_report(\n        self, collector: nodes.Collector\n    ) -> Generator[None, CollectReport, CollectReport]:\n        res = yield\n        if isinstance(collector, (Session, Directory)):\n            # Sort any lf-paths to the beginning.\n            lf_paths = self.lfplugin._last_failed_paths\n\n            # Use stable sort to prioritize last failed.\n            def sort_key(node: nodes.Item | nodes.Collector) -> bool:\n                return node.path in lf_paths\n\n            res.result = sorted(\n                res.result,\n                key=sort_key,\n                reverse=True,\n            )\n\n        elif isinstance(collector, File):\n            if collector.path in self.lfplugin._last_failed_paths:\n                result = res.result\n                lastfailed = self.lfplugin.lastfailed\n\n                # Only filter with known failures.\n                if not self._collected_at_least_one_failure:\n                    if not any(x.nodeid in lastfailed for x in result):\n                        return res\n                    self.lfplugin.config.pluginmanager.register(\n                        LFPluginCollSkipfiles(self.lfplugin), \"lfplugin-collskip\"\n                    )\n                    self._collected_at_least_one_failure = True\n\n                session = collector.session\n                result[:] = [\n                    x\n                    for x in result\n                    if x.nodeid in lastfailed\n                    # Include any passed arguments (not trivial to filter).\n                    or session.isinitpath(x.path)\n                    # Keep all sub-collectors.\n                    or isinstance(x, nodes.Collector)\n                ]\n\n        return res\n\n\nclass LFPluginCollSkipfiles:\n    def __init__(self, lfplugin: LFPlugin) -> None:\n        self.lfplugin = lfplugin\n\n    @hookimpl\n    def pytest_make_collect_report(\n        self, collector: nodes.Collector\n    ) -> CollectReport | None:\n        if isinstance(collector, File):\n            if collector.path not in self.lfplugin._last_failed_paths:\n                self.lfplugin._skipped_files += 1\n\n                return CollectReport(\n                    collector.nodeid, \"passed\", longrepr=None, result=[]\n                )\n        return None\n\n\nclass LFPlugin:\n    \"\"\"Plugin which implements the --lf (run last-failing) option.\"\"\"\n\n    def __init__(self, config: Config) -> None:\n        self.config = config\n        active_keys = \"lf\", \"failedfirst\"\n        self.active = any(config.getoption(key) for key in active_keys)\n        assert config.cache\n        self.lastfailed: dict[str, bool] = config.cache.get(\"cache/lastfailed\", {})\n        self._previously_failed_count: int | None = None\n        self._report_status: str | None = None\n        self._skipped_files = 0  # count skipped files during collection due to --lf\n\n        if config.getoption(\"lf\"):\n            self._last_failed_paths = self.get_last_failed_paths()\n            config.pluginmanager.register(\n                LFPluginCollWrapper(self), \"lfplugin-collwrapper\"\n            )\n\n    def get_last_failed_paths(self) -> set[Path]:\n        \"\"\"Return a set with all Paths of the previously failed nodeids and\n        their parents.\"\"\"\n        rootpath = self.config.rootpath\n        result = set()\n        for nodeid in self.lastfailed:\n            path = rootpath / nodeid.split(\"::\")[0]\n            result.add(path)\n            result.update(path.parents)\n        return {x for x in result if x.exists()}\n\n    def pytest_report_collectionfinish(self) -> str | None:\n        if self.active and self.config.getoption(\"verbose\") >= 0:\n            return f\"run-last-failure: {self._report_status}\"\n        return None\n\n    def pytest_runtest_logreport(self, report: TestReport) -> None:\n        if (report.when == \"call\" and report.passed) or report.skipped:\n            self.lastfailed.pop(report.nodeid, None)\n        elif report.failed:\n            self.lastfailed[report.nodeid] = True\n\n    def pytest_collectreport(self, report: CollectReport) -> None:\n        passed = report.outcome in (\"passed\", \"skipped\")\n        if passed:\n            if report.nodeid in self.lastfailed:\n                self.lastfailed.pop(report.nodeid)\n                self.lastfailed.update((item.nodeid, True) for item in report.result)\n        else:\n            self.lastfailed[report.nodeid] = True\n\n    @hookimpl(wrapper=True, tryfirst=True)\n    def pytest_collection_modifyitems(\n        self, config: Config, items: list[nodes.Item]\n    ) -> Generator[None, None, None]:\n        res = yield\n\n        if not self.active:\n            return res\n\n        if self.lastfailed:\n            previously_failed = []\n            previously_passed = []\n            for item in items:\n                if item.nodeid in self.lastfailed:\n                    previously_failed.append(item)\n                else:\n                    previously_passed.append(item)\n            self._previously_failed_count = len(previously_failed)\n\n            if not previously_failed:\n                # Running a subset of all tests with recorded failures\n                # only outside of it.\n                self._report_status = \"%d known failures not in selected tests\" % (\n                    len(self.lastfailed),\n                )\n            else:\n                if self.config.getoption(\"lf\"):\n                    items[:] = previously_failed\n                    config.hook.pytest_deselected(items=previously_passed)\n                else:  # --failedfirst\n                    items[:] = previously_failed + previously_passed\n\n                noun = \"failure\" if self._previously_failed_count == 1 else \"failures\"\n                suffix = \" first\" if self.config.getoption(\"failedfirst\") else \"\"\n                self._report_status = (\n                    f\"rerun previous {self._previously_failed_count} {noun}{suffix}\"\n                )\n\n            if self._skipped_files > 0:\n                files_noun = \"file\" if self._skipped_files == 1 else \"files\"\n                self._report_status += f\" (skipped {self._skipped_files} {files_noun})\"\n        else:\n            self._report_status = \"no previously failed tests, \"\n            if self.config.getoption(\"last_failed_no_failures\") == \"none\":\n                self._report_status += \"deselecting all items.\"\n                config.hook.pytest_deselected(items=items[:])\n                items[:] = []\n            else:\n                self._report_status += \"not deselecting items.\"\n\n        return res\n\n    def pytest_sessionfinish(self, session: Session) -> None:\n        config = self.config\n        if config.getoption(\"cacheshow\") or hasattr(config, \"workerinput\"):\n            return\n\n        assert config.cache is not None\n        saved_lastfailed = config.cache.get(\"cache/lastfailed\", {})\n        if saved_lastfailed != self.lastfailed:\n            config.cache.set(\"cache/lastfailed\", self.lastfailed)\n\n\nclass NFPlugin:\n    \"\"\"Plugin which implements the --nf (run new-first) option.\"\"\"\n\n    def __init__(self, config: Config) -> None:\n        self.config = config\n        self.active = config.option.newfirst\n        assert config.cache is not None\n        self.cached_nodeids = set(config.cache.get(\"cache/nodeids\", []))\n\n    @hookimpl(wrapper=True, tryfirst=True)\n    def pytest_collection_modifyitems(\n        self, items: list[nodes.Item]\n    ) -> Generator[None, None, None]:\n        res = yield\n\n        if self.active:\n            new_items: dict[str, nodes.Item] = {}\n            other_items: dict[str, nodes.Item] = {}\n            for item in items:\n                if item.nodeid not in self.cached_nodeids:\n                    new_items[item.nodeid] = item\n                else:\n                    other_items[item.nodeid] = item\n\n            items[:] = self._get_increasing_order(\n                new_items.values()\n            ) + self._get_increasing_order(other_items.values())\n            self.cached_nodeids.update(new_items)\n        else:\n            self.cached_nodeids.update(item.nodeid for item in items)\n\n        return res\n\n    def _get_increasing_order(self, items: Iterable[nodes.Item]) -> list[nodes.Item]:\n        return sorted(items, key=lambda item: item.path.stat().st_mtime, reverse=True)\n\n    def pytest_sessionfinish(self) -> None:\n        config = self.config\n        if config.getoption(\"cacheshow\") or hasattr(config, \"workerinput\"):\n            return\n\n        if config.getoption(\"collectonly\"):\n            return\n\n        assert config.cache is not None\n        config.cache.set(\"cache/nodeids\", sorted(self.cached_nodeids))\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group.addoption(\n        \"--lf\",\n        \"--last-failed\",\n        action=\"store_true\",\n        dest=\"lf\",\n        help=\"Rerun only the tests that failed \"\n        \"at the last run (or all if none failed)\",\n    )\n    group.addoption(\n        \"--ff\",\n        \"--failed-first\",\n        action=\"store_true\",\n        dest=\"failedfirst\",\n        help=\"Run all tests, but run the last failures first. \"\n        \"This may re-order tests and thus lead to \"\n        \"repeated fixture setup/teardown.\",\n    )\n    group.addoption(\n        \"--nf\",\n        \"--new-first\",\n        action=\"store_true\",\n        dest=\"newfirst\",\n        help=\"Run tests from new files first, then the rest of the tests \"\n        \"sorted by file mtime\",\n    )\n    group.addoption(\n        \"--cache-show\",\n        action=\"append\",\n        nargs=\"?\",\n        dest=\"cacheshow\",\n        help=(\n            \"Show cache contents, don't perform collection or tests. \"\n            \"Optional argument: glob (default: '*').\"\n        ),\n    )\n    group.addoption(\n        \"--cache-clear\",\n        action=\"store_true\",\n        dest=\"cacheclear\",\n        help=\"Remove all cache contents at start of test run\",\n    )\n    cache_dir_default = \".pytest_cache\"\n    if \"TOX_ENV_DIR\" in os.environ:\n        cache_dir_default = os.path.join(os.environ[\"TOX_ENV_DIR\"], cache_dir_default)\n    parser.addini(\"cache_dir\", default=cache_dir_default, help=\"Cache directory path\")\n    group.addoption(\n        \"--lfnf\",\n        \"--last-failed-no-failures\",\n        action=\"store\",\n        dest=\"last_failed_no_failures\",\n        choices=(\"all\", \"none\"),\n        default=\"all\",\n        help=\"With ``--lf``, determines whether to execute tests when there \"\n        \"are no previously (known) failures or when no \"\n        \"cached ``lastfailed`` data was found. \"\n        \"``all`` (the default) runs the full test suite again. \"\n        \"``none`` just emits a message about no known failures and exits successfully.\",\n    )\n\n\ndef pytest_cmdline_main(config: Config) -> int | ExitCode | None:\n    if config.option.cacheshow and not config.option.help:\n        from _pytest.main import wrap_session\n\n        return wrap_session(config, cacheshow)\n    return None\n\n\n@hookimpl(tryfirst=True)\ndef pytest_configure(config: Config) -> None:\n    config.cache = Cache.for_config(config, _ispytest=True)\n    config.pluginmanager.register(LFPlugin(config), \"lfplugin\")\n    config.pluginmanager.register(NFPlugin(config), \"nfplugin\")\n\n\n@fixture\ndef cache(request: FixtureRequest) -> Cache:\n    \"\"\"Return a cache object that can persist state between testing sessions.\n\n    cache.get(key, default)\n    cache.set(key, value)\n\n    Keys must be ``/`` separated strings, where the first part is usually the\n    name of your plugin or application to avoid clashes with other cache users.\n\n    Values can be any object handled by the json stdlib module.\n    \"\"\"\n    assert request.config.cache is not None\n    return request.config.cache\n\n\ndef pytest_report_header(config: Config) -> str | None:\n    \"\"\"Display cachedir with --cache-show and if non-default.\"\"\"\n    if config.option.verbose > 0 or config.getini(\"cache_dir\") != \".pytest_cache\":\n        assert config.cache is not None\n        cachedir = config.cache._cachedir\n        # TODO: evaluate generating upward relative paths\n        # starting with .., ../.. if sensible\n\n        try:\n            displaypath = cachedir.relative_to(config.rootpath)\n        except ValueError:\n            displaypath = cachedir\n        return f\"cachedir: {displaypath}\"\n    return None\n\n\ndef cacheshow(config: Config, session: Session) -> int:\n    from pprint import pformat\n\n    assert config.cache is not None\n\n    tw = TerminalWriter()\n    tw.line(\"cachedir: \" + str(config.cache._cachedir))\n    if not config.cache._cachedir.is_dir():\n        tw.line(\"cache is empty\")\n        return 0\n\n    glob = config.option.cacheshow[0]\n    if glob is None:\n        glob = \"*\"\n\n    dummy = object()\n    basedir = config.cache._cachedir\n    vdir = basedir / Cache._CACHE_PREFIX_VALUES\n    tw.sep(\"-\", f\"cache values for {glob!r}\")\n    for valpath in sorted(x for x in vdir.rglob(glob) if x.is_file()):\n        key = str(valpath.relative_to(vdir))\n        val = config.cache.get(key, dummy)\n        if val is dummy:\n            tw.line(f\"{key} contains unreadable content, will be ignored\")\n        else:\n            tw.line(f\"{key} contains:\")\n            for line in pformat(val).splitlines():\n                tw.line(\"  \" + line)\n\n    ddir = basedir / Cache._CACHE_PREFIX_DIRS\n    if ddir.is_dir():\n        contents = sorted(ddir.rglob(glob))\n        tw.sep(\"-\", f\"cache directories for {glob!r}\")\n        for p in contents:\n            # if p.is_dir():\n            #    print(\"%s/\" % p.relative_to(basedir))\n            if p.is_file():\n                key = str(p.relative_to(basedir))\n                tw.line(f\"{key} is a file of length {p.stat().st_size:d}\")\n    return 0\n", "src/_pytest/hookspec.py": "# mypy: allow-untyped-defs\n# ruff: noqa: T100\n\"\"\"Hook specifications for pytest plugins which are invoked by pytest itself\nand by builtin plugins.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import Any\nfrom typing import Mapping\nfrom typing import Sequence\nfrom typing import TYPE_CHECKING\n\nfrom pluggy import HookspecMarker\n\nfrom .deprecated import HOOK_LEGACY_PATH_ARG\n\n\nif TYPE_CHECKING:\n    import pdb\n    from typing import Literal\n    import warnings\n\n    from _pytest._code.code import ExceptionInfo\n    from _pytest._code.code import ExceptionRepr\n    from _pytest.compat import LEGACY_PATH\n    from _pytest.config import _PluggyPlugin\n    from _pytest.config import Config\n    from _pytest.config import ExitCode\n    from _pytest.config import PytestPluginManager\n    from _pytest.config.argparsing import Parser\n    from _pytest.fixtures import FixtureDef\n    from _pytest.fixtures import SubRequest\n    from _pytest.main import Session\n    from _pytest.nodes import Collector\n    from _pytest.nodes import Item\n    from _pytest.outcomes import Exit\n    from _pytest.python import Class\n    from _pytest.python import Function\n    from _pytest.python import Metafunc\n    from _pytest.python import Module\n    from _pytest.reports import CollectReport\n    from _pytest.reports import TestReport\n    from _pytest.runner import CallInfo\n    from _pytest.terminal import TerminalReporter\n    from _pytest.terminal import TestShortLogReport\n\n\nhookspec = HookspecMarker(\"pytest\")\n\n# -------------------------------------------------------------------------\n# Initialization hooks called for every plugin\n# -------------------------------------------------------------------------\n\n\n@hookspec(historic=True)\ndef pytest_addhooks(pluginmanager: PytestPluginManager) -> None:\n    \"\"\"Called at plugin registration time to allow adding new hooks via a call to\n    :func:`pluginmanager.add_hookspecs(module_or_class, prefix) <pytest.PytestPluginManager.add_hookspecs>`.\n\n    :param pluginmanager: The pytest plugin manager.\n\n    .. note::\n        This hook is incompatible with hook wrappers.\n\n    Use in conftest plugins\n    =======================\n\n    If a conftest plugin implements this hook, it will be called immediately\n    when the conftest is registered.\n    \"\"\"\n\n\n@hookspec(historic=True)\ndef pytest_plugin_registered(\n    plugin: _PluggyPlugin,\n    plugin_name: str,\n    manager: PytestPluginManager,\n) -> None:\n    \"\"\"A new pytest plugin got registered.\n\n    :param plugin: The plugin module or instance.\n    :param plugin_name: The name by which the plugin is registered.\n    :param manager: The pytest plugin manager.\n\n    .. note::\n        This hook is incompatible with hook wrappers.\n\n    Use in conftest plugins\n    =======================\n\n    If a conftest plugin implements this hook, it will be called immediately\n    when the conftest is registered, once for each plugin registered thus far\n    (including itself!), and for all plugins thereafter when they are\n    registered.\n    \"\"\"\n\n\n@hookspec(historic=True)\ndef pytest_addoption(parser: Parser, pluginmanager: PytestPluginManager) -> None:\n    \"\"\"Register argparse-style options and ini-style config values,\n    called once at the beginning of a test run.\n\n    :param parser:\n        To add command line options, call\n        :py:func:`parser.addoption(...) <pytest.Parser.addoption>`.\n        To add ini-file values call :py:func:`parser.addini(...)\n        <pytest.Parser.addini>`.\n\n    :param pluginmanager:\n        The pytest plugin manager, which can be used to install :py:func:`~pytest.hookspec`'s\n        or :py:func:`~pytest.hookimpl`'s and allow one plugin to call another plugin's hooks\n        to change how command line options are added.\n\n    Options can later be accessed through the\n    :py:class:`config <pytest.Config>` object, respectively:\n\n    - :py:func:`config.getoption(name) <pytest.Config.getoption>` to\n      retrieve the value of a command line option.\n\n    - :py:func:`config.getini(name) <pytest.Config.getini>` to retrieve\n      a value read from an ini-style file.\n\n    The config object is passed around on many internal objects via the ``.config``\n    attribute or can be retrieved as the ``pytestconfig`` fixture.\n\n    .. note::\n        This hook is incompatible with hook wrappers.\n\n    Use in conftest plugins\n    =======================\n\n    If a conftest plugin implements this hook, it will be called immediately\n    when the conftest is registered.\n\n    This hook is only called for :ref:`initial conftests <pluginorder>`.\n    \"\"\"\n\n\n@hookspec(historic=True)\ndef pytest_configure(config: Config) -> None:\n    \"\"\"Allow plugins and conftest files to perform initial configuration.\n\n    .. note::\n        This hook is incompatible with hook wrappers.\n\n    :param config: The pytest config object.\n\n    Use in conftest plugins\n    =======================\n\n    This hook is called for every :ref:`initial conftest <pluginorder>` file\n    after command line options have been parsed. After that, the hook is called\n    for other conftest files as they are registered.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# Bootstrapping hooks called for plugins registered early enough:\n# internal and 3rd party plugins.\n# -------------------------------------------------------------------------\n\n\n@hookspec(firstresult=True)\ndef pytest_cmdline_parse(\n    pluginmanager: PytestPluginManager, args: list[str]\n) -> Config | None:\n    \"\"\"Return an initialized :class:`~pytest.Config`, parsing the specified args.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    .. note::\n        This hook is only called for plugin classes passed to the\n        ``plugins`` arg when using `pytest.main`_ to perform an in-process\n        test run.\n\n    :param pluginmanager: The pytest plugin manager.\n    :param args: List of arguments passed on the command line.\n    :returns: A pytest config object.\n\n    Use in conftest plugins\n    =======================\n\n    This hook is not called for conftest files.\n    \"\"\"\n\n\ndef pytest_load_initial_conftests(\n    early_config: Config, parser: Parser, args: list[str]\n) -> None:\n    \"\"\"Called to implement the loading of :ref:`initial conftest files\n    <pluginorder>` ahead of command line option parsing.\n\n    :param early_config: The pytest config object.\n    :param args: Arguments passed on the command line.\n    :param parser: To add command line options.\n\n    Use in conftest plugins\n    =======================\n\n    This hook is not called for conftest files.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_cmdline_main(config: Config) -> ExitCode | int | None:\n    \"\"\"Called for performing the main command line action.\n\n    The default implementation will invoke the configure hooks and\n    :hook:`pytest_runtestloop`.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param config: The pytest config object.\n    :returns: The exit code.\n\n    Use in conftest plugins\n    =======================\n\n    This hook is only called for :ref:`initial conftests <pluginorder>`.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# collection hooks\n# -------------------------------------------------------------------------\n\n\n@hookspec(firstresult=True)\ndef pytest_collection(session: Session) -> object | None:\n    \"\"\"Perform the collection phase for the given session.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n    The return value is not used, but only stops further processing.\n\n    The default collection phase is this (see individual hooks for full details):\n\n    1. Starting from ``session`` as the initial collector:\n\n      1. ``pytest_collectstart(collector)``\n      2. ``report = pytest_make_collect_report(collector)``\n      3. ``pytest_exception_interact(collector, call, report)`` if an interactive exception occurred\n      4. For each collected node:\n\n        1. If an item, ``pytest_itemcollected(item)``\n        2. If a collector, recurse into it.\n\n      5. ``pytest_collectreport(report)``\n\n    2. ``pytest_collection_modifyitems(session, config, items)``\n\n      1. ``pytest_deselected(items)`` for any deselected items (may be called multiple times)\n\n    3. ``pytest_collection_finish(session)``\n    4. Set ``session.items`` to the list of collected items\n    5. Set ``session.testscollected`` to the number of collected items\n\n    You can implement this hook to only perform some action before collection,\n    for example the terminal plugin uses it to start displaying the collection\n    counter (and returns `None`).\n\n    :param session: The pytest session object.\n\n    Use in conftest plugins\n    =======================\n\n    This hook is only called for :ref:`initial conftests <pluginorder>`.\n    \"\"\"\n\n\ndef pytest_collection_modifyitems(\n    session: Session, config: Config, items: list[Item]\n) -> None:\n    \"\"\"Called after collection has been performed. May filter or re-order\n    the items in-place.\n\n    :param session: The pytest session object.\n    :param config: The pytest config object.\n    :param items: List of item objects.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\ndef pytest_collection_finish(session: Session) -> None:\n    \"\"\"Called after collection has been performed and modified.\n\n    :param session: The pytest session object.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\n@hookspec(\n    firstresult=True,\n    warn_on_impl_args={\n        \"path\": HOOK_LEGACY_PATH_ARG.format(\n            pylib_path_arg=\"path\", pathlib_path_arg=\"collection_path\"\n        ),\n    },\n)\ndef pytest_ignore_collect(\n    collection_path: Path, path: LEGACY_PATH, config: Config\n) -> bool | None:\n    \"\"\"Return ``True`` to ignore this path for collection.\n\n    Return ``None`` to let other plugins ignore the path for collection.\n\n    Returning ``False`` will forcefully *not* ignore this path for collection,\n    without giving a chance for other plugins to ignore this path.\n\n    This hook is consulted for all files and directories prior to calling\n    more specific hooks.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param collection_path: The path to analyze.\n    :type collection_path: pathlib.Path\n    :param path: The path to analyze (deprecated).\n    :param config: The pytest config object.\n\n    .. versionchanged:: 7.0.0\n        The ``collection_path`` parameter was added as a :class:`pathlib.Path`\n        equivalent of the ``path`` parameter. The ``path`` parameter\n        has been deprecated.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given collection path, only\n    conftest files in parent directories of the collection path are consulted\n    (if the path is a directory, its own conftest file is *not* consulted - a\n    directory cannot ignore itself!).\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_collect_directory(path: Path, parent: Collector) -> Collector | None:\n    \"\"\"Create a :class:`~pytest.Collector` for the given directory, or None if\n    not relevant.\n\n    .. versionadded:: 8.0\n\n    For best results, the returned collector should be a subclass of\n    :class:`~pytest.Directory`, but this is not required.\n\n    The new node needs to have the specified ``parent`` as a parent.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param path: The path to analyze.\n    :type path: pathlib.Path\n\n    See :ref:`custom directory collectors` for a simple example of use of this\n    hook.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given collection path, only\n    conftest files in parent directories of the collection path are consulted\n    (if the path is a directory, its own conftest file is *not* consulted - a\n    directory cannot collect itself!).\n    \"\"\"\n\n\n@hookspec(\n    warn_on_impl_args={\n        \"path\": HOOK_LEGACY_PATH_ARG.format(\n            pylib_path_arg=\"path\", pathlib_path_arg=\"file_path\"\n        ),\n    },\n)\ndef pytest_collect_file(\n    file_path: Path, path: LEGACY_PATH, parent: Collector\n) -> Collector | None:\n    \"\"\"Create a :class:`~pytest.Collector` for the given path, or None if not relevant.\n\n    For best results, the returned collector should be a subclass of\n    :class:`~pytest.File`, but this is not required.\n\n    The new node needs to have the specified ``parent`` as a parent.\n\n    :param file_path: The path to analyze.\n    :type file_path: pathlib.Path\n    :param path: The path to collect (deprecated).\n\n    .. versionchanged:: 7.0.0\n        The ``file_path`` parameter was added as a :class:`pathlib.Path`\n        equivalent of the ``path`` parameter. The ``path`` parameter\n        has been deprecated.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given file path, only\n    conftest files in parent directories of the file path are consulted.\n    \"\"\"\n\n\n# logging hooks for collection\n\n\ndef pytest_collectstart(collector: Collector) -> None:\n    \"\"\"Collector starts collecting.\n\n    :param collector:\n        The collector.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given collector, only\n    conftest files in the collector's directory and its parent directories are\n    consulted.\n    \"\"\"\n\n\ndef pytest_itemcollected(item: Item) -> None:\n    \"\"\"We just collected a test item.\n\n    :param item:\n        The item.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\ndef pytest_collectreport(report: CollectReport) -> None:\n    \"\"\"Collector finished collecting.\n\n    :param report:\n        The collect report.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given collector, only\n    conftest files in the collector's directory and its parent directories are\n    consulted.\n    \"\"\"\n\n\ndef pytest_deselected(items: Sequence[Item]) -> None:\n    \"\"\"Called for deselected test items, e.g. by keyword.\n\n    May be called multiple times.\n\n    :param items:\n        The items.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_make_collect_report(collector: Collector) -> CollectReport | None:\n    \"\"\"Perform :func:`collector.collect() <pytest.Collector.collect>` and return\n    a :class:`~pytest.CollectReport`.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param collector:\n        The collector.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given collector, only\n    conftest files in the collector's directory and its parent directories are\n    consulted.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# Python test function related hooks\n# -------------------------------------------------------------------------\n\n\n@hookspec(\n    firstresult=True,\n    warn_on_impl_args={\n        \"path\": HOOK_LEGACY_PATH_ARG.format(\n            pylib_path_arg=\"path\", pathlib_path_arg=\"module_path\"\n        ),\n    },\n)\ndef pytest_pycollect_makemodule(\n    module_path: Path, path: LEGACY_PATH, parent\n) -> Module | None:\n    \"\"\"Return a :class:`pytest.Module` collector or None for the given path.\n\n    This hook will be called for each matching test module path.\n    The :hook:`pytest_collect_file` hook needs to be used if you want to\n    create test modules for files that do not match as a test module.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param module_path: The path of the module to collect.\n    :type module_path: pathlib.Path\n    :param path: The path of the module to collect (deprecated).\n\n    .. versionchanged:: 7.0.0\n        The ``module_path`` parameter was added as a :class:`pathlib.Path`\n        equivalent of the ``path`` parameter.\n\n        The ``path`` parameter has been deprecated in favor of ``fspath``.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given parent collector,\n    only conftest files in the collector's directory and its parent directories\n    are consulted.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_pycollect_makeitem(\n    collector: Module | Class, name: str, obj: object\n) -> None | Item | Collector | list[Item | Collector]:\n    \"\"\"Return a custom item/collector for a Python object in a module, or None.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param collector:\n        The module/class collector.\n    :param name:\n        The name of the object in the module/class.\n    :param obj:\n        The object.\n    :returns:\n        The created items/collectors.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given collector, only\n    conftest files in the collector's directory and its parent directories\n    are consulted.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_pyfunc_call(pyfuncitem: Function) -> object | None:\n    \"\"\"Call underlying test function.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param pyfuncitem:\n        The function item.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only\n    conftest files in the item's directory and its parent directories\n    are consulted.\n    \"\"\"\n\n\ndef pytest_generate_tests(metafunc: Metafunc) -> None:\n    \"\"\"Generate (multiple) parametrized calls to a test function.\n\n    :param metafunc:\n        The :class:`~pytest.Metafunc` helper for the test function.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given function definition,\n    only conftest files in the functions's directory and its parent directories\n    are consulted.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_make_parametrize_id(config: Config, val: object, argname: str) -> str | None:\n    \"\"\"Return a user-friendly string representation of the given ``val``\n    that will be used by @pytest.mark.parametrize calls, or None if the hook\n    doesn't know about ``val``.\n\n    The parameter name is available as ``argname``, if required.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    :param config: The pytest config object.\n    :param val: The parametrized value.\n    :param argname: The automatic parameter name produced by pytest.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# runtest related hooks\n# -------------------------------------------------------------------------\n\n\n@hookspec(firstresult=True)\ndef pytest_runtestloop(session: Session) -> object | None:\n    \"\"\"Perform the main runtest loop (after collection finished).\n\n    The default hook implementation performs the runtest protocol for all items\n    collected in the session (``session.items``), unless the collection failed\n    or the ``collectonly`` pytest option is set.\n\n    If at any point :py:func:`pytest.exit` is called, the loop is\n    terminated immediately.\n\n    If at any point ``session.shouldfail`` or ``session.shouldstop`` are set, the\n    loop is terminated after the runtest protocol for the current item is finished.\n\n    :param session: The pytest session object.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n    The return value is not used, but only stops further processing.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_runtest_protocol(item: Item, nextitem: Item | None) -> object | None:\n    \"\"\"Perform the runtest protocol for a single test item.\n\n    The default runtest protocol is this (see individual hooks for full details):\n\n    - ``pytest_runtest_logstart(nodeid, location)``\n\n    - Setup phase:\n        - ``call = pytest_runtest_setup(item)`` (wrapped in ``CallInfo(when=\"setup\")``)\n        - ``report = pytest_runtest_makereport(item, call)``\n        - ``pytest_runtest_logreport(report)``\n        - ``pytest_exception_interact(call, report)`` if an interactive exception occurred\n\n    - Call phase, if the setup passed and the ``setuponly`` pytest option is not set:\n        - ``call = pytest_runtest_call(item)`` (wrapped in ``CallInfo(when=\"call\")``)\n        - ``report = pytest_runtest_makereport(item, call)``\n        - ``pytest_runtest_logreport(report)``\n        - ``pytest_exception_interact(call, report)`` if an interactive exception occurred\n\n    - Teardown phase:\n        - ``call = pytest_runtest_teardown(item, nextitem)`` (wrapped in ``CallInfo(when=\"teardown\")``)\n        - ``report = pytest_runtest_makereport(item, call)``\n        - ``pytest_runtest_logreport(report)``\n        - ``pytest_exception_interact(call, report)`` if an interactive exception occurred\n\n    - ``pytest_runtest_logfinish(nodeid, location)``\n\n    :param item: Test item for which the runtest protocol is performed.\n    :param nextitem: The scheduled-to-be-next test item (or None if this is the end my friend).\n\n    Stops at first non-None result, see :ref:`firstresult`.\n    The return value is not used, but only stops further processing.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook.\n    \"\"\"\n\n\ndef pytest_runtest_logstart(nodeid: str, location: tuple[str, int | None, str]) -> None:\n    \"\"\"Called at the start of running the runtest protocol for a single item.\n\n    See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.\n\n    :param nodeid: Full node ID of the item.\n    :param location: A tuple of ``(filename, lineno, testname)``\n        where ``filename`` is a file path relative to ``config.rootpath``\n        and ``lineno`` is 0-based.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\ndef pytest_runtest_logfinish(\n    nodeid: str, location: tuple[str, int | None, str]\n) -> None:\n    \"\"\"Called at the end of running the runtest protocol for a single item.\n\n    See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.\n\n    :param nodeid: Full node ID of the item.\n    :param location: A tuple of ``(filename, lineno, testname)``\n        where ``filename`` is a file path relative to ``config.rootpath``\n        and ``lineno`` is 0-based.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\ndef pytest_runtest_setup(item: Item) -> None:\n    \"\"\"Called to perform the setup phase for a test item.\n\n    The default implementation runs ``setup()`` on ``item`` and all of its\n    parents (which haven't been setup yet). This includes obtaining the\n    values of fixtures required by the item (which haven't been obtained\n    yet).\n\n    :param item:\n        The item.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\ndef pytest_runtest_call(item: Item) -> None:\n    \"\"\"Called to run the test for test item (the call phase).\n\n    The default implementation calls ``item.runtest()``.\n\n    :param item:\n        The item.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\ndef pytest_runtest_teardown(item: Item, nextitem: Item | None) -> None:\n    \"\"\"Called to perform the teardown phase for a test item.\n\n    The default implementation runs the finalizers and calls ``teardown()``\n    on ``item`` and all of its parents (which need to be torn down). This\n    includes running the teardown phase of fixtures required by the item (if\n    they go out of scope).\n\n    :param item:\n        The item.\n    :param nextitem:\n        The scheduled-to-be-next test item (None if no further test item is\n        scheduled). This argument is used to perform exact teardowns, i.e.\n        calling just enough finalizers so that nextitem only needs to call\n        setup functions.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> TestReport | None:\n    \"\"\"Called to create a :class:`~pytest.TestReport` for each of\n    the setup, call and teardown runtest phases of a test item.\n\n    See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.\n\n    :param item: The item.\n    :param call: The :class:`~pytest.CallInfo` for the phase.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\ndef pytest_runtest_logreport(report: TestReport) -> None:\n    \"\"\"Process the :class:`~pytest.TestReport` produced for each\n    of the setup, call and teardown runtest phases of an item.\n\n    See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_report_to_serializable(\n    config: Config,\n    report: CollectReport | TestReport,\n) -> dict[str, Any] | None:\n    \"\"\"Serialize the given report object into a data structure suitable for\n    sending over the wire, e.g. converted to JSON.\n\n    :param config: The pytest config object.\n    :param report: The report.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. The exact details may depend\n    on the plugin which calls the hook.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_report_from_serializable(\n    config: Config,\n    data: dict[str, Any],\n) -> CollectReport | TestReport | None:\n    \"\"\"Restore a report object previously serialized with\n    :hook:`pytest_report_to_serializable`.\n\n    :param config: The pytest config object.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. The exact details may depend\n    on the plugin which calls the hook.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# Fixture related hooks\n# -------------------------------------------------------------------------\n\n\n@hookspec(firstresult=True)\ndef pytest_fixture_setup(\n    fixturedef: FixtureDef[Any], request: SubRequest\n) -> object | None:\n    \"\"\"Perform fixture setup execution.\n\n    :param fixturedef:\n        The fixture definition object.\n    :param request:\n        The fixture request object.\n    :returns:\n        The return value of the call to the fixture function.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    .. note::\n        If the fixture function returns None, other implementations of\n        this hook function will continue to be called, according to the\n        behavior of the :ref:`firstresult` option.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given fixture, only\n    conftest files in the fixture scope's directory and its parent directories\n    are consulted.\n    \"\"\"\n\n\ndef pytest_fixture_post_finalizer(\n    fixturedef: FixtureDef[Any], request: SubRequest\n) -> None:\n    \"\"\"Called after fixture teardown, but before the cache is cleared, so\n    the fixture result ``fixturedef.cached_result`` is still available (not\n    ``None``).\n\n    :param fixturedef:\n        The fixture definition object.\n    :param request:\n        The fixture request object.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given fixture, only\n    conftest files in the fixture scope's directory and its parent directories\n    are consulted.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# test session related hooks\n# -------------------------------------------------------------------------\n\n\ndef pytest_sessionstart(session: Session) -> None:\n    \"\"\"Called after the ``Session`` object has been created and before performing collection\n    and entering the run test loop.\n\n    :param session: The pytest session object.\n\n    Use in conftest plugins\n    =======================\n\n    This hook is only called for :ref:`initial conftests <pluginorder>`.\n    \"\"\"\n\n\ndef pytest_sessionfinish(\n    session: Session,\n    exitstatus: int | ExitCode,\n) -> None:\n    \"\"\"Called after whole test run finished, right before returning the exit status to the system.\n\n    :param session: The pytest session object.\n    :param exitstatus: The status which pytest will return to the system.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook.\n    \"\"\"\n\n\ndef pytest_unconfigure(config: Config) -> None:\n    \"\"\"Called before test process is exited.\n\n    :param config: The pytest config object.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# hooks for customizing the assert methods\n# -------------------------------------------------------------------------\n\n\ndef pytest_assertrepr_compare(\n    config: Config, op: str, left: object, right: object\n) -> list[str] | None:\n    \"\"\"Return explanation for comparisons in failing assert expressions.\n\n    Return None for no custom explanation, otherwise return a list\n    of strings. The strings will be joined by newlines but any newlines\n    *in* a string will be escaped. Note that all but the first line will\n    be indented slightly, the intention is for the first line to be a summary.\n\n    :param config: The pytest config object.\n    :param op: The operator, e.g. `\"==\"`, `\"!=\"`, `\"not in\"`.\n    :param left: The left operand.\n    :param right: The right operand.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\ndef pytest_assertion_pass(item: Item, lineno: int, orig: str, expl: str) -> None:\n    \"\"\"Called whenever an assertion passes.\n\n    .. versionadded:: 5.0\n\n    Use this hook to do some processing after a passing assertion.\n    The original assertion information is available in the `orig` string\n    and the pytest introspected assertion information is available in the\n    `expl` string.\n\n    This hook must be explicitly enabled by the ``enable_assertion_pass_hook``\n    ini-file option:\n\n    .. code-block:: ini\n\n        [pytest]\n        enable_assertion_pass_hook=true\n\n    You need to **clean the .pyc** files in your project directory and interpreter libraries\n    when enabling this option, as assertions will require to be re-written.\n\n    :param item: pytest item object of current test.\n    :param lineno: Line number of the assert statement.\n    :param orig: String with the original assertion.\n    :param expl: String with the assert explanation.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in the item's directory and its parent directories are consulted.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# Hooks for influencing reporting (invoked from _pytest_terminal).\n# -------------------------------------------------------------------------\n\n\n@hookspec(\n    warn_on_impl_args={\n        \"startdir\": HOOK_LEGACY_PATH_ARG.format(\n            pylib_path_arg=\"startdir\", pathlib_path_arg=\"start_path\"\n        ),\n    },\n)\ndef pytest_report_header(  # type:ignore[empty-body]\n    config: Config, start_path: Path, startdir: LEGACY_PATH\n) -> str | list[str]:\n    \"\"\"Return a string or list of strings to be displayed as header info for terminal reporting.\n\n    :param config: The pytest config object.\n    :param start_path: The starting dir.\n    :type start_path: pathlib.Path\n    :param startdir: The starting dir (deprecated).\n\n    .. note::\n\n        Lines returned by a plugin are displayed before those of plugins which\n        ran before it.\n        If you want to have your line(s) displayed first, use\n        :ref:`trylast=True <plugin-hookorder>`.\n\n    .. versionchanged:: 7.0.0\n        The ``start_path`` parameter was added as a :class:`pathlib.Path`\n        equivalent of the ``startdir`` parameter. The ``startdir`` parameter\n        has been deprecated.\n\n    Use in conftest plugins\n    =======================\n\n    This hook is only called for :ref:`initial conftests <pluginorder>`.\n    \"\"\"\n\n\n@hookspec(\n    warn_on_impl_args={\n        \"startdir\": HOOK_LEGACY_PATH_ARG.format(\n            pylib_path_arg=\"startdir\", pathlib_path_arg=\"start_path\"\n        ),\n    },\n)\ndef pytest_report_collectionfinish(  # type:ignore[empty-body]\n    config: Config,\n    start_path: Path,\n    startdir: LEGACY_PATH,\n    items: Sequence[Item],\n) -> str | list[str]:\n    \"\"\"Return a string or list of strings to be displayed after collection\n    has finished successfully.\n\n    These strings will be displayed after the standard \"collected X items\" message.\n\n    .. versionadded:: 3.2\n\n    :param config: The pytest config object.\n    :param start_path: The starting dir.\n    :type start_path: pathlib.Path\n    :param startdir: The starting dir (deprecated).\n    :param items: List of pytest items that are going to be executed; this list should not be modified.\n\n    .. note::\n\n        Lines returned by a plugin are displayed before those of plugins which\n        ran before it.\n        If you want to have your line(s) displayed first, use\n        :ref:`trylast=True <plugin-hookorder>`.\n\n    .. versionchanged:: 7.0.0\n        The ``start_path`` parameter was added as a :class:`pathlib.Path`\n        equivalent of the ``startdir`` parameter. The ``startdir`` parameter\n        has been deprecated.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\n@hookspec(firstresult=True)\ndef pytest_report_teststatus(  # type:ignore[empty-body]\n    report: CollectReport | TestReport, config: Config\n) -> TestShortLogReport | tuple[str, str, str | tuple[str, Mapping[str, bool]]]:\n    \"\"\"Return result-category, shortletter and verbose word for status\n    reporting.\n\n    The result-category is a category in which to count the result, for\n    example \"passed\", \"skipped\", \"error\" or the empty string.\n\n    The shortletter is shown as testing progresses, for example \".\", \"s\",\n    \"E\" or the empty string.\n\n    The verbose word is shown as testing progresses in verbose mode, for\n    example \"PASSED\", \"SKIPPED\", \"ERROR\" or the empty string.\n\n    pytest may style these implicitly according to the report outcome.\n    To provide explicit styling, return a tuple for the verbose word,\n    for example ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})``.\n\n    :param report: The report object whose status is to be returned.\n    :param config: The pytest config object.\n    :returns: The test status.\n\n    Stops at first non-None result, see :ref:`firstresult`.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\ndef pytest_terminal_summary(\n    terminalreporter: TerminalReporter,\n    exitstatus: ExitCode,\n    config: Config,\n) -> None:\n    \"\"\"Add a section to terminal summary reporting.\n\n    :param terminalreporter: The internal terminal reporter object.\n    :param exitstatus: The exit status that will be reported back to the OS.\n    :param config: The pytest config object.\n\n    .. versionadded:: 4.2\n        The ``config`` parameter.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\n@hookspec(historic=True)\ndef pytest_warning_recorded(\n    warning_message: warnings.WarningMessage,\n    when: Literal[\"config\", \"collect\", \"runtest\"],\n    nodeid: str,\n    location: tuple[str, int, str] | None,\n) -> None:\n    \"\"\"Process a warning captured by the internal pytest warnings plugin.\n\n    :param warning_message:\n        The captured warning. This is the same object produced by :class:`warnings.catch_warnings`,\n        and contains the same attributes as the parameters of :py:func:`warnings.showwarning`.\n\n    :param when:\n        Indicates when the warning was captured. Possible values:\n\n        * ``\"config\"``: during pytest configuration/initialization stage.\n        * ``\"collect\"``: during test collection.\n        * ``\"runtest\"``: during test execution.\n\n    :param nodeid:\n        Full id of the item. Empty string for warnings that are not specific to\n        a particular node.\n\n    :param location:\n        When available, holds information about the execution context of the captured\n        warning (filename, linenumber, function). ``function`` evaluates to <module>\n        when the execution context is at the module level.\n\n    .. versionadded:: 6.0\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. If the warning is specific to a\n    particular node, only conftest files in parent directories of the node are\n    consulted.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# Hooks for influencing skipping\n# -------------------------------------------------------------------------\n\n\ndef pytest_markeval_namespace(  # type:ignore[empty-body]\n    config: Config,\n) -> dict[str, Any]:\n    \"\"\"Called when constructing the globals dictionary used for\n    evaluating string conditions in xfail/skipif markers.\n\n    This is useful when the condition for a marker requires\n    objects that are expensive or impossible to obtain during\n    collection time, which is required by normal boolean\n    conditions.\n\n    .. versionadded:: 6.2\n\n    :param config: The pytest config object.\n    :returns: A dictionary of additional globals to add.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given item, only conftest\n    files in parent directories of the item are consulted.\n    \"\"\"\n\n\n# -------------------------------------------------------------------------\n# error handling and internal debugging hooks\n# -------------------------------------------------------------------------\n\n\ndef pytest_internalerror(\n    excrepr: ExceptionRepr,\n    excinfo: ExceptionInfo[BaseException],\n) -> bool | None:\n    \"\"\"Called for internal errors.\n\n    Return True to suppress the fallback handling of printing an\n    INTERNALERROR message directly to sys.stderr.\n\n    :param excrepr: The exception repr object.\n    :param excinfo: The exception info.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\ndef pytest_keyboard_interrupt(\n    excinfo: ExceptionInfo[KeyboardInterrupt | Exit],\n) -> None:\n    \"\"\"Called for keyboard interrupt.\n\n    :param excinfo: The exception info.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\ndef pytest_exception_interact(\n    node: Item | Collector,\n    call: CallInfo[Any],\n    report: CollectReport | TestReport,\n) -> None:\n    \"\"\"Called when an exception was raised which can potentially be\n    interactively handled.\n\n    May be called during collection (see :hook:`pytest_make_collect_report`),\n    in which case ``report`` is a :class:`~pytest.CollectReport`.\n\n    May be called during runtest of an item (see :hook:`pytest_runtest_protocol`),\n    in which case ``report`` is a :class:`~pytest.TestReport`.\n\n    This hook is not called if the exception that was raised is an internal\n    exception like ``skip.Exception``.\n\n    :param node:\n        The item or collector.\n    :param call:\n        The call information. Contains the exception.\n    :param report:\n        The collection or test report.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest file can implement this hook. For a given node, only conftest\n    files in parent directories of the node are consulted.\n    \"\"\"\n\n\ndef pytest_enter_pdb(config: Config, pdb: pdb.Pdb) -> None:\n    \"\"\"Called upon pdb.set_trace().\n\n    Can be used by plugins to take special action just before the python\n    debugger enters interactive mode.\n\n    :param config: The pytest config object.\n    :param pdb: The Pdb instance.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n\n\ndef pytest_leave_pdb(config: Config, pdb: pdb.Pdb) -> None:\n    \"\"\"Called when leaving pdb (e.g. with continue after pdb.set_trace()).\n\n    Can be used by plugins to take special action just after the python\n    debugger leaves interactive mode.\n\n    :param config: The pytest config object.\n    :param pdb: The Pdb instance.\n\n    Use in conftest plugins\n    =======================\n\n    Any conftest plugin can implement this hook.\n    \"\"\"\n", "src/_pytest/pytester.py": "# mypy: allow-untyped-defs\n\"\"\"(Disabled by default) support for testing pytest and pytest plugins.\n\nPYTEST_DONT_REWRITE\n\"\"\"\n\nfrom __future__ import annotations\n\nimport collections.abc\nimport contextlib\nfrom fnmatch import fnmatch\nimport gc\nimport importlib\nfrom io import StringIO\nimport locale\nimport os\nfrom pathlib import Path\nimport platform\nimport re\nimport shutil\nimport subprocess\nimport sys\nimport traceback\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Final\nfrom typing import final\nfrom typing import Generator\nfrom typing import IO\nfrom typing import Iterable\nfrom typing import Literal\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import TextIO\nfrom typing import TYPE_CHECKING\nfrom weakref import WeakKeyDictionary\n\nfrom iniconfig import IniConfig\nfrom iniconfig import SectionWrapper\n\nfrom _pytest import timing\nfrom _pytest._code import Source\nfrom _pytest.capture import _get_multicapture\nfrom _pytest.compat import NOTSET\nfrom _pytest.compat import NotSetType\nfrom _pytest.config import _PluggyPlugin\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config import hookimpl\nfrom _pytest.config import main\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.main import Session\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.pathlib import bestrelpath\nfrom _pytest.pathlib import make_numbered_dir\nfrom _pytest.reports import CollectReport\nfrom _pytest.reports import TestReport\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_types import PytestWarning\n\n\nif TYPE_CHECKING:\n    import pexpect\n\n\npytest_plugins = [\"pytester_assertions\"]\n\n\nIGNORE_PAM = [  # filenames added when obtaining details about the current user\n    \"/var/lib/sss/mc/passwd\"\n]\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    parser.addoption(\n        \"--lsof\",\n        action=\"store_true\",\n        dest=\"lsof\",\n        default=False,\n        help=\"Run FD checks if lsof is available\",\n    )\n\n    parser.addoption(\n        \"--runpytest\",\n        default=\"inprocess\",\n        dest=\"runpytest\",\n        choices=(\"inprocess\", \"subprocess\"),\n        help=(\n            \"Run pytest sub runs in tests using an 'inprocess' \"\n            \"or 'subprocess' (python -m main) method\"\n        ),\n    )\n\n    parser.addini(\n        \"pytester_example_dir\", help=\"Directory to take the pytester example files from\"\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    if config.getvalue(\"lsof\"):\n        checker = LsofFdLeakChecker()\n        if checker.matching_platform():\n            config.pluginmanager.register(checker)\n\n    config.addinivalue_line(\n        \"markers\",\n        \"pytester_example_path(*path_segments): join the given path \"\n        \"segments to `pytester_example_dir` for this test.\",\n    )\n\n\nclass LsofFdLeakChecker:\n    def get_open_files(self) -> list[tuple[str, str]]:\n        if sys.version_info >= (3, 11):\n            # New in Python 3.11, ignores utf-8 mode\n            encoding = locale.getencoding()\n        else:\n            encoding = locale.getpreferredencoding(False)\n        out = subprocess.run(\n            (\"lsof\", \"-Ffn0\", \"-p\", str(os.getpid())),\n            stdout=subprocess.PIPE,\n            stderr=subprocess.DEVNULL,\n            check=True,\n            text=True,\n            encoding=encoding,\n        ).stdout\n\n        def isopen(line: str) -> bool:\n            return line.startswith(\"f\") and (\n                \"deleted\" not in line\n                and \"mem\" not in line\n                and \"txt\" not in line\n                and \"cwd\" not in line\n            )\n\n        open_files = []\n\n        for line in out.split(\"\\n\"):\n            if isopen(line):\n                fields = line.split(\"\\0\")\n                fd = fields[0][1:]\n                filename = fields[1][1:]\n                if filename in IGNORE_PAM:\n                    continue\n                if filename.startswith(\"/\"):\n                    open_files.append((fd, filename))\n\n        return open_files\n\n    def matching_platform(self) -> bool:\n        try:\n            subprocess.run((\"lsof\", \"-v\"), check=True)\n        except (OSError, subprocess.CalledProcessError):\n            return False\n        else:\n            return True\n\n    @hookimpl(wrapper=True, tryfirst=True)\n    def pytest_runtest_protocol(self, item: Item) -> Generator[None, object, object]:\n        lines1 = self.get_open_files()\n        try:\n            return (yield)\n        finally:\n            if hasattr(sys, \"pypy_version_info\"):\n                gc.collect()\n            lines2 = self.get_open_files()\n\n            new_fds = {t[0] for t in lines2} - {t[0] for t in lines1}\n            leaked_files = [t for t in lines2 if t[0] in new_fds]\n            if leaked_files:\n                error = [\n                    f\"***** {len(leaked_files)} FD leakage detected\",\n                    *(str(f) for f in leaked_files),\n                    \"*** Before:\",\n                    *(str(f) for f in lines1),\n                    \"*** After:\",\n                    *(str(f) for f in lines2),\n                    f\"***** {len(leaked_files)} FD leakage detected\",\n                    \"*** function {}:{}: {} \".format(*item.location),\n                    \"See issue #2366\",\n                ]\n                item.warn(PytestWarning(\"\\n\".join(error)))\n\n\n# used at least by pytest-xdist plugin\n\n\n@fixture\ndef _pytest(request: FixtureRequest) -> PytestArg:\n    \"\"\"Return a helper which offers a gethookrecorder(hook) method which\n    returns a HookRecorder instance which helps to make assertions about called\n    hooks.\"\"\"\n    return PytestArg(request)\n\n\nclass PytestArg:\n    def __init__(self, request: FixtureRequest) -> None:\n        self._request = request\n\n    def gethookrecorder(self, hook) -> HookRecorder:\n        hookrecorder = HookRecorder(hook._pm)\n        self._request.addfinalizer(hookrecorder.finish_recording)\n        return hookrecorder\n\n\ndef get_public_names(values: Iterable[str]) -> list[str]:\n    \"\"\"Only return names from iterator values without a leading underscore.\"\"\"\n    return [x for x in values if x[0] != \"_\"]\n\n\n@final\nclass RecordedHookCall:\n    \"\"\"A recorded call to a hook.\n\n    The arguments to the hook call are set as attributes.\n    For example:\n\n    .. code-block:: python\n\n        calls = hook_recorder.getcalls(\"pytest_runtest_setup\")\n        # Suppose pytest_runtest_setup was called once with `item=an_item`.\n        assert calls[0].item is an_item\n    \"\"\"\n\n    def __init__(self, name: str, kwargs) -> None:\n        self.__dict__.update(kwargs)\n        self._name = name\n\n    def __repr__(self) -> str:\n        d = self.__dict__.copy()\n        del d[\"_name\"]\n        return f\"<RecordedHookCall {self._name!r}(**{d!r})>\"\n\n    if TYPE_CHECKING:\n        # The class has undetermined attributes, this tells mypy about it.\n        def __getattr__(self, key: str): ...\n\n\n@final\nclass HookRecorder:\n    \"\"\"Record all hooks called in a plugin manager.\n\n    Hook recorders are created by :class:`Pytester`.\n\n    This wraps all the hook calls in the plugin manager, recording each call\n    before propagating the normal calls.\n    \"\"\"\n\n    def __init__(\n        self, pluginmanager: PytestPluginManager, *, _ispytest: bool = False\n    ) -> None:\n        check_ispytest(_ispytest)\n\n        self._pluginmanager = pluginmanager\n        self.calls: list[RecordedHookCall] = []\n        self.ret: int | ExitCode | None = None\n\n        def before(hook_name: str, hook_impls, kwargs) -> None:\n            self.calls.append(RecordedHookCall(hook_name, kwargs))\n\n        def after(outcome, hook_name: str, hook_impls, kwargs) -> None:\n            pass\n\n        self._undo_wrapping = pluginmanager.add_hookcall_monitoring(before, after)\n\n    def finish_recording(self) -> None:\n        self._undo_wrapping()\n\n    def getcalls(self, names: str | Iterable[str]) -> list[RecordedHookCall]:\n        \"\"\"Get all recorded calls to hooks with the given names (or name).\"\"\"\n        if isinstance(names, str):\n            names = names.split()\n        return [call for call in self.calls if call._name in names]\n\n    def assert_contains(self, entries: Sequence[tuple[str, str]]) -> None:\n        __tracebackhide__ = True\n        i = 0\n        entries = list(entries)\n        # Since Python 3.13, f_locals is not a dict, but eval requires a dict.\n        backlocals = dict(sys._getframe(1).f_locals)\n        while entries:\n            name, check = entries.pop(0)\n            for ind, call in enumerate(self.calls[i:]):\n                if call._name == name:\n                    print(\"NAMEMATCH\", name, call)\n                    if eval(check, backlocals, call.__dict__):\n                        print(\"CHECKERMATCH\", repr(check), \"->\", call)\n                    else:\n                        print(\"NOCHECKERMATCH\", repr(check), \"-\", call)\n                        continue\n                    i += ind + 1\n                    break\n                print(\"NONAMEMATCH\", name, \"with\", call)\n            else:\n                fail(f\"could not find {name!r} check {check!r}\")\n\n    def popcall(self, name: str) -> RecordedHookCall:\n        __tracebackhide__ = True\n        for i, call in enumerate(self.calls):\n            if call._name == name:\n                del self.calls[i]\n                return call\n        lines = [f\"could not find call {name!r}, in:\"]\n        lines.extend([f\"  {x}\" for x in self.calls])\n        fail(\"\\n\".join(lines))\n\n    def getcall(self, name: str) -> RecordedHookCall:\n        values = self.getcalls(name)\n        assert len(values) == 1, (name, values)\n        return values[0]\n\n    # functionality for test reports\n\n    @overload\n    def getreports(\n        self,\n        names: Literal[\"pytest_collectreport\"],\n    ) -> Sequence[CollectReport]: ...\n\n    @overload\n    def getreports(\n        self,\n        names: Literal[\"pytest_runtest_logreport\"],\n    ) -> Sequence[TestReport]: ...\n\n    @overload\n    def getreports(\n        self,\n        names: str | Iterable[str] = (\n            \"pytest_collectreport\",\n            \"pytest_runtest_logreport\",\n        ),\n    ) -> Sequence[CollectReport | TestReport]: ...\n\n    def getreports(\n        self,\n        names: str | Iterable[str] = (\n            \"pytest_collectreport\",\n            \"pytest_runtest_logreport\",\n        ),\n    ) -> Sequence[CollectReport | TestReport]:\n        return [x.report for x in self.getcalls(names)]\n\n    def matchreport(\n        self,\n        inamepart: str = \"\",\n        names: str | Iterable[str] = (\n            \"pytest_runtest_logreport\",\n            \"pytest_collectreport\",\n        ),\n        when: str | None = None,\n    ) -> CollectReport | TestReport:\n        \"\"\"Return a testreport whose dotted import path matches.\"\"\"\n        values = []\n        for rep in self.getreports(names=names):\n            if not when and rep.when != \"call\" and rep.passed:\n                # setup/teardown passing reports - let's ignore those\n                continue\n            if when and rep.when != when:\n                continue\n            if not inamepart or inamepart in rep.nodeid.split(\"::\"):\n                values.append(rep)\n        if not values:\n            raise ValueError(\n                f\"could not find test report matching {inamepart!r}: \"\n                \"no test reports at all!\"\n            )\n        if len(values) > 1:\n            raise ValueError(\n                f\"found 2 or more testreports matching {inamepart!r}: {values}\"\n            )\n        return values[0]\n\n    @overload\n    def getfailures(\n        self,\n        names: Literal[\"pytest_collectreport\"],\n    ) -> Sequence[CollectReport]: ...\n\n    @overload\n    def getfailures(\n        self,\n        names: Literal[\"pytest_runtest_logreport\"],\n    ) -> Sequence[TestReport]: ...\n\n    @overload\n    def getfailures(\n        self,\n        names: str | Iterable[str] = (\n            \"pytest_collectreport\",\n            \"pytest_runtest_logreport\",\n        ),\n    ) -> Sequence[CollectReport | TestReport]: ...\n\n    def getfailures(\n        self,\n        names: str | Iterable[str] = (\n            \"pytest_collectreport\",\n            \"pytest_runtest_logreport\",\n        ),\n    ) -> Sequence[CollectReport | TestReport]:\n        return [rep for rep in self.getreports(names) if rep.failed]\n\n    def getfailedcollections(self) -> Sequence[CollectReport]:\n        return self.getfailures(\"pytest_collectreport\")\n\n    def listoutcomes(\n        self,\n    ) -> tuple[\n        Sequence[TestReport],\n        Sequence[CollectReport | TestReport],\n        Sequence[CollectReport | TestReport],\n    ]:\n        passed = []\n        skipped = []\n        failed = []\n        for rep in self.getreports(\n            (\"pytest_collectreport\", \"pytest_runtest_logreport\")\n        ):\n            if rep.passed:\n                if rep.when == \"call\":\n                    assert isinstance(rep, TestReport)\n                    passed.append(rep)\n            elif rep.skipped:\n                skipped.append(rep)\n            else:\n                assert rep.failed, f\"Unexpected outcome: {rep!r}\"\n                failed.append(rep)\n        return passed, skipped, failed\n\n    def countoutcomes(self) -> list[int]:\n        return [len(x) for x in self.listoutcomes()]\n\n    def assertoutcome(self, passed: int = 0, skipped: int = 0, failed: int = 0) -> None:\n        __tracebackhide__ = True\n        from _pytest.pytester_assertions import assertoutcome\n\n        outcomes = self.listoutcomes()\n        assertoutcome(\n            outcomes,\n            passed=passed,\n            skipped=skipped,\n            failed=failed,\n        )\n\n    def clear(self) -> None:\n        self.calls[:] = []\n\n\n@fixture\ndef linecomp() -> LineComp:\n    \"\"\"A :class: `LineComp` instance for checking that an input linearly\n    contains a sequence of strings.\"\"\"\n    return LineComp()\n\n\n@fixture(name=\"LineMatcher\")\ndef LineMatcher_fixture(request: FixtureRequest) -> type[LineMatcher]:\n    \"\"\"A reference to the :class: `LineMatcher`.\n\n    This is instantiable with a list of lines (without their trailing newlines).\n    This is useful for testing large texts, such as the output of commands.\n    \"\"\"\n    return LineMatcher\n\n\n@fixture\ndef pytester(\n    request: FixtureRequest, tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n) -> Pytester:\n    \"\"\"\n    Facilities to write tests/configuration files, execute pytest in isolation, and match\n    against expected output, perfect for black-box testing of pytest plugins.\n\n    It attempts to isolate the test run from external factors as much as possible, modifying\n    the current working directory to ``path`` and environment variables during initialization.\n\n    It is particularly useful for testing plugins. It is similar to the :fixture:`tmp_path`\n    fixture but provides methods which aid in testing pytest itself.\n    \"\"\"\n    return Pytester(request, tmp_path_factory, monkeypatch, _ispytest=True)\n\n\n@fixture\ndef _sys_snapshot() -> Generator[None, None, None]:\n    snappaths = SysPathsSnapshot()\n    snapmods = SysModulesSnapshot()\n    yield\n    snapmods.restore()\n    snappaths.restore()\n\n\n@fixture\ndef _config_for_test() -> Generator[Config, None, None]:\n    from _pytest.config import get_config\n\n    config = get_config()\n    yield config\n    config._ensure_unconfigure()  # cleanup, e.g. capman closing tmpfiles.\n\n\n# Regex to match the session duration string in the summary: \"74.34s\".\nrex_session_duration = re.compile(r\"\\d+\\.\\d\\ds\")\n# Regex to match all the counts and phrases in the summary line: \"34 passed, 111 skipped\".\nrex_outcome = re.compile(r\"(\\d+) (\\w+)\")\n\n\n@final\nclass RunResult:\n    \"\"\"The result of running a command from :class:`~pytest.Pytester`.\"\"\"\n\n    def __init__(\n        self,\n        ret: int | ExitCode,\n        outlines: list[str],\n        errlines: list[str],\n        duration: float,\n    ) -> None:\n        try:\n            self.ret: int | ExitCode = ExitCode(ret)\n            \"\"\"The return value.\"\"\"\n        except ValueError:\n            self.ret = ret\n        self.outlines = outlines\n        \"\"\"List of lines captured from stdout.\"\"\"\n        self.errlines = errlines\n        \"\"\"List of lines captured from stderr.\"\"\"\n        self.stdout = LineMatcher(outlines)\n        \"\"\":class:`~pytest.LineMatcher` of stdout.\n\n        Use e.g. :func:`str(stdout) <pytest.LineMatcher.__str__()>` to reconstruct stdout, or the commonly used\n        :func:`stdout.fnmatch_lines() <pytest.LineMatcher.fnmatch_lines()>` method.\n        \"\"\"\n        self.stderr = LineMatcher(errlines)\n        \"\"\":class:`~pytest.LineMatcher` of stderr.\"\"\"\n        self.duration = duration\n        \"\"\"Duration in seconds.\"\"\"\n\n    def __repr__(self) -> str:\n        return (\n            \"<RunResult ret=%s len(stdout.lines)=%d len(stderr.lines)=%d duration=%.2fs>\"\n            % (self.ret, len(self.stdout.lines), len(self.stderr.lines), self.duration)\n        )\n\n    def parseoutcomes(self) -> dict[str, int]:\n        \"\"\"Return a dictionary of outcome noun -> count from parsing the terminal\n        output that the test process produced.\n\n        The returned nouns will always be in plural form::\n\n            ======= 1 failed, 1 passed, 1 warning, 1 error in 0.13s ====\n\n        Will return ``{\"failed\": 1, \"passed\": 1, \"warnings\": 1, \"errors\": 1}``.\n        \"\"\"\n        return self.parse_summary_nouns(self.outlines)\n\n    @classmethod\n    def parse_summary_nouns(cls, lines) -> dict[str, int]:\n        \"\"\"Extract the nouns from a pytest terminal summary line.\n\n        It always returns the plural noun for consistency::\n\n            ======= 1 failed, 1 passed, 1 warning, 1 error in 0.13s ====\n\n        Will return ``{\"failed\": 1, \"passed\": 1, \"warnings\": 1, \"errors\": 1}``.\n        \"\"\"\n        for line in reversed(lines):\n            if rex_session_duration.search(line):\n                outcomes = rex_outcome.findall(line)\n                ret = {noun: int(count) for (count, noun) in outcomes}\n                break\n        else:\n            raise ValueError(\"Pytest terminal summary report not found\")\n\n        to_plural = {\n            \"warning\": \"warnings\",\n            \"error\": \"errors\",\n        }\n        return {to_plural.get(k, k): v for k, v in ret.items()}\n\n    def assert_outcomes(\n        self,\n        passed: int = 0,\n        skipped: int = 0,\n        failed: int = 0,\n        errors: int = 0,\n        xpassed: int = 0,\n        xfailed: int = 0,\n        warnings: int | None = None,\n        deselected: int | None = None,\n    ) -> None:\n        \"\"\"\n        Assert that the specified outcomes appear with the respective\n        numbers (0 means it didn't occur) in the text output from a test run.\n\n        ``warnings`` and ``deselected`` are only checked if not None.\n        \"\"\"\n        __tracebackhide__ = True\n        from _pytest.pytester_assertions import assert_outcomes\n\n        outcomes = self.parseoutcomes()\n        assert_outcomes(\n            outcomes,\n            passed=passed,\n            skipped=skipped,\n            failed=failed,\n            errors=errors,\n            xpassed=xpassed,\n            xfailed=xfailed,\n            warnings=warnings,\n            deselected=deselected,\n        )\n\n\nclass SysModulesSnapshot:\n    def __init__(self, preserve: Callable[[str], bool] | None = None) -> None:\n        self.__preserve = preserve\n        self.__saved = dict(sys.modules)\n\n    def restore(self) -> None:\n        if self.__preserve:\n            self.__saved.update(\n                (k, m) for k, m in sys.modules.items() if self.__preserve(k)\n            )\n        sys.modules.clear()\n        sys.modules.update(self.__saved)\n\n\nclass SysPathsSnapshot:\n    def __init__(self) -> None:\n        self.__saved = list(sys.path), list(sys.meta_path)\n\n    def restore(self) -> None:\n        sys.path[:], sys.meta_path[:] = self.__saved\n\n\n@final\nclass Pytester:\n    \"\"\"\n    Facilities to write tests/configuration files, execute pytest in isolation, and match\n    against expected output, perfect for black-box testing of pytest plugins.\n\n    It attempts to isolate the test run from external factors as much as possible, modifying\n    the current working directory to :attr:`path` and environment variables during initialization.\n    \"\"\"\n\n    __test__ = False\n\n    CLOSE_STDIN: Final = NOTSET\n\n    class TimeoutExpired(Exception):\n        pass\n\n    def __init__(\n        self,\n        request: FixtureRequest,\n        tmp_path_factory: TempPathFactory,\n        monkeypatch: MonkeyPatch,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        self._request = request\n        self._mod_collections: WeakKeyDictionary[Collector, list[Item | Collector]] = (\n            WeakKeyDictionary()\n        )\n        if request.function:\n            name: str = request.function.__name__\n        else:\n            name = request.node.name\n        self._name = name\n        self._path: Path = tmp_path_factory.mktemp(name, numbered=True)\n        #: A list of plugins to use with :py:meth:`parseconfig` and\n        #: :py:meth:`runpytest`.  Initially this is an empty list but plugins can\n        #: be added to the list.  The type of items to add to the list depends on\n        #: the method using them so refer to them for details.\n        self.plugins: list[str | _PluggyPlugin] = []\n        self._sys_path_snapshot = SysPathsSnapshot()\n        self._sys_modules_snapshot = self.__take_sys_modules_snapshot()\n        self._request.addfinalizer(self._finalize)\n        self._method = self._request.config.getoption(\"--runpytest\")\n        self._test_tmproot = tmp_path_factory.mktemp(f\"tmp-{name}\", numbered=True)\n\n        self._monkeypatch = mp = monkeypatch\n        self.chdir()\n        mp.setenv(\"PYTEST_DEBUG_TEMPROOT\", str(self._test_tmproot))\n        # Ensure no unexpected caching via tox.\n        mp.delenv(\"TOX_ENV_DIR\", raising=False)\n        # Discard outer pytest options.\n        mp.delenv(\"PYTEST_ADDOPTS\", raising=False)\n        # Ensure no user config is used.\n        tmphome = str(self.path)\n        mp.setenv(\"HOME\", tmphome)\n        mp.setenv(\"USERPROFILE\", tmphome)\n        # Do not use colors for inner runs by default.\n        mp.setenv(\"PY_COLORS\", \"0\")\n\n    @property\n    def path(self) -> Path:\n        \"\"\"Temporary directory path used to create files/run tests from, etc.\"\"\"\n        return self._path\n\n    def __repr__(self) -> str:\n        return f\"<Pytester {self.path!r}>\"\n\n    def _finalize(self) -> None:\n        \"\"\"\n        Clean up global state artifacts.\n\n        Some methods modify the global interpreter state and this tries to\n        clean this up. It does not remove the temporary directory however so\n        it can be looked at after the test run has finished.\n        \"\"\"\n        self._sys_modules_snapshot.restore()\n        self._sys_path_snapshot.restore()\n\n    def __take_sys_modules_snapshot(self) -> SysModulesSnapshot:\n        # Some zope modules used by twisted-related tests keep internal state\n        # and can't be deleted; we had some trouble in the past with\n        # `zope.interface` for example.\n        #\n        # Preserve readline due to https://bugs.python.org/issue41033.\n        # pexpect issues a SIGWINCH.\n        def preserve_module(name):\n            return name.startswith((\"zope\", \"readline\"))\n\n        return SysModulesSnapshot(preserve=preserve_module)\n\n    def make_hook_recorder(self, pluginmanager: PytestPluginManager) -> HookRecorder:\n        \"\"\"Create a new :class:`HookRecorder` for a :class:`PytestPluginManager`.\"\"\"\n        pluginmanager.reprec = reprec = HookRecorder(pluginmanager, _ispytest=True)  # type: ignore[attr-defined]\n        self._request.addfinalizer(reprec.finish_recording)\n        return reprec\n\n    def chdir(self) -> None:\n        \"\"\"Cd into the temporary directory.\n\n        This is done automatically upon instantiation.\n        \"\"\"\n        self._monkeypatch.chdir(self.path)\n\n    def _makefile(\n        self,\n        ext: str,\n        lines: Sequence[Any | bytes],\n        files: dict[str, str],\n        encoding: str = \"utf-8\",\n    ) -> Path:\n        items = list(files.items())\n\n        if ext is None:\n            raise TypeError(\"ext must not be None\")\n\n        if ext and not ext.startswith(\".\"):\n            raise ValueError(\n                f\"pytester.makefile expects a file extension, try .{ext} instead of {ext}\"\n            )\n\n        def to_text(s: Any | bytes) -> str:\n            return s.decode(encoding) if isinstance(s, bytes) else str(s)\n\n        if lines:\n            source = \"\\n\".join(to_text(x) for x in lines)\n            basename = self._name\n            items.insert(0, (basename, source))\n\n        ret = None\n        for basename, value in items:\n            p = self.path.joinpath(basename).with_suffix(ext)\n            p.parent.mkdir(parents=True, exist_ok=True)\n            source_ = Source(value)\n            source = \"\\n\".join(to_text(line) for line in source_.lines)\n            p.write_text(source.strip(), encoding=encoding)\n            if ret is None:\n                ret = p\n        assert ret is not None\n        return ret\n\n    def makefile(self, ext: str, *args: str, **kwargs: str) -> Path:\n        r\"\"\"Create new text file(s) in the test directory.\n\n        :param ext:\n            The extension the file(s) should use, including the dot, e.g. `.py`.\n        :param args:\n            All args are treated as strings and joined using newlines.\n            The result is written as contents to the file.  The name of the\n            file is based on the test function requesting this fixture.\n        :param kwargs:\n            Each keyword is the name of a file, while the value of it will\n            be written as contents of the file.\n        :returns:\n            The first created file.\n\n        Examples:\n\n        .. code-block:: python\n\n            pytester.makefile(\".txt\", \"line1\", \"line2\")\n\n            pytester.makefile(\".ini\", pytest=\"[pytest]\\naddopts=-rs\\n\")\n\n        To create binary files, use :meth:`pathlib.Path.write_bytes` directly:\n\n        .. code-block:: python\n\n            filename = pytester.path.joinpath(\"foo.bin\")\n            filename.write_bytes(b\"...\")\n        \"\"\"\n        return self._makefile(ext, args, kwargs)\n\n    def makeconftest(self, source: str) -> Path:\n        \"\"\"Write a conftest.py file.\n\n        :param source: The contents.\n        :returns: The conftest.py file.\n        \"\"\"\n        return self.makepyfile(conftest=source)\n\n    def makeini(self, source: str) -> Path:\n        \"\"\"Write a tox.ini file.\n\n        :param source: The contents.\n        :returns: The tox.ini file.\n        \"\"\"\n        return self.makefile(\".ini\", tox=source)\n\n    def getinicfg(self, source: str) -> SectionWrapper:\n        \"\"\"Return the pytest section from the tox.ini config file.\"\"\"\n        p = self.makeini(source)\n        return IniConfig(str(p))[\"pytest\"]\n\n    def makepyprojecttoml(self, source: str) -> Path:\n        \"\"\"Write a pyproject.toml file.\n\n        :param source: The contents.\n        :returns: The pyproject.ini file.\n\n        .. versionadded:: 6.0\n        \"\"\"\n        return self.makefile(\".toml\", pyproject=source)\n\n    def makepyfile(self, *args, **kwargs) -> Path:\n        r\"\"\"Shortcut for .makefile() with a .py extension.\n\n        Defaults to the test name with a '.py' extension, e.g test_foobar.py, overwriting\n        existing files.\n\n        Examples:\n\n        .. code-block:: python\n\n            def test_something(pytester):\n                # Initial file is created test_something.py.\n                pytester.makepyfile(\"foobar\")\n                # To create multiple files, pass kwargs accordingly.\n                pytester.makepyfile(custom=\"foobar\")\n                # At this point, both 'test_something.py' & 'custom.py' exist in the test directory.\n\n        \"\"\"\n        return self._makefile(\".py\", args, kwargs)\n\n    def maketxtfile(self, *args, **kwargs) -> Path:\n        r\"\"\"Shortcut for .makefile() with a .txt extension.\n\n        Defaults to the test name with a '.txt' extension, e.g test_foobar.txt, overwriting\n        existing files.\n\n        Examples:\n\n        .. code-block:: python\n\n            def test_something(pytester):\n                # Initial file is created test_something.txt.\n                pytester.maketxtfile(\"foobar\")\n                # To create multiple files, pass kwargs accordingly.\n                pytester.maketxtfile(custom=\"foobar\")\n                # At this point, both 'test_something.txt' & 'custom.txt' exist in the test directory.\n\n        \"\"\"\n        return self._makefile(\".txt\", args, kwargs)\n\n    def syspathinsert(self, path: str | os.PathLike[str] | None = None) -> None:\n        \"\"\"Prepend a directory to sys.path, defaults to :attr:`path`.\n\n        This is undone automatically when this object dies at the end of each\n        test.\n\n        :param path:\n            The path.\n        \"\"\"\n        if path is None:\n            path = self.path\n\n        self._monkeypatch.syspath_prepend(str(path))\n\n    def mkdir(self, name: str | os.PathLike[str]) -> Path:\n        \"\"\"Create a new (sub)directory.\n\n        :param name:\n            The name of the directory, relative to the pytester path.\n        :returns:\n            The created directory.\n        :rtype: pathlib.Path\n        \"\"\"\n        p = self.path / name\n        p.mkdir()\n        return p\n\n    def mkpydir(self, name: str | os.PathLike[str]) -> Path:\n        \"\"\"Create a new python package.\n\n        This creates a (sub)directory with an empty ``__init__.py`` file so it\n        gets recognised as a Python package.\n        \"\"\"\n        p = self.path / name\n        p.mkdir()\n        p.joinpath(\"__init__.py\").touch()\n        return p\n\n    def copy_example(self, name: str | None = None) -> Path:\n        \"\"\"Copy file from project's directory into the testdir.\n\n        :param name:\n            The name of the file to copy.\n        :return:\n            Path to the copied directory (inside ``self.path``).\n        :rtype: pathlib.Path\n        \"\"\"\n        example_dir_ = self._request.config.getini(\"pytester_example_dir\")\n        if example_dir_ is None:\n            raise ValueError(\"pytester_example_dir is unset, can't copy examples\")\n        example_dir: Path = self._request.config.rootpath / example_dir_\n\n        for extra_element in self._request.node.iter_markers(\"pytester_example_path\"):\n            assert extra_element.args\n            example_dir = example_dir.joinpath(*extra_element.args)\n\n        if name is None:\n            func_name = self._name\n            maybe_dir = example_dir / func_name\n            maybe_file = example_dir / (func_name + \".py\")\n\n            if maybe_dir.is_dir():\n                example_path = maybe_dir\n            elif maybe_file.is_file():\n                example_path = maybe_file\n            else:\n                raise LookupError(\n                    f\"{func_name} can't be found as module or package in {example_dir}\"\n                )\n        else:\n            example_path = example_dir.joinpath(name)\n\n        if example_path.is_dir() and not example_path.joinpath(\"__init__.py\").is_file():\n            shutil.copytree(example_path, self.path, symlinks=True, dirs_exist_ok=True)\n            return self.path\n        elif example_path.is_file():\n            result = self.path.joinpath(example_path.name)\n            shutil.copy(example_path, result)\n            return result\n        else:\n            raise LookupError(\n                f'example \"{example_path}\" is not found as a file or directory'\n            )\n\n    def getnode(self, config: Config, arg: str | os.PathLike[str]) -> Collector | Item:\n        \"\"\"Get the collection node of a file.\n\n        :param config:\n           A pytest config.\n           See :py:meth:`parseconfig` and :py:meth:`parseconfigure` for creating it.\n        :param arg:\n            Path to the file.\n        :returns:\n            The node.\n        \"\"\"\n        session = Session.from_config(config)\n        assert \"::\" not in str(arg)\n        p = Path(os.path.abspath(arg))\n        config.hook.pytest_sessionstart(session=session)\n        res = session.perform_collect([str(p)], genitems=False)[0]\n        config.hook.pytest_sessionfinish(session=session, exitstatus=ExitCode.OK)\n        return res\n\n    def getpathnode(self, path: str | os.PathLike[str]) -> Collector | Item:\n        \"\"\"Return the collection node of a file.\n\n        This is like :py:meth:`getnode` but uses :py:meth:`parseconfigure` to\n        create the (configured) pytest Config instance.\n\n        :param path:\n            Path to the file.\n        :returns:\n            The node.\n        \"\"\"\n        path = Path(path)\n        config = self.parseconfigure(path)\n        session = Session.from_config(config)\n        x = bestrelpath(session.path, path)\n        config.hook.pytest_sessionstart(session=session)\n        res = session.perform_collect([x], genitems=False)[0]\n        config.hook.pytest_sessionfinish(session=session, exitstatus=ExitCode.OK)\n        return res\n\n    def genitems(self, colitems: Sequence[Item | Collector]) -> list[Item]:\n        \"\"\"Generate all test items from a collection node.\n\n        This recurses into the collection node and returns a list of all the\n        test items contained within.\n\n        :param colitems:\n            The collection nodes.\n        :returns:\n            The collected items.\n        \"\"\"\n        session = colitems[0].session\n        result: list[Item] = []\n        for colitem in colitems:\n            result.extend(session.genitems(colitem))\n        return result\n\n    def runitem(self, source: str) -> Any:\n        \"\"\"Run the \"test_func\" Item.\n\n        The calling test instance (class containing the test method) must\n        provide a ``.getrunner()`` method which should return a runner which\n        can run the test protocol for a single item, e.g.\n        ``_pytest.runner.runtestprotocol``.\n        \"\"\"\n        # used from runner functional tests\n        item = self.getitem(source)\n        # the test class where we are called from wants to provide the runner\n        testclassinstance = self._request.instance\n        runner = testclassinstance.getrunner()\n        return runner(item)\n\n    def inline_runsource(self, source: str, *cmdlineargs) -> HookRecorder:\n        \"\"\"Run a test module in process using ``pytest.main()``.\n\n        This run writes \"source\" into a temporary file and runs\n        ``pytest.main()`` on it, returning a :py:class:`HookRecorder` instance\n        for the result.\n\n        :param source: The source code of the test module.\n        :param cmdlineargs: Any extra command line arguments to use.\n        \"\"\"\n        p = self.makepyfile(source)\n        values = [*list(cmdlineargs), p]\n        return self.inline_run(*values)\n\n    def inline_genitems(self, *args) -> tuple[list[Item], HookRecorder]:\n        \"\"\"Run ``pytest.main(['--collect-only'])`` in-process.\n\n        Runs the :py:func:`pytest.main` function to run all of pytest inside\n        the test process itself like :py:meth:`inline_run`, but returns a\n        tuple of the collected items and a :py:class:`HookRecorder` instance.\n        \"\"\"\n        rec = self.inline_run(\"--collect-only\", *args)\n        items = [x.item for x in rec.getcalls(\"pytest_itemcollected\")]\n        return items, rec\n\n    def inline_run(\n        self,\n        *args: str | os.PathLike[str],\n        plugins=(),\n        no_reraise_ctrlc: bool = False,\n    ) -> HookRecorder:\n        \"\"\"Run ``pytest.main()`` in-process, returning a HookRecorder.\n\n        Runs the :py:func:`pytest.main` function to run all of pytest inside\n        the test process itself.  This means it can return a\n        :py:class:`HookRecorder` instance which gives more detailed results\n        from that run than can be done by matching stdout/stderr from\n        :py:meth:`runpytest`.\n\n        :param args:\n            Command line arguments to pass to :py:func:`pytest.main`.\n        :param plugins:\n            Extra plugin instances the ``pytest.main()`` instance should use.\n        :param no_reraise_ctrlc:\n            Typically we reraise keyboard interrupts from the child run. If\n            True, the KeyboardInterrupt exception is captured.\n        \"\"\"\n        # (maybe a cpython bug?) the importlib cache sometimes isn't updated\n        # properly between file creation and inline_run (especially if imports\n        # are interspersed with file creation)\n        importlib.invalidate_caches()\n\n        plugins = list(plugins)\n        finalizers = []\n        try:\n            # Any sys.module or sys.path changes done while running pytest\n            # inline should be reverted after the test run completes to avoid\n            # clashing with later inline tests run within the same pytest test,\n            # e.g. just because they use matching test module names.\n            finalizers.append(self.__take_sys_modules_snapshot().restore)\n            finalizers.append(SysPathsSnapshot().restore)\n\n            # Important note:\n            # - our tests should not leave any other references/registrations\n            #   laying around other than possibly loaded test modules\n            #   referenced from sys.modules, as nothing will clean those up\n            #   automatically\n\n            rec = []\n\n            class Collect:\n                def pytest_configure(x, config: Config) -> None:\n                    rec.append(self.make_hook_recorder(config.pluginmanager))\n\n            plugins.append(Collect())\n            ret = main([str(x) for x in args], plugins=plugins)\n            if len(rec) == 1:\n                reprec = rec.pop()\n            else:\n\n                class reprec:  # type: ignore\n                    pass\n\n            reprec.ret = ret\n\n            # Typically we reraise keyboard interrupts from the child run\n            # because it's our user requesting interruption of the testing.\n            if ret == ExitCode.INTERRUPTED and not no_reraise_ctrlc:\n                calls = reprec.getcalls(\"pytest_keyboard_interrupt\")\n                if calls and calls[-1].excinfo.type == KeyboardInterrupt:\n                    raise KeyboardInterrupt()\n            return reprec\n        finally:\n            for finalizer in finalizers:\n                finalizer()\n\n    def runpytest_inprocess(\n        self, *args: str | os.PathLike[str], **kwargs: Any\n    ) -> RunResult:\n        \"\"\"Return result of running pytest in-process, providing a similar\n        interface to what self.runpytest() provides.\"\"\"\n        syspathinsert = kwargs.pop(\"syspathinsert\", False)\n\n        if syspathinsert:\n            self.syspathinsert()\n        now = timing.time()\n        capture = _get_multicapture(\"sys\")\n        capture.start_capturing()\n        try:\n            try:\n                reprec = self.inline_run(*args, **kwargs)\n            except SystemExit as e:\n                ret = e.args[0]\n                try:\n                    ret = ExitCode(e.args[0])\n                except ValueError:\n                    pass\n\n                class reprec:  # type: ignore\n                    ret = ret\n\n            except Exception:\n                traceback.print_exc()\n\n                class reprec:  # type: ignore\n                    ret = ExitCode(3)\n\n        finally:\n            out, err = capture.readouterr()\n            capture.stop_capturing()\n            sys.stdout.write(out)\n            sys.stderr.write(err)\n\n        assert reprec.ret is not None\n        res = RunResult(\n            reprec.ret, out.splitlines(), err.splitlines(), timing.time() - now\n        )\n        res.reprec = reprec  # type: ignore\n        return res\n\n    def runpytest(self, *args: str | os.PathLike[str], **kwargs: Any) -> RunResult:\n        \"\"\"Run pytest inline or in a subprocess, depending on the command line\n        option \"--runpytest\" and return a :py:class:`~pytest.RunResult`.\"\"\"\n        new_args = self._ensure_basetemp(args)\n        if self._method == \"inprocess\":\n            return self.runpytest_inprocess(*new_args, **kwargs)\n        elif self._method == \"subprocess\":\n            return self.runpytest_subprocess(*new_args, **kwargs)\n        raise RuntimeError(f\"Unrecognized runpytest option: {self._method}\")\n\n    def _ensure_basetemp(\n        self, args: Sequence[str | os.PathLike[str]]\n    ) -> list[str | os.PathLike[str]]:\n        new_args = list(args)\n        for x in new_args:\n            if str(x).startswith(\"--basetemp\"):\n                break\n        else:\n            new_args.append(\n                \"--basetemp={}\".format(self.path.parent.joinpath(\"basetemp\"))\n            )\n        return new_args\n\n    def parseconfig(self, *args: str | os.PathLike[str]) -> Config:\n        \"\"\"Return a new pytest :class:`pytest.Config` instance from given\n        commandline args.\n\n        This invokes the pytest bootstrapping code in _pytest.config to create a\n        new :py:class:`pytest.PytestPluginManager` and call the\n        :hook:`pytest_cmdline_parse` hook to create a new :class:`pytest.Config`\n        instance.\n\n        If :attr:`plugins` has been populated they should be plugin modules\n        to be registered with the plugin manager.\n        \"\"\"\n        import _pytest.config\n\n        new_args = self._ensure_basetemp(args)\n        new_args = [str(x) for x in new_args]\n\n        config = _pytest.config._prepareconfig(new_args, self.plugins)  # type: ignore[arg-type]\n        # we don't know what the test will do with this half-setup config\n        # object and thus we make sure it gets unconfigured properly in any\n        # case (otherwise capturing could still be active, for example)\n        self._request.addfinalizer(config._ensure_unconfigure)\n        return config\n\n    def parseconfigure(self, *args: str | os.PathLike[str]) -> Config:\n        \"\"\"Return a new pytest configured Config instance.\n\n        Returns a new :py:class:`pytest.Config` instance like\n        :py:meth:`parseconfig`, but also calls the :hook:`pytest_configure`\n        hook.\n        \"\"\"\n        config = self.parseconfig(*args)\n        config._do_configure()\n        return config\n\n    def getitem(\n        self, source: str | os.PathLike[str], funcname: str = \"test_func\"\n    ) -> Item:\n        \"\"\"Return the test item for a test function.\n\n        Writes the source to a python file and runs pytest's collection on\n        the resulting module, returning the test item for the requested\n        function name.\n\n        :param source:\n            The module source.\n        :param funcname:\n            The name of the test function for which to return a test item.\n        :returns:\n            The test item.\n        \"\"\"\n        items = self.getitems(source)\n        for item in items:\n            if item.name == funcname:\n                return item\n        assert 0, f\"{funcname!r} item not found in module:\\n{source}\\nitems: {items}\"\n\n    def getitems(self, source: str | os.PathLike[str]) -> list[Item]:\n        \"\"\"Return all test items collected from the module.\n\n        Writes the source to a Python file and runs pytest's collection on\n        the resulting module, returning all test items contained within.\n        \"\"\"\n        modcol = self.getmodulecol(source)\n        return self.genitems([modcol])\n\n    def getmodulecol(\n        self,\n        source: str | os.PathLike[str],\n        configargs=(),\n        *,\n        withinit: bool = False,\n    ):\n        \"\"\"Return the module collection node for ``source``.\n\n        Writes ``source`` to a file using :py:meth:`makepyfile` and then\n        runs the pytest collection on it, returning the collection node for the\n        test module.\n\n        :param source:\n            The source code of the module to collect.\n\n        :param configargs:\n            Any extra arguments to pass to :py:meth:`parseconfigure`.\n\n        :param withinit:\n            Whether to also write an ``__init__.py`` file to the same\n            directory to ensure it is a package.\n        \"\"\"\n        if isinstance(source, os.PathLike):\n            path = self.path.joinpath(source)\n            assert not withinit, \"not supported for paths\"\n        else:\n            kw = {self._name: str(source)}\n            path = self.makepyfile(**kw)\n        if withinit:\n            self.makepyfile(__init__=\"#\")\n        self.config = config = self.parseconfigure(path, *configargs)\n        return self.getnode(config, path)\n\n    def collect_by_name(self, modcol: Collector, name: str) -> Item | Collector | None:\n        \"\"\"Return the collection node for name from the module collection.\n\n        Searches a module collection node for a collection node matching the\n        given name.\n\n        :param modcol: A module collection node; see :py:meth:`getmodulecol`.\n        :param name: The name of the node to return.\n        \"\"\"\n        if modcol not in self._mod_collections:\n            self._mod_collections[modcol] = list(modcol.collect())\n        for colitem in self._mod_collections[modcol]:\n            if colitem.name == name:\n                return colitem\n        return None\n\n    def popen(\n        self,\n        cmdargs: Sequence[str | os.PathLike[str]],\n        stdout: int | TextIO = subprocess.PIPE,\n        stderr: int | TextIO = subprocess.PIPE,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n        **kw,\n    ):\n        \"\"\"Invoke :py:class:`subprocess.Popen`.\n\n        Calls :py:class:`subprocess.Popen` making sure the current working\n        directory is in ``PYTHONPATH``.\n\n        You probably want to use :py:meth:`run` instead.\n        \"\"\"\n        env = os.environ.copy()\n        env[\"PYTHONPATH\"] = os.pathsep.join(\n            filter(None, [os.getcwd(), env.get(\"PYTHONPATH\", \"\")])\n        )\n        kw[\"env\"] = env\n\n        if stdin is self.CLOSE_STDIN:\n            kw[\"stdin\"] = subprocess.PIPE\n        elif isinstance(stdin, bytes):\n            kw[\"stdin\"] = subprocess.PIPE\n        else:\n            kw[\"stdin\"] = stdin\n\n        popen = subprocess.Popen(cmdargs, stdout=stdout, stderr=stderr, **kw)\n        if stdin is self.CLOSE_STDIN:\n            assert popen.stdin is not None\n            popen.stdin.close()\n        elif isinstance(stdin, bytes):\n            assert popen.stdin is not None\n            popen.stdin.write(stdin)\n\n        return popen\n\n    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.\n\n        Run a process using :py:class:`subprocess.Popen` saving the stdout and\n        stderr.\n\n        :param cmdargs:\n            The sequence of arguments to pass to :py:class:`subprocess.Popen`,\n            with path-like objects being converted to :py:class:`str`\n            automatically.\n        :param timeout:\n            The period in seconds after which to timeout and raise\n            :py:class:`Pytester.TimeoutExpired`.\n        :param stdin:\n            Optional standard input.\n\n            - If it is ``CLOSE_STDIN`` (Default), then this method calls\n              :py:class:`subprocess.Popen` with ``stdin=subprocess.PIPE``, and\n              the standard input is closed immediately after the new command is\n              started.\n\n            - If it is of type :py:class:`bytes`, these bytes are sent to the\n              standard input of the command.\n\n            - Otherwise, it is passed through to :py:class:`subprocess.Popen`.\n              For further information in this case, consult the document of the\n              ``stdin`` parameter in :py:class:`subprocess.Popen`.\n        :type stdin: _pytest.compat.NotSetType | bytes | IO[Any] | int\n        :returns:\n            The result.\n\n        \"\"\"\n        __tracebackhide__ = True\n\n        cmdargs = tuple(os.fspath(arg) for arg in cmdargs)\n        p1 = self.path.joinpath(\"stdout\")\n        p2 = self.path.joinpath(\"stderr\")\n        print(\"running:\", *cmdargs)\n        print(\"     in:\", Path.cwd())\n\n        with p1.open(\"w\", encoding=\"utf8\") as f1, p2.open(\"w\", encoding=\"utf8\") as f2:\n            now = timing.time()\n            popen = self.popen(\n                cmdargs,\n                stdin=stdin,\n                stdout=f1,\n                stderr=f2,\n                close_fds=(sys.platform != \"win32\"),\n            )\n            if popen.stdin is not None:\n                popen.stdin.close()\n\n            def handle_timeout() -> None:\n                __tracebackhide__ = True\n\n                timeout_message = f\"{timeout} second timeout expired running: {cmdargs}\"\n\n                popen.kill()\n                popen.wait()\n                raise self.TimeoutExpired(timeout_message)\n\n            if timeout is None:\n                ret = popen.wait()\n            else:\n                try:\n                    ret = popen.wait(timeout)\n                except subprocess.TimeoutExpired:\n                    handle_timeout()\n\n        with p1.open(encoding=\"utf8\") as f1, p2.open(encoding=\"utf8\") as f2:\n            out = f1.read().splitlines()\n            err = f2.read().splitlines()\n\n        self._dump_lines(out, sys.stdout)\n        self._dump_lines(err, sys.stderr)\n\n        with contextlib.suppress(ValueError):\n            ret = ExitCode(ret)\n        return RunResult(ret, out, err, timing.time() - now)\n\n    def _dump_lines(self, lines, fp):\n        try:\n            for line in lines:\n                print(line, file=fp)\n        except UnicodeEncodeError:\n            print(f\"couldn't print to {fp} because of encoding\")\n\n    def _getpytestargs(self) -> tuple[str, ...]:\n        return sys.executable, \"-mpytest\"\n\n    def runpython(self, script: os.PathLike[str]) -> RunResult:\n        \"\"\"Run a python script using sys.executable as interpreter.\"\"\"\n        return self.run(sys.executable, script)\n\n    def runpython_c(self, command: str) -> RunResult:\n        \"\"\"Run ``python -c \"command\"``.\"\"\"\n        return self.run(sys.executable, \"-c\", command)\n\n    def runpytest_subprocess(\n        self, *args: str | os.PathLike[str], timeout: float | None = None\n    ) -> RunResult:\n        \"\"\"Run pytest as a subprocess with given arguments.\n\n        Any plugins added to the :py:attr:`plugins` list will be added using the\n        ``-p`` command line option.  Additionally ``--basetemp`` is used to put\n        any temporary files and directories in a numbered directory prefixed\n        with \"runpytest-\" to not conflict with the normal numbered pytest\n        location for temporary files and directories.\n\n        :param args:\n            The sequence of arguments to pass to the pytest subprocess.\n        :param timeout:\n            The period in seconds after which to timeout and raise\n            :py:class:`Pytester.TimeoutExpired`.\n        :returns:\n            The result.\n        \"\"\"\n        __tracebackhide__ = True\n        p = make_numbered_dir(root=self.path, prefix=\"runpytest-\", mode=0o700)\n        args = (f\"--basetemp={p}\", *args)\n        plugins = [x for x in self.plugins if isinstance(x, str)]\n        if plugins:\n            args = (\"-p\", plugins[0], *args)\n        args = self._getpytestargs() + args\n        return self.run(*args, timeout=timeout)\n\n    def spawn_pytest(self, string: str, expect_timeout: float = 10.0) -> pexpect.spawn:\n        \"\"\"Run pytest using pexpect.\n\n        This makes sure to use the right pytest and sets up the temporary\n        directory locations.\n\n        The pexpect child is returned.\n        \"\"\"\n        basetemp = self.path / \"temp-pexpect\"\n        basetemp.mkdir(mode=0o700)\n        invoke = \" \".join(map(str, self._getpytestargs()))\n        cmd = f\"{invoke} --basetemp={basetemp} {string}\"\n        return self.spawn(cmd, expect_timeout=expect_timeout)\n\n    def spawn(self, cmd: str, expect_timeout: float = 10.0) -> pexpect.spawn:\n        \"\"\"Run a command using pexpect.\n\n        The pexpect child is returned.\n        \"\"\"\n        pexpect = importorskip(\"pexpect\", \"3.0\")\n        if hasattr(sys, \"pypy_version_info\") and \"64\" in platform.machine():\n            skip(\"pypy-64 bit not supported\")\n        if not hasattr(pexpect, \"spawn\"):\n            skip(\"pexpect.spawn not available\")\n        logfile = self.path.joinpath(\"spawn.out\").open(\"wb\")\n\n        child = pexpect.spawn(cmd, logfile=logfile, timeout=expect_timeout)\n        self._request.addfinalizer(logfile.close)\n        return child\n\n\nclass LineComp:\n    def __init__(self) -> None:\n        self.stringio = StringIO()\n        \"\"\":class:`python:io.StringIO()` instance used for input.\"\"\"\n\n    def assert_contains_lines(self, lines2: Sequence[str]) -> None:\n        \"\"\"Assert that ``lines2`` are contained (linearly) in :attr:`stringio`'s value.\n\n        Lines are matched using :func:`LineMatcher.fnmatch_lines <pytest.LineMatcher.fnmatch_lines>`.\n        \"\"\"\n        __tracebackhide__ = True\n        val = self.stringio.getvalue()\n        self.stringio.truncate(0)\n        self.stringio.seek(0)\n        lines1 = val.split(\"\\n\")\n        LineMatcher(lines1).fnmatch_lines(lines2)\n\n\nclass LineMatcher:\n    \"\"\"Flexible matching of text.\n\n    This is a convenience class to test large texts like the output of\n    commands.\n\n    The constructor takes a list of lines without their trailing newlines, i.e.\n    ``text.splitlines()``.\n    \"\"\"\n\n    def __init__(self, lines: list[str]) -> None:\n        self.lines = lines\n        self._log_output: list[str] = []\n\n    def __str__(self) -> str:\n        \"\"\"Return the entire original text.\n\n        .. versionadded:: 6.2\n            You can use :meth:`str` in older versions.\n        \"\"\"\n        return \"\\n\".join(self.lines)\n\n    def _getlines(self, lines2: str | Sequence[str] | Source) -> Sequence[str]:\n        if isinstance(lines2, str):\n            lines2 = Source(lines2)\n        if isinstance(lines2, Source):\n            lines2 = lines2.strip().lines\n        return lines2\n\n    def fnmatch_lines_random(self, lines2: Sequence[str]) -> None:\n        \"\"\"Check lines exist in the output in any order (using :func:`python:fnmatch.fnmatch`).\"\"\"\n        __tracebackhide__ = True\n        self._match_lines_random(lines2, fnmatch)\n\n    def re_match_lines_random(self, lines2: Sequence[str]) -> None:\n        \"\"\"Check lines exist in the output in any order (using :func:`python:re.match`).\"\"\"\n        __tracebackhide__ = True\n        self._match_lines_random(lines2, lambda name, pat: bool(re.match(pat, name)))\n\n    def _match_lines_random(\n        self, lines2: Sequence[str], match_func: Callable[[str, str], bool]\n    ) -> None:\n        __tracebackhide__ = True\n        lines2 = self._getlines(lines2)\n        for line in lines2:\n            for x in self.lines:\n                if line == x or match_func(x, line):\n                    self._log(\"matched: \", repr(line))\n                    break\n            else:\n                msg = f\"line {line!r} not found in output\"\n                self._log(msg)\n                self._fail(msg)\n\n    def get_lines_after(self, fnline: str) -> Sequence[str]:\n        \"\"\"Return all lines following the given line in the text.\n\n        The given line can contain glob wildcards.\n        \"\"\"\n        for i, line in enumerate(self.lines):\n            if fnline == line or fnmatch(line, fnline):\n                return self.lines[i + 1 :]\n        raise ValueError(f\"line {fnline!r} not found in output\")\n\n    def _log(self, *args) -> None:\n        self._log_output.append(\" \".join(str(x) for x in args))\n\n    @property\n    def _log_text(self) -> str:\n        return \"\\n\".join(self._log_output)\n\n    def fnmatch_lines(\n        self, lines2: Sequence[str], *, consecutive: bool = False\n    ) -> None:\n        \"\"\"Check lines exist in the output (using :func:`python:fnmatch.fnmatch`).\n\n        The argument is a list of lines which have to match and can use glob\n        wildcards.  If they do not match a pytest.fail() is called.  The\n        matches and non-matches are also shown as part of the error message.\n\n        :param lines2: String patterns to match.\n        :param consecutive: Match lines consecutively?\n        \"\"\"\n        __tracebackhide__ = True\n        self._match_lines(lines2, fnmatch, \"fnmatch\", consecutive=consecutive)\n\n    def re_match_lines(\n        self, lines2: Sequence[str], *, consecutive: bool = False\n    ) -> None:\n        \"\"\"Check lines exist in the output (using :func:`python:re.match`).\n\n        The argument is a list of lines which have to match using ``re.match``.\n        If they do not match a pytest.fail() is called.\n\n        The matches and non-matches are also shown as part of the error message.\n\n        :param lines2: string patterns to match.\n        :param consecutive: match lines consecutively?\n        \"\"\"\n        __tracebackhide__ = True\n        self._match_lines(\n            lines2,\n            lambda name, pat: bool(re.match(pat, name)),\n            \"re.match\",\n            consecutive=consecutive,\n        )\n\n    def _match_lines(\n        self,\n        lines2: Sequence[str],\n        match_func: Callable[[str, str], bool],\n        match_nickname: str,\n        *,\n        consecutive: bool = False,\n    ) -> None:\n        \"\"\"Underlying implementation of ``fnmatch_lines`` and ``re_match_lines``.\n\n        :param Sequence[str] lines2:\n            List of string patterns to match. The actual format depends on\n            ``match_func``.\n        :param match_func:\n            A callable ``match_func(line, pattern)`` where line is the\n            captured line from stdout/stderr and pattern is the matching\n            pattern.\n        :param str match_nickname:\n            The nickname for the match function that will be logged to stdout\n            when a match occurs.\n        :param consecutive:\n            Match lines consecutively?\n        \"\"\"\n        if not isinstance(lines2, collections.abc.Sequence):\n            raise TypeError(f\"invalid type for lines2: {type(lines2).__name__}\")\n        lines2 = self._getlines(lines2)\n        lines1 = self.lines[:]\n        extralines = []\n        __tracebackhide__ = True\n        wnick = len(match_nickname) + 1\n        started = False\n        for line in lines2:\n            nomatchprinted = False\n            while lines1:\n                nextline = lines1.pop(0)\n                if line == nextline:\n                    self._log(\"exact match:\", repr(line))\n                    started = True\n                    break\n                elif match_func(nextline, line):\n                    self._log(f\"{match_nickname}:\", repr(line))\n                    self._log(\n                        \"{:>{width}}\".format(\"with:\", width=wnick), repr(nextline)\n                    )\n                    started = True\n                    break\n                else:\n                    if consecutive and started:\n                        msg = f\"no consecutive match: {line!r}\"\n                        self._log(msg)\n                        self._log(\n                            \"{:>{width}}\".format(\"with:\", width=wnick), repr(nextline)\n                        )\n                        self._fail(msg)\n                    if not nomatchprinted:\n                        self._log(\n                            \"{:>{width}}\".format(\"nomatch:\", width=wnick), repr(line)\n                        )\n                        nomatchprinted = True\n                    self._log(\"{:>{width}}\".format(\"and:\", width=wnick), repr(nextline))\n                extralines.append(nextline)\n            else:\n                msg = f\"remains unmatched: {line!r}\"\n                self._log(msg)\n                self._fail(msg)\n        self._log_output = []\n\n    def no_fnmatch_line(self, pat: str) -> None:\n        \"\"\"Ensure captured lines do not match the given pattern, using ``fnmatch.fnmatch``.\n\n        :param str pat: The pattern to match lines.\n        \"\"\"\n        __tracebackhide__ = True\n        self._no_match_line(pat, fnmatch, \"fnmatch\")\n\n    def no_re_match_line(self, pat: str) -> None:\n        \"\"\"Ensure captured lines do not match the given pattern, using ``re.match``.\n\n        :param str pat: The regular expression to match lines.\n        \"\"\"\n        __tracebackhide__ = True\n        self._no_match_line(\n            pat, lambda name, pat: bool(re.match(pat, name)), \"re.match\"\n        )\n\n    def _no_match_line(\n        self, pat: str, match_func: Callable[[str, str], bool], match_nickname: str\n    ) -> None:\n        \"\"\"Ensure captured lines does not have a the given pattern, using ``fnmatch.fnmatch``.\n\n        :param str pat: The pattern to match lines.\n        \"\"\"\n        __tracebackhide__ = True\n        nomatch_printed = False\n        wnick = len(match_nickname) + 1\n        for line in self.lines:\n            if match_func(line, pat):\n                msg = f\"{match_nickname}: {pat!r}\"\n                self._log(msg)\n                self._log(\"{:>{width}}\".format(\"with:\", width=wnick), repr(line))\n                self._fail(msg)\n            else:\n                if not nomatch_printed:\n                    self._log(\"{:>{width}}\".format(\"nomatch:\", width=wnick), repr(pat))\n                    nomatch_printed = True\n                self._log(\"{:>{width}}\".format(\"and:\", width=wnick), repr(line))\n        self._log_output = []\n\n    def _fail(self, msg: str) -> None:\n        __tracebackhide__ = True\n        log_text = self._log_text\n        self._log_output = []\n        fail(log_text)\n\n    def str(self) -> str:\n        \"\"\"Return the entire original text.\"\"\"\n        return str(self)\n", "src/_pytest/_code/source.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport ast\nfrom bisect import bisect_right\nimport inspect\nimport textwrap\nimport tokenize\nimport types\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import overload\nimport warnings\n\n\nclass Source:\n    \"\"\"An immutable object holding a source code fragment.\n\n    When using Source(...), the source lines are deindented.\n    \"\"\"\n\n    def __init__(self, obj: object = None) -> None:\n        if not obj:\n            self.lines: list[str] = []\n        elif isinstance(obj, Source):\n            self.lines = obj.lines\n        elif isinstance(obj, (tuple, list)):\n            self.lines = deindent(x.rstrip(\"\\n\") for x in obj)\n        elif isinstance(obj, str):\n            self.lines = deindent(obj.split(\"\\n\"))\n        else:\n            try:\n                rawcode = getrawcode(obj)\n                src = inspect.getsource(rawcode)\n            except TypeError:\n                src = inspect.getsource(obj)  # type: ignore[arg-type]\n            self.lines = deindent(src.split(\"\\n\"))\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Source):\n            return NotImplemented\n        return self.lines == other.lines\n\n    # Ignore type because of https://github.com/python/mypy/issues/4266.\n    __hash__ = None  # type: ignore\n\n    @overload\n    def __getitem__(self, key: int) -> str: ...\n\n    @overload\n    def __getitem__(self, key: slice) -> Source: ...\n\n    def __getitem__(self, key: int | slice) -> str | Source:\n        if isinstance(key, int):\n            return self.lines[key]\n        else:\n            if key.step not in (None, 1):\n                raise IndexError(\"cannot slice a Source with a step\")\n            newsource = Source()\n            newsource.lines = self.lines[key.start : key.stop]\n            return newsource\n\n    def __iter__(self) -> Iterator[str]:\n        return iter(self.lines)\n\n    def __len__(self) -> int:\n        return len(self.lines)\n\n    def strip(self) -> Source:\n        \"\"\"Return new Source object with trailing and leading blank lines removed.\"\"\"\n        start, end = 0, len(self)\n        while start < end and not self.lines[start].strip():\n            start += 1\n        while end > start and not self.lines[end - 1].strip():\n            end -= 1\n        source = Source()\n        source.lines[:] = self.lines[start:end]\n        return source\n\n    def indent(self, indent: str = \" \" * 4) -> Source:\n        \"\"\"Return a copy of the source object with all lines indented by the\n        given indent-string.\"\"\"\n        newsource = Source()\n        newsource.lines = [(indent + line) for line in self.lines]\n        return newsource\n\n    def getstatement(self, lineno: int) -> Source:\n        \"\"\"Return Source statement which contains the given linenumber\n        (counted from 0).\"\"\"\n        start, end = self.getstatementrange(lineno)\n        return self[start:end]\n\n    def getstatementrange(self, lineno: int) -> tuple[int, int]:\n        \"\"\"Return (start, end) tuple which spans the minimal statement region\n        which containing the given lineno.\"\"\"\n        if not (0 <= lineno < len(self)):\n            raise IndexError(\"lineno out of range\")\n        ast, start, end = getstatementrange_ast(lineno, self)\n        return start, end\n\n    def deindent(self) -> Source:\n        \"\"\"Return a new Source object deindented.\"\"\"\n        newsource = Source()\n        newsource.lines[:] = deindent(self.lines)\n        return newsource\n\n    def __str__(self) -> str:\n        return \"\\n\".join(self.lines)\n\n\n#\n# helper functions\n#\n\n\ndef findsource(obj) -> tuple[Source | None, int]:\n    try:\n        sourcelines, lineno = inspect.findsource(obj)\n    except Exception:\n        return None, -1\n    source = Source()\n    source.lines = [line.rstrip() for line in sourcelines]\n    return source, lineno\n\n\ndef getrawcode(obj: object, trycall: bool = True) -> types.CodeType:\n    \"\"\"Return code object for given function.\"\"\"\n    try:\n        return obj.__code__  # type: ignore[attr-defined,no-any-return]\n    except AttributeError:\n        pass\n    if trycall:\n        call = getattr(obj, \"__call__\", None)\n        if call and not isinstance(obj, type):\n            return getrawcode(call, trycall=False)\n    raise TypeError(f\"could not get code object for {obj!r}\")\n\n\ndef deindent(lines: Iterable[str]) -> list[str]:\n    return textwrap.dedent(\"\\n\".join(lines)).splitlines()\n\n\ndef get_statement_startend2(lineno: int, node: ast.AST) -> tuple[int, int | None]:\n    # Flatten all statements and except handlers into one lineno-list.\n    # AST's line numbers start indexing at 1.\n    values: list[int] = []\n    for x in ast.walk(node):\n        if isinstance(x, (ast.stmt, ast.ExceptHandler)):\n            # The lineno points to the class/def, so need to include the decorators.\n            if isinstance(x, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n                for d in x.decorator_list:\n                    values.append(d.lineno - 1)\n            values.append(x.lineno - 1)\n            for name in (\"finalbody\", \"orelse\"):\n                val: list[ast.stmt] | None = getattr(x, name, None)\n                if val:\n                    # Treat the finally/orelse part as its own statement.\n                    values.append(val[0].lineno - 1 - 1)\n    values.sort()\n    insert_index = bisect_right(values, lineno)\n    start = values[insert_index - 1]\n    if insert_index >= len(values):\n        end = None\n    else:\n        end = values[insert_index]\n    return start, end\n\n\ndef getstatementrange_ast(\n    lineno: int,\n    source: Source,\n    assertion: bool = False,\n    astnode: ast.AST | None = None,\n) -> tuple[ast.AST, int, int]:\n    if astnode is None:\n        content = str(source)\n        # See #4260:\n        # Don't produce duplicate warnings when compiling source to find AST.\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            astnode = ast.parse(content, \"source\", \"exec\")\n\n    start, end = get_statement_startend2(lineno, astnode)\n    # We need to correct the end:\n    # - ast-parsing strips comments\n    # - there might be empty lines\n    # - we might have lesser indented code blocks at the end\n    if end is None:\n        end = len(source.lines)\n\n    if end > start + 1:\n        # Make sure we don't span differently indented code blocks\n        # by using the BlockFinder helper used which inspect.getsource() uses itself.\n        block_finder = inspect.BlockFinder()\n        # If we start with an indented line, put blockfinder to \"started\" mode.\n        block_finder.started = (\n            bool(source.lines[start]) and source.lines[start][0].isspace()\n        )\n        it = ((x + \"\\n\") for x in source.lines[start:end])\n        try:\n            for tok in tokenize.generate_tokens(lambda: next(it)):\n                block_finder.tokeneater(*tok)\n        except (inspect.EndOfBlock, IndentationError):\n            end = block_finder.last + start\n        except Exception:\n            pass\n\n    # The end might still point to a comment or empty line, correct it.\n    while end:\n        line = source.lines[end - 1].lstrip()\n        if line.startswith(\"#\") or not line:\n            end -= 1\n        else:\n            break\n    return astnode, start, end\n", "src/_pytest/_code/__init__.py": "\"\"\"Python inspection/code generation API.\"\"\"\n\nfrom __future__ import annotations\n\nfrom .code import Code\nfrom .code import ExceptionInfo\nfrom .code import filter_traceback\nfrom .code import Frame\nfrom .code import getfslineno\nfrom .code import Traceback\nfrom .code import TracebackEntry\nfrom .source import getrawcode\nfrom .source import Source\n\n\n__all__ = [\n    \"Code\",\n    \"ExceptionInfo\",\n    \"filter_traceback\",\n    \"Frame\",\n    \"getfslineno\",\n    \"getrawcode\",\n    \"Traceback\",\n    \"TracebackEntry\",\n    \"Source\",\n]\n", "src/_pytest/_code/code.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport ast\nimport dataclasses\nimport inspect\nfrom inspect import CO_VARARGS\nfrom inspect import CO_VARKEYWORDS\nfrom io import StringIO\nimport os\nfrom pathlib import Path\nimport re\nimport sys\nimport traceback\nfrom traceback import format_exception_only\nfrom types import CodeType\nfrom types import FrameType\nfrom types import TracebackType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import ClassVar\nfrom typing import Final\nfrom typing import final\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import overload\nfrom typing import Pattern\nfrom typing import Sequence\nfrom typing import SupportsIndex\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TypeVar\nfrom typing import Union\n\nimport pluggy\n\nimport _pytest\nfrom _pytest._code.source import findsource\nfrom _pytest._code.source import getrawcode\nfrom _pytest._code.source import getstatementrange_ast\nfrom _pytest._code.source import Source\nfrom _pytest._io import TerminalWriter\nfrom _pytest._io.saferepr import safeformat\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest.compat import get_real_func\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import bestrelpath\n\n\nif sys.version_info < (3, 11):\n    from exceptiongroup import BaseExceptionGroup\n\nTracebackStyle = Literal[\"long\", \"short\", \"line\", \"no\", \"native\", \"value\", \"auto\"]\n\nEXCEPTION_OR_MORE = Union[Type[Exception], Tuple[Type[Exception], ...]]\n\n\nclass Code:\n    \"\"\"Wrapper around Python code objects.\"\"\"\n\n    __slots__ = (\"raw\",)\n\n    def __init__(self, obj: CodeType) -> None:\n        self.raw = obj\n\n    @classmethod\n    def from_function(cls, obj: object) -> Code:\n        return cls(getrawcode(obj))\n\n    def __eq__(self, other):\n        return self.raw == other.raw\n\n    # Ignore type because of https://github.com/python/mypy/issues/4266.\n    __hash__ = None  # type: ignore\n\n    @property\n    def firstlineno(self) -> int:\n        return self.raw.co_firstlineno - 1\n\n    @property\n    def name(self) -> str:\n        return self.raw.co_name\n\n    @property\n    def path(self) -> Path | str:\n        \"\"\"Return a path object pointing to source code, or an ``str`` in\n        case of ``OSError`` / non-existing file.\"\"\"\n        if not self.raw.co_filename:\n            return \"\"\n        try:\n            p = absolutepath(self.raw.co_filename)\n            # maybe don't try this checking\n            if not p.exists():\n                raise OSError(\"path check failed.\")\n            return p\n        except OSError:\n            # XXX maybe try harder like the weird logic\n            # in the standard lib [linecache.updatecache] does?\n            return self.raw.co_filename\n\n    @property\n    def fullsource(self) -> Source | None:\n        \"\"\"Return a _pytest._code.Source object for the full source file of the code.\"\"\"\n        full, _ = findsource(self.raw)\n        return full\n\n    def source(self) -> Source:\n        \"\"\"Return a _pytest._code.Source object for the code object's source only.\"\"\"\n        # return source only for that part of code\n        return Source(self.raw)\n\n    def getargs(self, var: bool = False) -> tuple[str, ...]:\n        \"\"\"Return a tuple with the argument names for the code object.\n\n        If 'var' is set True also return the names of the variable and\n        keyword arguments when present.\n        \"\"\"\n        # Handy shortcut for getting args.\n        raw = self.raw\n        argcount = raw.co_argcount\n        if var:\n            argcount += raw.co_flags & CO_VARARGS\n            argcount += raw.co_flags & CO_VARKEYWORDS\n        return raw.co_varnames[:argcount]\n\n\nclass Frame:\n    \"\"\"Wrapper around a Python frame holding f_locals and f_globals\n    in which expressions can be evaluated.\"\"\"\n\n    __slots__ = (\"raw\",)\n\n    def __init__(self, frame: FrameType) -> None:\n        self.raw = frame\n\n    @property\n    def lineno(self) -> int:\n        return self.raw.f_lineno - 1\n\n    @property\n    def f_globals(self) -> dict[str, Any]:\n        return self.raw.f_globals\n\n    @property\n    def f_locals(self) -> dict[str, Any]:\n        return self.raw.f_locals\n\n    @property\n    def code(self) -> Code:\n        return Code(self.raw.f_code)\n\n    @property\n    def statement(self) -> Source:\n        \"\"\"Statement this frame is at.\"\"\"\n        if self.code.fullsource is None:\n            return Source(\"\")\n        return self.code.fullsource.getstatement(self.lineno)\n\n    def eval(self, code, **vars):\n        \"\"\"Evaluate 'code' in the frame.\n\n        'vars' are optional additional local variables.\n\n        Returns the result of the evaluation.\n        \"\"\"\n        f_locals = self.f_locals.copy()\n        f_locals.update(vars)\n        return eval(code, self.f_globals, f_locals)\n\n    def repr(self, object: object) -> str:\n        \"\"\"Return a 'safe' (non-recursive, one-line) string repr for 'object'.\"\"\"\n        return saferepr(object)\n\n    def getargs(self, var: bool = False):\n        \"\"\"Return a list of tuples (name, value) for all arguments.\n\n        If 'var' is set True, also include the variable and keyword arguments\n        when present.\n        \"\"\"\n        retval = []\n        for arg in self.code.getargs(var):\n            try:\n                retval.append((arg, self.f_locals[arg]))\n            except KeyError:\n                pass  # this can occur when using Psyco\n        return retval\n\n\nclass TracebackEntry:\n    \"\"\"A single entry in a Traceback.\"\"\"\n\n    __slots__ = (\"_rawentry\", \"_repr_style\")\n\n    def __init__(\n        self,\n        rawentry: TracebackType,\n        repr_style: Literal[\"short\", \"long\"] | None = None,\n    ) -> None:\n        self._rawentry: Final = rawentry\n        self._repr_style: Final = repr_style\n\n    def with_repr_style(\n        self, repr_style: Literal[\"short\", \"long\"] | None\n    ) -> TracebackEntry:\n        return TracebackEntry(self._rawentry, repr_style)\n\n    @property\n    def lineno(self) -> int:\n        return self._rawentry.tb_lineno - 1\n\n    @property\n    def frame(self) -> Frame:\n        return Frame(self._rawentry.tb_frame)\n\n    @property\n    def relline(self) -> int:\n        return self.lineno - self.frame.code.firstlineno\n\n    def __repr__(self) -> str:\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)\n\n    @property\n    def statement(self) -> Source:\n        \"\"\"_pytest._code.Source object for the current statement.\"\"\"\n        source = self.frame.code.fullsource\n        assert source is not None\n        return source.getstatement(self.lineno)\n\n    @property\n    def path(self) -> Path | str:\n        \"\"\"Path to the source code.\"\"\"\n        return self.frame.code.path\n\n    @property\n    def locals(self) -> dict[str, Any]:\n        \"\"\"Locals of underlying frame.\"\"\"\n        return self.frame.f_locals\n\n    def getfirstlinesource(self) -> int:\n        return self.frame.code.firstlineno\n\n    def getsource(\n        self, astcache: dict[str | Path, ast.AST] | None = None\n    ) -> Source | None:\n        \"\"\"Return failing source code.\"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None and astcache is not None:\n                astcache[key] = astnode\n        return source[start:end]\n\n    source = property(getsource)\n\n    def ishidden(self, excinfo: ExceptionInfo[BaseException] | None) -> bool:\n        \"\"\"Return True if the current frame has a var __tracebackhide__\n        resolving to True.\n\n        If __tracebackhide__ is a callable, it gets called with the\n        ExceptionInfo instance and can decide whether to hide the traceback.\n\n        Mostly for internal use.\n        \"\"\"\n        tbh: bool | Callable[[ExceptionInfo[BaseException] | None], bool] = False\n        for maybe_ns_dct in (self.frame.f_locals, self.frame.f_globals):\n            # in normal cases, f_locals and f_globals are dictionaries\n            # however via `exec(...)` / `eval(...)` they can be other types\n            # (even incorrect types!).\n            # as such, we suppress all exceptions while accessing __tracebackhide__\n            try:\n                tbh = maybe_ns_dct[\"__tracebackhide__\"]\n            except Exception:\n                pass\n            else:\n                break\n        if tbh and callable(tbh):\n            return tbh(excinfo)\n        return tbh\n\n    def __str__(self) -> str:\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except BaseException:\n            line = \"???\"\n        # This output does not quite match Python's repr for traceback entries,\n        # but changing it to do so would break certain plugins.  See\n        # https://github.com/pytest-dev/pytest/pull/7535/ for details.\n        return \"  File %r:%d in %s\\n  %s\\n\" % (\n            str(self.path),\n            self.lineno + 1,\n            name,\n            line,\n        )\n\n    @property\n    def name(self) -> str:\n        \"\"\"co_name of underlying code.\"\"\"\n        return self.frame.code.raw.co_name\n\n\nclass Traceback(List[TracebackEntry]):\n    \"\"\"Traceback objects encapsulate and offer higher level access to Traceback entries.\"\"\"\n\n    def __init__(\n        self,\n        tb: TracebackType | Iterable[TracebackEntry],\n    ) -> None:\n        \"\"\"Initialize from given python traceback object and ExceptionInfo.\"\"\"\n        if isinstance(tb, TracebackType):\n\n            def f(cur: TracebackType) -> Iterable[TracebackEntry]:\n                cur_: TracebackType | None = cur\n                while cur_ is not None:\n                    yield TracebackEntry(cur_)\n                    cur_ = cur_.tb_next\n\n            super().__init__(f(tb))\n        else:\n            super().__init__(tb)\n\n    def cut(\n        self,\n        path: os.PathLike[str] | str | None = None,\n        lineno: int | None = None,\n        firstlineno: int | None = None,\n        excludepath: os.PathLike[str] | None = None,\n    ) -> Traceback:\n        \"\"\"Return a Traceback instance wrapping part of this Traceback.\n\n        By providing any combination of path, lineno and firstlineno, the\n        first frame to start the to-be-returned traceback is determined.\n\n        This allows cutting the first part of a Traceback instance e.g.\n        for formatting reasons (removing some uninteresting bits that deal\n        with handling of the exception/traceback).\n        \"\"\"\n        path_ = None if path is None else os.fspath(path)\n        excludepath_ = None if excludepath is None else os.fspath(excludepath)\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if path is not None and str(codepath) != path_:\n                continue\n            if (\n                excludepath is not None\n                and isinstance(codepath, Path)\n                and excludepath_ in (str(p) for p in codepath.parents)  # type: ignore[operator]\n            ):\n                continue\n            if lineno is not None and x.lineno != lineno:\n                continue\n            if firstlineno is not None and x.frame.code.firstlineno != firstlineno:\n                continue\n            return Traceback(x._rawentry)\n        return self\n\n    @overload\n    def __getitem__(self, key: SupportsIndex) -> TracebackEntry: ...\n\n    @overload\n    def __getitem__(self, key: slice) -> Traceback: ...\n\n    def __getitem__(self, key: SupportsIndex | slice) -> TracebackEntry | Traceback:\n        if isinstance(key, slice):\n            return self.__class__(super().__getitem__(key))\n        else:\n            return super().__getitem__(key)\n\n    def filter(\n        self,\n        excinfo_or_fn: ExceptionInfo[BaseException] | Callable[[TracebackEntry], bool],\n        /,\n    ) -> Traceback:\n        \"\"\"Return a Traceback instance with certain items removed.\n\n        If the filter is an `ExceptionInfo`, removes all the ``TracebackEntry``s\n        which are hidden (see ishidden() above).\n\n        Otherwise, the filter is a function that gets a single argument, a\n        ``TracebackEntry`` instance, and should return True when the item should\n        be added to the ``Traceback``, False when not.\n        \"\"\"\n        if isinstance(excinfo_or_fn, ExceptionInfo):\n            fn = lambda x: not x.ishidden(excinfo_or_fn)  # noqa: E731\n        else:\n            fn = excinfo_or_fn\n        return Traceback(filter(fn, self))\n\n    def recursionindex(self) -> int | None:\n        \"\"\"Return the index of the frame/TracebackEntry where recursion originates if\n        appropriate, None if no recursion occurred.\"\"\"\n        cache: dict[tuple[Any, int, int], list[dict[str, Any]]] = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            values = cache.setdefault(key, [])\n            # Since Python 3.13 f_locals is a proxy, freeze it.\n            loc = dict(entry.frame.f_locals)\n            if values:\n                for otherloc in values:\n                    if otherloc == loc:\n                        return i\n            values.append(loc)\n        return None\n\n\nE = TypeVar(\"E\", bound=BaseException, covariant=True)\n\n\n@final\n@dataclasses.dataclass\nclass ExceptionInfo(Generic[E]):\n    \"\"\"Wraps sys.exc_info() objects and offers help for navigating the traceback.\"\"\"\n\n    _assert_start_repr: ClassVar = \"AssertionError('assert \"\n\n    _excinfo: tuple[type[E], E, TracebackType] | None\n    _striptext: str\n    _traceback: Traceback | None\n\n    def __init__(\n        self,\n        excinfo: tuple[type[E], E, TracebackType] | None,\n        striptext: str = \"\",\n        traceback: Traceback | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        self._excinfo = excinfo\n        self._striptext = striptext\n        self._traceback = traceback\n\n    @classmethod\n    def from_exception(\n        cls,\n        # Ignoring error: \"Cannot use a covariant type variable as a parameter\".\n        # This is OK to ignore because this class is (conceptually) readonly.\n        # See https://github.com/python/mypy/issues/7049.\n        exception: E,  # type: ignore[misc]\n        exprinfo: str | None = None,\n    ) -> ExceptionInfo[E]:\n        \"\"\"Return an ExceptionInfo for an existing exception.\n\n        The exception must have a non-``None`` ``__traceback__`` attribute,\n        otherwise this function fails with an assertion error. This means that\n        the exception must have been raised, or added a traceback with the\n        :py:meth:`~BaseException.with_traceback()` method.\n\n        :param exprinfo:\n            A text string helping to determine if we should strip\n            ``AssertionError`` from the output. Defaults to the exception\n            message/``__str__()``.\n\n        .. versionadded:: 7.4\n        \"\"\"\n        assert exception.__traceback__, (\n            \"Exceptions passed to ExcInfo.from_exception(...)\"\n            \" must have a non-None __traceback__.\"\n        )\n        exc_info = (type(exception), exception, exception.__traceback__)\n        return cls.from_exc_info(exc_info, exprinfo)\n\n    @classmethod\n    def from_exc_info(\n        cls,\n        exc_info: tuple[type[E], E, TracebackType],\n        exprinfo: str | None = None,\n    ) -> ExceptionInfo[E]:\n        \"\"\"Like :func:`from_exception`, but using old-style exc_info tuple.\"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext, _ispytest=True)\n\n    @classmethod\n    def from_current(cls, exprinfo: str | None = None) -> ExceptionInfo[BaseException]:\n        \"\"\"Return an ExceptionInfo matching the current traceback.\n\n        .. warning::\n\n            Experimental API\n\n        :param exprinfo:\n            A text string helping to determine if we should strip\n            ``AssertionError`` from the output. Defaults to the exception\n            message/``__str__()``.\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return ExceptionInfo.from_exc_info(exc_info, exprinfo)\n\n    @classmethod\n    def for_later(cls) -> ExceptionInfo[E]:\n        \"\"\"Return an unfilled ExceptionInfo.\"\"\"\n        return cls(None, _ispytest=True)\n\n    def fill_unfilled(self, exc_info: tuple[type[E], E, TracebackType]) -> None:\n        \"\"\"Fill an unfilled ExceptionInfo created with ``for_later()``.\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info\n\n    @property\n    def type(self) -> type[E]:\n        \"\"\"The exception class.\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]\n\n    @property\n    def value(self) -> E:\n        \"\"\"The exception value.\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]\n\n    @property\n    def tb(self) -> TracebackType:\n        \"\"\"The exception raw traceback.\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]\n\n    @property\n    def typename(self) -> str:\n        \"\"\"The type name of the exception.\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__\n\n    @property\n    def traceback(self) -> Traceback:\n        \"\"\"The traceback.\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb)\n        return self._traceback\n\n    @traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value\n\n    def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return f\"<{self.__class__.__name__} {saferepr(self._excinfo[1])} tblen={len(self.traceback)}>\"\n\n    def exconly(self, tryshort: bool = False) -> str:\n        \"\"\"Return the exception as a string.\n\n        When 'tryshort' resolves to True, and the exception is an\n        AssertionError, only the actual exception part of the exception\n        representation is returned (so 'AssertionError: ' is removed from\n        the beginning).\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n\n    def errisinstance(self, exc: EXCEPTION_OR_MORE) -> bool:\n        \"\"\"Return True if the exception is an instance of exc.\n\n        Consider using ``isinstance(excinfo.value, exc)`` instead.\n        \"\"\"\n        return isinstance(self.value, exc)\n\n    def _getreprcrash(self) -> ReprFileLocation | None:\n        # Find last non-hidden traceback entry that led to the exception of the\n        # traceback, or None if all hidden.\n        for i in range(-1, -len(self.traceback) - 1, -1):\n            entry = self.traceback[i]\n            if not entry.ishidden(self):\n                path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n                exconly = self.exconly(tryshort=True)\n                return ReprFileLocation(path, lineno + 1, exconly)\n        return None\n\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: TracebackStyle = \"long\",\n        abspath: bool = False,\n        tbfilter: bool\n        | Callable[[ExceptionInfo[BaseException]], _pytest._code.code.Traceback] = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        truncate_args: bool = True,\n        chain: bool = True,\n    ) -> ReprExceptionInfo | ExceptionChainRepr:\n        \"\"\"Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style:\n            long|short|line|no|native|value traceback style.\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param tbfilter:\n            A filter for traceback entries.\n\n            * If false, don't hide any entries.\n            * If true, hide internal entries and entries that contain a local\n              variable ``__tracebackhide__ = True``.\n            * If a callable, delegates the filtering to the callable.\n\n            Ignored if ``style`` is ``\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool truncate_args:\n            With ``showargs==True``, make sure args can be safely represented as strings.\n\n        :param bool chain:\n            If chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                reprtraceback=ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type,\n                        self.value,\n                        self.traceback[0]._rawentry if self.traceback else None,\n                    )\n                ),\n                reprcrash=self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            truncate_args=truncate_args,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)\n\n    def _stringify_exception(self, exc: BaseException) -> str:\n        try:\n            notes = getattr(exc, \"__notes__\", [])\n        except KeyError:\n            # Workaround for https://github.com/python/cpython/issues/98778 on\n            # Python <= 3.9, and some 3.10 and 3.11 patch versions.\n            HTTPError = getattr(sys.modules.get(\"urllib.error\", None), \"HTTPError\", ())\n            if sys.version_info < (3, 12) and isinstance(exc, HTTPError):\n                notes = []\n            else:\n                raise\n\n        return \"\\n\".join(\n            [\n                str(exc),\n                *notes,\n            ]\n        )\n\n    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n    def _group_contains(\n        self,\n        exc_group: BaseExceptionGroup[BaseException],\n        expected_exception: EXCEPTION_OR_MORE,\n        match: str | Pattern[str] | None,\n        target_depth: int | None = None,\n        current_depth: int = 1,\n    ) -> bool:\n        \"\"\"Return `True` if a `BaseExceptionGroup` contains a matching exception.\"\"\"\n        if (target_depth is not None) and (current_depth > target_depth):\n            # already descended past the target depth\n            return False\n        for exc in exc_group.exceptions:\n            if isinstance(exc, BaseExceptionGroup):\n                if self._group_contains(\n                    exc, expected_exception, match, target_depth, current_depth + 1\n                ):\n                    return True\n            if (target_depth is not None) and (current_depth != target_depth):\n                # not at the target depth, no match\n                continue\n            if not isinstance(exc, expected_exception):\n                continue\n            if match is not None:\n                value = self._stringify_exception(exc)\n                if not re.search(match, value):\n                    continue\n            return True\n        return False\n\n    def group_contains(\n        self,\n        expected_exception: EXCEPTION_OR_MORE,\n        *,\n        match: str | Pattern[str] | None = None,\n        depth: int | None = None,\n    ) -> bool:\n        \"\"\"Check whether a captured exception group contains a matching exception.\n\n        :param Type[BaseException] | Tuple[Type[BaseException]] expected_exception:\n            The expected exception type, or a tuple if one of multiple possible\n            exception types are expected.\n\n        :param str | Pattern[str] | None match:\n            If specified, a string containing a regular expression,\n            or a regular expression object, that is tested against the string\n            representation of the exception and its `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__`\n            using :func:`re.search`.\n\n            To match a literal string that may contain :ref:`special characters\n            <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.\n\n        :param Optional[int] depth:\n            If `None`, will search for a matching exception at any nesting depth.\n            If >= 1, will only match an exception if it's at the specified depth (depth = 1 being\n            the exceptions contained within the topmost exception group).\n\n        .. versionadded:: 8.0\n        \"\"\"\n        msg = \"Captured exception is not an instance of `BaseExceptionGroup`\"\n        assert isinstance(self.value, BaseExceptionGroup), msg\n        msg = \"`depth` must be >= 1 if specified\"\n        assert (depth is None) or (depth >= 1), msg\n        return self._group_contains(self.value, expected_exception, match, depth)\n\n\n@dataclasses.dataclass\nclass FormattedExcinfo:\n    \"\"\"Presenting information about failing Functions and Generators.\"\"\"\n\n    # for traceback entries\n    flow_marker: ClassVar = \">\"\n    fail_marker: ClassVar = \"E\"\n\n    showlocals: bool = False\n    style: TracebackStyle = \"long\"\n    abspath: bool = True\n    tbfilter: bool | Callable[[ExceptionInfo[BaseException]], Traceback] = True\n    funcargs: bool = False\n    truncate_locals: bool = True\n    truncate_args: bool = True\n    chain: bool = True\n    astcache: dict[str | Path, ast.AST] = dataclasses.field(\n        default_factory=dict, init=False, repr=False\n    )\n\n    def _getindent(self, source: Source) -> int:\n        # Figure out indent for the given source.\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except BaseException:\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except BaseException:\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))\n\n    def _getentrysource(self, entry: TracebackEntry) -> Source | None:\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source\n\n    def repr_args(self, entry: TracebackEntry) -> ReprFuncArgs | None:\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                if self.truncate_args:\n                    str_repr = saferepr(argvalue)\n                else:\n                    str_repr = saferepr(argvalue, maxsize=None)\n                args.append((argname, str_repr))\n            return ReprFuncArgs(args)\n        return None\n\n    def get_source(\n        self,\n        source: Source | None,\n        line_index: int = -1,\n        excinfo: ExceptionInfo[BaseException] | None = None,\n        short: bool = False,\n    ) -> list[str]:\n        \"\"\"Return formatted and marked up source lines.\"\"\"\n        lines = []\n        if source is not None and line_index < 0:\n            line_index += len(source)\n        if source is None or line_index >= len(source.lines) or line_index < 0:\n            # `line_index` could still be outside `range(len(source.lines))` if\n            # we're processing AST with pathological position attributes.\n            source = Source(\"???\")\n            line_index = 0\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n\n    def get_exconly(\n        self,\n        excinfo: ExceptionInfo[BaseException],\n        indent: int = 4,\n        markall: bool = False,\n    ) -> list[str]:\n        lines = []\n        indentstr = \" \" * indent\n        # Get the real exception information out.\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indentstr[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indentstr\n        return lines\n\n    def repr_locals(self, locals: Mapping[str, object]) -> ReprLocals | None:\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value, (list, tuple, dict)):\n                    lines.append(f\"{name:<10} = {str_repr}\")\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)\n        return None\n\n    def repr_traceback_entry(\n        self,\n        entry: TracebackEntry | None,\n        excinfo: ExceptionInfo[BaseException] | None = None,\n    ) -> ReprEntry:\n        lines: list[str] = []\n        style = (\n            entry._repr_style\n            if entry is not None and entry._repr_style is not None\n            else self.style\n        )\n        if style in (\"short\", \"long\") and entry is not None:\n            source = self._getentrysource(entry)\n            if source is None:\n                source = Source(\"???\")\n                line_index = 0\n            else:\n                line_index = entry.lineno - entry.getfirstlinesource()\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = f\"in {entry.name}\"\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            entry_path = entry.path\n            path = self._makepath(entry_path)\n            reprfileloc = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, reprfileloc, style)\n        elif style == \"value\":\n            if excinfo:\n                lines.extend(str(excinfo.value).split(\"\\n\"))\n            return ReprEntry(lines, None, None, None, style)\n        else:\n            if excinfo:\n                lines.extend(self.get_exconly(excinfo, indent=4))\n            return ReprEntry(lines, None, None, None, style)\n\n    def _makepath(self, path: Path | str) -> str:\n        if not self.abspath and isinstance(path, Path):\n            try:\n                np = bestrelpath(Path.cwd(), path)\n            except OSError:\n                return str(path)\n            if len(np) < len(str(path)):\n                return np\n        return str(path)\n\n    def repr_traceback(self, excinfo: ExceptionInfo[BaseException]) -> ReprTraceback:\n        traceback = excinfo.traceback\n        if callable(self.tbfilter):\n            traceback = self.tbfilter(excinfo)\n        elif self.tbfilter:\n            traceback = traceback.filter(excinfo)\n\n        if isinstance(excinfo.value, RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        if not traceback:\n            if extraline is None:\n                extraline = \"All traceback entries are hidden. Pass `--full-trace` to see hidden and internal frames.\"\n            entries = [self.repr_traceback_entry(None, excinfo)]\n            return ReprTraceback(entries, extraline, style=self.style)\n\n        last = traceback[-1]\n        if self.style == \"value\":\n            entries = [self.repr_traceback_entry(last, excinfo)]\n            return ReprTraceback(entries, None, style=self.style)\n\n        entries = [\n            self.repr_traceback_entry(entry, excinfo if last == entry else None)\n            for entry in traceback\n        ]\n        return ReprTraceback(entries, extraline, style=self.style)\n\n    def _truncate_recursive_traceback(\n        self, traceback: Traceback\n    ) -> tuple[Traceback, str | None]:\n        \"\"\"Truncate the given recursive traceback trying to find the starting\n        point of the recursion.\n\n        The detection is done by going through each traceback entry and\n        finding the point in which the locals of the frame are equal to the\n        locals of a previous frame (see ``recursionindex()``).\n\n        Handle the situation where the recursion process might raise an\n        exception (for example comparing numpy arrays using equality raises a\n        TypeError), in which case we do our best to warn the user of the\n        error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline: str | None = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                f\"    {type(e).__name__}: {e!s}\\n\"\n                f\"  Displaying first and last {max_frames} stack frames out of {len(traceback)}.\"\n            )\n            # Type ignored because adding two instances of a List subtype\n            # currently incorrectly has type List instead of the subtype.\n            traceback = traceback[:max_frames] + traceback[-max_frames:]  # type: ignore\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline\n\n    def repr_excinfo(self, excinfo: ExceptionInfo[BaseException]) -> ExceptionChainRepr:\n        repr_chain: list[tuple[ReprTraceback, ReprFileLocation | None, str | None]] = []\n        e: BaseException | None = excinfo.value\n        excinfo_: ExceptionInfo[BaseException] | None = excinfo\n        descr = None\n        seen: set[int] = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n\n            if excinfo_:\n                # Fall back to native traceback as a temporary workaround until\n                # full support for exception groups added to ExceptionInfo.\n                # See https://github.com/pytest-dev/pytest/issues/9159\n                if isinstance(e, BaseExceptionGroup):\n                    reprtraceback: ReprTracebackNative | ReprTraceback = (\n                        ReprTracebackNative(\n                            traceback.format_exception(\n                                type(excinfo_.value),\n                                excinfo_.value,\n                                excinfo_.traceback[0]._rawentry,\n                            )\n                        )\n                    )\n                else:\n                    reprtraceback = self.repr_traceback(excinfo_)\n                reprcrash = excinfo_._getreprcrash()\n            else:\n                # Fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work.\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo_ = ExceptionInfo.from_exception(e) if e.__traceback__ else None\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo_ = ExceptionInfo.from_exception(e) if e.__traceback__ else None\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)\n\n\n@dataclasses.dataclass(eq=False)\nclass TerminalRepr:\n    def __str__(self) -> str:\n        # FYI this is called from pytest-xdist's serialization of exception\n        # information.\n        io = StringIO()\n        tw = TerminalWriter(file=io)\n        self.toterminal(tw)\n        return io.getvalue().strip()\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__} instance at {id(self):0x}>\"\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        raise NotImplementedError()\n\n\n# This class is abstract -- only subclasses are instantiated.\n@dataclasses.dataclass(eq=False)\nclass ExceptionRepr(TerminalRepr):\n    # Provided by subclasses.\n    reprtraceback: ReprTraceback\n    reprcrash: ReprFileLocation | None\n    sections: list[tuple[str, str, str]] = dataclasses.field(\n        init=False, default_factory=list\n    )\n\n    def addsection(self, name: str, content: str, sep: str = \"-\") -> None:\n        self.sections.append((name, content, sep))\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        for name, content, sep in self.sections:\n            tw.sep(sep, name)\n            tw.line(content)\n\n\n@dataclasses.dataclass(eq=False)\nclass ExceptionChainRepr(ExceptionRepr):\n    chain: Sequence[tuple[ReprTraceback, ReprFileLocation | None, str | None]]\n\n    def __init__(\n        self,\n        chain: Sequence[tuple[ReprTraceback, ReprFileLocation | None, str | None]],\n    ) -> None:\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain.\n        super().__init__(\n            reprtraceback=chain[-1][0],\n            reprcrash=chain[-1][1],\n        )\n        self.chain = chain\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)\n\n\n@dataclasses.dataclass(eq=False)\nclass ReprExceptionInfo(ExceptionRepr):\n    reprtraceback: ReprTraceback\n    reprcrash: ReprFileLocation | None\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)\n\n\n@dataclasses.dataclass(eq=False)\nclass ReprTraceback(TerminalRepr):\n    reprentries: Sequence[ReprEntry | ReprEntryNative]\n    extraline: str | None\n    style: TracebackStyle\n\n    entrysep: ClassVar = \"_ \"\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        # The entries might have different styles.\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)\n\n\nclass ReprTracebackNative(ReprTraceback):\n    def __init__(self, tblines: Sequence[str]) -> None:\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None\n        self.style = \"native\"\n\n\n@dataclasses.dataclass(eq=False)\nclass ReprEntryNative(TerminalRepr):\n    lines: Sequence[str]\n\n    style: ClassVar[TracebackStyle] = \"native\"\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        tw.write(\"\".join(self.lines))\n\n\n@dataclasses.dataclass(eq=False)\nclass ReprEntry(TerminalRepr):\n    lines: Sequence[str]\n    reprfuncargs: ReprFuncArgs | None\n    reprlocals: ReprLocals | None\n    reprfileloc: ReprFileLocation | None\n    style: TracebackStyle\n\n    def _write_entry_lines(self, tw: TerminalWriter) -> None:\n        \"\"\"Write the source code portions of a list of traceback entries with syntax highlighting.\n\n        Usually entries are lines like these:\n\n            \"     x = 1\"\n            \">    assert x == 2\"\n            \"E    assert 1 == 2\"\n\n        This function takes care of rendering the \"source\" portions of it (the lines without\n        the \"E\" prefix) using syntax highlighting, taking care to not highlighting the \">\"\n        character, as doing so might break line continuations.\n        \"\"\"\n        if not self.lines:\n            return\n\n        # separate indents and source lines that are not failures: we want to\n        # highlight the code but not the indentation, which may contain markers\n        # such as \">   assert 0\"\n        fail_marker = f\"{FormattedExcinfo.fail_marker}   \"\n        indent_size = len(fail_marker)\n        indents: list[str] = []\n        source_lines: list[str] = []\n        failure_lines: list[str] = []\n        for index, line in enumerate(self.lines):\n            is_failure_line = line.startswith(fail_marker)\n            if is_failure_line:\n                # from this point on all lines are considered part of the failure\n                failure_lines.extend(self.lines[index:])\n                break\n            else:\n                if self.style == \"value\":\n                    source_lines.append(line)\n                else:\n                    indents.append(line[:indent_size])\n                    source_lines.append(line[indent_size:])\n\n        tw._write_source(source_lines, indents)\n\n        # failure lines are always completely red and bold\n        for line in failure_lines:\n            tw.line(line, bold=True, red=True)\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        if self.style == \"short\":\n            if self.reprfileloc:\n                self.reprfileloc.toterminal(tw)\n            self._write_entry_lines(tw)\n            if self.reprlocals:\n                self.reprlocals.toterminal(tw, indent=\" \" * 8)\n            return\n\n        if self.reprfuncargs:\n            self.reprfuncargs.toterminal(tw)\n\n        self._write_entry_lines(tw)\n\n        if self.reprlocals:\n            tw.line(\"\")\n            self.reprlocals.toterminal(tw)\n        if self.reprfileloc:\n            if self.lines:\n                tw.line(\"\")\n            self.reprfileloc.toterminal(tw)\n\n    def __str__(self) -> str:\n        return \"{}\\n{}\\n{}\".format(\n            \"\\n\".join(self.lines), self.reprlocals, self.reprfileloc\n        )\n\n\n@dataclasses.dataclass(eq=False)\nclass ReprFileLocation(TerminalRepr):\n    path: str\n    lineno: int\n    message: str\n\n    def __post_init__(self) -> None:\n        self.path = str(self.path)\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        # Filename and lineno output for each entry, using an output format\n        # that most editors understand.\n        msg = self.message\n        i = msg.find(\"\\n\")\n        if i != -1:\n            msg = msg[:i]\n        tw.write(self.path, bold=True, red=True)\n        tw.line(f\":{self.lineno}: {msg}\")\n\n\n@dataclasses.dataclass(eq=False)\nclass ReprLocals(TerminalRepr):\n    lines: Sequence[str]\n\n    def toterminal(self, tw: TerminalWriter, indent=\"\") -> None:\n        for line in self.lines:\n            tw.line(indent + line)\n\n\n@dataclasses.dataclass(eq=False)\nclass ReprFuncArgs(TerminalRepr):\n    args: Sequence[tuple[str, object]]\n\n    def toterminal(self, tw: TerminalWriter) -> None:\n        if self.args:\n            linesofar = \"\"\n            for name, value in self.args:\n                ns = f\"{name} = {value}\"\n                if len(ns) + len(linesofar) + 2 > tw.fullwidth:\n                    if linesofar:\n                        tw.line(linesofar)\n                    linesofar = ns\n                else:\n                    if linesofar:\n                        linesofar += \", \" + ns\n                    else:\n                        linesofar = ns\n            if linesofar:\n                tw.line(linesofar)\n            tw.line(\"\")\n\n\ndef getfslineno(obj: object) -> tuple[str | Path, int]:\n    \"\"\"Return source location (path, lineno) for the given object.\n\n    If the source cannot be determined return (\"\", -1).\n\n    The line number is 0-based.\n    \"\"\"\n    # xxx let decorators etc specify a sane ordering\n    # NOTE: this used to be done in _pytest.compat.getfslineno, initially added\n    #       in 6ec13a2b9.  It (\"place_as\") appears to be something very custom.\n    obj = get_real_func(obj)\n    if hasattr(obj, \"place_as\"):\n        obj = obj.place_as\n\n    try:\n        code = Code.from_function(obj)\n    except TypeError:\n        try:\n            fn = inspect.getsourcefile(obj) or inspect.getfile(obj)  # type: ignore[arg-type]\n        except TypeError:\n            return \"\", -1\n\n        fspath = fn and absolutepath(fn) or \"\"\n        lineno = -1\n        if fspath:\n            try:\n                _, lineno = findsource(obj)\n            except OSError:\n                pass\n        return fspath, lineno\n\n    return code.path, code.firstlineno\n\n\n# Relative paths that we use to filter traceback entries from appearing to the user;\n# see filter_traceback.\n# note: if we need to add more paths than what we have now we should probably use a list\n# for better maintenance.\n\n_PLUGGY_DIR = Path(pluggy.__file__.rstrip(\"oc\"))\n# pluggy is either a package or a single module depending on the version\nif _PLUGGY_DIR.name == \"__init__.py\":\n    _PLUGGY_DIR = _PLUGGY_DIR.parent\n_PYTEST_DIR = Path(_pytest.__file__).parent\n\n\ndef filter_traceback(entry: TracebackEntry) -> bool:\n    \"\"\"Return True if a TracebackEntry instance should be included in tracebacks.\n\n    We hide traceback entries of:\n\n    * dynamically generated code (no code to show up for it);\n    * internal traceback from pytest or its internal libraries, py and pluggy.\n    \"\"\"\n    # entry.path might sometimes return a str object when the entry\n    # points to dynamically generated code.\n    # See https://bitbucket.org/pytest-dev/py/issues/71.\n    raw_filename = entry.frame.code.raw.co_filename\n    is_generated = \"<\" in raw_filename and \">\" in raw_filename\n    if is_generated:\n        return False\n\n    # entry.path might point to a non-existing file, in which case it will\n    # also return a str object. See #1133.\n    p = Path(entry.path)\n\n    parents = p.parents\n    if _PLUGGY_DIR in parents:\n        return False\n    if _PYTEST_DIR in parents:\n        return False\n\n    return True\n", "src/_pytest/assertion/util.py": "# mypy: allow-untyped-defs\n\"\"\"Utilities for assertion debugging.\"\"\"\n\nfrom __future__ import annotations\n\nimport collections.abc\nimport os\nimport pprint\nfrom typing import AbstractSet\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Iterable\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import Protocol\nfrom typing import Sequence\nfrom unicodedata import normalize\n\nfrom _pytest import outcomes\nimport _pytest._code\nfrom _pytest._io.pprint import PrettyPrinter\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest._io.saferepr import saferepr_unlimited\nfrom _pytest.config import Config\n\n\n# The _reprcompare attribute on the util module is used by the new assertion\n# interpretation code and assertion rewriter to detect this plugin was\n# loaded and in turn call the hooks defined here as part of the\n# DebugInterpreter.\n_reprcompare: Callable[[str, object, object], str | None] | None = None\n\n# Works similarly as _reprcompare attribute. Is populated with the hook call\n# when pytest_runtest_setup is called.\n_assertion_pass: Callable[[int, str, str], None] | None = None\n\n# Config object which is assigned during pytest_runtest_protocol.\n_config: Config | None = None\n\n\nclass _HighlightFunc(Protocol):\n    def __call__(self, source: str, lexer: Literal[\"diff\", \"python\"] = \"python\") -> str:\n        \"\"\"Apply highlighting to the given source.\"\"\"\n\n\ndef format_explanation(explanation: str) -> str:\n    r\"\"\"Format an explanation.\n\n    Normally all embedded newlines are escaped, however there are\n    three exceptions: \\n{, \\n} and \\n~.  The first two are intended\n    cover nested explanations, see function and attribute explanations\n    for examples (.visit_Call(), visit_Attribute()).  The last one is\n    for when one explanation needs to span multiple lines, e.g. when\n    displaying diffs.\n    \"\"\"\n    lines = _split_explanation(explanation)\n    result = _format_lines(lines)\n    return \"\\n\".join(result)\n\n\ndef _split_explanation(explanation: str) -> list[str]:\n    r\"\"\"Return a list of individual lines in the explanation.\n\n    This will return a list of lines split on '\\n{', '\\n}' and '\\n~'.\n    Any other newlines will be escaped and appear in the line as the\n    literal '\\n' characters.\n    \"\"\"\n    raw_lines = (explanation or \"\").split(\"\\n\")\n    lines = [raw_lines[0]]\n    for values in raw_lines[1:]:\n        if values and values[0] in [\"{\", \"}\", \"~\", \">\"]:\n            lines.append(values)\n        else:\n            lines[-1] += \"\\\\n\" + values\n    return lines\n\n\ndef _format_lines(lines: Sequence[str]) -> list[str]:\n    \"\"\"Format the individual lines.\n\n    This will replace the '{', '}' and '~' characters of our mini formatting\n    language with the proper 'where ...', 'and ...' and ' + ...' text, taking\n    care of indentation along the way.\n\n    Return a list of formatted lines.\n    \"\"\"\n    result = list(lines[:1])\n    stack = [0]\n    stackcnt = [0]\n    for line in lines[1:]:\n        if line.startswith(\"{\"):\n            if stackcnt[-1]:\n                s = \"and   \"\n            else:\n                s = \"where \"\n            stack.append(len(result))\n            stackcnt[-1] += 1\n            stackcnt.append(0)\n            result.append(\" +\" + \"  \" * (len(stack) - 1) + s + line[1:])\n        elif line.startswith(\"}\"):\n            stack.pop()\n            stackcnt.pop()\n            result[stack[-1]] += line[1:]\n        else:\n            assert line[0] in [\"~\", \">\"]\n            stack[-1] += 1\n            indent = len(stack) if line.startswith(\"~\") else len(stack) - 1\n            result.append(\"  \" * indent + line[1:])\n    assert len(stack) == 1\n    return result\n\n\ndef issequence(x: Any) -> bool:\n    return isinstance(x, collections.abc.Sequence) and not isinstance(x, str)\n\n\ndef istext(x: Any) -> bool:\n    return isinstance(x, str)\n\n\ndef isdict(x: Any) -> bool:\n    return isinstance(x, dict)\n\n\ndef isset(x: Any) -> bool:\n    return isinstance(x, (set, frozenset))\n\n\ndef isnamedtuple(obj: Any) -> bool:\n    return isinstance(obj, tuple) and getattr(obj, \"_fields\", None) is not None\n\n\ndef isdatacls(obj: Any) -> bool:\n    return getattr(obj, \"__dataclass_fields__\", None) is not None\n\n\ndef isattrs(obj: Any) -> bool:\n    return getattr(obj, \"__attrs_attrs__\", None) is not None\n\n\ndef isiterable(obj: Any) -> bool:\n    try:\n        iter(obj)\n        return not istext(obj)\n    except Exception:\n        return False\n\n\ndef has_default_eq(\n    obj: object,\n) -> bool:\n    \"\"\"Check if an instance of an object contains the default eq\n\n    First, we check if the object's __eq__ attribute has __code__,\n    if so, we check the equally of the method code filename (__code__.co_filename)\n    to the default one generated by the dataclass and attr module\n    for dataclasses the default co_filename is <string>, for attrs class, the __eq__ should contain \"attrs eq generated\"\n    \"\"\"\n    # inspired from https://github.com/willmcgugan/rich/blob/07d51ffc1aee6f16bd2e5a25b4e82850fb9ed778/rich/pretty.py#L68\n    if hasattr(obj.__eq__, \"__code__\") and hasattr(obj.__eq__.__code__, \"co_filename\"):\n        code_filename = obj.__eq__.__code__.co_filename\n\n        if isattrs(obj):\n            return \"attrs generated eq\" in code_filename\n\n        return code_filename == \"<string>\"  # data class\n    return True\n\n\ndef assertrepr_compare(\n    config, op: str, left: Any, right: Any, use_ascii: bool = False\n) -> list[str] | None:\n    \"\"\"Return specialised explanations for some operators/operands.\"\"\"\n    verbose = config.get_verbosity(Config.VERBOSITY_ASSERTIONS)\n\n    # Strings which normalize equal are often hard to distinguish when printed; use ascii() to make this easier.\n    # See issue #3246.\n    use_ascii = (\n        isinstance(left, str)\n        and isinstance(right, str)\n        and normalize(\"NFD\", left) == normalize(\"NFD\", right)\n    )\n\n    if verbose > 1:\n        left_repr = saferepr_unlimited(left, use_ascii=use_ascii)\n        right_repr = saferepr_unlimited(right, use_ascii=use_ascii)\n    else:\n        # XXX: \"15 chars indentation\" is wrong\n        #      (\"E       AssertionError: assert \"); should use term width.\n        maxsize = (\n            80 - 15 - len(op) - 2\n        ) // 2  # 15 chars indentation, 1 space around op\n\n        left_repr = saferepr(left, maxsize=maxsize, use_ascii=use_ascii)\n        right_repr = saferepr(right, maxsize=maxsize, use_ascii=use_ascii)\n\n    summary = f\"{left_repr} {op} {right_repr}\"\n    highlighter = config.get_terminal_writer()._highlight\n\n    explanation = None\n    try:\n        if op == \"==\":\n            explanation = _compare_eq_any(left, right, highlighter, verbose)\n        elif op == \"not in\":\n            if istext(left) and istext(right):\n                explanation = _notin_text(left, right, verbose)\n        elif op == \"!=\":\n            if isset(left) and isset(right):\n                explanation = [\"Both sets are equal\"]\n        elif op == \">=\":\n            if isset(left) and isset(right):\n                explanation = _compare_gte_set(left, right, highlighter, verbose)\n        elif op == \"<=\":\n            if isset(left) and isset(right):\n                explanation = _compare_lte_set(left, right, highlighter, verbose)\n        elif op == \">\":\n            if isset(left) and isset(right):\n                explanation = _compare_gt_set(left, right, highlighter, verbose)\n        elif op == \"<\":\n            if isset(left) and isset(right):\n                explanation = _compare_lt_set(left, right, highlighter, verbose)\n\n    except outcomes.Exit:\n        raise\n    except Exception:\n        repr_crash = _pytest._code.ExceptionInfo.from_current()._getreprcrash()\n        explanation = [\n            f\"(pytest_assertion plugin: representation of details failed: {repr_crash}.\",\n            \" Probably an object has a faulty __repr__.)\",\n        ]\n\n    if not explanation:\n        return None\n\n    if explanation[0] != \"\":\n        explanation = [\"\", *explanation]\n    return [summary, *explanation]\n\n\ndef _compare_eq_any(\n    left: Any, right: Any, highlighter: _HighlightFunc, verbose: int = 0\n) -> list[str]:\n    explanation = []\n    if istext(left) and istext(right):\n        explanation = _diff_text(left, right, verbose)\n    else:\n        from _pytest.python_api import ApproxBase\n\n        if isinstance(left, ApproxBase) or isinstance(right, ApproxBase):\n            # Although the common order should be obtained == expected, this ensures both ways\n            approx_side = left if isinstance(left, ApproxBase) else right\n            other_side = right if isinstance(left, ApproxBase) else left\n\n            explanation = approx_side._repr_compare(other_side)\n        elif type(left) is type(right) and (\n            isdatacls(left) or isattrs(left) or isnamedtuple(left)\n        ):\n            # Note: unlike dataclasses/attrs, namedtuples compare only the\n            # field values, not the type or field names. But this branch\n            # intentionally only handles the same-type case, which was often\n            # used in older code bases before dataclasses/attrs were available.\n            explanation = _compare_eq_cls(left, right, highlighter, verbose)\n        elif issequence(left) and issequence(right):\n            explanation = _compare_eq_sequence(left, right, highlighter, verbose)\n        elif isset(left) and isset(right):\n            explanation = _compare_eq_set(left, right, highlighter, verbose)\n        elif isdict(left) and isdict(right):\n            explanation = _compare_eq_dict(left, right, highlighter, verbose)\n\n        if isiterable(left) and isiterable(right):\n            expl = _compare_eq_iterable(left, right, highlighter, verbose)\n            explanation.extend(expl)\n\n    return explanation\n\n\ndef _diff_text(left: str, right: str, verbose: int = 0) -> list[str]:\n    \"\"\"Return the explanation for the diff between text.\n\n    Unless --verbose is used this will skip leading and trailing\n    characters which are identical to keep the diff minimal.\n    \"\"\"\n    from difflib import ndiff\n\n    explanation: list[str] = []\n\n    if verbose < 1:\n        i = 0  # just in case left or right has zero length\n        for i in range(min(len(left), len(right))):\n            if left[i] != right[i]:\n                break\n        if i > 42:\n            i -= 10  # Provide some context\n            explanation = [\n                f\"Skipping {i} identical leading characters in diff, use -v to show\"\n            ]\n            left = left[i:]\n            right = right[i:]\n        if len(left) == len(right):\n            for i in range(len(left)):\n                if left[-i] != right[-i]:\n                    break\n            if i > 42:\n                i -= 10  # Provide some context\n                explanation += [\n                    f\"Skipping {i} identical trailing \"\n                    \"characters in diff, use -v to show\"\n                ]\n                left = left[:-i]\n                right = right[:-i]\n    keepends = True\n    if left.isspace() or right.isspace():\n        left = repr(str(left))\n        right = repr(str(right))\n        explanation += [\"Strings contain only whitespace, escaping them using repr()\"]\n    # \"right\" is the expected base against which we compare \"left\",\n    # see https://github.com/pytest-dev/pytest/issues/3333\n    explanation += [\n        line.strip(\"\\n\")\n        for line in ndiff(right.splitlines(keepends), left.splitlines(keepends))\n    ]\n    return explanation\n\n\ndef _compare_eq_iterable(\n    left: Iterable[Any],\n    right: Iterable[Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    if verbose <= 0 and not running_on_ci():\n        return [\"Use -v to get more diff\"]\n    # dynamic import to speedup pytest\n    import difflib\n\n    left_formatting = PrettyPrinter().pformat(left).splitlines()\n    right_formatting = PrettyPrinter().pformat(right).splitlines()\n\n    explanation = [\"\", \"Full diff:\"]\n    # \"right\" is the expected base against which we compare \"left\",\n    # see https://github.com/pytest-dev/pytest/issues/3333\n    explanation.extend(\n        highlighter(\n            \"\\n\".join(\n                line.rstrip()\n                for line in difflib.ndiff(right_formatting, left_formatting)\n            ),\n            lexer=\"diff\",\n        ).splitlines()\n    )\n    return explanation\n\n\ndef _compare_eq_sequence(\n    left: Sequence[Any],\n    right: Sequence[Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    comparing_bytes = isinstance(left, bytes) and isinstance(right, bytes)\n    explanation: list[str] = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if comparing_bytes:\n                # when comparing bytes, we want to see their ascii representation\n                # instead of their numeric values (#5260)\n                # using a slice gives us the ascii representation:\n                # >>> s = b'foo'\n                # >>> s[0]\n                # 102\n                # >>> s[0:1]\n                # b'f'\n                left_value = left[i : i + 1]\n                right_value = right[i : i + 1]\n            else:\n                left_value = left[i]\n                right_value = right[i]\n\n            explanation.append(\n                f\"At index {i} diff:\"\n                f\" {highlighter(repr(left_value))} != {highlighter(repr(right_value))}\"\n            )\n            break\n\n    if comparing_bytes:\n        # when comparing bytes, it doesn't help to show the \"sides contain one or more\n        # items\" longer explanation, so skip it\n\n        return explanation\n\n    len_diff = len_left - len_right\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                f\"{dir_with_more} contains one more item: {highlighter(extra)}\"\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, highlighter(extra))\n            ]\n    return explanation\n\n\ndef _compare_eq_set(\n    left: AbstractSet[Any],\n    right: AbstractSet[Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    explanation = []\n    explanation.extend(_set_one_sided_diff(\"left\", left, right, highlighter))\n    explanation.extend(_set_one_sided_diff(\"right\", right, left, highlighter))\n    return explanation\n\n\ndef _compare_gt_set(\n    left: AbstractSet[Any],\n    right: AbstractSet[Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    explanation = _compare_gte_set(left, right, highlighter)\n    if not explanation:\n        return [\"Both sets are equal\"]\n    return explanation\n\n\ndef _compare_lt_set(\n    left: AbstractSet[Any],\n    right: AbstractSet[Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    explanation = _compare_lte_set(left, right, highlighter)\n    if not explanation:\n        return [\"Both sets are equal\"]\n    return explanation\n\n\ndef _compare_gte_set(\n    left: AbstractSet[Any],\n    right: AbstractSet[Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    return _set_one_sided_diff(\"right\", right, left, highlighter)\n\n\ndef _compare_lte_set(\n    left: AbstractSet[Any],\n    right: AbstractSet[Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    return _set_one_sided_diff(\"left\", left, right, highlighter)\n\n\ndef _set_one_sided_diff(\n    posn: str,\n    set1: AbstractSet[Any],\n    set2: AbstractSet[Any],\n    highlighter: _HighlightFunc,\n) -> list[str]:\n    explanation = []\n    diff = set1 - set2\n    if diff:\n        explanation.append(f\"Extra items in the {posn} set:\")\n        for item in diff:\n            explanation.append(highlighter(saferepr(item)))\n    return explanation\n\n\ndef _compare_eq_dict(\n    left: Mapping[Any, Any],\n    right: Mapping[Any, Any],\n    highlighter: _HighlightFunc,\n    verbose: int = 0,\n) -> list[str]:\n    explanation: list[str] = []\n    set_left = set(left)\n    set_right = set(right)\n    common = set_left.intersection(set_right)\n    same = {k: left[k] for k in common if left[k] == right[k]}\n    if same and verbose < 2:\n        explanation += [f\"Omitting {len(same)} identical items, use -vv to show\"]\n    elif same:\n        explanation += [\"Common items:\"]\n        explanation += highlighter(pprint.pformat(same)).splitlines()\n    diff = {k for k in common if left[k] != right[k]}\n    if diff:\n        explanation += [\"Differing items:\"]\n        for k in diff:\n            explanation += [\n                highlighter(saferepr({k: left[k]}))\n                + \" != \"\n                + highlighter(saferepr({k: right[k]}))\n            ]\n    extra_left = set_left - set_right\n    len_extra_left = len(extra_left)\n    if len_extra_left:\n        explanation.append(\n            \"Left contains %d more item%s:\"\n            % (len_extra_left, \"\" if len_extra_left == 1 else \"s\")\n        )\n        explanation.extend(\n            highlighter(pprint.pformat({k: left[k] for k in extra_left})).splitlines()\n        )\n    extra_right = set_right - set_left\n    len_extra_right = len(extra_right)\n    if len_extra_right:\n        explanation.append(\n            \"Right contains %d more item%s:\"\n            % (len_extra_right, \"\" if len_extra_right == 1 else \"s\")\n        )\n        explanation.extend(\n            highlighter(pprint.pformat({k: right[k] for k in extra_right})).splitlines()\n        )\n    return explanation\n\n\ndef _compare_eq_cls(\n    left: Any, right: Any, highlighter: _HighlightFunc, verbose: int\n) -> list[str]:\n    if not has_default_eq(left):\n        return []\n    if isdatacls(left):\n        import dataclasses\n\n        all_fields = dataclasses.fields(left)\n        fields_to_check = [info.name for info in all_fields if info.compare]\n    elif isattrs(left):\n        all_fields = left.__attrs_attrs__\n        fields_to_check = [field.name for field in all_fields if getattr(field, \"eq\")]\n    elif isnamedtuple(left):\n        fields_to_check = left._fields\n    else:\n        assert False\n\n    indent = \"  \"\n    same = []\n    diff = []\n    for field in fields_to_check:\n        if getattr(left, field) == getattr(right, field):\n            same.append(field)\n        else:\n            diff.append(field)\n\n    explanation = []\n    if same or diff:\n        explanation += [\"\"]\n    if same and verbose < 2:\n        explanation.append(f\"Omitting {len(same)} identical items, use -vv to show\")\n    elif same:\n        explanation += [\"Matching attributes:\"]\n        explanation += highlighter(pprint.pformat(same)).splitlines()\n    if diff:\n        explanation += [\"Differing attributes:\"]\n        explanation += highlighter(pprint.pformat(diff)).splitlines()\n        for field in diff:\n            field_left = getattr(left, field)\n            field_right = getattr(right, field)\n            explanation += [\n                \"\",\n                f\"Drill down into differing attribute {field}:\",\n                f\"{indent}{field}: {highlighter(repr(field_left))} != {highlighter(repr(field_right))}\",\n            ]\n            explanation += [\n                indent + line\n                for line in _compare_eq_any(\n                    field_left, field_right, highlighter, verbose\n                )\n            ]\n    return explanation\n\n\ndef _notin_text(term: str, text: str, verbose: int = 0) -> list[str]:\n    index = text.find(term)\n    head = text[:index]\n    tail = text[index + len(term) :]\n    correct_text = head + tail\n    diff = _diff_text(text, correct_text, verbose)\n    newdiff = [f\"{saferepr(term, maxsize=42)} is contained here:\"]\n    for line in diff:\n        if line.startswith(\"Skipping\"):\n            continue\n        if line.startswith(\"- \"):\n            continue\n        if line.startswith(\"+ \"):\n            newdiff.append(\"  \" + line[2:])\n        else:\n            newdiff.append(line)\n    return newdiff\n\n\ndef running_on_ci() -> bool:\n    \"\"\"Check if we're currently running on a CI system.\"\"\"\n    env_vars = [\"CI\", \"BUILD_NUMBER\"]\n    return any(var in os.environ for var in env_vars)\n", "src/_pytest/assertion/__init__.py": "# mypy: allow-untyped-defs\n\"\"\"Support for presenting detailed information in failing assertions.\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nfrom typing import Any\nfrom typing import Generator\nfrom typing import TYPE_CHECKING\n\nfrom _pytest.assertion import rewrite\nfrom _pytest.assertion import truncate\nfrom _pytest.assertion import util\nfrom _pytest.assertion.rewrite import assertstate_key\nfrom _pytest.config import Config\nfrom _pytest.config import hookimpl\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.nodes import Item\n\n\nif TYPE_CHECKING:\n    from _pytest.main import Session\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"debugconfig\")\n    group.addoption(\n        \"--assert\",\n        action=\"store\",\n        dest=\"assertmode\",\n        choices=(\"rewrite\", \"plain\"),\n        default=\"rewrite\",\n        metavar=\"MODE\",\n        help=(\n            \"Control assertion debugging tools.\\n\"\n            \"'plain' performs no assertion debugging.\\n\"\n            \"'rewrite' (the default) rewrites assert statements in test modules\"\n            \" on import to provide assert expression information.\"\n        ),\n    )\n    parser.addini(\n        \"enable_assertion_pass_hook\",\n        type=\"bool\",\n        default=False,\n        help=\"Enables the pytest_assertion_pass hook. \"\n        \"Make sure to delete any previously generated pyc cache files.\",\n    )\n    Config._add_verbosity_ini(\n        parser,\n        Config.VERBOSITY_ASSERTIONS,\n        help=(\n            \"Specify a verbosity level for assertions, overriding the main level. \"\n            \"Higher levels will provide more detailed explanation when an assertion fails.\"\n        ),\n    )\n\n\ndef register_assert_rewrite(*names: str) -> None:\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :param names: The module names to register.\n    \"\"\"\n    for name in names:\n        if not isinstance(name, str):\n            msg = \"expected module names as *args, got {0} instead\"  # type: ignore[unreachable]\n            raise TypeError(msg.format(repr(names)))\n    for hook in sys.meta_path:\n        if isinstance(hook, rewrite.AssertionRewritingHook):\n            importhook = hook\n            break\n    else:\n        # TODO(typing): Add a protocol for mark_rewrite() and use it\n        # for importhook and for PytestPluginManager.rewrite_hook.\n        importhook = DummyRewriteHook()  # type: ignore\n    importhook.mark_rewrite(*names)\n\n\nclass DummyRewriteHook:\n    \"\"\"A no-op import hook for when rewriting is disabled.\"\"\"\n\n    def mark_rewrite(self, *names: str) -> None:\n        pass\n\n\nclass AssertionState:\n    \"\"\"State for the assertion plugin.\"\"\"\n\n    def __init__(self, config: Config, mode) -> None:\n        self.mode = mode\n        self.trace = config.trace.root.get(\"assertion\")\n        self.hook: rewrite.AssertionRewritingHook | None = None\n\n\ndef install_importhook(config: Config) -> rewrite.AssertionRewritingHook:\n    \"\"\"Try to install the rewrite hook, raise SystemError if it fails.\"\"\"\n    config.stash[assertstate_key] = AssertionState(config, \"rewrite\")\n    config.stash[assertstate_key].hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config.stash[assertstate_key].trace(\"installed rewrite import hook\")\n\n    def undo() -> None:\n        hook = config.stash[assertstate_key].hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook\n\n\ndef pytest_collection(session: Session) -> None:\n    # This hook is only called when test modules are collected\n    # so for example not in the managing process of pytest-xdist\n    # (which does not collect test modules).\n    assertstate = session.config.stash.get(assertstate_key, None)\n    if assertstate:\n        if assertstate.hook is not None:\n            assertstate.hook.set_session(session)\n\n\n@hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:\n    \"\"\"Setup the pytest_assertrepr_compare and pytest_assertion_pass hooks.\n\n    The rewrite module will use util._reprcompare if it exists to use custom\n    reporting via the pytest_assertrepr_compare hook.  This sets up this custom\n    comparison for the test.\n    \"\"\"\n    ihook = item.ihook\n\n    def callbinrepr(op, left: object, right: object) -> str | None:\n        \"\"\"Call the pytest_assertrepr_compare hook and prepare the result.\n\n        This uses the first result from the hook and then ensures the\n        following:\n        * Overly verbose explanations are truncated unless configured otherwise\n          (eg. if running in verbose mode).\n        * Embedded newlines are escaped to help util.format_explanation()\n          later.\n        * If the rewrite mode is used embedded %-characters are replaced\n          to protect later % formatting.\n\n        The result can be formatted by util.format_explanation() for\n        pretty printing.\n        \"\"\"\n        hook_result = ihook.pytest_assertrepr_compare(\n            config=item.config, op=op, left=left, right=right\n        )\n        for new_expl in hook_result:\n            if new_expl:\n                new_expl = truncate.truncate_if_required(new_expl, item)\n                new_expl = [line.replace(\"\\n\", \"\\\\n\") for line in new_expl]\n                res = \"\\n~\".join(new_expl)\n                if item.config.getvalue(\"assertmode\") == \"rewrite\":\n                    res = res.replace(\"%\", \"%%\")\n                return res\n        return None\n\n    saved_assert_hooks = util._reprcompare, util._assertion_pass\n    util._reprcompare = callbinrepr\n    util._config = item.config\n\n    if ihook.pytest_assertion_pass.get_hookimpls():\n\n        def call_assertion_pass_hook(lineno: int, orig: str, expl: str) -> None:\n            ihook.pytest_assertion_pass(item=item, lineno=lineno, orig=orig, expl=expl)\n\n        util._assertion_pass = call_assertion_pass_hook\n\n    try:\n        return (yield)\n    finally:\n        util._reprcompare, util._assertion_pass = saved_assert_hooks\n        util._config = None\n\n\ndef pytest_sessionfinish(session: Session) -> None:\n    assertstate = session.config.stash.get(assertstate_key, None)\n    if assertstate:\n        if assertstate.hook is not None:\n            assertstate.hook.set_session(None)\n\n\ndef pytest_assertrepr_compare(\n    config: Config, op: str, left: Any, right: Any\n) -> list[str] | None:\n    return util.assertrepr_compare(config=config, op=op, left=left, right=right)\n", "src/_pytest/assertion/truncate.py": "\"\"\"Utilities for truncating assertion output.\n\nCurrent default behaviour is to truncate assertion explanations at\nterminal lines, unless running with an assertions verbosity level of at least 2 or running on CI.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom _pytest.assertion import util\nfrom _pytest.config import Config\nfrom _pytest.nodes import Item\n\n\nDEFAULT_MAX_LINES = 8\nDEFAULT_MAX_CHARS = 8 * 80\nUSAGE_MSG = \"use '-vv' to show\"\n\n\ndef truncate_if_required(\n    explanation: list[str], item: Item, max_length: int | None = None\n) -> list[str]:\n    \"\"\"Truncate this assertion explanation if the given test item is eligible.\"\"\"\n    if _should_truncate_item(item):\n        return _truncate_explanation(explanation)\n    return explanation\n\n\ndef _should_truncate_item(item: Item) -> bool:\n    \"\"\"Whether or not this test item is eligible for truncation.\"\"\"\n    verbose = item.config.get_verbosity(Config.VERBOSITY_ASSERTIONS)\n    return verbose < 2 and not util.running_on_ci()\n\n\ndef _truncate_explanation(\n    input_lines: list[str],\n    max_lines: int | None = None,\n    max_chars: int | None = None,\n) -> list[str]:\n    \"\"\"Truncate given list of strings that makes up the assertion explanation.\n\n    Truncates to either 8 lines, or 640 characters - whichever the input reaches\n    first, taking the truncation explanation into account. The remaining lines\n    will be replaced by a usage message.\n    \"\"\"\n    if max_lines is None:\n        max_lines = DEFAULT_MAX_LINES\n    if max_chars is None:\n        max_chars = DEFAULT_MAX_CHARS\n\n    # Check if truncation required\n    input_char_count = len(\"\".join(input_lines))\n    # The length of the truncation explanation depends on the number of lines\n    # removed but is at least 68 characters:\n    # The real value is\n    # 64 (for the base message:\n    # '...\\n...Full output truncated (1 line hidden), use '-vv' to show\")'\n    # )\n    # + 1 (for plural)\n    # + int(math.log10(len(input_lines) - max_lines)) (number of hidden line, at least 1)\n    # + 3 for the '...' added to the truncated line\n    # But if there's more than 100 lines it's very likely that we're going to\n    # truncate, so we don't need the exact value using log10.\n    tolerable_max_chars = (\n        max_chars + 70  # 64 + 1 (for plural) + 2 (for '99') + 3 for '...'\n    )\n    # The truncation explanation add two lines to the output\n    tolerable_max_lines = max_lines + 2\n    if (\n        len(input_lines) <= tolerable_max_lines\n        and input_char_count <= tolerable_max_chars\n    ):\n        return input_lines\n    # Truncate first to max_lines, and then truncate to max_chars if necessary\n    truncated_explanation = input_lines[:max_lines]\n    truncated_char = True\n    # We reevaluate the need to truncate chars following removal of some lines\n    if len(\"\".join(truncated_explanation)) > tolerable_max_chars:\n        truncated_explanation = _truncate_by_char_count(\n            truncated_explanation, max_chars\n        )\n    else:\n        truncated_char = False\n\n    truncated_line_count = len(input_lines) - len(truncated_explanation)\n    if truncated_explanation[-1]:\n        # Add ellipsis and take into account part-truncated final line\n        truncated_explanation[-1] = truncated_explanation[-1] + \"...\"\n        if truncated_char:\n            # It's possible that we did not remove any char from this line\n            truncated_line_count += 1\n    else:\n        # Add proper ellipsis when we were able to fit a full line exactly\n        truncated_explanation[-1] = \"...\"\n    return [\n        *truncated_explanation,\n        \"\",\n        f\"...Full output truncated ({truncated_line_count} line\"\n        f\"{'' if truncated_line_count == 1 else 's'} hidden), {USAGE_MSG}\",\n    ]\n\n\ndef _truncate_by_char_count(input_lines: list[str], max_chars: int) -> list[str]:\n    # Find point at which input length exceeds total allowed length\n    iterated_char_count = 0\n    for iterated_index, input_line in enumerate(input_lines):\n        if iterated_char_count + len(input_line) > max_chars:\n            break\n        iterated_char_count += len(input_line)\n\n    # Create truncated explanation with modified final line\n    truncated_result = input_lines[:iterated_index]\n    final_line = input_lines[iterated_index]\n    if final_line:\n        final_line_truncate_point = max_chars - iterated_char_count\n        final_line = final_line[:final_line_truncate_point]\n    truncated_result.append(final_line)\n    return truncated_result\n", "src/_pytest/assertion/rewrite.py": "\"\"\"Rewrite assertion AST to produce nice error messages.\"\"\"\n\nfrom __future__ import annotations\n\nimport ast\nfrom collections import defaultdict\nimport errno\nimport functools\nimport importlib.abc\nimport importlib.machinery\nimport importlib.util\nimport io\nimport itertools\nimport marshal\nimport os\nfrom pathlib import Path\nfrom pathlib import PurePath\nimport struct\nimport sys\nimport tokenize\nimport types\nfrom typing import Callable\nfrom typing import IO\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Sequence\nfrom typing import TYPE_CHECKING\n\nfrom _pytest._io.saferepr import DEFAULT_REPR_MAX_SIZE\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest._version import version\nfrom _pytest.assertion import util\nfrom _pytest.config import Config\nfrom _pytest.main import Session\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import fnmatch_ex\nfrom _pytest.stash import StashKey\n\n\n# fmt: off\nfrom _pytest.assertion.util import format_explanation as _format_explanation  # noqa:F401, isort:skip\n# fmt:on\n\nif TYPE_CHECKING:\n    from _pytest.assertion import AssertionState\n\n\nclass Sentinel:\n    pass\n\n\nassertstate_key = StashKey[\"AssertionState\"]()\n\n# pytest caches rewritten pycs in pycache dirs\nPYTEST_TAG = f\"{sys.implementation.cache_tag}-pytest-{version}\"\nPYC_EXT = \".py\" + (__debug__ and \"c\" or \"o\")\nPYC_TAIL = \".\" + PYTEST_TAG + PYC_EXT\n\n# Special marker that denotes we have just left a scope definition\n_SCOPE_END_MARKER = Sentinel()\n\n\nclass AssertionRewritingHook(importlib.abc.MetaPathFinder, importlib.abc.Loader):\n    \"\"\"PEP302/PEP451 import hook which rewrites asserts.\"\"\"\n\n    def __init__(self, config: Config) -> None:\n        self.config = config\n        try:\n            self.fnpats = config.getini(\"python_files\")\n        except ValueError:\n            self.fnpats = [\"test_*.py\", \"*_test.py\"]\n        self.session: Session | None = None\n        self._rewritten_names: dict[str, Path] = {}\n        self._must_rewrite: set[str] = set()\n        # flag to guard against trying to rewrite a pyc file while we are already writing another pyc file,\n        # which might result in infinite recursion (#3506)\n        self._writing_pyc = False\n        self._basenames_to_check_rewrite = {\"conftest\"}\n        self._marked_for_rewrite_cache: dict[str, bool] = {}\n        self._session_paths_checked = False\n\n    def set_session(self, session: Session | None) -> None:\n        self.session = session\n        self._session_paths_checked = False\n\n    # Indirection so we can mock calls to find_spec originated from the hook during testing\n    _find_spec = importlib.machinery.PathFinder.find_spec\n\n    def find_spec(\n        self,\n        name: str,\n        path: Sequence[str | bytes] | None = None,\n        target: types.ModuleType | None = None,\n    ) -> importlib.machinery.ModuleSpec | None:\n        if self._writing_pyc:\n            return None\n        state = self.config.stash[assertstate_key]\n        if self._early_rewrite_bailout(name, state):\n            return None\n        state.trace(f\"find_module called for: {name}\")\n\n        # Type ignored because mypy is confused about the `self` binding here.\n        spec = self._find_spec(name, path)  # type: ignore\n        if (\n            # the import machinery could not find a file to import\n            spec is None\n            # this is a namespace package (without `__init__.py`)\n            # there's nothing to rewrite there\n            or spec.origin is None\n            # we can only rewrite source files\n            or not isinstance(spec.loader, importlib.machinery.SourceFileLoader)\n            # if the file doesn't exist, we can't rewrite it\n            or not os.path.exists(spec.origin)\n        ):\n            return None\n        else:\n            fn = spec.origin\n\n        if not self._should_rewrite(name, fn, state):\n            return None\n\n        return importlib.util.spec_from_file_location(\n            name,\n            fn,\n            loader=self,\n            submodule_search_locations=spec.submodule_search_locations,\n        )\n\n    def create_module(\n        self, spec: importlib.machinery.ModuleSpec\n    ) -> types.ModuleType | None:\n        return None  # default behaviour is fine\n\n    def exec_module(self, module: types.ModuleType) -> None:\n        assert module.__spec__ is not None\n        assert module.__spec__.origin is not None\n        fn = Path(module.__spec__.origin)\n        state = self.config.stash[assertstate_key]\n\n        self._rewritten_names[module.__name__] = fn\n\n        # The requested module looks like a test file, so rewrite it. This is\n        # the most magical part of the process: load the source, rewrite the\n        # asserts, and load the rewritten source. We also cache the rewritten\n        # module code in a special pyc. We must be aware of the possibility of\n        # concurrent pytest processes rewriting and loading pycs. To avoid\n        # tricky race conditions, we maintain the following invariant: The\n        # cached pyc is always a complete, valid pyc. Operations on it must be\n        # atomic. POSIX's atomic rename comes in handy.\n        write = not sys.dont_write_bytecode\n        cache_dir = get_cache_dir(fn)\n        if write:\n            ok = try_makedirs(cache_dir)\n            if not ok:\n                write = False\n                state.trace(f\"read only directory: {cache_dir}\")\n\n        cache_name = fn.name[:-3] + PYC_TAIL\n        pyc = cache_dir / cache_name\n        # Notice that even if we're in a read-only directory, I'm going\n        # to check for a cached pyc. This may not be optimal...\n        co = _read_pyc(fn, pyc, state.trace)\n        if co is None:\n            state.trace(f\"rewriting {fn!r}\")\n            source_stat, co = _rewrite_test(fn, self.config)\n            if write:\n                self._writing_pyc = True\n                try:\n                    _write_pyc(state, co, source_stat, pyc)\n                finally:\n                    self._writing_pyc = False\n        else:\n            state.trace(f\"found cached rewritten pyc for {fn}\")\n        exec(co, module.__dict__)\n\n    def _early_rewrite_bailout(self, name: str, state: AssertionState) -> bool:\n        \"\"\"A fast way to get out of rewriting modules.\n\n        Profiling has shown that the call to PathFinder.find_spec (inside of\n        the find_spec from this class) is a major slowdown, so, this method\n        tries to filter what we're sure won't be rewritten before getting to\n        it.\n        \"\"\"\n        if self.session is not None and not self._session_paths_checked:\n            self._session_paths_checked = True\n            for initial_path in self.session._initialpaths:\n                # Make something as c:/projects/my_project/path.py ->\n                #     ['c:', 'projects', 'my_project', 'path.py']\n                parts = str(initial_path).split(os.sep)\n                # add 'path' to basenames to be checked.\n                self._basenames_to_check_rewrite.add(os.path.splitext(parts[-1])[0])\n\n        # Note: conftest already by default in _basenames_to_check_rewrite.\n        parts = name.split(\".\")\n        if parts[-1] in self._basenames_to_check_rewrite:\n            return False\n\n        # For matching the name it must be as if it was a filename.\n        path = PurePath(*parts).with_suffix(\".py\")\n\n        for pat in self.fnpats:\n            # if the pattern contains subdirectories (\"tests/**.py\" for example) we can't bail out based\n            # on the name alone because we need to match against the full path\n            if os.path.dirname(pat):\n                return False\n            if fnmatch_ex(pat, path):\n                return False\n\n        if self._is_marked_for_rewrite(name, state):\n            return False\n\n        state.trace(f\"early skip of rewriting module: {name}\")\n        return True\n\n    def _should_rewrite(self, name: str, fn: str, state: AssertionState) -> bool:\n        # always rewrite conftest files\n        if os.path.basename(fn) == \"conftest.py\":\n            state.trace(f\"rewriting conftest file: {fn!r}\")\n            return True\n\n        if self.session is not None:\n            if self.session.isinitpath(absolutepath(fn)):\n                state.trace(f\"matched test file (was specified on cmdline): {fn!r}\")\n                return True\n\n        # modules not passed explicitly on the command line are only\n        # rewritten if they match the naming convention for test files\n        fn_path = PurePath(fn)\n        for pat in self.fnpats:\n            if fnmatch_ex(pat, fn_path):\n                state.trace(f\"matched test file {fn!r}\")\n                return True\n\n        return self._is_marked_for_rewrite(name, state)\n\n    def _is_marked_for_rewrite(self, name: str, state: AssertionState) -> bool:\n        try:\n            return self._marked_for_rewrite_cache[name]\n        except KeyError:\n            for marked in self._must_rewrite:\n                if name == marked or name.startswith(marked + \".\"):\n                    state.trace(f\"matched marked file {name!r} (from {marked!r})\")\n                    self._marked_for_rewrite_cache[name] = True\n                    return True\n\n            self._marked_for_rewrite_cache[name] = False\n            return False\n\n    def mark_rewrite(self, *names: str) -> None:\n        \"\"\"Mark import names as needing to be rewritten.\n\n        The named module or package as well as any nested modules will\n        be rewritten on import.\n        \"\"\"\n        already_imported = (\n            set(names).intersection(sys.modules).difference(self._rewritten_names)\n        )\n        for name in already_imported:\n            mod = sys.modules[name]\n            if not AssertionRewriter.is_rewrite_disabled(\n                mod.__doc__ or \"\"\n            ) and not isinstance(mod.__loader__, type(self)):\n                self._warn_already_imported(name)\n        self._must_rewrite.update(names)\n        self._marked_for_rewrite_cache.clear()\n\n    def _warn_already_imported(self, name: str) -> None:\n        from _pytest.warning_types import PytestAssertRewriteWarning\n\n        self.config.issue_config_time_warning(\n            PytestAssertRewriteWarning(\n                f\"Module already imported so cannot be rewritten: {name}\"\n            ),\n            stacklevel=5,\n        )\n\n    def get_data(self, pathname: str | bytes) -> bytes:\n        \"\"\"Optional PEP302 get_data API.\"\"\"\n        with open(pathname, \"rb\") as f:\n            return f.read()\n\n    if sys.version_info >= (3, 10):\n        if sys.version_info >= (3, 12):\n            from importlib.resources.abc import TraversableResources\n        else:\n            from importlib.abc import TraversableResources\n\n        def get_resource_reader(self, name: str) -> TraversableResources:\n            if sys.version_info < (3, 11):\n                from importlib.readers import FileReader\n            else:\n                from importlib.resources.readers import FileReader\n\n            return FileReader(types.SimpleNamespace(path=self._rewritten_names[name]))\n\n\ndef _write_pyc_fp(\n    fp: IO[bytes], source_stat: os.stat_result, co: types.CodeType\n) -> None:\n    # Technically, we don't have to have the same pyc format as\n    # (C)Python, since these \"pycs\" should never be seen by builtin\n    # import. However, there's little reason to deviate.\n    fp.write(importlib.util.MAGIC_NUMBER)\n    # https://www.python.org/dev/peps/pep-0552/\n    flags = b\"\\x00\\x00\\x00\\x00\"\n    fp.write(flags)\n    # as of now, bytecode header expects 32-bit numbers for size and mtime (#4903)\n    mtime = int(source_stat.st_mtime) & 0xFFFFFFFF\n    size = source_stat.st_size & 0xFFFFFFFF\n    # \"<LL\" stands for 2 unsigned longs, little-endian.\n    fp.write(struct.pack(\"<LL\", mtime, size))\n    fp.write(marshal.dumps(co))\n\n\ndef _write_pyc(\n    state: AssertionState,\n    co: types.CodeType,\n    source_stat: os.stat_result,\n    pyc: Path,\n) -> bool:\n    proc_pyc = f\"{pyc}.{os.getpid()}\"\n    try:\n        with open(proc_pyc, \"wb\") as fp:\n            _write_pyc_fp(fp, source_stat, co)\n    except OSError as e:\n        state.trace(f\"error writing pyc file at {proc_pyc}: errno={e.errno}\")\n        return False\n\n    try:\n        os.replace(proc_pyc, pyc)\n    except OSError as e:\n        state.trace(f\"error writing pyc file at {pyc}: {e}\")\n        # we ignore any failure to write the cache file\n        # there are many reasons, permission-denied, pycache dir being a\n        # file etc.\n        return False\n    return True\n\n\ndef _rewrite_test(fn: Path, config: Config) -> tuple[os.stat_result, types.CodeType]:\n    \"\"\"Read and rewrite *fn* and return the code object.\"\"\"\n    stat = os.stat(fn)\n    source = fn.read_bytes()\n    strfn = str(fn)\n    tree = ast.parse(source, filename=strfn)\n    rewrite_asserts(tree, source, strfn, config)\n    co = compile(tree, strfn, \"exec\", dont_inherit=True)\n    return stat, co\n\n\ndef _read_pyc(\n    source: Path, pyc: Path, trace: Callable[[str], None] = lambda x: None\n) -> types.CodeType | None:\n    \"\"\"Possibly read a pytest pyc containing rewritten code.\n\n    Return rewritten code if successful or None if not.\n    \"\"\"\n    try:\n        fp = open(pyc, \"rb\")\n    except OSError:\n        return None\n    with fp:\n        try:\n            stat_result = os.stat(source)\n            mtime = int(stat_result.st_mtime)\n            size = stat_result.st_size\n            data = fp.read(16)\n        except OSError as e:\n            trace(f\"_read_pyc({source}): OSError {e}\")\n            return None\n        # Check for invalid or out of date pyc file.\n        if len(data) != (16):\n            trace(f\"_read_pyc({source}): invalid pyc (too short)\")\n            return None\n        if data[:4] != importlib.util.MAGIC_NUMBER:\n            trace(f\"_read_pyc({source}): invalid pyc (bad magic number)\")\n            return None\n        if data[4:8] != b\"\\x00\\x00\\x00\\x00\":\n            trace(f\"_read_pyc({source}): invalid pyc (unsupported flags)\")\n            return None\n        mtime_data = data[8:12]\n        if int.from_bytes(mtime_data, \"little\") != mtime & 0xFFFFFFFF:\n            trace(f\"_read_pyc({source}): out of date\")\n            return None\n        size_data = data[12:16]\n        if int.from_bytes(size_data, \"little\") != size & 0xFFFFFFFF:\n            trace(f\"_read_pyc({source}): invalid pyc (incorrect size)\")\n            return None\n        try:\n            co = marshal.load(fp)\n        except Exception as e:\n            trace(f\"_read_pyc({source}): marshal.load error {e}\")\n            return None\n        if not isinstance(co, types.CodeType):\n            trace(f\"_read_pyc({source}): not a code object\")\n            return None\n        return co\n\n\ndef rewrite_asserts(\n    mod: ast.Module,\n    source: bytes,\n    module_path: str | None = None,\n    config: Config | None = None,\n) -> None:\n    \"\"\"Rewrite the assert statements in mod.\"\"\"\n    AssertionRewriter(module_path, config, source).run(mod)\n\n\ndef _saferepr(obj: object) -> str:\n    r\"\"\"Get a safe repr of an object for assertion error messages.\n\n    The assertion formatting (util.format_explanation()) requires\n    newlines to be escaped since they are a special character for it.\n    Normally assertion.util.format_explanation() does this but for a\n    custom repr it is possible to contain one of the special escape\n    sequences, especially '\\n{' and '\\n}' are likely to be present in\n    JSON reprs.\n    \"\"\"\n    if isinstance(obj, types.MethodType):\n        # for bound methods, skip redundant <bound method ...> information\n        return obj.__name__\n\n    maxsize = _get_maxsize_for_saferepr(util._config)\n    return saferepr(obj, maxsize=maxsize).replace(\"\\n\", \"\\\\n\")\n\n\ndef _get_maxsize_for_saferepr(config: Config | None) -> int | None:\n    \"\"\"Get `maxsize` configuration for saferepr based on the given config object.\"\"\"\n    if config is None:\n        verbosity = 0\n    else:\n        verbosity = config.get_verbosity(Config.VERBOSITY_ASSERTIONS)\n    if verbosity >= 2:\n        return None\n    if verbosity >= 1:\n        return DEFAULT_REPR_MAX_SIZE * 10\n    return DEFAULT_REPR_MAX_SIZE\n\n\ndef _format_assertmsg(obj: object) -> str:\n    r\"\"\"Format the custom assertion message given.\n\n    For strings this simply replaces newlines with '\\n~' so that\n    util.format_explanation() will preserve them instead of escaping\n    newlines.  For other objects saferepr() is used first.\n    \"\"\"\n    # reprlib appears to have a bug which means that if a string\n    # contains a newline it gets escaped, however if an object has a\n    # .__repr__() which contains newlines it does not get escaped.\n    # However in either case we want to preserve the newline.\n    replaces = [(\"\\n\", \"\\n~\"), (\"%\", \"%%\")]\n    if not isinstance(obj, str):\n        obj = saferepr(obj)\n        replaces.append((\"\\\\n\", \"\\n~\"))\n\n    for r1, r2 in replaces:\n        obj = obj.replace(r1, r2)\n\n    return obj\n\n\ndef _should_repr_global_name(obj: object) -> bool:\n    if callable(obj):\n        return False\n\n    try:\n        return not hasattr(obj, \"__name__\")\n    except Exception:\n        return True\n\n\ndef _format_boolop(explanations: Iterable[str], is_or: bool) -> str:\n    explanation = \"(\" + (is_or and \" or \" or \" and \").join(explanations) + \")\"\n    return explanation.replace(\"%\", \"%%\")\n\n\ndef _call_reprcompare(\n    ops: Sequence[str],\n    results: Sequence[bool],\n    expls: Sequence[str],\n    each_obj: Sequence[object],\n) -> str:\n    for i, res, expl in zip(range(len(ops)), results, expls):\n        try:\n            done = not res\n        except Exception:\n            done = True\n        if done:\n            break\n    if util._reprcompare is not None:\n        custom = util._reprcompare(ops[i], each_obj[i], each_obj[i + 1])\n        if custom is not None:\n            return custom\n    return expl\n\n\ndef _call_assertion_pass(lineno: int, orig: str, expl: str) -> None:\n    if util._assertion_pass is not None:\n        util._assertion_pass(lineno, orig, expl)\n\n\ndef _check_if_assertion_pass_impl() -> bool:\n    \"\"\"Check if any plugins implement the pytest_assertion_pass hook\n    in order not to generate explanation unnecessarily (might be expensive).\"\"\"\n    return True if util._assertion_pass else False\n\n\nUNARY_MAP = {ast.Not: \"not %s\", ast.Invert: \"~%s\", ast.USub: \"-%s\", ast.UAdd: \"+%s\"}\n\nBINOP_MAP = {\n    ast.BitOr: \"|\",\n    ast.BitXor: \"^\",\n    ast.BitAnd: \"&\",\n    ast.LShift: \"<<\",\n    ast.RShift: \">>\",\n    ast.Add: \"+\",\n    ast.Sub: \"-\",\n    ast.Mult: \"*\",\n    ast.Div: \"/\",\n    ast.FloorDiv: \"//\",\n    ast.Mod: \"%%\",  # escaped for string formatting\n    ast.Eq: \"==\",\n    ast.NotEq: \"!=\",\n    ast.Lt: \"<\",\n    ast.LtE: \"<=\",\n    ast.Gt: \">\",\n    ast.GtE: \">=\",\n    ast.Pow: \"**\",\n    ast.Is: \"is\",\n    ast.IsNot: \"is not\",\n    ast.In: \"in\",\n    ast.NotIn: \"not in\",\n    ast.MatMult: \"@\",\n}\n\n\ndef traverse_node(node: ast.AST) -> Iterator[ast.AST]:\n    \"\"\"Recursively yield node and all its children in depth-first order.\"\"\"\n    yield node\n    for child in ast.iter_child_nodes(node):\n        yield from traverse_node(child)\n\n\n@functools.lru_cache(maxsize=1)\ndef _get_assertion_exprs(src: bytes) -> dict[int, str]:\n    \"\"\"Return a mapping from {lineno: \"assertion test expression\"}.\"\"\"\n    ret: dict[int, str] = {}\n\n    depth = 0\n    lines: list[str] = []\n    assert_lineno: int | None = None\n    seen_lines: set[int] = set()\n\n    def _write_and_reset() -> None:\n        nonlocal depth, lines, assert_lineno, seen_lines\n        assert assert_lineno is not None\n        ret[assert_lineno] = \"\".join(lines).rstrip().rstrip(\"\\\\\")\n        depth = 0\n        lines = []\n        assert_lineno = None\n        seen_lines = set()\n\n    tokens = tokenize.tokenize(io.BytesIO(src).readline)\n    for tp, source, (lineno, offset), _, line in tokens:\n        if tp == tokenize.NAME and source == \"assert\":\n            assert_lineno = lineno\n        elif assert_lineno is not None:\n            # keep track of depth for the assert-message `,` lookup\n            if tp == tokenize.OP and source in \"([{\":\n                depth += 1\n            elif tp == tokenize.OP and source in \")]}\":\n                depth -= 1\n\n            if not lines:\n                lines.append(line[offset:])\n                seen_lines.add(lineno)\n            # a non-nested comma separates the expression from the message\n            elif depth == 0 and tp == tokenize.OP and source == \",\":\n                # one line assert with message\n                if lineno in seen_lines and len(lines) == 1:\n                    offset_in_trimmed = offset + len(lines[-1]) - len(line)\n                    lines[-1] = lines[-1][:offset_in_trimmed]\n                # multi-line assert with message\n                elif lineno in seen_lines:\n                    lines[-1] = lines[-1][:offset]\n                # multi line assert with escaped newline before message\n                else:\n                    lines.append(line[:offset])\n                _write_and_reset()\n            elif tp in {tokenize.NEWLINE, tokenize.ENDMARKER}:\n                _write_and_reset()\n            elif lines and lineno not in seen_lines:\n                lines.append(line)\n                seen_lines.add(lineno)\n\n    return ret\n\n\nclass AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false and calls pytest_assertion_pass hook\n    if expression is true.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :expl_stmts: The AST statements which will be executed to get\n       data from the assertion.  This is the code which will construct\n       the detailed assertion message that is used in the AssertionError\n       or for the pytest_assertion_pass hook.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    :scope: A tuple containing the current scope used for variables_overwrite.\n\n    :variables_overwrite: A dict filled with references to variables\n       that change value within an assert. This happens when a variable is\n       reassigned with the walrus operator\n\n    This state, except the variables_overwrite,  is reset on every new assert\n    statement visited and used by the other visitors.\n    \"\"\"\n\n    def __init__(\n        self, module_path: str | None, config: Config | None, source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.scope: tuple[ast.AST, ...] = ()\n        self.variables_overwrite: defaultdict[tuple[ast.AST, ...], dict[str, str]] = (\n            defaultdict(dict)\n        )\n\n    def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n                and isinstance(item.value.value, str)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        self.scope = (mod,)\n        nodes: list[ast.AST | Sentinel] = [mod]\n        while nodes:\n            node = nodes.pop()\n            if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n                self.scope = tuple((*self.scope, node))\n                nodes.append(_SCOPE_END_MARKER)\n            if node == _SCOPE_END_MARKER:\n                self.scope = self.scope[:-1]\n                continue\n            assert isinstance(node, ast.AST)\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: list[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])\n\n    def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys: list[ast.expr | None] = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node: ast.AST) -> tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_: ast.Assert) -> list[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            import warnings\n\n            from _pytest.warning_types import PytestAssertRewriteWarning\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: list[ast.stmt] = []\n        self.variables: list[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: list[str] = []\n\n        self.stack: list[dict[str, ast.expr]] = []\n        self.expl_stmts: list[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                [*self.expl_stmts, hook_call_pass],\n                [],\n            )\n            statements_pass: list[ast.stmt] = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables: list[ast.expr] = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements\n\n    def visit_NamedExpr(self, name: ast.NamedExpr) -> tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)\n\n    def visit_Name(self, name: ast.Name) -> tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop: ast.BoolOp) -> tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: list[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa: F821\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[self.scope][v.left.target.id] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: list[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary: ast.UnaryOp) -> tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop: ast.BinOp) -> tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call(self, call: ast.Call) -> tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite.get(\n                self.scope, {}\n            ):\n                arg = self.variables_overwrite[self.scope][arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if isinstance(\n                keyword.value, ast.Name\n            ) and keyword.value.id in self.variables_overwrite.get(self.scope, {}):\n                keyword.value = self.variables_overwrite[self.scope][keyword.value.id]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl\n\n    def visit_Starred(self, starred: ast.Starred) -> tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Attribute(self, attr: ast.Attribute) -> tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp: ast.Compare) -> tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(\n            comp.left, ast.Name\n        ) and comp.left.id in self.variables_overwrite.get(self.scope, {}):\n            comp.left = self.variables_overwrite[self.scope][comp.left.id]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[self.scope][comp.left.target.id] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names: list[ast.expr] = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls: list[ast.expr] = []\n        syms: list[ast.expr] = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[self.scope][left_res.id] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))\n\n\ndef try_makedirs(cache_dir: Path) -> bool:\n    \"\"\"Attempt to create the given directory and sub-directories exist.\n\n    Returns True if successful or if it already exists.\n    \"\"\"\n    try:\n        os.makedirs(cache_dir, exist_ok=True)\n    except (FileNotFoundError, NotADirectoryError, FileExistsError):\n        # One of the path components was not a directory:\n        # - we're in a zip file\n        # - it is a file\n        return False\n    except PermissionError:\n        return False\n    except OSError as e:\n        # as of now, EROFS doesn't have an equivalent OSError-subclass\n        #\n        # squashfuse_ll returns ENOSYS \"OSError: [Errno 38] Function not\n        # implemented\" for a read-only error\n        if e.errno in {errno.EROFS, errno.ENOSYS}:\n            return False\n        raise\n    return True\n\n\ndef get_cache_dir(file_path: Path) -> Path:\n    \"\"\"Return the cache directory to write .pyc files for the given .py file path.\"\"\"\n    if sys.pycache_prefix:\n        # given:\n        #   prefix = '/tmp/pycs'\n        #   path = '/home/user/proj/test_app.py'\n        # we want:\n        #   '/tmp/pycs/home/user/proj'\n        return Path(sys.pycache_prefix) / Path(*file_path.parts[1:-1])\n    else:\n        # classic pycache directory\n        return file_path.parent / \"__pycache__\"\n", "src/_pytest/config/exceptions.py": "from __future__ import annotations\n\nfrom typing import final\n\n\n@final\nclass UsageError(Exception):\n    \"\"\"Error in pytest usage or invocation.\"\"\"\n\n\nclass PrintHelp(Exception):\n    \"\"\"Raised when pytest should print its help to skip the rest of the\n    argument parsing and validation.\"\"\"\n", "src/_pytest/config/__init__.py": "# mypy: allow-untyped-defs\n\"\"\"Command line options, ini-file and conftest.py processing.\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport collections.abc\nimport copy\nimport dataclasses\nimport enum\nfrom functools import lru_cache\nimport glob\nimport importlib.metadata\nimport inspect\nimport os\nimport pathlib\nimport re\nimport shlex\nimport sys\nfrom textwrap import dedent\nimport types\nfrom types import FunctionType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Final\nfrom typing import final\nfrom typing import Generator\nfrom typing import IO\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Sequence\nfrom typing import TextIO\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nimport warnings\n\nimport pluggy\nfrom pluggy import HookimplMarker\nfrom pluggy import HookimplOpts\nfrom pluggy import HookspecMarker\nfrom pluggy import HookspecOpts\nfrom pluggy import PluginManager\n\nfrom .compat import PathAwareHookProxy\nfrom .exceptions import PrintHelp as PrintHelp\nfrom .exceptions import UsageError as UsageError\nfrom .findpaths import determine_setup\nfrom _pytest import __version__\nimport _pytest._code\nfrom _pytest._code import ExceptionInfo\nfrom _pytest._code import filter_traceback\nfrom _pytest._code.code import TracebackStyle\nfrom _pytest._io import TerminalWriter\nfrom _pytest.config.argparsing import Argument\nfrom _pytest.config.argparsing import Parser\nimport _pytest.deprecated\nimport _pytest.hookspec\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import Skipped\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import bestrelpath\nfrom _pytest.pathlib import import_path\nfrom _pytest.pathlib import ImportMode\nfrom _pytest.pathlib import resolve_package_path\nfrom _pytest.pathlib import safe_exists\nfrom _pytest.stash import Stash\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import warn_explicit_for\n\n\nif TYPE_CHECKING:\n    from _pytest.cacheprovider import Cache\n    from _pytest.terminal import TerminalReporter\n\n\n_PluggyPlugin = object\n\"\"\"A type to represent plugin objects.\n\nPlugins can be any namespace, so we can't narrow it down much, but we use an\nalias to make the intent clear.\n\nIdeally this type would be provided by pluggy itself.\n\"\"\"\n\n\nhookimpl = HookimplMarker(\"pytest\")\nhookspec = HookspecMarker(\"pytest\")\n\n\n@final\nclass ExitCode(enum.IntEnum):\n    \"\"\"Encodes the valid exit codes by pytest.\n\n    Currently users and plugins may supply other exit codes as well.\n\n    .. versionadded:: 5.0\n    \"\"\"\n\n    #: Tests passed.\n    OK = 0\n    #: Tests failed.\n    TESTS_FAILED = 1\n    #: pytest was interrupted.\n    INTERRUPTED = 2\n    #: An internal error got in the way.\n    INTERNAL_ERROR = 3\n    #: pytest was misused.\n    USAGE_ERROR = 4\n    #: pytest couldn't find tests.\n    NO_TESTS_COLLECTED = 5\n\n\nclass ConftestImportFailure(Exception):\n    def __init__(\n        self,\n        path: pathlib.Path,\n        *,\n        cause: Exception,\n    ) -> None:\n        self.path = path\n        self.cause = cause\n\n    def __str__(self) -> str:\n        return f\"{type(self.cause).__name__}: {self.cause} (from {self.path})\"\n\n\ndef filter_traceback_for_conftest_import_failure(\n    entry: _pytest._code.TracebackEntry,\n) -> bool:\n    \"\"\"Filter tracebacks entries which point to pytest internals or importlib.\n\n    Make a special case for importlib because we use it to import test modules and conftest files\n    in _pytest.pathlib.import_path.\n    \"\"\"\n    return filter_traceback(entry) and \"importlib\" not in str(entry.path).split(os.sep)\n\n\ndef main(\n    args: list[str] | os.PathLike[str] | None = None,\n    plugins: Sequence[str | _PluggyPlugin] | None = None,\n) -> int | ExitCode:\n    \"\"\"Perform an in-process test run.\n\n    :param args:\n        List of command line arguments. If `None` or not given, defaults to reading\n        arguments directly from the process command line (:data:`sys.argv`).\n    :param plugins: List of plugin objects to be auto-registered during initialization.\n\n    :returns: An exit code.\n    \"\"\"\n    old_pytest_version = os.environ.get(\"PYTEST_VERSION\")\n    try:\n        os.environ[\"PYTEST_VERSION\"] = __version__\n        try:\n            config = _prepareconfig(args, plugins)\n        except ConftestImportFailure as e:\n            exc_info = ExceptionInfo.from_exception(e.cause)\n            tw = TerminalWriter(sys.stderr)\n            tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n            exc_info.traceback = exc_info.traceback.filter(\n                filter_traceback_for_conftest_import_failure\n            )\n            exc_repr = (\n                exc_info.getrepr(style=\"short\", chain=False)\n                if exc_info.traceback\n                else exc_info.exconly()\n            )\n            formatted_tb = str(exc_repr)\n            for line in formatted_tb.splitlines():\n                tw.line(line.rstrip(), red=True)\n            return ExitCode.USAGE_ERROR\n        else:\n            try:\n                ret: ExitCode | int = config.hook.pytest_cmdline_main(config=config)\n                try:\n                    return ExitCode(ret)\n                except ValueError:\n                    return ret\n            finally:\n                config._ensure_unconfigure()\n    except UsageError as e:\n        tw = TerminalWriter(sys.stderr)\n        for msg in e.args:\n            tw.line(f\"ERROR: {msg}\\n\", red=True)\n        return ExitCode.USAGE_ERROR\n    finally:\n        if old_pytest_version is None:\n            os.environ.pop(\"PYTEST_VERSION\", None)\n        else:\n            os.environ[\"PYTEST_VERSION\"] = old_pytest_version\n\n\ndef console_main() -> int:\n    \"\"\"The CLI entry point of pytest.\n\n    This function is not meant for programmable use; use `main()` instead.\n    \"\"\"\n    # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n    try:\n        code = main()\n        sys.stdout.flush()\n        return code\n    except BrokenPipeError:\n        # Python flushes standard streams on exit; redirect remaining output\n        # to devnull to avoid another BrokenPipeError at shutdown\n        devnull = os.open(os.devnull, os.O_WRONLY)\n        os.dup2(devnull, sys.stdout.fileno())\n        return 1  # Python exits with error code 1 on EPIPE\n\n\nclass cmdline:  # compatibility namespace\n    main = staticmethod(main)\n\n\ndef filename_arg(path: str, optname: str) -> str:\n    \"\"\"Argparse type validator for filename arguments.\n\n    :path: Path of filename.\n    :optname: Name of the option.\n    \"\"\"\n    if os.path.isdir(path):\n        raise UsageError(f\"{optname} must be a filename, given: {path}\")\n    return path\n\n\ndef directory_arg(path: str, optname: str) -> str:\n    \"\"\"Argparse type validator for directory arguments.\n\n    :path: Path of directory.\n    :optname: Name of the option.\n    \"\"\"\n    if not os.path.isdir(path):\n        raise UsageError(f\"{optname} must be a directory, given: {path}\")\n    return path\n\n\n# Plugins that cannot be disabled via \"-p no:X\" currently.\nessential_plugins = (\n    \"mark\",\n    \"main\",\n    \"runner\",\n    \"fixtures\",\n    \"helpconfig\",  # Provides -p.\n)\n\ndefault_plugins = (\n    *essential_plugins,\n    \"python\",\n    \"terminal\",\n    \"debugging\",\n    \"unittest\",\n    \"capture\",\n    \"skipping\",\n    \"legacypath\",\n    \"tmpdir\",\n    \"monkeypatch\",\n    \"recwarn\",\n    \"pastebin\",\n    \"assertion\",\n    \"junitxml\",\n    \"doctest\",\n    \"cacheprovider\",\n    \"freeze_support\",\n    \"setuponly\",\n    \"setupplan\",\n    \"stepwise\",\n    \"warnings\",\n    \"logging\",\n    \"reports\",\n    \"python_path\",\n    \"unraisableexception\",\n    \"threadexception\",\n    \"faulthandler\",\n)\n\nbuiltin_plugins = set(default_plugins)\nbuiltin_plugins.add(\"pytester\")\nbuiltin_plugins.add(\"pytester_assertions\")\n\n\ndef get_config(\n    args: list[str] | None = None,\n    plugins: Sequence[str | _PluggyPlugin] | None = None,\n) -> Config:\n    # subsequent calls to main will create a fresh instance\n    pluginmanager = PytestPluginManager()\n    config = Config(\n        pluginmanager,\n        invocation_params=Config.InvocationParams(\n            args=args or (),\n            plugins=plugins,\n            dir=pathlib.Path.cwd(),\n        ),\n    )\n\n    if args is not None:\n        # Handle any \"-p no:plugin\" args.\n        pluginmanager.consider_preparse(args, exclude_only=True)\n\n    for spec in default_plugins:\n        pluginmanager.import_plugin(spec)\n\n    return config\n\n\ndef get_plugin_manager() -> PytestPluginManager:\n    \"\"\"Obtain a new instance of the\n    :py:class:`pytest.PytestPluginManager`, with default plugins\n    already loaded.\n\n    This function can be used by integration with other tools, like hooking\n    into pytest to run tests into an IDE.\n    \"\"\"\n    return get_config().pluginmanager\n\n\ndef _prepareconfig(\n    args: list[str] | os.PathLike[str] | None = None,\n    plugins: Sequence[str | _PluggyPlugin] | None = None,\n) -> Config:\n    if args is None:\n        args = sys.argv[1:]\n    elif isinstance(args, os.PathLike):\n        args = [os.fspath(args)]\n    elif not isinstance(args, list):\n        msg = (  # type:ignore[unreachable]\n            \"`args` parameter expected to be a list of strings, got: {!r} (type: {})\"\n        )\n        raise TypeError(msg.format(args, type(args)))\n\n    config = get_config(args, plugins)\n    pluginmanager = config.pluginmanager\n    try:\n        if plugins:\n            for plugin in plugins:\n                if isinstance(plugin, str):\n                    pluginmanager.consider_pluginarg(plugin)\n                else:\n                    pluginmanager.register(plugin)\n        config = pluginmanager.hook.pytest_cmdline_parse(\n            pluginmanager=pluginmanager, args=args\n        )\n        return config\n    except BaseException:\n        config._ensure_unconfigure()\n        raise\n\n\ndef _get_directory(path: pathlib.Path) -> pathlib.Path:\n    \"\"\"Get the directory of a path - itself if already a directory.\"\"\"\n    if path.is_file():\n        return path.parent\n    else:\n        return path\n\n\ndef _get_legacy_hook_marks(\n    method: Any,\n    hook_type: str,\n    opt_names: tuple[str, ...],\n) -> dict[str, bool]:\n    if TYPE_CHECKING:\n        # abuse typeguard from importlib to avoid massive method type union thats lacking a alias\n        assert inspect.isroutine(method)\n    known_marks: set[str] = {m.name for m in getattr(method, \"pytestmark\", [])}\n    must_warn: list[str] = []\n    opts: dict[str, bool] = {}\n    for opt_name in opt_names:\n        opt_attr = getattr(method, opt_name, AttributeError)\n        if opt_attr is not AttributeError:\n            must_warn.append(f\"{opt_name}={opt_attr}\")\n            opts[opt_name] = True\n        elif opt_name in known_marks:\n            must_warn.append(f\"{opt_name}=True\")\n            opts[opt_name] = True\n        else:\n            opts[opt_name] = False\n    if must_warn:\n        hook_opts = \", \".join(must_warn)\n        message = _pytest.deprecated.HOOK_LEGACY_MARKING.format(\n            type=hook_type,\n            fullname=method.__qualname__,\n            hook_opts=hook_opts,\n        )\n        warn_explicit_for(cast(FunctionType, method), message)\n    return opts\n\n\n@final\nclass PytestPluginManager(PluginManager):\n    \"\"\"A :py:class:`pluggy.PluginManager <pluggy.PluginManager>` with\n    additional pytest-specific functionality:\n\n    * Loading plugins from the command line, ``PYTEST_PLUGINS`` env variable and\n      ``pytest_plugins`` global variables found in plugins being loaded.\n    * ``conftest.py`` loading during start-up.\n    \"\"\"\n\n    def __init__(self) -> None:\n        import _pytest.assertion\n\n        super().__init__(\"pytest\")\n\n        # -- State related to local conftest plugins.\n        # All loaded conftest modules.\n        self._conftest_plugins: set[types.ModuleType] = set()\n        # All conftest modules applicable for a directory.\n        # This includes the directory's own conftest modules as well\n        # as those of its parent directories.\n        self._dirpath2confmods: dict[pathlib.Path, list[types.ModuleType]] = {}\n        # Cutoff directory above which conftests are no longer discovered.\n        self._confcutdir: pathlib.Path | None = None\n        # If set, conftest loading is skipped.\n        self._noconftest = False\n\n        # _getconftestmodules()'s call to _get_directory() causes a stat\n        # storm when it's called potentially thousands of times in a test\n        # session (#9478), often with the same path, so cache it.\n        self._get_directory = lru_cache(256)(_get_directory)\n\n        # plugins that were explicitly skipped with pytest.skip\n        # list of (module name, skip reason)\n        # previously we would issue a warning when a plugin was skipped, but\n        # since we refactored warnings as first citizens of Config, they are\n        # just stored here to be used later.\n        self.skipped_plugins: list[tuple[str, str]] = []\n\n        self.add_hookspecs(_pytest.hookspec)\n        self.register(self)\n        if os.environ.get(\"PYTEST_DEBUG\"):\n            err: IO[str] = sys.stderr\n            encoding: str = getattr(err, \"encoding\", \"utf8\")\n            try:\n                err = open(\n                    os.dup(err.fileno()),\n                    mode=err.mode,\n                    buffering=1,\n                    encoding=encoding,\n                )\n            except Exception:\n                pass\n            self.trace.root.setwriter(err.write)\n            self.enable_tracing()\n\n        # Config._consider_importhook will set a real object if required.\n        self.rewrite_hook = _pytest.assertion.DummyRewriteHook()\n        # Used to know when we are importing conftests after the pytest_configure stage.\n        self._configured = False\n\n    def parse_hookimpl_opts(\n        self, plugin: _PluggyPlugin, name: str\n    ) -> HookimplOpts | None:\n        \"\"\":meta private:\"\"\"\n        # pytest hooks are always prefixed with \"pytest_\",\n        # so we avoid accessing possibly non-readable attributes\n        # (see issue #1073).\n        if not name.startswith(\"pytest_\"):\n            return None\n        # Ignore names which cannot be hooks.\n        if name == \"pytest_plugins\":\n            return None\n\n        opts = super().parse_hookimpl_opts(plugin, name)\n        if opts is not None:\n            return opts\n\n        method = getattr(plugin, name)\n        # Consider only actual functions for hooks (#3775).\n        if not inspect.isroutine(method):\n            return None\n        # Collect unmarked hooks as long as they have the `pytest_' prefix.\n        return _get_legacy_hook_marks(  # type: ignore[return-value]\n            method, \"impl\", (\"tryfirst\", \"trylast\", \"optionalhook\", \"hookwrapper\")\n        )\n\n    def parse_hookspec_opts(self, module_or_class, name: str) -> HookspecOpts | None:\n        \"\"\":meta private:\"\"\"\n        opts = super().parse_hookspec_opts(module_or_class, name)\n        if opts is None:\n            method = getattr(module_or_class, name)\n            if name.startswith(\"pytest_\"):\n                opts = _get_legacy_hook_marks(  # type: ignore[assignment]\n                    method,\n                    \"spec\",\n                    (\"firstresult\", \"historic\"),\n                )\n        return opts\n\n    def register(self, plugin: _PluggyPlugin, name: str | None = None) -> str | None:\n        if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:\n            warnings.warn(\n                PytestConfigWarning(\n                    \"{} plugin has been merged into the core, \"\n                    \"please remove it from your requirements.\".format(\n                        name.replace(\"_\", \"-\")\n                    )\n                )\n            )\n            return None\n        plugin_name = super().register(plugin, name)\n        if plugin_name is not None:\n            self.hook.pytest_plugin_registered.call_historic(\n                kwargs=dict(\n                    plugin=plugin,\n                    plugin_name=plugin_name,\n                    manager=self,\n                )\n            )\n\n            if isinstance(plugin, types.ModuleType):\n                self.consider_module(plugin)\n        return plugin_name\n\n    def getplugin(self, name: str):\n        # Support deprecated naming because plugins (xdist e.g.) use it.\n        plugin: _PluggyPlugin | None = self.get_plugin(name)\n        return plugin\n\n    def hasplugin(self, name: str) -> bool:\n        \"\"\"Return whether a plugin with the given name is registered.\"\"\"\n        return bool(self.get_plugin(name))\n\n    def pytest_configure(self, config: Config) -> None:\n        \"\"\":meta private:\"\"\"\n        # XXX now that the pluginmanager exposes hookimpl(tryfirst...)\n        # we should remove tryfirst/trylast as markers.\n        config.addinivalue_line(\n            \"markers\",\n            \"tryfirst: mark a hook implementation function such that the \"\n            \"plugin machinery will try to call it first/as early as possible. \"\n            \"DEPRECATED, use @pytest.hookimpl(tryfirst=True) instead.\",\n        )\n        config.addinivalue_line(\n            \"markers\",\n            \"trylast: mark a hook implementation function such that the \"\n            \"plugin machinery will try to call it last/as late as possible. \"\n            \"DEPRECATED, use @pytest.hookimpl(trylast=True) instead.\",\n        )\n        self._configured = True\n\n    #\n    # Internal API for local conftest plugin handling.\n    #\n    def _set_initial_conftests(\n        self,\n        args: Sequence[str | pathlib.Path],\n        pyargs: bool,\n        noconftest: bool,\n        rootpath: pathlib.Path,\n        confcutdir: pathlib.Path | None,\n        invocation_dir: pathlib.Path,\n        importmode: ImportMode | str,\n        *,\n        consider_namespace_packages: bool,\n    ) -> None:\n        \"\"\"Load initial conftest files given a preparsed \"namespace\".\n\n        As conftest files may add their own command line options which have\n        arguments ('--my-opt somepath') we might get some false positives.\n        All builtin and 3rd party plugins will have been loaded, however, so\n        common options will not confuse our logic here.\n        \"\"\"\n        self._confcutdir = (\n            absolutepath(invocation_dir / confcutdir) if confcutdir else None\n        )\n        self._noconftest = noconftest\n        self._using_pyargs = pyargs\n        foundanchor = False\n        for initial_path in args:\n            path = str(initial_path)\n            # remove node-id syntax\n            i = path.find(\"::\")\n            if i != -1:\n                path = path[:i]\n            anchor = absolutepath(invocation_dir / path)\n\n            # Ensure we do not break if what appears to be an anchor\n            # is in fact a very long option (#10169, #11394).\n            if safe_exists(anchor):\n                self._try_load_conftest(\n                    anchor,\n                    importmode,\n                    rootpath,\n                    consider_namespace_packages=consider_namespace_packages,\n                )\n                foundanchor = True\n        if not foundanchor:\n            self._try_load_conftest(\n                invocation_dir,\n                importmode,\n                rootpath,\n                consider_namespace_packages=consider_namespace_packages,\n            )\n\n    def _is_in_confcutdir(self, path: pathlib.Path) -> bool:\n        \"\"\"Whether to consider the given path to load conftests from.\"\"\"\n        if self._confcutdir is None:\n            return True\n        # The semantics here are literally:\n        #   Do not load a conftest if it is found upwards from confcut dir.\n        # But this is *not* the same as:\n        #   Load only conftests from confcutdir or below.\n        # At first glance they might seem the same thing, however we do support use cases where\n        # we want to load conftests that are not found in confcutdir or below, but are found\n        # in completely different directory hierarchies like packages installed\n        # in out-of-source trees.\n        # (see #9767 for a regression where the logic was inverted).\n        return path not in self._confcutdir.parents\n\n    def _try_load_conftest(\n        self,\n        anchor: pathlib.Path,\n        importmode: str | ImportMode,\n        rootpath: pathlib.Path,\n        *,\n        consider_namespace_packages: bool,\n    ) -> None:\n        self._loadconftestmodules(\n            anchor,\n            importmode,\n            rootpath,\n            consider_namespace_packages=consider_namespace_packages,\n        )\n        # let's also consider test* subdirs\n        if anchor.is_dir():\n            for x in anchor.glob(\"test*\"):\n                if x.is_dir():\n                    self._loadconftestmodules(\n                        x,\n                        importmode,\n                        rootpath,\n                        consider_namespace_packages=consider_namespace_packages,\n                    )\n\n    def _loadconftestmodules(\n        self,\n        path: pathlib.Path,\n        importmode: str | ImportMode,\n        rootpath: pathlib.Path,\n        *,\n        consider_namespace_packages: bool,\n    ) -> None:\n        if self._noconftest:\n            return\n\n        directory = self._get_directory(path)\n\n        # Optimization: avoid repeated searches in the same directory.\n        # Assumes always called with same importmode and rootpath.\n        if directory in self._dirpath2confmods:\n            return\n\n        clist = []\n        for parent in reversed((directory, *directory.parents)):\n            if self._is_in_confcutdir(parent):\n                conftestpath = parent / \"conftest.py\"\n                if conftestpath.is_file():\n                    mod = self._importconftest(\n                        conftestpath,\n                        importmode,\n                        rootpath,\n                        consider_namespace_packages=consider_namespace_packages,\n                    )\n                    clist.append(mod)\n        self._dirpath2confmods[directory] = clist\n\n    def _getconftestmodules(self, path: pathlib.Path) -> Sequence[types.ModuleType]:\n        directory = self._get_directory(path)\n        return self._dirpath2confmods.get(directory, ())\n\n    def _rget_with_confmod(\n        self,\n        name: str,\n        path: pathlib.Path,\n    ) -> tuple[types.ModuleType, Any]:\n        modules = self._getconftestmodules(path)\n        for mod in reversed(modules):\n            try:\n                return mod, getattr(mod, name)\n            except AttributeError:\n                continue\n        raise KeyError(name)\n\n    def _importconftest(\n        self,\n        conftestpath: pathlib.Path,\n        importmode: str | ImportMode,\n        rootpath: pathlib.Path,\n        *,\n        consider_namespace_packages: bool,\n    ) -> types.ModuleType:\n        conftestpath_plugin_name = str(conftestpath)\n        existing = self.get_plugin(conftestpath_plugin_name)\n        if existing is not None:\n            return cast(types.ModuleType, existing)\n\n        # conftest.py files there are not in a Python package all have module\n        # name \"conftest\", and thus conflict with each other. Clear the existing\n        # before loading the new one, otherwise the existing one will be\n        # returned from the module cache.\n        pkgpath = resolve_package_path(conftestpath)\n        if pkgpath is None:\n            try:\n                del sys.modules[conftestpath.stem]\n            except KeyError:\n                pass\n\n        try:\n            mod = import_path(\n                conftestpath,\n                mode=importmode,\n                root=rootpath,\n                consider_namespace_packages=consider_namespace_packages,\n            )\n        except Exception as e:\n            assert e.__traceback__ is not None\n            raise ConftestImportFailure(conftestpath, cause=e) from e\n\n        self._check_non_top_pytest_plugins(mod, conftestpath)\n\n        self._conftest_plugins.add(mod)\n        dirpath = conftestpath.parent\n        if dirpath in self._dirpath2confmods:\n            for path, mods in self._dirpath2confmods.items():\n                if dirpath in path.parents or path == dirpath:\n                    if mod in mods:\n                        raise AssertionError(\n                            f\"While trying to load conftest path {conftestpath!s}, \"\n                            f\"found that the module {mod} is already loaded with path {mod.__file__}. \"\n                            \"This is not supposed to happen. Please report this issue to pytest.\"\n                        )\n                    mods.append(mod)\n        self.trace(f\"loading conftestmodule {mod!r}\")\n        self.consider_conftest(mod, registration_name=conftestpath_plugin_name)\n        return mod\n\n    def _check_non_top_pytest_plugins(\n        self,\n        mod: types.ModuleType,\n        conftestpath: pathlib.Path,\n    ) -> None:\n        if (\n            hasattr(mod, \"pytest_plugins\")\n            and self._configured\n            and not self._using_pyargs\n        ):\n            msg = (\n                \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported:\\n\"\n                \"It affects the entire test suite instead of just below the conftest as expected.\\n\"\n                \"  {}\\n\"\n                \"Please move it to a top level conftest file at the rootdir:\\n\"\n                \"  {}\\n\"\n                \"For more information, visit:\\n\"\n                \"  https://docs.pytest.org/en/stable/deprecations.html#pytest-plugins-in-non-top-level-conftest-files\"\n            )\n            fail(msg.format(conftestpath, self._confcutdir), pytrace=False)\n\n    #\n    # API for bootstrapping plugin loading\n    #\n    #\n\n    def consider_preparse(\n        self, args: Sequence[str], *, exclude_only: bool = False\n    ) -> None:\n        \"\"\":meta private:\"\"\"\n        i = 0\n        n = len(args)\n        while i < n:\n            opt = args[i]\n            i += 1\n            if isinstance(opt, str):\n                if opt == \"-p\":\n                    try:\n                        parg = args[i]\n                    except IndexError:\n                        return\n                    i += 1\n                elif opt.startswith(\"-p\"):\n                    parg = opt[2:]\n                else:\n                    continue\n                parg = parg.strip()\n                if exclude_only and not parg.startswith(\"no:\"):\n                    continue\n                self.consider_pluginarg(parg)\n\n    def consider_pluginarg(self, arg: str) -> None:\n        \"\"\":meta private:\"\"\"\n        if arg.startswith(\"no:\"):\n            name = arg[3:]\n            if name in essential_plugins:\n                raise UsageError(f\"plugin {name} cannot be disabled\")\n\n            # PR #4304: remove stepwise if cacheprovider is blocked.\n            if name == \"cacheprovider\":\n                self.set_blocked(\"stepwise\")\n                self.set_blocked(\"pytest_stepwise\")\n\n            self.set_blocked(name)\n            if not name.startswith(\"pytest_\"):\n                self.set_blocked(\"pytest_\" + name)\n        else:\n            name = arg\n            # Unblock the plugin.\n            self.unblock(name)\n            if not name.startswith(\"pytest_\"):\n                self.unblock(\"pytest_\" + name)\n            self.import_plugin(arg, consider_entry_points=True)\n\n    def consider_conftest(\n        self, conftestmodule: types.ModuleType, registration_name: str\n    ) -> None:\n        \"\"\":meta private:\"\"\"\n        self.register(conftestmodule, name=registration_name)\n\n    def consider_env(self) -> None:\n        \"\"\":meta private:\"\"\"\n        self._import_plugin_specs(os.environ.get(\"PYTEST_PLUGINS\"))\n\n    def consider_module(self, mod: types.ModuleType) -> None:\n        \"\"\":meta private:\"\"\"\n        self._import_plugin_specs(getattr(mod, \"pytest_plugins\", []))\n\n    def _import_plugin_specs(\n        self, spec: None | types.ModuleType | str | Sequence[str]\n    ) -> None:\n        plugins = _get_plugin_specs_as_list(spec)\n        for import_spec in plugins:\n            self.import_plugin(import_spec)\n\n    def import_plugin(self, modname: str, consider_entry_points: bool = False) -> None:\n        \"\"\"Import a plugin with ``modname``.\n\n        If ``consider_entry_points`` is True, entry point names are also\n        considered to find a plugin.\n        \"\"\"\n        # Most often modname refers to builtin modules, e.g. \"pytester\",\n        # \"terminal\" or \"capture\".  Those plugins are registered under their\n        # basename for historic purposes but must be imported with the\n        # _pytest prefix.\n        assert isinstance(\n            modname, str\n        ), f\"module name as text required, got {modname!r}\"\n        if self.is_blocked(modname) or self.get_plugin(modname) is not None:\n            return\n\n        importspec = \"_pytest.\" + modname if modname in builtin_plugins else modname\n        self.rewrite_hook.mark_rewrite(importspec)\n\n        if consider_entry_points:\n            loaded = self.load_setuptools_entrypoints(\"pytest11\", name=modname)\n            if loaded:\n                return\n\n        try:\n            __import__(importspec)\n        except ImportError as e:\n            raise ImportError(\n                f'Error importing plugin \"{modname}\": {e.args[0]}'\n            ).with_traceback(e.__traceback__) from e\n\n        except Skipped as e:\n            self.skipped_plugins.append((modname, e.msg or \"\"))\n        else:\n            mod = sys.modules[importspec]\n            self.register(mod, modname)\n\n\ndef _get_plugin_specs_as_list(\n    specs: None | types.ModuleType | str | Sequence[str],\n) -> list[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        f\"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: {specs!r}\"\n    )\n\n\nclass Notset:\n    def __repr__(self):\n        return \"<NOTSET>\"\n\n\nnotset = Notset()\n\n\ndef _iter_rewritable_modules(package_files: Iterable[str]) -> Iterator[str]:\n    \"\"\"Given an iterable of file names in a source distribution, return the \"names\" that should\n    be marked for assertion rewrite.\n\n    For example the package \"pytest_mock/__init__.py\" should be added as \"pytest_mock\" in\n    the assertion rewrite mechanism.\n\n    This function has to deal with dist-info based distributions and egg based distributions\n    (which are still very much in use for \"editable\" installs).\n\n    Here are the file names as seen in a dist-info based distribution:\n\n        pytest_mock/__init__.py\n        pytest_mock/_version.py\n        pytest_mock/plugin.py\n        pytest_mock.egg-info/PKG-INFO\n\n    Here are the file names as seen in an egg based distribution:\n\n        src/pytest_mock/__init__.py\n        src/pytest_mock/_version.py\n        src/pytest_mock/plugin.py\n        src/pytest_mock.egg-info/PKG-INFO\n        LICENSE\n        setup.py\n\n    We have to take in account those two distribution flavors in order to determine which\n    names should be considered for assertion rewriting.\n\n    More information:\n        https://github.com/pytest-dev/pytest-mock/issues/167\n    \"\"\"\n    package_files = list(package_files)\n    seen_some = False\n    for fn in package_files:\n        is_simple_module = \"/\" not in fn and fn.endswith(\".py\")\n        is_package = fn.count(\"/\") == 1 and fn.endswith(\"__init__.py\")\n        if is_simple_module:\n            module_name, _ = os.path.splitext(fn)\n            # we ignore \"setup.py\" at the root of the distribution\n            # as well as editable installation finder modules made by setuptools\n            if module_name != \"setup\" and not module_name.startswith(\"__editable__\"):\n                seen_some = True\n                yield module_name\n        elif is_package:\n            package_name = os.path.dirname(fn)\n            seen_some = True\n            yield package_name\n\n    if not seen_some:\n        # At this point we did not find any packages or modules suitable for assertion\n        # rewriting, so we try again by stripping the first path component (to account for\n        # \"src\" based source trees for example).\n        # This approach lets us have the common case continue to be fast, as egg-distributions\n        # are rarer.\n        new_package_files = []\n        for fn in package_files:\n            parts = fn.split(\"/\")\n            new_fn = \"/\".join(parts[1:])\n            if new_fn:\n                new_package_files.append(new_fn)\n        if new_package_files:\n            yield from _iter_rewritable_modules(new_package_files)\n\n\n@final\nclass Config:\n    \"\"\"Access to configuration values, pluginmanager and plugin hooks.\n\n    :param PytestPluginManager pluginmanager:\n        A pytest PluginManager.\n\n    :param InvocationParams invocation_params:\n        Object containing parameters regarding the :func:`pytest.main`\n        invocation.\n    \"\"\"\n\n    @final\n    @dataclasses.dataclass(frozen=True)\n    class InvocationParams:\n        \"\"\"Holds parameters passed during :func:`pytest.main`.\n\n        The object attributes are read-only.\n\n        .. versionadded:: 5.1\n\n        .. note::\n\n            Note that the environment variable ``PYTEST_ADDOPTS`` and the ``addopts``\n            ini option are handled by pytest, not being included in the ``args`` attribute.\n\n            Plugins accessing ``InvocationParams`` must be aware of that.\n        \"\"\"\n\n        args: tuple[str, ...]\n        \"\"\"The command-line arguments as passed to :func:`pytest.main`.\"\"\"\n        plugins: Sequence[str | _PluggyPlugin] | None\n        \"\"\"Extra plugins, might be `None`.\"\"\"\n        dir: pathlib.Path\n        \"\"\"The directory from which :func:`pytest.main` was invoked. :type: pathlib.Path\"\"\"\n\n        def __init__(\n            self,\n            *,\n            args: Iterable[str],\n            plugins: Sequence[str | _PluggyPlugin] | None,\n            dir: pathlib.Path,\n        ) -> None:\n            object.__setattr__(self, \"args\", tuple(args))\n            object.__setattr__(self, \"plugins\", plugins)\n            object.__setattr__(self, \"dir\", dir)\n\n    class ArgsSource(enum.Enum):\n        \"\"\"Indicates the source of the test arguments.\n\n        .. versionadded:: 7.2\n        \"\"\"\n\n        #: Command line arguments.\n        ARGS = enum.auto()\n        #: Invocation directory.\n        INVOCATION_DIR = enum.auto()\n        INCOVATION_DIR = INVOCATION_DIR  # backwards compatibility alias\n        #: 'testpaths' configuration value.\n        TESTPATHS = enum.auto()\n\n    # Set by cacheprovider plugin.\n    cache: Cache\n\n    def __init__(\n        self,\n        pluginmanager: PytestPluginManager,\n        *,\n        invocation_params: InvocationParams | None = None,\n    ) -> None:\n        from .argparsing import FILE_OR_DIR\n        from .argparsing import Parser\n\n        if invocation_params is None:\n            invocation_params = self.InvocationParams(\n                args=(), plugins=None, dir=pathlib.Path.cwd()\n            )\n\n        self.option = argparse.Namespace()\n        \"\"\"Access to command line option as attributes.\n\n        :type: argparse.Namespace\n        \"\"\"\n\n        self.invocation_params = invocation_params\n        \"\"\"The parameters with which pytest was invoked.\n\n        :type: InvocationParams\n        \"\"\"\n\n        _a = FILE_OR_DIR\n        self._parser = Parser(\n            usage=f\"%(prog)s [options] [{_a}] [{_a}] [...]\",\n            processopt=self._processopt,\n            _ispytest=True,\n        )\n        self.pluginmanager = pluginmanager\n        \"\"\"The plugin manager handles plugin registration and hook invocation.\n\n        :type: PytestPluginManager\n        \"\"\"\n\n        self.stash = Stash()\n        \"\"\"A place where plugins can store information on the config for their\n        own use.\n\n        :type: Stash\n        \"\"\"\n        # Deprecated alias. Was never public. Can be removed in a few releases.\n        self._store = self.stash\n\n        self.trace = self.pluginmanager.trace.root.get(\"config\")\n        self.hook: pluggy.HookRelay = PathAwareHookProxy(self.pluginmanager.hook)  # type: ignore[assignment]\n        self._inicache: dict[str, Any] = {}\n        self._override_ini: Sequence[str] = ()\n        self._opt2dest: dict[str, str] = {}\n        self._cleanup: list[Callable[[], None]] = []\n        self.pluginmanager.register(self, \"pytestconfig\")\n        self._configured = False\n        self.hook.pytest_addoption.call_historic(\n            kwargs=dict(parser=self._parser, pluginmanager=self.pluginmanager)\n        )\n        self.args_source = Config.ArgsSource.ARGS\n        self.args: list[str] = []\n\n    @property\n    def rootpath(self) -> pathlib.Path:\n        \"\"\"The path to the :ref:`rootdir <rootdir>`.\n\n        :type: pathlib.Path\n\n        .. versionadded:: 6.1\n        \"\"\"\n        return self._rootpath\n\n    @property\n    def inipath(self) -> pathlib.Path | None:\n        \"\"\"The path to the :ref:`configfile <configfiles>`.\n\n        .. versionadded:: 6.1\n        \"\"\"\n        return self._inipath\n\n    def add_cleanup(self, func: Callable[[], None]) -> None:\n        \"\"\"Add a function to be called when the config object gets out of\n        use (usually coinciding with pytest_unconfigure).\"\"\"\n        self._cleanup.append(func)\n\n    def _do_configure(self) -> None:\n        assert not self._configured\n        self._configured = True\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"default\")\n            self.hook.pytest_configure.call_historic(kwargs=dict(config=self))\n\n    def _ensure_unconfigure(self) -> None:\n        if self._configured:\n            self._configured = False\n            self.hook.pytest_unconfigure(config=self)\n            self.hook.pytest_configure._call_history = []\n        while self._cleanup:\n            fin = self._cleanup.pop()\n            fin()\n\n    def get_terminal_writer(self) -> TerminalWriter:\n        terminalreporter: TerminalReporter | None = self.pluginmanager.get_plugin(\n            \"terminalreporter\"\n        )\n        assert terminalreporter is not None\n        return terminalreporter._tw\n\n    def pytest_cmdline_parse(\n        self, pluginmanager: PytestPluginManager, args: list[str]\n    ) -> Config:\n        try:\n            self.parse(args)\n        except UsageError:\n            # Handle --version and --help here in a minimal fashion.\n            # This gets done via helpconfig normally, but its\n            # pytest_cmdline_main is not called in case of errors.\n            if getattr(self.option, \"version\", False) or \"--version\" in args:\n                from _pytest.helpconfig import showversion\n\n                showversion(self)\n            elif (\n                getattr(self.option, \"help\", False) or \"--help\" in args or \"-h\" in args\n            ):\n                self._parser._getparser().print_help()\n                sys.stdout.write(\n                    \"\\nNOTE: displaying only minimal help due to UsageError.\\n\\n\"\n                )\n\n            raise\n\n        return self\n\n    def notify_exception(\n        self,\n        excinfo: ExceptionInfo[BaseException],\n        option: argparse.Namespace | None = None,\n    ) -> None:\n        if option and getattr(option, \"fulltrace\", False):\n            style: TracebackStyle = \"long\"\n        else:\n            style = \"native\"\n        excrepr = excinfo.getrepr(\n            funcargs=True, showlocals=getattr(option, \"showlocals\", False), style=style\n        )\n        res = self.hook.pytest_internalerror(excrepr=excrepr, excinfo=excinfo)\n        if not any(res):\n            for line in str(excrepr).split(\"\\n\"):\n                sys.stderr.write(f\"INTERNALERROR> {line}\\n\")\n                sys.stderr.flush()\n\n    def cwd_relative_nodeid(self, nodeid: str) -> str:\n        # nodeid's are relative to the rootpath, compute relative to cwd.\n        if self.invocation_params.dir != self.rootpath:\n            fullpath = self.rootpath / nodeid\n            nodeid = bestrelpath(self.invocation_params.dir, fullpath)\n        return nodeid\n\n    @classmethod\n    def fromdictargs(cls, option_dict, args) -> Config:\n        \"\"\"Constructor usable for subprocesses.\"\"\"\n        config = get_config(args)\n        config.option.__dict__.update(option_dict)\n        config.parse(args, addopts=False)\n        for x in config.option.plugins:\n            config.pluginmanager.consider_pluginarg(x)\n        return config\n\n    def _processopt(self, opt: Argument) -> None:\n        for name in opt._short_opts + opt._long_opts:\n            self._opt2dest[name] = opt.dest\n\n        if hasattr(opt, \"default\"):\n            if not hasattr(self.option, opt.dest):\n                setattr(self.option, opt.dest, opt.default)\n\n    @hookimpl(trylast=True)\n    def pytest_load_initial_conftests(self, early_config: Config) -> None:\n        # We haven't fully parsed the command line arguments yet, so\n        # early_config.args it not set yet. But we need it for\n        # discovering the initial conftests. So \"pre-run\" the logic here.\n        # It will be done for real in `parse()`.\n        args, args_source = early_config._decide_args(\n            args=early_config.known_args_namespace.file_or_dir,\n            pyargs=early_config.known_args_namespace.pyargs,\n            testpaths=early_config.getini(\"testpaths\"),\n            invocation_dir=early_config.invocation_params.dir,\n            rootpath=early_config.rootpath,\n            warn=False,\n        )\n        self.pluginmanager._set_initial_conftests(\n            args=args,\n            pyargs=early_config.known_args_namespace.pyargs,\n            noconftest=early_config.known_args_namespace.noconftest,\n            rootpath=early_config.rootpath,\n            confcutdir=early_config.known_args_namespace.confcutdir,\n            invocation_dir=early_config.invocation_params.dir,\n            importmode=early_config.known_args_namespace.importmode,\n            consider_namespace_packages=early_config.getini(\n                \"consider_namespace_packages\"\n            ),\n        )\n\n    def _initini(self, args: Sequence[str]) -> None:\n        ns, unknown_args = self._parser.parse_known_and_unknown_args(\n            args, namespace=copy.copy(self.option)\n        )\n        rootpath, inipath, inicfg = determine_setup(\n            inifile=ns.inifilename,\n            args=ns.file_or_dir + unknown_args,\n            rootdir_cmd_arg=ns.rootdir or None,\n            invocation_dir=self.invocation_params.dir,\n        )\n        self._rootpath = rootpath\n        self._inipath = inipath\n        self.inicfg = inicfg\n        self._parser.extra_info[\"rootdir\"] = str(self.rootpath)\n        self._parser.extra_info[\"inifile\"] = str(self.inipath)\n        self._parser.addini(\"addopts\", \"Extra command line options\", \"args\")\n        self._parser.addini(\"minversion\", \"Minimally required pytest version\")\n        self._parser.addini(\n            \"required_plugins\",\n            \"Plugins that must be present for pytest to run\",\n            type=\"args\",\n            default=[],\n        )\n        self._override_ini = ns.override_ini or ()\n\n    def _consider_importhook(self, args: Sequence[str]) -> None:\n        \"\"\"Install the PEP 302 import hook if using assertion rewriting.\n\n        Needs to parse the --assert=<mode> option from the commandline\n        and find all the installed plugins to mark them for rewriting\n        by the importhook.\n        \"\"\"\n        ns, unknown_args = self._parser.parse_known_and_unknown_args(args)\n        mode = getattr(ns, \"assertmode\", \"plain\")\n        if mode == \"rewrite\":\n            import _pytest.assertion\n\n            try:\n                hook = _pytest.assertion.install_importhook(self)\n            except SystemError:\n                mode = \"plain\"\n            else:\n                self._mark_plugins_for_rewrite(hook)\n        self._warn_about_missing_assertion(mode)\n\n    def _mark_plugins_for_rewrite(self, hook) -> None:\n        \"\"\"Given an importhook, mark for rewrite any top-level\n        modules or packages in the distribution package for\n        all pytest plugins.\"\"\"\n        self.pluginmanager.rewrite_hook = hook\n\n        if os.environ.get(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\"):\n            # We don't autoload from distribution package entry points,\n            # no need to continue.\n            return\n\n        package_files = (\n            str(file)\n            for dist in importlib.metadata.distributions()\n            if any(ep.group == \"pytest11\" for ep in dist.entry_points)\n            for file in dist.files or []\n        )\n\n        for name in _iter_rewritable_modules(package_files):\n            hook.mark_rewrite(name)\n\n    def _validate_args(self, args: list[str], via: str) -> list[str]:\n        \"\"\"Validate known args.\"\"\"\n        self._parser._config_source_hint = via  # type: ignore\n        try:\n            self._parser.parse_known_and_unknown_args(\n                args, namespace=copy.copy(self.option)\n            )\n        finally:\n            del self._parser._config_source_hint  # type: ignore\n\n        return args\n\n    def _decide_args(\n        self,\n        *,\n        args: list[str],\n        pyargs: bool,\n        testpaths: list[str],\n        invocation_dir: pathlib.Path,\n        rootpath: pathlib.Path,\n        warn: bool,\n    ) -> tuple[list[str], ArgsSource]:\n        \"\"\"Decide the args (initial paths/nodeids) to use given the relevant inputs.\n\n        :param warn: Whether can issue warnings.\n\n        :returns: The args and the args source. Guaranteed to be non-empty.\n        \"\"\"\n        if args:\n            source = Config.ArgsSource.ARGS\n            result = args\n        else:\n            if invocation_dir == rootpath:\n                source = Config.ArgsSource.TESTPATHS\n                if pyargs:\n                    result = testpaths\n                else:\n                    result = []\n                    for path in testpaths:\n                        result.extend(sorted(glob.iglob(path, recursive=True)))\n                    if testpaths and not result:\n                        if warn:\n                            warning_text = (\n                                \"No files were found in testpaths; \"\n                                \"consider removing or adjusting your testpaths configuration. \"\n                                \"Searching recursively from the current directory instead.\"\n                            )\n                            self.issue_config_time_warning(\n                                PytestConfigWarning(warning_text), stacklevel=3\n                            )\n            else:\n                result = []\n            if not result:\n                source = Config.ArgsSource.INVOCATION_DIR\n                result = [str(invocation_dir)]\n        return result, source\n\n    def _preparse(self, args: list[str], addopts: bool = True) -> None:\n        if addopts:\n            env_addopts = os.environ.get(\"PYTEST_ADDOPTS\", \"\")\n            if len(env_addopts):\n                args[:] = (\n                    self._validate_args(shlex.split(env_addopts), \"via PYTEST_ADDOPTS\")\n                    + args\n                )\n        self._initini(args)\n        if addopts:\n            args[:] = (\n                self._validate_args(self.getini(\"addopts\"), \"via addopts config\") + args\n            )\n\n        self.known_args_namespace = self._parser.parse_known_args(\n            args, namespace=copy.copy(self.option)\n        )\n        self._checkversion()\n        self._consider_importhook(args)\n        self.pluginmanager.consider_preparse(args, exclude_only=False)\n        if not os.environ.get(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\"):\n            # Don't autoload from distribution package entry point. Only\n            # explicitly specified plugins are going to be loaded.\n            self.pluginmanager.load_setuptools_entrypoints(\"pytest11\")\n        self.pluginmanager.consider_env()\n\n        self.known_args_namespace = self._parser.parse_known_args(\n            args, namespace=copy.copy(self.known_args_namespace)\n        )\n\n        self._validate_plugins()\n        self._warn_about_skipped_plugins()\n\n        if self.known_args_namespace.confcutdir is None:\n            if self.inipath is not None:\n                confcutdir = str(self.inipath.parent)\n            else:\n                confcutdir = str(self.rootpath)\n            self.known_args_namespace.confcutdir = confcutdir\n        try:\n            self.hook.pytest_load_initial_conftests(\n                early_config=self, args=args, parser=self._parser\n            )\n        except ConftestImportFailure as e:\n            if self.known_args_namespace.help or self.known_args_namespace.version:\n                # we don't want to prevent --help/--version to work\n                # so just let is pass and print a warning at the end\n                self.issue_config_time_warning(\n                    PytestConfigWarning(f\"could not load initial conftests: {e.path}\"),\n                    stacklevel=2,\n                )\n            else:\n                raise\n\n    @hookimpl(wrapper=True)\n    def pytest_collection(self) -> Generator[None, object, object]:\n        # Validate invalid ini keys after collection is done so we take in account\n        # options added by late-loading conftest files.\n        try:\n            return (yield)\n        finally:\n            self._validate_config_options()\n\n    def _checkversion(self) -> None:\n        import pytest\n\n        minver = self.inicfg.get(\"minversion\", None)\n        if minver:\n            # Imported lazily to improve start-up time.\n            from packaging.version import Version\n\n            if not isinstance(minver, str):\n                raise pytest.UsageError(\n                    f\"{self.inipath}: 'minversion' must be a single value\"\n                )\n\n            if Version(minver) > Version(pytest.__version__):\n                raise pytest.UsageError(\n                    f\"{self.inipath}: 'minversion' requires pytest-{minver}, actual pytest-{pytest.__version__}'\"\n                )\n\n    def _validate_config_options(self) -> None:\n        for key in sorted(self._get_unknown_ini_keys()):\n            self._warn_or_fail_if_strict(f\"Unknown config option: {key}\\n\")\n\n    def _validate_plugins(self) -> None:\n        required_plugins = sorted(self.getini(\"required_plugins\"))\n        if not required_plugins:\n            return\n\n        # Imported lazily to improve start-up time.\n        from packaging.requirements import InvalidRequirement\n        from packaging.requirements import Requirement\n        from packaging.version import Version\n\n        plugin_info = self.pluginmanager.list_plugin_distinfo()\n        plugin_dist_info = {dist.project_name: dist.version for _, dist in plugin_info}\n\n        missing_plugins = []\n        for required_plugin in required_plugins:\n            try:\n                req = Requirement(required_plugin)\n            except InvalidRequirement:\n                missing_plugins.append(required_plugin)\n                continue\n\n            if req.name not in plugin_dist_info:\n                missing_plugins.append(required_plugin)\n            elif not req.specifier.contains(\n                Version(plugin_dist_info[req.name]), prereleases=True\n            ):\n                missing_plugins.append(required_plugin)\n\n        if missing_plugins:\n            raise UsageError(\n                \"Missing required plugins: {}\".format(\", \".join(missing_plugins)),\n            )\n\n    def _warn_or_fail_if_strict(self, message: str) -> None:\n        if self.known_args_namespace.strict_config:\n            raise UsageError(message)\n\n        self.issue_config_time_warning(PytestConfigWarning(message), stacklevel=3)\n\n    def _get_unknown_ini_keys(self) -> list[str]:\n        parser_inicfg = self._parser._inidict\n        return [name for name in self.inicfg if name not in parser_inicfg]\n\n    def parse(self, args: list[str], addopts: bool = True) -> None:\n        # Parse given cmdline arguments into this config object.\n        assert (\n            self.args == []\n        ), \"can only parse cmdline args at most once per Config object\"\n        self.hook.pytest_addhooks.call_historic(\n            kwargs=dict(pluginmanager=self.pluginmanager)\n        )\n        self._preparse(args, addopts=addopts)\n        self._parser.after_preparse = True  # type: ignore\n        try:\n            args = self._parser.parse_setoption(\n                args, self.option, namespace=self.option\n            )\n            self.args, self.args_source = self._decide_args(\n                args=args,\n                pyargs=self.known_args_namespace.pyargs,\n                testpaths=self.getini(\"testpaths\"),\n                invocation_dir=self.invocation_params.dir,\n                rootpath=self.rootpath,\n                warn=True,\n            )\n        except PrintHelp:\n            pass\n\n    def issue_config_time_warning(self, warning: Warning, stacklevel: int) -> None:\n        \"\"\"Issue and handle a warning during the \"configure\" stage.\n\n        During ``pytest_configure`` we can't capture warnings using the ``catch_warnings_for_item``\n        function because it is not possible to have hook wrappers around ``pytest_configure``.\n\n        This function is mainly intended for plugins that need to issue warnings during\n        ``pytest_configure`` (or similar stages).\n\n        :param warning: The warning instance.\n        :param stacklevel: stacklevel forwarded to warnings.warn.\n        \"\"\"\n        if self.pluginmanager.is_blocked(\"warnings\"):\n            return\n\n        cmdline_filters = self.known_args_namespace.pythonwarnings or []\n        config_filters = self.getini(\"filterwarnings\")\n\n        with warnings.catch_warnings(record=True) as records:\n            warnings.simplefilter(\"always\", type(warning))\n            apply_warning_filters(config_filters, cmdline_filters)\n            warnings.warn(warning, stacklevel=stacklevel)\n\n        if records:\n            frame = sys._getframe(stacklevel - 1)\n            location = frame.f_code.co_filename, frame.f_lineno, frame.f_code.co_name\n            self.hook.pytest_warning_recorded.call_historic(\n                kwargs=dict(\n                    warning_message=records[0],\n                    when=\"config\",\n                    nodeid=\"\",\n                    location=location,\n                )\n            )\n\n    def addinivalue_line(self, name: str, line: str) -> None:\n        \"\"\"Add a line to an ini-file option. The option must have been\n        declared but might not yet be set in which case the line becomes\n        the first line in its value.\"\"\"\n        x = self.getini(name)\n        assert isinstance(x, list)\n        x.append(line)  # modifies the cached list inline\n\n    def getini(self, name: str):\n        \"\"\"Return configuration value from an :ref:`ini file <configfiles>`.\n\n        If a configuration value is not defined in an\n        :ref:`ini file <configfiles>`, then the ``default`` value provided while\n        registering the configuration through\n        :func:`parser.addini <pytest.Parser.addini>` will be returned.\n        Please note that you can even provide ``None`` as a valid\n        default value.\n\n        If ``default`` is not provided while registering using\n        :func:`parser.addini <pytest.Parser.addini>`, then a default value\n        based on the ``type`` parameter passed to\n        :func:`parser.addini <pytest.Parser.addini>` will be returned.\n        The default values based on ``type`` are:\n        ``paths``, ``pathlist``, ``args`` and ``linelist`` : empty list ``[]``\n        ``bool`` : ``False``\n        ``string`` : empty string ``\"\"``\n\n        If neither the ``default`` nor the ``type`` parameter is passed\n        while registering the configuration through\n        :func:`parser.addini <pytest.Parser.addini>`, then the configuration\n        is treated as a string and a default empty string '' is returned.\n\n        If the specified name hasn't been registered through a prior\n        :func:`parser.addini <pytest.Parser.addini>` call (usually from a\n        plugin), a ValueError is raised.\n        \"\"\"\n        try:\n            return self._inicache[name]\n        except KeyError:\n            self._inicache[name] = val = self._getini(name)\n            return val\n\n    # Meant for easy monkeypatching by legacypath plugin.\n    # Can be inlined back (with no cover removed) once legacypath is gone.\n    def _getini_unknown_type(self, name: str, type: str, value: str | list[str]):\n        msg = f\"unknown configuration type: {type}\"\n        raise ValueError(msg, value)  # pragma: no cover\n\n    def _getini(self, name: str):\n        try:\n            description, type, default = self._parser._inidict[name]\n        except KeyError as e:\n            raise ValueError(f\"unknown configuration value: {name!r}\") from e\n        override_value = self._get_override_ini_value(name)\n        if override_value is None:\n            try:\n                value = self.inicfg[name]\n            except KeyError:\n                return default\n        else:\n            value = override_value\n        # Coerce the values based on types.\n        #\n        # Note: some coercions are only required if we are reading from .ini files, because\n        # the file format doesn't contain type information, but when reading from toml we will\n        # get either str or list of str values (see _parse_ini_config_from_pyproject_toml).\n        # For example:\n        #\n        #   ini:\n        #     a_line_list = \"tests acceptance\"\n        #   in this case, we need to split the string to obtain a list of strings.\n        #\n        #   toml:\n        #     a_line_list = [\"tests\", \"acceptance\"]\n        #   in this case, we already have a list ready to use.\n        #\n        if type == \"paths\":\n            dp = (\n                self.inipath.parent\n                if self.inipath is not None\n                else self.invocation_params.dir\n            )\n            input_values = shlex.split(value) if isinstance(value, str) else value\n            return [dp / x for x in input_values]\n        elif type == \"args\":\n            return shlex.split(value) if isinstance(value, str) else value\n        elif type == \"linelist\":\n            if isinstance(value, str):\n                return [t for t in map(lambda x: x.strip(), value.split(\"\\n\")) if t]\n            else:\n                return value\n        elif type == \"bool\":\n            return _strtobool(str(value).strip())\n        elif type == \"string\":\n            return value\n        elif type is None:\n            return value\n        else:\n            return self._getini_unknown_type(name, type, value)\n\n    def _getconftest_pathlist(\n        self, name: str, path: pathlib.Path\n    ) -> list[pathlib.Path] | None:\n        try:\n            mod, relroots = self.pluginmanager._rget_with_confmod(name, path)\n        except KeyError:\n            return None\n        assert mod.__file__ is not None\n        modpath = pathlib.Path(mod.__file__).parent\n        values: list[pathlib.Path] = []\n        for relroot in relroots:\n            if isinstance(relroot, os.PathLike):\n                relroot = pathlib.Path(relroot)\n            else:\n                relroot = relroot.replace(\"/\", os.sep)\n                relroot = absolutepath(modpath / relroot)\n            values.append(relroot)\n        return values\n\n    def _get_override_ini_value(self, name: str) -> str | None:\n        value = None\n        # override_ini is a list of \"ini=value\" options.\n        # Always use the last item if multiple values are set for same ini-name,\n        # e.g. -o foo=bar1 -o foo=bar2 will set foo to bar2.\n        for ini_config in self._override_ini:\n            try:\n                key, user_ini_value = ini_config.split(\"=\", 1)\n            except ValueError as e:\n                raise UsageError(\n                    f\"-o/--override-ini expects option=value style (got: {ini_config!r}).\"\n                ) from e\n            else:\n                if key == name:\n                    value = user_ini_value\n        return value\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n\n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n            val = getattr(self.option, name)\n            if val is None and skip:\n                raise AttributeError(name)\n            return val\n        except AttributeError as e:\n            if default is not notset:\n                return default\n            if skip:\n                import pytest\n\n                pytest.skip(f\"no {name!r} option found\")\n            raise ValueError(f\"no option named {name!r}\") from e\n\n    def getvalue(self, name: str, path=None):\n        \"\"\"Deprecated, use getoption() instead.\"\"\"\n        return self.getoption(name)\n\n    def getvalueorskip(self, name: str, path=None):\n        \"\"\"Deprecated, use getoption(skip=True) instead.\"\"\"\n        return self.getoption(name, skip=True)\n\n    #: Verbosity type for failed assertions (see :confval:`verbosity_assertions`).\n    VERBOSITY_ASSERTIONS: Final = \"assertions\"\n    #: Verbosity type for test case execution (see :confval:`verbosity_test_cases`).\n    VERBOSITY_TEST_CASES: Final = \"test_cases\"\n    _VERBOSITY_INI_DEFAULT: Final = \"auto\"\n\n    def get_verbosity(self, verbosity_type: str | None = None) -> int:\n        r\"\"\"Retrieve the verbosity level for a fine-grained verbosity type.\n\n        :param verbosity_type: Verbosity type to get level for. If a level is\n            configured for the given type, that value will be returned. If the\n            given type is not a known verbosity type, the global verbosity\n            level will be returned. If the given type is None (default), the\n            global verbosity level will be returned.\n\n        To configure a level for a fine-grained verbosity type, the\n        configuration file should have a setting for the configuration name\n        and a numeric value for the verbosity level. A special value of \"auto\"\n        can be used to explicitly use the global verbosity level.\n\n        Example:\n\n        .. code-block:: ini\n\n            # content of pytest.ini\n            [pytest]\n            verbosity_assertions = 2\n\n        .. code-block:: console\n\n            pytest -v\n\n        .. code-block:: python\n\n            print(config.get_verbosity())  # 1\n            print(config.get_verbosity(Config.VERBOSITY_ASSERTIONS))  # 2\n        \"\"\"\n        global_level = self.option.verbose\n        assert isinstance(global_level, int)\n        if verbosity_type is None:\n            return global_level\n\n        ini_name = Config._verbosity_ini_name(verbosity_type)\n        if ini_name not in self._parser._inidict:\n            return global_level\n\n        level = self.getini(ini_name)\n        if level == Config._VERBOSITY_INI_DEFAULT:\n            return global_level\n\n        return int(level)\n\n    @staticmethod\n    def _verbosity_ini_name(verbosity_type: str) -> str:\n        return f\"verbosity_{verbosity_type}\"\n\n    @staticmethod\n    def _add_verbosity_ini(parser: Parser, verbosity_type: str, help: str) -> None:\n        \"\"\"Add a output verbosity configuration option for the given output type.\n\n        :param parser: Parser for command line arguments and ini-file values.\n        :param verbosity_type: Fine-grained verbosity category.\n        :param help: Description of the output this type controls.\n\n        The value should be retrieved via a call to\n        :py:func:`config.get_verbosity(type) <pytest.Config.get_verbosity>`.\n        \"\"\"\n        parser.addini(\n            Config._verbosity_ini_name(verbosity_type),\n            help=help,\n            type=\"string\",\n            default=Config._VERBOSITY_INI_DEFAULT,\n        )\n\n    def _warn_about_missing_assertion(self, mode: str) -> None:\n        if not _assertion_supported():\n            if mode == \"plain\":\n                warning_text = (\n                    \"ASSERTIONS ARE NOT EXECUTED\"\n                    \" and FAILING TESTS WILL PASS.  Are you\"\n                    \" using python -O?\"\n                )\n            else:\n                warning_text = (\n                    \"assertions not in test modules or\"\n                    \" plugins will be ignored\"\n                    \" because assert statements are not executed \"\n                    \"by the underlying Python interpreter \"\n                    \"(are you using python -O?)\\n\"\n                )\n            self.issue_config_time_warning(\n                PytestConfigWarning(warning_text),\n                stacklevel=3,\n            )\n\n    def _warn_about_skipped_plugins(self) -> None:\n        for module_name, msg in self.pluginmanager.skipped_plugins:\n            self.issue_config_time_warning(\n                PytestConfigWarning(f\"skipped plugin {module_name!r}: {msg}\"),\n                stacklevel=2,\n            )\n\n\ndef _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False  # type: ignore[unreachable]\n\n\ndef create_terminal_writer(\n    config: Config, file: TextIO | None = None\n) -> TerminalWriter:\n    \"\"\"Create a TerminalWriter instance configured according to the options\n    in the config object.\n\n    Every code which requires a TerminalWriter object and has access to a\n    config object should use this function.\n    \"\"\"\n    tw = TerminalWriter(file=file)\n\n    if config.option.color == \"yes\":\n        tw.hasmarkup = True\n    elif config.option.color == \"no\":\n        tw.hasmarkup = False\n\n    if config.option.code_highlight == \"yes\":\n        tw.code_highlight = True\n    elif config.option.code_highlight == \"no\":\n        tw.code_highlight = False\n\n    return tw\n\n\ndef _strtobool(val: str) -> bool:\n    \"\"\"Convert a string representation of truth to True or False.\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n\n    .. note:: Copied from distutils.util.\n    \"\"\"\n    val = val.lower()\n    if val in (\"y\", \"yes\", \"t\", \"true\", \"on\", \"1\"):\n        return True\n    elif val in (\"n\", \"no\", \"f\", \"false\", \"off\", \"0\"):\n        return False\n    else:\n        raise ValueError(f\"invalid truth value {val!r}\")\n\n\n@lru_cache(maxsize=50)\ndef parse_warning_filter(\n    arg: str, *, escape: bool\n) -> tuple[warnings._ActionKind, str, type[Warning], str, int]:\n    \"\"\"Parse a warnings filter string.\n\n    This is copied from warnings._setoption with the following changes:\n\n    * Does not apply the filter.\n    * Escaping is optional.\n    * Raises UsageError so we get nice error messages on failure.\n    \"\"\"\n    __tracebackhide__ = True\n    error_template = dedent(\n        f\"\"\"\\\n        while parsing the following warning configuration:\n\n          {arg}\n\n        This error occurred:\n\n        {{error}}\n        \"\"\"\n    )\n\n    parts = arg.split(\":\")\n    if len(parts) > 5:\n        doc_url = (\n            \"https://docs.python.org/3/library/warnings.html#describing-warning-filters\"\n        )\n        error = dedent(\n            f\"\"\"\\\n            Too many fields ({len(parts)}), expected at most 5 separated by colons:\n\n              action:message:category:module:line\n\n            For more information please consult: {doc_url}\n            \"\"\"\n        )\n        raise UsageError(error_template.format(error=error))\n\n    while len(parts) < 5:\n        parts.append(\"\")\n    action_, message, category_, module, lineno_ = (s.strip() for s in parts)\n    try:\n        action: warnings._ActionKind = warnings._getaction(action_)  # type: ignore[attr-defined]\n    except warnings._OptionError as e:\n        raise UsageError(error_template.format(error=str(e))) from None\n    try:\n        category: type[Warning] = _resolve_warning_category(category_)\n    except Exception:\n        exc_info = ExceptionInfo.from_current()\n        exception_text = exc_info.getrepr(style=\"native\")\n        raise UsageError(error_template.format(error=exception_text)) from None\n    if message and escape:\n        message = re.escape(message)\n    if module and escape:\n        module = re.escape(module) + r\"\\Z\"\n    if lineno_:\n        try:\n            lineno = int(lineno_)\n            if lineno < 0:\n                raise ValueError(\"number is negative\")\n        except ValueError as e:\n            raise UsageError(\n                error_template.format(error=f\"invalid lineno {lineno_!r}: {e}\")\n            ) from None\n    else:\n        lineno = 0\n    return action, message, category, module, lineno\n\n\ndef _resolve_warning_category(category: str) -> type[Warning]:\n    \"\"\"\n    Copied from warnings._getcategory, but changed so it lets exceptions (specially ImportErrors)\n    propagate so we can get access to their tracebacks (#9218).\n    \"\"\"\n    __tracebackhide__ = True\n    if not category:\n        return Warning\n\n    if \".\" not in category:\n        import builtins as m\n\n        klass = category\n    else:\n        module, _, klass = category.rpartition(\".\")\n        m = __import__(module, None, None, [klass])\n    cat = getattr(m, klass)\n    if not issubclass(cat, Warning):\n        raise UsageError(f\"{cat} is not a Warning subclass\")\n    return cast(Type[Warning], cat)\n\n\ndef apply_warning_filters(\n    config_filters: Iterable[str], cmdline_filters: Iterable[str]\n) -> None:\n    \"\"\"Applies pytest-configured filters to the warnings module\"\"\"\n    # Filters should have this precedence: cmdline options, config.\n    # Filters should be applied in the inverse order of precedence.\n    for arg in config_filters:\n        warnings.filterwarnings(*parse_warning_filter(arg, escape=False))\n\n    for arg in cmdline_filters:\n        warnings.filterwarnings(*parse_warning_filter(arg, escape=True))\n", "src/_pytest/config/compat.py": "from __future__ import annotations\n\nimport functools\nfrom pathlib import Path\nfrom typing import Any\nfrom typing import Mapping\nimport warnings\n\nimport pluggy\n\nfrom ..compat import LEGACY_PATH\nfrom ..compat import legacy_path\nfrom ..deprecated import HOOK_LEGACY_PATH_ARG\n\n\n# hookname: (Path, LEGACY_PATH)\nimply_paths_hooks: Mapping[str, tuple[str, str]] = {\n    \"pytest_ignore_collect\": (\"collection_path\", \"path\"),\n    \"pytest_collect_file\": (\"file_path\", \"path\"),\n    \"pytest_pycollect_makemodule\": (\"module_path\", \"path\"),\n    \"pytest_report_header\": (\"start_path\", \"startdir\"),\n    \"pytest_report_collectionfinish\": (\"start_path\", \"startdir\"),\n}\n\n\ndef _check_path(path: Path, fspath: LEGACY_PATH) -> None:\n    if Path(fspath) != path:\n        raise ValueError(\n            f\"Path({fspath!r}) != {path!r}\\n\"\n            \"if both path and fspath are given they need to be equal\"\n        )\n\n\nclass PathAwareHookProxy:\n    \"\"\"\n    this helper wraps around hook callers\n    until pluggy supports fixingcalls, this one will do\n\n    it currently doesn't return full hook caller proxies for fixed hooks,\n    this may have to be changed later depending on bugs\n    \"\"\"\n\n    def __init__(self, hook_relay: pluggy.HookRelay) -> None:\n        self._hook_relay = hook_relay\n\n    def __dir__(self) -> list[str]:\n        return dir(self._hook_relay)\n\n    def __getattr__(self, key: str) -> pluggy.HookCaller:\n        hook: pluggy.HookCaller = getattr(self._hook_relay, key)\n        if key not in imply_paths_hooks:\n            self.__dict__[key] = hook\n            return hook\n        else:\n            path_var, fspath_var = imply_paths_hooks[key]\n\n            @functools.wraps(hook)\n            def fixed_hook(**kw: Any) -> Any:\n                path_value: Path | None = kw.pop(path_var, None)\n                fspath_value: LEGACY_PATH | None = kw.pop(fspath_var, None)\n                if fspath_value is not None:\n                    warnings.warn(\n                        HOOK_LEGACY_PATH_ARG.format(\n                            pylib_path_arg=fspath_var, pathlib_path_arg=path_var\n                        ),\n                        stacklevel=2,\n                    )\n                if path_value is not None:\n                    if fspath_value is not None:\n                        _check_path(path_value, fspath_value)\n                    else:\n                        fspath_value = legacy_path(path_value)\n                else:\n                    assert fspath_value is not None\n                    path_value = Path(fspath_value)\n\n                kw[path_var] = path_value\n                kw[fspath_var] = fspath_value\n                return hook(**kw)\n\n            fixed_hook.name = hook.name  # type: ignore[attr-defined]\n            fixed_hook.spec = hook.spec  # type: ignore[attr-defined]\n            fixed_hook.__name__ = key\n            self.__dict__[key] = fixed_hook\n            return fixed_hook  # type: ignore[return-value]\n", "src/_pytest/config/argparsing.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport argparse\nfrom gettext import gettext\nimport os\nimport sys\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import final\nfrom typing import List\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import NoReturn\nfrom typing import Sequence\n\nimport _pytest._io\nfrom _pytest.config.exceptions import UsageError\nfrom _pytest.deprecated import check_ispytest\n\n\nFILE_OR_DIR = \"file_or_dir\"\n\n\nclass NotSet:\n    def __repr__(self) -> str:\n        return \"<notset>\"\n\n\nNOT_SET = NotSet()\n\n\n@final\nclass Parser:\n    \"\"\"Parser for command line arguments and ini-file values.\n\n    :ivar extra_info: Dict of generic param -> value to display in case\n        there's an error processing the command line arguments.\n    \"\"\"\n\n    prog: str | None = None\n\n    def __init__(\n        self,\n        usage: str | None = None,\n        processopt: Callable[[Argument], None] | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        self._anonymous = OptionGroup(\"Custom options\", parser=self, _ispytest=True)\n        self._groups: list[OptionGroup] = []\n        self._processopt = processopt\n        self._usage = usage\n        self._inidict: dict[str, tuple[str, str | None, Any]] = {}\n        self._ininames: list[str] = []\n        self.extra_info: dict[str, Any] = {}\n\n    def processoption(self, option: Argument) -> None:\n        if self._processopt:\n            if option.dest:\n                self._processopt(option)\n\n    def getgroup(\n        self, name: str, description: str = \"\", after: str | None = None\n    ) -> OptionGroup:\n        \"\"\"Get (or create) a named option Group.\n\n        :param name: Name of the option group.\n        :param description: Long description for --help output.\n        :param after: Name of another group, used for ordering --help output.\n        :returns: The option group.\n\n        The returned group object has an ``addoption`` method with the same\n        signature as :func:`parser.addoption <pytest.Parser.addoption>` but\n        will be shown in the respective group in the output of\n        ``pytest --help``.\n        \"\"\"\n        for group in self._groups:\n            if group.name == name:\n                return group\n        group = OptionGroup(name, description, parser=self, _ispytest=True)\n        i = 0\n        for i, grp in enumerate(self._groups):\n            if grp.name == after:\n                break\n        self._groups.insert(i + 1, group)\n        return group\n\n    def addoption(self, *opts: str, **attrs: Any) -> None:\n        \"\"\"Register a command line option.\n\n        :param opts:\n            Option names, can be short or long options.\n        :param attrs:\n            Same attributes as the argparse library's :meth:`add_argument()\n            <argparse.ArgumentParser.add_argument>` function accepts.\n\n        After command line parsing, options are available on the pytest config\n        object via ``config.option.NAME`` where ``NAME`` is usually set\n        by passing a ``dest`` attribute, for example\n        ``addoption(\"--long\", dest=\"NAME\", ...)``.\n        \"\"\"\n        self._anonymous.addoption(*opts, **attrs)\n\n    def parse(\n        self,\n        args: Sequence[str | os.PathLike[str]],\n        namespace: argparse.Namespace | None = None,\n    ) -> argparse.Namespace:\n        from _pytest._argcomplete import try_argcomplete\n\n        self.optparser = self._getparser()\n        try_argcomplete(self.optparser)\n        strargs = [os.fspath(x) for x in args]\n        return self.optparser.parse_args(strargs, namespace=namespace)\n\n    def _getparser(self) -> MyOptionParser:\n        from _pytest._argcomplete import filescompleter\n\n        optparser = MyOptionParser(self, self.extra_info, prog=self.prog)\n        groups = [*self._groups, self._anonymous]\n        for group in groups:\n            if group.options:\n                desc = group.description or group.name\n                arggroup = optparser.add_argument_group(desc)\n                for option in group.options:\n                    n = option.names()\n                    a = option.attrs()\n                    arggroup.add_argument(*n, **a)\n        file_or_dir_arg = optparser.add_argument(FILE_OR_DIR, nargs=\"*\")\n        # bash like autocompletion for dirs (appending '/')\n        # Type ignored because typeshed doesn't know about argcomplete.\n        file_or_dir_arg.completer = filescompleter  # type: ignore\n        return optparser\n\n    def parse_setoption(\n        self,\n        args: Sequence[str | os.PathLike[str]],\n        option: argparse.Namespace,\n        namespace: argparse.Namespace | None = None,\n    ) -> list[str]:\n        parsedoption = self.parse(args, namespace=namespace)\n        for name, value in parsedoption.__dict__.items():\n            setattr(option, name, value)\n        return cast(List[str], getattr(parsedoption, FILE_OR_DIR))\n\n    def parse_known_args(\n        self,\n        args: Sequence[str | os.PathLike[str]],\n        namespace: argparse.Namespace | None = None,\n    ) -> argparse.Namespace:\n        \"\"\"Parse the known arguments at this point.\n\n        :returns: An argparse namespace object.\n        \"\"\"\n        return self.parse_known_and_unknown_args(args, namespace=namespace)[0]\n\n    def parse_known_and_unknown_args(\n        self,\n        args: Sequence[str | os.PathLike[str]],\n        namespace: argparse.Namespace | None = None,\n    ) -> tuple[argparse.Namespace, list[str]]:\n        \"\"\"Parse the known arguments at this point, and also return the\n        remaining unknown arguments.\n\n        :returns:\n            A tuple containing an argparse namespace object for the known\n            arguments, and a list of the unknown arguments.\n        \"\"\"\n        optparser = self._getparser()\n        strargs = [os.fspath(x) for x in args]\n        return optparser.parse_known_args(strargs, namespace=namespace)\n\n    def addini(\n        self,\n        name: str,\n        help: str,\n        type: Literal[\"string\", \"paths\", \"pathlist\", \"args\", \"linelist\", \"bool\"]\n        | None = None,\n        default: Any = NOT_SET,\n    ) -> None:\n        \"\"\"Register an ini-file option.\n\n        :param name:\n            Name of the ini-variable.\n        :param type:\n            Type of the variable. Can be:\n\n                * ``string``: a string\n                * ``bool``: a boolean\n                * ``args``: a list of strings, separated as in a shell\n                * ``linelist``: a list of strings, separated by line breaks\n                * ``paths``: a list of :class:`pathlib.Path`, separated as in a shell\n                * ``pathlist``: a list of ``py.path``, separated as in a shell\n\n            For ``paths`` and ``pathlist`` types, they are considered relative to the ini-file.\n            In case the execution is happening without an ini-file defined,\n            they will be considered relative to the current working directory (for example with ``--override-ini``).\n\n            .. versionadded:: 7.0\n                The ``paths`` variable type.\n\n            .. versionadded:: 8.1\n                Use the current working directory to resolve ``paths`` and ``pathlist`` in the absence of an ini-file.\n\n            Defaults to ``string`` if ``None`` or not passed.\n        :param default:\n            Default value if no ini-file option exists but is queried.\n\n        The value of ini-variables can be retrieved via a call to\n        :py:func:`config.getini(name) <pytest.Config.getini>`.\n        \"\"\"\n        assert type in (None, \"string\", \"paths\", \"pathlist\", \"args\", \"linelist\", \"bool\")\n        if default is NOT_SET:\n            default = get_ini_default_for_type(type)\n\n        self._inidict[name] = (help, type, default)\n        self._ininames.append(name)\n\n\ndef get_ini_default_for_type(\n    type: Literal[\"string\", \"paths\", \"pathlist\", \"args\", \"linelist\", \"bool\"] | None,\n) -> Any:\n    \"\"\"\n    Used by addini to get the default value for a given ini-option type, when\n    default is not supplied.\n    \"\"\"\n    if type is None:\n        return \"\"\n    elif type in (\"paths\", \"pathlist\", \"args\", \"linelist\"):\n        return []\n    elif type == \"bool\":\n        return False\n    else:\n        return \"\"\n\n\nclass ArgumentError(Exception):\n    \"\"\"Raised if an Argument instance is created with invalid or\n    inconsistent arguments.\"\"\"\n\n    def __init__(self, msg: str, option: Argument | str) -> None:\n        self.msg = msg\n        self.option_id = str(option)\n\n    def __str__(self) -> str:\n        if self.option_id:\n            return f\"option {self.option_id}: {self.msg}\"\n        else:\n            return self.msg\n\n\nclass Argument:\n    \"\"\"Class that mimics the necessary behaviour of optparse.Option.\n\n    It's currently a least effort implementation and ignoring choices\n    and integer prefixes.\n\n    https://docs.python.org/3/library/optparse.html#optparse-standard-option-types\n    \"\"\"\n\n    def __init__(self, *names: str, **attrs: Any) -> None:\n        \"\"\"Store params in private vars for use in add_argument.\"\"\"\n        self._attrs = attrs\n        self._short_opts: list[str] = []\n        self._long_opts: list[str] = []\n        try:\n            self.type = attrs[\"type\"]\n        except KeyError:\n            pass\n        try:\n            # Attribute existence is tested in Config._processopt.\n            self.default = attrs[\"default\"]\n        except KeyError:\n            pass\n        self._set_opt_strings(names)\n        dest: str | None = attrs.get(\"dest\")\n        if dest:\n            self.dest = dest\n        elif self._long_opts:\n            self.dest = self._long_opts[0][2:].replace(\"-\", \"_\")\n        else:\n            try:\n                self.dest = self._short_opts[0][1:]\n            except IndexError as e:\n                self.dest = \"???\"  # Needed for the error repr.\n                raise ArgumentError(\"need a long or short option\", self) from e\n\n    def names(self) -> list[str]:\n        return self._short_opts + self._long_opts\n\n    def attrs(self) -> Mapping[str, Any]:\n        # Update any attributes set by processopt.\n        attrs = \"default dest help\".split()\n        attrs.append(self.dest)\n        for attr in attrs:\n            try:\n                self._attrs[attr] = getattr(self, attr)\n            except AttributeError:\n                pass\n        return self._attrs\n\n    def _set_opt_strings(self, opts: Sequence[str]) -> None:\n        \"\"\"Directly from optparse.\n\n        Might not be necessary as this is passed to argparse later on.\n        \"\"\"\n        for opt in opts:\n            if len(opt) < 2:\n                raise ArgumentError(\n                    f\"invalid option string {opt!r}: \"\n                    \"must be at least two characters long\",\n                    self,\n                )\n            elif len(opt) == 2:\n                if not (opt[0] == \"-\" and opt[1] != \"-\"):\n                    raise ArgumentError(\n                        f\"invalid short option string {opt!r}: \"\n                        \"must be of the form -x, (x any non-dash char)\",\n                        self,\n                    )\n                self._short_opts.append(opt)\n            else:\n                if not (opt[0:2] == \"--\" and opt[2] != \"-\"):\n                    raise ArgumentError(\n                        f\"invalid long option string {opt!r}: \"\n                        \"must start with --, followed by non-dash\",\n                        self,\n                    )\n                self._long_opts.append(opt)\n\n    def __repr__(self) -> str:\n        args: list[str] = []\n        if self._short_opts:\n            args += [\"_short_opts: \" + repr(self._short_opts)]\n        if self._long_opts:\n            args += [\"_long_opts: \" + repr(self._long_opts)]\n        args += [\"dest: \" + repr(self.dest)]\n        if hasattr(self, \"type\"):\n            args += [\"type: \" + repr(self.type)]\n        if hasattr(self, \"default\"):\n            args += [\"default: \" + repr(self.default)]\n        return \"Argument({})\".format(\", \".join(args))\n\n\nclass OptionGroup:\n    \"\"\"A group of options shown in its own section.\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        description: str = \"\",\n        parser: Parser | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        self.name = name\n        self.description = description\n        self.options: list[Argument] = []\n        self.parser = parser\n\n    def addoption(self, *opts: str, **attrs: Any) -> None:\n        \"\"\"Add an option to this group.\n\n        If a shortened version of a long option is specified, it will\n        be suppressed in the help. ``addoption('--twowords', '--two-words')``\n        results in help showing ``--two-words`` only, but ``--twowords`` gets\n        accepted **and** the automatic destination is in ``args.twowords``.\n\n        :param opts:\n            Option names, can be short or long options.\n        :param attrs:\n            Same attributes as the argparse library's :meth:`add_argument()\n            <argparse.ArgumentParser.add_argument>` function accepts.\n        \"\"\"\n        conflict = set(opts).intersection(\n            name for opt in self.options for name in opt.names()\n        )\n        if conflict:\n            raise ValueError(f\"option names {conflict} already added\")\n        option = Argument(*opts, **attrs)\n        self._addoption_instance(option, shortupper=False)\n\n    def _addoption(self, *opts: str, **attrs: Any) -> None:\n        option = Argument(*opts, **attrs)\n        self._addoption_instance(option, shortupper=True)\n\n    def _addoption_instance(self, option: Argument, shortupper: bool = False) -> None:\n        if not shortupper:\n            for opt in option._short_opts:\n                if opt[0] == \"-\" and opt[1].islower():\n                    raise ValueError(\"lowercase shortoptions reserved\")\n        if self.parser:\n            self.parser.processoption(option)\n        self.options.append(option)\n\n\nclass MyOptionParser(argparse.ArgumentParser):\n    def __init__(\n        self,\n        parser: Parser,\n        extra_info: dict[str, Any] | None = None,\n        prog: str | None = None,\n    ) -> None:\n        self._parser = parser\n        super().__init__(\n            prog=prog,\n            usage=parser._usage,\n            add_help=False,\n            formatter_class=DropShorterLongHelpFormatter,\n            allow_abbrev=False,\n            fromfile_prefix_chars=\"@\",\n        )\n        # extra_info is a dict of (param -> value) to display if there's\n        # an usage error to provide more contextual information to the user.\n        self.extra_info = extra_info if extra_info else {}\n\n    def error(self, message: str) -> NoReturn:\n        \"\"\"Transform argparse error message into UsageError.\"\"\"\n        msg = f\"{self.prog}: error: {message}\"\n\n        if hasattr(self._parser, \"_config_source_hint\"):\n            msg = f\"{msg} ({self._parser._config_source_hint})\"\n\n        raise UsageError(self.format_usage() + msg)\n\n    # Type ignored because typeshed has a very complex type in the superclass.\n    def parse_args(  # type: ignore\n        self,\n        args: Sequence[str] | None = None,\n        namespace: argparse.Namespace | None = None,\n    ) -> argparse.Namespace:\n        \"\"\"Allow splitting of positional arguments.\"\"\"\n        parsed, unrecognized = self.parse_known_args(args, namespace)\n        if unrecognized:\n            for arg in unrecognized:\n                if arg and arg[0] == \"-\":\n                    lines = [\n                        \"unrecognized arguments: {}\".format(\" \".join(unrecognized))\n                    ]\n                    for k, v in sorted(self.extra_info.items()):\n                        lines.append(f\"  {k}: {v}\")\n                    self.error(\"\\n\".join(lines))\n            getattr(parsed, FILE_OR_DIR).extend(unrecognized)\n        return parsed\n\n    if sys.version_info < (3, 9):  # pragma: no cover\n        # Backport of https://github.com/python/cpython/pull/14316 so we can\n        # disable long --argument abbreviations without breaking short flags.\n        def _parse_optional(\n            self, arg_string: str\n        ) -> tuple[argparse.Action | None, str, str | None] | None:\n            if not arg_string:\n                return None\n            if arg_string[0] not in self.prefix_chars:\n                return None\n            if arg_string in self._option_string_actions:\n                action = self._option_string_actions[arg_string]\n                return action, arg_string, None\n            if len(arg_string) == 1:\n                return None\n            if \"=\" in arg_string:\n                option_string, explicit_arg = arg_string.split(\"=\", 1)\n                if option_string in self._option_string_actions:\n                    action = self._option_string_actions[option_string]\n                    return action, option_string, explicit_arg\n            if self.allow_abbrev or not arg_string.startswith(\"--\"):\n                option_tuples = self._get_option_tuples(arg_string)\n                if len(option_tuples) > 1:\n                    msg = gettext(\n                        \"ambiguous option: %(option)s could match %(matches)s\"\n                    )\n                    options = \", \".join(option for _, option, _ in option_tuples)\n                    self.error(msg % {\"option\": arg_string, \"matches\": options})\n                elif len(option_tuples) == 1:\n                    (option_tuple,) = option_tuples\n                    return option_tuple\n            if self._negative_number_matcher.match(arg_string):\n                if not self._has_negative_number_optionals:\n                    return None\n            if \" \" in arg_string:\n                return None\n            return None, arg_string, None\n\n\nclass DropShorterLongHelpFormatter(argparse.HelpFormatter):\n    \"\"\"Shorten help for long options that differ only in extra hyphens.\n\n    - Collapse **long** options that are the same except for extra hyphens.\n    - Shortcut if there are only two options and one of them is a short one.\n    - Cache result on the action object as this is called at least 2 times.\n    \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        # Use more accurate terminal width.\n        if \"width\" not in kwargs:\n            kwargs[\"width\"] = _pytest._io.get_terminal_width()\n        super().__init__(*args, **kwargs)\n\n    def _format_action_invocation(self, action: argparse.Action) -> str:\n        orgstr = super()._format_action_invocation(action)\n        if orgstr and orgstr[0] != \"-\":  # only optional arguments\n            return orgstr\n        res: str | None = getattr(action, \"_formatted_action_invocation\", None)\n        if res:\n            return res\n        options = orgstr.split(\", \")\n        if len(options) == 2 and (len(options[0]) == 2 or len(options[1]) == 2):\n            # a shortcut for '-h, --help' or '--abc', '-a'\n            action._formatted_action_invocation = orgstr  # type: ignore\n            return orgstr\n        return_list = []\n        short_long: dict[str, str] = {}\n        for option in options:\n            if len(option) == 2 or option[2] == \" \":\n                continue\n            if not option.startswith(\"--\"):\n                raise ArgumentError(\n                    f'long optional argument without \"--\": [{option}]', option\n                )\n            xxoption = option[2:]\n            shortened = xxoption.replace(\"-\", \"\")\n            if shortened not in short_long or len(short_long[shortened]) < len(\n                xxoption\n            ):\n                short_long[shortened] = xxoption\n        # now short_long has been filled out to the longest with dashes\n        # **and** we keep the right option ordering from add_argument\n        for option in options:\n            if len(option) == 2 or option[2] == \" \":\n                return_list.append(option)\n            if option[2:] == short_long.get(option.replace(\"-\", \"\")):\n                return_list.append(option.replace(\" \", \"=\", 1))\n        formatted_action_invocation = \", \".join(return_list)\n        action._formatted_action_invocation = formatted_action_invocation  # type: ignore\n        return formatted_action_invocation\n\n    def _split_lines(self, text, width):\n        \"\"\"Wrap lines after splitting on original newlines.\n\n        This allows to have explicit line breaks in the help text.\n        \"\"\"\n        import textwrap\n\n        lines = []\n        for line in text.splitlines():\n            lines.extend(textwrap.wrap(line.strip(), width))\n        return lines\n", "src/_pytest/config/findpaths.py": "from __future__ import annotations\n\nimport os\nfrom pathlib import Path\nimport sys\nfrom typing import Iterable\nfrom typing import Sequence\n\nimport iniconfig\n\nfrom .exceptions import UsageError\nfrom _pytest.outcomes import fail\nfrom _pytest.pathlib import absolutepath\nfrom _pytest.pathlib import commonpath\nfrom _pytest.pathlib import safe_exists\n\n\ndef _parse_ini_config(path: Path) -> iniconfig.IniConfig:\n    \"\"\"Parse the given generic '.ini' file using legacy IniConfig parser, returning\n    the parsed object.\n\n    Raise UsageError if the file cannot be parsed.\n    \"\"\"\n    try:\n        return iniconfig.IniConfig(str(path))\n    except iniconfig.ParseError as exc:\n        raise UsageError(str(exc)) from exc\n\n\ndef load_config_dict_from_file(\n    filepath: Path,\n) -> dict[str, str | list[str]] | None:\n    \"\"\"Load pytest configuration from the given file path, if supported.\n\n    Return None if the file does not contain valid pytest configuration.\n    \"\"\"\n    # Configuration from ini files are obtained from the [pytest] section, if present.\n    if filepath.suffix == \".ini\":\n        iniconfig = _parse_ini_config(filepath)\n\n        if \"pytest\" in iniconfig:\n            return dict(iniconfig[\"pytest\"].items())\n        else:\n            # \"pytest.ini\" files are always the source of configuration, even if empty.\n            if filepath.name == \"pytest.ini\":\n                return {}\n\n    # '.cfg' files are considered if they contain a \"[tool:pytest]\" section.\n    elif filepath.suffix == \".cfg\":\n        iniconfig = _parse_ini_config(filepath)\n\n        if \"tool:pytest\" in iniconfig.sections:\n            return dict(iniconfig[\"tool:pytest\"].items())\n        elif \"pytest\" in iniconfig.sections:\n            # If a setup.cfg contains a \"[pytest]\" section, we raise a failure to indicate users that\n            # plain \"[pytest]\" sections in setup.cfg files is no longer supported (#3086).\n            fail(CFG_PYTEST_SECTION.format(filename=\"setup.cfg\"), pytrace=False)\n\n    # '.toml' files are considered if they contain a [tool.pytest.ini_options] table.\n    elif filepath.suffix == \".toml\":\n        if sys.version_info >= (3, 11):\n            import tomllib\n        else:\n            import tomli as tomllib\n\n        toml_text = filepath.read_text(encoding=\"utf-8\")\n        try:\n            config = tomllib.loads(toml_text)\n        except tomllib.TOMLDecodeError as exc:\n            raise UsageError(f\"{filepath}: {exc}\") from exc\n\n        result = config.get(\"tool\", {}).get(\"pytest\", {}).get(\"ini_options\", None)\n        if result is not None:\n            # TOML supports richer data types than ini files (strings, arrays, floats, ints, etc),\n            # however we need to convert all scalar values to str for compatibility with the rest\n            # of the configuration system, which expects strings only.\n            def make_scalar(v: object) -> str | list[str]:\n                return v if isinstance(v, list) else str(v)\n\n            return {k: make_scalar(v) for k, v in result.items()}\n\n    return None\n\n\ndef locate_config(\n    invocation_dir: Path,\n    args: Iterable[Path],\n) -> tuple[Path | None, Path | None, dict[str, str | list[str]]]:\n    \"\"\"Search in the list of arguments for a valid ini-file for pytest,\n    and return a tuple of (rootdir, inifile, cfg-dict).\"\"\"\n    config_names = [\n        \"pytest.ini\",\n        \".pytest.ini\",\n        \"pyproject.toml\",\n        \"tox.ini\",\n        \"setup.cfg\",\n    ]\n    args = [x for x in args if not str(x).startswith(\"-\")]\n    if not args:\n        args = [invocation_dir]\n    found_pyproject_toml: Path | None = None\n    for arg in args:\n        argpath = absolutepath(arg)\n        for base in (argpath, *argpath.parents):\n            for config_name in config_names:\n                p = base / config_name\n                if p.is_file():\n                    if p.name == \"pyproject.toml\" and found_pyproject_toml is None:\n                        found_pyproject_toml = p\n                    ini_config = load_config_dict_from_file(p)\n                    if ini_config is not None:\n                        return base, p, ini_config\n    if found_pyproject_toml is not None:\n        return found_pyproject_toml.parent, found_pyproject_toml, {}\n    return None, None, {}\n\n\ndef get_common_ancestor(\n    invocation_dir: Path,\n    paths: Iterable[Path],\n) -> Path:\n    common_ancestor: Path | None = None\n    for path in paths:\n        if not path.exists():\n            continue\n        if common_ancestor is None:\n            common_ancestor = path\n        else:\n            if common_ancestor in path.parents or path == common_ancestor:\n                continue\n            elif path in common_ancestor.parents:\n                common_ancestor = path\n            else:\n                shared = commonpath(path, common_ancestor)\n                if shared is not None:\n                    common_ancestor = shared\n    if common_ancestor is None:\n        common_ancestor = invocation_dir\n    elif common_ancestor.is_file():\n        common_ancestor = common_ancestor.parent\n    return common_ancestor\n\n\ndef get_dirs_from_args(args: Iterable[str]) -> list[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]\n\n\nCFG_PYTEST_SECTION = \"[pytest] section in {filename} files is no longer supported, change to [tool:pytest] instead.\"\n\n\ndef determine_setup(\n    *,\n    inifile: str | None,\n    args: Sequence[str],\n    rootdir_cmd_arg: str | None,\n    invocation_dir: Path,\n) -> tuple[Path, Path | None, dict[str, str | list[str]]]:\n    \"\"\"Determine the rootdir, inifile and ini configuration values from the\n    command line arguments.\n\n    :param inifile:\n        The `--inifile` command line argument, if given.\n    :param args:\n        The free command line arguments.\n    :param rootdir_cmd_arg:\n        The `--rootdir` command line argument, if given.\n    :param invocation_dir:\n        The working directory when pytest was invoked.\n    \"\"\"\n    rootdir = None\n    dirs = get_dirs_from_args(args)\n    if inifile:\n        inipath_ = absolutepath(inifile)\n        inipath: Path | None = inipath_\n        inicfg = load_config_dict_from_file(inipath_) or {}\n        if rootdir_cmd_arg is None:\n            rootdir = inipath_.parent\n    else:\n        ancestor = get_common_ancestor(invocation_dir, dirs)\n        rootdir, inipath, inicfg = locate_config(invocation_dir, [ancestor])\n        if rootdir is None and rootdir_cmd_arg is None:\n            for possible_rootdir in (ancestor, *ancestor.parents):\n                if (possible_rootdir / \"setup.py\").is_file():\n                    rootdir = possible_rootdir\n                    break\n            else:\n                if dirs != [ancestor]:\n                    rootdir, inipath, inicfg = locate_config(invocation_dir, dirs)\n                if rootdir is None:\n                    rootdir = get_common_ancestor(\n                        invocation_dir, [invocation_dir, ancestor]\n                    )\n                    if is_fs_root(rootdir):\n                        rootdir = ancestor\n    if rootdir_cmd_arg:\n        rootdir = absolutepath(os.path.expandvars(rootdir_cmd_arg))\n        if not rootdir.is_dir():\n            raise UsageError(\n                f\"Directory '{rootdir}' not found. Check your '--rootdir' option.\"\n            )\n    assert rootdir is not None\n    return rootdir, inipath, inicfg or {}\n\n\ndef is_fs_root(p: Path) -> bool:\n    r\"\"\"\n    Return True if the given path is pointing to the root of the\n    file system (\"/\" on Unix and \"C:\\\\\" on Windows for example).\n    \"\"\"\n    return os.path.splitdrive(str(p))[1] == os.sep\n", "src/_pytest/_py/path.py": "# mypy: allow-untyped-defs\n\"\"\"local path implementation.\"\"\"\n\nfrom __future__ import annotations\n\nimport atexit\nfrom contextlib import contextmanager\nimport fnmatch\nimport importlib.util\nimport io\nimport os\nfrom os.path import abspath\nfrom os.path import dirname\nfrom os.path import exists\nfrom os.path import isabs\nfrom os.path import isdir\nfrom os.path import isfile\nfrom os.path import islink\nfrom os.path import normpath\nimport posixpath\nfrom stat import S_ISDIR\nfrom stat import S_ISLNK\nfrom stat import S_ISREG\nimport sys\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Literal\nfrom typing import overload\nfrom typing import TYPE_CHECKING\nimport uuid\nimport warnings\n\nfrom . import error\n\n\n# Moved from local.py.\niswin32 = sys.platform == \"win32\" or (getattr(os, \"_name\", False) == \"nt\")\n\n\nclass Checkers:\n    _depend_on_existence = \"exists\", \"link\", \"dir\", \"file\"\n\n    def __init__(self, path):\n        self.path = path\n\n    def dotfile(self):\n        return self.path.basename.startswith(\".\")\n\n    def ext(self, arg):\n        if not arg.startswith(\".\"):\n            arg = \".\" + arg\n        return self.path.ext == arg\n\n    def basename(self, arg):\n        return self.path.basename == arg\n\n    def basestarts(self, arg):\n        return self.path.basename.startswith(arg)\n\n    def relto(self, arg):\n        return self.path.relto(arg)\n\n    def fnmatch(self, arg):\n        return self.path.fnmatch(arg)\n\n    def endswith(self, arg):\n        return str(self.path).endswith(arg)\n\n    def _evaluate(self, kw):\n        from .._code.source import getrawcode\n\n        for name, value in kw.items():\n            invert = False\n            meth = None\n            try:\n                meth = getattr(self, name)\n            except AttributeError:\n                if name[:3] == \"not\":\n                    invert = True\n                    try:\n                        meth = getattr(self, name[3:])\n                    except AttributeError:\n                        pass\n            if meth is None:\n                raise TypeError(f\"no {name!r} checker available for {self.path!r}\")\n            try:\n                if getrawcode(meth).co_argcount > 1:\n                    if (not meth(value)) ^ invert:\n                        return False\n                else:\n                    if bool(value) ^ bool(meth()) ^ invert:\n                        return False\n            except (error.ENOENT, error.ENOTDIR, error.EBUSY):\n                # EBUSY feels not entirely correct,\n                # but its kind of necessary since ENOMEDIUM\n                # is not accessible in python\n                for name in self._depend_on_existence:\n                    if name in kw:\n                        if kw.get(name):\n                            return False\n                    name = \"not\" + name\n                    if name in kw:\n                        if not kw.get(name):\n                            return False\n        return True\n\n    _statcache: Stat\n\n    def _stat(self) -> Stat:\n        try:\n            return self._statcache\n        except AttributeError:\n            try:\n                self._statcache = self.path.stat()\n            except error.ELOOP:\n                self._statcache = self.path.lstat()\n            return self._statcache\n\n    def dir(self):\n        return S_ISDIR(self._stat().mode)\n\n    def file(self):\n        return S_ISREG(self._stat().mode)\n\n    def exists(self):\n        return self._stat()\n\n    def link(self):\n        st = self.path.lstat()\n        return S_ISLNK(st.mode)\n\n\nclass NeverRaised(Exception):\n    pass\n\n\nclass Visitor:\n    def __init__(self, fil, rec, ignore, bf, sort):\n        if isinstance(fil, str):\n            fil = FNMatcher(fil)\n        if isinstance(rec, str):\n            self.rec: Callable[[LocalPath], bool] = FNMatcher(rec)\n        elif not hasattr(rec, \"__call__\") and rec:\n            self.rec = lambda path: True\n        else:\n            self.rec = rec\n        self.fil = fil\n        self.ignore = ignore\n        self.breadthfirst = bf\n        self.optsort = cast(Callable[[Any], Any], sorted) if sort else (lambda x: x)\n\n    def gen(self, path):\n        try:\n            entries = path.listdir()\n        except self.ignore:\n            return\n        rec = self.rec\n        dirs = self.optsort(\n            [p for p in entries if p.check(dir=1) and (rec is None or rec(p))]\n        )\n        if not self.breadthfirst:\n            for subdir in dirs:\n                yield from self.gen(subdir)\n        for p in self.optsort(entries):\n            if self.fil is None or self.fil(p):\n                yield p\n        if self.breadthfirst:\n            for subdir in dirs:\n                yield from self.gen(subdir)\n\n\nclass FNMatcher:\n    def __init__(self, pattern):\n        self.pattern = pattern\n\n    def __call__(self, path):\n        pattern = self.pattern\n\n        if (\n            pattern.find(path.sep) == -1\n            and iswin32\n            and pattern.find(posixpath.sep) != -1\n        ):\n            # Running on Windows, the pattern has no Windows path separators,\n            # and the pattern has one or more Posix path separators. Replace\n            # the Posix path separators with the Windows path separator.\n            pattern = pattern.replace(posixpath.sep, path.sep)\n\n        if pattern.find(path.sep) == -1:\n            name = path.basename\n        else:\n            name = str(path)  # path.strpath # XXX svn?\n            if not os.path.isabs(pattern):\n                pattern = \"*\" + path.sep + pattern\n        return fnmatch.fnmatch(name, pattern)\n\n\ndef map_as_list(func, iter):\n    return list(map(func, iter))\n\n\nclass Stat:\n    if TYPE_CHECKING:\n\n        @property\n        def size(self) -> int: ...\n\n        @property\n        def mtime(self) -> float: ...\n\n    def __getattr__(self, name: str) -> Any:\n        return getattr(self._osstatresult, \"st_\" + name)\n\n    def __init__(self, path, osstatresult):\n        self.path = path\n        self._osstatresult = osstatresult\n\n    @property\n    def owner(self):\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import pwd\n\n        entry = error.checked_call(pwd.getpwuid, self.uid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n    def isdir(self):\n        return S_ISDIR(self._osstatresult.st_mode)\n\n    def isfile(self):\n        return S_ISREG(self._osstatresult.st_mode)\n\n    def islink(self):\n        self.path.lstat()\n        return S_ISLNK(self._osstatresult.st_mode)\n\n\ndef getuserid(user):\n    import pwd\n\n    if not isinstance(user, int):\n        user = pwd.getpwnam(user)[2]  # type:ignore[attr-defined,unused-ignore]\n    return user\n\n\ndef getgroupid(group):\n    import grp\n\n    if not isinstance(group, int):\n        group = grp.getgrnam(group)[2]  # type:ignore[attr-defined,unused-ignore]\n    return group\n\n\nclass LocalPath:\n    \"\"\"Object oriented interface to os.path and other local filesystem\n    related information.\n    \"\"\"\n\n    class ImportMismatchError(ImportError):\n        \"\"\"raised on pyimport() if there is a mismatch of __file__'s\"\"\"\n\n    sep = os.sep\n\n    def __init__(self, path=None, expanduser=False):\n        \"\"\"Initialize and return a local Path instance.\n\n        Path can be relative to the current directory.\n        If path is None it defaults to the current working directory.\n        If expanduser is True, tilde-expansion is performed.\n        Note that Path instances always carry an absolute path.\n        Note also that passing in a local path object will simply return\n        the exact same path object. Use new() to get a new copy.\n        \"\"\"\n        if path is None:\n            self.strpath = error.checked_call(os.getcwd)\n        else:\n            try:\n                path = os.fspath(path)\n            except TypeError:\n                raise ValueError(\n                    \"can only pass None, Path instances \"\n                    \"or non-empty strings to LocalPath\"\n                )\n            if expanduser:\n                path = os.path.expanduser(path)\n            self.strpath = abspath(path)\n\n    if sys.platform != \"win32\":\n\n        def chown(self, user, group, rec=0):\n            \"\"\"Change ownership to the given user and group.\n            user and group may be specified by a number or\n            by a name.  if rec is True change ownership\n            recursively.\n            \"\"\"\n            uid = getuserid(user)\n            gid = getgroupid(group)\n            if rec:\n                for x in self.visit(rec=lambda x: x.check(link=0)):\n                    if x.check(link=0):\n                        error.checked_call(os.chown, str(x), uid, gid)\n            error.checked_call(os.chown, str(self), uid, gid)\n\n        def readlink(self) -> str:\n            \"\"\"Return value of a symbolic link.\"\"\"\n            # https://github.com/python/mypy/issues/12278\n            return error.checked_call(os.readlink, self.strpath)  # type: ignore[arg-type,return-value,unused-ignore]\n\n        def mklinkto(self, oldname):\n            \"\"\"Posix style hard link to another name.\"\"\"\n            error.checked_call(os.link, str(oldname), str(self))\n\n        def mksymlinkto(self, value, absolute=1):\n            \"\"\"Create a symbolic link with the given value (pointing to another name).\"\"\"\n            if absolute:\n                error.checked_call(os.symlink, str(value), self.strpath)\n            else:\n                base = self.common(value)\n                # with posix local paths '/' is always a common base\n                relsource = self.__class__(value).relto(base)\n                reldest = self.relto(base)\n                n = reldest.count(self.sep)\n                target = self.sep.join((\"..\",) * n + (relsource,))\n                error.checked_call(os.symlink, target, self.strpath)\n\n    def __div__(self, other):\n        return self.join(os.fspath(other))\n\n    __truediv__ = __div__  # py3k\n\n    @property\n    def basename(self):\n        \"\"\"Basename part of path.\"\"\"\n        return self._getbyspec(\"basename\")[0]\n\n    @property\n    def dirname(self):\n        \"\"\"Dirname part of path.\"\"\"\n        return self._getbyspec(\"dirname\")[0]\n\n    @property\n    def purebasename(self):\n        \"\"\"Pure base name of the path.\"\"\"\n        return self._getbyspec(\"purebasename\")[0]\n\n    @property\n    def ext(self):\n        \"\"\"Extension of the path (including the '.').\"\"\"\n        return self._getbyspec(\"ext\")[0]\n\n    def read_binary(self):\n        \"\"\"Read and return a bytestring from reading the path.\"\"\"\n        with self.open(\"rb\") as f:\n            return f.read()\n\n    def read_text(self, encoding):\n        \"\"\"Read and return a Unicode string from reading the path.\"\"\"\n        with self.open(\"r\", encoding=encoding) as f:\n            return f.read()\n\n    def read(self, mode=\"r\"):\n        \"\"\"Read and return a bytestring from reading the path.\"\"\"\n        with self.open(mode) as f:\n            return f.read()\n\n    def readlines(self, cr=1):\n        \"\"\"Read and return a list of lines from the path. if cr is False, the\n        newline will be removed from the end of each line.\"\"\"\n        mode = \"r\"\n\n        if not cr:\n            content = self.read(mode)\n            return content.split(\"\\n\")\n        else:\n            f = self.open(mode)\n            try:\n                return f.readlines()\n            finally:\n                f.close()\n\n    def load(self):\n        \"\"\"(deprecated) return object unpickled from self.read()\"\"\"\n        f = self.open(\"rb\")\n        try:\n            import pickle\n\n            return error.checked_call(pickle.load, f)\n        finally:\n            f.close()\n\n    def move(self, target):\n        \"\"\"Move this path to target.\"\"\"\n        if target.relto(self):\n            raise error.EINVAL(target, \"cannot move path into a subdirectory of itself\")\n        try:\n            self.rename(target)\n        except error.EXDEV:  # invalid cross-device link\n            self.copy(target)\n            self.remove()\n\n    def fnmatch(self, pattern):\n        \"\"\"Return true if the basename/fullname matches the glob-'pattern'.\n\n        valid pattern characters::\n\n            *       matches everything\n            ?       matches any single character\n            [seq]   matches any character in seq\n            [!seq]  matches any char not in seq\n\n        If the pattern contains a path-separator then the full path\n        is used for pattern matching and a '*' is prepended to the\n        pattern.\n\n        if the pattern doesn't contain a path-separator the pattern\n        is only matched against the basename.\n        \"\"\"\n        return FNMatcher(pattern)(self)\n\n    def relto(self, relpath):\n        \"\"\"Return a string which is the relative part of the path\n        to the given 'relpath'.\n        \"\"\"\n        if not isinstance(relpath, (str, LocalPath)):\n            raise TypeError(f\"{relpath!r}: not a string or path object\")\n        strrelpath = str(relpath)\n        if strrelpath and strrelpath[-1] != self.sep:\n            strrelpath += self.sep\n        # assert strrelpath[-1] == self.sep\n        # assert strrelpath[-2] != self.sep\n        strself = self.strpath\n        if sys.platform == \"win32\" or getattr(os, \"_name\", None) == \"nt\":\n            if os.path.normcase(strself).startswith(os.path.normcase(strrelpath)):\n                return strself[len(strrelpath) :]\n        elif strself.startswith(strrelpath):\n            return strself[len(strrelpath) :]\n        return \"\"\n\n    def ensure_dir(self, *args):\n        \"\"\"Ensure the path joined with args is a directory.\"\"\"\n        return self.ensure(*args, dir=True)\n\n    def bestrelpath(self, dest):\n        \"\"\"Return a string which is a relative path from self\n        (assumed to be a directory) to dest such that\n        self.join(bestrelpath) == dest and if not such\n        path can be determined return dest.\n        \"\"\"\n        try:\n            if self == dest:\n                return os.curdir\n            base = self.common(dest)\n            if not base:  # can be the case on windows\n                return str(dest)\n            self2base = self.relto(base)\n            reldest = dest.relto(base)\n            if self2base:\n                n = self2base.count(self.sep) + 1\n            else:\n                n = 0\n            lst = [os.pardir] * n\n            if reldest:\n                lst.append(reldest)\n            target = dest.sep.join(lst)\n            return target\n        except AttributeError:\n            return str(dest)\n\n    def exists(self):\n        return self.check()\n\n    def isdir(self):\n        return self.check(dir=1)\n\n    def isfile(self):\n        return self.check(file=1)\n\n    def parts(self, reverse=False):\n        \"\"\"Return a root-first list of all ancestor directories\n        plus the path itself.\n        \"\"\"\n        current = self\n        lst = [self]\n        while 1:\n            last = current\n            current = current.dirpath()\n            if last == current:\n                break\n            lst.append(current)\n        if not reverse:\n            lst.reverse()\n        return lst\n\n    def common(self, other):\n        \"\"\"Return the common part shared with the other path\n        or None if there is no common part.\n        \"\"\"\n        last = None\n        for x, y in zip(self.parts(), other.parts()):\n            if x != y:\n                return last\n            last = x\n        return last\n\n    def __add__(self, other):\n        \"\"\"Return new path object with 'other' added to the basename\"\"\"\n        return self.new(basename=self.basename + str(other))\n\n    def visit(self, fil=None, rec=None, ignore=NeverRaised, bf=False, sort=False):\n        \"\"\"Yields all paths below the current one\n\n        fil is a filter (glob pattern or callable), if not matching the\n        path will not be yielded, defaulting to None (everything is\n        returned)\n\n        rec is a filter (glob pattern or callable) that controls whether\n        a node is descended, defaulting to None\n\n        ignore is an Exception class that is ignoredwhen calling dirlist()\n        on any of the paths (by default, all exceptions are reported)\n\n        bf if True will cause a breadthfirst search instead of the\n        default depthfirst. Default: False\n\n        sort if True will sort entries within each directory level.\n        \"\"\"\n        yield from Visitor(fil, rec, ignore, bf, sort).gen(self)\n\n    def _sortlist(self, res, sort):\n        if sort:\n            if hasattr(sort, \"__call__\"):\n                warnings.warn(\n                    DeprecationWarning(\n                        \"listdir(sort=callable) is deprecated and breaks on python3\"\n                    ),\n                    stacklevel=3,\n                )\n                res.sort(sort)\n            else:\n                res.sort()\n\n    def __fspath__(self):\n        return self.strpath\n\n    def __hash__(self):\n        s = self.strpath\n        if iswin32:\n            s = s.lower()\n        return hash(s)\n\n    def __eq__(self, other):\n        s1 = os.fspath(self)\n        try:\n            s2 = os.fspath(other)\n        except TypeError:\n            return False\n        if iswin32:\n            s1 = s1.lower()\n            try:\n                s2 = s2.lower()\n            except AttributeError:\n                return False\n        return s1 == s2\n\n    def __ne__(self, other):\n        return not (self == other)\n\n    def __lt__(self, other):\n        return os.fspath(self) < os.fspath(other)\n\n    def __gt__(self, other):\n        return os.fspath(self) > os.fspath(other)\n\n    def samefile(self, other):\n        \"\"\"Return True if 'other' references the same file as 'self'.\"\"\"\n        other = os.fspath(other)\n        if not isabs(other):\n            other = abspath(other)\n        if self == other:\n            return True\n        if not hasattr(os.path, \"samefile\"):\n            return False\n        return error.checked_call(os.path.samefile, self.strpath, other)\n\n    def remove(self, rec=1, ignore_errors=False):\n        \"\"\"Remove a file or directory (or a directory tree if rec=1).\n        if ignore_errors is True, errors while removing directories will\n        be ignored.\n        \"\"\"\n        if self.check(dir=1, link=0):\n            if rec:\n                # force remove of readonly files on windows\n                if iswin32:\n                    self.chmod(0o700, rec=1)\n                import shutil\n\n                error.checked_call(\n                    shutil.rmtree, self.strpath, ignore_errors=ignore_errors\n                )\n            else:\n                error.checked_call(os.rmdir, self.strpath)\n        else:\n            if iswin32:\n                self.chmod(0o700)\n            error.checked_call(os.remove, self.strpath)\n\n    def computehash(self, hashtype=\"md5\", chunksize=524288):\n        \"\"\"Return hexdigest of hashvalue for this file.\"\"\"\n        try:\n            try:\n                import hashlib as mod\n            except ImportError:\n                if hashtype == \"sha1\":\n                    hashtype = \"sha\"\n                mod = __import__(hashtype)\n            hash = getattr(mod, hashtype)()\n        except (AttributeError, ImportError):\n            raise ValueError(f\"Don't know how to compute {hashtype!r} hash\")\n        f = self.open(\"rb\")\n        try:\n            while 1:\n                buf = f.read(chunksize)\n                if not buf:\n                    return hash.hexdigest()\n                hash.update(buf)\n        finally:\n            f.close()\n\n    def new(self, **kw):\n        \"\"\"Create a modified version of this path.\n        the following keyword arguments modify various path parts::\n\n          a:/some/path/to/a/file.ext\n          xx                           drive\n          xxxxxxxxxxxxxxxxx            dirname\n                            xxxxxxxx   basename\n                            xxxx       purebasename\n                                 xxx   ext\n        \"\"\"\n        obj = object.__new__(self.__class__)\n        if not kw:\n            obj.strpath = self.strpath\n            return obj\n        drive, dirname, basename, purebasename, ext = self._getbyspec(\n            \"drive,dirname,basename,purebasename,ext\"\n        )\n        if \"basename\" in kw:\n            if \"purebasename\" in kw or \"ext\" in kw:\n                raise ValueError(f\"invalid specification {kw!r}\")\n        else:\n            pb = kw.setdefault(\"purebasename\", purebasename)\n            try:\n                ext = kw[\"ext\"]\n            except KeyError:\n                pass\n            else:\n                if ext and not ext.startswith(\".\"):\n                    ext = \".\" + ext\n            kw[\"basename\"] = pb + ext\n\n        if \"dirname\" in kw and not kw[\"dirname\"]:\n            kw[\"dirname\"] = drive\n        else:\n            kw.setdefault(\"dirname\", dirname)\n        kw.setdefault(\"sep\", self.sep)\n        obj.strpath = normpath(\"{dirname}{sep}{basename}\".format(**kw))\n        return obj\n\n    def _getbyspec(self, spec: str) -> list[str]:\n        \"\"\"See new for what 'spec' can be.\"\"\"\n        res = []\n        parts = self.strpath.split(self.sep)\n\n        args = filter(None, spec.split(\",\"))\n        for name in args:\n            if name == \"drive\":\n                res.append(parts[0])\n            elif name == \"dirname\":\n                res.append(self.sep.join(parts[:-1]))\n            else:\n                basename = parts[-1]\n                if name == \"basename\":\n                    res.append(basename)\n                else:\n                    i = basename.rfind(\".\")\n                    if i == -1:\n                        purebasename, ext = basename, \"\"\n                    else:\n                        purebasename, ext = basename[:i], basename[i:]\n                    if name == \"purebasename\":\n                        res.append(purebasename)\n                    elif name == \"ext\":\n                        res.append(ext)\n                    else:\n                        raise ValueError(f\"invalid part specification {name!r}\")\n        return res\n\n    def dirpath(self, *args, **kwargs):\n        \"\"\"Return the directory path joined with any given path arguments.\"\"\"\n        if not kwargs:\n            path = object.__new__(self.__class__)\n            path.strpath = dirname(self.strpath)\n            if args:\n                path = path.join(*args)\n            return path\n        return self.new(basename=\"\").join(*args, **kwargs)\n\n    def join(self, *args: os.PathLike[str], abs: bool = False) -> LocalPath:\n        \"\"\"Return a new path by appending all 'args' as path\n        components.  if abs=1 is used restart from root if any\n        of the args is an absolute path.\n        \"\"\"\n        sep = self.sep\n        strargs = [os.fspath(arg) for arg in args]\n        strpath = self.strpath\n        if abs:\n            newargs: list[str] = []\n            for arg in reversed(strargs):\n                if isabs(arg):\n                    strpath = arg\n                    strargs = newargs\n                    break\n                newargs.insert(0, arg)\n        # special case for when we have e.g. strpath == \"/\"\n        actual_sep = \"\" if strpath.endswith(sep) else sep\n        for arg in strargs:\n            arg = arg.strip(sep)\n            if iswin32:\n                # allow unix style paths even on windows.\n                arg = arg.strip(\"/\")\n                arg = arg.replace(\"/\", sep)\n            strpath = strpath + actual_sep + arg\n            actual_sep = sep\n        obj = object.__new__(self.__class__)\n        obj.strpath = normpath(strpath)\n        return obj\n\n    def open(self, mode=\"r\", ensure=False, encoding=None):\n        \"\"\"Return an opened file with the given mode.\n\n        If ensure is True, create parent directories if needed.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        if encoding:\n            return error.checked_call(\n                io.open,\n                self.strpath,\n                mode,\n                encoding=encoding,\n            )\n        return error.checked_call(open, self.strpath, mode)\n\n    def _fastjoin(self, name):\n        child = object.__new__(self.__class__)\n        child.strpath = self.strpath + self.sep + name\n        return child\n\n    def islink(self):\n        return islink(self.strpath)\n\n    def check(self, **kw):\n        \"\"\"Check a path for existence and properties.\n\n        Without arguments, return True if the path exists, otherwise False.\n\n        valid checkers::\n\n            file = 1  # is a file\n            file = 0  # is not a file (may not even exist)\n            dir = 1  # is a dir\n            link = 1  # is a link\n            exists = 1  # exists\n\n        You can specify multiple checker definitions, for example::\n\n            path.check(file=1, link=1)  # a link pointing to a file\n        \"\"\"\n        if not kw:\n            return exists(self.strpath)\n        if len(kw) == 1:\n            if \"dir\" in kw:\n                return not kw[\"dir\"] ^ isdir(self.strpath)\n            if \"file\" in kw:\n                return not kw[\"file\"] ^ isfile(self.strpath)\n        if not kw:\n            kw = {\"exists\": 1}\n        return Checkers(self)._evaluate(kw)\n\n    _patternchars = set(\"*?[\" + os.sep)\n\n    def listdir(self, fil=None, sort=None):\n        \"\"\"List directory contents, possibly filter by the given fil func\n        and possibly sorted.\n        \"\"\"\n        if fil is None and sort is None:\n            names = error.checked_call(os.listdir, self.strpath)\n            return map_as_list(self._fastjoin, names)\n        if isinstance(fil, str):\n            if not self._patternchars.intersection(fil):\n                child = self._fastjoin(fil)\n                if exists(child.strpath):\n                    return [child]\n                return []\n            fil = FNMatcher(fil)\n        names = error.checked_call(os.listdir, self.strpath)\n        res = []\n        for name in names:\n            child = self._fastjoin(name)\n            if fil is None or fil(child):\n                res.append(child)\n        self._sortlist(res, sort)\n        return res\n\n    def size(self) -> int:\n        \"\"\"Return size of the underlying file object\"\"\"\n        return self.stat().size\n\n    def mtime(self) -> float:\n        \"\"\"Return last modification time of the path.\"\"\"\n        return self.stat().mtime\n\n    def copy(self, target, mode=False, stat=False):\n        \"\"\"Copy path to target.\n\n        If mode is True, will copy permission from path to target.\n        If stat is True, copy permission, last modification\n        time, last access time, and flags from path to target.\n        \"\"\"\n        if self.check(file=1):\n            if target.check(dir=1):\n                target = target.join(self.basename)\n            assert self != target\n            copychunked(self, target)\n            if mode:\n                copymode(self.strpath, target.strpath)\n            if stat:\n                copystat(self, target)\n        else:\n\n            def rec(p):\n                return p.check(link=0)\n\n            for x in self.visit(rec=rec):\n                relpath = x.relto(self)\n                newx = target.join(relpath)\n                newx.dirpath().ensure(dir=1)\n                if x.check(link=1):\n                    newx.mksymlinkto(x.readlink())\n                    continue\n                elif x.check(file=1):\n                    copychunked(x, newx)\n                elif x.check(dir=1):\n                    newx.ensure(dir=1)\n                if mode:\n                    copymode(x.strpath, newx.strpath)\n                if stat:\n                    copystat(x, newx)\n\n    def rename(self, target):\n        \"\"\"Rename this path to target.\"\"\"\n        target = os.fspath(target)\n        return error.checked_call(os.rename, self.strpath, target)\n\n    def dump(self, obj, bin=1):\n        \"\"\"Pickle object into path location\"\"\"\n        f = self.open(\"wb\")\n        import pickle\n\n        try:\n            error.checked_call(pickle.dump, obj, f, bin)\n        finally:\n            f.close()\n\n    def mkdir(self, *args):\n        \"\"\"Create & return the directory joined with args.\"\"\"\n        p = self.join(*args)\n        error.checked_call(os.mkdir, os.fspath(p))\n        return p\n\n    def write_binary(self, data, ensure=False):\n        \"\"\"Write binary data into path.   If ensure is True create\n        missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"wb\") as f:\n            f.write(data)\n\n    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n    def write(self, data, mode=\"w\", ensure=False):\n        \"\"\"Write data into path.   If ensure is True create\n        missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        if \"b\" in mode:\n            if not isinstance(data, bytes):\n                raise ValueError(\"can only process bytes\")\n        else:\n            if not isinstance(data, str):\n                if not isinstance(data, bytes):\n                    data = str(data)\n                else:\n                    data = data.decode(sys.getdefaultencoding())\n        f = self.open(mode)\n        try:\n            f.write(data)\n        finally:\n            f.close()\n\n    def _ensuredirs(self):\n        parent = self.dirpath()\n        if parent == self:\n            return self\n        if parent.check(dir=0):\n            parent._ensuredirs()\n        if self.check(dir=0):\n            try:\n                self.mkdir()\n            except error.EEXIST:\n                # race condition: file/dir created by another thread/process.\n                # complain if it is not a dir\n                if self.check(dir=0):\n                    raise\n        return self\n\n    def ensure(self, *args, **kwargs):\n        \"\"\"Ensure that an args-joined path exists (by default as\n        a file). if you specify a keyword argument 'dir=True'\n        then the path is forced to be a directory path.\n        \"\"\"\n        p = self.join(*args)\n        if kwargs.get(\"dir\", 0):\n            return p._ensuredirs()\n        else:\n            p.dirpath()._ensuredirs()\n            if not p.check(file=1):\n                p.open(\"wb\").close()\n            return p\n\n    @overload\n    def stat(self, raising: Literal[True] = ...) -> Stat: ...\n\n    @overload\n    def stat(self, raising: Literal[False]) -> Stat | None: ...\n\n    def stat(self, raising: bool = True) -> Stat | None:\n        \"\"\"Return an os.stat() tuple.\"\"\"\n        if raising:\n            return Stat(self, error.checked_call(os.stat, self.strpath))\n        try:\n            return Stat(self, os.stat(self.strpath))\n        except KeyboardInterrupt:\n            raise\n        except Exception:\n            return None\n\n    def lstat(self) -> Stat:\n        \"\"\"Return an os.lstat() tuple.\"\"\"\n        return Stat(self, error.checked_call(os.lstat, self.strpath))\n\n    def setmtime(self, mtime=None):\n        \"\"\"Set modification time for the given path.  if 'mtime' is None\n        (the default) then the file's mtime is set to current time.\n\n        Note that the resolution for 'mtime' is platform dependent.\n        \"\"\"\n        if mtime is None:\n            return error.checked_call(os.utime, self.strpath, mtime)\n        try:\n            return error.checked_call(os.utime, self.strpath, (-1, mtime))\n        except error.EINVAL:\n            return error.checked_call(os.utime, self.strpath, (self.atime(), mtime))\n\n    def chdir(self):\n        \"\"\"Change directory to self and return old current directory\"\"\"\n        try:\n            old = self.__class__()\n        except error.ENOENT:\n            old = None\n        error.checked_call(os.chdir, self.strpath)\n        return old\n\n    @contextmanager\n    def as_cwd(self):\n        \"\"\"\n        Return a context manager, which changes to the path's dir during the\n        managed \"with\" context.\n        On __enter__ it returns the old dir, which might be ``None``.\n        \"\"\"\n        old = self.chdir()\n        try:\n            yield old\n        finally:\n            if old is not None:\n                old.chdir()\n\n    def realpath(self):\n        \"\"\"Return a new path which contains no symbolic links.\"\"\"\n        return self.__class__(os.path.realpath(self.strpath))\n\n    def atime(self):\n        \"\"\"Return last access time of the path.\"\"\"\n        return self.stat().atime\n\n    def __repr__(self):\n        return f\"local({self.strpath!r})\"\n\n    def __str__(self):\n        \"\"\"Return string representation of the Path.\"\"\"\n        return self.strpath\n\n    def chmod(self, mode, rec=0):\n        \"\"\"Change permissions to the given mode. If mode is an\n        integer it directly encodes the os-specific modes.\n        if rec is True perform recursively.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(f\"mode {mode!r} must be an integer\")\n        if rec:\n            for x in self.visit(rec=rec):\n                error.checked_call(os.chmod, str(x), mode)\n        error.checked_call(os.chmod, self.strpath, mode)\n\n    def pypkgpath(self):\n        \"\"\"Return the Python package path by looking for the last\n        directory upwards which still contains an __init__.py.\n        Return None if a pkgpath cannot be determined.\n        \"\"\"\n        pkgpath = None\n        for parent in self.parts(reverse=True):\n            if parent.isdir():\n                if not parent.join(\"__init__.py\").exists():\n                    break\n                if not isimportable(parent.basename):\n                    break\n                pkgpath = parent\n        return pkgpath\n\n    def _ensuresyspath(self, ensuremode, path):\n        if ensuremode:\n            s = str(path)\n            if ensuremode == \"append\":\n                if s not in sys.path:\n                    sys.path.append(s)\n            else:\n                if s != sys.path[0]:\n                    sys.path.insert(0, s)\n\n    def pyimport(self, modname=None, ensuresyspath=True):\n        \"\"\"Return path as an imported python module.\n\n        If modname is None, look for the containing package\n        and construct an according module name.\n        The module will be put/looked up in sys.modules.\n        if ensuresyspath is True then the root dir for importing\n        the file (taking __init__.py files into account) will\n        be prepended to sys.path if it isn't there already.\n        If ensuresyspath==\"append\" the root dir will be appended\n        if it isn't already contained in sys.path.\n        if ensuresyspath is False no modification of syspath happens.\n\n        Special value of ensuresyspath==\"importlib\" is intended\n        purely for using in pytest, it is capable only of importing\n        separate .py files outside packages, e.g. for test suite\n        without any __init__.py file. It effectively allows having\n        same-named test modules in different places and offers\n        mild opt-in via this option. Note that it works only in\n        recent versions of python.\n        \"\"\"\n        if not self.check():\n            raise error.ENOENT(self)\n\n        if ensuresyspath == \"importlib\":\n            if modname is None:\n                modname = self.purebasename\n            spec = importlib.util.spec_from_file_location(modname, str(self))\n            if spec is None or spec.loader is None:\n                raise ImportError(f\"Can't find module {modname} at location {self!s}\")\n            mod = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(mod)\n            return mod\n\n        pkgpath = None\n        if modname is None:\n            pkgpath = self.pypkgpath()\n            if pkgpath is not None:\n                pkgroot = pkgpath.dirpath()\n                names = self.new(ext=\"\").relto(pkgroot).split(self.sep)\n                if names[-1] == \"__init__\":\n                    names.pop()\n                modname = \".\".join(names)\n            else:\n                pkgroot = self.dirpath()\n                modname = self.purebasename\n\n            self._ensuresyspath(ensuresyspath, pkgroot)\n            __import__(modname)\n            mod = sys.modules[modname]\n            if self.basename == \"__init__.py\":\n                return mod  # we don't check anything as we might\n                # be in a namespace package ... too icky to check\n            modfile = mod.__file__\n            assert modfile is not None\n            if modfile[-4:] in (\".pyc\", \".pyo\"):\n                modfile = modfile[:-1]\n            elif modfile.endswith(\"$py.class\"):\n                modfile = modfile[:-9] + \".py\"\n            if modfile.endswith(os.sep + \"__init__.py\"):\n                if self.basename != \"__init__.py\":\n                    modfile = modfile[:-12]\n            try:\n                issame = self.samefile(modfile)\n            except error.ENOENT:\n                issame = False\n            if not issame:\n                ignore = os.getenv(\"PY_IGNORE_IMPORTMISMATCH\")\n                if ignore != \"1\":\n                    raise self.ImportMismatchError(modname, modfile, self)\n            return mod\n        else:\n            try:\n                return sys.modules[modname]\n            except KeyError:\n                # we have a custom modname, do a pseudo-import\n                import types\n\n                mod = types.ModuleType(modname)\n                mod.__file__ = str(self)\n                sys.modules[modname] = mod\n                try:\n                    with open(str(self), \"rb\") as f:\n                        exec(f.read(), mod.__dict__)\n                except BaseException:\n                    del sys.modules[modname]\n                    raise\n                return mod\n\n    def sysexec(self, *argv: os.PathLike[str], **popen_opts: Any) -> str:\n        \"\"\"Return stdout text from executing a system child process,\n        where the 'self' path points to executable.\n        The process is directly invoked and not through a system shell.\n        \"\"\"\n        from subprocess import PIPE\n        from subprocess import Popen\n\n        popen_opts.pop(\"stdout\", None)\n        popen_opts.pop(\"stderr\", None)\n        proc = Popen(\n            [str(self)] + [str(arg) for arg in argv],\n            **popen_opts,\n            stdout=PIPE,\n            stderr=PIPE,\n        )\n        stdout: str | bytes\n        stdout, stderr = proc.communicate()\n        ret = proc.wait()\n        if isinstance(stdout, bytes):\n            stdout = stdout.decode(sys.getdefaultencoding())\n        if ret != 0:\n            if isinstance(stderr, bytes):\n                stderr = stderr.decode(sys.getdefaultencoding())\n            raise RuntimeError(\n                ret,\n                ret,\n                str(self),\n                stdout,\n                stderr,\n            )\n        return stdout\n\n    @classmethod\n    def sysfind(cls, name, checker=None, paths=None):\n        \"\"\"Return a path object found by looking at the systems\n        underlying PATH specification. If the checker is not None\n        it will be invoked to filter matching paths.  If a binary\n        cannot be found, None is returned\n        Note: This is probably not working on plain win32 systems\n        but may work on cygwin.\n        \"\"\"\n        if isabs(name):\n            p = local(name)\n            if p.check(file=1):\n                return p\n        else:\n            if paths is None:\n                if iswin32:\n                    paths = os.environ[\"Path\"].split(\";\")\n                    if \"\" not in paths and \".\" not in paths:\n                        paths.append(\".\")\n                    try:\n                        systemroot = os.environ[\"SYSTEMROOT\"]\n                    except KeyError:\n                        pass\n                    else:\n                        paths = [\n                            path.replace(\"%SystemRoot%\", systemroot) for path in paths\n                        ]\n                else:\n                    paths = os.environ[\"PATH\"].split(\":\")\n            tryadd = []\n            if iswin32:\n                tryadd += os.environ[\"PATHEXT\"].split(os.pathsep)\n            tryadd.append(\"\")\n\n            for x in paths:\n                for addext in tryadd:\n                    p = local(x).join(name, abs=True) + addext\n                    try:\n                        if p.check(file=1):\n                            if checker:\n                                if not checker(p):\n                                    continue\n                            return p\n                    except error.EACCES:\n                        pass\n        return None\n\n    @classmethod\n    def _gethomedir(cls):\n        try:\n            x = os.environ[\"HOME\"]\n        except KeyError:\n            try:\n                x = os.environ[\"HOMEDRIVE\"] + os.environ[\"HOMEPATH\"]\n            except KeyError:\n                return None\n        return cls(x)\n\n    # \"\"\"\n    # special class constructors for local filesystem paths\n    # \"\"\"\n    @classmethod\n    def get_temproot(cls):\n        \"\"\"Return the system's temporary directory\n        (where tempfiles are usually created in)\n        \"\"\"\n        import tempfile\n\n        return local(tempfile.gettempdir())\n\n    @classmethod\n    def mkdtemp(cls, rootdir=None):\n        \"\"\"Return a Path object pointing to a fresh new temporary directory\n        (which we created ourselves).\n        \"\"\"\n        import tempfile\n\n        if rootdir is None:\n            rootdir = cls.get_temproot()\n        path = error.checked_call(tempfile.mkdtemp, dir=str(rootdir))\n        return cls(path)\n\n    @classmethod\n    def make_numbered_dir(\n        cls, prefix=\"session-\", rootdir=None, keep=3, lock_timeout=172800\n    ):  # two days\n        \"\"\"Return unique directory with a number greater than the current\n        maximum one.  The number is assumed to start directly after prefix.\n        if keep is true directories with a number less than (maxnum-keep)\n        will be removed. If .lock files are used (lock_timeout non-zero),\n        algorithm is multi-process safe.\n        \"\"\"\n        if rootdir is None:\n            rootdir = cls.get_temproot()\n\n        nprefix = prefix.lower()\n\n        def parse_num(path):\n            \"\"\"Parse the number out of a path (if it matches the prefix)\"\"\"\n            nbasename = path.basename.lower()\n            if nbasename.startswith(nprefix):\n                try:\n                    return int(nbasename[len(nprefix) :])\n                except ValueError:\n                    pass\n\n        def create_lockfile(path):\n            \"\"\"Exclusively create lockfile. Throws when failed\"\"\"\n            mypid = os.getpid()\n            lockfile = path.join(\".lock\")\n            if hasattr(lockfile, \"mksymlinkto\"):\n                lockfile.mksymlinkto(str(mypid))\n            else:\n                fd = error.checked_call(\n                    os.open, str(lockfile), os.O_WRONLY | os.O_CREAT | os.O_EXCL, 0o644\n                )\n                with os.fdopen(fd, \"w\") as f:\n                    f.write(str(mypid))\n            return lockfile\n\n        def atexit_remove_lockfile(lockfile):\n            \"\"\"Ensure lockfile is removed at process exit\"\"\"\n            mypid = os.getpid()\n\n            def try_remove_lockfile():\n                # in a fork() situation, only the last process should\n                # remove the .lock, otherwise the other processes run the\n                # risk of seeing their temporary dir disappear.  For now\n                # we remove the .lock in the parent only (i.e. we assume\n                # that the children finish before the parent).\n                if os.getpid() != mypid:\n                    return\n                try:\n                    lockfile.remove()\n                except error.Error:\n                    pass\n\n            atexit.register(try_remove_lockfile)\n\n        # compute the maximum number currently in use with the prefix\n        lastmax = None\n        while True:\n            maxnum = -1\n            for path in rootdir.listdir():\n                num = parse_num(path)\n                if num is not None:\n                    maxnum = max(maxnum, num)\n\n            # make the new directory\n            try:\n                udir = rootdir.mkdir(prefix + str(maxnum + 1))\n                if lock_timeout:\n                    lockfile = create_lockfile(udir)\n                    atexit_remove_lockfile(lockfile)\n            except (error.EEXIST, error.ENOENT, error.EBUSY):\n                # race condition (1): another thread/process created the dir\n                #                     in the meantime - try again\n                # race condition (2): another thread/process spuriously acquired\n                #                     lock treating empty directory as candidate\n                #                     for removal - try again\n                # race condition (3): another thread/process tried to create the lock at\n                #                     the same time (happened in Python 3.3 on Windows)\n                # https://ci.appveyor.com/project/pytestbot/py/build/1.0.21/job/ffi85j4c0lqwsfwa\n                if lastmax == maxnum:\n                    raise\n                lastmax = maxnum\n                continue\n            break\n\n        def get_mtime(path):\n            \"\"\"Read file modification time\"\"\"\n            try:\n                return path.lstat().mtime\n            except error.Error:\n                pass\n\n        garbage_prefix = prefix + \"garbage-\"\n\n        def is_garbage(path):\n            \"\"\"Check if path denotes directory scheduled for removal\"\"\"\n            bn = path.basename\n            return bn.startswith(garbage_prefix)\n\n        # prune old directories\n        udir_time = get_mtime(udir)\n        if keep and udir_time:\n            for path in rootdir.listdir():\n                num = parse_num(path)\n                if num is not None and num <= (maxnum - keep):\n                    try:\n                        # try acquiring lock to remove directory as exclusive user\n                        if lock_timeout:\n                            create_lockfile(path)\n                    except (error.EEXIST, error.ENOENT, error.EBUSY):\n                        path_time = get_mtime(path)\n                        if not path_time:\n                            # assume directory doesn't exist now\n                            continue\n                        if abs(udir_time - path_time) < lock_timeout:\n                            # assume directory with lockfile exists\n                            # and lock timeout hasn't expired yet\n                            continue\n\n                    # path dir locked for exclusive use\n                    # and scheduled for removal to avoid another thread/process\n                    # treating it as a new directory or removal candidate\n                    garbage_path = rootdir.join(garbage_prefix + str(uuid.uuid4()))\n                    try:\n                        path.rename(garbage_path)\n                        garbage_path.remove(rec=1)\n                    except KeyboardInterrupt:\n                        raise\n                    except Exception:  # this might be error.Error, WindowsError ...\n                        pass\n                if is_garbage(path):\n                    try:\n                        path.remove(rec=1)\n                    except KeyboardInterrupt:\n                        raise\n                    except Exception:  # this might be error.Error, WindowsError ...\n                        pass\n\n        # make link...\n        try:\n            username = os.environ[\"USER\"]  # linux, et al\n        except KeyError:\n            try:\n                username = os.environ[\"USERNAME\"]  # windows\n            except KeyError:\n                username = \"current\"\n\n        src = str(udir)\n        dest = src[: src.rfind(\"-\")] + \"-\" + username\n        try:\n            os.unlink(dest)\n        except OSError:\n            pass\n        try:\n            os.symlink(src, dest)\n        except (OSError, AttributeError, NotImplementedError):\n            pass\n\n        return udir\n\n\ndef copymode(src, dest):\n    \"\"\"Copy permission from src to dst.\"\"\"\n    import shutil\n\n    shutil.copymode(src, dest)\n\n\ndef copystat(src, dest):\n    \"\"\"Copy permission,  last modification time,\n    last access time, and flags from src to dst.\"\"\"\n    import shutil\n\n    shutil.copystat(str(src), str(dest))\n\n\ndef copychunked(src, dest):\n    chunksize = 524288  # half a meg of bytes\n    fsrc = src.open(\"rb\")\n    try:\n        fdest = dest.open(\"wb\")\n        try:\n            while 1:\n                buf = fsrc.read(chunksize)\n                if not buf:\n                    break\n                fdest.write(buf)\n        finally:\n            fdest.close()\n    finally:\n        fsrc.close()\n\n\ndef isimportable(name):\n    if name and (name[0].isalpha() or name[0] == \"_\"):\n        name = name.replace(\"_\", \"\")\n        return not name or name.isalnum()\n\n\nlocal = LocalPath\n", "src/_pytest/_py/error.py": "\"\"\"create errno-specific classes for IO or os calls.\"\"\"\n\nfrom __future__ import annotations\n\nimport errno\nimport os\nimport sys\nfrom typing import Callable\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\n\nif TYPE_CHECKING:\n    from typing_extensions import ParamSpec\n\n    P = ParamSpec(\"P\")\n\nR = TypeVar(\"R\")\n\n\nclass Error(EnvironmentError):\n    def __repr__(self) -> str:\n        return \"{}.{} {!r}: {} \".format(\n            self.__class__.__module__,\n            self.__class__.__name__,\n            self.__class__.__doc__,\n            \" \".join(map(str, self.args)),\n            # repr(self.args)\n        )\n\n    def __str__(self) -> str:\n        s = \"[{}]: {}\".format(\n            self.__class__.__doc__,\n            \" \".join(map(str, self.args)),\n        )\n        return s\n\n\n_winerrnomap = {\n    2: errno.ENOENT,\n    3: errno.ENOENT,\n    17: errno.EEXIST,\n    18: errno.EXDEV,\n    13: errno.EBUSY,  # empty cd drive, but ENOMEDIUM seems unavailable\n    22: errno.ENOTDIR,\n    20: errno.ENOTDIR,\n    267: errno.ENOTDIR,\n    5: errno.EACCES,  # anything better?\n}\n\n\nclass ErrorMaker:\n    \"\"\"lazily provides Exception classes for each possible POSIX errno\n    (as defined per the 'errno' module).  All such instances\n    subclass EnvironmentError.\n    \"\"\"\n\n    _errno2class: dict[int, type[Error]] = {}\n\n    def __getattr__(self, name: str) -> type[Error]:\n        if name[0] == \"_\":\n            raise AttributeError(name)\n        eno = getattr(errno, name)\n        cls = self._geterrnoclass(eno)\n        setattr(self, name, cls)\n        return cls\n\n    def _geterrnoclass(self, eno: int) -> type[Error]:\n        try:\n            return self._errno2class[eno]\n        except KeyError:\n            clsname = errno.errorcode.get(eno, \"UnknownErrno%d\" % (eno,))\n            errorcls = type(\n                clsname,\n                (Error,),\n                {\"__module__\": \"py.error\", \"__doc__\": os.strerror(eno)},\n            )\n            self._errno2class[eno] = errorcls\n            return errorcls\n\n    def checked_call(\n        self, func: Callable[P, R], *args: P.args, **kwargs: P.kwargs\n    ) -> R:\n        \"\"\"Call a function and raise an errno-exception if applicable.\"\"\"\n        __tracebackhide__ = True\n        try:\n            return func(*args, **kwargs)\n        except Error:\n            raise\n        except OSError as value:\n            if not hasattr(value, \"errno\"):\n                raise\n            errno = value.errno\n            if sys.platform == \"win32\":\n                try:\n                    cls = self._geterrnoclass(_winerrnomap[errno])\n                except KeyError:\n                    raise value\n            else:\n                # we are not on Windows, or we got a proper OSError\n                cls = self._geterrnoclass(errno)\n\n            raise cls(f\"{func.__name__}{args!r}\")\n\n\n_error_maker = ErrorMaker()\nchecked_call = _error_maker.checked_call\n\n\ndef __getattr__(attr: str) -> type[Error]:\n    return getattr(_error_maker, attr)  # type: ignore[no-any-return]\n", "src/_pytest/_py/__init__.py": "", "src/_pytest/_io/saferepr.py": "from __future__ import annotations\n\nimport pprint\nimport reprlib\n\n\ndef _try_repr_or_str(obj: object) -> str:\n    try:\n        return repr(obj)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        return f'{type(obj).__name__}(\"{obj}\")'\n\n\ndef _format_repr_exception(exc: BaseException, obj: object) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = f\"unpresentable exception ({_try_repr_or_str(exc)})\"\n    return (\n        f\"<[{exc_info} raised in repr()] {type(obj).__name__} object at 0x{id(obj):x}>\"\n    )\n\n\ndef _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s\n\n\nclass SafeRepr(reprlib.Repr):\n    \"\"\"\n    repr.Repr that limits the resulting size of repr() and includes\n    information on exceptions raised during the call.\n    \"\"\"\n\n    def __init__(self, maxsize: int | None, use_ascii: bool = False) -> None:\n        \"\"\"\n        :param maxsize:\n            If not None, will truncate the resulting repr to that specific size, using ellipsis\n            somewhere in the middle to hide the extra text.\n            If None, will not impose any size limits on the returning repr.\n        \"\"\"\n        super().__init__()\n        # ``maxstring`` is used by the superclass, and needs to be an int; using a\n        # very large number in case maxsize is None, meaning we want to disable\n        # truncation.\n        self.maxstring = maxsize if maxsize is not None else 1_000_000_000\n        self.maxsize = maxsize\n        self.use_ascii = use_ascii\n\n    def repr(self, x: object) -> str:\n        try:\n            if self.use_ascii:\n                s = ascii(x)\n            else:\n                s = super().repr(x)\n        except (KeyboardInterrupt, SystemExit):\n            raise\n        except BaseException as exc:\n            s = _format_repr_exception(exc, x)\n        if self.maxsize is not None:\n            s = _ellipsize(s, self.maxsize)\n        return s\n\n    def repr_instance(self, x: object, level: int) -> str:\n        try:\n            s = repr(x)\n        except (KeyboardInterrupt, SystemExit):\n            raise\n        except BaseException as exc:\n            s = _format_repr_exception(exc, x)\n        if self.maxsize is not None:\n            s = _ellipsize(s, self.maxsize)\n        return s\n\n\ndef safeformat(obj: object) -> str:\n    \"\"\"Return a pretty printed string for the given object.\n\n    Failing __repr__ functions of user instances will be represented\n    with a short exception info.\n    \"\"\"\n    try:\n        return pprint.pformat(obj)\n    except Exception as exc:\n        return _format_repr_exception(exc, obj)\n\n\n# Maximum size of overall repr of objects to display during assertion errors.\nDEFAULT_REPR_MAX_SIZE = 240\n\n\ndef saferepr(\n    obj: object, maxsize: int | None = DEFAULT_REPR_MAX_SIZE, use_ascii: bool = False\n) -> str:\n    \"\"\"Return a size-limited safe repr-string for the given object.\n\n    Failing __repr__ functions of user instances will be represented\n    with a short exception info and 'saferepr' generally takes\n    care to never raise exceptions itself.\n\n    This function is a wrapper around the Repr/reprlib functionality of the\n    stdlib.\n    \"\"\"\n    return SafeRepr(maxsize, use_ascii).repr(obj)\n\n\ndef saferepr_unlimited(obj: object, use_ascii: bool = True) -> str:\n    \"\"\"Return an unlimited-size safe repr-string for the given object.\n\n    As with saferepr, failing __repr__ functions of user instances\n    will be represented with a short exception info.\n\n    This function is a wrapper around simple repr.\n\n    Note: a cleaner solution would be to alter ``saferepr``this way\n    when maxsize=None, but that might affect some other code.\n    \"\"\"\n    try:\n        if use_ascii:\n            return ascii(obj)\n        return repr(obj)\n    except Exception as exc:\n        return _format_repr_exception(exc, obj)\n", "src/_pytest/_io/terminalwriter.py": "\"\"\"Helper functions for writing to terminals and files.\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport shutil\nimport sys\nfrom typing import final\nfrom typing import Literal\nfrom typing import Sequence\nfrom typing import TextIO\nfrom typing import TYPE_CHECKING\n\nfrom ..compat import assert_never\nfrom .wcwidth import wcswidth\n\n\nif TYPE_CHECKING:\n    from pygments.formatter import Formatter\n    from pygments.lexer import Lexer\n\n\n# This code was initially copied from py 1.8.1, file _io/terminalwriter.py.\n\n\ndef get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width\n\n\ndef should_do_markup(file: TextIO) -> bool:\n    if os.environ.get(\"PY_COLORS\") == \"1\":\n        return True\n    if os.environ.get(\"PY_COLORS\") == \"0\":\n        return False\n    if os.environ.get(\"NO_COLOR\"):\n        return False\n    if os.environ.get(\"FORCE_COLOR\"):\n        return True\n    return (\n        hasattr(file, \"isatty\") and file.isatty() and os.environ.get(\"TERM\") != \"dumb\"\n    )\n\n\n@final\nclass TerminalWriter:\n    _esctable = dict(\n        black=30,\n        red=31,\n        green=32,\n        yellow=33,\n        blue=34,\n        purple=35,\n        cyan=36,\n        white=37,\n        Black=40,\n        Red=41,\n        Green=42,\n        Yellow=43,\n        Blue=44,\n        Purple=45,\n        Cyan=46,\n        White=47,\n        bold=1,\n        light=2,\n        blink=5,\n        invert=7,\n    )\n\n    def __init__(self, file: TextIO | None = None) -> None:\n        if file is None:\n            file = sys.stdout\n        if hasattr(file, \"isatty\") and file.isatty() and sys.platform == \"win32\":\n            try:\n                import colorama\n            except ImportError:\n                pass\n            else:\n                file = colorama.AnsiToWin32(file).stream\n                assert file is not None\n        self._file = file\n        self.hasmarkup = should_do_markup(file)\n        self._current_line = \"\"\n        self._terminal_width: int | None = None\n        self.code_highlight = True\n\n    @property\n    def fullwidth(self) -> int:\n        if self._terminal_width is not None:\n            return self._terminal_width\n        return get_terminal_width()\n\n    @fullwidth.setter\n    def fullwidth(self, value: int) -> None:\n        self._terminal_width = value\n\n    @property\n    def width_of_current_line(self) -> int:\n        \"\"\"Return an estimate of the width so far in the current line.\"\"\"\n        return wcswidth(self._current_line)\n\n    def markup(self, text: str, **markup: bool) -> str:\n        for name in markup:\n            if name not in self._esctable:\n                raise ValueError(f\"unknown markup: {name!r}\")\n        if self.hasmarkup:\n            esc = [self._esctable[name] for name, on in markup.items() if on]\n            if esc:\n                text = \"\".join(f\"\\x1b[{cod}m\" for cod in esc) + text + \"\\x1b[0m\"\n        return text\n\n    def sep(\n        self,\n        sepchar: str,\n        title: str | None = None,\n        fullwidth: int | None = None,\n        **markup: bool,\n    ) -> None:\n        if fullwidth is None:\n            fullwidth = self.fullwidth\n        # The goal is to have the line be as long as possible\n        # under the condition that len(line) <= fullwidth.\n        if sys.platform == \"win32\":\n            # If we print in the last column on windows we are on a\n            # new line but there is no way to verify/neutralize this\n            # (we may not know the exact line width).\n            # So let's be defensive to avoid empty lines in the output.\n            fullwidth -= 1\n        if title is not None:\n            # we want 2 + 2*len(fill) + len(title) <= fullwidth\n            # i.e.    2 + 2*len(sepchar)*N + len(title) <= fullwidth\n            #         2*len(sepchar)*N <= fullwidth - len(title) - 2\n            #         N <= (fullwidth - len(title) - 2) // (2*len(sepchar))\n            N = max((fullwidth - len(title) - 2) // (2 * len(sepchar)), 1)\n            fill = sepchar * N\n            line = f\"{fill} {title} {fill}\"\n        else:\n            # we want len(sepchar)*N <= fullwidth\n            # i.e.    N <= fullwidth // len(sepchar)\n            line = sepchar * (fullwidth // len(sepchar))\n        # In some situations there is room for an extra sepchar at the right,\n        # in particular if we consider that with a sepchar like \"_ \" the\n        # trailing space is not important at the end of the line.\n        if len(line) + len(sepchar.rstrip()) <= fullwidth:\n            line += sepchar.rstrip()\n\n        self.line(line, **markup)\n\n    def write(self, msg: str, *, flush: bool = False, **markup: bool) -> None:\n        if msg:\n            current_line = msg.rsplit(\"\\n\", 1)[-1]\n            if \"\\n\" in msg:\n                self._current_line = current_line\n            else:\n                self._current_line += current_line\n\n            msg = self.markup(msg, **markup)\n\n            try:\n                self._file.write(msg)\n            except UnicodeEncodeError:\n                # Some environments don't support printing general Unicode\n                # strings, due to misconfiguration or otherwise; in that case,\n                # print the string escaped to ASCII.\n                # When the Unicode situation improves we should consider\n                # letting the error propagate instead of masking it (see #7475\n                # for one brief attempt).\n                msg = msg.encode(\"unicode-escape\").decode(\"ascii\")\n                self._file.write(msg)\n\n            if flush:\n                self.flush()\n\n    def line(self, s: str = \"\", **markup: bool) -> None:\n        self.write(s, **markup)\n        self.write(\"\\n\")\n\n    def flush(self) -> None:\n        self._file.flush()\n\n    def _write_source(self, lines: Sequence[str], indents: Sequence[str] = ()) -> None:\n        \"\"\"Write lines of source code possibly highlighted.\n\n        Keeping this private for now because the API is clunky. We should discuss how\n        to evolve the terminal writer so we can have more precise color support, for example\n        being able to write part of a line in one color and the rest in another, and so on.\n        \"\"\"\n        if indents and len(indents) != len(lines):\n            raise ValueError(\n                f\"indents size ({len(indents)}) should have same size as lines ({len(lines)})\"\n            )\n        if not indents:\n            indents = [\"\"] * len(lines)\n        source = \"\\n\".join(lines)\n        new_lines = self._highlight(source).splitlines()\n        for indent, new_line in zip(indents, new_lines):\n            self.line(indent + new_line)\n\n    def _get_pygments_lexer(self, lexer: Literal[\"python\", \"diff\"]) -> Lexer | None:\n        try:\n            if lexer == \"python\":\n                from pygments.lexers.python import PythonLexer\n\n                return PythonLexer()\n            elif lexer == \"diff\":\n                from pygments.lexers.diff import DiffLexer\n\n                return DiffLexer()\n            else:\n                assert_never(lexer)\n        except ModuleNotFoundError:\n            return None\n\n    def _get_pygments_formatter(self) -> Formatter | None:\n        try:\n            import pygments.util\n        except ModuleNotFoundError:\n            return None\n\n        from _pytest.config.exceptions import UsageError\n\n        theme = os.getenv(\"PYTEST_THEME\")\n        theme_mode = os.getenv(\"PYTEST_THEME_MODE\", \"dark\")\n\n        try:\n            from pygments.formatters.terminal import TerminalFormatter\n\n            return TerminalFormatter(bg=theme_mode, style=theme)\n\n        except pygments.util.ClassNotFound as e:\n            raise UsageError(\n                f\"PYTEST_THEME environment variable has an invalid value: '{theme}'. \"\n                \"Hint: See available pygments styles with `pygmentize -L styles`.\"\n            ) from e\n        except pygments.util.OptionError as e:\n            raise UsageError(\n                f\"PYTEST_THEME_MODE environment variable has an invalid value: '{theme_mode}'. \"\n                \"The allowed values are 'dark' (default) and 'light'.\"\n            ) from e\n\n    def _highlight(\n        self, source: str, lexer: Literal[\"diff\", \"python\"] = \"python\"\n    ) -> str:\n        \"\"\"Highlight the given source if we have markup support.\"\"\"\n        if not source or not self.hasmarkup or not self.code_highlight:\n            return source\n\n        pygments_lexer = self._get_pygments_lexer(lexer)\n        if pygments_lexer is None:\n            return source\n\n        pygments_formatter = self._get_pygments_formatter()\n        if pygments_formatter is None:\n            return source\n\n        from pygments import highlight\n\n        highlighted: str = highlight(source, pygments_lexer, pygments_formatter)\n        # pygments terminal formatter may add a newline when there wasn't one.\n        # We don't want this, remove.\n        if highlighted[-1] == \"\\n\" and source[-1] != \"\\n\":\n            highlighted = highlighted[:-1]\n\n        # Some lexers will not set the initial color explicitly\n        # which may lead to the previous color being propagated to the\n        # start of the expression, so reset first.\n        highlighted = \"\\x1b[0m\" + highlighted\n\n        return highlighted\n", "src/_pytest/_io/wcwidth.py": "from __future__ import annotations\n\nfrom functools import lru_cache\nimport unicodedata\n\n\n@lru_cache(100)\ndef wcwidth(c: str) -> int:\n    \"\"\"Determine how many columns are needed to display a character in a terminal.\n\n    Returns -1 if the character is not printable.\n    Returns 0, 1 or 2 for other characters.\n    \"\"\"\n    o = ord(c)\n\n    # ASCII fast path.\n    if 0x20 <= o < 0x07F:\n        return 1\n\n    # Some Cf/Zp/Zl characters which should be zero-width.\n    if (\n        o == 0x0000\n        or 0x200B <= o <= 0x200F\n        or 0x2028 <= o <= 0x202E\n        or 0x2060 <= o <= 0x2063\n    ):\n        return 0\n\n    category = unicodedata.category(c)\n\n    # Control characters.\n    if category == \"Cc\":\n        return -1\n\n    # Combining characters with zero width.\n    if category in (\"Me\", \"Mn\"):\n        return 0\n\n    # Full/Wide east asian characters.\n    if unicodedata.east_asian_width(c) in (\"F\", \"W\"):\n        return 2\n\n    return 1\n\n\ndef wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width\n", "src/_pytest/_io/pprint.py": "# mypy: allow-untyped-defs\n# This module was imported from the cpython standard library\n# (https://github.com/python/cpython/) at commit\n# c5140945c723ae6c4b7ee81ff720ac8ea4b52cfd (python3.12).\n#\n#\n#  Original Author:      Fred L. Drake, Jr.\n#                        fdrake@acm.org\n#\n#  This is a simple little module I wrote to make life easier.  I didn't\n#  see anything quite like it in the library, though I may have overlooked\n#  something.  I wrote this when I was trying to read some heavily nested\n#  tuples with fairly non-descriptive content.  This is modeled very much\n#  after Lisp/Scheme - style pretty-printing of lists.  If you find it\n#  useful, thank small children who sleep at night.\nfrom __future__ import annotations\n\nimport collections as _collections\nimport dataclasses as _dataclasses\nfrom io import StringIO as _StringIO\nimport re\nimport types as _types\nfrom typing import Any\nfrom typing import Callable\nfrom typing import IO\nfrom typing import Iterator\n\n\nclass _safe_key:\n    \"\"\"Helper function for key functions when sorting unorderable objects.\n\n    The wrapped-object will fallback to a Py2.x style comparison for\n    unorderable types (sorting first comparing the type name and then by\n    the obj ids).  Does not work recursively, so dict.items() must have\n    _safe_key applied to both the key and the value.\n\n    \"\"\"\n\n    __slots__ = [\"obj\"]\n\n    def __init__(self, obj):\n        self.obj = obj\n\n    def __lt__(self, other):\n        try:\n            return self.obj < other.obj\n        except TypeError:\n            return (str(type(self.obj)), id(self.obj)) < (\n                str(type(other.obj)),\n                id(other.obj),\n            )\n\n\ndef _safe_tuple(t):\n    \"\"\"Helper function for comparing 2-tuples\"\"\"\n    return _safe_key(t[0]), _safe_key(t[1])\n\n\nclass PrettyPrinter:\n    def __init__(\n        self,\n        indent: int = 4,\n        width: int = 80,\n        depth: int | None = None,\n    ) -> None:\n        \"\"\"Handle pretty printing operations onto a stream using a set of\n        configured parameters.\n\n        indent\n            Number of spaces to indent for each level of nesting.\n\n        width\n            Attempted maximum number of columns in the output.\n\n        depth\n            The maximum depth to print out nested structures.\n\n        \"\"\"\n        if indent < 0:\n            raise ValueError(\"indent must be >= 0\")\n        if depth is not None and depth <= 0:\n            raise ValueError(\"depth must be > 0\")\n        if not width:\n            raise ValueError(\"width must be != 0\")\n        self._depth = depth\n        self._indent_per_level = indent\n        self._width = width\n\n    def pformat(self, object: Any) -> str:\n        sio = _StringIO()\n        self._format(object, sio, 0, 0, set(), 0)\n        return sio.getvalue()\n\n    def _format(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        objid = id(object)\n        if objid in context:\n            stream.write(_recursion(object))\n            return\n\n        p = self._dispatch.get(type(object).__repr__, None)\n        if p is not None:\n            context.add(objid)\n            p(self, object, stream, indent, allowance, context, level + 1)\n            context.remove(objid)\n        elif (\n            _dataclasses.is_dataclass(object)\n            and not isinstance(object, type)\n            and object.__dataclass_params__.repr\n            and\n            # Check dataclass has generated repr method.\n            hasattr(object.__repr__, \"__wrapped__\")\n            and \"__create_fn__\" in object.__repr__.__wrapped__.__qualname__\n        ):\n            context.add(objid)\n            self._pprint_dataclass(\n                object, stream, indent, allowance, context, level + 1\n            )\n            context.remove(objid)\n        else:\n            stream.write(self._repr(object, context, level))\n\n    def _pprint_dataclass(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        cls_name = object.__class__.__name__\n        items = [\n            (f.name, getattr(object, f.name))\n            for f in _dataclasses.fields(object)\n            if f.repr\n        ]\n        stream.write(cls_name + \"(\")\n        self._format_namespace_items(items, stream, indent, allowance, context, level)\n        stream.write(\")\")\n\n    _dispatch: dict[\n        Callable[..., str],\n        Callable[[PrettyPrinter, Any, IO[str], int, int, set[int], int], None],\n    ] = {}\n\n    def _pprint_dict(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        write = stream.write\n        write(\"{\")\n        items = sorted(object.items(), key=_safe_tuple)\n        self._format_dict_items(items, stream, indent, allowance, context, level)\n        write(\"}\")\n\n    _dispatch[dict.__repr__] = _pprint_dict\n\n    def _pprint_ordered_dict(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if not len(object):\n            stream.write(repr(object))\n            return\n        cls = object.__class__\n        stream.write(cls.__name__ + \"(\")\n        self._pprint_dict(object, stream, indent, allowance, context, level)\n        stream.write(\")\")\n\n    _dispatch[_collections.OrderedDict.__repr__] = _pprint_ordered_dict\n\n    def _pprint_list(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        stream.write(\"[\")\n        self._format_items(object, stream, indent, allowance, context, level)\n        stream.write(\"]\")\n\n    _dispatch[list.__repr__] = _pprint_list\n\n    def _pprint_tuple(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        stream.write(\"(\")\n        self._format_items(object, stream, indent, allowance, context, level)\n        stream.write(\")\")\n\n    _dispatch[tuple.__repr__] = _pprint_tuple\n\n    def _pprint_set(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if not len(object):\n            stream.write(repr(object))\n            return\n        typ = object.__class__\n        if typ is set:\n            stream.write(\"{\")\n            endchar = \"}\"\n        else:\n            stream.write(typ.__name__ + \"({\")\n            endchar = \"})\"\n        object = sorted(object, key=_safe_key)\n        self._format_items(object, stream, indent, allowance, context, level)\n        stream.write(endchar)\n\n    _dispatch[set.__repr__] = _pprint_set\n    _dispatch[frozenset.__repr__] = _pprint_set\n\n    def _pprint_str(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        write = stream.write\n        if not len(object):\n            write(repr(object))\n            return\n        chunks = []\n        lines = object.splitlines(True)\n        if level == 1:\n            indent += 1\n            allowance += 1\n        max_width1 = max_width = self._width - indent\n        for i, line in enumerate(lines):\n            rep = repr(line)\n            if i == len(lines) - 1:\n                max_width1 -= allowance\n            if len(rep) <= max_width1:\n                chunks.append(rep)\n            else:\n                # A list of alternating (non-space, space) strings\n                parts = re.findall(r\"\\S*\\s*\", line)\n                assert parts\n                assert not parts[-1]\n                parts.pop()  # drop empty last part\n                max_width2 = max_width\n                current = \"\"\n                for j, part in enumerate(parts):\n                    candidate = current + part\n                    if j == len(parts) - 1 and i == len(lines) - 1:\n                        max_width2 -= allowance\n                    if len(repr(candidate)) > max_width2:\n                        if current:\n                            chunks.append(repr(current))\n                        current = part\n                    else:\n                        current = candidate\n                if current:\n                    chunks.append(repr(current))\n        if len(chunks) == 1:\n            write(rep)\n            return\n        if level == 1:\n            write(\"(\")\n        for i, rep in enumerate(chunks):\n            if i > 0:\n                write(\"\\n\" + \" \" * indent)\n            write(rep)\n        if level == 1:\n            write(\")\")\n\n    _dispatch[str.__repr__] = _pprint_str\n\n    def _pprint_bytes(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        write = stream.write\n        if len(object) <= 4:\n            write(repr(object))\n            return\n        parens = level == 1\n        if parens:\n            indent += 1\n            allowance += 1\n            write(\"(\")\n        delim = \"\"\n        for rep in _wrap_bytes_repr(object, self._width - indent, allowance):\n            write(delim)\n            write(rep)\n            if not delim:\n                delim = \"\\n\" + \" \" * indent\n        if parens:\n            write(\")\")\n\n    _dispatch[bytes.__repr__] = _pprint_bytes\n\n    def _pprint_bytearray(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        write = stream.write\n        write(\"bytearray(\")\n        self._pprint_bytes(\n            bytes(object), stream, indent + 10, allowance + 1, context, level + 1\n        )\n        write(\")\")\n\n    _dispatch[bytearray.__repr__] = _pprint_bytearray\n\n    def _pprint_mappingproxy(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        stream.write(\"mappingproxy(\")\n        self._format(object.copy(), stream, indent, allowance, context, level)\n        stream.write(\")\")\n\n    _dispatch[_types.MappingProxyType.__repr__] = _pprint_mappingproxy\n\n    def _pprint_simplenamespace(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if type(object) is _types.SimpleNamespace:\n            # The SimpleNamespace repr is \"namespace\" instead of the class\n            # name, so we do the same here. For subclasses; use the class name.\n            cls_name = \"namespace\"\n        else:\n            cls_name = object.__class__.__name__\n        items = object.__dict__.items()\n        stream.write(cls_name + \"(\")\n        self._format_namespace_items(items, stream, indent, allowance, context, level)\n        stream.write(\")\")\n\n    _dispatch[_types.SimpleNamespace.__repr__] = _pprint_simplenamespace\n\n    def _format_dict_items(\n        self,\n        items: list[tuple[Any, Any]],\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if not items:\n            return\n\n        write = stream.write\n        item_indent = indent + self._indent_per_level\n        delimnl = \"\\n\" + \" \" * item_indent\n        for key, ent in items:\n            write(delimnl)\n            write(self._repr(key, context, level))\n            write(\": \")\n            self._format(ent, stream, item_indent, 1, context, level)\n            write(\",\")\n\n        write(\"\\n\" + \" \" * indent)\n\n    def _format_namespace_items(\n        self,\n        items: list[tuple[Any, Any]],\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if not items:\n            return\n\n        write = stream.write\n        item_indent = indent + self._indent_per_level\n        delimnl = \"\\n\" + \" \" * item_indent\n        for key, ent in items:\n            write(delimnl)\n            write(key)\n            write(\"=\")\n            if id(ent) in context:\n                # Special-case representation of recursion to match standard\n                # recursive dataclass repr.\n                write(\"...\")\n            else:\n                self._format(\n                    ent,\n                    stream,\n                    item_indent + len(key) + 1,\n                    1,\n                    context,\n                    level,\n                )\n\n            write(\",\")\n\n        write(\"\\n\" + \" \" * indent)\n\n    def _format_items(\n        self,\n        items: list[Any],\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if not items:\n            return\n\n        write = stream.write\n        item_indent = indent + self._indent_per_level\n        delimnl = \"\\n\" + \" \" * item_indent\n\n        for item in items:\n            write(delimnl)\n            self._format(item, stream, item_indent, 1, context, level)\n            write(\",\")\n\n        write(\"\\n\" + \" \" * indent)\n\n    def _repr(self, object: Any, context: set[int], level: int) -> str:\n        return self._safe_repr(object, context.copy(), self._depth, level)\n\n    def _pprint_default_dict(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        rdf = self._repr(object.default_factory, context, level)\n        stream.write(f\"{object.__class__.__name__}({rdf}, \")\n        self._pprint_dict(object, stream, indent, allowance, context, level)\n        stream.write(\")\")\n\n    _dispatch[_collections.defaultdict.__repr__] = _pprint_default_dict\n\n    def _pprint_counter(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        stream.write(object.__class__.__name__ + \"(\")\n\n        if object:\n            stream.write(\"{\")\n            items = object.most_common()\n            self._format_dict_items(items, stream, indent, allowance, context, level)\n            stream.write(\"}\")\n\n        stream.write(\")\")\n\n    _dispatch[_collections.Counter.__repr__] = _pprint_counter\n\n    def _pprint_chain_map(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if not len(object.maps) or (len(object.maps) == 1 and not len(object.maps[0])):\n            stream.write(repr(object))\n            return\n\n        stream.write(object.__class__.__name__ + \"(\")\n        self._format_items(object.maps, stream, indent, allowance, context, level)\n        stream.write(\")\")\n\n    _dispatch[_collections.ChainMap.__repr__] = _pprint_chain_map\n\n    def _pprint_deque(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        stream.write(object.__class__.__name__ + \"(\")\n        if object.maxlen is not None:\n            stream.write(\"maxlen=%d, \" % object.maxlen)\n        stream.write(\"[\")\n\n        self._format_items(object, stream, indent, allowance + 1, context, level)\n        stream.write(\"])\")\n\n    _dispatch[_collections.deque.__repr__] = _pprint_deque\n\n    def _pprint_user_dict(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        self._format(object.data, stream, indent, allowance, context, level - 1)\n\n    _dispatch[_collections.UserDict.__repr__] = _pprint_user_dict\n\n    def _pprint_user_list(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        self._format(object.data, stream, indent, allowance, context, level - 1)\n\n    _dispatch[_collections.UserList.__repr__] = _pprint_user_list\n\n    def _pprint_user_string(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        self._format(object.data, stream, indent, allowance, context, level - 1)\n\n    _dispatch[_collections.UserString.__repr__] = _pprint_user_string\n\n    def _safe_repr(\n        self, object: Any, context: set[int], maxlevels: int | None, level: int\n    ) -> str:\n        typ = type(object)\n        if typ in _builtin_scalars:\n            return repr(object)\n\n        r = getattr(typ, \"__repr__\", None)\n\n        if issubclass(typ, dict) and r is dict.__repr__:\n            if not object:\n                return \"{}\"\n            objid = id(object)\n            if maxlevels and level >= maxlevels:\n                return \"{...}\"\n            if objid in context:\n                return _recursion(object)\n            context.add(objid)\n            components: list[str] = []\n            append = components.append\n            level += 1\n            for k, v in sorted(object.items(), key=_safe_tuple):\n                krepr = self._safe_repr(k, context, maxlevels, level)\n                vrepr = self._safe_repr(v, context, maxlevels, level)\n                append(f\"{krepr}: {vrepr}\")\n            context.remove(objid)\n            return \"{{{}}}\".format(\", \".join(components))\n\n        if (issubclass(typ, list) and r is list.__repr__) or (\n            issubclass(typ, tuple) and r is tuple.__repr__\n        ):\n            if issubclass(typ, list):\n                if not object:\n                    return \"[]\"\n                format = \"[%s]\"\n            elif len(object) == 1:\n                format = \"(%s,)\"\n            else:\n                if not object:\n                    return \"()\"\n                format = \"(%s)\"\n            objid = id(object)\n            if maxlevels and level >= maxlevels:\n                return format % \"...\"\n            if objid in context:\n                return _recursion(object)\n            context.add(objid)\n            components = []\n            append = components.append\n            level += 1\n            for o in object:\n                orepr = self._safe_repr(o, context, maxlevels, level)\n                append(orepr)\n            context.remove(objid)\n            return format % \", \".join(components)\n\n        return repr(object)\n\n\n_builtin_scalars = frozenset(\n    {str, bytes, bytearray, float, complex, bool, type(None), int}\n)\n\n\ndef _recursion(object: Any) -> str:\n    return f\"<Recursion on {type(object).__name__} with id={id(object)}>\"\n\n\ndef _wrap_bytes_repr(object: Any, width: int, allowance: int) -> Iterator[str]:\n    current = b\"\"\n    last = len(object) // 4 * 4\n    for i in range(0, len(object), 4):\n        part = object[i : i + 4]\n        candidate = current + part\n        if i == last:\n            width -= allowance\n        if len(repr(candidate)) > width:\n            if current:\n                yield repr(current)\n            current = part\n        else:\n            current = candidate\n    if current:\n        yield repr(current)\n", "src/_pytest/_io/__init__.py": "from __future__ import annotations\n\nfrom .terminalwriter import get_terminal_width\nfrom .terminalwriter import TerminalWriter\n\n\n__all__ = [\n    \"TerminalWriter\",\n    \"get_terminal_width\",\n]\n", "src/_pytest/mark/structures.py": "# mypy: allow-untyped-defs\nfrom __future__ import annotations\n\nimport collections.abc\nimport dataclasses\nimport inspect\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Collection\nfrom typing import final\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Mapping\nfrom typing import MutableMapping\nfrom typing import NamedTuple\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\nimport warnings\n\nfrom .._code import getfslineno\nfrom ..compat import ascii_escaped\nfrom ..compat import NOTSET\nfrom ..compat import NotSetType\nfrom _pytest.config import Config\nfrom _pytest.deprecated import check_ispytest\nfrom _pytest.deprecated import MARKED_FIXTURE\nfrom _pytest.outcomes import fail\nfrom _pytest.scope import _ScopeName\nfrom _pytest.warning_types import PytestUnknownMarkWarning\n\n\nif TYPE_CHECKING:\n    from ..nodes import Node\n\n\nEMPTY_PARAMETERSET_OPTION = \"empty_parameter_set_mark\"\n\n\ndef istestfunc(func) -> bool:\n    return callable(func) and getattr(func, \"__name__\", \"<lambda>\") != \"<lambda>\"\n\n\ndef get_empty_parameterset_mark(\n    config: Config, argnames: Sequence[str], func\n) -> MarkDecorator:\n    from ..nodes import Collector\n\n    fs, lineno = getfslineno(func)\n    reason = \"got empty parameter set %r, function %s at %s:%d\" % (\n        argnames,\n        func.__name__,\n        fs,\n        lineno,\n    )\n\n    requested_mark = config.getini(EMPTY_PARAMETERSET_OPTION)\n    if requested_mark in (\"\", None, \"skip\"):\n        mark = MARK_GEN.skip(reason=reason)\n    elif requested_mark == \"xfail\":\n        mark = MARK_GEN.xfail(reason=reason, run=False)\n    elif requested_mark == \"fail_at_collect\":\n        f_name = func.__name__\n        _, lineno = getfslineno(func)\n        raise Collector.CollectError(\n            \"Empty parameter set in '%s' at line %d\" % (f_name, lineno + 1)\n        )\n    else:\n        raise LookupError(requested_mark)\n    return mark\n\n\nclass ParameterSet(NamedTuple):\n    values: Sequence[object | NotSetType]\n    marks: Collection[MarkDecorator | Mark]\n    id: str | None\n\n    @classmethod\n    def param(\n        cls,\n        *values: object,\n        marks: MarkDecorator | Collection[MarkDecorator | Mark] = (),\n        id: str | None = None,\n    ) -> ParameterSet:\n        if isinstance(marks, MarkDecorator):\n            marks = (marks,)\n        else:\n            assert isinstance(marks, collections.abc.Collection)\n\n        if id is not None:\n            if not isinstance(id, str):\n                raise TypeError(f\"Expected id to be a string, got {type(id)}: {id!r}\")\n            id = ascii_escaped(id)\n        return cls(values, marks, id)\n\n    @classmethod\n    def extract_from(\n        cls,\n        parameterset: ParameterSet | Sequence[object] | object,\n        force_tuple: bool = False,\n    ) -> ParameterSet:\n        \"\"\"Extract from an object or objects.\n\n        :param parameterset:\n            A legacy style parameterset that may or may not be a tuple,\n            and may or may not be wrapped into a mess of mark objects.\n\n        :param force_tuple:\n            Enforce tuple wrapping so single argument tuple values\n            don't get decomposed and break tests.\n        \"\"\"\n        if isinstance(parameterset, cls):\n            return parameterset\n        if force_tuple:\n            return cls.param(parameterset)\n        else:\n            # TODO: Refactor to fix this type-ignore. Currently the following\n            # passes type-checking but crashes:\n            #\n            #   @pytest.mark.parametrize(('x', 'y'), [1, 2])\n            #   def test_foo(x, y): pass\n            return cls(parameterset, marks=[], id=None)  # type: ignore[arg-type]\n\n    @staticmethod\n    def _parse_parametrize_args(\n        argnames: str | Sequence[str],\n        argvalues: Iterable[ParameterSet | Sequence[object] | object],\n        *args,\n        **kwargs,\n    ) -> tuple[Sequence[str], bool]:\n        if isinstance(argnames, str):\n            argnames = [x.strip() for x in argnames.split(\",\") if x.strip()]\n            force_tuple = len(argnames) == 1\n        else:\n            force_tuple = False\n        return argnames, force_tuple\n\n    @staticmethod\n    def _parse_parametrize_parameters(\n        argvalues: Iterable[ParameterSet | Sequence[object] | object],\n        force_tuple: bool,\n    ) -> list[ParameterSet]:\n        return [\n            ParameterSet.extract_from(x, force_tuple=force_tuple) for x in argvalues\n        ]\n\n    @classmethod\n    def _for_parametrize(\n        cls,\n        argnames: str | Sequence[str],\n        argvalues: Iterable[ParameterSet | Sequence[object] | object],\n        func,\n        config: Config,\n        nodeid: str,\n    ) -> tuple[Sequence[str], list[ParameterSet]]:\n        argnames, force_tuple = cls._parse_parametrize_args(argnames, argvalues)\n        parameters = cls._parse_parametrize_parameters(argvalues, force_tuple)\n        del argvalues\n\n        if parameters:\n            # Check all parameter sets have the correct number of values.\n            for param in parameters:\n                if len(param.values) != len(argnames):\n                    msg = (\n                        '{nodeid}: in \"parametrize\" the number of names ({names_len}):\\n'\n                        \"  {names}\\n\"\n                        \"must be equal to the number of values ({values_len}):\\n\"\n                        \"  {values}\"\n                    )\n                    fail(\n                        msg.format(\n                            nodeid=nodeid,\n                            values=param.values,\n                            names=argnames,\n                            names_len=len(argnames),\n                            values_len=len(param.values),\n                        ),\n                        pytrace=False,\n                    )\n        else:\n            # Empty parameter set (likely computed at runtime): create a single\n            # parameter set with NOTSET values, with the \"empty parameter set\" mark applied to it.\n            mark = get_empty_parameterset_mark(config, argnames, func)\n            parameters.append(\n                ParameterSet(values=(NOTSET,) * len(argnames), marks=[mark], id=None)\n            )\n        return argnames, parameters\n\n\n@final\n@dataclasses.dataclass(frozen=True)\nclass Mark:\n    \"\"\"A pytest mark.\"\"\"\n\n    #: Name of the mark.\n    name: str\n    #: Positional arguments of the mark decorator.\n    args: tuple[Any, ...]\n    #: Keyword arguments of the mark decorator.\n    kwargs: Mapping[str, Any]\n\n    #: Source Mark for ids with parametrize Marks.\n    _param_ids_from: Mark | None = dataclasses.field(default=None, repr=False)\n    #: Resolved/generated ids with parametrize Marks.\n    _param_ids_generated: Sequence[str] | None = dataclasses.field(\n        default=None, repr=False\n    )\n\n    def __init__(\n        self,\n        name: str,\n        args: tuple[Any, ...],\n        kwargs: Mapping[str, Any],\n        param_ids_from: Mark | None = None,\n        param_ids_generated: Sequence[str] | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        \"\"\":meta private:\"\"\"\n        check_ispytest(_ispytest)\n        # Weirdness to bypass frozen=True.\n        object.__setattr__(self, \"name\", name)\n        object.__setattr__(self, \"args\", args)\n        object.__setattr__(self, \"kwargs\", kwargs)\n        object.__setattr__(self, \"_param_ids_from\", param_ids_from)\n        object.__setattr__(self, \"_param_ids_generated\", param_ids_generated)\n\n    def _has_param_ids(self) -> bool:\n        return \"ids\" in self.kwargs or len(self.args) >= 4\n\n    def combined_with(self, other: Mark) -> Mark:\n        \"\"\"Return a new Mark which is a combination of this\n        Mark and another Mark.\n\n        Combines by appending args and merging kwargs.\n\n        :param Mark other: The mark to combine with.\n        :rtype: Mark\n        \"\"\"\n        assert self.name == other.name\n\n        # Remember source of ids with parametrize Marks.\n        param_ids_from: Mark | None = None\n        if self.name == \"parametrize\":\n            if other._has_param_ids():\n                param_ids_from = other\n            elif self._has_param_ids():\n                param_ids_from = self\n\n        return Mark(\n            self.name,\n            self.args + other.args,\n            dict(self.kwargs, **other.kwargs),\n            param_ids_from=param_ids_from,\n            _ispytest=True,\n        )\n\n\n# A generic parameter designating an object to which a Mark may\n# be applied -- a test function (callable) or class.\n# Note: a lambda is not allowed, but this can't be represented.\nMarkable = TypeVar(\"Markable\", bound=Union[Callable[..., object], type])\n\n\n@dataclasses.dataclass\nclass MarkDecorator:\n    \"\"\"A decorator for applying a mark on test functions and classes.\n\n    ``MarkDecorators`` are created with ``pytest.mark``::\n\n        mark1 = pytest.mark.NAME  # Simple MarkDecorator\n        mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator\n\n    and can then be applied as decorators to test functions::\n\n        @mark2\n        def test_function():\n            pass\n\n    When a ``MarkDecorator`` is called, it does the following:\n\n    1. If called with a single class as its only positional argument and no\n       additional keyword arguments, it attaches the mark to the class so it\n       gets applied automatically to all test cases found in that class.\n\n    2. If called with a single function as its only positional argument and\n       no additional keyword arguments, it attaches the mark to the function,\n       containing all the arguments already stored internally in the\n       ``MarkDecorator``.\n\n    3. When called in any other case, it returns a new ``MarkDecorator``\n       instance with the original ``MarkDecorator``'s content updated with\n       the arguments passed to this call.\n\n    Note: The rules above prevent a ``MarkDecorator`` from storing only a\n    single function or class reference as its positional argument with no\n    additional keyword or positional arguments. You can work around this by\n    using `with_args()`.\n    \"\"\"\n\n    mark: Mark\n\n    def __init__(self, mark: Mark, *, _ispytest: bool = False) -> None:\n        \"\"\":meta private:\"\"\"\n        check_ispytest(_ispytest)\n        self.mark = mark\n\n    @property\n    def name(self) -> str:\n        \"\"\"Alias for mark.name.\"\"\"\n        return self.mark.name\n\n    @property\n    def args(self) -> tuple[Any, ...]:\n        \"\"\"Alias for mark.args.\"\"\"\n        return self.mark.args\n\n    @property\n    def kwargs(self) -> Mapping[str, Any]:\n        \"\"\"Alias for mark.kwargs.\"\"\"\n        return self.mark.kwargs\n\n    @property\n    def markname(self) -> str:\n        \"\"\":meta private:\"\"\"\n        return self.name  # for backward-compat (2.4.1 had this attr)\n\n    def with_args(self, *args: object, **kwargs: object) -> MarkDecorator:\n        \"\"\"Return a MarkDecorator with extra arguments added.\n\n        Unlike calling the MarkDecorator, with_args() can be used even\n        if the sole argument is a callable/class.\n        \"\"\"\n        mark = Mark(self.name, args, kwargs, _ispytest=True)\n        return MarkDecorator(self.mark.combined_with(mark), _ispytest=True)\n\n    # Type ignored because the overloads overlap with an incompatible\n    # return type. Not much we can do about that. Thankfully mypy picks\n    # the first match so it works out even if we break the rules.\n    @overload\n    def __call__(self, arg: Markable) -> Markable:  # type: ignore[overload-overlap]\n        pass\n\n    @overload\n    def __call__(self, *args: object, **kwargs: object) -> MarkDecorator:\n        pass\n\n    def __call__(self, *args: object, **kwargs: object):\n        \"\"\"Call the MarkDecorator.\"\"\"\n        if args and not kwargs:\n            func = args[0]\n            is_class = inspect.isclass(func)\n            if len(args) == 1 and (istestfunc(func) or is_class):\n                store_mark(func, self.mark, stacklevel=3)\n                return func\n        return self.with_args(*args, **kwargs)\n\n\ndef get_unpacked_marks(\n    obj: object | type,\n    *,\n    consider_mro: bool = True,\n) -> list[Mark]:\n    \"\"\"Obtain the unpacked marks that are stored on an object.\n\n    If obj is a class and consider_mro is true, return marks applied to\n    this class and all of its super-classes in MRO order. If consider_mro\n    is false, only return marks applied directly to this class.\n    \"\"\"\n    if isinstance(obj, type):\n        if not consider_mro:\n            mark_lists = [obj.__dict__.get(\"pytestmark\", [])]\n        else:\n            mark_lists = [\n                x.__dict__.get(\"pytestmark\", []) for x in reversed(obj.__mro__)\n            ]\n        mark_list = []\n        for item in mark_lists:\n            if isinstance(item, list):\n                mark_list.extend(item)\n            else:\n                mark_list.append(item)\n    else:\n        mark_attribute = getattr(obj, \"pytestmark\", [])\n        if isinstance(mark_attribute, list):\n            mark_list = mark_attribute\n        else:\n            mark_list = [mark_attribute]\n    return list(normalize_mark_list(mark_list))\n\n\ndef normalize_mark_list(\n    mark_list: Iterable[Mark | MarkDecorator],\n) -> Iterable[Mark]:\n    \"\"\"\n    Normalize an iterable of Mark or MarkDecorator objects into a list of marks\n    by retrieving the `mark` attribute on MarkDecorator instances.\n\n    :param mark_list: marks to normalize\n    :returns: A new list of the extracted Mark objects\n    \"\"\"\n    for mark in mark_list:\n        mark_obj = getattr(mark, \"mark\", mark)\n        if not isinstance(mark_obj, Mark):\n            raise TypeError(f\"got {mark_obj!r} instead of Mark\")\n        yield mark_obj\n\n\ndef store_mark(obj, mark: Mark, *, stacklevel: int = 2) -> None:\n    \"\"\"Store a Mark on an object.\n\n    This is used to implement the Mark declarations/decorators correctly.\n    \"\"\"\n    assert isinstance(mark, Mark), mark\n\n    from ..fixtures import getfixturemarker\n\n    if getfixturemarker(obj) is not None:\n        warnings.warn(MARKED_FIXTURE, stacklevel=stacklevel)\n\n    # Always reassign name to avoid updating pytestmark in a reference that\n    # was only borrowed.\n    obj.pytestmark = [*get_unpacked_marks(obj, consider_mro=False), mark]\n\n\n# Typing for builtin pytest marks. This is cheating; it gives builtin marks\n# special privilege, and breaks modularity. But practicality beats purity...\nif TYPE_CHECKING:\n\n    class _SkipMarkDecorator(MarkDecorator):\n        @overload  # type: ignore[override,no-overload-impl]\n        def __call__(self, arg: Markable) -> Markable: ...\n\n        @overload\n        def __call__(self, reason: str = ...) -> MarkDecorator: ...\n\n    class _SkipifMarkDecorator(MarkDecorator):\n        def __call__(  # type: ignore[override]\n            self,\n            condition: str | bool = ...,\n            *conditions: str | bool,\n            reason: str = ...,\n        ) -> MarkDecorator: ...\n\n    class _XfailMarkDecorator(MarkDecorator):\n        @overload  # type: ignore[override,no-overload-impl]\n        def __call__(self, arg: Markable) -> Markable: ...\n\n        @overload\n        def __call__(\n            self,\n            condition: str | bool = False,\n            *conditions: str | bool,\n            reason: str = ...,\n            run: bool = ...,\n            raises: None | type[BaseException] | tuple[type[BaseException], ...] = ...,\n            strict: bool = ...,\n        ) -> MarkDecorator: ...\n\n    class _ParametrizeMarkDecorator(MarkDecorator):\n        def __call__(  # type: ignore[override]\n            self,\n            argnames: str | Sequence[str],\n            argvalues: Iterable[ParameterSet | Sequence[object] | object],\n            *,\n            indirect: bool | Sequence[str] = ...,\n            ids: Iterable[None | str | float | int | bool]\n            | Callable[[Any], object | None]\n            | None = ...,\n            scope: _ScopeName | None = ...,\n        ) -> MarkDecorator: ...\n\n    class _UsefixturesMarkDecorator(MarkDecorator):\n        def __call__(self, *fixtures: str) -> MarkDecorator:  # type: ignore[override]\n            ...\n\n    class _FilterwarningsMarkDecorator(MarkDecorator):\n        def __call__(self, *filters: str) -> MarkDecorator:  # type: ignore[override]\n            ...\n\n\n@final\nclass MarkGenerator:\n    \"\"\"Factory for :class:`MarkDecorator` objects - exposed as\n    a ``pytest.mark`` singleton instance.\n\n    Example::\n\n         import pytest\n\n\n         @pytest.mark.slowtest\n         def test_function():\n             pass\n\n    applies a 'slowtest' :class:`Mark` on ``test_function``.\n    \"\"\"\n\n    # See TYPE_CHECKING above.\n    if TYPE_CHECKING:\n        skip: _SkipMarkDecorator\n        skipif: _SkipifMarkDecorator\n        xfail: _XfailMarkDecorator\n        parametrize: _ParametrizeMarkDecorator\n        usefixtures: _UsefixturesMarkDecorator\n        filterwarnings: _FilterwarningsMarkDecorator\n\n    def __init__(self, *, _ispytest: bool = False) -> None:\n        check_ispytest(_ispytest)\n        self._config: Config | None = None\n        self._markers: set[str] = set()\n\n    def __getattr__(self, name: str) -> MarkDecorator:\n        \"\"\"Generate a new :class:`MarkDecorator` with the given name.\"\"\"\n        if name[0] == \"_\":\n            raise AttributeError(\"Marker name must NOT start with underscore\")\n\n        if self._config is not None:\n            # We store a set of markers as a performance optimisation - if a mark\n            # name is in the set we definitely know it, but a mark may be known and\n            # not in the set.  We therefore start by updating the set!\n            if name not in self._markers:\n                for line in self._config.getini(\"markers\"):\n                    # example lines: \"skipif(condition): skip the given test if...\"\n                    # or \"hypothesis: tests which use Hypothesis\", so to get the\n                    # marker name we split on both `:` and `(`.\n                    marker = line.split(\":\")[0].split(\"(\")[0].strip()\n                    self._markers.add(marker)\n\n            # If the name is not in the set of known marks after updating,\n            # then it really is time to issue a warning or an error.\n            if name not in self._markers:\n                if self._config.option.strict_markers or self._config.option.strict:\n                    fail(\n                        f\"{name!r} not found in `markers` configuration option\",\n                        pytrace=False,\n                    )\n\n                # Raise a specific error for common misspellings of \"parametrize\".\n                if name in [\"parameterize\", \"parametrise\", \"parameterise\"]:\n                    __tracebackhide__ = True\n                    fail(f\"Unknown '{name}' mark, did you mean 'parametrize'?\")\n\n                warnings.warn(\n                    f\"Unknown pytest.mark.{name} - is this a typo?  You can register \"\n                    \"custom marks to avoid this warning - for details, see \"\n                    \"https://docs.pytest.org/en/stable/how-to/mark.html\",\n                    PytestUnknownMarkWarning,\n                    2,\n                )\n\n        return MarkDecorator(Mark(name, (), {}, _ispytest=True), _ispytest=True)\n\n\nMARK_GEN = MarkGenerator(_ispytest=True)\n\n\n@final\nclass NodeKeywords(MutableMapping[str, Any]):\n    __slots__ = (\"node\", \"parent\", \"_markers\")\n\n    def __init__(self, node: Node) -> None:\n        self.node = node\n        self.parent = node.parent\n        self._markers = {node.name: True}\n\n    def __getitem__(self, key: str) -> Any:\n        try:\n            return self._markers[key]\n        except KeyError:\n            if self.parent is None:\n                raise\n            return self.parent.keywords[key]\n\n    def __setitem__(self, key: str, value: Any) -> None:\n        self._markers[key] = value\n\n    # Note: we could've avoided explicitly implementing some of the methods\n    # below and use the collections.abc fallback, but that would be slow.\n\n    def __contains__(self, key: object) -> bool:\n        return (\n            key in self._markers\n            or self.parent is not None\n            and key in self.parent.keywords\n        )\n\n    def update(  # type: ignore[override]\n        self,\n        other: Mapping[str, Any] | Iterable[tuple[str, Any]] = (),\n        **kwds: Any,\n    ) -> None:\n        self._markers.update(other)\n        self._markers.update(kwds)\n\n    def __delitem__(self, key: str) -> None:\n        raise ValueError(\"cannot delete key in keywords dict\")\n\n    def __iter__(self) -> Iterator[str]:\n        # Doesn't need to be fast.\n        yield from self._markers\n        if self.parent is not None:\n            for keyword in self.parent.keywords:\n                # self._marks and self.parent.keywords can have duplicates.\n                if keyword not in self._markers:\n                    yield keyword\n\n    def __len__(self) -> int:\n        # Doesn't need to be fast.\n        return sum(1 for keyword in self)\n\n    def __repr__(self) -> str:\n        return f\"<NodeKeywords for node {self.node}>\"\n", "src/_pytest/mark/expression.py": "r\"\"\"Evaluate match expressions, as used by `-k` and `-m`.\n\nThe grammar is:\n\nexpression: expr? EOF\nexpr:       and_expr ('or' and_expr)*\nand_expr:   not_expr ('and' not_expr)*\nnot_expr:   'not' not_expr | '(' expr ')' | ident ( '(' name '=' value ( ', ' name '=' value )*  ')')*\n\nident:      (\\w|:|\\+|-|\\.|\\[|\\]|\\\\|/)+\n\nThe semantics are:\n\n- Empty expression evaluates to False.\n- ident evaluates to True of False according to a provided matcher function.\n- or/and/not evaluate according to the usual boolean semantics.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport ast\nimport dataclasses\nimport enum\nimport keyword\nimport re\nimport types\nfrom typing import Iterator\nfrom typing import Literal\nfrom typing import Mapping\nfrom typing import NoReturn\nfrom typing import overload\nfrom typing import Protocol\nfrom typing import Sequence\n\n\n__all__ = [\n    \"Expression\",\n    \"ParseError\",\n]\n\n\nclass TokenType(enum.Enum):\n    LPAREN = \"left parenthesis\"\n    RPAREN = \"right parenthesis\"\n    OR = \"or\"\n    AND = \"and\"\n    NOT = \"not\"\n    IDENT = \"identifier\"\n    EOF = \"end of input\"\n    EQUAL = \"=\"\n    STRING = \"str\"\n    COMMA = \",\"\n\n\n@dataclasses.dataclass(frozen=True)\nclass Token:\n    __slots__ = (\"type\", \"value\", \"pos\")\n    type: TokenType\n    value: str\n    pos: int\n\n\nclass ParseError(Exception):\n    \"\"\"The expression contains invalid syntax.\n\n    :param column: The column in the line where the error occurred (1-based).\n    :param message: A description of the error.\n    \"\"\"\n\n    def __init__(self, column: int, message: str) -> None:\n        self.column = column\n        self.message = message\n\n    def __str__(self) -> str:\n        return f\"at column {self.column}: {self.message}\"\n\n\nclass Scanner:\n    __slots__ = (\"tokens\", \"current\")\n\n    def __init__(self, input: str) -> None:\n        self.tokens = self.lex(input)\n        self.current = next(self.tokens)\n\n    def lex(self, input: str) -> Iterator[Token]:\n        pos = 0\n        while pos < len(input):\n            if input[pos] in (\" \", \"\\t\"):\n                pos += 1\n            elif input[pos] == \"(\":\n                yield Token(TokenType.LPAREN, \"(\", pos)\n                pos += 1\n            elif input[pos] == \")\":\n                yield Token(TokenType.RPAREN, \")\", pos)\n                pos += 1\n            elif input[pos] == \"=\":\n                yield Token(TokenType.EQUAL, \"=\", pos)\n                pos += 1\n            elif input[pos] == \",\":\n                yield Token(TokenType.COMMA, \",\", pos)\n                pos += 1\n            elif (quote_char := input[pos]) in (\"'\", '\"'):\n                end_quote_pos = input.find(quote_char, pos + 1)\n                if end_quote_pos == -1:\n                    raise ParseError(\n                        pos + 1,\n                        f'closing quote \"{quote_char}\" is missing',\n                    )\n                value = input[pos : end_quote_pos + 1]\n                if (backslash_pos := input.find(\"\\\\\")) != -1:\n                    raise ParseError(\n                        backslash_pos + 1,\n                        r'escaping with \"\\\" not supported in marker expression',\n                    )\n                yield Token(TokenType.STRING, value, pos)\n                pos += len(value)\n            else:\n                match = re.match(r\"(:?\\w|:|\\+|-|\\.|\\[|\\]|\\\\|/)+\", input[pos:])\n                if match:\n                    value = match.group(0)\n                    if value == \"or\":\n                        yield Token(TokenType.OR, value, pos)\n                    elif value == \"and\":\n                        yield Token(TokenType.AND, value, pos)\n                    elif value == \"not\":\n                        yield Token(TokenType.NOT, value, pos)\n                    else:\n                        yield Token(TokenType.IDENT, value, pos)\n                    pos += len(value)\n                else:\n                    raise ParseError(\n                        pos + 1,\n                        f'unexpected character \"{input[pos]}\"',\n                    )\n        yield Token(TokenType.EOF, \"\", pos)\n\n    @overload\n    def accept(self, type: TokenType, *, reject: Literal[True]) -> Token: ...\n\n    @overload\n    def accept(\n        self, type: TokenType, *, reject: Literal[False] = False\n    ) -> Token | None: ...\n\n    def accept(self, type: TokenType, *, reject: bool = False) -> Token | None:\n        if self.current.type is type:\n            token = self.current\n            if token.type is not TokenType.EOF:\n                self.current = next(self.tokens)\n            return token\n        if reject:\n            self.reject((type,))\n        return None\n\n    def reject(self, expected: Sequence[TokenType]) -> NoReturn:\n        raise ParseError(\n            self.current.pos + 1,\n            \"expected {}; got {}\".format(\n                \" OR \".join(type.value for type in expected),\n                self.current.type.value,\n            ),\n        )\n\n\n# True, False and None are legal match expression identifiers,\n# but illegal as Python identifiers. To fix this, this prefix\n# is added to identifiers in the conversion to Python AST.\nIDENT_PREFIX = \"$\"\n\n\ndef expression(s: Scanner) -> ast.Expression:\n    if s.accept(TokenType.EOF):\n        ret: ast.expr = ast.Constant(False)\n    else:\n        ret = expr(s)\n        s.accept(TokenType.EOF, reject=True)\n    return ast.fix_missing_locations(ast.Expression(ret))\n\n\ndef expr(s: Scanner) -> ast.expr:\n    ret = and_expr(s)\n    while s.accept(TokenType.OR):\n        rhs = and_expr(s)\n        ret = ast.BoolOp(ast.Or(), [ret, rhs])\n    return ret\n\n\ndef and_expr(s: Scanner) -> ast.expr:\n    ret = not_expr(s)\n    while s.accept(TokenType.AND):\n        rhs = not_expr(s)\n        ret = ast.BoolOp(ast.And(), [ret, rhs])\n    return ret\n\n\ndef not_expr(s: Scanner) -> ast.expr:\n    if s.accept(TokenType.NOT):\n        return ast.UnaryOp(ast.Not(), not_expr(s))\n    if s.accept(TokenType.LPAREN):\n        ret = expr(s)\n        s.accept(TokenType.RPAREN, reject=True)\n        return ret\n    ident = s.accept(TokenType.IDENT)\n    if ident:\n        name = ast.Name(IDENT_PREFIX + ident.value, ast.Load())\n        if s.accept(TokenType.LPAREN):\n            ret = ast.Call(func=name, args=[], keywords=all_kwargs(s))\n            s.accept(TokenType.RPAREN, reject=True)\n        else:\n            ret = name\n        return ret\n\n    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))\n\n\nBUILTIN_MATCHERS = {\"True\": True, \"False\": False, \"None\": None}\n\n\ndef single_kwarg(s: Scanner) -> ast.keyword:\n    keyword_name = s.accept(TokenType.IDENT, reject=True)\n    if not keyword_name.value.isidentifier():\n        raise ParseError(\n            keyword_name.pos + 1,\n            f\"not a valid python identifier {keyword_name.value}\",\n        )\n    if keyword.iskeyword(keyword_name.value):\n        raise ParseError(\n            keyword_name.pos + 1,\n            f\"unexpected reserved python keyword `{keyword_name.value}`\",\n        )\n    s.accept(TokenType.EQUAL, reject=True)\n\n    if value_token := s.accept(TokenType.STRING):\n        value: str | int | bool | None = value_token.value[1:-1]  # strip quotes\n    else:\n        value_token = s.accept(TokenType.IDENT, reject=True)\n        if (\n            (number := value_token.value).isdigit()\n            or number.startswith(\"-\")\n            and number[1:].isdigit()\n        ):\n            value = int(number)\n        elif value_token.value in BUILTIN_MATCHERS:\n            value = BUILTIN_MATCHERS[value_token.value]\n        else:\n            raise ParseError(\n                value_token.pos + 1,\n                f'unexpected character/s \"{value_token.value}\"',\n            )\n\n    ret = ast.keyword(keyword_name.value, ast.Constant(value))\n    return ret\n\n\ndef all_kwargs(s: Scanner) -> list[ast.keyword]:\n    ret = [single_kwarg(s)]\n    while s.accept(TokenType.COMMA):\n        ret.append(single_kwarg(s))\n    return ret\n\n\nclass MatcherCall(Protocol):\n    def __call__(self, name: str, /, **kwargs: str | int | bool | None) -> bool: ...\n\n\n@dataclasses.dataclass\nclass MatcherNameAdapter:\n    matcher: MatcherCall\n    name: str\n\n    def __bool__(self) -> bool:\n        return self.matcher(self.name)\n\n    def __call__(self, **kwargs: str | int | bool | None) -> bool:\n        return self.matcher(self.name, **kwargs)\n\n\nclass MatcherAdapter(Mapping[str, MatcherNameAdapter]):\n    \"\"\"Adapts a matcher function to a locals mapping as required by eval().\"\"\"\n\n    def __init__(self, matcher: MatcherCall) -> None:\n        self.matcher = matcher\n\n    def __getitem__(self, key: str) -> MatcherNameAdapter:\n        return MatcherNameAdapter(matcher=self.matcher, name=key[len(IDENT_PREFIX) :])\n\n    def __iter__(self) -> Iterator[str]:\n        raise NotImplementedError()\n\n    def __len__(self) -> int:\n        raise NotImplementedError()\n\n\nclass Expression:\n    \"\"\"A compiled match expression as used by -k and -m.\n\n    The expression can be evaluated against different matchers.\n    \"\"\"\n\n    __slots__ = (\"code\",)\n\n    def __init__(self, code: types.CodeType) -> None:\n        self.code = code\n\n    @classmethod\n    def compile(self, input: str) -> Expression:\n        \"\"\"Compile a match expression.\n\n        :param input: The input expression - one line.\n        \"\"\"\n        astexpr = expression(Scanner(input))\n        code: types.CodeType = compile(\n            astexpr,\n            filename=\"<pytest match expression>\",\n            mode=\"eval\",\n        )\n        return Expression(code)\n\n    def evaluate(self, matcher: MatcherCall) -> bool:\n        \"\"\"Evaluate the match expression.\n\n        :param matcher:\n            Given an identifier, should return whether it matches or not.\n            Should be prepared to handle arbitrary strings as input.\n\n        :returns: Whether the expression matches or not.\n        \"\"\"\n        ret: bool = bool(eval(self.code, {\"__builtins__\": {}}, MatcherAdapter(matcher)))\n        return ret\n", "src/_pytest/mark/__init__.py": "\"\"\"Generic mechanism for marking and selecting python functions.\"\"\"\n\nfrom __future__ import annotations\n\nimport collections\nimport dataclasses\nfrom typing import AbstractSet\nfrom typing import Collection\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import TYPE_CHECKING\n\nfrom .expression import Expression\nfrom .expression import ParseError\nfrom .structures import EMPTY_PARAMETERSET_OPTION\nfrom .structures import get_empty_parameterset_mark\nfrom .structures import Mark\nfrom .structures import MARK_GEN\nfrom .structures import MarkDecorator\nfrom .structures import MarkGenerator\nfrom .structures import ParameterSet\nfrom _pytest.config import Config\nfrom _pytest.config import ExitCode\nfrom _pytest.config import hookimpl\nfrom _pytest.config import UsageError\nfrom _pytest.config.argparsing import NOT_SET\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.stash import StashKey\n\n\nif TYPE_CHECKING:\n    from _pytest.nodes import Item\n\n\n__all__ = [\n    \"MARK_GEN\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n    \"ParameterSet\",\n    \"get_empty_parameterset_mark\",\n]\n\n\nold_mark_config_key = StashKey[Optional[Config]]()\n\n\ndef param(\n    *values: object,\n    marks: MarkDecorator | Collection[MarkDecorator | Mark] = (),\n    id: str | None = None,\n) -> ParameterSet:\n    \"\"\"Specify a parameter in `pytest.mark.parametrize`_ calls or\n    :ref:`parametrized fixtures <fixture-parametrize-marks>`.\n\n    .. code-block:: python\n\n        @pytest.mark.parametrize(\n            \"test_input,expected\",\n            [\n                (\"3+5\", 8),\n                pytest.param(\"6*9\", 42, marks=pytest.mark.xfail),\n            ],\n        )\n        def test_eval(test_input, expected):\n            assert eval(test_input) == expected\n\n    :param values: Variable args of the values of the parameter set, in order.\n    :param marks: A single mark or a list of marks to be applied to this parameter set.\n    :param id: The id to attribute to this parameter set.\n    \"\"\"\n    return ParameterSet.param(*values, marks=marks, id=id)\n\n\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group._addoption(\n        \"-k\",\n        action=\"store\",\n        dest=\"keyword\",\n        default=\"\",\n        metavar=\"EXPRESSION\",\n        help=\"Only run tests which match the given substring expression. \"\n        \"An expression is a Python evaluable expression \"\n        \"where all names are substring-matched against test names \"\n        \"and their parent classes. Example: -k 'test_method or test_\"\n        \"other' matches all test functions and classes whose name \"\n        \"contains 'test_method' or 'test_other', while -k 'not test_method' \"\n        \"matches those that don't contain 'test_method' in their names. \"\n        \"-k 'not test_method and not test_other' will eliminate the matches. \"\n        \"Additionally keywords are matched to classes and functions \"\n        \"containing extra names in their 'extra_keyword_matches' set, \"\n        \"as well as functions which have names assigned directly to them. \"\n        \"The matching is case-insensitive.\",\n    )\n\n    group._addoption(\n        \"-m\",\n        action=\"store\",\n        dest=\"markexpr\",\n        default=\"\",\n        metavar=\"MARKEXPR\",\n        help=\"Only run tests matching given mark expression. \"\n        \"For example: -m 'mark1 and not mark2'.\",\n    )\n\n    group.addoption(\n        \"--markers\",\n        action=\"store_true\",\n        help=\"show markers (builtin, plugin and per-project ones).\",\n    )\n\n    parser.addini(\"markers\", \"Register new markers for test functions\", \"linelist\")\n    parser.addini(EMPTY_PARAMETERSET_OPTION, \"Default marker for empty parametersets\")\n\n\n@hookimpl(tryfirst=True)\ndef pytest_cmdline_main(config: Config) -> int | ExitCode | None:\n    import _pytest.config\n\n    if config.option.markers:\n        config._do_configure()\n        tw = _pytest.config.create_terminal_writer(config)\n        for line in config.getini(\"markers\"):\n            parts = line.split(\":\", 1)\n            name = parts[0]\n            rest = parts[1] if len(parts) == 2 else \"\"\n            tw.write(f\"@pytest.mark.{name}:\", bold=True)\n            tw.line(rest)\n            tw.line()\n        config._ensure_unconfigure()\n        return 0\n\n    return None\n\n\n@dataclasses.dataclass\nclass KeywordMatcher:\n    \"\"\"A matcher for keywords.\n\n    Given a list of names, matches any substring of one of these names. The\n    string inclusion check is case-insensitive.\n\n    Will match on the name of colitem, including the names of its parents.\n    Only matches names of items which are either a :class:`Class` or a\n    :class:`Function`.\n\n    Additionally, matches on names in the 'extra_keyword_matches' set of\n    any item, as well as names directly assigned to test functions.\n    \"\"\"\n\n    __slots__ = (\"_names\",)\n\n    _names: AbstractSet[str]\n\n    @classmethod\n    def from_item(cls, item: Item) -> KeywordMatcher:\n        mapped_names = set()\n\n        # Add the names of the current item and any parent items,\n        # except the Session and root Directory's which are not\n        # interesting for matching.\n        import pytest\n\n        for node in item.listchain():\n            if isinstance(node, pytest.Session):\n                continue\n            if isinstance(node, pytest.Directory) and isinstance(\n                node.parent, pytest.Session\n            ):\n                continue\n            mapped_names.add(node.name)\n\n        # Add the names added as extra keywords to current or parent items.\n        mapped_names.update(item.listextrakeywords())\n\n        # Add the names attached to the current function through direct assignment.\n        function_obj = getattr(item, \"function\", None)\n        if function_obj:\n            mapped_names.update(function_obj.__dict__)\n\n        # Add the markers to the keywords as we no longer handle them correctly.\n        mapped_names.update(mark.name for mark in item.iter_markers())\n\n        return cls(mapped_names)\n\n    def __call__(self, subname: str, /, **kwargs: str | int | bool | None) -> bool:\n        if kwargs:\n            raise UsageError(\"Keyword expressions do not support call parameters.\")\n        subname = subname.lower()\n        names = (name.lower() for name in self._names)\n\n        for name in names:\n            if subname in name:\n                return True\n        return False\n\n\ndef deselect_by_keyword(items: list[Item], config: Config) -> None:\n    keywordexpr = config.option.keyword.lstrip()\n    if not keywordexpr:\n        return\n\n    expr = _parse_expression(keywordexpr, \"Wrong expression passed to '-k'\")\n\n    remaining = []\n    deselected = []\n    for colitem in items:\n        if not expr.evaluate(KeywordMatcher.from_item(colitem)):\n            deselected.append(colitem)\n        else:\n            remaining.append(colitem)\n\n    if deselected:\n        config.hook.pytest_deselected(items=deselected)\n        items[:] = remaining\n\n\n@dataclasses.dataclass\nclass MarkMatcher:\n    \"\"\"A matcher for markers which are present.\n\n    Tries to match on any marker names, attached to the given colitem.\n    \"\"\"\n\n    __slots__ = (\"own_mark_name_mapping\",)\n\n    own_mark_name_mapping: dict[str, list[Mark]]\n\n    @classmethod\n    def from_markers(cls, markers: Iterable[Mark]) -> MarkMatcher:\n        mark_name_mapping = collections.defaultdict(list)\n        for mark in markers:\n            mark_name_mapping[mark.name].append(mark)\n        return cls(mark_name_mapping)\n\n    def __call__(self, name: str, /, **kwargs: str | int | bool | None) -> bool:\n        if not (matches := self.own_mark_name_mapping.get(name, [])):\n            return False\n\n        for mark in matches:\n            if all(mark.kwargs.get(k, NOT_SET) == v for k, v in kwargs.items()):\n                return True\n\n        return False\n\n\ndef deselect_by_mark(items: list[Item], config: Config) -> None:\n    matchexpr = config.option.markexpr\n    if not matchexpr:\n        return\n\n    expr = _parse_expression(matchexpr, \"Wrong expression passed to '-m'\")\n    remaining: list[Item] = []\n    deselected: list[Item] = []\n    for item in items:\n        if expr.evaluate(MarkMatcher.from_markers(item.iter_markers())):\n            remaining.append(item)\n        else:\n            deselected.append(item)\n    if deselected:\n        config.hook.pytest_deselected(items=deselected)\n        items[:] = remaining\n\n\ndef _parse_expression(expr: str, exc_message: str) -> Expression:\n    try:\n        return Expression.compile(expr)\n    except ParseError as e:\n        raise UsageError(f\"{exc_message}: {expr}: {e}\") from None\n\n\ndef pytest_collection_modifyitems(items: list[Item], config: Config) -> None:\n    deselect_by_keyword(items, config)\n    deselect_by_mark(items, config)\n\n\ndef pytest_configure(config: Config) -> None:\n    config.stash[old_mark_config_key] = MARK_GEN._config\n    MARK_GEN._config = config\n\n    empty_parameterset = config.getini(EMPTY_PARAMETERSET_OPTION)\n\n    if empty_parameterset not in (\"skip\", \"xfail\", \"fail_at_collect\", None, \"\"):\n        raise UsageError(\n            f\"{EMPTY_PARAMETERSET_OPTION!s} must be one of skip, xfail or fail_at_collect\"\n            f\" but it is {empty_parameterset!r}\"\n        )\n\n\ndef pytest_unconfigure(config: Config) -> None:\n    MARK_GEN._config = config.stash.get(old_mark_config_key, None)\n", "src/pytest/__main__.py": "\"\"\"The pytest entry point.\"\"\"\n\nfrom __future__ import annotations\n\nimport pytest\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(pytest.console_main())\n", "src/pytest/__init__.py": "# PYTHON_ARGCOMPLETE_OK\n\"\"\"pytest: unit and functional testing with Python.\"\"\"\n\nfrom __future__ import annotations\n\nfrom _pytest import __version__\nfrom _pytest import version_tuple\nfrom _pytest._code import ExceptionInfo\nfrom _pytest.assertion import register_assert_rewrite\nfrom _pytest.cacheprovider import Cache\nfrom _pytest.capture import CaptureFixture\nfrom _pytest.config import cmdline\nfrom _pytest.config import Config\nfrom _pytest.config import console_main\nfrom _pytest.config import ExitCode\nfrom _pytest.config import hookimpl\nfrom _pytest.config import hookspec\nfrom _pytest.config import main\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.config import UsageError\nfrom _pytest.config.argparsing import OptionGroup\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.debugging import pytestPDB as __pytestPDB\nfrom _pytest.doctest import DoctestItem\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureDef\nfrom _pytest.fixtures import FixtureLookupError\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.fixtures import yield_fixture\nfrom _pytest.freeze_support import freeze_includes\nfrom _pytest.legacypath import TempdirFactory\nfrom _pytest.legacypath import Testdir\nfrom _pytest.logging import LogCaptureFixture\nfrom _pytest.main import Dir\nfrom _pytest.main import Session\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Directory\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import HookRecorder\nfrom _pytest.pytester import LineMatcher\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import RecordedHookCall\nfrom _pytest.pytester import RunResult\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.reports import CollectReport\nfrom _pytest.reports import TestReport\nfrom _pytest.runner import CallInfo\nfrom _pytest.stash import Stash\nfrom _pytest.stash import StashKey\nfrom _pytest.terminal import TestShortLogReport\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestExperimentalApiWarning\nfrom _pytest.warning_types import PytestRemovedIn9Warning\nfrom _pytest.warning_types import PytestReturnNotNoneWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\n\nset_trace = __pytestPDB.set_trace\n\n\n__all__ = [\n    \"__version__\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"Collector\",\n    \"CollectReport\",\n    \"Config\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"Dir\",\n    \"Directory\",\n    \"DoctestItem\",\n    \"exit\",\n    \"ExceptionInfo\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureDef\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"HookRecorder\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Item\",\n    \"LineMatcher\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n    \"Metafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"OptionGroup\",\n    \"Package\",\n    \"param\",\n    \"Parser\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"PytestRemovedIn9Warning\",\n    \"PytestReturnNotNoneWarning\",\n    \"Pytester\",\n    \"PytestPluginManager\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"RecordedHookCall\",\n    \"register_assert_rewrite\",\n    \"RunResult\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"Stash\",\n    \"StashKey\",\n    \"version_tuple\",\n    \"TempdirFactory\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TestReport\",\n    \"TestShortLogReport\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n"}