{"tests/test_manifest.py": "import os\nimport json\nimport pytest\nfrom jsonschema import validate\n\ndef test_validate_manifest_against_local_schema():\n    \"\"\"Ensures that the manifest matches the local schema, for situations where the schema is being changed.\"\"\"\n    json_relative: str = '../sherlock/resources/data.json'\n    schema_relative: str = '../sherlock/resources/data.schema.json'\n    \n    json_path: str = os.path.join(os.path.dirname(__file__), json_relative)\n    schema_path: str = os.path.join(os.path.dirname(__file__), schema_relative)\n\n    with open(json_path, 'r') as f:\n        jsondat = json.load(f)\n    with open(schema_path, 'r') as f:\n        schemadat = json.load(f)\n\n    validate(instance=jsondat, schema=schemadat)\n\n\n@pytest.mark.online\ndef test_validate_manifest_against_remote_schema(remote_schema):\n    \"\"\"Ensures that the manifest matches the remote schema, so as to not unexpectedly break clients.\"\"\"\n    json_relative: str = '../sherlock/resources/data.json'\n    json_path: str = os.path.join(os.path.dirname(__file__), json_relative)\n\n    with open(json_path, 'r') as f:\n        jsondat = json.load(f)\n\n    validate(instance=jsondat, schema=remote_schema)\n\n# Ensure that the expected values are beind returned by the site list\n@pytest.mark.parametrize(\"target_name,target_expected_err_type\", [\n    ('GitHub', 'status_code'),\n    ('GitLab', 'message'),\n])\ndef test_site_list_iterability (sites_info, target_name, target_expected_err_type):\n    assert sites_info[target_name]['errorType'] == target_expected_err_type\n", "tests/test_ux.py": "import pytest\nfrom sherlock import sherlock\nfrom sherlock_interactives import Interactives\nfrom sherlock_interactives import InteractivesSubprocessError\n\ndef test_remove_nsfw(sites_obj):\n    nsfw_target: str = 'Pornhub'\n    assert nsfw_target in {site.name: site.information for site in sites_obj}\n    sites_obj.remove_nsfw_sites()\n    assert nsfw_target not in {site.name: site.information for site in sites_obj}\n\n\n# Parametrized sites should *not* include Motherless, which is acting as the control\n@pytest.mark.parametrize('nsfwsites', [\n    ['Pornhub'],\n    ['Pornhub', 'Xvideos'],\n])\ndef test_nsfw_explicit_selection(sites_obj, nsfwsites):\n    for site in nsfwsites:\n        assert site in {site.name: site.information for site in sites_obj}\n    sites_obj.remove_nsfw_sites(do_not_remove=nsfwsites)\n    for site in nsfwsites:\n        assert site in {site.name: site.information for site in sites_obj}\n        assert 'Motherless' not in {site.name: site.information for site in sites_obj}\n\ndef test_wildcard_username_expansion():\n    assert sherlock.check_for_parameter('test{?}test') is True\n    assert sherlock.check_for_parameter('test{.}test') is False\n    assert sherlock.check_for_parameter('test{}test') is False\n    assert sherlock.check_for_parameter('testtest') is False\n    assert sherlock.check_for_parameter('test{?test') is False\n    assert sherlock.check_for_parameter('test?}test') is False\n    assert sherlock.multiple_usernames('test{?}test') == [\"test_test\" , \"test-test\" , \"test.test\"]\n\n\n@pytest.mark.parametrize('cliargs', [\n    '',\n    '--site urghrtuight --egiotr',\n    '--',\n])\ndef test_no_usernames_provided(cliargs):\n    with pytest.raises(InteractivesSubprocessError, match=r\"error: the following arguments are required: USERNAMES\"):\n        Interactives.run_cli(cliargs)\n", "tests/test_version.py": "import os\nfrom sherlock_interactives import Interactives\nimport sherlock\n\ndef test_versioning() -> None:\n    # Ensure __version__ matches version presented to the user\n    assert sherlock.__version__ in Interactives.run_cli(\"--version\")\n    # Ensure __init__ is single source of truth for __version__ in package\n    # Temporarily allows sherlock.py so as to not trigger early upgrades\n    found:list = Interactives.walk_sherlock_for_files_with(r'__version__ *= *')\n    expected:list = [\n        # Normalization is REQUIRED for Windows ( / vs \\ )\n        os.path.normpath(\"sherlock/__init__.py\"),\n        os.path.normpath(\"sherlock/sherlock.py\"),\n    ]\n    # Sorting is REQUIRED for Mac\n    assert sorted(found) == sorted(expected)\n", "tests/test_probes.py": "import pytest\nimport random\nimport string\nimport re\nfrom sherlock.sherlock import sherlock\nfrom sherlock.notify import QueryNotify\nfrom sherlock.result import QueryStatus\n#from sherlock_interactives import Interactives\n\n\ndef simple_query(sites_info: dict, site: str, username: str) -> QueryStatus:\n    query_notify = QueryNotify()\n    site_data: dict = {}\n    site_data[site] = sites_info[site]\n    return sherlock(\n        username=username,\n        site_data=site_data,\n        query_notify=query_notify,\n    )[site]['status'].status\n\n\n@pytest.mark.online\nclass TestLiveTargets:\n    \"\"\"Actively test probes against live and trusted targets\"\"\"\n    # Known positives should only use sites trusted to be reliable and unchanging\n    @pytest.mark.parametrize('site,username',[\n        ('GitLab', 'ppfeister'),\n        ('AllMyLinks', 'blue'),\n    ])\n    def test_known_positives_via_message(self, sites_info, site, username):\n        assert simple_query(sites_info=sites_info, site=site, username=username) is QueryStatus.CLAIMED\n\n\n    # Known positives should only use sites trusted to be reliable and unchanging\n    @pytest.mark.parametrize('site,username',[\n        ('GitHub', 'ppfeister'),\n        ('GitHub', 'sherlock-project'),\n        ('Docker Hub', 'ppfeister'),\n        ('Docker Hub', 'sherlock'),\n    ])\n    def test_known_positives_via_status_code(self, sites_info, site, username):\n        assert simple_query(sites_info=sites_info, site=site, username=username) is QueryStatus.CLAIMED\n\n\n    # Known positives should only use sites trusted to be reliable and unchanging\n    @pytest.mark.parametrize('site,username',[\n        ('BodyBuilding', 'blue'),\n        ('devRant', 'blue'),\n    ])\n    def test_known_positives_via_response_url(self, sites_info, site, username):\n        assert simple_query(sites_info=sites_info, site=site, username=username) is QueryStatus.CLAIMED\n\n\n    # Randomly generate usernames of high length and test for positive availability\n    # Randomly generated usernames should be simple alnum for simplicity and high\n    # compatibility. Several attempts may be made ~just in case~ a real username is\n    # generated.\n    @pytest.mark.parametrize('site,random_len',[\n        ('GitLab', 255),\n        ('Codecademy', 30)\n    ])\n    def test_likely_negatives_via_message(self, sites_info, site, random_len):\n        num_attempts: int = 3\n        attempted_usernames: list[str] = []\n        status: QueryStatus = QueryStatus.CLAIMED\n        for i in range(num_attempts):\n            acceptable_types = string.ascii_letters + string.digits\n            random_handle = ''.join(random.choice(acceptable_types) for _ in range (random_len))\n            attempted_usernames.append(random_handle)\n            status = simple_query(sites_info=sites_info, site=site, username=random_handle)\n            if status is QueryStatus.AVAILABLE:\n                break\n        assert status is QueryStatus.AVAILABLE, f\"Could not validate available username after {num_attempts} attempts with randomly generated usernames {attempted_usernames}.\"\n\n\n    # Randomly generate usernames of high length and test for positive availability\n    # Randomly generated usernames should be simple alnum for simplicity and high\n    # compatibility. Several attempts may be made ~just in case~ a real username is\n    # generated.\n    @pytest.mark.parametrize('site,random_len',[\n        ('GitHub', 39),\n        ('Docker Hub', 30)\n    ])\n    def test_likely_negatives_via_status_code(self, sites_info, site, random_len):\n        num_attempts: int = 3\n        attempted_usernames: list[str] = []\n        status: QueryStatus = QueryStatus.CLAIMED\n        for i in range(num_attempts):\n            acceptable_types = string.ascii_letters + string.digits\n            random_handle = ''.join(random.choice(acceptable_types) for _ in range (random_len))\n            attempted_usernames.append(random_handle)\n            status = simple_query(sites_info=sites_info, site=site, username=random_handle)\n            if status is QueryStatus.AVAILABLE:\n                break\n        assert status is QueryStatus.AVAILABLE, f\"Could not validate available username after {num_attempts} attempts with randomly generated usernames {attempted_usernames}.\"\n\n\ndef test_username_illegal_regex(sites_info):\n    site: str = 'BitBucket'\n    invalid_handle: str = '*#$Y&*JRE'\n    pattern = re.compile(sites_info[site]['regexCheck'])\n    # Ensure that the username actually fails regex before testing sherlock\n    assert pattern.match(invalid_handle) is None\n    assert simple_query(sites_info=sites_info, site=site, username=invalid_handle) is QueryStatus.ILLEGAL\n\n", "tests/conftest.py": "import os\nimport json\nimport urllib\nimport pytest\nfrom sherlock.sites import SitesInformation\n\n@pytest.fixture()\ndef sites_obj():\n    sites_obj = SitesInformation(data_file_path=os.path.join(os.path.dirname(__file__), \"../sherlock/resources/data.json\"))\n    yield sites_obj\n\n@pytest.fixture(scope=\"session\")\ndef sites_info():\n    sites_obj = SitesInformation(data_file_path=os.path.join(os.path.dirname(__file__), \"../sherlock/resources/data.json\"))\n    sites_iterable = {site.name: site.information for site in sites_obj}\n    yield sites_iterable\n\n@pytest.fixture(scope=\"session\")\ndef remote_schema():\n    schema_url: str = 'https://raw.githubusercontent.com/sherlock-project/sherlock/master/sherlock/resources/data.schema.json'\n    with urllib.request.urlopen(schema_url) as remoteschema:\n        schemadat = json.load(remoteschema)\n    yield schemadat\n", "tests/few_test_basic.py": "import sherlock\n\n#from sherlock.sites import SitesInformation\n#local_manifest = data_file_path=os.path.join(os.path.dirname(__file__), \"../sherlock/resources/data.json\")\n\ndef test_username_via_message():\n    sherlock.__main__(\"--version\")\n", "tests/sherlock_interactives.py": "import os\nimport platform\nimport re\nimport subprocess\n\nclass Interactives:\n    def run_cli(args:str = \"\") -> str:\n        \"\"\"Pass arguments to Sherlock as a normal user on the command line\"\"\"\n        # Adapt for platform differences (Windows likes to be special)\n        if platform.system == \"Windows\":\n            command:str = f\"py -m sherlock {args}\"\n        else:\n            command:str = f\"sherlock {args}\"\n\n        proc_out:str = \"\"\n        try:\n            proc_out = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)\n            return proc_out.decode()\n        except subprocess.CalledProcessError as e:\n            raise InteractivesSubprocessError(e.output.decode())\n\n\n    # -> list[str] is prefered, but will require deprecation of support for Python 3.8\n    def walk_sherlock_for_files_with(pattern: str) -> list:\n        \"\"\"Check all files within the Sherlock package for matching patterns\"\"\"\n        pattern:re.Pattern = re.compile(pattern)\n        matching_files:list[str] = []\n        for root, dirs, files in os.walk(\"sherlock\"):\n            for file in files:\n                file_path = os.path.join(root,file)\n                if \"__pycache__\" in file_path:\n                    continue\n                with open(file_path, 'r', errors='ignore') as f:\n                    if pattern.search(f.read()):\n                        matching_files.append(file_path)\n        return matching_files\n\nclass InteractivesSubprocessError(Exception):\n    pass\n", "sherlock/notify.py": "\"\"\"Sherlock Notify Module\n\nThis module defines the objects for notifying the caller about the\nresults of queries.\n\"\"\"\nfrom sherlock.result import QueryStatus\nfrom colorama import Fore, Style\nimport webbrowser\n\n# Global variable to count the number of results.\nglobvar = 0\n\n\nclass QueryNotify:\n    \"\"\"Query Notify Object.\n\n    Base class that describes methods available to notify the results of\n    a query.\n    It is intended that other classes inherit from this base class and\n    override the methods to implement specific functionality.\n    \"\"\"\n\n    def __init__(self, result=None):\n        \"\"\"Create Query Notify Object.\n\n        Contains information about a specific method of notifying the results\n        of a query.\n\n        Keyword Arguments:\n        self                   -- This object.\n        result                 -- Object of type QueryResult() containing\n                                  results for this query.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        self.result = result\n\n        # return\n\n    def start(self, message=None):\n        \"\"\"Notify Start.\n\n        Notify method for start of query.  This method will be called before\n        any queries are performed.  This method will typically be\n        overridden by higher level classes that will inherit from it.\n\n        Keyword Arguments:\n        self                   -- This object.\n        message                -- Object that is used to give context to start\n                                  of query.\n                                  Default is None.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        # return\n\n    def update(self, result):\n        \"\"\"Notify Update.\n\n        Notify method for query result.  This method will typically be\n        overridden by higher level classes that will inherit from it.\n\n        Keyword Arguments:\n        self                   -- This object.\n        result                 -- Object of type QueryResult() containing\n                                  results for this query.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        self.result = result\n\n        # return\n\n    def finish(self, message=None):\n        \"\"\"Notify Finish.\n\n        Notify method for finish of query.  This method will be called after\n        all queries have been performed.  This method will typically be\n        overridden by higher level classes that will inherit from it.\n\n        Keyword Arguments:\n        self                   -- This object.\n        message                -- Object that is used to give context to start\n                                  of query.\n                                  Default is None.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        # return\n\n    def __str__(self):\n        \"\"\"Convert Object To String.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        Nicely formatted string to get information about this object.\n        \"\"\"\n        return str(self.result)\n\n\nclass QueryNotifyPrint(QueryNotify):\n    \"\"\"Query Notify Print Object.\n\n    Query notify class that prints results.\n    \"\"\"\n\n    def __init__(self, result=None, verbose=False, print_all=False, browse=False):\n        \"\"\"Create Query Notify Print Object.\n\n        Contains information about a specific method of notifying the results\n        of a query.\n\n        Keyword Arguments:\n        self                   -- This object.\n        result                 -- Object of type QueryResult() containing\n                                  results for this query.\n        verbose                -- Boolean indicating whether to give verbose output.\n        print_all              -- Boolean indicating whether to only print all sites, including not found.\n        browse                 -- Boolean indicating whether to open found sites in a web browser.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        super().__init__(result)\n        self.verbose = verbose\n        self.print_all = print_all\n        self.browse = browse\n\n        return\n\n    def start(self, message):\n        \"\"\"Notify Start.\n\n        Will print the title to the standard output.\n\n        Keyword Arguments:\n        self                   -- This object.\n        message                -- String containing username that the series\n                                  of queries are about.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        title = \"Checking username\"\n\n        print(Style.BRIGHT + Fore.GREEN + \"[\" +\n              Fore.YELLOW + \"*\" +\n              Fore.GREEN + f\"] {title}\" +\n              Fore.WHITE + f\" {message}\" +\n              Fore.GREEN + \" on:\")\n        # An empty line between first line and the result(more clear output)\n        print('\\r')\n\n        return\n\n    def countResults(self):\n        \"\"\"This function counts the number of results. Every time the function is called,\n        the number of results is increasing.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        The number of results by the time we call the function.\n        \"\"\"\n        global globvar\n        globvar += 1\n        return globvar\n\n    def update(self, result):\n        \"\"\"Notify Update.\n\n        Will print the query result to the standard output.\n\n        Keyword Arguments:\n        self                   -- This object.\n        result                 -- Object of type QueryResult() containing\n                                  results for this query.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n        self.result = result\n\n        response_time_text = \"\"\n        if self.result.query_time is not None and self.verbose is True:\n            response_time_text = f\" [{round(self.result.query_time * 1000)}ms]\"\n\n        # Output to the terminal is desired.\n        if result.status == QueryStatus.CLAIMED:\n            self.countResults()\n            print(Style.BRIGHT + Fore.WHITE + \"[\" +\n                  Fore.GREEN + \"+\" +\n                  Fore.WHITE + \"]\" +\n                  response_time_text +\n                  Fore.GREEN +\n                  f\" {self.result.site_name}: \" +\n                  Style.RESET_ALL +\n                  f\"{self.result.site_url_user}\")\n            if self.browse:\n                webbrowser.open(self.result.site_url_user, 2)\n\n        elif result.status == QueryStatus.AVAILABLE:\n            if self.print_all:\n                print(Style.BRIGHT + Fore.WHITE + \"[\" +\n                      Fore.RED + \"-\" +\n                      Fore.WHITE + \"]\" +\n                      response_time_text +\n                      Fore.GREEN + f\" {self.result.site_name}:\" +\n                      Fore.YELLOW + \" Not Found!\")\n\n        elif result.status == QueryStatus.UNKNOWN:\n            if self.print_all:\n                print(Style.BRIGHT + Fore.WHITE + \"[\" +\n                      Fore.RED + \"-\" +\n                      Fore.WHITE + \"]\" +\n                      Fore.GREEN + f\" {self.result.site_name}:\" +\n                      Fore.RED + f\" {self.result.context}\" +\n                      Fore.YELLOW + \" \")\n\n        elif result.status == QueryStatus.ILLEGAL:\n            if self.print_all:\n                msg = \"Illegal Username Format For This Site!\"\n                print(Style.BRIGHT + Fore.WHITE + \"[\" +\n                      Fore.RED + \"-\" +\n                      Fore.WHITE + \"]\" +\n                      Fore.GREEN + f\" {self.result.site_name}:\" +\n                      Fore.YELLOW + f\" {msg}\")\n                \n        elif result.status == QueryStatus.WAF:\n            if self.print_all:\n                print(Style.BRIGHT + Fore.WHITE + \"[\" +\n                      Fore.RED + \"-\" +\n                      Fore.WHITE + \"]\" +\n                      Fore.GREEN + f\" {self.result.site_name}:\" +\n                      Fore.RED + \" Blocked by bot detection\" +\n                      Fore.YELLOW + \" (proxy may help)\")\n\n        else:\n            # It should be impossible to ever get here...\n            raise ValueError(\n                f\"Unknown Query Status '{result.status}' for site '{self.result.site_name}'\"\n            )\n\n        return\n\n    def finish(self, message=\"The processing has been finished.\"):\n        \"\"\"Notify Start.\n        Will print the last line to the standard output.\n        Keyword Arguments:\n        self                   -- This object.\n        message                -- The 2 last phrases.\n        Return Value:\n        Nothing.\n        \"\"\"\n        NumberOfResults = self.countResults() - 1\n\n        print(Style.BRIGHT + Fore.GREEN + \"[\" +\n              Fore.YELLOW + \"*\" +\n              Fore.GREEN + \"] Search completed with\" +\n              Fore.WHITE + f\" {NumberOfResults} \" +\n              Fore.GREEN + \"results\" + Style.RESET_ALL\n              )\n\n    def __str__(self):\n        \"\"\"Convert Object To String.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        Nicely formatted string to get information about this object.\n        \"\"\"\n        return str(self.result)\n", "sherlock/result.py": "\"\"\"Sherlock Result Module\n\nThis module defines various objects for recording the results of queries.\n\"\"\"\nfrom enum import Enum\n\n\nclass QueryStatus(Enum):\n    \"\"\"Query Status Enumeration.\n\n    Describes status of query about a given username.\n    \"\"\"\n    CLAIMED   = \"Claimed\"   # Username Detected\n    AVAILABLE = \"Available\" # Username Not Detected\n    UNKNOWN   = \"Unknown\"   # Error Occurred While Trying To Detect Username\n    ILLEGAL   = \"Illegal\"   # Username Not Allowable For This Site\n    WAF       = \"WAF\"       # Request blocked by WAF (i.e. Cloudflare)\n\n    def __str__(self):\n        \"\"\"Convert Object To String.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        Nicely formatted string to get information about this object.\n        \"\"\"\n        return self.value\n\nclass QueryResult():\n    \"\"\"Query Result Object.\n\n    Describes result of query about a given username.\n    \"\"\"\n    def __init__(self, username, site_name, site_url_user, status,\n                 query_time=None, context=None):\n        \"\"\"Create Query Result Object.\n\n        Contains information about a specific method of detecting usernames on\n        a given type of web sites.\n\n        Keyword Arguments:\n        self                   -- This object.\n        username               -- String indicating username that query result\n                                  was about.\n        site_name              -- String which identifies site.\n        site_url_user          -- String containing URL for username on site.\n                                  NOTE:  The site may or may not exist:  this\n                                         just indicates what the name would\n                                         be, if it existed.\n        status                 -- Enumeration of type QueryStatus() indicating\n                                  the status of the query.\n        query_time             -- Time (in seconds) required to perform query.\n                                  Default of None.\n        context                -- String indicating any additional context\n                                  about the query.  For example, if there was\n                                  an error, this might indicate the type of\n                                  error that occurred.\n                                  Default of None.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        self.username      = username\n        self.site_name     = site_name\n        self.site_url_user = site_url_user\n        self.status        = status\n        self.query_time    = query_time\n        self.context       = context\n\n        return\n\n    def __str__(self):\n        \"\"\"Convert Object To String.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        Nicely formatted string to get information about this object.\n        \"\"\"\n        status = str(self.status)\n        if self.context is not None:\n            # There is extra context information available about the results.\n            # Append it to the normal response text.\n            status += f\" ({self.context})\"\n\n        return status\n", "sherlock/sherlock.py": "#! /usr/bin/env python3\n\n\"\"\"\nSherlock: Find Usernames Across Social Networks Module\n\nThis module contains the main logic to search for usernames at social\nnetworks.\n\"\"\"\n\nimport csv\nimport signal\nimport pandas as pd\nimport os\nimport re\nimport sys\nfrom argparse import ArgumentParser, RawDescriptionHelpFormatter\nfrom time import monotonic\n\nimport requests\n\n# Removing __version__ here will trigger update message for users\n# Do not remove until ready to trigger that message\n# When removed, also remove all the noqa: E402 comments for linting\n__version__ = \"0.14.4\"\ndel __version__\n\nfrom .__init__ import ( # noqa: E402\n    __longname__,\n    __version__\n)\n\nfrom requests_futures.sessions import FuturesSession    # noqa: E402\nfrom torrequest import TorRequest                       # noqa: E402\nfrom sherlock.result import QueryStatus                 # noqa: E402\nfrom sherlock.result import QueryResult                 # noqa: E402\nfrom sherlock.notify import QueryNotify                 # noqa: E402\nfrom sherlock.notify import QueryNotifyPrint            # noqa: E402\nfrom sherlock.sites import SitesInformation             # noqa: E402\nfrom colorama import init                               # noqa: E402\nfrom argparse import ArgumentTypeError                  # noqa: E402\n\n\nclass SherlockFuturesSession(FuturesSession):\n    def request(self, method, url, hooks=None, *args, **kwargs):\n        \"\"\"Request URL.\n\n        This extends the FuturesSession request method to calculate a response\n        time metric to each request.\n\n        It is taken (almost) directly from the following Stack Overflow answer:\n        https://github.com/ross/requests-futures#working-in-the-background\n\n        Keyword Arguments:\n        self                   -- This object.\n        method                 -- String containing method desired for request.\n        url                    -- String containing URL for request.\n        hooks                  -- Dictionary containing hooks to execute after\n                                  request finishes.\n        args                   -- Arguments.\n        kwargs                 -- Keyword arguments.\n\n        Return Value:\n        Request object.\n        \"\"\"\n        # Record the start time for the request.\n        if hooks is None:\n            hooks = {}\n        start = monotonic()\n\n        def response_time(resp, *args, **kwargs):\n            \"\"\"Response Time Hook.\n\n            Keyword Arguments:\n            resp                   -- Response object.\n            args                   -- Arguments.\n            kwargs                 -- Keyword arguments.\n\n            Return Value:\n            Nothing.\n            \"\"\"\n            resp.elapsed = monotonic() - start\n\n            return\n\n        # Install hook to execute when response completes.\n        # Make sure that the time measurement hook is first, so we will not\n        # track any later hook's execution time.\n        try:\n            if isinstance(hooks[\"response\"], list):\n                hooks[\"response\"].insert(0, response_time)\n            elif isinstance(hooks[\"response\"], tuple):\n                # Convert tuple to list and insert time measurement hook first.\n                hooks[\"response\"] = list(hooks[\"response\"])\n                hooks[\"response\"].insert(0, response_time)\n            else:\n                # Must have previously contained a single hook function,\n                # so convert to list.\n                hooks[\"response\"] = [response_time, hooks[\"response\"]]\n        except KeyError:\n            # No response hook was already defined, so install it ourselves.\n            hooks[\"response\"] = [response_time]\n\n        return super(SherlockFuturesSession, self).request(\n            method, url, hooks=hooks, *args, **kwargs\n        )\n\n\ndef get_response(request_future, error_type, social_network):\n    # Default for Response object if some failure occurs.\n    response = None\n\n    error_context = \"General Unknown Error\"\n    exception_text = None\n    try:\n        response = request_future.result()\n        if response.status_code:\n            # Status code exists in response object\n            error_context = None\n    except requests.exceptions.HTTPError as errh:\n        error_context = \"HTTP Error\"\n        exception_text = str(errh)\n    except requests.exceptions.ProxyError as errp:\n        error_context = \"Proxy Error\"\n        exception_text = str(errp)\n    except requests.exceptions.ConnectionError as errc:\n        error_context = \"Error Connecting\"\n        exception_text = str(errc)\n    except requests.exceptions.Timeout as errt:\n        error_context = \"Timeout Error\"\n        exception_text = str(errt)\n    except requests.exceptions.RequestException as err:\n        error_context = \"Unknown Error\"\n        exception_text = str(err)\n\n    return response, error_context, exception_text\n\n\ndef interpolate_string(input_object, username):\n    if isinstance(input_object, str):\n        return input_object.replace(\"{}\", username)\n    elif isinstance(input_object, dict):\n        return {k: interpolate_string(v, username) for k, v in input_object.items()}\n    elif isinstance(input_object, list):\n        return [interpolate_string(i, username) for i in input_object]\n    return input_object\n\n\ndef check_for_parameter(username):\n    \"\"\"checks if {?} exists in the username\n    if exist it means that sherlock is looking for more multiple username\"\"\"\n    return \"{?}\" in username\n\n\nchecksymbols = [\"_\", \"-\", \".\"]\n\n\ndef multiple_usernames(username):\n    \"\"\"replace the parameter with with symbols and return a list of usernames\"\"\"\n    allUsernames = []\n    for i in checksymbols:\n        allUsernames.append(username.replace(\"{?}\", i))\n    return allUsernames\n\n\ndef sherlock(\n    username,\n    site_data,\n    query_notify: QueryNotify,\n    tor: bool = False,\n    unique_tor: bool = False,\n    proxy=None,\n    timeout=60,\n):\n    \"\"\"Run Sherlock Analysis.\n\n    Checks for existence of username on various social media sites.\n\n    Keyword Arguments:\n    username               -- String indicating username that report\n                              should be created against.\n    site_data              -- Dictionary containing all of the site data.\n    query_notify           -- Object with base type of QueryNotify().\n                              This will be used to notify the caller about\n                              query results.\n    tor                    -- Boolean indicating whether to use a tor circuit for the requests.\n    unique_tor             -- Boolean indicating whether to use a new tor circuit for each request.\n    proxy                  -- String indicating the proxy URL\n    timeout                -- Time in seconds to wait before timing out request.\n                              Default is 60 seconds.\n\n    Return Value:\n    Dictionary containing results from report. Key of dictionary is the name\n    of the social network site, and the value is another dictionary with\n    the following keys:\n        url_main:      URL of main site.\n        url_user:      URL of user on site (if account exists).\n        status:        QueryResult() object indicating results of test for\n                       account existence.\n        http_status:   HTTP status code of query which checked for existence on\n                       site.\n        response_text: Text that came back from request.  May be None if\n                       there was an HTTP error when checking for existence.\n    \"\"\"\n\n    # Notify caller that we are starting the query.\n    query_notify.start(username)\n    # Create session based on request methodology\n    if tor or unique_tor:\n        # Requests using Tor obfuscation\n        try:\n            underlying_request = TorRequest()\n        except OSError:\n            print(\"Tor not found in system path. Unable to continue.\\n\")\n            sys.exit(query_notify.finish())\n\n        underlying_session = underlying_request.session\n    else:\n        # Normal requests\n        underlying_session = requests.session()\n        underlying_request = requests.Request()\n\n    # Limit number of workers to 20.\n    # This is probably vastly overkill.\n    if len(site_data) >= 20:\n        max_workers = 20\n    else:\n        max_workers = len(site_data)\n\n    # Create multi-threaded session for all requests.\n    session = SherlockFuturesSession(\n        max_workers=max_workers, session=underlying_session\n    )\n\n    # Results from analysis of all sites\n    results_total = {}\n\n    # First create futures for all requests. This allows for the requests to run in parallel\n    for social_network, net_info in site_data.items():\n        # Results from analysis of this specific site\n        results_site = {\"url_main\": net_info.get(\"urlMain\")}\n\n        # Record URL of main site\n\n        # A user agent is needed because some sites don't return the correct\n        # information since they think that we are bots (Which we actually are...)\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/116.0\",\n        }\n\n        if \"headers\" in net_info:\n            # Override/append any extra headers required by a given site.\n            headers.update(net_info[\"headers\"])\n\n        # URL of user on site (if it exists)\n        url = interpolate_string(net_info[\"url\"], username.replace(' ', '%20'))\n\n        # Don't make request if username is invalid for the site\n        regex_check = net_info.get(\"regexCheck\")\n        if regex_check and re.search(regex_check, username) is None:\n            # No need to do the check at the site: this username is not allowed.\n            results_site[\"status\"] = QueryResult(\n                username, social_network, url, QueryStatus.ILLEGAL\n            )\n            results_site[\"url_user\"] = \"\"\n            results_site[\"http_status\"] = \"\"\n            results_site[\"response_text\"] = \"\"\n            query_notify.update(results_site[\"status\"])\n        else:\n            # URL of user on site (if it exists)\n            results_site[\"url_user\"] = url\n            url_probe = net_info.get(\"urlProbe\")\n            request_method = net_info.get(\"request_method\")\n            request_payload = net_info.get(\"request_payload\")\n            request = None\n\n            if request_method is not None:\n                if request_method == \"GET\":\n                    request = session.get\n                elif request_method == \"HEAD\":\n                    request = session.head\n                elif request_method == \"POST\":\n                    request = session.post\n                elif request_method == \"PUT\":\n                    request = session.put\n                else:\n                    raise RuntimeError(f\"Unsupported request_method for {url}\")\n\n            if request_payload is not None:\n                request_payload = interpolate_string(request_payload, username)\n\n            if url_probe is None:\n                # Probe URL is normal one seen by people out on the web.\n                url_probe = url\n            else:\n                # There is a special URL for probing existence separate\n                # from where the user profile normally can be found.\n                url_probe = interpolate_string(url_probe, username)\n\n            if request is None:\n                if net_info[\"errorType\"] == \"status_code\":\n                    # In most cases when we are detecting by status code,\n                    # it is not necessary to get the entire body:  we can\n                    # detect fine with just the HEAD response.\n                    request = session.head\n                else:\n                    # Either this detect method needs the content associated\n                    # with the GET response, or this specific website will\n                    # not respond properly unless we request the whole page.\n                    request = session.get\n\n            if net_info[\"errorType\"] == \"response_url\":\n                # Site forwards request to a different URL if username not\n                # found.  Disallow the redirect so we can capture the\n                # http status from the original URL request.\n                allow_redirects = False\n            else:\n                # Allow whatever redirect that the site wants to do.\n                # The final result of the request will be what is available.\n                allow_redirects = True\n\n            # This future starts running the request in a new thread, doesn't block the main thread\n            if proxy is not None:\n                proxies = {\"http\": proxy, \"https\": proxy}\n                future = request(\n                    url=url_probe,\n                    headers=headers,\n                    proxies=proxies,\n                    allow_redirects=allow_redirects,\n                    timeout=timeout,\n                    json=request_payload,\n                )\n            else:\n                future = request(\n                    url=url_probe,\n                    headers=headers,\n                    allow_redirects=allow_redirects,\n                    timeout=timeout,\n                    json=request_payload,\n                )\n\n            # Store future in data for access later\n            net_info[\"request_future\"] = future\n\n            # Reset identify for tor (if needed)\n            if unique_tor:\n                underlying_request.reset_identity()\n\n        # Add this site's results into final dictionary with all the other results.\n        results_total[social_network] = results_site\n\n    # Open the file containing account links\n    # Core logic: If tor requests, make them here. If multi-threaded requests, wait for responses\n    for social_network, net_info in site_data.items():\n        # Retrieve results again\n        results_site = results_total.get(social_network)\n\n        # Retrieve other site information again\n        url = results_site.get(\"url_user\")\n        status = results_site.get(\"status\")\n        if status is not None:\n            # We have already determined the user doesn't exist here\n            continue\n\n        # Get the expected error type\n        error_type = net_info[\"errorType\"]\n\n        # Retrieve future and ensure it has finished\n        future = net_info[\"request_future\"]\n        r, error_text, exception_text = get_response(\n            request_future=future, error_type=error_type, social_network=social_network\n        )\n\n        # Get response time for response of our request.\n        try:\n            response_time = r.elapsed\n        except AttributeError:\n            response_time = None\n\n        # Attempt to get request information\n        try:\n            http_status = r.status_code\n        except Exception:\n            http_status = \"?\"\n        try:\n            response_text = r.text.encode(r.encoding or \"UTF-8\")\n        except Exception:\n            response_text = \"\"\n\n        query_status = QueryStatus.UNKNOWN\n        error_context = None\n\n        # As WAFs advance and evolve, they will occasionally block Sherlock and\n        # lead to false positives and negatives. Fingerprints should be added\n        # here to filter results that fail to bypass WAFs. Fingerprints should\n        # be highly targetted. Comment at the end of each fingerprint to\n        # indicate target and date fingerprinted.\n        WAFHitMsgs = [\n            '.loading-spinner{visibility:hidden}body.no-js .challenge-running{display:none}body.dark{background-color:#222;color:#d9d9d9}body.dark a{color:#fff}body.dark a:hover{color:#ee730a;text-decoration:underline}body.dark .lds-ring div{border-color:#999 transparent transparent}body.dark .font-red{color:#b20f03}body.dark', # 2024-05-13 Cloudflare\n            '{return l.onPageView}}),Object.defineProperty(r,\"perimeterxIdentifiers\",{enumerable:' # 2024-04-09 PerimeterX / Human Security\n        ]\n\n        if error_text is not None:\n            error_context = error_text\n\n        elif any(hitMsg in r.text for hitMsg in WAFHitMsgs):\n            query_status = QueryStatus.WAF\n\n        elif error_type == \"message\":\n            # error_flag True denotes no error found in the HTML\n            # error_flag False denotes error found in the HTML\n            error_flag = True\n            errors = net_info.get(\"errorMsg\")\n            # errors will hold the error message\n            # it can be string or list\n            # by isinstance method we can detect that\n            # and handle the case for strings as normal procedure\n            # and if its list we can iterate the errors\n            if isinstance(errors, str):\n                # Checks if the error message is in the HTML\n                # if error is present we will set flag to False\n                if errors in r.text:\n                    error_flag = False\n            else:\n                # If it's list, it will iterate all the error message\n                for error in errors:\n                    if error in r.text:\n                        error_flag = False\n                        break\n            if error_flag:\n                query_status = QueryStatus.CLAIMED\n            else:\n                query_status = QueryStatus.AVAILABLE\n        elif error_type == \"status_code\":\n            error_codes = net_info.get(\"errorCode\")\n            query_status = QueryStatus.CLAIMED\n\n            # Type consistency, allowing for both singlets and lists in manifest\n            if isinstance(error_codes, int):\n                error_codes = [error_codes]\n\n            if error_codes is not None and r.status_code in error_codes:\n                query_status = QueryStatus.AVAILABLE\n            elif r.status_code >= 300 or r.status_code < 200:\n                query_status = QueryStatus.AVAILABLE\n        elif error_type == \"response_url\":\n            # For this detection method, we have turned off the redirect.\n            # So, there is no need to check the response URL: it will always\n            # match the request.  Instead, we will ensure that the response\n            # code indicates that the request was successful (i.e. no 404, or\n            # forward to some odd redirect).\n            if 200 <= r.status_code < 300:\n                query_status = QueryStatus.CLAIMED\n            else:\n                query_status = QueryStatus.AVAILABLE\n        else:\n            # It should be impossible to ever get here...\n            raise ValueError(\n                f\"Unknown Error Type '{error_type}' for \" f\"site '{social_network}'\"\n            )\n\n        # Notify caller about results of query.\n        result = QueryResult(\n            username=username,\n            site_name=social_network,\n            site_url_user=url,\n            status=query_status,\n            query_time=response_time,\n            context=error_context,\n        )\n        query_notify.update(result)\n\n        # Save status of request\n        results_site[\"status\"] = result\n\n        # Save results from request\n        results_site[\"http_status\"] = http_status\n        results_site[\"response_text\"] = response_text\n\n        # Add this site's results into final dictionary with all of the other results.\n        results_total[social_network] = results_site\n\n    return results_total\n\n\ndef timeout_check(value):\n    \"\"\"Check Timeout Argument.\n\n    Checks timeout for validity.\n\n    Keyword Arguments:\n    value                  -- Time in seconds to wait before timing out request.\n\n    Return Value:\n    Floating point number representing the time (in seconds) that should be\n    used for the timeout.\n\n    NOTE:  Will raise an exception if the timeout in invalid.\n    \"\"\"\n\n    float_value = float(value)\n\n    if float_value <= 0:\n        raise ArgumentTypeError(\n            f\"Invalid timeout value: {value}. Timeout must be a positive number.\"\n        )\n\n    return float_value\n\n\ndef handler(signal_received, frame):\n    \"\"\"Exit gracefully without throwing errors\n\n    Source: https://www.devdungeon.com/content/python-catch-sigint-ctrl-c\n    \"\"\"\n    sys.exit(0)\n\n\ndef main():\n    parser = ArgumentParser(\n        formatter_class=RawDescriptionHelpFormatter,\n        description=f\"{__longname__} (Version {__version__})\",\n    )\n    parser.add_argument(\n        \"--version\",\n        action=\"version\",\n        version=f\"Sherlock v{__version__}\",\n        help=\"Display version information and dependencies.\",\n    )\n    parser.add_argument(\n        \"--verbose\",\n        \"-v\",\n        \"-d\",\n        \"--debug\",\n        action=\"store_true\",\n        dest=\"verbose\",\n        default=False,\n        help=\"Display extra debugging information and metrics.\",\n    )\n    parser.add_argument(\n        \"--folderoutput\",\n        \"-fo\",\n        dest=\"folderoutput\",\n        help=\"If using multiple usernames, the output of the results will be saved to this folder.\",\n    )\n    parser.add_argument(\n        \"--output\",\n        \"-o\",\n        dest=\"output\",\n        help=\"If using single username, the output of the result will be saved to this file.\",\n    )\n    parser.add_argument(\n        \"--tor\",\n        \"-t\",\n        action=\"store_true\",\n        dest=\"tor\",\n        default=False,\n        help=\"Make requests over Tor; increases runtime; requires Tor to be installed and in system path.\",\n    )\n    parser.add_argument(\n        \"--unique-tor\",\n        \"-u\",\n        action=\"store_true\",\n        dest=\"unique_tor\",\n        default=False,\n        help=\"Make requests over Tor with new Tor circuit after each request; increases runtime; requires Tor to be installed and in system path.\",\n    )\n    parser.add_argument(\n        \"--csv\",\n        action=\"store_true\",\n        dest=\"csv\",\n        default=False,\n        help=\"Create Comma-Separated Values (CSV) File.\",\n    )\n    parser.add_argument(\n        \"--xlsx\",\n        action=\"store_true\",\n        dest=\"xlsx\",\n        default=False,\n        help=\"Create the standard file for the modern Microsoft Excel spreadsheet (xlsx).\",\n    )\n    parser.add_argument(\n        \"--site\",\n        action=\"append\",\n        metavar=\"SITE_NAME\",\n        dest=\"site_list\",\n        default=[],\n        help=\"Limit analysis to just the listed sites. Add multiple options to specify more than one site.\",\n    )\n    parser.add_argument(\n        \"--proxy\",\n        \"-p\",\n        metavar=\"PROXY_URL\",\n        action=\"store\",\n        dest=\"proxy\",\n        default=None,\n        help=\"Make requests over a proxy. e.g. socks5://127.0.0.1:1080\",\n    )\n    parser.add_argument(\n        \"--json\",\n        \"-j\",\n        metavar=\"JSON_FILE\",\n        dest=\"json_file\",\n        default=None,\n        help=\"Load data from a JSON file or an online, valid, JSON file.\",\n    )\n    parser.add_argument(\n        \"--timeout\",\n        action=\"store\",\n        metavar=\"TIMEOUT\",\n        dest=\"timeout\",\n        type=timeout_check,\n        default=60,\n        help=\"Time (in seconds) to wait for response to requests (Default: 60)\",\n    )\n    parser.add_argument(\n        \"--print-all\",\n        action=\"store_true\",\n        dest=\"print_all\",\n        default=False,\n        help=\"Output sites where the username was not found.\",\n    )\n    parser.add_argument(\n        \"--print-found\",\n        action=\"store_true\",\n        dest=\"print_found\",\n        default=True,\n        help=\"Output sites where the username was found (also if exported as file).\",\n    )\n    parser.add_argument(\n        \"--no-color\",\n        action=\"store_true\",\n        dest=\"no_color\",\n        default=False,\n        help=\"Don't color terminal output\",\n    )\n    parser.add_argument(\n        \"username\",\n        nargs=\"+\",\n        metavar=\"USERNAMES\",\n        action=\"store\",\n        help=\"One or more usernames to check with social networks. Check similar usernames using {?} (replace to '_', '-', '.').\",\n    )\n    parser.add_argument(\n        \"--browse\",\n        \"-b\",\n        action=\"store_true\",\n        dest=\"browse\",\n        default=False,\n        help=\"Browse to all results on default browser.\",\n    )\n\n    parser.add_argument(\n        \"--local\",\n        \"-l\",\n        action=\"store_true\",\n        default=False,\n        help=\"Force the use of the local data.json file.\",\n    )\n\n    parser.add_argument(\n        \"--nsfw\",\n        action=\"store_true\",\n        default=False,\n        help=\"Include checking of NSFW sites from default list.\",\n    )\n\n    args = parser.parse_args()\n\n    # If the user presses CTRL-C, exit gracefully without throwing errors\n    signal.signal(signal.SIGINT, handler)\n\n    # Check for newer version of Sherlock. If it exists, let the user know about it\n    try:\n        r = requests.get(\n            \"https://raw.githubusercontent.com/sherlock-project/sherlock/master/sherlock/__init__.py\"\n        )\n\n        remote_version = str(re.findall('__version__ *= *\"(.*)\"', r.text)[0])\n        local_version = __version__\n\n        if remote_version != local_version:\n            print(\n                \"Update Available!\\n\"\n                + f\"You are running version {local_version}. Version {remote_version} is available at https://github.com/sherlock-project/sherlock\"\n            )\n\n    except Exception as error:\n        print(f\"A problem occurred while checking for an update: {error}\")\n\n    # Argument check\n    # TODO regex check on args.proxy\n    if args.tor and (args.proxy is not None):\n        raise Exception(\"Tor and Proxy cannot be set at the same time.\")\n\n    # Make prompts\n    if args.proxy is not None:\n        print(\"Using the proxy: \" + args.proxy)\n\n    if args.tor or args.unique_tor:\n        print(\"Using Tor to make requests\")\n\n        print(\n            \"Warning: some websites might refuse connecting over Tor, so note that using this option might increase connection errors.\"\n        )\n\n    if args.no_color:\n        # Disable color output.\n        init(strip=True, convert=False)\n    else:\n        # Enable color output.\n        init(autoreset=True)\n\n    # Check if both output methods are entered as input.\n    if args.output is not None and args.folderoutput is not None:\n        print(\"You can only use one of the output methods.\")\n        sys.exit(1)\n\n    # Check validity for single username output.\n    if args.output is not None and len(args.username) != 1:\n        print(\"You can only use --output with a single username\")\n        sys.exit(1)\n\n    # Create object with all information about sites we are aware of.\n    try:\n        if args.local:\n            sites = SitesInformation(\n                os.path.join(os.path.dirname(__file__), \"resources/data.json\")\n            )\n        else:\n            sites = SitesInformation(args.json_file)\n    except Exception as error:\n        print(f\"ERROR:  {error}\")\n        sys.exit(1)\n\n    if not args.nsfw:\n        sites.remove_nsfw_sites(do_not_remove=args.site_list)\n\n    # Create original dictionary from SitesInformation() object.\n    # Eventually, the rest of the code will be updated to use the new object\n    # directly, but this will glue the two pieces together.\n    site_data_all = {site.name: site.information for site in sites}\n    if args.site_list == []:\n        # Not desired to look at a sub-set of sites\n        site_data = site_data_all\n    else:\n        # User desires to selectively run queries on a sub-set of the site list.\n        # Make sure that the sites are supported & build up pruned site database.\n        site_data = {}\n        site_missing = []\n        for site in args.site_list:\n            counter = 0\n            for existing_site in site_data_all:\n                if site.lower() == existing_site.lower():\n                    site_data[existing_site] = site_data_all[existing_site]\n                    counter += 1\n            if counter == 0:\n                # Build up list of sites not supported for future error message.\n                site_missing.append(f\"'{site}'\")\n\n        if site_missing:\n            print(f\"Error: Desired sites not found: {', '.join(site_missing)}.\")\n\n        if not site_data:\n            sys.exit(1)\n\n    # Create notify object for query results.\n    query_notify = QueryNotifyPrint(\n        result=None, verbose=args.verbose, print_all=args.print_all, browse=args.browse\n    )\n\n    # Run report on all specified users.\n    all_usernames = []\n    for username in args.username:\n        if check_for_parameter(username):\n            for name in multiple_usernames(username):\n                all_usernames.append(name)\n        else:\n            all_usernames.append(username)\n    for username in all_usernames:\n        results = sherlock(\n            username,\n            site_data,\n            query_notify,\n            tor=args.tor,\n            unique_tor=args.unique_tor,\n            proxy=args.proxy,\n            timeout=args.timeout,\n        )\n\n        if args.output:\n            result_file = args.output\n        elif args.folderoutput:\n            # The usernames results should be stored in a targeted folder.\n            # If the folder doesn't exist, create it first\n            os.makedirs(args.folderoutput, exist_ok=True)\n            result_file = os.path.join(args.folderoutput, f\"{username}.txt\")\n        else:\n            result_file = f\"{username}.txt\"\n\n        with open(result_file, \"w\", encoding=\"utf-8\") as file:\n            exists_counter = 0\n            for website_name in results:\n                dictionary = results[website_name]\n                if dictionary.get(\"status\").status == QueryStatus.CLAIMED:\n                    exists_counter += 1\n                    file.write(dictionary[\"url_user\"] + \"\\n\")\n            file.write(f\"Total Websites Username Detected On : {exists_counter}\\n\")\n\n        if args.csv:\n            result_file = f\"{username}.csv\"\n            if args.folderoutput:\n                # The usernames results should be stored in a targeted folder.\n                # If the folder doesn't exist, create it first\n                os.makedirs(args.folderoutput, exist_ok=True)\n                result_file = os.path.join(args.folderoutput, result_file)\n\n            with open(result_file, \"w\", newline=\"\", encoding=\"utf-8\") as csv_report:\n                writer = csv.writer(csv_report)\n                writer.writerow(\n                    [\n                        \"username\",\n                        \"name\",\n                        \"url_main\",\n                        \"url_user\",\n                        \"exists\",\n                        \"http_status\",\n                        \"response_time_s\",\n                    ]\n                )\n                for site in results:\n                    if (\n                        args.print_found\n                        and not args.print_all\n                        and results[site][\"status\"].status != QueryStatus.CLAIMED\n                    ):\n                        continue\n\n                    response_time_s = results[site][\"status\"].query_time\n                    if response_time_s is None:\n                        response_time_s = \"\"\n                    writer.writerow(\n                        [\n                            username,\n                            site,\n                            results[site][\"url_main\"],\n                            results[site][\"url_user\"],\n                            str(results[site][\"status\"].status),\n                            results[site][\"http_status\"],\n                            response_time_s,\n                        ]\n                    )\n        if args.xlsx:\n            usernames = []\n            names = []\n            url_main = []\n            url_user = []\n            exists = []\n            http_status = []\n            response_time_s = []\n\n            for site in results:\n                if (\n                    args.print_found\n                    and not args.print_all\n                    and results[site][\"status\"].status != QueryStatus.CLAIMED\n                ):\n                    continue\n\n                if response_time_s is None:\n                    response_time_s.append(\"\")\n                else:\n                    response_time_s.append(results[site][\"status\"].query_time)\n                usernames.append(username)\n                names.append(site)\n                url_main.append(results[site][\"url_main\"])\n                url_user.append(results[site][\"url_user\"])\n                exists.append(str(results[site][\"status\"].status))\n                http_status.append(results[site][\"http_status\"])\n\n            DataFrame = pd.DataFrame(\n                {\n                    \"username\": usernames,\n                    \"name\": names,\n                    \"url_main\": url_main,\n                    \"url_user\": url_user,\n                    \"exists\": exists,\n                    \"http_status\": http_status,\n                    \"response_time_s\": response_time_s,\n                }\n            )\n            DataFrame.to_excel(f\"{username}.xlsx\", sheet_name=\"sheet1\", index=False)\n\n        print()\n    query_notify.finish()\n\n\nif __name__ == \"__main__\":\n    main()\n", "sherlock/__main__.py": "#! /usr/bin/env python3\n\n\"\"\"\nSherlock: Find Usernames Across Social Networks Module\n\nThis module contains the main logic to search for usernames at social\nnetworks.\n\"\"\"\n\nimport sys\n\n\nif __name__ == \"__main__\":\n    # Check if the user is using the correct version of Python\n    python_version = sys.version.split()[0]\n\n    if sys.version_info < (3, 8):\n        print(f\"Sherlock requires Python 3.8+\\nYou are using Python {python_version}, which is not supported by Sherlock.\")\n        sys.exit(1)\n\n    from sherlock import sherlock\n    sherlock.main()\n", "sherlock/__init__.py": "\"\"\" Sherlock Module\n\nThis module contains the main logic to search for usernames at social\nnetworks.\n\n\"\"\"\n\n__shortname__   = \"Sherlock\"\n__longname__    = \"Sherlock: Find Usernames Across Social Networks\"\n__version__     = \"0.14.4\"\n", "sherlock/sites.py": "\"\"\"Sherlock Sites Information Module\n\nThis module supports storing information about websites.\nThis is the raw data that will be used to search for usernames.\n\"\"\"\nimport json\nimport requests\nimport secrets\n\nclass SiteInformation:\n    def __init__(self, name, url_home, url_username_format, username_claimed,\n                information, is_nsfw, username_unclaimed=secrets.token_urlsafe(10)):\n        \"\"\"Create Site Information Object.\n\n        Contains information about a specific website.\n\n        Keyword Arguments:\n        self                   -- This object.\n        name                   -- String which identifies site.\n        url_home               -- String containing URL for home of site.\n        url_username_format    -- String containing URL for Username format\n                                  on site.\n                                  NOTE:  The string should contain the\n                                         token \"{}\" where the username should\n                                         be substituted.  For example, a string\n                                         of \"https://somesite.com/users/{}\"\n                                         indicates that the individual\n                                         usernames would show up under the\n                                         \"https://somesite.com/users/\" area of\n                                         the website.\n        username_claimed       -- String containing username which is known\n                                  to be claimed on website.\n        username_unclaimed     -- String containing username which is known\n                                  to be unclaimed on website.\n        information            -- Dictionary containing all known information\n                                  about website.\n                                  NOTE:  Custom information about how to\n                                         actually detect the existence of the\n                                         username will be included in this\n                                         dictionary.  This information will\n                                         be needed by the detection method,\n                                         but it is only recorded in this\n                                         object for future use.\n        is_nsfw                -- Boolean indicating if site is Not Safe For Work.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        self.name = name\n        self.url_home = url_home\n        self.url_username_format = url_username_format\n\n        self.username_claimed = username_claimed\n        self.username_unclaimed = secrets.token_urlsafe(32)\n        self.information = information\n        self.is_nsfw  = is_nsfw\n\n        return\n\n    def __str__(self):\n        \"\"\"Convert Object To String.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        Nicely formatted string to get information about this object.\n        \"\"\"\n        \n        return f\"{self.name} ({self.url_home})\"\n\n\nclass SitesInformation:\n    def __init__(self, data_file_path=None):\n        \"\"\"Create Sites Information Object.\n\n        Contains information about all supported websites.\n\n        Keyword Arguments:\n        self                   -- This object.\n        data_file_path         -- String which indicates path to data file.\n                                  The file name must end in \".json\".\n\n                                  There are 3 possible formats:\n                                   * Absolute File Format\n                                     For example, \"c:/stuff/data.json\".\n                                   * Relative File Format\n                                     The current working directory is used\n                                     as the context.\n                                     For example, \"data.json\".\n                                   * URL Format\n                                     For example,\n                                     \"https://example.com/data.json\", or\n                                     \"http://example.com/data.json\".\n\n                                  An exception will be thrown if the path\n                                  to the data file is not in the expected\n                                  format, or if there was any problem loading\n                                  the file.\n\n                                  If this option is not specified, then a\n                                  default site list will be used.\n\n        Return Value:\n        Nothing.\n        \"\"\"\n\n        if not data_file_path:\n            # The default data file is the live data.json which is in the GitHub repo. The reason why we are using\n            # this instead of the local one is so that the user has the most up-to-date data. This prevents\n            # users from creating issue about false positives which has already been fixed or having outdated data\n            data_file_path = \"https://raw.githubusercontent.com/sherlock-project/sherlock/master/sherlock/resources/data.json\"\n\n        # Ensure that specified data file has correct extension.\n        if not data_file_path.lower().endswith(\".json\"):\n            raise FileNotFoundError(f\"Incorrect JSON file extension for data file '{data_file_path}'.\")\n\n        # if \"http://\"  == data_file_path[:7].lower() or \"https://\" == data_file_path[:8].lower():\n        if data_file_path.lower().startswith(\"http\"):\n            # Reference is to a URL.\n            try:\n                response = requests.get(url=data_file_path)\n            except Exception as error:\n                raise FileNotFoundError(\n                    f\"Problem while attempting to access data file URL '{data_file_path}':  {error}\"\n                )\n\n            if response.status_code != 200:\n                raise FileNotFoundError(f\"Bad response while accessing \"\n                                        f\"data file URL '{data_file_path}'.\"\n                                        )\n            try:\n                site_data = response.json()\n            except Exception as error:\n                raise ValueError(\n                    f\"Problem parsing json contents at '{data_file_path}':  {error}.\"\n                )\n\n        else:\n            # Reference is to a file.\n            try:\n                with open(data_file_path, \"r\", encoding=\"utf-8\") as file:\n                    try:\n                        site_data = json.load(file)\n                    except Exception as error:\n                        raise ValueError(\n                            f\"Problem parsing json contents at '{data_file_path}':  {error}.\"\n                        )\n\n            except FileNotFoundError:\n                raise FileNotFoundError(f\"Problem while attempting to access \"\n                                        f\"data file '{data_file_path}'.\"\n                                        )\n        \n        site_data.pop('$schema', None)\n\n        self.sites = {}\n\n        # Add all site information from the json file to internal site list.\n        for site_name in site_data:\n            try:\n\n                self.sites[site_name] = \\\n                    SiteInformation(site_name,\n                                    site_data[site_name][\"urlMain\"],\n                                    site_data[site_name][\"url\"],\n                                    site_data[site_name][\"username_claimed\"],\n                                    site_data[site_name],\n                                    site_data[site_name].get(\"isNSFW\",False)\n\n                                    )\n            except KeyError as error:\n                raise ValueError(\n                    f\"Problem parsing json contents at '{data_file_path}':  Missing attribute {error}.\"\n                )\n            except TypeError:\n                print(f\"Encountered TypeError parsing json contents for target '{site_name}' at {data_file_path}\\nSkipping target.\\n\")\n\n        return\n\n    def remove_nsfw_sites(self, do_not_remove: list = []):\n        \"\"\"\n        Remove NSFW sites from the sites, if isNSFW flag is true for site\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        None\n        \"\"\"\n        sites = {}\n        do_not_remove = [site.casefold() for site in do_not_remove]\n        for site in self.sites:\n            if self.sites[site].is_nsfw and site.casefold() not in do_not_remove:\n                continue\n            sites[site] = self.sites[site]  \n        self.sites =  sites\n\n    def site_name_list(self):\n        \"\"\"Get Site Name List.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        List of strings containing names of sites.\n        \"\"\"\n\n        return sorted([site.name for site in self], key=str.lower)\n\n    def __iter__(self):\n        \"\"\"Iterator For Object.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        Iterator for sites object.\n        \"\"\"\n\n        for site_name in self.sites:\n            yield self.sites[site_name]\n\n    def __len__(self):\n        \"\"\"Length For Object.\n\n        Keyword Arguments:\n        self                   -- This object.\n\n        Return Value:\n        Length of sites object.\n        \"\"\"\n        return len(self.sites)\n", "devel/site-list.py": "#!/usr/bin/env python\n# This module generates the listing of supported sites which can be found in\n# sites.md. It also organizes all the sites in alphanumeric order\nimport json\nimport os\n\n# Read the data.json file\nwith open(\"sherlock/resources/data.json\", \"r\", encoding=\"utf-8\") as data_file:\n    data: dict = json.load(data_file)\n\n# Removes schema-specific keywords for proper processing\nsocial_networks: dict = dict(data)\nsocial_networks.pop('$schema', None)\n\n# Sort the social networks in alphanumeric order\nsocial_networks: list = sorted(social_networks.items())\n\n# Make output dir where the site list will be written\nos.mkdir(\"output\")\n\n# Write the list of supported sites to sites.md\nwith open(\"output/sites.mdx\", \"w\") as site_file:\n    site_file.write(\"---\\ntitle: 'List of supported sites'\\nsidebarTitle: 'Supported sites'\\nicon: 'globe'\\ndescription: 'Sherlock currently supports **400+** sites'\\n---\\n\\n\")\n    for social_network, info in social_networks:\n        url_main = info[\"urlMain\"]\n        is_nsfw = \"**(NSFW)**\" if info.get(\"isNSFW\") else \"\"\n        site_file.write(f\"1. [{social_network}]({url_main}) {is_nsfw}\\n\")\n\n# Overwrite the data.json file with sorted data\nwith open(\"sherlock/resources/data.json\", \"w\") as data_file:\n    sorted_data = json.dumps(data, indent=2, sort_keys=True)\n    data_file.write(sorted_data)\n    data_file.write(\"\\n\")\n\nprint(\"Finished updating supported site listing!\")\n\n"}