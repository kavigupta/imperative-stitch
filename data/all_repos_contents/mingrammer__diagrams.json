{"config.py": "# fmt: off\n\n#########################\n#      Application      #\n#########################\n\nAPP_NAME = \"diagrams\"\n\nDIR_DOC_ROOT = \"docs/nodes\"\nDIR_APP_ROOT = \"diagrams\"\nDIR_RESOURCE = \"resources\"\nDIR_TEMPLATE = \"templates\"\n\nPROVIDERS = (\n    \"base\",\n    \"onprem\",\n    \"aws\",\n    \"azure\",\n    \"digitalocean\",\n    \"gcp\",\n    \"ibm\",\n    \"firebase\",\n    \"k8s\",\n    \"alibabacloud\",\n    \"oci\",\n    \"programming\",\n    \"saas\",\n    \"elastic\",\n    \"generic\",\n    \"openstack\",\n    \"outscale\",\n)\n\n#########################\n#  Resource Processing  #\n#########################\n\nCMD_ROUND = \"round\"\nCMD_ROUND_OPTS = (\"-w\",)\nCMD_SVG2PNG = \"inkscape\"\nCMD_SVG2PNG_OPTS = (\"-w\", \"256\", \"-h\", \"256\", \"--export-type\", \"png\")\nCMD_SVG2PNG_IM = \"convert\"\nCMD_SVG2PNG_IM_OPTS = (\"-shave\", \"25%x25%\", \"-resize\", \"256x256!\")\n\nFILE_PREFIXES = {\n    \"onprem\": (),\n    \"aws\": (\"Amazon-\", \"AWS-\"),\n    \"azure\": (\"Azure-\",),\n    \"digitalocean\": (),\n    \"gcp\": (\"Cloud-\",),\n    \"firebase\": (\"Cloud-\",),\n    \"ibm\": (),\n    \"k8s\": (),\n    \"alibabacloud\": (),\n    \"oci\": (\"OCI-icon-\",),\n    \"programming\": (),\n    \"saas\": (),\n    \"elastic\": (),\n    \"outscale\": (),\n    \"generic\": (),\n    \"openstack\": (),\n}\n\n#########################\n#  Doc Auto Generation  #\n#########################\n\nTMPL_APIDOC = \"apidoc.tmpl\"\n\n#########################\n# Class Auto Generation #\n#########################\n\nTMPL_MODULE = \"module.tmpl\"\n\nUPPER_WORDS = {\n    \"aws\": (\"aws\", \"api\", \"ebs\", \"ec2\", \"efs\", \"emr\", \"rds\", \"ml\", \"mq\", \"nat\", \"vpc\", \"waf\", \"sdk\"),\n    \"azure\": (\"ad\", \"b2c\", \"ai\", \"api\", \"cdn\", \"ddos\", \"dns\", \"fxt\", \"hana\", \"hd\", \"id\", \"sap\", \"sql\", \"vm\", \"vpn\", \"vpc\"),\n    \"gcp\": (\"gcp\", \"ai\", \"api\", \"cdn\", \"dns\", \"gke\", \"gpu\", \"iap\", \"ml\", \"nat\", \"os\", \"sdk\", \"sql\", \"tpu\", \"vpn\"),\n    \"firebase\": (\"ab\", \"fcm\", \"ml\"),\n    \"k8s\": (\n        \"api\", \"cm\", \"ccm\", \"crb\", \"crd\", \"ds\", \"etcd\", \"hpa\", \"k8s\", \"ns\", \"psp\", \"pv\", \"pvc\", \"rb\", \"rs\",\n        \"sa\", \"sc\", \"sts\", \"svc\",\n    ),\n    \"oci\": (\"oci\", \"ocid\", \"oke\", \"ocir\", \"ddos\", \"waf\", \"bm\", \"vm\", \"cdn\", \"vpn\", \"dns\", \"nat\", \"dms\", \"api\", \"id\"),\n    \"elastic\": (\"apm\", \"siem\", \"ece\", \"eck\", \"sql\"),\n    \"generic\": (\"vpn\", \"ios\", \"xen\", \"sql\", \"lxc\"),\n    \"outscale\": (\"osc\",),\n    \"openstack\": (\"rpm\", \"loci\", \"nfv\", \"ec2api\"),\n    \"pve\": (\"pve\"),\n    \"ibm\": (\"ibm\"),\n}\n\nTITLE_WORDS = {\n    \"onprem\": {\n        \"onprem\": \"OnPrem\",\n    },\n    \"alibabacloud\": {\n        \"alibabacloud\": \"AlibabaCloud\"\n    },\n    \"aws\": {\n        \"cloudfront\": \"CloudFront\"\n    },\n    \"digitalocean\": {\n        \"digitalocean\": \"DigitalOcean\"\n    },\n    \"openstack\": {\n        \"openstack\": \"OpenStack\"\n    },\n    \"ibm\": {\n        \"ibm\": \"IBMCloud\"\n    },\n}\n\n# TODO: check if the classname exists\nALIASES = {\n    \"onprem\": {\n        \"analytics\": {\n            \"Powerbi\": \"PowerBI\"\n        },\n        \"ci\": {\n            \"Circleci\": \"CircleCI\",\n            \"Concourseci\": \"ConcourseCI\",\n            \"Droneci\": \"DroneCI\",\n            \"Gitlabci\": \"GitlabCI\",\n            \"Travisci\": \"TravisCI\",\n            \"Teamcity\": \"TC\",\n            \"Zuulci\": \"ZuulCI\",\n        },\n        \"container\": {\n            \"Lxc\": \"LXC\",\n            \"Rkt\": \"RKT\",\n        },\n        \"database\": {\n            \"Clickhouse\": \"ClickHouse\",\n            \"Cockroachdb\": \"CockroachDB\",\n            \"Couchdb\": \"CouchDB\",\n            \"Hbase\": \"HBase\",\n            \"Influxdb\": \"InfluxDB\",\n            \"Janusgraph\": \"JanusGraph\",\n            \"Mariadb\": \"MariaDB\",\n            \"Mongodb\": \"MongoDB\",\n            \"Mssql\": \"MSSQL\",\n            \"Mysql\": \"MySQL\",\n            \"Postgresql\": \"PostgreSQL\",\n        },\n        \"gitops\": {\n            \"Argocd\": \"ArgoCD\",\n        },\n        \"logging\": {\n            \"Fluentbit\": \"FluentBit\",\n            \"Rsyslog\": \"RSyslog\",\n        },\n        \"network\": {\n            \"Etcd\": \"ETCD\",\n            \"Haproxy\": \"HAProxy\",\n            \"OpenServiceMesh\": \"OSM\",\n            \"Opnsense\": \"OPNSense\",\n            \"Pfsense\": \"PFSense\",\n            \"Vyos\": \"VyOS\"\n        },\n        \"proxmox\": {\n            \"Pve\": \"ProxmoxVE\",\n        },\n        \"queue\": {\n            \"Activemq\": \"ActiveMQ\",\n            \"Emqx\": \"EMQX\",\n            \"Rabbitmq\": \"RabbitMQ\",\n            \"Zeromq\": \"ZeroMQ\",\n        },\n        \"storage\": {\n            \"Ceph\": \"CEPH\",\n            \"CephOsd\": \"CEPH_OSD\",\n        },\n        \"workflow\": {\n            \"Kubeflow\": \"KubeFlow\",\n            \"Nifi\": \"NiFi\",\n        }\n    },\n    \"aws\": {\n        \"analytics\": {\n            \"ElasticsearchService\": \"ES\",\n        },\n        \"business\": {\n            \"AlexaForBusiness\": \"A4B\"\n        },\n        \"blockchain\": {\n            \"QuantumLedgerDatabaseQldb\": \"QLDB\"\n        },\n        \"compute\": {\n            \"ApplicationAutoScaling\": \"AutoScaling\",\n            \"EC2Ami\": \"AMI\",\n            \"EC2ContainerRegistry\": \"ECR\",\n            \"ElasticBeanstalk\": \"EB\",\n            \"ElasticContainerService\": \"ECS\",\n            \"ElasticKubernetesService\": \"EKS\",\n            \"ServerlessApplicationRepository\": \"SAR\",\n        },\n        \"database\": {\n            \"DatabaseMigrationService\": \"DMS\",\n            \"DocumentdbMongodbCompatibility\": \"DocumentDB\",\n            \"DynamodbDax\": \"DAX\",\n            \"DynamodbGlobalSecondaryIndex\": \"DynamodbGSI\",\n            \"Database\": \"DB\",\n            \"Dynamodb\": \"DDB\",\n            \"Elasticache\": \"ElastiCache\",\n            \"QuantumLedgerDatabaseQldb\": \"QLDB\",\n        },\n        \"devtools\": {\n            \"CommandLineInterface\": \"CLI\",\n            \"DeveloperTools\": \"DevTools\",\n        },\n        \"engagement\": {\n            \"SimpleEmailServiceSes\": \"SES\",\n        },\n        \"general\": {\n            \"GenericOfficeBuilding\": \"OfficeBuilding\",\n        },\n        \"integration\": {\n            \"SimpleNotificationServiceSns\": \"SNS\",\n            \"SimpleQueueServiceSqs\": \"SQS\",\n            \"StepFunctions\": \"SF\",\n        },\n        \"iot\": {\n            \"Freertos\": \"FreeRTOS\",\n            \"IotHardwareBoard\": \"IotBoard\",\n        },\n        \"management\": {\n            \"SystemsManager\": \"SSM\",\n            \"SystemsManagerParameterStore\": \"ParameterStore\",\n        },\n        \"migration\": {\n            \"ApplicationDiscoveryService\": \"ADS\",\n            \"CloudendureMigration\": \"CEM\",\n            \"DatabaseMigrationService\": \"DMS\",\n            \"MigrationAndTransfer\": \"MAT\",\n            \"ServerMigrationService\": \"SMS\",\n        },\n        \"ml\": {\n            \"DeepLearningContainers\": \"DLC\",\n        },\n        \"network\": {\n            \"CloudFront\": \"CF\",\n            \"ElasticLoadBalancing\": \"ELB\",\n            \"ElbApplicationLoadBalancer\": \"ALB\",\n            \"ElbClassicLoadBalancer\": \"CLB\",\n            \"ElbNetworkLoadBalancer\": \"NLB\",\n            \"GlobalAccelerator\": \"GAX\",\n        },\n        \"security\": {\n            \"CertificateManager\": \"ACM\",\n            \"Cloudhsm\": \"CloudHSM\",\n            \"DirectoryService\": \"DS\",\n            \"FirewallManager\": \"FMS\",\n            \"IdentityAndAccessManagementIamAccessAnalyzer\": \"IAMAccessAnalyzer\",\n            \"IdentityAndAccessManagementIamAWSSts\": \"IAMAWSSts\",\n            \"IdentityAndAccessManagementIamPermissions\": \"IAMPermissions\",\n            \"IdentityAndAccessManagementIamRole\": \"IAMRole\",\n            \"IdentityAndAccessManagementIam\": \"IAM\",\n            \"KeyManagementService\": \"KMS\",\n            \"ResourceAccessManager\": \"RAM\",\n        },\n        \"storage\": {\n            \"CloudendureDisasterRecovery\": \"CDR\",\n            \"ElasticBlockStoreEBS\": \"EBS\",\n            \"ElasticFileSystemEFS\": \"EFS\",\n            \"Fsx\": \"FSx\",\n            \"SimpleStorageServiceS3\": \"S3\",\n        },\n    },\n    \"azure\": {\n        \"compute\": {\n            \"ContainerRegistries\": \"ACR\",\n            \"KubernetesServices\": \"AKS\",\n            \"VMScaleSet\": \"VMSS\"\n        },\n    },\n    \"gcp\": {\n        \"analytics\": {\n            \"Bigquery\": \"BigQuery\",\n            \"Pubsub\": \"PubSub\",\n        },\n        \"compute\": {\n            \"AppEngine\": \"GAE\",\n            \"Functions\": \"GCF\",\n            \"ComputeEngine\": \"GCE\",\n            \"KubernetesEngine\": \"GKE\",\n        },\n        \"database\": {\n            \"Bigtable\": \"BigTable\",\n        },\n        \"devtools\": {\n            \"ContainerRegistry\": \"GCR\",\n        },\n        \"ml\": {\n            \"Automl\": \"AutoML\",\n            \"NaturalLanguageAPI\": \"NLAPI\",\n            \"SpeechToText\": \"STT\",\n            \"TextToSpeech\": \"TTS\",\n        },\n        \"network\": {\n            \"VirtualPrivateCloud\": \"VPC\"\n        },\n        \"security\": {\n            \"KeyManagementService\": \"KMS\",\n            \"SecurityCommandCenter\": \"SCC\",\n        },\n        \"storage\": {\n            \"Storage\": \"GCS\",\n        },\n    },\n    \"firebase\": {\n        \"grow\": {\n            \"Messaging\": \"FCM\"\n        }\n    },\n    \"k8s\": {\n        \"clusterconfig\": {\n            \"Limits\": \"LimitRange\",\n            \"HPA\": \"HorizontalPodAutoscaler\",\n        },\n        \"compute\": {\n            \"Deploy\": \"Deployment\",\n            \"DS\": \"DaemonSet\",\n            \"RS\": \"ReplicaSet\",\n            \"STS\": \"StatefulSet\"\n        },\n        \"controlplane\": {\n            \"API\": \"APIServer\",\n            \"CM\": \"ControllerManager\",\n            \"KProxy\": \"KubeProxy\",\n            \"Sched\": \"Scheduler\",\n        },\n        \"group\": {\n            \"NS\": \"Namespace\",\n        },\n        \"network\": {\n            \"Ep\": \"Endpoint\",\n            \"Ing\": \"Ingress\",\n            \"Netpol\": \"NetworkPolicy\",\n            \"SVC\": \"Service\",\n        },\n        \"podconfig\": {\n            \"CM\": \"ConfigMap\",\n        },\n        \"rbac\": {\n            \"CRole\": \"ClusterRole\",\n            \"CRB\": \"ClusterRoleBinding\",\n            \"RB\": \"RoleBinding\",\n            \"SA\": \"ServiceAccount\",\n        },\n        \"storage\": {\n            \"PV\": \"PersistentVolume\",\n            \"PVC\": \"PersistentVolumeClaim\",\n            \"SC\": \"StorageClass\",\n            \"Vol\": \"Volume\",\n        },\n    },\n    \"alibabacloud\": {\n        \"application\": {\n            \"LogService\": \"SLS\",\n            \"MessageNotificationService\": \"MNS\",\n            \"PerformanceTestingService\": \"PTS\",\n            \"SmartConversationAnalysis\": \"SCA\",\n        },\n        \"compute\": {\n            \"AutoScaling\": \"ESS\",\n            \"ElasticComputeService\": \"ECS\",\n            \"ElasticContainerInstance\": \"ECI\",\n            \"ElasticHighPerformanceComputing\": \"EHPC\",\n            \"FunctionCompute\": \"FC\",\n            \"OperationOrchestrationService\": \"OOS\",\n            \"ResourceOrchestrationService\": \"ROS\",\n            \"ServerLoadBalancer\": \"SLB\",\n            \"ServerlessAppEngine\": \"SAE\",\n            \"SimpleApplicationServer\": \"SAS\",\n            \"WebAppService\": \"WAS\",\n        },\n        \"database\": {\n            \"DataManagementService\": \"DMS\",\n            \"DataTransmissionService\": \"DTS\",\n            \"DatabaseBackupService\": \"DBS\",\n            \"DisributeRelationalDatabaseService\": \"DRDS\",\n            \"GraphDatabaseService\": \"GDS\",\n            \"RelationalDatabaseService\": \"RDS\",\n        },\n        \"network\": {\n            \"CloudEnterpriseNetwork\": \"CEN\",\n            \"ElasticIpAddress\": \"EIP\",\n            \"ServerLoadBalancer\": \"SLB\",\n            \"VirtualPrivateCloud\": \"VPC\",\n        },\n        \"security\": {\n            \"AntiBotService\": \"ABS\",\n            \"AntifraudService\": \"AS\",\n            \"CloudFirewall\": \"CFW\",\n            \"ContentModeration\": \"CM\",\n            \"DataEncryptionService\": \"DES\",\n            \"WebApplicationFirewall\": \"WAF\",\n        },\n        \"storage\": {\n            \"FileStorageHdfs\": \"HDFS\",\n            \"FileStorageNas\": \"NAS\",\n            \"HybridBackupRecovery\": \"HBR\",\n            \"HybridCloudDisasterRecovery\": \"HDR\",\n            \"ObjectStorageService\": \"OSS\",\n            \"ObjectTableStore\": \"OTS\",\n        }\n    },\n    \"digitalocean\": {},\n    \"oci\": {\n        \"compute\": {\n            \"VM\": \"VirtualMachine\",\n            \"VMWhite\": \"VirtualMachineWhite\",\n            \"BM\": \"BareMetal\",\n            \"BMWhite\": \"BareMetalWhite\",\n            \"OCIR\": \"OCIRegistry\",\n            \"OCIRWhite\": \"OCIRegistryWhite\",\n            \"OKE\": \"ContainerEngine\",\n            \"OKEWhite\": \"ContainerEngineWhite\",\n        },\n        \"database\": {\n            \"Autonomous\": \"ADB\",\n            \"AutonomousWhite\": \"ADBWhite\",\n            \"DatabaseService\": \"DBService\",\n            \"DatabaseServiceWhite\": \"DBServiceWhite\",\n        }\n    },\n    \"programming\": {\n        \"framework\": {\n            \"Fastapi\": \"FastAPI\",\n            \"Graphql\": \"GraphQL\"\n        },\n        \"language\": {\n            \"Javascript\": \"JavaScript\",\n            \"Nodejs\": \"NodeJS\",\n            \"Php\": \"PHP\",\n            \"Typescript\": \"TypeScript\"\n        },\n    },\n    \"saas\": {\n        \"logging\": {\n            \"Datadog\": \"DataDog\",\n            \"Newrelic\": \"NewRelic\"\n        }\n    },\n    \"elastic\": {\n        \"elasticsearch\": {\n            \"Elasticsearch\": \"ElasticSearch\",\n            \"Logstash\": \"LogStash\",\n            \"MachineLearning\": \"ML\",\n        }\n    },\n    \"outscale\": {\n        \"Osc\": \"OSC\",\n    },\n    \"ibm\": {},\n    \"generic\": {},\n    \"openstack\": {\n        \"user\": {\n            \"Openstackclient\": \"OpenStackClient\",\n        },\n        \"billing\": {\n            \"Cloudkitty\": \"CloudKitty\",\n        },\n        \"deployment\": {\n            \"Kolla\": \"KollaAnsible\",\n            \"Tripleo\": \"TripleO\",\n        }\n    },\n}\n", "diagrams/__init__.py": "import contextvars\nimport os\nimport uuid\nfrom pathlib import Path\nfrom typing import Dict, List, Optional, Union\n\nfrom graphviz import Digraph\n\n# Global contexts for a diagrams and a cluster.\n#\n# These global contexts are for letting the clusters and nodes know\n# where context they are belong to. So the all clusters and nodes does\n# not need to specify the current diagrams or cluster via parameters.\n__diagram = contextvars.ContextVar(\"diagrams\")\n__cluster = contextvars.ContextVar(\"cluster\")\n\n\ndef getdiagram() -> \"Diagram\":\n    try:\n        return __diagram.get()\n    except LookupError:\n        return None\n\n\ndef setdiagram(diagram: \"Diagram\"):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> \"Cluster\":\n    try:\n        return __cluster.get()\n    except LookupError:\n        return None\n\n\ndef setcluster(cluster: \"Cluster\"):\n    __cluster.set(cluster)\n\n\nclass Diagram:\n    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")\n    __curvestyles = (\"ortho\", \"curved\")\n    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")\n\n    # fmt: off\n    _default_graph_attrs = {\n        \"pad\": \"2.0\",\n        \"splines\": \"ortho\",\n        \"nodesep\": \"0.60\",\n        \"ranksep\": \"0.75\",\n        \"fontname\": \"Sans-Serif\",\n        \"fontsize\": \"15\",\n        \"fontcolor\": \"#2D3436\",\n    }\n    _default_node_attrs = {\n        \"shape\": \"box\",\n        \"style\": \"rounded\",\n        \"fixedsize\": \"true\",\n        \"width\": \"1.4\",\n        \"height\": \"1.4\",\n        \"labelloc\": \"b\",\n        # imagepos attribute is not backward compatible\n        # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n        # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n        # \"imagepos\": \"tc\",\n        \"imagescale\": \"true\",\n        \"fontname\": \"Sans-Serif\",\n        \"fontsize\": \"13\",\n        \"fontcolor\": \"#2D3436\",\n    }\n    _default_edge_attrs = {\n        \"color\": \"#7B8894\",\n    }\n\n    # fmt: on\n\n    # TODO: Label position option\n    # TODO: Save directory option (filename + directory?)\n    def __init__(\n        self,\n        name: str = \"\",\n        filename: str = \"\",\n        direction: str = \"LR\",\n        curvestyle: str = \"ortho\",\n        outformat: str = \"png\",\n        autolabel: bool = False,\n        show: bool = True,\n        strict: bool = False,\n        graph_attr: Optional[dict] = None,\n        node_attr: Optional[dict] = None,\n        edge_attr: Optional[dict] = None,\n    ):\n        \"\"\"Diagram represents a global diagrams context.\n\n        :param name: Diagram name. It will be used for output filename if the\n            filename isn't given.\n        :param filename: The output filename, without the extension (.png).\n            If not given, it will be generated from the name.\n        :param direction: Data flow direction. Default is 'left to right'.\n        :param curvestyle: Curve bending style. One of \"ortho\" or \"curved\".\n        :param outformat: Output file format. Default is 'png'.\n        :param show: Open generated image after save if true, just only save otherwise.\n        :param graph_attr: Provide graph_attr dot config attributes.\n        :param node_attr: Provide node_attr dot config attributes.\n        :param edge_attr: Provide edge_attr dot config attributes.\n        :param strict: Rendering should merge multi-edges.\n        \"\"\"\n        if graph_attr is None:\n            graph_attr = {}\n        if node_attr is None:\n            node_attr = {}\n        if edge_attr is None:\n            edge_attr = {}\n        self.name = name\n        if not name and not filename:\n            filename = \"diagrams_image\"\n        elif not filename:\n            filename = \"_\".join(self.name.split()).lower()\n        self.filename = filename\n        self.dot = Digraph(self.name, filename=self.filename, strict=strict)\n\n        # Set attributes.\n        for k, v in self._default_graph_attrs.items():\n            self.dot.graph_attr[k] = v\n        self.dot.graph_attr[\"label\"] = self.name\n        for k, v in self._default_node_attrs.items():\n            self.dot.node_attr[k] = v\n        for k, v in self._default_edge_attrs.items():\n            self.dot.edge_attr[k] = v\n\n        if not self._validate_direction(direction):\n            raise ValueError(f'\"{direction}\" is not a valid direction')\n        self.dot.graph_attr[\"rankdir\"] = direction\n\n        if not self._validate_curvestyle(curvestyle):\n            raise ValueError(f'\"{curvestyle}\" is not a valid curvestyle')\n        self.dot.graph_attr[\"splines\"] = curvestyle\n\n        if isinstance(outformat, list):\n            for one_format in outformat:\n                if not self._validate_outformat(one_format):\n                    raise ValueError(f'\"{one_format}\" is not a valid output format')\n        else:\n            if not self._validate_outformat(outformat):\n                raise ValueError(f'\"{outformat}\" is not a valid output format')\n        self.outformat = outformat\n\n        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n        self.dot.node_attr.update(node_attr)\n        self.dot.edge_attr.update(edge_attr)\n\n        self.show = show\n        self.autolabel = autolabel\n\n    def __str__(self) -> str:\n        return str(self.dot)\n\n    def __enter__(self):\n        setdiagram(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.render()\n        # Remove the graphviz file leaving only the image.\n        os.remove(self.filename)\n        setdiagram(None)\n\n    def _repr_png_(self):\n        return self.dot.pipe(format=\"png\")\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def connect(self, node: \"Node\", node2: \"Node\", edge: \"Edge\") -> None:\n        \"\"\"Connect the two Nodes.\"\"\"\n        self.dot.edge(node.nodeid, node2.nodeid, **edge.attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        \"\"\"Create a subgraph for clustering\"\"\"\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n\n\nclass Cluster:\n    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")\n    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")\n\n    # fmt: off\n    _default_graph_attrs = {\n        \"shape\": \"box\",\n        \"style\": \"rounded\",\n        \"labeljust\": \"l\",\n        \"pencolor\": \"#AEB6BE\",\n        \"fontname\": \"Sans-Serif\",\n        \"fontsize\": \"12\",\n    }\n\n    # fmt: on\n\n    # FIXME:\n    #  Cluster direction does not work now. Graphviz couldn't render\n    #  correctly for a subgraph that has a different rank direction.\n    def __init__(\n        self,\n        label: str = \"cluster\",\n        direction: str = \"LR\",\n        graph_attr: Optional[dict] = None,\n    ):\n        \"\"\"Cluster represents a cluster context.\n\n        :param label: Cluster label.\n        :param direction: Data flow direction. Default is 'left to right'.\n        :param graph_attr: Provide graph_attr dot config attributes.\n        \"\"\"\n        if graph_attr is None:\n            graph_attr = {}\n        self.label = label\n        self.name = \"cluster_\" + self.label\n\n        self.dot = Digraph(self.name)\n\n        # Set attributes.\n        for k, v in self._default_graph_attrs.items():\n            self.dot.graph_attr[k] = v\n        self.dot.graph_attr[\"label\"] = self.label\n\n        if not self._validate_direction(direction):\n            raise ValueError(f'\"{direction}\" is not a valid direction')\n        self.dot.graph_attr[\"rankdir\"] = direction\n\n        # Node must be belong to a diagrams.\n        self._diagram = getdiagram()\n        if self._diagram is None:\n            raise EnvironmentError(\"Global diagrams context not set up\")\n        self._parent = getcluster()\n\n        # Set cluster depth for distinguishing the background color\n        self.depth = self._parent.depth + 1 if self._parent else 0\n        coloridx = self.depth % len(self.__bgcolors)\n        self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]\n\n        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)\n\n\nclass Node:\n    \"\"\"Node represents a node for a specific backend service.\"\"\"\n\n    _provider = None\n    _type = None\n\n    _icon_dir = None\n    _icon = None\n\n    _height = 1.9\n\n    def __init__(self, label: str = \"\", *, nodeid: str = None, **attrs: Dict):\n        \"\"\"Node represents a system component.\n\n        :param label: Node label.\n        \"\"\"\n        # Generates an ID for identifying a node, unless specified\n        self._id = nodeid or self._rand_id()\n        self.label = label\n\n        # Node must be belong to a diagrams.\n        self._diagram = getdiagram()\n        if self._diagram is None:\n            raise EnvironmentError(\"Global diagrams context not set up\")\n\n        if self._diagram.autolabel:\n            prefix = self.__class__.__name__\n            if self.label:\n                self.label = prefix + \"\\n\" + self.label\n            else:\n                self.label = prefix\n\n        # fmt: off\n        # If a node has an icon, increase the height slightly to avoid\n        # that label being spanned between icon image and white space.\n        # Increase the height by the number of new lines included in the label.\n        padding = 0.4 * (self.label.count('\\n'))\n        self._attrs = {\n            \"shape\": \"none\",\n            \"height\": str(self._height + padding),\n            \"image\": self._load_icon(),\n        } if self._icon else {}\n\n        # fmt: on\n        self._attrs.update(attrs)\n\n        self._cluster = getcluster()\n\n        # If a node is in the cluster context, add it to cluster.\n        if self._cluster:\n            self._cluster.node(self._id, self.label, **self._attrs)\n        else:\n            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f\"<{self._provider}.{self._type}.{_name}>\"\n\n    def __sub__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n        \"\"\"Implement Self - Node, Self - [Nodes] and Self - Edge.\"\"\"\n        if isinstance(other, list):\n            for node in other:\n                self.connect(node, Edge(self))\n            return other\n        elif isinstance(other, Node):\n            return self.connect(other, Edge(self))\n        else:\n            other.node = self\n            return other\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]):\n        \"\"\"Called for [Nodes] and [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        for o in other:\n            if isinstance(o, Edge):\n                o.connect(self)\n            else:\n                o.connect(self, Edge(self))\n        return self\n\n    def __rshift__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n        \"\"\"Implements Self >> Node, Self >> [Nodes] and Self Edge.\"\"\"\n        if isinstance(other, list):\n            for node in other:\n                self.connect(node, Edge(self, forward=True))\n            return other\n        elif isinstance(other, Node):\n            return self.connect(other, Edge(self, forward=True))\n        else:\n            other.forward = True\n            other.node = self\n            return other\n\n    def __lshift__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n        \"\"\"Implements Self << Node, Self << [Nodes] and Self << Edge.\"\"\"\n        if isinstance(other, list):\n            for node in other:\n                self.connect(node, Edge(self, reverse=True))\n            return other\n        elif isinstance(other, Node):\n            return self.connect(other, Edge(self, reverse=True))\n        else:\n            other.reverse = True\n            return other.connect(self)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]):\n        \"\"\"Called for [Nodes] and [Edges] >> Self because list don't have __rshift__ operators.\"\"\"\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = True\n                o.connect(self)\n            else:\n                o.connect(self, Edge(self, forward=True))\n        return self\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]):\n        \"\"\"Called for [Nodes] << Self because list of Nodes don't have __lshift__ operators.\"\"\"\n        for o in other:\n            if isinstance(o, Edge):\n                o.reverse = True\n                o.connect(self)\n            else:\n                o.connect(self, Edge(self, reverse=True))\n        return self\n\n    @property\n    def nodeid(self):\n        return self._id\n\n    # TODO: option for adding flow description to the connection edge\n    def connect(self, node: \"Node\", edge: \"Edge\"):\n        \"\"\"Connect to other node.\n\n        :param node: Other node instance.\n        :param edge: Type of the edge.\n        :return: Connected node.\n        \"\"\"\n        if not isinstance(node, Node):\n            ValueError(f\"{node} is not a valid Node\")\n        if not isinstance(edge, Edge):\n            ValueError(f\"{edge} is not a valid Edge\")\n        # An edge must be added on the global diagrams, not a cluster.\n        self._diagram.connect(self, node, edge)\n        return node\n\n    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:\n    \"\"\"Edge represents an edge between two nodes.\"\"\"\n\n    _default_edge_attrs = {\n        \"fontcolor\": \"#2D3436\",\n        \"fontname\": \"Sans-Serif\",\n        \"fontsize\": \"13\",\n    }\n\n    def __init__(\n        self,\n        node: \"Node\" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = \"\",\n        color: str = \"\",\n        style: str = \"\",\n        **attrs: Dict,\n    ):\n        \"\"\"Edge represents an edge between two nodes.\n\n        :param node: Parent node.\n        :param forward: Points forward.\n        :param reverse: Points backward.\n        :param label: Edge label.\n        :param color: Edge color.\n        :param style: Edge style.\n        :param attrs: Other edge attributes\n        \"\"\"\n        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n\n        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse\n                self._attrs = o.attrs.copy()\n                result.append(o)\n            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)\n            else:\n                self.node = other\n                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:\n            direction = \"back\"\n        else:\n            direction = \"none\"\n        return {**self._attrs, \"dir\": direction}\n\n\nGroup = Cluster\n", "diagrams/custom/__init__.py": "\"\"\"\nCustom provides the possibility of load an image to be presented as a node.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass Custom(Node):\n    _provider = \"custom\"\n    _type = \"custom\"\n    _icon_dir = None\n\n    fontcolor = \"#ffffff\"\n\n    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)\n", "diagrams/firebase/extentions.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Firebase\n\n\nclass _Extentions(_Firebase):\n    _type = \"extentions\"\n    _icon_dir = \"resources/firebase/extentions\"\n\n\nclass Extensions(_Extentions):\n    _icon = \"extensions.png\"\n\n\n# Aliases\n", "diagrams/firebase/base.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Firebase\n\n\nclass _Base(_Firebase):\n    _type = \"base\"\n    _icon_dir = \"resources/firebase/base\"\n\n\nclass Firebase(_Base):\n    _icon = \"firebase.png\"\n\n\n# Aliases\n", "diagrams/firebase/grow.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Firebase\n\n\nclass _Grow(_Firebase):\n    _type = \"grow\"\n    _icon_dir = \"resources/firebase/grow\"\n\n\nclass ABTesting(_Grow):\n    _icon = \"ab-testing.png\"\n\n\nclass AppIndexing(_Grow):\n    _icon = \"app-indexing.png\"\n\n\nclass DynamicLinks(_Grow):\n    _icon = \"dynamic-links.png\"\n\n\nclass InAppMessaging(_Grow):\n    _icon = \"in-app-messaging.png\"\n\n\nclass Invites(_Grow):\n    _icon = \"invites.png\"\n\n\nclass Messaging(_Grow):\n    _icon = \"messaging.png\"\n\n\nclass Predictions(_Grow):\n    _icon = \"predictions.png\"\n\n\nclass RemoteConfig(_Grow):\n    _icon = \"remote-config.png\"\n\n\n# Aliases\n\nFCM = Messaging\n", "diagrams/firebase/develop.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Firebase\n\n\nclass _Develop(_Firebase):\n    _type = \"develop\"\n    _icon_dir = \"resources/firebase/develop\"\n\n\nclass Authentication(_Develop):\n    _icon = \"authentication.png\"\n\n\nclass Firestore(_Develop):\n    _icon = \"firestore.png\"\n\n\nclass Functions(_Develop):\n    _icon = \"functions.png\"\n\n\nclass Hosting(_Develop):\n    _icon = \"hosting.png\"\n\n\nclass MLKit(_Develop):\n    _icon = \"ml-kit.png\"\n\n\nclass RealtimeDatabase(_Develop):\n    _icon = \"realtime-database.png\"\n\n\nclass Storage(_Develop):\n    _icon = \"storage.png\"\n\n\n# Aliases\n", "diagrams/firebase/quality.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Firebase\n\n\nclass _Quality(_Firebase):\n    _type = \"quality\"\n    _icon_dir = \"resources/firebase/quality\"\n\n\nclass AppDistribution(_Quality):\n    _icon = \"app-distribution.png\"\n\n\nclass CrashReporting(_Quality):\n    _icon = \"crash-reporting.png\"\n\n\nclass Crashlytics(_Quality):\n    _icon = \"crashlytics.png\"\n\n\nclass PerformanceMonitoring(_Quality):\n    _icon = \"performance-monitoring.png\"\n\n\nclass TestLab(_Quality):\n    _icon = \"test-lab.png\"\n\n\n# Aliases\n", "diagrams/firebase/__init__.py": "\"\"\"\nFirebase provides a set of services for Firebase provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _Firebase(Node):\n    _provider = \"firebase\"\n    _icon_dir = \"resources/firebase\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/elastic/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Security(_Elastic):\n    _type = \"security\"\n    _icon_dir = \"resources/elastic/security\"\n\n\nclass Endpoint(_Security):\n    _icon = \"endpoint.png\"\n\n\nclass Security(_Security):\n    _icon = \"security.png\"\n\n\nclass SIEM(_Security):\n    _icon = \"siem.png\"\n\n\nclass Xdr(_Security):\n    _icon = \"xdr.png\"\n\n\n# Aliases\n", "diagrams/elastic/agent.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Agent(_Elastic):\n    _type = \"agent\"\n    _icon_dir = \"resources/elastic/agent\"\n\n\nclass Agent(_Agent):\n    _icon = \"agent.png\"\n\n\nclass Endpoint(_Agent):\n    _icon = \"endpoint.png\"\n\n\nclass Fleet(_Agent):\n    _icon = \"fleet.png\"\n\n\nclass Integrations(_Agent):\n    _icon = \"integrations.png\"\n\n\n# Aliases\n", "diagrams/elastic/beats.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Beats(_Elastic):\n    _type = \"beats\"\n    _icon_dir = \"resources/elastic/beats\"\n\n\nclass APM(_Beats):\n    _icon = \"apm.png\"\n\n\nclass Auditbeat(_Beats):\n    _icon = \"auditbeat.png\"\n\n\nclass Filebeat(_Beats):\n    _icon = \"filebeat.png\"\n\n\nclass Functionbeat(_Beats):\n    _icon = \"functionbeat.png\"\n\n\nclass Heartbeat(_Beats):\n    _icon = \"heartbeat.png\"\n\n\nclass Metricbeat(_Beats):\n    _icon = \"metricbeat.png\"\n\n\nclass Packetbeat(_Beats):\n    _icon = \"packetbeat.png\"\n\n\nclass Winlogbeat(_Beats):\n    _icon = \"winlogbeat.png\"\n\n\n# Aliases\n", "diagrams/elastic/orchestration.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Orchestration(_Elastic):\n    _type = \"orchestration\"\n    _icon_dir = \"resources/elastic/orchestration\"\n\n\nclass ECE(_Orchestration):\n    _icon = \"ece.png\"\n\n\nclass ECK(_Orchestration):\n    _icon = \"eck.png\"\n\n\n# Aliases\n", "diagrams/elastic/enterprisesearch.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Enterprisesearch(_Elastic):\n    _type = \"enterprisesearch\"\n    _icon_dir = \"resources/elastic/enterprisesearch\"\n\n\nclass AppSearch(_Enterprisesearch):\n    _icon = \"app-search.png\"\n\n\nclass Crawler(_Enterprisesearch):\n    _icon = \"crawler.png\"\n\n\nclass EnterpriseSearch(_Enterprisesearch):\n    _icon = \"enterprise-search.png\"\n\n\nclass SiteSearch(_Enterprisesearch):\n    _icon = \"site-search.png\"\n\n\nclass WorkplaceSearch(_Enterprisesearch):\n    _icon = \"workplace-search.png\"\n\n\n# Aliases\n", "diagrams/elastic/saas.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Saas(_Elastic):\n    _type = \"saas\"\n    _icon_dir = \"resources/elastic/saas\"\n\n\nclass Cloud(_Saas):\n    _icon = \"cloud.png\"\n\n\nclass Elastic(_Saas):\n    _icon = \"elastic.png\"\n\n\n# Aliases\n", "diagrams/elastic/observability.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Observability(_Elastic):\n    _type = \"observability\"\n    _icon_dir = \"resources/elastic/observability\"\n\n\nclass APM(_Observability):\n    _icon = \"apm.png\"\n\n\nclass Logs(_Observability):\n    _icon = \"logs.png\"\n\n\nclass Metrics(_Observability):\n    _icon = \"metrics.png\"\n\n\nclass Observability(_Observability):\n    _icon = \"observability.png\"\n\n\nclass Uptime(_Observability):\n    _icon = \"uptime.png\"\n\n\n# Aliases\n", "diagrams/elastic/__init__.py": "\"\"\"\nElastic provides a set of general elastic services.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _Elastic(Node):\n    _provider = \"elastic\"\n    _icon_dir = \"resources/elastic\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/elastic/elasticsearch.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Elastic\n\n\nclass _Elasticsearch(_Elastic):\n    _type = \"elasticsearch\"\n    _icon_dir = \"resources/elastic/elasticsearch\"\n\n\nclass Alerting(_Elasticsearch):\n    _icon = \"alerting.png\"\n\n\nclass Beats(_Elasticsearch):\n    _icon = \"beats.png\"\n\n\nclass Elasticsearch(_Elasticsearch):\n    _icon = \"elasticsearch.png\"\n\n\nclass Kibana(_Elasticsearch):\n    _icon = \"kibana.png\"\n\n\nclass LogstashPipeline(_Elasticsearch):\n    _icon = \"logstash-pipeline.png\"\n\n\nclass Logstash(_Elasticsearch):\n    _icon = \"logstash.png\"\n\n\nclass MachineLearning(_Elasticsearch):\n    _icon = \"machine-learning.png\"\n\n\nclass MapServices(_Elasticsearch):\n    _icon = \"map-services.png\"\n\n\nclass Maps(_Elasticsearch):\n    _icon = \"maps.png\"\n\n\nclass Monitoring(_Elasticsearch):\n    _icon = \"monitoring.png\"\n\n\nclass SearchableSnapshots(_Elasticsearch):\n    _icon = \"searchable-snapshots.png\"\n\n\nclass SecuritySettings(_Elasticsearch):\n    _icon = \"security-settings.png\"\n\n\nclass SQL(_Elasticsearch):\n    _icon = \"sql.png\"\n\n\nclass Stack(_Elasticsearch):\n    _icon = \"stack.png\"\n\n\n# Aliases\n\nElasticSearch = Elasticsearch\nLogStash = Logstash\nML = MachineLearning\n", "diagrams/gcp/analytics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Analytics(_GCP):\n    _type = \"analytics\"\n    _icon_dir = \"resources/gcp/analytics\"\n\n\nclass Bigquery(_Analytics):\n    _icon = \"bigquery.png\"\n\n\nclass Composer(_Analytics):\n    _icon = \"composer.png\"\n\n\nclass DataCatalog(_Analytics):\n    _icon = \"data-catalog.png\"\n\n\nclass DataFusion(_Analytics):\n    _icon = \"data-fusion.png\"\n\n\nclass Dataflow(_Analytics):\n    _icon = \"dataflow.png\"\n\n\nclass Datalab(_Analytics):\n    _icon = \"datalab.png\"\n\n\nclass Dataprep(_Analytics):\n    _icon = \"dataprep.png\"\n\n\nclass Dataproc(_Analytics):\n    _icon = \"dataproc.png\"\n\n\nclass Genomics(_Analytics):\n    _icon = \"genomics.png\"\n\n\nclass Pubsub(_Analytics):\n    _icon = \"pubsub.png\"\n\n\n# Aliases\n\nBigQuery = Bigquery\nPubSub = Pubsub\n", "diagrams/gcp/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Security(_GCP):\n    _type = \"security\"\n    _icon_dir = \"resources/gcp/security\"\n\n\nclass Iam(_Security):\n    _icon = \"iam.png\"\n\n\nclass IAP(_Security):\n    _icon = \"iap.png\"\n\n\nclass KeyManagementService(_Security):\n    _icon = \"key-management-service.png\"\n\n\nclass ResourceManager(_Security):\n    _icon = \"resource-manager.png\"\n\n\nclass SecurityCommandCenter(_Security):\n    _icon = \"security-command-center.png\"\n\n\nclass SecurityScanner(_Security):\n    _icon = \"security-scanner.png\"\n\n\n# Aliases\n\nKMS = KeyManagementService\nSCC = SecurityCommandCenter\n", "diagrams/gcp/api.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _API(_GCP):\n    _type = \"api\"\n    _icon_dir = \"resources/gcp/api\"\n\n\nclass APIGateway(_API):\n    _icon = \"api-gateway.png\"\n\n\nclass Apigee(_API):\n    _icon = \"apigee.png\"\n\n\nclass Endpoints(_API):\n    _icon = \"endpoints.png\"\n\n\n# Aliases\n", "diagrams/gcp/ml.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _ML(_GCP):\n    _type = \"ml\"\n    _icon_dir = \"resources/gcp/ml\"\n\n\nclass AdvancedSolutionsLab(_ML):\n    _icon = \"advanced-solutions-lab.png\"\n\n\nclass AIHub(_ML):\n    _icon = \"ai-hub.png\"\n\n\nclass AIPlatformDataLabelingService(_ML):\n    _icon = \"ai-platform-data-labeling-service.png\"\n\n\nclass AIPlatform(_ML):\n    _icon = \"ai-platform.png\"\n\n\nclass AutomlNaturalLanguage(_ML):\n    _icon = \"automl-natural-language.png\"\n\n\nclass AutomlTables(_ML):\n    _icon = \"automl-tables.png\"\n\n\nclass AutomlTranslation(_ML):\n    _icon = \"automl-translation.png\"\n\n\nclass AutomlVideoIntelligence(_ML):\n    _icon = \"automl-video-intelligence.png\"\n\n\nclass AutomlVision(_ML):\n    _icon = \"automl-vision.png\"\n\n\nclass Automl(_ML):\n    _icon = \"automl.png\"\n\n\nclass DialogFlowEnterpriseEdition(_ML):\n    _icon = \"dialog-flow-enterprise-edition.png\"\n\n\nclass InferenceAPI(_ML):\n    _icon = \"inference-api.png\"\n\n\nclass JobsAPI(_ML):\n    _icon = \"jobs-api.png\"\n\n\nclass NaturalLanguageAPI(_ML):\n    _icon = \"natural-language-api.png\"\n\n\nclass RecommendationsAI(_ML):\n    _icon = \"recommendations-ai.png\"\n\n\nclass SpeechToText(_ML):\n    _icon = \"speech-to-text.png\"\n\n\nclass TextToSpeech(_ML):\n    _icon = \"text-to-speech.png\"\n\n\nclass TPU(_ML):\n    _icon = \"tpu.png\"\n\n\nclass TranslationAPI(_ML):\n    _icon = \"translation-api.png\"\n\n\nclass VideoIntelligenceAPI(_ML):\n    _icon = \"video-intelligence-api.png\"\n\n\nclass VisionAPI(_ML):\n    _icon = \"vision-api.png\"\n\n\n# Aliases\n\nAutoML = Automl\nNLAPI = NaturalLanguageAPI\nSTT = SpeechToText\nTTS = TextToSpeech\n", "diagrams/gcp/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Compute(_GCP):\n    _type = \"compute\"\n    _icon_dir = \"resources/gcp/compute\"\n\n\nclass AppEngine(_Compute):\n    _icon = \"app-engine.png\"\n\n\nclass ComputeEngine(_Compute):\n    _icon = \"compute-engine.png\"\n\n\nclass ContainerOptimizedOS(_Compute):\n    _icon = \"container-optimized-os.png\"\n\n\nclass Functions(_Compute):\n    _icon = \"functions.png\"\n\n\nclass GKEOnPrem(_Compute):\n    _icon = \"gke-on-prem.png\"\n\n\nclass GPU(_Compute):\n    _icon = \"gpu.png\"\n\n\nclass KubernetesEngine(_Compute):\n    _icon = \"kubernetes-engine.png\"\n\n\nclass Run(_Compute):\n    _icon = \"run.png\"\n\n\n# Aliases\n\nGAE = AppEngine\nGCF = Functions\nGCE = ComputeEngine\nGKE = KubernetesEngine\n", "diagrams/gcp/devtools.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Devtools(_GCP):\n    _type = \"devtools\"\n    _icon_dir = \"resources/gcp/devtools\"\n\n\nclass Build(_Devtools):\n    _icon = \"build.png\"\n\n\nclass CodeForIntellij(_Devtools):\n    _icon = \"code-for-intellij.png\"\n\n\nclass Code(_Devtools):\n    _icon = \"code.png\"\n\n\nclass ContainerRegistry(_Devtools):\n    _icon = \"container-registry.png\"\n\n\nclass GradleAppEnginePlugin(_Devtools):\n    _icon = \"gradle-app-engine-plugin.png\"\n\n\nclass IdePlugins(_Devtools):\n    _icon = \"ide-plugins.png\"\n\n\nclass MavenAppEnginePlugin(_Devtools):\n    _icon = \"maven-app-engine-plugin.png\"\n\n\nclass Scheduler(_Devtools):\n    _icon = \"scheduler.png\"\n\n\nclass SDK(_Devtools):\n    _icon = \"sdk.png\"\n\n\nclass SourceRepositories(_Devtools):\n    _icon = \"source-repositories.png\"\n\n\nclass Tasks(_Devtools):\n    _icon = \"tasks.png\"\n\n\nclass TestLab(_Devtools):\n    _icon = \"test-lab.png\"\n\n\nclass ToolsForEclipse(_Devtools):\n    _icon = \"tools-for-eclipse.png\"\n\n\nclass ToolsForPowershell(_Devtools):\n    _icon = \"tools-for-powershell.png\"\n\n\nclass ToolsForVisualStudio(_Devtools):\n    _icon = \"tools-for-visual-studio.png\"\n\n\n# Aliases\n\nGCR = ContainerRegistry\n", "diagrams/gcp/iot.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Iot(_GCP):\n    _type = \"iot\"\n    _icon_dir = \"resources/gcp/iot\"\n\n\nclass IotCore(_Iot):\n    _icon = \"iot-core.png\"\n\n\n# Aliases\n", "diagrams/gcp/migration.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Migration(_GCP):\n    _type = \"migration\"\n    _icon_dir = \"resources/gcp/migration\"\n\n\nclass TransferAppliance(_Migration):\n    _icon = \"transfer-appliance.png\"\n\n\n# Aliases\n", "diagrams/gcp/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Database(_GCP):\n    _type = \"database\"\n    _icon_dir = \"resources/gcp/database\"\n\n\nclass Bigtable(_Database):\n    _icon = \"bigtable.png\"\n\n\nclass Datastore(_Database):\n    _icon = \"datastore.png\"\n\n\nclass Firestore(_Database):\n    _icon = \"firestore.png\"\n\n\nclass Memorystore(_Database):\n    _icon = \"memorystore.png\"\n\n\nclass Spanner(_Database):\n    _icon = \"spanner.png\"\n\n\nclass SQL(_Database):\n    _icon = \"sql.png\"\n\n\n# Aliases\n\nBigTable = Bigtable\n", "diagrams/gcp/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Storage(_GCP):\n    _type = \"storage\"\n    _icon_dir = \"resources/gcp/storage\"\n\n\nclass Filestore(_Storage):\n    _icon = \"filestore.png\"\n\n\nclass PersistentDisk(_Storage):\n    _icon = \"persistent-disk.png\"\n\n\nclass Storage(_Storage):\n    _icon = \"storage.png\"\n\n\n# Aliases\n\nGCS = Storage\n", "diagrams/gcp/__init__.py": "\"\"\"\nGCP provides a set of services for Google Cloud Platform provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _GCP(Node):\n    _provider = \"gcp\"\n    _icon_dir = \"resources/gcp\"\n\n    fontcolor = \"#2d3436\"\n", "diagrams/gcp/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Network(_GCP):\n    _type = \"network\"\n    _icon_dir = \"resources/gcp/network\"\n\n\nclass Armor(_Network):\n    _icon = \"armor.png\"\n\n\nclass CDN(_Network):\n    _icon = \"cdn.png\"\n\n\nclass DedicatedInterconnect(_Network):\n    _icon = \"dedicated-interconnect.png\"\n\n\nclass DNS(_Network):\n    _icon = \"dns.png\"\n\n\nclass ExternalIpAddresses(_Network):\n    _icon = \"external-ip-addresses.png\"\n\n\nclass FirewallRules(_Network):\n    _icon = \"firewall-rules.png\"\n\n\nclass LoadBalancing(_Network):\n    _icon = \"load-balancing.png\"\n\n\nclass NAT(_Network):\n    _icon = \"nat.png\"\n\n\nclass Network(_Network):\n    _icon = \"network.png\"\n\n\nclass PartnerInterconnect(_Network):\n    _icon = \"partner-interconnect.png\"\n\n\nclass PremiumNetworkTier(_Network):\n    _icon = \"premium-network-tier.png\"\n\n\nclass Router(_Network):\n    _icon = \"router.png\"\n\n\nclass Routes(_Network):\n    _icon = \"routes.png\"\n\n\nclass StandardNetworkTier(_Network):\n    _icon = \"standard-network-tier.png\"\n\n\nclass TrafficDirector(_Network):\n    _icon = \"traffic-director.png\"\n\n\nclass VirtualPrivateCloud(_Network):\n    _icon = \"virtual-private-cloud.png\"\n\n\nclass VPN(_Network):\n    _icon = \"vpn.png\"\n\n\n# Aliases\n\nVPC = VirtualPrivateCloud\n", "diagrams/gcp/operations.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _GCP\n\n\nclass _Operations(_GCP):\n    _type = \"operations\"\n    _icon_dir = \"resources/gcp/operations\"\n\n\nclass Logging(_Operations):\n    _icon = \"logging.png\"\n\n\nclass Monitoring(_Operations):\n    _icon = \"monitoring.png\"\n\n\n# Aliases\n", "diagrams/oci/connectivity.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Connectivity(_OCI):\n    _type = \"connectivity\"\n    _icon_dir = \"resources/oci/connectivity\"\n\n\nclass BackboneWhite(_Connectivity):\n    _icon = \"backbone-white.png\"\n\n\nclass Backbone(_Connectivity):\n    _icon = \"backbone.png\"\n\n\nclass CDNWhite(_Connectivity):\n    _icon = \"cdn-white.png\"\n\n\nclass CDN(_Connectivity):\n    _icon = \"cdn.png\"\n\n\nclass CustomerDatacenter(_Connectivity):\n    _icon = \"customer-datacenter.png\"\n\n\nclass CustomerDatacntrWhite(_Connectivity):\n    _icon = \"customer-datacntr-white.png\"\n\n\nclass CustomerPremiseWhite(_Connectivity):\n    _icon = \"customer-premise-white.png\"\n\n\nclass CustomerPremise(_Connectivity):\n    _icon = \"customer-premise.png\"\n\n\nclass DisconnectedRegionsWhite(_Connectivity):\n    _icon = \"disconnected-regions-white.png\"\n\n\nclass DisconnectedRegions(_Connectivity):\n    _icon = \"disconnected-regions.png\"\n\n\nclass DNSWhite(_Connectivity):\n    _icon = \"dns-white.png\"\n\n\nclass DNS(_Connectivity):\n    _icon = \"dns.png\"\n\n\nclass FastConnectWhite(_Connectivity):\n    _icon = \"fast-connect-white.png\"\n\n\nclass FastConnect(_Connectivity):\n    _icon = \"fast-connect.png\"\n\n\nclass NATGatewayWhite(_Connectivity):\n    _icon = \"nat-gateway-white.png\"\n\n\nclass NATGateway(_Connectivity):\n    _icon = \"nat-gateway.png\"\n\n\nclass VPNWhite(_Connectivity):\n    _icon = \"vpn-white.png\"\n\n\nclass VPN(_Connectivity):\n    _icon = \"vpn.png\"\n\n\n# Aliases\n", "diagrams/oci/devops.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Devops(_OCI):\n    _type = \"devops\"\n    _icon_dir = \"resources/oci/devops\"\n\n\nclass APIGatewayWhite(_Devops):\n    _icon = \"api-gateway-white.png\"\n\n\nclass APIGateway(_Devops):\n    _icon = \"api-gateway.png\"\n\n\nclass APIServiceWhite(_Devops):\n    _icon = \"api-service-white.png\"\n\n\nclass APIService(_Devops):\n    _icon = \"api-service.png\"\n\n\nclass ResourceMgmtWhite(_Devops):\n    _icon = \"resource-mgmt-white.png\"\n\n\nclass ResourceMgmt(_Devops):\n    _icon = \"resource-mgmt.png\"\n\n\n# Aliases\n", "diagrams/oci/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Security(_OCI):\n    _type = \"security\"\n    _icon_dir = \"resources/oci/security\"\n\n\nclass CloudGuardWhite(_Security):\n    _icon = \"cloud-guard-white.png\"\n\n\nclass CloudGuard(_Security):\n    _icon = \"cloud-guard.png\"\n\n\nclass DDOSWhite(_Security):\n    _icon = \"ddos-white.png\"\n\n\nclass DDOS(_Security):\n    _icon = \"ddos.png\"\n\n\nclass EncryptionWhite(_Security):\n    _icon = \"encryption-white.png\"\n\n\nclass Encryption(_Security):\n    _icon = \"encryption.png\"\n\n\nclass IDAccessWhite(_Security):\n    _icon = \"id-access-white.png\"\n\n\nclass IDAccess(_Security):\n    _icon = \"id-access.png\"\n\n\nclass KeyManagementWhite(_Security):\n    _icon = \"key-management-white.png\"\n\n\nclass KeyManagement(_Security):\n    _icon = \"key-management.png\"\n\n\nclass MaxSecurityZoneWhite(_Security):\n    _icon = \"max-security-zone-white.png\"\n\n\nclass MaxSecurityZone(_Security):\n    _icon = \"max-security-zone.png\"\n\n\nclass VaultWhite(_Security):\n    _icon = \"vault-white.png\"\n\n\nclass Vault(_Security):\n    _icon = \"vault.png\"\n\n\nclass WAFWhite(_Security):\n    _icon = \"waf-white.png\"\n\n\nclass WAF(_Security):\n    _icon = \"waf.png\"\n\n\n# Aliases\n", "diagrams/oci/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Compute(_OCI):\n    _type = \"compute\"\n    _icon_dir = \"resources/oci/compute\"\n\n\nclass AutoscaleWhite(_Compute):\n    _icon = \"autoscale-white.png\"\n\n\nclass Autoscale(_Compute):\n    _icon = \"autoscale.png\"\n\n\nclass BMWhite(_Compute):\n    _icon = \"bm-white.png\"\n\n\nclass BM(_Compute):\n    _icon = \"bm.png\"\n\n\nclass ContainerWhite(_Compute):\n    _icon = \"container-white.png\"\n\n\nclass Container(_Compute):\n    _icon = \"container.png\"\n\n\nclass FunctionsWhite(_Compute):\n    _icon = \"functions-white.png\"\n\n\nclass Functions(_Compute):\n    _icon = \"functions.png\"\n\n\nclass InstancePoolsWhite(_Compute):\n    _icon = \"instance-pools-white.png\"\n\n\nclass InstancePools(_Compute):\n    _icon = \"instance-pools.png\"\n\n\nclass OCIRWhite(_Compute):\n    _icon = \"ocir-white.png\"\n\n\nclass OCIR(_Compute):\n    _icon = \"ocir.png\"\n\n\nclass OKEWhite(_Compute):\n    _icon = \"oke-white.png\"\n\n\nclass OKE(_Compute):\n    _icon = \"oke.png\"\n\n\nclass VMWhite(_Compute):\n    _icon = \"vm-white.png\"\n\n\nclass VM(_Compute):\n    _icon = \"vm.png\"\n\n\n# Aliases\n\nVirtualMachine = VM\nVirtualMachineWhite = VMWhite\nBareMetal = BM\nBareMetalWhite = BMWhite\nOCIRegistry = OCIR\nOCIRegistryWhite = OCIRWhite\nContainerEngine = OKE\nContainerEngineWhite = OKEWhite\n", "diagrams/oci/monitoring.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Monitoring(_OCI):\n    _type = \"monitoring\"\n    _icon_dir = \"resources/oci/monitoring\"\n\n\nclass AlarmWhite(_Monitoring):\n    _icon = \"alarm-white.png\"\n\n\nclass Alarm(_Monitoring):\n    _icon = \"alarm.png\"\n\n\nclass EmailWhite(_Monitoring):\n    _icon = \"email-white.png\"\n\n\nclass Email(_Monitoring):\n    _icon = \"email.png\"\n\n\nclass EventsWhite(_Monitoring):\n    _icon = \"events-white.png\"\n\n\nclass Events(_Monitoring):\n    _icon = \"events.png\"\n\n\nclass HealthCheckWhite(_Monitoring):\n    _icon = \"health-check-white.png\"\n\n\nclass HealthCheck(_Monitoring):\n    _icon = \"health-check.png\"\n\n\nclass NotificationsWhite(_Monitoring):\n    _icon = \"notifications-white.png\"\n\n\nclass Notifications(_Monitoring):\n    _icon = \"notifications.png\"\n\n\nclass QueueWhite(_Monitoring):\n    _icon = \"queue-white.png\"\n\n\nclass Queue(_Monitoring):\n    _icon = \"queue.png\"\n\n\nclass SearchWhite(_Monitoring):\n    _icon = \"search-white.png\"\n\n\nclass Search(_Monitoring):\n    _icon = \"search.png\"\n\n\nclass TelemetryWhite(_Monitoring):\n    _icon = \"telemetry-white.png\"\n\n\nclass Telemetry(_Monitoring):\n    _icon = \"telemetry.png\"\n\n\nclass WorkflowWhite(_Monitoring):\n    _icon = \"workflow-white.png\"\n\n\nclass Workflow(_Monitoring):\n    _icon = \"workflow.png\"\n\n\n# Aliases\n", "diagrams/oci/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Database(_OCI):\n    _type = \"database\"\n    _icon_dir = \"resources/oci/database\"\n\n\nclass AutonomousWhite(_Database):\n    _icon = \"autonomous-white.png\"\n\n\nclass Autonomous(_Database):\n    _icon = \"autonomous.png\"\n\n\nclass BigdataServiceWhite(_Database):\n    _icon = \"bigdata-service-white.png\"\n\n\nclass BigdataService(_Database):\n    _icon = \"bigdata-service.png\"\n\n\nclass DatabaseServiceWhite(_Database):\n    _icon = \"database-service-white.png\"\n\n\nclass DatabaseService(_Database):\n    _icon = \"database-service.png\"\n\n\nclass DataflowApacheWhite(_Database):\n    _icon = \"dataflow-apache-white.png\"\n\n\nclass DataflowApache(_Database):\n    _icon = \"dataflow-apache.png\"\n\n\nclass DcatWhite(_Database):\n    _icon = \"dcat-white.png\"\n\n\nclass Dcat(_Database):\n    _icon = \"dcat.png\"\n\n\nclass DisWhite(_Database):\n    _icon = \"dis-white.png\"\n\n\nclass Dis(_Database):\n    _icon = \"dis.png\"\n\n\nclass DMSWhite(_Database):\n    _icon = \"dms-white.png\"\n\n\nclass DMS(_Database):\n    _icon = \"dms.png\"\n\n\nclass ScienceWhite(_Database):\n    _icon = \"science-white.png\"\n\n\nclass Science(_Database):\n    _icon = \"science.png\"\n\n\nclass StreamWhite(_Database):\n    _icon = \"stream-white.png\"\n\n\nclass Stream(_Database):\n    _icon = \"stream.png\"\n\n\n# Aliases\n\nADB = Autonomous\nADBWhite = AutonomousWhite\nDBService = DatabaseService\nDBServiceWhite = DatabaseServiceWhite\n", "diagrams/oci/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Storage(_OCI):\n    _type = \"storage\"\n    _icon_dir = \"resources/oci/storage\"\n\n\nclass BackupRestoreWhite(_Storage):\n    _icon = \"backup-restore-white.png\"\n\n\nclass BackupRestore(_Storage):\n    _icon = \"backup-restore.png\"\n\n\nclass BlockStorageCloneWhite(_Storage):\n    _icon = \"block-storage-clone-white.png\"\n\n\nclass BlockStorageClone(_Storage):\n    _icon = \"block-storage-clone.png\"\n\n\nclass BlockStorageWhite(_Storage):\n    _icon = \"block-storage-white.png\"\n\n\nclass BlockStorage(_Storage):\n    _icon = \"block-storage.png\"\n\n\nclass BucketsWhite(_Storage):\n    _icon = \"buckets-white.png\"\n\n\nclass Buckets(_Storage):\n    _icon = \"buckets.png\"\n\n\nclass DataTransferWhite(_Storage):\n    _icon = \"data-transfer-white.png\"\n\n\nclass DataTransfer(_Storage):\n    _icon = \"data-transfer.png\"\n\n\nclass ElasticPerformanceWhite(_Storage):\n    _icon = \"elastic-performance-white.png\"\n\n\nclass ElasticPerformance(_Storage):\n    _icon = \"elastic-performance.png\"\n\n\nclass FileStorageWhite(_Storage):\n    _icon = \"file-storage-white.png\"\n\n\nclass FileStorage(_Storage):\n    _icon = \"file-storage.png\"\n\n\nclass ObjectStorageWhite(_Storage):\n    _icon = \"object-storage-white.png\"\n\n\nclass ObjectStorage(_Storage):\n    _icon = \"object-storage.png\"\n\n\nclass StorageGatewayWhite(_Storage):\n    _icon = \"storage-gateway-white.png\"\n\n\nclass StorageGateway(_Storage):\n    _icon = \"storage-gateway.png\"\n\n\n# Aliases\n", "diagrams/oci/__init__.py": "\"\"\"\nOCI provides a set of services for Oracle Cloud Infrastructure provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _OCI(Node):\n    _provider = \"oci\"\n    _icon_dir = \"resources/oci\"\n\n    fontcolor = \"#312D2A\"\n", "diagrams/oci/governance.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Governance(_OCI):\n    _type = \"governance\"\n    _icon_dir = \"resources/oci/governance\"\n\n\nclass AuditWhite(_Governance):\n    _icon = \"audit-white.png\"\n\n\nclass Audit(_Governance):\n    _icon = \"audit.png\"\n\n\nclass CompartmentsWhite(_Governance):\n    _icon = \"compartments-white.png\"\n\n\nclass Compartments(_Governance):\n    _icon = \"compartments.png\"\n\n\nclass GroupsWhite(_Governance):\n    _icon = \"groups-white.png\"\n\n\nclass Groups(_Governance):\n    _icon = \"groups.png\"\n\n\nclass LoggingWhite(_Governance):\n    _icon = \"logging-white.png\"\n\n\nclass Logging(_Governance):\n    _icon = \"logging.png\"\n\n\nclass OCIDWhite(_Governance):\n    _icon = \"ocid-white.png\"\n\n\nclass OCID(_Governance):\n    _icon = \"ocid.png\"\n\n\nclass PoliciesWhite(_Governance):\n    _icon = \"policies-white.png\"\n\n\nclass Policies(_Governance):\n    _icon = \"policies.png\"\n\n\nclass TaggingWhite(_Governance):\n    _icon = \"tagging-white.png\"\n\n\nclass Tagging(_Governance):\n    _icon = \"tagging.png\"\n\n\n# Aliases\n", "diagrams/oci/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OCI\n\n\nclass _Network(_OCI):\n    _type = \"network\"\n    _icon_dir = \"resources/oci/network\"\n\n\nclass DrgWhite(_Network):\n    _icon = \"drg-white.png\"\n\n\nclass Drg(_Network):\n    _icon = \"drg.png\"\n\n\nclass FirewallWhite(_Network):\n    _icon = \"firewall-white.png\"\n\n\nclass Firewall(_Network):\n    _icon = \"firewall.png\"\n\n\nclass InternetGatewayWhite(_Network):\n    _icon = \"internet-gateway-white.png\"\n\n\nclass InternetGateway(_Network):\n    _icon = \"internet-gateway.png\"\n\n\nclass LoadBalancerWhite(_Network):\n    _icon = \"load-balancer-white.png\"\n\n\nclass LoadBalancer(_Network):\n    _icon = \"load-balancer.png\"\n\n\nclass RouteTableWhite(_Network):\n    _icon = \"route-table-white.png\"\n\n\nclass RouteTable(_Network):\n    _icon = \"route-table.png\"\n\n\nclass SecurityListsWhite(_Network):\n    _icon = \"security-lists-white.png\"\n\n\nclass SecurityLists(_Network):\n    _icon = \"security-lists.png\"\n\n\nclass ServiceGatewayWhite(_Network):\n    _icon = \"service-gateway-white.png\"\n\n\nclass ServiceGateway(_Network):\n    _icon = \"service-gateway.png\"\n\n\nclass VcnWhite(_Network):\n    _icon = \"vcn-white.png\"\n\n\nclass Vcn(_Network):\n    _icon = \"vcn.png\"\n\n\n# Aliases\n", "diagrams/generic/blank.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Blank(_Generic):\n    _type = \"blank\"\n    _icon_dir = \"resources/generic/blank\"\n\n\nclass Blank(_Blank):\n    _icon = \"blank.png\"\n\n\n# Aliases\n", "diagrams/generic/os.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Os(_Generic):\n    _type = \"os\"\n    _icon_dir = \"resources/generic/os\"\n\n\nclass Android(_Os):\n    _icon = \"android.png\"\n\n\nclass Centos(_Os):\n    _icon = \"centos.png\"\n\n\nclass Debian(_Os):\n    _icon = \"debian.png\"\n\n\nclass IOS(_Os):\n    _icon = \"ios.png\"\n\n\nclass LinuxGeneral(_Os):\n    _icon = \"linux-general.png\"\n\n\nclass Raspbian(_Os):\n    _icon = \"raspbian.png\"\n\n\nclass RedHat(_Os):\n    _icon = \"red-hat.png\"\n\n\nclass Suse(_Os):\n    _icon = \"suse.png\"\n\n\nclass Ubuntu(_Os):\n    _icon = \"ubuntu.png\"\n\n\nclass Windows(_Os):\n    _icon = \"windows.png\"\n\n\n# Aliases\n", "diagrams/generic/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Compute(_Generic):\n    _type = \"compute\"\n    _icon_dir = \"resources/generic/compute\"\n\n\nclass Rack(_Compute):\n    _icon = \"rack.png\"\n\n\n# Aliases\n", "diagrams/generic/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Database(_Generic):\n    _type = \"database\"\n    _icon_dir = \"resources/generic/database\"\n\n\nclass SQL(_Database):\n    _icon = \"sql.png\"\n\n\n# Aliases\n", "diagrams/generic/virtualization.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Virtualization(_Generic):\n    _type = \"virtualization\"\n    _icon_dir = \"resources/generic/virtualization\"\n\n\nclass Qemu(_Virtualization):\n    _icon = \"qemu.png\"\n\n\nclass Virtualbox(_Virtualization):\n    _icon = \"virtualbox.png\"\n\n\nclass Vmware(_Virtualization):\n    _icon = \"vmware.png\"\n\n\nclass XEN(_Virtualization):\n    _icon = \"xen.png\"\n\n\n# Aliases\n", "diagrams/generic/device.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Device(_Generic):\n    _type = \"device\"\n    _icon_dir = \"resources/generic/device\"\n\n\nclass Mobile(_Device):\n    _icon = \"mobile.png\"\n\n\nclass Tablet(_Device):\n    _icon = \"tablet.png\"\n\n\n# Aliases\n", "diagrams/generic/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Storage(_Generic):\n    _type = \"storage\"\n    _icon_dir = \"resources/generic/storage\"\n\n\nclass Storage(_Storage):\n    _icon = \"storage.png\"\n\n\n# Aliases\n", "diagrams/generic/place.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Place(_Generic):\n    _type = \"place\"\n    _icon_dir = \"resources/generic/place\"\n\n\nclass Datacenter(_Place):\n    _icon = \"datacenter.png\"\n\n\n# Aliases\n", "diagrams/generic/__init__.py": "\"\"\"\nGeneric provides the possibility of load an image to be presented as a node.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _Generic(Node):\n    provider = \"generic\"\n    _icon_dir = \"resources/generic\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/generic/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Generic\n\n\nclass _Network(_Generic):\n    _type = \"network\"\n    _icon_dir = \"resources/generic/network\"\n\n\nclass Firewall(_Network):\n    _icon = \"firewall.png\"\n\n\nclass Router(_Network):\n    _icon = \"router.png\"\n\n\nclass Subnet(_Network):\n    _icon = \"subnet.png\"\n\n\nclass Switch(_Network):\n    _icon = \"switch.png\"\n\n\nclass VPN(_Network):\n    _icon = \"vpn.png\"\n\n\n# Aliases\n", "diagrams/ibm/analytics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Analytics(_IBM):\n    _type = \"analytics\"\n    _icon_dir = \"resources/ibm/analytics\"\n\n\nclass Analytics(_Analytics):\n    _icon = \"analytics.png\"\n\n\nclass DataIntegration(_Analytics):\n    _icon = \"data-integration.png\"\n\n\nclass DataRepositories(_Analytics):\n    _icon = \"data-repositories.png\"\n\n\nclass DeviceAnalytics(_Analytics):\n    _icon = \"device-analytics.png\"\n\n\nclass StreamingComputing(_Analytics):\n    _icon = \"streaming-computing.png\"\n\n\n# Aliases\n", "diagrams/ibm/blockchain.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Blockchain(_IBM):\n    _type = \"blockchain\"\n    _icon_dir = \"resources/ibm/blockchain\"\n\n\nclass BlockchainDeveloper(_Blockchain):\n    _icon = \"blockchain-developer.png\"\n\n\nclass Blockchain(_Blockchain):\n    _icon = \"blockchain.png\"\n\n\nclass CertificateAuthority(_Blockchain):\n    _icon = \"certificate-authority.png\"\n\n\nclass ClientApplication(_Blockchain):\n    _icon = \"client-application.png\"\n\n\nclass Communication(_Blockchain):\n    _icon = \"communication.png\"\n\n\nclass Consensus(_Blockchain):\n    _icon = \"consensus.png\"\n\n\nclass EventListener(_Blockchain):\n    _icon = \"event-listener.png\"\n\n\nclass Event(_Blockchain):\n    _icon = \"event.png\"\n\n\nclass ExistingEnterpriseSystems(_Blockchain):\n    _icon = \"existing-enterprise-systems.png\"\n\n\nclass HyperledgerFabric(_Blockchain):\n    _icon = \"hyperledger-fabric.png\"\n\n\nclass KeyManagement(_Blockchain):\n    _icon = \"key-management.png\"\n\n\nclass Ledger(_Blockchain):\n    _icon = \"ledger.png\"\n\n\nclass MembershipServicesProviderApi(_Blockchain):\n    _icon = \"membership-services-provider-api.png\"\n\n\nclass Membership(_Blockchain):\n    _icon = \"membership.png\"\n\n\nclass MessageBus(_Blockchain):\n    _icon = \"message-bus.png\"\n\n\nclass Node(_Blockchain):\n    _icon = \"node.png\"\n\n\nclass Services(_Blockchain):\n    _icon = \"services.png\"\n\n\nclass SmartContract(_Blockchain):\n    _icon = \"smart-contract.png\"\n\n\nclass TransactionManager(_Blockchain):\n    _icon = \"transaction-manager.png\"\n\n\nclass Wallet(_Blockchain):\n    _icon = \"wallet.png\"\n\n\n# Aliases\n", "diagrams/ibm/devops.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Devops(_IBM):\n    _type = \"devops\"\n    _icon_dir = \"resources/ibm/devops\"\n\n\nclass ArtifactManagement(_Devops):\n    _icon = \"artifact-management.png\"\n\n\nclass BuildTest(_Devops):\n    _icon = \"build-test.png\"\n\n\nclass CodeEditor(_Devops):\n    _icon = \"code-editor.png\"\n\n\nclass CollaborativeDevelopment(_Devops):\n    _icon = \"collaborative-development.png\"\n\n\nclass ConfigurationManagement(_Devops):\n    _icon = \"configuration-management.png\"\n\n\nclass ContinuousDeploy(_Devops):\n    _icon = \"continuous-deploy.png\"\n\n\nclass ContinuousTesting(_Devops):\n    _icon = \"continuous-testing.png\"\n\n\nclass Devops(_Devops):\n    _icon = \"devops.png\"\n\n\nclass Provision(_Devops):\n    _icon = \"provision.png\"\n\n\nclass ReleaseManagement(_Devops):\n    _icon = \"release-management.png\"\n\n\n# Aliases\n", "diagrams/ibm/infrastructure.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Infrastructure(_IBM):\n    _type = \"infrastructure\"\n    _icon_dir = \"resources/ibm/infrastructure\"\n\n\nclass Channels(_Infrastructure):\n    _icon = \"channels.png\"\n\n\nclass CloudMessaging(_Infrastructure):\n    _icon = \"cloud-messaging.png\"\n\n\nclass Dashboard(_Infrastructure):\n    _icon = \"dashboard.png\"\n\n\nclass Diagnostics(_Infrastructure):\n    _icon = \"diagnostics.png\"\n\n\nclass EdgeServices(_Infrastructure):\n    _icon = \"edge-services.png\"\n\n\nclass EnterpriseMessaging(_Infrastructure):\n    _icon = \"enterprise-messaging.png\"\n\n\nclass EventFeed(_Infrastructure):\n    _icon = \"event-feed.png\"\n\n\nclass InfrastructureServices(_Infrastructure):\n    _icon = \"infrastructure-services.png\"\n\n\nclass InterserviceCommunication(_Infrastructure):\n    _icon = \"interservice-communication.png\"\n\n\nclass LoadBalancingRouting(_Infrastructure):\n    _icon = \"load-balancing-routing.png\"\n\n\nclass MicroservicesMesh(_Infrastructure):\n    _icon = \"microservices-mesh.png\"\n\n\nclass MobileBackend(_Infrastructure):\n    _icon = \"mobile-backend.png\"\n\n\nclass MobileProviderNetwork(_Infrastructure):\n    _icon = \"mobile-provider-network.png\"\n\n\nclass MonitoringLogging(_Infrastructure):\n    _icon = \"monitoring-logging.png\"\n\n\nclass Monitoring(_Infrastructure):\n    _icon = \"monitoring.png\"\n\n\nclass PeerServices(_Infrastructure):\n    _icon = \"peer-services.png\"\n\n\nclass ServiceDiscoveryConfiguration(_Infrastructure):\n    _icon = \"service-discovery-configuration.png\"\n\n\nclass TransformationConnectivity(_Infrastructure):\n    _icon = \"transformation-connectivity.png\"\n\n\n# Aliases\n", "diagrams/ibm/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Security(_IBM):\n    _type = \"security\"\n    _icon_dir = \"resources/ibm/security\"\n\n\nclass ApiSecurity(_Security):\n    _icon = \"api-security.png\"\n\n\nclass BlockchainSecurityService(_Security):\n    _icon = \"blockchain-security-service.png\"\n\n\nclass DataSecurity(_Security):\n    _icon = \"data-security.png\"\n\n\nclass Firewall(_Security):\n    _icon = \"firewall.png\"\n\n\nclass Gateway(_Security):\n    _icon = \"gateway.png\"\n\n\nclass GovernanceRiskCompliance(_Security):\n    _icon = \"governance-risk-compliance.png\"\n\n\nclass IdentityAccessManagement(_Security):\n    _icon = \"identity-access-management.png\"\n\n\nclass IdentityProvider(_Security):\n    _icon = \"identity-provider.png\"\n\n\nclass InfrastructureSecurity(_Security):\n    _icon = \"infrastructure-security.png\"\n\n\nclass PhysicalSecurity(_Security):\n    _icon = \"physical-security.png\"\n\n\nclass SecurityMonitoringIntelligence(_Security):\n    _icon = \"security-monitoring-intelligence.png\"\n\n\nclass SecurityServices(_Security):\n    _icon = \"security-services.png\"\n\n\nclass TrustendComputing(_Security):\n    _icon = \"trustend-computing.png\"\n\n\nclass Vpn(_Security):\n    _icon = \"vpn.png\"\n\n\n# Aliases\n", "diagrams/ibm/user.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _User(_IBM):\n    _type = \"user\"\n    _icon_dir = \"resources/ibm/user\"\n\n\nclass Browser(_User):\n    _icon = \"browser.png\"\n\n\nclass Device(_User):\n    _icon = \"device.png\"\n\n\nclass IntegratedDigitalExperiences(_User):\n    _icon = \"integrated-digital-experiences.png\"\n\n\nclass PhysicalEntity(_User):\n    _icon = \"physical-entity.png\"\n\n\nclass Sensor(_User):\n    _icon = \"sensor.png\"\n\n\nclass User(_User):\n    _icon = \"user.png\"\n\n\n# Aliases\n", "diagrams/ibm/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Compute(_IBM):\n    _type = \"compute\"\n    _icon_dir = \"resources/ibm/compute\"\n\n\nclass BareMetalServer(_Compute):\n    _icon = \"bare-metal-server.png\"\n\n\nclass ImageService(_Compute):\n    _icon = \"image-service.png\"\n\n\nclass Instance(_Compute):\n    _icon = \"instance.png\"\n\n\nclass Key(_Compute):\n    _icon = \"key.png\"\n\n\nclass PowerInstance(_Compute):\n    _icon = \"power-instance.png\"\n\n\n# Aliases\n", "diagrams/ibm/applications.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Applications(_IBM):\n    _type = \"applications\"\n    _icon_dir = \"resources/ibm/applications\"\n\n\nclass ActionableInsight(_Applications):\n    _icon = \"actionable-insight.png\"\n\n\nclass Annotate(_Applications):\n    _icon = \"annotate.png\"\n\n\nclass ApiDeveloperPortal(_Applications):\n    _icon = \"api-developer-portal.png\"\n\n\nclass ApiPolyglotRuntimes(_Applications):\n    _icon = \"api-polyglot-runtimes.png\"\n\n\nclass AppServer(_Applications):\n    _icon = \"app-server.png\"\n\n\nclass ApplicationLogic(_Applications):\n    _icon = \"application-logic.png\"\n\n\nclass EnterpriseApplications(_Applications):\n    _icon = \"enterprise-applications.png\"\n\n\nclass Index(_Applications):\n    _icon = \"index.png\"\n\n\nclass IotApplication(_Applications):\n    _icon = \"iot-application.png\"\n\n\nclass Microservice(_Applications):\n    _icon = \"microservice.png\"\n\n\nclass MobileApp(_Applications):\n    _icon = \"mobile-app.png\"\n\n\nclass Ontology(_Applications):\n    _icon = \"ontology.png\"\n\n\nclass OpenSourceTools(_Applications):\n    _icon = \"open-source-tools.png\"\n\n\nclass RuntimeServices(_Applications):\n    _icon = \"runtime-services.png\"\n\n\nclass SaasApplications(_Applications):\n    _icon = \"saas-applications.png\"\n\n\nclass ServiceBroker(_Applications):\n    _icon = \"service-broker.png\"\n\n\nclass SpeechToText(_Applications):\n    _icon = \"speech-to-text.png\"\n\n\nclass VisualRecognition(_Applications):\n    _icon = \"visual-recognition.png\"\n\n\nclass Visualization(_Applications):\n    _icon = \"visualization.png\"\n\n\n# Aliases\n", "diagrams/ibm/social.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Social(_IBM):\n    _type = \"social\"\n    _icon_dir = \"resources/ibm/social\"\n\n\nclass Communities(_Social):\n    _icon = \"communities.png\"\n\n\nclass FileSync(_Social):\n    _icon = \"file-sync.png\"\n\n\nclass LiveCollaboration(_Social):\n    _icon = \"live-collaboration.png\"\n\n\nclass Messaging(_Social):\n    _icon = \"messaging.png\"\n\n\nclass Networking(_Social):\n    _icon = \"networking.png\"\n\n\n# Aliases\n", "diagrams/ibm/general.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _General(_IBM):\n    _type = \"general\"\n    _icon_dir = \"resources/ibm/general\"\n\n\nclass CloudMessaging(_General):\n    _icon = \"cloud-messaging.png\"\n\n\nclass CloudServices(_General):\n    _icon = \"cloud-services.png\"\n\n\nclass Cloudant(_General):\n    _icon = \"cloudant.png\"\n\n\nclass CognitiveServices(_General):\n    _icon = \"cognitive-services.png\"\n\n\nclass DataSecurity(_General):\n    _icon = \"data-security.png\"\n\n\nclass Enterprise(_General):\n    _icon = \"enterprise.png\"\n\n\nclass GovernanceRiskCompliance(_General):\n    _icon = \"governance-risk-compliance.png\"\n\n\nclass IBMContainers(_General):\n    _icon = \"ibm-containers.png\"\n\n\nclass IBMPublicCloud(_General):\n    _icon = \"ibm-public-cloud.png\"\n\n\nclass IdentityAccessManagement(_General):\n    _icon = \"identity-access-management.png\"\n\n\nclass IdentityProvider(_General):\n    _icon = \"identity-provider.png\"\n\n\nclass InfrastructureSecurity(_General):\n    _icon = \"infrastructure-security.png\"\n\n\nclass Internet(_General):\n    _icon = \"internet.png\"\n\n\nclass IotCloud(_General):\n    _icon = \"iot-cloud.png\"\n\n\nclass MicroservicesApplication(_General):\n    _icon = \"microservices-application.png\"\n\n\nclass MicroservicesMesh(_General):\n    _icon = \"microservices-mesh.png\"\n\n\nclass MonitoringLogging(_General):\n    _icon = \"monitoring-logging.png\"\n\n\nclass Monitoring(_General):\n    _icon = \"monitoring.png\"\n\n\nclass ObjectStorage(_General):\n    _icon = \"object-storage.png\"\n\n\nclass OfflineCapabilities(_General):\n    _icon = \"offline-capabilities.png\"\n\n\nclass Openwhisk(_General):\n    _icon = \"openwhisk.png\"\n\n\nclass PeerCloud(_General):\n    _icon = \"peer-cloud.png\"\n\n\nclass RetrieveRank(_General):\n    _icon = \"retrieve-rank.png\"\n\n\nclass Scalable(_General):\n    _icon = \"scalable.png\"\n\n\nclass ServiceDiscoveryConfiguration(_General):\n    _icon = \"service-discovery-configuration.png\"\n\n\nclass TextToSpeech(_General):\n    _icon = \"text-to-speech.png\"\n\n\nclass TransformationConnectivity(_General):\n    _icon = \"transformation-connectivity.png\"\n\n\n# Aliases\n", "diagrams/ibm/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Storage(_IBM):\n    _type = \"storage\"\n    _icon_dir = \"resources/ibm/storage\"\n\n\nclass BlockStorage(_Storage):\n    _icon = \"block-storage.png\"\n\n\nclass ObjectStorage(_Storage):\n    _icon = \"object-storage.png\"\n\n\n# Aliases\n", "diagrams/ibm/__init__.py": "\"\"\"\nIBM provides a set of services for IBM Cloud provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _IBM(Node):\n    _provider = \"ibm\"\n    _icon_dir = \"resources/ibm\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/ibm/management.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Management(_IBM):\n    _type = \"management\"\n    _icon_dir = \"resources/ibm/management\"\n\n\nclass AlertNotification(_Management):\n    _icon = \"alert-notification.png\"\n\n\nclass ApiManagement(_Management):\n    _icon = \"api-management.png\"\n\n\nclass CloudManagement(_Management):\n    _icon = \"cloud-management.png\"\n\n\nclass ClusterManagement(_Management):\n    _icon = \"cluster-management.png\"\n\n\nclass ContentManagement(_Management):\n    _icon = \"content-management.png\"\n\n\nclass DataServices(_Management):\n    _icon = \"data-services.png\"\n\n\nclass DeviceManagement(_Management):\n    _icon = \"device-management.png\"\n\n\nclass InformationGovernance(_Management):\n    _icon = \"information-governance.png\"\n\n\nclass ItServiceManagement(_Management):\n    _icon = \"it-service-management.png\"\n\n\nclass Management(_Management):\n    _icon = \"management.png\"\n\n\nclass MonitoringMetrics(_Management):\n    _icon = \"monitoring-metrics.png\"\n\n\nclass ProcessManagement(_Management):\n    _icon = \"process-management.png\"\n\n\nclass ProviderCloudPortalService(_Management):\n    _icon = \"provider-cloud-portal-service.png\"\n\n\nclass PushNotifications(_Management):\n    _icon = \"push-notifications.png\"\n\n\nclass ServiceManagementTools(_Management):\n    _icon = \"service-management-tools.png\"\n\n\n# Aliases\n", "diagrams/ibm/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Network(_IBM):\n    _type = \"network\"\n    _icon_dir = \"resources/ibm/network\"\n\n\nclass Bridge(_Network):\n    _icon = \"bridge.png\"\n\n\nclass DirectLink(_Network):\n    _icon = \"direct-link.png\"\n\n\nclass Enterprise(_Network):\n    _icon = \"enterprise.png\"\n\n\nclass Firewall(_Network):\n    _icon = \"firewall.png\"\n\n\nclass FloatingIp(_Network):\n    _icon = \"floating-ip.png\"\n\n\nclass Gateway(_Network):\n    _icon = \"gateway.png\"\n\n\nclass InternetServices(_Network):\n    _icon = \"internet-services.png\"\n\n\nclass LoadBalancerListener(_Network):\n    _icon = \"load-balancer-listener.png\"\n\n\nclass LoadBalancerPool(_Network):\n    _icon = \"load-balancer-pool.png\"\n\n\nclass LoadBalancer(_Network):\n    _icon = \"load-balancer.png\"\n\n\nclass LoadBalancingRouting(_Network):\n    _icon = \"load-balancing-routing.png\"\n\n\nclass PublicGateway(_Network):\n    _icon = \"public-gateway.png\"\n\n\nclass Region(_Network):\n    _icon = \"region.png\"\n\n\nclass Router(_Network):\n    _icon = \"router.png\"\n\n\nclass Rules(_Network):\n    _icon = \"rules.png\"\n\n\nclass Subnet(_Network):\n    _icon = \"subnet.png\"\n\n\nclass TransitGateway(_Network):\n    _icon = \"transit-gateway.png\"\n\n\nclass Vpc(_Network):\n    _icon = \"vpc.png\"\n\n\nclass VpnConnection(_Network):\n    _icon = \"vpn-connection.png\"\n\n\nclass VpnGateway(_Network):\n    _icon = \"vpn-gateway.png\"\n\n\nclass VpnPolicy(_Network):\n    _icon = \"vpn-policy.png\"\n\n\n# Aliases\n", "diagrams/ibm/data.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _IBM\n\n\nclass _Data(_IBM):\n    _type = \"data\"\n    _icon_dir = \"resources/ibm/data\"\n\n\nclass Caches(_Data):\n    _icon = \"caches.png\"\n\n\nclass Cloud(_Data):\n    _icon = \"cloud.png\"\n\n\nclass ConversationTrainedDeployed(_Data):\n    _icon = \"conversation-trained-deployed.png\"\n\n\nclass DataServices(_Data):\n    _icon = \"data-services.png\"\n\n\nclass DataSources(_Data):\n    _icon = \"data-sources.png\"\n\n\nclass DeviceIdentityService(_Data):\n    _icon = \"device-identity-service.png\"\n\n\nclass DeviceRegistry(_Data):\n    _icon = \"device-registry.png\"\n\n\nclass EnterpriseData(_Data):\n    _icon = \"enterprise-data.png\"\n\n\nclass EnterpriseUserDirectory(_Data):\n    _icon = \"enterprise-user-directory.png\"\n\n\nclass FileRepository(_Data):\n    _icon = \"file-repository.png\"\n\n\nclass GroundTruth(_Data):\n    _icon = \"ground-truth.png\"\n\n\nclass Model(_Data):\n    _icon = \"model.png\"\n\n\nclass TmsDataInterface(_Data):\n    _icon = \"tms-data-interface.png\"\n\n\n# Aliases\n", "diagrams/k8s/ecosystem.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Ecosystem(_K8S):\n    _type = \"ecosystem\"\n    _icon_dir = \"resources/k8s/ecosystem\"\n\n\nclass ExternalDns(_Ecosystem):\n    _icon = \"external-dns.png\"\n\n\nclass Helm(_Ecosystem):\n    _icon = \"helm.png\"\n\n\nclass Krew(_Ecosystem):\n    _icon = \"krew.png\"\n\n\nclass Kustomize(_Ecosystem):\n    _icon = \"kustomize.png\"\n\n\n# Aliases\n", "diagrams/k8s/group.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Group(_K8S):\n    _type = \"group\"\n    _icon_dir = \"resources/k8s/group\"\n\n\nclass NS(_Group):\n    _icon = \"ns.png\"\n\n\n# Aliases\n\nNamespace = NS\n", "diagrams/k8s/clusterconfig.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Clusterconfig(_K8S):\n    _type = \"clusterconfig\"\n    _icon_dir = \"resources/k8s/clusterconfig\"\n\n\nclass HPA(_Clusterconfig):\n    _icon = \"hpa.png\"\n\n\nclass Limits(_Clusterconfig):\n    _icon = \"limits.png\"\n\n\nclass Quota(_Clusterconfig):\n    _icon = \"quota.png\"\n\n\n# Aliases\n\nLimitRange = Limits\nHorizontalPodAutoscaler = HPA\n", "diagrams/k8s/chaos.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Chaos(_K8S):\n    _type = \"chaos\"\n    _icon_dir = \"resources/k8s/chaos\"\n\n\nclass ChaosMesh(_Chaos):\n    _icon = \"chaos-mesh.png\"\n\n\nclass LitmusChaos(_Chaos):\n    _icon = \"litmus-chaos.png\"\n\n\n# Aliases\n", "diagrams/k8s/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Compute(_K8S):\n    _type = \"compute\"\n    _icon_dir = \"resources/k8s/compute\"\n\n\nclass Cronjob(_Compute):\n    _icon = \"cronjob.png\"\n\n\nclass Deploy(_Compute):\n    _icon = \"deploy.png\"\n\n\nclass DS(_Compute):\n    _icon = \"ds.png\"\n\n\nclass Job(_Compute):\n    _icon = \"job.png\"\n\n\nclass Pod(_Compute):\n    _icon = \"pod.png\"\n\n\nclass RS(_Compute):\n    _icon = \"rs.png\"\n\n\nclass STS(_Compute):\n    _icon = \"sts.png\"\n\n\n# Aliases\n\nDeployment = Deploy\nDaemonSet = DS\nReplicaSet = RS\nStatefulSet = STS\n", "diagrams/k8s/infra.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Infra(_K8S):\n    _type = \"infra\"\n    _icon_dir = \"resources/k8s/infra\"\n\n\nclass ETCD(_Infra):\n    _icon = \"etcd.png\"\n\n\nclass Master(_Infra):\n    _icon = \"master.png\"\n\n\nclass Node(_Infra):\n    _icon = \"node.png\"\n\n\n# Aliases\n", "diagrams/k8s/others.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Others(_K8S):\n    _type = \"others\"\n    _icon_dir = \"resources/k8s/others\"\n\n\nclass CRD(_Others):\n    _icon = \"crd.png\"\n\n\nclass PSP(_Others):\n    _icon = \"psp.png\"\n\n\n# Aliases\n", "diagrams/k8s/podconfig.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Podconfig(_K8S):\n    _type = \"podconfig\"\n    _icon_dir = \"resources/k8s/podconfig\"\n\n\nclass CM(_Podconfig):\n    _icon = \"cm.png\"\n\n\nclass Secret(_Podconfig):\n    _icon = \"secret.png\"\n\n\n# Aliases\n\nConfigMap = CM\n", "diagrams/k8s/rbac.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Rbac(_K8S):\n    _type = \"rbac\"\n    _icon_dir = \"resources/k8s/rbac\"\n\n\nclass CRole(_Rbac):\n    _icon = \"c-role.png\"\n\n\nclass CRB(_Rbac):\n    _icon = \"crb.png\"\n\n\nclass Group(_Rbac):\n    _icon = \"group.png\"\n\n\nclass RB(_Rbac):\n    _icon = \"rb.png\"\n\n\nclass Role(_Rbac):\n    _icon = \"role.png\"\n\n\nclass SA(_Rbac):\n    _icon = \"sa.png\"\n\n\nclass User(_Rbac):\n    _icon = \"user.png\"\n\n\n# Aliases\n\nClusterRole = CRole\nClusterRoleBinding = CRB\nRoleBinding = RB\nServiceAccount = SA\n", "diagrams/k8s/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Storage(_K8S):\n    _type = \"storage\"\n    _icon_dir = \"resources/k8s/storage\"\n\n\nclass PV(_Storage):\n    _icon = \"pv.png\"\n\n\nclass PVC(_Storage):\n    _icon = \"pvc.png\"\n\n\nclass SC(_Storage):\n    _icon = \"sc.png\"\n\n\nclass Vol(_Storage):\n    _icon = \"vol.png\"\n\n\n# Aliases\n\nPersistentVolume = PV\nPersistentVolumeClaim = PVC\nStorageClass = SC\nVolume = Vol\n", "diagrams/k8s/__init__.py": "\"\"\"\nK8S provides a set of services for Kubernetes.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _K8S(Node):\n    _provider = \"k8s\"\n    _icon_dir = \"resources/k8s\"\n\n    fontcolor = \"#2d3436\"\n", "diagrams/k8s/controlplane.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Controlplane(_K8S):\n    _type = \"controlplane\"\n    _icon_dir = \"resources/k8s/controlplane\"\n\n\nclass API(_Controlplane):\n    _icon = \"api.png\"\n\n\nclass CCM(_Controlplane):\n    _icon = \"c-c-m.png\"\n\n\nclass CM(_Controlplane):\n    _icon = \"c-m.png\"\n\n\nclass KProxy(_Controlplane):\n    _icon = \"k-proxy.png\"\n\n\nclass Kubelet(_Controlplane):\n    _icon = \"kubelet.png\"\n\n\nclass Sched(_Controlplane):\n    _icon = \"sched.png\"\n\n\n# Aliases\n\nAPIServer = API\nControllerManager = CM\nKubeProxy = KProxy\nScheduler = Sched\n", "diagrams/k8s/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _K8S\n\n\nclass _Network(_K8S):\n    _type = \"network\"\n    _icon_dir = \"resources/k8s/network\"\n\n\nclass Ep(_Network):\n    _icon = \"ep.png\"\n\n\nclass Ing(_Network):\n    _icon = \"ing.png\"\n\n\nclass Netpol(_Network):\n    _icon = \"netpol.png\"\n\n\nclass SVC(_Network):\n    _icon = \"svc.png\"\n\n\n# Aliases\n\nEndpoint = Ep\nIngress = Ing\nNetworkPolicy = Netpol\nService = SVC\n", "diagrams/openstack/frontend.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Frontend(_OpenStack):\n    _type = \"frontend\"\n    _icon_dir = \"resources/openstack/frontend\"\n\n\nclass Horizon(_Frontend):\n    _icon = \"horizon.png\"\n\n\n# Aliases\n", "diagrams/openstack/networking.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Networking(_OpenStack):\n    _type = \"networking\"\n    _icon_dir = \"resources/openstack/networking\"\n\n\nclass Designate(_Networking):\n    _icon = \"designate.png\"\n\n\nclass Neutron(_Networking):\n    _icon = \"neutron.png\"\n\n\nclass Octavia(_Networking):\n    _icon = \"octavia.png\"\n\n\n# Aliases\n", "diagrams/openstack/baremetal.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Baremetal(_OpenStack):\n    _type = \"baremetal\"\n    _icon_dir = \"resources/openstack/baremetal\"\n\n\nclass Cyborg(_Baremetal):\n    _icon = \"cyborg.png\"\n\n\nclass Ironic(_Baremetal):\n    _icon = \"ironic.png\"\n\n\n# Aliases\n", "diagrams/openstack/deployment.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Deployment(_OpenStack):\n    _type = \"deployment\"\n    _icon_dir = \"resources/openstack/deployment\"\n\n\nclass Ansible(_Deployment):\n    _icon = \"ansible.png\"\n\n\nclass Charms(_Deployment):\n    _icon = \"charms.png\"\n\n\nclass Chef(_Deployment):\n    _icon = \"chef.png\"\n\n\nclass Helm(_Deployment):\n    _icon = \"helm.png\"\n\n\nclass Kolla(_Deployment):\n    _icon = \"kolla.png\"\n\n\nclass Tripleo(_Deployment):\n    _icon = \"tripleo.png\"\n\n\n# Aliases\n\nKollaAnsible = Kolla\nTripleO = Tripleo\n", "diagrams/openstack/user.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _User(_OpenStack):\n    _type = \"user\"\n    _icon_dir = \"resources/openstack/user\"\n\n\nclass Openstackclient(_User):\n    _icon = \"openstackclient.png\"\n\n\n# Aliases\n\nOpenStackClient = Openstackclient\n", "diagrams/openstack/workloadprovisioning.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Workloadprovisioning(_OpenStack):\n    _type = \"workloadprovisioning\"\n    _icon_dir = \"resources/openstack/workloadprovisioning\"\n\n\nclass Magnum(_Workloadprovisioning):\n    _icon = \"magnum.png\"\n\n\nclass Sahara(_Workloadprovisioning):\n    _icon = \"sahara.png\"\n\n\nclass Trove(_Workloadprovisioning):\n    _icon = \"trove.png\"\n\n\n# Aliases\n", "diagrams/openstack/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Compute(_OpenStack):\n    _type = \"compute\"\n    _icon_dir = \"resources/openstack/compute\"\n\n\nclass Nova(_Compute):\n    _icon = \"nova.png\"\n\n\nclass Qinling(_Compute):\n    _icon = \"qinling.png\"\n\n\nclass Zun(_Compute):\n    _icon = \"zun.png\"\n\n\n# Aliases\n", "diagrams/openstack/optimization.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Optimization(_OpenStack):\n    _type = \"optimization\"\n    _icon_dir = \"resources/openstack/optimization\"\n\n\nclass Congress(_Optimization):\n    _icon = \"congress.png\"\n\n\nclass Rally(_Optimization):\n    _icon = \"rally.png\"\n\n\nclass Vitrage(_Optimization):\n    _icon = \"vitrage.png\"\n\n\nclass Watcher(_Optimization):\n    _icon = \"watcher.png\"\n\n\n# Aliases\n", "diagrams/openstack/sharedservices.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Sharedservices(_OpenStack):\n    _type = \"sharedservices\"\n    _icon_dir = \"resources/openstack/sharedservices\"\n\n\nclass Barbican(_Sharedservices):\n    _icon = \"barbican.png\"\n\n\nclass Glance(_Sharedservices):\n    _icon = \"glance.png\"\n\n\nclass Karbor(_Sharedservices):\n    _icon = \"karbor.png\"\n\n\nclass Keystone(_Sharedservices):\n    _icon = \"keystone.png\"\n\n\nclass Searchlight(_Sharedservices):\n    _icon = \"searchlight.png\"\n\n\n# Aliases\n", "diagrams/openstack/monitoring.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Monitoring(_OpenStack):\n    _type = \"monitoring\"\n    _icon_dir = \"resources/openstack/monitoring\"\n\n\nclass Monasca(_Monitoring):\n    _icon = \"monasca.png\"\n\n\nclass Telemetry(_Monitoring):\n    _icon = \"telemetry.png\"\n\n\n# Aliases\n", "diagrams/openstack/orchestration.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Orchestration(_OpenStack):\n    _type = \"orchestration\"\n    _icon_dir = \"resources/openstack/orchestration\"\n\n\nclass Blazar(_Orchestration):\n    _icon = \"blazar.png\"\n\n\nclass Heat(_Orchestration):\n    _icon = \"heat.png\"\n\n\nclass Mistral(_Orchestration):\n    _icon = \"mistral.png\"\n\n\nclass Senlin(_Orchestration):\n    _icon = \"senlin.png\"\n\n\nclass Zaqar(_Orchestration):\n    _icon = \"zaqar.png\"\n\n\n# Aliases\n", "diagrams/openstack/containerservices.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Containerservices(_OpenStack):\n    _type = \"containerservices\"\n    _icon_dir = \"resources/openstack/containerservices\"\n\n\nclass Kuryr(_Containerservices):\n    _icon = \"kuryr.png\"\n\n\n# Aliases\n", "diagrams/openstack/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Storage(_OpenStack):\n    _type = \"storage\"\n    _icon_dir = \"resources/openstack/storage\"\n\n\nclass Cinder(_Storage):\n    _icon = \"cinder.png\"\n\n\nclass Manila(_Storage):\n    _icon = \"manila.png\"\n\n\nclass Swift(_Storage):\n    _icon = \"swift.png\"\n\n\n# Aliases\n", "diagrams/openstack/apiproxies.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Apiproxies(_OpenStack):\n    _type = \"apiproxies\"\n    _icon_dir = \"resources/openstack/apiproxies\"\n\n\nclass EC2API(_Apiproxies):\n    _icon = \"ec2api.png\"\n\n\n# Aliases\n", "diagrams/openstack/applicationlifecycle.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Applicationlifecycle(_OpenStack):\n    _type = \"applicationlifecycle\"\n    _icon_dir = \"resources/openstack/applicationlifecycle\"\n\n\nclass Freezer(_Applicationlifecycle):\n    _icon = \"freezer.png\"\n\n\nclass Masakari(_Applicationlifecycle):\n    _icon = \"masakari.png\"\n\n\nclass Murano(_Applicationlifecycle):\n    _icon = \"murano.png\"\n\n\nclass Solum(_Applicationlifecycle):\n    _icon = \"solum.png\"\n\n\n# Aliases\n", "diagrams/openstack/__init__.py": "\"\"\"\nOpenstack provides a set of general OpenStack services.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _OpenStack(Node):\n    _provider = \"openstack\"\n    _icon_dir = \"resources/openstack\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/openstack/packaging.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Packaging(_OpenStack):\n    _type = \"packaging\"\n    _icon_dir = \"resources/openstack/packaging\"\n\n\nclass LOCI(_Packaging):\n    _icon = \"loci.png\"\n\n\nclass Puppet(_Packaging):\n    _icon = \"puppet.png\"\n\n\nclass RPM(_Packaging):\n    _icon = \"rpm.png\"\n\n\n# Aliases\n", "diagrams/openstack/multiregion.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Multiregion(_OpenStack):\n    _type = \"multiregion\"\n    _icon_dir = \"resources/openstack/multiregion\"\n\n\nclass Tricircle(_Multiregion):\n    _icon = \"tricircle.png\"\n\n\n# Aliases\n", "diagrams/openstack/adjacentenablers.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Adjacentenablers(_OpenStack):\n    _type = \"adjacentenablers\"\n    _icon_dir = \"resources/openstack/adjacentenablers\"\n\n\n# Aliases\n", "diagrams/openstack/lifecyclemanagement.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Lifecyclemanagement(_OpenStack):\n    _type = \"lifecyclemanagement\"\n    _icon_dir = \"resources/openstack/lifecyclemanagement\"\n\n\n# Aliases\n", "diagrams/openstack/nfv.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _NFV(_OpenStack):\n    _type = \"nfv\"\n    _icon_dir = \"resources/openstack/nfv\"\n\n\nclass Tacker(_NFV):\n    _icon = \"tacker.png\"\n\n\n# Aliases\n", "diagrams/openstack/billing.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Billing(_OpenStack):\n    _type = \"billing\"\n    _icon_dir = \"resources/openstack/billing\"\n\n\nclass Cloudkitty(_Billing):\n    _icon = \"cloudkitty.png\"\n\n\n# Aliases\n\nCloudKitty = Cloudkitty\n", "diagrams/openstack/operations.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OpenStack\n\n\nclass _Operations(_OpenStack):\n    _type = \"operations\"\n    _icon_dir = \"resources/openstack/operations\"\n\n\n# Aliases\n", "diagrams/outscale/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Outscale\n\n\nclass _Security(_Outscale):\n    _type = \"security\"\n    _icon_dir = \"resources/outscale/security\"\n\n\nclass Firewall(_Security):\n    _icon = \"firewall.png\"\n\n\nclass IdentityAndAccessManagement(_Security):\n    _icon = \"identity-and-access-management.png\"\n\n\n# Aliases\n", "diagrams/outscale/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Outscale\n\n\nclass _Compute(_Outscale):\n    _type = \"compute\"\n    _icon_dir = \"resources/outscale/compute\"\n\n\nclass Compute(_Compute):\n    _icon = \"compute.png\"\n\n\nclass DirectConnect(_Compute):\n    _icon = \"direct-connect.png\"\n\n\n# Aliases\n", "diagrams/outscale/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Outscale\n\n\nclass _Storage(_Outscale):\n    _type = \"storage\"\n    _icon_dir = \"resources/outscale/storage\"\n\n\nclass SimpleStorageService(_Storage):\n    _icon = \"simple-storage-service.png\"\n\n\nclass Storage(_Storage):\n    _icon = \"storage.png\"\n\n\n# Aliases\n", "diagrams/outscale/__init__.py": "from diagrams import Node\n\n\nclass _Outscale(Node):\n    _provider = \"outscale\"\n    _icon_dir = \"resources/outscale\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/outscale/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Outscale\n\n\nclass _Network(_Outscale):\n    _type = \"network\"\n    _icon_dir = \"resources/outscale/network\"\n\n\nclass ClientVpn(_Network):\n    _icon = \"client-vpn.png\"\n\n\nclass InternetService(_Network):\n    _icon = \"internet-service.png\"\n\n\nclass LoadBalancer(_Network):\n    _icon = \"load-balancer.png\"\n\n\nclass NatService(_Network):\n    _icon = \"nat-service.png\"\n\n\nclass Net(_Network):\n    _icon = \"net.png\"\n\n\nclass SiteToSiteVpng(_Network):\n    _icon = \"site-to-site-vpng.png\"\n\n\n# Aliases\n", "diagrams/c4/__init__.py": "\"\"\"\nA set of nodes and edges to visualize software architecture using the C4 model.\n\"\"\"\nimport html\nimport textwrap\nfrom diagrams import Cluster, Node, Edge\n\n\ndef _format_node_label(name, key, description):\n    \"\"\"Create a graphviz label string for a C4 node\"\"\"\n    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n\n\ndef _format_description(description):\n    \"\"\"\n    Formats the description string so it fits into the C4 nodes.\n\n    It line-breaks the description so it fits onto exactly three lines. If there are more\n    than three lines, all further lines are discarded and \"...\" inserted on the last line to\n    indicate that it was shortened. This will also html-escape the description so it can\n    safely be included in a HTML label.\n    \"\"\"\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return \"<br/>\".join(lines)\n\n\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'\n\n\ndef C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n    key = f\"{type}: {technology}\" if technology else type\n    node_attributes = {\n        \"label\": _format_node_label(name, key, description),\n        \"labelloc\": \"c\",\n        \"shape\": \"rect\",\n        \"width\": \"2.6\",\n        \"height\": \"1.6\",\n        \"fixedsize\": \"true\",\n        \"style\": \"filled\",\n        \"fillcolor\": \"dodgerblue3\",\n        \"fontcolor\": \"white\",\n    }\n    # collapse boxes to a smaller form if they don't have a description\n    if not description:\n        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n\ndef Container(name, technology=\"\", description=\"\", **kwargs):\n    container_attributes = {\n        \"name\": name,\n        \"technology\": technology,\n        \"description\": description,\n        \"type\": \"Container\",\n    }\n    container_attributes.update(kwargs)\n    return C4Node(**container_attributes)\n\n\ndef Database(name, technology=\"\", description=\"\", **kwargs):\n    database_attributes = {\n        \"name\": name,\n        \"technology\": technology,\n        \"description\": description,\n        \"type\": \"Database\",\n        \"shape\": \"cylinder\",\n        \"labelloc\": \"b\",\n    }\n    database_attributes.update(kwargs)\n    return C4Node(**database_attributes)\n\n\ndef System(name, description=\"\", external=False, **kwargs):\n    system_attributes = {\n        \"name\": name,\n        \"description\": description,\n        \"type\": \"External System\" if external else \"System\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n    }\n    system_attributes.update(kwargs)\n    return C4Node(**system_attributes)\n\n\ndef Person(name, description=\"\", external=False, **kwargs):\n    person_attributes = {\n        \"name\": name,\n        \"description\": description,\n        \"type\": \"External Person\" if external else \"Person\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n        \"style\": \"rounded,filled\",\n    }\n    person_attributes.update(kwargs)\n    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {\n        \"label\": html.escape(name),\n        \"bgcolor\": \"white\",\n        \"margin\": \"16\",\n        \"style\": \"dashed\",\n    }\n    graph_attributes.update(kwargs)\n    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label=\"\", **kwargs):\n    edge_attributes = {\n        \"style\": \"dashed\",\n        \"color\": \"gray60\",\n        \"label\": _format_edge_label(label) if label else \"\",\n    }\n    edge_attributes.update(kwargs)\n    return Edge(**edge_attributes)\n", "diagrams/azure/analytics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Analytics(_Azure):\n    _type = \"analytics\"\n    _icon_dir = \"resources/azure/analytics\"\n\n\nclass AnalysisServices(_Analytics):\n    _icon = \"analysis-services.png\"\n\n\nclass DataExplorerClusters(_Analytics):\n    _icon = \"data-explorer-clusters.png\"\n\n\nclass DataFactories(_Analytics):\n    _icon = \"data-factories.png\"\n\n\nclass DataLakeAnalytics(_Analytics):\n    _icon = \"data-lake-analytics.png\"\n\n\nclass DataLakeStoreGen1(_Analytics):\n    _icon = \"data-lake-store-gen1.png\"\n\n\nclass Databricks(_Analytics):\n    _icon = \"databricks.png\"\n\n\nclass EventHubClusters(_Analytics):\n    _icon = \"event-hub-clusters.png\"\n\n\nclass EventHubs(_Analytics):\n    _icon = \"event-hubs.png\"\n\n\nclass Hdinsightclusters(_Analytics):\n    _icon = \"hdinsightclusters.png\"\n\n\nclass LogAnalyticsWorkspaces(_Analytics):\n    _icon = \"log-analytics-workspaces.png\"\n\n\nclass StreamAnalyticsJobs(_Analytics):\n    _icon = \"stream-analytics-jobs.png\"\n\n\nclass SynapseAnalytics(_Analytics):\n    _icon = \"synapse-analytics.png\"\n\n\n# Aliases\n", "diagrams/azure/devops.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Devops(_Azure):\n    _type = \"devops\"\n    _icon_dir = \"resources/azure/devops\"\n\n\nclass ApplicationInsights(_Devops):\n    _icon = \"application-insights.png\"\n\n\nclass Artifacts(_Devops):\n    _icon = \"artifacts.png\"\n\n\nclass Boards(_Devops):\n    _icon = \"boards.png\"\n\n\nclass Devops(_Devops):\n    _icon = \"devops.png\"\n\n\nclass DevtestLabs(_Devops):\n    _icon = \"devtest-labs.png\"\n\n\nclass LabServices(_Devops):\n    _icon = \"lab-services.png\"\n\n\nclass Pipelines(_Devops):\n    _icon = \"pipelines.png\"\n\n\nclass Repos(_Devops):\n    _icon = \"repos.png\"\n\n\nclass TestPlans(_Devops):\n    _icon = \"test-plans.png\"\n\n\n# Aliases\n", "diagrams/azure/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Security(_Azure):\n    _type = \"security\"\n    _icon_dir = \"resources/azure/security\"\n\n\nclass ApplicationSecurityGroups(_Security):\n    _icon = \"application-security-groups.png\"\n\n\nclass ConditionalAccess(_Security):\n    _icon = \"conditional-access.png\"\n\n\nclass Defender(_Security):\n    _icon = \"defender.png\"\n\n\nclass ExtendedSecurityUpdates(_Security):\n    _icon = \"extended-security-updates.png\"\n\n\nclass KeyVaults(_Security):\n    _icon = \"key-vaults.png\"\n\n\nclass SecurityCenter(_Security):\n    _icon = \"security-center.png\"\n\n\nclass Sentinel(_Security):\n    _icon = \"sentinel.png\"\n\n\n# Aliases\n", "diagrams/azure/web.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Web(_Azure):\n    _type = \"web\"\n    _icon_dir = \"resources/azure/web\"\n\n\nclass APIConnections(_Web):\n    _icon = \"api-connections.png\"\n\n\nclass AppServiceCertificates(_Web):\n    _icon = \"app-service-certificates.png\"\n\n\nclass AppServiceDomains(_Web):\n    _icon = \"app-service-domains.png\"\n\n\nclass AppServiceEnvironments(_Web):\n    _icon = \"app-service-environments.png\"\n\n\nclass AppServicePlans(_Web):\n    _icon = \"app-service-plans.png\"\n\n\nclass AppServices(_Web):\n    _icon = \"app-services.png\"\n\n\nclass MediaServices(_Web):\n    _icon = \"media-services.png\"\n\n\nclass NotificationHubNamespaces(_Web):\n    _icon = \"notification-hub-namespaces.png\"\n\n\nclass Search(_Web):\n    _icon = \"search.png\"\n\n\nclass Signalr(_Web):\n    _icon = \"signalr.png\"\n\n\n# Aliases\n", "diagrams/azure/ml.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Ml(_Azure):\n    _type = \"ml\"\n    _icon_dir = \"resources/azure/ml\"\n\n\nclass BatchAI(_Ml):\n    _icon = \"batch-ai.png\"\n\n\nclass BotServices(_Ml):\n    _icon = \"bot-services.png\"\n\n\nclass CognitiveServices(_Ml):\n    _icon = \"cognitive-services.png\"\n\n\nclass GenomicsAccounts(_Ml):\n    _icon = \"genomics-accounts.png\"\n\n\nclass MachineLearningServiceWorkspaces(_Ml):\n    _icon = \"machine-learning-service-workspaces.png\"\n\n\nclass MachineLearningStudioWebServicePlans(_Ml):\n    _icon = \"machine-learning-studio-web-service-plans.png\"\n\n\nclass MachineLearningStudioWebServices(_Ml):\n    _icon = \"machine-learning-studio-web-services.png\"\n\n\nclass MachineLearningStudioWorkspaces(_Ml):\n    _icon = \"machine-learning-studio-workspaces.png\"\n\n\n# Aliases\n", "diagrams/azure/mobile.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Mobile(_Azure):\n    _type = \"mobile\"\n    _icon_dir = \"resources/azure/mobile\"\n\n\nclass AppServiceMobile(_Mobile):\n    _icon = \"app-service-mobile.png\"\n\n\nclass MobileEngagement(_Mobile):\n    _icon = \"mobile-engagement.png\"\n\n\nclass NotificationHubs(_Mobile):\n    _icon = \"notification-hubs.png\"\n\n\n# Aliases\n", "diagrams/azure/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Compute(_Azure):\n    _type = \"compute\"\n    _icon_dir = \"resources/azure/compute\"\n\n\nclass AppServices(_Compute):\n    _icon = \"app-services.png\"\n\n\nclass AutomanagedVM(_Compute):\n    _icon = \"automanaged-vm.png\"\n\n\nclass AvailabilitySets(_Compute):\n    _icon = \"availability-sets.png\"\n\n\nclass BatchAccounts(_Compute):\n    _icon = \"batch-accounts.png\"\n\n\nclass CitrixVirtualDesktopsEssentials(_Compute):\n    _icon = \"citrix-virtual-desktops-essentials.png\"\n\n\nclass CloudServicesClassic(_Compute):\n    _icon = \"cloud-services-classic.png\"\n\n\nclass CloudServices(_Compute):\n    _icon = \"cloud-services.png\"\n\n\nclass CloudsimpleVirtualMachines(_Compute):\n    _icon = \"cloudsimple-virtual-machines.png\"\n\n\nclass ContainerApps(_Compute):\n    _icon = \"container-apps.png\"\n\n\nclass ContainerInstances(_Compute):\n    _icon = \"container-instances.png\"\n\n\nclass ContainerRegistries(_Compute):\n    _icon = \"container-registries.png\"\n\n\nclass DiskEncryptionSets(_Compute):\n    _icon = \"disk-encryption-sets.png\"\n\n\nclass DiskSnapshots(_Compute):\n    _icon = \"disk-snapshots.png\"\n\n\nclass Disks(_Compute):\n    _icon = \"disks.png\"\n\n\nclass FunctionApps(_Compute):\n    _icon = \"function-apps.png\"\n\n\nclass ImageDefinitions(_Compute):\n    _icon = \"image-definitions.png\"\n\n\nclass ImageVersions(_Compute):\n    _icon = \"image-versions.png\"\n\n\nclass KubernetesServices(_Compute):\n    _icon = \"kubernetes-services.png\"\n\n\nclass MeshApplications(_Compute):\n    _icon = \"mesh-applications.png\"\n\n\nclass OsImages(_Compute):\n    _icon = \"os-images.png\"\n\n\nclass SAPHANAOnAzure(_Compute):\n    _icon = \"sap-hana-on-azure.png\"\n\n\nclass ServiceFabricClusters(_Compute):\n    _icon = \"service-fabric-clusters.png\"\n\n\nclass SharedImageGalleries(_Compute):\n    _icon = \"shared-image-galleries.png\"\n\n\nclass SpringCloud(_Compute):\n    _icon = \"spring-cloud.png\"\n\n\nclass VMClassic(_Compute):\n    _icon = \"vm-classic.png\"\n\n\nclass VMImages(_Compute):\n    _icon = \"vm-images.png\"\n\n\nclass VMLinux(_Compute):\n    _icon = \"vm-linux.png\"\n\n\nclass VMScaleSet(_Compute):\n    _icon = \"vm-scale-set.png\"\n\n\nclass VMWindows(_Compute):\n    _icon = \"vm-windows.png\"\n\n\nclass VM(_Compute):\n    _icon = \"vm.png\"\n\n\nclass Workspaces(_Compute):\n    _icon = \"workspaces.png\"\n\n\n# Aliases\n\nACR = ContainerRegistries\nAKS = KubernetesServices\nVMSS = VMScaleSet\n", "diagrams/azure/identity.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Identity(_Azure):\n    _type = \"identity\"\n    _icon_dir = \"resources/azure/identity\"\n\n\nclass AccessReview(_Identity):\n    _icon = \"access-review.png\"\n\n\nclass ActiveDirectoryConnectHealth(_Identity):\n    _icon = \"active-directory-connect-health.png\"\n\n\nclass ActiveDirectory(_Identity):\n    _icon = \"active-directory.png\"\n\n\nclass ADB2C(_Identity):\n    _icon = \"ad-b2c.png\"\n\n\nclass ADDomainServices(_Identity):\n    _icon = \"ad-domain-services.png\"\n\n\nclass ADIdentityProtection(_Identity):\n    _icon = \"ad-identity-protection.png\"\n\n\nclass ADPrivilegedIdentityManagement(_Identity):\n    _icon = \"ad-privileged-identity-management.png\"\n\n\nclass AppRegistrations(_Identity):\n    _icon = \"app-registrations.png\"\n\n\nclass ConditionalAccess(_Identity):\n    _icon = \"conditional-access.png\"\n\n\nclass EnterpriseApplications(_Identity):\n    _icon = \"enterprise-applications.png\"\n\n\nclass Groups(_Identity):\n    _icon = \"groups.png\"\n\n\nclass IdentityGovernance(_Identity):\n    _icon = \"identity-governance.png\"\n\n\nclass InformationProtection(_Identity):\n    _icon = \"information-protection.png\"\n\n\nclass ManagedIdentities(_Identity):\n    _icon = \"managed-identities.png\"\n\n\nclass Users(_Identity):\n    _icon = \"users.png\"\n\n\n# Aliases\n", "diagrams/azure/iot.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Iot(_Azure):\n    _type = \"iot\"\n    _icon_dir = \"resources/azure/iot\"\n\n\nclass DeviceProvisioningServices(_Iot):\n    _icon = \"device-provisioning-services.png\"\n\n\nclass DigitalTwins(_Iot):\n    _icon = \"digital-twins.png\"\n\n\nclass IotCentralApplications(_Iot):\n    _icon = \"iot-central-applications.png\"\n\n\nclass IotHubSecurity(_Iot):\n    _icon = \"iot-hub-security.png\"\n\n\nclass IotHub(_Iot):\n    _icon = \"iot-hub.png\"\n\n\nclass Maps(_Iot):\n    _icon = \"maps.png\"\n\n\nclass Sphere(_Iot):\n    _icon = \"sphere.png\"\n\n\nclass TimeSeriesInsightsEnvironments(_Iot):\n    _icon = \"time-series-insights-environments.png\"\n\n\nclass TimeSeriesInsightsEventsSources(_Iot):\n    _icon = \"time-series-insights-events-sources.png\"\n\n\nclass Windows10IotCoreServices(_Iot):\n    _icon = \"windows-10-iot-core-services.png\"\n\n\n# Aliases\n", "diagrams/azure/migration.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Migration(_Azure):\n    _type = \"migration\"\n    _icon_dir = \"resources/azure/migration\"\n\n\nclass DataBoxEdge(_Migration):\n    _icon = \"data-box-edge.png\"\n\n\nclass DataBox(_Migration):\n    _icon = \"data-box.png\"\n\n\nclass DatabaseMigrationServices(_Migration):\n    _icon = \"database-migration-services.png\"\n\n\nclass MigrationProjects(_Migration):\n    _icon = \"migration-projects.png\"\n\n\nclass RecoveryServicesVaults(_Migration):\n    _icon = \"recovery-services-vaults.png\"\n\n\n# Aliases\n", "diagrams/azure/integration.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Integration(_Azure):\n    _type = \"integration\"\n    _icon_dir = \"resources/azure/integration\"\n\n\nclass APIForFhir(_Integration):\n    _icon = \"api-for-fhir.png\"\n\n\nclass APIManagement(_Integration):\n    _icon = \"api-management.png\"\n\n\nclass AppConfiguration(_Integration):\n    _icon = \"app-configuration.png\"\n\n\nclass DataCatalog(_Integration):\n    _icon = \"data-catalog.png\"\n\n\nclass EventGridDomains(_Integration):\n    _icon = \"event-grid-domains.png\"\n\n\nclass EventGridSubscriptions(_Integration):\n    _icon = \"event-grid-subscriptions.png\"\n\n\nclass EventGridTopics(_Integration):\n    _icon = \"event-grid-topics.png\"\n\n\nclass IntegrationAccounts(_Integration):\n    _icon = \"integration-accounts.png\"\n\n\nclass IntegrationServiceEnvironments(_Integration):\n    _icon = \"integration-service-environments.png\"\n\n\nclass LogicAppsCustomConnector(_Integration):\n    _icon = \"logic-apps-custom-connector.png\"\n\n\nclass LogicApps(_Integration):\n    _icon = \"logic-apps.png\"\n\n\nclass PartnerTopic(_Integration):\n    _icon = \"partner-topic.png\"\n\n\nclass SendgridAccounts(_Integration):\n    _icon = \"sendgrid-accounts.png\"\n\n\nclass ServiceBusRelays(_Integration):\n    _icon = \"service-bus-relays.png\"\n\n\nclass ServiceBus(_Integration):\n    _icon = \"service-bus.png\"\n\n\nclass ServiceCatalogManagedApplicationDefinitions(_Integration):\n    _icon = \"service-catalog-managed-application-definitions.png\"\n\n\nclass SoftwareAsAService(_Integration):\n    _icon = \"software-as-a-service.png\"\n\n\nclass StorsimpleDeviceManagers(_Integration):\n    _icon = \"storsimple-device-managers.png\"\n\n\nclass SystemTopic(_Integration):\n    _icon = \"system-topic.png\"\n\n\n# Aliases\n", "diagrams/azure/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Database(_Azure):\n    _type = \"database\"\n    _icon_dir = \"resources/azure/database\"\n\n\nclass BlobStorage(_Database):\n    _icon = \"blob-storage.png\"\n\n\nclass CacheForRedis(_Database):\n    _icon = \"cache-for-redis.png\"\n\n\nclass CosmosDb(_Database):\n    _icon = \"cosmos-db.png\"\n\n\nclass DataExplorerClusters(_Database):\n    _icon = \"data-explorer-clusters.png\"\n\n\nclass DataFactory(_Database):\n    _icon = \"data-factory.png\"\n\n\nclass DataLake(_Database):\n    _icon = \"data-lake.png\"\n\n\nclass DatabaseForMariadbServers(_Database):\n    _icon = \"database-for-mariadb-servers.png\"\n\n\nclass DatabaseForMysqlServers(_Database):\n    _icon = \"database-for-mysql-servers.png\"\n\n\nclass DatabaseForPostgresqlServers(_Database):\n    _icon = \"database-for-postgresql-servers.png\"\n\n\nclass ElasticDatabasePools(_Database):\n    _icon = \"elastic-database-pools.png\"\n\n\nclass ElasticJobAgents(_Database):\n    _icon = \"elastic-job-agents.png\"\n\n\nclass InstancePools(_Database):\n    _icon = \"instance-pools.png\"\n\n\nclass ManagedDatabases(_Database):\n    _icon = \"managed-databases.png\"\n\n\nclass SQLDatabases(_Database):\n    _icon = \"sql-databases.png\"\n\n\nclass SQLDatawarehouse(_Database):\n    _icon = \"sql-datawarehouse.png\"\n\n\nclass SQLManagedInstances(_Database):\n    _icon = \"sql-managed-instances.png\"\n\n\nclass SQLServerStretchDatabases(_Database):\n    _icon = \"sql-server-stretch-databases.png\"\n\n\nclass SQLServers(_Database):\n    _icon = \"sql-servers.png\"\n\n\nclass SQLVM(_Database):\n    _icon = \"sql-vm.png\"\n\n\nclass SQL(_Database):\n    _icon = \"sql.png\"\n\n\nclass SsisLiftAndShiftIr(_Database):\n    _icon = \"ssis-lift-and-shift-ir.png\"\n\n\nclass SynapseAnalytics(_Database):\n    _icon = \"synapse-analytics.png\"\n\n\nclass VirtualClusters(_Database):\n    _icon = \"virtual-clusters.png\"\n\n\nclass VirtualDatacenter(_Database):\n    _icon = \"virtual-datacenter.png\"\n\n\n# Aliases\n", "diagrams/azure/general.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _General(_Azure):\n    _type = \"general\"\n    _icon_dir = \"resources/azure/general\"\n\n\nclass Allresources(_General):\n    _icon = \"allresources.png\"\n\n\nclass Azurehome(_General):\n    _icon = \"azurehome.png\"\n\n\nclass Developertools(_General):\n    _icon = \"developertools.png\"\n\n\nclass Helpsupport(_General):\n    _icon = \"helpsupport.png\"\n\n\nclass Information(_General):\n    _icon = \"information.png\"\n\n\nclass Managementgroups(_General):\n    _icon = \"managementgroups.png\"\n\n\nclass Marketplace(_General):\n    _icon = \"marketplace.png\"\n\n\nclass Quickstartcenter(_General):\n    _icon = \"quickstartcenter.png\"\n\n\nclass Recent(_General):\n    _icon = \"recent.png\"\n\n\nclass Reservations(_General):\n    _icon = \"reservations.png\"\n\n\nclass Resource(_General):\n    _icon = \"resource.png\"\n\n\nclass Resourcegroups(_General):\n    _icon = \"resourcegroups.png\"\n\n\nclass Servicehealth(_General):\n    _icon = \"servicehealth.png\"\n\n\nclass Shareddashboard(_General):\n    _icon = \"shareddashboard.png\"\n\n\nclass Subscriptions(_General):\n    _icon = \"subscriptions.png\"\n\n\nclass Support(_General):\n    _icon = \"support.png\"\n\n\nclass Supportrequests(_General):\n    _icon = \"supportrequests.png\"\n\n\nclass Tag(_General):\n    _icon = \"tag.png\"\n\n\nclass Tags(_General):\n    _icon = \"tags.png\"\n\n\nclass Templates(_General):\n    _icon = \"templates.png\"\n\n\nclass Twousericon(_General):\n    _icon = \"twousericon.png\"\n\n\nclass Userhealthicon(_General):\n    _icon = \"userhealthicon.png\"\n\n\nclass Usericon(_General):\n    _icon = \"usericon.png\"\n\n\nclass Userprivacy(_General):\n    _icon = \"userprivacy.png\"\n\n\nclass Userresource(_General):\n    _icon = \"userresource.png\"\n\n\nclass Whatsnew(_General):\n    _icon = \"whatsnew.png\"\n\n\n# Aliases\n", "diagrams/azure/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Storage(_Azure):\n    _type = \"storage\"\n    _icon_dir = \"resources/azure/storage\"\n\n\nclass ArchiveStorage(_Storage):\n    _icon = \"archive-storage.png\"\n\n\nclass Azurefxtedgefiler(_Storage):\n    _icon = \"azurefxtedgefiler.png\"\n\n\nclass BlobStorage(_Storage):\n    _icon = \"blob-storage.png\"\n\n\nclass DataBoxEdgeDataBoxGateway(_Storage):\n    _icon = \"data-box-edge-data-box-gateway.png\"\n\n\nclass DataBox(_Storage):\n    _icon = \"data-box.png\"\n\n\nclass DataLakeStorage(_Storage):\n    _icon = \"data-lake-storage.png\"\n\n\nclass GeneralStorage(_Storage):\n    _icon = \"general-storage.png\"\n\n\nclass NetappFiles(_Storage):\n    _icon = \"netapp-files.png\"\n\n\nclass QueuesStorage(_Storage):\n    _icon = \"queues-storage.png\"\n\n\nclass StorageAccountsClassic(_Storage):\n    _icon = \"storage-accounts-classic.png\"\n\n\nclass StorageAccounts(_Storage):\n    _icon = \"storage-accounts.png\"\n\n\nclass StorageExplorer(_Storage):\n    _icon = \"storage-explorer.png\"\n\n\nclass StorageSyncServices(_Storage):\n    _icon = \"storage-sync-services.png\"\n\n\nclass StorsimpleDataManagers(_Storage):\n    _icon = \"storsimple-data-managers.png\"\n\n\nclass StorsimpleDeviceManagers(_Storage):\n    _icon = \"storsimple-device-managers.png\"\n\n\nclass TableStorage(_Storage):\n    _icon = \"table-storage.png\"\n\n\n# Aliases\n", "diagrams/azure/__init__.py": "\"\"\"\nAzure provides a set of services for Microsoft Azure provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _Azure(Node):\n    _provider = \"azure\"\n    _icon_dir = \"resources/azure\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/azure/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Azure\n\n\nclass _Network(_Azure):\n    _type = \"network\"\n    _icon_dir = \"resources/azure/network\"\n\n\nclass ApplicationGateway(_Network):\n    _icon = \"application-gateway.png\"\n\n\nclass ApplicationSecurityGroups(_Network):\n    _icon = \"application-security-groups.png\"\n\n\nclass CDNProfiles(_Network):\n    _icon = \"cdn-profiles.png\"\n\n\nclass Connections(_Network):\n    _icon = \"connections.png\"\n\n\nclass DDOSProtectionPlans(_Network):\n    _icon = \"ddos-protection-plans.png\"\n\n\nclass DNSPrivateZones(_Network):\n    _icon = \"dns-private-zones.png\"\n\n\nclass DNSZones(_Network):\n    _icon = \"dns-zones.png\"\n\n\nclass ExpressrouteCircuits(_Network):\n    _icon = \"expressroute-circuits.png\"\n\n\nclass Firewall(_Network):\n    _icon = \"firewall.png\"\n\n\nclass FrontDoors(_Network):\n    _icon = \"front-doors.png\"\n\n\nclass LoadBalancers(_Network):\n    _icon = \"load-balancers.png\"\n\n\nclass LocalNetworkGateways(_Network):\n    _icon = \"local-network-gateways.png\"\n\n\nclass NetworkInterfaces(_Network):\n    _icon = \"network-interfaces.png\"\n\n\nclass NetworkSecurityGroupsClassic(_Network):\n    _icon = \"network-security-groups-classic.png\"\n\n\nclass NetworkWatcher(_Network):\n    _icon = \"network-watcher.png\"\n\n\nclass OnPremisesDataGateways(_Network):\n    _icon = \"on-premises-data-gateways.png\"\n\n\nclass PrivateEndpoint(_Network):\n    _icon = \"private-endpoint.png\"\n\n\nclass PublicIpAddresses(_Network):\n    _icon = \"public-ip-addresses.png\"\n\n\nclass ReservedIpAddressesClassic(_Network):\n    _icon = \"reserved-ip-addresses-classic.png\"\n\n\nclass RouteFilters(_Network):\n    _icon = \"route-filters.png\"\n\n\nclass RouteTables(_Network):\n    _icon = \"route-tables.png\"\n\n\nclass ServiceEndpointPolicies(_Network):\n    _icon = \"service-endpoint-policies.png\"\n\n\nclass Subnets(_Network):\n    _icon = \"subnets.png\"\n\n\nclass TrafficManagerProfiles(_Network):\n    _icon = \"traffic-manager-profiles.png\"\n\n\nclass VirtualNetworkClassic(_Network):\n    _icon = \"virtual-network-classic.png\"\n\n\nclass VirtualNetworkGateways(_Network):\n    _icon = \"virtual-network-gateways.png\"\n\n\nclass VirtualNetworks(_Network):\n    _icon = \"virtual-networks.png\"\n\n\nclass VirtualWans(_Network):\n    _icon = \"virtual-wans.png\"\n\n\n# Aliases\n", "diagrams/programming/runtime.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Programming\n\n\nclass _Runtime(_Programming):\n    _type = \"runtime\"\n    _icon_dir = \"resources/programming/runtime\"\n\n\nclass Dapr(_Runtime):\n    _icon = \"dapr.png\"\n\n\n# Aliases\n", "diagrams/programming/framework.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Programming\n\n\nclass _Framework(_Programming):\n    _type = \"framework\"\n    _icon_dir = \"resources/programming/framework\"\n\n\nclass Angular(_Framework):\n    _icon = \"angular.png\"\n\n\nclass Backbone(_Framework):\n    _icon = \"backbone.png\"\n\n\nclass Django(_Framework):\n    _icon = \"django.png\"\n\n\nclass Ember(_Framework):\n    _icon = \"ember.png\"\n\n\nclass Fastapi(_Framework):\n    _icon = \"fastapi.png\"\n\n\nclass Flask(_Framework):\n    _icon = \"flask.png\"\n\n\nclass Flutter(_Framework):\n    _icon = \"flutter.png\"\n\n\nclass Graphql(_Framework):\n    _icon = \"graphql.png\"\n\n\nclass Laravel(_Framework):\n    _icon = \"laravel.png\"\n\n\nclass Micronaut(_Framework):\n    _icon = \"micronaut.png\"\n\n\nclass Quarkus(_Framework):\n    _icon = \"quarkus.png\"\n\n\nclass Rails(_Framework):\n    _icon = \"rails.png\"\n\n\nclass React(_Framework):\n    _icon = \"react.png\"\n\n\nclass Spring(_Framework):\n    _icon = \"spring.png\"\n\n\nclass Starlette(_Framework):\n    _icon = \"starlette.png\"\n\n\nclass Svelte(_Framework):\n    _icon = \"svelte.png\"\n\n\nclass Vue(_Framework):\n    _icon = \"vue.png\"\n\n\n# Aliases\n\nFastAPI = Fastapi\nGraphQL = Graphql\n", "diagrams/programming/flowchart.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Programming\n\n\nclass _Flowchart(_Programming):\n    _type = \"flowchart\"\n    _icon_dir = \"resources/programming/flowchart\"\n\n\nclass Action(_Flowchart):\n    _icon = \"action.png\"\n\n\nclass Collate(_Flowchart):\n    _icon = \"collate.png\"\n\n\nclass Database(_Flowchart):\n    _icon = \"database.png\"\n\n\nclass Decision(_Flowchart):\n    _icon = \"decision.png\"\n\n\nclass Delay(_Flowchart):\n    _icon = \"delay.png\"\n\n\nclass Display(_Flowchart):\n    _icon = \"display.png\"\n\n\nclass Document(_Flowchart):\n    _icon = \"document.png\"\n\n\nclass InputOutput(_Flowchart):\n    _icon = \"input-output.png\"\n\n\nclass Inspection(_Flowchart):\n    _icon = \"inspection.png\"\n\n\nclass InternalStorage(_Flowchart):\n    _icon = \"internal-storage.png\"\n\n\nclass LoopLimit(_Flowchart):\n    _icon = \"loop-limit.png\"\n\n\nclass ManualInput(_Flowchart):\n    _icon = \"manual-input.png\"\n\n\nclass ManualLoop(_Flowchart):\n    _icon = \"manual-loop.png\"\n\n\nclass Merge(_Flowchart):\n    _icon = \"merge.png\"\n\n\nclass MultipleDocuments(_Flowchart):\n    _icon = \"multiple-documents.png\"\n\n\nclass OffPageConnectorLeft(_Flowchart):\n    _icon = \"off-page-connector-left.png\"\n\n\nclass OffPageConnectorRight(_Flowchart):\n    _icon = \"off-page-connector-right.png\"\n\n\nclass Or(_Flowchart):\n    _icon = \"or.png\"\n\n\nclass PredefinedProcess(_Flowchart):\n    _icon = \"predefined-process.png\"\n\n\nclass Preparation(_Flowchart):\n    _icon = \"preparation.png\"\n\n\nclass Sort(_Flowchart):\n    _icon = \"sort.png\"\n\n\nclass StartEnd(_Flowchart):\n    _icon = \"start-end.png\"\n\n\nclass StoredData(_Flowchart):\n    _icon = \"stored-data.png\"\n\n\nclass SummingJunction(_Flowchart):\n    _icon = \"summing-junction.png\"\n\n\n# Aliases\n", "diagrams/programming/__init__.py": "\"\"\"\nProgramming provides a set of programming languages and frameworks.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _Programming(Node):\n    _provider = \"programming\"\n    _icon_dir = \"resources/programming\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/programming/language.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Programming\n\n\nclass _Language(_Programming):\n    _type = \"language\"\n    _icon_dir = \"resources/programming/language\"\n\n\nclass Bash(_Language):\n    _icon = \"bash.png\"\n\n\nclass C(_Language):\n    _icon = \"c.png\"\n\n\nclass Cpp(_Language):\n    _icon = \"cpp.png\"\n\n\nclass Csharp(_Language):\n    _icon = \"csharp.png\"\n\n\nclass Dart(_Language):\n    _icon = \"dart.png\"\n\n\nclass Elixir(_Language):\n    _icon = \"elixir.png\"\n\n\nclass Erlang(_Language):\n    _icon = \"erlang.png\"\n\n\nclass Go(_Language):\n    _icon = \"go.png\"\n\n\nclass Java(_Language):\n    _icon = \"java.png\"\n\n\nclass Javascript(_Language):\n    _icon = \"javascript.png\"\n\n\nclass Kotlin(_Language):\n    _icon = \"kotlin.png\"\n\n\nclass Latex(_Language):\n    _icon = \"latex.png\"\n\n\nclass Matlab(_Language):\n    _icon = \"matlab.png\"\n\n\nclass Nodejs(_Language):\n    _icon = \"nodejs.png\"\n\n\nclass Php(_Language):\n    _icon = \"php.png\"\n\n\nclass Python(_Language):\n    _icon = \"python.png\"\n\n\nclass R(_Language):\n    _icon = \"r.png\"\n\n\nclass Ruby(_Language):\n    _icon = \"ruby.png\"\n\n\nclass Rust(_Language):\n    _icon = \"rust.png\"\n\n\nclass Scala(_Language):\n    _icon = \"scala.png\"\n\n\nclass Swift(_Language):\n    _icon = \"swift.png\"\n\n\nclass Typescript(_Language):\n    _icon = \"typescript.png\"\n\n\n# Aliases\n\nJavaScript = Javascript\nNodeJS = Nodejs\nPHP = Php\nTypeScript = Typescript\n", "diagrams/saas/analytics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Analytics(_Saas):\n    _type = \"analytics\"\n    _icon_dir = \"resources/saas/analytics\"\n\n\nclass Dataform(_Analytics):\n    _icon = \"dataform.png\"\n\n\nclass Snowflake(_Analytics):\n    _icon = \"snowflake.png\"\n\n\nclass Stitch(_Analytics):\n    _icon = \"stitch.png\"\n\n\n# Aliases\n", "diagrams/saas/logging.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Logging(_Saas):\n    _type = \"logging\"\n    _icon_dir = \"resources/saas/logging\"\n\n\nclass Datadog(_Logging):\n    _icon = \"datadog.png\"\n\n\nclass Newrelic(_Logging):\n    _icon = \"newrelic.png\"\n\n\nclass Papertrail(_Logging):\n    _icon = \"papertrail.png\"\n\n\n# Aliases\n\nDataDog = Datadog\nNewRelic = Newrelic\n", "diagrams/saas/filesharing.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Filesharing(_Saas):\n    _type = \"filesharing\"\n    _icon_dir = \"resources/saas/filesharing\"\n\n\nclass Nextcloud(_Filesharing):\n    _icon = \"nextcloud.png\"\n\n\n# Aliases\n", "diagrams/saas/recommendation.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Recommendation(_Saas):\n    _type = \"recommendation\"\n    _icon_dir = \"resources/saas/recommendation\"\n\n\nclass Recombee(_Recommendation):\n    _icon = \"recombee.png\"\n\n\n# Aliases\n", "diagrams/saas/social.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Social(_Saas):\n    _type = \"social\"\n    _icon_dir = \"resources/saas/social\"\n\n\nclass Facebook(_Social):\n    _icon = \"facebook.png\"\n\n\nclass Twitter(_Social):\n    _icon = \"twitter.png\"\n\n\n# Aliases\n", "diagrams/saas/identity.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Identity(_Saas):\n    _type = \"identity\"\n    _icon_dir = \"resources/saas/identity\"\n\n\nclass Auth0(_Identity):\n    _icon = \"auth0.png\"\n\n\nclass Okta(_Identity):\n    _icon = \"okta.png\"\n\n\n# Aliases\n", "diagrams/saas/chat.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Chat(_Saas):\n    _type = \"chat\"\n    _icon_dir = \"resources/saas/chat\"\n\n\nclass Discord(_Chat):\n    _icon = \"discord.png\"\n\n\nclass Line(_Chat):\n    _icon = \"line.png\"\n\n\nclass Mattermost(_Chat):\n    _icon = \"mattermost.png\"\n\n\nclass Messenger(_Chat):\n    _icon = \"messenger.png\"\n\n\nclass RocketChat(_Chat):\n    _icon = \"rocket-chat.png\"\n\n\nclass Slack(_Chat):\n    _icon = \"slack.png\"\n\n\nclass Teams(_Chat):\n    _icon = \"teams.png\"\n\n\nclass Telegram(_Chat):\n    _icon = \"telegram.png\"\n\n\n# Aliases\n", "diagrams/saas/media.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Media(_Saas):\n    _type = \"media\"\n    _icon_dir = \"resources/saas/media\"\n\n\nclass Cloudinary(_Media):\n    _icon = \"cloudinary.png\"\n\n\n# Aliases\n", "diagrams/saas/__init__.py": "\"\"\"\nSaas provides a set of general saas services.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _Saas(Node):\n    _provider = \"saas\"\n    _icon_dir = \"resources/saas\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/saas/alerting.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Alerting(_Saas):\n    _type = \"alerting\"\n    _icon_dir = \"resources/saas/alerting\"\n\n\nclass Newrelic(_Alerting):\n    _icon = \"newrelic.png\"\n\n\nclass Opsgenie(_Alerting):\n    _icon = \"opsgenie.png\"\n\n\nclass Pagerduty(_Alerting):\n    _icon = \"pagerduty.png\"\n\n\nclass Pushover(_Alerting):\n    _icon = \"pushover.png\"\n\n\nclass Xmatters(_Alerting):\n    _icon = \"xmatters.png\"\n\n\n# Aliases\n", "diagrams/saas/communication.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Communication(_Saas):\n    _type = \"communication\"\n    _icon_dir = \"resources/saas/communication\"\n\n\nclass Twilio(_Communication):\n    _icon = \"twilio.png\"\n\n\n# Aliases\n", "diagrams/saas/cdn.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _Saas\n\n\nclass _Cdn(_Saas):\n    _type = \"cdn\"\n    _icon_dir = \"resources/saas/cdn\"\n\n\nclass Akamai(_Cdn):\n    _icon = \"akamai.png\"\n\n\nclass Cloudflare(_Cdn):\n    _icon = \"cloudflare.png\"\n\n\nclass Fastly(_Cdn):\n    _icon = \"fastly.png\"\n\n\n# Aliases\n", "diagrams/aws/analytics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Analytics(_AWS):\n    _type = \"analytics\"\n    _icon_dir = \"resources/aws/analytics\"\n\n\nclass Analytics(_Analytics):\n    _icon = \"analytics.png\"\n\n\nclass Athena(_Analytics):\n    _icon = \"athena.png\"\n\n\nclass CloudsearchSearchDocuments(_Analytics):\n    _icon = \"cloudsearch-search-documents.png\"\n\n\nclass Cloudsearch(_Analytics):\n    _icon = \"cloudsearch.png\"\n\n\nclass DataLakeResource(_Analytics):\n    _icon = \"data-lake-resource.png\"\n\n\nclass DataPipeline(_Analytics):\n    _icon = \"data-pipeline.png\"\n\n\nclass ElasticsearchService(_Analytics):\n    _icon = \"elasticsearch-service.png\"\n\n\nclass EMRCluster(_Analytics):\n    _icon = \"emr-cluster.png\"\n\n\nclass EMREngineMaprM3(_Analytics):\n    _icon = \"emr-engine-mapr-m3.png\"\n\n\nclass EMREngineMaprM5(_Analytics):\n    _icon = \"emr-engine-mapr-m5.png\"\n\n\nclass EMREngineMaprM7(_Analytics):\n    _icon = \"emr-engine-mapr-m7.png\"\n\n\nclass EMREngine(_Analytics):\n    _icon = \"emr-engine.png\"\n\n\nclass EMRHdfsCluster(_Analytics):\n    _icon = \"emr-hdfs-cluster.png\"\n\n\nclass EMR(_Analytics):\n    _icon = \"emr.png\"\n\n\nclass GlueCrawlers(_Analytics):\n    _icon = \"glue-crawlers.png\"\n\n\nclass GlueDataCatalog(_Analytics):\n    _icon = \"glue-data-catalog.png\"\n\n\nclass Glue(_Analytics):\n    _icon = \"glue.png\"\n\n\nclass KinesisDataAnalytics(_Analytics):\n    _icon = \"kinesis-data-analytics.png\"\n\n\nclass KinesisDataFirehose(_Analytics):\n    _icon = \"kinesis-data-firehose.png\"\n\n\nclass KinesisDataStreams(_Analytics):\n    _icon = \"kinesis-data-streams.png\"\n\n\nclass KinesisVideoStreams(_Analytics):\n    _icon = \"kinesis-video-streams.png\"\n\n\nclass Kinesis(_Analytics):\n    _icon = \"kinesis.png\"\n\n\nclass LakeFormation(_Analytics):\n    _icon = \"lake-formation.png\"\n\n\nclass ManagedStreamingForKafka(_Analytics):\n    _icon = \"managed-streaming-for-kafka.png\"\n\n\nclass Quicksight(_Analytics):\n    _icon = \"quicksight.png\"\n\n\nclass RedshiftDenseComputeNode(_Analytics):\n    _icon = \"redshift-dense-compute-node.png\"\n\n\nclass RedshiftDenseStorageNode(_Analytics):\n    _icon = \"redshift-dense-storage-node.png\"\n\n\nclass Redshift(_Analytics):\n    _icon = \"redshift.png\"\n\n\n# Aliases\n\nES = ElasticsearchService\n", "diagrams/aws/blockchain.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Blockchain(_AWS):\n    _type = \"blockchain\"\n    _icon_dir = \"resources/aws/blockchain\"\n\n\nclass BlockchainResource(_Blockchain):\n    _icon = \"blockchain-resource.png\"\n\n\nclass Blockchain(_Blockchain):\n    _icon = \"blockchain.png\"\n\n\nclass ManagedBlockchain(_Blockchain):\n    _icon = \"managed-blockchain.png\"\n\n\nclass QuantumLedgerDatabaseQldb(_Blockchain):\n    _icon = \"quantum-ledger-database-qldb.png\"\n\n\n# Aliases\n\nQLDB = QuantumLedgerDatabaseQldb\n", "diagrams/aws/enduser.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Enduser(_AWS):\n    _type = \"enduser\"\n    _icon_dir = \"resources/aws/enduser\"\n\n\nclass Appstream20(_Enduser):\n    _icon = \"appstream-2-0.png\"\n\n\nclass DesktopAndAppStreaming(_Enduser):\n    _icon = \"desktop-and-app-streaming.png\"\n\n\nclass Workdocs(_Enduser):\n    _icon = \"workdocs.png\"\n\n\nclass Worklink(_Enduser):\n    _icon = \"worklink.png\"\n\n\nclass Workspaces(_Enduser):\n    _icon = \"workspaces.png\"\n\n\n# Aliases\n", "diagrams/aws/enablement.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Enablement(_AWS):\n    _type = \"enablement\"\n    _icon_dir = \"resources/aws/enablement\"\n\n\nclass CustomerEnablement(_Enablement):\n    _icon = \"customer-enablement.png\"\n\n\nclass Iq(_Enablement):\n    _icon = \"iq.png\"\n\n\nclass ManagedServices(_Enablement):\n    _icon = \"managed-services.png\"\n\n\nclass ProfessionalServices(_Enablement):\n    _icon = \"professional-services.png\"\n\n\nclass Support(_Enablement):\n    _icon = \"support.png\"\n\n\n# Aliases\n", "diagrams/aws/ar.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Ar(_AWS):\n    _type = \"ar\"\n    _icon_dir = \"resources/aws/ar\"\n\n\nclass ArVr(_Ar):\n    _icon = \"ar-vr.png\"\n\n\nclass Sumerian(_Ar):\n    _icon = \"sumerian.png\"\n\n\n# Aliases\n", "diagrams/aws/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Security(_AWS):\n    _type = \"security\"\n    _icon_dir = \"resources/aws/security\"\n\n\nclass AdConnector(_Security):\n    _icon = \"ad-connector.png\"\n\n\nclass Artifact(_Security):\n    _icon = \"artifact.png\"\n\n\nclass CertificateAuthority(_Security):\n    _icon = \"certificate-authority.png\"\n\n\nclass CertificateManager(_Security):\n    _icon = \"certificate-manager.png\"\n\n\nclass CloudDirectory(_Security):\n    _icon = \"cloud-directory.png\"\n\n\nclass Cloudhsm(_Security):\n    _icon = \"cloudhsm.png\"\n\n\nclass Cognito(_Security):\n    _icon = \"cognito.png\"\n\n\nclass Detective(_Security):\n    _icon = \"detective.png\"\n\n\nclass DirectoryService(_Security):\n    _icon = \"directory-service.png\"\n\n\nclass FirewallManager(_Security):\n    _icon = \"firewall-manager.png\"\n\n\nclass Guardduty(_Security):\n    _icon = \"guardduty.png\"\n\n\nclass IdentityAndAccessManagementIamAccessAnalyzer(_Security):\n    _icon = \"identity-and-access-management-iam-access-analyzer.png\"\n\n\nclass IdentityAndAccessManagementIamAddOn(_Security):\n    _icon = \"identity-and-access-management-iam-add-on.png\"\n\n\nclass IdentityAndAccessManagementIamAWSStsAlternate(_Security):\n    _icon = \"identity-and-access-management-iam-aws-sts-alternate.png\"\n\n\nclass IdentityAndAccessManagementIamAWSSts(_Security):\n    _icon = \"identity-and-access-management-iam-aws-sts.png\"\n\n\nclass IdentityAndAccessManagementIamDataEncryptionKey(_Security):\n    _icon = \"identity-and-access-management-iam-data-encryption-key.png\"\n\n\nclass IdentityAndAccessManagementIamEncryptedData(_Security):\n    _icon = \"identity-and-access-management-iam-encrypted-data.png\"\n\n\nclass IdentityAndAccessManagementIamLongTermSecurityCredential(_Security):\n    _icon = \"identity-and-access-management-iam-long-term-security-credential.png\"\n\n\nclass IdentityAndAccessManagementIamMfaToken(_Security):\n    _icon = \"identity-and-access-management-iam-mfa-token.png\"\n\n\nclass IdentityAndAccessManagementIamPermissions(_Security):\n    _icon = \"identity-and-access-management-iam-permissions.png\"\n\n\nclass IdentityAndAccessManagementIamRole(_Security):\n    _icon = \"identity-and-access-management-iam-role.png\"\n\n\nclass IdentityAndAccessManagementIamTemporarySecurityCredential(_Security):\n    _icon = \"identity-and-access-management-iam-temporary-security-credential.png\"\n\n\nclass IdentityAndAccessManagementIam(_Security):\n    _icon = \"identity-and-access-management-iam.png\"\n\n\nclass InspectorAgent(_Security):\n    _icon = \"inspector-agent.png\"\n\n\nclass Inspector(_Security):\n    _icon = \"inspector.png\"\n\n\nclass KeyManagementService(_Security):\n    _icon = \"key-management-service.png\"\n\n\nclass Macie(_Security):\n    _icon = \"macie.png\"\n\n\nclass ManagedMicrosoftAd(_Security):\n    _icon = \"managed-microsoft-ad.png\"\n\n\nclass ResourceAccessManager(_Security):\n    _icon = \"resource-access-manager.png\"\n\n\nclass SecretsManager(_Security):\n    _icon = \"secrets-manager.png\"\n\n\nclass SecurityHubFinding(_Security):\n    _icon = \"security-hub-finding.png\"\n\n\nclass SecurityHub(_Security):\n    _icon = \"security-hub.png\"\n\n\nclass SecurityIdentityAndCompliance(_Security):\n    _icon = \"security-identity-and-compliance.png\"\n\n\nclass ShieldAdvanced(_Security):\n    _icon = \"shield-advanced.png\"\n\n\nclass Shield(_Security):\n    _icon = \"shield.png\"\n\n\nclass SimpleAd(_Security):\n    _icon = \"simple-ad.png\"\n\n\nclass SingleSignOn(_Security):\n    _icon = \"single-sign-on.png\"\n\n\nclass WAFFilteringRule(_Security):\n    _icon = \"waf-filtering-rule.png\"\n\n\nclass WAF(_Security):\n    _icon = \"waf.png\"\n\n\n# Aliases\n\nACM = CertificateManager\nCloudHSM = Cloudhsm\nDS = DirectoryService\nFMS = FirewallManager\nIAMAccessAnalyzer = IdentityAndAccessManagementIamAccessAnalyzer\nIAMAWSSts = IdentityAndAccessManagementIamAWSSts\nIAMPermissions = IdentityAndAccessManagementIamPermissions\nIAMRole = IdentityAndAccessManagementIamRole\nIAM = IdentityAndAccessManagementIam\nKMS = KeyManagementService\nRAM = ResourceAccessManager\n", "diagrams/aws/engagement.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Engagement(_AWS):\n    _type = \"engagement\"\n    _icon_dir = \"resources/aws/engagement\"\n\n\nclass Connect(_Engagement):\n    _icon = \"connect.png\"\n\n\nclass CustomerEngagement(_Engagement):\n    _icon = \"customer-engagement.png\"\n\n\nclass Pinpoint(_Engagement):\n    _icon = \"pinpoint.png\"\n\n\nclass SimpleEmailServiceSesEmail(_Engagement):\n    _icon = \"simple-email-service-ses-email.png\"\n\n\nclass SimpleEmailServiceSes(_Engagement):\n    _icon = \"simple-email-service-ses.png\"\n\n\n# Aliases\n\nSES = SimpleEmailServiceSes\n", "diagrams/aws/game.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Game(_AWS):\n    _type = \"game\"\n    _icon_dir = \"resources/aws/game\"\n\n\nclass GameTech(_Game):\n    _icon = \"game-tech.png\"\n\n\nclass Gamelift(_Game):\n    _icon = \"gamelift.png\"\n\n\n# Aliases\n", "diagrams/aws/cost.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Cost(_AWS):\n    _type = \"cost\"\n    _icon_dir = \"resources/aws/cost\"\n\n\nclass Budgets(_Cost):\n    _icon = \"budgets.png\"\n\n\nclass CostAndUsageReport(_Cost):\n    _icon = \"cost-and-usage-report.png\"\n\n\nclass CostExplorer(_Cost):\n    _icon = \"cost-explorer.png\"\n\n\nclass CostManagement(_Cost):\n    _icon = \"cost-management.png\"\n\n\nclass ReservedInstanceReporting(_Cost):\n    _icon = \"reserved-instance-reporting.png\"\n\n\nclass SavingsPlans(_Cost):\n    _icon = \"savings-plans.png\"\n\n\n# Aliases\n", "diagrams/aws/ml.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _ML(_AWS):\n    _type = \"ml\"\n    _icon_dir = \"resources/aws/ml\"\n\n\nclass ApacheMxnetOnAWS(_ML):\n    _icon = \"apache-mxnet-on-aws.png\"\n\n\nclass AugmentedAi(_ML):\n    _icon = \"augmented-ai.png\"\n\n\nclass Comprehend(_ML):\n    _icon = \"comprehend.png\"\n\n\nclass DeepLearningAmis(_ML):\n    _icon = \"deep-learning-amis.png\"\n\n\nclass DeepLearningContainers(_ML):\n    _icon = \"deep-learning-containers.png\"\n\n\nclass Deepcomposer(_ML):\n    _icon = \"deepcomposer.png\"\n\n\nclass Deeplens(_ML):\n    _icon = \"deeplens.png\"\n\n\nclass Deepracer(_ML):\n    _icon = \"deepracer.png\"\n\n\nclass ElasticInference(_ML):\n    _icon = \"elastic-inference.png\"\n\n\nclass Forecast(_ML):\n    _icon = \"forecast.png\"\n\n\nclass FraudDetector(_ML):\n    _icon = \"fraud-detector.png\"\n\n\nclass Kendra(_ML):\n    _icon = \"kendra.png\"\n\n\nclass Lex(_ML):\n    _icon = \"lex.png\"\n\n\nclass MachineLearning(_ML):\n    _icon = \"machine-learning.png\"\n\n\nclass Personalize(_ML):\n    _icon = \"personalize.png\"\n\n\nclass Polly(_ML):\n    _icon = \"polly.png\"\n\n\nclass RekognitionImage(_ML):\n    _icon = \"rekognition-image.png\"\n\n\nclass RekognitionVideo(_ML):\n    _icon = \"rekognition-video.png\"\n\n\nclass Rekognition(_ML):\n    _icon = \"rekognition.png\"\n\n\nclass SagemakerGroundTruth(_ML):\n    _icon = \"sagemaker-ground-truth.png\"\n\n\nclass SagemakerModel(_ML):\n    _icon = \"sagemaker-model.png\"\n\n\nclass SagemakerNotebook(_ML):\n    _icon = \"sagemaker-notebook.png\"\n\n\nclass SagemakerTrainingJob(_ML):\n    _icon = \"sagemaker-training-job.png\"\n\n\nclass Sagemaker(_ML):\n    _icon = \"sagemaker.png\"\n\n\nclass TensorflowOnAWS(_ML):\n    _icon = \"tensorflow-on-aws.png\"\n\n\nclass Textract(_ML):\n    _icon = \"textract.png\"\n\n\nclass Transcribe(_ML):\n    _icon = \"transcribe.png\"\n\n\nclass Translate(_ML):\n    _icon = \"translate.png\"\n\n\n# Aliases\n\nDLC = DeepLearningContainers\n", "diagrams/aws/mobile.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Mobile(_AWS):\n    _type = \"mobile\"\n    _icon_dir = \"resources/aws/mobile\"\n\n\nclass Amplify(_Mobile):\n    _icon = \"amplify.png\"\n\n\nclass APIGatewayEndpoint(_Mobile):\n    _icon = \"api-gateway-endpoint.png\"\n\n\nclass APIGateway(_Mobile):\n    _icon = \"api-gateway.png\"\n\n\nclass Appsync(_Mobile):\n    _icon = \"appsync.png\"\n\n\nclass DeviceFarm(_Mobile):\n    _icon = \"device-farm.png\"\n\n\nclass Mobile(_Mobile):\n    _icon = \"mobile.png\"\n\n\nclass Pinpoint(_Mobile):\n    _icon = \"pinpoint.png\"\n\n\n# Aliases\n", "diagrams/aws/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Compute(_AWS):\n    _type = \"compute\"\n    _icon_dir = \"resources/aws/compute\"\n\n\nclass AppRunner(_Compute):\n    _icon = \"app-runner.png\"\n\n\nclass ApplicationAutoScaling(_Compute):\n    _icon = \"application-auto-scaling.png\"\n\n\nclass Batch(_Compute):\n    _icon = \"batch.png\"\n\n\nclass ComputeOptimizer(_Compute):\n    _icon = \"compute-optimizer.png\"\n\n\nclass Compute(_Compute):\n    _icon = \"compute.png\"\n\n\nclass EC2Ami(_Compute):\n    _icon = \"ec2-ami.png\"\n\n\nclass EC2AutoScaling(_Compute):\n    _icon = \"ec2-auto-scaling.png\"\n\n\nclass EC2ContainerRegistryImage(_Compute):\n    _icon = \"ec2-container-registry-image.png\"\n\n\nclass EC2ContainerRegistryRegistry(_Compute):\n    _icon = \"ec2-container-registry-registry.png\"\n\n\nclass EC2ContainerRegistry(_Compute):\n    _icon = \"ec2-container-registry.png\"\n\n\nclass EC2ElasticIpAddress(_Compute):\n    _icon = \"ec2-elastic-ip-address.png\"\n\n\nclass EC2ImageBuilder(_Compute):\n    _icon = \"ec2-image-builder.png\"\n\n\nclass EC2Instance(_Compute):\n    _icon = \"ec2-instance.png\"\n\n\nclass EC2Instances(_Compute):\n    _icon = \"ec2-instances.png\"\n\n\nclass EC2Rescue(_Compute):\n    _icon = \"ec2-rescue.png\"\n\n\nclass EC2SpotInstance(_Compute):\n    _icon = \"ec2-spot-instance.png\"\n\n\nclass EC2(_Compute):\n    _icon = \"ec2.png\"\n\n\nclass ElasticBeanstalkApplication(_Compute):\n    _icon = \"elastic-beanstalk-application.png\"\n\n\nclass ElasticBeanstalkDeployment(_Compute):\n    _icon = \"elastic-beanstalk-deployment.png\"\n\n\nclass ElasticBeanstalk(_Compute):\n    _icon = \"elastic-beanstalk.png\"\n\n\nclass ElasticContainerServiceContainer(_Compute):\n    _icon = \"elastic-container-service-container.png\"\n\n\nclass ElasticContainerServiceService(_Compute):\n    _icon = \"elastic-container-service-service.png\"\n\n\nclass ElasticContainerService(_Compute):\n    _icon = \"elastic-container-service.png\"\n\n\nclass ElasticKubernetesService(_Compute):\n    _icon = \"elastic-kubernetes-service.png\"\n\n\nclass Fargate(_Compute):\n    _icon = \"fargate.png\"\n\n\nclass LambdaFunction(_Compute):\n    _icon = \"lambda-function.png\"\n\n\nclass Lambda(_Compute):\n    _icon = \"lambda.png\"\n\n\nclass Lightsail(_Compute):\n    _icon = \"lightsail.png\"\n\n\nclass LocalZones(_Compute):\n    _icon = \"local-zones.png\"\n\n\nclass Outposts(_Compute):\n    _icon = \"outposts.png\"\n\n\nclass ServerlessApplicationRepository(_Compute):\n    _icon = \"serverless-application-repository.png\"\n\n\nclass ThinkboxDeadline(_Compute):\n    _icon = \"thinkbox-deadline.png\"\n\n\nclass ThinkboxDraft(_Compute):\n    _icon = \"thinkbox-draft.png\"\n\n\nclass ThinkboxFrost(_Compute):\n    _icon = \"thinkbox-frost.png\"\n\n\nclass ThinkboxKrakatoa(_Compute):\n    _icon = \"thinkbox-krakatoa.png\"\n\n\nclass ThinkboxSequoia(_Compute):\n    _icon = \"thinkbox-sequoia.png\"\n\n\nclass ThinkboxStoke(_Compute):\n    _icon = \"thinkbox-stoke.png\"\n\n\nclass ThinkboxXmesh(_Compute):\n    _icon = \"thinkbox-xmesh.png\"\n\n\nclass VmwareCloudOnAWS(_Compute):\n    _icon = \"vmware-cloud-on-aws.png\"\n\n\nclass Wavelength(_Compute):\n    _icon = \"wavelength.png\"\n\n\n# Aliases\n\nAutoScaling = ApplicationAutoScaling\nAMI = EC2Ami\nECR = EC2ContainerRegistry\nEB = ElasticBeanstalk\nECS = ElasticContainerService\nEKS = ElasticKubernetesService\nSAR = ServerlessApplicationRepository\n", "diagrams/aws/quantum.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Quantum(_AWS):\n    _type = \"quantum\"\n    _icon_dir = \"resources/aws/quantum\"\n\n\nclass Braket(_Quantum):\n    _icon = \"braket.png\"\n\n\nclass QuantumTechnologies(_Quantum):\n    _icon = \"quantum-technologies.png\"\n\n\n# Aliases\n", "diagrams/aws/devtools.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Devtools(_AWS):\n    _type = \"devtools\"\n    _icon_dir = \"resources/aws/devtools\"\n\n\nclass CloudDevelopmentKit(_Devtools):\n    _icon = \"cloud-development-kit.png\"\n\n\nclass Cloud9Resource(_Devtools):\n    _icon = \"cloud9-resource.png\"\n\n\nclass Cloud9(_Devtools):\n    _icon = \"cloud9.png\"\n\n\nclass Codebuild(_Devtools):\n    _icon = \"codebuild.png\"\n\n\nclass Codecommit(_Devtools):\n    _icon = \"codecommit.png\"\n\n\nclass Codedeploy(_Devtools):\n    _icon = \"codedeploy.png\"\n\n\nclass Codepipeline(_Devtools):\n    _icon = \"codepipeline.png\"\n\n\nclass Codestar(_Devtools):\n    _icon = \"codestar.png\"\n\n\nclass CommandLineInterface(_Devtools):\n    _icon = \"command-line-interface.png\"\n\n\nclass DeveloperTools(_Devtools):\n    _icon = \"developer-tools.png\"\n\n\nclass ToolsAndSdks(_Devtools):\n    _icon = \"tools-and-sdks.png\"\n\n\nclass XRay(_Devtools):\n    _icon = \"x-ray.png\"\n\n\n# Aliases\n\nCLI = CommandLineInterface\nDevTools = DeveloperTools\n", "diagrams/aws/iot.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Iot(_AWS):\n    _type = \"iot\"\n    _icon_dir = \"resources/aws/iot\"\n\n\nclass Freertos(_Iot):\n    _icon = \"freertos.png\"\n\n\nclass InternetOfThings(_Iot):\n    _icon = \"internet-of-things.png\"\n\n\nclass Iot1Click(_Iot):\n    _icon = \"iot-1-click.png\"\n\n\nclass IotAction(_Iot):\n    _icon = \"iot-action.png\"\n\n\nclass IotActuator(_Iot):\n    _icon = \"iot-actuator.png\"\n\n\nclass IotAlexaEcho(_Iot):\n    _icon = \"iot-alexa-echo.png\"\n\n\nclass IotAlexaEnabledDevice(_Iot):\n    _icon = \"iot-alexa-enabled-device.png\"\n\n\nclass IotAlexaSkill(_Iot):\n    _icon = \"iot-alexa-skill.png\"\n\n\nclass IotAlexaVoiceService(_Iot):\n    _icon = \"iot-alexa-voice-service.png\"\n\n\nclass IotAnalyticsChannel(_Iot):\n    _icon = \"iot-analytics-channel.png\"\n\n\nclass IotAnalyticsDataSet(_Iot):\n    _icon = \"iot-analytics-data-set.png\"\n\n\nclass IotAnalyticsDataStore(_Iot):\n    _icon = \"iot-analytics-data-store.png\"\n\n\nclass IotAnalyticsNotebook(_Iot):\n    _icon = \"iot-analytics-notebook.png\"\n\n\nclass IotAnalyticsPipeline(_Iot):\n    _icon = \"iot-analytics-pipeline.png\"\n\n\nclass IotAnalytics(_Iot):\n    _icon = \"iot-analytics.png\"\n\n\nclass IotBank(_Iot):\n    _icon = \"iot-bank.png\"\n\n\nclass IotBicycle(_Iot):\n    _icon = \"iot-bicycle.png\"\n\n\nclass IotButton(_Iot):\n    _icon = \"iot-button.png\"\n\n\nclass IotCamera(_Iot):\n    _icon = \"iot-camera.png\"\n\n\nclass IotCar(_Iot):\n    _icon = \"iot-car.png\"\n\n\nclass IotCart(_Iot):\n    _icon = \"iot-cart.png\"\n\n\nclass IotCertificate(_Iot):\n    _icon = \"iot-certificate.png\"\n\n\nclass IotCoffeePot(_Iot):\n    _icon = \"iot-coffee-pot.png\"\n\n\nclass IotCore(_Iot):\n    _icon = \"iot-core.png\"\n\n\nclass IotDesiredState(_Iot):\n    _icon = \"iot-desired-state.png\"\n\n\nclass IotDeviceDefender(_Iot):\n    _icon = \"iot-device-defender.png\"\n\n\nclass IotDeviceGateway(_Iot):\n    _icon = \"iot-device-gateway.png\"\n\n\nclass IotDeviceManagement(_Iot):\n    _icon = \"iot-device-management.png\"\n\n\nclass IotDoorLock(_Iot):\n    _icon = \"iot-door-lock.png\"\n\n\nclass IotEvents(_Iot):\n    _icon = \"iot-events.png\"\n\n\nclass IotFactory(_Iot):\n    _icon = \"iot-factory.png\"\n\n\nclass IotFireTvStick(_Iot):\n    _icon = \"iot-fire-tv-stick.png\"\n\n\nclass IotFireTv(_Iot):\n    _icon = \"iot-fire-tv.png\"\n\n\nclass IotGeneric(_Iot):\n    _icon = \"iot-generic.png\"\n\n\nclass IotGreengrassConnector(_Iot):\n    _icon = \"iot-greengrass-connector.png\"\n\n\nclass IotGreengrass(_Iot):\n    _icon = \"iot-greengrass.png\"\n\n\nclass IotHardwareBoard(_Iot):\n    _icon = \"iot-hardware-board.png\"\n\n\nclass IotHouse(_Iot):\n    _icon = \"iot-house.png\"\n\n\nclass IotHttp(_Iot):\n    _icon = \"iot-http.png\"\n\n\nclass IotHttp2(_Iot):\n    _icon = \"iot-http2.png\"\n\n\nclass IotJobs(_Iot):\n    _icon = \"iot-jobs.png\"\n\n\nclass IotLambda(_Iot):\n    _icon = \"iot-lambda.png\"\n\n\nclass IotLightbulb(_Iot):\n    _icon = \"iot-lightbulb.png\"\n\n\nclass IotMedicalEmergency(_Iot):\n    _icon = \"iot-medical-emergency.png\"\n\n\nclass IotMqtt(_Iot):\n    _icon = \"iot-mqtt.png\"\n\n\nclass IotOverTheAirUpdate(_Iot):\n    _icon = \"iot-over-the-air-update.png\"\n\n\nclass IotPolicyEmergency(_Iot):\n    _icon = \"iot-policy-emergency.png\"\n\n\nclass IotPolicy(_Iot):\n    _icon = \"iot-policy.png\"\n\n\nclass IotReportedState(_Iot):\n    _icon = \"iot-reported-state.png\"\n\n\nclass IotRule(_Iot):\n    _icon = \"iot-rule.png\"\n\n\nclass IotSensor(_Iot):\n    _icon = \"iot-sensor.png\"\n\n\nclass IotServo(_Iot):\n    _icon = \"iot-servo.png\"\n\n\nclass IotShadow(_Iot):\n    _icon = \"iot-shadow.png\"\n\n\nclass IotSimulator(_Iot):\n    _icon = \"iot-simulator.png\"\n\n\nclass IotSitewise(_Iot):\n    _icon = \"iot-sitewise.png\"\n\n\nclass IotThermostat(_Iot):\n    _icon = \"iot-thermostat.png\"\n\n\nclass IotThingsGraph(_Iot):\n    _icon = \"iot-things-graph.png\"\n\n\nclass IotTopic(_Iot):\n    _icon = \"iot-topic.png\"\n\n\nclass IotTravel(_Iot):\n    _icon = \"iot-travel.png\"\n\n\nclass IotUtility(_Iot):\n    _icon = \"iot-utility.png\"\n\n\nclass IotWindfarm(_Iot):\n    _icon = \"iot-windfarm.png\"\n\n\n# Aliases\n\nFreeRTOS = Freertos\nIotBoard = IotHardwareBoard\n", "diagrams/aws/migration.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Migration(_AWS):\n    _type = \"migration\"\n    _icon_dir = \"resources/aws/migration\"\n\n\nclass ApplicationDiscoveryService(_Migration):\n    _icon = \"application-discovery-service.png\"\n\n\nclass CloudendureMigration(_Migration):\n    _icon = \"cloudendure-migration.png\"\n\n\nclass DatabaseMigrationService(_Migration):\n    _icon = \"database-migration-service.png\"\n\n\nclass DatasyncAgent(_Migration):\n    _icon = \"datasync-agent.png\"\n\n\nclass Datasync(_Migration):\n    _icon = \"datasync.png\"\n\n\nclass MigrationAndTransfer(_Migration):\n    _icon = \"migration-and-transfer.png\"\n\n\nclass MigrationHub(_Migration):\n    _icon = \"migration-hub.png\"\n\n\nclass ServerMigrationService(_Migration):\n    _icon = \"server-migration-service.png\"\n\n\nclass SnowballEdge(_Migration):\n    _icon = \"snowball-edge.png\"\n\n\nclass Snowball(_Migration):\n    _icon = \"snowball.png\"\n\n\nclass Snowmobile(_Migration):\n    _icon = \"snowmobile.png\"\n\n\nclass TransferForSftp(_Migration):\n    _icon = \"transfer-for-sftp.png\"\n\n\n# Aliases\n\nADS = ApplicationDiscoveryService\nCEM = CloudendureMigration\nDMS = DatabaseMigrationService\nMAT = MigrationAndTransfer\nSMS = ServerMigrationService\n", "diagrams/aws/integration.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Integration(_AWS):\n    _type = \"integration\"\n    _icon_dir = \"resources/aws/integration\"\n\n\nclass ApplicationIntegration(_Integration):\n    _icon = \"application-integration.png\"\n\n\nclass Appsync(_Integration):\n    _icon = \"appsync.png\"\n\n\nclass ConsoleMobileApplication(_Integration):\n    _icon = \"console-mobile-application.png\"\n\n\nclass EventResource(_Integration):\n    _icon = \"event-resource.png\"\n\n\nclass EventbridgeCustomEventBusResource(_Integration):\n    _icon = \"eventbridge-custom-event-bus-resource.png\"\n\n\nclass EventbridgeDefaultEventBusResource(_Integration):\n    _icon = \"eventbridge-default-event-bus-resource.png\"\n\n\nclass EventbridgeSaasPartnerEventBusResource(_Integration):\n    _icon = \"eventbridge-saas-partner-event-bus-resource.png\"\n\n\nclass Eventbridge(_Integration):\n    _icon = \"eventbridge.png\"\n\n\nclass ExpressWorkflows(_Integration):\n    _icon = \"express-workflows.png\"\n\n\nclass MQ(_Integration):\n    _icon = \"mq.png\"\n\n\nclass SimpleNotificationServiceSnsEmailNotification(_Integration):\n    _icon = \"simple-notification-service-sns-email-notification.png\"\n\n\nclass SimpleNotificationServiceSnsHttpNotification(_Integration):\n    _icon = \"simple-notification-service-sns-http-notification.png\"\n\n\nclass SimpleNotificationServiceSnsTopic(_Integration):\n    _icon = \"simple-notification-service-sns-topic.png\"\n\n\nclass SimpleNotificationServiceSns(_Integration):\n    _icon = \"simple-notification-service-sns.png\"\n\n\nclass SimpleQueueServiceSqsMessage(_Integration):\n    _icon = \"simple-queue-service-sqs-message.png\"\n\n\nclass SimpleQueueServiceSqsQueue(_Integration):\n    _icon = \"simple-queue-service-sqs-queue.png\"\n\n\nclass SimpleQueueServiceSqs(_Integration):\n    _icon = \"simple-queue-service-sqs.png\"\n\n\nclass StepFunctions(_Integration):\n    _icon = \"step-functions.png\"\n\n\n# Aliases\n\nSNS = SimpleNotificationServiceSns\nSQS = SimpleQueueServiceSqs\nSF = StepFunctions\n", "diagrams/aws/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Database(_AWS):\n    _type = \"database\"\n    _icon_dir = \"resources/aws/database\"\n\n\nclass AuroraInstance(_Database):\n    _icon = \"aurora-instance.png\"\n\n\nclass Aurora(_Database):\n    _icon = \"aurora.png\"\n\n\nclass DatabaseMigrationServiceDatabaseMigrationWorkflow(_Database):\n    _icon = \"database-migration-service-database-migration-workflow.png\"\n\n\nclass DatabaseMigrationService(_Database):\n    _icon = \"database-migration-service.png\"\n\n\nclass Database(_Database):\n    _icon = \"database.png\"\n\n\nclass DocumentdbMongodbCompatibility(_Database):\n    _icon = \"documentdb-mongodb-compatibility.png\"\n\n\nclass DynamodbAttribute(_Database):\n    _icon = \"dynamodb-attribute.png\"\n\n\nclass DynamodbAttributes(_Database):\n    _icon = \"dynamodb-attributes.png\"\n\n\nclass DynamodbDax(_Database):\n    _icon = \"dynamodb-dax.png\"\n\n\nclass DynamodbGlobalSecondaryIndex(_Database):\n    _icon = \"dynamodb-global-secondary-index.png\"\n\n\nclass DynamodbItem(_Database):\n    _icon = \"dynamodb-item.png\"\n\n\nclass DynamodbItems(_Database):\n    _icon = \"dynamodb-items.png\"\n\n\nclass DynamodbTable(_Database):\n    _icon = \"dynamodb-table.png\"\n\n\nclass Dynamodb(_Database):\n    _icon = \"dynamodb.png\"\n\n\nclass ElasticacheCacheNode(_Database):\n    _icon = \"elasticache-cache-node.png\"\n\n\nclass ElasticacheForMemcached(_Database):\n    _icon = \"elasticache-for-memcached.png\"\n\n\nclass ElasticacheForRedis(_Database):\n    _icon = \"elasticache-for-redis.png\"\n\n\nclass Elasticache(_Database):\n    _icon = \"elasticache.png\"\n\n\nclass KeyspacesManagedApacheCassandraService(_Database):\n    _icon = \"keyspaces-managed-apache-cassandra-service.png\"\n\n\nclass Neptune(_Database):\n    _icon = \"neptune.png\"\n\n\nclass QuantumLedgerDatabaseQldb(_Database):\n    _icon = \"quantum-ledger-database-qldb.png\"\n\n\nclass RDSInstance(_Database):\n    _icon = \"rds-instance.png\"\n\n\nclass RDSMariadbInstance(_Database):\n    _icon = \"rds-mariadb-instance.png\"\n\n\nclass RDSMysqlInstance(_Database):\n    _icon = \"rds-mysql-instance.png\"\n\n\nclass RDSOnVmware(_Database):\n    _icon = \"rds-on-vmware.png\"\n\n\nclass RDSOracleInstance(_Database):\n    _icon = \"rds-oracle-instance.png\"\n\n\nclass RDSPostgresqlInstance(_Database):\n    _icon = \"rds-postgresql-instance.png\"\n\n\nclass RDSSqlServerInstance(_Database):\n    _icon = \"rds-sql-server-instance.png\"\n\n\nclass RDS(_Database):\n    _icon = \"rds.png\"\n\n\nclass RedshiftDenseComputeNode(_Database):\n    _icon = \"redshift-dense-compute-node.png\"\n\n\nclass RedshiftDenseStorageNode(_Database):\n    _icon = \"redshift-dense-storage-node.png\"\n\n\nclass Redshift(_Database):\n    _icon = \"redshift.png\"\n\n\nclass Timestream(_Database):\n    _icon = \"timestream.png\"\n\n\n# Aliases\n\nDMS = DatabaseMigrationService\nDocumentDB = DocumentdbMongodbCompatibility\nDAX = DynamodbDax\nDynamodbGSI = DynamodbGlobalSecondaryIndex\nDB = Database\nDDB = Dynamodb\nElastiCache = Elasticache\nQLDB = QuantumLedgerDatabaseQldb\n", "diagrams/aws/general.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _General(_AWS):\n    _type = \"general\"\n    _icon_dir = \"resources/aws/general\"\n\n\nclass Client(_General):\n    _icon = \"client.png\"\n\n\nclass Disk(_General):\n    _icon = \"disk.png\"\n\n\nclass Forums(_General):\n    _icon = \"forums.png\"\n\n\nclass General(_General):\n    _icon = \"general.png\"\n\n\nclass GenericDatabase(_General):\n    _icon = \"generic-database.png\"\n\n\nclass GenericFirewall(_General):\n    _icon = \"generic-firewall.png\"\n\n\nclass GenericOfficeBuilding(_General):\n    _icon = \"generic-office-building.png\"\n\n\nclass GenericSamlToken(_General):\n    _icon = \"generic-saml-token.png\"\n\n\nclass GenericSDK(_General):\n    _icon = \"generic-sdk.png\"\n\n\nclass InternetAlt1(_General):\n    _icon = \"internet-alt1.png\"\n\n\nclass InternetAlt2(_General):\n    _icon = \"internet-alt2.png\"\n\n\nclass InternetGateway(_General):\n    _icon = \"internet-gateway.png\"\n\n\nclass Marketplace(_General):\n    _icon = \"marketplace.png\"\n\n\nclass MobileClient(_General):\n    _icon = \"mobile-client.png\"\n\n\nclass Multimedia(_General):\n    _icon = \"multimedia.png\"\n\n\nclass OfficeBuilding(_General):\n    _icon = \"office-building.png\"\n\n\nclass SamlToken(_General):\n    _icon = \"saml-token.png\"\n\n\nclass SDK(_General):\n    _icon = \"sdk.png\"\n\n\nclass SslPadlock(_General):\n    _icon = \"ssl-padlock.png\"\n\n\nclass TapeStorage(_General):\n    _icon = \"tape-storage.png\"\n\n\nclass Toolkit(_General):\n    _icon = \"toolkit.png\"\n\n\nclass TraditionalServer(_General):\n    _icon = \"traditional-server.png\"\n\n\nclass User(_General):\n    _icon = \"user.png\"\n\n\nclass Users(_General):\n    _icon = \"users.png\"\n\n\n# Aliases\n\nOfficeBuilding = GenericOfficeBuilding\n", "diagrams/aws/media.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Media(_AWS):\n    _type = \"media\"\n    _icon_dir = \"resources/aws/media\"\n\n\nclass ElasticTranscoder(_Media):\n    _icon = \"elastic-transcoder.png\"\n\n\nclass ElementalConductor(_Media):\n    _icon = \"elemental-conductor.png\"\n\n\nclass ElementalDelta(_Media):\n    _icon = \"elemental-delta.png\"\n\n\nclass ElementalLive(_Media):\n    _icon = \"elemental-live.png\"\n\n\nclass ElementalMediaconnect(_Media):\n    _icon = \"elemental-mediaconnect.png\"\n\n\nclass ElementalMediaconvert(_Media):\n    _icon = \"elemental-mediaconvert.png\"\n\n\nclass ElementalMedialive(_Media):\n    _icon = \"elemental-medialive.png\"\n\n\nclass ElementalMediapackage(_Media):\n    _icon = \"elemental-mediapackage.png\"\n\n\nclass ElementalMediastore(_Media):\n    _icon = \"elemental-mediastore.png\"\n\n\nclass ElementalMediatailor(_Media):\n    _icon = \"elemental-mediatailor.png\"\n\n\nclass ElementalServer(_Media):\n    _icon = \"elemental-server.png\"\n\n\nclass KinesisVideoStreams(_Media):\n    _icon = \"kinesis-video-streams.png\"\n\n\nclass MediaServices(_Media):\n    _icon = \"media-services.png\"\n\n\n# Aliases\n", "diagrams/aws/robotics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Robotics(_AWS):\n    _type = \"robotics\"\n    _icon_dir = \"resources/aws/robotics\"\n\n\nclass RobomakerCloudExtensionRos(_Robotics):\n    _icon = \"robomaker-cloud-extension-ros.png\"\n\n\nclass RobomakerDevelopmentEnvironment(_Robotics):\n    _icon = \"robomaker-development-environment.png\"\n\n\nclass RobomakerFleetManagement(_Robotics):\n    _icon = \"robomaker-fleet-management.png\"\n\n\nclass RobomakerSimulator(_Robotics):\n    _icon = \"robomaker-simulator.png\"\n\n\nclass Robomaker(_Robotics):\n    _icon = \"robomaker.png\"\n\n\nclass Robotics(_Robotics):\n    _icon = \"robotics.png\"\n\n\n# Aliases\n", "diagrams/aws/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Storage(_AWS):\n    _type = \"storage\"\n    _icon_dir = \"resources/aws/storage\"\n\n\nclass Backup(_Storage):\n    _icon = \"backup.png\"\n\n\nclass CloudendureDisasterRecovery(_Storage):\n    _icon = \"cloudendure-disaster-recovery.png\"\n\n\nclass EFSInfrequentaccessPrimaryBg(_Storage):\n    _icon = \"efs-infrequentaccess-primary-bg.png\"\n\n\nclass EFSStandardPrimaryBg(_Storage):\n    _icon = \"efs-standard-primary-bg.png\"\n\n\nclass ElasticBlockStoreEBSSnapshot(_Storage):\n    _icon = \"elastic-block-store-ebs-snapshot.png\"\n\n\nclass ElasticBlockStoreEBSVolume(_Storage):\n    _icon = \"elastic-block-store-ebs-volume.png\"\n\n\nclass ElasticBlockStoreEBS(_Storage):\n    _icon = \"elastic-block-store-ebs.png\"\n\n\nclass ElasticFileSystemEFSFileSystem(_Storage):\n    _icon = \"elastic-file-system-efs-file-system.png\"\n\n\nclass ElasticFileSystemEFS(_Storage):\n    _icon = \"elastic-file-system-efs.png\"\n\n\nclass FsxForLustre(_Storage):\n    _icon = \"fsx-for-lustre.png\"\n\n\nclass FsxForWindowsFileServer(_Storage):\n    _icon = \"fsx-for-windows-file-server.png\"\n\n\nclass Fsx(_Storage):\n    _icon = \"fsx.png\"\n\n\nclass MultipleVolumesResource(_Storage):\n    _icon = \"multiple-volumes-resource.png\"\n\n\nclass S3GlacierArchive(_Storage):\n    _icon = \"s3-glacier-archive.png\"\n\n\nclass S3GlacierVault(_Storage):\n    _icon = \"s3-glacier-vault.png\"\n\n\nclass S3Glacier(_Storage):\n    _icon = \"s3-glacier.png\"\n\n\nclass SimpleStorageServiceS3BucketWithObjects(_Storage):\n    _icon = \"simple-storage-service-s3-bucket-with-objects.png\"\n\n\nclass SimpleStorageServiceS3Bucket(_Storage):\n    _icon = \"simple-storage-service-s3-bucket.png\"\n\n\nclass SimpleStorageServiceS3Object(_Storage):\n    _icon = \"simple-storage-service-s3-object.png\"\n\n\nclass SimpleStorageServiceS3(_Storage):\n    _icon = \"simple-storage-service-s3.png\"\n\n\nclass SnowFamilySnowballImportExport(_Storage):\n    _icon = \"snow-family-snowball-import-export.png\"\n\n\nclass SnowballEdge(_Storage):\n    _icon = \"snowball-edge.png\"\n\n\nclass Snowball(_Storage):\n    _icon = \"snowball.png\"\n\n\nclass Snowmobile(_Storage):\n    _icon = \"snowmobile.png\"\n\n\nclass StorageGatewayCachedVolume(_Storage):\n    _icon = \"storage-gateway-cached-volume.png\"\n\n\nclass StorageGatewayNonCachedVolume(_Storage):\n    _icon = \"storage-gateway-non-cached-volume.png\"\n\n\nclass StorageGatewayVirtualTapeLibrary(_Storage):\n    _icon = \"storage-gateway-virtual-tape-library.png\"\n\n\nclass StorageGateway(_Storage):\n    _icon = \"storage-gateway.png\"\n\n\nclass Storage(_Storage):\n    _icon = \"storage.png\"\n\n\n# Aliases\n\nCDR = CloudendureDisasterRecovery\nEBS = ElasticBlockStoreEBS\nEFS = ElasticFileSystemEFS\nFSx = Fsx\nS3 = SimpleStorageServiceS3\n", "diagrams/aws/satellite.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Satellite(_AWS):\n    _type = \"satellite\"\n    _icon_dir = \"resources/aws/satellite\"\n\n\nclass GroundStation(_Satellite):\n    _icon = \"ground-station.png\"\n\n\nclass Satellite(_Satellite):\n    _icon = \"satellite.png\"\n\n\n# Aliases\n", "diagrams/aws/__init__.py": "\"\"\"\nAWS provides a set of services for Amazon Web Service provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _AWS(Node):\n    _provider = \"aws\"\n    _icon_dir = \"resources/aws\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/aws/business.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Business(_AWS):\n    _type = \"business\"\n    _icon_dir = \"resources/aws/business\"\n\n\nclass AlexaForBusiness(_Business):\n    _icon = \"alexa-for-business.png\"\n\n\nclass BusinessApplications(_Business):\n    _icon = \"business-applications.png\"\n\n\nclass Chime(_Business):\n    _icon = \"chime.png\"\n\n\nclass Workmail(_Business):\n    _icon = \"workmail.png\"\n\n\n# Aliases\n\nA4B = AlexaForBusiness\n", "diagrams/aws/management.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Management(_AWS):\n    _type = \"management\"\n    _icon_dir = \"resources/aws/management\"\n\n\nclass AutoScaling(_Management):\n    _icon = \"auto-scaling.png\"\n\n\nclass Chatbot(_Management):\n    _icon = \"chatbot.png\"\n\n\nclass CloudformationChangeSet(_Management):\n    _icon = \"cloudformation-change-set.png\"\n\n\nclass CloudformationStack(_Management):\n    _icon = \"cloudformation-stack.png\"\n\n\nclass CloudformationTemplate(_Management):\n    _icon = \"cloudformation-template.png\"\n\n\nclass Cloudformation(_Management):\n    _icon = \"cloudformation.png\"\n\n\nclass Cloudtrail(_Management):\n    _icon = \"cloudtrail.png\"\n\n\nclass CloudwatchAlarm(_Management):\n    _icon = \"cloudwatch-alarm.png\"\n\n\nclass CloudwatchEventEventBased(_Management):\n    _icon = \"cloudwatch-event-event-based.png\"\n\n\nclass CloudwatchEventTimeBased(_Management):\n    _icon = \"cloudwatch-event-time-based.png\"\n\n\nclass CloudwatchRule(_Management):\n    _icon = \"cloudwatch-rule.png\"\n\n\nclass Cloudwatch(_Management):\n    _icon = \"cloudwatch.png\"\n\n\nclass Codeguru(_Management):\n    _icon = \"codeguru.png\"\n\n\nclass CommandLineInterface(_Management):\n    _icon = \"command-line-interface.png\"\n\n\nclass Config(_Management):\n    _icon = \"config.png\"\n\n\nclass ControlTower(_Management):\n    _icon = \"control-tower.png\"\n\n\nclass LicenseManager(_Management):\n    _icon = \"license-manager.png\"\n\n\nclass ManagedServices(_Management):\n    _icon = \"managed-services.png\"\n\n\nclass ManagementAndGovernance(_Management):\n    _icon = \"management-and-governance.png\"\n\n\nclass ManagementConsole(_Management):\n    _icon = \"management-console.png\"\n\n\nclass OpsworksApps(_Management):\n    _icon = \"opsworks-apps.png\"\n\n\nclass OpsworksDeployments(_Management):\n    _icon = \"opsworks-deployments.png\"\n\n\nclass OpsworksInstances(_Management):\n    _icon = \"opsworks-instances.png\"\n\n\nclass OpsworksLayers(_Management):\n    _icon = \"opsworks-layers.png\"\n\n\nclass OpsworksMonitoring(_Management):\n    _icon = \"opsworks-monitoring.png\"\n\n\nclass OpsworksPermissions(_Management):\n    _icon = \"opsworks-permissions.png\"\n\n\nclass OpsworksResources(_Management):\n    _icon = \"opsworks-resources.png\"\n\n\nclass OpsworksStack(_Management):\n    _icon = \"opsworks-stack.png\"\n\n\nclass Opsworks(_Management):\n    _icon = \"opsworks.png\"\n\n\nclass OrganizationsAccount(_Management):\n    _icon = \"organizations-account.png\"\n\n\nclass OrganizationsOrganizationalUnit(_Management):\n    _icon = \"organizations-organizational-unit.png\"\n\n\nclass Organizations(_Management):\n    _icon = \"organizations.png\"\n\n\nclass PersonalHealthDashboard(_Management):\n    _icon = \"personal-health-dashboard.png\"\n\n\nclass ServiceCatalog(_Management):\n    _icon = \"service-catalog.png\"\n\n\nclass SystemsManagerAutomation(_Management):\n    _icon = \"systems-manager-automation.png\"\n\n\nclass SystemsManagerDocuments(_Management):\n    _icon = \"systems-manager-documents.png\"\n\n\nclass SystemsManagerInventory(_Management):\n    _icon = \"systems-manager-inventory.png\"\n\n\nclass SystemsManagerMaintenanceWindows(_Management):\n    _icon = \"systems-manager-maintenance-windows.png\"\n\n\nclass SystemsManagerOpscenter(_Management):\n    _icon = \"systems-manager-opscenter.png\"\n\n\nclass SystemsManagerParameterStore(_Management):\n    _icon = \"systems-manager-parameter-store.png\"\n\n\nclass SystemsManagerPatchManager(_Management):\n    _icon = \"systems-manager-patch-manager.png\"\n\n\nclass SystemsManagerRunCommand(_Management):\n    _icon = \"systems-manager-run-command.png\"\n\n\nclass SystemsManagerStateManager(_Management):\n    _icon = \"systems-manager-state-manager.png\"\n\n\nclass SystemsManager(_Management):\n    _icon = \"systems-manager.png\"\n\n\nclass TrustedAdvisorChecklistCost(_Management):\n    _icon = \"trusted-advisor-checklist-cost.png\"\n\n\nclass TrustedAdvisorChecklistFaultTolerant(_Management):\n    _icon = \"trusted-advisor-checklist-fault-tolerant.png\"\n\n\nclass TrustedAdvisorChecklistPerformance(_Management):\n    _icon = \"trusted-advisor-checklist-performance.png\"\n\n\nclass TrustedAdvisorChecklistSecurity(_Management):\n    _icon = \"trusted-advisor-checklist-security.png\"\n\n\nclass TrustedAdvisorChecklist(_Management):\n    _icon = \"trusted-advisor-checklist.png\"\n\n\nclass TrustedAdvisor(_Management):\n    _icon = \"trusted-advisor.png\"\n\n\nclass WellArchitectedTool(_Management):\n    _icon = \"well-architected-tool.png\"\n\n\n# Aliases\n\nSSM = SystemsManager\nParameterStore = SystemsManagerParameterStore\n", "diagrams/aws/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AWS\n\n\nclass _Network(_AWS):\n    _type = \"network\"\n    _icon_dir = \"resources/aws/network\"\n\n\nclass APIGatewayEndpoint(_Network):\n    _icon = \"api-gateway-endpoint.png\"\n\n\nclass APIGateway(_Network):\n    _icon = \"api-gateway.png\"\n\n\nclass AppMesh(_Network):\n    _icon = \"app-mesh.png\"\n\n\nclass ClientVpn(_Network):\n    _icon = \"client-vpn.png\"\n\n\nclass CloudMap(_Network):\n    _icon = \"cloud-map.png\"\n\n\nclass CloudFrontDownloadDistribution(_Network):\n    _icon = \"cloudfront-download-distribution.png\"\n\n\nclass CloudFrontEdgeLocation(_Network):\n    _icon = \"cloudfront-edge-location.png\"\n\n\nclass CloudFrontStreamingDistribution(_Network):\n    _icon = \"cloudfront-streaming-distribution.png\"\n\n\nclass CloudFront(_Network):\n    _icon = \"cloudfront.png\"\n\n\nclass DirectConnect(_Network):\n    _icon = \"direct-connect.png\"\n\n\nclass ElasticLoadBalancing(_Network):\n    _icon = \"elastic-load-balancing.png\"\n\n\nclass ElbApplicationLoadBalancer(_Network):\n    _icon = \"elb-application-load-balancer.png\"\n\n\nclass ElbClassicLoadBalancer(_Network):\n    _icon = \"elb-classic-load-balancer.png\"\n\n\nclass ElbNetworkLoadBalancer(_Network):\n    _icon = \"elb-network-load-balancer.png\"\n\n\nclass Endpoint(_Network):\n    _icon = \"endpoint.png\"\n\n\nclass GlobalAccelerator(_Network):\n    _icon = \"global-accelerator.png\"\n\n\nclass InternetGateway(_Network):\n    _icon = \"internet-gateway.png\"\n\n\nclass Nacl(_Network):\n    _icon = \"nacl.png\"\n\n\nclass NATGateway(_Network):\n    _icon = \"nat-gateway.png\"\n\n\nclass NetworkingAndContentDelivery(_Network):\n    _icon = \"networking-and-content-delivery.png\"\n\n\nclass PrivateSubnet(_Network):\n    _icon = \"private-subnet.png\"\n\n\nclass Privatelink(_Network):\n    _icon = \"privatelink.png\"\n\n\nclass PublicSubnet(_Network):\n    _icon = \"public-subnet.png\"\n\n\nclass Route53HostedZone(_Network):\n    _icon = \"route-53-hosted-zone.png\"\n\n\nclass Route53(_Network):\n    _icon = \"route-53.png\"\n\n\nclass RouteTable(_Network):\n    _icon = \"route-table.png\"\n\n\nclass SiteToSiteVpn(_Network):\n    _icon = \"site-to-site-vpn.png\"\n\n\nclass TransitGateway(_Network):\n    _icon = \"transit-gateway.png\"\n\n\nclass VPCCustomerGateway(_Network):\n    _icon = \"vpc-customer-gateway.png\"\n\n\nclass VPCElasticNetworkAdapter(_Network):\n    _icon = \"vpc-elastic-network-adapter.png\"\n\n\nclass VPCElasticNetworkInterface(_Network):\n    _icon = \"vpc-elastic-network-interface.png\"\n\n\nclass VPCFlowLogs(_Network):\n    _icon = \"vpc-flow-logs.png\"\n\n\nclass VPCPeering(_Network):\n    _icon = \"vpc-peering.png\"\n\n\nclass VPCRouter(_Network):\n    _icon = \"vpc-router.png\"\n\n\nclass VPCTrafficMirroring(_Network):\n    _icon = \"vpc-traffic-mirroring.png\"\n\n\nclass VPC(_Network):\n    _icon = \"vpc.png\"\n\n\nclass VpnConnection(_Network):\n    _icon = \"vpn-connection.png\"\n\n\nclass VpnGateway(_Network):\n    _icon = \"vpn-gateway.png\"\n\n\n# Aliases\n\nCF = CloudFront\nELB = ElasticLoadBalancing\nALB = ElbApplicationLoadBalancer\nCLB = ElbClassicLoadBalancer\nNLB = ElbNetworkLoadBalancer\nGAX = GlobalAccelerator\n", "diagrams/base/__init__.py": "\"\"\"\nBase provides a set of general services for backend infrastructure.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _Base(Node):\n    _provider = \"base\"\n    _icon_dir = \"resources/base\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/alibabacloud/analytics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Analytics(_AlibabaCloud):\n    _type = \"analytics\"\n    _icon_dir = \"resources/alibabacloud/analytics\"\n\n\nclass AnalyticDb(_Analytics):\n    _icon = \"analytic-db.png\"\n\n\nclass ClickHouse(_Analytics):\n    _icon = \"click-house.png\"\n\n\nclass DataLakeAnalytics(_Analytics):\n    _icon = \"data-lake-analytics.png\"\n\n\nclass ElaticMapReduce(_Analytics):\n    _icon = \"elatic-map-reduce.png\"\n\n\nclass OpenSearch(_Analytics):\n    _icon = \"open-search.png\"\n\n\n# Aliases\n", "diagrams/alibabacloud/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Security(_AlibabaCloud):\n    _type = \"security\"\n    _icon_dir = \"resources/alibabacloud/security\"\n\n\nclass AntiBotService(_Security):\n    _icon = \"anti-bot-service.png\"\n\n\nclass AntiDdosBasic(_Security):\n    _icon = \"anti-ddos-basic.png\"\n\n\nclass AntiDdosPro(_Security):\n    _icon = \"anti-ddos-pro.png\"\n\n\nclass AntifraudService(_Security):\n    _icon = \"antifraud-service.png\"\n\n\nclass BastionHost(_Security):\n    _icon = \"bastion-host.png\"\n\n\nclass CloudFirewall(_Security):\n    _icon = \"cloud-firewall.png\"\n\n\nclass CloudSecurityScanner(_Security):\n    _icon = \"cloud-security-scanner.png\"\n\n\nclass ContentModeration(_Security):\n    _icon = \"content-moderation.png\"\n\n\nclass CrowdsourcedSecurityTesting(_Security):\n    _icon = \"crowdsourced-security-testing.png\"\n\n\nclass DataEncryptionService(_Security):\n    _icon = \"data-encryption-service.png\"\n\n\nclass DbAudit(_Security):\n    _icon = \"db-audit.png\"\n\n\nclass GameShield(_Security):\n    _icon = \"game-shield.png\"\n\n\nclass IdVerification(_Security):\n    _icon = \"id-verification.png\"\n\n\nclass ManagedSecurityService(_Security):\n    _icon = \"managed-security-service.png\"\n\n\nclass SecurityCenter(_Security):\n    _icon = \"security-center.png\"\n\n\nclass ServerGuard(_Security):\n    _icon = \"server-guard.png\"\n\n\nclass SslCertificates(_Security):\n    _icon = \"ssl-certificates.png\"\n\n\nclass WebApplicationFirewall(_Security):\n    _icon = \"web-application-firewall.png\"\n\n\n# Aliases\n\nABS = AntiBotService\nAS = AntifraudService\nCFW = CloudFirewall\nCM = ContentModeration\nDES = DataEncryptionService\nWAF = WebApplicationFirewall\n", "diagrams/alibabacloud/web.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Web(_AlibabaCloud):\n    _type = \"web\"\n    _icon_dir = \"resources/alibabacloud/web\"\n\n\nclass Dns(_Web):\n    _icon = \"dns.png\"\n\n\nclass Domain(_Web):\n    _icon = \"domain.png\"\n\n\n# Aliases\n", "diagrams/alibabacloud/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Compute(_AlibabaCloud):\n    _type = \"compute\"\n    _icon_dir = \"resources/alibabacloud/compute\"\n\n\nclass AutoScaling(_Compute):\n    _icon = \"auto-scaling.png\"\n\n\nclass BatchCompute(_Compute):\n    _icon = \"batch-compute.png\"\n\n\nclass ContainerRegistry(_Compute):\n    _icon = \"container-registry.png\"\n\n\nclass ContainerService(_Compute):\n    _icon = \"container-service.png\"\n\n\nclass ElasticComputeService(_Compute):\n    _icon = \"elastic-compute-service.png\"\n\n\nclass ElasticContainerInstance(_Compute):\n    _icon = \"elastic-container-instance.png\"\n\n\nclass ElasticHighPerformanceComputing(_Compute):\n    _icon = \"elastic-high-performance-computing.png\"\n\n\nclass ElasticSearch(_Compute):\n    _icon = \"elastic-search.png\"\n\n\nclass FunctionCompute(_Compute):\n    _icon = \"function-compute.png\"\n\n\nclass OperationOrchestrationService(_Compute):\n    _icon = \"operation-orchestration-service.png\"\n\n\nclass ResourceOrchestrationService(_Compute):\n    _icon = \"resource-orchestration-service.png\"\n\n\nclass ServerLoadBalancer(_Compute):\n    _icon = \"server-load-balancer.png\"\n\n\nclass ServerlessAppEngine(_Compute):\n    _icon = \"serverless-app-engine.png\"\n\n\nclass SimpleApplicationServer(_Compute):\n    _icon = \"simple-application-server.png\"\n\n\nclass WebAppService(_Compute):\n    _icon = \"web-app-service.png\"\n\n\n# Aliases\n\nESS = AutoScaling\nECS = ElasticComputeService\nECI = ElasticContainerInstance\nEHPC = ElasticHighPerformanceComputing\nFC = FunctionCompute\nOOS = OperationOrchestrationService\nROS = ResourceOrchestrationService\nSLB = ServerLoadBalancer\nSAE = ServerlessAppEngine\nSAS = SimpleApplicationServer\nWAS = WebAppService\n", "diagrams/alibabacloud/iot.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Iot(_AlibabaCloud):\n    _type = \"iot\"\n    _icon_dir = \"resources/alibabacloud/iot\"\n\n\nclass IotInternetDeviceId(_Iot):\n    _icon = \"iot-internet-device-id.png\"\n\n\nclass IotLinkWan(_Iot):\n    _icon = \"iot-link-wan.png\"\n\n\nclass IotMobileConnectionPackage(_Iot):\n    _icon = \"iot-mobile-connection-package.png\"\n\n\nclass IotPlatform(_Iot):\n    _icon = \"iot-platform.png\"\n\n\n# Aliases\n", "diagrams/alibabacloud/application.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Application(_AlibabaCloud):\n    _type = \"application\"\n    _icon_dir = \"resources/alibabacloud/application\"\n\n\nclass ApiGateway(_Application):\n    _icon = \"api-gateway.png\"\n\n\nclass BeeBot(_Application):\n    _icon = \"bee-bot.png\"\n\n\nclass BlockchainAsAService(_Application):\n    _icon = \"blockchain-as-a-service.png\"\n\n\nclass CloudCallCenter(_Application):\n    _icon = \"cloud-call-center.png\"\n\n\nclass CodePipeline(_Application):\n    _icon = \"code-pipeline.png\"\n\n\nclass DirectMail(_Application):\n    _icon = \"direct-mail.png\"\n\n\nclass LogService(_Application):\n    _icon = \"log-service.png\"\n\n\nclass MessageNotificationService(_Application):\n    _icon = \"message-notification-service.png\"\n\n\nclass NodeJsPerformancePlatform(_Application):\n    _icon = \"node-js-performance-platform.png\"\n\n\nclass OpenSearch(_Application):\n    _icon = \"open-search.png\"\n\n\nclass PerformanceTestingService(_Application):\n    _icon = \"performance-testing-service.png\"\n\n\nclass RdCloud(_Application):\n    _icon = \"rd-cloud.png\"\n\n\nclass SmartConversationAnalysis(_Application):\n    _icon = \"smart-conversation-analysis.png\"\n\n\nclass Yida(_Application):\n    _icon = \"yida.png\"\n\n\n# Aliases\n\nSLS = LogService\nMNS = MessageNotificationService\nPTS = PerformanceTestingService\nSCA = SmartConversationAnalysis\n", "diagrams/alibabacloud/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Database(_AlibabaCloud):\n    _type = \"database\"\n    _icon_dir = \"resources/alibabacloud/database\"\n\n\nclass ApsaradbCassandra(_Database):\n    _icon = \"apsaradb-cassandra.png\"\n\n\nclass ApsaradbHbase(_Database):\n    _icon = \"apsaradb-hbase.png\"\n\n\nclass ApsaradbMemcache(_Database):\n    _icon = \"apsaradb-memcache.png\"\n\n\nclass ApsaradbMongodb(_Database):\n    _icon = \"apsaradb-mongodb.png\"\n\n\nclass ApsaradbOceanbase(_Database):\n    _icon = \"apsaradb-oceanbase.png\"\n\n\nclass ApsaradbPolardb(_Database):\n    _icon = \"apsaradb-polardb.png\"\n\n\nclass ApsaradbPostgresql(_Database):\n    _icon = \"apsaradb-postgresql.png\"\n\n\nclass ApsaradbPpas(_Database):\n    _icon = \"apsaradb-ppas.png\"\n\n\nclass ApsaradbRedis(_Database):\n    _icon = \"apsaradb-redis.png\"\n\n\nclass ApsaradbSqlserver(_Database):\n    _icon = \"apsaradb-sqlserver.png\"\n\n\nclass DataManagementService(_Database):\n    _icon = \"data-management-service.png\"\n\n\nclass DataTransmissionService(_Database):\n    _icon = \"data-transmission-service.png\"\n\n\nclass DatabaseBackupService(_Database):\n    _icon = \"database-backup-service.png\"\n\n\nclass DisributeRelationalDatabaseService(_Database):\n    _icon = \"disribute-relational-database-service.png\"\n\n\nclass GraphDatabaseService(_Database):\n    _icon = \"graph-database-service.png\"\n\n\nclass HybriddbForMysql(_Database):\n    _icon = \"hybriddb-for-mysql.png\"\n\n\nclass RelationalDatabaseService(_Database):\n    _icon = \"relational-database-service.png\"\n\n\n# Aliases\n\nDMS = DataManagementService\nDTS = DataTransmissionService\nDBS = DatabaseBackupService\nDRDS = DisributeRelationalDatabaseService\nGDS = GraphDatabaseService\nRDS = RelationalDatabaseService\n", "diagrams/alibabacloud/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Storage(_AlibabaCloud):\n    _type = \"storage\"\n    _icon_dir = \"resources/alibabacloud/storage\"\n\n\nclass CloudStorageGateway(_Storage):\n    _icon = \"cloud-storage-gateway.png\"\n\n\nclass FileStorageHdfs(_Storage):\n    _icon = \"file-storage-hdfs.png\"\n\n\nclass FileStorageNas(_Storage):\n    _icon = \"file-storage-nas.png\"\n\n\nclass HybridBackupRecovery(_Storage):\n    _icon = \"hybrid-backup-recovery.png\"\n\n\nclass HybridCloudDisasterRecovery(_Storage):\n    _icon = \"hybrid-cloud-disaster-recovery.png\"\n\n\nclass Imm(_Storage):\n    _icon = \"imm.png\"\n\n\nclass ObjectStorageService(_Storage):\n    _icon = \"object-storage-service.png\"\n\n\nclass ObjectTableStore(_Storage):\n    _icon = \"object-table-store.png\"\n\n\n# Aliases\n\nHDFS = FileStorageHdfs\nNAS = FileStorageNas\nHBR = HybridBackupRecovery\nHDR = HybridCloudDisasterRecovery\nOSS = ObjectStorageService\nOTS = ObjectTableStore\n", "diagrams/alibabacloud/__init__.py": "\"\"\"\nAlibabaCloud provides a set of services for Alibaba Cloud provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _AlibabaCloud(Node):\n    _provider = \"alibabacloud\"\n    _icon_dir = \"resources/alibabacloud\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/alibabacloud/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Network(_AlibabaCloud):\n    _type = \"network\"\n    _icon_dir = \"resources/alibabacloud/network\"\n\n\nclass Cdn(_Network):\n    _icon = \"cdn.png\"\n\n\nclass CloudEnterpriseNetwork(_Network):\n    _icon = \"cloud-enterprise-network.png\"\n\n\nclass ElasticIpAddress(_Network):\n    _icon = \"elastic-ip-address.png\"\n\n\nclass ExpressConnect(_Network):\n    _icon = \"express-connect.png\"\n\n\nclass NatGateway(_Network):\n    _icon = \"nat-gateway.png\"\n\n\nclass ServerLoadBalancer(_Network):\n    _icon = \"server-load-balancer.png\"\n\n\nclass SmartAccessGateway(_Network):\n    _icon = \"smart-access-gateway.png\"\n\n\nclass VirtualPrivateCloud(_Network):\n    _icon = \"virtual-private-cloud.png\"\n\n\nclass VpnGateway(_Network):\n    _icon = \"vpn-gateway.png\"\n\n\n# Aliases\n\nCEN = CloudEnterpriseNetwork\nEIP = ElasticIpAddress\nSLB = ServerLoadBalancer\nVPC = VirtualPrivateCloud\n", "diagrams/alibabacloud/communication.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _AlibabaCloud\n\n\nclass _Communication(_AlibabaCloud):\n    _type = \"communication\"\n    _icon_dir = \"resources/alibabacloud/communication\"\n\n\nclass DirectMail(_Communication):\n    _icon = \"direct-mail.png\"\n\n\nclass MobilePush(_Communication):\n    _icon = \"mobile-push.png\"\n\n\n# Aliases\n", "diagrams/digitalocean/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _DigitalOcean\n\n\nclass _Compute(_DigitalOcean):\n    _type = \"compute\"\n    _icon_dir = \"resources/digitalocean/compute\"\n\n\nclass Containers(_Compute):\n    _icon = \"containers.png\"\n\n\nclass Docker(_Compute):\n    _icon = \"docker.png\"\n\n\nclass DropletConnect(_Compute):\n    _icon = \"droplet-connect.png\"\n\n\nclass DropletSnapshot(_Compute):\n    _icon = \"droplet-snapshot.png\"\n\n\nclass Droplet(_Compute):\n    _icon = \"droplet.png\"\n\n\nclass K8SCluster(_Compute):\n    _icon = \"k8s-cluster.png\"\n\n\nclass K8SNodePool(_Compute):\n    _icon = \"k8s-node-pool.png\"\n\n\nclass K8SNode(_Compute):\n    _icon = \"k8s-node.png\"\n\n\n# Aliases\n", "diagrams/digitalocean/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _DigitalOcean\n\n\nclass _Database(_DigitalOcean):\n    _type = \"database\"\n    _icon_dir = \"resources/digitalocean/database\"\n\n\nclass DbaasPrimaryStandbyMore(_Database):\n    _icon = \"dbaas-primary-standby-more.png\"\n\n\nclass DbaasPrimary(_Database):\n    _icon = \"dbaas-primary.png\"\n\n\nclass DbaasReadOnly(_Database):\n    _icon = \"dbaas-read-only.png\"\n\n\nclass DbaasStandby(_Database):\n    _icon = \"dbaas-standby.png\"\n\n\n# Aliases\n", "diagrams/digitalocean/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _DigitalOcean\n\n\nclass _Storage(_DigitalOcean):\n    _type = \"storage\"\n    _icon_dir = \"resources/digitalocean/storage\"\n\n\nclass Folder(_Storage):\n    _icon = \"folder.png\"\n\n\nclass Space(_Storage):\n    _icon = \"space.png\"\n\n\nclass VolumeSnapshot(_Storage):\n    _icon = \"volume-snapshot.png\"\n\n\nclass Volume(_Storage):\n    _icon = \"volume.png\"\n\n\n# Aliases\n", "diagrams/digitalocean/__init__.py": "\"\"\"\nDigitalOcean provides a set of services for DigitalOcean provider.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _DigitalOcean(Node):\n    _provider = \"digitalocean\"\n    _icon_dir = \"resources/digitalocean\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/digitalocean/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _DigitalOcean\n\n\nclass _Network(_DigitalOcean):\n    _type = \"network\"\n    _icon_dir = \"resources/digitalocean/network\"\n\n\nclass Certificate(_Network):\n    _icon = \"certificate.png\"\n\n\nclass DomainRegistration(_Network):\n    _icon = \"domain-registration.png\"\n\n\nclass Domain(_Network):\n    _icon = \"domain.png\"\n\n\nclass Firewall(_Network):\n    _icon = \"firewall.png\"\n\n\nclass FloatingIp(_Network):\n    _icon = \"floating-ip.png\"\n\n\nclass InternetGateway(_Network):\n    _icon = \"internet-gateway.png\"\n\n\nclass LoadBalancer(_Network):\n    _icon = \"load-balancer.png\"\n\n\nclass ManagedVpn(_Network):\n    _icon = \"managed-vpn.png\"\n\n\nclass Vpc(_Network):\n    _icon = \"vpc.png\"\n\n\n# Aliases\n", "diagrams/onprem/analytics.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Analytics(_OnPrem):\n    _type = \"analytics\"\n    _icon_dir = \"resources/onprem/analytics\"\n\n\nclass Beam(_Analytics):\n    _icon = \"beam.png\"\n\n\nclass Databricks(_Analytics):\n    _icon = \"databricks.png\"\n\n\nclass Dbt(_Analytics):\n    _icon = \"dbt.png\"\n\n\nclass Dremio(_Analytics):\n    _icon = \"dremio.png\"\n\n\nclass Flink(_Analytics):\n    _icon = \"flink.png\"\n\n\nclass Hadoop(_Analytics):\n    _icon = \"hadoop.png\"\n\n\nclass Hive(_Analytics):\n    _icon = \"hive.png\"\n\n\nclass Metabase(_Analytics):\n    _icon = \"metabase.png\"\n\n\nclass Norikra(_Analytics):\n    _icon = \"norikra.png\"\n\n\nclass Powerbi(_Analytics):\n    _icon = \"powerbi.png\"\n\n\nclass Presto(_Analytics):\n    _icon = \"presto.png\"\n\n\nclass Singer(_Analytics):\n    _icon = \"singer.png\"\n\n\nclass Spark(_Analytics):\n    _icon = \"spark.png\"\n\n\nclass Storm(_Analytics):\n    _icon = \"storm.png\"\n\n\nclass Superset(_Analytics):\n    _icon = \"superset.png\"\n\n\nclass Tableau(_Analytics):\n    _icon = \"tableau.png\"\n\n\nclass Trino(_Analytics):\n    _icon = \"trino.png\"\n\n\n# Aliases\n\nPowerBI = Powerbi\n", "diagrams/onprem/logging.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Logging(_OnPrem):\n    _type = \"logging\"\n    _icon_dir = \"resources/onprem/logging\"\n\n\nclass Fluentbit(_Logging):\n    _icon = \"fluentbit.png\"\n\n\nclass Graylog(_Logging):\n    _icon = \"graylog.png\"\n\n\nclass Loki(_Logging):\n    _icon = \"loki.png\"\n\n\nclass Rsyslog(_Logging):\n    _icon = \"rsyslog.png\"\n\n\nclass SyslogNg(_Logging):\n    _icon = \"syslog-ng.png\"\n\n\n# Aliases\n\nFluentBit = Fluentbit\nRSyslog = Rsyslog\n", "diagrams/onprem/tracing.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Tracing(_OnPrem):\n    _type = \"tracing\"\n    _icon_dir = \"resources/onprem/tracing\"\n\n\nclass Jaeger(_Tracing):\n    _icon = \"jaeger.png\"\n\n\nclass Tempo(_Tracing):\n    _icon = \"tempo.png\"\n\n\n# Aliases\n", "diagrams/onprem/certificates.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Certificates(_OnPrem):\n    _type = \"certificates\"\n    _icon_dir = \"resources/onprem/certificates\"\n\n\nclass CertManager(_Certificates):\n    _icon = \"cert-manager.png\"\n\n\nclass LetsEncrypt(_Certificates):\n    _icon = \"lets-encrypt.png\"\n\n\n# Aliases\n", "diagrams/onprem/auth.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Auth(_OnPrem):\n    _type = \"auth\"\n    _icon_dir = \"resources/onprem/auth\"\n\n\nclass Boundary(_Auth):\n    _icon = \"boundary.png\"\n\n\nclass BuzzfeedSso(_Auth):\n    _icon = \"buzzfeed-sso.png\"\n\n\nclass Oauth2Proxy(_Auth):\n    _icon = \"oauth2-proxy.png\"\n\n\n# Aliases\n", "diagrams/onprem/security.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Security(_OnPrem):\n    _type = \"security\"\n    _icon_dir = \"resources/onprem/security\"\n\n\nclass Bitwarden(_Security):\n    _icon = \"bitwarden.png\"\n\n\nclass Trivy(_Security):\n    _icon = \"trivy.png\"\n\n\nclass Vault(_Security):\n    _icon = \"vault.png\"\n\n\n# Aliases\n", "diagrams/onprem/proxmox.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Proxmox(_OnPrem):\n    _type = \"proxmox\"\n    _icon_dir = \"resources/onprem/proxmox\"\n\n\nclass Pve(_Proxmox):\n    _icon = \"pve.png\"\n\n\n# Aliases\n\nProxmoxVE = Pve\n", "diagrams/onprem/etl.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Etl(_OnPrem):\n    _type = \"etl\"\n    _icon_dir = \"resources/onprem/etl\"\n\n\nclass Embulk(_Etl):\n    _icon = \"embulk.png\"\n\n\n# Aliases\n", "diagrams/onprem/search.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Search(_OnPrem):\n    _type = \"search\"\n    _icon_dir = \"resources/onprem/search\"\n\n\nclass Solr(_Search):\n    _icon = \"solr.png\"\n\n\n# Aliases\n", "diagrams/onprem/container.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Container(_OnPrem):\n    _type = \"container\"\n    _icon_dir = \"resources/onprem/container\"\n\n\nclass Containerd(_Container):\n    _icon = \"containerd.png\"\n\n\nclass Crio(_Container):\n    _icon = \"crio.png\"\n\n\nclass Docker(_Container):\n    _icon = \"docker.png\"\n\n\nclass Firecracker(_Container):\n    _icon = \"firecracker.png\"\n\n\nclass Gvisor(_Container):\n    _icon = \"gvisor.png\"\n\n\nclass K3S(_Container):\n    _icon = \"k3s.png\"\n\n\nclass Lxc(_Container):\n    _icon = \"lxc.png\"\n\n\nclass Rkt(_Container):\n    _icon = \"rkt.png\"\n\n\n# Aliases\n\nLXC = Lxc\nRKT = Rkt\n", "diagrams/onprem/workflow.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Workflow(_OnPrem):\n    _type = \"workflow\"\n    _icon_dir = \"resources/onprem/workflow\"\n\n\nclass Airflow(_Workflow):\n    _icon = \"airflow.png\"\n\n\nclass Digdag(_Workflow):\n    _icon = \"digdag.png\"\n\n\nclass Kubeflow(_Workflow):\n    _icon = \"kubeflow.png\"\n\n\nclass Nifi(_Workflow):\n    _icon = \"nifi.png\"\n\n\n# Aliases\n\nKubeFlow = Kubeflow\nNiFi = Nifi\n", "diagrams/onprem/gitops.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Gitops(_OnPrem):\n    _type = \"gitops\"\n    _icon_dir = \"resources/onprem/gitops\"\n\n\nclass Argocd(_Gitops):\n    _icon = \"argocd.png\"\n\n\nclass Flagger(_Gitops):\n    _icon = \"flagger.png\"\n\n\nclass Flux(_Gitops):\n    _icon = \"flux.png\"\n\n\n# Aliases\n\nArgoCD = Argocd\n", "diagrams/onprem/aggregator.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Aggregator(_OnPrem):\n    _type = \"aggregator\"\n    _icon_dir = \"resources/onprem/aggregator\"\n\n\nclass Fluentd(_Aggregator):\n    _icon = \"fluentd.png\"\n\n\nclass Vector(_Aggregator):\n    _icon = \"vector.png\"\n\n\n# Aliases\n", "diagrams/onprem/cd.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Cd(_OnPrem):\n    _type = \"cd\"\n    _icon_dir = \"resources/onprem/cd\"\n\n\nclass Spinnaker(_Cd):\n    _icon = \"spinnaker.png\"\n\n\nclass TektonCli(_Cd):\n    _icon = \"tekton-cli.png\"\n\n\nclass Tekton(_Cd):\n    _icon = \"tekton.png\"\n\n\n# Aliases\n", "diagrams/onprem/iac.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Iac(_OnPrem):\n    _type = \"iac\"\n    _icon_dir = \"resources/onprem/iac\"\n\n\nclass Ansible(_Iac):\n    _icon = \"ansible.png\"\n\n\nclass Atlantis(_Iac):\n    _icon = \"atlantis.png\"\n\n\nclass Awx(_Iac):\n    _icon = \"awx.png\"\n\n\nclass Puppet(_Iac):\n    _icon = \"puppet.png\"\n\n\nclass Terraform(_Iac):\n    _icon = \"terraform.png\"\n\n\n# Aliases\n", "diagrams/onprem/compute.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Compute(_OnPrem):\n    _type = \"compute\"\n    _icon_dir = \"resources/onprem/compute\"\n\n\nclass Nomad(_Compute):\n    _icon = \"nomad.png\"\n\n\nclass Server(_Compute):\n    _icon = \"server.png\"\n\n\n# Aliases\n", "diagrams/onprem/registry.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Registry(_OnPrem):\n    _type = \"registry\"\n    _icon_dir = \"resources/onprem/registry\"\n\n\nclass Harbor(_Registry):\n    _icon = \"harbor.png\"\n\n\nclass Jfrog(_Registry):\n    _icon = \"jfrog.png\"\n\n\n# Aliases\n", "diagrams/onprem/groupware.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Groupware(_OnPrem):\n    _type = \"groupware\"\n    _icon_dir = \"resources/onprem/groupware\"\n\n\nclass Nextcloud(_Groupware):\n    _icon = \"nextcloud.png\"\n\n\n# Aliases\n", "diagrams/onprem/identity.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Identity(_OnPrem):\n    _type = \"identity\"\n    _icon_dir = \"resources/onprem/identity\"\n\n\nclass Dex(_Identity):\n    _icon = \"dex.png\"\n\n\n# Aliases\n", "diagrams/onprem/vcs.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Vcs(_OnPrem):\n    _type = \"vcs\"\n    _icon_dir = \"resources/onprem/vcs\"\n\n\nclass Git(_Vcs):\n    _icon = \"git.png\"\n\n\nclass Gitea(_Vcs):\n    _icon = \"gitea.png\"\n\n\nclass Github(_Vcs):\n    _icon = \"github.png\"\n\n\nclass Gitlab(_Vcs):\n    _icon = \"gitlab.png\"\n\n\nclass Svn(_Vcs):\n    _icon = \"svn.png\"\n\n\n# Aliases\n", "diagrams/onprem/monitoring.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Monitoring(_OnPrem):\n    _type = \"monitoring\"\n    _icon_dir = \"resources/onprem/monitoring\"\n\n\nclass Cortex(_Monitoring):\n    _icon = \"cortex.png\"\n\n\nclass Datadog(_Monitoring):\n    _icon = \"datadog.png\"\n\n\nclass Dynatrace(_Monitoring):\n    _icon = \"dynatrace.png\"\n\n\nclass Grafana(_Monitoring):\n    _icon = \"grafana.png\"\n\n\nclass Humio(_Monitoring):\n    _icon = \"humio.png\"\n\n\nclass Mimir(_Monitoring):\n    _icon = \"mimir.png\"\n\n\nclass Nagios(_Monitoring):\n    _icon = \"nagios.png\"\n\n\nclass Newrelic(_Monitoring):\n    _icon = \"newrelic.png\"\n\n\nclass PrometheusOperator(_Monitoring):\n    _icon = \"prometheus-operator.png\"\n\n\nclass Prometheus(_Monitoring):\n    _icon = \"prometheus.png\"\n\n\nclass Sentry(_Monitoring):\n    _icon = \"sentry.png\"\n\n\nclass Splunk(_Monitoring):\n    _icon = \"splunk.png\"\n\n\nclass Thanos(_Monitoring):\n    _icon = \"thanos.png\"\n\n\nclass Zabbix(_Monitoring):\n    _icon = \"zabbix.png\"\n\n\n# Aliases\n", "diagrams/onprem/inmemory.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Inmemory(_OnPrem):\n    _type = \"inmemory\"\n    _icon_dir = \"resources/onprem/inmemory\"\n\n\nclass Aerospike(_Inmemory):\n    _icon = \"aerospike.png\"\n\n\nclass Hazelcast(_Inmemory):\n    _icon = \"hazelcast.png\"\n\n\nclass Memcached(_Inmemory):\n    _icon = \"memcached.png\"\n\n\nclass Redis(_Inmemory):\n    _icon = \"redis.png\"\n\n\n# Aliases\n", "diagrams/onprem/database.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Database(_OnPrem):\n    _type = \"database\"\n    _icon_dir = \"resources/onprem/database\"\n\n\nclass Cassandra(_Database):\n    _icon = \"cassandra.png\"\n\n\nclass Clickhouse(_Database):\n    _icon = \"clickhouse.png\"\n\n\nclass Cockroachdb(_Database):\n    _icon = \"cockroachdb.png\"\n\n\nclass Couchbase(_Database):\n    _icon = \"couchbase.png\"\n\n\nclass Couchdb(_Database):\n    _icon = \"couchdb.png\"\n\n\nclass Dgraph(_Database):\n    _icon = \"dgraph.png\"\n\n\nclass Druid(_Database):\n    _icon = \"druid.png\"\n\n\nclass Hbase(_Database):\n    _icon = \"hbase.png\"\n\n\nclass Influxdb(_Database):\n    _icon = \"influxdb.png\"\n\n\nclass Janusgraph(_Database):\n    _icon = \"janusgraph.png\"\n\n\nclass Mariadb(_Database):\n    _icon = \"mariadb.png\"\n\n\nclass Mongodb(_Database):\n    _icon = \"mongodb.png\"\n\n\nclass Mssql(_Database):\n    _icon = \"mssql.png\"\n\n\nclass Mysql(_Database):\n    _icon = \"mysql.png\"\n\n\nclass Neo4J(_Database):\n    _icon = \"neo4j.png\"\n\n\nclass Oracle(_Database):\n    _icon = \"oracle.png\"\n\n\nclass Postgresql(_Database):\n    _icon = \"postgresql.png\"\n\n\nclass Scylla(_Database):\n    _icon = \"scylla.png\"\n\n\n# Aliases\n\nClickHouse = Clickhouse\nCockroachDB = Cockroachdb\nCouchDB = Couchdb\nHBase = Hbase\nInfluxDB = Influxdb\nJanusGraph = Janusgraph\nMariaDB = Mariadb\nMongoDB = Mongodb\nMSSQL = Mssql\nMySQL = Mysql\nPostgreSQL = Postgresql\n", "diagrams/onprem/ci.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Ci(_OnPrem):\n    _type = \"ci\"\n    _icon_dir = \"resources/onprem/ci\"\n\n\nclass Circleci(_Ci):\n    _icon = \"circleci.png\"\n\n\nclass Concourseci(_Ci):\n    _icon = \"concourseci.png\"\n\n\nclass Droneci(_Ci):\n    _icon = \"droneci.png\"\n\n\nclass GithubActions(_Ci):\n    _icon = \"github-actions.png\"\n\n\nclass Gitlabci(_Ci):\n    _icon = \"gitlabci.png\"\n\n\nclass Jenkins(_Ci):\n    _icon = \"jenkins.png\"\n\n\nclass Teamcity(_Ci):\n    _icon = \"teamcity.png\"\n\n\nclass Travisci(_Ci):\n    _icon = \"travisci.png\"\n\n\nclass Zuulci(_Ci):\n    _icon = \"zuulci.png\"\n\n\n# Aliases\n\nCircleCI = Circleci\nConcourseCI = Concourseci\nDroneCI = Droneci\nGitlabCI = Gitlabci\nTravisCI = Travisci\nTC = Teamcity\nZuulCI = Zuulci\n", "diagrams/onprem/dns.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Dns(_OnPrem):\n    _type = \"dns\"\n    _icon_dir = \"resources/onprem/dns\"\n\n\nclass Coredns(_Dns):\n    _icon = \"coredns.png\"\n\n\nclass Powerdns(_Dns):\n    _icon = \"powerdns.png\"\n\n\n# Aliases\n", "diagrams/onprem/client.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Client(_OnPrem):\n    _type = \"client\"\n    _icon_dir = \"resources/onprem/client\"\n\n\nclass Client(_Client):\n    _icon = \"client.png\"\n\n\nclass User(_Client):\n    _icon = \"user.png\"\n\n\nclass Users(_Client):\n    _icon = \"users.png\"\n\n\n# Aliases\n", "diagrams/onprem/storage.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Storage(_OnPrem):\n    _type = \"storage\"\n    _icon_dir = \"resources/onprem/storage\"\n\n\nclass CephOsd(_Storage):\n    _icon = \"ceph-osd.png\"\n\n\nclass Ceph(_Storage):\n    _icon = \"ceph.png\"\n\n\nclass Glusterfs(_Storage):\n    _icon = \"glusterfs.png\"\n\n\nclass Portworx(_Storage):\n    _icon = \"portworx.png\"\n\n\n# Aliases\n\nCEPH = Ceph\nCEPH_OSD = CephOsd\n", "diagrams/onprem/messaging.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Messaging(_OnPrem):\n    _type = \"messaging\"\n    _icon_dir = \"resources/onprem/messaging\"\n\n\nclass Centrifugo(_Messaging):\n    _icon = \"centrifugo.png\"\n\n\n# Aliases\n", "diagrams/onprem/__init__.py": "\"\"\"\nOnPrem provides a set of general on-premise services.\n\"\"\"\n\nfrom diagrams import Node\n\n\nclass _OnPrem(Node):\n    _provider = \"onprem\"\n    _icon_dir = \"resources/onprem\"\n\n    fontcolor = \"#ffffff\"\n", "diagrams/onprem/mlops.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Mlops(_OnPrem):\n    _type = \"mlops\"\n    _icon_dir = \"resources/onprem/mlops\"\n\n\nclass Mlflow(_Mlops):\n    _icon = \"mlflow.png\"\n\n\nclass Polyaxon(_Mlops):\n    _icon = \"polyaxon.png\"\n\n\n# Aliases\n", "diagrams/onprem/network.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Network(_OnPrem):\n    _type = \"network\"\n    _icon_dir = \"resources/onprem/network\"\n\n\nclass Ambassador(_Network):\n    _icon = \"ambassador.png\"\n\n\nclass Apache(_Network):\n    _icon = \"apache.png\"\n\n\nclass Bind9(_Network):\n    _icon = \"bind-9.png\"\n\n\nclass Caddy(_Network):\n    _icon = \"caddy.png\"\n\n\nclass Consul(_Network):\n    _icon = \"consul.png\"\n\n\nclass Envoy(_Network):\n    _icon = \"envoy.png\"\n\n\nclass Etcd(_Network):\n    _icon = \"etcd.png\"\n\n\nclass Glassfish(_Network):\n    _icon = \"glassfish.png\"\n\n\nclass Gunicorn(_Network):\n    _icon = \"gunicorn.png\"\n\n\nclass Haproxy(_Network):\n    _icon = \"haproxy.png\"\n\n\nclass Internet(_Network):\n    _icon = \"internet.png\"\n\n\nclass Istio(_Network):\n    _icon = \"istio.png\"\n\n\nclass Jbossas(_Network):\n    _icon = \"jbossas.png\"\n\n\nclass Jetty(_Network):\n    _icon = \"jetty.png\"\n\n\nclass Kong(_Network):\n    _icon = \"kong.png\"\n\n\nclass Linkerd(_Network):\n    _icon = \"linkerd.png\"\n\n\nclass Nginx(_Network):\n    _icon = \"nginx.png\"\n\n\nclass Ocelot(_Network):\n    _icon = \"ocelot.png\"\n\n\nclass OpenServiceMesh(_Network):\n    _icon = \"open-service-mesh.png\"\n\n\nclass Opnsense(_Network):\n    _icon = \"opnsense.png\"\n\n\nclass Pfsense(_Network):\n    _icon = \"pfsense.png\"\n\n\nclass Pomerium(_Network):\n    _icon = \"pomerium.png\"\n\n\nclass Powerdns(_Network):\n    _icon = \"powerdns.png\"\n\n\nclass Tomcat(_Network):\n    _icon = \"tomcat.png\"\n\n\nclass Traefik(_Network):\n    _icon = \"traefik.png\"\n\n\nclass Tyk(_Network):\n    _icon = \"tyk.png\"\n\n\nclass Vyos(_Network):\n    _icon = \"vyos.png\"\n\n\nclass Wildfly(_Network):\n    _icon = \"wildfly.png\"\n\n\nclass Yarp(_Network):\n    _icon = \"yarp.png\"\n\n\nclass Zookeeper(_Network):\n    _icon = \"zookeeper.png\"\n\n\n# Aliases\n\nETCD = Etcd\nHAProxy = Haproxy\nOSM = OpenServiceMesh\nOPNSense = Opnsense\nPFSense = Pfsense\nVyOS = Vyos\n", "diagrams/onprem/queue.py": "# This module is automatically generated by autogen.sh. DO NOT EDIT.\n\nfrom . import _OnPrem\n\n\nclass _Queue(_OnPrem):\n    _type = \"queue\"\n    _icon_dir = \"resources/onprem/queue\"\n\n\nclass Activemq(_Queue):\n    _icon = \"activemq.png\"\n\n\nclass Celery(_Queue):\n    _icon = \"celery.png\"\n\n\nclass Emqx(_Queue):\n    _icon = \"emqx.png\"\n\n\nclass Kafka(_Queue):\n    _icon = \"kafka.png\"\n\n\nclass Nats(_Queue):\n    _icon = \"nats.png\"\n\n\nclass Rabbitmq(_Queue):\n    _icon = \"rabbitmq.png\"\n\n\nclass Zeromq(_Queue):\n    _icon = \"zeromq.png\"\n\n\n# Aliases\n\nActiveMQ = Activemq\nEMQX = Emqx\nRabbitMQ = Rabbitmq\nZeroMQ = Zeromq\n", "scripts/generate.py": "import os\nimport sys\nfrom typing import Iterable\n\nfrom jinja2 import Environment, FileSystemLoader, Template, exceptions\n\nimport config as cfg\nfrom . import app_root_dir, doc_root_dir, resource_dir, template_dir, base_dir\n\n_usage = \"Usage: generate.py <provider>\"\n\n\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[\"up_or_title\"] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    \"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split('.')\n      tmpl_file = f\"{default_tmp[0]}_{pvd}.{default_tmp[1]}\"\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:\n            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)\n            alias = cfg.ALIASES[pvd].get(typ, {}).get(name)\n            typ_classes[typ].append({\"name\": name, \"alias\": alias, \"resource_path\": resource_path})\n    return tmpl.render(pvd=pvd, typ_classes=typ_classes)\n\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    \"\"\"Create a module file\"\"\"\n    mod_path = os.path.join(app_root_dir(pvd), f\"{typ}.py\")\n    with open(mod_path, \"w+\") as f:\n        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    \"\"\"Create an api documentation file\"\"\"\n    mod_path = os.path.join(doc_root_dir(), f\"{pvd}.md\")\n    with open(mod_path, \"w+\") as f:\n        f.write(content)\n\n\ndef generate(pvd: str) -> None:\n    \"\"\"Generates a service node classes.\"\"\"\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()\n        pngs = list(filter(lambda f: f.endswith(\".png\"), files))\n        paths = list(filter(lambda f: \"rounded\" not in f, pngs))\n\n        # Skip the top-root directory.\n        typ = os.path.basename(root)\n        if typ == pvd:\n            continue\n\n        resource_root = os.path.relpath(root, base)\n        classes = gen_classes(pvd, typ, paths)\n        make_module(pvd, typ, classes)\n\n        typ_paths[typ] = (paths, resource_root)\n    # Build API documentation\n    apidoc = gen_apidoc(pvd, typ_paths)\n    make_apidoc(pvd, apidoc)\n\n\nif __name__ == \"__main__\":\n    pvd = sys.argv[1]\n    if pvd not in cfg.PROVIDERS:\n        sys.exit()\n    generate(pvd)\n", "scripts/__init__.py": "import os\nfrom pathlib import Path\n\nimport config as cfg\n\n\ndef base_dir() -> Path:\n    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n\n\ndef template_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_TEMPLATE)\n", "scripts/resource.py": "\"\"\"\nresources.py provides useful tools for resources processing.\n\nThere are 2 commands available.\n- clean: clean and unify the resources file names with some rules.\n- round: generate the rounded images from the original squared images.\n\"\"\"\n\nimport os\nimport subprocess\nimport sys\n\nimport config as cfg\nfrom . import resource_dir\n\n_usage = \"Usage: resource.py <cmd> <pvd>\"\n\n\ndef cleaner_onprem(f):\n    f = f.replace(\"_\", \"-\")\n    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_azure(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_gcp(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"gcp\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_ibm(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"ibm\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_firebase(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"firebase\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_k8s(f):\n    f = f.replace(\"-256\", \"\")\n    for p in cfg.FILE_PREFIXES[\"k8s\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(\"-32\", \"\")\n    for p in cfg.FILE_PREFIXES[\"digitalocean\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[\"alibabacloud\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_oci(f):\n    f = f.replace(\" \", \"-\")\n    f = f.replace(\"_\", \"-\")\n    for p in cfg.FILE_PREFIXES[\"oci\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_programming(f):\n    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()\n\n\ncleaners = {\n    \"onprem\": cleaner_onprem,\n    \"aws\": cleaner_aws,\n    \"azure\": cleaner_azure,\n    \"digitalocean\": cleaner_digitalocean,\n    \"gcp\": cleaner_gcp,\n    \"ibm\": cleaner_ibm,\n    \"firebase\": cleaner_firebase,\n    \"k8s\": cleaner_k8s,\n    \"alibabacloud\": cleaner_alibabacloud,\n    \"oci\": cleaner_oci,\n    \"programming\": cleaner_programming,\n    \"saas\": cleaner_saas,\n    \"elastic\": cleaner_elastic,\n    \"outscale\": cleaner_outscale,\n    \"generic\": cleaner_generic,\n    \"openstack\": cleaner_openstack,\n}\n\n\ndef clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        paths = filter(lambda f: \"rounded\" not in f, pngs)\n        [_round(root, path) for path in paths]\n\n\ndef svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n\n\n# fmt: off\ncommands = {\n    \"clean\": clean_png,\n    \"round\": round_png,\n    \"svg2png\": svg2png,\n    \"svg2png2\": svg2png2,\n}\n# fmt: on\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        print(_usage)\n        sys.exit()\n\n    cmd = sys.argv[1]\n    pvd = sys.argv[2]\n    if cmd not in commands:\n        sys.exit()\n    if pvd not in cfg.PROVIDERS:\n        sys.exit()\n    commands[cmd](pvd)\n", "tests/test_diagram.py": "import os\nimport shutil\nimport unittest\nimport pathlib\n\nfrom diagrams import Cluster, Diagram, Edge, Node\nfrom diagrams import getcluster, getdiagram, setcluster, setdiagram\n\n\nclass DiagramTest(unittest.TestCase):\n    def setUp(self):\n        self.name = \"diagram_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:\n            # Consider it file\n            try:\n                os.remove(self.name + \".png\")\n            except FileNotFoundError:\n                pass\n\n    def test_validate_direction(self):\n        # Normal directions.\n        for dir in (\"TB\", \"BT\", \"LR\", \"RL\", \"tb\"):\n            Diagram(direction=dir)\n\n        # Invalid directions.\n        for dir in (\"BR\", \"TL\", \"Unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(direction=dir)\n\n    def test_validate_curvestyle(self):\n        # Normal directions.\n        for cvs in (\"ortho\", \"curved\", \"CURVED\"):\n            Diagram(curvestyle=cvs)\n\n        # Invalid directions.\n        for cvs in (\"tangent\", \"unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(curvestyle=cvs)\n\n    def test_validate_outformat(self):\n        # Normal output formats.\n        for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):\n            Diagram(outformat=fmt)\n\n        # Invalid output formats.\n        for fmt in (\"pnp\", \"jpe\", \"unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(outformat=fmt)\n\n    def test_with_global_context(self):\n        self.assertIsNone(getdiagram())\n        with Diagram(name=os.path.join(self.name, \"with_global_context\"), show=False):\n            self.assertIsNotNone(getdiagram())\n        self.assertIsNone(getdiagram())\n\n    def test_node_not_in_diagram(self):\n        # Node must be belong to a diagrams.\n        with self.assertRaises(EnvironmentError):\n            Node(\"node\")\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            node2 = Node(\"node2\")\n            self.assertEqual(node1 - node2, node2)\n            self.assertEqual(node1 >> node2, node2)\n            self.assertEqual(node1 << node2, node2)\n\n    def test_node_to_nodes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):\n            node1 = Node(\"node1\")\n            nodes = [Node(\"node2\"), Node(\"node3\")]\n            self.assertEqual(node1 - nodes, nodes)\n            self.assertEqual(node1 >> nodes, nodes)\n            self.assertEqual(node1 << nodes, nodes)\n\n    def test_nodes_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            nodes = [Node(\"node2\"), Node(\"node3\")]\n            self.assertEqual(nodes - node1, node1)\n            self.assertEqual(nodes >> node1, node1)\n            self.assertEqual(nodes << node1, node1)\n\n    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_empty_name(self):\n        \"\"\"Check that providing an empty name don't crash, but save in a diagrams_image.xxx file.\"\"\"\n        self.name = 'diagrams_image'\n        with Diagram(show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n    \n    def test_autolabel(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            self.assertTrue(node1.label,\"Node\\nnode1\")\n\n\n    def test_outformat_list(self):\n        \"\"\"Check that outformat render all the files from the list.\"\"\"\n        self.name = 'diagrams_image'\n        with Diagram(show=False, outformat=[\"dot\", \"png\"]):\n            Node(\"node1\")\n        # both files must exist\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n        self.assertTrue(os.path.exists(f\"{self.name}.dot\"))\n\n        # clean the dot file as it only generated here\n        os.remove(self.name + \".dot\")\n\n\nclass ClusterTest(unittest.TestCase):\n    def setUp(self):\n        self.name = \"cluster_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:\n            pass\n\n    def test_validate_direction(self):\n        # Normal directions.\n        for dir in (\"TB\", \"BT\", \"LR\", \"RL\"):\n            with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                Cluster(direction=dir)\n\n        # Invalid directions.\n        for dir in (\"BR\", \"TL\", \"Unknown\"):\n            with self.assertRaises(ValueError):\n                with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                    Cluster(direction=dir)\n\n    def test_with_global_context(self):\n        with Diagram(name=os.path.join(self.name, \"with_global_context\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster():\n                self.assertIsNotNone(getcluster())\n            self.assertIsNone(getcluster())\n\n    def test_with_nested_cluster(self):\n        with Diagram(name=os.path.join(self.name, \"with_nested_cluster\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster() as c1:\n                self.assertEqual(c1, getcluster())\n                with Cluster() as c2:\n                    self.assertEqual(c2, getcluster())\n                self.assertEqual(c1, getcluster())\n            self.assertIsNone(getcluster())\n\n    def test_node_not_in_diagram(self):\n        # Node must be belong to a diagrams.\n        with self.assertRaises(EnvironmentError):\n            Node(\"node\")\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 - node2, node2)\n                self.assertEqual(node1 >> node2, node2)\n                self.assertEqual(node1 << node2, node2)\n\n    def test_node_to_nodes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - nodes, nodes)\n                self.assertEqual(node1 >> nodes, nodes)\n                self.assertEqual(node1 << nodes, nodes)\n\n    def test_nodes_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - node1, node1)\n                self.assertEqual(nodes >> node1, node1)\n                self.assertEqual(nodes << node1, node1)\n\n\nclass EdgeTest(unittest.TestCase):\n    def setUp(self):\n        self.name = \"edge_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:\n            pass\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            node2 = Node(\"node2\")\n            self.assertEqual(node1 - Edge(color=\"red\") - node2, node2)\n\n    def test_node_to_nodes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - Edge(color=\"red\") - nodes, nodes)\n\n    def test_nodes_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - Edge(color=\"green\") - node1, node1)\n\n    def test_node_to_node_with_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"1.1\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"1.2\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"1.3\") >> node2, node2)\n\n    def test_node_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"2.1\") << Edge(color=\"blue\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"2.2\") >> Edge(color=\"red\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"2.3\") >> Edge(color=\"black\") >> node2, node2)\n\n    def test_nodes_to_node_with_attributes_loop(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_loop\"), show=False):\n            with Cluster():\n                node = Node(\"node\")\n                self.assertEqual(node >> Edge(color=\"red\", label=\"3.1\") >> node, node)\n                self.assertEqual(node << Edge(color=\"green\", label=\"3.2\") << node, node)\n                self.assertEqual(node >> Edge(color=\"blue\", label=\"3.3\") << node, node)\n                self.assertEqual(node << Edge(color=\"pink\", label=\"3.4\") >> node, node)\n\n    def test_nodes_to_node_with_attributes_bothdirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bothdirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"4\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_bidirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bidirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"blue\", label=\"5\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_onedirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_onedirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes >> Edge(color=\"red\", label=\"6.1\") >> node1, node1)\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"6.2\") << node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes_directional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes_directional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(\n                    nodes >> Edge(color=\"red\", label=\"6.1\") >> Edge(color=\"blue\", label=\"6.2\") >> node1, node1\n                )\n                self.assertEqual(\n                    nodes << Edge(color=\"green\", label=\"6.3\") << Edge(color=\"pink\", label=\"6.4\") << node1, node1\n                )\n\n\nclass ResourcesTest(unittest.TestCase):\n    def test_folder_depth(self):\n        \"\"\"\n        The code currently only handles resource folders up to a dir depth of 2\n        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'\n        max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1\n                        for d, _, _ in os.walk(resources_dir))\n        self.assertLessEqual(max_depth, 2)\n", "tests/test_c4.py": "import os\nimport random\nimport string\nimport unittest\n\nfrom diagrams import Diagram\nfrom diagrams import setcluster, setdiagram\nfrom diagrams.c4 import Person, Container, Database, System, SystemBoundary, Relationship\n\n\nclass C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + \".png\")\n        except FileNotFoundError:\n            pass\n\n    def test_nodes(self):\n        with Diagram(name=self.name, show=False):\n            person = Person(\"person\", \"A person.\")\n            container = Container(\"container\", \"Java application\", \"The application.\")\n            database = Database(\"database\", \"Oracle database\", \"Stores information.\")\n\n    def test_external_nodes(self):\n        with Diagram(name=self.name, show=False):\n            external_person = Person(\"person\", external=True)\n            external_system = System(\"external\", external=True)\n\n    def test_systems(self):\n        with Diagram(name=self.name, show=False):\n            system = System(\"system\", \"The internal system.\")\n            system_without_description = System(\"unknown\")\n\n    def test_edges(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> c2\n\n    def test_edges_with_labels(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> Relationship(\"depends on\") >> c2\n            c1 << Relationship(\"is depended on by\") << c2\n\n    def test_edge_without_constraint(self):\n        with Diagram(name=self.name, show=False):\n            s1 = System(\"system 1\")\n            s2 = System(\"system 2\")\n\n            s1 >> Relationship(constraint=\"False\") >> s2\n\n    def test_cluster(self):\n        with Diagram(name=self.name, show=False):\n            with SystemBoundary(\"System\"):\n                Container(\"container\", \"type\", \"description\")\n", "tests/__init__.py": ""}