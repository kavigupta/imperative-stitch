{"sniffio/_impl.py": "from contextvars import ContextVar\nfrom typing import Optional\nimport sys\nimport threading\n\ncurrent_async_library_cvar = ContextVar(\n    \"current_async_library_cvar\", default=None\n)  # type: ContextVar[Optional[str]]\n\n\nclass _ThreadLocal(threading.local):\n    # Since threading.local provides no explicit mechanism is for setting\n    # a default for a value, a custom class with a class attribute is used\n    # instead.\n    name = None  # type: Optional[str]\n\n\nthread_local = _ThreadLocal()\n\n\nclass AsyncLibraryNotFoundError(RuntimeError):\n    pass\n\n\ndef current_async_library() -> str:\n    \"\"\"Detect which async library is currently running.\n\n    The following libraries are currently supported:\n\n    ================   ===========  ============================\n    Library             Requires     Magic string\n    ================   ===========  ============================\n    **Trio**            Trio v0.6+   ``\"trio\"``\n    **Curio**           -            ``\"curio\"``\n    **asyncio**                      ``\"asyncio\"``\n    **Trio-asyncio**    v0.8.2+     ``\"trio\"`` or ``\"asyncio\"``,\n                                    depending on current mode\n    ================   ===========  ============================\n\n    Returns:\n      A string like ``\"trio\"``.\n\n    Raises:\n      AsyncLibraryNotFoundError: if called from synchronous context,\n        or if the current async library was not recognized.\n\n    Examples:\n\n        .. code-block:: python3\n\n           from sniffio import current_async_library\n\n           async def generic_sleep(seconds):\n               library = current_async_library()\n               if library == \"trio\":\n                   import trio\n                   await trio.sleep(seconds)\n               elif library == \"asyncio\":\n                   import asyncio\n                   await asyncio.sleep(seconds)\n               # ... and so on ...\n               else:\n                   raise RuntimeError(f\"Unsupported library {library!r}\")\n\n    \"\"\"\n    value = thread_local.name\n    if value is not None:\n        return value\n\n    value = current_async_library_cvar.get()\n    if value is not None:\n        return value\n\n    # Need to sniff for asyncio\n    if \"asyncio\" in sys.modules:\n        import asyncio\n        try:\n            current_task = asyncio.current_task  # type: ignore[attr-defined]\n        except AttributeError:\n            current_task = asyncio.Task.current_task  # type: ignore[attr-defined]\n        try:\n            if current_task() is not None:\n                return \"asyncio\"\n        except RuntimeError:\n            pass\n\n    # Sniff for curio (for now)\n    if 'curio' in sys.modules:\n        from curio.meta import curio_running\n        if curio_running():\n            return 'curio'\n\n    raise AsyncLibraryNotFoundError(\n        \"unknown async library, or not in async context\"\n    )\n", "sniffio/__init__.py": "\"\"\"Top-level package for sniffio.\"\"\"\n\n__all__ = [\n    \"current_async_library\",\n    \"AsyncLibraryNotFoundError\",\n    \"current_async_library_cvar\",\n    \"thread_local\",\n]\n\nfrom ._version import __version__\n\nfrom ._impl import (\n    current_async_library,\n    AsyncLibraryNotFoundError,\n    current_async_library_cvar,\n    thread_local,\n)\n", "sniffio/_version.py": "# This file is imported from __init__.py and exec'd from setup.py\n\n__version__ = \"1.3.1+dev\"\n"}