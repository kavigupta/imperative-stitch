{"sniffio/_impl.py": "from contextvars import ContextVar\nfrom typing import Optional\nimport sys\nimport threading\n\ncurrent_async_library_cvar = ContextVar(\n    \"current_async_library_cvar\", default=None\n)  # type: ContextVar[Optional[str]]\n\n\nclass _ThreadLocal(threading.local):\n    # Since threading.local provides no explicit mechanism is for setting\n    # a default for a value, a custom class with a class attribute is used\n    # instead.\n    name = None  # type: Optional[str]\n\n\nthread_local = _ThreadLocal()\n\n\nclass AsyncLibraryNotFoundError(RuntimeError):\n    pass\n\n\ndef current_async_library() -> str:\n    \"\"\"Detect which async library is currently running.\n\n    The following libraries are currently supported:\n\n    ================   ===========  ============================\n    Library             Requires     Magic string\n    ================   ===========  ============================\n    **Trio**            Trio v0.6+   ``\"trio\"``\n    **Curio**           -            ``\"curio\"``\n    **asyncio**                      ``\"asyncio\"``\n    **Trio-asyncio**    v0.8.2+     ``\"trio\"`` or ``\"asyncio\"``,\n                                    depending on current mode\n    ================   ===========  ============================\n\n    Returns:\n      A string like ``\"trio\"``.\n\n    Raises:\n      AsyncLibraryNotFoundError: if called from synchronous context,\n        or if the current async library was not recognized.\n\n    Examples:\n\n        .. code-block:: python3\n\n           from sniffio import current_async_library\n\n           async def generic_sleep(seconds):\n               library = current_async_library()\n               if library == \"trio\":\n                   import trio\n                   await trio.sleep(seconds)\n               elif library == \"asyncio\":\n                   import asyncio\n                   await asyncio.sleep(seconds)\n               # ... and so on ...\n               else:\n                   raise RuntimeError(f\"Unsupported library {library!r}\")\n\n    \"\"\"\n    value = thread_local.name\n    if value is not None:\n        return value\n\n    value = current_async_library_cvar.get()\n    if value is not None:\n        return value\n\n    # Need to sniff for asyncio\n    if \"asyncio\" in sys.modules:\n        import asyncio\n        try:\n            current_task = asyncio.current_task  # type: ignore[attr-defined]\n        except AttributeError:\n            current_task = asyncio.Task.current_task  # type: ignore[attr-defined]\n        try:\n            if current_task() is not None:\n                return \"asyncio\"\n        except RuntimeError:\n            pass\n\n    # Sniff for curio (for now)\n    if 'curio' in sys.modules:\n        from curio.meta import curio_running\n        if curio_running():\n            return 'curio'\n\n    raise AsyncLibraryNotFoundError(\n        \"unknown async library, or not in async context\"\n    )\n", "sniffio/__init__.py": "\"\"\"Top-level package for sniffio.\"\"\"\n\n__all__ = [\n    \"current_async_library\",\n    \"AsyncLibraryNotFoundError\",\n    \"current_async_library_cvar\",\n    \"thread_local\",\n]\n\nfrom ._version import __version__\n\nfrom ._impl import (\n    current_async_library,\n    AsyncLibraryNotFoundError,\n    current_async_library_cvar,\n    thread_local,\n)\n", "sniffio/_version.py": "# This file is imported from __init__.py and exec'd from setup.py\n\n__version__ = \"1.3.1+dev\"\n", "sniffio/_tests/test_sniffio.py": "import os\nimport sys\n\nimport pytest\n\nfrom .. import (\n    current_async_library, AsyncLibraryNotFoundError,\n    current_async_library_cvar, thread_local\n)\n\n\ndef test_basics_cvar():\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n\n    token = current_async_library_cvar.set(\"generic-lib\")\n    try:\n        assert current_async_library() == \"generic-lib\"\n    finally:\n        current_async_library_cvar.reset(token)\n\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n\n\ndef test_basics_tlocal():\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n\n    old_name, thread_local.name = thread_local.name, \"generic-lib\"\n    try:\n        assert current_async_library() == \"generic-lib\"\n    finally:\n        thread_local.name = old_name\n\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n\n\ndef test_asyncio():\n    import asyncio\n\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n\n    ran = []\n\n    async def this_is_asyncio():\n        assert current_async_library() == \"asyncio\"\n        # Call it a second time to exercise the caching logic\n        assert current_async_library() == \"asyncio\"\n        ran.append(True)\n\n    asyncio.run(this_is_asyncio())\n    assert ran == [True]\n\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n\n\n@pytest.mark.skipif(\n    sys.version_info >= (3, 12),\n    reason=\n    \"curio broken on 3.12 (https://github.com/python-trio/sniffio/pull/42)\",\n)\ndef test_curio():\n    import curio\n\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n\n    ran = []\n\n    async def this_is_curio():\n        assert current_async_library() == \"curio\"\n        # Call it a second time to exercise the caching logic\n        assert current_async_library() == \"curio\"\n        ran.append(True)\n\n    curio.run(this_is_curio)\n    assert ran == [True]\n\n    with pytest.raises(AsyncLibraryNotFoundError):\n        current_async_library()\n", "sniffio/_tests/__init__.py": "", "docs/source/conf.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n# Documentation build configuration file, created by\n# sphinx-quickstart on Sat Jan 21 19:11:14 2017.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport os\nimport sys\n# So autodoc can import our package\nsys.path.insert(0, os.path.abspath('../..'))\n\n# Warn about all references to unknown targets\nnitpicky = True\n# Except for these ones, which we expect to point to unknown targets:\nnitpick_ignore = [\n    # Format is (\"sphinx reference type\", \"string\"), e.g.:\n    (\"py:obj\", \"bytes-like\"),\n]\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.autodoc',\n    'sphinx.ext.intersphinx',\n    'sphinx.ext.coverage',\n    'sphinx.ext.napoleon',\n    'sphinxcontrib_trio',\n]\n\nintersphinx_mapping = {\n    \"python\": ('https://docs.python.org/3', None),\n    \"trio\": ('https://trio.readthedocs.io/en/stable', None),\n}\n\nautodoc_member_order = \"bysource\"\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = []\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = 'sniffio'\ncopyright = 'The sniffio authors'\nauthor = 'The sniffio authors'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nimport sniffio\nversion = sniffio.__version__\n# The full version, including alpha/beta/rc tags.\nrelease = version\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This patterns also effect to html_static_path and html_extra_path\nexclude_patterns = []\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# The default language for :: blocks\nhighlight_language = 'python3'\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\n#html_theme = 'alabaster'\n\n# We have to set this ourselves, not only because it's useful for local\n# testing, but also because if we don't then RTD will throw away our\n# html_theme_options.\nimport sphinx_rtd_theme\nhtml_theme = 'sphinx_rtd_theme'\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\nhtml_theme_options = {\n    # default is 2\n    # show deeper nesting in the RTD theme's sidebar TOC\n    # https://stackoverflow.com/questions/27669376/\n    # I'm not 100% sure this actually does anything with our current\n    # versions/settings...\n    \"navigation_depth\": 4,\n    \"logo_only\": True,\n}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n\n# -- Options for HTMLHelp output ------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'sniffiodoc'\n\n\n# -- Options for LaTeX output ---------------------------------------------\n\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',\n\n    # Latex figure (float) alignment\n    #\n    # 'figure_align': 'htbp',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, 'sniffio.tex', 'Trio Documentation',\n     author, 'manual'),\n]\n\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, 'sniffio', 'sniffio Documentation',\n     [author], 1)\n]\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, 'sniffio', 'sniffio Documentation',\n     author, 'sniffio', 'Sniff out which async library your code is running under',\n     'Miscellaneous'),\n]\n"}