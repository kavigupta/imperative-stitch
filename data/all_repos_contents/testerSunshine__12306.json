{"run.py": "# -*- coding=utf-8 -*-\nimport argparse\nimport sys\n\n\ndef parser_arguments(argv):\n    \"\"\"\n    \u4e0d\u5e94\u8be5\u5728\u8fd9\u91cc\u5b9a\u4e49\uff0c\u5148\u653e\u5728\u8fd9\u91cc\n    :param argv:\n    :return:\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"operate\", type=str, help=\"r: \u8fd0\u884c\u62a2\u7968\u7a0b\u5e8f, c: \u8fc7\u6ee4cdn, t: \u6d4b\u8bd5\u90ae\u7bb1\u548cserver\u9171\uff0cserver\u9171\u9700\u8981\u6253\u5f00\u5f00\u5173\")\n\n    return parser.parse_args(argv)\n\n\nif __name__ == '__main__':\n    args = parser_arguments(sys.argv[1:])\n    if args.operate == \"r\":\n        from init import select_ticket_info\n        select_ticket_info.select().main()\n    elif args.operate == \"t\":\n        from config.emailConf import sendEmail\n        from config.serverchanConf import sendServerChan\n        sendEmail(u\"\u8ba2\u7968\u5c0f\u52a9\u624b\u6d4b\u8bd5\u4e00\u4e0b\")\n        sendServerChan(\"\u8ba2\u7968\u5c0f\u52a9\u624b\u6d4b\u8bd5\u4e00\u4e0b\")\n    elif args.operate == \"c\":\n        from agency.cdn_utils import filterCdn\n        filterCdn()\n\n", "TickerConfig.py": "# -*- coding=utf-8 -*-\n# \u5173\u4e8e\u8f6f\u4ef6\u4f7f\u7528\u914d\u7f6e\u8bf4\u660e\uff0c\u4e00\u5b9a\u8981\u770b\uff01\uff01\uff01\n# ps: \u5982\u679c\u662f\u5019\u8865\u8f66\u7968\uff0c\u9700\u8981\u901a\u8fc7\u4eba\u8bc1\u4e00\u81f4\u6027\u6838\u9a8c\u7684\u7528\u6237\u53ca\u6fc0\u6d3b\u7684\u201c\u94c1\u8def\u7545\u884c\u201d\u4f1a\u5458\u53ef\u4ee5\u63d0\u4ea4\u5019\u8865\u9700\u6c42\uff0c\u8bf7\u60a8\u6309\u7167\u64cd\u4f5c\u8bf4\u660e\u5728\u94c1\u8def12306app.\u4e0a\u5b8c\u6210\u4eba\u8bc1\u6838\u9a8c\n# \u5173\u4e8e\u5019\u8865\u4e86\u4e4b\u540e\u662f\u5426\u8fd8\u80fd\u7ee7\u7eed\u6361\u6f0f\u7684\u95ee\u9898\u5728\u6b64\u8bf4\u660e\uff1a \u8f6f\u4ef6\u4e3a\u5168\u81ea\u52a8\u5019\u8865\u52a0\u6361\u6f0f\uff0c\u5982\u679c\u8f6f\u4ef6\u5019\u8865\u6210\u529f\u5219\u4f1a\u505c\u6b62\u62a2\u7968\uff0c\u53d1\u51fa\u90ae\u4ef6\u901a\u77e5\uff0c\u4f46\u662f\u4e0d\u4f1a\u5f71\u54cd\u4f60\u7ee7\u7eed\u6361\u6f0f\uff0c\n# \u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u6361\u6f0f\u6361\u5230\u7684\u8bdd\uff0c\u4e5f\u662f\u53ef\u4ee5\u4ed8\u6b3e\u6210\u529f\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6361\u6f0f+\u5019\u8865\uff0c\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u63d0\u5347\u62a2\u7968\u6210\u529f\u7387\n\n# \u5237\u7968\u6a21\u5f0f\uff1a1=\u5237\u7968 2=\u5019\u8865+\u5237\u7968\nTICKET_TYPE = 1\n\n# \u51fa\u53d1\u65e5\u671f(list) \"2018-01-06\", \"2018-01-07\"\nSTATION_DATES = [\n    \"2020-01-18\"\n]\n\n# \u586b\u5165\u9700\u8981\u8d2d\u4e70\u7684\u8f66\u6b21(list)\uff0c\"G1353\"\n# \u4fee\u6539\u8f66\u6b21\u586b\u5165\u89c4\u5219\uff0c\u6ce8\uff1a(\u4ee5\u524d\u8bbe\u7f6e\u7684\u8f66\u6b21\u903b\u8f91\u4e0d\u53d8)\uff0c\u5982\u679c\u8f66\u6b21\u586b\u5165\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c31\u662f\u5f53\u65e5\u4e58\u8f66\u6240\u6709\u8f66\u6b21\u90fd\u7eb3\u5165\u7b5b\u9009\u8fd4\u56de\n# \u4e0d\u586b\u8f66\u6b21\u662f\u6574\u4e2alist\u4e3a\u7a7a\u624d\u7b97\uff0c\u5982\u679c\u4e0d\u662f\u4e3a\u7a7a\uff0c\u4f9d\u7136\u4f1a\u5224\u65ad\u8f66\u6b21\u7684\uff0c\u8fd9\u79cd\u662f\u9519\u8bef\u7684\u5199\u6cd5 [\"\"], \u6b63\u786e\u7684\u5199\u6cd5 []\nSTATION_TRAINS = []\n\n# \u51fa\u53d1\u57ce\u5e02\uff0c\u6bd4\u5982\u6df1\u5733\u5317\uff0c\u5c31\u586b\u6df1\u5733\u5c31\u641c\u5f97\u5230\nFROM_STATION = \"\u5e7f\u5dde\u5357\"\n\n# \u5230\u8fbe\u57ce\u5e02 \u6bd4\u5982\u6df1\u5733\u5317\uff0c\u5c31\u586b\u6df1\u5733\u5c31\u641c\u5f97\u5230\nTO_STATION = \"\u9686\u56de\"\n\n# \u5ea7\u4f4d(list) \u591a\u4e2a\u5ea7\u4f4dex:\n# \"\u5546\u52a1\u5ea7\",\n# \"\u4e00\u7b49\u5ea7\",\n# \"\u4e8c\u7b49\u5ea7\",\n# \"\u7279\u7b49\u5ea7\",\n# \"\u8f6f\u5367\",\n# \"\u786c\u5367\",\n# \"\u786c\u5ea7\",\n# \"\u65e0\u5ea7\",\n# \"\u52a8\u5367\",\nSET_TYPE = [\"\u4e8c\u7b49\u5ea7\"]\n\n# \u5f53\u4f59\u7968\u5c0f\u4e8e\u4e58\u8f66\u4eba\uff0c\u5982\u679c\u9009\u62e9\u4f18\u5148\u63d0\u4ea4\uff0c\u5219\u5220\u51cf\u8054\u7cfb\u4eba\u548c\u4f59\u7968\u6570\u4e00\u81f4\u5728\u63d0\u4ea4\n# bool\nIS_MORE_TICKET = True\n\n# \u4e58\u8f66\u4eba(list) \u591a\u4e2a\u4e58\u8f66\u4ebaex:\n# \"\u5f20\u4e09\",\n# \"\u674e\u56db\"\nTICKET_PEOPLES = []\n\n# 12306\u767b\u5f55\u8d26\u53f7\nUSER = \"\"\nPWD = \"\"\n\n# \u52a0\u5165\u5c0f\u9ed1\u5c4b\u65f6\u95f4\u9ed8\u8ba4\u4e3a5\u5206\u949f\uff0c\u6b64\u529f\u80fd\u4e3a\u4e86\u9632\u6b62\u50f5\u5c38\u7968\u5bfc\u81f4\u4e00\u76f4\u4e0b\u5355\u4e0d\u6210\u529f\u9519\u8fc7\u6b63\u5e38\u7684\u7968\nTICKET_BLACK_LIST_TIME = 5\n\n# \u81ea\u52a8\u6253\u7801\nIS_AUTO_CODE = True\n\n# \u8bbe\u7f6e2\u672c\u5730\u81ea\u52a8\u6253\u7801\uff0c\u9700\u8981\u914d\u7f6etensorflow\u548ckeras\u5e93\uff0c3\u4e3a\u4e91\u6253\u7801\uff0c\u7531\u4e8e\u4e91\u6253\u7801\u670d\u52a1\u5668\u8d44\u6e90\u6709\u9650(\u4e3a2h4C\u7684cpu\u670d\u52a1\u5668)\uff0c\u8bf7\u4e0d\u8981\u6076\u610f\u8bf7\u6c42\uff0c\u4e0d\u7136\u53ea\u80fd\u5173\u95ed\u670d\u52a1\u5668\n# ps: \u8bf7\u4e0d\u8981\u4e00\u76f4\u4f9d\u8d56\u4e91\u670d\u52a1\u5668\u8d44\u6e90\uff0c\u5728\u6b64\u5411\u6240\u6709\u63d0\u4f9b\u670d\u52a1\u5668\u540c\u5b66\u8868\u793a\u611f\u8c22\nAUTO_CODE_TYPE = 3\n\n# \u6b64\u5904\u8bbe\u7f6e\u4e91\u6253\u7801\u670d\u52a1\u5668\u5730\u5740\uff0c\u5982\u679c\u6709\u81ea\u5efa\u7684\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u81ea\u884c\u66f4\u6539\nHOST = \"120.77.154.140:8000\"\nREQ_URL = \"/verify/base64/\"\nHTTP_TYPE = \"http\"\n# HOST=\"12306.yinaoxiong.cn\" #\u5907\u7528\u670d\u52a1\u5668\u7a33\u5b9a\u6027\u8f83\u5dee\n# REQ_URL=\"/verify/base64/\"\n# HTTP_TYPE=\"https\"\n\n#  \u90ae\u7bb1\u914d\u7f6e\uff0c\u5982\u679c\u62a2\u7968\u6210\u529f\uff0c\u5c06\u901a\u8fc7\u90ae\u4ef6\u914d\u7f6e\u901a\u77e5\u7ed9\u60a8\n#  \u5217\u4e3e163\n#  email: \"xxx@163.com\"\n#  notice_email_list: \"123@qq.com\"\n#  username: \"xxxxx\"\n#  password: \"xxxxx\n#  host: \"smtp.163.com\"\n#  \u5217\u4e3eqq  \uff0cqq\u8bbe\u7f6e\u6bd4\u8f83\u590d\u6742\uff0c\u9700\u8981\u5728\u90ae\u7bb1-->\u8d26\u6237-->\u5f00\u542fsmtp\u670d\u52a1\uff0c\u53d6\u5f97\u6388\u6743\u7801==\u90ae\u7bb1\u767b\u5f55\u5bc6\u7801\n#  email: \"xxx@qq.com\"\n#  notice_email_list: \"123@qq.com\"\n#  username: \"xxxxx\"\n#  password: \"\u6388\u6743\u7801\"\n#  host: \"smtp.qq.com\"\nEMAIL_CONF = {\n    \"IS_MAIL\": True,\n    \"email\": \"\",\n    \"notice_email_list\": \"\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"smtp.qq.com\",\n}\n\n# \u662f\u5426\u5f00\u542f server\u9171 \u5fae\u4fe1\u63d0\u9192\uff0c \u4f7f\u7528\u524d\u9700\u8981\u524d\u5f80 http://sc.ftqq.com/3.version \u626b\u7801\u7ed1\u5b9a\u83b7\u53d6 SECRET \u5e76\u5173\u6ce8\u83b7\u5f97\u62a2\u7968\u7ed3\u679c\u901a\u77e5\u7684\u516c\u4f17\u53f7\nSERVER_CHAN_CONF = {\n    \"is_server_chan\": False,\n    \"secret\": \"\"\n}\n\n# \u662f\u5426\u5f00\u542fcdn\u67e5\u8be2\uff0c\u53ef\u4ee5\u66f4\u5feb\u7684\u68c0\u6d4b\u7968\u7968 1\u4e3a\u5f00\u542f\uff0c2\u4e3a\u5173\u95ed\nIS_CDN = 1\n\n# \u4e0b\u5355\u63a5\u53e3\u5206\u4e3a\u4e24\u79cd\uff0c1 \u6a21\u62df\u7f51\u9875\u81ea\u52a8\u6361\u6f0f\u4e0b\u5355\uff08\u4e0d\u7a33\u5b9a\uff09\uff0c2 \u6a21\u62df\u8f66\u6b21\u540e\u9762\u7684\u8d2d\u7968\u6309\u94ae\u4e0b\u5355\uff08\u7a33\u5982\u8001\u72d7\uff09\nORDER_TYPE = 2\n\n# \u4e0b\u5355\u6a21\u5f0f 1 \u4e3a\u9884\u552e\uff0c\u6574\u70b9\u5237\u65b0\uff0c\u5237\u65b0\u95f4\u96940.1-0.5S, \u7136\u540e\u4f1a\u6821\u9a8c\u65f6\u95f4\uff0c\u6bd4\u598212\u70b9\u7684\u9884\u552e\uff0c\u90a3\u811a\u672c\u5c31\u4f1a\u572812.00\u6574\u68c0\u7968\uff0c\u5237\u65b0\u8ba2\u5355\n#         2 \u662f\u6361\u6f0f\uff0c\u6361\u6f0f\u7684\u5237\u65b0\u95f4\u9694\u65f6\u95f4\u4e3a0.5-3\u79d2\uff0c\u65f6\u95f4\u95f4\u9694\u957f\uff0c\u4e0d\u5bb9\u6613\u5c01ip\nORDER_MODEL = 1\n\n# \u662f\u5426\u5f00\u542f\u4ee3\u7406, 0\u4ee3\u8868\u5173\u95ed\uff0c 1\u8868\u793a\u5f00\u59cb\n# \u5f00\u542f\u6b64\u529f\u80fd\u7684\u65f6\u5019\u8bf7\u786e\u4fdd\u4ee3\u7406ip\u662f\u5426\u53ef\u7528\uff0c\u5728\u6d4b\u8bd5\u653e\u91cc\u9762\u7ecf\u8fc7\u5145\u5206\u7684\u6d4b\u8bd5\uff0c\u518d\u5f00\u542f\u6b64\u529f\u80fd\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u803d\u8bef\u4f60\u8d2d\u7968\u7684\u5b9d\u8d35\u65f6\u95f4\n# \u4f7f\u7528\u65b9\u6cd5\uff1a\n# 1\u3001\u5728agency/proxy_list\u5217\u8868\u4e0b\u586b\u5165\u4ee3\u7406ip\n# 2\u3001\u6d4b\u8bd5UnitTest/TestAll/testProxy \u6d4b\u8bd5\u4ee3\u7406\u662f\u5426\u53ef\u4ee5\u7528\n# 3\u3001\u5f00\u542f\u4ee3\u7406ip\nIS_PROXY = 0\n\n# \u9884\u552e\u653e\u7968\u65f6\u95f4, \u5982\u679c\u662f\u6361\u6f0f\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5ffd\u7565\u6b64\u64cd\u4f5c\nOPEN_TIME = \"12:59:57\"\n# 1=\u4f7f\u7528selenium\u83b7\u53d6devicesID\n# 2=\u4f7f\u7528\u7f51\u9875\u7aef/otn/HttpZF/logdevice\u83b7\u53d6devicesId\uff0c\u8fd9\u4e2a\u63a5\u53e3\u7684\u7b97\u6cd5\u76ee\u524d\u53ef\u80fd\u6709\u70b9\u95ee\u9898\uff0c\u5982\u679c\u767b\u5f55\u4e00\u76f4302\u7684\u8bf7\u6539\u4e3a\u914d\u7f6e1\n# 3=\u81ea\u5df1\u6253\u5f00\u6d4f\u89c8\u5668\u5728headers-Cookies\u4e2d\u6293\u53d6RAIL_DEVICEID\u548cRAIL_EXPIRATION\uff0c\u8fd9\u4e2a\u5c31\u4e0d\u7528\u914d\u7f6eselenium\nCOOKIE_TYPE = 3\n# \u5982\u679cCOOKIE_TYPE=1\uff0c\u5219\u9700\u914d\u7f6echromeDriver\u8def\u5f84,\u4e0b\u8f7d\u5730\u5740http://chromedriver.storage.googleapis.com/index.html\n# chromedriver\u914d\u7f6e\u7248\u672c\u53ea\u8981\u548cchrome\u7684\u5927\u7248\u672c\u5339\u914d\u5c31\u884c\nCHROME_PATH = \"/usr/src/app/chromedriver\"\n\n# \u4e3a\u4e86docker37 \u51c6\u5907\u7684\u73af\u5883\u53d8\u91cf\uff0cwindows\u73af\u5883\u53ef\u4ee5\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u53c2\u6570\nCHROME_CHROME_PATH = \"/opt/google/chrome/google-chrome\"\n\n# \u5982\u679cCOOKIE_TYPE=3, \u5219\u9700\u914d\u7f6eRAIL_EXPIRATION\u3001RAIL_DEVICEID\u7684\u503c\nRAIL_EXPIRATION = \"\"\nRAIL_DEVICEID = \"\"\n# RAIL_EXPIRATION = \"1577034103293\"\n# RAIL_DEVICEID = \"CDno29Erc_Pf3FSXb4dzq-Op64EhWrsi5yUZKVIKR1MAfYo2qFlCeXD8VkexY7_1qg-ClV-fE8j9jgVlPZxRh3wVc2iqLe_5A8sdr62qZx4B22JPF8lFCjpgTKZ5ODW90HJd5tiQsJ1KR9nOqHRxHj1FT5LEIwfw\"\n\n\n# 1=>\u4e3a\u4e00\u76f4\u968f\u673aua,2->\u53ea\u542f\u52a8\u7684\u65f6\u5019\u968f\u673a\u4e00\u6b21ua\nRANDOM_AGENT = 2\n\nPASSENGER_TICKER_STR = {\n    '\u4e00\u7b49\u5ea7': 'M',\n    '\u7279\u7b49\u5ea7': 'P',\n    '\u4e8c\u7b49\u5ea7': 'O',\n    '\u5546\u52a1\u5ea7': 9,\n    '\u786c\u5ea7': 1,\n    '\u65e0\u5ea7': 1,\n    '\u8f6f\u5ea7': 2,\n    '\u8f6f\u5367': 4,\n    '\u786c\u5367': 3,\n}\n\n# \u4fdd\u62a412306\u5b98\u7f51\u8bf7\u6c42\u9891\u7387\uff0c\u8bbe\u7f6e\u968f\u673a\u8bf7\u6c42\u65f6\u95f4\uff0c\u539f\u5219\u4e3a5\u5206\u949f\u4e0d\u5927\u4e8e80\u6b21\n# \u6700\u5927\u95f4\u9694\u8bf7\u6c42\u65f6\u95f4\nMAX_TIME = 3\n# \u6700\u5c0f\u95f4\u9694\u8bf7\u6c42\u65f6\u95f4\nMIN_TIME = 1\n\n# \u8f6f\u4ef6\u7248\u672c\nRE_VERSION = \"1.2.004\"\n", "__init__.py": "", "tmp/__init__.py": "", "tmp/log/__init__.py": "", "inter/CheckOrderInfo.py": "# coding=utf-8\nfrom collections import OrderedDict\nfrom inter.GetQueueCount import getQueueCount\nfrom inter.GetRepeatSubmitToken import getRepeatSubmitToken\n\n\nclass checkOrderInfo:\n\n    def __init__(self, session, train_no, set_type, passengerTicketStrList, oldPassengerStr, station_dates, ticket_peoples):\n        self.train_no = train_no\n        self.set_type = set_type\n        self.passengerTicketStrList = passengerTicketStrList\n        self.oldPassengerStr = oldPassengerStr\n        self.station_dates = station_dates\n        self.ticket_peoples = ticket_peoples\n        self.RepeatSubmitToken = getRepeatSubmitToken(session)\n        self.getTicketInfoForPassengerForm = self.RepeatSubmitToken.sendGetRepeatSubmitToken()\n        self.ticketInfoForPassengerForm = self.getTicketInfoForPassengerForm.get(\"ticketInfoForPassengerForm\", \"\")\n        self.token = self.getTicketInfoForPassengerForm.get(\"token\", \"\")\n        self.session = self.getTicketInfoForPassengerForm.get(\"session\", \"\")\n\n    def data_par(self):\n        \"\"\"\n        \u53c2\u6570\u7ed3\u6784\n        :return:\n        \"\"\"\n        data = OrderedDict()\n        data['bed_level_order_num'] = \"000000000000000000000000000000\"\n        data['passengerTicketStr'] = self.passengerTicketStrList.rstrip(\"_{0}\".format(self.set_type))\n        data['oldPassengerStr'] = self.oldPassengerStr\n        data['tour_flag'] = 'dc'\n        data['randCode'] = \"\"\n        data['cancel_flag'] = 2\n        data['_json_att'] = \"\"\n        data['REPEAT_SUBMIT_TOKEN'] = self.token\n        return data\n\n    def sendCheckOrderInfo(self):\n        \"\"\"\n        \u68c0\u67e5\u652f\u4ed8\u8ba2\u5355\uff0c\u9700\u8981\u63d0\u4ea4REPEAT_SUBMIT_TOKEN\n        passengerTicketStr : \u5ea7\u4f4d\u7f16\u53f7,0,\u7968\u7c7b\u578b,\u4e58\u5ba2\u540d,\u8bc1\u4ef6\u7c7b\u578b,\u8bc1\u4ef6\u53f7,\u624b\u673a\u53f7\u7801,\u4fdd\u5b58\u5e38\u7528\u8054\u7cfb\u4eba(Y\u6216N)\n        oldPassengersStr: \u4e58\u5ba2\u540d,\u8bc1\u4ef6\u7c7b\u578b,\u8bc1\u4ef6\u53f7,\u4e58\u5ba2\u7c7b\u578b\n        :return:\n        \"\"\"\n        CheckOrderInfoUrls = self.session.urls[\"checkOrderInfoUrl\"]\n        data = self.data_par()\n        checkOrderInfoRep = self.session.httpClint.send(CheckOrderInfoUrls, data)\n        data = checkOrderInfoRep.get(\"data\", {})\n        if data and data.get(\"submitStatus\", False):\n            print (u'\u8f66\u7968\u63d0\u4ea4\u901a\u8fc7\uff0c\u6b63\u5728\u5c1d\u8bd5\u6392\u961f')\n            ifShowPassCodeTime = int(checkOrderInfoRep[\"data\"][\"ifShowPassCodeTime\"]) / float(1000)\n            if \"ifShowPassCode\" in checkOrderInfoRep[\"data\"] and checkOrderInfoRep[\"data\"][\"ifShowPassCode\"] == \"Y\":\n                is_need_code = True\n            elif \"ifShowPassCode\" in checkOrderInfoRep[\"data\"] and checkOrderInfoRep['data']['submitStatus'] is True:\n                is_need_code = False\n            else:\n                is_need_code = False\n            QueueCount = getQueueCount(self.session,\n                                       is_need_code,\n                                       ifShowPassCodeTime,\n                                       self.set_type,\n                                       self.station_dates,\n                                       self.train_no,\n                                       self.ticket_peoples,\n                                       self.ticketInfoForPassengerForm,\n                                       self.token,\n                                       self.oldPassengerStr,\n                                       self.passengerTicketStrList,\n                                       )\n            QueueCount.sendGetQueueCount()\n        elif \"errMsg\" in data and data[\"errMsg\"]:\n            print(checkOrderInfoRep['data'][\"errMsg\"])\n        elif 'messages' in checkOrderInfoRep and checkOrderInfoRep['messages']:\n            print (checkOrderInfoRep['messages'][0])", "inter/QueryOrderWaitTime.py": "# coding=utf-8\nimport copy\nimport time\n\nfrom config.TicketEnmu import ticket\nfrom config.emailConf import sendEmail\nfrom config.serverchanConf import sendServerChan\nfrom myException.ticketIsExitsException import ticketIsExitsException\nfrom myException.ticketNumOutException import ticketNumOutException\n\n\nclass queryOrderWaitTime:\n    \"\"\"\n    \u6392\u961f\n    \"\"\"\n\n    def __init__(self, session):\n        self.session = session\n\n    def sendQueryOrderWaitTime(self):\n        \"\"\"\n        \u6392\u961f\u83b7\u53d6\u8ba2\u5355\u7b49\u5f85\u4fe1\u606f,\u6bcf\u96943\u79d2\u8bf7\u6c42\u4e00\u6b21\uff0c\u6700\u9ad8\u8bf7\u6c42\u6b21\u6570\u4e3a20\u6b21\uff01\n        :return:\n        \"\"\"\n        num = 1\n        while True:\n            num += 1\n            if num > ticket.OUT_NUM:\n                print(ticket.WAIT_OUT_NUM)\n                order_id = self.queryMyOrderNoComplete()  # \u6392\u961f\u5931\u8d25\uff0c\u81ea\u52a8\u53d6\u6d88\u6392\u961f\u8ba2\u5355\n                if order_id:\n                    self.cancelNoCompleteMyOrder(order_id)\n                break\n            try:\n                queryOrderWaitTimeUrl = copy.deepcopy(self.session.urls[\"queryOrderWaitTimeUrl\"])\n                queryOrderWaitTimeUrl[\"req_url\"] = queryOrderWaitTimeUrl[\"req_url\"].format(int(round(time.time() * 1000)))\n                queryOrderWaitTimeResult = self.session.httpClint.send(queryOrderWaitTimeUrl)\n            except ValueError:\n                queryOrderWaitTimeResult = {}\n            if queryOrderWaitTimeResult:\n                if queryOrderWaitTimeResult.get(\"status\", False):\n                    data = queryOrderWaitTimeResult.get(\"data\", False)\n                    if data and data.get(\"orderId\", \"\"):\n                        sendEmail(ticket.WAIT_ORDER_SUCCESS.format(\n                            data.get(\"orderId\", \"\")))\n                        sendServerChan(ticket.WAIT_ORDER_SUCCESS.format(\n                            data.get(\"orderId\", \"\")))\n                        raise ticketIsExitsException(ticket.WAIT_ORDER_SUCCESS.format(\n                            data.get(\"orderId\")))\n                    elif data.get(\"msg\", False):\n                        print(data.get(\"msg\", \"\"))\n                        break\n                    elif data.get(\"waitTime\", False):\n                        print(ticket.WAIT_ORDER_CONTINUE.format(0 - data.get(\"waitTime\", False)))\n                    else:\n                        pass\n                elif queryOrderWaitTimeResult.get(\"messages\", False):\n                    print(ticket.WAIT_ORDER_FAIL.format(queryOrderWaitTimeResult.get(\"messages\", \"\")))\n                else:\n                    print(ticket.WAIT_ORDER_NUM.format(num + 1))\n            else:\n                pass\n            time.sleep(2)\n        else:\n            print(ticketNumOutException(ticket.WAIT_ORDER_SUB_FAIL))\n\n    def queryMyOrderNoComplete(self):\n        \"\"\"\n        \u83b7\u53d6\u8ba2\u5355\u5217\u8868\u4fe1\u606f\n        :return:\n        \"\"\"\n        self.initNoComplete()\n        queryMyOrderNoCompleteUrl = self.session.urls[\"queryMyOrderNoCompleteUrl\"]\n        data = {\"_json_att\": \"\"}\n        try:\n            queryMyOrderNoCompleteResult = self.session.httpClint.send(queryMyOrderNoCompleteUrl, data)\n        except ValueError:\n            queryMyOrderNoCompleteResult = {}\n        if queryMyOrderNoCompleteResult:\n            if queryMyOrderNoCompleteResult.get(\"data\", False) and queryMyOrderNoCompleteResult[\"data\"].get(\"orderDBList\", False):\n                return queryMyOrderNoCompleteResult[\"data\"]\n            elif queryMyOrderNoCompleteResult.get(\"data\", False) and queryMyOrderNoCompleteResult[\"data\"].get(\"orderCacheDTO\", False):\n                if queryMyOrderNoCompleteResult[\"data\"][\"orderCacheDTO\"].get(\"message\", False):\n                    print(queryMyOrderNoCompleteResult[\"data\"][\"orderCacheDTO\"][\"message\"][\"message\"])\n                    raise ticketNumOutException(\n                        queryMyOrderNoCompleteResult[\"data\"][\"orderCacheDTO\"][\"message\"][\"message\"])\n            else:\n                if queryMyOrderNoCompleteResult.get(\"message\", False):\n                    print(queryMyOrderNoCompleteResult.get(\"message\", False))\n                    return False\n                else:\n                    return False\n        else:\n            return False\n\n    def initNoComplete(self):\n        \"\"\"\n        \u83b7\u53d6\u8ba2\u5355\u524d\u9700\u8981\u8fdb\u5165\u8ba2\u5355\u5217\u8868\u9875\uff0c\u83b7\u53d6\u8ba2\u5355\u5217\u8868\u9875session\n        :return:\n        \"\"\"\n        initNoCompleteUrl = self.session.urls[\"initNoCompleteUrl\"]\n        data = {\"_json_att\": \"\"}\n        self.session.httpClint.send(initNoCompleteUrl, data)\n\n    def cancelNoCompleteMyOrder(self, sequence_no):\n        \"\"\"\n        \u53d6\u6d88\u8ba2\u5355\n        :param sequence_no: \u8ba2\u5355\u7f16\u53f7\n        :return:\n        \"\"\"\n        cancelNoCompleteMyOrderUrl = self.session.urls[\"cancelNoCompleteMyOrder\"]\n        cancelNoCompleteMyOrderData = {\n            \"sequence_no\": sequence_no,\n            \"cancel_flag\": \"cancel_order\",\n            \"_json_att\": \"\"\n        }\n        cancelNoCompleteMyOrderResult = self.session.httpClint.send(cancelNoCompleteMyOrderUrl,\n                                                                    cancelNoCompleteMyOrderData)\n        if cancelNoCompleteMyOrderResult.get(\"data\", False) and cancelNoCompleteMyOrderResult[\"data\"].get(\"existError\", \"N\"):\n            print(ticket.CANCEL_ORDER_SUCCESS.format(sequence_no))\n            time.sleep(2)\n            return True\n        else:\n            print(ticket.CANCEL_ORDER_FAIL.format(sequence_no))\n            return False\n", "inter/LoginConf.py": "# coding=utf-8\nfrom config.urlConf import urls\n\n\ndef loginConf(session):\n    \"\"\"\n    \u5224\u65ad\u767b\u5f55\u662f\u5426\u9700\u8981\u9a8c\u8bc1\u7801\n    :param session:\n    :return:\n    \"\"\"\n    loginConfUrl = urls.get(\"loginConf\")\n    loginConfRsp = session.httpClint.send(urls=loginConfUrl, data={})\n    if loginConfRsp and loginConfRsp.get(\"data\", {}).get(\"is_login_passCode\") == \"N\":\n        print(u\"\u4e0d\u9700\u8981\u9a8c\u8bc1\u7801\")\n        return False\n    else:\n        print(u\"\u9700\u8981\u9a8c\u8bc1\u7801\")\n        return True\n\n\nif __name__ == '__main__':\n    pass", "inter/CheckUser.py": "# coding=utf-8\nimport datetime\nimport random\nimport time\nimport wrapcache\nfrom config import configCommon\nfrom config.TicketEnmu import ticket\n\n\nclass checkUser:\n    def __init__(self, session):\n        self.session = session\n\n    def sendCheckUser(self):\n        \"\"\"\n        \u68c0\u67e5\u7528\u6237\u767b\u5f55, \u68c0\u67e5\u95f4\u9694\u4e3a2\u5206\u949f\n        :return:\n        \"\"\"\n        CHENK_TIME = 1\n        while 1:\n            time.sleep(3)  # \u9632\u6b62cpu\u5360\u7528\u8fc7\u9ad8\n            configCommon.checkSleepTime(self.session)  # \u4fee\u590d\u665a\u4e0a\u67e5\u8be2\u7ebf\u7a0b\u4f11\u7720\u65f6\uff0c\u68c0\u67e5\u767b\u5f55\u7ebf\u7a0b\u4e3a\u4f11\u7720\uff0c\u9020\u6210\u5feb\u8c46\u8fc5\u901f\u6d88\u8017\n            if wrapcache.get(\"user_time\") is None:\n                check_user_url = self.session.urls[\"check_user_url\"]\n                data = {\"_json_att\": \"\"}\n                check_user = self.session.httpClint.send(check_user_url, data)\n                if check_user.get(\"data\", False):\n                    check_user_flag = check_user[\"data\"][\"flag\"]\n                    if check_user_flag is True:\n                       wrapcache.set(\"user_time\", datetime.datetime.now(), timeout=random.randint(60, 80) * CHENK_TIME)\n                    else:\n                        if check_user['messages']:\n                            print(ticket.LOGIN_SESSION_FAIL.format(check_user['messages']))\n                            self.session.call_login()\n                            wrapcache.set(\"user_time\", datetime.datetime.now(), timeout=random.randint(60, 80) * CHENK_TIME)\n                        else:\n                            print(ticket.LOGIN_SESSION_FAIL.format(check_user['messages']))\n                            self.session.call_login()\n                            wrapcache.set(\"user_time\", datetime.datetime.now(), timeout=random.randint(60, 80) * CHENK_TIME)\n", "inter/GetPassCodeNewOrderAndLogin.py": "# coding=utf-8\nimport base64\nimport copy\nimport random\n\n\ndef getPassCodeNewOrderAndLogin(session, imgType):\n    \"\"\"\n    \u4e0b\u8f7d\u9a8c\u8bc1\u7801\n    :param session:\n    :param imgType: \u4e0b\u8f7d\u9a8c\u8bc1\u7801\u7c7b\u578b\uff0clogin=\u767b\u5f55\u9a8c\u8bc1\u7801\uff0c\u5176\u4f59\u4e3a\u8ba2\u5355\u9a8c\u8bc1\u7801\n    :return:\n    \"\"\"\n    if imgType == \"login\":\n        codeImgUrl = copy.deepcopy(session.urls[\"getCodeImg\"])\n        codeImgUrl[\"req_url\"] = codeImgUrl[\"req_url\"].format(random.random())\n    else:\n        codeImgUrl = copy.deepcopy(session.urls[\"codeImgByOrder\"])\n        codeImgUrl[\"req_url\"] = codeImgUrl[\"req_url\"].format(random.random())\n    print(u\"\u4e0b\u8f7d\u9a8c\u8bc1\u7801...\")\n    img_path = './tkcode.png'\n    result = session.httpClint.send(codeImgUrl)\n    try:\n        if isinstance(result, dict):\n            print(u\"\u4e0b\u8f7d\u9a8c\u8bc1\u7801\u5931\u8d25, \u8bf7\u624b\u52a8\u68c0\u67e5\u662f\u5426ip\u88ab\u5c01\uff0c\u6216\u8005\u91cd\u8bd5\uff0c\u8bf7\u6c42\u5730\u5740\uff1ahttps://kyfw.12306.cn{}\".format(codeImgUrl.get(\"req_url\")))\n            return False\n        else:\n            print(u\"\u4e0b\u8f7d\u9a8c\u8bc1\u7801\u6210\u529f\")\n            try:\n                with open(img_path, 'wb', encoding=\"utf-8\") as img:\n                    img.write(result)\n            except Exception:\n                with open(img_path, 'wb') as img:\n                    img.write(result)\n            return result\n    except OSError:\n        print(u\"\u9a8c\u8bc1\u7801\u4e0b\u8f7d\u5931\u8d25\uff0c\u53ef\u80fdip\u88ab\u5c01\uff0c\u786e\u8ba4\u8bf7\u624b\u52a8\u8bf7\u6c42: {0}\".format(codeImgUrl))\n\n\ndef getPassCodeNewOrderAndLogin1(session, imgType):\n    \"\"\"\n    \u83b7\u53d6\u9a8c\u8bc1\u78012\n    :param session:\n    :param imgType:\n    :return:\n    \"\"\"\n    if imgType == \"login\":\n        codeImgUrl = copy.deepcopy(session.urls[\"getCodeImg1\"])\n        codeImgUrl[\"req_url\"] = codeImgUrl[\"req_url\"].format(random.random())\n    else:\n        codeImgUrl = copy.deepcopy(session.urls[\"codeImgByOrder\"])\n        codeImgUrl[\"req_url\"] = codeImgUrl[\"req_url\"].format(random.random())\n    print(u\"\u4e0b\u8f7d\u9a8c\u8bc1\u7801...\")\n    img_path = './tkcode.png'\n    codeImgUrlRsp = session.httpClint.send(codeImgUrl)\n    if not isinstance(codeImgUrlRsp, str):\n        print(\"\u9a8c\u8bc1\u7801\u83b7\u53d6\u5931\u8d25\")\n        return\n    result = eval(codeImgUrlRsp.split(\"(\")[1].split(\")\")[0]).get(\"image\")\n    try:\n        if isinstance(result, dict):\n            print(u\"\u4e0b\u8f7d\u9a8c\u8bc1\u7801\u5931\u8d25, \u8bf7\u624b\u52a8\u68c0\u67e5\u662f\u5426ip\u88ab\u5c01\uff0c\u6216\u8005\u91cd\u8bd5\uff0c\u8bf7\u6c42\u5730\u5740\uff1ahttps://kyfw.12306.cn{}\".format(codeImgUrl.get(\"req_url\")))\n            return False\n        else:\n            print(u\"\u4e0b\u8f7d\u9a8c\u8bc1\u7801\u6210\u529f\")\n            try:\n                with open(img_path, 'wb', encoding=\"utf-8\") as img:\n                    img.write(result)\n            except Exception:\n                with open(img_path, 'wb') as img:\n                    img.write(base64.b64decode(result))\n            return result\n    except OSError:\n        print(u\"\u9a8c\u8bc1\u7801\u4e0b\u8f7d\u5931\u8d25\uff0c\u53ef\u80fdip\u88ab\u5c01\u6216\u8005\u6587\u4ef6\u5199\u5165\u6ca1\u6743\u9650\")\n\n\nif __name__ == '__main__':\n    pass\n", "inter/SubmitOrderRequest.py": "# coding=utf-8\nimport datetime\nimport urllib\nfrom collections import OrderedDict\nimport TickerConfig\nfrom config.urlConf import urls\nfrom inter.CheckOrderInfo import checkOrderInfo\nfrom inter.ConfirmHB import confirmHB\nfrom inter.PassengerInitApi import passengerInitApi\nfrom myException.ticketIsExitsException import ticketIsExitsException\n\n\ndef time():\n    \"\"\"\n    \u83b7\u53d6\u65e5\u671f\n    :return:\n    \"\"\"\n    today = datetime.date.today()\n    return today.strftime('%Y-%m-%d')\n\n\nclass submitOrderRequest:\n    def __init__(self, selectObj, secretStr, from_station, to_station, train_no, set_type,\n                 passengerTicketStrList, oldPassengerStr, train_date, ticke_peoples):\n        self.session = selectObj\n        # self.secretStr = secretStr\n        try:\n            self.secretStr = urllib.unquote(secretStr)\n        except AttributeError:\n            self.secretStr = urllib.parse.unquote(secretStr)\n        self.from_station = from_station\n        self.to_station = to_station\n        self.to_station = to_station\n        self.train_no = train_no\n        self.set_type = set_type\n        self.passengerTicketStrList = passengerTicketStrList\n        self.oldPassengerStr = oldPassengerStr\n        self.train_date = train_date\n        self.ticke_peoples = ticke_peoples\n\n    def data_apr(self):\n        \"\"\"\n        :return:\n        \"\"\"\n        data = [('secretStr', self.secretStr),  # \u5b57\u7b26\u4e32\u52a0\u5bc6\n                ('train_date', self.train_date),  # \u51fa\u53d1\u65f6\u95f4\n                ('back_train_date', time()),  # \u8fd4\u7a0b\u65f6\u95f4\n                ('tour_flag', 'dc'),  # \u65c5\u9014\u7c7b\u578b\n                ('purpose_codes', 'ADULT'),  # \u6210\u4eba\u7968\u8fd8\u662f\u5b66\u751f\u7968\n                ('query_from_station_name', TickerConfig.FROM_STATION),  # \u8d77\u59cb\u8f66\u7ad9\n                ('query_to_station_name', TickerConfig.TO_STATION),  # \u7ec8\u70b9\u8f66\u7ad9\n                ('undefined', ''),\n                ]\n        return data\n\n    def sendSubmitOrderRequest(self):\n        \"\"\"\n        \u63d0\u4ea4\u8f66\u6b21\n        \u9884\u5b9a\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u6ce8\u610f\u53c2\u6570\u987a\u5e8f\n        \u6ce8\u610f\u8fd9\u91cc\u4e3a\u4e86\u9632\u6b62secretStr\u88aburllib.parse\u8fc7\u5ea6\u7f16\u7801\uff0c\u5728\u8fd9\u91cc\u8fdb\u884c\u4e00\u6b21\u89e3\u7801\n        \u5426\u5219\u8c03\u7528HttpTester\u7c7b\u7684post\u65b9\u6cd5\u5c06\u4f1a\u5c06secretStr\u7f16\u7801\u6210\u4e3a\u65e0\u6548\u7801,\u9020\u6210\u63d0\u4ea4\u9884\u5b9a\u8bf7\u6c42\u5931\u8d25\n        :param secretStr: \u63d0\u4ea4\u8f66\u6b21\u52a0\u5bc6\n        :return:\n        \"\"\"\n        submit_station_url = self.session.urls[\"submit_station_url\"]\n        submitResult = self.session.httpClint.send(submit_station_url, self.data_apr())\n        if 'data' in submitResult and submitResult['data']:\n            if submitResult['data'] == 'N':\n                coi = checkOrderInfo(self.session, self.train_no, self.set_type, self.passengerTicketStrList,\n                                     self.oldPassengerStr,\n                                     self.train_date, self.ticke_peoples)\n                coi.sendCheckOrderInfo()\n            else:\n                print (u'\u51fa\u7968\u5931\u8d25')\n        elif 'messages' in submitResult and submitResult['messages']:\n            raise ticketIsExitsException(submitResult['messages'][0])\n\n\nclass submitOrderRequestByAfterNate:\n    def __init__(self, session, secretList, tickerNo):\n        \"\"\"\n        \u63d0\u4ea4\u5019\u8865\u8ba2\u5355\n        :param secretList:\n        :param session:\n        \"\"\"\n        self.secretList = secretList\n        self.session = session\n        self.tickerNo = tickerNo\n\n    def data_apr(self):\n        \"\"\"\n        secretList\t9vqa9%2B%2F%2Fsdozmm22hpSeDTGqRUwSuA2D0r%2BmU%2BLZj7MK7CDuf5Ep1xpxl4Dyxfmoah%2BaB9TZSesU%0AkxBbo5oNgR1vqMfvq66VP0T7tpQtH%2BbVGBz1FolZG8jDD%2FHqnz%2FnvdBP416Og6WGS14O%2F3iBSwT8%0AkRPsNF0Vq0U082g0tlJtP%2BPn7TzW3z7TDCceMJIjFcfEOA%2BW%2BuK%2Bpy6jCQMv0TmlkXf5aKcGnE02%0APuv4I8nF%2BOWjWzv9CrJyiCZiWaXd%2Bi7p69V3a9dhF787UgS660%2BqKRFB4RLwAfic3MkAlfpGWhMY%0ACfARVQ%3D%3D#O|\n        _json_att\n        \u5019\u8865\u4e00\u6b21\u53ea\u80fd\u8865\u4e00\u4e2a\u5ea7\u4f4d\uff0c\u9ed8\u8ba4\u53d6TICKET_TYPE\u7b2c\u4e00\u4e2a\n        :return:\n        \"\"\"\n\n        ticker = TickerConfig.PASSENGER_TICKER_STR.get(TickerConfig.SET_TYPE[0])\n        data = OrderedDict()\n        data[\"secretList\"] = f\"{self.secretList}#{ticker}|\"\n        data[\"_json_att\"] = \"\"\n        return data\n\n    def sendSubmitOrderRequest(self, ):\n        submitOrderRequestRsp = self.session.httpClint.send(urls.get(\"SubmitOrderRequestRsp\"), self.data_apr())\n        if not submitOrderRequestRsp.get(\"status\") or not submitOrderRequestRsp.get(\"data\", {}).get(\"flag\"):\n            print(\"\".join(submitOrderRequestRsp.get(\"messages\")) or submitOrderRequestRsp.get(\"validateMessages\"))\n            return\n        pApi = passengerInitApi(self.session, self.secretList, self.tickerNo)\n        pApi.sendPassengerInitApi()\n\n", "inter/ConfirmSingleForQueue.py": "# coding=utf-8\nimport datetime\nimport time\n\nfrom inter.CheckRandCodeAnsyn import checkRandCodeAnsyn\nfrom inter.GetPassengerDTOs import getPassengerDTOs\nfrom inter.GetRandCode import getRandCode\nfrom inter.QueryOrderWaitTime import queryOrderWaitTime\n\n\nclass confirmSingleForQueue:\n    def __init__(self, session, ifShowPassCodeTime, is_node_code, token, set_type, ticket_peoples, ticketInfoForPassengerForm,\n                 oldPassengerStr, passengerTicketStrList):\n        self.session = session\n        self.ifShowPassCodeTime = ifShowPassCodeTime\n        self.is_node_code = is_node_code\n        self.token = token\n        self.set_type = set_type\n        self.ticket_peoples = ticket_peoples\n        self.ticketInfoForPassengerForm = ticketInfoForPassengerForm\n        self.passengerTicketStrList = passengerTicketStrList\n        self.oldPassengerStr = oldPassengerStr\n\n    def data_par(self):\n        \"\"\"\n        \u6a21\u62df\u63d0\u4ea4\u8ba2\u5355\u662f\u786e\u8ba4\u6309\u94ae\uff0c\u53c2\u6570\u83b7\u53d6\u65b9\u6cd5\u8fd8\u662fget_ticketInfoForPassengerForm \u4e2d\u83b7\u53d6\n        :return:\n        \"\"\"\n        if not self.passengerTicketStrList and not self.oldPassengerStr:\n            s = getPassengerDTOs(session=self.session, ticket_peoples=self.ticket_peoples, set_type=self.set_type)\n            getPassengerDTOsResult = s.getPassengerTicketStrListAndOldPassengerStr()\n            if getPassengerDTOsResult.get(\"status\", False):\n                self.passengerTicketStrList = getPassengerDTOsResult.get(\"passengerTicketStrList\", \"\")\n                self.oldPassengerStr = getPassengerDTOsResult.get(\"oldPassengerStr\", \"\")\n        data = {\n            \"passengerTicketStr\": self.passengerTicketStrList.rstrip(\"_{0}\".format(self.set_type)),\n            \"oldPassengerStr\": \"\".join(self.oldPassengerStr),\n            \"purpose_codes\": self.ticketInfoForPassengerForm[\"purpose_codes\"],\n            \"key_check_isChange\": self.ticketInfoForPassengerForm[\"key_check_isChange\"],\n            \"leftTicketStr\": self.ticketInfoForPassengerForm[\"leftTicketStr\"],\n            \"train_location\": self.ticketInfoForPassengerForm[\"train_location\"],\n            \"seatDetailType\": \"\",  # \u5f00\u59cb\u9700\u8981\u9009\u62e9\u5ea7\u4f4d\uff0c\u4f46\u662f\u76ee\u524d12306\u4e0d\u652f\u6301\u81ea\u52a8\u9009\u62e9\u4f5c\u4e3a\uff0c\u90a3\u8fd9\u4e2a\u53c2\u6570\u4e3a\u9ed8\u8ba4\n            \"roomType\": \"00\",  # \u597d\u50cf\u662f\u6839\u636e\u4e00\u4e2aid\u6765\u5224\u65ad\u9009\u4e2d\u7684\uff0c\u4e24\u79cd \u7b2c\u4e00\u79cd\u662f00\uff0c\u7b2c\u4e8c\u79cd\u662f10\uff0c\u4f46\u662f\u6211\u572812306\u7684\u9875\u9762\u6ca1\u627e\u5230\u8be5id\uff0c\u76ee\u524d\u5199\u6b7b\u662f00\uff0c\u4e0d\u77e5\u9053\u4f1a\u51fa\u4ec0\u4e48\u9519\n            \"dwAll\": \"N\",\n            \"whatsSelect\": 1,\n            \"_json_at\": \"\",\n            \"randCode\": \"\",\n            \"choose_seats\": \"\",\n            \"REPEAT_SUBMIT_TOKEN\": self.token,\n        }\n        return data\n\n    def sendConfirmSingleForQueue(self):\n        \"\"\"\n        # \u6a21\u62df\u67e5\u8be2\u5f53\u524d\u7684\u5217\u8f66\u6392\u961f\u4eba\u6570\u7684\u65b9\u6cd5\n        # \u8fd4\u56de\u4fe1\u606f\u7ec4\u6210\u7684\u63d0\u793a\u5b57\u7b26\u4e32\n        :return:\n        \"\"\"\n        data = self.data_par()\n        checkQueueOrderUrl = self.session.urls[\"checkQueueOrderUrl\"]\n        try:\n            if self.is_node_code:\n                print(u\"\u6b63\u5728\u4f7f\u7528\u81ea\u52a8\u8bc6\u522b\u9a8c\u8bc1\u7801\u529f\u80fd\")\n                for i in range(3):\n                    randCode = getRandCode(is_auto_code=True, auto_code_type=2)\n                    checkcode = checkRandCodeAnsyn(self.session, randCode, self.token)\n                    if checkcode == 'TRUE':\n                        print(u\"\u9a8c\u8bc1\u7801\u901a\u8fc7,\u6b63\u5728\u63d0\u4ea4\u8ba2\u5355\")\n                        data['randCode'] = randCode\n                        break\n                    else:\n                        print (u\"\u9a8c\u8bc1\u7801\u6709\u8bef, {0}\u6b21\u5c1d\u8bd5\u91cd\u8bd5\".format(i + 1))\n                print(u\"\u9a8c\u8bc1\u7801\u8d85\u8fc7\u9650\u5b9a\u6b21\u65703\u6b21\uff0c\u653e\u5f03\u6b64\u6b21\u8ba2\u7968\u673a\u4f1a!\")\n            else:\n                print(u\"\u4e0d\u9700\u8981\u9a8c\u8bc1\u7801\")\n            time.sleep(self.ifShowPassCodeTime)\n            checkQueueOrderResult = self.session.httpClint.send(checkQueueOrderUrl, data)\n            if \"status\" in checkQueueOrderResult and checkQueueOrderResult[\"status\"]:\n                c_data = checkQueueOrderResult[\"data\"] if \"data\" in checkQueueOrderResult else {}\n                if 'submitStatus' in c_data and c_data['submitStatus'] is True:\n                    qow = queryOrderWaitTime(self.session)\n                    qow.sendQueryOrderWaitTime()\n                else:\n                    if 'errMsg' in c_data and c_data['errMsg']:\n                        print(u\"\u63d0\u4ea4\u8ba2\u5355\u5931\u8d25\uff0c{0}\".format(c_data['errMsg']))\n                    else:\n                        print(c_data)\n                        print(u'\u8ba2\u7968\u5931\u8d25!\u5f88\u62b1\u6b49,\u8bf7\u91cd\u8bd5\u63d0\u4ea4\u9884\u8ba2\u529f\u80fd!')\n            elif \"messages\" in checkQueueOrderResult and checkQueueOrderResult[\"messages\"]:\n                print(u\"\u63d0\u4ea4\u8ba2\u5355\u5931\u8d25,\u9519\u8bef\u4fe1\u606f: \" + checkQueueOrderResult[\"messages\"])\n            else:\n                print(u\"\u63d0\u4ea4\u8ba2\u5355\u4e2d\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\uff1a\" + checkQueueOrderResult[\"message\"])\n        except ValueError:\n            print(u\"\u63a5\u53e3 {} \u65e0\u54cd\u5e94\".format(checkQueueOrderUrl))", "inter/ConfirmSingleForQueueAsys.py": "# coding=utf-8\nimport json\nimport urllib\nfrom collections import OrderedDict\n\nfrom inter.QueryOrderWaitTime import queryOrderWaitTime\n\n\nclass confirmSingleForQueueAsys:\n    \"\"\"\n    \u8ba2\u5355\u5feb\u8bfb\u6392\u961f\n    \"\"\"\n    def __init__(self,\n                 session,\n                 passengerTicketStr,\n                 oldPassengerStr,\n                 result,\n                 randCode=\"\",\n                 ):\n        self.session = session\n        self.passengerTicketStr = passengerTicketStr\n        self.oldPassengerStr = oldPassengerStr\n        self.result = result if isinstance(result, str) else str(result)\n        self.randCode = randCode\n\n    def data_par(self):\n        \"\"\"\n        \u5b57\u6bb5\u8bf4\u660e\n            passengerTicketStr \u4e58\u5ba2\u4e58\u8f66\u4ee3\u7801\n            oldPassengerStr \u4e58\u5ba2\u7f16\u53f7\u4ee3\u7801\n            randCode \u586b\u7a7a\n            purpose_codes \u5b66\u751f\u8fd8\u662f\u6210\u4eba\n            key_check_isChange autoSubmitOrderRequest\u8fd4\u56de\u7684result\u5b57\u6bb5\u505a\u5207\u5272\u5373\u53ef\n            leftTicketStr autoSubmitOrderRequest\u8fd4\u56de\u7684result\u5b57\u6bb5\u505a\u5207\u5272\u5373\u53ef\n            train_location autoSubmitOrderRequest\u8fd4\u56de\u7684result\u5b57\u6bb5\u505a\u5207\u5272\u5373\u53ef\n            choose_seats\n            seatDetailType\n            _json_att\n        :return:\n        \"\"\"\n        results = self.result.split(\"#\")\n        key_check_isChange = results[1]\n        leftTicketStr = results[2]\n        train_location = results[0]\n        data = OrderedDict()\n        data[\"passengerTicketStr\"] = self.passengerTicketStr\n        data[\"oldPassengerStr\"] = self.oldPassengerStr\n        data[\"randCode\"] = self.randCode\n        data[\"purpose_codes\"] = \"ADULT\"\n        data[\"key_check_isChange\"] = key_check_isChange\n        data[\"leftTicketStr\"] = leftTicketStr\n        data[\"train_location\"] = train_location\n        data[\"choose_seats\"] = \"\"\n        data[\"seatDetailType\"] = \"\"\n        data[\"_json_att\"] = \"\"\n        return data\n\n    def sendConfirmSingleForQueueAsys(self):\n        \"\"\"\n        \u8bf7\u6c42\u8ba2\u5355\u5feb\u8bfb\u6392\u961f\u63a5\u53e3\n        :return:\n        \"\"\"\n        urls = self.session.urls[\"confirmSingleForQueueAsys\"]\n        data = self.data_par()\n        confirmSingleForQueueAsysResult = self.session.httpClint.send(urls, data)\n        if confirmSingleForQueueAsysResult.get(\"status\", False) and confirmSingleForQueueAsysResult.get(\"data\", False):\n            queueData = confirmSingleForQueueAsysResult.get(\"data\", {})\n            if queueData.get(\"submitStatus\", False):\n                qwt = queryOrderWaitTime(session=self.session)\n                qwt.sendQueryOrderWaitTime()\n            else:\n                print(queueData.get(\"errMsg\", \"\"))\n", "inter/GetQueueCountAsync.py": "import TickerConfig\n\n[]# coding=utf-8\nimport datetime\nimport sys\nimport time\nfrom collections import OrderedDict\n\nimport wrapcache\n\nfrom inter.ConfirmSingleForQueueAsys import confirmSingleForQueueAsys\n\n\nclass getQueueCountAsync:\n    \"\"\"\n    \u6392\u961f\n    \"\"\"\n    def __init__(self,\n                 session,\n                 train_no,\n                 stationTrainCode,\n                 fromStationTelecode,\n                 toStationTelecode,\n                 leftTicket,\n                 set_type,\n                 users,\n                 station_dates,\n                 passengerTicketStr,\n                 oldPassengerStr,\n                 result,\n                 ifShowPassCodeTime):\n        self.train_no = train_no\n        self.session = session\n        self.stationTrainCode = stationTrainCode\n        self.fromStationTelecode = fromStationTelecode\n        self.toStationTelecode = toStationTelecode\n        self.set_type = set_type\n        self.leftTicket = leftTicket\n        self.users = users\n        self.station_dates = station_dates\n        self.passengerTicketStr = passengerTicketStr\n        self.oldPassengerStr = oldPassengerStr\n        self.result = result\n        self.ifShowPassCodeTime=ifShowPassCodeTime\n\n    def data_par(self):\n        \"\"\"\n         - \u5b57\u6bb5\u8bf4\u660e\n            - train_date \u65f6\u95f4\n            - train_no \u5217\u8f66\u7f16\u53f7,\u67e5\u8be2\u4ee3\u7801\u91cc\u9762\u8fd4\u56de\n            - stationTrainCode \u5217\u8f66\u7f16\u53f7\n            - seatType \u5bf9\u5e94\u5750\u5e2d\n            - fromStationTelecode \u8d77\u59cb\u57ce\u5e02\n            - toStationTelecode \u5230\u8fbe\u57ce\u5e02\n            - leftTicket \u67e5\u8be2\u4ee3\u7801\u91cc\u9762\u8fd4\u56de\n            - purpose_codes \u5b66\u751f\u8fd8\u662f\u6210\u4eba\n            - _json_att \u6ca1\u5565\u5375\u7528\uff0c\u8fd8\u662f\u5e26\u4e0a\u5427\n        :return:\n        \"\"\"\n        if sys.version_info.major is 2:\n            new_train_date = filter(None, str(time.asctime(time.strptime(self.station_dates, \"%Y-%m-%d\"))).split(\" \"))\n        else:\n            new_train_date = list(filter(None, str(time.asctime(time.strptime(self.station_dates, \"%Y-%m-%d\"))).split(\" \")))\n        data = OrderedDict()\n        data['train_date'] = \"{0} {1} {2} {3} 00:00:00 GMT+0800 (\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4)\".format(\n            new_train_date[0],\n            new_train_date[1],\n            new_train_date[2] if len(new_train_date[2]) is 2 else f\"0{new_train_date[2]}\",\n            new_train_date[4],\n            time.strftime(\"%H:%M:%S\", time.localtime(time.time()))\n        ),\n        data[\"train_no\"] = self.train_no\n        data[\"stationTrainCode\"] = self.stationTrainCode\n        data[\"seatType\"] = self.set_type\n        data[\"fromStationTelecode\"] = self.fromStationTelecode\n        data[\"toStationTelecode\"] = self.toStationTelecode\n        data[\"leftTicket\"] = self.leftTicket\n        data[\"purpose_codes\"] = \"ADULT\"\n        data[\"_json_att\"] = \"\"\n        return data\n\n    def conversion_int(self, str):\n        return int(str)\n\n    def sendGetQueueCountAsync(self):\n        \"\"\"\n        \u8bf7\u6c42\u6392\u961f\u63a5\u53e3\n        :return:\n        \"\"\"\n        urls = self.session.urls[\"getQueueCountAsync\"]\n        data = self.data_par()\n        getQueueCountAsyncResult = self.session.httpClint.send(urls, data)\n        if getQueueCountAsyncResult.get(\"status\", False) and getQueueCountAsyncResult.get(\"data\", False):\n            if \"status\" in getQueueCountAsyncResult and getQueueCountAsyncResult[\"status\"] is True:\n                if \"countT\" in getQueueCountAsyncResult[\"data\"]:\n                    ticket_data = getQueueCountAsyncResult[\"data\"][\"ticket\"]\n                    ticket_split = sum(map(self.conversion_int, ticket_data.split(\",\"))) if ticket_data.find(\n                        \",\") != -1 else ticket_data\n                    if int(ticket_split) is 0:\n                        # \u589e\u52a0\u4f59\u7968\u6570\u4e3a0\u65f6\uff0c\u5c06\u8f66\u6b21\u52a0\u5165\u5c0f\u9ed1\u5c4b\n                        wrapcache.set(key=self.train_no, value=datetime.datetime.now(),\n                                      timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n                        print(f\"\u6392\u961f\u5931\u8d25\uff0c\u5f53\u524d\u4f59\u7968\u6570\u4e3a{ticket_split}\u5f20\")\n                        return\n                    print(u\"\u6392\u961f\u6210\u529f, \u5f53\u524d\u4f59\u7968\u8fd8\u5269\u4f59: {0} \u5f20\".format(ticket_split))\n                    c = confirmSingleForQueueAsys(session=self.session,\n                                                  passengerTicketStr=self.passengerTicketStr,\n                                                  oldPassengerStr=self.oldPassengerStr,\n                                                  result=self.result,)\n                    print(u\"\u9a8c\u8bc1\u7801\u63d0\u4ea4\u5b89\u5168\u671f\uff0c\u7b49\u5f85{}MS\".format(self.ifShowPassCodeTime))\n                    time.sleep(self.ifShowPassCodeTime)\n                    c.sendConfirmSingleForQueueAsys()\n                else:\n                    print(u\"\u6392\u961f\u53d1\u73b0\u672a\u77e5\u9519\u8bef{0}\uff0c\u5c06\u6b64\u5217\u8f66 {1}\u52a0\u5165\u5c0f\u9ed1\u5c4b\".format(getQueueCountAsyncResult, self.train_no))\n                    wrapcache.set(key=self.train_no, value=datetime.datetime.now(),\n                                  timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n            elif \"messages\" in getQueueCountAsyncResult and getQueueCountAsyncResult[\"messages\"]:\n                print(u\"\u6392\u961f\u5f02\u5e38\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{0}, \u5c06\u6b64\u5217\u8f66 {1}\u52a0\u5165\u5c0f\u9ed1\u5c4b\".format(getQueueCountAsyncResult[\"messages\"][0], self.train_no))\n                wrapcache.set(key=self.train_no, value=datetime.datetime.now(),\n                              timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n            else:\n                if \"validateMessages\" in getQueueCountAsyncResult and getQueueCountAsyncResult[\"validateMessages\"]:\n                    print(str(getQueueCountAsyncResult[\"validateMessages\"]))\n\n\n\n", "inter/LoginAysnSuggest.py": "# coding=utf-8\nfrom config.urlConf import urls\n\n\ndef loginAysnSuggest(session, username, password):\n    \"\"\"\n    \u767b\u5f55\u63a5\u53e3\n    ps: \u4e0d\u9700\u8981\u9a8c\u8bc1\u7801\n    :return:\n    \"\"\"\n    loginAysnSuggestUrls = urls.get(\"loginAysnSuggest\")\n    data = {\n        \"loginUserDTO.user_name\": username,\n        \"userDTO.password\":\tpassword\n    }\n    loginAysnSuggestRsp = session.httpClint.send(urls=loginAysnSuggestUrls, data=data)\n    if loginAysnSuggestRsp and loginAysnSuggestRsp.get(\"httpstatus\") is 200 and loginAysnSuggestRsp.get(\"data\", {}).get(\"loginCheck\") == \"Y\":\n        print(u\"\u767b\u5f55\u6210\u529f\")\n    else:\n        print(u\"\u767b\u5f55\u5931\u8d25, {0} {1}\".format(\"\".join(loginAysnSuggestRsp.get(\"messages\")), loginAysnSuggestRsp.get(\"validateMessages\")))\n", "inter/LiftTicketInit.py": "# coding=utf-8\nimport re\n\n\nclass liftTicketInit:\n    def __init__(self, session):\n        self.session = session\n\n    def reqLiftTicketInit(self):\n        \"\"\"\n        \u8bf7\u6c42\u62a2\u7968\u9875\u9762\n        :return:\n        \"\"\"\n        urls = self.session.urls[\"left_ticket_init\"]\n        # \u83b7\u53d6\u521d\u59cb\u5316\u7684\u7ed3\u679c\n        result = self.session.httpClint.send(urls)\n        # \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u51faCLeftTicketUrl\u7684\u503c\n        matchObj = re.search('var CLeftTicketUrl = \\'(.*)\\'', result, re.M|re.I);\n        if matchObj:\n            # \u5982\u679c\u6709\u503c\uff0c\u66ff\u6362queryUrl\n            self.session.queryUrl = matchObj.group(1)\n        return {\n            \"status\": True\n        }\n", "inter/ChechFace.py": "import datetime\nimport urllib\nfrom collections import OrderedDict\nfrom config.urlConf import urls\nimport TickerConfig\nfrom inter.GetSuccessRate import getSuccessRate\nfrom myException.ticketConfigException import ticketConfigException\nimport wrapcache\n\n\nclass chechFace:\n    def __init__(self, selectObj, secretList, train_no):\n        \"\"\"\n        \u4eba\u8138\u8bc6\u522b\n        \"\"\"\n        self.secretList = secretList\n        self.session = selectObj\n        self.train_no = train_no\n\n    def data_apr(self):\n        \"\"\"\n        secretList\t9vqa9%2B%2F%2Fsdozmm22hpSeDTGqRUwSuA2D0r%2BmU%2BLZj7MK7CDuf5Ep1xpxl4Dyxfmoah%2BaB9TZSesU%0AkxBbo5oNgR1vqMfvq66VP0T7tpQtH%2BbVGBz1FolZG8jDD%2FHqnz%2FnvdBP416Og6WGS14O%2F3iBSwT8%0AkRPsNF0Vq0U082g0tlJtP%2BPn7TzW3z7TDCceMJIjFcfEOA%2BW%2BuK%2Bpy6jCQMv0TmlkXf5aKcGnE02%0APuv4I8nF%2BOWjWzv9CrJyiCZiWaXd%2Bi7p69V3a9dhF787UgS660%2BqKRFB4RLwAfic3MkAlfpGWhMY%0ACfARVQ%3D%3D#O|\n        _json_att\n        \u5019\u8865\u4e00\u6b21\u53ea\u80fd\u8865\u4e00\u4e2a\u5ea7\u4f4d\uff0c\u9ed8\u8ba4\u53d6TICKET_TYPE\u7b2c\u4e00\u4e2a\n        :return:\n        \"\"\"\n        ticker = TickerConfig.PASSENGER_TICKER_STR.get(TickerConfig.SET_TYPE[0])\n        data = OrderedDict()\n        data[\"secretList\"] = f\"{self.secretList}#{ticker}|\"\n        data[\"_json_att\"] = \"\"\n        return data\n\n    def sendChechFace(self):\n        chechFaceRsp = self.session.httpClint.send(urls.get(\"chechFace\"), self.data_apr())\n        if not chechFaceRsp.get(\"status\"):\n            print(\"\".join(chechFaceRsp.get(\"messages\")) or chechFaceRsp.get(\"validateMessages\"))\n            wrapcache.set(key=f\"hb{self.train_no}\", value=datetime.datetime.now(),\n                          timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n            return\n        data = chechFaceRsp[\"data\"]\n        if not data.get(\"face_flag\"):\n            print(\"\".join(chechFaceRsp.get(\"messages\")) or chechFaceRsp.get(\"validateMessages\"))\n            if data.get(\"face_check_code\") == \"14\":\n                \"\"\"\n                \u672a\u901a\u8fc7\u4eba\u8138\u6838\u9a8c\n                \"\"\"\n                raise ticketConfigException(\"\u901a\u8fc7\u4eba\u8bc1\u4e00\u81f4\u6027\u6838\u9a8c\u7684\u7528\u6237\u53ca\u6fc0\u6d3b\u7684\u201c\u94c1\u8def\u7545\u884c\u201d\u4f1a\u5458\u53ef\u4ee5\u63d0\u4ea4\u5019\u8865\u9700\u6c42\uff0c\u8bf7\u60a8\u6309\u7167\u64cd\u4f5c\u8bf4\u660e\u5728\u94c1\u8def12306app.\u4e0a\u5b8c\u6210\u4eba\u8bc1\u6838\u9a8c\")\n            elif data.get(\"face_check_code\") in [\"12\", \"02\"]:\n                \"\"\"\n                \u7cfb\u7edf\u5fd9\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01\n                \"\"\"\n                print(\"\u7cfb\u7edf\u5fd9\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01\")\n                wrapcache.set(key=f\"hb{self.train_no}\", value=datetime.datetime.now(),\n                              timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n            elif data.get(\"face_check_code\") in [\"03\", \"13\"]:\n                \"\"\"\n                \u8bc1\u4ef6\u4fe1\u606f\u5ba1\u6838\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u6240\u586b\u5199\u7684\u8eab\u4efd\u4fe1\u606f\u5185\u5bb9\u4e0e\u539f\u8bc1\u4ef6\u662f\u5426\u4e00\u81f4\u3002\n                \"\"\"\n                raise ticketConfigException(\"\u8bc1\u4ef6\u4fe1\u606f\u5ba1\u6838\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u6240\u586b\u5199\u7684\u8eab\u4efd\u4fe1\u606f\u5185\u5bb9\u4e0e\u539f\u8bc1\u4ef6\u662f\u5426\u4e00\u81f4\u3002\")\n            elif data.get(\"face_check_code\") in [\"01\", \"11\"]:\n                \"\"\"\n                \u8bc1\u4ef6\u4fe1\u606f\u6b63\u5728\u5ba1\u6838\u4e2d\uff0c\u8bf7\u60a8\u8010\u5fc3\u7b49\u5f85\uff0c\u5ba1\u6838\u901a\u8fc7\u540e\u53ef\u7ee7\u7eed\u5b8c\u6210\u5019\u8865\u64cd\u4f5c\u3002\n                \"\"\"\n                print(\"\u8bc1\u4ef6\u4fe1\u606f\u6b63\u5728\u5ba1\u6838\u4e2d\uff0c\u8bf7\u60a8\u8010\u5fc3\u7b49\u5f85\uff0c\u5ba1\u6838\u901a\u8fc7\u540e\u53ef\u7ee7\u7eed\u5b8c\u6210\u5019\u8865\u64cd\u4f5c\u3002\")\n                wrapcache.set(key=f\"hb{self.train_no}\", value=datetime.datetime.now(),\n                              timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n        g = getSuccessRate(self.session, self.secretList)\n        g.sendSuccessRate()\n", "inter/GetRepeatSubmitToken.py": "# coding=utf-8\nimport json\nimport re\n\n\nclass getRepeatSubmitToken:\n    def __init__(self, session):\n        self.session = session\n\n    def sendGetRepeatSubmitToken(self):\n        \"\"\"\n        \u83b7\u53d6\u63d0\u4ea4\u8f66\u7968\u8bf7\u6c42token\n        :return: token\n        \"\"\"\n        initdc_url = self.session.urls[\"initdc_url\"]\n        initdc_result = self.session.httpClint.send(initdc_url, )\n        token_name = re.compile(r\"var globalRepeatSubmitToken = '(\\S+)'\")\n        ticketInfoForPassengerForm_name = re.compile(r'var ticketInfoForPassengerForm=(\\{.+\\})?')\n        order_request_params_name = re.compile(r'var orderRequestDTO=(\\{.+\\})?')\n        token = re.search(token_name, initdc_result).group(1)\n        re_tfpf = re.findall(ticketInfoForPassengerForm_name, initdc_result)\n        re_orp = re.findall(order_request_params_name, initdc_result)\n        if re_tfpf:\n            ticketInfoForPassengerForm = json.loads(re_tfpf[0].replace(\"'\", '\"'))\n        else:\n            ticketInfoForPassengerForm = \"\"\n        if re_orp:\n            order_request_params = json.loads(re_orp[0].replace(\"'\", '\"'))\n        else:\n            order_request_params = \"\"\n        return {\n            \"token\": token,\n            \"ticketInfoForPassengerForm\": ticketInfoForPassengerForm,\n            \"order_request_params\": order_request_params,\n            \"session\": self.session\n        }", "inter/Query.py": "# coding=utf-8\nimport copy\nimport random\nimport wrapcache\nfrom config import urlConf\nfrom config.TicketEnmu import ticket\nfrom myUrllib.httpUtils import HTTPClient\nfrom config.configCommon import seat_conf_2\nimport TickerConfig\n\n\nclass query:\n    \"\"\"\n    \u67e5\u8be2\u63a5\u53e3\n    \"\"\"\n\n    def __init__(self, selectObj, from_station, to_station, from_station_h, to_station_h, _station_seat, station_trains,\n                 ticke_peoples_num, station_dates=None, ):\n        self.session = selectObj\n        self.httpClint = HTTPClient(TickerConfig.IS_PROXY)\n        self.httpClint.set_cookies(self.session.cookies)\n        self.urls = urlConf.urls\n        self.from_station = from_station\n        self.to_station = to_station\n        self.from_station_h = from_station_h\n        self.to_station_h = to_station_h\n        self.station_trains = station_trains\n        self._station_seat = _station_seat if isinstance(_station_seat, list) else list(_station_seat)\n        self.station_dates = station_dates if isinstance(station_dates, list) else list(station_dates)\n        self.ticket_black_list = dict()\n        self.ticke_peoples_num = ticke_peoples_num\n\n    def station_seat(self, index):\n        \"\"\"\n        \u83b7\u53d6\u8f66\u7968\u5bf9\u5e94\u5750\u5e2d\n        :return:\n        \"\"\"\n        seat = {'\u5546\u52a1\u5ea7': 32,\n                '\u4e00\u7b49\u5ea7': 31,\n                '\u4e8c\u7b49\u5ea7': 30,\n                '\u7279\u7b49\u5ea7': 25,\n                '\u8f6f\u5367': 23,\n                '\u786c\u5367': 28,\n                '\u786c\u5ea7': 29,\n                '\u65e0\u5ea7': 26,\n                '\u52a8\u5367': 33,\n                }\n        return seat[index]\n\n    def check_is_need_train(self, ticket_info):\n        \"\"\"\n        \u5224\u65ad\u8f66\u6b21\u662f\u5426\u4e3a\u60f3\u8981\u7684\u8f66\u6b21\uff0c\u5982\u679cticket_info\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c31\u4e0d\u6821\u9a8c\u8f66\u6b21\uff0c\u76f4\u63a5\u8fd4\u56deTrue\n        :param ticket_info:\n        :return:\n        \"\"\"\n        if self.station_dates and self.station_trains:\n            return ticket_info[3] in self.station_trains\n        else:\n            return True\n\n    def sendQuery(self):\n        \"\"\"\n        \u67e5\u8be2\n        :return:\n        \"\"\"\n        if TickerConfig.IS_CDN == 1 and self.session.cdn_list:\n            self.httpClint.cdn = self.session.cdn_list[random.randint(4, len(self.session.cdn_list) - 1)]\n        for station_date in self.station_dates:\n            select_url = copy.copy(self.urls[\"select_url\"])\n            select_url[\"req_url\"] = select_url[\"req_url\"].format(station_date, self.from_station, self.to_station,\n                                                                 self.session.queryUrl)\n            station_ticket = self.httpClint.send(select_url)\n            value = station_ticket.get(\"data\", \"\")\n            if not value:\n                print(u'{0}-{1} \u8f66\u6b21\u5750\u5e2d\u67e5\u8be2\u4e3a\u7a7a\uff0c\u67e5\u8be2url: https://kyfw.12306.cn{2}, \u53ef\u4ee5\u624b\u52a8\u67e5\u8be2\u662f\u5426\u6709\u7968'.format(\n                    self.from_station_h,\n                    self.to_station_h,\n                    select_url[\"req_url\"]))\n            else:\n                result = value.get('result', [])\n                if result:\n                    for i in value['result']:\n                        ticket_info = i.split('|')\n                        if self.session.flag:\n                            print(f\"\u8f66\u6b21\uff1a{ticket_info[3]} \u51fa\u53d1\u7ad9\uff1a{self.from_station_h} \u5230\u8fbe\u7ad9\uff1a{self.to_station_h} \u5386\u65f6\uff1a{ticket_info[10]}\"\n                                  f\" \u5546\u52a1/\u7279\u7b49\u5ea7\uff1a{ticket_info[32] or '--'}\"\n                                  f\" \u4e00\u7b49\u5ea7\uff1a{ticket_info[31] or '--'}\"\n                                  f\" \u4e8c\u7b49\u5ea7\uff1a{ticket_info[30] or '--'}\"\n                                  f\" \u52a8\u5367\uff1a{ticket_info[33] or '--'}\"\n                                  f\" \u786c\u5367\uff1a{ticket_info[28] or '--'}\"\n                                  f\" \u8f6f\u5ea7\uff1a{ticket_info[23] or '--'}\"\n                                  f\" \u786c\u5ea7\uff1a{ticket_info[29] or '--'}\"\n                                  f\" \u65e0\u5ea7\uff1a{ticket_info[26] or '--'}\"\n                                  f\" {ticket_info[1] or '--'}\")\n                        if ticket_info[1] == \"\u9884\u8ba2\" and self.check_is_need_train(ticket_info):  # \u7b5b\u9009\u672a\u5728\u5f00\u59cb\u65f6\u95f4\u5185\u7684\u8f66\u6b21\n                            for j in self._station_seat:\n                                is_ticket_pass = ticket_info[j]\n                                if ticket_info[11] == \"Y\":\n                                    if is_ticket_pass != '' and is_ticket_pass != '\u65e0' and is_ticket_pass != '*':  # \u8fc7\u6ee4\u6709\u6548\u76ee\u6807\u8f66\u6b21\n                                        secretStr = ticket_info[0]\n                                        train_no = ticket_info[2]\n                                        query_from_station_name = ticket_info[6]\n                                        query_to_station_name = ticket_info[7]\n                                        train_location = ticket_info[15]\n                                        stationTrainCode = ticket_info[3]\n                                        leftTicket = ticket_info[12]\n                                        start_time = ticket_info[8]\n                                        arrival_time = ticket_info[9]\n                                        distance_time = ticket_info[10]\n                                        print(start_time, arrival_time, distance_time)\n                                        seat = j\n                                        try:\n                                            ticket_num = int(ticket_info[j])\n                                        except ValueError:\n                                            ticket_num = \"\u6709\"\n                                        print(u'\u8f66\u6b21: {0} \u59cb\u53d1\u8f66\u7ad9: {1} \u7ec8\u70b9\u7ad9: {2} {3}: {4}'.format(ticket_info[3],\n                                                                                            self.from_station_h,\n                                                                                            self.to_station_h,\n                                                                                            seat_conf_2[j],\n                                                                                            ticket_num))\n                                        if seat_conf_2[j] == \"\u65e0\u5ea7\" and ticket_info[3][0] in [\"G\", \"D\", \"C\"]:\n                                            seat = 30  # GD\u5f00\u5934\u7684\u65e0\u5ea7\u76f4\u63a5\u5f3a\u5236\u6539\u4e3a\u4e8c\u7b49\u5ea7\u8f66\u6b21\n                                        if wrapcache.get(train_no):\n                                            print(ticket.QUERY_IN_BLACK_LIST.format(train_no))\n                                            continue\n                                        else:\n                                            if ticket_num != \"\u6709\" and self.ticke_peoples_num > ticket_num:\n                                                if TickerConfig.IS_MORE_TICKET:\n                                                    print(\n                                                        u\"\u4f59\u7968\u6570\u5c0f\u4e8e\u4e58\u8f66\u4eba\u6570\uff0c\u5f53\u524d\u4f59\u7968\u6570: {}, \u5220\u51cf\u4eba\u8f66\u4eba\u6570\u5230: {}\".format(ticket_num, ticket_num))\n                                                    is_more_ticket_num = ticket_num\n                                                else:\n                                                    print(u\"\u4f59\u7968\u6570\u5c0f\u4e8e\u4e58\u8f66\u4eba\u6570\uff0c\u5f53\u524d\u8bbe\u7f6e\u4e0d\u63d0\u4ea4\uff0c\u653e\u5f03\u6b64\u6b21\u63d0\u4ea4\u673a\u4f1a\")\n                                                    continue\n                                            else:\n                                                print(u\"\u8bbe\u7f6e\u4e58\u8f66\u4eba\u6570\u4e3a: {}\".format(self.ticke_peoples_num))\n                                                is_more_ticket_num = self.ticke_peoples_num\n                                            print(ticket.QUERY_C)\n                                            return {\n                                                \"secretStr\": secretStr,\n                                                \"train_no\": train_no,\n                                                \"stationTrainCode\": stationTrainCode,\n                                                \"train_date\": station_date,\n                                                \"query_from_station_name\": query_from_station_name,\n                                                \"query_to_station_name\": query_to_station_name,\n                                                \"seat\": seat,\n                                                \"leftTicket\": leftTicket,\n                                                \"train_location\": train_location,\n                                                \"code\": ticket.SUCCESS_CODE,\n                                                \"is_more_ticket_num\": is_more_ticket_num,\n                                                \"cdn\": self.httpClint.cdn,\n                                                \"status\": True,\n                                            }\n                                elif is_ticket_pass == '\u65e0' and ticket_info[37] == \"1\" and TickerConfig.TICKET_TYPE is 2:\n                                    \"\"\"\n                                    is_ticket_pass\u5982\u679c\u6709\u522b\u7684\u663e\u793a\uff0c\u4f46\u662f\u53ef\u4ee5\u5019\u8865\uff0c\u53ef\u4ee5\u63d0issues\u63d0\u51fa\u6765\uff0c\u9644\u4e0aquery log\uff0c\u6211\u5c06\u6dfb\u52a0\u4e0a\n                                    \u5224\u65ad\u8f66\u6b21\u662f\u5426\u53ef\u4ee5\u5019\u8865\n                                    \u76ee\u524d\u7684\u5019\u8865\u673a\u5236\u662f\u53ea\u8981\u4e00\u6709\u5019\u8865\u4f4d\u7f6e\uff0c\u7acb\u9a6c\u63d0\u4ea4\u5019\u8865\n                                    \"\"\"\n                                    # \u5982\u679c\u6700\u540e\u4e00\u4f4d\u4e3a1\uff0c\u5219\u662f\u53ef\u4ee5\u5019\u8865\u7684\uff0c\u4e0d\u77e5\u9053\u8fd9\u4e9b\u6b63\u786e\u561b\uff1f\n                                    nate = list(ticket_info[38])\n                                    if wrapcache.get(f\"hb{ticket_info[2]}\"):\n                                        continue\n                                    for set_type in TickerConfig.SET_TYPE:\n                                        if TickerConfig.PASSENGER_TICKER_STR[set_type] not in nate:\n                                            if ticket_info[3][0] in [\"G\", \"D\", \"C\"] and set_type in [\"\u4e00\u7b49\u5ea7\", \"\u7279\u7b49\u5ea7\", \"\u4e8c\u7b49\u5ea7\", \"\u5546\u52a1\u5ea7\", \"\u65e0\u5ea7\"]:\n                                                return {\n                                                    \"secretList\": ticket_info[0],\n                                                    \"seat\": [set_type],\n                                                    \"train_no\": ticket_info[2],\n                                                    \"status\": True,\n                                                    \"cdn\": self.httpClint.cdn,\n                                                }\n                                            elif ticket_info[3][0] in [\"T\", \"Z\", \"K\"] and set_type in [\"\u786c\u5367\", \"\u786c\u5ea7\", \"\u65e0\u5ea7\", \"\u8f6f\u5ea7\", \"\u8f6f\u5367\"]:\n                                                return {\n                                                    \"secretList\": ticket_info[0],\n                                                    \"seat\": [set_type],\n                                                    \"train_no\": ticket_info[2],\n                                                    \"status\": True,\n                                                    \"cdn\": self.httpClint.cdn,\n                                                }\n                else:\n                    print(u\"\u8f66\u6b21\u914d\u7f6e\u4fe1\u606f\u6709\u8bef\uff0c\u6216\u8005\u8fd4\u56de\u6570\u636e\u5f02\u5e38\uff0c\u8bf7\u68c0\u67e5 {}\".format(station_ticket))\n        self.session.flag = False\n        return {\"code\": ticket.FAIL_CODE, \"status\": False, \"cdn\": self.httpClint.cdn, }\n\n\nif __name__ == \"__main__\":\n    q = query()\n", "inter/GetSuccessRate.py": "from collections import OrderedDict\n\n\nfrom config.urlConf import urls\nimport TickerConfig\nfrom inter.SubmitOrderRequest import submitOrderRequestByAfterNate\n\n\nclass getSuccessRate:\n    def __init__(self, session, secretList):\n        \"\"\"\n        \u83b7\u53d6\u6210\u529f\u4fe1\u606f\n        \"\"\"\n        self.secretList = secretList\n        self.session = session\n\n    def data_apr(self):\n        \"\"\"\n        secretList\t9vqa9%2B%2F%2Fsdozmm22hpSeDTGqRUwSuA2D0r%2BmU%2BLZj7MK7CDuf5Ep1xpxl4Dyxfmoah%2BaB9TZSesU%0AkxBbo5oNgR1vqMfvq66VP0T7tpQtH%2BbVGBz1FolZG8jDD%2FHqnz%2FnvdBP416Og6WGS14O%2F3iBSwT8%0AkRPsNF0Vq0U082g0tlJtP%2BPn7TzW3z7TDCceMJIjFcfEOA%2BW%2BuK%2Bpy6jCQMv0TmlkXf5aKcGnE02%0APuv4I8nF%2BOWjWzv9CrJyiCZiWaXd%2Bi7p69V3a9dhF787UgS660%2BqKRFB4RLwAfic3MkAlfpGWhMY%0ACfARVQ%3D%3D#O\n        _json_att\n        \u5019\u8865\u4e00\u6b21\u53ea\u80fd\u8865\u4e00\u4e2a\u5ea7\u4f4d\uff0c\u9ed8\u8ba4\u53d6TICKET_TYPE\u7b2c\u4e00\u4e2a\n        :return:\n        \"\"\"\n\n        ticker = TickerConfig.PASSENGER_TICKER_STR.get(TickerConfig.SET_TYPE[0])\n        data = OrderedDict()\n        data[\"successSecret\"] = f\"{self.secretList}#{ticker}\"\n        data[\"_json_att\"] = \"\"\n        return data\n\n    def sendSuccessRate(self):\n        successRateRsp = self.session.httpClint.send(urls.get(\"getSuccessRate\"), self.data_apr())\n        if not successRateRsp.get(\"status\"):\n            print(\"\".join(successRateRsp.get(\"messages\")) or successRateRsp.get(\"validateMessages\"))\n            return\n        flag = successRateRsp.get(\"data\", {}).get(\"flag\")[0]\n        train_no = flag.get(\"train_no\")\n        print(f\"\u51c6\u5907\u63d0\u4ea4\u5019\u8865\u8ba2\u5355\uff0c{flag.get('info')}\")\n        submit = submitOrderRequestByAfterNate(self.session, self.secretList, train_no)\n        submit.sendSubmitOrderRequest()\n\n", "inter/PassengerInitApi.py": "import datetime\nimport wrapcache\nimport TickerConfig\nfrom config.urlConf import urls\nfrom inter.ConfirmHB import confirmHB\n\n\nclass passengerInitApi:\n    def __init__(self, session, secretList, tickerNo):\n        \"\"\"\n        \u83b7\u53d6\u5019\u8865\u4fe1\u606f\n        \"\"\"\n        self.secretList = secretList\n        self.tickerNo = tickerNo\n        self.session = session\n\n    def sendPassengerInitApi(self):\n        passengerInitApiRsp = self.session.httpClint.send(urls.get(\"passengerInitApi\"))\n        if not passengerInitApiRsp.get(\"status\"):\n            print(\"\".join(passengerInitApiRsp.get(\"messages\")) or passengerInitApiRsp.get(\"validateMessages\"))\n            return\n        data = passengerInitApiRsp.get(\"data\", {})\n        jzdhDateE = data.get(\"jzdhDateE\")\n        if not data.get(\"jzdhHourE\"):\n            wrapcache.set(key=f\"hb{self.tickerNo}\", value=datetime.datetime.now(),\n                          timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n            print(f\"\u83b7\u53d6\u5f53\u524d\u5019\u8865\u65e5\u671f\u5931\u8d25\uff0c\u539f\u56e0: {data.get('jzdhHourE')}\")\n            return\n        jzdhHourE = data.get(\"jzdhHourE\").replace(\":\", \"#\")\n        jzdhDate = f\"{jzdhDateE}#{jzdhHourE}\"\n        print(f\"\u5f53\u524d\u5019\u8865\u65e5\u671f\u4e3a:{jzdhDateE} {jzdhHourE}\")\n        confirm = confirmHB(self.secretList, self.session, self.tickerNo, jzdhDate)\n        confirm.sendChechFace()\n\n\n\n\n", "inter/CheckRandCodeAnsyn.py": "# coding=utf-8\nclass checkRandCodeAnsyn:\n    def __init__(self, session, randCode, token):\n        self.session = session\n        self.randCode = randCode\n        self.token = token\n\n    def data_par(self):\n        \"\"\"\n        :return:\n        \"\"\"\n        data = {\n            \"randCode\": self.randCode,\n            \"rand\": \"randp\",\n            \"_json_att\": \"\",\n            \"REPEAT_SUBMIT_TOKEN\": self.token\n        }\n        return data\n\n    def sendCheckRandCodeAnsyn(self):\n        \"\"\"\n        \u4e0b\u5355\u9a8c\u8bc1\u7801\u8bc6\u522b\n        :return:\n        \"\"\"\n        checkRandCodeAnsynUrl = self.session.urls[\"checkRandCodeAnsyn\"]\n        fresult = self.session.httpClint.send(checkRandCodeAnsynUrl, self.data_par())  # \u6821\u9a8c\u9a8c\u8bc1\u7801\u662f\u5426\u6b63\u786e\n        return fresult['data']['msg']", "inter/AutoSubmitOrderRequest.py": "# coding=utf-8\nimport urllib\nfrom collections import OrderedDict\n\nfrom config.TicketEnmu import ticket\nfrom inter.CheckRandCodeAnsyn import checkRandCodeAnsyn\nfrom inter.GetQueueCountAsync import getQueueCountAsync\nfrom inter.GetRandCode import getRandCode\nimport TickerConfig\n\n\nclass autoSubmitOrderRequest:\n    \"\"\"\n    \u5feb\u8bfb\u63d0\u4ea4\u8ba2\u5355\u901a\u9053\n    \"\"\"\n    def __init__(self, selectObj,\n                 secretStr,\n                 train_date,\n                 query_from_station_name,\n                 query_to_station_name,\n                 passengerTicketStr,\n                 oldPassengerStr,\n                 train_no,\n                 stationTrainCode,\n                 leftTicket,\n                 set_type,):\n        self.set_type = set_type\n        try:\n            self.secretStr = urllib.unquote(secretStr)\n        except AttributeError:\n            self.secretStr = urllib.parse.unquote(secretStr)\n        self.train_date = train_date\n        self.query_from_station_name = query_from_station_name\n        self.query_to_station_name = query_to_station_name\n        self.passengerTicketStr = passengerTicketStr.rstrip(\"_{0}\".format(self.set_type))\n        self.oldPassengerStr = oldPassengerStr\n        self.session = selectObj\n        self.train_no = train_no\n        self.stationTrainCode = stationTrainCode\n        self.leftTicket = leftTicket\n\n    def data_par(self):\n        \"\"\"\n        \u53c2\u6570\u7ed3\u6784\n        \u81ea\u52a8\u63d0\u4ea4\u4ee3\u7801\u63a5\u53e3-autoSubmitOrderRequest\n            - \u5b57\u6bb5\u8bf4\u660e\n                - secretStr \u8f66\u7968\u4ee3\u7801\n                - train_date \u4e58\u8f66\u65e5\u671f\n                - tour_flag \u4e58\u8f66\u7c7b\u578b\n                - purpose_codes \u5b66\u751f\u8fd8\u662f\u6210\u4eba\n                - query_from_station_name \u8d77\u59cb\u8f66\u7ad9\n                - query_to_station_name \u7ed3\u675f\u8f66\u7ad9\n                - cancel_flag \u9ed8\u8ba42\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u5e72\u561b\u7684\n                - bed_level_order_num  000000000000000000000000000000\n                - passengerTicketStr   \u4e58\u5ba2\u4e58\u8f66\u4ee3\u7801\n                - oldPassengerStr  \u4e58\u5ba2\u7f16\u53f7\u4ee3\u7801\n        :return:\n        \"\"\"\n        data = OrderedDict()\n        data[\"secretStr\"] = self.secretStr\n        data[\"train_date\"] = self.train_date\n        data[\"tour_flag\"] = \"dc\"\n        data[\"purpose_codes\"] = \"ADULT\"\n        data[\"query_from_station_name\"] = TickerConfig.FROM_STATION\n        data[\"query_to_station_name\"] = TickerConfig.TO_STATION\n        data[\"cancel_flag\"] = 2\n        data[\"bed_level_order_num\"] = \"000000000000000000000000000000\"\n        data[\"passengerTicketStr\"] = self.passengerTicketStr\n        data[\"oldPassengerStr\"] = self.oldPassengerStr\n        return data\n\n    def sendAutoSubmitOrderRequest(self):\n        \"\"\"\n        \u8bf7\u6c42\u4e0b\u5355\u63a5\u53e3\n        :return:\n        \"\"\"\n        urls = self.session.urls[\"autoSubmitOrderRequest\"]\n        data = self.data_par()\n        autoSubmitOrderRequestResult = self.session.httpClint.send(urls, data)\n        if autoSubmitOrderRequestResult and \\\n                autoSubmitOrderRequestResult.get(\"status\", False) and\\\n                autoSubmitOrderRequestResult.get(\"httpstatus\", False) == 200:\n            requestResultData = autoSubmitOrderRequestResult.get(\"data\", {})\n            if requestResultData:\n                result = requestResultData.get(\"result\", \"\")\n                ifShowPassCode = requestResultData.get(\"ifShowPassCode\", \"N\")\n                ifShowPassCodeTime = int(requestResultData.get(\"ifShowPassCodeTime\", \"1000\")) / float(1000)\n                print(ticket.AUTO_SUBMIT_ORDER_REQUEST_C)\n                g = getQueueCountAsync(session=self.session,\n                                       train_no=self.train_no,\n                                       stationTrainCode=self.stationTrainCode,\n                                       fromStationTelecode=self.query_from_station_name,\n                                       toStationTelecode=self.query_to_station_name,\n                                       leftTicket=self.leftTicket,\n                                       set_type=self.set_type,\n                                       users=len(TickerConfig.TICKET_PEOPLES),\n                                       station_dates=self.train_date,\n                                       passengerTicketStr=self.passengerTicketStr,\n                                       oldPassengerStr=self.oldPassengerStr,\n                                       result=result,\n                                       ifShowPassCodeTime=ifShowPassCodeTime,\n                                       )\n                if ifShowPassCode == \"Y\":  # \u5982\u679c\u9700\u8981\u9a8c\u8bc1\u7801\n                    print(u\"\u9700\u8981\u9a8c\u8bc1\u7801\")\n                    print(u\"\u6b63\u5728\u4f7f\u7528\u81ea\u52a8\u8bc6\u522b\u9a8c\u8bc1\u7801\u529f\u80fd\")\n                    for i in range(3):\n                        randCode = getRandCode(is_auto_code=True, auto_code_type=2)\n                        checkcode = checkRandCodeAnsyn(self.session, randCode, \"\")\n                        if checkcode == 'TRUE':\n                            print(u\"\u9a8c\u8bc1\u7801\u901a\u8fc7,\u6b63\u5728\u63d0\u4ea4\u8ba2\u5355\")\n                            data['randCode'] = randCode\n                            break\n                        else:\n                            print (u\"\u9a8c\u8bc1\u7801\u6709\u8bef, {0}\u6b21\u5c1d\u8bd5\u91cd\u8bd5\".format(i + 1))\n                    print(u\"\u9a8c\u8bc1\u7801\u8d85\u8fc7\u9650\u5b9a\u6b21\u65703\u6b21\uff0c\u653e\u5f03\u6b64\u6b21\u8ba2\u7968\u673a\u4f1a!\")\n                g.sendGetQueueCountAsync()\n        else:\n            print(ticket.AUTO_SUBMIT_ORDER_REQUEST_F)\n            if autoSubmitOrderRequestResult.get(\"messages\", \"\"):\n                print(\"\".join(autoSubmitOrderRequestResult.get(\"messages\", \"\")))\n            elif autoSubmitOrderRequestResult.get(\"validateMessages\", \"\"):\n                print(\"\".join(autoSubmitOrderRequestResult.get(\"validateMessages\", \"\")))\n\n\n", "inter/__init__.py": "", "inter/GetRandCode.py": "# coding=utf-8\nfrom PIL import Image\n\nfrom config.urlConf import urls\nfrom myUrllib.httpUtils import HTTPClient\nfrom verify.localVerifyCode import Verify\nimport TickerConfig\nimport os\n\n\nif TickerConfig.AUTO_CODE_TYPE == 2:\n    v = Verify()\n\n\ndef getRandCode(is_auto_code, auto_code_type, result):\n    \"\"\"\n    \u8bc6\u522b\u9a8c\u8bc1\u7801\n    :return: \u5750\u6807\n    \"\"\"\n    try:\n        if is_auto_code:\n            if auto_code_type == 1:\n                print(u\"\u6253\u7801\u5154\u5df2\u5173\u95ed, \u5982\u9700\u4f7f\u7528\u81ea\u52a8\u8bc6\u522b\uff0c\u8bf7\u4f7f\u7528\u5982\u679c\u5e73\u53f0 auto_code_type == 2\")\n                return\n            elif auto_code_type == 2:\n                Result = v.verify(result)\n                return codexy(Ofset=Result, is_raw_input=False)\n            elif auto_code_type == 3:\n                print(\"\u60a8\u5df2\u8bbe\u7f6e\u4f7f\u7528\u4e91\u6253\u7801\uff0c\u4f46\u662f\u670d\u52a1\u5668\u8d44\u6e90\u6709\u9650\uff0c\u8bf7\u5c3d\u5feb\u6539\u4e3a\u672c\u5730\u6253\u7801\" if \"CAPTCHALOCAL\" not in os.environ else \"\u5df2\u8bbe\u7f6e\u672c\u5730\u6253\u7801\u670d\u52a1\u5668\")\n                http = HTTPClient(0)\n                Result = http.send(urls.get(\"autoVerifyImage\"), {\"imageFile\": result})\n                if Result and Result.get(\"code\") is 0:\n                    return codexy(Ofset=Result.get(\"data\"), is_raw_input=False)\n        else:\n            img = Image.open('./tkcode.png')\n            img.show()\n            return codexy()\n    except Exception as e:\n        print(e)\n\n\ndef codexy(Ofset=None, is_raw_input=True):\n    \"\"\"\n    \u83b7\u53d6\u9a8c\u8bc1\u7801\n    :return: str\n    \"\"\"\n    if is_raw_input:\n        print(u\"\"\"\n            *****************\n            | 1 | 2 | 3 | 4 |\n            *****************\n            | 5 | 6 | 7 | 8 |\n            *****************\n            \"\"\")\n        print(u\"\u9a8c\u8bc1\u7801\u5206\u4e3a8\u4e2a\uff0c\u5bf9\u5e94\u4e0a\u9762\u6570\u5b57\uff0c\u4f8b\u5982\u7b2c\u4e00\u548c\u7b2c\u4e8c\u5f20\uff0c\u8f93\u51651, 2  \u5982\u679c\u5f00\u542fcdn\u67e5\u8be2\u7684\u8bdd\uff0c\u4f1a\u51b2\u6389\u63d0\u793a\uff0c\u76f4\u63a5\u9f20\u6807\u70b9\u51fb\u547d\u4ee4\u884c\u83b7\u53d6\u7126\u70b9\uff0c\u8f93\u5165\u5373\u53ef\uff0c\u4e0d\u8981\u8f93\u5165\u7a7a\u683c\")\n        print(u\"\u5982\u679c\u662flinux\u65e0\u56fe\u5f62\u754c\u9762\uff0c\u8bf7\u4f7f\u7528\u81ea\u52a8\u6253\u7801\uff0cis_auto_code: True\")\n        print(u\"\u5982\u679c\u6ca1\u6709\u5f39\u51fa\u9a8c\u8bc1\u7801\uff0c\u8bf7\u624b\u52a8\u53cc\u51fb\u6839\u76ee\u5f55\u4e0b\u7684tkcode.png\u6587\u4ef6\")\n        Ofset = input(u\"\u8f93\u5165\u5bf9\u5e94\u7684\u9a8c\u8bc1\u7801: \")\n    if isinstance(Ofset, list):\n        select = Ofset\n    else:\n        Ofset = Ofset.replace(\"\uff0c\", \",\")\n        select = Ofset.split(',')\n    post = []\n    offsetsX = 0  # \u9009\u62e9\u7684\u7b54\u6848\u7684left\u503c,\u901a\u8fc7\u6d4f\u89c8\u5668\u70b9\u51fb8\u4e2a\u5c0f\u56fe\u7684\u4e2d\u70b9\u5f97\u5230\u7684,\u8fd9\u6837\u57fa\u672c\u6ca1\u95ee\u9898\n    offsetsY = 0  # \u9009\u62e9\u7684\u7b54\u6848\u7684top\u503c\n    for ofset in select:\n        if ofset == '1':\n            offsetsY = 77\n            offsetsX = 40\n        elif ofset == '2':\n            offsetsY = 77\n            offsetsX = 112\n        elif ofset == '3':\n            offsetsY = 77\n            offsetsX = 184\n        elif ofset == '4':\n            offsetsY = 77\n            offsetsX = 256\n        elif ofset == '5':\n            offsetsY = 149\n            offsetsX = 40\n        elif ofset == '6':\n            offsetsY = 149\n            offsetsX = 112\n        elif ofset == '7':\n            offsetsY = 149\n            offsetsX = 184\n        elif ofset == '8':\n            offsetsY = 149\n            offsetsX = 256\n        else:\n            pass\n        post.append(offsetsX)\n        post.append(offsetsY)\n    randCode = str(post).replace(']', '').replace('[', '').replace(\"'\", '').replace(' ', '')\n    print(u\"\u9a8c\u8bc1\u7801\u8bc6\u522b\u5750\u6807\u4e3a{0}\".format(randCode))\n    return randCode\n", "inter/ConfirmHB.py": "from collections import OrderedDict\nfrom config.urlConf import urls\nimport TickerConfig\nfrom inter.GetQueueCount import queryQueueByAfterNate\n\n\nclass confirmHB:\n    def __init__(self, secretList, session, tickerNo, jzdhDate):\n        \"\"\"\n        \u4eba\u8138\u8bc6\u522b\n        \"\"\"\n        self.secretList = secretList\n        self.session = session\n        self.passengerTicketStrByAfterLate = session.passengerTicketStrByAfterLate\n        self.tickerNo = tickerNo\n        self.jzdhDate = jzdhDate\n\n    def data_apr(self):\n        \"\"\"\n        passengerInfo\t1#XXXX#1#***************77X#bf6ae40d3655ae7eff005ee21d95876b38ab97a8031b464bc2f74a067e3ec957;\n        jzParam\t2019-08-31#19#00\n        hbTrain\t5l000G177230,O#\n        lkParam\n        :return:\n        \"\"\"\n        ticker = TickerConfig.PASSENGER_TICKER_STR.get(TickerConfig.SET_TYPE[0])\n        data = OrderedDict()\n        data[\"passengerInfo\"] = self.passengerTicketStrByAfterLate\n        data[\"jzParam\"] = self.jzdhDate\n        data[\"hbTrain\"] = f\"{self.tickerNo},{ticker}#\"\n        data[\"lkParam\"] = \"\"\n        return data\n\n    def sendChechFace(self):\n        ChechFaceRsp = self.session.httpClint.send(urls.get(\"confirmHB\"), self.data_apr())\n        if not ChechFaceRsp.get(\"status\"):\n            print(\"\".join(ChechFaceRsp.get(\"messages\")) or ChechFaceRsp.get(\"validateMessages\"))\n            return\n        data = ChechFaceRsp.get(\"data\")\n        if not data.get(\"flag\"):\n            print(f\"\u9519\u8bef\u4fe1\u606f\uff1a{data.get('msg')}\")\n            return\n        queue = queryQueueByAfterNate(self.session)\n        queue.sendQueryQueueByAfterNate()\n\n\n\n\n", "inter/GetPassengerDTOs.py": "# coding=utf-8\nimport json\n\nfrom config.TicketEnmu import ticket\nfrom myException.PassengerUserException import PassengerUserException\nimport wrapcache\nimport TickerConfig\n\n\nclass getPassengerDTOs:\n    \"\"\"\n    \u83b7\u53d6\u4e58\u5ba2\u4fe1\u606f\n    :return:\n    \"\"\"\n    def __init__(self, selectObj, ticket_peoples=None, set_type=None, is_more_ticket_num=None):\n        \"\"\"\n        :param session: \u767b\u5f55\u5b9e\u4f8b\n        :param ticket_peoples: \u4e58\u5ba2\n        :param set_type: \u5750\u5e2d\n        \"\"\"\n        if ticket_peoples is None:\n            ticket_peoples = []\n        self.session = selectObj\n        self.ticket_peoples = ticket_peoples\n        self.is_more_ticket_num = is_more_ticket_num\n        self.set_type = set_type\n\n    def sendGetPassengerDTOs(self):\n        getPassengerDTOsResult = self.session.httpClint.send(self.session.urls[\"get_passengerDTOs\"], json.dumps({\"_json_att\": \"\"}))\n        if getPassengerDTOsResult.get(\"data\", False) and getPassengerDTOsResult[\"data\"].get(\"normal_passengers\", False):\n            normal_passengers = getPassengerDTOsResult['data']['normal_passengers']\n            _normal_passenger = [normal_passengers[i] for i in range(len(normal_passengers)) if\n                                 normal_passengers[i][\"passenger_name\"] in self.ticket_peoples]\n            return _normal_passenger if _normal_passenger else [normal_passengers[0]]  # \u5982\u679c\u914d\u7f6e\u4e58\u8f66\u4eba\u6ca1\u6709\u5728\u8d26\u53f7\uff0c\u5219\u9ed8\u8ba4\u8fd4\u56de\u7b2c\u4e00\u4e2a\u7528\u6237\n        else:\n            if getPassengerDTOsResult.get(\"data\", False) and getPassengerDTOsResult['data'].get(\"exMsg\", False):\n                print(getPassengerDTOsResult['data'].get(\"exMsg\", False))\n            elif getPassengerDTOsResult.get('messages', False):\n                print(getPassengerDTOsResult.get('messages', False))\n            else:\n                print(u\"\u8b66\u544a\uff1a\u60a8\u7684\u8d26\u53f7\u53ef\u80fd\u4e70\u7968\u6709\u95ee\u9898\uff0c\u83b7\u53d6\u4e0d\u5230\u8054\u7cfb\u4eba\uff0c\u8bf7\u6d4b\u8bd5\u662f\u5426\u80fd\u6b63\u5e38\u4e0b\u5355\uff0c\u5728\u6361\u6f0f\u6216\u8005\u8d2d\u7968\uff01\uff01\uff01\")\n                print(u\"\u8b66\u544a\uff1a\u60a8\u7684\u8d26\u53f7\u53ef\u80fd\u4e70\u7968\u6709\u95ee\u9898\uff0c\u83b7\u53d6\u4e0d\u5230\u8054\u7cfb\u4eba\uff0c\u8bf7\u6d4b\u8bd5\u662f\u5426\u80fd\u6b63\u5e38\u4e0b\u5355\uff0c\u5728\u6361\u6f0f\u6216\u8005\u8d2d\u7968\uff01\uff01\uff01\")\n                print(u\"\u8b66\u544a\uff1a\u60a8\u7684\u8d26\u53f7\u53ef\u80fd\u4e70\u7968\u6709\u95ee\u9898\uff0c\u83b7\u53d6\u4e0d\u5230\u8054\u7cfb\u4eba\uff0c\u8bf7\u6d4b\u8bd5\u662f\u5426\u80fd\u6b63\u5e38\u4e0b\u5355\uff0c\u5728\u6361\u6f0f\u6216\u8005\u8d2d\u7968\uff01\uff01\uff01\")\n                # raise PassengerUserException(ticket.DTO_NOT_FOUND)\n\n    def getPassengerTicketStr(self, set_type):\n        \"\"\"\n        \u83b7\u53d6getPassengerTicketStr \u63d0\u4ea4\u5bf9\u5e94\u7684\u4ee3\u53f7\u7801\n        :param str: \u5750\u5e2d\n        :return:\n        \"\"\"\n        passengerTicketStr = {\n            '\u4e00\u7b49\u5ea7': 'M',\n            '\u7279\u7b49\u5ea7': 'P',\n            '\u4e8c\u7b49\u5ea7': 'O',\n            '\u5546\u52a1\u5ea7': 9,\n            '\u786c\u5ea7': 1,\n            '\u65e0\u5ea7': 1,\n            '\u8f6f\u5ea7': 2,\n            '\u8f6f\u5367': 4,\n            '\u786c\u5367': 3,\n        }\n        return str(passengerTicketStr[set_type.replace(' ', '')])\n\n    def getPassengerTicketStrListAndOldPassengerStr(self, secretStr, secretList):\n        \"\"\"\n        \u83b7\u53d6\u63d0\u4ea4\u8f66\u6b21\u4eba\u5185\u5bb9\u683c\u5f0f\n        passengerTicketStr\tO,0,1,\u6587\u8d24\u5e73,1,43052419950223XXXX,15618715583,N_O,0,1,\u6881\u654f,1,43052719920118XXXX,,N\n        oldPassengerStr\t\u6587\u8d24\u5e73,1,43052719920118XXXX,1_\u6881\u654f,1,43052719920118XXXX,1\n        ps: \u5982\u679cis_more_ticket\u6253\u5f00\u4e86\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u8bfb\u53d6\u8054\u7cfb\u4eba\u5217\u8868\u91cc\u9762\u524d\u7b26\u5408\u8f66\u6b21\u6570\u91cf\u7684\u524d\u51e0\u4e2a\u8054\u7cfb\u4eba\n        :return:\n        \"\"\"\n        passengerTicketStrList = []\n        oldPassengerStr = []\n        tickers = []\n        set_type = \"\"\n        if wrapcache.get(\"user_info\"):  # \u5982\u679c\u7f13\u5b58\u4e2d\u6709\u8054\u7cfb\u4eba\u65b9\u5f0f\uff0c\u5219\u8bfb\u53d6\u7f13\u5b58\u4e2d\u7684\u8054\u7cfb\u4eba\n            user_info = wrapcache.get(\"user_info\")\n            print(u\"\u4f7f\u7528\u7f13\u5b58\u4e2d\u67e5\u627e\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\")\n        else:\n            user_info = self.sendGetPassengerDTOs()\n            wrapcache.set(\"user_info\", user_info, timeout=9999999)\n        if not user_info:\n            raise PassengerUserException(ticket.DTO_NOT_IN_LIST)\n        if len(user_info) < self.is_more_ticket_num:  # \u5982\u679c\u4e58\u8f66\u4eba\u586b\u9519\u4e86\u5bfc\u81f4\u6ca1\u6709\u8fd9\u4e2a\u4e58\u8f66\u4eba\u7684\u8bdd\uff0c\u53ef\u80fd\u4e58\u8f66\u4eba\u6570\u4f1a\u5c0f\u4e8e\u81ea\u52a8\u4e58\u8f66\u4eba\n            self.is_more_ticket_num = len(user_info)\n        if secretStr:\n            set_type = self.getPassengerTicketStr(self.set_type)\n            if self.is_more_ticket_num is 1:\n                passengerTicketStrList.append(\n                    '0,' + user_info[0]['passenger_type'] + \",\" + user_info[0][\n                        \"passenger_name\"] + \",\" +\n                    user_info[0]['passenger_id_type_code'] + \",\" + user_info[0]['passenger_id_no'] + \",\" +\n                    user_info[0]['mobile_no'] + ',N,' + user_info[0][\"allEncStr\"])\n                oldPassengerStr.append(\n                    user_info[0]['passenger_name'] + \",\" + user_info[0]['passenger_id_type_code'] + \",\" +\n                    user_info[0]['passenger_id_no'] + \",\" + user_info[0]['passenger_type'] + '_')\n            else:\n                for i in range(self.is_more_ticket_num):\n                    passengerTicketStrList.append(\n                        '0,' + user_info[i]['passenger_type'] + \",\" + user_info[i][\n                            \"passenger_name\"] + \",\" + user_info[i]['passenger_id_type_code'] + \",\" + user_info[i][\n                            'passenger_id_no'] + \",\" + user_info[i]['mobile_no'] + ',N,' + user_info[i][\"allEncStr\"] + '_' + set_type)\n                    oldPassengerStr.append(\n                        user_info[i]['passenger_name'] + \",\" + user_info[i]['passenger_id_type_code'] + \",\" +\n                        user_info[i]['passenger_id_no'] + \",\" + user_info[i]['passenger_type'] + '_')\n        elif secretList:\n            \"\"\"\n            \u5019\u8865\u8ba2\u5355\u6709\u591a\u5c11\u4e2a\u8054\u7cfb\u4eba\uff0c\u5c31\u5019\u8865\u591a\u5c11\u4e2a\u8054\u7cfb\u4eba\u4e86\uff0c\u6ca1\u6709\u4f18\u5148\u63d0\u4ea4\u4e4b\u8bf4\n            1#XXXX#1#***************77X#bf6ae40d3655ae7eff005ee21d95876b38ab97a8031b464bc2f74a067e3ec957;\n            \"\"\"\n            for user in user_info:\n                tickers.append(f\"1#{user['passenger_name']}#1#{user['passenger_id_no']}#{user['allEncStr']};\")\n\n        return {\n            \"passengerTicketStrList\": set_type + \",\" + \",\".join(passengerTicketStrList),\n            \"passengerTicketStrByAfterLate\": \"\".join(tickers),\n            \"oldPassengerStr\": \"\".join(oldPassengerStr),\n            \"code\": ticket.SUCCESS_CODE,\n            \"set_type\": set_type,\n            \"status\": True,\n            \"user_info\": user_info,\n        }\n", "inter/GetQueueCount.py": "# coding=utf-8\nimport datetime\nimport sys\nimport time\nfrom collections import OrderedDict\nimport wrapcache\n\nimport TickerConfig\nfrom config.TicketEnmu import ticket\nfrom config.emailConf import sendEmail\nfrom config.serverchanConf import sendServerChan\nfrom config.urlConf import urls\nfrom inter.ConfirmSingleForQueue import confirmSingleForQueue\nfrom myException.ticketIsExitsException import ticketIsExitsException\n\n\ndef conversion_int(str):\n    return int(str)\n\n\nclass getQueueCount:\n    def __init__(self, session, is_need_code, ifShowPassCodeTime, set_type, station_dates, train_no, ticket_peoples,\n                 ticketInfoForPassengerForm, token, oldPassengerStr, passengerTicketStrList):\n        self.station_dates = station_dates\n        self.session = session\n        self.is_need_code = is_need_code\n        self.ifShowPassCodeTime = ifShowPassCodeTime\n        self.set_type = set_type\n        self.train_no = train_no\n        self.ticket_peoples = ticket_peoples\n        self.ticket_black_list = {}\n        self.ticketInfoForPassengerForm = ticketInfoForPassengerForm\n        self.token = token\n        self.oldPassengerStr = oldPassengerStr\n        self.passengerTicketStrList = passengerTicketStrList\n\n    def data_par(self):\n        \"\"\"\n        \u53c2\u6570\u7ed3\u6784\n        \u81ea\u52a8\u63d0\u4ea4\u4ee3\u7801\u63a5\u53e3-autoSubmitOrderRequest\n            - \u5b57\u6bb5\u8bf4\u660e\n                - secretStr \u8f66\u7968\u4ee3\u7801\n                - train_date \u4e58\u8f66\u65e5\u671f\n                - tour_flag \u4e58\u8f66\u7c7b\u578b\n                - purpose_codes \u5b66\u751f\u8fd8\u662f\u6210\u4eba\n                - query_from_station_name \u8d77\u59cb\u8f66\u7ad9\n                - query_to_station_name \u7ed3\u675f\u8f66\u7ad9\n                - cancel_flag \u9ed8\u8ba42\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u5e72\u561b\u7684\n                - bed_level_order_num  000000000000000000000000000000\n                - passengerTicketStr   \u4e58\u5ba2\u4e58\u8f66\u4ee3\u7801\n                - oldPassengerStr  \u4e58\u5ba2\u7f16\u53f7\u4ee3\u7801\n        :return:\n        \"\"\"\n\n        if sys.version_info.major is 2:\n            new_train_date = filter(None, str(time.asctime(time.strptime(self.station_dates, \"%Y-%m-%d\"))).split(\" \"))\n        else:\n            new_train_date = list(filter(None, str(time.asctime(time.strptime(self.station_dates, \"%Y-%m-%d\"))).split(\" \")))\n        data = OrderedDict()\n        data['train_date'] = \"{0} {1} {2} {3} 00:00:00 GMT+0800 (\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4)\".format(\n            new_train_date[0],\n            new_train_date[1],\n            new_train_date[2] if len(new_train_date[2]) is 2 else f\"0{new_train_date[2]}\",\n            new_train_date[4],\n        ),\n        data['train_no'] = self.ticketInfoForPassengerForm['queryLeftTicketRequestDTO']['train_no'],\n        data['stationTrainCode'] = self.ticketInfoForPassengerForm['queryLeftTicketRequestDTO'][\n                                       'station_train_code'],\n        data['seatType'] = self.set_type,\n        data['fromStationTelecode'] = self.ticketInfoForPassengerForm['queryLeftTicketRequestDTO'][\n                                          'from_station'],\n        data['toStationTelecode'] = self.ticketInfoForPassengerForm['queryLeftTicketRequestDTO']['to_station'],\n        data['leftTicket'] = self.ticketInfoForPassengerForm['leftTicketStr'],\n        data['purpose_codes'] = self.ticketInfoForPassengerForm['purpose_codes'],\n        data['train_location'] = self.ticketInfoForPassengerForm['train_location'],\n        data['REPEAT_SUBMIT_TOKEN'] = self.token,\n        return data\n\n    def sendGetQueueCount(self):\n        \"\"\"\n        # \u6a21\u62df\u67e5\u8be2\u5f53\u524d\u7684\u5217\u8f66\u6392\u961f\u4eba\u6570\u7684\u65b9\u6cd5\n        # \u8fd4\u56de\u4fe1\u606f\u7ec4\u6210\u7684\u63d0\u793a\u5b57\u7b26\u4e32\n        :return:\n        \"\"\"\n        getQueueCountResult = self.session.httpClint.send(self.session.urls[\"getQueueCountUrl\"], self.data_par())\n        if \"status\" in getQueueCountResult and getQueueCountResult[\"status\"] is True:\n            if \"countT\" in getQueueCountResult[\"data\"]:\n                ticket = getQueueCountResult[\"data\"][\"ticket\"]\n                ticket_split = sum(map(conversion_int, ticket.split(\",\"))) if ticket.find(\",\") != -1 else ticket\n                countT = getQueueCountResult[\"data\"][\"countT\"]\n                if int(ticket_split) is 0:\n                    wrapcache.set(key=self.train_no, value=datetime.datetime.now(),\n                                  timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n                    print(f\"\u6392\u961f\u5931\u8d25\uff0c\u5f53\u524d\u4f59\u7968\u6570\u8fd8\u5269: {ticket_split} \u5f20\")\n                    return\n                print(u\"\u6392\u961f\u6210\u529f, \u4f60\u6392\u5728: {1}\u4f4d, \u5f53\u524d\u4f59\u7968\u8fd8\u5269\u4f59: {0} \u5f20\".format(ticket_split, countT))\n                csf = confirmSingleForQueue(self.session, self.ifShowPassCodeTime, self.is_need_code, self.token,\n                                            self.set_type, self.ticket_peoples, self.ticketInfoForPassengerForm,\n                                            self.oldPassengerStr, self.passengerTicketStrList)\n                csf.sendConfirmSingleForQueue()\n            #     else:\n            #         print(u\"\u5f53\u524d\u6392\u961f\u4eba\u6570: {1} \u5f53\u524d\u4f59\u7968\u8fd8\u5269\u4f59:{0} \u5f20\uff0c\u7ee7\u7eed\u6392\u961f\u4e2d\".format(ticket_split, countT))\n            else:\n                print(u\"\u6392\u961f\u53d1\u73b0\u672a\u77e5\u9519\u8bef{0}\uff0c\u5c06\u6b64\u5217\u8f66 {1}\u52a0\u5165\u5c0f\u9ed1\u5c4b\".format(getQueueCountResult, self.train_no))\n                wrapcache.set(key=self.train_no, value=datetime.datetime.now(),\n                              timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n        elif \"messages\" in getQueueCountResult and getQueueCountResult[\"messages\"]:\n            print(u\"\u6392\u961f\u5f02\u5e38\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{0}, \u5c06\u6b64\u5217\u8f66 {1}\u52a0\u5165\u5c0f\u9ed1\u5c4b\".format(getQueueCountResult[\"messages\"][0], self.train_no))\n            wrapcache.set(key=self.train_no, value=datetime.datetime.now(),\n                          timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n        else:\n            if \"validateMessages\" in getQueueCountResult and getQueueCountResult[\"validateMessages\"]:\n                print(str(getQueueCountResult[\"validateMessages\"]))\n                wrapcache.set(key=self.train_no, value=datetime.datetime.now(),\n                              timeout=TickerConfig.TICKET_BLACK_LIST_TIME * 60)\n            else:\n                print(u\"\u672a\u77e5\u9519\u8bef {0}\".format(\"\".join(getQueueCountResult)))\n\n\nclass queryQueueByAfterNate:\n    def __init__(self, session):\n        \"\"\"\n        \u5019\u8865\u6392\u961f\n        :param session:\n        \"\"\"\n        self.session = session\n\n    def sendQueryQueueByAfterNate(self):\n        for i in range(10):\n            queryQueueByAfterNateRsp = self.session.httpClint.send(urls.get(\"queryQueue\"))\n            if not queryQueueByAfterNateRsp.get(\"status\"):\n                print(\"\".join(queryQueueByAfterNateRsp.get(\"messages\")) or queryQueueByAfterNateRsp.get(\"validateMessages\"))\n                time.sleep(1)\n            else:\n                sendEmail(ticket.WAIT_ORDER_SUCCESS)\n                sendServerChan(ticket.WAIT_ORDER_SUCCESS)\n                raise ticketIsExitsException(ticket.WAIT_AFTER_NATE_SUCCESS)\n\n\nif __name__ == '__main__':\n    new_train_date = list(filter(None, str(time.asctime(time.strptime(\"2019-10-07\", \"%Y-%m-%d\"))).split(\" \")))\n    print(new_train_date)\n    train_date = \"{0} {1} {2} {3} 00:00:00 GMT+0800 (\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4)\".format(\n        new_train_date[0],\n        new_train_date[1],\n        new_train_date[2] if len(new_train_date[2]) is 2 else f\"0{new_train_date[2]}\",\n        new_train_date[4],\n    )\n    print(train_date)", "UnitTest/TestAll.py": "# coding=utf-8\nimport base64\nimport threading\nimport unittest\nfrom collections import OrderedDict\n\nimport requests\n\nimport TickerConfig\nfrom agency.agency_tools import proxy\nfrom config.emailConf import sendEmail\nfrom config.serverchanConf import sendServerChan\nfrom inter.LiftTicketInit import liftTicketInit\n\n\ndef _set_header_default():\n    header_dict = OrderedDict()\n    header_dict[\"Accept\"] = \"*/*\"\n    header_dict[\"Accept-Encoding\"] = \"gzip, deflate\"\n    header_dict[\"X-Requested-With\"] = \"superagent\"\n\n    header_dict[\n        \"User-Agent\"] = \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\"\n    header_dict[\"Content-Type\"] = \"application/x-www-form-urlencoded; charset=UTF-8\"\n\n\nclass testAll(unittest.TestCase):\n    def testProxy(self):\n        \"\"\"\n        \u6d4b\u8bd5\u4ee3\u7406\u662f\u5426\u53ef\u7528\n        :return:\n        \"\"\"\n        _proxy = proxy()\n        proxie = _proxy.setProxy()\n        url = \"http://httpbin.org/ip\"\n        rsp = requests.get(url, proxies=proxie, timeout=5, headers=_set_header_default()).content\n        print(u\"\u5f53\u524d\u4ee3\u7406ip\u5730\u5740\u4e3a: {}\".format(rsp))\n\n    def testEmail(self):\n        \"\"\"\n        \u5b9e\u6d4b\u90ae\u7bb1\u662f\u5426\u53ef\u7528\n        :return:\n        \"\"\"\n        sendEmail(u\"\u8ba2\u7968\u5c0f\u52a9\u624b\u6d4b\u8bd5\u4e00\u4e0b\")\n\n    # def testConfig(self):\n    #     \"\"\"\n    #     \u6d4b\u8bd5config\u662f\u5426\u914d\u7f6e\u6b63\u786e\n    #     :return:\n    #     \"\"\"\n\n    def testServerChan(self):\n        \"\"\"\n        \u5b9e\u6d4bserver\u9171\u662f\u5426\u53ef\u7528\n        :return:\n        \"\"\"\n        sendServerChan(u\"server\u9171 \u5fae\u4fe1\u901a\u77e5\u6d4b\u8bd5\u4e00\u4e0b\")\n\n    def testUserAgent(self):\n        \"\"\"\n        \u6d4b\u8bd5UserAgent\n        :return:\n        \"\"\"\n        from fake_useragent import UserAgent\n        for i in range(10000):\n            ua = UserAgent(verify_ssl=False)\n            print(ua.random)\n\n    def testVerfyImage(self):\n        \"\"\"\n        \u6d4b\u8bd5\u6a21\u578b\u52a0\u8f7d\u8bc6\u522b\n        :return:\n        \"\"\"\n        from verify.localVerifyCode import Verify\n        v = Verify()\n        with open('../tkcode.png', 'rb') as f:\n            base64Image = base64.b64encode(f.read())\n            for i in range(5):\n                t = threading.Thread(target=v.verify, args=(base64Image,))\n                t.start()\n\n    def testRemoteVerfy(self):\n        \"\"\"\n        \u6d4b\u8bd5\u6253\u7801\u662f\u5426\u53ef\u7528\n        :return:\n        \"\"\"\n        import requests\n        import time\n        while True:\n            try:\n                starttime = time.time()\n                rsp = requests.post(url=\"http://120.77.154.140:8000/verify/base64/\",\n                                    data={\n                                        'imageFile': ''},\n                                    timeout=60,\n                                    )\n                print(rsp.content)\n                print(f\"\u54cd\u5e94\u65f6\u95f4{time.time()-starttime}m\")\n            except:\n                pass\n\n    def testCdn(self):\n        \"\"\"\n        \u6d4b\u8bd5cdn\u7b5b\u9009\n        :return:\n        \"\"\"\n        cdn = [\"60.9.0.19\", \"60.9.0.20\", \"113.16.212.251\", \"36.250.248.27\"]\n        from inter.LiftTicketInit import liftTicketInit\n        from init.select_ticket_info import select\n        from config.getCookie import getDrvicesID\n\n        s = select()\n        s.httpClint.cdn = cdn[3]\n        getDrvicesID(s)\n        liftTicketInit(s).reqLiftTicketInit()\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "UnitTest/__init__.py": "", "myException/balanceException.py": "class balanceException(Exception):\n    pass", "myException/ticketNumOutException.py": "class ticketNumOutException(Exception):\n    pass", "myException/ticketIsExitsException.py": "class ticketIsExitsException(Exception):\n    pass", "myException/PassengerUserException.py": "class PassengerUserException(Exception):\n    pass", "myException/UserPasswordException.py": "class UserPasswordException(Exception):\n    pass", "myException/__init__.py": "", "myException/ticketConfigException.py": "class ticketConfigException(Exception):\n    pass", "init/select_ticket_info.py": "# -*- coding=utf-8 -*-\nimport datetime\nimport random\nimport os\nimport socket\nimport sys\nimport threading\nimport time\nimport TickerConfig\nimport wrapcache\nfrom agency.cdn_utils import CDNProxy, open_cdn_file\nfrom config import urlConf, configCommon\nfrom config.TicketEnmu import ticket\nfrom config.configCommon import seat_conf_2, seat_conf\nfrom config.getCookie import getDrvicesID\nfrom init.login import GoLogin\nfrom inter.AutoSubmitOrderRequest import autoSubmitOrderRequest\nfrom inter.ChechFace import chechFace\nfrom inter.CheckUser import checkUser\nfrom inter.GetPassengerDTOs import getPassengerDTOs\nfrom inter.LiftTicketInit import liftTicketInit\nfrom inter.Query import query\nfrom inter.SubmitOrderRequest import submitOrderRequest\nfrom myException.PassengerUserException import PassengerUserException\nfrom myException.UserPasswordException import UserPasswordException\nfrom myException.ticketConfigException import ticketConfigException\nfrom myException.ticketIsExitsException import ticketIsExitsException\nfrom myException.ticketNumOutException import ticketNumOutException\nfrom myUrllib.httpUtils import HTTPClient\n\n\nclass select:\n    \"\"\"\n    \u5feb\u901f\u63d0\u4ea4\u8f66\u7968\u901a\u9053\n    \"\"\"\n    def __init__(self):\n        self.cdn_list = open_cdn_file(\"filter_cdn_list\")\n        self.get_ticket_info()\n        self._station_seat = [seat_conf[x] for x in TickerConfig.SET_TYPE]\n        self.auto_code_type = TickerConfig.AUTO_CODE_TYPE\n        self.httpClint = HTTPClient(TickerConfig.IS_PROXY, self.cdn_list)\n        self.httpClint.cdn = self.cdn_list[random.randint(0, 4)]\n        self.urls = urlConf.urls\n        self.login = GoLogin(self, TickerConfig.IS_AUTO_CODE, self.auto_code_type)\n        self.cookies = \"\"\n        self.queryUrl = \"leftTicket/queryO\"\n        self.passengerTicketStrList = \"\"\n        self.passengerTicketStrByAfterLate = \"\"\n        self.oldPassengerStr = \"\"\n        self.set_type = \"\"\n        self.flag = True\n\n    @staticmethod\n    def get_ticket_info():\n        \"\"\"\n        \u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\n        :return:\n        \"\"\"\n\n        print(u\"*\" * 50)\n        print(f\"\u68c0\u67e5\u5f53\u524d\u7248\u672c\u4e3a: {TickerConfig.RE_VERSION}\")\n        version = sys.version.split(\" \")[0]\n        print(u\"\u68c0\u67e5\u5f53\u524dpython\u7248\u672c\u4e3a\uff1a{}\uff0c\u76ee\u524d\u7248\u672c\u53ea\u652f\u63013.6\u4ee5\u4e0a\".format(version))\n        if version < \"3.6.0\":\n            raise Exception\n        print(u\"12306\u5237\u7968\u5c0f\u52a9\u624b\uff0c\u6700\u540e\u66f4\u65b0\u4e8e2019.09.18\uff0c\u8bf7\u52ff\u4f5c\u4e3a\u5546\u4e1a\u7528\u9014\uff0c\u4ea4\u6d41\u7fa4\u53f7\uff1a\"\n              u\" 1\u7fa4\uff1a286271084(\u5df2\u6ee1)\\n\"\n              u\" 2\u7fa4\uff1a649992274(\u5df2\u6ee1)\\n\"\n              u\" 3\u7fa4\uff1a632501142(\u5df2\u6ee1)\\n\"\n              u\" 4\u7fa4: 606340519(\u5df2\u6ee1)\\n\"\n              u\" 5\u7fa4: 948526733(\u5df2\u6ee1)\\n\"\n              u\" 7\u7fa4: 660689659(\u5df2\u6ee1)\\n\"\n              u\" 8\u7fa4: 620629239(\u5df2\u6ee1)\\n\"\n              u\" 6\u7fa4: 608792930(\u672a\u6ee1)\\n\"\n              u\" 9\u7fa4: 693035807(\u672a\u6ee1)\\n\"\n              )\n        print(\n            f\"\u5f53\u524d\u914d\u7f6e\uff1a\\n\u51fa\u53d1\u7ad9\uff1a{TickerConfig.FROM_STATION}\\n\u5230\u8fbe\u7ad9\uff1a{TickerConfig.TO_STATION}\\n\u8f66\u6b21: {','.join(TickerConfig.STATION_TRAINS) or '\u6240\u6709\u8f66\u6b21'}\\n\u4e58\u8f66\u65e5\u671f\uff1a{','.join(TickerConfig.STATION_DATES)}\\n\u5750\u5e2d\uff1a{','.join(TickerConfig.SET_TYPE)}\\n\u662f\u5426\u6709\u7968\u4f18\u5148\u63d0\u4ea4\uff1a{TickerConfig.IS_MORE_TICKET}\\n\u4e58\u8f66\u4eba\uff1a{TickerConfig.TICKET_PEOPLES}\\n\" \\\n            f\"\u5237\u65b0\u95f4\u9694: \u968f\u673a(1-3S)\\n\u50f5\u5c38\u7968\u5173\u5c0f\u9ed1\u5c4b\u65f6\u957f: {TickerConfig.TICKET_BLACK_LIST_TIME}\\n\u4e0b\u5355\u63a5\u53e3: {TickerConfig.ORDER_TYPE}\\n\u4e0b\u5355\u6a21\u5f0f: {TickerConfig.ORDER_MODEL}\\n\u9884\u552e\u8e29\u70b9\u65f6\u95f4:{TickerConfig.OPEN_TIME}\")\n        print(u\"*\" * 50)\n\n    def station_table(self, from_station, to_station):\n        \"\"\"\n        \u8bfb\u53d6\u8f66\u7ad9\u4fe1\u606f\n        :param station:\n        :return:\n        \"\"\"\n        path = os.path.join(os.path.dirname(__file__), '../station_name.txt')\n        try:\n            with open(path, encoding=\"utf-8\") as result:\n                info = result.read().split('=')[1].strip(\"'\").split('@')\n        except Exception:\n            with open(path) as result:\n                info = result.read().split('=')[1].strip(\"'\").split('@')\n        del info[0]\n        station_name = {}\n        for i in range(0, len(info)):\n            n_info = info[i].split('|')\n            station_name[n_info[1]] = n_info[2]\n        try:\n            from_station = station_name[from_station.encode(\"utf8\")]\n            to_station = station_name[to_station.encode(\"utf8\")]\n        except KeyError:\n            from_station = station_name[from_station]\n            to_station = station_name[to_station]\n        return from_station, to_station\n\n    def call_login(self, auth=False):\n        \"\"\"\n        \u767b\u5f55\u56de\u8c03\u65b9\u6cd5\n        :return:\n        \"\"\"\n        if auth:\n            return self.login.auth()\n        else:\n            configCommon.checkSleepTime(self)  # \u9632\u6b62\u7f51\u4e0a\u542f\u52a8\u665a\u4e0a\u5230\u70b9\u4f11\u7720\n            self.login.go_login()\n\n    def main(self):\n        l = liftTicketInit(self)\n        l.reqLiftTicketInit()\n        getDrvicesID(self)\n        self.call_login()\n        check_user = checkUser(self)\n        t = threading.Thread(target=check_user.sendCheckUser)\n        t.setDaemon(True)\n        t.start()\n        from_station, to_station = self.station_table(TickerConfig.FROM_STATION, TickerConfig.TO_STATION)\n        num = 0\n        s = getPassengerDTOs(selectObj=self, ticket_peoples=TickerConfig.TICKET_PEOPLES)\n        passenger = s.sendGetPassengerDTOs()\n        wrapcache.set(\"user_info\", passenger, timeout=9999999)\n\n        now = datetime.datetime.now()\n        if TickerConfig.ORDER_MODEL is 1:\n            print(f\"\u9884\u552e\u8fd8\u672a\u5f00\u59cb\uff0c\u963b\u585e\u4e2d\uff0c\u9884\u552e\u65f6\u95f4\u4e3a{TickerConfig.OPEN_TIME}, \u5f53\u524d\u65f6\u95f4\u4e3a: {now.strftime('%H:%M:%S')}\")\n            sleep_time_s = 0.1\n            sleep_time_t = 0.3\n            # \u6d4b\u8bd5\u4e86\u4e00\u4e0b\u6709\u5fae\u5999\u7ea7\u7684\u8bef\u5dee\uff0c\u5e94\u8be5\u4e0d\u5f71\u54cd\uff0c\u6d4b\u8bd5\u7ed3\u679c\uff1a2019-01-02 22:30:00.004555\uff0c\u9884\u552e\u8fd8\u662f\u4f1a\u53d7\u5230\u524d\u4e00\u6b21\u5237\u65b0\u7684\u65f6\u95f4\u5f71\u54cd\uff0c\u6682\u65f6\u6ca1\u60f3\u5230\u597d\u7684\u89e3\u51b3\u65b9\u6848\n            while now.strftime(\"%H:%M:%S\") < TickerConfig.OPEN_TIME:\n                now = datetime.datetime.now()\n                time.sleep(0.0001)\n            print(f\"\u9884\u552e\u5f00\u59cb\uff0c\u5f00\u542f\u65f6\u95f4\u4e3a: {now.strftime('%H:%M:%S')}\")\n        else:\n            sleep_time_s = TickerConfig.MIN_TIME\n            sleep_time_t = TickerConfig.MAX_TIME\n\n        while 1:\n            try:\n                num += 1\n                now = datetime.datetime.now()  # \u611f\u8c22\u7fa4\u91cc\u5927\u4f6c\u63d0\u4f9b\u6574\u70b9\u4ee3\u7801\n                configCommon.checkSleepTime(self)  # \u665a\u4e0a\u5230\u70b9\u4f11\u7720\n                q = query(selectObj=self,\n                          from_station=from_station,\n                          to_station=to_station,\n                          from_station_h=TickerConfig.FROM_STATION,\n                          to_station_h=TickerConfig.TO_STATION,\n                          _station_seat=self._station_seat,\n                          station_trains=TickerConfig.STATION_TRAINS,\n                          station_dates=TickerConfig.STATION_DATES,\n                          ticke_peoples_num=len(TickerConfig.TICKET_PEOPLES),\n                          )\n                queryResult = q.sendQuery()\n                # \u67e5\u8be2\u63a5\u53e3\n                if queryResult.get(\"status\"):\n                    train_no = queryResult.get(\"train_no\", \"\")\n                    train_date = queryResult.get(\"train_date\", \"\")\n                    stationTrainCode = queryResult.get(\"stationTrainCode\", \"\")\n                    secretStr = queryResult.get(\"secretStr\", \"\")\n                    secretList = queryResult.get(\"secretList\", \"\")\n                    seat = queryResult.get(\"seat\", \"\")\n                    leftTicket = queryResult.get(\"leftTicket\", \"\")\n                    query_from_station_name = queryResult.get(\"query_from_station_name\", \"\")\n                    query_to_station_name = queryResult.get(\"query_to_station_name\", \"\")\n                    is_more_ticket_num = queryResult.get(\"is_more_ticket_num\", len(TickerConfig.TICKET_PEOPLES))\n                    if wrapcache.get(train_no):\n                        print(ticket.QUEUE_WARNING_MSG.format(train_no))\n                    else:\n                        # \u83b7\u53d6\u8054\u7cfb\u4eba\n                        s = getPassengerDTOs(selectObj=self, ticket_peoples=TickerConfig.TICKET_PEOPLES,\n                                             set_type=\"\" if isinstance(seat, list) else seat_conf_2[seat],\n                                             # \u5019\u8865\u8ba2\u5355\u9700\u8981\u8bbe\u7f6e\u591a\u4e2a\u5750\u5e2d\n                                             is_more_ticket_num=is_more_ticket_num)\n                        getPassengerDTOsResult = s.getPassengerTicketStrListAndOldPassengerStr(secretStr, secretList)\n                        if getPassengerDTOsResult.get(\"status\", False):\n                            self.passengerTicketStrList = getPassengerDTOsResult.get(\"passengerTicketStrList\", \"\")\n                            self.passengerTicketStrByAfterLate = getPassengerDTOsResult.get(\n                                \"passengerTicketStrByAfterLate\", \"\")\n                            self.oldPassengerStr = getPassengerDTOsResult.get(\"oldPassengerStr\", \"\")\n                            self.set_type = getPassengerDTOsResult.get(\"set_type\", \"\")\n                        # \u63d0\u4ea4\u8ba2\u5355\n                        # \u8ba2\u5355\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u4e3a\u62a2\u5355\uff0c\u4e00\u79cd\u4e3a\u5019\u8865\u8ba2\u5355\n                        if secretStr:  # \u6b63\u5e38\u4e0b\u5355\n                            if TickerConfig.ORDER_TYPE == 1:  # \u5feb\u901f\u4e0b\u5355\n                                a = autoSubmitOrderRequest(selectObj=self,\n                                                           secretStr=secretStr,\n                                                           train_date=train_date,\n                                                           passengerTicketStr=self.passengerTicketStrList,\n                                                           oldPassengerStr=self.oldPassengerStr,\n                                                           train_no=train_no,\n                                                           stationTrainCode=stationTrainCode,\n                                                           leftTicket=leftTicket,\n                                                           set_type=self.set_type,\n                                                           query_from_station_name=query_from_station_name,\n                                                           query_to_station_name=query_to_station_name,\n                                                           )\n                                a.sendAutoSubmitOrderRequest()\n                            elif TickerConfig.ORDER_TYPE == 2:  # \u666e\u901a\u4e0b\u5355\n                                sor = submitOrderRequest(self, secretStr, from_station, to_station, train_no,\n                                                         self.set_type,\n                                                         self.passengerTicketStrList, self.oldPassengerStr, train_date,\n                                                         TickerConfig.TICKET_PEOPLES)\n                                sor.sendSubmitOrderRequest()\n                        elif secretList:  # \u5019\u8865\u8ba2\u5355\n                            c = chechFace(self, secretList, train_no)\n                            c.sendChechFace()\n                else:\n                    random_time = round(random.uniform(sleep_time_s, sleep_time_t), 2)\n                    nateMsg = ' \u65e0\u5019\u8865\u673a\u4f1a' if TickerConfig.ORDER_TYPE == 2 else \"\"\n                    print(f\"\u6b63\u5728\u7b2c{num}\u6b21\u67e5\u8be2 \u505c\u7559\u65f6\u95f4\uff1a{random_time} \u4e58\u8f66\u65e5\u671f: {','.join(TickerConfig.STATION_DATES)} \u8f66\u6b21\uff1a{','.join(TickerConfig.STATION_TRAINS) or '\u6240\u6709\u8f66\u6b21'} \u4e0b\u5355\u65e0\u7968{nateMsg} \u8017\u65f6\uff1a{(datetime.datetime.now() - now).microseconds / 1000} {queryResult.get('cdn')}\")\n                    time.sleep(random_time)\n            except PassengerUserException as e:\n                print(e)\n                break\n            except ticketConfigException as e:\n                print(e)\n                break\n            except ticketIsExitsException as e:\n                print(e)\n                break\n            except ticketNumOutException as e:\n                print(e)\n                break\n            except UserPasswordException as e:\n                print(e)\n                break\n            except ValueError as e:\n                if e == \"No JSON object could be decoded\":\n                    print(u\"12306\u63a5\u53e3\u65e0\u54cd\u5e94\uff0c\u6b63\u5728\u91cd\u8bd5\")\n                else:\n                    print(e)\n            except KeyError as e:\n                print(e)\n            except TypeError as e:\n                print(u\"12306\u63a5\u53e3\u65e0\u54cd\u5e94\uff0c\u6b63\u5728\u91cd\u8bd5 {0}\".format(e))\n            except socket.error as e:\n                print(e)\n\n\nif __name__ == '__main__':\n    s = select()\n    cdn = s.station_table(\"\u957f\u6c99\", \"\u6df1\u5733\")\n", "init/login.py": "# -*- coding=utf-8 -*-\nimport copy\nimport time\nfrom collections import OrderedDict\nfrom time import sleep\nimport TickerConfig\nfrom inter.GetPassCodeNewOrderAndLogin import getPassCodeNewOrderAndLogin1\nfrom inter.GetRandCode import getRandCode\nfrom inter.LoginAysnSuggest import loginAysnSuggest\nfrom inter.LoginConf import loginConf\nfrom myException.UserPasswordException import UserPasswordException\n\n\nclass GoLogin:\n    def __init__(self, session, is_auto_code, auto_code_type):\n        self.session = session\n        self.randCode = \"\"\n        self.is_auto_code = is_auto_code\n        self.auto_code_type = auto_code_type\n\n    def auth(self):\n        \"\"\"\n        :return:\n        \"\"\"\n        self.session.httpClint.send(self.session.urls[\"loginInitCdn1\"])\n        uamtkStaticUrl = self.session.urls[\"uamtk-static\"]\n        uamtkStaticData = {\"appid\": \"otn\"}\n        return self.session.httpClint.send(uamtkStaticUrl, uamtkStaticData)\n\n    def codeCheck(self):\n        \"\"\"\n        \u9a8c\u8bc1\u7801\u6821\u9a8c\n        :return:\n        \"\"\"\n        codeCheckUrl = copy.deepcopy(self.session.urls[\"codeCheck1\"])\n        codeCheckUrl[\"req_url\"] = codeCheckUrl[\"req_url\"].format(self.randCode, int(time.time() * 1000))\n        fresult = self.session.httpClint.send(codeCheckUrl)\n        if not isinstance(fresult, str):\n            print(\"\u767b\u5f55\u5931\u8d25\")\n            return\n        fresult = eval(fresult.split(\"(\")[1].split(\")\")[0])\n        if \"result_code\" in fresult and fresult[\"result_code\"] == \"4\":\n            print(u\"\u9a8c\u8bc1\u7801\u901a\u8fc7,\u5f00\u59cb\u767b\u5f55..\")\n            return True\n        else:\n            if \"result_message\" in fresult:\n                print(fresult[\"result_message\"])\n            sleep(1)\n            self.session.httpClint.del_cookies()\n\n    def baseLogin(self, user, passwd):\n        \"\"\"\n        \u767b\u5f55\u8fc7\u7a0b\n        :param user:\n        :param passwd:\n        :return: \u6743\u9650\u6821\u9a8c\u7801\n        \"\"\"\n        logurl = self.session.urls[\"login\"]\n\n        loginData = OrderedDict()\n        loginData[\"username\"] = user,\n        loginData[\"password\"] = passwd,\n        loginData[\"appid\"] = \"otn\",\n        loginData[\"answer\"] = self.randCode,\n\n        tresult = self.session.httpClint.send(logurl, loginData)\n        if 'result_code' in tresult and tresult[\"result_code\"] == 0:\n            print(u\"\u767b\u5f55\u6210\u529f\")\n            tk = self.auth()\n            if \"newapptk\" in tk and tk[\"newapptk\"]:\n                return tk[\"newapptk\"]\n            else:\n                return False\n        elif 'result_message' in tresult and tresult['result_message']:\n            messages = tresult['result_message']\n            if messages.find(u\"\u5bc6\u7801\u8f93\u5165\u9519\u8bef\") is not -1:\n                raise UserPasswordException(\"{0}\".format(messages))\n            else:\n                print(u\"\u767b\u5f55\u5931\u8d25: {0}\".format(messages))\n                print(u\"\u5c1d\u8bd5\u91cd\u65b0\u767b\u9646\")\n                return False\n        else:\n            return False\n\n    def getUserName(self, uamtk):\n        \"\"\"\n        \u767b\u5f55\u6210\u529f\u540e,\u663e\u793a\u7528\u6237\u540d\n        :return:\n        \"\"\"\n        if not uamtk:\n            return u\"\u6743\u9650\u6821\u9a8c\u7801\u4e0d\u80fd\u4e3a\u7a7a\"\n        else:\n            uamauthclientUrl = self.session.urls[\"uamauthclient\"]\n            data = {\"tk\": uamtk}\n            uamauthclientResult = self.session.httpClint.send(uamauthclientUrl, data)\n            if uamauthclientResult:\n                if \"result_code\" in uamauthclientResult and uamauthclientResult[\"result_code\"] == 0:\n                    print(u\"\u6b22\u8fce {} \u767b\u5f55\".format(uamauthclientResult[\"username\"]))\n                    return True\n                else:\n                    return False\n            else:\n                self.session.httpClint.send(uamauthclientUrl, data)\n                url = self.session.urls[\"getUserInfo\"]\n                self.session.httpClint.send(url)\n\n    def go_login(self):\n        \"\"\"\n        \u767b\u9646\n        :param user: \u8d26\u6237\u540d\n        :param passwd: \u5bc6\u7801\n        :return:\n        \"\"\"\n        user, passwd = TickerConfig.USER, TickerConfig.PWD\n        if not user or not passwd:\n            raise UserPasswordException(u\"\u6e29\u99a8\u63d0\u793a: \u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u4e3a\u7a7a\uff0c\u8bf7\u4ed4\u7ec6\u68c0\u67e5\")\n        login_num = 0\n        while True:\n            if loginConf(self.session):\n\n                result = getPassCodeNewOrderAndLogin1(session=self.session, imgType=\"login\")\n                if not result:\n                    continue\n                self.randCode = getRandCode(self.is_auto_code, self.auto_code_type, result)\n                print(self.randCode)\n                login_num += 1\n                self.auth()\n                if self.codeCheck():\n                    uamtk = self.baseLogin(user, passwd)\n                    if uamtk:\n                        self.getUserName(uamtk)\n                        break\n            else:\n                loginAysnSuggest(self.session, username=user, password=passwd)\n                login_num += 1\n                break", "init/__init__.py": "", "agency/agency_tools.py": "# encoding=utf8\nimport os\nimport random\nimport socket\nimport time\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n\nclass proxy:\n    def __init__(self):\n        self.proxy_list = []\n        self.proxy_filter_list = []\n\n    def get_proxy(self):\n        \"\"\"\n        \u83b7\u53d6\u672a\u52a0\u5de5\u4ee3\u7406\u5217\u8868\n        :return: \n        \"\"\"\n        User_Agent = 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'\n        header = dict()\n        header['User-Agent'] = User_Agent\n\n        for i in range(1, 5):\n            time.sleep(1)\n            url = 'http://www.xicidaili.com/nn/' + str(i)\n            res = requests.get(url=url, headers=header).content\n\n            soup = BeautifulSoup(res, \"html.parser\")\n            ips = soup.findAll('tr')\n\n            for x in range(1, len(ips)):\n                ip = ips[x]\n                tds = ip.findAll(\"td\")\n                ip_temp = tds[1].contents[0] + \":\" + tds[2].contents[0]\n                print(ip_temp)\n                self.proxy_list.append(ip_temp)\n\n    def filter_proxy(self):\n        \"\"\"\n        \u5c06\u4e0d\u53ef\u7528IP\u5254\u9664\n        :return: \n        \"\"\"\n        socket.setdefaulttimeout(1)\n        path = os.path.join(os.path.dirname(__file__), './proxy_list')\n        f = open(path, \"w\")\n        head = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36',\n            'Connection': 'keep-alive'}\n        url = \"http://icanhazip.com\"\n        proxy_num = 0\n        for proxy in self.proxy_list:\n            proxy_temp = {\"https\": \"https://{}\".format(proxy)}\n            try:\n                req = requests.get(url, proxies=proxy_temp, timeout=2, headers=head).content\n                print(req)\n                write_proxy = proxy + \"\\n\"\n                f.write(write_proxy)\n                proxy_num += 1\n            except Exception:\n                print (\"\u4ee3\u7406\u94fe\u63a5\u8d85\u65f6\uff0c\u53bb\u9664\u6b64IP\uff1a{0}\".format(proxy))\n                continue\n        print(\"\u603b\u5171\u53ef\u4f7f\u7528ip\u91cf\u4e3a{}\u4e2a\".format(proxy_num))\n\n    def get_filter_proxy(self):\n        \"\"\"\n        \u8bfb\u53d6\u8be5\u53ef\u7528ip\u6587\u4ef6\n        :return: \u53ef\u7528ip\u6587\u4ef6list\n        \"\"\"\n        path = os.path.join(os.path.dirname(__file__), './proxy_list')\n        try:\n            with open(path, \"r\", encoding=\"utf-8\") as f:\n                lins = f.readlines()\n                for i in lins:\n                    p = i.strip(\"\\n\")\n                    self.proxy_filter_list.append(p)\n        except Exception:\n            with open(path, \"r\", ) as f:\n                lins = f.readlines()\n                for i in lins:\n                    p = i.strip(\"\\n\")\n                    self.proxy_filter_list.append(p)\n        return self.proxy_filter_list\n\n    def main(self):\n        # self.get_proxy()\n        self.filter_proxy()\n\n    def setProxy(self):\n        \"\"\"\n        \u5f00\u542f\u6b64\u529f\u80fd\u7684\u65f6\u5019\u8bf7\u786e\u4fdd\u4ee3\u7406ip\u662f\u5426\u53ef\u7528\n        \u67e5\u8be2\u7684\u65f6\u5019\u8bbe\u7f6e\u4ee3\u7406ip,ip\u8bbe\u7f6e\u683c\u5f0f\u662fip\u5730\u5740+\u7aef\u53e3\uff0c\u63a8\u8350\u53ef\u7528\u7684ip\u4ee3\u7406\u6c60\uff1ahttps://github.com/jhao104/proxy_pool\n        :return:\n        \"\"\"\n        ip = self.get_filter_proxy()\n        setIp = ip[random.randint(0, len(ip) - 1)]\n        proxie = {\n            'http': 'http://{}'.format(setIp),\n            'https': 'http://{}'.format(setIp),\n        }\n        return proxie\n\n\nif __name__ == \"__main__\":\n    a = proxy()\n    print(a.get_filter_proxy())\n", "agency/cdn_utils.py": "# encoding=utf8\nimport datetime\nimport operator\nimport os\nimport requests\nfrom config import urlConf\nimport threading\nfrom config.urlConf import urls\n\nfrom myUrllib.httpUtils import HTTPClient\n\ncdn_list = []\n\n\nclass CDNProxy(threading.Thread):\n    def __init__(self, cdns):\n        super().__init__()\n        self.cdns = cdns\n        self.urlConf = urlConf.urls\n        self.httpClint = requests\n        self.city_list = []\n        self.timeout = 5\n\n    def run(self):\n        for cdn in self.cdns:\n            http = HTTPClient(0)\n            url = urls[\"loginInitCdn\"]\n            http._cdn = cdn.replace(\"\\n\", \"\")\n            start_time = datetime.datetime.now()\n            rep = http.send(url)\n            retTime = (datetime.datetime.now() - start_time).microseconds / 1000\n            if rep and \"message\" not in rep and retTime < 3000:\n                if cdn.replace(\"\\n\", \"\") not in cdn_list:  # \u5982\u679c\u6709\u91cd\u590d\u7684cdn\uff0c\u5219\u653e\u5f03\u52a0\u5165\n                    print(f\"\u52a0\u5165cdn: {cdn}\")\n                    cdn_list.append({\"ip\": cdn.replace(\"\\n\", \"\"), \"time\": retTime})\n\n\ndef open_cdn_file(cdnFile):\n    cdn = []\n    path = os.path.join(os.path.dirname(__file__), f'../{cdnFile}')\n    try:\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            for i in f.readlines():\n                if i and \"kyfw.12306.cn:443\" not in i:\n                    cdn.append(i.replace(\"\\n\", \"\"))\n            return cdn\n    except Exception:\n        with open(path, \"r\") as f:\n            for i in f.readlines():\n                if i and \"kyfw.12306.cn:443\" not in i:\n                    cdn.append(i.replace(\"\\n\", \"\"))\n            return cdn\n\n\ndef sortCdn():\n    \"\"\"\n    \u5bf9cdn\u8fdb\u884c\u6392\u5e8f\n    :return:\n    \"\"\"\n    ips = []\n    cs = sorted(cdn_list, key=operator.itemgetter('time'))\n    for c in cs:\n        print(f\"\u5f53\u524dip: {c['ip']}, \u5ef6\u65f6: {c['time']}\")\n        ips.append(c[\"ip\"])\n    return ips\n\n\ndef filterCdn():\n    \"\"\"\n    \u8fc7\u6ee4cdn, \u8fc7\u6ee4\u903b\u8f91\u4e3a\u5f53\u524dcdn\u54cd\u5e94\u503c\u5c0f\u4e8e1000\u6beb\u79d2\n    \u8fc7\u6ee4\u65e5\u5fd7:\n        \u52a0\u5165cdn: 116.77.75.146\n    :return:\n    \"\"\"\n    cdns = open_cdn_file(\"cdn_list\")\n    cdnss = [cdns[i:i + 50] for i in range(0, len(cdns), 50)]\n    cdnThread = []\n    for cdn in cdnss:\n        t = CDNProxy(cdn)\n        cdnThread.append(t)\n    for cdn_t in cdnThread:\n        cdn_t.start()\n\n    for cdn_j in cdnThread:\n        cdn_j.join()\n\n    print(f\"\u5f53\u524d\u6709\u6548cdn\u4e2a\u6570\u4e3a: {len(cdn_list)}\")\n    if cdn_list:\n        ips = sortCdn()\n        path = os.path.join(os.path.dirname(__file__), f'../filter_cdn_list')\n        f = open(path, \"a+\")\n        f.seek(0)\n        f.truncate()\n        f.writelines(\"\")\n        for ip in ips:\n            f.writelines(f\"{ip}\\n\")\n        f.close()\n\n\nif __name__ == '__main__':\n    filterCdn()\n", "agency/__init__.py": "", "verify/pretreatment.py": "#! env python\n# coding: utf-8\n# \u529f\u80fd\uff1a\u5bf9\u56fe\u50cf\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5c06\u6587\u5b57\u90e8\u5206\u5355\u72ec\u63d0\u53d6\u51fa\u6765\n# \u5e76\u5b58\u653e\u5230ocr\u76ee\u5f55\u4e0b\n# \u6587\u4ef6\u540d\u4e3a\u539f\u9a8c\u8bc1\u7801\u6587\u4ef6\u7684\u6587\u4ef6\u540d\nimport TickerConfig\nif TickerConfig.AUTO_CODE_TYPE == 2:\n    import hashlib\n    import os\n    import pathlib\n\n    import cv2\n    import numpy as np\n    import requests\n    import scipy.fftpack\n\n\nPATH = 'imgs'\n\n\ndef download_image():\n    # \u6293\u53d6\u9a8c\u8bc1\u7801\n    # \u5b58\u653e\u5230\u6307\u5b9apath\u4e0b\n    # \u6587\u4ef6\u540d\u4e3a\u56fe\u50cf\u7684MD5\n    url = 'https://kyfw.12306.cn/otn/passcodeNew/getPassCodeNew?module=login&rand=sjrand'\n    r = requests.get(url)\n    fn = hashlib.md5(r.content).hexdigest()\n    with open(f'{PATH}/{fn}.jpg', 'wb') as fp:\n        fp.write(r.content)\n\n\ndef download_images():\n    pathlib.Path(PATH).mkdir(exist_ok=True)\n    for idx in range(40000):\n        download_image()\n        print(idx)\n\n\ndef get_text(img, offset=0):\n    # \u5f97\u5230\u56fe\u50cf\u4e2d\u7684\u6587\u672c\u90e8\u5206\n    return img[3:22, 120 + offset:177 + offset]\n\n\ndef avhash(im):\n    im = cv2.resize(im, (8, 8), interpolation=cv2.INTER_CUBIC)\n    avg = im.mean()\n    im = im > avg\n    im = np.packbits(im)\n    return im\n\n\ndef phash(im):\n    im = cv2.resize(im, (32, 32), interpolation=cv2.INTER_CUBIC)\n    im = scipy.fftpack.dct(scipy.fftpack.dct(im, axis=0), axis=1)\n    im = im[:8, :8]\n    med = np.median(im)\n    im = im > med\n    im = np.packbits(im)\n    return im\n\n\ndef _get_imgs(img):\n    interval = 5\n    length = 67\n    for x in range(40, img.shape[0] - length, interval + length):\n        for y in range(interval, img.shape[1] - length, interval + length):\n            yield img[x:x + length, y:y + length]\n\n\ndef get_imgs(img):\n    imgs = []\n    for img in _get_imgs(img):\n        imgs.append(phash(img))\n    return imgs\n\n\ndef pretreat():\n    if not os.path.isdir(PATH):\n        download_images()\n    texts, imgs = [], []\n    for img in os.listdir(PATH):\n        img = os.path.join(PATH, img)\n        img = cv2.imread(img, cv2.IMREAD_GRAYSCALE)\n        texts.append(get_text(img))\n        imgs.append(get_imgs(img))\n    return texts, imgs\n\n\ndef load_data(path='data.npz'):\n    if not os.path.isfile(path):\n        texts, imgs = pretreat()\n        np.savez(path, texts=texts, images=imgs)\n    f = np.load(path)\n    return f['texts'], f['images']\n\n\nif __name__ == '__main__':\n    texts, imgs = load_data()\n    print(texts.shape)\n    print(imgs.shape)\n    imgs = imgs.reshape(-1, 8)\n    print(np.unique(imgs, axis=0).shape)\n", "verify/mlearn_for_image.py": "# coding: utf-8\nimport TickerConfig\nif TickerConfig.AUTO_CODE_TYPE == 2:\n    import sys\n\n    import cv2\n    import numpy as np\n    from keras import models\n    from keras import layers\n    from keras import optimizers\n    from keras.applications import VGG16\n    from keras.callbacks import ReduceLROnPlateau\n    from keras.preprocessing.image import ImageDataGenerator\n\n\ndef preprocess_input(x):\n    x = x.astype('float32')\n    # \u6211\u662f\u7528cv2\u6765\u8bfb\u53d6\u7684\u56fe\u7247\uff0c\u5176\u5df2\u7ecf\u662fBGR\u683c\u5f0f\u4e86\n    mean = [103.939, 116.779, 123.68]\n    x -= mean\n    return x\n\n\ndef load_data():\n    # \u8fd9\u662f\u7edf\u8ba1\u5b66\u4e13\u5bb6\u63d0\u4f9b\u7684\u8bad\u7ec3\u96c6\n    data = np.load('captcha.npz')\n    train_x, train_y = data['images'], data['labels']\n    train_x = preprocess_input(train_x)\n    # \u7531\u4e8e\u662f\u7edf\u8ba1\u5f97\u6765\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5728\u6b64\u7ed9\u5b9a\u53ef\u4fe1\u5ea6\n    sample_weight = train_y.max(axis=1) / np.sqrt(train_y.sum(axis=1))\n    sample_weight /= sample_weight.mean()\n    train_y = train_y.argmax(axis=1)\n\n    # \u8fd9\u662f\u4eba\u5de5\u63d0\u4f9b\u7684\u9a8c\u8bc1\u96c6\n    data = np.load('captcha.test.npz')\n    test_x, test_y = data['images'], data['labels']\n    test_x = preprocess_input(test_x)\n    return (train_x, train_y, sample_weight), (test_x, test_y)\n\n\ndef learn():\n    (train_x, train_y, sample_weight), (test_x, test_y) = load_data()\n    datagen = ImageDataGenerator(horizontal_flip=True,\n                                 vertical_flip=True)\n    train_generator = datagen.flow(train_x, train_y, sample_weight=sample_weight)\n    base = VGG16(weights='imagenet', include_top=False, input_shape=(None, None, 3))\n    for layer in base.layers[:-4]:\n        layer.trainable = False\n    model = models.Sequential([\n        base,\n        layers.BatchNormalization(),\n        layers.Conv2D(64, (3, 3), activation='relu', padding='same'),\n        layers.GlobalAveragePooling2D(),\n        layers.BatchNormalization(),\n        layers.Dense(64, activation='relu'),\n        layers.BatchNormalization(),\n        layers.Dropout(0.20),\n        layers.Dense(80, activation='softmax')\n    ])\n    model.compile(optimizer=optimizers.RMSprop(lr=1e-5),\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy'])\n    model.summary()\n    reduce_lr = ReduceLROnPlateau(verbose=1)\n    model.fit_generator(train_generator, epochs=400,\n                        steps_per_epoch=100,\n                        validation_data=(test_x[:800], test_y[:800]),\n                        callbacks=[reduce_lr])\n    result = model.evaluate(test_x, test_y)\n    print(result)\n    model.save('12306.image.model.h5', include_optimizer=False)\n\n\ndef predict(imgs):\n    imgs = preprocess_input(imgs)\n    model = models.load_model('12306.image.model.h5')\n    labels = model.predict(imgs)\n    return labels\n\n\ndef _predict(fn):\n    imgs = cv2.imread(fn)\n    imgs = cv2.resize(imgs, (67, 67))\n    imgs.shape = (-1, 67, 67, 3)\n    labels = predict(imgs)\n    print(labels.max(axis=1))\n    print(labels.argmax(axis=1))\n\n\nif __name__ == '__main__':\n    if len(sys.argv) >= 2:\n        _predict(sys.argv[1])\n    else:\n        learn()\n", "verify/localVerifyCode.py": "# coding: utf-8\nimport TickerConfig\n\nif TickerConfig.AUTO_CODE_TYPE == 2:\n    import base64\n    import os\n    import cv2\n    import numpy as np\n    from keras import models, backend\n    import tensorflow as tf\n    from verify import pretreatment\n    from verify.mlearn_for_image import preprocess_input\n\n    graph = tf.get_default_graph()\n\nPATH = lambda p: os.path.abspath(\n    os.path.join(os.path.dirname(__file__), p)\n)\n\n\nTEXT_MODEL = \"\"\nIMG_MODEL = \"\"\n\n\ndef get_text(img, offset=0):\n    text = pretreatment.get_text(img, offset)\n    text = cv2.cvtColor(text, cv2.COLOR_BGR2GRAY)\n    text = text / 255.0\n    h, w = text.shape\n    text.shape = (1, h, w, 1)\n    return text\n\n\ndef base64_to_image(base64_code):\n    # base64\u89e3\u7801\n    img_data = base64.b64decode(base64_code)\n    # \u8f6c\u6362\u4e3anp\u6570\u7ec4\n    img_array = np.fromstring(img_data, np.uint8)\n    # \u8f6c\u6362\u6210opencv\u53ef\u7528\u683c\u5f0f\n    img = cv2.imdecode(img_array, cv2.COLOR_RGB2BGR)\n\n    return img\n\n\nclass Verify:\n    def __init__(self):\n        self.textModel = \"\"\n        self.imgModel = \"\"\n        self.loadImgModel()\n        self.loadTextModel()\n\n    def loadTextModel(self):\n        if not self.textModel:\n            self.textModel = models.load_model(PATH('../model.v2.0.h5'))\n        else:\n            print(\"\u65e0\u9700\u52a0\u8f7d\u6a21\u578bmodel.v2.0.h5\")\n\n    def loadImgModel(self):\n        if not self.imgModel:\n            self.imgModel = models.load_model(PATH('../12306.image.model.h5'))\n\n    def verify(self, fn):\n        verify_titles = ['\u6253\u5b57\u673a', '\u8c03\u8272\u677f', '\u8dd1\u6b65\u673a', '\u6bdb\u7ebf', '\u8001\u864e', '\u5b89\u5168\u5e3d', '\u6c99\u5305', '\u76d8\u5b50', '\u672c\u5b50', '\u836f\u7247', '\u53cc\u9762\u80f6', '\u9f99\u821f', '\u7ea2\u9152', '\u62d6\u628a', '\u5377\u5c3a',\n                         '\u6d77\u82d4', '\u7ea2\u8c46', '\u9ed1\u677f', '\u70ed\u6c34\u888b', '\u70db\u53f0', '\u949f\u8868', '\u8def\u706f', '\u6c99\u62c9', '\u6d77\u62a5', '\u516c\u4ea4\u5361', '\u6a31\u6843', '\u521b\u53ef\u8d34', '\u724c\u574a', '\u82cd\u8747\u62cd', '\u9ad8\u538b\u9505',\n                         '\u7535\u7ebf', '\u7f51\u7403\u62cd', '\u6d77\u9e25', '\u98ce\u94c3', '\u8ba2\u4e66\u673a', '\u51b0\u7bb1', '\u8bdd\u6885', '\u6392\u98ce\u673a', '\u9505\u94f2', '\u7eff\u8c46', '\u822a\u6bcd', '\u7535\u5b50\u79e4', '\u7ea2\u67a3', '\u91d1\u5b57\u5854', '\u97ad\u70ae',\n                         '\u83e0\u841d', '\u5f00\u74f6\u5668', '\u7535\u996d\u7172', '\u4eea\u8868\u76d8', '\u68c9\u68d2', '\u7bee\u7403', '\u72ee\u5b50', '\u8682\u8681', '\u8721\u70db', '\u8336\u76c5', '\u5370\u7ae0', '\u8336\u51e0', '\u5564\u9152', '\u6863\u6848\u888b', '\u6302\u949f', '\u523a\u7ee3',\n                         '\u94c3\u94db', '\u62a4\u8155', '\u624b\u638c\u5370', '\u9526\u65d7', '\u6587\u5177\u76d2', '\u8fa3\u6912\u9171', '\u8033\u585e', '\u4e2d\u56fd\u7ed3', '\u8725\u8734', '\u526a\u7eb8', '\u6f0f\u6597', '\u9523', '\u84b8\u7b3c', '\u73ca\u745a', '\u96e8\u9774', '\u85af\u6761',\n                         '\u871c\u8702', '\u65e5\u5386', '\u53e3\u54e8']\n        # \u8bfb\u53d6\u5e76\u9884\u5904\u7406\u9a8c\u8bc1\u7801\n        img = base64_to_image(fn)\n        text = get_text(img)\n        imgs = np.array(list(pretreatment._get_imgs(img)))\n        imgs = preprocess_input(imgs)\n        text_list = []\n        # \u8bc6\u522b\u6587\u5b57\n        self.loadTextModel()\n        global graph\n        with graph.as_default():\n            label = self.textModel.predict(text)\n        label = label.argmax()\n        text = verify_titles[label]\n        text_list.append(text)\n        # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u8bcd\n        # \u6839\u636e\u7b2c\u4e00\u4e2a\u8bcd\u7684\u957f\u5ea6\u6765\u5b9a\u4f4d\u7b2c\u4e8c\u4e2a\u8bcd\u7684\u4f4d\u7f6e\n        if len(text) == 1:\n            offset = 27\n        elif len(text) == 2:\n            offset = 47\n        else:\n            offset = 60\n        text = get_text(img, offset=offset)\n        if text.mean() < 0.95:\n            with graph.as_default():\n                label = self.textModel.predict(text)\n            label = label.argmax()\n            text = verify_titles[label]\n            text_list.append(text)\n        print(\"\u9898\u76ee\u4e3a{}\".format(text_list))\n        # \u52a0\u8f7d\u56fe\u7247\u5206\u7c7b\u5668\n        self.loadImgModel()\n        with graph.as_default():\n            labels = self.imgModel.predict(imgs)\n        labels = labels.argmax(axis=1)\n        results = []\n        for pos, label in enumerate(labels):\n            l = verify_titles[label]\n            print(pos + 1, l)\n            if l in text_list:\n                results.append(str(pos + 1))\n        return results\n\n\nif __name__ == '__main__':\n    pass\n    # verify(\"verify-img1.jpeg\")\n", "verify/__init__.py": "", "config/configCommon.py": "# -*- coding: utf-8 -*-\nimport datetime\nimport os\nimport random\nimport sys\nimport time\n\nfrom myException.ticketConfigException import ticketConfigException\n\nrushRefreshMinTimeIntval = 2000\nrushRefreshMaxTimeIntval = 3600000\nrushRefreshTimeIntval = 100\n# \u6700\u65e9\u8fd0\u884c\u65f6\u95f4\nmaxRunTime = 6\n# \u7a0b\u5e8f\u505c\u6b62\u65f6\u95f4\nmaxRunStopTime = 23\n# \u53ef\u552e\u5929\u6570\nmaxDate = 29\n\nRS_SUC = 0\nRS_TIMEOUT = 1\nRS_JSON_ERROR = 2\nRS_OTHER_ERROR = 3\n\nseat_conf = {'\u5546\u52a1\u5ea7': 32,\n             '\u4e00\u7b49\u5ea7': 31,\n             '\u4e8c\u7b49\u5ea7': 30,\n             '\u7279\u7b49\u5ea7': 25,\n             '\u8f6f\u5367': 23,\n             '\u786c\u5367': 28,\n             '\u8f6f\u5ea7': 24,\n             '\u786c\u5ea7': 29,\n             '\u65e0\u5ea7': 26,\n             '\u52a8\u5367': 33,\n             }\nif sys.version_info.major == 2:\n    seat_conf_2 = dict([(v, k) for (k, v) in seat_conf.iteritems()])\nelse:\n    seat_conf_2 = dict([(v, k) for (k, v) in seat_conf.items()])\n\n\ndef getNowTimestamp():\n    return time.time()\n\n\ndef decMakeDir(func):\n    def handleFunc(*args, **kwargs):\n        dirname = func(*args, **kwargs)\n        if not os.path.exists(dirname):\n            os.makedirs(dirname)\n        elif not os.path.isdir(dirname):\n            pass\n\n        return dirname\n\n    return func\n\n\ndef getWorkDir():\n    return os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n#\n# def fileOpen(path):\n#     \"\"\"\n#     \u6587\u4ef6\u8bfb\u53d6\u517c\u5bb92\u548c3\n#     :param path: \u6587\u4ef6\u8bfb\u53d6\u8def\u5f84\n#     :return:\n#     \"\"\"\n#     try:\n#         with open(path, \"r\", ) as f:\n#             return f\n#     except TypeError:\n#         with open(path, \"r\", ) as f:\n#             return f\n\n\n\n@decMakeDir\ndef getTmpDir():\n    return os.path.join(getWorkDir(), \"tmp\")\n\n\n@decMakeDir\ndef getLogDir():\n    return os.path.join(getTmpDir(), \"log\")\n\n\n@decMakeDir\ndef getCacheDir():\n    return os.path.join(getTmpDir(), \"cache\")\n\n\n@decMakeDir\ndef getVCodeDir():\n    return os.path.join(getTmpDir(), \"vcode\")\n\n\ndef getVCodeImageFile(imageName):\n    return os.path.join(getVCodeDir(), imageName + \".jpg\")\n\n\ndef getCacheFile(cacheType):\n    return os.path.join(getCacheDir(), cacheType + \".cache\")\n\n\ndef checkSleepTime(session):\n    now = datetime.datetime.now()\n    if now.hour >= maxRunStopTime or now.hour < maxRunTime:\n        print(u\"12306\u4f11\u606f\u65f6\u95f4\uff0c\u672c\u7a0b\u5e8f\u81ea\u52a8\u505c\u6b62,\u660e\u5929\u65e9\u4e0a\u516d\u70b9\u5c06\u81ea\u52a8\u8fd0\u884c\")\n        open_time = datetime.datetime(now.year, now.month, now.day, maxRunTime)\n        if open_time < now:\n            open_time += datetime.timedelta(1)\n        time.sleep((open_time - now).seconds + round(random.uniform(1, 10)))\n        session.call_login()\n\n\ndef checkDate(station_dates):\n    \"\"\"\n    \u68c0\u67e5\u65e5\u671f\u662f\u5426\u5408\u6cd5\n    :param station_dates:\n    :return:\n    \"\"\"\n    today = datetime.datetime.now()\n    maxDay = (today + datetime.timedelta(maxDate)).strftime(\"%Y-%m-%d\")\n    for station_date in station_dates[::-1]:\n        date = datetime.datetime.strftime(datetime.datetime.strptime(station_date, \"%Y-%m-%d\"), \"%Y-%m-%d\")\n        if date < today.strftime(\"%Y-%m-%d\") or date > maxDay:\n            print(u\"\u8b66\u544a\uff1a\u5f53\u524d\u65f6\u95f4\u914d\u7f6e\u6709\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u6216\u8005\u5927\u4e8e\u6700\u5927\u65f6\u95f4: {}, \u5df2\u81ea\u52a8\u5ffd\u7565\".format(station_date))\n            station_dates.remove(station_date)\n            if not station_dates:\n                print(u\"\u5f53\u524d\u65e5\u671f\u8bbe\u7f6e\u65e0\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\uff0c\u5df2\u88ab\u5168\u90e8\u5220\u9664\uff0c\u8bf7\u67e5\u8bc1\u540e\u6dfb\u52a0!!!\")\n                raise ticketConfigException(u\"\u5f53\u524d\u65e5\u671f\u8bbe\u7f6e\u65e0\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\uff0c\u5df2\u88ab\u5168\u90e8\u5220\u9664\uff0c\u8bf7\u67e5\u8bc1\u540e\u6dfb\u52a0!!!\")\n        else:\n            station_dates[station_dates.index(station_date)] = date\n    return station_dates", "config/urlConf.py": "# coding=utf-8\nimport random\nimport TickerConfig\nimport time\n\nurls = {\n    \"auth\": {  # \u767b\u5f55\u63a5\u53e3\n        \"req_url\": \"/passport/web/auth/uamtk\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_json\": True,\n        \"is_cdn\": True,\n    },\n    \"uamtk-static\": {  # \u767b\u5f55\u63a5\u53e3\n        \"req_url\": \"/passport/web/auth/uamtk-static\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 3,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_json\": True,\n        \"is_cdn\": True,\n    },\n    \"login\": {   # \u767b\u5f55\u63a5\u53e3\n        \"req_url\": \"/passport/web/login\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.5,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n\n    },\n    \"left_ticket_init\": {   # \u767b\u5f55\u63a5\u53e3\n        \"req_url\": \"/otn/leftTicket/init\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n\n    },\n    \"getCodeImg\": {  # \u767b\u5f55\u9a8c\u8bc1\u7801\n        \"req_url\": \"/passport/captcha/captcha-image?login_site=E&module=login&rand=sjrand&{0}\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_json\": False,\n        \"is_cdn\": True,\n        \"not_decode\": True,\n    },\n    \"getCodeImg1\": {  # \u767b\u5f55\u9a8c\u8bc1\u7801\n        \"req_url\": \"/passport/captcha/captcha-image64?login_site=E&module=login&rand=sjrand&{0}&callback=jQuery19108016482864806321_1554298927290&_=1554298927293\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"codeCheck\": {  # \u9a8c\u8bc1\u7801\u6821\u9a8c\n        \"req_url\": \"/passport/captcha/captcha-check\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"codeCheck1\": {  # \u9a8c\u8bc1\u7801\u6821\u9a8c\n        \"req_url\": \"/passport/captcha/captcha-check?callback=jQuery19108016482864806321_1554298927290&answer={0}&rand=sjrand&login_site=E&_={1}\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/resources/login.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": False,\n    },\n    \"loginInit\": {  # \u767b\u5f55\u9875\u9762\n        \"req_url\": \"/otn/login/init\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/index/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 1,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"loginInitCdn\": {  # \u767b\u5f55\u9875\u9762\n        \"req_url\": \"/otn/login/init\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/index/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 1,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_test_cdn\": True,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"loginInitCdn1\": {  # \u767b\u5f55\u9875\u9762\n        \"req_url\": \"/otn/resources/login.html\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/view/index.html\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 1,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_test_cdn\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"getDevicesId\": {  # \u83b7\u53d6\u7528\u6237\u4fe1\u606f\n        \"req_url\": \"/otn/HttpZF/logdevice\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/passport?redirect=/otn/\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": False,\n    },\n    \"getUserInfo\": {  # \u83b7\u53d6\u7528\u6237\u4fe1\u606f\n        \"req_url\": \"/otn/index/initMy12306\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/passport?redirect=/otn/login/userLogin\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": False,\n        \"is_json\": False,\n    },\n    \"userLogin\": {  # \u7528\u6237\u767b\u5f55\n        \"req_url\": \"/otn/login/userLogin\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/passport?redirect=/otn/login/userLogin\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"uamauthclient\": {  # \u767b\u5f55\n        \"req_url\": \"/otn/uamauthclient\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/passport?redirect=/otn/login/userLogin\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 1,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"initdc_url\": {  # \u751f\u6210\u8ba2\u5355\u9875\u9762\n        \"req_url\": \"/otn/confirmPassenger/initDc\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.1,\n        \"s_time\": 1,\n        \"is_logger\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"GetJS\": {   # \u8ba2\u5355\u9875\u9762js\n        \"req_url\": \"/otn/HttpZF/GetJS\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.1,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"odxmfwg\": {  # \u8ba2\u5355\u9875\u9762js\n        \"req_url\": \"/otn/dynamicJs/odxmfwg\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.1,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"get_passengerDTOs\": {  # \u83b7\u53d6\u4e58\u8f66\u4eba\n        \"req_url\": \"/otn/confirmPassenger/getPassengerDTOs\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.1,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"select_url\": {  # \u67e5\u8be2\u4f59\u7968\n        \"req_url\": \"/otn/{3}?leftTicketDTO.train_date={0}&leftTicketDTO.from_station={1}&leftTicketDTO.to_station={2}&purpose_codes=ADULT\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 1,\n        \"re_time\": 0.01,\n        \"s_time\": 0.01,\n        \"is_logger\": False,\n        \"is_json\": True,\n        \"is_cdn\": True,\n    },\n    \"check_user_url\": {  # \u68c0\u67e5\u7528\u6237\u767b\u5f55\n        \"req_url\": \"/otn/login/checkUser\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 1,\n        \"re_time\": 1,\n        \"s_time\": 1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"submit_station_url\": {  # \u63d0\u4ea4\u8ba2\u5355\n        \"req_url\": \"/otn/leftTicket/submitOrderRequest\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"checkOrderInfoUrl\": {  # \u68c0\u67e5\u8ba2\u5355\u4fe1\u606f\u89c4\u8303\n        \"req_url\": \"/otn/confirmPassenger/checkOrderInfo\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"getQueueCountUrl\": {  # \u5269\u4f59\u4f59\u7968\u6570\n        \"req_url\": \"/otn/confirmPassenger/getQueueCount\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"checkQueueOrderUrl\": {  # \u8ba2\u5355\u961f\u5217\u6392\u961f\n        \"req_url\": \"/otn/confirmPassenger/confirmSingleForQueue\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"checkRandCodeAnsyn\": {  # \u6682\u65f6\u6ca1\u7528\u5230\n        \"req_url\": \"/otn/passcodeNew/checkRandCodeAnsyn\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"codeImgByOrder\": {  # \u8ba2\u5355\u9875\u9762\u9a8c\u8bc1\u7801\n        \"req_url\": \"/otn/passcodeNew/getPassCodeNew?module=passenger&rand=randp&{}\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"queryOrderWaitTimeUrl\": {  # \u8ba2\u5355\u7b49\u5f85\u9875\u9762\n        \"req_url\": \"/otn/confirmPassenger/queryOrderWaitTime?random={0}&tourFlag=dc&_json_att=\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/confirmPassenger/initDc\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"queryMyOrderNoCompleteUrl\": {  # \u8ba2\u5355\u67e5\u8be2\u9875\u9762\n        \"req_url\": \"/otn/queryOrder/queryMyOrderNoComplete\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/queryOrder/initNoComplete\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"initNoCompleteUrl\": {  # \u83b7\u53d6\u8ba2\u5355\u5217\u8868\n        \"req_url\": \"/otn/queryOrder/initNoComplete\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/queryOrder/initNoComplete\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_cdn\": True,\n        \"is_json\": False,\n    },\n    \"cancelNoCompleteMyOrder\": {  # \u53d6\u6d88\u8ba2\u5355\n        \"req_url\": \"/otn/queryOrder/cancelNoCompleteMyOrder\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/queryOrder/initNoComplete\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"autoSubmitOrderRequest\": {  # \u5feb\u901f\u81ea\u52a8\u63d0\u4ea4\u8ba2\u5355\n        \"req_url\": \"/otn/confirmPassenger/autoSubmitOrderRequest\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"getQueueCountAsync\": {  # \u5feb\u901f\u83b7\u53d6\u8ba2\u5355\u6570\u636e\n        \"req_url\": \"/otn/confirmPassenger/getQueueCountAsync\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"Content-Type\": 1,\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"confirmSingleForQueueAsys\": {  # \u5feb\u901f\u8ba2\u5355\u6392\u961f\n        \"req_url\": \"/otn/confirmPassenger/confirmSingleForQueueAsys\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Content-Type\": 1,\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_cdn\": True,\n        \"is_json\": True,\n    },\n    \"Pushbear\": {  # push\u901a\u77e5\n        \"req_url\": \"/sub\",\n        \"req_type\": \"post\",\n        \"Referer\": \"\",\n        \"Content-Type\": 1,\n        \"Host\": \"pushbear.ftqq.com\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": False,\n        \"is_json\": True,\n    },\n    \"ServerChan\": {  # Server\u9171 push\u901a\u77e5\n        \"req_url\": \"/\",\n        \"req_type\": \"get\",\n        \"Referer\": \"\",\n        \"Content-Type\": 1,\n        \"Host\": \"sc.ftqq.com\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"loginHtml\": {  # \u767b\u5f55\u63a5\u53e32\n        \"req_url\": \"/otn/resources/login.html\",\n        \"req_type\": \"get\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.3,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"loginConf\": {  # \u767b\u5f55\u63a5\u53e32\n        \"req_url\": \"/otn/login/conf\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.3,\n        \"s_time\": 0.1,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"loginAysnSuggest\": {  # \u767b\u5f55\u63a5\u53e32\n        \"req_url\": \"/otn/login/loginAysnSuggest\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.3,\n        \"is_cdn\": True,\n        \"s_time\": 0.1,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n\n\n\n    # \u5019\u8865\u8ba2\u5355\u63a5\u53e3\n\n    \"chechFace\": {  # \u4eba\u8138\u8bc6\u522b\n        \"req_url\": \"/otn/afterNate/chechFace\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"getSuccessRate\": {  # \u6210\u529f\u4fe1\u606f\n        \"req_url\": \"/otn/afterNate/getSuccessRate\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"SubmitOrderRequestRsp\": {  # \u63d0\u4ea4\u5019\u8865\u8ba2\u5355\u51c6\u5907\n        \"req_url\": \"/otn/afterNate/submitOrderRequest\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"confirmHB\": {  # \u8bbe\u7f6e\u8ba2\u5355\u4fe1\u606f\n        \"req_url\": \"/otn/afterNate/confirmHB\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"queryQueue\": {  # \u6392\u961f\n        \"req_url\": \"/otn/afterNate/queryQueue\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n    \"passengerInitApi\": {  # \u6392\u961f\n        \"req_url\": \"/otn/afterNate/passengerInitApi\",\n        \"req_type\": \"post\",\n        \"Referer\": \"https://kyfw.12306.cn/otn/leftTicket/init\",\n        \"Host\": \"kyfw.12306.cn\",\n        \"re_try\": 10,\n        \"re_time\": 0.01,\n        \"s_time\": 0.01,\n        \"is_cdn\": True,\n        \"is_logger\": True,\n        \"is_json\": True,\n    },\n\n    \"autoVerifyImage\": {  # \u4e91\u6253\u7801\u63a5\u53e3\n        \"req_url\": TickerConfig.REQ_URL,\n        \"req_type\": \"post\",\n        \"Referer\": \"\",\n        \"Host\": TickerConfig.HOST,\n        \"re_try\": 6,\n        \"re_time\": 10,\n        \"s_time\": 0.001,\n        \"is_logger\": True,\n        \"is_json\": True,\n        \"httpType\": TickerConfig.HTTP_TYPE\n    },\n}", "config/getCookie.py": "import json\nimport random\nimport re\nimport time\nimport os\nimport TickerConfig\nfrom config.urlConf import urls\n\n\ndef getDrvicesID(session):\n    \"\"\"\n    :return:\n    \"\"\"\n    print(\"cookie\u83b7\u53d6\u4e2d\")\n    if TickerConfig.COOKIE_TYPE is 1:\n        from selenium import webdriver\n        cookies = []\n        # \u89e3\u51b3\u653e\u955c\u50cf\u91cc DevToolsActivePort file doesn't exist\u7684\u95ee\u9898\n        options = webdriver.ChromeOptions()\n        if os.name != 'nt' and TickerConfig.CHROME_CHROME_PATH:\n            options = webdriver.ChromeOptions()\n            options.binary_location = TickerConfig.CHROME_CHROME_PATH\n            options.add_argument(\n                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36')\n            options.add_argument(\"--no-sandbox\")\n            options.add_argument(\"--headless\")\n        driver = webdriver.Chrome(executable_path=TickerConfig.CHROME_PATH,chrome_options=options)\n        driver.get(\"https://www.12306.cn/index/index.html\")\n        time.sleep(10)\n        for c in driver.get_cookies():\n            cookie = dict()\n            print()\n            if c.get(\"name\") == \"RAIL_DEVICEID\" or c.get(\"name\") == \"RAIL_EXPIRATION\":\n                cookie[c.get(\"name\")] = c.get(\"value\")\n                cookies.append(cookie)\n        print(f\"\u83b7\u53d6cookie: {cookies}\")\n        if cookies:\n            session.httpClint.set_cookies(cookies)\n            session.cookies = cookies\n        print(\"cookie\u83b7\u53d6\u5b8c\u6210\")\n    elif TickerConfig.COOKIE_TYPE is 2:\n        request_device_id(session)\n    elif TickerConfig.COOKIE_TYPE is 3:\n        # RAIL_DEVICEID,RAIL_EXPIRATION\u7684\u503c\u6253\u5f0012306\u5b98\u7f51\u53ef\u4ee5\u83b7\u53d6headers-Cookies\n        if not TickerConfig.RAIL_DEVICEID or not TickerConfig.RAIL_EXPIRATION:\n            print(\"\u8b66\u544a\uff01\uff01: RAIL_DEVICEID,RAIL_EXPIRATION\u7684\u503c\u4e3a\u7a7a\uff0c\u8bf7\u624b\u52a8\u6253\u5f0012306\u5b98\u7f51\u53ef\u4ee5\u83b7\u53d6headers-Cookies\u4e2d\u7684RAIL_DEVICEID,RAIL_EXPIRATION\uff0c\u586b\u5165\u914d\u7f6e\u6587\u4ef6\u4e2d\")\n        cookies = [{\n            \"RAIL_DEVICEID\": TickerConfig.RAIL_DEVICEID,\n            \"RAIL_EXPIRATION\": TickerConfig.RAIL_EXPIRATION,\n        }]\n        session.httpClint.set_cookies(cookies)\n        session.cookies = cookies\n\n\ndef request_device_id(session):\n    \"\"\"\n    \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6d4f\u89c8\u5668\u7279\u5f81 ID\n    :return:\n    \"\"\"\n    params = {\"algID\": request_alg_id(session), \"timestamp\": int(time.time() * 1000)}\n    params = dict(params, **_get_hash_code_params())\n    response = session.httpClint.send(urls.get(\"getDevicesId\"), params=params)\n    if response.find('callbackFunction') >= 0:\n        result = response[18:-2]\n        try:\n            result = json.loads(result)\n            session.httpClint.set_cookies([{\n                'RAIL_EXPIRATION': result.get('exp'),\n                'RAIL_DEVICEID': result.get('dfp'),\n            }])\n            session.cookies = [{\n                'RAIL_EXPIRATION': result.get('exp'),\n                'RAIL_DEVICEID': result.get('dfp'),\n            }]\n        except:\n            return False\n\n\ndef request_alg_id(session):\n    response = session.httpClint.send(urls.get(\"GetJS\"))\n    result = re.search(r'algID\\\\x3d(.*?)\\\\x26', response)\n    try:\n        return result.group(1)\n    except (IndexError, AttributeError) as e:\n        pass\n    return \"\"\n\n\ndef _get_hash_code_params():\n    from collections import OrderedDict\n    data = {\n        'adblock': '0',\n        'browserLanguage': 'en-US',\n        'cookieEnabled': '1',\n        'custID': '133',\n        'doNotTrack': 'unknown',\n        'flashVersion': '0',\n        'javaEnabled': '0',\n        'jsFonts': 'c227b88b01f5c513710d4b9f16a5ce52',\n        'localCode': '3232236206',\n        'mimeTypes': '52d67b2a5aa5e031084733d5006cc664',\n        'os': 'MacIntel',\n        'platform': 'WEB',\n        'plugins': 'd22ca0b81584fbea62237b14bd04c866',\n        'scrAvailSize': str(random.randint(500, 1000)) + 'x1920',\n        'srcScreenSize': '24xx1080x1920',\n        'storeDb': 'i1l1o1s1',\n        'timeZone': '-8',\n        'touchSupport': '99115dfb07133750ba677d055874de87',\n        'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.' + str(\n            random.randint(\n                5000, 7000)) + '.0 Safari/537.36',\n        'webSmartID': 'f4e3b7b14cc647e30a6267028ad54c56',\n    }\n    data_trans = {\n        'browserVersion': 'd435',\n        'touchSupport': 'wNLf',\n        'systemLanguage': 'e6OK',\n        'scrWidth': 'ssI5',\n        'openDatabase': 'V8vl',\n        'scrAvailSize': 'TeRS',\n        'hasLiedResolution': '3neK',\n        'hasLiedOs': 'ci5c',\n        'timeZone': 'q5aJ',\n        'userAgent': '0aew',\n        'userLanguage': 'hLzX',\n        'jsFonts': 'EOQP',\n        'scrAvailHeight': '88tV',\n        'browserName': '-UVA',\n        'cookieCode': 'VySQ',\n        'online': '9vyE',\n        'scrAvailWidth': 'E-lJ',\n        'flashVersion': 'dzuS',\n        'scrDeviceXDPI': '3jCe',\n        'srcScreenSize': 'tOHY',\n        'storeDb': 'Fvje',\n        'doNotTrack': 'VEek',\n        'mimeTypes': 'jp76',\n        'sessionStorage': 'HVia',\n        'cookieEnabled': 'VPIf',\n        'os': 'hAqN',\n        'hasLiedLanguages': 'j5po',\n        'hasLiedBrowser': '2xC5',\n        'webSmartID': 'E3gR',\n        'appcodeName': 'qT7b',\n        'javaEnabled': 'yD16',\n        'plugins': 'ks0Q',\n        'appMinorVersion': 'qBVW',\n        'cpuClass': 'Md7A',\n        'indexedDb': '3sw-',\n        'adblock': 'FMQw',\n        'localCode': 'lEnu',\n        'browserLanguage': 'q4f3',\n        'scrHeight': '5Jwy',\n        'localStorage': 'XM7l',\n        'historyList': 'kU5z',\n        'scrColorDepth': \"qmyu\"\n    }\n    data = OrderedDict(data)\n    d = ''\n    params = {}\n    for key, item in data.items():\n        d += key + item\n        key = data_trans[key] if key in data_trans else key\n        params[key] = item\n    d_len = len(d)\n    d_f = int(d_len / 3) if d_len % 3 == 0 else int(d_len / 3) + 1\n    if d_len >= 3:\n        d = d[d_f:2 * d_f] + d[2 * d_f:d_len] + d[0: d_f]\n    d_len = len(d)\n    d_f = int(d_len / 3) if d_len % 3 == 0 else int(d_len / 3) + 1\n    if d_len >= 3:\n        d = d[2 * d_f:d_len] + d[0: d_f] + d[1 * d_f: 2 * d_f]\n\n    d = _encode_data_str_v2(d)\n    d = _encode_data_str_v2(d)\n    d = _encode_data_str_v2(d)\n    data_str = _encode_string(d)\n    params['hashCode'] = data_str\n    return params\n\n\ndef _encode_data_str_v2(d):\n    b = len(d)\n    if b % 2 == 0:\n        return d[b // 2: b] + d[0:b // 2]\n    else:\n        return d[b // 2 + 1:b] + d[b // 2] + d[0:b // 2]\n\n\ndef _encode_string(str):\n    import hashlib\n    import base64\n    result = base64.b64encode(hashlib.sha256(str.encode()).digest()).decode()\n    return result.replace('+', '-').replace('/', '_').replace('=', '')\n", "config/serverchanConf.py": "# -*- coding: utf8 -*-\nimport TickerConfig\nfrom config.urlConf import urls\nfrom myUrllib.httpUtils import HTTPClient\n\nPUSH_SERVER_CHAN_PATH = \"https://sc.ftqq.com\"\n\n\ndef sendServerChan(msg):\n    \"\"\"\n    pushBear\u5fae\u4fe1\u901a\u77e5\n    :param str: \u901a\u77e5\u5185\u5bb9 content\n    :return:\n    \"\"\"\n    if (\n        TickerConfig.SERVER_CHAN_CONF[\"is_server_chan\"]\n        and TickerConfig.SERVER_CHAN_CONF[\"secret\"].strip() != \"\"\n    ):\n        try:\n            secret = TickerConfig.SERVER_CHAN_CONF[\"secret\"].strip()\n            sendServerChanUrls = urls.get(\"ServerChan\")\n            sendServerChanUrls[\"req_url\"] += f'{secret}.send'\n\n            params = {\"text\": \"\u6613\u884c\u8d2d\u7968\u6210\u529f\u901a\u77e5\", \"desp\": msg}\n            httpClint = HTTPClient(0)\n            sendServerChanRsp = httpClint.send(sendServerChanUrls, params=params)\n            if sendServerChanRsp.get(\"errno\") == 0:\n                print(u\"\u5df2\u4e0b\u53d1 Server\u9171 \u5fae\u4fe1\u901a\u77e5, \u8bf7\u67e5\u6536\")\n            else:\n                print(sendServerChanRsp)\n        except Exception as e:\n            print(u\"Server\u9171 \u914d\u7f6e\u6709\u8bef {}\".format(e))\n\n\nif __name__ == \"__main__\":\n    sendServerChan(1)\n", "config/TicketEnmu.py": "# coding=utf-8\nfrom enum import Enum\n\n\nclass ticket(object):\n    QUERY_C = u\"\u67e5\u8be2\u5230\u6709\u4f59\u7968\uff0c\u5c1d\u8bd5\u63d0\u4ea4\u8ba2\u5355\"\n    QUERY_IN_BLACK_LIST = u\"\u8be5\u8f66\u6b21{} \u6b63\u5728\u88ab\u5173\u5c0f\u9ed1\u5c4b\uff0c\u8df3\u8fc7\u6b64\u8f66\u6b21\"\n\n    SUCCESS_CODE = 000000\n    FAIL_CODE = 999999\n    AUTO_SUBMIT_ORDER_REQUEST_C = u\"\u63d0\u4ea4\u8ba2\u5355\u6210\u529f\"\n    AUTO_SUBMIT_ORDER_REQUEST_F = u\"\u63d0\u4ea4\u8ba2\u5355\u5931\u8d25\uff0c\u91cd\u65b0\u5237\u7968\u4e2d\"\n    AUTO_SUBMIT_NEED_CODE = u\"\u9700\u8981\u9a8c\u8bc1\u7801\"\n    AUTO_SUBMIT_NOT_NEED_CODE = u\"\u4e0d\u9700\u8981\u9a8c\u8bc1\u7801\"\n\n    TICKET_BLACK_LIST_TIME = 5  # \u52a0\u5165\u5c0f\u9ed1\u5c4b\u7684\u7b49\u5f85\u65f6\u95f4\uff0c\u9ed8\u8ba45 min\n\n    DTO_NOT_FOUND = u\"\u672a\u67e5\u627e\u5230\u5e38\u7528\u8054\u7cfb\u4eba, \u8bf7\u67e5\u8bc1\u540e\u6dfb\u52a0!!\"\n    DTO_NOT_IN_LIST = u\"\u8054\u7cfb\u4eba\u4e0d\u5728\u5217\u8868\u4e2d\uff0c\u8bf7\u67e5\u8bc1\u540e\u6dfb\u52a0!!\"\n\n    QUEUE_TICKET_SHORT = u\"\u5f53\u524d\u4f59\u7968\u6570\u5c0f\u4e8e\u4e58\u8f66\u4eba\u6570\uff0c\u653e\u5f03\u8ba2\u7968\"\n    QUEUE_TICKET_SUCCESS = u\"\u6392\u961f\u6210\u529f, \u5f53\u524d\u4f59\u7968\u8fd8\u5269\u4f59: {0}\u5f20\"\n    QUEUE_JOIN_BLACK = u\"\u6392\u961f\u53d1\u73b0\u672a\u77e5\u9519\u8bef{0}\uff0c\u5c06\u6b64\u5217\u8f66 {1}\u52a0\u5165\u5c0f\u9ed1\u5c4b\"\n    QUEUE_WARNING_MSG = u\"\u6392\u961f\u5f02\u5e38\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{0}, \u5c06\u6b64\u5217\u8f66 {1}\u52a0\u5165\u5c0f\u9ed1\u5c4b\"\n\n    OUT_NUM = 120  # \u6392\u961f\u8bf7\u6c4212306\u7684\u6b21\u6570\n    WAIT_OUT_NUM = u\"\u8d85\u51fa\u6392\u961f\u65f6\u95f4\uff0c\u81ea\u52a8\u653e\u5f03\uff0c\u6b63\u5728\u91cd\u65b0\u5237\u7968\"\n    WAIT_ORDER_SUCCESS = u\"\u606d\u559c\u60a8\u8ba2\u7968\u6210\u529f\uff0c\u8ba2\u5355\u53f7\u4e3a\uff1a{0}, \u8bf7\u7acb\u5373\u6253\u5f00\u6d4f\u89c8\u5668\u767b\u5f5512306\uff0c\u8bbf\u95ee\u2018\u672a\u5b8c\u6210\u8ba2\u5355\u2019\uff0c\u572830\u5206\u949f\u5185\u5b8c\u6210\u652f\u4ed8!\"\n    WAIT_AFTER_NATE_SUCCESS = u\"\u5019\u8865\u8ba2\u5355\u5df2\u5b8c\u6210\uff0c\u8bf7\u7acb\u5373\u6253\u5f00\u6d4f\u89c8\u5668\u767b\u5f5512306\uff0c\u8bbf\u95ee\u2018\u5019\u8865\u8ba2\u5355\u2019\uff0c\u572830\u5206\u949f\u5185\u5b8c\u6210\u652f\u4ed8!\"\n    WAIT_ORDER_CONTINUE = u\"\u6392\u961f\u7b49\u5f85\u65f6\u95f4\u9884\u8ba1\u8fd8\u5269 {0} ms\"\n    WAIT_ORDER_FAIL = u\"\u6392\u961f\u7b49\u5f85\u5931\u8d25\uff0c\u9519\u8bef\u6d88\u606f\uff1a{0}\"\n    WAIT_ORDER_NUM = u\"\u7b2c{0}\u6b21\u6392\u961f\u4e2d,\u8bf7\u8010\u5fc3\u7b49\u5f85\"\n    WAIT_ORDER_SUB_FAIL = u\"\u8ba2\u5355\u63d0\u4ea4\u5931\u8d25\uff01,\u6b63\u5728\u91cd\u65b0\u5237\u7968\"\n\n    CANCEL_ORDER_SUCCESS = u\"\u6392\u961f\u8d85\u65f6\uff0c\u5df2\u4e3a\u60a8\u81ea\u52a8\u53d6\u6d88\u8ba2\u5355\uff0c\u8ba2\u5355\u7f16\u53f7: {0}\"\n    CANCEL_ORDER_FAIL = u\"\u6392\u961f\u8d85\u65f6\uff0c\u53d6\u6d88\u8ba2\u5355\u5931\u8d25\uff0c \u8ba2\u5355\u53f7{0}\"\n\n    REST_TIME = u\"12306\u4f11\u606f\u65f6\u95f4\uff0c\u672c\u7a0b\u5e8f\u81ea\u52a8\u505c\u6b62,\u660e\u5929\u65e9\u4e0a6\u70b9\u5c06\u81ea\u52a8\u8fd0\u884c\"\n    REST_TIME_PAST = u\"\u4f11\u606f\u65f6\u95f4\u5df2\u8fc7\uff0c\u91cd\u65b0\u5f00\u542f\u68c0\u7968\u529f\u80fd\"\n\n    LOGIN_SESSION_FAIL = u\"\u7528\u6237\u68c0\u67e5\u5931\u8d25\uff1a{0}\uff0c\u53ef\u80fd\u672a\u767b\u5f55\uff0c\u53ef\u80fdsession\u5df2\u7ecf\u5931\u6548, \u6b63\u5728\u91cd\u65b0\u767b\u5f55\u4e2d\"\n", "config/emailConf.py": "# -*- coding: utf8 -*-\nimport socket\n__author__ = 'MR.wen'\nimport TickerConfig\nfrom email.header import Header\nfrom email.mime.text import MIMEText\nimport smtplib\n\n\ndef sendEmail(msg):\n    \"\"\"\n    \u90ae\u4ef6\u901a\u77e5\n    :param str: email content\n    :return:\n    \"\"\"\n    try:\n        if TickerConfig.EMAIL_CONF[\"IS_MAIL\"]:\n            sender = TickerConfig.EMAIL_CONF[\"email\"]\n            receiver = TickerConfig.EMAIL_CONF[\"notice_email_list\"]\n            subject = '\u606d\u559c\uff0c\u60a8\u5df2\u8ba2\u7968\u6210\u529f'\n            username = TickerConfig.EMAIL_CONF[\"username\"]\n            password = TickerConfig.EMAIL_CONF[\"password\"]\n            host = TickerConfig.EMAIL_CONF[\"host\"]\n            s = \"{0}\".format(msg)\n\n            msg = MIMEText(s, 'plain', 'utf-8')  # \u4e2d\u6587\u9700\u53c2\u6570\u2018utf-8\u2019\uff0c\u5355\u5b57\u8282\u5b57\u7b26\u4e0d\u9700\u8981\n            msg['Subject'] = Header(subject, 'utf-8')\n            msg['From'] = sender\n            msg['To'] = receiver\n\n            try:\n                smtp = smtplib.SMTP_SSL(host)\n                smtp.connect(host)\n            except socket.error:\n                smtp = smtplib.SMTP()\n                smtp.connect(host)\n            smtp.connect(host)\n            smtp.login(username, password)\n            smtp.sendmail(sender, receiver.split(\",\"), msg.as_string())\n            smtp.quit()\n            print(u\"\u90ae\u4ef6\u5df2\u901a\u77e5, \u8bf7\u67e5\u6536\")\n    except Exception as e:\n        print(u\"\u90ae\u4ef6\u914d\u7f6e\u6709\u8bef{}\".format(e))\n\n\nif __name__ == '__main__':\n    sendEmail(1)", "config/__init__.py": "", "config/pushbearConf.py": "# -*- coding: utf8 -*-\nimport TickerConfig\nfrom config.urlConf import urls\nfrom myUrllib.httpUtils import HTTPClient\n\nPUSH_BEAR_API_PATH = \"https://pushbear.ftqq.com/sub\"\n\n\ndef sendPushBear(msg):\n    \"\"\"\n    pushBear\u5fae\u4fe1\u901a\u77e5\n    :param str: \u901a\u77e5\u5185\u5bb9 content\n    :return:\n    \"\"\"\n    if TickerConfig.PUSHBEAR_CONF[\"is_pushbear\"] and TickerConfig.PUSHBEAR_CONF[\"send_key\"].strip() != \"\":\n        try:\n            sendPushBearUrls = urls.get(\"Pushbear\")\n            data = {\n                \"sendkey\": TickerConfig.PUSHBEAR_CONF[\"send_key\"].strip(),\n                \"text\": \"\u6613\u884c\u8d2d\u7968\u6210\u529f\u901a\u77e5\",\n                \"desp\": msg\n            }\n            httpClint = HTTPClient(0)\n            sendPushBeaRsp = httpClint.send(sendPushBearUrls, data=data)\n            if sendPushBeaRsp.get(\"code\") is 0:\n                print(u\"\u5df2\u4e0b\u53d1 pushbear \u5fae\u4fe1\u901a\u77e5, \u8bf7\u67e5\u6536\")\n            else:\n                print(sendPushBeaRsp)\n        except Exception as e:\n            print(u\"pushbear \u914d\u7f6e\u6709\u8bef {}\".format(e))\n    else:\n        pass\n\n\nif __name__ == '__main__':\n    sendPushBear(1)\n", "config/logger.py": "#coding: utf-8\n\nimport os\nimport time\nimport logging\n\nfrom config import configCommon\n\nlogger = None\nloggerHandler = None\ndateStr = '' #\u9ed8\u8ba4\u62e5\u6709\u65e5\u671f\u540e\u7f00\nsuffix = '' #\u9664\u4e86\u65e5\u671f\u5916\u7684\u540e\u7f00\n\ndef setSuffix(s):\n\tglobal suffix\n\tsuffix = s\n\ndef getTodayDateStr():\n\treturn time.strftime(\"%Y-%m-%d\", time.localtime(configCommon.getNowTimestamp()))\n\ndef setDateStr(s):\n\tglobal dateStr\n\tdateStr = s\n\ndef isAnotherDay(s):\n\tglobal dateStr\n\treturn dateStr != s\n\ndef getLogFile():\n\tglobal dateStr, suffix\n\trtn = os.path.join(configCommon.getLogDir(), dateStr)\n\tif suffix:\n\t\trtn += \"_\" + suffix\n\treturn rtn + \".log\"\n\ndef log(msg, func = \"info\"):\n\tglobal logger\n\tif not logger:\n\t\tlogger = logging.getLogger()\n\t\tlogger.setLevel(logging.INFO)\n\n\ttodayStr = getTodayDateStr()\n\tif isAnotherDay(todayStr):\n\t\tsetDateStr(todayStr)\n\t\tlogger.removeHandler(loggerHandler)\n\t\t\n\t\tfh = logging.FileHandler(getLogFile())\n\t\tfm = logging.Formatter(u'[%(asctime)s][%(levelname)8s] --- %(message)s (%(filename)s:%(lineno)s)')\n\t\tfh.setFormatter(fm)\n\n\t\tlogger.addHandler(fh)\n\n\tlevels = {\n\t\t\"debug\": logger.debug,\n\t\t\"info\": logger.info,\n\t\t\"warning\": logger.warning,\n\t\t\"error\": logger.error,\n\t\t\"critical\": logger.critical\n\t}\n\n\tlevels[func](msg)", "config/AutoSynchroTime.py": "# coding=utf-8\nimport os\nimport platform\n\nimport ntplib\nimport datetime\n\n\ndef autoSynchroTime():\n    \"\"\"\n    \u540c\u6b65\u5317\u4eac\u65f6\u95f4\uff0c\u6267\u884c\u65f6\u5019\uff0c\u8bf7\u52a1\u5fc5\u7528sudo\uff0csudo\uff0csudo \u6267\u884c\uff0c\u5426\u5219\u4f1a\u62a5\u6743\u9650\u9519\u8bef\uff0cwindows\u6253\u5f00ide\u6216\u8005cmd\u8bf7\u7528\u7ba1\u7406\u5458\u8eab\u4efd\n    :return:\n    \"\"\"\n    c = ntplib.NTPClient()\n\n    hosts = ['ntp1.aliyun.com', 'ntp2.aliyun.com', 'ntp3.aliyun.com', 'ntp4.aliyun.com', 'cn.pool.ntp.org']\n\n    print(u\"\u6b63\u5728\u540c\u6b65\u65f6\u95f4\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f8530\u79d2\u5de6\u53f3\uff0c\u5982\u679c\u4e0b\u9762\u6709\u9519\u8bef\u53d1\u9001\uff0c\u53ef\u4ee5\u5ffd\u7565\uff01\uff01\")\n    print(u\"\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4{}\".format(str(datetime.datetime.now())[:22]))\n    system = platform.system()\n    if system == \"Windows\":  # windows \u540c\u6b65\u65f6\u95f4\u672a\u6d4b\u8bd5\u8fc7\uff0c\u53c2\u8003\u5730\u5740\uff1ahttps://www.jianshu.com/p/92ec15da6cc3\n        for host in hosts:\n            os.popen('w32tm /register')\n            os.popen('net start w32time')\n            os.popen('w32tm /config /manualpeerlist:\"{}\" /syncfromflags:manual /reliable:yes /update'.format(host))\n            os.popen('ping -n 3 127.0.0.1 >nul')\n            sin = os.popen('w32tm /resync')\n            if sin is 0:\n                break\n    else:  # mac\u540c\u6b65\u5730\u5740\uff0c\u5982\u679cntpdate\u672a\u5b89\u88c5\uff0cbrew install ntpdate    linux \u5b89\u88c5 yum install -y ntpdate\n        for host in hosts:\n            sin = os.popen('ntpdate {}'.format(host))\n            if sin is 0:\n                break\n    print(u\"\u540c\u6b65\u540e\u65f6\u95f4:{}\".format(str(datetime.datetime.now())[:22]))\n\n\nif __name__ == '__main__':\n    autoSynchroTime()", "myUrllib/MySocketUtils.py": "# coding=utf-8\nimport json\nimport socket\nimport re\n# s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# s.connect(('183.232.189.31', 80))\n# get_str = 'GET {0} HTTP/1.1\\r\\nConnection: close\\r\\n' \\\n#           'Host: %s\\r\\n' \\\n#           'User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36' \\\n#           '\\r\\nAccept: */*\\r\\n' \\\n#           '\\r\\n'\n# post_str = \"POST {0} HTTP/1.1\\r\\n\" \\\n#            \"Host: kyfw.12306.cn\\r\\n\" \\\n#            \"Connection: close\\r\\n\"\\\n#            \"Origin: https://kyfw.12306.cn\\r\\n\" \\\n#            \"X-Requested-With: XMLHttpRequest\\r\\n\" \\\n#            \"Referer: https://kyfw.12306.cn/otn/leftTicket/init\\r\\n\" \\\n#            \"Accept-Language: zh-CN,zh;q=0.9,en;q=0.8\\r\\n\" \\\n#            \"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\\r\\n\" \\\n#            \"Accept: application/json, text/javascript, */*; q=0.01\\r\\n\" \\\n#            \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0.1 Safari/604.3.5\\r\\n\" \\\n#            \"Content-Length: 9\\r\\n\"\\\n#            \"Cookie: _passport_session=a459aba69761497eb31de76c27795e999613; _passport_ct=9116b2cb0bf443e1a01d22ac8c1ae449t5007; route=9036359bb8a8a461c164a04f8f50b252; BIGipServerpool_passport=200081930.50215.0000; BIGipServerotn=484704778.64545.0000\\r\\n\\n\"\\\n#            \"appid=otn\\r\\n\"\n# # s.sendall(get_str.format(\"https://kyfw.12306.cn/otn/resources/login.html\"))\n# s.sendall(post_str.format(\"https://kyfw.12306.cn/passport/web/auth/uamtk\"))\nfrom config.urlConf import urls\n\n\ndef default_get_data():\n    \"\"\"\n    get\u8bf7\u6c42\u9ed8\u8ba4\u7ec4\u88c5\u5b57\u7b26\u4e32\n    \u9700\u8981\u62fc\u63a5\u7684\u5b57\u7b26\u4e32\n    -- url \u53d1\u9001\u8bf7\u6c42\u7684\u5168\u8fde\u63a5\n    :return:\n        \"\"\"\n    return 'GET {0} HTTP/1.1\\r\\nConnection: close\\r\\n' \\\n           'Host: kyfw.12306.cn\\r\\n' \\\n           \"Referer: {1}\\r\\n\" \\\n           'User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36' \\\n           '\\r\\nAccept: */*\\r\\n' \\\n           \"Cookie: {2}\\r\\n\\n\"\\\n           '\\r\\n'\n    # return 'GET {0} HTTP/1.1\\r\\nConnection: close\\r\\n' \\\n    #       'Host: kyfw.12306.cn\\r\\n' \\\n    #       'User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36' \\\n    #       '\\r\\nAccept: */*\\r\\n' \\\n    #       '\\r\\n'\n\n\ndef default_post_data():\n    \"\"\"\n    post\u8bf7\u6c42\u9ed8\u8ba4\u7ec4\u88c5\u5b57\u7b26\u4e32\n    \u9700\u8981\u62fc\u63a5\u7684\u5b57\u7b26\u4e32\n    -- url \u53d1\u9001\u8bf7\u6c42\u7684\u5168\u8fde\u63a5\n    -- Referer \u8bf7\u6c42\u9875\u9762\u6765\u6e90\n    -- Content-Length: body \u957f\u5ea6\n    -- Cookie \u9875\u9762\u8bf7\u6c42\u7684\u8eab\u4efd\u8ba4\u8bc1\n    -- appid \u63a5\u53e3\u8bf7\u6c42\u62a5\u6587\n    :return:\n    \"\"\"\n    return \"POST https://kyfw.12306.cn{0} HTTP/1.1\\r\\n\" \\\n           \"Host: kyfw.12306.cn\\r\\n\" \\\n           \"Connection: close\\r\\n\"\\\n           \"Origin: https://kyfw.12306.cn\\r\\n\" \\\n           \"X-Requested-With: XMLHttpRequest\\r\\n\" \\\n           \"Referer: {3}\\r\\n\" \\\n           \"Accept-Language: zh-CN,zh;q=0.9,en;q=0.8\\r\\n\" \\\n           \"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\\r\\n\" \\\n           \"Accept: application/json, text/javascript, */*; q=0.01\\r\\n\" \\\n           \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0.1 Safari/604.3.5\\r\\n\" \\\n           \"Content-Length: {2}\\r\\n\"\\\n           \"Cookie: {4}\\r\\n\\n\"\\\n           \"{1}\\r\\n\"\\\n           # \"\\r\\n\"\n\n\nclass socketUtils:\n    def __init__(self, host, port=80):\n        self.host = host\n        self.port = port\n        self.s = self.connect_socket(self.host, self.port)\n\n    def connect_socket(self, host, port):\n        \"\"\"\n        \u8fde\u63a5socket\n        :param host:\n        :param port:\n        :return:\n        \"\"\"\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((host if isinstance(host, str) else str(host),\n                   port if isinstance(port, int) else int(port)))\n        return s\n\n    def close_s(self):\n        self.s.close()\n\n    # def send(self, urls, Cookie=None, data=None):\n    #     \"\"\"\n    #     \u53d1\u9001\u8bf7\u6c42\n    #     :param urls:\n    #     :param data:\n    #     :param cookie:\n    #     :return:\n    #     \"\"\"\n    #     url = urls.get(\"req_url\", \"\")\n    #     Referer = urls.get(\"Referer\", \"\")\n    #     if urls.get(\"req_type\", \"get\") == \"post\":\n    #         Content_Length = len(data)\n    #     Cookie = \"tk=pnidlCoFy2B7wxO_X_pESbrkZFSq3OtVA_xzXwuba2a0; JSESSIONID=C6144324BFCE36AC5082E543E934E8B3; current_captcha_type=Z; _jc_save_fromDate=2018-08-03; _jc_save_fromStation=%u6DF1%u5733%2CSZQ; _jc_save_toDate=2018-08-03; _jc_save_toStation=%u957F%u6C99%2CCSQ; _jc_save_wfdc_flag=dc; ten_key=b5L6aMWfnzBm8CgQe8pcAKQsmVBS2PYH; BIGipServerpool_passport=166527498.50215.0000; BIGipServerotn=165937674.50210.0000; route=c5c62a339e7744272a54643b3be5bf64; RAIL_DEVICEID=fC-yepiUqNjsBiRvtLBXW4JqQmabCfB9QxI3FifJZK9YDRsImhJLSz4sAQ4HiGF7uQAFdFyISg6jA7KAhtpEldJV9ZMNsn6Dzm_psA5CBDwSNfiORf42w-LIRvkeGvdKFtegZwWGlkA2fVuEWKu-1xAYdCXRnsMD; RAIL_EXPIRATION=1533420302032; _jc_save_detail=true\"\n    #     if data:\n    #         send_value = default_post_data().format(url,\n    #                                                 data,\n    #                                                 Content_Length,\n    #                                                 Referer,\n    #                                                 Cookie\n    #                                                 )\n    #         print(\"send_value: \" + send_value)\n    #         self.s.sendall(send_value)\n    #     else:\n    #         self.s.sendall(default_get_data().format(url,\n    #                                                  Referer,\n    #                                                  Cookie))\n    #     total_data = \"\"\n    #     while 1:\n    #         data = self.s.recv(1024)\n    #         total_data += data\n    #         if not data:\n    #             break\n    #     self.close_s()\n    #     print(total_data)\n    #     return self.recv_data(total_data)\n\n    def recv_data(self, r_data):\n        cookie = self.get_cookie(r_data)\n        status_code = self.get_status_code(r_data)\n        r_body = self.get_rep_body(r_data)\n        return {\n            \"cookie\": cookie,\n            \"status_code\": status_code,\n            \"r_body\": r_body\n        }\n\n    @staticmethod\n    def get_cookie(recv_data):\n        \"\"\"\n        \u63d0\u53d6cookie\n        :param recv_data:\n        :return:\n        \"\"\"\n        if not isinstance(recv_data, str):\n            recv_data = str(recv_data)\n        cookies_re = re.compile(r\"Set-Cookie: (\\S+);\")\n        cookies = re.findall(cookies_re, recv_data)\n        return \"; \".join(cookies)\n\n    @staticmethod\n    def get_status_code(recv_data):\n        \"\"\"\n        \u83b7\u53d6\u72b6\u6001\u7801\n        :return:\n        \"\"\"\n        if not isinstance(recv_data, str):\n            recv_data = str(recv_data)\n        http_code_re = re.compile(r\"HTTP/1.1 (\\S+) \")\n        status_code = re.search(http_code_re, recv_data).group(1)\n        return status_code\n\n    @staticmethod\n    def get_rep_body(recv_data):\n        \"\"\"\n        \u83b7\u53d6\u8fd4\u56de\u503c\n        :param recv_data:\n        :return:\n        \"\"\"\n        if not isinstance(recv_data, str):\n            recv_data = str(recv_data)\n        if recv_data.find(\"{\") != -1 and recv_data.find(\"}\") != -1:\n            data = json.loads(recv_data.split(\"\\n\")[-1])\n            return data\n        else:\n            print(recv_data)\n\n\nif __name__ == \"__main__\":\n    so = socketUtils('183.232.189.31', 80)\n    train_date = \"2018-08-03\"\n    from_station = \"SZQ\"\n    to_station = \"CSQ\"\n    urls[\"select_url\"][\"req_url\"] = \"https://kyfw.12306.cn\" + urls[\"select_url\"][\"req_url\"].format(train_date, from_station, to_station)\n    result = so.send(urls=urls[\"select_url\"])\n    print(result)\n\n    so = socketUtils('183.232.189.31', 80)\n\n    data = \"secretStr=Vgo534nDZiCH8NCvyEPcGepzJoRCjvYr34gKFv5CW1K1XtM6mtKHoiFPjUYvaVKoe06SMhUUpT%2FK%0AxIEIsBD4zHgJPpVyKiTPx80y6OCWhNgcKjib2LLMXMJfgTgh0RKPISjkDjVFmO9p905O%2FegDeKjp%0A1fhIeqCuYraHjNhI0PjQY39BAY4AHLzW0iGgDq8b%2FtpyOY8Td2XfIWNZJCWzgyPkNXOk0HUguB2G%0AKh2T8nlko6zb5ra%2B%2BA%3D%3D&train_date=2018-08-03&back_train_date=2018-08-03&tour_flag=dc&purpose_codes=ADULT&query_from_station_name=\u6df1\u5733&query_to_station_name=\u957f\u6c99&undefined\"\n    result1 = so.send(urls=urls[\"submit_station_url\"], data=data)\n    print(result1)\n    # so = socketUtils('183.232.189.31', 80)\n    # result = so.send(url=\"https://kyfw.12306.cn/passport/web/login\", s_data=\"\")\n    # print(result)", "myUrllib/httpUtils.py": "# -*- coding: utf8 -*-\nimport json\nimport random\nimport socket\nfrom collections import OrderedDict\nfrom time import sleep\nimport requests\nfrom fake_useragent import UserAgent\nimport TickerConfig\nfrom agency.agency_tools import proxy\nfrom config import logger\n\n\ndef _set_header_default():\n    header_dict = OrderedDict()\n    # header_dict[\"Accept\"] = \"application/json, text/plain, */*\"\n    header_dict[\"Accept-Encoding\"] = \"gzip, deflate\"\n    header_dict[\n        \"User-Agent\"] = _set_user_agent()\n    header_dict[\"Content-Type\"] = \"application/x-www-form-urlencoded; charset=UTF-8\"\n    header_dict[\"Origin\"] = \"https://kyfw.12306.cn\"\n    header_dict[\"Connection\"] = \"keep-alive\"\n    return header_dict\n\n\ndef _set_user_agent():\n    # try:\n    #     user_agent = UserAgent(verify_ssl=False).random\n    #     return user_agent\n    # except:\n    #     print(\"\u8bf7\u6c42\u5934\u8bbe\u7f6e\u5931\u8d25\uff0c\u4f7f\u7528\u9ed8\u8ba4\u8bf7\u6c42\u5934\")\n    #     return 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.' + str(\n    #         random.randint(5000, 7000)) + '.0 Safari/537.36'\n    return \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\"\n\n\nclass HTTPClient(object):\n\n    def __init__(self, is_proxy, cdnList=None):\n        \"\"\"\n        cdnList\u8bd5\u8bd5\u5207\u6362\u4e0d\u5305\u62ec\u67e5\u8be2\u7684cdn\uff0c\u9632\u6b62\u67e5\u8be2cdn\u6c61\u67d3\u767b\u9646\u548c\u4e0b\u5355cdn\n        :param method:\n        :param headers: Must be a dict. Such as headers={'Content_Type':'text/html'}\n        \"\"\"\n        self.initS()\n        self._cdn = None\n        self.cdnList = cdnList\n        self._proxies = None\n        if is_proxy is 1:\n            self.proxy = proxy()\n            self._proxies = self.proxy.setProxy()\n            # print(u\"\u8bbe\u7f6e\u5f53\u524d\u4ee3\u7406ip\u4e3a {}, \u8bf7\u6ce8\u610f\u4ee3\u7406ip\u662f\u5426\u53ef\u7528\uff01\uff01\uff01\uff01\uff01\u8bf7\u6ce8\u610f\u4ee3\u7406ip\u662f\u5426\u53ef\u7528\uff01\uff01\uff01\uff01\uff01\u8bf7\u6ce8\u610f\u4ee3\u7406ip\u662f\u5426\u53ef\u7528\uff01\uff01\uff01\uff01\uff01\".format(self._proxies))\n\n    def initS(self):\n        self._s = requests.Session()\n        self._s.headers.update(_set_header_default())\n        return self\n\n    def set_cookies(self, kwargs):\n        \"\"\"\n        \u8bbe\u7f6ecookies\n        :param kwargs:\n        :return:\n        \"\"\"\n        for kwarg in kwargs:\n            for k, v in kwarg.items():\n                self._s.cookies.set(k, v)\n\n    def get_cookies(self):\n        \"\"\"\n        \u83b7\u53d6cookies\n        :return:\n        \"\"\"\n        return self._s.cookies.values()\n\n    def del_cookies(self):\n        \"\"\"\n        \u5220\u9664\u6240\u6709\u7684key\n        :return:\n        \"\"\"\n        self._s.cookies.clear()\n\n    def del_cookies_by_key(self, key):\n        \"\"\"\n        \u5220\u9664\u6307\u5b9akey\u7684session\n        :return:\n        \"\"\"\n        self._s.cookies.set(key, None)\n\n    def setHeaders(self, headers):\n        self._s.headers.update(headers)\n        return self\n\n    def resetHeaders(self):\n        self._s.headers.clear()\n        self._s.headers.update(_set_header_default())\n\n    def getHeadersHost(self):\n        return self._s.headers[\"Host\"]\n\n    def setHeadersHost(self, host):\n        self._s.headers.update({\"Host\": host})\n        return self\n\n    def setHeadersUserAgent(self):\n        self._s.headers.update({\"User-Agent\": _set_user_agent()})\n\n    def getHeadersUserAgent(self):\n        return self._s.headers[\"User-Agent\"]\n\n    def getHeadersReferer(self):\n        return self._s.headers[\"Referer\"]\n\n    def setHeadersReferer(self, referer):\n        self._s.headers.update({\"Referer\": referer})\n        return self\n\n    @property\n    def cdn(self):\n        return self._cdn\n\n    @cdn.setter\n    def cdn(self, cdn):\n        self._cdn = cdn\n\n    def send(self, urls, data=None, **kwargs):\n        \"\"\"send request to url.If response 200,return response, else return None.\"\"\"\n        allow_redirects = False\n        is_logger = urls.get(\"is_logger\", False)\n        req_url = urls.get(\"req_url\", \"\")\n        re_try = urls.get(\"re_try\", 0)\n        s_time = urls.get(\"s_time\", 0)\n        is_cdn = urls.get(\"is_cdn\", False)\n        is_test_cdn = urls.get(\"is_test_cdn\", False)\n        error_data = {\"code\": 99999, \"message\": u\"\u91cd\u8bd5\u6b21\u6570\u8fbe\u5230\u4e0a\u9650\"}\n        if data:\n            method = \"post\"\n            self.setHeaders({\"Content-Length\": \"{0}\".format(len(data))})\n        else:\n            method = \"get\"\n            self.resetHeaders()\n        if TickerConfig.RANDOM_AGENT is 1:\n            self.setHeadersUserAgent()\n        self.setHeadersReferer(urls[\"Referer\"])\n        if is_logger:\n            logger.log(\n                u\"url: {0}\\n\u5165\u53c2: {1}\\n\u8bf7\u6c42\u65b9\u5f0f: {2}\\n\".format(req_url, data, method))\n        self.setHeadersHost(urls[\"Host\"])\n        if is_test_cdn:\n            url_host = self._cdn\n        elif is_cdn:\n            if self._cdn:\n                # print(u\"\u5f53\u524d\u8bf7\u6c42cdn\u4e3a{}\".format(self._cdn))\n                url_host = self._cdn\n            else:\n                url_host = urls[\"Host\"]\n        else:\n            url_host = urls[\"Host\"]\n        http = urls.get(\"httpType\") or \"https\"\n        for i in range(re_try):\n            try:\n                # sleep(urls[\"s_time\"]) if \"s_time\" in urls else sleep(0.001)\n                sleep(s_time)\n                try:\n                    requests.packages.urllib3.disable_warnings()\n                except:\n                    pass\n                response = self._s.request(method=method,\n                                           timeout=5,\n                                           proxies=self._proxies,\n                                           url=http + \"://\" + url_host + req_url,\n                                           data=data,\n                                           allow_redirects=allow_redirects,\n                                           verify=False,\n                                           **kwargs)\n                if response.status_code == 200 or response.status_code == 302:\n                    if urls.get(\"not_decode\", False):\n                        return response.content\n                    if response.content:\n                        if is_logger:\n                            logger.log(\n                                u\"\u51fa\u53c2\uff1a{0}\".format(response.content.decode()))\n                        if urls[\"is_json\"]:\n                            return json.loads(\n                                response.content.decode() if isinstance(response.content, bytes) else response.content)\n                        else:\n                            return response.content.decode(\"utf8\", \"ignore\") if isinstance(response.content,\n                                                                                           bytes) else response.content\n                    else:\n                        print(f\"url: {urls['req_url']}\u8fd4\u56de\u53c2\u6570\u4e3a\u7a7a, \u63a5\u53e3\u72b6\u6001\u7801: {response.status_code}\")\n\n                        logger.log(\n                            u\"url: {} \u8fd4\u56de\u53c2\u6570\u4e3a\u7a7a\".format(urls[\"req_url\"]))\n                        if self.cdnList:\n                            # \u5982\u679c\u4e0b\u5355\u6216\u8005\u767b\u9646\u51fa\u73b0cdn 302\u7684\u60c5\u51b5\uff0c\u7acb\u9a6c\u5207\u6362cdn\n                            url_host = self.cdnList.pop(random.randint(0, 4))\n                        continue\n                else:\n                    sleep(urls[\"re_time\"])\n            except (requests.exceptions.Timeout, requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError):\n                pass\n            except socket.error:\n                pass\n        return error_data\n", "myUrllib/__init__.py": ""}